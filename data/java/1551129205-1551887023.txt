Honestly, I would just go with a plain old stupid relational database based solution. Hosted solution would be preferred - AWS RDS is good. The Spring Boot Cloud ecosystem has some interesting looking things wrt workflow - might be worth looking into. See for example https://www.baeldung.com/spring-activiti
Dear JDK, I'm going to skip all intermediate releases and wait for the next lts. Yours truly the software industry
I can't believe it, but I'am in the same boat as you. It really makes me doubt my coding abilities. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/auqu30/stateoftheart_build_tooling/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Just a few notes on why this might be useful: * There's an npm module with no Java equivalent. The motivating example for me is the DAT protocol, which only has a javascript implementation, but there are others I've encountered. * Because you have a NodeJS server talking to a Java server and would like to consolidate them into a single VM to avoid interop and dual-VM overheads. This could add up to a lot of resources. * Because you would like to port a NodeJS based codebase to Java, Kotlin, etc but can't make the leap all at once, so you need to rewrite one part at a time, and can't or don't want to "port" by introducing a network protocol between the two sides. * Because you're a JavaScript developer and want to access cool Java libraries from JS-world. Mostly, I did it to experiment with what the newest GraalVM can do.
no. not vaadin
Good work ! Might want to add this to build.gradle so it can be imported in Eclipse without errors on module-info.java (which are otherwise trivially fixed with 'Quick Fix'): plugins { id 'java' id 'application' id 'eclipse' ... } eclipse { classpath { file { whenMerged { entries.findAll { it.properties.kind.equals('lib') }.each { it.entryAttributes['module'] = 'true' } } } } }
Codegym.cc
AWS supports FIFO sqs queues for a slightly higher cost. Sqs almost never goes down and has extremely high reliability (6 9s)
Not really java specific, nor a course, but when trying a new language, I personally tend to use [CodingGame](https://www.codingame.com) (if said langage is supported there) to get a feel for it.
We have a 500 kloc software running on JDK8. Swing and FX. Took two hours to find and replace libraries when I tried with JDK11 to get the client and server version running. Biggest bummer was the handling of the HDPI. With JDK8 I had to calculate window sizes and many other things (border sizes, gaps, etc..) with my own custom methods, but it seems that those are now handled automatically and only the custom graphics remain (understandably so) as manually calculated. Did not yet have time to fix the issue with icons. With JDK8 I used 16x16 for normal DPI and 32x32 for HDPI. On JDK11 the 32x32 icons used on HDPI were somehow scaled to even bigger ones? I suspect that going through every functionality and testing every library will take at least a week or two. The build system will need an overhaul too. I'm not complaining though. First versions of the software were run on JDK1.3. It's been a long road basically without any maintainability issues.
We use cookies and disruptor. Write your own using a vanilla queue from the jdk.
Mind sending a PR?
Spring.io
Not bad at all for such a large jump and non-trivial project.
Have you looked at AWS Step Functions?
Udemy (Chad Darby and Tim Bulchaka), Spring in Action (Shitty book), spring docs are actually really well written. I'm a visual learner though, so the docs wouldn't make much sense without the foundation the videos from Udemt gave me
Thinking about this more, I think step functions are exactly what the OP wants. Either that or SWF.
Noob question: when a producer pushes a message, how's the consumer notified about it? I mean does the consumer constantly pull the mq server or is there any mechanism through which server can directly deliver the message to the interested consumers? 
Pluralsight? Also, little disappointed that Tim hasn't continued to update his new Spring modules for about 1/2 year now. That's a helluva long time to wait for new content. :(
Quartz, you can have a separate DB for it if you’re concerned about dB overload. Also given fine tuning options as you scale
SQS is a pull-based model. Clients need to set up pollers that repeatedly poll the queue for new messages (preferably with a dedicated threadpool). SQS isn't meant for directly invoking APIs. The mechanism you described isnt offered through SQS. On a separate note that call pattern can quickly brown out your local machines if the request pattern is bursty. However if you do want this kind of behaviour, you can set up a lambda that hooks up to your SQS queues, and invokes an API on your local machines. 
BTW, before you consider SQS. Keep in mind that typically as a consumer of SQS, you will have multiple machines with multiple threads polling your queue for work simultaneously. That being said, if you add messages in sequence to the queue, there is no guarantee that they will get executed and resolve in sequence even with a FIFO queue. As another poster below mentioned, you should consider using AWS SWF or AWS Step Functions for this kind of problem that requires stateful ordering. 
&gt; Why would I want to write all the SQL for so many simple tasks? That's what I thought before I got decent writing sql. Then I realized the time it takes to write ORM annotations is the same (if not more) than the time it takes to just write the sql. 
At work, we just use JMS for Java stuff and IBM MQ for the rest like talking to non-java system like .net just sharing 🤗
Thanks this looks promising 
Give me record, value and fibers. I won’t ask for more... ok that’s what I thought when lambdas were released :) Java keeps rocking. 
In time! We get the preview of [switch expressions](http://openjdk.java.net/jeps/325) during this round, as well as [other features](https://openjdk.java.net/projects/jdk/12/).
I understand! I actually think that huge parts of Spring Security _are_ a mess and very hard to debug. 1-2 hours seems almost on the low-end, I literally spent days debugging 'random stuff' there. Same goes for bean initialisation. 
Seriously, maven is great. Just keep using it. I almost never have to touch its XML once I get the build working as expected. I haven't seen this happening with ANY other build tool. It could be better and of course there is room for improvements: more concise and let us reuse some bits and pieces easily - but it does pretty much any job cleanly. As I once read somewhere: build scripts in general are like a hydra with different heads and you are never sure which one to attack. Maven is a single-headed monster. It's still a monster but you know precisely where to attack. 
I thought you could configure Redis to do append only file based writes on every transaction, at the cost of slowness. Is that not true?
This article gives this exemple and nobody see how terrible this is? public int hashCode() { return 31; }
You've failed to understand the release process. Only Oracle's commercial JDK has a LTS release. Everything else is community supported as long as the community is there to support it.
I was confused for a second until I opened the article. :) I'm grateful for Spring Boot's BOM allowing me to stick mostly to a set of dependencies that should work well together.
We had a similar use case for job vending, we used rabbimq for the same. 
https://www.baeldung.com/
I'd say just stick with Maven - never thought I'll be that guy, but here it is, repeated: just stick with Maven. Thing is, Maven is *very* mature, especially when you look at the plugin system you have there. I've really tried bazel, but I to this day was not able to make JUnit tests run. It's bad. Whenever you'll get to any advanced feature (e.g. annotation processing, Spring Boot repackaging, or generating code), you will have to roll your own, with significant amount of investment to even get things to work. Building java is not hard. Making it ready for productive work is.
&gt; unless they are going private with a fork of OpenJDK for supporting their own Oracle JDK LTS releases. Which they do. Look at this: https://bugs.openjdk.java.net/browse/JDK-8213583 You can see branches like 11.0.3 and 11.0.3-oracle.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If only there was some way to automagically migrate code from one to the other ...
We just wanted to try out Resilience4j :)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Try the spring starter guides [https://spring.io/guides](https://spring.io/guides) Look for video's by Josh Long would also be a nice alternative to get started.
&gt; "raw string literals to simplify multiline expressions" JEP 326 was dropped from JDK 12 two months ago. Something tells me that not a great deal of research went into this article...
Have you evaluated the both, please share if you have
Oh, sorry for misinforming. I was told that the Graal compiler jar includes a Truffle runtime thing that's not currently in the OpenJDK distributions. And that one is important. So I think including the compiler jar to upgrade the modulepath is going to be necessary for some time. (Technically, the OpenJDK project could decide to include the Truffle runtime too, but it's theirs decision if that's what they want to do.) 
Professional Java Programmer Tip # 13 - Learn Kotlin
Nice answer. Not.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We did not. We use Hystrix on production. 
There's a lot to be said for maturity in tools and languages. As much as developer always want to work on the bleeding edge, you actually rarely want to be there in a mission critical or commercial production environment. I want my languages and tools to be inheritly *boring*. I never want to be amongst the first adopting them - let others find and fix the problems. Therefore, Maven is still the tool of choice for most projects I work on.
I thought maybe it was an old article, but no, it's from last week.
&gt; To continue reading this article register now
Nevertheless, try changing your mind about Gradle, e.g. try it with Kotlin DSL. If standard approaches suit you, your build file will be quite minimal. And then you know that if something non-trivial comes up, you will have all the customizability of Gradle (the one you don't get with Maven or anything declarative).
AWS SQS is plenty stable for your use case, and it is easy to set up and configure. With a FIFO queue, you will have guarantees for the ordering, however, if you have multiple consumers, you will need to handle the fact that a different consumer can process data at different speeds, and thereby breaking the guarantee. This is the same with any event based system, more or less. There are architecure patterns to help with this, for example Event Sourcing / CQRS, however they are overkill for a simple solution, it would be better to make sure the order you process your queue doesn't really matter . Also making your services idempotent (that is a duplicate request makes the state the same as the first) is also a good idea.
Save yourself the bother and just check the list at https://openjdk.java.net/projects/jdk/12/
No, it's most definitely not. I don't have to do anything to do simple searches on primary keys. If I have a ton of objects mapped to tables that's a whole lot of SQL I don't have to write.
There's [Spring Cloud Data Flow](https://cloud.spring.io/spring-cloud-dataflow/). 
I've used SQS which has the benefits of using it with other AWS infrastructure like SNS. However I prefer to use Redis now as you get all the other functionality of Redis, which you will always need e.g. key stores, in memory databases, caching etc.
I also hate gradle files once they get to a certain complexity. I pretty much started with Gradle but have recently taught myself how to use Maven. Too bad it uses XML but overall it's very adequate.
It looks like he has videos on Kotlin too :)
And that makes sense. As a Java Developers we need to learn about Kotlin. It's compatibility with Java is outstanding. It already beat Java at Android platform. I am not saying that Java is dead, but for us, Java Developers, it is for sure a useful tip to learn Kotlin.
Does it still have the weird break-return syntax?
Yes. If you don’t use the arrow form, you use `break value;`.
If you're tired of xml verbosity and use idea check out this plugin https://plugins.jetbrains.com/plugin/10580-laconic-pom 
I don't want you to be right but you probably are
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I looked (very) quickly at things. Random thought: In your Server class, the constructor catches an IOException and just prints it to console. Doesn't this open up the possibility of constructing this class in an indeterminate state? I might personally allow the IOException to propagate by either not catching it or rethrowing it as a custom exception (as you are doing with your PortOutOfRangeException).
Contribute to an open source project. Hell, start with writing tests or java doc. When doing that and getting in touch with people on mailing list that are connected you can easily grow a network that can help you out. And if it doesn't help now, you will certainly benefit from it over time
I have yet to have a use case for running javascript on the VM. It is actually totally a mystery to me what people are using this for. Why would someone want to run javascript on the VM?
I see that you are using a null byte to indicate the end of a given message. I think this is fine for simple string based communication, as long as your library is advertised to have this as a limitation. If I wished to send a sequence of null bytes somewhere in the actual \*content\* of my message, your library would preclude this use case. If at some future point,you wished to allow for arbitrary streams of byte data, a popular solution is to modify your message structure so that the byte length of a message is the first field of each message (and this length field has a fixed size in bytes). Hope I didn't confuse you.
I’ve seen it used in scripting config files before, though that typically also supports Groovy.
In my case, enterprise apps that require some scripting. The actual Java nature of the application is never exposed to the end customer, but it's required that they add some business logic at various points. At that point, it's mainly a developer availability question. Javascript has a huge market share and there are a lot of Javascript developers. It's easy to find someone who knows how to write your business logic if you can do it in Javascript. It's also got a forgiving syntax, so amateurs can write some business logic without a lot of debugging.
&gt; Declarative. No programming The problem is that builds aren't declarative. You are always going to have tasks you need as a part of your build that need to do custom things. I find gradle to be the perfect balance between ANT and Maven. It gives you configuration by convention that maven gives you, but gives you the flexibility of ANT if you need to break out of the very strict box Maven puts you in. 
Di you ever looked at Frege? [https://github.com/Frege/frege](https://github.com/Frege/frege) Is you are into pure functions, then you must love Haskell, right? This is in some way Haskell for the JVM. Maybe worth looking at :) Btw. I loved the article.
&gt; WebObjects could go from nothing but an existing database to an admin CRUD web app with form validation and full language localization in just a few minutes. On the JVM if you want this just use Grails. 
I prefer Maven to Gradle but from time to time there are certain things you want to do and if you want to do them in Maven, it is too verbose and over complicated. For example ideally I wish it was possible to enable Spock and some other tools just by adding something like this to my pom.xml: ``` &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;spock-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/build&gt; ``` But instead I have to write this not-so-beautiful blob of configuration: ``` &lt;build&gt; &lt;plugins&gt; &lt;!-- Mandatory plugins for using Spock --&gt; &lt;plugin&gt; &lt;!-- The gmavenplus plugin is used to compile Groovy code. To learn more about this plugin, visit https://github.com/groovy/GMavenPlus/wiki --&gt; &lt;groupId&gt;org.codehaus.gmavenplus&lt;/groupId&gt; &lt;artifactId&gt;gmavenplus-plugin&lt;/artifactId&gt; &lt;version&gt;1.6&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;goal&gt;compileTests&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- Optional plugins for using Spock --&gt; &lt;!-- Only required if names of spec classes don't match default Surefire patterns (`*Test` etc.) --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.20.1&lt;/version&gt; &lt;configuration&gt; &lt;useFile&gt;false&lt;/useFile&gt; &lt;includes&gt; &lt;include&gt;**/*Test.java&lt;/include&gt; &lt;include&gt;**/*Spec.java&lt;/include&gt; &lt;/includes&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/build&gt; ``` I hope Maven developers introduce a more concise convention-over-configuration way of doing things like this. Also there is an open bug in IDEA related to `org.codehaus.gmavenplus`, as IDEA still only recognizes the old GMaven plugin: https://youtrack.jetbrains.com/issue/IDEA-119931 (🄿🄻🄴🄰🅂🄴 🅄🄿🅅🄾🅃🄴 🅃🄷🄴 🄱🅄🄶 🄸🄽 🅃🄷🄴🄸🅁 🄱🅄🄶 🅃🄰🄲🄺🄴🅁), so sometimes for personal projects I switch back to Gradle. Basically even though IDEA supports Maven, to understand GMavenPlus, it needs specialized code and logic. This is either due to a design issue in Maven in general, or GMavenPlus in particular. Now, unfortunately, Gradle in general has some similar issues. For example, to enable JUnit 5, I wish I could do something like this: ``` plugins { id "junit5" } ``` But instead here's what needs to be done: https://github.com/junit-team/junit5-samples/blob/r5.4.0/junit5-jupiter-starter-gradle/build.gradle Why is this bad? Because it is not consistent with how we can use JUnit 4.x: ``` dependencies { testCompile 'junit:junit:4.12' } ``` Or Spock: ``` dependencies { // mandatory dependencies for using Spock compile "org.codehaus.groovy:groovy-all:2.4.15" testCompile "org.spockframework:spock-core:1.2-groovy-2.4" } ``` For consistency, it should have been possible to enable JUnit 4, JUnit 5, and Spock respectively like this: ``` // Junit 4 test { useJUnit4() } // Junit 5 test { useJUnitPlatform() } // Junit 5 test { useSpock() } ``` Or maybe: ``` // Junit 4 plugins { id 'junit' } // Junit 5 plugins { id 'junit-platform' } // Junit 5 plugins { id 'spock' } ``` Or any other consistent way -- there should be only 1 pattern to enable a particular test framework, not a pattern per test framework. Gradle is a disaster -- from its support for publishing Maven artifacts to how it supports Artifactory to how abysmally slow it is. Who can solve this? To quote [apenwarr.ca/log/20190207](https://apenwarr.ca/log/20190207): &gt; It takes new ideas a long time to catch on - time that is mainly devoted to evolving the idea into something useful. This fact alone dumps most of the responsibility for early technical innovation in the laps of amateurs, who can afford to take the time. Only those who aren't trying to make money can afford to advance a technology that doesn't pay. Or maybe [Nassim Nicholas Taleb](https://twitter.com/nntaleb/status/1084598209593442305) ;) &gt; A friend, yesterday: &gt; &gt; ME "Long time. How are you doing?" &gt; HIM "Busy period. I have a lot to do. How about you?" &gt; ME "I am doing a lot, tons of things, because I have nothing to do."
Thanks! Will look into Frege.
&gt; If every table has a ton of FKs then good luck. In that case it is usually best not to map the relationship and just map the joining column as its type (int, long, etc) so hibernate doesn't query the relationship. This is especially true now that Hibernate supports ad-hoc joins, you can just write HQL to join the entities if/when you actually need the relationship. 
You should only upgrade to Java 12 with your eyes wide open to the risks involved. If you stay on Java 11 you are pretty much guaranteed to get 4 years of security upgrades from Red Hat and multiple distributions for zero-cost. Whereas, choosing Java 12 pretty much locks you into the release train, where you are required to upgrade your Java version every six months. While Java 11 to 12 may be easy, are you the kind of clairvoyant who can predict that upgrading Java 15 to 16 will also be as easy? And that Maven / Gradle / your dependencies / your server will be upgraded in a timely manner? Remember, you have a timeline of one month to be able to upgrade from one Java version to the next if you join the release train before the next security patch hits. I'd strongly encourage you to see here for a fuller analysis of the risks involved in using Java 12, and adopting the release train more generally: https://blog.joda.org/2018/10/adopt-java-12-or-stick-on-11.html
&gt; I don't have to do anything to do simple searches on primary keys. You shouldn't be doing read-only queries via entities if you care about performance. For read-only queries you should be writing HQL/JPQL and pulling out the columns you need. 
I don't like to prematurely optimize. Not a huge performance difference in select * vs selecting columns for a large majority of situations.
You could always go back to using Rhino. At this point, though, we don't know in which version Nashorn will be removed. If it's not removed in 12, you can still target JDK8-12 for runtime without issue. Additionally, I suppose it's possible that Nashorn will be available as a standalone jar (like the JavaEE components removed from 11).
&gt; In my case, enterprise apps that require some scripting. The actual Java nature of the application is never exposed to the end customer, but it's required that they add some business logic at various points. &gt; &gt; We're in the same boat. Currently we still use Nashorn but we have 'experimental' build that includes GraalJS. Its actually surprisingly easy to add it. Just add a couple of dependencies and change scripting engine name. The only downside is that it adds ~40mb to the size of distribution. Someone made a simple example here: https://github.com/graalvm/graal-js-jdk11-maven-demo
What about Scala?
Also, Java EE is now Jakarta EE, so that's what you'll be looking for.
Writing a whole bunch of @Entity @Id @Column annotations is the same or more eork than writing "select * from table_name". Simple joins are also about the same amount of typing as @ManyToOne @JoinColumn(name = "column")
Excellent article my fellow Hungarian! :)
Graal isn't just coming, it's here. Plenty of people use the Graal compiler in production, including e.g. Twitter, and it already outperforms Nashorn and has *way* more up to date language support for JS. The artefacts for graaljs and its truffle/etc. dependencies are on Maven today. You just have to run your standard JVM with a few command line options to enable the Graal compiler as your JIT. (Otherwise it falls-back to interpreted mode which is pretty slow.) Nashorn is deprecated for *future versions* of the JVM, but you can still use it safely on earlier versions for which it's already been released. For the later versions of the JVM just use Graal. https://github.com/graalvm/graal-js-jdk11-maven-demo I'm pretty sure Graal has support for the javax.script API built in, but if not it would be trivial to write your own service provider for a custom implementation of `ScriptEngineFactory` which forwards to the polyglot API. It also has a Nashorn compatibility mode to ease migration.
Easy way to plug server-side rendering of javascript into existing Java-based server infrastructure? That or to facilitate a simple user-facing scripting mechanism. Game engines for example love embedding as many scripting options as possible into the runtime.
There is a sizable performance difference involving hibernate's dirty checking which you don't need for read-only queries and is the main reason not to use entities for read-only queries. Also, it doesn't take as many columns as you might think before the performance difference between returning the columns you need vs returning all columns becomes measurable. &gt; I don't like to prematurely optimize. Avoiding premature optimizations doesn't mean what most programmers think it means: https://ubiquity.acm.org/article.cfm?id=1513451 
It's there as an option only to reduce unnecessary asymmetry with the existing syntax. Easier to teach new people the rules if they're internally consistent. Doesn't matter all that much as most people will want to use the arrow form instead regardless.
Not sure I trust random plugins to read the source code of my employer. Be careful.
\^ This. Unless you are working with a legacy Ant application of sorts... take a couple of minutes to learn maven basics, and keep learning the rest as you go. Manually managing your libraries/dependencies is as bad as it gets.
From what I understand Nashorn isn't being removed yet, just deprecated. It's marked as for removal but hasn't been planned to remove it yet, so you probably have a few more releases before you have to worry.
https://plugins.jetbrains.com/plugin/7495--ignore is a better plugin for .gitignore management. It includes support for templates using the GitHub patterns to get you up and running quickly.
Depending how complex or dynamic your scripts are - a custom DSL might be another for your usecases. I also had a case with an app where user-facing scripting was required, our problem at that time wasnt the deprecation of Nashorn though, but mostly the awful performance we achieved. We made a fully new concept using ANTLR to generate the boilerplate for our DSL, and re-implemented our engine. Our use-case was mostly small-ish scripts, but up to several thousands scripts being executed on one input. We observed huge load on the GC with the JavaScript/Nashorn implementation. You definitly lose how dynamic you can be using JavaScript - but you gain a lot more performance with less resource consumption. Also maintainability and readability was way better with the new language.
I like the rainbow bracket one.. what a genius idea and never occurred to me using color would be so useful here. I installed it and it seems as though it may not be working in my .go code, will play with java in a bit and see if I am missing something.
 ScriptEngine graaljsEngine = new ScriptEngineManager().getEngineByName("graal.js"); I am so happy to see this. Do you know if it's possible to backport GraalJS to JDK8? Last I heard, they were discouraging that in favor of running the entire stack on GraalVM vs. Hotspot.
Meh, by the time JDK 12 is out, Java will have enough language features to make Scala much less compelling in comparison (IMHO).
A bit of a side question: Are there any other languages other that can run on stock JDK trough JSR-223 same as JS? I've seen TruffleRuby but was unable to get it running.
100% exactly-once semantics are extremly hard, if not (close to) impossible. If your messages are not idempotent, but you really require exactly-once semantics, then you definitly should perform your own deduplication/locking. If you want to keep the messaging solution, I've had great success with RabbitMQ. Every step publishes its results into one queue being read by your consumer(s) for the subsequent steps, which would at least solve your issue of message duplication across consumers. Another queueing option with reliability would be Hazelcast, using all instances as a data grid. This should work as long as at least one instance is up, or you need explicit persistent queues, which can be provided using a provided implementation or a custom one. The queue performance and reliability is pretty good, just the startup and connection times are awful. Chronicle-Queue may be an option which uses off-heap memory mapped files for persistence *and* message transmission. The performance is extremely good, but relies on Unsafe and native memory allocation to work, and due to this may not work on all JVMs / OS / network configurations etc. Kafka may be also an option, but has quite a learning curve. I have not enough experience with Kafka to tell you more, but from what I know it sounds pretty good for your usecase. You should also check out Apache NiFi. Its basically a product where you can set up your data flows using a provided web frontend. Good ol' pipes and filters - your data flow is modelled in the UI using a directed graph of processors (filters) and connections between them (pipes). Theres a huge amount of provided processors (about 400-500), mostly being in/out integrations for various systems and protocols.
For those who use Maven I would recommend https://plugins.jetbrains.com/plugin/10580-laconic-pom . It folds Maven's boilerplate an saves your screen space.
There are builds of JDK8 that have backported Graal compiler that can run it faster.
Summary: Cool VM hack to allow much better live hotswap code replacement during debugging. I have never heard of it, so my notes are what they are. &amp;#x200B; 1. Go [http://dcevm.github.io/](http://dcevm.github.io/) 2. Download jar 3. Install: sudo java -jar DCEVM-xxx-installer.jar 3. Install as alt 4. add to your VM arguments -XXaltjvm=dcevm when debugging and make sure you're running with the jvm you modified. &amp;#x200B; There is an intellij plugin with 3 stars, but it wasn't clear how to enable or install the mod on a particular jvm. So ended up using the installer above. &amp;#x200B; For those who like this, there is the commercial JRebel, which does this and more. &amp;#x200B; &amp;#x200B;
A list without https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar ? Heresy!
JDK 12 adds only switch previous. At least among things that you would consider here. JDK 14 might be a real fun one, though.
I really liked this [article](https://dzone.com/articles/the-rise-and-fall-of-scala) . We all may notice there scala’s popularity is fading. More companies mitigate their usage of Scala language. Moreover, Kafka, which was initially implemented on Scala may have [idiomatic kotlin api soon](https://twitter.com/gamussa/status/1098998585356701701?s=21) (Gamov is a developer in confluent.inc). Moreover, he shared an opinion on why it was implemented in [scala](https://twitter.com/gamussa/status/1098970171509739520?s=21) (cause devs wanted better java and java 8 was not there at that time.). To conclude, if there is a choice to start learning Kotlin or Scala, the option seems to be obvious. 
Right I just looked into it and apparently GraalJS registers a `ScriptEngineFactory` only for the JavaScript module, and I don't think any other language implementations bother. Check here to see if there are parts of the implementation you can factor out and generalise over other languages using the polyglot API: https://github.com/graalvm/graaljs/tree/master/graal-js/src/com.oracle.truffle.js.scriptengine/src/com/oracle/truffle/js/scriptengine
Python (jython), Groovy, Kotlin for sure and they are pretty easy to set up. I think Clojure and Scala do too with some work.
we’ll see. Kotlin still has some bugs and far from being perfect whilst Java evolution is noticeable. However: 1. More and more new projects are written in kotlin. Even Spring has implemented Kotlin compatibility. 2. It is a huge challenge to migrate already working java project to the latest or new versions of java. Not from the technical perspective but rather from business evaluation side.
Graal is a giant pain in the ass so we simply will not be migrating those projects.
On something that needs extremely high uptime I can make fixes via reflection, and I can dig into application state much more naturally. I have a wireByClass and wireByName method in the global scope for my nashorn stuff. They utilize a spring AutowireCapableBeanFactory, and I can pull an instance of any class in my application that way. So I can test methods live, and view field states trivially easy. Further I can write things which can be updated on the fly. Using a hashmap @Bean'd from Spring I have an exports system which persists data between script reloads. So if I'm running a scheduler task I'll have a ScheduledFuture in the map I can cancel when I update the script. This makes for rapid development with minimal downtime....though it is rather dangerous. I primarily use it to create maintenance tasks that aren't super important but need adding. 
This recently came up between colleagues and me. A non-programmer friend interjected that Excel had been doing this for ages. Funny how that works...
Thanks for this. I like this plugin. Will pass it along
Professional Programmer Tip #1 - Learn
I can do this in deployed war files to reload changed classes in intellij. Is that supposed to be the case without installing dcevm
*boards boat* Yep same use case. At some point we’ll have to investigate Graal. 
Rainbow brackets has 500k downloads and is open source. IdeaVim is created by the IntelliJ team. My employer's onboarding material recommends using Eclipse Code Formatter for those of us on IntelliJ. Not saying that all of these are good, but those are the only ones I use. 
&gt; Java Developers Perhaps you should refer to us as "Java Developers" one more time, lest there are any lingering doubts as to how hard you're trolling. 
Care to name those features...?
that’s your assumption. i was not trolling and haven’t got any intention to
I was probably wrong about the target version. I updated my comment accordingly.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Probably you just need declarative Gradle.
What usually happens in those cases is that you do a full application reload. Or a hot reload within the limitations of the jdk
Wow, this actually competes (to a small extent of course) with jrebel? As a lone consultant with very sparse work currently, jrebel's cost is a bit prohibitive right now. :(
If they release Java versions every 3 months, or even every month, versions will become rather meaningless, and it might take the fear away.
oh wow, can you please elaborate? 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Even with Ant you can get dependency management with Ivy.
&gt; I just want a downloadable file so I can point eclipse at it. It is 2019, not 2005. 
https://www.graalvm.org/docs/getting-started/ vs &gt; ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn"); engine.eval(new FileReader("script.js"));
It has no framework integrations, like say you add new spring beans. For that there is also a free alternative, but it is nowhere near close to jrebels functionality. I will make a video on it though. Regarding the altjvm, just watch the video and you'll know :D
CSV support is built in.
Hey, there's a load of work that I need to do with regards to error handling. So many things kept not working when trying to add in the encryption I did the typical dev thing and just got it to a working state but now I have to go back and handle when things don't work!! Thanks for the heads up though
Yeah I wasn't too sure about using the null byte but it seemed to be the only way that I could get the while loop to stop executing when rebuilding the message. I've changed it to use UTF now instead which I think will be more reliable?? (I know UTF is a lot less resilient when rebuilding packets so may need to take another look at this). Thanks for the heads up though, I've not really considered sending manually built bytes of data, but I will make sure that it's taken into consideration going forwards
I find annoying the lack of detail on most of medium post... if someone wants more detailed information about this topic, this is video an its resources are great [https://www.youtube.com/watch?v=F8Gc8Nwf0yk](https://www.youtube.com/watch?v=F8Gc8Nwf0yk) 
Did you read my post? What detail is lacking?
I believe the "for removal" deprecation signals that the functionality will be removed after 2 releases (or something like that). So plan on things like this going away around java 13 or 14. With Nashorn, I wouldn't be surprised if they split it off into it's own dependency.
My primary counter-argument is that if you can write a script in Gradle to do it, you can write a custom maven plugin to do it. Then, you've separated your concerns well and new people still know that all they need to do is `mvn test`. I find maven's restrictiveness to be its primary strength. It might make some legit things hard, but I often find it makes it hard to do things you shouldn't be doing. 
We've used it for report generation, specifically charting. Most of the report is generated using java libraries, but pull in a bar and pie chart and instead of getting a really different experience than what is on the website, we just evaluate the javascript in the JVM. Now, granted, you could do that with a call out to nodejs. That just requires more infrastructure and is more complex (probably faster though). Using nashorn was dead simple (it was already java anyways).
Yeah. That's really why I haven't moved. It's stale, but it's stable as well. Plus, the other primary strength is its wide adoption. 
What were the concerns around you using Java? Just curious.
Preface : I'm not a lawyer and licensing talk gives me headaches, so don't take this as actual legal advice. The TL:DR on the licensing stuff is "only use the Oracle JDK if you've been told to use it". I haven't installed the Oracle JDK since 1.7 and I haven't even noticed any change. Just use one of the OpenJDK builds (either the one on [their site](http://jdk.java.net/11/), [AdoptOpenJDK](https://adoptopenjdk.net/), [Amazon Corretto](https://aws.amazon.com/corretto/), or another one) and you're good to go (make sure you also use OpenJDK on your servers and not the Oracle JDK! (that's the most important part)). As for the Docker image, again just go with any of the [OpenJDK images](https://hub.docker.com/_/openjdk) on their Docker hub and you'll be fine.
There's no set target for removing something set as "for removal". They've removed things the release after it was deprecated. They've not removed somebthings after several releases. They'll remove Nashorn when they file a JEP and there's not visible opposition to it. Part of the reason for deprecating it was to get people to shout loudly about keeping it (and hoping someone would step up to maintain it).
I plan on staying on Java 11 and just having a build in Travis-CI that tests off the latest release to see if anything interesting crops up. That way once 17 is ready I know it will be an easy update. By the time 17 is out we will all have a lot better idea about how the ecosystem is handling these 6 months releases and if the 6 month cycle is realistic at all.
Of the "legitimate" concerns, a lot of people (mostly people who consume data I produce -data analysts and scientists) believe Python should be used for all things data. And python is a good language for analyzing data, but building a large framework like this, Java is certainly a better choice. A lot of the sources have native Java libraries and just make the integration better. Of the illegitimate concerns: too verbose, dying language, small market of developers (lol) and just general Oracle hate.
Excellent. All the IP work will go through a lawyer but I just wanted to get some basic info to work this. This is very helpful. Thanks!
If what you have is a library, then why not just package it as one or more JAR files? Why docker? Decide which open source license you want to release your code under. Make sure you understand the various goals of different open source licenses. In my opinion, Apache 2.0 license is a good choice. If you are not distributing Java, there shouldn't be any concern about Oracle's commercial licensing of Java. You would not be distributing that. If you must distribute Java, be sure you are distributing Open JDK, and not distributing Oracle's JDK. Ideally do not distribute Java, or an OS (on Docker) so that people can use your library on any OS or any compatible version of Java. Everyone SHOULD understand Oracle's licensing of Java, and avoid using it if it is not suitable for your purposes. Or purchase Oracle's license if you think it is helpful to you or your organization. (People don't pay for it for nothing!) &amp;#x200B; &amp;#x200B;
Well, anything Spring related for one. You mentioned a small snippet for Spring. Also, were you really talking about Spring Boot? If you are talking about Spring Boot, then you have the capability of slicing your tests into the pertinent layers. This is especially important for making tests quick, which is a quality you seem to find to be important (and I agree, mostly). 
Well, you read it, not sure ab out /u/dalmuk ;) Not sure about Spring Boot-specific test "slicing", but you can use annotations to explicitly include/exclude tests: [https://medium.com/personal-capital-tech-blog/isolating-junit-tests-for-fun-profit-73891984cc0a](https://medium.com/personal-capital-tech-blog/isolating-junit-tests-for-fun-profit-73891984cc0a)
There's not a lot that is java specific here. You give very terse examples that do the very minimum to describe your points. Also not a lot of Spring-specific information here. I going to assume that you were really talking about Spring Boot. Spring Boot's test slices are a great way to cut down on test run times. What about testing the application context? There's really nothing here that is Spring related.. One thing I did like was the distinction between testing results and testing behavior/side effects. That's a concept I've seen many programmers fail to understand.
&gt; if you can write a script in Gradle to do it, you can write a custom maven plugin to do it. Needing any kind of custom logic (whether a gradle script or maven plugin) shows that builds are indeed not declarative. However, you can put common logic in a gradle plugin as well, make it dependOn/finalizedBy another task (like test) and then it happens behind the scenes and developers don't even have to know it is happening (just like a maven plugin hooking into the maven lifecycle). So there is no real difference regarding this between Gradle and Maven. In my view though Gradle has an advantage here because with Maven any custom logic _has_ to be in a plugin, whereas with gradle you can start out with custom logic in a build script and then move it into a plugin if you want/need. 
When the deprecation extension got added, I thought I remember a talk by Mark Reinhold that put a semi-soft timeline on when things will be removed. That is, something marked for removal wouldn't be removed in the next release but it was fair game the release after. I believe it was this talk https://www.youtube.com/watch?v=H48QEcjP1PU The "forRemoval" extension was specifically to signal that they were going to remove it soonish (barring a bunch of backlash). So, marked in 11, stays past 12, could be removed in 13+ (with 13 being the ultimate target barring pushback).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you all guys for your opinions. &lt;3 I will definitely take a look at AWS Step functions &amp; AWS SWF. If it won't work then probably SQS FIFO.
It's pretty useful for any runtime execution requirements. Think about things like plugins and scripting. Here are a few examples of projects I have worked on that used JavaScript as a scripting language for a Java application: * Games. The engine was written in Java and all of the gameplay was in JavaScript loaded through scripts. For game development, being able to pause the game, change a script, and resume the game and test your changes is invaluable. * Reporting. The engine was written in Java, and all of the reports ran off of JavaScript. If you wanted to add a new report, you just write the JavaScript for it, and drop it in a directory. The new report just shows up in real time. * Plugins. The application was written in Java and C, but all plugins were written in JavaScript. They switched from writing plugins in C (compiled and linked for all supported platforms) to JavaScript because they didn't have to compile and link these plugins on a dozen different systems for each plugin version anymore. Not all applications will require this sort of dynamic execution, but some will and it's a useful thing to know how to do.
As I said they've removed items in the next release, so with a six month warning, and [that is intended to be the norm in the JDK](https://www.youtube.com/watch?v=T_O9merCgKw&amp;feature=youtu.be&amp;list=PLPIzp-E1msrYicmovyeuOABO4HxVPlhEA#t=17m05s). However with Nashorn the JEP clearly states: &gt; A separate JEP will be filed for the actual removal of the types and modules in a future JDK feature release. Which hasn't been created yet. Also from the JEP: &gt; The risk of removing Nashorn is that certain applications will no longer run because of the expectation that JavaScript is present. The breadth of Nashorn usage has not been easy to track. It is hoped that feedback for this JEP might provide better insight into actual Nashorn usage. http://openjdk.java.net/jeps/335 As we don't have that JEP yet, Nashorn isn't going to be removed in 12 and probably not 13.
Graal != GraalVM Adding graal.js is just adding 4 dependencies to your pom and replace name of the scripting engine.
I'm sorry I don't understand. GraalVM's JavaScript engine can be used with the `ScriptEngineManager` api as well, like [here](https://github.com/graalvm/graal-js-jdk11-maven-demo/blob/master/src/main/java/com/mycompany/app/App.java#L153): ScriptEngine graaljsEngine = new ScriptEngineManager().getEngineByName("graal.js"); 
Ah I was ignorant of that I suppose. I couldn't find any tutorials on a quick google a few weeks ago that indicated you could do that. So in that case we might just update. Do all the interfaces from nashorn still function within it? So ScriptObjectMirror, Invocable, etc? Feel free to just link a tutorial on using it within the ScriptEngineManager API context. The information doesn't seem super disseminated yet at least as far as I can tell. Certainly not within the top 10 results for "graal js tutorial" What primary differences am I going run into? I assume it has ES6 support for things like lambdas and such like nashorn did in &gt;Java9? What things do I have to worry about going forward in terms of compatibility. I've grown quite attached to nashorn haha. 
Sounds unlikely that they would include and maintain that, but we'll see. Thanks for the clarification!
Here's a [document](https://github.com/graalvm/graaljs/blob/master/docs/user/NashornMigrationGuide.md) explaining the differences to Nashorn. I don't think there's a tutorial currently, I guess one just creates a ScriptEngine and uses it like they used Nashorn before? If you don't want to use the GraalVM binaries, then you'd need some dependencies: [pom.xml of that demo project](https://github.com/graalvm/graal-js-jdk11-maven-demo/blob/master/pom.xml). Here's a [table of ECMAScript compatibility](https://kangax.github.io/compat-table/es6/): Nashorn 9+ is calles jjs10. GraalVM's JavaScript is called GraalVM there. allegedly keeping up with the changing language is much easier with the GraalVM's approach (just need to implement the semantics as an interpreter which gets JIT compiled very efficiently vs. generate bytecode manually for all JS constructs). I mean there's nothing wrong with using Nashorn, and there are definitely projects for which it doesn't perhaps make sense to migrate. I was mostly interested in the 'pain' aspect. To which I got a good answer, we need more documentation. 
Sounds like Oracle to me. Deprecate a thing for a new thing without proper documentation on the new thing. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/av5s4n/has_anyone_noticedweird_behavior_with_nio/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How is the automod in a programming subreddit so unbelievably terrible?
Tell that to Eclipse.
Now we're going around in circles.
Should I also dress like you?
Oh wow again. The OpenJDK project which contains Nashorn and the GraalVM project which implements GraalVM's JavaScript engine are two different projects with different visions, maintained by different people, and so on. Also Nashorn wasn't deprecated for a new thing. Nashorn was deprecated because it is hard to maintain: [JEP-335](https://openjdk.java.net/jeps/335). Also, there's documentation about how to use GraalVM's JavaScript engine right in the project repository, including a [paragraph on how to run it through the ScriptManager API](https://github.com/graalvm/graaljs/blob/master/docs/user/RunOnJDK.md), I just don't think it can be called a tutorial, it's literally 2 lines of text. 
That's why I used the qualifier "proper" haha
We use shared mouse keyboard in Slack.
I just read your comment. How does that make you feel?
Right on, thanks again. :)
I've searched for an answer to this question recently. My conclusion was there is not yet a great solution, but he good news is the problem is being actively worked on. VSCode Live Share is the most promising IMO. YMMV depending on what your IDE needs are.
Verbosity? Sure. Could be more. Can be less. It's a matter of taste for how much it bothers someone, though I think everyone enjoys clear, concise code. Dying? Nope. Unless you wrote a GUI. Small Market? That's based more on your domain than the language, though there's some despise-coefficient to determine how many in your domain will care enough that it's in Java to not use it. Oracle Hate? That's just a universal fact of life.
For some reason, we havent been able to get that working on our enterprise slack. Or even slack calling. I would love to have something for calls besides skype
try repl online
I don't think so. It can't import .jar libraries or Maven implementation.
If you’re on a Mac, you need to download the app from slack.com directly, and not use the App Store version.
VSCODE
Can you import .jar files to it? And how do I setup my Maven archetype?
Honestly, there's no more than 3 "good" Java IDE's in existence, period. Which is one or two more than could be said for most other programming languages. Depending on the use case you're trying to solve for, you might simply be looking for a text editor.
The criticisms raised are silly. Licensing is a non-issue, and Java is a suitable, relevant language. Your bigger problems are in maintainability and community. This video from the CTO of Azul seems pertinent: https://youtu.be/kczX1y1oR2w
Whoever is hosting the VSCode share gives you a link then it pulls up a whole VScode instance that is a replica of their code. So if you edit something as a collaborator you're basically editing something on the host's machine. 
Just install the extension and should be good to go.
Git. It’s like email for *live collaboration*.
I'm not sure that "Twitter uses it" would fly with some of my customers when it comes to using release-candidate software in Production. However, that does make *me* feel better about it!
When every you think of a question about what the best Java IDE is for X. The answer is always Intellij. *unless that question is "I need an ugly IDE from the 90's that is slow as shit". Then the answer is eclipse.
I wanted to share my experience with codeshare.io it didn't work well for us. It took a long time for the code to sync, but I think it was just because we had bad internet. It doesn't have a native way to run the code so we had to copy it to our own IDE to run it. I haven't tried any other ones, but it seems like it it would work well if you're just using a file or two and have internet.
Stupid question, stupid answer.
That seems vague... what's your ***real*** opinion?
Hey not being a hater. Least Eclipse is better than NetBeans
Nope. Depending on the situation, you may try to share the desktop via internet, it's easier to do - VNC, Zoom, WebEx, et cetera.
I think VS Code + [VS LiveShare Extension Pack](https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack) and [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) are a nice combo for you
The guy that runs this plugin abuses the notification system for updates to request for donations. Fucking scumbag.
The atom editor has a plug-in for that.
The practice of allowing an application to be extended via scripting is quite old and it crosses platform or language barriers. We can now embed javascript or Lua engines in pretty much any application on any platform written in any language. Why? To allow the user to create small programs (extensions) in a safe manner. Only the APIs that we provide are available to the developer, so this, in theory at least, would provide the safest way for users to influence and alter the behaviour of our application. You can see them in games (World of Warcraft for example), in browsers (Chrome and Firefox), pretty much anywhere where the developers allow and expect this. 
What is the plug-in called?
You know, for what it's worth, I've used Eclipse and IntelliJ both before, sometime on the same day for various reasons and I've found myself to be almost equally productive with both. How each one stacks up really depends on the specific situation; which normally boiled down to the plugins I was using at the time. 
Can't recall offhand. It wasn't hard to find through the plug-in installer though.
I think Cloud9 supports live collaboration and Java.
True, Live Share is a neat feature in Visual Studio Code for this purpose. - Announcement: https://code.visualstudio.com/blogs/2017/11/15/live-share - Overview: https://visualstudio.microsoft.com/services/live-share/ - Documentation: https://docs.microsoft.com/en-us/visualstudio/liveshare/ - Extension (VS Code): https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare And if you wonder whether VS Code works for Java, check this blog post I wrote early this year: - https://medium.com/@brunoborges/visual-studio-code-for-java-the-ultimate-guide-2019-8de7d2b59902
I haven't read the post completely yet, but one thing I need to mention is about the "Expected Exceptions" test. Yes testing exceptions is important, but using the Junit annotation doesn't work in my experience. First it passes regardless, where the exception is thrown from. Second by adding a fail (another assertion method) after the call under test you have better controller with the try catch way of testing. Something I read, but haven't used sofar myself is the new assertion implemented in Junit 5 that is assertThrows.
`int i = new int(null);`
I tried to load my current company's code base into intellij and it shit the bed, so I'm not sure the answer is *always* intellij. Eclipse may be slow, but at least it works as all.
4. When you run the installer, it shows a list of your installed JREs &amp; JDKs. Select the one you want to be able to use for debugging. In my case open jdk 8 144, but others were listed. Select the alt install radio unless you know what you’re doing. Click install. 
Take a look at https://netbeans.org/features/ide/collaboration.html but I guess you want IDEA and git.
I've definitely had Eclipse shit the bed for no reason. That's most of the reason I switched to IntelliJ. I don't know, both feel like shit when compared to writing C# in Visual Studio.
I grabbed a copy of eclipse last week for working a tutorial, and the current version is actually decent. I last used it at work during the neon release and it's miles better.
It uses Skype as a base, but have you considered Microsoft Teams?
Intellij has always been slower than Eclipse for me.
+1 to your point about Docker First and foremost please distribute it as a jar, and then if you feel so inclined you could plop it on a Docker container for convenience. But as a consumer of a project like this, I can always take the jar and Dockerize it myself if the situation calls for it, but I can't take your Docker image and yank out the jar If I have the jar I can run it on cloud foundry, heroku, locally, containerize it, etc.
Google Docs ;-)
My suggestion is if you are hosting your service in AWS then choosing AWS SQS makes sense. If you are hosting it else where then choose Redis cluster or Apache Kafka. They both are distributed and supports failover.
Visual studio code / Eclipse + saros?
The javadocs are the documentation, hence the name. You are looking for a tutorial.
The licensing of the JVM will have no effect on the licensing of your code. There'll always be a JVM that your users will be able to use to run your code. Pick the license that's right for you and your potential users.
Either I linked to the wrong plugin or we're experiencing very different behaviour as I've never seen such a notification.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's not removed in 12. There'll be a JEP before it's removed and there isn't one yet.
Javadocs are API documentation, which are useful but do not in themselves comprise complete documentation.
There is a donation notification, visible only once. Nothing scumbaggy about that.
For those who use mybatis I would recommend [https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro](https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro) It's making mybatis as efficient as spring data jpa.
keep you suggestions coming. I'll have a look at all and suggest to the writer.
The guy write the plugin for you free, if you don't like, you can just stop use it.
We used to use eclipse plugins around DocShare/ECF/Cola over the jabber protocol. ~2009 ish. I wonder what happened to that setup. It was cool but also maybe just a novelty. I did lots of pairing / tutoring with it in school 
Not a very good list. I'd definitely wouldn't mix up plugins for various languages, "just because they are good". If I am coding in Python, I couldn't care less for Scala plugin or NodeJS. However the rest of them which can be used by any developer, e.g. gitignore, string manipulation, grep console are really nice. I'd suggest you remove the following from the list: * Scala * JS GraphQL * NodeJS * AWS toolkit * Python
It looks like in your [submission](https://www.reddit.com/r/java/comments/avbons/responsibility_of_an_application/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Some people look at a glass that is 76% full and say this glass is 24% empty. The other people look at a glass that is 76% full and say this glass is 76% full. I'm going to guess you're a glass is 24% empty kinda guy
yeah. Using hibernate will be hard to optimize on big application. Many chinese company like alibaba are using with mybatis. Just stick with sql, easy to understand and optimize. For CRUD operation, there are tools to generate them like [http://www.mybatis.org/generator/](http://www.mybatis.org/generator/) or you can use Intellij plugin [https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro](https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro) to generate them with zero configuration. With the intellij plugin, you can even gain the efficiency like spring data jpa. [https://raw.githubusercontent.com/gejun123456/MyBatisCodeHelper-Pro/master/screenshots/mybatisCodeHelper.gif](https://raw.githubusercontent.com/gejun123456/MyBatisCodeHelper-Pro/master/screenshots/mybatisCodeHelper.gif) 
You can consider using Rest API. It would be easy, On button click, Invoke rest api and get the data and update the table. It will make life easier.
mybaits is cool, easy to understand and optimize. with the Intellij idea plugin [https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro](https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro) you can even gain the efficiency like spring data jpa.
Well, Scala is [evolving](http://dotty.epfl.ch/) too so it'll still be ahead Java in termes of features. Usability will hopefully get better too. I'd be more worried about Kotlin personally. No offense to the Kotlin devs out there but it looks like the new Groovy to me. In the end, kinda better Java but not enough for what's coming...
Depends on what you want to test. Im a big fan of @SpringbootTest together with RestAssured and WireMock to test my springboot (rest) services The rest is just plain Junit5 an assertj
Intelli j IDEA
I would recommend https://plugins.jetbrains.com/plugin/7179-maven-helper
Eclipse Che
And honestly, if it means that someone makes an income from their effort, then that's fine by me. It obviously isn't obtrusive or I would have noticed it.
Found the Elizabot. 
Sorry, didn't mean to offend you, not everyone can take a critique, I know... It's ok, let us flood this sub with shit-posts, like - "Top java **web**\-frameworks in 2019" where we list things like: struts, gwt, **mockito**, **maven** and other "web" frameworks. But at least we will get some $ from ads when people redirect to our blogs.
IntelliJ is the best IDE I would say, can be found at https://jetbrains.com/ and if you install the plugin “Floobits” allows live collaboration and if not you can use Git.
It's not my blog. there are no ads. criticism is fine when you want to focus on the overall but you yourself say that the blog post is useful except for 5 out of 21 entries which is less than 1/4. So, what's your point?
My point is that the blog could use improvements to be precise and concise and useful for any language dev. Language specific plugins shouldn't be on the list, whether they are 5/21 or 20/21. I don't focus whether the description for *1. Scala plugin* is correct or not, I focus on overall content of the entire post, as you said yourself: &gt;criticism is fine when you want to focus on the overall &amp;#x200B;
assertThrows is a significant improvement over using expected exception from JUnit 4. Here is an example of it in action (under the method testFindByNullRoomType): https://github.com/wkorando/WelcomeToJunit5/blob/master/src/test/java/com/bk/hotel/service/impl/CheatRoomServiceImplJUnit5Test.java https://junit.org/junit5/docs/current/user-guide/index.html#writing-tests-assertions I've done a lot of presenting and writing on JUnit 5, so lmk if you have any questions!
What are the benefits over regular screen share? 
It's always good to see someone put together a blog post and share what they learn. That said, I would avoid using terms like "best practice" because it can create the an idea that practices cannot be improved upon, which is almost never the case. Why I say that is a lot of what you suggest you have the right idea on, but don't yet fully understand the underlying concept. For example: # 2: For asserting one behavior... What is more important is asserting one concept, that is does that test have a single responsibility? A lot of people get hung up on the specific number of asserts in a test (i.e. it should be one), but don't fully grasp that it's *really* about ensuring a test is verifying a single behavior. # 8: "Don't mock too much": this is too in-specific and gives an impression that there is something inherently wrong with mocking. What often happens with "over mocking" is the code being tested doesn't have proper separation of concerns. If the code you are testing is making state changes to a mock you are passing in, that is a smell that the code (as well as the class that is being mocked) aren't appropriately separated. # 10: "Where does slowness/flakiness comes from": Again you're on the right track, but not quite understanding the underlying concept. Yes slowness/flakiness is caused by those things, but the underlying problem is either you are not testing at the appropriate layer of abstraction, or, more likely, your code is not abstracted and defined in such a way that you are forced to test multiple layers together. Or more specifically when doing integration tests (verifying the contract between remote resources) you are relying upon the live running resource. When it comes to integration testing, I would highly recommend looking into [Spring Cloud Contract](https://spring.io/projects/spring-cloud-contract) and [TestContainers](https://www.testcontainers.org/). The former can be used for verifying HTTP/RESTful and message interfaces, the later can be used for remote resources that don't fall into the former bucket (e.g. databases, caches, other remote systems). I want to be clear, I'm not telling you to "be quiet". Blogging is a great way to both learn and share what you have learned. So definitely keep blogging and sharing what you learn, but avoid falling into the "best practices" trap and thinking you don't have room for improvement. 
Stupid loser. 
&gt; Codota Uhm... nope...
Ok. I actually agree with you. Maybe we can take a few of the suggestions here and switch them out. I'll check on it.
It's not laggy at all! Much more enjoyable than a glitchy compressed RDP stream or similar. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Best 
Eclipse. IDEA, and...?
Advanced concepts like pubsub lol....
VS Code with Java plugin, Netbeans
I'd rather live in total isolation, never able to communicate with anyone ever again
Note that this was *not true* last summer. The Graal developers said then that they'd prefer you run in GraalVM if you needed JDK8, which isn't going to work for a lot of companies. A lot of software gets installed into an existing infrastructure. Now it appears that graal.js will run in JDK8, but it doesn't JIT compile, so I'm not sure what that means for its performance.
Counter argument to that: If you can write a custom maven plugin to do it, then you can also write a custom gradle plugin to do it. Then, you've still separated your concerns well and new people still know that all they need to do is `gradle test`. Not that I disagree with you that some gradle build files get too complex, but mostly all I have in my projects are a couple of dependencies and maybe some of code coverage plugin. For such simple projects the choice becomes do I want a hundred lines of XML or a couple lines of groovy/kotlin. Edit: To be fair, I have checked the number of lines generated by the spring initializer for maven and gradle: With three dependnedcied maven clocks in at 56 lines while gradle has 22. Not as much of a difference as expected, but I think know which one I find easier to read.
&gt;atom I think it should be this one :) [https://teletype.atom.io/](https://teletype.atom.io/)
This is an article designed for marketing their plugin.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
FYI, here's the talk Abstract Efficiency is achieved not just by running things faster, but by avoiding things that shouldn't be done in the first place. Lazy evaluations are a core feature of many functional programming languages. Your code can benefit from lazy evaluations with lambda expressions and, more so, with the power of Streams. In this presentation, we'll start with a discussion of lazy evaluations, with short examples from Haskell and Scala. Then we'll dive into Java to see how we can achieve similar benefits using lambdas and the Stream API.
Do you not pay for intellij? This is nag-ware plain and simple. This guy find a reason to piggy back intellij updates. Look at his feed back history, people complaining about this very issue of too many updates just for the purpose of donation plug. Some 'updates' don't even mention the actual update, its literally just the 'ask' for money.
What does paying for IntelliJ have to do with anything? They're written by different people.
I don't write libraries but as a user I would appreciate a JAR via Maven. On the Docker side I like the Google Distroless images https://github.com/GoogleContainerTools/distroless/tree/master/java but I don't know anything about licensing so I can't help you there. If you do decide to provide an image please include a way for managing credentials for the various services your library will connect to - since your library will contain a lot of them. If you're not familiar with Docker secrets then I suggest looking them up at https://docs.docker.com/engine/swarm/secrets. Good luck!
&gt; 21 Best IntelliJ Plugins for 2019 (100% Free) (blog.codota.com) &gt; 1. Scala &gt; 2. Codota 🤔
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The other talk he did at the same goto, was pretty good too
Venkat is one of the best in the game right now
as another use case. we have a customizable CSV importer for our customers. we obviously don't want to expose our actual Java code that handles the uploading and inserting data into our database, but for each field for a CSV file, the customer can create a "code behind" for each field if the field needs some special handling (like they use a special delimiter for complex data types in their CSV). So we expose a light-weight script object that includes references to the main entity model that gets written to the database. this way the customer can customize how their importer transforms data using just a few lines of javascript. 
I want to clarify something. OpenJDK is licensed under GPL + Classpath Exception. GPL would mean that any code, including your code, that is linked with Java must fall under the scope of the GPL. Thus making YOUR code GPL. But . . . if you read the Classpath Exception, it excludes your code from the GPL if Java is being used only for the purpose of running your code. Your code is not part of OpenJDK. But otherwise OpenJDK is under GPL. So if you make changes or additions to the OpenJDK, then your changes and additions must be under the GPL. But that is different than if your code is separate from OpenJDK and OpenJDK is merely used as a platform to execute your application. I hope that is clear.
I'm paying jetbrains to police their 'app store' which is an exact simile, and its not happening. Ideally they should just provide this service since its quite simple; adding a string to gitignore. If you are a free loader on the community edition then I suppose your values are different and you're more apt to put up with more bullshit.
The old saying is: "actions speak louder than words." &amp;#x200B; **Oracle is still litigating Google over Java** shipped in AndroidOS. \[0\]\[1\] My understanding is that Oracle would have been OK if Google had used only APIs whose code had been GPL2 licensed (aka. OpenJDK exclusively) but that begs the question: regardless of whether the source is OSS or proprietary licensed, why is Oracle trying to claim copyright infringement on Java *APIs*?! \[2\] The APIs -- not the source code! -- is the case when you go read details about it. The implications on use of an API that's exposed would impact *both* OracleJDK and OpenJDK. &amp;#x200B; &gt;Is it possible that people innocently and mistakenly add an explicit commercial features flag or miss highlighted warnings as well as all the public communication on the subject? &amp;#x200B; That is not what is happening here. We, the users, are not confused. If Oracle has to explain itself with lengthy English, and a hefty portion of legalese, then you're building bad optics. Or FUD? Maybe it is FUD. If it is, be clear, concise, and don't undermine development and use of software. &amp;#x200B; \[0\] [https://www.zdnet.com/article/google-oracle-java-win-will-kill-software-development-so-supreme-court-must-rule/](https://www.zdnet.com/article/google-oracle-java-win-will-kill-software-development-so-supreme-court-must-rule/) \[1\] [https://www.ctpost.com/technology/businessinsider/article/The-tech-industry-is-begging-the-Supreme-Court-to-13647490.php](https://www.ctpost.com/technology/businessinsider/article/The-tech-industry-is-begging-the-Supreme-Court-to-13647490.php) \[2\] [https://www.eff.org/deeplinks/2019/02/eff-asks-supreme-court-clean-oracle-v-google-mess](https://www.eff.org/deeplinks/2019/02/eff-asks-supreme-court-clean-oracle-v-google-mess) &amp;#x200B; &amp;#x200B;
hey, this is very cool. I just recently implemented event sourcing pattern using kafka as an event store. Gonna have a look at your library right now :)
&gt; My understanding is that Oracle would have been OK if Google had used only APIs whose code had been GPL2 licensed Java's source code, including the APIs, is licensed under several licenses, including GPLv2+CPE. AFAIK, Google complied with *none* of the available licenses. &gt; regardless of whether the source is OSS or proprietary licensed, why is Oracle trying to claim copyright infringement on Java APIs?! You need to understand that corporations never sue to make a legal point but for business reasons, if they believe legal arguments can serve their business goals. Both Oracle and Google have acted in this case for business reasons, and both used whatever legal arguments they could come up with to serve those goals. As to the content of the specific claims, I am not an expert on the subject, and I would refer you [elsewhere](https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.#Appeals_Court_and_finding_of_non-fair-use). I would just point out that even if APIs are copyrighted, that does not mean you are not allowed to implement them; Google used those APIs in a very unusual way (I would again refer you [to the ruling](https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.#Appeals_Court_and_finding_of_non-fair-use).
You can work on two files at the same time and not be locked to one persons screen. Think google docs shared document 
Ok ... Now it makes more sense. But I'm not so sure I would want another person to be changing the same codebase while I'm doing my part, but maybe it is actually faster than git + merging. I've never worked this way though ...
Another thing worth to mention is that the Example that you used says " The first will always pass " The first will always pass because is a test not well written. if you add "fail" following that try catch you'll have a equivalent test. So I don't think it's fair to use a bad test case to prove that you should use any kind of annotation in your tests. Another thing that you are not considering is when you have some generic or "high level" exceptions Maybe your code throws a validationFormatExeption and you are testing for a particular case .. maybe you want to check the message, or any kind of extra information given in the exception. In those cases I usually go for the try catch approach and assertions on my Exception (get messages.. or what ever..) My point is.. I would not say that using Expect is better than anything it depends on what you are testing.
So one aspect of creating lambdas, the crux of 'adding another level of indirection' is that its apt to break [locality](https://en.wikipedia.org/wiki/Locality_of_reference). Before you go off and 'lazy all the things' think about benchmarking for performance on those bits of code that require performance. 
&gt;You need to understand that corporations never sue to make a legal point but for business reasons, Give folks some credit. Most of us are engineers but I assume folks get that we don't operate in a vacuum and there is a business side. Your posts were a kind of "trust us" reply and that there is FUD out there, and both of those are societal / human statements, with justification on the technology and legal side. I replied with more elaboration on the legal side because folks get as much information and context as possible. I've not read anyone here saying the engineering of Java itself was being attacked, and as engineers we take our technology personally. We get the Oracle still employs the bulk of Java contributors. That is a business investment in addition to the technology. But folks are still asking about Oracle Java because the whole context -- including the licensing and course cases -- makes it's usage suspect. &gt;(I would again refer you [to the ruling](https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.#Appeals_Court_and_finding_of_non-fair-use)). I shared several sources that are far more detailed than Wikipedia's article. I've told our customers, for example, that they need to talk to their Oracle contacts and their own lawyers to make a decision. This whole mess, as some are calling it, is really out of engineers hands. &amp;#x200B;
Hey I know that you are putting some good information out there trying to help people to test more, to learn how to write tests, and some good reasons to do it (I would add a couple more) But I think you are missing some key points about the code writing part... For example, the hardest part of writing tests is to have testable code... That is why TDD exists and is so hard. Because we are not thought to think first in how to test our code. &amp;#x200B; So, from the "beginners" perspective, I supposed there are tons of programmers with tons of untestable poorly written legacy code. Code that needs to be refactored in order to be tested. So First, TDD, think about how you are going to test the code before you write the actual code. (maybe you tried to do a little bit of that with the "avoid the voids" section) Maybe some information about techniques to refactor legacy ugly code in order to be testable. 
Dude is busy! Just finished a tour in Brazil! &amp;#x200B;
he's crazy. he teaches classes remotely at my university, does DAILY code reviews for EVERYONE, tours around the world, writes books, has his own company. He's one of those people who just fucking LOVES programming and encouraging it in the next generation. He's one of my idols.
&gt; But folks are still asking about Oracle Java because the whole context -- including the licensing and court cases -- makes its usage suspect. The lawsuit did not relate to the use of Java, and certainly not to its use under any of the licenses under which it is available. I should add that throughout the court case, Google has continued to not only use OpenJDK internally on a huge scale, but to even fork it internally, and apparently did not feel any fear as they even came to the Oracle campus to share their good experience[1][2]. People who think that the Android lawsuit has anything to do with using Java in general or OpenJDK in particular, don't understand what the Android lawsuit was about. [1] (2014) https://video.oracle.com/detail/videos/featured-videos/video/3731062156001 [2] (2013) https://video.oracle.com/detail/videos/featured-videos/video/2630310903001 
We're getting bogged down with semantics here. The point is LTS, which in our industry means: A stuffy, penny-pinching user wants to stay on a binary release *and* get security patches (and possibly bug fixes) for many, many years past the technology's final release. &amp;#x200B; Assuming this is a Java user, let's say that in 2019 they build an app on Java 11 using Oracle's OpenJDK build so they don't have to pay anyone (and get what they pay for). In 2023, they want *still* be on Java 11 *and* get a patch for branded security vulnerability that has a cute mascot (so CVE-&lt;INSERT\_ID&gt;). Is that scenario possible with the Oracle built &amp; released OpenJDK? That scenario is in its 4th year, so is it 3 years that patches / bugfixes will be built for previous releases? How long will backporting happen? &amp;#x200B; I read the original thread about the release cadence but either I'm blind or the LTS scenario wasn't fully answered. \[0\] The impression I got is that users should be on the band wagon of 'release early, release often' even with their usage of Java, so the user in my scenario should have upgraded from Java 11 -&gt; Java 12 -&gt; Java 13, etc. but my scenario is the reality out there, at least historically for Java usage, and not the ideal. &amp;#x200B; \[0\] [http://mail.openjdk.java.net/pipermail/discuss/2017-September/004281.html](http://mail.openjdk.java.net/pipermail/discuss/2017-September/004281.html)
&gt;Is that scenario possible with the Oracle built &amp; released OpenJDK? No, but this scenario was *never* possible. Java releases have always been supported for about 6 months, and fixes not backported beyond that. Java *major* releases had free updates for years, but there are no longer Java major releases. For example, 8u20 wasn't maintained after 8u40 was released. On the other hand, there were free updates to the Java 8 line of releases under the 8 major version umbrella. Your question assumes JDK 11 is more similar to the major version 8 than to the 8u20 release. This is not the case. &gt; but my scenario is the reality out there, at least historically for Java usage, and not the ideal. I don't know what you mean by "historically." Historically, there have been major releases that could have required a substantial upgrade effort. Those major versions no longer exist, so I don't know what history tells us. But I will repeat the options: * You can upgrade 11-&gt;12-&gt;13 completely free; those are *not* major upgrades. * You can choose even smaller patch upgrades (that nevertheless may introduce breaking changes and still require testing) by buying a subscription from Oracle or other vendors, or by using non-Oracle builds of OpenJDK update projects (like the 8 updates and 11 updates projects). The versions for which OpenJDK will have update projects depends on the OpenJDK community members other than Oracle. Currently it seems like Red Hat has stepped up to run the update projects that correspond to the same versions for which Oracle offers LTS.
Well I'm no lawyer but the case need not be so unusual that only a select few can wrap their heads around it. I've heard things like "creative work", "derivative work", "Fair Use", and a whole bunch of terms to justify both sides. But what is it really then? Your reply avoided the acronym Java API but the briefs that have been filed by friends of the Court all talk about the API, not just the source code licensing. &gt;apparently did not feel any fear as they even came to the Oracle campus to share their experience ([2014](https://video.oracle.com/detail/videos/featured-videos/video/3731062156001), [2013](https://video.oracle.com/detail/videos/featured-videos/video/2630310903001)). Should Google engineers fear Oracle's engineers?? Android was released before Oracle acquired Sun, so it's usage went through one corporate apparatus without issue and another corporation with issue. Still to this day the CEO of Sun has no issue with Google's use, as he testified in Court. @DannyB2 made a great point above that the case exemplifies: &gt; I suspect most here also strictly comply with licenses. Because people want to be in compliance, that would seem to explain the repeated questions on this forum which seem to indicate that people continue to be confused. For those of who've sat at those contract negotiations where lawyers get paid per "red line", we engineers get asked about usage and licenses. We don't have the final say but if we're still uncertain, and have to say "oh maybe it's Fair Use", then how much better off will the lawyers be in interpreting our uncertainty? &amp;#x200B;
&gt; so it's usage went through one corporate apparatus without issue and another corporation with issue. No. Google's use of Java in general and OpenJDK in particular went without issue. Android was a different matter altogether. &gt; We don't have the final say but if we're still uncertain, and have to say "oh maybe it's Fair Use", then how much better off will the lawyers be in interpreting our uncertainty? I don't know but to make it clear: fair use applies when you *don't* comply with the license, not when you do. If you comply with the license the question doesn't even arise. Java's open source license is a well-known one, used by many other open source projects (like Linux).
&gt; so it's usage went through one corporate apparatus without issue and another corporation with issue. No. Google's use of Java in general and OpenJDK in particular has been without issue. Android is a different matter altogether. The matter at hand was taking the Java APIs, and using it to build a software ecosystem which is not Java and not compatible with Java. Regardless of your opinions of the merits of the case, I don't think anyone can say it was about "using Java" in any reasonable or usual use of the term. &gt; We don't have the final say but if we're still uncertain, and have to say "oh maybe it's Fair Use", then how much better off will the lawyers be in interpreting our uncertainty? I don't know but to make it clear: fair use applies when you *don't* comply with the license, not when you do. If you comply with the license the question doesn't even arise. Java's open source license is a well-known one, used by many other open source projects (like Linux).
&gt; The most recent JSF specification as of this writing is JSF 2.3, released as part of Java EE 8 in 2017. Oracle's (now Eclipse's) Mojarra is the JSF reference implementation, and MyFaces and PrimeFaces are popular third-party implementations. Primefaces is not an implementation of JSF
Ty. Both points are what I'd thought. &amp;#x200B; &gt;Today, as before, organizations must upgrade their JDK at least every 6 months &amp;#x200B; I do get that release cadence and terminology is a critical for development (branches, bug tracking, etc.), but the "only supported for about 6 months" really hasn't factored into long-term operations of Java apps, in my experience with customers. Just to clarify, because I often play the Devil's Advocate, and in this case it's a user / customer: Java customers generally expected that they'd have to update their JVM, from 8u20 -&gt; 8u40 for example, to get a security patch because that was the method for staying on that "major" release of that Java version. In the mind of customers they achieved LTS by staying on Java 8 and still got a security patch years and year after the initial release of the first Java 8 of that JVM. They didn't think in terms of "my JVM is older than 6months so we should update". The thinking was: "I've heard of this huge bug so where is the patch?" Not ideal, but reality. &amp;#x200B; &gt;I don't know what you mean by "historically." &amp;#x200B; Maybe Oracle would like to differentiate "major release" and "major version" from "release" or from "update" / "u" labels but the perception is that faster release cadence using terminology like Java 11 -&gt; Java 12 implies, in the customer's eye, a "major release" that could have incompatibilities. The history for that thinking harkens back to the 7uN -&gt; 8 days. I was hopeful that the Java community would switch to a different numbering to avoid misconceptions with the new cadence. For awhile (in 2017-2018, or is it still the case?), there was talk of the JVM implementation of Oracle's SE of Java 10 being released as 18.3? And "LTS" would be part of the label? That is how Canonical differentiates its LTS of Ubuntu, whether paid or free (ex: "Ubuntu 18.04.1 LTS**")**, and it makes the versioning very clear to customers.
&gt; In the mind of customers they achieved LTS by staying on Java 8 and still got a security patch years and year after the initial release of the first Java 8 of that JVM. I understand, but Java 8 was a major version. Those no longer exist. So whatever it is people are used to, one way or another, things are different now, and I think in a way that makes keeping up with Java more convenient. &gt; using terminology like Java 11 -&gt; Java 12 implies, in the customer's eye, a "major release" that could have incompatibilities. The [original proposal](https://mreinhold.org/blog/forward-faster) by Oracle was to use a time-based version name scheme (18.3, 18.9, 19.3 etc.) but it was rejected by the community and "Chrome versioning" was adopted. Regardless of perception, Java 9 was the last ever major releases, and a quick comparison of, say [JDK 9](https://openjdk.java.net/projects/jdk9/) vs. [JDK 11](https://openjdk.java.net/projects/jdk/11/) would easily show that 11 is not a major release. As to breaking changes, yes, 11-&gt;12 can have breaking changes, but so can 8u201-&gt;8u202/11.0.1-&gt;11.0.2, which ["broke" Clojure](https://cl4es.github.io/2019/02/21/Cljinit-Woes.html). Is the chance of possible breakages greater for 11-&gt;12 than for 11.0.1? Probably, but it's unclear yet by how much. The model is still new, and it would take some years for the industry to adapt.
Tomorrow's meeting: Lazy will make it FASTER! Uh...we're not writing any code that won't be run...so we won't benefit from lazy evaluation... No it's faster. We need to do this because it's faster. Look...this is going to make my code harder to read, write, debug... It's FASTER. (Starts telling the boss you aren't willing to do new things and aren't a team player) 
Sort of related question... shouldn't java's major version increment when breaking changes to the JVM are released (like removal of nashorn, removal of javafx, etc)?
It's an MVC framework.
They haven't used the 1.x nomenclature since Java 6. So technically every version is a major version. Between 5 and 9, the version was given as XuYYY, where X is the major version (8) and YYY is the build number (191). Build numbers tended to increment by 10 or 11 between patches. With 9, they adopted the semantic versioning syntax. The current LTS version is 11.0.2. I think that the foreseeable future will be divided between 8 and 14. It will take until the release of 14 for people to adopt the changes released with JDK9.
The folder for the Java 8 jre/jdk is: jre1.8.0_201
but why
I remember it being like that too. Up to Java 8, waiting 2 releases to remove something seemed OK (it was a long time between releases). But at the same time they sped up the release cycle, so 2 releases now means that something disappear completely from one LTS to the next, with no warnings. I'm not sure that was their intention or if it happened by accident...
Now if I could just get it to actually work! I added the theme, and all the brackets are one color despite nesting. Must be doing something wrong.
Please no
In my opionion, it's easy and well integrated with other Java/JEE technologies. The author answers your question in the second paragraph. Why not? 
Because eventually you have to use web technologies to build web apps, why bother with JSF?
java already has locality issues, in part due to lacking value types. and hence why project valhalla is in progress :)
&gt;we're not writing any code that won't be run so no conditional branching at any level?
It was for backwards compatibility. Lots of existing code parsed the Java version and extracted the second element. You don't have to take my word for it. Official WTF-y numbering spec for pre-9: https://www.oracle.com/technetwork/java/javase/versioning-naming-139433.html That time they fucked it up: https://www.oracle.com/technetwork/java/java-update-release-numbers-change-1836624.html Official JSR specifying what constitutes "Java SE 8": https://jcp.org/en/jsr/detail?id=337 Official numbering spec for 9+: https://openjdk.java.net/jeps/223 JEP 223 has a lot of discussion toward the bottom about dropping the initial 1. They also added the `Runtime.Version` class so that people don't have to parse the System property `java.version` anymore.
Im currently working with it. Not a fan. It’s not that bad but I think there are other technologies that now do a better job.
No. Why would there be?
it's so weird they're worried about breaking existing code... then remove entire features from the JRE/JDK.
What kind of branching would there be that would be run with of/else but wouldn't be run with lazy evaluation? I've never seen it in web apps or rest endpoints.
We used it in our HL7 engine. We use Javascript for the mapping so it can be customized by integration people. 
Hmm, I can check tomorrow what boxes I have checked. Try searching the settings for "rainbow" and and see what settings pop up.
Why do you think JSF is not a web technology? What is a web technology for you? JSF components embeds Java classes, HTML, Javascript and CSS. The FacesServlet is ... a servlet!
[Imgur album](https://imgur.com/a/XNfZzj5) with the same graphic for other programming languages - for comparison! | If you want more information on how these were created, it can be found [here](https://www.globalapptesting.com/blog/picking-apart-stackoverflow-what-bugs-developers-the-most)
Right, I expressed myself wrong; JSF is a web technology, what I meant were uh.. *core* web technologies? ie. html, js, css. In my view there are 2 cases: * you don't know the core and restricting yourself to using just JSF * you know both, and use JSF in "simple" cases in the first case, you severely limit your employment possibilities and what you can do on the web in general in the second case.. why ever use JSF? Modern frameworks allow us to create web apps extremely fast, and it's never a bad idea to have more practice at skill which matters the most to web devs. 
##r/DataArt --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/9wy10w/ignore_list/)
"duplicate" - To be expected
Thats very cool! I didnt know that about him!. 
Dude, are you serious? Just slow down and think about it, instead of making dumb comments.
Please yes
Really depends on a lot. The JVM is really pretty good at being able to inline lambdas (and has gotten even better with 11 and 12). It isn't always free, of course, but it isn't always super expensive.
&gt; Right, I expressed myself wrong; I agree! Your first two comments were a little bit rude! I'm clearly in the first case. I know what are HTML/CSS/JS but I'm unable to vertically center an HTML element ;) It is already a challenge to keep up to date with Java technologies. If some people are able to be expert on all these technologies, good for them. Obviously, I can't talk about the second case. But... About one year ago, I had a look at Angular and the Tour of Heroes tutorial and I did not find it better than JSF (certainly because I have better knowledge about JSF). I gave up at the chapter talking about server side rendering. Why would I use a client technology if I have to execute it on the server? Maybe, i have looked at the wrong tool? Do you have any recomandations? Finally, if CSS is so good, why do we need SASS or LESS? If Javascript is so good, why ES6 brings so much new features (I have to admit this is great)? Why Dart and, now,Typescript? Pretty sure it's for the same reason we have frameworks like GWT or JSF in the Java world (but nobody love them) Finally finally.... there is a thing that fascinates me in web development (client side): everything looks like hacks. For example, if I want to display a collapsable tree in a desktop application (like the one in the File Explorer on Windows) I can use a native widget to do it. In Web development I use hierarchical lists with CSS and JS tricks. It looks like a hack not a feature. I love HTML and CSS but we broke them! I'm so sad web browsers are used like virtual machines... but it is another concern. Please, excuse my english!
That’s the whole point of the JEP process. They’re basically requests for feedback right up until they’re implemented.
If you'll ever want to expose your data on something other than a web browser - a mobile app, a desktop app, a third party integration - you'll want a JSON API. When you've got one of those then it's easier and faster to use a JS framework like Angular or Vue to build your web UI. And it creates a good separation should you want to have another developer on board. The only scenario I can see where a JSF (or any java server side) site is an option is when you'll never want to expose the data any other way and you have no JS web framework experience in the team.
It looks like in your [submission](https://www.reddit.com/r/java/comments/avkiwh/repl_library_for_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; We use shared mouse keyboard ~~in Slack.~~ Also known as pair programming. :-D
Whoa broa, maybe learn to code before you make this comments and embarrass yourself, ok? 
What's the alternative? I've been a frontend dev most of my career and recently have been doing some backend work. Def. running into pains of our models being mapped to tables 
bwhats?
Please no
I disagree, the escape analysis is weak. This is why benchmarking code is required now just like test code is required.
JSF integrates well with HTML, Javascript and CSS. There was even a release who aim was to make the integration very [pleasant.](https://www.oracle.com/technetwork/articles/java/enterprise-html5-2227136.html) For enterprise form centric applications, I can't think of any framework more productive than JSF.
Really depends. I agree that you should always benchmark your code. And definitely, there are cases where the JVM can't easily inline (for example, non-constant values brought into the lambda scope).
“Android” - very expected
Thank you for doing this
Bazel. Be prepared for a steep learning curve tho.
Even when it's not a duplicate someone inevitably calls it a duplicate.
I saw him at the no fluff just stuff tour last year. How does he get it all in?
The inputs are temperature and height (which is between 2 numbers) for example if temperature is -30 and height is 829, the answer would be 150 &amp; 170. &amp;#x200B; How can I convert this into a java coding using both inputs ? 
bwhy
It looks like in your [submission](https://www.reddit.com/r/java/comments/avmw7c/java_jda/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
He is worth a trip to go see and talk to him.
Hibernate supports sessions being read only which disables the dirty checking. There's actually support in Spring now so that @Transactional(readOnly = true) will get pushed down to the Hibernate session to set it as read only therefore disable dirty checking. See here - [https://vladmihalcea.com/spring-read-only-transaction-hibernate-optimization/](https://vladmihalcea.com/spring-read-only-transaction-hibernate-optimization/) &amp;#x200B; I believe you can also enable this at the query/entity level but I can't say I've done that.
Nice!
they're making a legit suggestion, as your comment seemed to suggest you had no idea what you were talking about.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I just order custom leptop back sticker with thus image ...awesome
Also "closed". The StackOverflow community is toxic.
bhow
I can only assume that there's one question that uses bwhat and bwhy as variable a lot, in both the question and the answers, for them to appear in this image.
The alternative is not trying to hide SQL. You can have abstractions for individual tables but you don’t try to impose an object model onto a relational model w/ foreign key support. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/avo2t7/help_with_a_timer/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
bwhy, bwhats and bwhat????????
I keep seeing this pattern everywhere: you annotate with @Notnull and then use Objects.requireNonNull. Is @Notnull for you just a marker annotation?
"Reported as duplicate". Yeah, a duplicate of a post dating back 10 years that is now completely outdated, useless and refers to a language version that has been unsupported for half a decade.
Of course it's complete! That's the whole point...
If you have a production-grade project including the following features: - junit5 test running - code generation - repackaging a spring boot application using `bazel`, I'd love to see it! I'm really interested in that, but I am always stuck on the 1st point...
Calling a rest service in Java is at least as easy as calling a rest service in Javascript. ( [https://javaee.github.io/tutorial/jaxrs-client.html](https://javaee.github.io/tutorial/jaxrs-client.html) JEE applications can be distributed since the beginning. It is one of its core feature. [https://javaee.github.io/tutorial/overview001.html#A1046550](https://javaee.github.io/tutorial/overview001.html#A1046550)
Hmm, having a rest API and calling it from a server side rather than client side webapp... Interesting. I don't think that's a common pattern though. What's the advantage? Interesting you mention distributed... With a client side webapp it's not even a thought, just host static files somewhere cheap. And the bonus is that the UI processing work is done by user's browsers not your servers so you have less server load saving money and management time.
it's just a kind of contract. 1) in a test environment runtime assertions inserted in such places 2) in common env it's a way to tell the client that method doesn't accept nulls. Many static analysis tools can understand that kind of contract and warn the client to check args before passing them in such a method. After that - validating args as soon as possible it's a good way to avoid unnecessary work if some of the args are not valid.
&gt; Hmm, having a rest API and calling it from a server side rather than client side webapp... Interesting. I don't think that's a common pattern though. What's the advantage? Well you can have many servers. I was thinking about many servers serving business services. And one (or many with load balancing) frontend server serving a JSF application. It is very similar as what we can do with angular (we need at least an HTTP server). The main advantages I have in mind are: using same classes for business objects, caching service responses, caching rendered UI. The last advantage: JSF is easy. When I said 'distributed' I was talking about distribution of technical and/or business services across many servers. It is easy to achieve with JEE (and even easier with microprofile). But this kind of architectures also has its drawbacks. I try to avoid it if it is possible. I have never been in a situation where rendering the client is the bottleneck. I'm not saying it can't be a thing! Keep in mind that calling REST Services and rendering UI in the JSF frontend allows nice caching features. This is a benefit for server side rendering of Angular applications as well.
&gt; And the bonus is that the UI processing work is done by user's browsers not your servers Often that's not a bonus at all, but a negative. Users don't like you offloading work on their devices, as it will heat them up and drain their batteries. 
Please yes
Bonus points for you! :)
&gt; html, js, css. You can still use them with JSF, and often do. But you have higher level abstractions as well.
Your implied assertion that the only possible forms of Java documentation are Javadocs and tutorials is easily refuted by looking at the Oracle [Java 11 documentation page](https://docs.oracle.com/en/java/javase/11/). It clearly refers to the Javadocs as API Documentation. The same page also refers to tutorials. It then has a host of other documentation links that are neither javadocs nor tutorials. Do you really think your pointless and incorrect pedantry is in any way helpful?
Have you looked in to [https://github.com/AxonFramework/AxonFramework/](https://github.com/AxonFramework/AxonFramework/) ? It's a pretty mature framework for Event Sourcing, also working with Aggregates, Snapshots, and all the usual event sourcing constructs (Sagas, event upcasting,..). We've been using it in production for about two years now. &amp;#x200B; Interesting that you refer to Michiel Overeem's paper on "The dark side of event sourcing". I attended a talk he gave at DDD-Europe shortly after releasing the paper. At that time he was working for AFAS, reimplementing their ERP system with an event-sourced microservice architecture. While his talk/paper gives a decent overview of options in changing events over time in a microservice architecture, he didn't have any experience yet with doing this on production systems, as their new architecture wasn't released yet. I was missing some practical insights gotten from experience. After the talk I wanted to write a blog about my experiences and some tips on some of the techniques he highlights, but never got around to it :( &amp;#x200B; &amp;#x200B; &amp;#x200B;
Indeed. It's the norm now though. I guess if you have spare java-not-js resource and have cash to throw at servers and bandwidth it might make full page loads snappier. I'd be interested to see some stats on that.
hi, thanks for the comment! =) yep, I made an overview of axon some time ago, but I don't like some architecture decisions there. mb it's a matter of taste... =)
We would always like fewer servers to manage. Static pages don't need a server we need to manage, they can be hosted on S3 or a CDN. You can't cache rendered UI when it contains data. The webapp static files can be entirely cached, and service responses can be cached differently depending on the data they return. 'JSF is easy' - that depends on whether you have Java resource available. Also the browser environment is full of inconsistencies and pitfalls so the experience of a full-time web developer is very useful. It's hard to tell what your server load is due to rendering if that server is also doing other things. Re-using business classes in the view might be ok but a lot of architects strongly recommend separating/decoupling the view layer from the business layer.
I think it would be worth explicitly expressing where you took a different direction. In the end, if people will be looking for an event sourcing library to use/contribute to, Axon is your direct "competitor", so explicitly listing how your architecture is different and why it's more suitable for certain things would help you differentiate with a more mature framework :)
Bare JSF does some 5000 views/sec on hardware that's a couple of years old. See http://jdevelopment.nl/wildfly-8-benchmarked Keep in mind this concerns bare pages, and the real world overhead of doing DB queries and complex compositions will give you a lower number.
hm, yes, you're right. I will write about it when readme will be updated. Thanks! =) 
Let's say that's true. What's so wrong with that. Some people don't want to get ad free content for free with no sales pitch no sign up and maybe just maybe they'll download a free plugin for their IDE god forbid. oh the horror.
That's not an advantage.
"closed" as one of the most common words. Yep, that's stack overflow.
Not too shabby. Don't forget the costs of server maintenance, and bandwidth will be higher. Although I meant stats on how long it takes for a server-side-rendered page to appear vs a modern browser to finishing rendering an SPA :-)
r/javahelp 
Most applications are probably written in Java 8 rather than Java 11. But as a full beginner, you will not be working on such projects for a long time, so it really doesn't matter for a beginner. But since its newer, I'd say download Java 11.
Cool. I didn't know JRebel had a plugin. 
*Sidebar* (old reddit) in /r/learnjava - there, in particular: &gt; &gt;**Free Tutorials** &gt; &gt; * MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki &gt; * [Java for Complete Beginners](https://www.udemy.com/java-tutorial) &gt; * accompanying site [CaveOfProgramming](http://caveofprogramming.com) This subreddit here is not for questions about learning Java.
Start with Java 8, then go on to Java 9 and further. Java 9 introduced many big changes that you will sooner or later have to understand -- it won't be so easy if you have no idea what was past Java 9. &amp;#x200B; Furthermore, Java is a language mostly used in Enterprise which means there is a ton of old code written even with Java 6 or 7. 
It's pain to see "string" starting with a small letter. String is not primitive type in Java.
It looks like in your [submission](https://www.reddit.com/r/java/comments/avropn/minecraft_server_on_a_blu_ray_player/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Seems like it depends on the language in OP's album that he linked below. Java, C#, C++, Python, and PHP have a lot of DUPLICATE CLOSED, but the other five don't.
Yes, I completely agree with your first statement: Simpler is almost always better. This is also why I prefer to use JSF on top of a Java application: the two are well integrated. For the second statement I would argue that you must manage your S3 or CDN server. Of course if you serve only static files this is simpler. By the way, you already have to manage the server exposing the rest services, right? You can cache rendered UI containing data. This is simple to do, the problem is cache invalidation but you can cache whatever your want ( for rendered data using JSF + OmniFaces: [http://showcase.omnifaces.org/components/cache](http://showcase.omnifaces.org/components/cache)). I agree with your third statement. Obviously you need to know JEE well to use JSF. Having a web developper is useful (like having System administrator, Database administrator, Security expert, Quality assurance team, etc.) No, it's not hard with the right tools (load test, profiler). The hard thing is to know how the application will be used in production (how many connected users, how many requests per seconds, etc.). Of course the two layers must be separated. But, when you query your business layer, it returns objects (serialized as JSON/XML/Whatever or directly a Java object if you run the two layers in the same Java Application). When your representation layer get these objects you can reuse their classes to deserialize them (except if your presentation layer is not written in Java :p ). The main thing about UI/Business separation is to not compute business logic in the representation layer. 
Or it recommends to use a library which either doesn't exist anymore or has been integrated into the std library.
I just think of it as portable scopes
r/dataisbeautiful
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
build a RESTful API using Spring Boot that represents a coffee shop
When they say backend, they're usually referring to the server code of a web application (front end would be the website itself). Can also mean program logic in a gui application, rather than the gui itself. As the other person mentioned, building a simple Web app in spring boot is a great place to start. 
Were any of the answer I provided ok? I’m worried I said something that didn’t answer the guys question and might have looked dumb. The only experience in java I have is college projects :(
Binary trees and such are typically implemented back-end but not necessarily. Back-end usually implies code is running on the server and likely interacting with some sort of database. Get your hands on a database like postgres or mysql and learn some basic SQL. Then learn to write a java app that uses SQL to interact with the database. If you think about a typical web site, the code running in the browser (javascript, html, etc) is considered front-end and usually contains code that simply displays data or accepts user input. When the browser connects to the server, back-end code is executed on the server which is where logic, algorithms, and databases live. 
&gt; The only scenario I can see where a JSF (or any java server side) site is an option is when you'll never want to expose the data any other way and you have no JS web framework experience in the team. Or you don't wanna deal with JS bullshit code and ecosystem 
Perhaps I was a little too harsh, as there is another bug which provides the background to the amount of work it is taking to upgrade all of Ubuntu's packages that depend on the JDK https://bugs.launchpad.net/ubuntu/+source/openjdk-lts/+bug/1814133
While it's probably not exactly what they were looking for, those things and knowledge of how to use them effectively are generally found in backend rather than frontend code. So don't worry too much about it :) 
The presence of a backend implies a frontend. That terminology is common afaik both to websites and also any sort of server-client stuff. It's the stuff you don't see that makes the bit you do see work.
The presence of a backend implies a frontend. That terminology is common afaik both to websites and also any sort of server-client stuff. It's the stuff you don't see that makes the bit you do see work.
Make sure you learn how spring works though
Managed services like S3 and Cloudfront are managed for us, we set them up then leave them to it. We don't worry about scaling or machines going down or disk full. Having to manage a thing is a disadvantage. Yes in both cases a server is needed to run the service returning the data. HTML rendering is unnecessary additional server load. Tying them together means you can't update your ui without redeploying the service. By cache I meant upstream network infrastructure like varnish, a CDN, and the browser's cache. Still they should be different classes. Your service layer is concerned with data, not view, so the data it returns doesn't have to be organised to match the view... Which in my experience changes frequently.
Prefixing classes with I like it's freaking C# smh
It looks more like she wants me to get off my ass and run two laps.
Your answer was like saying "I can wash a car" when asked about driving experience: it's somewhat related to driving, but shows you had little idea about what you were asked. Which is not bad at all, nobody is born knowing everything and you should never worry about admiting you don't know something (it's better than to fake knowledge and getting trapped by your lie, believe me). As for the knowledge you request, and assuming you want to get serious about backend, start with this: - Maven/Gradle. - Hibernate, JPA, JDBC (provided you know your way with RDBS like MySQL or Postgres. If it's not the case, learn SQL first). - Spring (I recommend starting with Spring Boot, you can make a simple project with frontend and backend with it and it will teach you things like inversion of control and dependency injection. If you're interested, there's a very good -albeit not free- course in Udemy). - MVC (that's model-view-controller). - Design Patterns (there's a very good book about this). - SOLID principles. - Continuous integration. - REST. Don't hesitate in PM'ing me about any of this if you have any doubt or feel lost. I'll be glad to help!
Seconding this. Your front end/project's purpose can be anything you want, but being able to build a RESTful API is one of the most practical skills for software development. My suggestion for a Java dev 1. Get a Spring Boot project up and running using Maven or Gradle to build your project. 2. Build out 1 of each listener (get, post, put, patch, delete) on your backend where each listener is receiving the appropriate arguments and have the simply do a "Hello World" complexity response and test this with Postman. 3. Build out a very simple HTML/CSS/JS front end. Personally I found Vue with Axios straight forward to learn from Vue's guide/cookbook, but there are plenty of ways of calling into a RESTful api and displaying responses. You don't have to make it pretty, but you want to be confident you are communicating successfully between the front end and back end. 4. Add a simple database to your backend to persist the data. Personally I use Hibernate since that is what I'm familiar with, but there are other JPA implementations out there. 5. Now you have pretty much all the core building blocks to build out a website. You can choose where you want to go from here. Build out whatever kind of website you want. Maybe add in Express on your front end, OAuth2 for your API, work on building a test suite for you project, etc... Every single company needs to be able to interface with other software and display a UI. Even if your company doesn't use any of the same frameworks and libraries, knowing how to build a front end, back end, Restful API between the two and persist data will make you useful.
read head first design patterns, this book give me a new vocabulary and a new way to think. Make a Rest Api with Spring Boot, Maven || Gradle, Hibernate, Spring Data you can support on github repositories like this: [https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters). I have 5 years of experience in Java and the better way to learn is practice in your home at night.
Came here to say this. 
Not the original poster, but can you link me the course you are speaking off? 
&gt;I panicked and said binary tree, queues, stacks, and sorting stuff I did in school And what was their response? (lol)
Team treehouse.com has some decent courses using spring boot, including some with a front end using the thymeleaf template engine, and a workshop on spring rest
Sure! It's this one: https://www.udemy.com/spring-framework-5-beginner-to-guru/
And Interface with a database using Hibernate.
Could you elaborate on this?
Personally i like the I prefix but i stopped using it because it is not the convention
What a hypocritical statement. You are the one freeloading on free plugins... JetBrains at least can expect that you will upgrade in the future, so having a free edition is a good business plan. Plugin makers are getting absolute peanuts from donations anyway, totally not worth their time. Not being a cunt is the least you could do.
Maybe it is javascript string?
Quite the [naive](https://www.reddit.com/r/programming/comments/avsfc6/performance_comparison_of_go_c_and_java_for/ehhtdc4/) Java implementation and tuning.
JUnit Team maintains an example of Bazel configuration for 5: [https://github.com/junit-team/junit5-samples/blob/master/junit5-jupiter-starter-bazel/junit5.bzl](https://github.com/junit-team/junit5-samples/blob/master/junit5-jupiter-starter-bazel/junit5.bzl) When you see, however, that you have to include a hundred LoCs of ~~configuration~~ code in your build to just run the tests (and there is no filtering, extra parameters or anything fancy) it’s natural to get discouraged pretty quickly. But I also like the promise of Bazel as a build system that works well for a multi-language code base.
Just a generic answer lol, ok that’s good, Something to that effect
the opening /closing music intro gets extremely anoying
Spring Boot offers automatic creation of database code. You don’t have to do a thing with hibernate in Spring Boot.
Ok, so you can use Heroku. The HTML must be rendered. It can be rendered on the client or on the server. In the first case you have to render it for each client, in the second case, you can render it only one time. You argue it imposes too much load on the server (seriously if the rendering is the bottleneck, the application does nothing or you are Facebook or Google). Let's imagine the rendering imposes too much load... I answer you you can cache the rendering. Costly rendering can be executed only one time on the server instead of X times on the client. Read the link I provided in my previous message. No, it does not use Varnish nor the browser's cache but it is still a cache. I'm sure you can find valid cases where client side rendering is better. Yet, I have some examples: GPS navigation, online games. Does it represent the majority of needs for web application? Does HTML (the language initially design to structure documents and links between them...) is a good answer for this kind of needs? Yes, and who transform business data to view data? Data returned or consumed by business services are not magicaly transformed to data shown on the representation layer. If business layer data transforms business objects to view objects then you can reuse view classes. If representation layer transforms business objects to view objects then you can reuse business classes. That's all. 
I second about Spring Boot as a beginner. Dockerize it, add mertric monitoring as well (e.g. Prometheus). You would then have the tools for a small Java shop. If however you want to push yourself and want to learn what big Java shops do, try and understand frameworks such as Netty/Ratpack for starters. Frameworks like these will force you to learn about threading and async techniques of high-volume sevices written in Java. Apple’s services are served by Java app services with frameworks same as these. 
tl;dr: in terms of CAP, Hazelcast is AP, but now they have also implemented a CP subsystem
Ready to render HTML in my experience was always quite a bit faster for the initial display. I've been out of UI dev for some time now so I don't have current figures. &gt;and bandwidth will be higher. No, bandwidth is often lower. This is because unnecessary data obtained from services is culled at the server, and only the relevant data is rendered is sent via HTML in (often) one blast. HTML also compresses very well using the common gzip. For example, we had a page where in client side a couple of REST services were queried that resulted in a list of customers with their addresses in JSON. This data contained the full user customer data set and for each of them their full address. Then the client UI only rendered their name and city. At the server, the same query was done, but all the excess data only travelled from the business server to the UI server which were co-located. The data going to the client was much less, saving on bandwidth. This becomes even more apparent when the client is doing multiple service requests. Yes, you can create optimised services delivering just the data a given page needs, but then you're actually rendering that page on the server really, but just in JSON, and increased development overhead (a specialised service per page). It also doesn't work if you don't really have pages at all.
Hey there, what’s the name of the book about Design Patterns?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
First get an overview and basic understanding of the java enterprise edition platform. A good practice problem of almost any business: a webshop and separated (web)apps for the employees that process and fulfill the orders. Create web applications that calls public REST and SOAP apis. Implement your own REST and SOAP apis. Add some databases. Implement beans for the business logic. Make it message-driven. https://javaee.github.io/tutorial/overview004.html#BNAAY
You can't re-use, share or cache (upstream) the rendering if it contains user-specific data. Regardless of the amount of load, zero is preferable to some. It's fine to absorb that if it gives some benefit but I'm not seeing one. 
&gt; classes Interfaces, right?
Tried it a couple of times - it hardly works and the suggestions are quite questionable... hence - not that useful
Step 1: Go to /r/learnjava
I thought Spring Boot included Hibernate. But it seems it depends of the starter dependency. So far, spring-boot-starter-data-jpa is the one that lists Hibernate Core as a dependency. 
Tried it a couple of times - it hardly works and the suggestions are quite questionable... hence - not that useful
Spring boot just contains the base Spring framework. You've got to add the starters for the features you want. Yes, that starter pulls in hibernate.
So what's the automatic creation of database core you mentioned? I always go straight to Hibernate. 
Perhaps a minesweeper clone? Feels like about the right level of complexity.
It has two sides. Yeah, sometimes seems to not care, that dupe is 5 years old and outdated. However, it's mostly because users are posting the same questions each week! Believe me or not, byt there are bots to detect duplicates. I have also used it, but with a big margin of error. Nevertheles, 90% were correct dupes. It's sad how community becomes so numb, so irritated, because of very frequent duplicates. Then, they are more aggresively voting for closing
That would definitely fulfill the requirements and I bet be quite fun! Thanks for the great idea!
Write a RESTful app with and without Spring, with and without hibernate, testing with and without TDD, write huge God classes with lots of methods and very small focused classes and few methods. Read Elegant Objects. Most others have excellent suggestions as well. 
Tic Tac Toe?
Not original poster but Head First Design Patterns is great
Vim plugin saved me from using mouse and it works really well, it can even use .vimrc
Design Patterns: Elements of Reusable Object-Oriented Software. By Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides.
I also tried it , it is rather not that much useful, especially when you have StackOverflow with elaborated answers
It's neatly explained in [this example](https://spring.io/guides/gs/accessing-data-jpa/).
Yet it's still the fastest implementation; it just used more memory, which isn't a surprise considering C++ don't use garbage collection. 
As long as they don't implement CA, because that doesn't exist (because P always happens).
If you want to take a pretty good Springboot course on Udemy, like someone else suggested, the in28minutes one is pretty good and I learned a lot from it. It’s not 28 minutes long, that’s just the name of the guys company, but he explains things pretty well. 
Oh, so Spring has its own JPA implementation?
i believe the jpa starter uses hibernate
I just checked it and it seems it doesnt
Interesting thanks. Well designed SPAs offer opportunities to save bandwidth: - the html can be stored on some upstream service such as S3 or a CDN which would reduce load on your server and with a CDN would be closer to the user. This applies to css/js files for both methods but usually it's convenient to host them in the same place so it's more effort to externalise them in a server-side site. - page reloads would use the html from browser cache so only the service data would need to be transferred - data on a page can be updated without reloading the whole page - some designs can allow for html to be sectioned into components and reused across multiple pages - all html can be bundled up into a single package and downloaded in one go, potentially living in the browser cache (or local storage) for use in future visits Services returning too much data is a problem... graphql looks to be a good solution to this as the client can request only the fields it wants and also request extended related data in one request.
First principles before popular frameworks. * Understand the JVM and how Java runs on it. * Understand memory utilisation and garbage collection. * Understand concurrency and multithreading. * Learn how to interact with file systems, streams and binary files * Learn how to interact with TCP/UDP When you have an understand of how they work then learn how to do it all using those frameworks.
What makes an API RESTful or not? 
Sounds like micromanagement at its finest to me.
I used rainbow, but I found it make the editor look a bit messy.
I had a project like that and I ended up recreating the Monty Hall game. If you’re unaware of the Monty hall game it’s a fairly simple principle: 3 doors are shut, behind 1 door is a treasure 2 others are duds. Once you select a door Monty reveals a different door that contains a dud. From there you can either chose to keep your door or switch. Mathematically you have a higher probability of winning if you change doors after your first selection (am stat nerd so had to sneak it in). Use MVC and to add on some cool stuff do a probability class that calculates the chance at getting the right door. Uses 3 different images: 1 door, 1 dud, 1 treasure/money I did this using netbeans because to me, making the UI is a lot easier if you can just drag and drop buttons into the view instead of coding everything. If you want, pm me and I can help you with a few steps if you’re going with this. 
First: Sure committing a single dot or the word "fix" isn't okay. However having every commit tied to a JIRA issue? That's incredibly unnecessary. Like if I add features, or optimize a loop or something...why would we have JIRA issues for that? I don't know about you guys, but we use JIRA issues primarily for actual problems. Second: Even he acknowledges the need to push out maintenance commits that might not have underlying JIRA issues. "As a DevOps engineer, I often need to commit small changes, when there is no time or need to document everything I do in Jira. It’s not something that is used by the team, just a nice "maintenance" option for me to sometimes circumvent the rules." Third: Structurally these are just 4 subpoints of one rule, and an afterthought. Fourth: Not even a tangential mention of a commit+CI pipeline? Nothing about tests needed for commits? This is just ugly ass micromanagement. 
I hope everyone downvotes your post to discourage your click-bait tactic there. Reddit supports long titles. You had no reason to trail off like that.
No, it uses Hibernate and provides integration points with JPA.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Go fuck yourself. If people put out free software as in actually free software, then how am I or anyone else a bad person for using it. The motivation is that maybe this person will gain benefit in some other form whether its donations or bullet point on his resume or whatever but to turn that system into one that is co-opted through another entities platform as nag-ware when its clear they should just charge money for it if that's what they are going for is not my fault. Nobody wants to fucking play games and certainly not me in the IDE by unwarranted distractions by some asshole that wants to be a bad citizen. Again, fuck you for being an obtuse idiot.
I doubt binary search would help there... How far in your homework did you get before you got stuck?
In larger teams that really helps a lot, I have worked like that for a year and half, and it was really easy to keep track of changes
Jooq is also kicking great
Dockerize it, add mertric monitoring as well (e.g. Prometheus). You would then have the tools for a small Java shop. Quick question .. I've never used Docker. How difficult would it be to become "competent" with it to release a Spring Boot app on it? Currently, I'm just using a Windows Service wrapper to launch the jar file.
[https://searchmicroservices.techtarget.com/definition/RESTful-API](https://searchmicroservices.techtarget.com/definition/RESTful-API) 
Yeah, not a single thing about these policies is about code quality. It's only about managers keeping tabs on what people are doing, and making sure they don't dare stray off the sprint, even to make legit fixes/improvements.
iText is the leader in this space. It uses the AGPL license, which in some use cases, might be an issue for your company. 
https://www.youtube.com/playlist?list=PLmbC-xnvykcghOSOJ1ZF6ja3aOgZAgaMO Spring boot, Jet brains covers topics
I would second [iText](https://github.com/itext/itextpdf). It does the job well. It's dual licensed, so you can buy a commercial license if AGPL is a problem. Here's a video that explains it simply: [https://www.youtube.com/watch?v=QHF3xcWnSD4](https://www.youtube.com/watch?v=QHF3xcWnSD4).
If iText doesn't fit with your needs, Apache PDFBox is a solid alternative. 
Thanks I will check it
Thank you for the suggestion I will check tomorrow
In my experience no, but they are also a bit unreliable in the case of a signal 9 or something.
O'Reilly Media is the publisher and they put out so many excellent programming guides. You can get cheap eBooks if you check Humble Bundle once in a while, and it's a great starting point for coding in general, IMO.
Interviewers aren't looking for someone who can do every single possible thing, they're interviewing you to see if you are capable, and if you'd be able to learn and grow in that job. Yes, you need to know what you're talking about, but willingness to listen and learn are the essential skills.
Try it and report back
Isn't 9 supposed to be a hard kill without opportunity to shut down gracefully anyway though?
Yes but if you have a deadlock situation/etc, abd it's not responding to sigtern you might need sigkill. So if you have some kind of buttoning up done in a shutdown hook on a persistent dataset it might be broken if you use sigkill. My point being: be careful with it. 
Just for completeness, there is a commercial PDF library called JPedal, but may not be cheap depending on your budget.
Sort it first.
The OS should not permit a user program to catch SIGKILL. Doing so would be a huge security problem. 
[I've posted this link a stupid amount of times.](https://youtu.be/DC5wtYGQ7XE) After watching this you will know all you need to know. The knowledge you are looking for is called Java EE, now being renamed as Jakarta EE. Spring, that was recommended many times here, is just one of many frameworks. I would highly recommend, if you have the time, to start off by learning Servlets. In Java all network connectivity is based on Servlets. Than go and learn REST. You can find tutorial videos on this and much more (Spring, Spring Boot, Microservices ...) on the same channel of the video that I posted here. It's great to know Spring, but Spring is not backend. The first company where I was used JavaServer Faces, the second one used Vaadin, both are frameworks like Spring and they are all based on Servlets. If you have the time, learn Java EE. Best of luck.
You don't specifically neef netbeans for that. Just use the scenebuilder in any IDE of your choice. Netbeans, eclipse, intellij to name the 3 biggest ones
This isn't the sub for doing your homework for you.
Those poor people...
I agree the prefix feels very .Net-like. It is meant to prevent name clashes when you use both Hazelcast and JDK interfaces in a single class. Otherwise you would have to use a FQCN and that's really ugly. We are open to suggestions how to improve it!
Id'say, for a beginner Spring Boot is a bit of an overkill. It simply railroads you into doing things in a certain way - I'm not saying in a *wrong* way, far from it. But you are not programming in Java - you're programming in Spring, if you catch my meaning. Something more lightweight, like Ninja framework could probably be more suitable for a beginner. I did a couple of projects with it, can only recommend. It's implemented more in the "do whatever you want, here's your tools" style than most frameworks out there. http://www.ninjaframework.org/
Relevant part of the javadoc: "A *shutdown hook* is simply an initialized but unstarted thread. When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently."
Well, considering that Redis itself has a very simple API aimed at performance first (and it's very good at it), publish/subscribe concepts do belong to "advanced" there. It's not your AMQP server, but when it comes to performance, nothing can beat it.
This isn't homework.If you don't know or aren't keen,kindly abstain yourself from making illogical comments.
Or you want your site to be easily indexed by the search engines w/o jumping through all the hoops it takes for a SPA written in JavaScript.
https://docs.spring.io/spring-data/data-commons/docs/1.6.1.RELEASE/reference/html/repositories.html
&gt; Hmm, having a rest API and calling it from a server side rather than client side webapp... Interesting. I don't think that's a common pattern though. What's the advantage? You can call the same API from Android/iOS applications. And generally, testing REST API is far easier than testing web applications with tons of elements and controls that can also have their requirements/design change at any moment, while API is kept stable. 
What you are looking for is called (string) permutation.
I used at a company [https://github.com/LibrePDF/OpenPDF](https://github.com/LibrePDF/OpenPDF) it has Mozilla Public License Version 2.0 so you can use it in commercial products.
Check out Vavr library, Try class in particular. It's obviously not perfect but looks better than try catches in every lambda exp and has quite impressive possibilities. 
Come on man var is a blessing do you honestly like to write 50 chars variable definition with diamond operators and think that's a good approach ?
Thanks 😊.will look into it 
Thanks 😊.will look into it 
Typescript is awesome.
Old school.
You know as well as I do that 95% of the time people are using it for `int`, not `CompletableFuture&lt;Pair&lt;String, ConcurrentHashMap&lt;Integer, Integer&gt;&gt;&gt;`
Yeah well I'd love to be able to argue with that but unfortunately you're right :P Even though I'd still rather have that possibility and deal with poorly written code than write those anacondas. And code quality is always in our hands, If you think your team or some ppl from it aren't trustworthy in this field why don't you propose code reviews for pull requests, it's a great way to share knowledge on daily basis :)
Shutdown hooks are threads. Threads can only be started once.
FYI, here's the talk Abstract &amp;#x200B; Deploying your Java application in a Kubernetes cluster could feel like Alice in Wonderland. You keep going down the rabbit hole and don’t know how to make that ride comfortable. This no-slide and code-only session will explain how a Java application consisting of different microservices can be deployed in a Kubernetes cluster. Specifically, it will explain the following: * Show a Java application with three microservices * How this application is packaged as a Docker image * Create Kubernetes manifests * How Helm charts are created and hosted in a Helm repository * Test in a local environment such as minikube * Attach debugger (may need to find out if tooling exists in this area) * Install Istio in k8s, show service visibility * Install k8s on AWS * Migrate application from a local cluster to a cluster on the Cloud * Setup deployment pipeline using CodePipeline * Use an Alexa skill to scale the application * Change application, show A/B using Istio
`var` is endurable in an IDE but once you're looking at code as plain text (i.e. a diff) you're forced to do type inference in your head with ambiguous code snippets like var result = getResult(); String name = result.get().getName(); // name of what?
First: thanks all for reading! I appreciate it. I know it's not the right way for every organization or developer in the world, and that the interview doesn't cover the whole CI cycle, it's just a component. The Commit Policy app is geared towards large teams and typically in highly regulated industries, where the code manages some safety or mission critical operation or device, like medical devices, or in aviation, you know. They face audits when they have to prove for literally every change that is connects to some requirement and not just a "quick fix". It's also something that easy to get used to. Anyway, does that mean that you work in smaller teams where is no need for such strictness? If there are any rules, how does your manager "enforce" those or make you follow any company guidelines?
Yeah I get you, bitbucket browsing can be tricky but that just shows us how important variable/method naming is. `var resultingUserOptional = getResult();` or `var userOptional = getResultingUser();` isn't that hard to understand but then of course there is nothing wrong with `Optional&lt;User&gt;` as you mentioned earlier there is no point in replacing every `int` with `var`. As always it comes back to code quality :) &amp;#x200B;
Yeah, I still don't see the point of Optional if you still have to use `isPresent`. All it does is say, hey, this might return null (with a small performance penalty) I can do that by renaming my method from `x()` to `tryX()` It's pretty much only for the FP crowd `.filter(Optional::isPresent)`
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This still isn't the sub for your question. As the sidebar says, go to /r/javahelp
Used [Hazelcast](https://hazelcast.org/) at a previous job. Apart from the obvious caching use case, it was used for runtime coordination and messaging (using Hazelcast's topics &amp; listeners) across several services.
Since this is help with *Java programming*, it should be posted in /r/javahelp. **Removed**
A thread can't be started more than once, and a JVM can't be shut down more than once. The language in the Javadoc definitely does not allow a shutdown handler to run more than once. A shutdown hook isn't a signal handler, and AFAIK signals as a concept don't even exist in Java, so I don't know where anyone would get the idea they'd be run multiple times without assuming a specific, incorrect implementation of the JVM shutdown procedure.
Should be in the "Tools" menu, provided of course that you're running NB on Java 9 or later. See https://blogs.oracle.com/java/using-jshell-with-netbeans for details.
Nobody find it because the JMenuItem is named "Open Java Platform Shell" ;)
It looks like in your [submission](https://www.reddit.com/r/java/comments/aw4yz7/jpanel_disappears_once_its_out_of_the_bounds_of/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes, I've tried that .. it was still though to understand it, and also still did not really managed to get the tests running. To be honest I am not really convinced that it's better to use a language-agnostic build tool than a language-specific one even in a multi-language codebase. I can see the benefits of it, but I also see a LOT of hindrances which makes me question this approach - we are losing access to a few decades of experience and work which was already done before. I am not sure how to resolve this controversy though. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Agree. And I talked with some peers (I work at Red Hat for their Middleware) and it does sound like the preferred strategy is to "update often", for the same reasons as the cadence change, but also get at a kind of LTS for those customers who can't adapt. Time will tell.
That list ^ is a lot of tech just to get 3 uservices up and running. Hopefully AWS has created yet-another-service to handle all of that. ;)
Just started watching but it looks like a great intro to this material.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Spring Boot JPA actually uses hibernate under the hood by default. So if you're using Spring Boot JPA, you're using Hibernate. That being said, Spring offers a lot of additional APIs (like their Repository interfaces) that substantially enhance their JPA support beyond what Hibernate offers.
No it does. If you look at the logs while running a spring boot app it'll talk about hibernate. Also hibernate is the largest, most robust JPA implementation out there, period
Good list. Just want to add more on the database point, &gt;Add a simple database to your backend to persist the data. Personally I use Hibernate since that is what I'm familiar with, but there are other JPA implementations out there. You could already use the spring-data-jpa that comes as part of a spring-boot starter. spring-data-jpa is going to internally manage a pluggable datasource as well (through Hikari CP connection pooling). Also, on the actual database, you might as well use the im-memory h2 db (esp. tests).
From time perspective, learning the basics, installing docker, creating a Dockerfile, containerizing your app, handle some edge cases, should take around a day for someone who has very little knowledge on containerization. Once done, move on to 'docker-compose' Containerization is really cool. Once you are done with this, I would suggest reading about Docker Swarm/Kubernetes to orchestrate your containers. This solves problems such as auto-scaling number of instances of your application, networking between containers etc. To learn about Kubernetes, I would suggest installing minikube.
I had the same use case a while back and search quite some time for a working lib. There exists a C library which does a really good job [https://github.com/jedisct1/libpuzzle](https://github.com/jedisct1/libpuzzle), which can also be used to build an similarity index of your images to not only be able to know if two images are the same, but be able to query your index for similiar images. &amp;#x200B; If including a C library is to hard, you can use the cli tool [https://github.com/fpesce/ftwin](https://github.com/fpesce/ftwin) which searches for duplicate files and uses libpuzzle under the hood to compare images.
You could check every Pixel, or every 100 pixel
Docker is pretty simple. You simply provide a configuration file for how you want the environment set up and it does the rest. I'm sure there are good guides on how to set up an environment to spring boot. The main advantage of docker is you automate your deployment. The container has an environment preconfigured based on your dockerfile. Spinning up and tearing down instances is as simple as a few commands
While using Spring, I would also suggest going through the actual concepts that Spring frameworks solve. 1. Learn/Know about Servlet APIs, then find out why Spring MVC was introduced. 2. Learn about JDBC, then check out Spring-data's JPA repositories. etc.
You could hash the image data of both images and if they match they are the same
This sounds like a classic [Second System](http://wiki.c2.com/?SecondSystemEffect) effect. I did one of those, but in C++, circa 2001. I was going to abstract away a bunch of stuff, going down to fundamentals of "streams of objects" with things that would be smart enough to figure out the right thing to do. Long story short, I was reinventing Java 1.2 but slower and worse. Second systems are not real solutions, they just move the problem around. Instead of spending your time on the business logic, you create the general framework and then "customize" that into ... the business logic! On to the specific points: &gt; - can wrap any hierarchy (file trees, JSON, XML) The Java collections framework already does this. &gt; - allow iterations over the contents to drill down the trees (from components to file structures, into the files themselves) The Java collections framework already does this. &gt; - allow nesting of these components to form trees which contains files and data This is just any object graph. &gt; - can wrap remote resources (Web Services, DB calls, Sockets) The problem here is the word "remote". How do you recover from error when a socket dies, vs. a SQL exception is thrown, vs. a web service successfully returns a data validation error? These are all different things, and will have different error recovery (when recovery is even possible). And back to that word "remote": what happens when the error is generated in geography/language X, the user is geography/language Y, and the devops engineer is geography/language Z? A "general" solution to wrapping "remote" resources also needs to decide if it is OK to surface the Chinese exception text corresponding to "your database password didn't work" to the Finnish end user who can fix it. &gt; - contain code which can act on the contained data (for example, a component which contains a set of points specified in JSON could be passed to a component that could parse a set of points into a Java2D Polygon). This sounds like typical functional programming. &gt; My goal is to offer reasoned, constructive criticism to the plan. Can you offer any guidance or advice, perhaps relate it to any past experiences you have had, or other aspects that should be considered? Advice for the programmer is: go ahead and start working on this general solution if they want to as a _side effort_, and use that as an incubator to understand the domain better and get better at seeing commonalities and exploiting abstractions. A second system is not what you want to ship, but it offers great value in one of the hardest lessons of a programmer to learn: which 20% of features to cut that will save 80% of total time. And so far I have never found a way to teach that lesson to someone else, they have to stumble through it and get their own scars. That your engineer wants to try is a good problem to have: they are tired of cranking out almost-the-same-but-not copied solutions all over, and want to just get it done once and move on to better things. They are seeing more of the forest and less of the trees. After they have fought through some of these second system problems, they will be better equipped to see _any_ of the forests, and pull out the general solutions where they work well and the only-once solutions were the general ones can't. 
u/kevinlamont Great comment. Thank you so much! That's very helpful. Do you have any guidance on the Portable Object aspect? Serializing live objects and transporting them between servers?
&gt; Do you have any guidance on the Portable Object aspect? Serializing live objects and transporting them between servers? 1. Significant security risk if they do it via the Java serialization API. 2. Potential for lots of latency due to network round-trips. See also EJB. 3. If these different servers are talking to the same relational database, this could run into the kinds of data integrity problems that 2-phase-commit is intended to solve. 2-phase-commit is very hard to do right, and rarely supported well even on the same physical box. 4. Forcing the client to explicitly convert the objects into XML/JSON/whatever is much less convenient than just passing objects around, but it also makes the client break up their work into discrete chunks that ideally will represent good atomic transaction boundaries. I.e. "don't send the data to the server until you have everything it needs to just UPDATE and COMMIT." 
Thanks for this info! I definitely want to get familiar with Docker, especially if it simplifies deployment.
Once again, excellent feedback. Thank you!
Sounds good, I'll look for some examples I can jump off of for Spring Boot deployment with Docker. The advantage for me is simplifying the deployment. E.g. everything the app needs including OpenJDK etc are within the container. But then, I'll need Jenkins set up to automate this at some point. *Sigh* .. for a one man operation, it can get overwhelming these days vs "the days of old" (i.e. just 10 yrs ago) .. "here's your app, see ya!".
New school
You wonder if anything ever gets done
I've never tried using docker with Jenkins so I can't speak to that. Everything else can easily be set up within the container. Given how popular docker is I'm sure there's a way to do it.
It sounds like you're after a perceptual image hash, something like this: https://github.com/KilianB/JImageHash
So if you see some code that needs refactoring, you either have the choice of (a) creating an issue in Jira and hoping it gets added to the next sprint, or (b) smuggling it in alongside an unrelated code change. Yeah, there's no possible way that this could have unintended consequences.
about 10+ years ago I used a 3rd party to xor images and show the different pixels in red.
There is also the [univocity html parser](https://www.univocity.com/pages/html_parser_tutorial) (my baby).
Yup. https://aws.amazon.com/eks/
This strategy only works if both files are exactly the same and does not address issues of compression that OP brought up.
Scrippity Scrapity Scroppity all your data are belong to me
first and foremost OOP theory, I guess then you can go with collections, string handling, I/O, exceptions if you want to dive deeper I'd go with threads, lambdas, streams and some of the "newer" stuff from java 9+. those are the most common subjects asked in interviews.
HackStack has awesome challenges so you can dive right into code and see where you "stack" up. Here's the Java8 challenge: https://www.hackerrank.com/onboarding/challenge
Dont compare the files compare the loaded image data. That could work. Compression could be a Problem but not solveable without Ai
Java 6 to 8 should mostly be smooth sailing. There weren't any radical changes, just new features. But if you happen to directly use any `com.sun`-packages and friends, you should strive to get rid of those. It just sounds too much like asking for trouble when migrating. For example, you will already run into issues when running your app on any other conformant, non-Oracle JRE. Also, migrating past Java 8 will be difficult.
Typical Computer Vision problem. Consider using the Java version of OpenCV, which is a great library that offers all you need. Keywords to compare two images on similarity are feature detection, feature description and feature matching. Numerous algorithms exist, that do that completely for you, e.g. SIFT Feature Detection. You can find plenty of examples online for that. 
Found this useful
If it is an intro to programming I don't think threads, lambdas and streams will be taught. From my experience intro to programming will be heavy on core concepts such as object orientation, Strings, I/O, exceptions (as you said), as well as re-usable code (constants, functions, naming, etc.), testing, core java concepts (public, private, final, etc.), and maybe collections if they have time. I think OP would be in good stead reviewing the syllabus of the course.
Give a look at [https://github.com/LAW-Unimi/BUbiNG](https://github.com/LAW-Unimi/BUbiNG), it is the stuff enterprises use for web-scale crawling…
Trying will give me a behavior, but I'm looking for the docs. What if there are different behaviors for different signals because they are improperly caught? I can't test all the conditions and like the above answers show - there are docs on this. 
which one can parse javascript? 
That's not true, you can catch signals in Java. sun.misc.Signal contains methods for working with them. I wrote a small project in Kotlin (JVM) that (poorly) uses signals as a means of communication. [https://github.com/IOTCoffee/Remote-coffee-listener-server/blob/master/src/main/kotlin/Main.kt#L24](https://github.com/IOTCoffee/Remote-coffee-listener-server/blob/master/src/main/kotlin/Main.kt#L24) &amp;#x200B;
AbstractSet makes this super simple, but that's a little beyond this example.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for sharing the kubernetes integration
https://introcs.cs.princeton.edu/java/11cheatsheet/
The `sun.*` packages are an implementation detail and not a supported part of the Java language or platform. I stand by what I said.
Watched just for the mustache.
totally disagree about OOP. Refactoring by Fowler is a much more relevant book. &amp;#x200B; Know your language really well. One of the easiest things you can do in an interview to impres your interviewer is to explain the iterator contract in Python, how to allocate a non-static object outside of its class in Java, or why non-virtual destructors are poison in C++. &amp;#x200B; Second, understand how to analyze a design problem. I recommend "Domain-driven Design" by Eric Evans. &amp;#x200B; Third, go to an algorithms challenge forum and do a bunch of the practice problems. &amp;#x200B; Source: I've given 80-100 technical software engineering interviews and seen other engineers' approach and feedback as well for many candidates. &amp;#x200B; Invest 80 to 120 hours if you care about the job.
Wow, just want to say thanks so much for putting this together. This is very helpful and thanks for taking the time to do it.
You want a dhash, essentially compress the image to a small number of pixels a compare the matrix. I wrote a nice image sorter that excludes similar images if it helps. Python tho, no java: [https://github.com/monospacesoftware/pyimagesort](https://github.com/monospacesoftware/pyimagesort)
that is in no way simpler. 
Bazel is solving the problem of building poly-platform modules selectively from a massive monorepo. It's not good in the case of.. how most other teams do software. I personally haven't been part of a team that used monorepos successfully. Bazel may help make those work, but I'd rather not go that route unless absolutely necessary. 
* 2D Rigid body physics * http://www.jbox2d.org * The Lightweight Java Game Library * https://www.lwjgl.org * There's also LibGDX * https://libgdx.badlogicgames.com * LibGDX is built on LWGL and its advantage are that a lot of the base stuff is already written and you don't need to write it. * jMonkeyEngine is a gaming engine which combines rendering and physics into a single package: http://jmonkeyengine.org
Yeah, what this guy said: 6 to 8 it should be a no brainer, unless no-brain has been used to get to 6 in the first place.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
🖖Any idea?
LibGDX has Box2d implemented in it for physics. As for A*, I’m not sure if a library exists for it but it’s not too difficult to implement. Java has a priority queue already.
r/libgdx is a pretty active subreddit. Someone there could help you find an A* library (that works with Libgdx of course).
This is still way too complicated. Why do I need a gradle plug in instead of simply adding a standard dependency? 
The plugin is not due to javafx but to the java module system. The build tools are slowly migrating to support jpms natively. Personally, I only use ant and sometimes maven.
&gt; May I ask, How often do you use gradle in your projects? All my projects use Gradle. The problem isn't that I don't manage to include the plug in, the problem is that I don't see why I would need to. Every plug in I add complicates things and then I have plug ins and tasks that influence each other and I like to keep things as simple as possible. Don't understand me wrong, I don't mind having a plug-in that adds helpful tasks and so on, but it should work without. Also creating an executable multiplatform jar for distribution still seems too complicated.
This is tough because you it's hard to give constructive criticism to what appears to be an unconditionally bad idea. This looks like a huge case of YAGNI and the [inner-platform effect](https://en.wikipedia.org/wiki/Inner-platform_effect). Without knowing the specific details of your product or your organization I can say with 90% certainty that this endeavor is going to be an unmitigated disaster and will be looked back upon as an embarrassing boondoggle and serious management error. We already have generic tools for interfacing with data, constructing object hierarchies and deploying executables to remote servers. These are the problems that programming languages, environments and deployment pipelines aim to solve.
**Inner-platform effect** The inner-platform effect is the tendency of software architects to create a system so customizable as to become a replica, and often a poor replica, of the software development platform they are using. This is generally inefficient and such systems are often considered to be examples of an anti-pattern. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
That sounds very useful for desktop applications: Set `-XX:ArchiveClassesAtExit=myapp.jsa -XX:SharedArchiveFile=myapp.jsa` and get a free startup boost for the small price of slightly slower shutdown speed. One would hope that already existing classes aren't written again, so that could in theory be a one time thing. Does aybody know if the archive will be cumulative, i.e. additionally loaded classes will be added to the archive while keeping previous ones? That would allow faster startup for different usage patterns of the app.
i did it via adding a standard dependency
I use somewhat naive approach where I compare scaled down and blurred versions of the images, works well enough.
Sounds good, can’t wait for that next version! 
You have maven as well. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If you’re planning on upgrading to Oracle’s Java 8 SE and this is a commercial application, keep in mind that production use is no longer being supported.
If you need to tutor students in Java for an introduction to programming course, I would recommend you put yourself in their shoes. They are going to have far ranging questions from what is the class path, to how do I setup my IDE and what is an array really, and even 'I don't know how to begin'. Beyond the basics of helping with language syntax and OO concepts, best tutors are able to : - explain the 'whys' behind something - provide good examples - tell if a student is really getting it
Would be nice. I remember "Project Coin" that was going to add stuff like this.
It turned out that collection literals didn’t really provide much compared to `list()` and `map()` at that point because there wasn’t enough support round constants in the language. Now better constant support is starting to get in it might be possible to do more, without adding any new syntax.
imo List.of is convenient enough.
[JEP 269: Convenience Factory Methods for Collections](http://openjdk.java.net/jeps/269): &gt; In the past, there have been a few proposals floated to change the Java programming language to support collection literals. However, as is often the case with language features, no feature is as simple or as clean as one might first imagine, and so collection literals will not be appearing in the next version of Java. &gt; Much of the benefit of collection literals can be gained by providing library APIs for creating small collection instances, at significantly reduced cost and risk compared to changing the language. For example, the code to create a small Set instance might look like this:
You can leverage Spring Data to auto generate Simple CRUD queries using spring. Eg getAll() etc can be autogenerated however more complex queries you have to write yourself. Google Spring Data for relational DBS and there are a plethora of examples
Here is the 2009 wish list: https://wiki.openjdk.java.net/display/Coin/2009+Proposals+TOC
It looks like in your [submission](https://www.reddit.com/r/java/comments/awkgzq/eclipse_the_constructor_is_undefined_error/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Don't rewrite your code all over again each time you do another project. Reuse the old code, write your library if need be. I would never tell you to use lwjgl unless you know what you're doing, because you'll have to know alot of low level graphics stuff (namely opengl, graphics pipelines etc.). There is one exception though. lwjgl with slick2d. For physics I prefer to use jBullet.
Thanks for posting this, I had missed this series entirely! Interesting read.
The only problem problem of `java.util.List` is the multiple declarations of `List::of` (and it's not a problem, maybe a wart). This also forces the differentiation of variadic and non-variadic declarations, to omit the reservation of an array for varargs. Hopefully, with value types, reified generics, better (or compilation-time) variadic and the sorts, a hypothetical `java.collection.List` may be a drop-in replacement with a equivalent API.
[GraphHopper](https://www.graphhopper.com/) does path finding and is open source.
Map.of is hideous though. 
Anyone else hate the title, Since when does anyone write a percentage free? I just bought a new watch, 23% free.
This is now the role of Project Amber: http://openjdk.java.net/projects/amber/
I was excited up until the "can't use with Spring or Hibernate" at the end. :(
You still need a license for JRebel though, right?
Just wait for the next tip on Monday...and maaaybe that excites you :)
That only affects the javadoc. And the upsides are better performance.
Thanks for the info, the thing is I want to use a library like this: I have a unit info (position, orientation, opponents in view etc.) and I want to calculate how 'ahead' of the opponent I need to aim to hit him. It is mostly simple to predict it, but I have 100 more examples like this that require simple trigonometry and math to figure it out, but I was hoping somebody already did it before me, so I don't have to do it again.
&gt; support round constants What do you mean? Constant updates to the language, perhaps?
ConstantDynamic adds new constants at the class file level. The Constable interface allows library developers to express what can be turned into s constant. Finally work is being done to make javac take advantage of these features and do much more constant analysis at compile time.
Sadly I don't know enough about JVM internals or compilers to understand more than the basic of what you're saying. If you or anyone else knows of a Java talk about this that I can watch online, I'd love to go through it!
Im having some trouble downloading sprint boot. Im following this links instructions but its not working [https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html](https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html)
Which build tool are you using, Maven or Gradle? Either way, it should just be a matter of adding the libraries/dependencies and plugins to either your pom.xml or build.gradle file. Your IDE will then either automatically download the library specified or download them once you run the build script. And pretty sure this is just about the same guide you're following, but I'll include it anyways. https://spring.io/guides/gs/spring-boot/
If you mean executing the JS, none. You'd need a headless browser for that.
just file an issue against _code quality_. /s
Your question is extremely broad. I’d suggest you lookup a tutorial for a web app using spring mvc, jpa, thymeleaf and start from there getting a sense of how everything falls into place.
https://youtube.com/watch?v=iSEjlLFCS3E
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
i think the idea is that some plugins have paid versions and all these don't. you get all features in the free versions.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is a mess. It's hard enough as a developer getting everything to work, but now the user can't even double-click a jar file anymore. And as for enforcing Maven or Gradle usage... WTF?
Seems Jakarta EE 9 is the only choice for EE development after EE 8 ?
Yes, it’s the next version of it ;)
May i ask why SAP still invest in Java while all of their products line now is using ABAP language? 
amazon made one so SAP made another one.😂
Just create a custom repo extending CrudRepository for each of the required entities and you will have a bunch of default methods
Amazing, thanks for hooking me up! Can't watch it today but I've added it to my watch list!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've only had a chance to quickly skin read, so apologies if Ivr missed something really obvious, but what's the difference between Galleon and Thorn tail? Both appear to only contain the required libraries/frameworks, the main difference I can see is with the configuration side of things? Although thinking about it some more, presumably Galleon still results in a full blown application server - if so that's a fairly fundamental difference!
I think you're right about the end result being a regular (albeit paired town) version of the Wildfly application server. That could be an improvement over Thorntail/Wildfly Swarm though, since those are kind of opinionated and don't support all the same features (JMS, etc) that Wildfly does.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sorry but this is boring, always the same example for the recursivity and its merits: factorial and fibonnaci. Honestly, you has ever used in this code a Fibonacci number computation ? The same thing happens for factorial. You can have to use it but the classical formula fails very quickly... The Depth first search is a better example for recursivity (in any way to model it you will need a stack). You should use example like that if you want to promote recursivity. I also wonder why we should promote recursivity? When it is not natural it becomes very complex to use, to code, to debug and to maintain...
It looks like in your [submission](https://www.reddit.com/r/java/comments/awy9um/looking_for_assistance_with_hierarchy_chart_flow/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Look out, the FP people are going to tar and feather you.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Just out of curiosity, but is asp mvc, asp web api, EF, WPF etc running on dot net core even? Thought that was still only for the .Net Framework stack.
I have switched back and forth many times over the past almost 2 decades. The two languages are pretty similar. A little bit of syntax differences, but all the concepts are the same. The biggest difference is the standard library and (as you pointed out) the ecosystem. In Java-land, there are many options for all of the ones you asked about. The .NET community seems to accept anything from MS, and that becomes the "standard". The Java community definitely does NOT have that attitude. There's no "one" direct correlation to any of those - except, maybe WPF (JavaFX). &gt; what happens to all your experience That all depends on what you've focused on. Was it on syntax and knowing the ins and outs of a particular framework? Or was it on OOP and system design? (hint, the later translate pretty directly to Java, the former doesn't as much) Each ecosystem has their advantages. But, TBH, I think Core.NET is finally going where .NET should have gone over a decade ago. It might give Java a serious run for it's money in 3-5 years. My advice would be to go for it. If I've learned anything in my 25 years is that you **can't** get too comfortable in one language/framework/tool set. Learning a new thing is almost always a good thing. Good luck!
yes not all have been ported to dot net core but as of 2.2 we have asp net core (mvc &amp; api) , EF core. winform and wpf will arrive with dot net core 3.0
you're right when it comes to libraries in .net it's almost like we don't have a choice and always accept whatever Microsoft throws at us. well I haven't been only focused on syntax alone, but it feels like going backwards. because i think in recent times .net seems to be moving alot faster than java. I'm actually willing to switch to a different language, even started learning node.js . I actually think I'm becoming too comfortable with .net and switching to a different stack might be of help to me
In practice: * premier -&gt; “we’ll fix everything and produce regular security updates” * extended -&gt; “we’ll probably fix stuff, but you’ll have to pay extra; security updates may or may not happen.” * sustained -&gt; “we won’t fix anything, but you can read the knowledge base and ask us question” Source: I worked in Oracle Support. Now, for Java 7 in particular, the loss of Premier basically means it will not get any regular security update from now on. In reality this might be delayed by the fact that the JDK 7 is required by other Oracle products that are still under Premier, so it’s possible that updated build will be produced and made available through the support portal in some KM, just not regularly. Similarly, if there are customers paying for Extended, they might be entitled to certain updates. This said, 7 is basically dead, man. Time to move on to 8 for legacy stuff, and 11 for greenfield.
ABAP predates Java. SAP NetWeaver supports both languages. It makes sense because SAP considers Oracle it’s biggest competitor/threat to its business. They have also been attempting to diversify away from Oracle DB for years.
\&gt; what is the equivalent stack in java of common dot net stack i.e asp mvc, asp web api, EF, WPF etc ASP MVC =&gt; Spring MVC / Spring Boot or Javalin or Play Framework etc. ASP Web API =&gt; Same as above EF =&gt; Hibernate, jOOQ, etc. WPF =&gt; JavaFX
thanks, i think they use spring boot
You're gonna like Java. Spring + Hibernate makes entity framework look like a pile of shit.
&gt; Honestly, you has ever used in this code a Fibonacci number computation ? yes.
I've never done c# professionally, do you have a good example of the two compared? I'm a huge fan of Spring and JPA, hibernate and it's wackiness included. I always figured the C# guys had some great alternative
I'd suggest to take a look at 'Spring Data' instead of Hibernate, but "on color and taste all felt pens a different" &amp;#x200B; Somebody may like Hibernate more. 
I don't think you will need to pick up much on the langauge itself. It's just a bit verbose than c#. The big learning hurdle will prolly be spring and annotations. I would make a spring boot/spring mvc app and make a simple shopping page or something :).
Over a decade I went from Java to C# and back to Java. The .NET world has a lot going for it and in many ways is more exciting and forward-looking than Java. But Java isn't a step backwards. It too is developing, and developing faster than it used to, but it develops in a very controlled way. It's staying relevent. The Java developers you meet might well have broader technical skills, or be more plugged into the open source world, or they might have worked on very different sorts of projects. I'm glad to have had a foot in both ecosystems. But switching is more than just the syntax, it's tools and services and a maybe even a mindset. This all takes a while to absorb. But you'll be a better developer for having branched out.
Spring Data needs a JDBC implementation behind the scenes though...
Slight nit: while ASP.NET Core (MVC, Web api), EF are cross-platform, the addition of WPF will be Windows only. So if you want to use .NET Core and create GUI, you have to use Windows. The rest of .NET Core (well, most of it, anyway) will continue to be cross-platform.
Well the alternative to Hibernate is Entity Framework. I don't know of any alternative to spring...esp spring boot personally. 
this is such a big claim. are you sure hibernate makes EF look like shit. did you actually use entity framework + linq ?
in C# we use asp mvc/core and entity framework core 
There are people that actually like linq? This is news to me.
YES, linq makes it it easier to write/manipulate queries using lambda expressions 
forget C# and Java they are becoming dinosaur from programmer who doesn't want to evolve, learn Javascript and become a master of it, you can do everything with Javascript and the world is moving to JS with the open source movement, mobile etc JS is a shitty language but it is what it is the world is moving in that direction now, and every programs who can be created with Js will be wrote in JS 
Yes, fantastic. There is a small learning curve. Java forces you to organize your code. Packages must match file paths, etc. Naming conventions are different etc. Ecosystem is excellent. Build systems are fantastic in comparison to msbuild, mstest/nunit. There's a bunch of IDEs to choose from. Profiling and debugging tools are better, testing frameworks and tooling is better. Logging frameworks are better. You won't regret it
It has been a while since I worked in Java regularly, but I feel like Apache is serves a similar role to Microsoft when it comes to providing the default stack for many common tasks, although there are exceptions. Google's Guava package is (or used to be) a must-have for Java, and it's a good complement to a lot of what Apache offers, and when it comes to time and date APIs, JODA is king.
LOL, no. There's a ton of new code being written every day in Java, C++, etc., and web assembly is on the verge of permanently breaking JavaScript's stranglehold on client-side web application code.
I don’t think that is the case at all. Especially not for enterprise solutions.
And what is Nhibernate then https://github.com/nhibernate/nhibernate-core? Nhiberante is based on hibernate and does almost the same. EF is more then Nhibernate tho
Yeah but ultimately EF can't even come close to Spring...
&gt; When it comes to time and date APIs, JODA is king. Java 8 pretty much includes it in the standard library under `java.time`. JSR-310 was lead by the [creator](https://blog.joda.org/2014/11/converting-from-joda-time-to-javatime.html) of JODA time and used his knowledge to improve it even.
I'd recommend Kotlin. It's 100% interoperable with Java, and provides a lot of new features that Java has been lacking compared with C#: properties, operator overloading, coroutines (async/await), and so on.
I'd rather go sell hotdogs than code in that pile of sh*t "language".
This [hyperpolyglot](http://hyperpolyglot.org/cpp) page is nifty for syntax comparison. However it's not quite up-to-date. There are constructs that could be done better in Java / C# nowadays.
For what it’s worth, Spring Boot is more or less just a set of extensions on top of Spring that prepackages a bunch of dependencies you might need as “starters” that make it quick to get up and running with a full application stack. The underlying Spring framework is still used and provides a core dependency injection mechanism as well as the actual dependencies themselves that do the meat of the work (e.g. Spring MVC for web apps, Spring Security, Spring Data, etc).
Language wise, it is very similar and there wasn't much of a learning curve. I write in both languages daily and have very little trouble going back and forth. I really miss entity framework (or specifically LINQ) when in Java. The question, "what is the equivalent stack in java of common dot net stack i.e asp mvc, asp web api, EF, WPF etc" has been my biggest frustration. I would love to hear from some more experienced Java guys on this as well. The lack of an opinionated and singular platform has been a huge hurdle. There are many different server platforms (tomcat, websphere, wildfly, and etc...) and even more implementations of the standards. Coming from c#, that has been super confusing. This probably comes from being a M$ developer for so long. Whether that is good or bad I think depends on where you stand. I tend to gravitate back to the opinionated way. What I am not saying here is "don't do it" or "you will regret it." But these were some of the frustrations that I had in switching. There are good answers to each of these but it took a while to get into the swing of things. I would say to anyone making a language switch, embrace the differences and take it as a learning experience. You can not go wrong learning a new ecosystem! You will be a more marketable developer in the end. &amp;#x200B;
I like Linq, coming from Java to C#, it was defiantly familiar to Java Streams. 
Hey, I've never used C#, but I'm interested in what exactly you mean by that. Could you provide a resource or a guide for that?
I haven't used it myself, but I only hear positive things about spring boot.
He’s asking about Java not Kotlin
It's mostly hipster and newbies who flock to JS though. Real, serious software engineers are going to mess with c++/c#/java instead. (controversial opinion, multiple downvotes incoming)
lol I'm with you. Forcing myself to learn nodejs. It's like drinking piss while pinching my nose.
I realize that, but I suggested Kotlin because he mentioned he was willing to switch languages and Kotlin is closely related to Java
It's pretty much replaced Java as the preferred syntax for the JVM on Android and most major frameworks and libraries like Spring support it. 
He also mention that the requirement to learn Java is coming from his company, I would not think he can just choose to learn Kotlin instead.
EF is a ORM. Spring is an application framework. Ofc it doesn t come close to it :D
Switch was easy for me. I was coding in c# for 3 years professionally, then moved to java for 2 and now back to c# last 7 months. It took me a while to get used to it. Mindset mostly. I can say that most of the thing you will need are there. Having someone to point you to stuff helped me a great deal. What i struggled with were the parts from .net which had multiple popular implementations in java. It was a nightmare to choose the 'right' one. Naming conventions were a challenge as well, especially because some of the things would not work as you want if you dont follow the convention. Spent some time to find missing unit test because it didnt have test in the name. All in all i learned a great deal. Felt handicapped for a while, couple of weeks, but after that it was cool. Moved back to c# because i love the direction where it goes, and market here wants it more and more. Never moved from it for my private stuff though.
Spring boot is excellent for getting a project up and running within 30 minutes, especially with [https://start.spring.io/](https://start.spring.io/) I use SB with Kotlin these days to write REST APIs and couple that with a React SPA for the front end. The best part is you can use both Java and Kotlin in the same application with no problem whatsoever. Kotlin is much less verbose and I want to say more "python-esque" in its brevity, but you can import any Java library / dependency to be available in your project. I'm still learning Kotlin so I do a little bit of coding in Java and then use that to write Kotlin if I am doing something more complex. But that only goes so far and really tails off after the first week or two. The Java language is catching up a bit to C# in some regards with some of its core library (I like both languages, but lean more towards Java) and transitioning between the two has never been much of an issue.
jOOQ is very similar, and more flexible than Hibernate/JPA
Well written Linq queries are fantastic.
I gotta say, I dont know about C#, but today, the more exciting language for any sort of back end web development, APIs, etc is Golang. I have barely started with it yet, but already feel like its better for scalable back end work than Java or .NET. I am mostly speaking from a lot of reading of other Java/Scala/.NET/python/ruby developers that have switched and prefer it and love it for many reasons. Obviously a lot of good stuff like Kubernetes, Slack, Docker and more have been built with it, so while it is still relatively "new" per se, it is already pretty robust and capable. Being a Java dev, I am a little concerned about how interfaces and such play out in Golang, though I have read that it is actually a breath of fresh air to not have things like OOP and inheritance and that the language is far simpler, easier to work with, and the binary size and speed is only slightly behind C in most performance tests (at least those in relation to web/cloud development, not nearly as fast in stuff like game development). Take this all with a grain of salt, as I am going mostly on talking to colleagues and reading stuff. But I am beyond eager to learn and make the switch. 
&gt; Naming conventions were a challenge as well, especially because some of the things would not work as you want if you dont follow the convention. Just out of curiosity, which naming convention do you prefer? I like C# a lot as a language, but I can’t get used to its naming conventions at all. As stupid as it is, it prevents me from using C# as much as I’d like to. Capitalized method names are the visual equivalent of nails on a chalkboard to me and the `IFoo` convention for interfaces feels totally backwards to me. If I’m defining an interface, I probably want to refer to it instead of one of its implementations most of the time. So why would I prefix the interface? Doesn’t it make more sense to prefix (or suffix) the implementation classes? Anyway, I always wonder what people who learned C# first think of Java’s conventions. Are they as painful to you as C#’s are to me? For the record, I’m not trying to start a flame war. I’m usually the one who argues that syntax doesn’t matter as long as it’s unambiguous and at least makes an attempt to be readable. I think C# bothers me because it’s so similar to Java in so many other ways. &gt; Spent some time to find missing unit test because it didnt have test in the name. Also for the record, this shouldn’t be necessary anymore. Java added metadata annotations way back in Java 5 and the 2 biggest test frameworks (JUnit and TestNG) quickly adopted them. For the last decade and a half, annotating a test method with the appropriate`@Test` for your framework has done the trick. 
Node is pretty fun to be honest. It has a lot of problems when compared to Java, but it’s so easy to get something up and running and TypeScript’s type system is a lot more interesting than Java’s (pretty similar to Ceylon’s though, RIP).
Yeah uh I don't know of any IoC framework for C# 
Hibernate is shit compared to EF. Dont listen to him, but learn Hibernate if they ask you in the job
Linq is a syntactic suggar, it makes Static function be called like methods. So insted of puting a list inside a Stream, in C# you call a method
Avalonia.UI
[But unlike Amazon, SAP has contributed significantly to OpenJDK.](https://blogs.oracle.com/java-platform-group/building-jdk-11-together)
spring boot has pretty much taken over the base framework market.
All ORM is shit.
EF makes EF look like shit ;)
Alright, Good
https://www.tutorialsteacher.com/linq/what-is-linq LINQ (Language Integrated Query) is uniform query syntax in C# to retrieve data from different sources (entities, sql, XML, objects etc) and formats it provides you with extension like List.FirstOrDefault(a =&gt; a.name == koz) which translates to something like this select top 1 * from List where name = 'koz'
Thanks 
I'd suggest kotlin as well, but the only problem is that rarely any company is willing to make such "advancement". They all recruit for java 8, as it's much easier to find people, even though it takes like a week to get really comfortable with kotlin, they are still reluctant for such "big" change.
&gt;Take all those recommendations with a grain of salt since they may be out of date Unfortunately yes, everything you mentioned is quite old and irrelevant.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
His book about this topic is truly amazing.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I haven't had a chance to look at the video but can you tell me the name of his book?
Everything? That's a stretch. He's wrong about logging and time. He's right about Apache and Guava.
I recently did the opposite and found it quite easy. The languages are so similar. The biggest difference to me was Integer.parseInt in java is int.parseInt in C#. There was also namespaces in C# and forms which was nice. There are probably more fundamental differences. But it still wasnt challenging.
Well yes. Guava is definitely not must have. Nothing of significant importance there Apache stack - the only "must have" thing from apache is StringUtils and maybe IOUtils if you are working with io. A **tiny utility library** which helps you out.
Sure: Reactive Programming with RxJava It's about RxJava1 ( RxJava2 is now standard ) but the concepts and 95% of operators are the same. For lazy ones: https://www.amazon.com/Reactive-Programming-RxJava-Asynchronous-Applications/dp/1491931655 
What's replaced Apache Commons and Guava?
Reactive Programming with RxJava https://www.amazon.com/dp/1491931655/ref=cm_sw_r_cp_awdb_t1_x5nFCbEWEA2G0 His blog and videos are very very good! He has a lot about concurrency in java. I highly recommend it too
Java 9, has added part of what Guava does. Other than that nothing that of importance is in guava unless you work on something specific. If you consider tiny Apache Commons library - a stack, then you are right, nothing has replaced it.
Thank you!
Thanks!
I actually need some of this info as working with reactive can get tricky fast if you don't completely understand what you're doing. Thanks a lot guys, again!
Now, create a SQL literal that binds to jOOQ and we're set: &amp;#x200B; for (var rec : #sql\[ select a, b, c from t \]) { System.out.println("a = " + rec.a); System.out.println("b = " + rec.b); System.out.println("c = " + rec.c); } &amp;#x200B; 
I liked java naming convention. As you said, it makes more sense without having "I" for the interface. But i was kind of baked with c# one, so it is hard for me to say objectivly which one i prefer. But lowercase method names, drove me crazy. And the getter and setter methods. Thank god someone told me it can be generated in most IDEs. Overall i think it is matter of taste and what people grew up with. Similar to '{' placement. War by itself. I had couple of older developers on my disposal for questions, they liked conventions. Not finding tests was one of the examples where i was hurting from the convention. Also Hibernate interface automatic implementation from the method name. First i was mindblown, then agitated.
&gt; (controversial opinion, multiple downvotes incoming) Proceeds to get upvotes
it is also not the uber-jar approach, which fits better with the docker environment
This video is very accurate regarding the cost and the trade-offs when using a reactive approach, compared to standard blocking code. We've got a project that is entirely reactive code, and a combination of staff being moved around, leaving, and other priorities has led to the codebase to being maintainable by one person - coincidentally the same developer who push to use reactive code over blocking. The project has suffered a lot of delays and bugs, and nobody else wants to help. Reading the code is awful. Working out what it does is time consuming. Debugging it is a no-go without lots of RxJava and domain knowledge up front. It's one of the worst black holes for time and sanity I've seen in my career and I find it inexcusable. Is this reactive programming's fault? Hell no, I love it. I think it's great. It's not a good fit for most projects though, especially ones that require complex domain-driven design and business logic up front, before you get to the frameworks you'll be using. From now on I'll be needing to see very good justification for a reactive approach before I agree with it, and I think Tomasz Nurkiewicz has driven this point home very well with this presentation.
That's what (((oracle))) wants you to think! ^/s
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; With Java 8 streams, it seems Functional Programming has won. Long live statelessness and recursion! The whole premise of this sentence is completely wrong and off putting. I realize that it's hyperbole, but... just no. Other than that, short and entertaining. 
Looks like someone didn't drink their koolaid this morning.
Couldn't agree more. Further I'm sorry to say that I find myself reading about a peace of software and thinking that sound cool, next thing I see is npm install, and I just nope fuck that I will find something else
Who IS "AdoptOpenJDK", really? I honestly don't mean that question to sound sinister. MOST open source consortiums are funded by one or more large tech companies. I just like to know. Is it basically "Oracle, but not officially Oracle"? Like the relationship between Fedora and RedHat? Or is it genuinely an outside community thing (their website has no "donate" links, so obviously it's corporate-backed). Personally, I'm totally fine if it's an Oracle-operated entity. I would prefer that, rather than relying on some randos who might not be around in a few years (I'd just use Azul builds if that were the case). But I find it baffling that no one seems to ask or know or care.
It is right there on the web site. https://adoptopenjdk.net/sponsors.html Just need to spend 5 minutes to find it out.
&gt; There's no "one" direct correlation to any of those - except, maybe WPF (JavaFX) Not really. JavaFX is superior to WPF in every single conceivable way. WPF was a minor improvement over WinForms by adding vector based graphics - but mostly leaving in the old threading model. Also, it depends heavily on XML and it's api is very complex due to its direct compiling of XAML. In JavaFX FXML is optional. There are many other benefits of JavaFX over WPF. CSS for styling, nice separation of concerns, scene graph (hiding many complexities of threading), direct graphics card support, etc...
You don't need hibernate to have a JDBC implementation, hibernate needs JDBC to work. Did you mean that spring data needs an ORM behind the scenes?
Who IS "Correttto", really? I honestly don't mean that question to sound sinister. MOST open source consortiums are funded by one or more large tech companies. I just like to know. Is it basically "Oracle, but not officially Oracle"? Like the relationship between Fedora and RedHat? Or is it genuinely an outside community thing (their website has no "donate" links, so obviously it's corporate-backed). Personally, I'm totally fine if it's an Oracle-operated entity. I would prefer that, rather than relying on some randos who might not be around in a few years (I'd just use Azul builds if that were the case). But I find it baffling that no one seems to ask or know or care.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Unfortunately, this whole transition from 8-&gt;11 has taught me that very few people spend 5 minutes researching before fear mongering.
Another 5 minutes and you would have found out, instead of writing another rant post. https://aws.amazon.com/corretto/?nc1=f_ls
Spring Data needs a persistence provider which is usually hibernate. The persistence provider communicates with the database driver such as JDBC. To use Spring Data you need all of these pieces. 
I was trying to make a copypasta....
Wonder why IBM and Red Hat are still developing their own implementations. Can't IBM just use the Red Hat one?
First 20-25 minutes are not RP-related but valuable programming advice. Still a must watch, nonetheless!
It's not Oracle operated. OpenJDK itself, is, of course developed (mostly) by Oracle, but AdoptOpenJDK is a build farm sponsored by various companies. In addition to OpenJDK builds, they also build non-OpenJDK JDKs, like one based on IBM's OpenJ9.
In time they probably will merge but both of them have customers that need to be supported and have a clear upgrade path. That merger is far from being finished.
I agree with this, we're phasing out of Guava because most of the benefits it brought can now be done with Java 8 (Iterables, Optional, ...) or are covered by Apache Commons or other libraries (Strings, Reflection, Cache, IO, Math,...). Apache Commons is still a very important helper library. Mainly StringUtils and IO / FileUtils as you said and also Collections.
Well in a sense he's right, you can replace WPF with JavaFX, but the other way is difficult.
Works with both: @Test public void testSpecificException() { try { methodToTest(); fail("Expected " + SpecificException.class.getName()); } catch(SpecificException e) { // assert } }
Yup. It takes a while to get people to switch JVM implementations. Even longer if there is a bunch of unique stuff in one vs the other.
That's a good point and frankly I forgot about that method. Though it isn't *really* a way that JUnit 4 supports exception handling and verification. It's a work around and has some tradeoffs with `expected`. With `expected` there is much more a necessary connection between the cause of the failure and the exception being thrown in the tested code. That said it largely comes down to stylistic preferences. All that said `assertThrows()` is without better than using `fail()`. 
Who IS “pjmlp” really?
So much confusion. Can Oracle really be making enough on Java support for this to be worthwhile? Does anyone here work for a company that pays Oracle for Java support?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is why we have fingers and project loom. Start with: http://blog.paralleluniverse.co/2015/08/07/scoped-continuations/
Most likely. Probably.
yeah it's doing test exception handling "by hand".
Red Hat and IBM cannot (publicly) build joint business plans at this time. If they were colluding on post-merger business plans they can run afoul of the FTC or whoever monitors this stuff. After the merger they may or may not consolidate. Depends on if IBM is really planning on adopting culture from Red Hat.
I found that confusing as well. They hype up that wpf is coming to .net Core.... but not really since it isn't coming to the cross platform part. 
Remember, if you make something 10x more expensive but only lose 85% of your customers, you’re making more money. That’s obviously not the exact math, but you get the idea. 
coming to c# from Java I miss the explicitness of getters and setters. These properties just feel like they are asking for mistakes. also I hate that the backer field and the property both show up in the list of vars. maybe I am missing a VS trick but I want to collapse them into a single entity. 
I don't get all the confusion. It seems all pretty straightforward to me. You get two free patch per release, at the 6 month and 12 month rank with Oracle OpenJDK. If you want more patches after that, you can pay. If you upgrade in time, it is always free. And their JDK8 is reaching end of free support, but paid support will still be availaible till 2025. Other vendors offer different deals, which might include longer periods of free patches, cheaper paid options, etc. The good news though, all of the JDK is now open source. There are no longer any commercial only features. The difference with before is that you used to get from Oracle a longer period of free patches (though still not infinite), with some features only available if you paid for the commercial license.
I've thought recently it would be cool project to port JavaFX to .NET but it looks like it would be a huge project. 
Oracle needs to be less confusing with it's language imho. And their installer/updater generally shouldn't force you to make particular choices. It also makes no sense to drive a wedge between commercial and non-commercial users. If they're making updates for businesses why does it matter if anyone rlse can habe the update?
I honestly don't mean that question to sound sinister. MOST reddit users are funded by one or more large tech companies. I just like to know.
An Oracle person and I (in full disclosure I work at Red Hat for their middleware) went back on forth on a [similar thread posted a month ago](https://www.reddit.com/r/java/comments/amvsru/oracle_is_a_wonderful_company_and_the_move_to/). He/she admitted that Oracle's messaging could be clearer but it was all for the best, there's nothing to worry, etc.. My point was these repeated posts and articles don't exactly help with the trust factor. Typical users got _used_ to getting patches long after an initial release of a JVM, and though it's good to push for updating faster, don't confuse the good intentions of opensource re-licensing and faster release cadence with users being clear on the terms and conditions of commercial use. In the end, I'll still recommend that my customers go to their contracts/legal department and make doubly sure what's what, which is speaks for itself.
AssertJ support for exceptions was a breath of fresh air for me. Actually the whole library is light years compared to junit assertions
I work on OpenJDK at Oracle, so let me try and clarify: 1. The Oracle JDK used to contain both free and commercial features. All the commercial features have been open-sourced, and now the *same* JDK is offered by Oracle under two different licenses: commercial, for those who want to buy a support subscription, under the name Oracle JDK, and free, under the name "OpenJDK builds by Oracle". If anything, I think the new licensing is not only *clearer* than before, but better for everyone. It is, however, different, and any change, even for the better, causes some anxiety. With time, it will pass. 2. As to patches "long after an initial release," that's pretty much irrelevant. Those patches and "initial releases" were for *major versions*, and those are gone altogether. What would have been called Java 11u20 under the old model is now called JDK 12. Again, the use of integer versions (aka "Chrome versioning") may confuse those who think of them as major versions, but they are not. As such, both "initial releases" and "updates" are irrelevant. It is true that the new feature versions are different from the old "limited update" versions in that they may contain language and API features, but the old limited update versions did contain some big, potentially breaking changes as well. In any event, it makes no sense to think of the new model using concepts taken from the old model. It's just too different. Again, we think this change is for the better, but we do expect an adjustment period until people internalize the differences.
Interesting... It wasn't too long ago that I found out that NetBeans and Payara support this out of the box. Compile-on-save and deploy-on-save is enabled by default in NetBeans resulting in a folder containing an exploded WAR that is updated every time you press the save button. You then tell Payara to deploy that folder and it will redeploy the application whenever a change is detected. It's really fast compared to restarting the application server. I expect most IDEs and application servers provide something similar.
That is not true, the oracle builds are never free now for production.
Except that the change has been that the JDK has been fully open sourced, so all of the commercial features are now free, and commercial support has switched from a perpetual-license model to a subscription model, which is also probably cheaper for most commercial users.
The goal of [Project Loom](https://wiki.openjdk.java.net/display/loom/Main) is to make blocking (and thread creation) virtually free, by offering runtime-manged user-mode lightweight threads, AKA fibers. This way you'll get the benefits of "reactive" while writing simple blocking code, with all the support you get for blocking code from debuggers, profilers, and exception stack traces.
Replaced Java on Android? Pass me whatever it is you're smoking. You realise over 90 percent of all new apps on the playstore are still Java? 
I just released a new version of this that integrates jextract into sbt. When the project is compiled with `sbt compile` the wlroots.jar file is generated by jextract automatically as well as the xdg-shell-protocol.h file needed by wlr_xdg_shell_v6. If you'd like to see the jextract command being issued, please look at the output of sbt where you'll see something like: `[info] issuing command jextract /usr/include/wlr/types/wlr_matrix.h /usr/include/wlr/types/wlr_surface.h /usr/include/wlr/types/wlr_box.h /usr/include/wlr/types/wlr_gamma_control.h /usr/include/wlr/types/wlr_idle.h /usr/include/wlr/backend.h /usr/include/wlr/types/wlr_output.h /usr/include/wlr/types/wlr_primary_selection_v1.h /usr/include/wlr/types/wlr_screenshooter.h /usr/include/wlr/types/wlr_compositor.h /usr/include/wlr/types/wlr_xdg_shell_v6.h /usr/include/wlr/render/wlr_renderer.h -m /usr/include/wlr/backend=wlroots.backend_headers -m /usr/include/bits/types=usr.include.bits.type_headers -I /usr/include/wayland -I /usr/include/wlr -I /usr/include/pixman-1 -I /usr/include/libxkbcommon -I /home/mhammons/Documents/MyProjects/waylandTest/include -C -DWLR_USE_UNSTABLE -L /usr/lib64 --record-library-path -l wlroots -t wlroots -o /home/mhammons/Documents/MyProjects/waylandTest/lib/wlroots.jar `
I would rather go with thin jars and use a fully featured application server or ship my jar and its' dependencies as a standalone application. What's the added value of shipping the application server compared to just including the libraries like in Kumuluzee and Thorntail?
1/4th of the top apps on the play store are written in Kotlin and it grew 200% last year. It's also the fastest growing language according to Microsoft. 
This is all well and good but the guy specifically says he has to move to Java for company reasons. Choice is a bit out of his control.
Yea I never really used `@Rule` either. Honestly didn't know about it until ironically I started learning about JUnit 5. However I wanted to include that for people who did use it as it is the other major "official" way of handling exceptions in JUnit 4. Though it is a substantial drop-off after `expected` in use. 
Yea I love AssertJ. TFB part of the reason why the JUnit team didn't spend a lot of time on improving assertions is because of the availability of assertJ, hamcrest, et al, and the overall ease of using the assertion library of your choice. The JUnit team wisely (at least IMO) chose to spend their time in other areas.
Yeah, fastest growing has ways meant something. Like when coffeescript was all the rage. Or when go was the new bees knees. Or when c# was supposed to replace Java. All those languages have found their niches and certainly have their edge use cases. Java however is not going anywhere. Programming languages are a zero sum game. The odds of Kotlin being the language that replaces Java as top dog are effectively zero because they're much more similar than they are dissimilar. Lol, Twitter have still not used Kotlin in production. Why don't you check their changelogs before spouting nonsense? Where in slack's app did you see Kotlin? I'm genuinely curious. Netflix do not mention Kotlin as part of their stack on their website but you may knowore than those guys. Mind citing where you got that one from too? I've always been convinced Kotlin has paid shills on reddit spewing their garbage. Haven't changed my mind yet. 
You are doing it wrong. Fibonacci can be directly computed. Factorial has a bunch of "make things faster" tricks which should be used instead of directly computing. Heck, for factorial, because it grows so fast a lookup table is fairly space efficient/fast. You should never compute something like this without first considering if it some math library can't do it faster. More often than not, the answer is not only yes, but also "And it is 1000x faster than any solution you can come up with".
&gt;Programming languages are a zero sum game. wut?
What's your take on this? You think it's good or bad? 
&gt;the oracle builds are never free now ... To play Devil's Advocate for Oracle, the 1st half of your statement is not entirely true, at least from my understanding. Oracle builds [their own OpenJDK binaries](https://jdk.java.net/) that are evidently available to the public (aka. zero $). It's the later half of your statement that, at least from all my reading, is true: &gt;... for production That's my understanding as well. You'll notice that the language Oracle folks use when talking about zero $ is "for development, testing" and they avoid using the term "production". Example: [Donald O Smith's tweet](https://twitter.com/DonaldOJDK/status/977971082706612224) That's not to undermine Oracle's point. Java developers can continue to download Oracle's binaries for local development -- for free -- and nobody trivializes building from source, but after it goes to commercializing that Java app in production, it sounds like payment is required for the Oracle binaries. In all transparency, it looks like production use of Red Hat built binaries of OpenJDK are under similar terms. Java developers can [download Red Hat's binaries](https://developers.redhat.com/products/openjdk/overview/) so long as they agree to terms, called [SoC in some docs](https://access.redhat.com/articles/1299013). Those terms, from my understanding, sound like the Red Hat OpenJDK binaries can be freely used for development purposes as well. What happens in the case of Red Hat customers, say of the Linux OS or the JBoss appserver, is that the Red Hat OpenJDK binary is included for those customers and so meets the commercial terms for production. What's not clear to me is if Red Hat will continue to build binaries of older releases, with patches, and make those freely available. Time will tell.
This change was *necessary* to keep Java attractive, but other than the fact that any change makes people nervous and requires adjustment, I think it's good: 100% open source + more gradual upgrades + faster access to new features + cheaper support for those who want it. 
I believe that I prefix before interfaces was adopted because there's no `extends/implements` in C#. You do that by using `:`, so to differentiate between classes and interfaces, you prefix the Interface.
My only issue with AssertJ vs Hamcrest is the ease of adding your own assertions. The upside is easier discoverability of the AssertJ API. 
Programming language adoption, to be more specific. Noticed that but figured you'd understand what I meant. Apparently not. Still haven't said anything about the other stuff 
Paying for patches is the most retarded concept I've ever heard. Worse than subscription based software, or modal popups on sites asking you to subscribe to their shitty mailing list that always come up two seconds after you scroll on a page. This thought process needs to be eradicated from the internet
Oracle jdk builds (as build and tested by oracle) are not free. OpenJDK is a source code repository, that Oracle uses to build his binaries. But building the binary has a lot of flags and parameters, so even if they are using the same source code, your build can be pretty different than oracles.
A beer to anyone who can share the secret of running a JaCoCo coverage report over a multi-module maven project. Yes, I know I should say which instructions I've tried following and how they did not work. I don't remember anymore, I wish it was simple and straightforward. It's not :(
Since the "Is Java Free" questions continue to come up, maybe the r/java main page could have a side box that explains this, or with links to helpful explanations. AND a list of places where Open JDK can be downloaded. &amp;#x200B; Adopt Open JDK [https://adoptopenjdk.net/](https://adoptopenjdk.net/) [https://github.com/AdoptOpenJDK](https://github.com/AdoptOpenJDK) &amp;#x200B; [https://github.com/ojdkbuild/ojdkbuild](https://github.com/ojdkbuild/ojdkbuild) &amp;#x200B; Open JDK [http://openjdk.java.net/](http://openjdk.java.net/) &amp;#x200B; Azul Systems Zulu [http://www.azul.com/downloads/zulu/](http://www.azul.com/downloads/zulu/) &amp;#x200B; Amazon [https://aws.amazon.com/fr/corretto/](https://aws.amazon.com/fr/corretto/) [https://github.com/corretto](https://github.com/corretto) &amp;#x200B; Red Hat [https://developers.redhat.com/products/openjdk/download/](https://developers.redhat.com/products/openjdk/download/) [https://access.redhat.com/articles/1299013](https://access.redhat.com/articles/1299013) &amp;#x200B; SAP [https://github.com/SAP/SapMachine](https://github.com/SAP/SapMachine) &amp;#x200B; BellSoft [https://bell-sw.com/java.html](https://bell-sw.com/java.html) &amp;#x200B; &amp;#x200B; Oracle JDK -- supported for a limited time unless you pay [https://jdk.java.net/11/](https://jdk.java.net/11/) Oracle Binary License Agreement - DANGER Will Robinson! [http://java.oracle.com/](http://java.oracle.com/) &amp;#x200B; &amp;#x200B; See: &amp;#x200B; Time to look beyond Oracle's JDK [https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html](https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html) &amp;#x200B; Java is Still Free 2.0.0 [https://medium.com/@javachampions/java-is-still-free-2-0-0-6b9aa8d6d244](https://medium.com/@javachampions/java-is-still-free-2-0-0-6b9aa8d6d244) &amp;#x200B;
&gt;Wonder why IBM and Red Hat are still developing their own implementations. Which "implementations" are these? IBM has their own source and build, though they are switching to OpenJDK. That is laid out in the OP article for those who weren't aware. Red Hat does not have a unique source, never did (a fork or such), only what is upstream and open source licensed; or with redistribution rights from the other Java providers. (Red Hat does have redistribution rights of some implementations, like IBM's ... often needed for zSeries and POWER machines that other vendors didn't bother to build or support. Red Hat does not have redistribution rights for Oracle's JVMs.)
r/cybersecurity 
&gt;Oracle jdk builds (as build and tested by oracle) are not free. Is this a semantic difference that you want to make? Oracle seems to use the term "Oracle JDK", or "Oracle's JDK 11 product binaries", instead of "Oracle OpenJDK" when talking about not free -- that much is clear. [0](https://openjdk.java.net/) &gt;OpenJDK is a source code repository, that Oracle uses to build his binaries. Ok we agree there. One repo, AdoptOpenJDK, is [on Github](https://github.com/AdoptOpenJDK/openjdk-build) even. I don't think the common source tree is cause for confusion. The OpenJDK binaries that Oracle builds and leaves [GPLv2+CE licensed](https://openjdk.java.net/legal/gplv2+ce.html) are indeed free, zero $. There are no payment terms or conditions for downloading [the binaries that Oracle hosts](https://jdk.java.net/11/) it. The Oracle JDK binaries, however, are [clearly licensed differently](https://www.oracle.com/technetwork/java/javase/terms/license/javase-license.html) and look to be intended for paying customers. The OP's article comes to the same conclusion: &gt;I WANT $FREE AND FREE (AS IN USE) JAVA SE 11+, WHAT DO I CHOOSE? ***Use the Oracle OpenJDK build under the Open Source (GPLv2+CE) license*** and follow the new six-month release cadence OR Use an OpenJDK binary distribution from an alternative OpenJDK provider, i.e. Linux distros, AdoptOpenJDK, Amazon, Azul, BellSoft, IBM, jClarity, Red Hat, SAP, and others.
&gt;As to patches "long after an initial release," that's pretty much irrelevant. Those patches and "initial releases" were for major versions, and those are gone altogether. What would have been called Java 11u20 under the old model is now called JDK 12. The use of integer versions (aka "Chrome versioning") may confuse those who think of them as major versions (the original proposal did call for a different version numbering scheme, which was rejected by the community), but they are not. As such, both "initial releases" and "updates" mean something radically different. So, am I understanding this correctly... Oracle JDK versions less than 11 running in production are not subject to the new licensing and can continued to be used without paying support cost?
Sure. The changes do not apply to software you've already downloaded. Just bear in mind that it will become outdated without updates.
aka. SAP HANA doesn't need OracleDB.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yeah. You don’t need Oracle DB at all for SAP, you haven’t needed it for years regardless of the SAP flavour. To SAP’s frustration, many enterprise customers continue to choose Oracle DB for their critical ERP data because it’s more rock solid than anything else out there.
&gt; That's my understanding as well. Oracle's OpenJDK builds are completely free for any purpose. The license of all OpenJDK builds, from any organization, is the same as that of the OpenJDK project. AFAIK, the license (GPL) forbids making *any* additional terms on the *use* of the software. &gt; "Commercial builds of JDK 11.0.2 from Oracle under a non-open-source license", which must be different bits, otherwise why bother with different software licenses? Because Oracle owns OpenJDK, it is free to license it under licenses other than the GPL. That has *always* been the case with the Oracle JDK and the Sun JDK before it, which were also builds of OpenJDK with some modifications. What's different now is that the Oracle JDK does not contain any new functionality. It does however have more version options. Instead of updating from 11.0.2 to 12, Oracle JDK will offer 11.0.3 and other similar versions that contain even less than the already byte-sized feature releases, for those who don't wish the updates to include any new features.
Oracle provides builds of OpenJDK [right here](http://jdk.java.net/) which are built and tested by Oracle, and are completely free for any use.
When do you think loom will be released? 
What about Java web start? We use that for some apps here (we don't make them, but the companies that provide us the product do). It is not in openjdk.
Vertx.io
When it's ready, but I believe you won't have to wait too long. In the meantime, while we don't have official early access binaries, you can either build to prototype yourself or download non-official builds [here](https://builds.shipilev.net/) and then you can help us, and influence the project, by providing feedback on the Loom mailing list. For the moment, we are mostly interested in feedback on the Fiber API, and in particular on FiberScope, which is our implementation of [Structured Concurrency](https://trio.discourse.group/c/structured-concurrency).
It looks like in your [submission](https://www.reddit.com/r/java/comments/axeszj/daos_services_dtos_and_business_objects_practices/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Now that you point it out, that is an interesting question. If a commercial subscriber requests support from Oracle that results in patches after the normal Oracle support patching period is over, what happens to that newly-patched JDK? According to the current rules as I understand them, the patch is only going to be included in a future release version, and they wouldn’t release a patched OpenJDK build. But it would be interesting if I were wrong. That would mean in certain situations, there would be patches in older OpenJDK versions we didn’t expect to see. Maybe just the Oracle JDK would get the patches, and they’d skip the step of patching/releasing a new OpenJDK build? (Please keep in mind, I’m talking about post-OpenJDK-support period)
I didn't say they were equal. Just that it was the de-facto correlation of WPF in the Java world. And that there isn't really any other serious competition for doing "fat" clients in Java these days (yes, I know swing still exists, and is used some. But most people would reach for JavaFX for a new project) 
Yeah I know. I just like to point out that Java has the best UI toolkit out there. Microsoft has the worst. ;)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
👍
Soon enough, there's no way OpenJDK will be able to keep with the release cycle of OracleJDK... it should get slower and slower as more features come in. 
&gt;Because Oracle owns OpenJDK Frankly, statements like that, although understood in meaning by engineers (ex: Oracle can reject pull requests, Linus can reject Red Hat kernel PRs using several 4-letter words, etc.), harken back to the trust factor that still looms over the Java changes. Because saying some software is "owned" by a single company undermines the intent of actions like opensourcing. There's a latent control factor in just saying it this way that is anathema to the larger community of contributors, if communal stewardship is indeed a goal of OpenJDK development. We may focus on the licensing to figure out which binaries are monetarily free but the intent of opensourcing, at least traditionally, implied communal development. Even at Red Hat, we often struggle with Richard Stallman's "prophecy" about corporate contributors: &gt;These companies actively invite the public to lump all their activities together; they want us to regard their non-free software as favorably as we would regard a real contribution, although it is not one. They present themselves as "open source companies," hoping that we will get a warm fuzzy feeling about them, and that we will be fuzzy-minded in applying it. This manipulative practice would be no less harmful if it were done using the term "free software."
It's the same codebase released under two different licenses (and different names).
&gt; Frankly, statements like that, although understood in meaning by engineers (ex: Oracle can reject pull requests, Linus can reject Red Hat kernel PRs using several 4-letter words, etc.) No, that's actually not what I meant at all. While those who lead OpenJDK are *employed* by Oracle, Oracle the company does not exert such direct control. However, Oracle owns OpenJDK in a very literal sense: it legally owns the copyright for all OpenJDK code. The development is indeed done by the OpenJDK community, that is currently mostly made up of Oracle employees. See [this talk](https://youtu.be/W-l0Huhb40s?t=1305), which explains the control structure.
Can't give you a full answer since I'm not at work, but the general gist is: 1. Create a aggregate module that has all other modules with coverage in it as dependencies 2. Use https://www.jacoco.org/jacoco/trunk/doc/report-aggregate-mojo.html
I think the confusion has many facets: * Naming * OpenJDK is just the source repository. * Oracle OpenJDK is the free OpenJDK when built by Oracle. * Oracle JDK is the non-free JDK provided and supported by Oracle. It's supposed to be identical to Oracle OpenJDK, except when it's not (licensing, obscure command-line flags, whatever). * Different schedules * JDK 8 had different EOLs for personal use (2020) and for developers (2019), IIRC. To this day I don't know what that means and how it could be enforced. * LTS means LTS only for paid customers. There is no free Oracle OpenJDK LTS. * But maybe *someone* will provide Java 11 LTS builds. * End users and distribution methods * There's no provision for Java &gt; 8 for end-users. They will stay in that version forever until all application providers start bundling newer versions with their apps, but only after they find replacements for Java Web Start (probably GetDown) and javapackager. * Deprecating too quickly * Too many things happened at the same time. For example JavaFX went from being just a command-line switch away to completely separate library in about a year. * Many tools, frameworks, application servers, and JVM languages with slower release cycles skipped Java 9 and 10 completely and tried to become Java 11 compatible, missing the whole deprecation process. * The fate of some projects seem to be always on an unsupported version. Oh, you use all of Spring, Lombok, Groovy, Akka, Launch4j, Checkstyle, any IDE, JasperReports, JUnit? Sorry, there's always one of them lagging behind, so you better stay with Java 8. You can use Java 11 if you are lucky, but that's only when Java 12 is around the corner. Note: actual examples not checked, maybe all of them are up to date. * Vagueness * Oracle stated that it wouldn't provide free builds for OpenJDK 11.0.3 but *someone else* could do. It's not that clear who *someone else* is. We waited for several months to see if Red Hat and/or AdoptOpenJDK would provide backports for fixes and ready-to-use builds for developers and multiple platforms. It seems that they will, but I'm still a little bit unsure.
Yes there are some good plugins right now for some IDEs. But e.g NetBeans has no Support for Open Liberty and it took quite a long time to get a Payara plugin for Payara 5. The workflow I present in the blog is just a fallback if someone is not happy with the plugins or uses a unsupported IDE/Editor (Visual Code, Atom..)
why dont you run it yourself? you'll never learn anything by asking people to do work for you. 
you are right, idk why i didn't think of that. 
Yes. By default it will be null and will output Hello. Assuming you don’t have access to a machine with Java installed, you could try it on a site like this https://www.jdoodle.com/online-java-compiler. You also have a few compiler errors in your example. 
I just started using the latest javalin build, and it looks great (the sample server works and has all we need). What is recommended way to post message to javalin server from php? I found ElephantIO but it did not work and the project looks abandoned. Any input will be appreciated.
I'm afraid that one got deprecated. IcedTeaWeb has an open source alternative which implements JNPL.
You don't pay per patch. You subscribe to some level of support which will include patched binaries of backported fixes. You have to understand the difference here between patch and upgrade. Upgrades are free, and so are patches to the latest version. But if you want bug fixes or security patches in older versions, which are not the latest, you only get 1 for free per old version.
They are free. You can get free Oracle OpenJDK builds right now for free and for production of commercial software from here: https://jdk.java.net/11/
is this a school thing? You could do it a few ways. A couple thoughts... Array containing all letters you want and using math.random to choose which letters to use. or each letter as a case in a switch statement and using math.random to choose. 
Random string or random name? If latter, define "name". For random string, `(char)(ThreadLocalRandom.current().nextInt(65, 91)) + (char)(ThreadLocalRandom.current().nextInt(97, 123)) + (char)(ThreadLocalRandom.current().nextInt(97, 123)) + (char)(ThreadLocalRandom.current().nextInt(97, 123))` should be enough.
Post something that you started to see the way that you get
Here is the list of [open source PDF library](https://www.findbestopensource.com/tagged/pdf-library). You can filter for Java language to get projects listed for Java. You can pick Apache PDFBox, OpenPDF, PDFJet. In case, if you choose OpenPDF, This article about [Read and Write PDF using OpenPDF](https://www.findbestopensource.com/article-detail/create-pdf-using-openpdf) would be helpful.
Search for apache commons lib org.apache.commons.lang3.RandomStringUtils &amp;#x200B; this has all the random string perm/comb which you need. 
Since this is help with *Java programming*, it should be posted in /r/javahelp. **Removed**
What artifact from Maven Central do you add to your POM to get JAXB which was remove in Java 11? I mean implementation not the API. They either pull in too much (like Java Activation API) or does not use the javax.xml.bind:jaxb-api which most of other code uses. I can fix it with excludes in dependencies, but it gets quite ugly. Plus you have to double check that you don't have more than one JAXB API jar in your project. I don't miss Corba and such, but XML binding could stayed in Java "out of the box". Suee it was usually outdated in past Java version and many projects used newer versions anyway, but since the release cycle is faster now it could keep up to date. Also is there "external" Nashorn for Java 11+? Just the javax. script interface would be sufficient.
I bet your car dealer doesn't do maintainance for free.
Pretty dope though
Hi, this is my talk, thanks for sharing. Let me know if you have any questions.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes. And don't give them any personal information. They are pain in the ass with marketing (source: experienced that :( )
Oracle lead the OpenJDK project for the current development release, which oddly is OpenJDK 12, even though it hasn't actually been released yet. This is the only repo that Oracle upstream changes to. If Oracle were to create a fix for JDK 8 based on a reported support issue they would need to decide whether that fix needed to be included into the current code. If it did they would do the necessary work and upstream it to OpenJDK 12. Whether this fix made it into the OpenJDK 8 project would depend on someone backporting the fix and submitting it to OpenJDK 8. This is currently led by Andrew Haley of Red Hat. Assuming he was happy with the code it would be integrated. Any subsequent build of OpenJDK8 would include the fix. Oracle are not the only people who can contribute bug fixes, though. If someone finds a bug in OpenJDK 8 and contributes a fix, the OpenJDK8 build could be slightly different to the Oracle JDK 8 binary. Oracle would, however, most likely see the patch and include it in their build.
Try Xiaomi laptop pro, you can get i7 + 16gb ram and a solid battery for around 800€~. Lenovo thinkpad can probably also be an option, but not sure regarding the price.
/r/SuggestALaptop This subreddit is for: News, Technical discussions, research papers and assorted things of interest related to the Java programming language **Removed**
I've got xiaomi notebook pro, looks good, works well and material quality is surprisingly good. I can recommend it.
Yep. I've been there. I tried out their trial before. They won't stop calling you.
&gt; "I'll write a GUI interface using ~~visual basic~~ Java to track the killers IP address" Honestly, a GUI is a feature they're happy to disclose... L
Thanks for this, just this weekend I started looking at the new module and packaging systems, this link will come in very handy.
And this is the impact to many organizations. Any Java based firm that falls under one of the various certification standards such as PCI must be on a supported, patch version of software. So either those firms now have to plan for regular 6 month upgrades which entails full regression testing of their applications because of what you stated above &gt;It is true that the new feature versions are different from the old "limited update" versions in that they may contain language and API features, or they must decide to pay a long term support license for something that previously was not an expense for them. I have been a long time Java advocate, going back to the Java 1.0.2 days, but I've been spending time researching alternatives to Java and I expect others have as well. 
only for beginners it is.
Organizations that want to run on a secure JDK have had to upgrade the JDK at least every six months for about a decade now. And those update releases contained significant changes, which have always required running full regression tests. For example, just recently, the updates 8u201-&gt;8u202/11.0.1-&gt;11.0.2 ["broke" Clojure](https://cl4es.github.io/2019/02/21/Cljinit-Woes.html). What organizations *didn't* have to do was upgrade a *major* version every six months, and they don't need to do it now, either. In fact, now they *never* have to upgrade a major version because *there are no more major versions*; Java 9 was the last one[1]. JDK 10 wasn't a major version; JDK 11 isn't a major version, and . JDK 12 won't be a major version, either. True, changing the version numbering scheme, which used to give major versions a new integer number and now gives the semi-annual feature releases a new number (AKA "Chrome versioning) is confusing at first, because people are used to a new number representing a major version, which is no longer the case. The new scheme allows us to make upgrades more gradual. So the upgrade situation is now easier, not harder. [1]: Which means that if you are still on Java 8, there is one more major upgrade you'll need to do, but it will be the last one ever.
Not all the things you list are at the same level. &amp;#x200B; Big Data is a buzzword for performing operations on large amounts of data, with specialized tools, frameworks etc. Some Web development involves Big Data. Some Web development doesn't involve the web :D Android apps quite commonly have to speak to servers, also running systems developed in Java. But to answer you question a wee bit: look for things like "back-end" or "full-stack" java development on the job site of your choice. Or find a company whose products you like and send them your cv (with an introductory letter, obviously). Depending a wee bit on where you are, experience is sometimes less important than passion, desire to learn, expand your horizons. Heck, given a rudimentary intelligence, we can teach you to program, but we cannae teach you to Love Programming; that's something you have to bring along.
They're just called jobs. Java is everywhere, doing everything. If there's something you want to do, google that thing and throw in the keyword java along with it. If you need more advice from there, I'd follow up with a new question. 
I dare say that about 80 to 90% of Java usage is invisible to the end user/customer. Java runs in the background processing of the largest enterprises, banks, etc. On the opposite end Java also works on plenty embedded devices, like DVD/BluRay players, MP3 players, and so on. Wouldn't be surprised to find Java in a robot vacuum or robot lawnmower.
&gt; I'm asking for non-mainstream Java jobs that are not web/mobile related. I would say most mainstream jobs in Java involve neither web nor mobile.
Any examples? 
give at least 3 examples that want java devs not for web and mobile
Finance.
Great talk. Thanks for sharing your experience.
https://www.indeed.co.uk/Java-Software-Engineer-jobs-in-London?advn=6888447205197110&amp;vjk=ac89e10ef238adfe https://www.indeed.co.uk/Java-Software-Engineer-jobs-in-London?vjk=24865e1b7a79a689 https://www.indeed.co.uk/Java-Software-Engineer-jobs-in-London?vjk=a514f04c733d6c41 https://www.indeed.co.uk/Java-Software-Engineer-jobs-in-London?vjk=dff93e59c37ac2c1&amp;advn=1828768357092088 https://www.glassdoor.co.uk/Job/london-java-developer-jobs-SRCH_IL.0,6_IC2671300_KO7,21.htm?rdserp=true&amp;jl=3029924685&amp;jaguid=&amp;src=GD_JOB_AD&amp;srs=EI_JOBS&amp;s=21&amp;ao=453532 https://www.glassdoor.co.uk/Job/london-java-developer-jobs-SRCH_IL.0,6_IC2671300_KO7,21.htm?rdserp=true&amp;jl=3029924685&amp;jaguid=&amp;src=GD_JOB_AD&amp;srs=EI_JOBS&amp;s=21&amp;ao=453532
Only 1 says that the role requires java. The other are either general software engineering roles without specifying position details, or they are about java backend. I'd say most java roles are backend web and android.
Integration Tons and tons of Java is used for integration.
FYI, here's the Abstract The feature we always hear about whenever Java 9 is in the news is Jigsaw, modularity for Java. But modularity just doesn't scratch the same developer itch that Java 8's lambdas and streams did, and as developers we're left with a vague sensation that version 9 might just not be that interesting. In fact, Java 9 actually has a lot of great additions and changes which will make Java just that bit nicer to work with. These features can't be lumped under a nice umbrella term like Java 8's lambdas and streams, but the Java 9 changes are scattered throughout the APIs and language features that we regularly use. In this presentation Trisha will show, via live coding: * How we can use the new Flow API to utilise Reactive Programming * How the improvements to the Streams API make it easier to control real-time streaming data * How to the Collections convenience methods simplify code Along the way we'll bump into other Java 9 features that make our lives easier, including some of the additions to interfaces and how deprecation has changed. As the application is built in real time, we’ll see that once you start using Java 9, you can't go back to Before. &amp;#x200B; ***Prerequisite attendee experience level***: Advanced (it's for programmers who work with Java every day, but don't know anything about Java 9)
Most Java jobs involve using some sort of web tech even if they're not "websites" in the traditional sense. The fact of the matter is that there's little reason not to use web tech for UI and communication between components.
[Here's](https://github.com/pgcodekeeper/pgcodekeeper/blob/master/ru.taximaxim.codekeeper.mainapp/ru.taximaxim.codeKeeper/pom.xml#L76) how i do it. The comment above reads "pass property when launching maven". Basically, set this property to any locations that will not be cleaned during the build. After the build all coverage info will be collected into the single file you've passed.
Writing data stores: Elasticsearch, Cassandra, and Hive are written in Java. 
https://www.glassdoor.com/Job/us-javafx-jobs-SRCH_IL.0,2_IN1_KO3,9.htm https://remoteok.io/remote-jobs/71114-remote-java-developer-who-loves-interface-front-end-oreilly-auto-parts you have to search a lot to find these. good luck!
Definitely big enterprise systems and apps, JavaFX is used a lot in my area.
I write Java Swing desktop applications for enterprise
Search for "Java Backend Developer", "Java Backend Engineer" or anything in that vein. Also "Microservices". &amp;#x200B; Note that while the roles will still mention HTTP, that's in the context of SOAP or REST, not as a carrier for HTML.
/r/javahelp Also, take a look at [Where can I find practice exercises and project ideas?](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) from the /r/learnprogramming FAQ
I have been working in Fintech for about 19 years. I would say roughly 90% of Java jobs I have encountered were non-web related. Services, micro services, batch processes, enterprise internally facing systems etc. 
How would someone approach these jobs? What skills to posses? Perfect Java SE knowledge, data structures, algorithms, SQL?
How would someone approach these jobs? What skills to posses? Perfect Java SE knowledge, data structures, algorithms, SQL?
I also work in finance. Java knowledge doesn't need to be perfect, depends on the level though. Plenty of c# or c++ or python devs can get hired in a Java shop.. typically basic algorithms, design patterns, software engineering concepts, databases maybe since finance companies usually have dedicated database teams, knowing networking, systems and things like http help.
Almost every piece of software needs a front end. So unless the company has a hard division of roles in the company between back end and front end developer you're not going to see many developer jobs that have no front end aspect. Personally, I write Java based software that controls different aspects of distribution centers. I would say only about 25% of my development time is on the front end and often that can get handed off to new hires. When I am working on the front end it is usually a very straightforward process of just displaying the relevant data via struts.
My first job out of college I managed a messaging system keeping data stores in sync across a handful of ERP platforms. There was a small web component for management, but it was all internal and the web part was definitely not a focus. My newest job now is starting to get into 'Big Data' type of stuff, but I can't really speak much to it as I'm still learning the ins and outs. But these jobs exists for sure.
I can tell you that our company uses JavaFX as frontend for a desktop point-of-sale app and are hard pressed to find engineers with this talent. Though it’s not widely used FX is in-demand. 
I would say that is still in the context of "web"
Backend: Microservices. Java EE. Message brokers. Transactional systems.
You described the Mainstream Java Jobs, Most of the Jobs involves java is a non-web development, just look for a java back-end developer and read the required skills
I’m hiring ... if you wanna come to Portugal we are hiring java backend developers. DM if your interested!
Well thing is a CLI service is a common thing sure...from the side of the developer. Generally speaking there's a web interface at least for status monitoring, manual operations, etc. A big part of this is it's so incredibly easy to put up a simple web UI with vaadin, spring boot, react, various combinations of them, etc. There are countless frameworks, and most let you make a simple status page in 5 minutes flat. Luckily these pages can be done pretty easily with pure Java. You won't have to touch a JS frontend framework like react or vue. You can actually make some pretty fancy stuff in Vaadin, but I don't really recommend it for anything non-trivial. Something existing STRICTLY in a console made in Java I haven't seen much of in the wild. Usually when I see that it's a personal project. Swing and JavaFX are you're going to see very little of. That's primarily going to be legacy applications you...probably don't wanna work on. Big data is definitely a place you'd encounter something like this but...even then I'd expect a status page, restart button, etc. Especially then even.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Recent refactoring of the opcode parsing algorithm for my MOS6502 emulator led to an approach I thought was quite nice... &amp;#x200B; Readable, composable functions implemented as Enums in Java &amp;#x200B; [https://rossdrew.github.io//emulating-opcodes/](https://rossdrew.github.io//emulating-opcodes/)
Sorry, but I don't get it. What does the gradle plugin do exactly? Until now I just add the openjfx libraries from Maven central as regular dependencies without issues. Why should I use the gradle plugin? 
Yeah, no need to be perfect like the other guy said. Hell, if someone asked me about some weird area of Java I haven’t touched in years (Unsafe? off heap allocation?) I would probably be lost. Yeah, basic data structures are helpful, good knowledge of Java specific structures (ie when to use when not to use Hash/Tree) Generics (again nothing exotic like recursive Phantom Types, basics). Java specific interview questions like Filtered Iterator, etc. Obviously sql is a huge plus in any shop. 
I do not work for Oracle, and I admit, getting less $free updates for old versions is a bummer. But considering that all code was open sourced, eliminating vendor lock in, you can now just switch to Amazon's or AdoptOpenJDK, or the JDK used by popular linux distros, or any others, which is nice, and in fact, I find is healthier overall, as we no longer are as dependent on Oracle as we used to be. As far as I know, there is no alternative language that gives you more then 6 months of backported fixes for free without requiring an upgrade that could also include new features. I wonder if PCI compliance is more relaxed if you use other languages? It's possible they hold Java to a higher bar because it can. But, I have no idea what PCI compliance entails, I'd love to learn more. That said, there are alternate JDK vendors that do. Such as AdoptOpenJDK, Amazon's, or most popular Linux distros. That's probably your best option for getting $free updates past the 6 month marker. Heck, you could even patch and compile the JVM yourself, since the code is all open source. One thing to consider as well, is that you might be better off upgrading every 6 months. Prior Java upgrades used to be very painful due to how long appart they were, and how major the changes between them were. You had no option to amortize that effort over time, since it was a big bang upgrade. Now, you get continuous small upgrades, which should be much quicker and cheaper to perform, and I'd recommend doing it throughout, instead of waiting for one big bang change. But that's just my opinion. I know a lot of shop would wait so long that they'd even run out of free updates on the old license, and would get in a place where they no longer can upgrade at all, cornering themselves in a LTS paid support plan.
&gt; Almost every piece of software needs a front end. So unless the company has a hard division of roles in the company between back end and front end developer you're not going to see many developer jobs that have no front end aspect Wrong. Where do you base this? There are already numerous examples on this thread that say otherwise. Most financial and banking systems have no UI. Several jobs are for queue systems, background jobs, data processing and other segments where no UI is present. In summary, it is perfectly normally to be a Java dev and NOT work on UI.
I've been employed as a backend java developer for 20 years in a bunch of different industries. I'll give you examples of what I've done: 1. Monitoring website uptime, sending emails if website is down, spidering and parsing website contents. 2. Reading traffic sensor speed, aggregating these, generating and distributing a road map with current traffic speed. 3. Processing credit card transactions and communicating with card reader terminals. 4. Fulfilling orders placed on a website by determining shipping, boxing, routing, etc. I'd say the most common technologies used in all these jobs, apart from Java, are SQL/relational databases, Hibernate or some similar database interaction layer, threading, socket IO, or SOAP or REST web services.
Backend for a cash machine, backend for a checkout counter, backend for a train line. "backend" and "services" aren't web specific terms 
I mean this is purely personal experience. If you have data on what percent of professional software products of software companies don't produce any front end, please let me know.
Robotics! I work for Liquid Robotics building marine robots and nearly the entire stack is Java. And we are [hiring](http://jobs.jobvite.com/careers/liquid-robotics-inc/jobs?__jvst=Career+Site)
**TL;DR. Rewrite in Go**
Thank you, I just confirmed this works. I remember I was trying to avoid creating a separate module because it feels wrong, but it looks like we do not have much choice, do we. Beer on me if you ever get to Prague, Czech Republic.
Framework knowledge (spring), build systems and tools, knowledge on how to implement continuous deployment, are all much more important than a certification.
Thank you. This is tricky to get to work because this only solves the part of aggregating the exec data (It solves it beautifully, though!) The other half - creating a report using the exec data, with the correct sources, seems to be just as hard.
Spring Hate Us. I still cant understand what practical application can it have :-/
I'm confused now what people think is web dev if it doesn't include services over http.
Looking at the xml of the Maven plugin which I guess is just mirrors the functionality of the Gradle plugin it seems to output an executable jar file
You mentioned Big Data, and that's a big one. There you'll see all of the data processing systems related to hadoop/spark/beam. A lot of that is a mix of Java and Scala, but they're both in the JVM and it's good to know both. I've worked daily with Java since 1997 and have never used Swing/JavaFX/Android for that. 
In my case, we have a self-hosted SonarQube server and after the main build/tests Jenkins runs a sonar task that feeds it coverage data among other things. 
That was a great read. Thanks for sharing it.
Hmm... all of the stack is in Java? Hmm... wonder who is responsible for that ([https://www.liquid-robotics.com/press-releases/james-gosling-joins-liquid-robotics/](https://www.liquid-robotics.com/press-releases/james-gosling-joins-liquid-robotics/)) ;-) Is he still there at all? I believe I heard he went to AWS? Man I would love to apply... (under)water robotics and Java... right up my alley. But family keeps me in Iceland alas. But out of curiosity, can non US citizens get a job there? When I participated in the robosub competition in San Diego, some guys from Space X came to recruit but they said they wouldn't be able to hire anyone from the foreign teams because of some security clearance issues since they were a defence contractor.
I'm working on XMPP server written in Java
 I work in robotics, and we use Java for creating a Swing frontend on a touchscreen device
You are there first person, in the two years I've been learning software development, I've heard say was using Swing. Is it uncommon?
I'll trow one: data, the big one, Hadoop is JVM. &gt;non-mainstream Java jobs that are not web/mobile related. that might be relative depending on the region, so you need to define \*\*mainstream\*\* for your case first.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
G E N E R I C S &gt;
Tried HATEOAS, ended up ripping it out of one application as it just added way to much compexity and overhead for a simple CRUD app
A better name, for what we call Functional Programming, might be *Value-oriented Programming*, in that "values" leads more directly to functions as values, immutability and expressions (as opposed to statements). It also gets you started down the road of effects as values (monads et al).
James moved on to Amazon just a little under two years ago. Yes, unfortunately most of the current jobs require that you be a US person, either a citizen or permanent resident. We also don't have any remote positions right now.
Not as uncommon as it might seem, but my guess is that Swing is not used much for customer facing software, the web is easier for that. So maybe we don't see as much?
+1. u/ArmoredPance says we are confused in an update to the OP, so I have to ask: &gt;non-mainstream Java jobs that are not web/mobile related. So a niche?! Java is maintream. Years and years of computer programming language surveys and studies have said this. (I don't mean Google searches or even TIOBE but GitHub public repos, Indeed job openings, Redmonk meta-sampling, etc. ... assuming there are many private repos but what's public is a sampling that resembles what is private.)
You're not confused. Folks have conflated the terms. JEE has a good delineation between web vs web _services_. The spec includes a servlet for HTTP but that is separate from a REST endpoint, done via JAX-RS. Nowadays, the kewl kids call it all "web dev" even if it's just CRUD operations going over HTTP.
I work in a hotel IT dept. It has own website which is developed in AEM+CSS+JS etc. and no JSP/Servlet. The back end is completely built using java spring based code. On the other hand, We also has 10+ back end applications for syncing inventory data to all travel companies, facilitate APIs for companies to fetch real-time data from us, audit and reward system calculations etc. everything's done in java applications which doesn't have UI. So despite working for so many years, my UI coding skill is still primitive where as Java skill is earning my livelihood. So you don't always have to work in UI in Java.
Thanks! If you're asking for a recommendation for a PHP library to use I'm not the best person to ask. Maybe you can post to Javalin directly from the frontend? 
Totally fair. I'm a firm believer that most companies should separate the back end and front end into two different programs. Then it becomes a matter of whether or not the company actually has separate back end and front end roles that do not ever cross into the other. My original point wasn't that all Java developers work on Java controlled front ends, but that most Java developers will encounter front end work even if they take on a primarily back end role.
I know multiple companies that use swing day to day. Big names include jet brains that uses swing for intellij. But I know a lot of defense contractors and finance shops, so thousands and thousands of devs that use swing in some fashion.
&gt;most Java developers will encounter front end work even if they take on a primarily back end role. It used to be correct in jsp-servlet era. But now a days, we have a clear separation between UI and back-end code and applications thanks to so-architecural shifts happened in software development. Now a days UI portion is dominated by various UI libraries, frameworks (React, jquery, angular, vuejs etc.) and people rarely uses jsp-servlet. I don't think in most of the job interviews you'll not be asked about jsp-servlet handling.
Right. I wasn't talking about developing JSPs or servlets specifically. I was talking about devs often having to take on full stack roles instead of back end exclusive roles. It sounds like your company has a clear delineation between the front end and back end roles and that your work ends at the API that your front end devs will make the front end interface with. Which is great and what companies should strive to do.
I love Trisha. Her Java 8 in anger with JavaFX was fantastic. 
I also liked it. Day 16 and 19 in Advent of Code 2018 was building an emulator. Let me know what you think. https://github.com/tofflos/advent-of-code-2018/blob/master/day16/java/Main.java. ;-)
The defense industry does a lot with java that isn't related to the web. clearancejobs.com
Do you have a link?
This is really cool. An open source competitor for IDA Pro and it is written in Java. This is the kind of "tax dollars at work" that I can support.
I like doing it this way, but I usually rethrow the exception and have it in the @Test too.
u/DeontologicEthics your timing is uncanny. &gt;Building the OpenJDK is suprisingly easy Easy as in trivial human effort? Or quick compile time? Just yesterday I was experiencing some lagginess in an app that was just ported from OracleJDK to OpenJDK -- a theme I think will start happening more and more --, and I suspect there is some tweaking to do for how the JVM was built, since the target was also a new architecture (aarch64); but I'd never tried building OpenJDK from source. Trying your steps out now.
I've got so much work off the back of knowing Java based integration platforms like Apache Camel, IBM Data power, Vordel, mulesoft, Oracle ESB. You can almost write your own cheques. 
Since this is a question about *Java programming*, it should be posted in /r/javahelp. Probably, even /r/algorithms is better suited. **Removed**
Ok fanks
I was looking to test putting spring app in docker. This will come handy
I’m a Java developer who works on backend services. APIs, data movement and business logic. I’ve built web apps but mostly have been a service provider or manager of data. If you are interested in that sort of thing message me. 
For me it was both. Might be different for your system, but since I already had xcode, all that was needed was \`bash configure &amp;&amp; make images\`. Build time was \~10 minutes. &amp;#x200B; The size benefit for jlink'd images in my 'minimal' variation is \~10mb, which may or may not be worth it for you.
Oracle SOA lets you right your own ticket it seems :)
Yeah I'm never going back to that shit though
http://tigase.net/ and sources can be found in https://tigase.tech/projects/tigase-server/repository/
I've seen this post a couple times. It always caught my attention you link the french version of corretto.
I love it compared to other frameworks I have worked with.
Neat. I like it. Previous poster is reading opcodes andapping to a lambda, yours is kinda like the code is a stream of lambdas. To allow reading dynamic code at runtime you'd probably add all triconsumer operators into an array and assign opcodes to each triconsumers index in the array. OP didn't have the luxury of being able to dictate opcodes, otherwise that would have been easier. Also, of course, his opcodes were a bot more complex. I should look at Advent of code, looks fun.
I develop analytics with mapreduce and use Java. Most java jobs are not web development. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've done data and image processing for R&amp;D firms when we had customers on Windows and Linux. 
Awesome stuff
Check out http://functionalj.io . It brings many FP concepts to Java 
Was that a GOTO conf vid too?
Pretty much every java job I've had in the last decade was backend.
I think so. I saw it from here: http://trishagee.github.io/presentation/java8_in_anger/
Ooo, her own github? Thats even better.. cheers!
Gradle is an alternative, so simply use the one you're comfortable with (ie: maven)
I have worked with web services. It's an adapter from the client to the server. I like this kind of job because you have to think about the business rules and the logic to apply.
Yeah backends with internal status pages or controls in a small webapp is pretty standard
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What a horrible acronym and useless overdesigned technology. I mean sure, discoverability and all that, but corporate coders can't even do proper REST APIs...
Even though Clojure is running on the JVM, it is not Java and thus off-topic here. Removed.
I hear you! Especially, as it's so easy to read as HATE Oracle Application Server, which – for the record – it does \*not\* mean. Part of proper REST APIs is the hypermedia aspect and there literally is no other library out there currently, that has such extensive and seamless support for that. I.e. if we can help people write better REST APIs, it's all worth it.
Agreed, it doesn't make much sense for CRUD apps. However, if your API only exposes CRUD functionality you push all business logic in the clients and then replicate it amongst them and – even more fundamentally – have to keep it in sync between client and some way to half enforce them on the server. That creates coupling, makes evolving APIs harder and leads to the impression that "REST doesn't work". I think the key is to keep more of the business logic on the server and expose hypermedia controls to make use of that and prevent stronger coupling. That naturally leads to more high-level APIs over CRUD ones. If you're interested, there are more details about that in a deck I have [here](https://speakerdeck.com/olivergierke/rest-beyond-the-obvious-api-design-for-ever-evolving-systems). Recordings of the talk available [on YouTube](https://www.youtube.com/results?search_query=rest+beyond+the+obvious). &amp;#x200B; tl;dr – CRUD APIs are not the best fit for hypermedia and vice versa. That said, CRUD APIs are usually not the best fit to produce loosely coupled, evolvable APIs in the first place.
To cite Roy, hypermedia is a [crucial part of REST](https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven) as it's the foundation of a lot of the effects that people are after when building REST APIs: low coupling, evolvability. Leave away hypermedia and you're losing out on these properties. That's how people often get to the impression that "REST doesn't work". I've tried to give a bit of background and a practical example on this in [this deck](https://speakerdeck.com/olivergierke/rest-beyond-the-obvious-api-design-for-ever-evolving-systems), probably best studied through [a recording of the talk](https://www.youtube.com/results?search_query=rest+beyond+the+obvious).
Neat! How does this compare to Distroless images? (https://github.com/GoogleContainerTools/distroless)
Suggesting an alternate naming here (seems, that's the most important part) :-) https://twitter.com/MartinGoodwell/status/1103206099560337408
Wrong subreddit. Such questions belong in /r/learnjava. The /r/learnjava sidebar (old reddit) has some highly recommended tutorials, one of which is on Udemy. From the sidebar of /r/learnjava: &gt; &gt;**Free Tutorials** &gt; &gt; * MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki &gt; * [Java for Complete Beginners](https://www.udemy.com/java-tutorial) &gt; * accompanying site [CaveOfProgramming](http://caveofprogramming.com) Do the MOOC. You will not regret it. ---- As for taking notes: handwriting is the most efficient way as the retention is much higher than when typing the notes.
I would not advice to build openjdk yourself and use it in production unless you are going to go through TCK process. The fact that it compiles and your application starts means almost nothing - you might get very unpleasant surprises later on.
Would you allow remote work?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Java is the backend of almost every AWS API, and if I had to guess, Google too. If you understand Java generics, C# is easy, which is probably the backend of most Azure APIs. Everything serves the web eventually these days, but you can easily find a career where you never touch HTML, CSS, or JS if you can do Java well. Study consistent hashing, bloom filters (and other probabilistic data structures), and continuous integration, you’re good. Work for one of the big five for a year or two to get a lesson in horizontal scaling, bada bing, you’ll never be truly challenged again.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Also avoid Facebook. They use a weird custom PHP and monolithic architecture. You’ll get brain damage. Although to be honest, if you can handle it, that’s probably the closest to how every other company works but they also have to deal with the maximal scale of anywhere. But still, I’ve never worked there, but I’d go back to Amazon before I went to Facebook. I dunno. They’ll all kill you. Work for one of them, it’s the real college for programmers.
Explain me this. Discoverability in HATEOAS seems like a runtime (dynamic) discoverability. You never know what links you'll get. Links themselves are REST calls with their own path and template parameters, request and response models. How can I write a statically typed client for that without the prior knowledge of what links I can get and what their rules are? It seems like this discoverability is intended for humans who are exploring the API and not for the programs with need to do concrete calls to implement some flow.
NoSQL is mostly re-implementing the very specific feature set you need with distributed hash tables as your main primitive. It’s hella useful for writing efficient SQL queries though too. Window functions broke my brain, and then I re-implemented them in AWK, sort, and join (look up manpages on all of them) and now they’re so trivial I got mad at the syntax only when I had to do a LAG(x) on MySQL 5.7. Iamverysmart so I just re-implemented it with a temp table and `SET @var=-1; SELECT @var AS prev; @var:=col AS cur FROM dongs ORDER BY col` (order by is v important because var assignments is stateful and not true SQL). Anyway, all companies are bad and do the bare minimum. Big 5’s bare minimum is the state of the art (but still extremely bad except for core stuff like DynamoDB or Guava), but as far as I can tell it’s mostly impossible to learn it anywhere else. Stock up on meds, do maintenance on your family and close friend relationships, work for Google, Microsoft, Facebook, Amazon, Netflix for a year or two, get our before suicide, enjoy the rest of your life and don’t be a dick to co-workers who didn’t go through programmer ‘nam.
&gt;Would you allow remote work? In some cases yes, we already have 10% of the team on offshore.
The plugin takes care of choosing the right dependencies for your platform. Without it you would have to write something like this: def currentOS = org.gradle.internal.os.OperatingSystem.current() def platform = currentOS.isMacOsX() ? 'mac' : currentOS.isLinux() ? 'linux' : 'win' dependencies { implementation compile("org.openjfx:javafx-base:11:${platform}") implementation compile("org.openjfx:javafx-graphics:11:${platform}") implementation compile("org.openjfx:javafx-controls:11:${platform}") ... }
Oh, and number one tip period: YOU CANNOT GET A TOTAL ORDERING FROM TIMESTAMPS AND TOTAL ORDERINGS ARE FUCKING ESSENTIAL TO CI-COMPATIBLE ETLs. But never yell about it, because it seems to be utterly antithetical to the way anyone thinks and they won’t understand it and just think you’re a dick. Just insert monotonic counter into every row all the time, and if someone gets mad about it just to “hey baby it’s 32/64 bits, what’s the big deal?” Because they won’t even have the ability to yell about the horizontal scaling issues (you provably can’t make a monotonic counter without a locking mechanism, which to preserve horizontal performance requires a vector clock [a vector clock has literally nothing to do with a wall clock except they both only go forward] which is much easier to deal with by going N+1 and I’ve seen N when N is just a number instead of a weird abstraction involving leap seconds and days and quantizing the passage of cause and effect)... Yeah anyway. Put a counter on everything. Make wall clock sync issues explicit, you absolutely must have a conflict resolution protocol as soon as you’re running on more than a single core (and these days, single cores also deal with that, they just hide it from you, but it’s rarely relevant in Java [use Guava concurrent containers it’s some of the best engineering I’ve ever seen], and while more commonly, still almost never relevant in even C++. Just fucking put a counter on everything. Trust.
Also immutable data structures. Always, period. Mutability is a lossy optimization, treat it as such unless you love telling customers you suck ass and can’t recover from bugs.
Advent of Code is really good fun. Makes for a tough December though near the end :P &amp;#x200B; Yes, I was looking for a system that allowed minimal duplication and having to meanuall do things like in u/tofflos case: \`\`\` var instructions = Set.of(addr, addi, mulr, muli, banr, bani, borr, bori, setr, seti, gtir, gtri, gtrr, eqir, eqri, eqrr); \`\`\` because that's one more place an error of omission could be a problem. &amp;#x200B; You'll notice my solution still has some problems, mentioned near the end that I'm working on but hopefully when I start adding more kinds of processors the same pattern will apply and cut my workload in half.
Oh and never express these opinions in any interview, even at a big 5 whose interviews are designed to figure out if you get these concepts. About 1/3 people at those companies even get it. The interview questions are designed to fool _them_. Just make it work, and give your variables good names, and if you’re nesting `for` loops you’re doing it wrong (if you can get through the nested for implementation in 15 mins, do that, we love the optimization part and you’d have to fuck up real bad to lose it at that point, but make sure you’ve got at least 20 mins). It’s real weird and stupid. But yeah. A non-frontend career is easier to accomplish than ever before because we gettin specialized as hell. 
Hadoop is an excellent abstraction of `map(hash(node))` and a fucking abomination in practice because I think maybe we’re genetically motivated to only understand _avoiding_ avalanche effects. In 1,000 years programmers on our level will be downs kids.
Swing is crazy common and you use it way more than you realize.
\&gt; How can I write a statically typed client for that without the prior knowledge of what links I can get… You don't. Clients are built in a "if a link with relation X appears, I know I am allowed to do Y"-kind of way. They of course have to know which HTTP method to use, what data to send for the request. There are advanced media types that push this to the runtime (like HAL-FORMS) but that the decoupling effect already kicks in even if you don't do that. The basic mechanism at play here is that you avoid to replicate business rules ("When is a user allowed to cancel an order?" from the example in my slide deck linked to above) into the client by boiling them down to "Is link X present or not?". You replace a complex decision ("field X has to have value Y to allow this") that would've been hard coded into the client with a simple yes/no one. Remember the days, when we had server side rendered HTML and permission checks around the rendering of the button to delete a user? All those rules lived on the server and the client just displayed it. That's where we're heading. In the ideal case this can even lead to the client apparently learning new tricks if the server decides to return a link the client already knows in places it didn't return it before. In my example above you could start to allow the cancellation of the order even after it has been completed. \&gt; and what their rules are? It's all in the specification link relation, is usually hard coded into the client. 
Well-designed APIs are just CRUD, and the truly great ones hide behind that. Imagine expecting all of your consumers to understand [Hyper Log Log++](https://en.m.wikipedia.org/wiki/HyperLogLog).
Even TRIEs are fucked-up enough that I got a job on the spot when I understood how they would be used to implement autocomplete on the spot. Madness. Achieve mediocrity, you’ll go far.
Imagine understanding all of Python’s default `sort()`. I sure don’t. I get the galloping mode and shit, but the statistic that went into figuring the mode switches? Yeah, I’d have to spend my life to figure out how to pick those values.
Oh, also, working on web services rules. Client-side? Got a bug? Congrats, you’re fucked. Six months perfect operation is the baseline. Server-side with CI? Bug? Fix, merge, deploy, sleep like a baby. Rendering JSON is server-side backend shit these days. Hell, even client-deployed things do IPC with JSON over pipes instead of setting shared memory strings. There’s so little difference anymore, except the old way is way harder and you’re selecting for Luddites and basically every client-run software sends way more uniquely-identifiable information than any cloud software so if you really insist on that separation, DJ Khaled meme, congrats you played yourself. Stop using computers or phones or googling or netflix or HBO Go/Now or even looking at Apple News or spending different amounts of time looking at interesting vs spam e-mails or browsing literally any website. Not that you’re wrong to hate it, it’s a shit state of things and privacy not only doesn’t exist in the way it did anymore, just, there’s no alternative. Write backends to APIs, get your money, be one of very few people that gets to retire anymore, and enjoy that you’re uniquely part of a class that has no _need _ to retire and only does because not only can you, it’s easy.
I had a chat with the author of the piece about this. He replied with the following, which was useful to clarify where the Galleon capability is being positioned: &gt; With Galleon, we focus on XML configuration (standalone.xml, ...). The configuration is key. We generate configuration and try to reduce the set of modules to what the configuration requires. The sizing is a side effect (interesting but not the main goal). Thorntail is a fat jar approach right? You don't have WildFly XML configuration in the picture? I would say that Galleon tries to reduce the server content using the existing WildFly configuration framework, Thorntail took a different approach. 
Thank you for the talk! :)
A lot of the code in the series is written in Java as well. Surely we can allow this? 
/r/javahelp or stack overflow are probably your best bet. This sub is mostly for news and discussion.
Oh ok. Thanks 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
/r/javahelp is for programming help. **Removed**
Too late now, gotta do it all over again with GraphQL. Such is the way of the frontend.
What are you talking about dude is this a copypasta?
Well....you certainly made a response. It doesn't seem very coherent, but it's a response.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 Most developers don't get basic oo + imperative programming. This is less expensive to write, test, maintain and enhance. Having written plenty of scalable blocking code and used RxJava it's nice not to have to write the logic yourself but I've seen it used in Android apps instead of unit tests. Disaster. Rx also blocks you just queue up elsewhere. Like T says. Trade-offs. 
I thought Flink was the new hotness? /s
Wait, what about C#?
https://github.com/Microsoft/Mobius This project aims to provide that integration!