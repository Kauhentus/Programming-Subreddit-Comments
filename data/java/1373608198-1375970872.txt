XML examples have no elements in them. Looks like a pretty-printing problem. 
&gt; First, I would suggest finding a project other than something "mission-critical" for your first real Groovy application. Rereading my post, I can see your concern. This will be my first web-centric app and I want to know if I should continue to spend the next twenty months developing grails skills (and thereby focusing more of my time on the development of the data and relationships) or invest my time in PHP and Apache. The app itself will start its development after I am free of current work commitments (and any non-competitive agreements, if my employer is watching). Thanks for taking the time to respond. 
That's quite an interesting idea. I would love to see a multiplayer version of this. For the implementation you would first need to come up with a solid model of your world and define one or several interfaces which describe how your entities can interact with it. If you intend to make it run for months on end you won't be able to change it unless you make that pluggable too, but that can add a lot of complexity. Then, to create a new entity, write and compile a class implementing those interfaces. You can then load the class in your running world using an [URLClassLoader](http://docs.oracle.com/javase/7/docs/api/java/net/URLClassLoader.html). 
I'm curious about the deleteOldObjects() method you mention. When would you use that? I actually hadn't thought about deleting them as they would eventually die inside the world (when certain requirements weren't met) so no real need for deletion. I kinda saw it like this. Start the world on Monday with no objects, it just sits there idling. 2 days later I write Chair.java and load it into the world. On the map I see a pixel. It does nothing and goes nowhere. The chair will stay there for ever (while the world was running. ie: I didn't think about deleting??) A few days later I create a cat object. Now I see two pixels on the map, except this one may or may not move about. Wash... rinse.. repeat. 
Tomcat is a very well-seasoned JEE web container. I'd have no worries about deploying an app on Tomcat for mission critical work. In fact, my company uses Tomcat for nearly all of its products. That aside, I'm no fan of Groovy, and from what I've seen of the Grails ecosystem, the quality of modules tends to be poor and the docs are sparse. If you're looking to PHP and Apache as an alternative, my word of advice is: don't, unless you stick with a framework (like Laravel).
Here's a collection of links to get started with JSF: https://jsf.zeef.com I personally liked Ed Burn's book, but the 2.0 version is in dire need of addressing some erratas. It also contains a ton of background and internal details that you don't necessarily need to get real world stuff done. Consequently it's rather light on hints and tips for everyday and typical JSF tasks. Besides the links mentioned above, I like these examples: * http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config * http://jdevelopment.nl/sample-crud-app-with-jsf-and-richfaces And my own one: * http://henk53.wordpress.com/2012/04/15/jsf2-primefaces3-ejb3-jpa2-integration-project
No chance of a multiplayer, it's barely even a singleplayer.. hehe. Actually, it's a stetch to even call this a game... it's closer to being a software equivalent of a petri-dish. I guess it wouldn't be the end-of-the-world (pun intended) if I did have to make changes, recompile and restart, but I'd lose all the prior history/data of all that went before though, so creating some type of plug-in infrastructure would probably be overkill for what I need I kind of like the idea of walking away from it for long periods and then coming back to it when I get the time to analyse whats been happening in the meantime. The URLClassLoader looks interesting, and it's in jdk6 so I'll have to dig up some examples of how to properly use it when I get home tonight.
The netbeans tutorials are really for practical application. If you do not use netbeans there is no configuration. Just download an executable with the application server bundled and you are good to go. Netbeans.org https://netbeans.org/kb/trails/java-ee.html
Who uses JBuilder since the 90's? Borland were their own worst enemy. In their eyes if it wasn't Pascal then it sucked. Unfortunately for them most people realized that Pascal sucked. 
I already have several times in this forum. 
Persism is simpler than all of these. The idea is that it should be smart and auto discover everything for you with the least amount of boilerplate possible. Don't you find things annoying like the fact that in many of these ORMs you have to annotate everything? Why can't the damn things just *know* my class is Customer and my table is "CUSTOMERS"? How hard can it be? Well actually not so hard. That's what Persism tries to achieve. It should "just work".
Well for one it uses a scene graph. This allows you to express what you want to do rather than how you want to do it. You should check some examples of it. With Java 8 this will be a killer since it will have 3D out of the box. 
[balusC](http://balusc.blogspot.de) this guy is *the* man. Check out all his answers on [SO](http://stackoverflow.com). I learnt so much from him.
Did you consider [OSGi](http://en.wikipedia.org/wiki/OSGi‎) yet? I have no practical experience with it, but a colleague used it for a project which required to update bundles on-the-fly without restart of the application. Might be overkill for your purpose, but maybe it fits your needs
I know your sad that when Java 8 comes out Clojure and Scala will die but get over it.
That's not true. JBuilder was Borland's cash cow and they milked it for all it was worth. The JBuilder team were treated like rock stars. The "article" is pretty accurate in saying that free and open development tools (specifically Eclipse, NetBeans was still a joke at that point) shot the cow, carved it up, and ate it. Afterwards, the only thing left to do was to blow the wad from the cow by acquiring companies in a misguided, short-sighted, and ultimately futile attempt to find something, *anything* that could sustain the house of cards in a world where development environments and even compilers are commodity items. Borland's management, who were mainly just along for the ride to make some big bucks, sat there blubbering and then started jumping off the ship like rats. They brought in some Aussie maniac who I kid you not, stood up in the big auditorium at a quarterly meeting and talked about taking a knife and using it to stab the competition in the heart. In the end of course, with the cash cow dead and gone, the fame evaporated and you could walk for days and days and days in that beautiful Scotts Valley campus and hear your voice echo through the empty cubes and hallways where the JBuilder guys once were. The only thing left to do was to go back to catering to the whims of rabid, foaming at the mouth Delphi fans who never quite made it out of 1989. Anyway my main point is that Borland wasn't fixated on Pascal as you say. They were fixated on following the money and sucking the teet of their cow. Unfortunately Delphi is more of a cash rodent than a cash cow. 
Perhaps you could list some specific concerns, and we can discuss them? I can't think of any other web framework with major backers than JSF that might be available only as a functionality subset for such a small concurrent user base. The biggest challenge with Grails in such an environment might be the apparent amount of duct tape holding it together: http://www.reddit.com/r/java/comments/1gqoqe/til_basic_grails_functionality_depends_on_some/ Tomcat and Jetty, as servlet runners, are perhaps the most widely used platforms for business critical applications I've seen in enterprises and startups.
ROFL I feel really sorry for you. You're utterly ignorant and actually proud of it. A kind of a poster child for the average java developer.
&gt; if it wasn't Pascal then it sucked Well Delphi rocked. I used it when I worked on a port of a Unix X11 to WinNT4. We moved the C/C++ code over and built a DLL using Watcom C++ and then built a UI using Delphi. We started using MFC but the ease of building GUIs in Delphi won out. 
I thought the future module system (coin I think it's called) only internal to the JVM to make maintenance easier? If so, OSGi-ifying libraries won't future proof them, in that context at least
Did you get any indication as to which version of JSF you'll be working with? I hope for your sake you're not going to a company that's stuck using one of the earlier versions... As /u/nytal says, BalusC is the one to listen to - as long as you're able to Google the right term for the problem you're having, if an answer from him comes up that'll be the one to follow.
Hey, funny you should mention that... I read something recently about Java 10 doing exactly that, the VM only supporting five versions back, and deprecating the oldest two. I can't find where I found it. I think it was on /r/java at some point.
Interesting. Looking into it, the only backwards compatible break rumored is the removal of primitives.
Keep crying.
Of course Delphi was great. The problem was that it used an unpopular language. Borland never put the effort to make C++ Builder comparable and they sold the rights to Turbo Basic. Imagine if Borland had made the same toolkits like Delphi around C++, Basic and Java? They would still be in business now. Their obsession with Pascal is what drove them into the ground.
You're welcome ;)
Good point to ask for the version. If you have to use JSF 1.x, you might want to politely refuse the job. This version wasn't very good. JSF 2.x is a totally different beast and really good.
sounds like you're the only one crying here
What I read was a little more version oriented than that. If I ever find it, I'll update.
He was probably thinking "Don't know if we need it, but let's add this awesome utility, just in case!" Right. [Just in case](http://www.extremeprogramming.org/rules/early.html)
Coin is a project to enhance Java in various ways, e.g. the Diamond operator. - Joe Darcy's slides for [JDK7 In Action](https://blogs.oracle.com/darcy/resource/JavaOne/J1_2012-Jdk7Action.pdf) - Slides for a talk about [Coin](https://blogs.oracle.com/darcy/resource/Devoxx/Devoxx2010_ProjectCoin.pdf) The splitting/module system is [Project Jigsaw](http://openjdk.java.net/projects/jigsaw/), I think. My naive hope is that Project Jigsaw will supersede OSGi in the future...
jigsaw is supposed to be compatible with OSGI from what I've heard, but it will definitely replace OSGI.
Funnily enough, while using OSGi isn't terribly simple in itself, the bundles you end up using tend to be simpler than non-osgi ready stuff.
making a statement about yourself there are you?
&gt; They tend to encourage bad code. People will just write bad code without comments, which IMO is allways worse. Writing a good comment requires you to think about what your code actually does. &gt; We are transgressing the DRY (Don’t Repeat Yourself) principle. If this applies you fail at writing comments. Comments are for humans and can express things the programming language cannot express cleanly. &gt; Comments are not testable/verifiable. The python maintainers did not get that memo. &gt; A practical example, if our boss ask to us if a change was made, where we should look ? Code or Comments ? In your svn history? Maybe git, VSS, ... . I mean things a professional programmer uses daily? &gt; When we are changing code we can rely on tools, like compilers, IDEs and unit tests to help us. Comments don’t. Comments are an addition, not a replacement to these things. &gt; Some comment styles can fill a lot of screen space You just mentioned IDEs and then bring that point. Code folding is not a recent invention and every IDE I have used in the last 3 years could do it just fine. ~~TIL~~ TL;DR: comments are not a replacement for tools and common sense. Edit: tired, mixed up TIL and TL;DR; 
I sincerely hope so ...
I'm doing a project with JSF 2 and can't imagine something even *worse* than that. I wonder if there's a point where it becomes easier and one starts to appreciate it. 
So, do many folks actually use this? I thought most, if not all, professional devs used one of the big 3 - eclipse, IntelliJ or netbeans? Should I be checking this one out?
That's a nicely structured overview. Not bad
I used PHP and Flask previously to make web applications, now with JSF I have to write a little bit more code, debugging is hard (sometimes there are bean setter called many times for no apparent reason and I have no idea who is calling them because of reflection, moreover error messages are pointless: last week I had a page with an "UTF 8 error" but it didn't tell nothing about the position of the offending byte, had a funny hour removing and putting back paragraphs before finding it. Sometimes the error is a white page and a stack trace from some library internals and I just restart the whole thing), I find the whole XML templating thing awkward (because of similarity between real XHTML is difficult for me to understand what will be eventually send to the client, and the generated HTML is one of the ugliest I've ever seen). Then I have to reload the whole application any time something is edited (I heard that there are "hot reload" tools for it, however we cannot use them) and wait a century for Spring and friends to initialize again the galaxy. Another thing that astonished me was the XML format used for AJAX: what if I need to put a custom JavaScript in a page and make AJAX call ? As far as I understand, JSF uses verbose XML objects to communicate with scripts, not the JSON strings usual in JavaScript world. Really, I don't understand whether is just a terrible software or there's an advantage using JSF and after some time of frustrating learning I'll find it useful and efficient.
No, don't change the JDK trust store, and assume that it'll stay changed. Maintain your own key and trust stores for your application, and point to them as so: http://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/JSSERefGuide.html#CustomizingStores
No, I think Javin Paul seems to be sincere in constantly posting this kind of advice.
WTF, "the deciding factor here is JVM startup"!?! I hope the author replies in the comments and tells us that this test is somewhat valid, and measurement starts only after the JIT has run.
To be blunt, it sounds like you need to go through the tutorials again, and maybe have a slightly more open mind about JSF compared to other frameworks. &gt; I used PHP and Flask previously to make web applications, now with JSF I have to write a little bit more code True, but you get a much cleaner separation of the presentation and code layers - PHP may be less code, but mixing everything in the page is an awful idea. &gt; sometimes there are bean setter called many times for no apparent reason and I have no idea who is calling them... Read up on the JSF lifecycle, specifically where values get restored and updated. If it's causing problems though, it indicates poor structure in your classes rather than a flaw in JSF. &gt; error messages are pointless: last week I had a page with an "UTF 8 error" but it didn't tell nothing about the position of the offending byte, had a funny hour removing and putting back paragraphs before finding it. Sometimes the error is a white page and a stack trace from some library internals and I just restart the whole thing) Try setting javax.faces.PROJECT_STAGE in web.xml to see if that helps. &gt; I find the whole XML templating thing awkward (because of similarity between real XHTML is difficult for me to understand what will be eventually send to the client Not sure I follow your point here, especially not compared to the mess that PHP pages could end up as - facelets are very easy to follow unless you get into masses of include/define etc templates. &gt; and the generated HTML is one of the ugliest I've ever seen I honestly can't see why that should be an issue, any sane developer toolkit will format the HTML for you. If it bothers you that much, and you're using MyFaces, enable org.apache.myfaces.PRETTY_HTML in web.xml. &gt; Then I have to reload the whole application any time something is edited (I heard that there are "hot reload" tools for it, however we cannot use them) and wait a century for Spring and friends to initialize again the galaxy. That's a problem with your environment, not JSF. &gt; Another thing that astonished me was the XML format used for AJAX: what if I need to put a custom JavaScript in a page and make AJAX call ? As far as I understand, JSF uses verbose XML objects to communicate with scripts, not the JSON strings usual in JavaScript world. Sounds like you're fighting the framework or unaware of existing solutions to your problem - check out [Primefaces](http://www.primefaces.org/showcase/ui/home.jsf) for a range of components which should cut any custom javascript requirements down to a minimum. &gt; Really, I don't understand whether is just a terrible software or there's an advantage using JSF and after some time of frustrating learning I'll find it useful and efficient. It's the latter. JSF 1.x was terrible (if you want an example of this, read up on the verbatim tag), JSF 2.x (with the supporting libraries like Primefaces and Omnifaces) is great.
Others have described how you can leverage class loading to achieve your objective. If you also need to make changes in already running code, you'll need to either create a system for saving actor state, removing the old version of an actor, and activating a new version with the previous state intact. If you want to go fancier, you can use the Java debug functionality to reload classes, or systems such as JRebel or LiveRebel to reload a wider array of allowed changes.
&gt; Then I have to reload the whole application any time something is edited (I heard that there are "hot reload" tools for it, however we cannot use them) The first is not really true in general. You can edit Facelets and reload the page without needing any special tool. You can also edit code inside any method and just reload a page again without needing special tools. Some IDEs are setup by default to reload everything after a tiny change, but that's really the IDE then and not JSF. Using Eclipse/JBoss Tools/JBoss AS (all free) this is never an issue. If you want more, then there's JRebel, which works really great and is probably the tool you are referring to. &gt; and wait a century for Spring and friends to initialize again the galaxy. Although JSF does work with Spring, you'll get the best experience if you use it as part of Java EE really. Everything integrates and works just better then. &gt;what if I need to put a custom JavaScript in a page and make AJAX call Just do so! There's nothing stopping you. &gt;As far as I understand, JSF uses verbose XML objects to communicate with scripts, not the JSON strings usual in JavaScript world. This is indeed a good point, and an enhancement request has been filed for it already. I'm not really sure if XML is *that* unusual though, I mean it's the "X" in AJAX after all, isn't it? ;) Also XML does compress rather well so in the end the difference compared to JSON as regard to bandwidth may be smaller than you'd say when looking at the difference in text. &gt; there's an advantage using JSF and after some time of frustrating learning I'll find it useful and efficient. I'm not 100% sure, but from the tone of your post I sounds like you just expected PHP but with Java syntax or with a Java flavor. If you try to do things the PHP-way in JSF, you'll probably become frustrated soon. JSF just is not PHP, it's a different paradigm. The advantage is mainly in the components and the elegant bindings via EL to backing beans. You may have to switch your mindset to be able to appreciate it ;) If you haven't done so already take a look at a component library like PrimeFaces or maybe RichFaces; the entire purpose of JSF is to enable such libraries. On its own without any third party components it's perhaps less useful. Also take a look at utility library OmniFaces. It's like the Guave library, but for JSF. It provides utilities for tons of small tasks that you'll likely to encounter daily when working with JSF. 
This is one of the most bloated frameworks ever. I hate oracle adf.
I have a feeling that JDeveloper's purpose is mainly to act as the IDE for the Fusion stack, so in that light it may make sense to only support Java EE 6 if that's what Fusion uses. That said, [according to this page at Oracle](http://www.oracle.com/technetwork/middleware/fusion-middleware/overview/index.html), GlassFish is part of the "Fusion Middleware Family", so I'd expect support for Java EE 7 based on that. Other pages about Fusion don't reference GlassFish though, so I don't really know where or how it fits into the Fusion ecosystem. Fusion, as a branding, confuses me.
See also: https://code.google.com/p/reflections/
Perhaps you could fill in some more detail with code references?
I tread reflection as a bad code smell. Unless you are building a framework there is really never a need for reflection.
&gt;Fusion, as a branding, confuses me. Me too. I think JSF is somehow part of this stack via ADF, and that it's a heavily modified version adding extra life cycle phases, but I've never really looked into it. There was some weirdness at first that it only ran on top of WebLogic, but now it runs "a bit" on Tomcat as well (whatever that means). Confusing indeed.
It looks like jOOQ is specifically for writing SQL. LINQ uses SQL like syntax but I think it's mostly used for transforming collections.
wahhh. 
Reflection comes in handy when you want to do something 'scripty' in java, but I'd make the argument that one should defer to an actual JVM scripting language. It's fine to use in bootstrap code, plugin type code where you want to do 'duck typing' instead of interface based work. Really, there's no downside if used tastefully and in non-performance critical loops. It's a tool developers should know but part of knowing is when to use it. As always in programming if it seems like your being too clever, you're probably doing it wrong. 
The simplest example is losing the ability for the JIT compiler to inline methods. Say you have a method "add" that simply adds two integers and returns the value. After running it a "few" times the JIT complier will kick in and replace the byte-code that is running with actual compiled machine code. When it does this it will see your method and simply generate the machine code in the body of your method. This avoids having to have a branch instruction in the machine code. This is a very simple example and there are many far more clever things that a JIT compiler can do, they are much the same as regular compilers in most respects. When you use reflection you lose a lot of these as the code lookup has to be done at runtime. 
Yes, we all understand what JIT compilation means. I'd appreciate more information on rp181's comments on reflection disabling certain JIT optimizations, which goes counter to my experience of having looked at the disassembled code JIT produced for a reflection-using application, versus not. In that case, the JIT compiler looked at the hot path for calling a held method handle, and produced the exact same code, plus or minus a few instructions. Given that it's completely possible that I misremember, I'd appreciate seeing more specific references.
This is kind of off topic but have you heard of Conway's Game of Life? You might find that interesting...
There are plenty of times where it's legitimate. Ex: needing to somehow serialize arbitrary objects (ex: to JSON). Granted more often than not you'd want to use a library for that. 
You need a way to send data (new objects) into your running JVM (world). You have two choices: * Pull - You world checks for new information and picks it up when it is available. You could have a thread that sleeps for a bit then scans a folder for new files. You could also use some of the new features in [NIO.2](http://docs.oracle.com/javase/tutorial/essential/io/notification.html) * Push - You send the data into your world. This usually means a open network connection that is waiting to read data. I would recommend either Servlet or JAX-RS APIs instead of trying to deal with ServerSocket stuff. Next comes the format of your data...I'd recommend some text format over trying to add new classes at runtime. If you go the text format you could either have all the core object behaviors already coded up in your world and use a format like JSON to add new data without additional behaviors beyond those already in-world. The other option would be to use something like JSR-223 to support adding new behaviors via script in a language like JavaScript. Don't avoid 3rd party frameworks if one really would help. A large portion of the standard API was inspired by 3rd party frameworks that became popular enough. You also might want to look at the game Minecraft. It is simple compared to most games, it's written in Java and you can write plugins for it.
GrayDonkey pretty much nailed it. In my environment, we're not using CDI yet but I want to. Java EE not J2EE agree, EJB3 agree, Spring less important agree.
Contribute to open-source projects that are using different areas features/subsets of Java?
I agree with the editor and component part, unfortunately I cannot do so since the client provides a remote desktop already configured with IDEs and tools and I cannot install or configure anything. &gt;Just do so! There's nothing stopping you. How? In PHP or Flask I would just send a page with the script and that will call some specific page, so I'd just create that page and answer asynchronous calls with the needed data. In JSF I have to call a bean method the use FacesContext inside it to stop the framework from sending data and send my own stuff, then tell the framework to not manage the connection afterward (as showed by the mighty BalusC [here](http://stackoverflow.com/questions/9391838/how-to-stream-a-file-download-in-a-jsf-backing-bean)). As for the AJAX, it's true that it was originally intended for XML (I think it was originally intended just for loading page components and not elaborate them in the client), but now JSON is more used for APIs, since Javascript handles that directly (is the J in JSON); the compression works well in both cases. I'm already using Primefaces (in fact, it was a Primefaces datatable to generate a lot of setter calls), it's nice (it's not like Bootstrap or D3.js which I used previously, but it has to work with vintage versios of IE, so it's fine), I just hope to never need some component not in it.
&gt; Having reflection inject values into fields neatly avoids this issue. I guess it depends on your definition of "neat". To me that's extremely invasive and brittle, and I consider it a huge code smell.
It doesn't matter. As many of us that do work in the enterprise know, the real question is when will customers migrate to Java 8. Sadly many of them still have Java 1.4 code bases. I once did consulting for a large enterprise, Fortune 50 style, that only migrates to the next version of Java when the current version they are using reaches EOL support status.
Agree with you
Yes, it was once extremely brittle when serialisation was driven by crap like persistence.xml, I hated it. Now most platforms use annotations which removes the brittleness. As for invasive, how else can the following field work?: @Inject private MyService service; Having to add a setter just for this is a far greater code smell. What happens nowadays is that the dependency injection scans for fields, looks for the @Inject annotation on each then does it's magic. 
That doesn't look any better to me. You're letting some external code poke directly at your state. You're breaking encapsulation. And I don't see the fundamental difference between an annotation and a setter. Also, your 'service' should be final, and it should be set in the constructor, not through a setter. And yes, I know there are many people brainwashed by JavaEE into thinking some terrible patterns are the way you're supposed to do things, and no argument I make is going to change their mind.
Fully agree, but even then they will hardly move. There are still lots of business using MS-DOS systems as POS, for example. Or look for the business still on XP, which will only move on when the hardware dies, most likely. The company I mentioned on my previous post, moved to Java 5 in 2009 (released in 2004) and on my last project with them in 2011, they were moving to Java 6 (released in 2006). I bet many here also have similar experiences with these types of companies.
&gt; You're letting some external code poke directly at your state. In a carefully designed and considered way, done once on class construction. &gt; And I don't see the fundamental difference between an annotation and a setter. A setter gives the coder the impression that it's valid to swap out the injected component at runtime. Many services aren't written like that, they may for example pass the service into other components. A setter is also more code to write which increases the chance of a bug creeping in. You therefore need to have unit tests for this boilerplate code, in a large project this can consume a lot of your time. The one I'm working on just now is in a "regulated industry" and documentation needs created for every test case for traceability back to the user-story driving it. It's pretty likely we will be audited by professional coders who will dig through code-coverage statistics as product failure could literally mean someone's death. Doing all of this effort for literally hundreds of setters just isn't feasible. &gt; Also, your 'service' should be final, and it should be set in the constructor, not through a setter. Agreed on the final, I should have written that in the example. As for setting in the constructor, that's exactly what dependency injection is. When the object is constructed the code automatically populates these fields. This removes the need for boilerplate code in the constructor to deliver the service as a parameter. If the injected reference cannot be found an exception is thrown. You can also inject parameters on the constructor if you want to do it the old way, some people prefer that as it more clearly defines what it going on. It's also better for testing as you can more easily pass in mocks. 
You should constantly be teaching yourself two kinds of skills: 1. you should be using 75% of your learning time to keep your skill set current with widely used technologies, and 2. you should spend 25% of your time on technologies that have the potential to break through in the future. Right now, you should systematically go through a few dozen job postings on [Monster](http://m.monster.com/JobSearch/Search?jobtitle=&amp;keywords=java&amp;where=north+carolina) and enumerate the specific technologies they mention. Remove the more vague terms like "Java EE" by which people usually just mean "Servlets", as you yourself demonstrated, but leave in specific mentions like "enterprise beans", "JSF" or "Spring". You'll be left with a bunch stuff you can then categorize, after which you can prune the categories further by looking for pairs of competitors, where one technology is produced by its user community, and the other by a large conglomerate. Ask yourself whether the community-produced solution (like Linux) in that space has more or less distinguishing business value than the conglomerate-produced solution. Cut the loser.
Just so. While learning things is fun for its own sake, you can easily get a lot extra value out of doing it in a manner which you can present to others, be they your colleagues or a potential employer.
If I am already a strong SQL developer, will hibernate or JPA even be worth learning? They seem like hand holding tools for people that don't know SQL while holding data outside the database in local memory. 
My company, and likely my previous 2, will wait until WebSphere ships with Java 8 *and* is a version old.
As long as companies like IBM still support it, Oracle EOLing old versions won't change much for a good amount of companies.
Yes. It provides an increase in productivity and code maintainability. It makes the repetitive stuff easier and still allows you to drop back to native SQL if a specific case requires. If you are looking for a job in enterprise java development, you will probably find it in use somewhere.
&gt;If I am already a strong SQL developer, will hibernate or JPA even be worth learning? yes. the point of these frameworks is not to handhold. it's better if you can already write things yourself before using them though. you should probably be using spring jdbc regardless, unless you know of something similar/better &gt; seem like hand holding tools Nope.... they are tools to help reduce effort/points of maintenance. In some ways, the most important part of the app is the domain model and the service layer - the data layer is an implementation detail. If you just want to implement the details of individual systems and youre not concerned with developing larger scale systems, the benefits are probably less immediately obvious. Yes, we can all write a DAO layer without the aid of any tools and just use pure JDBC drivers directly. but if we can get well-tested code that does it for free, it starts to make it less of a wise investment to do so. I use Spring Data now and my DAO layer is completely auto-generated. http://static.springsource.org/spring-data/commons/docs/current/reference/html/repositories.html I can refactor my app however I want, for most use cases there is no need to write SQL (unless I want to). JPA annotations are awesome. 
You can use Java8 and compile down to JVM 1.5 you know? Or am I missing something?
regarding JEE: outside of servlet tech, JMS is probably one of the most important technologies in the industry. i recommend trying to write some distributed systems with ActiveMQ. if you haven't already used spring/guice/etc to write an application, or you haven't done interface-driven design, I think those are the most important practices for systems design, bar none. Spring itself isn't important, it should be uninvasive and let you focus on getting things done: designing APIs, writing tests - not wiring AKA writing 'glue code' if you dont know how "inversion of control" containers (i.e. spring/guice/whatever) work, you should be using them, until such a point that you know what they offer and you know why you're not using them :) 
great list .. but apache commons? maybe *some* of it is good ..... what do you use for an osgi container these days? do you use any tools in maven to help generate the bundle metadata stuff? modular java is the future... it's just taking forever to get there :(
Officially, there is [no such thing as JEE](https://java.net/projects/javaee-spec/pages/JEE). You can read more about why Spring is less important than it once was at https://blogs.oracle.com/arungupta/entry/why_java_ee_6_is.
Nothing in that page convinced me [EDIT: that one is "better than another"]. I am an experienced user of both technologies, and I still use them both. What JEE container do you use for integration testing or deployment of standalone apps? 
You can't use any language features which depend (directly or indirectly) on later run-time features. Except in trivial cases (when the sources would compile with the 1.5 `javac` anyway), targeting 1.5 will require bytecode retrofitting.
&gt;If the IT department hasn't certified the compiler for the project, you won't get it installed. The IT department shouldn't mingle into development affairs. The company hired one or more lead developers/engineers who should decide that. I know in practice it doesn't always work like that, but in a lot of medium sized companies continuous rebellion against these idiotic power plats by IT often gets you further than you think. 
&gt; What JEE container The guy just told you that there is no such thing as JEE. Why do you continue to use that term? (no accusation, I'm honestly interested in the motivations behiind why you decided to use that non-existing term) 
I'm not saying this is a bad idea, from from it, but history really does repeat itself: http://publib.boulder.ibm.com/infocenter/db2luw/v8/index.jsp?topic=/com.ibm.db2.udb.doc/ad/c0006126.htm 
How about jooq? It is pretty good at that
Reminds me of that guy who posted about his teapot in a tattoo subreddit.
http://en.wikipedia.org/wiki/Embedded_SQL Actually, some of the DB2 guys are in the standards committee: [More family matters: Selected common SQL features for developers of portable DB2 applications ](https://www.ibm.com/developerworks/community/blogs/SQLTips4DB2LUW/entry/db2common101?lang=en)
JavaScript != Java
Yes, reams of xml and annotations. That's what I want to do when programming. Honestly folks, just stop with this nonsense.
I use Eclipse Equinox, but just because I also use Eclipse RCP, and I share modules/bundles between client and server. Apache Felix is very good, and I didn't use Knoplerfish, but I've heard good things about it. I don't like Maven THAT much, and I've always preferred the Eclipse MANIFEST.MF editor. You also have very good tools like Bnd to manage also package versioning and maintaining dependencies. For me, modular java is already here. In the last 3 years, I've been involved in 4 different OSGi-based projects with a strong emphasis in modularity and reuse. It is clear that not so many companies/projects understand the benefits of modular programming, but for me there's no other way of building a robust, scalable system. For me the worst part is the learning curve. When I first started designing OSGi systems I didn't have any real world experience, and we had to discover the best practices by ourselves. Then Kirk Knoernschild's book appeared, and it was like a compendium of everything we had discovered on our own... When you have to train a newcomer, it is better to direct them to Kirk's book than to try to explain all the modular design subtleties at once.
The term certainly exists... not sure why people are downvoting you for the question. JEE is a group of specifications for enterprise application development, it's kind of an umbrella term. So "JEE server" (formerly J2EE server) means an application server, JEE container means an application container. They are all synonymous. The whole point of JEE is you don't write stuff from scratch, instead you write to specifications and acquire/buy components that implement those specifications. Thus, a "container" or "application server" is a key theme to the enterprise development world, and of particular interest to system designers (edit: to clarify, earlier I was responding the the claim that "Java EE is better than Spring", which i find to be a strange claim - not about the term JEE) 
Yes, OSGi has been around for a *long* time, but I just haven't seen modular Java gain momentum like it should (and eventually will in Java 9, lets hope) I have projects with hundreds of modules. I want a very automated and easy way to generate or otherwise handle the necessary metadata. Maven is nice because it's a set of project metadata and dependecy management system, thus its a logical choice to think of how to bootstrap OSGi modules, and I'm sure people do that. Last time I tried OSGi it left something to be desired (less so in the actual spec or containers, but more so in how to manage a large project and generate the manifests!). But I fully admit the shortcomings might have been my own. thanks for recommending the book. sounds like one of those rare cases where the book is really important - OSGi land is full of tips and tricks that just arent well known I'm sure
Groovy is 2000 &amp; late Scala.
What is your proposed alternative?
XML instead of annotations for Spring beans? Ew.
What logic are you taking about? The page that says there is no such thing as JEE is from the Java EE specification authors. If you go read the [JDBC JSR](http://jcp.org/aboutJava/communityprocess/final/jsr221/) you can clearly see that the authors use the term JDBC. And please note that I said "officially" in my post, I've seen the JEE abbreviation thrown around before but I find it kind of silly to call the platform "gee". Your point would be more interesting if you wanted to argue about "JPA" existing or not :)
I had no idea people thought Groovy might stand a chance. Appears it does not or was this test biased?
Most Java EE developers are not writing standalone apps, even your typical developers writing apps which use Spring are still deploying to a central server. If you have a server which supports technologies like CDI and EJB 3.x what is the benefit of replacing them with Spring? I completely agree that Spring was a huge benefit in the J2EE days but with each new release of Java EE it becomes less important. This is how Java APIs evolve, if 3rd party frameworks/libraries become popular enough then standards are created to support those features. Spring MVC would probably be the most compelling reason for me today to use Spring. The more compelling reason would be if you are stuck on older J2EE/JavaEE versions. If you don't have a built-in DI framework I would highly suggest adding one onto your stack.
&gt; Most Java EE developers are not writing standalone apps, Most developers don't develop their systems in a modular enough way. My system level components are all completely decoupled from any environment in which they run. I can easily have multiple dependency injection 'contexts' and do other fun things because of it... what are we talking about, just JSR-330 type functionality (@Inject)? &gt; If you don't have a built-in DI framework I would highly suggest adding one onto your stack. such as spring? 
lol mangodb, autosharting, etc
different tools for different purposes
Record sound from where? What if you have multiple microphones?
It isn't an argument. It's more that regardless how much authors piss in to the wind, what they want is rarely what they get. I'm not a Java EE dev, but the common industry term is JEE. I can understand wanting one thing but when the community says JEE, I'm going to adopt the nomenclature which may be more beneficial. ;)
How can you promote: &gt;My system level components are all completely decoupled from any environment in which they run. Yet not prefer to adopt portable standards with multiple implementations? Spring did a lot that J2EE didn't, Java EE (mostly 6 and 7) solves the same problems that core Spring did. Why add in something that is covered by the stack I'm already using? &gt;&gt; If you don't have a built-in DI framework I would highly suggest adding one onto your stack. &gt; such as spring? Yes, or Seam, or Guice, or CDI. Given that CDI/Weld is the standard now I'd highly suggest learning it if possible. If not, an add-on DI framework is better than not having one.
Agreed, have not tried weld yet
You would most likely only use JDeveloper if you are creating ADF applications. They make a powerful combo. You typically see ADF deployed in shops with a full Oracle stack where you need to develop web apps with typical enterprise business forms. There is a lot of ADF integration in JDeveloper, it is very visual. The best way to understand why it can be useful for its niche is to checkout some of the [ADF videos on YouTube](http://www.youtube.com/watch?v=O9FXJu2fl28)
I recently watched a keynote talk by some guy offering all sorts of wisdom on how to avoid stuff like this and even more. Can't remember what the conference was or the name of the speaker but the general idea is very simple. Make everything explicit with actual Java code. Pipe together everything explicitly in Java instead of relying on some kind of run time reflection wizardry to do the plumbing.
Since you are interested in stand alone apps, you can use the Weld specific APIs to bootstrap CDI in SE applications. See http://docs.jboss.org/weld/reference/latest/en-US/html/environments.html#weld-se Hopefully the bootstrap API will become part of the standard in the future.
Standalone testing is more important than standalone apps. But standalone systems can be plugged into any environment. What about desktop apps? Client apps? 
&gt; Why add in something that is covered by the stack I'm already using? I wouldn't... How do you run integration tests?
I understand fully about authors not having control which is why I pointed out the JPA example (which is never mentioned in the Java Persistence API spec) but I'm going to disagree. JEE just doesn't have that much adoption. Try doing a google search for it and see what you get. Now compare how Java related those results are to searching for J2EE and Java EE. Try comparing J2EE vs "Java EE" vs JEE on stackoverflow (or their career section). JEE has some adoption but not much in comparison.
After having to deal with Pro*C all I can say is... http://nooooooooooooooo.com/
&gt; Should I be checking this one out? No. It'll likely be merged into the remaining players at some point. Read up on Oracle Forms, PL/SQL web apps, and decide for yourself if you want to be stuck in that hellhole.
From Dice.com: JEE: Search results: 1 - 30 of 772 Java EE Search results: 1 - 30 of 549 Not a hug difference, but if anyone is looking for work in this stack I would certainly encourage them to use both terms. S/O is a good resource but when you are looking for a job it isn't really the place you should use as the definitive source for terms. I pronounce Cassandra "Cass anhhh dra" versus "Cass an dra" but if there were some minor difference between each in terms of a TLA, I would sure as shit pick both. If you invent a tech or what not you sure can name it, but that doesn't mean the world follows because much of the world just wants a job. ;)
I work on a really old codebase that really hasn't been updated since 2003. So currently I have no JSF or Spring anywhere, but once we get our app servers updated I might consider implementing Spring. Something like jaxson would be even better, I'm doing some manual JSON parsing too. (Part of the reason hibernate is low on my list of things to learn). 
Funny, dice.com seems completely backwards compaired to most other places. They've got way more J2EE opening than JEE and Java EE combined. I agree that I'd search for both (or all three) but I'd also only use JEE on resumes that went to job postings that specifically asked for JEE developers. Or course I'd also use J2EE on my resume if needed just to get past the HR department.
Hudson/Jenkins. But I don't think that really answers your question because you still have setup/@Before/@BeforeClass issues with your JUnit tests. I haven't done it yet but I really want to take the time to dig into Arquillian because that is supposed to solve the mock/env problems.
EJB-Lite also has a bootstrap API (part of the spec) that is geared towards testing. Some off the implementations are more portable than others. For testing/pluggability you'd probably want to look into the Apache OpenEJB implementation. The test setup is pretty easy http://tomee.apache.org/examples-trunk/testing-transactions/
&gt; JEE is a group of specifications for enterprise application development, Well, what I meant the official term is either "Java EE", or just "EE" ;) So following the link from GrayDonkey, your question would haven been: &gt;What Java EE container do you use for integration testing or deployment of standalone apps?
In 2006
Huh! I can think of so many times that this would have come in handy for me... Good tip!
Tuning the jvm might buy you a tiny bit more efficiency (what java runtime and jvm flags do you use?). If it were me, I'd profile the app and optimizing the data structures and algorithms. Rejecting flows outright sounds like a fine compromise, but there are other options. Horizontal scaling is one option. I would put a buffer/queue in front of the app (kafka, java chronicle, ...). Assuming flows are independent, multiple boxes can draw from the queue choosing flows by consistent hashing. If the total of the state machines exceed the heap but the active working set does not, you can use nio to access off heap storage backed by disk. If you don't want to roll your own, see terracotta or coherence. 
Right... That's a build server, and a decent one at that... But not what I was getting at
Start [here](http://docs.oracle.com/javase/tutorial/)
It's definitely an odd pairing (but it is probably something that people have Googled). Too bad that Groovy isn't in the "Benchmarks Game" anymore... Based on this limited test, it looks like Groovy vs. JRuby might be an interesting match up http://benchmarksgame.alioth.debian.org/u32/benchmark.php?test=all&amp;lang=java&amp;lang2=jruby&amp;data=u32
Good luck going through the stack trace of whatever Spring and Hiberante generate for you when things go wrong. Do you even know how the whole thing works? You just write down some magic incantation in terms of XML and then sprinkle some annotation dust and the whole thing "just works". In fact, if you really get down to it the actual plumbing required is not that much code when you have things like lambdas which Java finally has.
Do you need to connect to the database? That's: JDBC Or just the files? That's Java File IO: http://docs.oracle.com/javase/tutorial/essential/io/index.html
what does app server have to do with spring? it's a 3rd party jar that can be dropped in your app. you should definitely use Jackson for JSON parsing, it rocks. you should also use something like jax-rs (Jersey, CXF) in conjunction with Jackson. no more json parsing code anywhere ;)
Yes. Used it since 2006
The dangers of copy-pasting code-- take another look at your inner for loop: for(int i = 0; i &lt; board.length; i++) { for(int t = 0; t &lt; board[i].length; i++) { You increment i both times, not i and then t.
Ohhhh, Thank you, I don't copy and paste I was just thinking about something else
...because my app server is equally old and running J2EE 1.4. Which is also why I can't use Jackson and jax-rs.
why can't you? do they need newer servlet implementations? 
The data base is just folders and files in the usb. I think I just have to connect it to the files because the end result is supposed to have the file show up for the user so the user doesnt have to look through the database.
Thanks for posting this! I had no clue there were weak references in Java. I've seen them in ObjectiveC, they seemed like a good idea there. I should have figured Java would have gotten them into the language somehow.
Haha. you're not alone. Just use CXF 1.6.x - http://cxf.apache.org/faq.html#FAQ-CanCXFrunwithJDK1.5%3F You mean Java 1.5, Java EE release versions are different than JSE then go complain to a PHB that your Java is "dangerously out of date" and not covered by Oracle, if you havent tried that already ;) even *JDK 1.6* is EOL now
I really like your articles, good work.
https://code.google.com/p/vanilla-java/wiki/HugeCollections https://github.com/reactor/reactor Spring Reactor http://blog.springsource.org/2013/05/13/reactor-a-foundation-for-asynchronous-applications-on-the-jvm/
That's just your $PATH speaking. Type ./java -version and ls -l \`which java\` 
more advanced would be to use something like [Lucene](http://lucene.apache.org/) to create an index of the contents of the files using first and last name, city, state, zip and whatever else you would like. Then the user could have search interface that would make it pretty easy to find the records... I would highly recommend Lucene for something like this, if as you say you have millions of files. It might take a few minutes to build the index but once you do searching is instantaneous.... 
whoops. missed the dot there. but which returns /opt/IBMJava2-131/jre/bin/java as expected. $ ./java -version java version "1.4.2_06" Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_06-b03) Java HotSpot(TM) Client VM (build 1.4.2_06-b03, mixed mode)
Are you going to post every chapter as an individual link?
Ok, then :P
Thanks, very glad to hear that. I was not very sure about this one, it's less cut and dry and more of a shared experience/battle story. Nice to know people get it :)
the IBM JDK 1.3.1 was discontinued so long ago that the official IBM web page doesn't even list it (it lists 1.4 as the oldest EOL'd version). Over 5 years ago. 
I've been using LinkedHashMap for caching of queries of my DB that are needed only in certain circumstances (such as when a user clicks on a control to show the results). I only need to override the RemoveEldestEntry(...) method to provide functionality for removal. Then I just need to use put(...) everywhere without any manual management of any elements and they are just removed automatically once they become old. It's still strongly referenced, but usage based and seemingly better for use as a cache. Is there a better Core Java version than this? 
Does this help? http://stackoverflow.com/questions/1384947/java-find-txt-files-in-specified-folder
Can you use lazy instantiation around collections of deeply nested objects and wrap them with java.lang.ref.SoftReference? The downside is that you'll have to check for null each time to access the collection (since it might get collected to keep OOM happening), but you can handle that in your accessor method: i.e. see if null, if so, try to reload, return what you found. 
I have been using Apache JCS to cache some DB query results and some long duration objects with the file based cache (which you turn on with a config flag); it's easy to configure and provides a JSP page you can use to query and administer the cache (so less for me to do). ehcache is also supposed to be good, but I do not have enough experience with it.
In concurrence with this comment, I'd like to add a [nice article](https://weblogs.java.net/blog/enicholas/archive/2006/05/understanding_w.html) I saw here earlier.
I assume that since a hashmap is a performance/memory tradeoff, it would turn to shit if you needed to re-instantiate items all the time. You are trading performance to reclaim memory.
If it's not, the real author is probably ecstatic for that huge 500,000% increase in sales and publicity ("Hey, look, my writing is on par with Rowling's!")
For those wondering, he used the Java Graphical Authorship Attribution Program. http://evllabs.com/jgaap/w/index.php/Main_Page
Although that's cool it sounds like there were very few data points for comparison and a bit of confirmation bias from what they already suspected. 
No, it's her.
Hours and hours debugging copy pasted code...
*projects...crap
Exactly. The compiler even warns you every time you try and use a class from sun.* packages. They are supposed to be implementation details and can go away at any time. That said, the functionality provided by this method (getCallerClass) is something that can not be implemented efficiently outside the JDK. The correct fix is to introduce a proper API for this. OpenJDK is an Open Source project and they shouldn't be too hostile to this. A new API can not be introduced the Java 7-timeframe though (unless it lives in a another sun.* package). Maybe there is a case for keeping this for now, just to avoid breaking applications.
Frankly, the process of posing of hypothesis introduces confirmation bias. The scientific method has limitations, but there's usually not a better approach. 
Yeah, I've heard of it. It's actually quite old. Problem is that it's a 'closed' system. ie: I can't introduce my own objects/behaviours during the life cycle.
Why in the world would somebody go to this chaos when Maven is around?
Title is misleading. The actual unmasking was a leak, not a discovery by some computer program.
Thanks for your reply! JVM is just standard 64bit windows 1.7, "-Xmx512m", no GC tweaks or similar. I have very little experience with the more advanced JVM options, that's something I shall look at to see if I can raise the point at which the GC starts to thrash. I locked myself in an office yesterday afternoon (hence why I disappeared off the net) and attempted to write something that measured memory pressure and would allow me to influence dropping incoming flows. For my work load and memory cycling it sits at around 68% utilisation average with limits of 0.7 &gt; x &lt; 0.8, around 54k flows average in the restricted version, unrestricted is seeing around 135k atm. So for anyone who ever has a similar situation this is what I came up with: http://pastebin.com/3e8vEfMn I hear you about scaling, yes I could deterministically pass off to different instances of the application. I hadn't considered a disk backed approach for the storage, I suspect at 15k updates a second though most disks are going to become a bottleneck pretty quickly. Worth giving a go though, I'll have have a look at terracotta and coherence. 
Interesting, I'll install JRockit and see what happens on a test machine, it wont solve the lack of memory but might improve the edge conditions. Wikipedia suggests that JRockit's tasty bits are being moved into HotSpot targeted for 1.8. Might be a mute point soon hopefully? ;)
From the article, it appears that the NYT editor actually requested the analysis, and Juola only compared 5 or so texts to say that _The Cuckoo's Calling_ was most like Rowling's writing and not 4 others. He said so himself: “It doesn’t prove that [the Cuckoo author] was Rowling, but it’s a starting point,” he says. “In this particular case, I wasn’t that certain at all.”
Nice article, I'm certainly familiar with WeakReferences and use them for caching existing InetAddress objects to cut down memory consumption. 
This is an interesting strategy, it'd essentially let the GC kill of active flows which it was already tracking. There's a decision to make here... is it better to: 1) See all flows at their start and act on them, miss out on later updates. 2) See a subsection of flows, but see them through their entire life. I'll have a think about this, it's a decent alternative. A quick review of the SoftReference API suggests there's no way to influence which SoftReferences, which is a shame as I do have a preference. Hmmm tricky. ;) Thanks for this. 
&gt; The whole point of this exercise is so when i make changes to the ORM i won't have to copy/paste the new code/java files into the projects that are using the ORM. Maven repositories are versioned so you will still need to change something to get your code to pick up the new version of the library. *Maybe* nightly builds are updated but I'm not sure on how that works, re-issuing the same "version" of anything with changes is usually frowned upon. &gt;Am i even on the right track? or is there a simpler way to tackle this? As Maven is built around basically what you are trying to do it's probably the simplest way. I'd recommend going through an end-to-end tutorial in creating a library in a repository rather than trying to do it for the first time on your own project. Note though that Maven is no longer considered "cool" and all the cool kids are playing with Gradle which integrates with Maven. It simplifies things a lot and could be your best option. 
Legacy code. Transitioning from an ant build to Maven can be a nightmare if the original project layout &amp; build process is non-standard. Ant gave people carte blanche to do what they want and lots of people did just that. 
Working on this now...
 import java.util.Scanner; public class Test { static int height; static int width; public static void main(String[] args){ getInput(); for(int i=0; i&lt;height; i++){ if(i == 0 || i == height -1){ printSolidLine(); } else { printHollowLine(); } } } public static void getInput(){ Scanner user_input = new Scanner( System.in ); System.out.println("Please enter height:"); height = Integer.parseInt(user_input.next()); System.out.println("Please enter width:"); width = Integer.parseInt(user_input.next()); user_input.close(); } public static void printSolidLine(){ String content = ""; for(int i=0;i&lt;width;i++){ content += "*"; } System.out.println(content); } public static void printHollowLine(){ String content = ""; for(int i=0;i&lt;width;i++){ if(i == 0 || i == width-1){ content += "*"; } else { content += " "; } } System.out.println(content); } } 
Awesome, the printHollowLine makes a lot of sense and straightens out what I was doing wrong. It seemed so simple, but I was just having one of those times when you just get really brainlocked. Thanks for the help!
 for(int y = 0; y &lt; h; y++) { for(int x = 0; x &lt; w; x++) { if(x == 0 || y == 0 || x == w-1 || y == h-1) { System.out.print("*"); } else { System.out.print(" "); } } System.out.println(); }
[**@BigDataBorat**](https://twitter.com/BigDataBorat): &gt;[2013-07-16 00:07:55](https://twitter.com/BigDataBorat/status/356928145041002498) &gt;Java is to Javascript as Men is to Meningitis ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1iembo%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) ^\(times ^are ^utc)
Did you already disqualify http://esper.codehaus.org/ ?
That means the libraries are written entirely in Java language. It does not depend on OS-dependent library such as DLL, EXE, or SH (Linux), etc.
Addition to maven and *versioned* artifacts. (*edit for better wording*) In your pom.xml you might have something like this (copy pasted from one of my modules): &lt;project&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;version&gt;1.3.3&lt;/version&gt; &lt;artifactId&gt;trex-backend&lt;/artifactId&gt; &lt;/project&gt; And another maven project that has a dependency on that artifact: &lt;packaging&gt;jar&lt;/packaging&gt; &lt;version&gt;1.3.3-SNAPSHOT&lt;/version&gt; &lt;artifactId&gt;trex-integrationtests&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.xezz&lt;/groupId&gt; &lt;artifactId&gt;trex-backend&lt;/artifactId&gt; &lt;version&gt;1.3.3&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; This means, I declared in the project trex-integrationtests a dependency to trex-backend with the version 1.3.3. If I make then changes to my trex-backend module and feel it's good to be deployed, I increase the version. Until I updated the version in the dependency I will still use the old 1.3.3 version. But once I update it to the new version it will instead use that to build this module. (I actually do not use a repository and just use the local .m2 directory (mvn clean install) and tag the version with an updated pom in git so that I can build that version if I do not have it available in my local repository. 
[http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.2](http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.2) The spec merely states &gt; The integer operators do not indicate overflow or underflow in any way. Why they chose to do it like this I don't know. I think most other languages don't indicate an over/underflow either. It's not so hard to check for {Long|Integer}.{MAX|MIN}_VALUE. After all, whatever you program you might actually count on an over/underflow and an exception would completely break your algorithm. So more possibilities but also more responsibilities for you as a programmer. If you want to work with very large numbers that exceed the range of a long, I'd suggest you have a look at java.math.BigInteger.
Probably because you can create your own check/exception on it, if that is what you want to do.
No. I was just curious.
Furthermore, the anonymous tip, while not considered scientifically rigorous, acts as Bayesian evidence.
A JS file? Really? Have you opened it in a text editor yet?
thanks for reply. I'm trying to find an end-to-end tutorial. Everything i've found assumes you already have created a jar and want to include that into your local Maven repo. As all my Java is for Android, i think i'm going to wait until Gradle and Maven's relationship is a bit more mature. 
this looks like exactly what i want to accomplish. I just can't figure out how to create the jars. I have a whole Android project set up, but i only want to include a select few of my java classes to include in the jar. It appears that my entire Android project is a "Module". I think i need to separate those certain java classes into their own Module, maybe? 
It's in Oracle 12c: http://docs.oracle.com/cd/E16655_01/server.121/e17209/ap_standard_sql008.htm
if you find out how this is done with Android i would LOVE to hear it. I looked at [Picasso's pom.xml](https://github.com/square/picasso/blob/master/pom.xml) to attempt to figure out how Square does it. It looks like they develop it outside of the Android app structure but use Android components. I might try to clone that repo and see if i can change things to morph it into a base structure that will work for me.
In short, Gradle provides a lot more flexibility in the build script. Maven is pretty much limited to a relatively small set of configuration options or using a plugin. The plugins are contrained to run in a strict lifecycle. Gradle allows you to basically do anything in your build via Groovy code. It also has a more flexible lifecycle and allows more options related to inter-module dependencies. The disadvantage of Gradle is that it's not as standardized as Maven, so coming in to a new project, it's not always obvious how to build. Compared with a maven build which is pretty much always "mvn install". If you have a project with a relatively standard structure and build lifecycle, Maven is probably easier just for the standardization. If you have a larger build with more complex packaging and inter-module relationships, I'd recommend learning more about Gradle. 
**EDIT** Have you worked with multi module yet? I could link you one project of mine, which is a multi-module project (so you would have a reference, it's a bit messy to get into at first IMO) Sorry totally forgot about you, because my leds, resistors and breadboard for my raspberry arrived and was busy fooling around. **EDIT2** below I'll look into it, but I think it's close to the same for android and java. If I get something together I post it on github so you can have a look at the structure *Edit2*: As said I haven't done any Android development yet. While looking for mvn archetypes for maven I found [android-archetypes](https://github.com/akquinet/android-archetypes). Do you need your ORM included as jar, or as [apklib](https://code.google.com/p/maven-android-plugin/wiki/ApkLib)? Depending on that the pom.xml will be different. Anyway I'd actually go so far and extract the whole ORM into its own maven project and its own repository. Makes it quite a bit less annoying.
all that sounds awesome. i really appreciate it. ps. I'm jealous of your raspberry
take that as a lesson in why it is important to have readable. While the author of the other code has a shorter solution, it's not as easy to read as the lengthier solution posted by /u/benfff85
*Edit at the end* Ok I updated my post, if you need a apklib I created one @ [github](https://github.com/Xezz/freshorm) which you would build according to the link for apklib in my previous post. You would have to copy all the ORM stuff over to that project (which would be an independent project) and add a dependency to 0.1.1-SNAPSHOT *(edit) in your main project* (you will have to fool around a bit with maven) and best make a new branch for this (I refactored one of my repositories to death because I was on main branch and didn't release it for 2 weeks!) If you need more help, I will check for the next 2 hours every now and then (need to make a reddit raspberry notification tool soon!) *edit* I *think* you can use a jar as dependency, if you do not need anything android specific, considering you can import a lot of libs as jars to an android project, but as said I might be totally off the track since I have no clue about making an android app (dunno maybe [jar vs apklib @SO](http://stackoverflow.com/questions/13990806/what-is-advantage-of-apklib-from-jar) helps)
you are awesome. thank you so much. I think i understand what i need to do. I'll have to do mess around with it a bit more after i get off work. I think creating an apkLib is what i need to do. Where did you find the structure for the apkLib you created on GitHub? 
http://maven.apache.org/docs/3.1.0/release-notes.html https://cwiki.apache.org/confluence/display/MAVEN/AetherClassNotFound
did you clone and alter [this project?](https://github.com/akquinet/android-archetypes/tree/master/android-library-quickstart)
As the developer of one of the decompilers mentioned in this article, I can tell you why ***I*** wanted one: I do a lot of runtime code generation, and I like to be able to decompile the results to verify the program structure is as I intended (since there was never any lexical source to inspect).
Since our sub thread went into specifics I give a few simple answers to your numbered questions too: 1. For local development you do not need any maven repository, as long as you keep your version updated (and tag your commits accordingly) 2. If you use the *install* goal your artifact is being saved in the ~/.m2/repository/ directory (correct me if I'm wrong here) 3. You define a dependency for your own modules like any other (groupId, artifactId and version). Only difference is, that you pull the dependency from your local repo (~/.m2) instead from a remote repository 4. plugins are not dependencies per se, they alter your build depending on the given goal (correct me here again if I'm wrong) Overall, for local development: Any artifacts you create with mvn install are stored in your local repository. Afaik maven looks first in your local repo for artifacts and if it wasn't found it looks in your defined remote repositories (this could be a repository you host yourself on your LAN). I'd suggest to change your &lt;version&gt;&lt;/version&gt; once you are comfortable with the current functionality **AND** tag that in your VCS, so you can rebuild a certain artifact if it might have gone lost in your local repo or you switch the PC. And yes maven is the unloved stepchild in the fancy new world, but once you got the hang of it, it is actually quite decent (besides scrolling through xml-mess'ness) 
* Google this type of question. * Try Apache POI, it does the basics well. * /r/javahelp exists for this type of thing, but don't be lazy and expect others to do your work for you.
why?
http://poi.apache.org/spreadsheet/ http://www.bstoi.nl/PoiParser/example.html http://www.docx4java.org/trac/docx4j http://code.google.com/p/yava-excel-stripper/ http://jxls.sourceforge.net/ 
Look up what a .CSV file is. Excel can both read and write to it. I'm not sure of you're allowed to use file formats other than Excel's primary ones, but if you can it would be easy to implement a solution yourself. 
Trivia: "jumi" means "stuck" in Finnish.
Nope, the crown has banned all creation of software.
But the lack of integration and IDE support are big reasons to stay. Maybe bigger than the others. I wouldn't necessarily agree with the article.
a straight csv file is the easiest way. you can really just do the writing with string concatenation and writing to a fileoutputbufferstream. If you're thinking of using a library, jexcelapi works really well. 
I am fairly new to Java, can someone give me a short explaination for what Maven is used or is good for ? 
Note that Apache POI works with major Microsoft Office document formats, so if you intend to work with Excel only, choose the appropriate library, e.g. poi-ooxml.jar for Excel xlsx files.
This is not in any way a Java problem. Ask /r/windows.
I know a few java companies in Brighton, but that's not very useful to you.
Indeed. Ant is imperative (you say step by step what you want), while Maven is declarative (you state your goal). A similarity is that both Ant and Maven are strongly XML based and that both Ant and Maven use external Java classes to add high level functionality. These are called tasks in Ant and plug-ins in Maven. An example, omitting the typical root tags and "headers", a compile step in Ant is: &lt;target name="build"&gt; &lt;javac srcdir="${src.dir}" destdir="${build.dir}" /&gt; &lt;/target&gt; And in Maven it's: &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;${jdk.version}&lt;/source&gt; &lt;target&gt;${jdk.version}&lt;/target&gt; &lt;compilerVersion&gt;${jdk.version}&lt;/compilerVersion&gt; &lt;/configuration&gt; &lt;/plugin&gt; If I'm not mistaken (someone may correct me), but Maven's "maven-compiler-plugin" by default is very eager to choose the OLDEST java version it can get away with, so you nearly always have to explicitly set your java version to a modern one (very rare that you want to compile with java 1.3 or 1.4). Ant's "javac" chooses the current version, and in Ant scripts it seems rarer to explicitly define it. To make builds better repeatable you can define it as well: &lt;target name="build"&gt; &lt;javac srcdir="${src.dir}" destdir="${build.dir}" target="${jdk.version}" /&gt; &lt;/target&gt; Another interesting difference that's central to the Ant/Maven difference is that Maven assumes default source and target folders. With Ant there is no such thing and you always have to specify those. Despite Maven having defaults for the source and target, many times for simple projects with default tasks/goals Maven is more verbose. Another example, creating a jar is an explicit step in Ant, and is done via: &lt;target name="jar"&gt; &lt;jar basedir="${build.dir}" file="${dist.dir}/${artifact.name}.jar"/&gt; &lt;/target&gt; In Maven it's: &lt;plugin&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt; &lt;addDefaultSpecificationEntries&gt;true&lt;/addDefaultSpecificationEntries&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;/plugin&gt; Again, Maven knows the source and target folders so you don't need to specify them, but it's typical to put a lot of stuff in the configuration section. In Ant scripts (the one I typically see) people tend to go more with the defaults. Here too, Maven can theoretically be shorter, but because it uses tags instead of attributes and people tend to have a need to configure stuff explicitly it's in practice nearly always longer than the Ant equivalent. An other very important difference is that in Ant -you- typically explicitly define when the various tasks run via the "depends" attribute (not shown for the isolated examples above). In Maven, Maven just knows in what phase of the life-cycle (compille, test, package, etc) a certain plug-in should run. So in practice Ant scripts get a bit more complicated than shown here, since most tasks will have some sort of (conditional) depends attribute associated with them.
I work on a very large Java EE app broken into multiple sub projects in NetBeans, using NetBeans generated build scripts. It takes 3-5 minutes to build, with all the lib copying and recompiled of common sub projects. Can Maven help here?
I've already found this to be really useful when you want to find references to a log statement or something similar. Works out the box if you use the latest Spring Source ToolSuite although I know a lot of people just like to use vanilla eclipse. 
It's a build tool and a dependency manager. There is a lot of plugin for maven, for example one useful plugin that I integrate recently is [cargo](http://cargo.codehaus.org/Maven2+plugin) I configured my app to be deployed in a tomcat with just one command: mvn cargo:run I think Maven is something you should know if you want to get deep with Java.
Not sure if it will work but it does for most other streaming media. https://addons.mozilla.org/en-US/firefox/addon/video-downloadhelper/ 
Another fan here. The page is [instasearch](http://code.inf.unibz.it/projects/instasearch), it is really good, try it, will change your life.
It doesn't run in a browser, it's a stand alone piece of software. That's why I think it's a challenge for someone who knows how java works.
Again ? This is starting to feel like spamming.
Are there any plans to get WebSphere Portal running on the Liberty Profile, or will that always require the full profile? If it's the latter, are there any plans for a Liberty-based (or equivalent) test platform?
Came out weird, the Question again is class Outer { class Inner { } } Outer outer o = new Outer(); Outer.Inner i = … ? What does ? equal?
? needs to be an initializer, so ? should be: new Outer.Inner(); The whole line should be: Outer.Inner i = new Outer.Inner(); Unless you are creating an instance of Inner from inside Outer or Inner, in which case you can use: Inner i = new Inner(); EDIT: formatting failed.
Actually, I think in that case, you would need to do: Outer o = new Outer(); o.Inner i = new o.Inner();
If you want to do that, you need to declare Inner as static. public class Outer { static class Inner{} public static void main(String[] args) { Outer outer = new Outer(); Outer.Inner outerInner = new Outer.Inner(); } } 
BTW - if you really need an inner class on the instance, you would access it through an instance of outer. public class Outer { static class StaticInner{} class InstanceInner{} public static void main(String[] args) { Outer outer = new Outer(); Outer.StaticInner staticInner = new Outer.StaticInner(); Outer.InstanceInner instanceInner = outer.newInstanceInner(); } public InstanceInner newInstanceInner() { return new InstanceInner(); } }
Java is not an acronym. 
You shouldn't have to do that, as long as Inner is public or package (which it is). Unless you are talking about the last case, but in that case the code is being call from *within* an already existing instance of Inner or Outer.
How does this compare w/ TestNG? I don't use JUnit for projects anymore for the last few years, I wonder if this solves any problems not already addressed by TestNG?
Ah. Okay. That was the part I did not get. I thought that he was calling it from somewhere else or something like public static void main.
You don't have to create a new method: public static void main(String[] args) { Outer outer = new Outer(); Outer.Inner outerInner = outer.new Inner(); }
First, though, you should ask yourself why the hell you're using FTP in 2013. Also, lol spam.
You probably want to use the [Java crypto API](http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html) which is available on Android as well. For a statically encrypted file, after you created a `KeySpec` from your raw key and initialised a `Cipher` with that, you can simply wrap your input/output streams in `CipherInputStream` or [`CipherOutputStream`](http://docs.oracle.com/javase/7/docs/api/javax/crypto/CipherOutputStream.html) in decryption/encryption mode.
Does this have anything to do with evolution/natural selection and observing "entities" to see which will thrive/die out based on a set of rules?
Here is a very short program that does exactly what you're looking for. Given a message and a password, it provides a base 64 encoded string that you can store somewhere. http://pastebin.com/2rSzXaw4 for android, you should look into SharedPreferences and the sqlite database as an alternative to files. 
...based on the actions of 'others'. Yes.
http://www.keyczar.org/
"Others"? You mean other entities in the world?
You don't need does not mean others don't too. There are still demand for Java FTP if you use the Google Keyword Tool to do some research. FTP does not die, instead it is used in very specific cases.
Collaborate can make downloadable versions of the recordings, if the institution and presenter decides. It supports mp3 with the slides, or mp4. Contact them and ask, otherwise, it's screen recording software.
Correct. I got the impression you meant that I was planning to have a set of rules before I created any objects (which isn't the case). 
Saying something like "Objects move on a 2d plane" is a rule in the regard I'm talking about. If objects can (or cannot) inhabit the same pixel, that is also a rule regardless which option you pick. Basic what I meant with rules are the equivalent of laws of nature in our universe.
Ah yes, I get what you mean now. I'm not really concerned with those types of 'environmental' rules for now. For my first interation. imagine a plain flat world, no seas/rivers/hills... totally bland of features and yes, 2 or more objects can inhabit the same pixel (I see no reason to restrict that other than the problem of trying to display them) I'm thinking more about the possible objects I could build and more specifically the possible activities/interactions between these objects. Of course a lot of this will involve the 'world' more for future iterations of my project.. but I'm trying to keep it simple for now. For example: At the moment I'm trying to think of a way to portray 'vision' between objects (in my flat world). ie: Who can see who... and how can they see (according to their generated traits)? 
Yeah that's exactly how I launch the software to play a recorded lecture. They provide links to download the .jnlp files and opening the file will launch the correct lecture. But it seems to merely open the software which then streams the lecture. However the play progress bar suggest that the software buffers the lecture somewhere on disk, as it shows loading progress like a youtube video, so perhaps I should start looking for where that is happening, to see if I can save a copy. Even if it was some kind of java file rather than a nice mp4 video, that would still be fine so long as I could play them without internet access.
Talked to my course co-ordinator and like I expected he said downloadable versions are not available. I assume they want to protect their course content from showing up on youtube for free. 
A very clever is still going to be able to read/write the file, as it sounds like you're planning to have the keys for encryption packaged with your app. I don't know much about android development and how in-app purchases generally work, but ideally you'd send the app a piece of information that is encrypted with a private key and is unique to that device/user. Your app could then use a public key to verify that information and enable the feature that way. That would be slightly more difficult to circumvent. 
IAP basically just retrieves a list of things purchased in the app from a server. Just Strings, and it's up to the app to handle what that means. You can query the server for a list of IAP bought for the particular app requesting any time you want. I don't want to require Internet access to retain access to the resources granted by the IAP. I was considering my keys to be the device ID salted in some way with the user's ID number.
I've been working on a large OSGi based system the past few months (in fact, this prompted me to write the article in the first place). Point is, you want tooling to manage all the extra OSGi info in the manifest for you. [Bnd](http://www.aqute.biz/Bnd/Bnd) is what you want, and it has Ant and Maven (even Gradle is coming I believe) bindings. So, that's completely independent of IDE. However, since you probably work with multi-module projects, it sure is nice to have an IDE that also understands what's imported and exported between projects/bundles. This is where [bndtools](http://www.bndtools.org) comes in. It really offers the nicest OSGi IDE experience at the moment. And yes, it's currently only an Eclipse plugin. However, people are currently knocking at the gates of JetBrains/IntelliJ to step up their game: [OSGi support on a level similar to BndTools](http://youtrack.jetbrains.com/issue/IDEA-100812). Judging by the votes and comments, they'll at least have to consider this. 
Nice try oracle-sub.halldata.com. Pop-ups. Urrgghh.
I hate Oracle - wahhhhhhhhhhh.
Oracle come over to me here in the UK as the kinda vendor I never ever want to have to deal with.. like m$ but much worse... Everything they touch seems to want to be a cash cow somehow.. and hostage to the Elissons yatchs and islands. The Google case is what actually made that whole venture crystal clear.. GREED!!!!!!!!!! And they are also stupid, by aggravating the FOSS community for pointless reasons..
Why is that Tron-guy coding in xml?
The conclusion of the article seems to be to use OSGi. If you want a simpler modularity framework I suggest taking a look at JBoss Modules. It's a bit lower level than OSGi and more flexible. http://relation.to/Bloggers/ModularizedJavaWithJBossModules Edit: More info about JBoss Modules: https://docs.jboss.org/author/display/MODULES/Home
The only one i've ever gotten to work reliably is RxTx, and isn't hard to use. I use it to stream large amounts of data from some custom hardware, and it works well. When starting out with the library, I constantly has issues getting the dll in the right place and with the same architecture on different computers, so i wrote this up to copy the library out of a package into the user directory, and set the path to there. http://pastebin.com/3FLCb6h9
Why Is Maven not even mentionned? Bash it if you want but you can't ignore it in today's Java world.
You didn't know? With Oracle Java 8 they are introducing a pure XML Java syntax. Now all your java code will be pure XML!
I mentioned it, just not by name (because it's only one of many options, like Gradle, Ivy, SBT etc): &gt; ... managing the identities and dependencies with their favorite compile-time dependency management tool ... The article argues that this is just a partial solution. For a real solution, at least the runtime classpath as it is has to die. This is also one of the main goals of the Jigsaw project. 
Nice code, but a Vigenere cipher can be cracked by pencil... better to use AES or something else. http://android-developers.blogspot.ca/2013/02/using-cryptography-to-store-credentials.html http://stackoverflow.com/questions/785973/what-is-the-most-appropriate-way-to-store-user-settings-in-android-application/6393502#6393502 
Seriously! He should be using BASIC. TROFF END OF LINE.
Eclipse is built on an OSGI modules - but you shouldn't let that put you off and the Eclipse's [Equinox](http://www.eclipse.org/equinox/) seems solid enough in real world Having been using it for a few years - it seems a bit over complex and I suggest for anything serious you really need to use something like [Blueprint](http://wiki.osgi.org/wiki/Blueprint) otherwise managing the bundle dependencies becomes a real pita - but it takes you back to XML configuration 
I haven't used either RxTx or Netty, but I think Netty has [support for RxTx](http://netty.io/4.0/api/io/netty/channel/rxtx/package-summary.html). So that's another (related?) option
1. "sustained throughput" is only one kind of "fast" 2. instance size is not about speed It appears they provide a custom JVM memory management implementation that extends what is in Hotspot to be more efficient at handling memory in very large amounts. It's not hard to imagine how they might be able to optimize certain situations to run orders of magnitudes faster than how you can use OpenJDK(which has a big overhead for each individual instance, keep that in mind when you compare what they're trying to do) Have heard of them, but have not tried their product yet. It looks geared towards large scale systems 
But if the project is worth taking the time to upgrade ant on, why not just switch? Its hard to think of builds that are that different that it would be that much effort to switch
I have been using Optional for some time now, along with an insane amount of null checks, and it's making my code much easier to read and maintain. However, I still feel that an annotation based approach (where all values are non-null by default except those with a @Nullable annotation) which is supported by the IDE would be *much* more thorough.
Say I'm your boss; convince me that the changes will make the company more profit and that the level of profit outweighs the risks and costs associated with switching. There are many "unusual builds" that could cause problems. Because Ant let you do whatever you wanted people did just that. They've got little lines of code to copy random files around and to run custom code generation scripts. They might be using GWT with JAXB which means that two plugins need configured which is never straightforward. They might have db provisioning code to insert test data. They might be downloading zip files from the web to extract one file out etc. So many possibilities. Assuming that the previous build works and meets the requirements it's a lot of work that has nothing really sell-able to management. Quite often that's a hard argument to win. 
There is a test class in Guava for automatically verifying that an exception (NPE/IAE) is thrown when passing a null to non-@Nullable parameters, and visa versa. Makes testing and maintaining the contract of @Nullable much easier :)
https://code.google.com/p/jsr-305/ and its `@ParametersAreNonnullByDefault`. But RIP, my little baby. I hope you come to life again in better times. 
It looks like the com.badlogic.gdx.jnigen.NativeCodeGenerator class isn't found. Do you have the .jar file included in the libraries in the project properties, and if so, are they set to be included in the build?
I'm going to check, but if I used libgdx setup, it should be included I think. Btw ty for helping EDIT : http://puu.sh/3GB8R.png So the .jar is included in the project, but how do you check if it's included in the build?
They're already in the libs directory, and the box is checked...
I don't really understand your question... do you want to know why Preferences are available in multiple ClassLoaders? If that's the case... because it uses a BackingStore outside the scope of the ClassLoader to store its values. You should still (a) not use the Preferences API in a web application and (b) not assume it's safe to concurrently access the same Preferences.
Then I'm not quite sure at this point. Sorry bro!
What, no mention of twitter's abandonment of Ror?
Np, ty anyway :p
Did Twitter completely abandon it or are they still using it only as their front end?
They switched to Scala
Interesting, I haven't seen Microsoft do JSON REST APIs for their lock-in products before. Are there others?
But only partially...
They *switched* after they got popular. But if it weren't for the dynamic languages (which allow developers to quickly add/replace features) would those products have become successfull in the first place?
Could that be the reason why this got 15 points here and -1 in /r/programming?
Live Connect does. Things like microsoft accounts, skydrive etc. http://msdn.microsoft.com/en-us/library/live/ff621314.aspx
Yes, the users generally don't care and usually don't know what is running the web page they are using. Their idea was what was important.
Cool! I just posted something to get it started. 
I recently found this nice conference/tutorial [Real-World Java EE 6](http://www.youtube.com/watch?v=8E3Ry-6xqj4) Tutorial and would recommend it (they use JPA, JSF, Arquillian). Plus there seems to be other interesting stuff from Oracle Learning in there.
They're using Scala for their front-end now?
I'm glad to see those damn hashbangs gone. What an ugly kludge those were.
No. According to [this](http://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html) page, interfaces don't extend from an implicit "super-interface" (though that by no means rules out the possibility of there being such an interface, it merely makes it less likely the language designers would make that interface). This makes sense though, because interfaces don't provide any default methods or the like-`Objects` do. Here's the line I'm referencing: &gt;While every class is an extension of class Object, there is no single interface of which all interfaces are extensions. Hope that answers your question! 
Thanks for your answer. I also found that, according to the JLS, an interface implicitly declares a public abstract members that correspond to the public members of Object class: equals(), hashCode() and toString(), though it doesn't extend from the Object.
Sure. Because an interface can only extend another interface, not class.
The new subreddit sounds great. I am interested in becoming a Moderator for this. Thanks.
The user-facing frontend of Twitter is still a Rails app; they replaced the backend API with Scala. Also, "Rails", not "Ror". Nobody says "Ror".
.I suppose that makes even more sense. When you declare an object to be an interface type, you can still call those methods, though its possible they could come from `Object` too. What would be interesting is to see what the methods would look like for the barest of interfaces, without any methods at all.
None of which was relevant to the point of the sub-reddit...
I've been Java developer for about 8 years. Currently I'm running a website which will sell some Java software. I'm self-employment so I can have time.
I do now!
There are several libraries that do exactly what you are after. If this is real work (as opposed to a learning exercise) then I'd recommend something like Apache Commons Configuration. There are many listed here: http://stackoverflow.com/questions/25765/java-configuration-framework 
I almost believe you Wait I dont. I just go to Tiobe to see language rankings or dice.com to see 100 times the amount of java jobs vs non scaling ruby jobs Anyways enjoy your fake version of reality. Thats called insanity.
You pretty are limited to server-side and some horrible enterprise desktop GUI apps. It's not that you can't write games in Java, but that you can do it much much better in languages like c and c++. Not everything is a nail ;)
Most AAA companies use C++ but Java is fairly represented with browser based games (which are lamer). Check at javagaming.org about job opportunities. There are some.
**Crytek** http://www.crytek.com/career/offers/overview/frankfurt/programming-engineering/java-architect http://www.crytek.com/career/offers/overview/frankfurt/programming-engineering/java-game-backend-dev **Ubisoft** https://sjobs.brassring.com/TGWebHost/jobdetails.aspx?SID=^Fsq4vgTECe9SQeIP4iLQZzjMm4MMFgHJftSlgGi1ndwlA7totcYCvScoBC8dNEss&amp;jobId=937988&amp;type=search&amp;JobReqLang=1&amp;recordstart=1&amp;JobSiteId=5290&amp;JobSiteInfo=937988_5290&amp;GQId=786 **Blizzard** http://eu.blizzard.com/de-de/company/careers/directory.html#region=Americas There are much more if you care to search for them. Having said this C and C++ are the ones to go for if you really want to be in the center of the action. C# got some increase in Indie studios thanks to Unity and is used for tooling nowadays. Java is usually relegated for Android, web sites and game servers.
&gt; Currently I'm running a website which will sell some Java software. which you keep pushing on reddit...
Nobody listed Jagex, really? http://en.wikipedia.org/wiki/Jagex
If its one of those two, it's WebGL. HTML is a markup language, not a programming language.
Ah, I have been proven wrong. I did forget that HTML5 has canvas elements. I would imagine from my limited knowledge of html5 graphics it's still primarily programmed with WebGL/javascript or something similar, though.
They still have a Java version of the game. They aren't ditching it, they are just offering a WebGL version as well.
And of course Electronic Arts: http://careersearch.ea.com/search/java
If you just want to work in the gaming industry in general, you could work in web development. Java is extremely popular on the server side for a lot of web application development. I had an interview with Activision once for web dev and they were using a lot of Java to back many of their games sites. As far as games themselves, Java is very low market share. It isn't impossible to find... I know that Minecraft is written in Java. I also know that Just Tactics is written in Java using JMonkeyEngine. I'm sure other folks know of other examples of high profile or high quality games that use Java or Java related tech somewhere.
Android. Java (and Open GL) was struggling for gaming before that, but now there's demand for it again. Also consider LibGDX, a great increasinlgy used open source multi platform framework.
I'm honestly not too worried about it being desirable enough for anyone to put that much effort into decoding it... especially considering it's only a one-time $0.99 IAP to begin with. I'm thinking that my key would do okay, and naturally I wouldn't be writing my own encryption code.
&gt;horrible enterprise desktop GUI apps Would you be able to provide a justification as to why? Not trying to take a stab at you, I am genuinely curious.
You know, if anything else, I think Notch has proved with Minecraft that Java is enough to bring to life new game ideas and provide a sandbox in which to flesh those out. Now, will he ever craft AAA games with his current technology? Certainly not. But does that matter in the least? Not at all. If avblue, or anyone else here, has an idea for a game then they could do a lot worse than to at least prove it out in Java. That just makes a lot of sense too, because the idea may not ultimately work, or it might need a flexible environment that a language like Java could provide so they can just go with the flow rather than get bogged down in brittle tools. That said, I suspect most ideas could also be proved out in GameMaker or even something like Gary's Mod + scripting; so there's that too. Java isn't necessarily essential to the process.
Have you used IntelliJ?
Maybe they went the route the framework Libgdx took and added a "deploy to html5" feature?
Riot, the company behind League of Legends, has a few [postings](http://www.riotgames.com/careers?department%5B%5D=85&amp;search=) for Java Software Engineers. Not sure how up to date they are though.
Concise and informative article. Thank you for sharing OP. 
Check out some design pattern books and check out dependency injection and why you should probably be using it. 
I think everything should be final by default (classes, methods, fields, local variables, parameters). Letting API users override your classes / methods, or re-assign your fields, variables should be a conscious decision
No, I am not confusing of what you mentioned (or perhaps I don't completely understand your points). Just to be curious, I was wondering that if an interface gets the Object as its supertype implicitly. Now I am clear, it doesn't. An interface just takes the public methods from the Object class (but not inherited).
On the other hand, stuttering will be common because of the garbage collector kicking in at bad times(ie mid frame) as opposed to when the developer wants it to. 
Most of [Three Rings's](http://www.threerings.net/) games, such as [Yohoho! Puzzle Pirates](http://www.puzzlepirates.com/), are written in Java. (YPP, by the way, is one of the few MMOs where, as an experienced player, you can invite a friend to play and actually play with them, rather than smiting mobs in the newbie area for them.)
Absolutely. [jOOQ](http://www.jooq.org) really provides an almost 1:1 mapping between SQL constructs and the jOOQ API. LINQ creates a new SQLesque querying language that doesn't map to SQL directly. I've recently blogged about this, here: http://blog.jooq.org/2013/07/01/linq-and-java
&gt; Erik Meijer left Microsoft this year [...] That's interesting. Apart from wanting to go back to an academic environment, was there anything related to Microsoft politics in his decision?
I don't like that the very first paragraph contains incorrect information. The following block of code will fail to compile if you remove the final. So final does have an impact on correctness. final int x = 2; new Foo() { int bar() { return x; } };
Uhmmmm.... Java EE 8 has yet to start. There are no plans and no dates yet. Java EE 7 has just been released a few weeks ago.
I suggest the next step is diving into Servlets &amp; JSPs the key technologies of Java EE and get OCJWCD exam. Book: Head First Servlets &amp; JSP
Yeah that was my thought as well, but question is - is the head first book the best solution? I was checking it out and I don't like its style that much. It has way too many pictures and silly jokes, but at the same time OCJP book from same authors was excellent so maybe I should give it another chance.
In C#, methods are final by default - you have to declare them virtual explicitly, and to override them you need the override keyword. Subclasses can also declare new methods of the same name with the new keyword.
Hmm, I expected this article to touch on using the final modifier on method parameters and local variables too. It helps scope things when reading code; you know immediately that parameters will not be reassigned.
It is definitely easy to read and understand. I just dislike all the silly pictures of people and other clutter. 
I'm still waiting for someone to make a JVM language called "Brunei".
You can still control the lifetime of an object in a GC language, albeit indirectly. The common practice is to initialize everything in the loading screen, and then keeping a reference to all object while the game session is in progress, while recycling objects where appropriate. The GC will not kick in if there's nothing to be collected. Somebody in another thread not too long ago even said that he stores all game entities in one gigantic array. (may or may not be good practice, but you get the point)
Why is that a vaccinated beverage reference? Like java, Ceylon, cocoa, etc...
Java is an island in Indonesia. Ceylon is an old name for Sri Lanka, an island nation south of India. Maybe Singapore may be better? I didn't know there's a beverage called Ceylon, so I guess that fits the theme better with Guava =)
Not very much a fan of this article. The mistake in the example given was a failure of initialization, and what fixed it wasn't adding the final modifier, it was adding the constructor. The rest of it, about performance, was true, but not terribly insightful.
Great article with a lot of new info on I/O and performance in Java, not just log4j! Thanks!
&gt;I didn't know there's a beverage called Ceylon I'd guess it is tea related - [Ceylon tea](http://en.wikipedia.org/wiki/Tea_production_in_Sri_Lanka#Product)
C# methods are not final by default in the Java sense, where the final keyword in the method definition forbids the method from being overridden. C# behaves more like C++, where a method is not virtual unless explicitly made so. That means the method belongs to the class where it is defined and is not inherited by subclasses but is still an instance method. Java's static methods behave like this, except of course not belonging to an instance. Java methods are static or virtual (even methods are virtual), and nothing between.
So you need to remember to use final so you don't forget to initialize your variable? Why not just remember to initialize your variable?
Dude, no, it is final by default in the Java sense. Final prevent overrides, C# does that by default. C# you use the word virtual to allow it to be overridden. And no, it's not like a static method. A static method in C# is the same thing as a static method in Java, in neither language can they be overridden. Everything you said was wrong, why do you think these things?
Favor composition over inheritance. Inheritance is a powerful tool in OOP languages, unfortunately it's abused to no end because developers hold the same view as yourself. As an aside, polymorphism is present in languages outside of OOP. The issue is that classes actually need to be designed for inheritance. Often they are not, because there is no need for inheritance. Furthermore, there is absolutely no need for the option of inheritance until you need it. Marking everything final at first is fine, and then when you suddenly decide you want in inheritance there is no problem going back and opening it up. Hopefully at said point you'd have a valid reason for the inheritance instead of, "I couldn't think of anything else". &lt;-- I've seen programmers do some of the stupidest bs in Java because to get around a problem with their code the very first thing they try is some obtuse hacked subclass. ... I'm ranting here. Anyways, even if you make your stuff final, doesn't mean you got rid of polymorphism or the option to use it.
Hey, look, you missed the point even though he explicitly stated it. &gt; By declaring the field to be final, you moved the error from being only detectable at run-time to a compile-time error, because final fields have to be initialized during object construction. He never said it was fixed by adding the final modifier.
The most important reason is the performance benefit? No, no, the design strengths it provides that ripples through a code base is much, much more important. I'm sad they weren't touched upon more. It's a big reason I've come to prefer C# over Java. Programmers will often just go with the default, and the default in C# is final for methods. The thing is, for good inheritance a class and its methods must be designed for it. Otherwise, it will just often introduce a bunch of bugs into the mix and a complete maintenance mess, because suddenly any changes to your base class could break your children class and so forth.
This is a similar argument to const in C/C++. It's an aid for the *programmer*, not for the optimizer.
That's a pretty poor argument to be made. What if the Map needs to be passed in? What if it needs to be initialized after other conditions are met? Virtual method performance is hardly a big deal, either. It would take some very extreme repetition to make that worth the hassle. The author might have been better served by taking the const-correctness route, and arguing in favor of final method arguments instead, which actually makes sense. This just argues in favor of a more limited and dogmatic way of doing things.
Ceylon also gives it's name to a type of tea. Also the Apache implementation of java was called Iced Tea. 
You need to understand there are a couple of ways to do Java web development. * Servlets &amp; JSPs. - Check out [Core Servlets and JavaServer Pages](http://pdf.coreservlets.com/) or the [Java EE Tutorial](http://docs.oracle.com/javaee/5/tutorial/doc/). Note that I link to an older EE tutorial because the newer versions try to switch to JSF and not much changed in Servlets and JSPs between Java EE 5 and 6. I recommend learning Servlets and JSPs before anything else. * JSF - A frameworks that is layered on top of Servlets and JSPs. Works well for some tasks like making highly form centric business web apps. Most of the JSF 2 books are okay. JSF is covered in the [Java EE 6 Tutorial](http://docs.oracle.com/javaee/6/tutorial/doc/) * Spring - Spring is actually a bunch of things. You'd want to learn Spring MVC. If you learn any server-side Java web tech besides Servlets and JSPs you'd probably want to learn Spring MVC. I wouldn't bother with GWT or any other server-side Java web tech. * JAX-RS - After you get Servlets and JSPs down, this is the most essential thing for you to learn. More and more you don't use server-side Java (Servlets &amp; JSPs) to generate your clients HTML and instead you use client-side JavaScript to make AJAX calls to a Java backend via HTTP/JSON. You'll probably spend more time with [JavaScript:The Good Parts](http://www.amazon.com/gp/product/0596517742/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=osdev-20) and [JavaScript: The Definitive Guide](http://www.amazon.com/gp/product/0596805527/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596805527&amp;linkCode=as2&amp;tag=osdev-20) than anything else. Also the JAX-RS api isn't that hard but designing a good RESTful api can be so be on the lookout for language agnostic REST books. Definitely learn Hibernate. You can start with the JPA material in the [Java EE tutorial](http://docs.oracle.com/javaee/6/tutorial/doc/). As for design patterns, [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633612&amp;linkCode=as2&amp;tag=osdev-20) is a classic. I also like [Patterns of Enterprise Application Architecture](http://www.amazon.com/gp/product/B008OHVDFM/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B008OHVDFM&amp;linkCode=as2&amp;tag=osdev-20) for more of an enterprise system pattern view of things. Probably avoid most J2EE pattern books. Most of the Java EE patterns come about because of deficiencies of the J2EE/JavaEE platform. As each new version of Java EE comes out you see that the patterns that have arisen become part for the platform. For example you don't create a lot of database DAOs because JPA/Hibernate handles your database integration layer. You also don't write a lot of service locators now because of CDI. So books like [CoreJ2EE Patterns](http://www.corej2eepatterns.com/) can interesting but if you are learning a modern Java web stack you'll be amazed at how archaic things used to be if you look at old J2EE pattern books. p.s. Don't buy anything that says J2EE, it'll be seven years out of date. 
&gt; Favor composition over inheritance. It's not the same thing as make inheritance impossible. &gt; Inheritance is a powerful tool in OOP languages, unfortunately it's abused to no end because developers hold the same view as yourself. That was a nice touch. You know absolutely nothing about me or how I work, yet to feel entitled to insult me. You must be a pretty cool guy. &gt; when you suddenly decide you want in inheritance there is no problem going back and opening it up. You don't always have that chance. Say you're developing an API that your coworkers have to use, they would have to change your code to make it work. If you're providing a jar, they're SOL. Also having to modify the original code to extend it is in direct violation of another well known OO development principle, the open/closed principle, and is generally considered a bad practice, even though nothing is ever set in stone.
&gt; Everything you said was wrong, why do you think these things? Possibly, or you don't understand what I was saying, don't understand the differences between C#/C++ and Java, or what the distinction between virtual/non-virtual means. Java, like C# and C++, has static and instance methods. However, *unlike* C# and C++, instance methods in Java are *only* virtual. *All* Java methods are present in the virtual method table for the instance. Putting *final* in front of an instance method does not exclude it from the virtual method table. *All* instances methods in Java are dynamically dispatched through the runtime type by v-table lookup. Although, the JVM *can* use the final keyword as a hint to devirtualize methods in some cases. In C++ and C#, instance methods can be virtually dispatched or non-virtually dispatched. Instance methods dispatch by compile-time type by default, and the virtual keyword allows the to dispatch by run-time type. From the C# [virtual method documentation](http://msdn.microsoft.com/en-us/library/aa645767\(v=vs.71\).aspx): &gt; In a virtual method invocation, the run-time type of the instance for &gt; which that invocation takes place determines the actual method &gt; implementation to invoke. In a non-virtual method invocation, the &gt; compile-time type of the instance is the determining factor. Without the virtual method specification in C# and C++, the instance method is dispatched through the compile-time type, not the runtime type. Non-virtual methods can also be *overloaded* in subclasses, instead of *overriden*. This is *like* static methods in Java, which follows *similar* behavior. You cannot overload a final method in a subclass in Java because C# non-virtual functions are not like final methods in Java. TL;DR: C# methods are not final by default in the Java sense PS: The C# equivalent to the final methods in Java are [*sealed* methods](http://msdn.microsoft.com/en-us/library/aa645769\(v=vs.71\).aspx), and C# virtual methods are not sealed by default.
Just a personal taste thing but I don't like this style (although I'm probably in the minority). Whenever I see a final method param or local var I assume it's final so that it can be referenced from an anonymous instance constructed within the method. Marking everything as final by default then just confuses that assumption and makes the code more cluttered and harder to read.
Precisely - the performance optimizations that the JVM can make are a side affect of the fact that the program is easier to reason about for both the compiler and the humans. We make it final to help the humans comprehend the code.
I wouldn't say "pushed the limits of Java" as the hardware rendering is done using JAWT/JNI (meaning the low level code is in C++/Assembly according to a JavaOne keynote) and the software rendering is optimized using native code as well. The rest of the engine is not too complicated and uses Java 1.5 standards.
As I was reading the article I was wondering what would happen if I wrote a logger with Disruptor and how that would compare. Then I hit the relevant bit and chuckled. Of course. 
&gt; TL;DR: C# methods are not final by default in the Java sense You're still wrong to make said claim. Because yes, in the same sense it is. "But, but, they aren't exactly the same thing under the scenes..." Under the scenes don't change what it means to the programmer and actually dealing with the code. Basically, you were wrong in your first post about everything. And your statements here didn't actually defend anything, they are basically irrelevant crap for being wrong ultimately. And no, an instance member in C# is not "*like*" a Java static member **at all**. "Well they can be overloaded..." Wtf kind of bs is that? Here you just ranted about how under the scenes bla bla bla... yet the moment it comes to a different point suddenly it's not. It's like you want to have your cake and eat it too.
XNA is going away it seems. I believe MS is killing it.
True. Yeah, just personal style, I guess. I also like that there's a visual indicator near variable declarations, as most IDEs color keywords differently. For parameter lists, this helps a bit to distinguish each parameter. Again, personal style (which I inherited from an older coworker).
&gt; You know absolutely nothing about me I stated with the same view as you, not was you, not even that you abused it yourself. It wasn't an insult, that you took it as such just shows the fragility of your pathetic ego. &lt;-- That was an insult. &gt; Say you're developing an API Say you're not... &gt; they would have to change your code to make it work Or not use inheritance. Of course, that's assuming you didn't design it for proper inheritance... like what is being said. Nobody here is saying always use final for everything: you're the one deciding that you should never use it. You have an absolute point of view, which crumbles easily. I don't. I'm saying, you should generally use final unless needed. And in an API, mayhaps it's needed. Tadaa! &gt; modify the original code to extend is in direct violation of another well known OO development principle, the open/closed principle Dude, this was nonsense. You don't know shit about the principle if you think ever changing your code breaks it. First off, the principle basically says **to use final** for all code not designed for extension. Meaning prevent modification, only allow extension. Secondly, closing down code is a breaking change, OPENING it is not. That's why you start with final and then move outwards, because it's a nonbreaking change. Third, removing a final keyword is not actually *modifying* the code. Did the functionality change? No, it did not. Forth, this is the exact problem, actually, in not using final. Is that once you've created it, every change breaks the open/closed principle. Because you're modifying code that might be used elsewhere. Fifth, the principle largely, even though we're trying to tie it in, is largely irrelevant to this anyways.
It's all personal style until someone puts a brace in the wrong place, at that point we pull out the nukes. On a serious note one thing I'd love to have is an IDE (or even just a text editor) that can recognize all the aspects of the coding style of the file I'm editing and adapt to match it - regardless of whether it matches my personal style or not. If it could even hide the real file content, and present the file in my own personal style choice that would be even better.
I'm not even talking about under the covers. The `final` modifier in Java prevents overrides, but also prevents overloads. This results in no difference in behavior if you access the instance method through the base type or the actual type. In C#, you can overload a non-virtual method. This *will* result in different behavior if you call the instance method through the base type or the actual type. Not so "final", at least the way Java means it. Static methods in Java can be overloaded and the consequence is that accessing a static method through the actual type or the base type makes a difference. This is the *same* thing as C# non-virtual methods. Not behind the scenes in the ILR, but the basic syntax of C#. If you're going to accuse me of not knowing what I'm talking about, you should first consider if you know what you are talking about. EDIT: I'm pretty sure I'm using the word overload wrong, but what I mean is using a method with the same name and arguments in a subclass.
&gt; but also prevents overloads For pete's sake, *no it doesn't*. I don't know where you got this nonsense in your head that overloading a final method somehow can't happen. You can do it yourself, go try it. Overloaded functions are essentially a separate function. It does not care whatsoever about the declaration of what it's overloading. You're outright wrong, I'm not sure why you invented this, but I check google anyways just in case you were right and I've gone crazy. But nope, you're just wrong. &gt; *same* thing as C# non-virtual methods Bullshit. Ignoring that you're *outright wrong* on the overloading crap, being able to overload does not make an nonstatic C# method like a static Java method. It just doesn't. It's complete nonsense you're even making such a nonsensical argument. &gt; accuse me of not knowing, you should first consider You don't. But, I did consider it, so I looked it up. End result: you don't know what you're talking about. And now I know for sure without a doubt.
So, what does being incredibly aggressive and insulting random people over the Internet say about ego?
&gt; What you're talking about is called method hiding. Yes. This is what I meant to say. It doesn't really matter, because that is besides the point. &gt; it's just that Java doesn't support method hiding period. Yes, it does for static methods. Which was my entire point, that you cannot "hide" final methods, like you can "hide" non-virtual methods, like you can static methods. &gt; it's not method hiding when you make static methods with the same name. [Oracle](http://docs.oracle.com/javase/tutorial/java/IandI/override.html) doesn't seem to think so. I should have used the world "hiding" instead of "overload" to avoid this whole mess altogether, but whatever. &gt; if you think "method hiding" is the big separator of final and sealed Your reading comprehensions skills could use some work. I said that sealed and final do the exact same thing, which is to prevent overriding virtual methods. sealed only applies to virtual methods in C#, and Java only has virtual methods, so yeah, they kind of do the same thing. method hiding has nothing to do with anything in this context. &gt; The default behavior for C# is, to the programmer prospective, the &gt; same as the final in Java. Nope. The proof of that is that the consequences that the programmer must be aware of when using non-virtual methods in C# and the final keyword in Java are completely different. If the effects are completely different (non-virtual is statically dispatched, never dynamic, yet in Java final is always dynamic), how can they be the same? Just because bananas and lemons are yellow fruits doesn't mean they're the same.
&gt; it does for static methods Since you still don't know what the term means... No, that's not called method hiding. It's not overloading. It has absolutely nothing to do with anything. A static method of one class has nothing to do with a static method of another, even if it has the same name. This is a completely different thing, and it is absolutely not the same thing as method hiding. Method hiding is with nonstatic methods, period. But since you don't know the terminology (read: what you're talking about) I can see the confusion here. &gt; Oracle doesn't seem to think so I know it's fun and games to link to whatever shit you think makes you right, but what your link does is prove you wrong: "An **instance** method in a subclass with the same signature" Maybe... you don't know what the word instance means either? But that's besides the point right? &gt; "hiding" instead of "overload" Wouldn't have fixed shit! Static methods cannot be hid or overloaded. *Because they aren't inherited!* They're static! &gt; I said that sealed and final do the exact same thing, which is to prevent overriding Leave it there. To prevent overriding and you'll find the default behavior in C# does it as well! &gt; method hiding has nothing to do with anything in this context Well no duh sherlock, welcome to my argument. Remember you're the one who brought it in and now are fleeing from it as you learn more and more about how full of shit you are on the topic. &gt; programmer must be aware They don't. &gt; how can they be the same? Because the end result to the programmer is the same. It prevents overrides. And that's all that matters on a high-level. How the code executes it doesn't matter at all, that's the purpose of high level languages.
Well you chose to reply with an insult first even though it was not my first comment so I thought that was what was the most important to you. Isn't it a bit ironic that you would feel insulted by my sarcasm, yet refuse that I could be by your thinly veiled insult by association in your first reply? As to what it means, and why I won't be responding to your points, is that you're a destructive individual who seeks to hurt and lower other below himself, for reasons left between you and your psychologist, so it would be unreasonable of me to push this discussion further.
&gt; chose to reply with an insult first Once again, it wasn't an insult dumbass. How many times do I have to repeat myself to you? &gt; you would feel insulted by my sarcasm I'm not insulted. Learn the difference between you throwing out insults, and me being insulted. Not the same thing. Like here: You were insulted. However, I didn't actually throw out an insult in the beginning. Imagine that. &gt; thinly veiled insult by association Again, it was not an insult. It wasn't even an associative insult. I'm not sure how you can even construe it as such. &gt; you're Ah, more attacks... Well, go ahead and look in a mirror buddy. Because at this point, all you're doing is that. I at least remarked about getting back to the point, here, you're doing nothing but exactly that. And the reason why you wouldn't want to push the "discussion" further, was you were wrong. There is no "pushing" to be done, you got caught with your pants down so you resort to this like a child.
Arhg, people who do this irritate the life out of me. As soon as I want to use the library in a way that is *slightly* unusual, I have to make a custom build of it; at least for final method definitions. So, make parameters final if ou want to, but please don't make methods final. 
Although a great java book overall. It isn't much use to a web-developer. 
Well that's nice, however I know jetty doesn't include a JAX-RS implementation (javax.ws.rs) so how do I include that in my webapp/war? Jersey itself is suppose to be the reference implementation of JAX-RS and yet when I look through its jars I don't see any packages named javax.ws.rs...
The jersey-core dependency seems to include it, which is included when you include jersey-server: So I think you want to have: &lt;dependency&gt; &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt; &lt;artifactId&gt;jersey-server&lt;/artifactId&gt; &lt;version&gt;1.17.1&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;!-- It needs to be included in your war, so scope it like this. --&gt; &lt;/dependency&gt; And then I think you'll get the Jersey Jax-Rs implementation. After adding that one in, if I run: "mvn dependency:tree" I can see it: &gt;+- javax.servlet:servlet-api:jar:2.5:provided &gt;\- com.sun.jersey:jersey-server:jar:1.17.1:compile &gt; +- asm:asm:jar:3.1:compile &gt; \- com.sun.jersey:jersey-core:jar:1.17.1:compile Edit: Getting the formatting right. Added details on jersey-server since I think it brings in jersey-core anyway.
Actually, I'd like to use the one distributed by org.glassfish.jersey version 2.0. On the jersey website I found that [sections 2.3.1 &amp; 2.3.2](https://jersey.java.net/documentation/latest/modules-and-dependencies.html) state, "Following dependencies apply to application server (servlet containers) without any integrated JAX-RS implementation. Then application needs to include JAX-RS API and Jersey implementation in deployed application: &lt;dependency&gt; &lt;groupId&gt;javax.ws.rs&lt;/groupId&gt; &lt;artifactId&gt;javax.ws.rs-api&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt; &lt;artifactId&gt;jersey-container-servlet&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt; &lt;/dependency&gt; However I looked into jersey-container-servlet-2.0.jar and there were no javax.ws.rs packages. I don't understand how java finds the jersey implementations to use when I'm coding to an interface.
When I run: mvn dependency:tree I can see the jax-rs 2.0 API comes through the jersey-container-servlet -&gt; jersey-container-servlet-core -&gt; javax-ws.rs-api path (as well as jersey-common and jersey-server) So (while I don't know much about Jersey in particular), I'm assuming inside the jersey-container-servlet-core or its related dependencies you can find a bunch of classes that extend the abstract javax-ws.rs-api classes and or implement the interfaces in there. And I'm assuming there is some sort of registration process by which the Glassfish Jersey container does it and uses it when you startup your container. 
You may be interested in this reading: [Wikileaks To Leak 5000 Open Source Java Projects With All That Private/Final Bullshit Removed](http://blog.jooq.org/2012/10/26/wikileaks-to-leak-5000-open-source-java-projects-with-all-that-privatefinal-bullshit-removed) ;-)
How did the interview go?
No, this has nothing to do with `Object`. The JLS states in [§9.2](http://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html#jls-9.2): &gt; If an interface has no direct superinterfaces, then the interface implicitly declares a `public abstract` member method *m* with signature *s*, return type *r*, and `throws` clause *t* corresponding to each `public` instance method *m* with signature *s*, return type *r*, and `throws` clause *t* declared in `Object`, unless a method with the same signature, same return type, and a compatible `throws` clause is explicitly declared by the interface.
Indeed, this is the principal use of ``final`` in my code. I design the architecture for the customer's business, but I write the code underneath principally for the maintenance programmer. I use ``final`` to signal to the maintenance programmer that there is something funny coming up ahead. Even using an imperative language, I can usually manage to construct around 90% of whatever program in an idiomatic but effectively declarative style, which ``final`` is a marker for. When it's missing, the maintenance programmer knows that now it's time to actually concentrate on spotting side effects, instead of using most of their attention to match code to outside business requirements.
Yes it *implicitly declares* such. It is implied because every class that could possibly implement it extends from object.
The guarantees regarding final fields provided by JSR133 make it simpler to write thread-safe code if you use them to create immutable objects. The guarantee is pretty strong: not only will the value of the final field be visible to other threads without synchronization, but also any values/references reachable from that field (though in order for this to apply I think any reachable references are subject to the same no-visibility clause during the object's construction). There's a lesser-known security aspect to immutable objects as well. Take for example the following code: public boolean doPrivilegedOperation(String filename) throws SecurityException { checkPermission(filename); doOperation(filename); } If strings were mutable, a malicious caller could bypass the security check by carefully timing a modification of filename so that it passes checkPermission() but doOperation() sees the malicious filename. APIs would need to make an internal copy of the filename parameter to prevent such an attack, and with more complex data structures this becomes an even bigger problem. Immutable objects help alleviate this problem. EDIT: I should add, reflection can circumvent this, but that's a whole 'nother discussion.
Ah yes, I love that rant :D Have that bookmarked, but seeing it linked is nice. But in case anyone is wondering, I do agree that private is *rarely* necessary (although more often than final). 95.75% of the time, you are better off with protected.
Not only that, final variables are thread safe (as long as the underlying object to the variable is also thread safe). This means that you could potentially run into concurrency related issues if you were to pull out all final declarations. Variable assignments may be reflected in one thread that are not in another!
As a Java developer who is primarily non-web, I love this book. I also highly suggest "Java Concurrency in Practice" for non-web development. Lastly, for my fellow awesome non-web devs, I recommend "Java Generics and Collections". 
The author meant of course that arrays aren't *resizable*. Once an array has been allocated, the only way to increase its capacity would be to reallocate a new one and copy the contents.
"compile" is the default dependency scope, you can just remove the &lt;scope&gt; part altogether
&gt;The solution: Whenever possible, allocate lists and maps with an initial capacity Also (and I believe more importantly) don't forget that ArrayList is not the only List implementation. More often than not, I've found that ArrayList is not the implementation I need. Unless random access is crucial, LinkedList is much, much better.
Right, it has to, otherwise they can't compile it. The term here is "transitive dependencies", borscht 
Huh... you appear to be right about that. That's too bad. I kind of hope they replace it with something better then, because that's been a real boon for new game developers that want a reasonable entry point on to the platform.
&gt; More often than not, I've found that ArrayList is not the implementation I need. Unless random access is crucial, LinkedList is much, much better. I'd be very careful with this. LinkedList has a negative effect on data locality as it adds yet another layer of indirection -&gt; more caches misses -&gt; performance might suffer. It also produces more garbage in memory -&gt; higher GC overhead.
I agree. The advice in this article is either highly debatable or common knowledge. These are not "hacks".
I disagree. I have found that linked lists are almost never faster than array lists even without needing random access. I used linked lists in a module where I didn't need random access but iterated through the lists a lot. I found changing all instances of linked list to array list saved a few milliseconds per run (which was a fairly significant savings in run time for this module as it was called thousands of times per minute). Remember that array lists run insertions in amortized constant time. I think that the indirect manner of iterating through a linked list is just much slower with modern systems. My guess is linked lists only really become faster with many insertions over a very large list and very few iterations, but I haven't tested it. 
Java not common for desktop games, where performance is a crucial factor. As others have mentioned, Minecraft was written in Java, but the Minecraft client can also be pretty unstable and would almost certainly run better had it been written in C or C++. That said, the Minecraft server software is also written in Java, as are the server side plugins, and the language works fine in that case. So a lot depends on where you're developing: game development doesn't always mean you're writing a physics engine. If you're writing a browser game, for example, Java would work fine. And for Android games, it's generally what you'd use -- and mobile games can be very lucrative. You should really consider though whether you want to work in game development, if you have the skills to do so. There's always an enormous supply of people want to develop games, so they tend to be paid disproportionately little, considering their skill set, and asked to work insane hours. It's also not a very stable field, since many studios will lay off most of the development team once a project is finished, aside from a skeleton crew that they keep around to write patches. I'm not saying you shouldn't get into it, if that's what you're passionate about, but if you're a good enough coder to develop games, you could make a lot more money elsewhere and maybe develop games as a hobby.
Ok I'm gonna say it... object pooling. 
Without: 1631 With: 286 Without: 1158 With: 282 Without: 1149 With: 280 You measure at the wrong time, the time it take to create the Stringbuilder should be included. But you parse the builder to a String every run and you constructed the builder with a empty String. I fixed that. Now lets see: If you know the size of the resultString you can create the builder with the right capacity. Result with **40000** loop runs: **run 1:** Without: 20760 With (old Code): 4606 With: 3 With + given Capacity : 3 **run 2:** Without: 20404 With (old Code): 4542 With: 1 With + given Capacity : 1 **run 3:** Without: 20290 With (old Code): 4580 With: 1 With + given Capacity : 1 Well the right capacity wont matter a damn. [Pastebin](http://pastebin.com/mYN43Bgz) It´s actually not that much more code to write using a Stringbuilder. 
Without any benchmarks this is useless. 
No, just no! In the early days of Java 1.2, I might have agreed with you but in 99.999% of cases, modern GC implementations are much better at managing objects than you are. What you get with object pools: * Increased risk of introducing memory leaks. * Increased code complexity. * Increased risk of race/lock conditions. * Bypass all the nice things that the GC offers. That being said, there are still rare cases that pools makes sense, specifically any time the resource you are working with are slow to create. Example: JDBC connection pools. 
[Brian Goetz](http://www.ibm.com/developerworks/java/library/j-jtp01274/index.html) seems to have a problem with object pooling: In addition, object pooling has some serious downsides. Because the object pool is generally shared across all threads, allocation from the object pool can be a synchronization bottleneck. Pooling also forces you to manage deallocation explicitly, which reintroduces the risks of dangling pointers. Also, the pool size must be properly tuned to get the desired performance result. If it is too small, it will not prevent allocation; and if it is too large, resources that could get reclaimed will instead sit idle in the pool. By tying up memory that could be reclaimed, the use of object pools places additional pressure on the garbage collector. Writing an effective pool implementation is not simple.
It always unleashes a holy flame war when object pooling is mentioned within Java circles. What I find funny is that whilst everyone likes to talk theory, a lot of people have been using pooling in real world systems that meet sub millisecond real-time requirements, and they leave the pontificating to everyone else. I have worked on one such system, and I know of several others in which pooling is used to great effect. Many market data libraries used within banking and finance, RFA from Reuters comes to mind for one, rely upon object re-use and pooling. A better example is the Disruptor pattern by LMAX, which again I've seen used to great effect in critical low latency systems over the last several years. Yes it is possible to use pooling badly, but when used correctly it can be a very effective tool for creating stable, predictable and performant systems in Java. 
None of the points you make are wrong. However when pooling is done right, and I have seen it done right several times, it can be a very effective tool allowing you to create very performant and stable systems. For every 10 people I have encountered that dismiss pooling off hand, I probably know 5 who were curious and tried it, and maybe 3 who use it when appropriate and reap the benefits whilst others pontificate.
I don't think anyone is saying *never* use object pools. It's more like, you better have damn good reasons for using an object pool, you should know what you are doing and getting yourself into, and don't even contemplate using one until you absolutely have to. Don't second guess the garbage collector until it has proven itself a bottleneck.
The linked list in java is a doubly-linked list. It is hardly ever a better choice. http://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist
If you are drinking the rest of the Oracle kool-aid, Coherence 12c will be interesting to you. otherwise, not much is worthwhile in it.
Without showing us some code and some benchmarks, you are also talking theory.
Which JVM are you running this on?
In addition to it being worth doing if there's a significant cost associated with creating a new instance of the object (e.g. database connections, as you mention), it's also worth doing if avoiding GC is an absolute priority. An example of this would be a game engine; if you're aiming for 60fps say, that gives you 16.6ms between each frame, and a GC's pretty likely to screw that timing up - especially given that there's no way to control when the GC will be performed. So, what /u/TheBriMan84 said is technically correct - object pooling does reduce GC overhead, and in many senses it's far more a hack than what's listed in the OP's link (given that as you say, in the vast majority of cases it's not the right way to go).
Yep, plus GC is known to hit at seemingly random times and create lag spikes. This is especially bad on android. One of my games can sometimes "create" thousands of objects a second. The performance is much better to maintain entity pools than to hope that the GC will take care of it for you, plus you can release everything at the end of the level to give it time to clear itself up without looking like noticeable lag.
They are at best boilerplate techniques. They are at worst "voodoo optimizations" that may actually turn into degraded performance and increased complexity in the future (like too much object pooling or too many caching layers). These are hacks. Do not universally apply them as you would proper design patterns.
Eclipse Juno with Jre 1.7.0_21 Win8 64bit (deal with it) and Intel 3570k 
While obviously reflection works when 1/2 methods are private, but it is incredibly inconvenient *really* quickly. And you are correct, we don't have to agree :)
did you look in jersey-core ? It's in that jar for the 1.x versions. (A good IDE will help you locate all the copies of the class and where they come from with a quick search.) The APIs are so small there is no reason not to include copies of them in the product itself, I suppose.. 
&gt;In this example we have 3 StringBuilders allocated in the background – one for each plus operation, and two additional Strings. That’s 5 additional objects in what would otherwise appear to be a pretty trivial statement. More than that actually, as each of those creates a char[] Object, and possibly more than one, when the StringBuilder arrays get reallocated to expand the capacity.
You're not going to find the same exact classes and package structure, you'll find implementations and extensions of it. For instance: org.glassfish.jersey.message.internal.OutboundJaxrsResponse is an extension of javax.ws.rs.core.Response. org.glassfish.jersey.internal.JaxrsProviders is an implementation of javax.ws.rs.ext.Providers
Oh, I think I'm starting to understand. javax.ws.rs-api.jar is the API jar and only contains the interfaces that frameworks/libraries need to implement. However, if I write something like: import javax.ws.rs.ext.Provider ... Provider provider = new Provider(); And the implementing class is actually located in org.glassfish.jersey.internal.JaxrsProviders then how does Java/JVM find that class if I only imported javax.ws.rs.ext.Provider? How is the implementation.jar mapped to the api.jar? Where's the damn magic?
Probably an SPI approach, Google SPI to find examples and read API docs. There are also systems that work on class path scanning, literally parsing the compiled class files looking for matches. Springs configuration by annotation is a notable example of this. I will read the source to find out how it works when I have a non-mobile OS handy
Do note that Coherence was an incredibly cool product long before Oracle bought Tangasol. This is not an Oracle bred enterprise product.
You could try Enterprise Architect, it has a 30 days trial. 
Yes, but this is using String concatenation in a for loop. The article talked about using standard String concatenation, which is a bit different. [Here's](http://pastebin.com/0RbfpMpg) a benchmark on non-looped string concatenation (also some very primitive memory allocation usage output). The output this produces is: With sb: 205 Total memory: 161021952 With strings: 208 Total memory: 161021952 Notice that I'm calling System.gc() in the middle of the test. This is only to clean up the garbage the StringBuilders left behind. Also, in this particular result, using string concat actually used less memory than string builder (that's why the total memory output is the same for both). The results suggest that using string builder (outside of a loop, this is important) instead of string concatenation really does not improve the overall performance. (Test was done on Win7 64bit + jre6 (last java 6 update), processor Intel i5 3360M)
All JDKs come with a JRE, so I believe the answer is yes. Assuming you're running Windows, check your JDK directory. You should find a /jre subfolder in there.
Thanks!
I use UMLGraph as it integrates with Maven and will add basic UML diagrams to the Javadocs.
It isn't completely thread-safe, but it does **help** prevent one thread from seeing a partially constructed object, constructed by some other thread. All initialization of final members will "happen before" you leave the constructor. This isn't necessarily the case for non-final members. Note that I said help. You can have final members and still get other threads reading bad values for those members. The prime example is "leaking the this pointer" in the constructor. [Here's a pretty good explanation](http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#finalRight)
The magazine looks interesting but the web viewer is just horrible. Because of the unused space around the actual "magazine page" I only see about 75% of it on a 27" screen with 2560x1440 res. The pdf is much better and I quite like reading the magazine in that format. Its a bit JEE heavy but there are a few nice articles on other topics. The "java == xml" hate in this thread is understandable but mostly just shows the individuals lack of knowledge of java. I am a java backend developer and i never touch xml or the googol "just config it this way to make magic happen" frameworks available.
It is, the canvas element is manipulated via javascript.
When they say HTML5, they really mean WebGL + Javascript.
[Argo UML](http://argouml.tigris.org/)
Yes, I am aware of it. The place I work has been using coherence since the very early days... If you look at 12c, it's added exabus support, support for Oracle's monitoring stuff, and oracle's database. Oh, and they added async backups for a token feature for those not on the Oracle mothership. It's very clear that Oracle is absorbing them into the borg now - if you are an existing coherence client _not_ evaluating other options at this point you are probably not doing your job. 
I used objectaid (the one you linked) and it worked just fine for me. I have never tried anything else to compare it to though...
Heh, getting a java agent into production is nearly as difficult as getting a new jdk into prod (especially if you already have an existing java agent), but good work nonetheless. 
I want the .net equivalent of linq
The conversion is a one-time job (for example in Maven's process-classes phase), after which it's just a bunch of normal .class files. There are no runtime dependencies.
Okay, fair enough. Haven't worked with Coherence for some time, but remember that a few years back it was really far ahead. Sad if it indeed got the faceless enterprise treatment.
Why would you want to do this? I have always just stored the location path of the file in the database to act as a pointer, not the file itself. 
Lists implemented with arrays will almost always outperform linked lists. [This is in the context of C++](http://www.youtube.com/watch?feature=player_detailpage&amp;v=0iWb_qi2-uI#t=2680s), but the same concepts apply to Java too.
Your DB try/catch can leak connections if an exception occurs and your DB connections will try to connect every time... A much safer way is this pattern: MyDriverManager is a class that created a DataSource and uses it to create Connection objects, instead of reconnecting every time. Connection connection = null; PreparedStatement stmt = null; ResultSet rs = null; try { connection = MyDriverManager.getInstance().getConnection(); stmt = connection.prepareStatement(MY_QUERY_HERE); rs = stmt.executeQuery(); while (rs.next()) { // Handle result set // ... } } catch(SQLException se) { // Handle Exception here } finally { // Always close regardless if exception is thrown or not if (null != rs) rs.close(); if (null != stmt) stmt.close(); if (null != conn) conn.close(); } 
Actually, in the code I was referring to, I was: 1. Constantly iterating through two lists of elements and performing comparisons. 2. Building up a new list, one element at a time, based on those comparisons. 3. Combining multiple elements in the new list into a single element (which involved clearing sublists of the new list and re-inserting the combined element into the middle of the list). So, there was iterations, creating lists one element at a time, removals, and insertions taking place inside the middle of an array list on lists that ranged from only a few elements up to over a thousand elements. And I found ArrayLists to be the superior option. ---- That said, I am no stranger to the theory behind Linked Lists and I agree that if the vast bulk of your code is performing insertions or deletes *NOT at the end of the list* versus iterations or accesses then sure, use Linked Lists. But I was responding to the statement from the previous poster: &gt; Unless random access is crucial, LinkedList is much, much better. I was simply stating that I find ArrayLists to be the superior choice in most situations. When in doubt, use ArrayList.
Infinite loop. public class Application { public static void main(String[] args) { while(true) ; } } It'll peg a single core of your machine at 100%. Add threads for multi-core machines.
Thanks! Now all I need to do is learn how to implement a thread. :-)
Inspired by the bash fork bomb: public static void main( String[] args ) { class Ploppy extends Thread { @Override public void run() { new Ploppy().start(); new Ploppy().start(); while( true ); } } new Ploppy().start(); } 
One that will use all available processors: public class Application { public static void main(String[] args) { for (int i = 0; i &lt; Runtime.getRuntime().availableProcessors(); i++) { new Thread() { @Override public void run() { while(true) ; } }.start(); } } } 
CONSUME ALL THE CORES!!! public class Application { public static void main(String[] args) { while(true){ new Thread() { @Override public void run() { while(true); } }.start(); } } } 
I could certainly see this being useful! I've built little utilities in Java and it's annoying to have to configure my tnsnames.ora and my utilities (they all share a config file, but still...) separately. I do have one minor suggestion: It would be neat to have a function to look up an entry and return a JDBC connection string or a ready-to-use JDBC Connection object. For returning a connection you'd need to have a place to store the username and password, I don't know if that's allowed in tnsnames.ora.
Interesting... Why didn't you implement the Comparable interface for these elements, created an array list initialized based on the first list, performed an addAll on the second, then use Collections.sort? I am not sure how you would handle your third point because I don't know the condition you look for when combining elements. I am not sure if this element is of the same type or a new class... 
[Testing in Eclipse](http://link.packtpub.com/xuwhU1) might come in handy. It's a great intro into debugging Java programs in Eclipse. All you need to jump-start into the next level. I found this very useful.
 public class Application { public Application(){ while(true){ new Thread() { @Override public void run() { while(true){ new Application(); } } }.start(); } } public static void main(final String[] args){ new Application(); // Release the Kraken! } } 
Although the syntax is deprecated, you can use the entire `jdbc:oracle:thin:@(DESCRIPTION=...)` as the URL. As for usernames and passwords, it's very clunky, but you can use the oracle wallet..... you need to have environment variables, system properties, and a SQLNET.ORA file all configured right, and every entry in the TNSNAMES.ORA file must resolve to one username / password pair in the wallet, so no using "entry aliases" :-/
Reminds me of the Perl 6 Apocalypse
This seems to be a good start. One feature that's needed is "entry aliases" dbname, dbname_prime, dbname.world, dbname.example.com = (DESCRIPTION= .... ) should be individually accessible through any of the 4 aliases. I'm also not sure if you can have a parameter value string and list at the same time; do you know if Oracle supports such a thing? It seems that your object model does, even if the parser doesn't. I'm also not sure if the entry names (or parameter names) are considered case sensitive by Oracle's TNSNAMES parser.
http://www.youtube.com/watch?v=HXvm76e2X1Q Edit: better link.
The Oracle documentation is unclear about case sensitivity of parameter names theselves they only talk about keywords: &gt; Keywords are not case sensitive. Values may be case sensitive, depending on the operating system and protocol. I started the lib by reading the docs and using my accumulated over the years tnsnames.ora file (anonimized of course): https://bitbucket.org/mulander/oraconf/src/d6125a25e55d18e501e16570bbf037093b1420bf/oraconf/test.ora?at=default Entry aliases should be properly 'parsed', the lib started out with an attempt to provide different storage backend for the parsed configuration file. Since the default implementation is based on an associative array the initial implementation has a limited lookup that doesn't work well with aliased entries - this is something I have to think about on how to handle nicely. &gt; I'm also not sure if you can have a parameter value string and list at the same time; Can you provide an example tns entry as I am a bit unsure what specific syntax you have in mind. Though it is possible that the object model is much more relaxing compared to the parses since I started out with mostly parsing and the manipulation and validation still needs a lot of work. All in all I really appreciate the feedback and I am open for any bug reports to make this a bit better. I just saw that one issue was already reported (https://bitbucket.org/mulander/oraconf/issue/1/does-not-handle-entry-aliases) and if that was you by chance then thank you for taking the time - I'll gladly tackle the subject right after work!
yup - that was me :) Full support for aliases might mean maintaining a separate alias-&gt;canonical-entry map and some alias manipulation methods, so round-tripping would work intelligently. I think if you had two identical entries using different names it would work in all tools (well, aliases themselves don't work in all tools, the notable exception is the oracle wallet; thanks oracle; but different entry names with identical values do work in the wallet, and I can't think of any reason it would have been coded *not* to work that way) so round-tripping (read file a, write file b) may not have to keep aliases together, and you could just go the lazy route of entering the same value under multiple keys. The value should probably be the same instance to make updates of one aliased entry affect all of them. I will have to see when I get back to work what entry I remember having a string and list value. I want to say it had something to do with the ADDRESS_LIST. I don't think it should be possible (or rather I think the oracle parser would reject it as malformed), but the purist in me would like to have that explicitly prohibited in the object design. Thanks for putting this together, every time I want to load tests for my project I have to duplicate the connection information from TNSNAMES, and I kept toying with the idea of writing something like this :)
it depends on one's need.
42 years? I take it the script was made in 2012 then, seeing as that would result in being exactly 42 years since time 0 (January 1, 1970 exactly at midnight +0).
That is why I am asking, what is a use case where you need to store a file into a database?
Have read about the Halt and Catch Fire instruction? :-D
And they just got [Perl 6 working on the JVM](http://6guts.wordpress.com/2013/07/15/rakudo-jvm-news-more-tests-plus-thread-and-promise-prototypes/#comments). Spooky.
Nice! Perhaps you would be willing to visit the [IRC channel #perl6 on freenode](https://kiwiirc.com/client/irc.freenode.net/perl6?nick=orfjackal) and chat for a while? A guy called jnthn is finishing up [an initial port of Perl 6 to the JVM](http://6guts.wordpress.com/2013/07/15/rakudo-jvm-news-more-tests-plus-thread-and-promise-prototypes/) and is digging in to java interop, multicores, optimizations, dalvik, and so on. I bet he'd enjoy a chat with you even if only for 15 minutes!
Definitely a lot of Google-Fu, also reading r/java, and finally I tend to connect with various Java related groups on Google+.
Or even better: http://static.springsource.org/spring/docs/4.0.x/spring-framework-reference/html/jdbc.html#jdbc-lob and using Spring's DataSource / JdbcTemplate connection and exception handling.
It's for me, I don't care want I like :)
If I was you, I'd rename the package names from ``oracle.configuration`` to ``org.mulander.tnsnames`` to avoid potential problems with the trademarked name.
for example, you want to store files uploaded by your users in a central database instead of in file system. Files stored in database would be more secure.
The "simplest" part makes it sound like homework to me as well. 
&gt; javax.ws.rs.ext.Provider This is an annotation, you can't instantiate it
you're welcome; I'm glad to see some work done on this. I dug through some of my TNSNAMES, and I must have been on crack thinking you could have a string and list value. Here's one of the more complex ones: test1a.company.com, test1a, test1a.world = (Description = (Failover=ON) (Address_List= (Load_Balance=ON) (address = (protocol = tcp)(host = test1aclmbd.intest.company.com)(port = 1521)) (address = (protocol = tcp)(host = test1aclmbf.intest.company.com)(port = 1521))) (Connect_data=(service_name = test1a.company.com))) Here's another one with a slightly different structure: test1b, test1b.company.com, test1b.world = (Description = (load_balance = on) (failover = on) (address = (protocol = tcp)(host = test1bclmbg.intest.company.com)(port = 1521)) (address = (protocol = tcp)(host = test1bclmbn.intest.company.com)(port = 1521)) (Connect_data =(service_name = test1b.company.com) (failover_mode =(type = select)(method = basic)))) It's curious to notice (if you ever get to the point of providing semantic parsing) that you don't need the addresses grouped under the `Address_List` key.... I don't know if either structure is deprecated or not. Good Luck and Happy Hacking :)
What about Java-RT?
see next part in series here: http://psy-lob-saw.blogspot.com/2013/07/spsc-revisited-part-ii-floating-vs.html
yes and no. it's pretty easy to get 512mb ram on a system chip these days, and it's just going to get cheaper. At some point memory is no longer a concern. 
&gt; they need tight controls on memory allocation, meaning manual GC They might have tight latency requirements for their methods and code depending on automatic collection wont meet those. Real time java implementations already support memory areas not subjected to GC (AFAIK the implementations of that spec are not cheap).
As a middleware admin, weblogic has some nice features but by and large .... it's just not as easy as tomcat. Mostly because everything supports tomcat, and nothing supports weblogic. You want cloud software that integrates your middleware layer with a nice resource partitioning interface? With weblogic you're left with their web console and a prayer that your vendor will support your version of weblogic. With tomcat, there are numerous solutions. If your developers aren't using or locked in to weblogic specific features I just don't see the use case. 
depends on the kind of system you're running. if you absolutely need real-time work, like medical device work, sure. But if you are just putting together, for example, an orb that glows a certain color based on some input data, a hundred ms here or there probably isn't a deal breaker. And if it's a big enough concern, there are ways you can program to avoid the GC as much as possible, at the price of an ever-increasing heap. But if you don't have a lot of short-lived objects, that might be fine. 
&gt;You can't really compare Tomcat to WebLogic. For the use cases I mentioned you absolutely can. If you don't need an EJB container, and I can't think of a shop developing new ejb's anymore, you don't need weblogic (or glassfish or jboss). Our developers would **love** to go to a web app, select a pre-sized container or cluster, fill in a few fields and magically have it appear in dev, uat and prod. That's easy and inexpensive with tomcat (we use cumulogic, there are literally dozens of other vendors). That is not easy (or cheap) with weblogic. From a management standpoint it's a lot easier for us to manage tomcat. The JMS stuff is neat, but it's not as easy as (and no better than) rabbit and tc. And spinning up queues is supremely easy with tomcat. With weblogic, even with a wlst script, you are hamstrung by the lack of support from third party providers. You want six queue's across two lb'd clusters? No problem, here's the jndi name for your queue and error queue. You want that in our weblogic environment. I'll get back to you tomorrow if you're lucky. Major cloud vendors don't support weblogic (oracle exalogic didn't even support weblogic until **very** recently). Weblogic is last in line for every jenkins plugin, every maven call (oooh, a deployer that's worked for tomcat for nearly a decade... great). They didn't even support JSR 303 until this version. 
&gt; If you don't need an EJB container, and I can't think of a shop developing new ejb's anymore, you don't need weblogic (or glassfish or jboss). I'm really sorry, but that's absolutely not true. Frankly, I think that one little sentence betrays an incredibly ancient and outdated view on many levels. The first is that a full Java EE server is about much more than just EJBs. In the modern Java EE landscape EJBs are just one of the many types of beans available and not in any way central to Java EE anymore. Thinking that Java EE is mainly or exclusively about EJB, even thinking Java EE == EJB (or you'd probably say J2EE = EJB?), is completely wrong. This is an 2002 era thinking where indeed the main difference between a Servlet Container (in practice Tomcat, but in theory also including Jetty) was the EJB container. In modern Java EE the very useful additional stuff includes JSF, CDI, Bean Validation, JPA, JAX-RS, WebSockets, JSON-P, Concurrency Utils, Batching and really, A LOT more. This is all incredibly useful stuff and very well integrated. Secondly, even in this modern world where EJB is just -a- bean type among many ones, its services and simplicity are really great. It's absolutely nonsense to think there's not a shop "anymore" that uses EJB. This too strongly betrays a 2003/2004 era thinking where EJBs were incredibly shitty and people were indeed moving away from them. I think you completely missed out on Java EE 5 with EJB 3.0 let alone Java EE 6 and 7 with EJB 3.1/3.2. EJB is now an incredibly lightweight and simple bean type. It's a POJO annotated by `@Stateless`. That's all. No deployment descriptors, no weird interfaces or life-cycle methods. Just this one annotation. &gt;That is not easy (or cheap) with weblogic. Then use GlassFish, JBoss EAP, Geronimo, Resin, TomEE or several of the other Java EE implementations. All totally free, open source and completely trivial to setup (unpack an archive and it's ready to use). &gt;From a management standpoint it's a lot easier for us to manage tomcat. All those servers I mentioned are exactly the same to setup as Tomcat, and many have more elaborate CLIs or admin consoles, and/or more configuration options, with perhaps one exception; TomEE. TomEE IS Tomcat and thus pretty much has exactly the same options and the same tooling works against it, but it has all the extra useful stuff included that makes Java EE so much better than a plain Servlet Container. &gt;Major cloud vendors don't support weblogic But they DO support e.g. JBoss EAP (OpenShift) and TomEE (Jelastic), and then there IS Oracle Cloud which uses WebLogic. &gt;They didn't even support JSR 303 until this version. Uhm Bean Validation came in with Java EE 6. Tomcat doesn't include it, but GlassFish, Jboss EAP, ... , AND WebLogic do. WebLogic did so in 2011 with the first release of 12c. Really, whats your point here? 
Fixed issue #1 so far :) Details here: https://bitbucket.org/mulander/oraconf/issue/1/does-not-handle-entry-aliases In short I decided to treat aliased entries as a single entry and I am trading off some memory in order to be able to reproduce it as a single entry when serialising back. Some additional API was added to work with aliases and some more options are plannned. I also updated the documentation as I went through the code - though a lot of it still needs work. I will give a shot to your fresh examples in the following days :) IMPORTANT: I would really like to personally thank you for taking the time, contributing and making me think about the project. That's the type of encouragement I needed in order to keep working on it and see value in learning Java the platform and the language.
I didn't really interpret his post as an attack on JEE. I think he mainly dislikes Weblogic. I haven't used Weblogic since 2011, but at least back then I found it quite painful to run and develop for. If tomcat/jetty + spring do the job, why bring in a full container? I'd argue that AMQP is vastly superior to JMS, and that you can live without EJBs as well (or at least replace them with spring beans). That said, I absolutely agree that someone picking JEE isn't crazy. Even when going tomcat + spring a lot of the spring stuff is really just a different wrapper around the same technology (JPA/Hibernate etc). It's really becoming more about personal preference at this point (for most applications at least). 
I know, I was making a hypothetical example.
http://docs.oracle.com/javase/tutorial/reflect/ You are most likely interested in the Class, ClassLoader, and Method classes.
I think to do what you say you want to do (do something with all classes in a package) will probably require a whole lot of code; either your code, or using some library, or both. See [this question](http://stackoverflow.com/questions/520328/can-you-find-all-classes-in-a-package-using-reflection). Is it really dynamic *class* loading that you want, or some sort of elegant *instance* creation? If the classes are already in your program jar, then unless you've taken significant steps like writing a custom classloader they are already being loaded by the JVM for you. What problem are you actually trying to solve?
I think you may want to use the [ServiceLoader](http://www.reddit.com/r/java/comments/1j0auw/question_regarding_dynamic_class_loading/), which allows you to register implementations of a Service (an interface or abstract class) which can then be loaded at run time. You could then load all Functions like this: for(Function func : ServiceLoader.load(foo.bar.functions.Function.class)) { functionTable.put(func.getName(), func); } The ServiceLoader is available from Java 7 upwards. 
http://technotes.tostaky.biz/2013/03/java-serviceloader-example.html
It's a common belief there are bots down-voting everything. I'm not sure what is the exact motivation, probably to increase a visibility of own posts? PS: Great article, thanks a lot for writing about the topic!
303 works fine in tomcat since it doesn't load old out of date jars like weblogic does. The reason 303 didn't work until 2012 (sorry, december of 2011) with weblogic was because they bundled old old old classes and the api's expected by the third party validators didn't exist (like they absolutely did and do in tomcat, way back in 2010). 
Fuuuuck that... Weblogic butters the living shit out of my bread. Corporations insist on using it and people have a hard time learning it. That equals 120k for a thirty five hour week with two days remote in a southern market (for me at least. But i am also exceptionally handsome...). 
Bean validation doesn't integrate as well with the other specs when using Tomcat. Java EE should be seen as a complete integrated platform, not some slapped together libraries in Tomcat. Besides, if you wanted Bean validation, why not use TomEE? What's the point of using Tomcat because it's so small and so lightweight and so so... and then you add everything that makes it a Web Profile server, but you do it by hand. What's the bloody point?
Probably because they never updated their stuff...
&gt;Bean validation doesn't integrate as well with the other specs when using Tomcat. That hasn't been my experience at all. What "other specs" are you talking about? It's literally three entries in a pom (if you choose hibernate, other vendors split it and require four entries) and BLAM full functional validation. &gt;Besides, if you wanted Bean validation, why not use TomEE? I'm not saying "don't use TomEE" I was arguing henk53's premise that bean validation didn't work in tomcat. It does. He also stated that validation worked in weblogic before it did in tomcat. It did not. &gt;What's the point of using Tomcat because it's so small and so lightweight and so so.. Memory footprint is a thing, especially in a share resource virtualized/cloud environment. 
&gt; But, you may think to yourself, “If I can access a value specific to my thread from anywhere at all in my code, doesn’t that mean that I don’t have to pass variables all over from all over?” &gt; &gt; YES! A most emphatic YES! &gt; &gt; This is one of the side effects of having this ThreadLocal object, and it’s a very good reason on its own to use the class. This is not a good reason to use ThreadLocal. There are plenty of resources out there that detail the problems with relying too heavily on global variables; the only thing ThreadLocal addresses are some of the synchronization problems. &gt; In a setting such as a Web application, you may have filters that can recognize particular aspects of the request that you want to use later in the code in unrelated contexts. You can use it to keep track of the authentication of the current user; of localization options such as language or date formatting; or site theme preferences. This is a load of problems waiting to happen. Request comes in from an unexpected vector and the thread-local authentication is still left-over from the last user? Oops. Synchronous method gets refactored into an asynchronous call that queues? Authentications stepping all over each other.
&gt; That hasn't been my experience at all. What "other specs" are you talking about? Bean validation's primary purpose is to integrate with other technologies, so that'll be JSF and JPA specifically. &gt;It's literally three entries in a pom EVERYTHING is three entries in a pom. It adds up. Rapidly. YOU will also be responsible for making sure the exact versions work together. Really, there is a reason David Blevins created TomEE, since people have been fed up of manually having to put dependencies in poms (let alone the fact that not everyone is using Maven). Yes, Maven resolves the dependencies, but YOU have to keep them up to date, remove ones not needed anymore, sort out conflicts at runtime, etc. Tell me, do you also create your Linux server by starting with the kernel and "adding dependencies" or do you download a ready to use distro? &gt;I was arguing henk53's premise that bean validation didn't work in tomcat. I read it as stating that Bean validation is not shipped with Tomcat. Which is indeed not the case. &gt;He also stated that validation worked in weblogic before it did in tomcat. It did not. It still is not IN Tomcat... WebLogic included Bean validation before Tomcat did, which is true... 
Weblogic included bean validation that worked with zero vendors (hibernate, eclipselink, etc). That's useless. You can't override the jars. There is no solution for 303 in 10/11g, you have to be on 12c. That's insane. &gt;Bean validation's primary purpose is to integrate with other technologies, so that'll be JSF and JPA specifically. And it plays very nicely with them. You said: "Bean validation doesn't integrate as well with the other specs when using Tomcat. What basis is there for the claim that it doesn't integrate? 
You'd think mechanical sympathy would get the bot vote... Thanks :-)
Looks like AlinaJ is a SPAM BOT posting every links to that blog. REPORTED.
There's no solution for Servlet 3 in Tomcat 6 either. You have to be on Tomcat 7. That's also insane?
As a middleware admin, do you even know what an EJB is? No offense just wondering.
I don't think Java allows you to do that. The JVM abstracts most of the OS away, as far as I know, so I'd think you can't access running processes. I could be wrong, though.
For one thing, PIDs and Netstat are not platform independent, so there is no way that Java could implement/access that in a platform independent manner.
Ah that's a shame... i was wondering how some people implement things for networking... short of scanning every port in a loop, which sounds dreadful.
ok thanks, i feel sad now :(
Sometimes you just have to write native libraries for each supported platform. Look into JNI.
You need to be more specific if you want help. What you're asking is the equivalent of writing a book and asking, "Hey, can someone help me add a word to this existing page?". It is easy to do, but we have no idea how you want this to work and why.
I'm gonna guess the assignment includes something like "you must use an array for your output" or some such similar statement.
They might eventually, but since Java is so much like C, some classes and books use it really simply (ie treat it as if it were c) until students know how to program in function-based environments. Then the class moves into objects, where Java really shines. It doesn't make much sense to teach in C and then migrate to Java since they're so syntactically similar.
That would make sense. What's throwing me off is that the class is called FinalProject.
Maybe its the first class in a series? Course 1: Introduction to Programming (C-like) Course 2: Advanced Programming Concepts (Data-structures, OO)
Thank you! This has worked exactly as I had wanted.
That's a fair point, especially at a school on the quarter system. I took a semester-long introductory course to MATLAB which had a section of the course dedicated to transitioning to OO programming concepts, just as the Python course that was also offered had an intro to MATLAB section.
Well, how are you starting your jax rs service?
my web.xml maps URLs to the ServletContainer class in jersey's packages.
yup - so no magic. you're directly invoking Jersey. which is how everyone else (including myself) does it AFAIK, unless they are using facilities offered by containers. Glassfish may have something like that for example. i presented the link regarding SPIs just to show you how those work, to show that such 'magic' can happen... although it's really a lot less mysterious than other things. JDK proxies, bytecode manipulation, or bytecode parsing are more 'magical' than ServiceLoader wasn't sure about the details of what you were looking at 
Will probably run out of memory before it taxes the CPU very much. 
Sadly on what I've been given the word 'Random' is in bold, italics and even underlined.
You can add a little twist on it. You can make an array of all the possibilities, in order. So now we have a ~10,000 entry array with integers (sequential PINs). Now, simply shuffle them to make them random. A good way to do this is run through a loop (about 5000 times in this instance), generate a random number between 0 and 10000, and swap the current element with the random element. Now the array is fully random and you can write them all to the text file. This may take a good amount of time to create depending on your processor speed, but it's on the order of O(n) instead of O(n^2) which is what your would take. And it generates all possible PINs. 
Wow, there are so many things wrong with this program. You use "if (generated == line)" to compare 2 strings. You should always use .equals(). Next, you write to the same file you are reading, and you do it every time the line doesn't match. If your file contains 1001 and 1002 and then you generate 1003, it will write 1003 to the end of the file twice. You need to check the number against every line in the text file before deciding to write. You could write to some sort of a database. Doing a search for a given number will be very quick if the data is indexed. [These](https://en.wikipedia.org/wiki/Linear_feedback_shift_register) can produce semi random numbers that don't repeat but only produces them in powers of 2. You might be able to just discard values over 9999 and get the next value though.
I was looking for the same thing a while back. After many false starts I found sigar from Hyperic. It's a nice cross platform library with pre-built native shared libs for mac/win/linux. I only explored it on windows with some little test programs, and it appeared to work pretty well. http://www.hyperic.com/products/sigar https://github.com/hyperic/sigar
&gt;You can make an array of all the possibilities, in order. Now, simply shuffle them to make them random. This is a great idea. Here's some code that implements it: static int getPin(int index) { int[] pins = new int[10000]; for (int i = 0; i &lt; pins.length; i++) pins[i] = i; Random rnd = new Random(0xBF3D5FB9C5A6B632L); // some (fixed) random seed here for (int i = pins.length; i &gt; 1; i--) swap(pins, i - 1, rnd.nextInt(i)); return pins[index]; } static void swap(int[] arr, int i, int j) { int tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } The list of pins is generated randomly, but repeatably, so all one needs to keep track of in the file is the number of previously issued pins. Edit: Addtionally, here is an example of how to save that number persistently in a text file and use it to get the next pin: static int getNextPin() throws IOException { try (RandomAccessFile pinFile = new RandomAccessFile("pincount.txt", "rw")) { pinFile.getChannel().lock(); String line = pinFile.readLine(); int pinCount = line == null ? 0 : Integer.parseInt(line.trim()); pinFile.setLength(0); pinFile.writeBytes(String.valueOf(pinCount + 1)); return getPin(pinCount); } }
A sequence of pins in a random order or a random pin? It sounds like you are asking for the first but you'd be better off asking for the second. With a repeats allowed random pin a pin has a 1 in 10,000 chance of being guessed. With a non-repeating pin the odds go down for every previous pin cracked. If you want the non-repeating pins the put the numbers 1 - 10,000 in an array and make one loop through the array swapping each element with a random element. If you try to randomly generate the pin and then check against previous pins for a duplicate you run the possibility of never generating a new unique pin successfully (especially as your pool goes down). Edit: Kind of cheating but if you record the seed to your random number generator and the index of your last pin given out then you'd only have to store two pieces of data in the file.
Or save a crapload of time by using an ArrayList and Collections.shuffle(). Take this idea in another direction: Make a single ArrayList of all the possible PINs, shuffle it (maybe a few times, use a SecureRandom instance as the Random source), then save that list to disk with ObjectOutputStream. If the file is already there skip step 1. Then to generate a random unique PIN, read file with ObjectInputStream, pop a PIN and hand it out, then write the array back to disk over the old file. Easy, fast, and incredibly insecure source of PINs :)
&gt; A good way to do this is run through a loop (about 5000 times in this instance), generate a random number between 0 and 10000, and swap the current element with the random element. Or if you're lazy like me, just use what's already available: `Collections.shuffle(Arrays.asList(someArray))`
Wow, thanks for the gold! Glad I could help :-) 
If you've not invested too much time in the library, I highly recommend checking out [Unfolding Maps](http://unfoldingmaps.org).
It's definitely not abandoned, because there is recent commit activity on git, it just looks like it's a one man project so the author probably doesn't mind that the project can't be built normally. Anyway, what you said about the JIT makes sense. I knew that not all code in a java program will be jitted in the standard vm, but it didn't strike me that a JIT-only vm could ensure that all code is at least JITTed once.
&gt; It claims to be a JIT-only vm for java, but I have no idea what that's supposed to mean. Wikipedia has a lot of information: * [Just-in-time compilation](http://en.wikipedia.org/wiki/Just-in-time_compilation) * [Virtual machine](http://en.wikipedia.org/wiki/Virtual_machine) * [Java virtual machine](http://en.wikipedia.org/wiki/Jvm) * [List of Java virtual machines](http://en.wikipedia.org/wiki/List_of_Java_virtual_machines) * [Comparison of Java virtual machines](http://en.wikipedia.org/wiki/Comparison_of_Java_virtual_machines) &gt; Why is it being written? It is an open-source project, so who knows? Because it is a fun, interesting challenge? Because its author had an itch to scratch? Apparently he simply wanted to get some experience writing a JIT compiler, so he decided to add one to [JamVM](http://en.wikipedia.org/wiki/JamVM). After a while, he felt that the design and evolution of JamVM was holding him back, so he decided to reimplement the rest of the VM in addition to the JIT compiler.
Seriously, stay away from Trinidad if possible. It's slow, full of bugs, rarely updated and only works properly if you're using Internet Explorer. I'm unfortunately forced to work with it in one project and it's the most horrific JSF framework I've ever had to deal with. The worst thing is, that we're not even using 2.x but an early alpha version of Trinidad 2, because that's what the project was started with. And now we can't even update, because the new versions introduce new bugs and randomly changes, breaking the application.
I'm trying to figure out what the advantages of that would be. Might as well just compile it, surely?
Thanks, i'll give it a look. I was hoping to find an OSS project because i'm trying to integrate it with an OSS project i'm working on, but needs must etc.. etc.. :)
&gt; This is not the case of the standard Oracle JVM I'm pretty sure HotSpot is a pure JIT too. It just has multiple JIT compilers with different levels of optimization. I don't think it has a bytecode interpreter. It was written by the V8 guys, and V8 is also a pure JIT. *Edit: I'm [wrong](http://openjdk.java.net/groups/hotspot/docs/RuntimeOverview.html#Interpreter|outline). HotSpot does have an interpreter.*
I'm using it for several projects at work. The main author of openmap is on the mailing list, and always very helpful. Honestly I found the best way to start was by reading the source for [SimpleExample2.java](http://openmap.bbn.com/doc/api/com/bbn/openmap/app/example/SimpleMap2.html) From there, there's two obvious classes for noodling with it [since those are sitting right there]: [MapHandler](http://openmap.bbn.com/doc/api/com/bbn/openmap/MapHandler.html) and [LayerHandler](http://openmap.bbn.com/doc/api/com/bbn/openmap/LayerHandler.html). I learned by starting from those, and using my IDE's autocomplete to discover new things. One of the really cool things, too, is the ability to stream map tiles from mapquest/openstreetmap/google-if-you-agree-to-their-license. It's really easy to do using [ServerMapTileFactory](http://openmap.bbn.com/doc/api/com/bbn/openmap/dataAccess/mapTile/ServerMapTileFactory.html) and the information on [This mapquest developer page](http://developer.mapquest.com/web/products/open/map)
glad to be of help. I agree that the aliases should not count towards separate entries, no need for the comment ;) I got a chance to use it and the alias bit works on my tnsnames file. The most time consuming was importing it into eclipse, so to that end I'll offer the following suggestions: Use the maven standard code folder layout. even if you don't plan on using maven, the standard folder locations make it very clear what should go where - src/main/java - include \*\*/\*.java files - src/main/resources - excluding \*\*/\*.java files - src/test/java - include \*\*/\*.java - src/test/resources - exclude \*\*/\*.java Scala has adopted this (src/main/scala, etc); I think a few other languages have as well but I don't recall them off hand. This will suggest that the oracle test files should go in src/test/resources. To run unit tests inside or outside the IDE, the tests can load the file from the classpath: URI aliasEntriesFileUri = EntryAliasFileParseTest.class.getClassLoader().getResource("entry-aliases.ora").toURI(); cFile = new Parser(new ParameterFile(new File(aliasEntriesFileUri).getAbsolutePath())).parse(); To help with this in a real project, have the Parser read from any InputStream. You can provide convenience static methods (readFromFile, readFromStream, readFromClasspath, etc) so the library user doesn't have to repeat so much code. In my test to create the JDBC URL I had to: String dbUrl = "jdbc:oracle:thin:@(" + cFile.findParameter(new Parameter("db_name")).getValues().iterator().next() + ")"; I think a couple of convenience methods would make that a lot easier as well: String dbUrl = "jdbc:oracle:thin:@" + cFile.get("db_name").valueString(); Where the "valueString" method would return the string value if it is set or the stringified values list otherwise. Thanks for this and I hope your journey to learn Java is a fruitfull one.
Hum, as long as Android keeps using Java6 I'm fine. Gradle will be the death of me though.
I like the lambda feature.
How so? My understanding is, that Java slowly moves away from it's slightly chaotic past to a modern and more streamlined feature-set. 
Funny thing is, this article got [15 votes on DZone](http://www.dzone.com/links/love_and_hate_for_java_8.html) and 19 votes here as of now, but in /r/programming it's [voted into oblivion](http://reddit.com/r/programming/comments/1j1zet/love_and_hate_for_java_8) as usual. Talking about there being no Java bias there :(
Maybe im just scared of having to learn a lot of new stuff and change the way I've been doing things again aha
The good thing with Java is, that although you can use lambdas and streams, you don't have to. Basically all lambdas are just a nicer syntax for anonymous classes. All the other additions are extensions to the class library and not to the language itself :-) 
Change is the one constant in software development.
The thing that pisses me off is complaints that they're not true lambdas because they're functors under the sheet. If oracle gets their shit together and make them act and look like true lambdas in the language it doesn't matter what they desugar to.
As a scala fanboy I'm glad java is getting lambdas. It means that [TCO](http://openjdk.java.net/projects/mlvm/subprojects.html#TailCalls) for the jvm might finally be finished.
ServiceLoader has been available in Java 6. You could emulate it in Java 4/5 if necessary by using ServiceRegistry from the image SPI package.
Practically, if you're building a server application, it will VERY probably be run on a platform that either doesn't have a corresponding concept for PIDs, or does have a ``/proc/self`` symlink.
I figure that since they are interface based they are functors, but maybe I'm wrong. I just think it doesn't matter one bit as long as they fulfill the role of a lambda.
&gt;Talking about there being no Java bias there What's this you say a language specific topic is popular on forums dedicated to the language. You don't say! Look at this horrible bias from people who don't use the language, oh the humanity! Why can't everybody care about things **I** care about.
Those two particular things are bad examples, I can't think of a single modern OS that doesn't have them. 
If you want to execute external commands, take a look at [Apache Exec](http://commons.apache.org/proper/commons-exec/)
If you want something easy and quick, take a look at [PlantUML Plugin Eclipse](http://plantuml.sourceforge.net/) They also have a plugin for MediaWiki for wiki integration purposes.
I'll try emailing the author, thanks for the suggestion. the open map framework as has a (com.bbn.openmap.graphicLoader)AbstractGraphicLoader which is supposed to help in doing what I want to do but I can't find an example that actually shows how to use it. There is an AnimationTester class there but I have no idea how to add it to my Map and it doesn't run on its own. 
Thank you, I'll check it out... I did have a lot of luck with jWMI on windows end to get info from OS though
True.. What I'm doing is not practically standard... I'm trying to manage the ci nodes in the build farm trying to clean up all loose pics post build... This is highly un-orthodox as its a huge security hole in any pro environment.
You are right, of course.. Thanks
The whole article is linkbait. Why would anyone care?
Why the hell are they creating some thing else called streams. Aren't there enough words in the English language to call it something new. There are already two timers that work differently.
what about gradle gives you so much trouble? Serious question btw, not asking in the tone of *a-hole*
Not if you work for a company. We're on Java 6 and we're not moving forward unless we have to move to a newer version of Glassfish.
Don't know about 303, but jax-rs can be upgraded in 12c: http://docs.oracle.com/cd/E24329_01/web.1211/e24983/version.htm
Apple was to blame for Apple's security breach.
Answer = Oracle;
Gradle is fine. The transition was just hard for me.
I don't see how Lambdas make things easier to read, easier to type, yes, but not easier to read. The more type information you have in a line of code the more easier it is to read and figure out what it's doing.
oh, I see. you were coming from Ant?
If it was hacked at all: http://m.guardiannews.com/technology/2013/jul/26/apple-developer-site-hack
No, I wasn't using Ant, Gradle or Maven. I just let Eclipse handle it all for me.
That's right, I forgot about all of those companies developing new web sites in Java 1.2. 
Check out [JSch](http://www.jcraft.com/jsch/) It allows you to execute a command remotely (you said given machine so I'm not sure if that means remotely or locally), and also supports extra cool stuff like sftp, ssh, etc.
US here. Average rates go from $70-$200 per hour, sometimes more. Depends on the location, nature of the job, type of client and what products are involved. For example a job doing bean development in Iowa is going to have a much lower rate than a job working with Oracle's WebCenter in a multi-point system integration in NYC. One requires standard J2EE knowledge the other requires quite a bit more. Both might be done by the same person in the same year depending on how dynamic they are and how the market is treating them. Remember, unless you work for a company that will give you bench time you can have a gap of anywhere from 1-week to 3-months between gigs and to be maximally flexible (some of the best rates are fixed to a particular type of arrangement) you need to be able to do both 1099 and Corp-to-Corp arrangements meaning doing your own taxes and handling both health and liability insurance in the range of 1 million to 10 million depending on the requirements of the org looking for the resource. ProTip: Try to find the jobs paying big city rates in country towns. For example, in Kalamazoo, MI, Pfizer (once Pharmacia) has a bunch of facilities. For a while they were hiring consultants at similar rates to Chicago or NY but you were in a town where cost of living was less than a 1/3 of either location. 
It's very region-specific, driven by what industries are around. If you work in an area with a strong banking presence then it drives the java day rate up across the entire market. The rate here in Glasgow, Scotland is around £300-400 per day, going up to around £600 if you are down to London. The simplest way to see the rates for your area is to check the job listings. Sign up for some lists and get requisitions emailed to you, it's not like you are committed to anything. One thing to watch is that recruitment agents will take a hefty cut so direct contact with the end-client is preferable. You should look at [this survey](http://www.sjdaccountancy.com/sites/www.sjdaccountancy.com/files/documents/Contractor_Attitude_Survey_June_2013.pdf), it has all if the info you need, you'll find it interesting even if you are not in the UK. If you are, also check out PCG, they are a trade-body that's worth joining imho. 
Does it work on windows? Would I be able scp stuff to and from a windows box?
Hmm I couldn't tell you. I've never actually tried to scp to a Windows computer. I'm not even sure if ssh to Windows works. A quick test would be to download it and run the example program Exec.java, which allows you to run a command on a remote machine, just asks you for the username hostname and password. Essentially just download the zip, copy Exec.java into the src/main/java folder (so it finds the libs) and run it. 
java is fast enough, you'll be fine performance wise. what problems did you have before? we cant help you if you dont say your problem (just realized this isnt /r/javahelp)
What do you mean by performance? Computational performance or a responsive ui? The difference in computational performance is likely to be negligible. GUI programming in Java can be a struggle with some older frameworks such as swt and swing, but JavaFX 2.0 seems promising.
The biggest issue for performance is (generally) not the language, nor the OS. It's the algorithms used behind the scenes. A newbie writing a C program with terrible algorithms will likely write something much slower than an expert writing in (say) python. Write in what you are most comfortable with. If you know the language and the libraries, you'll know the pitfalls to avoid. Finally, your goal may be performance, but spending 2 weeks optimizing something to run in 2 seconds vs spending 30 minutes writing something that does the same task in 3 seconds is not worth it. 
All Java-based applications that I used in my life were slow, ugly and slow. This is my problem with it :) The application I want must be fast and trustable, it will manage a mining facility so, can't break or stop responding. And it uses databases.
That really depends on the implementation. Java and the more popular frameworks are mature and stable. However, if the implementation is bad, especially in relation to GUI events and threading, the application is likely to become unstable and unresponsive.
Metro - did you file any issues in JIRA or in the forums? I am a volunteer community lead for LR (not affiliated with the company) but can try and put you in contact with some people or get your issues in front of the right people. Sounds like you are not the only one. We are going thru an upgrade now ourselves. 
If you're going for a smooth, Windows UI then Java isn't great. Swing can get close, and there are some UI plugins which get closer, but it doesn't use native Windows components. That being said, you can design a Swing app to be fast and reliable. Rule #1 of Swing: LEARN ABOUT THE EVENT DISPATCH THREAD!!!!!! I'm not sorry for the caps, but I've rewritten and reworked far too many Swing apps which were coded improperly. For more [info](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html). You might also check out [Griffon](http://griffon.codehaus.org/) because it wraps up a lot of the crap for Swing, and helps take care of following Rule #1. If you need help just message me, I've done a lot of Swing apps.
Yes, it can be plenty fast/reliable... Swing with the Windows "Look and Feel" is very close to a native UI, though not perfect. I can't agree more strongly with IAmASocketMan about the EDT. Also one little thing to keep in mind -- a JComponent is fairly expensive. When you're dealing with graphs/charts, it's pretty tempting to populate the chart with a Component for each datapoint or whatever (because this gives you eg, a convenient way to detect mouse clicks). But this doesn't scale well -- for a big chart, scrolling/repainting/etc will take forever; whereas drawing all the datapoints manually in a paintComponent() method can be essentially instantaneous. I suspect you'd have a better time with the GUI programming with C#, and the language itself is a few years ahead of Java (eg, lambdas)... Java's real strength is the other stuff -- databases, reporting, etc. there are many robust, mature very high-quality (and free) libraries. With C#, my impression is that you're better off going with a full MS stack.
Right, but you cannot scp FROM windows, which seems to be what you're looking for correct?
I will give you that C is faster. I can even give you that QT and GTK are good GUI toolkits that work well with C. The problem here is that you included C++. As OOP programming languages go, I would rather deal with Java than C++. The main thing that I think makes Java well suited to modern programming is variability of memory, cpu types, gpu types, display systems, and so on. We have x86, AMD64, and ARM in widespread use. Java is simply easier. I understand the advantages of C in performance, security, and so on. I am a C programmer, as well as Java programmer. When I have the time to devote to a project, I typically use C. When I need to get something done quickly, and have it run on multiple systems from day one, I use Java. TLDR: when I need money, Java.
Have a look at JDiskReport (small), yEd (medium), Astah (bigger) for examples of applications that I consider good examples of Java desktop applications. And see if you agree with me. :) The first two ones are free, the third one has a free Community-edition. All install easily (no dirt or trick), and can be removed without problem. Overall, I think Java *can* be used to make nice desktop apps, but it depends on the developer. By the way: * Make sure you understand about how the various "system" threads work (event thread, etc.), make sure to respect that, do not perturb them, have all serious work done in worker threads. * Have a look at [MiG Layout](http://www.miglayout.com/). Such a small Jar, and so much better than all the standard layouts included in the JRE.
You should seriously consider using JavaFX instead of Swing. Slow desktop apps are, pretty much always a result of poor code. Specifically, they're likely a result of novice/bad programmers not taking long running tasks off the Event Dispatch Thread. Write good code and speed won't be a problem. Swing is still ugly though. You can use a LaF to hide it, but even then, It's not fantastic. JavaFX is a lot nicer visually, and all of its styling is done via CSS, so it's easily customisable. The components available to use in JavaFX blow those of Swing out of the water, like charts, and an actual HTML5 web rendering component, based on WebKit. It also has a fantastic UI builder that generates an FXML layout which you can use in your code. If you're interested, but aren't sure, take a look at the JavaFX example program: http://www.oracle.com/technetwork/java/javafx/samples/index.html
Mondo deffo working for ms
That's a terrific idea. I have seen way too much lines of code showing as different due to tab/space. But on the downside you will no longer be able to take a meaningful quick look into a file from anything other than the ide.
Use javafx2. It's still young but it's a much better alternative to swing. Performance-wise, you have very little to worry about with Java. Despite eclipse's performance, java is a very fast language.
I wouldn't touch Swing or SWT as they are both superseded by JavaFX. If your app would need to work with COM then .NET might be better option but JavaFX has a lot of nice features not present in WPF or WinForms. 
Well there's your problem.
[What's the simplest program that you can write that would tax the CPU the most... before halting?!](https://en.wikipedia.org/wiki/Busy_beaver)
... well. The IDE *could* "normalise" the indentation when writing to the file, and interpret this when re-opening the file. That way it would remain editable/readable with other editors. But if someone else would edit it with another editor and mess up the indenting, it would break the IDE!
&gt; I have seen way too much lines of code showing as different due to tab/space. In eclipse preferences, go to General &gt; Compare/Patch and check 'ignore white space' 
A lot? Most **new** applications are using Java EE, Spring, Struts, JSF, Play! or other. It is universally agreed upon that relative to almost all newer frameworks, J2EE is awful. I'm pretty sure Oracle does not even support it any longer. http://www.adam-bien.com/roller/abien/entry/j2ee_is_dead_completely_dead Edit: more words
I think it's a fine idea; I remember reading an article about an attempt to do this in the past. I recall the main hangup being comments, which apparently fit rather oddly into the syntax of a programming language. I don't remember all the details, but I gather it's something along the lines of the fact that a comment can refer to the previous chunk of code, the previous line, the following line, the following chunk, etc. It's not obvious from the syntax or semantics of the language what to do with them exactly. Now, this article *was* talking about the formatting of code as a whole, not just indentation (and so would need to consider blank lines and so on).
I believe most editors/IDEs do this in part with how tabs are handled. In fact, this is why many people prefer tabs for indentation. The user can configure the level of indentation for each tab to be 4 spaces, 8 spaces, etc. and it doesn't affect anyone else. However, your idea is a good start. Personally, I think it would be awesome if you could have it allow you to do fully custom formatting independent of the files themselves. For me, I strongly prefer Allman style indentation vs. K&amp;R style, so if I can have my code look the way I want it, I would be happier. If it means I don't mess with other people's view of the code, perfect! I had a brief thought about leveraging hooks in git and similar to do this with a command-line code formatter, however it would cause issues when executing a diff against the files unless you add some dummy commits just for formatting, which is just going to make things messy.
Why not write it as a web application?
This is always true for every byte, short, int and long in Java. I'd say the underlying hardware doesn't really matter here. Note that using Math.abs with byte and short will return the expected result, since the values will be cast to int.
That just makes the problem even worse, because when you screw up tab/spacing, you check it in without noticing. And on and on it goes...
What we do is we have one formatter configuration which everyone uses. This makes sense, because there's no good reason to have different configurations for different projects in the same department. It's just an XML file so you could, presumably, keep it in version control. Ours is mature and doesn't change, so it's just a file on a shared directory. I believe there's a plugin for IntelliJ for using eclipse formatters.
OK, that's a coincidence. Or maybe the other of the question was interviewed following your blog post ;)
Some languages have "structure aware editors" that completely ignore formatting and only juggle an AST underneath. Many XML editors are like this, although their tree editing interfaces may be annoying to use (but it doesn't have to be that way). You can't make syntax errors and it obviously gives the freedom for the editor to format the code however the user wants. On save, the source code could appear in any desired format. Automatic source code formatting is like a poor man's version of that though.
&gt; All Java-based applications that I used in my life were slow The slow part can be explained by poor coding, that many java applications are build on top of the eclipse framework only makes this worse (in eclipse Juno it could take 3-4 seconds to open an editor). I can't remember having any performance problems using pure SWT or Swing. As others point out offloading work to other threads solves most of these problems.
Taking this idea to its logical conclusion (and thinking out loud), languages could define a compiled syntax tree representation as an intermediate step between the text source code and the compiler. This syntax tree representation would be what gets checked in and out. Your IDE operates on this representation but presents it to you as source code (i.e. text), based on your formatting preferences. Obviously the syntax tree rep would have to preserve code comments. I assume Intellij is already building up something similar in memory in order to provide the context-sensitive look-ups. The downsides are that any tools that operate on source code, such as diff tools and source/version control systems, would have to understand the syntax tree rep. I guess automated code formatting might not get it right every time, which might be irritating. Would almost certainly be impossible with C++, but then that language jumped the shark a while ago...
&gt; The more type information you have in a line of code the more easier it is to read and figure out what it's doing. I think Scala has pretty comprehensively proved this wrong. However, if you qualify it with "given a type system with only enough potential to complexity allow the delivery of business requirements in a cost-effective manner", it's good sense.
Given how good investment efficiency Java gives in such a range of industries, even its outlier space is large. Essentially, a tiny minority of user organizations, including some very large ones, are stuck on JEE and enterprise bean / CDI development, while the majority of user organizations have forged ahead to realize the business advantages of independent de facto standards produced in the open source Java space.
JEE? Do you mean J2EE or Java EE 6, soon to be 7? EJBs are dead for **new** development. IMHO demand for EJB skills ten years from now will be less tha demand for cobal skills today. My point stands, change is constant in software development.
In non-helloworld, non-fibonacci development out in the world, 90% of Java 8's value comes from the streams functionality retrofitted into the collections interfaces.
JEE is a commonly used term for everything after J2EE. New JEE development is the outlier I referred to, created through leveraging sales politics and package deals where service delivery consultancies are willing to be dictated to in order to play a part.
The clients don't have internet connection available.
I'm a Java guy but I'm going to go against the grain a bit and say that all things being equal, including familiarity with both C# and Java, if I were to write a Windows desktop program from scratch I'd lean towards .NET and the Windows Presentation Foundation. Now if you were targeting multiple platforms, which is Java's great strength, then I'd lean towards Java. 
A web app can run locally. He probably meant: Write the UI in HTML/CSS/JS and talk to a Java app running in the background.
&gt; I have used SWT. It's still obvious it isn't Windows-native, I don't know how to break this to you, but SWT is windows native (as well as Linux, OSX). It's a JNI wrapper around the native API. So look and feel is 100% like the OS it's being rendered on. 
See earlier link. 
Eclipse hardly acts like a native Windows app. You aren't understanding my point. Just because things use native controls does not mean they act like native apps.
yes, or on a server next to the database server.
I worked on a Scala project for a year that was handed to us after 2 years of development by outside contractors. Myself and the two other developers who were tasked with taking over couldn't figure out what the code was doing. It was hell. Scala is heaven to write (for some), but hell to read.
People have been predicting the death of Java since it was first released. I think the position of the Java ecosystem is a lot stronger now than it was even 5 years ago. Look at all the new languages running on the JVM. There's a huge number of libraries available. You've got the Play framework, and Grails, and the configuration of a lot of stuff has gotten so much simpler than in the old days. So much less XML.
I'm not sure if you're asking or making a statement. My personal opinion is that Java is not going anywhere anytime soon. It is still the go to platform for enterprise applications which pretty much guarantees it will be around in one form or another for the next 20 years. A LOT of banking, defense, and insurance infrastructure is written in Java.
What he said
Lambda support in Java 8 is a great step forward. Already using it in production (don't tell anybody).
the people in this thread are all correct, but i just want to reiterate: ======= ANDROID ======= unless Google is OK with rewriting all of its infrastructure and breaking all of the code written for android already, its here to stay. just tell your friends 'android' and walk away. Java is a great language. learn it, love it, dont listen to the haters.
C# is nice but how is Windows doing these days? C++ is used for games, primarily, it seems like. Anyone else who needs raw control will go with C. Ok. Python is awesome and you should learn it. Java is a language with legs. It hits that strongly typed sweet spot. It is faster than almost anything but C these days. Love or hate Oracle, they are pushing the language forward. And, as others have pointed out, Android. But also, JVM. If you work with Java you get to know how the JVM works. Scala is awesome, Groovy is handy. It is just a really solid ecosystem. Java is looking pretty healthy to me. And the JVM likely has demi-god like immortality at this point.
I didn't mention Eclipse, as that is RCP. You don't need to code in RCP to create SWT apps. 
exactly what I think. Java is the new cobol.
Clojure has real potential also; much more so imo than Scala (which provides a great transition from OOP to FP, but is just enormous as a _language_, which is never a good sign... not to mention compile time, etc) Yeah the JVM is not going anywhere, neither is Java.
There you go! ["JAVA DEVELOPER"](http://www.headfirstlabs.com/books/hfjava/)
I am struggling finding anything lambdas can do what could not be done previously using interfaces. As I understand lambdas it seams like a little bit more convenient way to write (but not to debug) the same thing. Could someone please explain to me what I am missing?
"Onion Bagel, Sweet and Lo Latte plz".
&gt; Will java die in a few years time? Short answer: No.
Well the way that I see it is that anything that you add to a Turing complete language is really just going to be a different way of doing things that you could do before. That doesn't mean that we shouldn't do them though - lambdas will make certain types of code a lot more readable and, in conjunction with the the new Stream implementations, lazy evaluation will be a lot more natural too.
Since you mentioned PEP8, have you looked at the [Linux Kernel Coding Style](http://lxr.linux.no/#linux+v3.10.4/Documentation/CodingStyle) document? It's a bit arcane in it's rules, but when you look at why the rules are the way they are, it makes sense. Not saying it's the right way, but it's another point of view with a good description for each decision. To reply to your advantages: &gt;* Reduction in whitespace noise from version control changesets Not really sure what you mean by this. 3 tabs is 3 tabs regardless of whether they're 4 or 8 spaces in your editor. &gt;* Consistency of display between cat, less, IDE, and web-based source browsers. Agreed. Not sure how important it is, but yes, consistency outside of your favorite, customized editor is good. &gt;* 79 characters display in 79 characters Even then, I break this regularly depending on the line of code I'm working on. I try to adhere to an 80 character limit, but sometimes the code just looks much worse when you try to wrap. I blame Java :P (Before any flaming starts, I meant that as a joke. I actually do know better.)
Scala really does take TIMTOWTDI to lengths Perl only dreamed of.
You're right, I was a bit terse. There are two aspects to consider. Java as a language, and Java as an ecosystem. From the language perspective, Sun and Oracle have led a very conservative process for expanding the language while attempting to keep backwards compatible (e.g., type erasure in generics). There are a huge number of libraries available in Java, a significant amount of server side software is built on it in both large and small companies. Java, as a language, is unlikely to go away because of this inertia, any more than COBOL or Fortran have gone extinct. Java the ecosystem is going to be around as well: Clojure, Scala, and Groovy are just three languages that are built for the JVM and offer iterop with the huge number of Java libraries. These languages expand on the capabilities of Java while utilizing the foundational aspects of the JVM. I write a lot of code in Clojure: developing on my MacBook, deploying to Linux or Windows depending on needs. I can't do that as easily in other languages: if I want to develop with F#, I'm locked to Windows. If I want to develop in Common Lisp, I need to make sure the code I'm writing is nicely portable and that I have the (or a) compiler installed on each platform so I can build the executable. No need with Clojure. 
Look into Spring JDBC. It has A LOT of nice abstractions that avoid typical JDBC errors while not abstracting TOO far above plain JDBC... it also has a lot of flexibility, among which are some ORM-like capabilities (roughly speaking). You'll need to deal with SQL again, but I for one see that as only a good thing. We jumped off the Hibernate and iBatis and general ORM bandwagons a few years back in favor of this and we've never had anything but positive feelings about the decision. 
What made you put iBatis in the same ORM category as Hibernate? Have you used both?
I recommend Apache DBUtils. http://commons.apache.org/proper/commons-dbutils/ Simple, clean and effective with minimal footprint. 
Stopped in to say the exact same thing. Spring JDBCTemplate gives you everything you want and it's an easy replacement if you coded your DAO layer using interfaces. We been trying bit by bit to get off the Hibernate wagon by replacing with JDBCTemplate. Hibernate just gets so bloated as an application grows organically.
&gt; Since you mentioned PEP8, have you looked at the Linux Kernel Coding Style document? It's a bit arcane in it's rules, but when you look at why the rules are the way they are, it makes sense. Not saying it's the right way, but it's another point of view with a good description for each decision. +1 https://www.kernel.org/doc/Documentation/CodingStyle &gt; To reply to your advantages: &gt;&gt; Reduction in whitespace noise from version control changesets &gt; Not really sure what you mean by this. 3 tabs is 3 tabs regardless of whether they're 4 or 8 spaces in your editor. True. Merging code between indent styles can create noisy patches and changesets. https://en.wikipedia.org/wiki/Tab_key#Tabs_in_HTML &gt;&gt; Consistency of display between cat, less, IDE, and web-based source browsers. &gt; Agreed. Not sure how important it is, but yes, consistency outside of your favorite, customized editor is good. &gt;&gt; 79 characters display in 79 characters &gt; Even then, I break this regularly depending on the line of code I'm working on. I try to adhere to an 80 character limit, but sometimes the code just looks much worse when you try to wrap. I blame Java :P I blame [URIs](https://en.wikipedia.org/wiki/URI). [css `word-wrap:` and `overflow-wrap:`](http://www.w3.org/TR/css3-text/#overflow-wrap) 
Well, technically I didn't, I only put them in the same SENTENCE :) But yes, point taken, they are quite different animals... you maybe could even argue that iBatis isn't actually ORM at all, and certainly not in the same fashion or to the same degree that Hibernate is... but since it *does* automate mapping between SQL and Java objects I'd probably argue it is. I supposed that's a tangential debate though... and yes, I've used them both, although I haven't for a couple of years now. My real point was simply that something close to "bare metal" JDBC is my preferred solution nowadays, hence Spring JDBC being a strong choice.
I'm not sure that attaching a java agent that does nothing (the JVM would only invoke an empty premain method) would cause any performance downside. Nonetheless, JAMM consumes memory, as explained by the author: by default, MemoryMeter keeps track of descendents visited by measureDeep with an IdentityHashMap. This prevents both overcounting and infinite loops due to cycles in the object graph. Of course, this tracking imposes a memory cost of its own.
Java will almost certainly continue to decline, but it will remain one of the most frequently used programming languages for a long time to go. I **don't** think it will become COBOL anytime soon, which means a fringe language for new users and only being used to maintain a massive amount of legacy code. At one point Java had an incredibly large marketshare, depending on the exact statistics you look at was somewhere between 40% and 30%. Before that C++ had a similar position for a while. What we do see is a larger variety of programming languages, where the most popular have between 10% and 15% marketshare, with a whole slew of other languages having anywhere between 1% and 10%, and of course a huge list of very diverse languages having less than the magic 1%. This huge list of &lt;1% languages is nothing new, this has nearly always been the case. But there not being any language really dominant (&gt;25%) IS new. For the foreseeable future I don't see any new language getting really dominant like C++ or Java once were. The often mentioned Scala that according to some is the silver bullet of languages still struggles to get passed the 1% usage share in most popular language measurement tools (StackOverflow, Indeed.com, Tiobe, GitHub, etc etc) after 10 years. Its usage is increasing and TypeSafe has seen some huge success getting companies like Twitter to adopt it (that 14 million did help), but there doesn't seem to be a huge catalyst. Play, Akka, Lift etc all certainly help, but don't immediately drive millions of developers to Scala, like Applets once did for Java (shudder) and LAMP once did for PHP. A huge recent catalyst for a language has been iOS for Objective-C, which gave it a near instant boost from total obscurity to &gt;10%, surpassing its original rival C++ which has declined to something just below 10% (again, depending on the source you look at). Of /r/programming's favorite bunch: Ruby, Python &amp; Haskell, neither of them seems to be on a path to language domination. After the mid 00-ties catalyst RoR died out (not RoR itself, just its catalytic effect), Ruby keeps dwindling between the 1% and 2%. Python does a bit better, but keeps oscillating a bit between the 4% and 5%, which no clear trend line to domination. With very few trends currently going on and the historic evidence that a language can suddenly shoot upwards or downwards again, it'll be particularly hard to predict what the language landscape will look like 10 years from now. The one prediction I dare to make is that C will most likely not be below the 10% mark in 2023 ;)
What code have you got so far? People will give you pointers (and you may get more patient results by posting this to /r/javahelp), but you shouldn't expect anyone to just dish out this code for you. To be more blunt, the answer is 4877/6930; you didn't post your code, so I assume you only cared about the answer. What I would say is that from a mathematical point of view you've got two series here, one where every other number is equal to 0.5, the other where it's equal to n/(2n+1). The addition/negation of terms seems to follow a (-1)^n+1 pattern. Given that you've got a finite series though this may or may not be of any help (although if you're writing code in any sane way, it will be of use).
Have you run this through Caliper?
this looks interesting...
Let me break this down for you differently: There are some companies who write an iPhone app that acts like Apple expects to write an iPhone app. Then those companies port it to Android, not by adopting how Android says an app should look and feel, but by keeping the iPhone mode and stick an Android UI on. It might use Android controls and widgets, but it's still an iPhone app. This is how SWT is on most platforms and I cannot think of one SWT application which behaves like an application natively written for that OS.
I'd love to hear how it compares to the [trie implementation we use](https://code.google.com/p/patricia-trie/) for a dictionary at work.
Looking at the source code for Patricia Trie, I'm amazed at how similar the code is... pretty crazy!
True. As of Java 7, JDBC is a lot easier to work with. 
so tempted to upvote just based on name.
Fair enough. JDBC has its place...
Yes! That would be great for so many reasons, other than just using it for SQL... I wish Xtend's template expressions made it into Java: http://www.eclipse.org/xtend/documentation.html#templates
I'm using JDBI in a project right now. It's relatively easy to use and configure, and has a nice API.
I have several spatial trees done for another library... QuadTree, Grid, DualTree, and Sweep and Prune. I'll make sure to PM you when they are battle ready.
Work with C# for a while and you start to realize how much of a PITA they are. You need to continuously wrap every object in a Parameter object - wastes memory and you can't arbitrarily create these objects as they are tied to the connection. Though a simple Map to named params in Java would be OK.
In my recent side projects, I've started using [Ebean](http://www.avaje.org/)
That makes sense, it is implementing an incredibly similar if not necessarily the same data structure. I cowrote an implementation for stock quote lookups for a very large investment bank and it took like 30 mins to train the database each morning with the frequencies from the previous day's trading. I wish we could have optimized that further. :(
Well, if Java's PreparedStatement also accepted name-based parameters in addition to index-based ones, things could only get better...
So basically if you use the Unsafe class, or native I/O operations with ByteBuffer, you are exposed to the nature of the underlying platform. Which is kind of expected, at that point you want to familiarize yourself with those lower level abstractions you are accessing directly.
&gt; lambdas will make certain types of code a lot more readable Especially listeners and such associated with Java GUIs.
Eclipse isn't even written with JFC
&gt; Rule #1 of Swing: LEARN ABOUT THE EVENT DISPATCH THREAD!!!!!! Isn't this rule #1 of any GUI framework? Crappy, blocking UI design feels slow, period
Why would anyone use this over spring-jdbc? Looking at the examples, Spring's JdbcTemplate is vastly superior
Converse: very few RDBMS products support having separate SLA's for different datasets inside the same tables in the same databases, but developers don't adequately handle this in their application code.
Could you provide an example?
Yeah but it's easy to implement this yourself. 
Everything is easy to implement myself :-)
I'm a senior Java guy with lots of Swing experience. IMO, if you are building a Windows-specific desktop app, you'll get there a lot faster and be happier with C#/.NET. If you need a cross-platform desktop app (Windows/Mac/Linux) then use Java. Also, depending on what your app is doing, I would push as much as possible to a web service tier. Make your desktop UI as thin as possible and talk to services on the web server. Then you can add a web app or mobile apps later that also talk to the same services.
Blogspam.
There has been only 4 post from this blog in the past 12 months.
Am I the only one who's annoyed that when getting results from a database, ResultSet.get{Whatever}() returns null if it's null, but when binding values to a statement, PreparedStatement.set{Whatever}() throws an exception if you pass a null?
Having worked with both, I prefer DbUtils to JdbcTemplate. The documentation for DbUtils is terrible and the overview hardly does it justice. You really have to dig through the API to figure it out. The strength of DbUtils is in all the implementations of [ResultSetHandler](http://commons.apache.org/proper/commons-dbutils/apidocs/org/apache/commons/dbutils/ResultSetHandler.html) that let you do sophisticated mappings from resultsets to collections without requiring to implement it yourself. This is similar to the RowMapper interface of JdbcTemplate.
Is it not recommended to post links to blogs? I know this blog appeared here before. I found it on Reddit for the first time, actually. But I have checked the [Reddiquette](http://www.reddit.com/wiki/reddiquette) and it says "please don't..." - Complain about reposts. Just because you have seen it before doesn't mean everyone has. Votes indicate the popularity of a post, so just vote. Keep in mind that linking to previous posts is not automatically a complaint; it is information. - Complain about cross posts. Just because you saw it in one place, doesn't mean everyone has seen it. Just vote and move on.
I *think* he means that if you have two customers, one with a contract for a 1 hour turnaround, and one with a contract for a 24 hour turnaround, you want a way to process the 1 hour customer first. In reality the turnaround are probably more like milliseconds vs seconds for a database, but I think that's what he's talking about.
&gt; A lot of Java developers load SQL data into memory, transform the data into some appropriate collection type, execute nasty maths on that collection with verbose loop structures. I'm currently working on a medium size web application and I've seen such kind of practice in the source code many times, for example: List&lt;Bar&gt; bars = new ArrayList&lt;Bar&gt;(); for(Bar bar : new BarDAO().getAll()){ if(bar.getFoo() &gt; FOO_VAL){ bars.add(bar); } } Imagine if there are ten thousand of Bar records... If I could use SQL, I simply do: SELECT id, foo FROM Bars WHERE foo &gt; FOO_VAL; And map each row into a Bar object. The web application I mentioned above uses Hibernate, and I used to use DataNucleus (JDO RI). My opinion on those ORM is that, they can make simple query easier to implement, but at the same time they add burden on the programmers, that the programmers need to know how the ORM works (e.g. object life-cycle, class-table mapping, N:M relationship) besides understanding SQL. Right now in my own projects I write SQL statements and use Sql2o (something similar to Apache DbUtils) to convert the retrieved dataset into a list of objects. I find this much flexible and easier to debug: I can execute the SQL statement to check for syntax or logic errors, but if I use DataNucleus or Hibernate I need to enable a certain configuration properties to force them to dump the SQL statements generated and executed into log file (and usually those generated SQL statements are difficult to read).
&gt; ResultSet.get{Whatever}() returns null if it's null Except for boolean, byte, short, int, long, float, double, where the stupid method returns zero and you then have to check for ResultSet.wasNull() &gt; but when binding values to a statement, PreparedStatement.set{Whatever}() throws an exception if you pass a null? That depends on the JDBC driver. But often, you have to specify the type of NULL, as some databases (hello DB2!) know typed NULLs
&gt;&gt; A lot of Java developers load SQL data into memory, transform the data into some appropriate collection type, execute nasty maths on that collection with verbose loop structures. &gt; I'm currently working on a medium size web application and I've seen such kind of practice in the source code many times, for example: [...] Jeez. That isn't even nasty maths. That's just a simple predicate! :-)
ORMs are stupid. They are a stepping stone to some solution that I have not encountered yet. E: WTF, I am in agreement with the parent post. ORMs are deficient. Despite their popularity they are not a one size fits all solution to data access. At least justify these downvotes. There needs to be a better way to work with SQL. All I'm saying is that I've yet to see a solution that articulates this better than ORMs.
The reason why recursion can be just as fast as iteration in functional programming languages is tail call elimination. Java doesn't eliminate tail calls, and I've heard various reasons for this, from the security model preventing it impossible to tail call elimination would violate the semantics of the language (bye, bye stack traces). Java collections (before JDK8) are fully realized, so of course trying to do lazy computations with them would be disastrous. However, Java can do infinite and lazy streams. Before Java 8, it is ugly as hell: public static Iterable&lt;Integer&gt; integers() { return new Iterable&lt;Integer&gt;() { @Override public Iterator&lt;Integer&gt; iterator() { return new Iterator&lt;Integer&gt;() { int i = 0; @Override public boolean hasNext() { return true; } @Override public Integer next() { return i++; } @Override public void remove() { } }; }; }; } public static Iterable&lt;Integer&gt; squaresOf(final Iterable&lt;Integer&gt; list) { return new Iterable&lt;Integer&gt;() { @Override public Iterator&lt;Integer&gt; iterator() { return new Iterator&lt;Integer&gt;() { Iterator&lt;Integer&gt; i = list.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public Integer next() { int n = i.next(); return n * n; } @Override public void remove() { } }; } }; } public static &lt;E&gt; List&lt;E&gt; take(int n, Iterable&lt;E&gt; list) { List&lt;E&gt; sublist = new ArrayList&lt;E&gt;(); int i = 0; for(E item : list) { if(i++ == n) break; sublist.add(item); } return sublist; } public static void main(String[] args) { System.out.println(take(5, squaresOf(integers()))); } The above code will run just as fast as the functional PL counterpart, because the computation is delayed until the call to `next` on the nested iterators. With Java 8, things are a lot less horrifying: public static Stream&lt;Integer&gt; integers() { return Stream.iterate(0, i -&gt; i + 1); } public static Stream&lt;Integer&gt; squaresOf(Stream&lt;Integer&gt; s) { return s.map(i -&gt; i * i); } public &lt;E&gt; List&lt;E&gt; take(int n, Stream&lt;E&gt; s) { return s.limit(n).toList(); } public static void main(String[] args) { System.out.println(take(5, squaresOf(integers()))); } "Functional" programming isn't really dangerous in Java, just incredibly painful and inconvenient. Java 8 should lessen the pain. Bonus feature: int[] first5Squares = IntStream.iterate(0, i -&gt; i + 1) .map(i -&gt; i * i) .limit(5).toArray(); Primitives!
Yeah, I know you have to specify the type when you call .setNull() But when you're calling .setInt(null), I would expect it to know the type...
You cannot call .setInt(index, null), as this method expects a primitive type int... Passing null won't compile
Oh, huh, that's why. But I still wonder why it doesn't accept a boxed version and thus would be able to DoTheRightThing with nulls
oh, i see... you have an example of that?
&gt; But I still wonder why it doesn't accept a boxed version [...] At the time JDBC was first specified, using primitives rather than wrapper types was really a big performance advantage. Adding support for wrapper types later on apparently never seemed to pull its own weight in terms of breaking backwards-compatibility. We're now living with this heritage. Conversely, JDBC 4.2 (in Java 8) will add new methods, such as [Statement.executeLargeUpdate()](http://download.java.net/jdk8/docs/api/java/sql/Statement.html#executeLargeUpdate%28java.lang.String%29) only to allow for result values bigger than 2G (returning long rather than int). Go figure... :-)
Then you take advantage of the situation by using criteria queries, HQL, etc. and fall back on native SQL (which is simple enough to do) when required?
Well not if if you use getObject - that would return null if it was null in the DB. 
Yes, but if it doesn't return null, will it return an Integer? Long? BigInteger? BigDecimal? Or even a String? On which databases? With which JDBC drivers? Huh :-)
Try [The New Boston](http://thenewboston.org/list.php?cat=31).
literally this
See [method references](http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html). It's not exactly returning a method reference. Rather, what the compiler is doing is wrapping the method call which matches the signature of the target SAM type, creating a delegate which calls the method you specify.
Other then pointing you at the Javadoc, where you can follow the links to the implementations of the ResultSetHandler interface, I got nothing. Did I tell you how bad the DbUtils documentation sucks?
Head First: Java is a good book. I started on that. Or, you could look at mybringback.com, which I've done a little bit and I rather enjoy it.
Most JDBC drivers I've tried do the right thing. Oracle can be greify with dates and SQLite is a bit of a crap shoot. 
Way too many questions for one post but here goes some help with a few. A library is a collection of methods or classes for a particular purpose. You can import these into your programs by calling them via imports. They can be anything from crypto to classes that are used for network functionality. The main class is the class that is called first by the program at runtime. Without a main class the program won't run. It doesn't have to be a menu for a game or anything if that sort. It's just the first bit of code that's run. It's where other methods from different classes are called from to be executed usually as well. Api stands for application programming interface. And is in essence a library that outlines the way programs should be designed set up and data structures should communicate. It's for a specific piece of software such as android, Dropbox, googleglass Api. These answers aren't great as I'm not an expert by any stretch but no1 else seems to be helping you. 
It goes WAY beyond blocking the UI from repainting. In fact, you can do all kinds of things off the EDT and it can mostly work, but you get the strangest errors and problems.
You aren't understanding so I'm going to stop trying to inform you of why SWT apps do not behave like platform native apps. Also, AWT was native controls. &gt; The AWT Way &gt; The big difference is how the two toolkits use the native components. In AWT, native "peer" code, written in a language like C or C++, is used to control the real widgets on the system. If you're running on Windows, this peer code uses MFC or Win32 calls to display widgets. On other platforms, the native GUI calls for their operating system/window manager are used. http://www.jguru.com/faq/view.jsp?EID=507891
For sure, but my original point was that I've yet to see a SWT app behave like it is a platform native app. So the promise of write once and use SWT to make native versions is just broken. Mac OS-X Apps do not behave like Windows Apps, even if they use native controls an SWT based application still has to somehow account for platform quirks and intrinsic UI differences. It's like GTK apps, they may use native controls but they're all written like they run on Linux. It's not bad, it's just not how Mac or Windows apps work.
Further to jimmysaville Java is an object oriented language, which means that everything must be a class. The result of this is that a lot of what is needed to get Java to run is simply creating the class structures that are needed, this is often called boilerplating. The class that starts the whole program must have the method public static void main (String [] args) The purpose of this method is to take arguments from the command line and put them in the program to start, since most programming today is not done from the command line, most of this code is obsolete. However it still must be there. I usually just use this class to create an instance of my main class and call a method on it to start the program. So my method often only contains two lines: MyClass class = new MyClass(); class.go(); Then everything is done from the MyClass class (or whatever I call it). If you are learning Java you need to spend some time understanding the concepts behind Object Oriented programming, otherwise much of the code that Java required looks to be a mess. If you want to develop a 2D game, you will probably want to learn the Swing API (which is the way most graphics in Java are done) or the new API that is taking over from it JavaFX. In either case you use the API to develop the windows, widgets, menus, etc. Packages are simply Java's term for folders, its a way or organising your classes so you can find them easier. Good luck and welcome to the Java community
I haven't actually developed using it, but from the surface the SWT API is not so elegant. I can't imagine the runtime is any more impressive. There is a much better platform agnostic framework that is write-once-run-anywhere and backed by native peers.... it's called AWT. If someone wants to write a "native feeling" windows app... it seems .NET would be a better choice
&gt; If someone wants to write a "native feeling" windows app... it seems .NET would be a better choice Yes, that's my point. If you really want to target a platform you should probably use the tools which are for that platform, instead of half-assing a port. iPhone, Android and Windows Phone users would be quiet upset (and have been vocal about it in the past) if it were just a really crappy port from one of the other mobile OSes.
Eh. Goes against the clean code principle of no cute names. If I were hacking at home, that would be tempting :) (I mean, I've named my local utility library the Wheel, so as to keep from reinventing it)
[Anticorruption Layer](http://www.markhneedham.com/blog/2009/07/07/domain-driven-design-anti-corruption-layer/) may fit. This pattern is supposed to be about creating an interface consistent with the design of your application around an alien third party interface, but creating a wrapper which fits your design ideals hiding away a terrible bag of static methods seems to follow the spirit of the idea.
Hm. Facade actually seems pretty fitting. It's an unconventional use, but it definitely fits the spirit of the pattern. Danke!
Um. Idiot question, but what's the difference between Anticorruption Layer and either a Facade or Adapter? Is it the intent to try and confine all such intermediates to a single distinct layer?
The Adapter pattern is about converting one interface to another, kind of like those international power adapters that let you plug in your American device into a British power outlet. The Anti-corruption Layer could be seen as a specific implementation of the Facade pattern. Although, I see the Facade pattern as more of a way to reduce the complexity of a system by hiding implementation details or for covenience, while the Anti-corruption pattern is more about protecting one design from another design.
My only other thought is that it could purely be a XxxxService. If you wanted to wrap the static method of something like [RandomStringUtils](http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/RandomStringUtils.html), then it makes perfect sense to call it RandomStringService (or RandomStringUtilService)
Yeah everyone recommends TNB but after studying Java for the last 6 months I'd say that's a terrible idea. Hardly any theory behind what he is doing, better of watching the video's once you have some practical knowledge.
I guess, before the edit, it sounded a bit like the usual blunt rant against ORMs. That tends to pull the trigger on downvotes around here... &gt; There needs to be a better way to work with SQL What would be better according to you? - Embedded SQL along the lines of [jOOQ](http://www.jooq.org)? - Externalised SQL along the lines of [MyBatis](http://www.mybatis.org)? I guess there's no magic bullet...
I recommend you pick up a copy of [Head First Java](http://www.headfirstlabs.com/books/hfjava/) 
I think you can use [CardLayout](http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html)
It's a Facade, although facades are understood to be wrapping methods in another class, not static methods. Now what should be a pattern is doing the opposite - refactor that horrible static mess into instance methods, and leave the static methods as facades to an internal instance for backwards compatibility.
I found a decent implementation: http://www.javaworld.com/javaworld/jw-04-2007/jw-04-jdbc.html
True, I had seen that one before, I think. It misses a couple of edge-cases when parsing, such as: - T-SQL quoting style: `[Table:Name].[Column:Name]` - MySQL quoting style: ``` `Table:Name`.`Column:Name` ``` - Comments: `/* Some :comment */ -- and another :comment` Also, the Postgres vendor-specific casting style `::varchar` is not supported as mentioned by one of the commenters. But otherwise, a nice implementation.
I was referring more to the language as a whole. There's nothing inherent that makes it unable to do desktop applications. Eclipse is slow as hell despite it using SWT, which as far as I know is less abstracted away from the underlying system than swing. IntelliJ has no such problems.
&gt; What exactly is a Library? A library is some code which is useful for some specific purpose. For example (in relation to games) the purpose of a library could be to simulate physics (I'm programming a game at the moment and the library I use is called [dyn4j](http://www.dyn4j.org)). In Java a library is a collection of classes. Most likely you can download a library as a jar file and use it in your project. Unlike a program, a library is not a finished piece of software, ready for end-users, but it has to be used by another program, i. e. you as the programmer have to program your game so that it uses the classes of the physics library appropriately. But the good thing is, you don't have to program the physics simulation yourself, which can be quite a big deal. The library thus functions as a building block of your project/program. &gt; What is and API and how do you use it? API means Application Programming Interface. Basically all classes and methods with public visibility form the API (in Java). The API of your program specifies how other programs can interact with your program, but I think the other way round is more important: The API of e. g. a library specifies how you can interact with that library. &gt; OpenGL... is this an API? What is it's purpose? OpenGL means Open Graphics Library. The OpenGL specification specifies an API for rendering 2D/3D graphics. This API is special because it is abstract. It only specifies functions in a language-independent way. If you want to access them in Java you may want to have a look at the Lightweight Java Game Library ([LWJGL](http://www.lwjgl.org)). This is a library which functions as a Wrapper around OpenGL, i. e. it's API consist of one Java functions corresponding to each function specified by OpenGL. &gt; What is a package? Packages are Java's way of organizing things. In your file system things are organized as folders and files. In Java things are organized in packages and classes. [Google](http://lmgtfy.com/?q=Java+package) for 'Java package' and you'll find more information (maybe add 'eclipse' for IDE specific stuff). &gt; With a program, do you use your main class as like a Menu, and then as you select New Game and such, it takes you to a whole new class? This totally depends upon you! What you describe sounds a lot like game states. You normally want to do different things depending on whether you are in a menu or playing the game etc... Instead of building large switch statements or if/else chains or whatever you create a class for each case/state. Then you need a controller/manager which decides which state is currently active and lets the state handle everything else. &gt; And each level has it's own class or something? This also depends upon the game developer. But since you want many levels you probably want to have only one level class, which loads the level from a file. I hope this made things a little bit clearer. If you have any questions about what I just explained (those were very very short explanations), just ask me :) Just another thing: For java questions like this check out /r/learnjava
This is not particularly good software design, but if your app is otherwise lightweight, you can modify the *visible* property of the "tabs" (I'm assuming JPanels), and use, if you're transitioning from the login "tab" to the chat "tab", for example: loginPanel.setVisible(false); chatPanel.setVisible(true); Again, this is not a super elegant way of doing it, but if I understand your concern correctly, it has the correct effect.
Oh god... my last job was similar to that, except it was all abstracted to TSQL procedures and the db admins would keep track of that code separate from the application... application goes down "OMG WTF DEVS!?!?" Devs go "OMG WTF DB GUYS" DB Guys say "Fuck off, we're contractors and get paid twice as much as you." hence, my previous job...
Criteria queries just scrapes the surface of what SQL can do. If you read the article, it more or less (and probably correctly asserts) that dev's do "basic" stuff like joins and maybe a more complicated statements now and again, but rarely go past the surface. Hibernate, due to DB agnosticism for one reason, forces you to keep things relatively simple from a query perspective. HQL and critera queries only get you so far. Try doing an upsert in Hibernate, for example.
If you're going to do that, the author should have used a split screen, and created two text areas. One for standard out, and one for error output. 
Did you read my post or just see "TNB" and comment? &gt;.&gt; agreed though, but he gives +5 to motivation. that counts for something
Right, it's a strict subset (in terms of expressiveness) compared to SQL. That's why I pointed out you can fall back on SQL when needed (which isn't always super often, in my experience, though of course it depends on the data model and application). As for upsert, that's exactly what session.merge() does.
At that point, the coder should use JTextPane instead.
Is your previous programming experience in an object oriented language?
What we do in my "house" is that we define an interface as it is then create a default implementation of that interface and have a testing implementation as well. * FooModel * DefaultFooModel * TestFooModel **Edit -** Ideally though we would put the TestFooModel under the JUnit Tests for the feature. 
session.merge() does not do an upsert, but rather a select then insert or update. At least not in any Hibernate version that I've used. (I actually tested this about a year ago when I was making an argument for Spring JDBC &gt; Hibernate with a coworker) And, by upsert, I mean using the SQL 'MERGE' command. to note: when hibernate caching is used, it can sometimes smartly determine the insert/update based on the status of the in-memory cache, but I'm not entirely knowledgeable in that realm of hibernate so I'd hate to say too much for fear of saying the wrong thing.
[Java Tutorial](http://docs.oracle.com/javase/tutorial/) is always a good place to start.
I've used: ****Wrapper for classes that just wrap the static calls, but I've also just used mirror methods that wrap the static calls inside the class I'm working with. In that case: SessionServlet.getHibernateSession(); becomes: protected Session getHibernateSession() { return SessionServlet.getHibernateSession(); } It's annoying to put this same method around in multiple classes, but it's no more additional lines of code than creating a separate class that I inject. In this case, for testing, I just use @Spy and Mockito to mock my return value. If I had to actually use real DI for this and just not workaround static crap for testing, I'd use a full Wrapper class.
He he, that was 100% deliberate, I think I've seen it as a job interview question. 
You should ask your course instructors - they are experts at explaining their own problems (and also: they are the authoritative source about them). Why should reddit interpret the problem descriptions better than you? At least ask specific questions, don't just dump the problem description in here.
big data baby, big data.... At my last gig we ended up saving a ton of time by switching all of our DB insert/update to MERGE statements. Granted, we were inputting millions of rows per day (with some cases of the key being duplicated). The SQL guys had come up with a neat way with TSQL to do an insert and then update if there was a key dupe failure, but it wasn't as good as a MERGE (and had some strange side effects that would happen very, very rarely)
Yes, that really is the horrible truth 
Yeah, for that kind of scenario there isn't much benefit of Hibernate, since you'll have to tweak it to hell to get the performance that's needed. But for most simple CRUD apps it saves an absurd amount of development time.
A significant part of being a _good_ developer is being able to research problems you run into. In this case, you should have googled for resources on UML. I did it for you, and found these links: http://edn.embarcadero.com/article/31863 http://www.ibm.com/developerworks/rational/library/769.html Read and digest them. Next time remember - google is your friend.
Welcome to PrintStream! Does it want bytes? Does it want characters? It's provocative. (Ok, it uses the platform default encoding)
This guy has a really great series on Java. https://www.udemy.com/java-tutorial/
For a good book try head first Java. Then download Netbeans with an application server and do some of the tutorials at Netbeans.org. 
I wonder if the heading was originally "Bullet points to remember".
does that imply an error on the production crew, or is there some deeper context to them already being there? i hope it's the latter, because if so, you're blowing my mind right now!
Wish I had known that earlier. It would've made Java development a whole lot easier.
Well if they sold drugs out of that apartment, its easy to imagine that bullets have been fired there before.
I am assuming this is for a class. Post what work you have already, and we can go from there.
actually, I just finished it. Thank you for the help, though! I will definitely ask again if I need it!
Duke 25:17 The classpath of the righteous coder is beset on all sides by the incompetence of management and the envy of lesser coders. Blessed is he, who in the name of optimization and unit testsing, shepherds the weak through the compiler of darkness, for he is truly his user's keeper and the finder of lost memory. And I will strike down upon thee with great performance and furious algorithms those who would attempt to slow down and crash my software. And you will know my name is the Lord when I lay my benchmarks upon thee.
QT is brilliant, but he seems to kinda like leaving mistakes in his movies (eg, Uma saying "willing my limbs out of entropy" instead of atrophy). That kind of thing would drive a Stanley Kubrick nuts :)
IMDB not exactly peer reviewed, but http://www.imdb.com/title/tt0266697/faq#.2.1.23
That was glorious! Any chance for a wallpaper? :p
Totally just my theory, but: the gun was shooting blanks. They kept it in the apartment purely for show (clearly they weren't gangsters), but the guy didn't know (or forgot) that. This makes Jules's "miracle" even more hilarious from that point forward, especially when he talks about basing his future life on a movie character.
[Here](http://i.imgur.com/U139UzF.jpg) is what I got by superimposing the text on a wallpaper I found in [deviantART](http://javierocasio.deviantart.com/art/Ripple-387659302). The quote is little wordy but let me know if you have a better way to lay it out. P.S. Sorry not trying to steal anybody's work. Edit: Corrected typo, testing should best testing as pointed by /u/Phenax 
Great quote, but a spelling error seems to exist: *unit testsing* =&gt; **unit testing**
The white on light pink hurts my eyes....
Sweet, thanks!
Sorry if this does seems too simple of a solution (that you've already thought of). By simply using jframes - one for login panel and another for the chat panel. You could move from one panel to another by setting one visible and the other not visible (ie. False) or even removing the jframe from memory. I'm not absolutely sure but it could be a more secure solution to use two jframes (each of which has private class members) and keep one in memory while the other is not 
What's the name of the book?
I know there are layouts and panes meant for something like this, but I have never implemented them or taken a closer look at them, so I can't help you with them. The *setVisible()* trick will do just fine and is orders of magnitude faster to implement.
My only problem with Netbeans is that sometimes its background processing consumes so much that it slows down everything on netbeans. Other than that I like it but I might switch to IntelliJ which is awesome.
You don't sing while you're unit tests run?
White or black text with an outline of the other will make it readable on every possible background.
I'd like to chime in with [mine](http://imgur.com/SvjvpPJ) ;D
Java 2 Game Programming by Thomas Petchel. page #35.
Wow, thank you so much!
No problem. Good luck!
Actors are more human than writers?
How about DeSuckifiyingStaticWrappingFacade? Only half joking, StaticWrappingFacade?
The line about casting being good is indeed hilarious.
Borland's Delphi reference manual had an entry in the index for "dead parrot"
"Solid Number"? You mean an integer?
What I meant was that a poorly educated character would easily say entropy instead of atrophy. It makes your characters more real if they talk like someone in their situation would.
Not a wallpaper, but [check this out](http://instacod.es/file/78767)
And one for you as well: http://instacod.es/file/78768
YouTube = caveofprogramming and thenewboston Books = headsfirst and java for dummies Enjoy! 
You can add a cast to your print statement. When you print, put (int) next to the thing you're printing.
Really you should use a `for`-each loop to semi-automate the process.
All Eclipse plug-ins are actually OSGI bundles, and the Eclipse Plugin Development Environment (PDE) is great for working with them (even if you're not targeting Eclipse). If you have the PDE plugin for Eclipse installed, one of the options you'll see under the New Project wizard is Plug-in Development-&gt;Plug-in Project. That will allow you to create a new OSGI bundle (AKA Eclipse plugin) project. Once you have an OSGI bundle project, you can go to Run-&gt;Run As-&gt;OSGi Framework to configure your launch environment.
I just tried this in my Eclipse workspace. If it's a regular Java project, try right-clicking on it and selecting Configure-&gt;Convert to Plug-in Project. If you don't have it in Eclipse yet, you should be able to import it using Eclipse's import menu.
Platform native controls does not make a platform native app. AWT had this problem (among others). You cannot get this through your brain, so I am done talking to you, however, just because you use native controls does not mean your app behaves like a native app. &gt; So in closing.. SWT &gt; Swing. You're tilting at windmills.
&gt; I'm confident that most folks have run into the situation where they've wanted to wrap a class that was implemented with only static methods into an instance object, so as to take advantage of DI and improve testability. &gt; &gt; If you haven't, I envy you. I suppose you envy me then. Excuse my ignorance, but how does wrapping a static method with an object take advantage of DI and improve testability? I've never heard of this.
Basically, it comes down to an encapsulation violation; the behavior of the client becomes dependent on the behavior of the static, and can't be described or tested independently. When a method makes a direct call to a static method, it's become dependent on the particulars of that static's implementation; your unit test can break unexpectedly because the static's code changes. Furthermore, you lose the flexibility to easily change implementations out; you have to make a code change, as opposed to injecting a service that can answer your need, in which case changing the implementation may be a configuration change. So, take an example. Let there be a business requirement that user input password must meet certain standards of strength to be valid. Let there be an existing class, PasswordValidator, with a single static method (.validatePassword(String) returning boolean). Let PasswordValidator.validatePassword already be widely used in the codebase, but each client of it is either untested, minimally tested, or duplicating the original tests of PasswordValidator. Now, I am introducing a new REST API which allows users to submit new passwords; obviously, those new passwords need to conform to the same strength requirements as passwords elsewhere. My options thus are: * Use PasswordValidator directly, which will result in either minimal testing that password strength requirements are met for the API, or a large duplication of effort between the testing of the API and PasswordValidator. * Introduce a new, non-static class, which I can inject into my API's controller. Doing so allows me to use a mock replacement of the new class, allowing me to demonstrate that passwords meet our business requirements by showing that we're using the given NonStaticPasswordValidator, without concern for the specific implementation of that validator. However, re-implementing PasswordValidator is still a hassle and a waste of time- plus, it could lead to the password requirements getting out of sync. Ideally, your implementation of NonStaticPasswordValidator will just delegate to the static call- however, *clients* of NonStaticPasswordValidator are kept ignorant of that. Does that make sense?
Your lack of formatting gave me cancer
&gt; ...it comes down to an encapsulation violation; the behavior of the client becomes dependent on the behavior of the static, and can't be described or tested independently. I'm not sure you can say across the board that this situation is always an encapsulation violation. If that's true, then it's always a bad idea to have a static class. (Protip: when writing a static utility class, make the constructor private and mark the class final.) The `PasswordValidator` example you gave is a good one, this is exactly the sort of functionality that I had in mind for a static utility class. Something with no configurable state, and doesn't have dependencies on other code, or if so, very limited like other general utility classes. The methods are *pure functions*, no side effects or anything like that. &gt; When a method makes a direct call to a static method, it's become dependent on the particulars of that static's implementation; your unit test can break unexpectedly because the static's code changes. Ok, so how to test a client? It depends on what kind of test you're talking about. If you're talking about any kind of integration test, there is obviously no problem here...even if you had the capability to mock, you shouldn't. It's an integration test. So I assume you're talking about unit tests. In this example, I think mocking is not the right solution. This is a static utility class that is comprised of pure functions. It also has a unit test verifying all the different kinds of passwords and the expected results. That unit test should rely on a constants class somewhere in your testing code that defines an example of a valid password and an example of an invalid one, and the `PasswordValidatorTest` should verify those specific passwords are valid and invalid respectively. Using this approach, all of the other unit tests in the entire system simply don't need to think about mocking your `PasswordValidator`, they can just grab the valid or invalid passwords from the testing constants class and use them as needed. Most static utility classes should fit the same bill as this `PasswordValidator` and can be treated the same way. I've seen a lot of places that use mocks without thinking too much about them, but they're often overused. There are several problems that are introduced by mocks that you are often better off avoiding. Mocks make tests harder to understand because they have to have code telling the mock how to behave, which detracts from the actual intent of the test. Mocks make tests harder to maintain because when you tell it how to behave, you're leaking implementation details into the test. Ideally, you want to test the specification provided by the interface and not tie tests to the current implementation at all. This often isn't possible which is why mocking frameworks are useful, but they're not a silver bullet either. Mocks also give less assurance your code is working properly. When you tell a mock how to behave, the assumption is that your mock behaves exactly as the real class being mocked. Hopefully that's true, but when it's not... On the other hand, let's say that you have an example where it definitely makes sense to inject a mock in a test. Say that instead of a password validator, the static utility class here is some kind of license heartbeat client that has to check over the network with a license server that everything is good. Ok, you can't have a unit test talking over the network. In that case, though, then this should *not* be a static utility method. If you have control over this class, refactor it and update all the clients! If you don't and it's third party code, then you're stuck inserting an adapter...but this should be rare. Couple of more notes from your reply... &gt; Let PasswordValidator.validatePassword already be widely used in the codebase, but each client of it is either untested, minimally tested, or duplicating the original tests of PasswordValidator. I don't get this. Why are we assuming that clients are untested or minimally tested? Either of these cases implies a problem in the code base that has nothing specifically to do with `PasswordValidator`being static...even if it weren't, not having unit tests is bad practice and should be fixed. The last case, I don't see why any client would ever have to duplicate the original tests of the `PasswordValidator` using my approach above. All the unit tests of clients care about is having a valid and an invalid password, whatever that happens to mean to the current implementation of `PasswordValidator`, and they can delegate the verification of the exemplary passwords to ``PasswordValidatorTest` and not implement any logic at all around that. &gt; I am introducing a new REST API which allows users to submit new passwords... In this case, the class that sits on the server side of your REST API has a job to do, which is take the user input, make sure it's valid, and then pass it on to whatever actually sets it (or maybe it sets it directly). The actual validation of the password is the responsibility of the `PasswordValidator` and should not be tested in any client, the client's unit test should only test the functionality directly in the client. In this case, that means testing that it submits the user's password if it's a valid one, or kicks it back if it's an invalid one. The details of how that is determined is immaterial.
One thing to keep in mind is OSGi does not necessarily mean eclipse. You can have osgi projects and run them outside eclipse (whether using equinox (eclipse's OSGi implementation) or Felix (Netbeans' OSGi impelementation)). The question is, what do you want to do with this OSGi project? Is it an application? Is it a library?
:D cool 3d projection of it...
Try http://mooc.cs.helsinki.fi/programming-part1 It's a free online course, now also in English.
Blogspamspam.
In the year 2013, i recommend using following technologies/framework in your web application. The reasons for choosing these will be shared in Part II.
Or java 8's .forEach() to make it even more automated!
It is an application. I have the source code for it and I need to build it to be sure that the source code has not been corrupted since it was last build. Once I can be sure that it works, I am going to modify a few files to add additional functionality to the application. It was originally built in Eclipse by whoever wrote it before me, but since they are no longer here, the task of upkeep and modification will fall to me.
Wait, what's not formatted? It looks fine [to me](http://imgur.com/dN1Tm0D).
Since tess4j is a wrapper of tesseract I would try this: http://stackoverflow.com/questions/15199187/how-to-extract-multiple-lines-from-an-image-using-tesseract-ocr
I looked at that and am already using that.
http://mooc.cs.helsinki.fi/programming-part1 It is a free online course. They have a system that automatically checks all the exercices that you make.
It's been awhile since I did java UI code, but in a browser we do it by adding css classes to the the fields that are dependent. For example, for all fields that depend on the type of gender we would add the class gender. Then for any field that displays based on the value we also add that class to the field. Then whenever the field value of gender changes, we hide all the gender fields. After hiding all, we then make visible those fields that have both gender and the gender value matching
Thank you! Unfortunately, this is not what I'm looking for. In our ui everything is fine. To be more accurate, in fact I'm talking about a website build up with gwt. So far we gave every field a debug id according to the sample as described in the original post. To test the ui we want selenium to click through the site by using the stated debug ids, however the design of the tests lack because of lacking redundancies and the huge data throng. I'm looking for an approach to get clean, redundant code or at least I want to speed up the process on setting up new tests. The debug ids are set with gwts uibinder in xml files.
Most of my experience with Java is through Netbeans. It is the IDE I learned java with and have had most experience with, but I was given an Eclipse IDE to build this on, so it is what I will work with.
&gt; I need to build it Please tell me there's a README with instructions of some command-line way to build the application... &gt; to be sure that the source code has not been corrupted since it was last build Does that mean there's an old build around? Can you check how to start the application? Is it meant to be run from within eclipse? Lots of stand-alone OSGi applications will include an OSGi framework and start themselves in such a way that they load the framework and then install all the bundles into that framework.
No. I just have the source code and I have the older built app. It has been made into an executable, so you just double-click to run. I am certainly no expert at this. If these is anything else to clarify, I would be happy to. What I have here is a half-gig worth of source code spread across several dozen folders in a single directory. I added it to my project, but it is giving me errors. I think the reason for this is due to the fact that it must be built with OSGi, but when I add it to the project, Java gives me the "The wizard will automatically configure the JRE and the project layout based on the existing source." message and thus grays out my options for which JRE I want to build it with. 
What is the use-case?
This is pretty neat! 
Much of the advice in there is more or less sound, but not all of it is necessarily true... I'm not really convinced it's necessarily wrong to catch Throwable in all cases. Consider this example: public static void main(String[] args) { try { doStuff(); } catch (LinkageError e) { report("User xyz can't start their app because their environment could not find the appropriate classes"); } catch (OutOfMemoryError e) { report("User xyz can't start their app because the JVM could not allocate enough memory"); } catch (Throwable t) { sendEmailAboutFailure(t); } } EDIT: yes, this is a contrived example, in most cases (more than 99 times out of 100) catching OOME would be totally wrong. the issue i have is with the word 'never'. I'm stubborn like that. 
Not to comment on your system design at all, but it is a case of the ability to catch Errors and do something to gracefully recover, which proves that some of the advice in the article is not necessarily always valid.
I think no guide seems convincing because the exception model in Java itself is a bit of a mess. At least it seems so to me. A lot of things are bunched together: * Truly exceptional, unexpected behaviour, i.e. you try to write to a file and the disk controller fails. * Things that can go wrong but can be expected. i.e. you write to a file but at some point you run out of space. * Things that should have been checked by the developer/compiler. i.e. you try to access an array out of its bounds. I feel that these things should be handled differently.
My point exactly. Some of the advice is not necesarily valid in all cases, and yet guide fails to outline the cases it applies to. Not only that guide fails in that regard, pretty much every exception handling guide has the same problem.
Yeah, I re-read the article again a bit and it's flat wrong, saying you should "never" catch those things. I imagine Thinking In Java has a section on this expounding on what's already covered in the javadocs and Java Tutorial, if that's even necessary. 
That's still wrong. Let the unhandled exceptions fly and deal with them in an [UncaughtExceptionHandler](http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.UncaughtExceptionHandler.html)
How would one check an array bounds violation at compile time? If I have a method public int takeFirst(int[] arr) { return arr[0]; } and later call it with an array of length zero, how is the compiler going to check that? Or what if my method that takes an array argument is declared in an interface, whose implementation is totally unknown at compile time? 
I think the problem with exceptions is that either you shouldn't be catching them because the responsibility is further up the callstack, you shouldn't be catching them because instead you should program defensively (most `RuntimeException`s), or you shouldn't be catching them because you can't handle them properly (most `Error`s). If you are catching them and none of the above are true, then you're catching them as a form of flow control, which you shouldn't be doing. But any way you look at it, you shouldn't be catching them, which leaves not a whole lot to do with an exception system.
&gt;do not catch throwable This is bs imho. You can not catch everything in big systems with dozens of alien frameworks. It is always better to wrap a throwable/runtime exception in something known.
I quickly looked at it. Assuming that you get your error on line 31 of the menuClass, it is easy. When you create an array, it is empty. Just a long set of empty boxes, you can put something in. You tried to set the name of an empty box, and you probably got a null pointer exception. What you have to do is create an object first, and put it in your array. Like this: Champion myChamp = new Champion(); champ[0] = myChamp; champ[0].setName("Aatrox"); But to be honest, I think you are out of your League (of Legends). Programming is not hard, but if I look at your code, you are a absolute beginner (for the names anybody would take some kind of loop for example, instead of 100 lines of code). Start with something easier, using one of the millions of java tutorials on the web. Buy or lent a book, etc. Even if you are able to get your program working, you will not understand why.
As an "intermediate" java student, I thought about how would I do it other way for a sec, and the first thing that came in my mind was just copying the names from the website to a txt file and then looping though that.. Anyways, an interactive graphical application like this, I'm not sure what you want to do with it, but judging from the champ class, you would choose the team from the dropdown and then it would print how many ccs/aoes/whatever does it have? Because if that is the case, working with either datase, or a text file (honestly you can fit that on a txt line..) wouldn't be that complicated.
What are you giving up that's fine-grained? You're swapping the catch (Throwable) for a handler. They operate at the same level (handles an unknown Throwable) but without the nagging of static analysis tools. I would probably even get rid of the LinkageError and OOM blocks for two judicious instanceofs in the handler. 
Yeah, that's exactly what I was planning to do, it's mostly just theorycrafting for in-game compositions. I'll look into the text file. Thanks!
You're correct. Bacon reader doesn't format your code so it just shows as a one liner on my phone. My apologies. 
Clearly there are people still doing this, people who just don't think at the same level as more advanced programmers, or maybe just people who do not think at all ;)
&gt; Packing the literals in variables that have the same name seems wrong to me. No, this is the usual way to go if you need to do string oriented programming like this.You stuff all your string literals somewhere as public static final String CAKE_WITH_ICE = "CAKE_WITH_ICE"; public static final String CAKE_WITH_CREAM = "CAKE_WITH_CREAM"; and then you use CAKE_WITH_ICE in your code instead of the string literal. Name them hierarcically, so your related stuff pops up when you auto-complete names (usually ctrl+space in most IDEs). This also prevent anyone from misspelling the names. Or if feasible, create an obejct hierarcy of all your suff, so you can write e.g. theForm.address.firstName , instead of finding stuff with strings.
Perhaps one is not giving up anything. I'm more interested in knowing why it's "wrong"... What nagging are you referring to?
You're giving up "choosing what exceptions send e-mails" for "not having hundreds of exception blocks across every class ever to manage". Though, I'm sure you could work out a way to choose in the uncaught exception handler based on stack trace analysis. I think the sooner is generally superior, but maybe for some reason you have a program that has a bunch of unhandled exceptions that you don't want to hear about.
throw new LoginLibraryThrewUndocumentedBullshitException(ex); 
I just made some substantial modifications to TrieHard, they ended up improving performance quite a bit. It also implements Map like PatriciaTrie. COMPARE GET Mine: Avg: 0.000004303 s Min: 0.000003282 s Max: 0.000047352 s Patricia: Avg: 0.000004989 s Min: 0.000003980 s Max: 0.000056153 s COMPARE PUT Mine: Avg: 0.000005322 s Min: 0.000004121 s Max: 0.000143314 s Patricia: Avg: 0.000008002 s Min: 0.000005168 s Max: 0.008612055 s 
In the given example, there was no "choosing" -- anything unhandled that escaped main() got emailed. Which I think is a fine strategy, but more simply encoded with the handler. Unless I'm misunderstanding your point.
*Anything in that try block*, there's a whole rest of a program...possibly some with try blocks and some without.
Anybody who's using lazy evaluation. You don't calculate the first thousand digits of pi^(e + currentTime) until somebody asks for it. It's not common in this particular context... but if 99% of page requests don't actually need those digits calculated, fergawdsakes don't go calculating them all the time.
&gt; I am struggling finding anything lambdas can do what could not be done previously using interfaces. I've found that it's much less about what *can* be done, and more about what's *worth doing*. With lambdas in my toolkit, the code is not just shorter - it's often completely different. Let's say you have this interface: interface Function&lt;T, R&gt; { R apply(T input); } And you have a class with this method: void printWidgets(Function&lt;Widget, String&gt; mapper); (That method's signature is wrong, but I'll get to that.) In Java 7 you might use it like this: printWidgets(new Function&lt;Widget, String&gt;() { @Override public String apply(Widget widget) { return widget.toString(); } }); But you realize that will create a new Function object every time the code runs. You optimize it: static final Function&lt;Widget, String&gt; WIDGET_TO_STRING = new Function&lt;Widget, String&gt;() { @Override public String apply(Widget widget) { return widget.toString(); } } ... printWidgets(WIDGET_TO_STRING); It turns out you use a Function like this elsewhere in your code, for turning other types of objects to string. You decide to generalize your Function: static final Function&lt;Object, String&gt; OBJECT_TO_STRING = new Function&lt;Object, String&gt;() { @Override public String apply(Object object) { return object.toString(); } } ... printWidgets(OBJECT_TO_STRING); Oops. That doesn't compile. The Function doesn't match the generic type for your printWidgets method, so you can't use it. It turns out a lot of your code has this problem. Rather than correct all of your method signatures, you decide to make a helper method: static final Function&lt;Object, String&gt; OBJECT_TO_STRING = new Function&lt;Object, String&gt;() { @Override public String apply(Object object) { return object.toString(); } } @SuppressWarnings("unchecked") static &lt;T&gt; Function&lt;T, String&gt; objectToString() { return (Function&lt;T, String&gt;) OBJECT_TO_STRING; } ... printWidgets(objectToString()); (Note that I have elided the javadoc comments and the inline comment explaining why that unchecked cast is safe.) ...what a mess. You begin to question whether there is something fundamentally wrong with your printWidgets method. Maybe there is a different way to solve this problem, and printWidgets should not exist at all. Here's what it looks like in Java 8: printWidgets(Widget::toString); Verbosity in code usually doesn't bother me much. I prefer explicit code. That said, lambdas and method references can make things *so much clearer* that it affects how I will write APIs. A lot of times that verbosity is so painful in Java 7 that the solution is to just not do whatever I was trying to do. Related, see the caution the Guava authors give about functional programming in Java: https://code.google.com/p/guava-libraries/wiki/FunctionalExplained Also, while this isn't going to happen in Java 8, lambdas and method references (such as "Widget::toString") are not bound by the language specification to create object instances at all. In the future, they may be optimized into lighter-weight constructs. The Java 7 anonymous class version cannot be optimized in that way; the "new Function&lt;Widget, String&gt;() { ... }" must be an object.
Is this a homework assignment?
Insight not in-site. Have you looked at http://docs.oracle.com/javase/tutorial/
This is good in theory..
Alrite! Thank you for your answer. :)
Well, I'm not completely happy with this solution however, I will feel better implementing this approach. Thank you :)
PowerMock can mock static classes for testing.
subless it would better if you sub less.
Make it easy for us to solve your problem, it is unlikely people would take the time to download and extract a zip file, post the code directly on pastebin or similar instead.
My team also uses swagger-ui with json files generated at build-time; though ours is a php application. I think that, no matter the implementation, swagger-ui or something similar should be a goal to be achieved by any means possible. For us, that meant wandering into java-land, but the payoff was immediate. swagger-ui kicks ass. 
I've actually just now learned that the ORM vs. SQL debate may go on to an entirely new level, when JPA implementations start adding "NoSQL" data store support to their APIs: http://wiki.eclipse.org/EclipseLink/Examples/JPA/NoSQL Who else fears that this will lead to another very big [impedance mismatch](http://de.wikipedia.org/wiki/Object-relational_impedance_mismatch)? Can a single API be used to "persist" data in whatever store? Won't we be endlessly tweaking all sorts of configurations, annotations, "higher-level" queries and the likes again, just to get our data efficiently in and out of those stores?
&gt; catching them as a form of flow control, which you shouldn't be doing. That reasoning is bullshit, exceptions are a form of flow control specifically meant to cleanly separate error handling from the normal code path. &gt; But any way you look at it, you shouldn't be catching them, which leaves not a whole lot to do with an exception system. You listed 3 rules where they should not be caught, every one with a reason when it applies (some more or less questionable). * Handle them higher up: That is what exceptions are for and they are less verbose than throwing around c style error codes and if(res != RETCODE_SUCCESS)goto errorHandler; or return RETCODE_UNKNOWN_ERROR; * never heard reasoning involving defensive programming and I have no idea what it is nor why it would forbid catching exceptions at all. * For Errors you can catch them and try to do limited error handling^(1), just make sure that you re-throw the error at the end of it since the jvm is in a questionable state. ^(1) A server could send a termination message to connected clients before dying, note that there is no guarantee that this will succeed. 
JPA for NoSQL? You have got to be kidding me. I can see transaction handling to be a big problem - we've always kind of expected transations with SQL, but those won't be relevant for NoSQL databases like [Cassandra](https://cassandra.apache.org/) (which support only row-level atomicity). Personally, while I do like ORM solutions, I've always found JPA to be kind of gross. Inventing an SQL-like query language, really? I like the "fluent API" provided by [jOOQ](http://www.jooq.org/) better, but I don't think that they should start providing abstractions over NoSQL databases either, because many of the fundamental concepts of SQL vs NoSQL are completely different. Add to that, while SQL databases are pretty similar on the whole (SQL is a standard, after all), the Not-only-SQL landscape is much broader. It includes Column Family databases (HBase/Cassandra), Key/Value, Graph databases... Unless the common API is restricted to one of those design philosophies, I don't see how it could be workable, particularly while they're all in flux. There are some fundamental design differences as well: Cassandra is a peer-to-peer architecture without any designated masters, so distributed locking is difficult or practically impossible without changing the underlying implementation model.
Cheers good share OP
Isn't JPA originally targets on relational databases, while JDO targets other kinds of "data store"? From DataNucleus page, it supports graph database (e.g. Neo4j), XML, NoSQL (e.g. MongoDB), Excel, and even Amazon S3, besides RDBMS. If that's the case, wouldn't adding NoSQL support to JPA overlap with what is JDO doing?
From what I remember, the JPA and JDO specs teams had some political differences originating in early specs days, when JPA wasn't established as the clear leader yet. With that in mind, see this move as a competitor (JPA) trying to get some additional market share from their opponent (JDO)
Just within the Java run-time world, there are languages like Scala, Groovy, and Clojure. Outside the JVM world, there are languages like F#, Python, Ruby, Erlang, Go, D, Haskell, etc. Java has been slow to pick up the features programmers are starting to demand from their programming languages. Lambda functions will only be coming in Java 8! Compare the lines of code I have to write to create a POJO in Java versus Scala, Groovy, Kotlin, and Xtend. Absolute numbers of projects or programmers aren't the only things a programming language is judged by.
Well, there are some good points in there, especially around InterruptedException. However the general warning not to catch Exception is too broad IMHO and wrong in many cases. For example maybe you have a servlet that returns JSON to some script, if you don't handle Exception and report some meaningful error then you are just going to get an ugly HTTP 500 error from the web container. Also in some cases you don't want RuntimeException to propagate out of your control into the framework. 
We use WebCenter Content (previously known as UCM), Liferay, Alfresco and Magnolia. I am under the impression that people prone to develop on top of an ECM platform are the same people willing to pay for support services, so I am not sure Apache Jackrabbit is very popular
&gt; I like the "fluent API" provided by [jOOQ](http://www.jooq.org) better, but I don't think that they should start providing abstractions over NoSQL databases either, because many of the fundamental concepts of SQL vs NoSQL are completely different. jOOQ will not go in such a direction. &gt; Unless the common API is restricted to one of those design philosophies, I don't see how it could be workable, Just like JPA, whose common API is restricted to common denominators of SQL. I guess adding support for the various examples you've listed will just further reduce the number of common denominators. &gt; particularly while they're all in flux. Maybe that's the idea behind abstracting this flux. If a library can abstract the moving targets, clients may be able to ignore that, and they'll be able to compatibly execute queries this one on any data store: SELECT 1 FROM DUAL
Thanks for the comments. In the coming days we'll update the guide with some of the feedback. In particular, note that this guide is not designed to be general-purpose, it's primarily oriented to library developers, not global applications. So in this context it doesn't make sense to talk about trying to recover from OutOfMemoryError, LinkageError, etc.
Interesting stuff. The impedance mismatch is caused by fundamental flaws in the design of most ORMs like Hibernate from the beginning. Let's take an example: Suppose we have a customers, invoices, line items, products relationship. Hibernate would describe a bunch of xml and annotations but the class would look something like this (simplified): class Customer { // other customer fields List&lt;Invoice&gt; invoices; } class Invoice { // other invoice fields List&lt;LineItem&gt; lineItems; } class LineItem { // other line item fields Product product; } Full ugly examples here: https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/example-mappings.html Now at this point we should already stop since we haven't actually solved any problem yet. In fact we've introduce a lot of problems with classes like this. * They are harder to persist to a db * They are harder to serialize to json or xml * They lock you into a model where you need multiple queries to get to the data * The objects are not usually in an initialized state since they need to use lazy loading If instead the developer stopped and asked the client what they actually wanted to do with Customer and Invoice data, they'd discover that probably they want some search and CRUD operations. Well now we can simplify all the classes to represent the data itself without any hard-wired relationships and then create feature specific classes to solve the client's needs. So maybe now I have to display a list of invoices, and maybe I'd like to display invoice number, customer name, invoice date, and invoice amount. So this is easy. class InvoiceWorkItem { int invoiceNumber; String customerName; Date invoiceDate; Decimal invoiceAmount; // BigDecimal } then query: SELECT i.InvoiceNumber, c.CustomerName, i.invoiceDate, i.invoiceAmount from invoices join ... where c.CustomerName like ? So we have a much simpler and more efficient way to approach ORMs without any impedance mismatch. So IMO most ORMs fail because they are more focused on the Models rather than being focused on the problem itself - which is to have a simple zero-friction way to get data in and out of a DB. That's were persism came in. Shameless plug: http://persism.sourceforge.net 
yup, this sounds exactly like how I design my APIs. I use checked exceptions only at API boundaries where I explicitly want the force the end user to handle certain failures, which is almost never. more often I have explicitly declared runtimeexceptions, letting the callee decide whether or not it wants to handle those failures.
As I said, if you only do it in one place to report the error, it's "ok". But there are better ways of handling error reporting and by contrast, catching the throwable becomes "bad". &gt; As said before there are reasons why one might want to take different actions based on different types of Errors[...] I spoke of \*Errors as in ClassNotFound*Error* and OutOfMemory*Error*. (Just so we're talking about the same thing.) If you can't do anything about them, you can only report them. Do you want to report an OOM to a separate mail account than the CNF? In that case, I could somewhat agree with you - there are no hard rules that must never be broken. In the general case, don't catch Throwables or \*Errors. It's a good rule and just as all other good rules, there are a few very specific cases where you might argue yourself out of breaking the rule. Such as when you're driving past a red light because you have a person with a stroke in the back seat. It's still a pretty good rule to not drive past red lights.
Right... whenever someone does it, it's almost always wrong. Like calling System.gc(). But that doesn't mean it's *always* wrong. 
I'm new to Lambda and found this Oracle's tutorial very easy to follow and understand.
In this case the side-effect happens once: create the singleton (avoiding double-checked locking) and you're set. A getter that produces a different value each time it's called isn't a getter.
I could probably find a few books for you if you give me an hour or 2 to go through my library but realistically, game design isn't really something you want to do. Java has a lot of uses but the JVM doesn't really lend itself to good game design. I would highly recommend learning C++ if you are interested in game design or try using language nonspecific books if you insist on using Java. A very good book, though not CS based, is The Art Of Game Design: A Book of Lenses. It is a psychology book but is definitely worth reading. Additionally, I have heard only good things The Art of Computer Game Design by Chris Crawford, though I have never read it. I also think Level Up! The Guide To Video Game Design is worth checking out. If you still want language specific examples give me an hour or two as I am at work and don't have my bookshelf to look at.
Wow, thanks! I really would like some Java-specific material to read. I understand that Java isn't the best language for game design, but I'm not looking to become rich and famous (yet?), and games like Minecraft seem to be doing well on the Java platform. I'm looking forward to hearing from you again. Thanks!
From what I understand, there is no JVM for iOS. You would need to convert the Java code to Objective C. There are [tools that can help you do this](https://code.google.com/p/j2objc/), but I imagine it would be quite a bit of work, especially if you did not keep iOS porting in mind when designing the game in Java.
Memento Design Pattern -- more viedos subscribe
I was going recommend Java Game Programming For Dummies as that is what my younger brother used to learn but apparently that book is stupid expensive these days.(Edit: Or not the amazon listing appears to be an error) If you can find an e-copy though its definitely worth a glance. I also recommend http://www.brackeen.com/javagamebook/#get this site and book. I know its a pretty common text book answer but its such a go to answer for a reason. It is rip with examples and isn't expensive at all. Additionally for your basic java learning Big Java: Programming and Practices was a great book though I can't guarantee it won't come across as dated. I believe the last version came out in 2002 or 2003. Another book you can never go wrong is Killer Game Programming for Java. This book is published by O'Reilly which means you know it will be a decent book, if not the best book on the topic. Additionally since O'Reilly is such a large publisher, you should be able to pick up a copy very cheaply. Finally, since you asked specifically about Java 6, I'm assuming you've seen Beginning Java SE 6 Game Programming, but I will mention it in case you haven't. This is the book I gave to my roommate who was a new programmer. It may be a bit below your level if you are already a decent programmer. Those are all the books I can think of offhand. I know they are pretty standard answers for the question but I tried to include a small bit of reasoning behind why each book is such a prototypical answer for learning Java game design. As a last suggestion I would definitely recommend to every programmer learning an object oriented language to read either, Design Patterns: Elements of Reusable Object Oriented Programming or Head First Design Patterns. Head First is definitely the more accessible of the two books and proper design patterns will ensure you get the most bang for your buck out of every line of code. Good luck in your endeavors and keep us posted on your projects! If you have any questions feel free to pm. 
PyroNavi is pretty much dead on with his answer. Unfortunately iOS and Java pretty much hate each other. If you are planning to write code for iOS, you should definitely design it with ObjC in mind. 
&gt; never heard reasoning involving defensive programming and I have no idea what it is nor why it would forbid catching exceptions at all. I think this just means, that if for example we have method with an array parameter, we shouldn't be catching ArrayIndexOutOfBoundsException in the client side to cover the possibility of supplying an argument array of incorrect length, but rather verify it beforehand on the client-side. Same reasoning goes for NullPointerExceptions (don't catch but give valid arguments instead) and many others, which detroitmatt referred by RuntimeExceptions in his message.
&gt; ArrayIndexOutOfBoundsException ... NullPointerExceptions Both of these are great examples of an exception, the local code cannot possibly recover from invalid state, some far away calling code can retry, show an error message, do a clean shutdown or anything else. &gt; verify it beforehand on the client-side. So you duplicate the error check on call site every time you call a method? Also what does your code do if it encounters an invalid value? 
&gt; Java has a lot of uses but the JVM doesn't really lend itself to good game design Are there any particular reasons why this is (bad graphic libraries?). I've heard that Minecraft was written in Java (but I never really researched it that much)
The poor graphics library is one reason but additionally because you go through the JVM you can not easily access things like the computer's GPU directly. Additionally you must start the JVM before starting your game. Worst of all since your game is running on top of the JVM code is very difficult to optimize. Your code isn't running directly on the machine. Java code is converted, as I am sure you know, to bytecode. Bytecode is an interpreted language that the JVM interpreted at run time. This means that if you were to write the same code in both Java and C++, the C++ code would execute faster as it runs directly on the machine. You can test this yourself by running a simple counting loop from 0 to 1,000,000 in both C++ and Java and timing their run. Minecraft was written in Java by an amateur(at the time) programmer. The game itself is conceptually great but the on the back end the code is rather poorly done. Notch has done several live streams of himself coding and it is, no disrespect to him, average coding at best. His design worked because the graphics were very simple and the game engine wasn't insanely complex. This meant he didn't have to use a large amount to time drawing the graphics. The key advantage of Java is being extremely portable which is incredibly useful for a relatively simple game like Minecraft. Notch's talent and success didn't come from his programming skills, but from his innate understanding of game design. He managed to boil a vast world down to its core concepts and represent it in a simple, straight forward manner. This allowed him to avoid the drawbacks of Java by simplifying his game. This is just a cursory overview of some of Java's drawbacks. I do most of my work in Java and think it is a great language for many types of programming such as web development but every language has its weaknesses and I think it is important to be familiar with the pros and cons of every language you know. You don't want to waste hours trying to hammer in a screw when you have a screwdriver on your desk. If you have any other questions feel free to ask. I love discussing the relative strengths and weaknesses of languages.
You need to separate what game design is from what programming is. Game design takes the form of deciding what the game is, the rules, etc. This can be done without writing any code. User interface design specifies what the game will look and feel like to the users and how they will interact with it. Game programming is actually implementing the user interface, game rules enforcement and tracking the game-state in code. All three can be done by one person or spread out over a team of people depending on how complex it is going to be.
I've interviewed quite a few candidates in Denver for senior positions, going rates are about $100 to the contracting firm. I assume the developers themselves get something like $50-80.
If games can be written in python, games can be developed in Java.
I would like to add that on a modern JVM with a good Just In Time (JIT) compiler, performance becomes less of an issue as the JVM will compile the most-called pieces of code into native code, optimizing them in the process. Due to this, Java can in some cases [outperform C](http://programmers.stackexchange.com/questions/110634/why-would-it-ever-be-possible-for-java-to-be-faster-than-c), although not by a large factor. I think that the worst performance penalty when writing games in Java is probably the constant Java/Native switch when calling LWJGL methods (or similar).
Upvoted for being very informative.
what games were developed in python?
That code looks horrible. Let’s see… - Inconsistent formatting, inconsistent whitespace, inconsistent placement of braces. - No real javadocs. - No try-finally or try-with-resource blocks for I/O operations.
&gt; (bad graphic libraries?) You have full access to OpenGL on PC, and OpenGL ES 2.0 on Android and iOS. How can this be bad?
Wow, 1999 has called, they want their serialization back.
What a useless “design pattern.” Is there some kind of reward for creating design patterns so that everybody and their dog runs off to find something to attach some fancy name to? This “design pattern” aims to separate the state of an object from the object itself — wait, what? An object is already defined by its state! So store the object and be done with it. If your object is mutable (bad idea in its own right) you have to clone it. If your state is mutable you have to clone the state. I don’ t see any right for this pattern to exist.
One reason would be to add an address search to a mapping application
As enums are not treated in any way special by the [Java Code Conventions](http://www.oracle.com/technetwork/java/codeconv-138413.html) one can assume that they should be treated like any other class, too. I would add a get* method and declare the field as private.
Or more like apple hates java. (Not trying to circlejerk here) because I imagine sun would like their language be compatible with iOS
I understand this, I was just speaking casually.
Why would anyone ever want to watch a dude program?
I'm gonna go the opposite way from the other two posters so far. Have them as fields. You cannot extend enum classes and neither can you base them on an abstract class. The primary benefits in encapsulation are not relevant *unless* you want to use an interface for similar enum classes. This is of course assuming that the fields are finals and are effectively constants. This also, imho, aids code readability. 
One problem: } catch (OutOfMemoryError e) { report("User xyz can't start their app because the JVM could not allocate enough memory"); } How is that going to work when there is no memory left to step into the "report" method? You should not try to catch OutOfMemoryError. In fact, catching all subclasses of Error are frowned upon, they are reserved for serious unrecoverable errors. Behaviour is not guaranteed as the VM is in an very unstable state. What you *can* get away with is catching it and exiting the VM immediately with a special return code that lets the launcher know to report an OOM error. 
The reason it's "never" catch these things is because it's not guaranteed to work unless you jump through special hoops that show you understand what you are doing. It's still good advice for the newbie. It's like school chemistry where each year begins with "remember what we taught you last year? It's wrong, vastly more complicated, get your pencils out". 
Programmers forget these checks and they are how a large number of software exploits occur. Java is largely immune to many of them because of the exception handling. The implementation may be flawed but it's a far better system than forcing the programmer to do it all by hand. 
Because the object is still being constructed, and the derived method may not be aware of its current state. For instance, it may attempt to access a field that hasn't been initialized yet. Edit for clarification: you mark it final to prevent the method from being overridden so as to prevent the above scenario.
There shouldn't be any issue with using methods in the constructor, regardless of their modifier(s). *Fields* that are marked **final** need to be instantiated in the constructor if they aren't at the point of definition: class Thing{ private final int field = 3; private final int field2; public Thing(){ field2 = 4; } }
To learn. To see how different people think. It is important for developing your own technique, culling out your own bad practices, and learning to avoid the pit falls others fall into to. If you want to truly excel at programming, you have to be constantly learning and it is a very easy way to do so.
Wait, damn, I use methods in Constructors all the time. Is this actually bad practice? I mean all you have to be aware of is that the variables that are getting used are actually instantiated before their use. 
The construction of an object is meant to be well defined. If your constructor calls a method that can be overridden, you can no longer be sure of how the object will be created. There is also a potential confusing ordering problem. [Stack overflow](http://stackoverflow.com/questions/3404301/whats-wrong-with-overridable-method-calls-in-constructors) might answer it best.
As others have said, if someone overrides the method in a sub-class then a can of worms is opened. Calling private and or final methods is fine, provided you write them while aware of what has been set up already. If you have pretty complex constructors it's worth considering a Factory class as it keeps the code nicely compartmentalised between construction and usage of the object. 
Thanks for the link. That answered my question quite well :)
Are you saying that when an OutOfMemoryError occurs, the JVM completely stops executing? I can say at least with Hotspot, this is most often *not* the case. The Hotspot JVM, at least, can often continue executing code when an OOME occurs, in fact there are different kinds of situations in which that Error can be thrown. Search the web for "GC overhead limit exceeded" for example. Nobody said any kind of behavior would be guaranteed after an Error occurs, that is of course part of the spec regarding Errors in the first place. It does not mean one cannot catch them.
If the reason for catching them was that you were going to be guaranteed to be able to do something about it, that would be faulty reasoning. That's not necessarily the only reason why you'd want to catch them; trying to handle failures gracefully is the hallmark of well-designed software... Granted if one is trying to handle an OOME as part of a generic application "just in case" I would agree one doesn't know what one is doing.
read again, this was about unfinalized methods, not variables.
Your enum might later become a real class. Public fields should have never existed as such, period. All access to an object should have semantically been a method invocation.
Excuse me for misunderstanding the question.
I'd go with getters; that way the enums can be used as beens in any other context (e.g.: JSPs). Later you can create an interface to abstract over some other type and use the enums to stand in for some well known instances (e.g.: interface CelestialBody, enum Planets implements CelestialBody, enum DwarfPlanets implements CelestialBody, enum ThingsThatAreNotMoons implements CelestialBody, etc). IMO the potential benefits outweigh the drawbacks. But, as with all coding standards, feel free to fracture them if they don't suit your problem domain, just be prepared to justify it.
&gt; So you duplicate the error check on call site every time you call a method? Also what does your code do if it encounters an invalid value? You don't need to duplicate anything. You are free to verify correctness any way you want, e.g. reasoning, formal proving or just by faith. How one handles invalid values on client side is context-dependant, but most probably you don't want to pass on the invalid value.
It's not so much "do anything about them", there is a high chance of another OOM the moment you start to do anything in your catch block, even building a string for the error message could fail. This then loses the context of the original exception. It's like "finally", you can use it, it might work, but as there are no guarantees you can't do anything "important" in it. 
&gt; when an OutOfMemoryError occurs, the JVM completely stops executing? No, just that when it does occur the VM will be in an unpredictable state. Your service threads may have died for example, getting you into some weird deadlock or worse, causing data to be persisted in a corrupted form. It really depends on how otherwise bullet-proof your code is, if you feel confident nothing permanent will result from a failed attempt then the risk is mostly academic. Even calling another method to pass in a string constant is risky, that'll pop another frame on the stack and perhaps assign local variables. It's just something I've very cautious about, I've seen too many projects where they have a System.gc() call in a OOM handler which is almost always futile given the VM just tried that before throwing the error. There seems to be a lot of misconceptions about what System.gc() actually does. As you probably know, it's more of a "suggestion" to the VM than a call guaranteed to actually do some work, let alone succeed. 
It depends, honestly. There is some discussion about this in [Effective Java](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;qid=1375787643&amp;sr=8-1&amp;keywords=effective+java) if you haven't read it. I'll summarize some of what Josh Bloch says on the topic here: &gt; If a class is accessible outside its package, provide accessor methods...If a class is package-private or is a private nested class, there is nothing inherently wrong with exposing its data fields For example -- public enum Planets { MERCURY(1), VENUS(2), EARTH(3), MARS(4), JUPITER(5), SATURN(6), NEPTUNE(7), URANUS(8) private double _rateOfSpin; public Planets( double rateOfSpin ) { _rateOfSpin = rateOfSpin; } public rateOfSpin() { return _rateOfSpin; } } If you use rateOfSpin(), you have the option of making this a derived value without introducing a breaking change. For the cost of an additional "() -- you get some flexibility. If your enum is private or package-private, you can eschew the accessor with minimal risk. Hope this was helpful.
Do you mean a finalizer?
This should be the accepted answer and I ran into the situation quite often in my career. It happens more than people would think with OO code.
Yeah, it's been that long since I used one that I forgot what the proper name is!
What are you using as an IDE - Notepad? IntelliJ points this out in the code editor for you.
Heh, yeah, I can't remember the last time i used a finalizer either
&gt; No, just that when it does occur the VM will be in an unpredictable state. Your service threads may have died for example, getting you into some weird deadlock or worse, causing data to be persisted in a corrupted form. It really depends on how otherwise bullet-proof your code is, if you feel confident nothing permanent will result from a failed attempt then the risk is mostly academic. Right, but it does not mean action cannot be taken, it means "all bets are off" &gt; Even calling another method to pass in a string constant is risky, that'll pop another frame on the stack and perhaps assign local variables. Yea, it would be interesting to explore the ramifications of different kinds of actions under that state. 
&gt; I believe the last version came out in 2002 or 2003. Just a note for the OP who may or may not know already... Java has changed a lot in the last 10 years, not as much as some languages, but enough that it's important to get an edition that covers *at least* Java 6.
Very true, I just had to include it on my list as it was one of the very first Java books I read.
I would also like to point out, as galaktos does, that you are really behind if you haven't researched the performance of JIT inside the JVM. Also, you should also beware of "micro-benchmarks", like the counting loop you described, as they often won't reflect the results of real-world software. No software accesses the GPU directly, they go through libraries/drivers. Java does have access to these through the native interface, but there might be some slight performance issues with that, I am not sure how well JIT can optimize those calls.
As I stated, I looked at the main site, I'm looking for examples of use cases. 
What can I say, then. It's all there. What kind of help do you feel is lacking?
"Use cases" my friend is what I am looking for. I know I can read the manual and java docs at that site. I'm looking for examples of how the library can be used in a real world scenario. Some examples with a bit of context would be helpful especially with their collections library. Also, their ImmutableList class implements the List interface forcing the mutable methods to return an UnsupportedOperationException which is the same way the standard JDK does it. Do you know of a library that has a better solution by chance?
Also if you look at the top of most of the pages in the use guide you will see TODO: Add more examples So in short, I'm looking for those examples that they realize are lacking. 
Now you're just trolling.
pud[proof](http://imgur.com/B8QcEjT)ding The proof is in the pudding my friend. Many of the pages have that same header.
Of course, that might be okay, if for instance the method just fetches an object from a factory somewhere, and is non-final so that subclasses may customize it. But it should probably be documented that it gets called before its own constructor.
For testability, [do no work in a constructor](http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/). If you're calling methods (final or not), you're probably doing work.
So, I've looked at factory classes and I never really understood what they were for, but omitting methods in the constructor would definitely warrant a factory to build it. 
I would argue a JIT compiler has better knowledge of how to optimize the code than a pre-compiled C++ executable, so therefore speed is for the most part not the issue. As far as access to native libraries, I agree, and also there are so many more gaming engines/libraries for C++ and other development environments. I think Java could be a better language for gaming, but it's sort of a catch-22. Everybody thinks it is too slow/etc, so therefore not much effort is put into it. There is no reason a JIT compiler couldn't link directly to native library calls, and then that issue would go away. 
PMD and/or Findbugs will also point this out.
So, how's it going so far?
Even more importantly, there's Scala as well. ;) http://www.artima.com/scalazine/articles/twitter_on_scala.html
I enjoy Arch Linux myself more than Ubuntu, but it's just a personal preference...
note: `private` and `static` methods are automatically `final`, so they're also exempt, although care should be taken that no references to your object escape.
Thanks, that's what I was hoping for, does it support Oracle JDK, or just OpenJDK? Not a lot of info on that it seems.
The Java stacks (jdk, mvn, ant, etc) are all fairly os independent. That said, there is probably better test coverage on the linux distros. I've seen many applications claim a better experience or requirement an Oracle JDK, in practice I've had no issues going 100% openjdk.
Ubuntu Server LTS seems to be the overall best option in the 2013-2014 time frame. I use it in new personal and enterprise installations, as networked Java apps benefit the most from a well-tested combination of kernel and libc, combined with a distribution upgrade path which doesn't require complete reinstalls.
HI I AM AKSHAY.
Spend some time with IntelliJ community edition. The code analyzer is a great learning tool. 
Thanks! I had not heard of PMD before. 
Sadly the article does not really explain the different errors or what you should do. For instance, PermGen space can be exhausted if you are (re)loading loads of classes or have lots of dependencies. Do you really need all those? If you are running in a container, restart the container rather than redeploy the WAR. If PermGen space is not freed on reload, that could be an indication that something is hanging around from the previous application, like a dangling thread - this could be coming from any of the frameworks you use, like the database layer. Running out of heap space when you did not expect it is not always solved by just increasing the heap size, this could just delay the problem if you are somehow "leaking" memory. Note that Java does not have direct memory leaks like in C world, but you could easily have (large or large numbers of) objects hanging around longer than they need to, for instance because they are (ultimately) referenced from static fields, inner classes (e.g. handlers that don't get unregistered) or threads that hang around blocking for something that never arrives. Using a profiler like [JProfiler](http://www.ej-technologies.com/products/jprofiler/overview.html) (or [Plumbr](http://plumbr.eu/) from the OP) will let you investigate memory and thread allocation as they happen, and find hotspots. 
http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.3
Nah, enterprises were partial to RHEL before VMWare ESX/i became the default install for most new servers. Now, the cost can't be justified, especially taking into consideration the added operational costs resulting from the ancient libraries, most often multiplied by number of application support providers the business works with.
CentOS is well supported and very popular in the server side. Plus you will get to cut your teeth on an RPM based distro (good if you need to use Redhat at some point in the future). If you are coming from ubuntu/debian you won't have much difficulty. It supports all the major versions of java and with it's popularity for web hosting you will not have difficulty getting most java app servers going.
Unicode magic! if (false == true) {}{ System.out.println("false is true!");}
OpenBSD is very secure, but that's it's main mission. I would not recommend it for a development box. You give up a lot of flexibility for that security.
java has for each? i thought it was just for ( x : y ); 
jdk8 is adding .forEach(&lt;methodref&gt;) to several library classes to increase support for parallelism.
StaticMethodAdapterTweak, or StaticMethodAdapterTransmutation, Translation, Transfiguration, Transformation. The possibilities are endless!
lol; thanks for that. I kinda like Tweak, but I don't think any of them are quite right; these hint that something is undergoing active modification, rather than just instance-&gt;static method call delegation. In that vein however, I'd probably prefer StaticMethodAdapterTransubstantiation. But only for accessing a God class.
You want to write and edit java from the windows command line? Or you just want to learn how to compile and run java classes? No one writes code from windows command line. Linux sure, maybe powershell, but not the standard cmd.
Use an IDE.
Just compile and run yep
Thank you for the recommendation. I've been looking for ways to improve my OO codes to be more portable, expandable, modifiable, and usable. I've gotten the concepts of Interfaces, abstract classes, and even generics down. I'd say I'm probably a little more than a basic programmer, but a lot less than an expert. Again, thanks, I'm sure this will help me advance immensely. :)
Make multiple windows? Do you mean [JDialogs](http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html) Also Netbeans has a gui builder that you can download but I do not advise using it if you are trying to learn.
Both OpenJDK and Sun/Oracle JDK: http://www.openbsd.org/faq/faq8.html https://wikis.oracle.com/display/OpenJDK/BSDPort https://wiki.openjdk.java.net/display/BSDPort/Main You can install Tomcat 6/7: http://kemovitra.blogspot.com/2013/05/installing-tomcat-on-openbsd.html?m=1 GlassFish 3.x will run on OpenBSD. I don't know about GF4, but it should be an easy installation. The skies the limit when it comes to Java SE, EE, or FX on OpenBSD. I can't foresee any limitations that you'd encounter. As already mentioned, I wouldn't recommend developing on it, but deploying to it should give you no trouble. I can't tell if you're using your server for personal or commercial use. Either way, I'd recommend it for either setting. I prefer OpenJDK.
Netbeans was the original "great" IDE. Then along came Eclipse around 2000-ish which was even better, it had lots of cool refactoring tools and seemed to be more "aware" of what java code was. The Eclipse got bloated and everyone started hating it. All the "cool kids" are using IntelliJ now.
http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/8ed8e2b4b90e/src/share/classes/java/util/TreeSet.java http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/8ed8e2b4b90e/src/share/classes/java/util/AbstractSet.java http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/8ed8e2b4b90e/src/share/classes/java/util/AbstractCollection.java http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/8ed8e2b4b90e/src/share/classes/java/util/TreeMap.java 404 public boolean retainAll(Collection&lt;?&gt; c) { 405 Objects.requireNonNull(c); 406 boolean modified = false; 407 Iterator&lt;E&gt; it = iterator(); 408 while (it.hasNext()) { 409 if (!c.contains(it.next())) { 410 it.remove(); 411 modified = true; 412 } 413 } 414 return modified; 415 } 233 public boolean contains(Object o) { 234 return m.containsKey(o); 235 } 231 public boolean containsKey(Object key) { 232 return getEntry(key) != null; 233 } 342 final Entry&lt;K,V&gt; getEntry(Object key) { 343 // Offload comparator-based version for sake of performance 344 if (comparator != null) 345 return getEntryUsingComparator(key); 346 if (key == null) 347 throw new NullPointerException(); 348 @SuppressWarnings("unchecked") 349 Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key; 350 Entry&lt;K,V&gt; p = root; 351 while (p != null) { 352 int cmp = k.compareTo(p.key); 353 if (cmp &lt; 0) 354 p = p.left; 355 else if (cmp &gt; 0) 356 p = p.right; 357 else 358 return p; 359 } 360 return null; 361 } 369 final Entry&lt;K,V&gt; getEntryUsingComparator(Object key) { 370 @SuppressWarnings("unchecked") 371 K k = (K) key; 372 Comparator&lt;? super K&gt; cpr = comparator; 373 if (cpr != null) { 374 Entry&lt;K,V&gt; p = root; 375 while (p != null) { 376 int cmp = cpr.compare(k, p.key); 377 if (cmp &lt; 0) 378 p = p.left; 379 else if (cmp &gt; 0) 380 p = p.right; 381 else 382 return p; 383 } 384 } 385 return null; 386 }
Having used many IDE's over the last 5 years or so my opinion is that Netbeans is actually very good. It's WAY more intuitive than Eclipse (which is by far the worst of them all IMO) but I've moved on to the new IntelliJ. For little one class things I just use Sublime Text but I spent years on Netbeans and I'll always have a soft spot for it. It's good but not my top choice anymore. Though I have to admit that I never used the GUI editor. "Multiple windows through one file?" Just create more than one JFrame (assuming Swing still) and set them all to be visible. :)
That sort of information is very accessible. Pretty much any Java beginner tutorial will cover it. As your code grows into multiple classes, compiling from the command line quickly becomes tedious and unmaintainable. Eventually you are going to want to script it. Scripting tool like "ant" have been designed specifically for this purpose. To answer your original question, [here](http://docs.oracle.com/javase/tutorial/getStarted/cupojava/win32.html) is some information on compiling under windows.
[The Use of Multiple JFrames, Good/Bad Practice?](http://stackoverflow.com/a/9554657/300257)
Ok, so it's not a bug because it's documented. But wouldn't you agree that it doesn't make a lot of sense? Wouldn't you expect removeAll() to behave just like remove()? How is it justified that for(Object o : someList) { treeSet.remove(o); } is (depending on the size of someList) completely different from treeSet.removeAll(someList) ? It seems to me that they only had performance in mind, instead of what makes most sense.
I hope these replies help you somehow, but many people might just suggest you dump OSGi altogether. I only came in here due to disbelief in the subject matter--people are still "getting started with OSGi"???? ;-)
Oh it's definitely bad. There's absolutely no reason why you would need more than one. For some things detaching the window (like browser dev tools) is useful but it's generally avoided.
There was a bug report filed for this exact same issue back in 2002 http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4730113 According to the Sun developer who closed the issue: &gt;removeAll does not mean "for each element in the given Collection, remove it from this collection." It means "for each element in this collection, remove it if it's also contained in the specified collection." Clearly this relies on the specified collection's definition of contaiment.
Also, [Eclipse stands on shoulders of giants](http://en.wikipedia.org/wiki/IBM_VisualAge#Evolution).
^[[**✔**](https://blockchain.info/tx/47853a822b2f552b2efe1742a5eff809d06332cae8255871d2ff7e582783ae70)] ^(**Verified**: omnibrain ---&gt; m&amp;#3647; 9.4697 mBTC [&amp;#36;1 USD] ---&gt;) ^c0demonk3y ^[[**help**](http://www.reddit.com/r/bitcointip/comments/13iykn/bitcointip_documentation/)] 
As an enterprise java developer I can say that my personal preferences don't matter that much. Everywhere I have worked has used an eclipse derived IDE. Rational application developer, spring source tool suite, joss tools... And plain Eclipse EE. Almost every derivative of eclipse can add on all the features of other derivatives (rational application developer is difficult to get working sometimes). I use the tools my clients want me to use. Because I like money. 
I had eclipse break/hang on me too many times to count so I moved to Netbeans. Eclipse has more options and plugins, Netbeans is stable and easy to use. 
Nobody uses NetBeans:)
Up vote for sublime, make sure to install the package control http://wbond.net/sublime_packages/package_control
You mean stands on the shoulders of garbage right?
I used to use it back in like 2003
What do you mean by making multiple windows trough one file?
No, I didn't mean that. Would you mind explaining a little bit why you think it is/was garbage?
yep, I'm on Netbeans after getting fed up with Eclipse's cluttered and just poorly designed UI, and slow "Rebuilding workspace" coffee breaks. I quite enjoy using it. :) 
Oh I forgot to mention, it wasn't even installed on the same partition. Files on C:// install on D://.
Out of the box NetBeans' Maven support is fast, stable, and sane (unlike say Eclipse). Any Maven project is a valid NetBeans project and requires zero effort to open/import and configure. Out of the box it supports Groovy, JavaScript, various web servers, and Git. I don't have to download the IDE then a dozen plugins to make NetBeans work. It is far, far less complex than Eclipse and the setup time is much faster. The biggest downside is Eclipse offers way more plugins and has way more corporate support.
Im designing an application for a company that needs a kind of clock in and clock out program, when a button is pressed I need a form to pop up, can I have a second Gui editor for that form in the same file, instead of making a whole new GUI file for that form? Please help Edit: accidentally sent to early
Yeah, I used Netbeans for about 3 years and liked it, a lot. Then I spent a weekend running through [Java for total beginners](http://eclipsetutorial.sourceforge.net/totalbeginner.html) and needed a semi-obscure plugin for a very specific task that only exists for eclipse, and now I use it exclusively. I'm sorry to say, I like it better. I didn't want to, but it made me love it.
Tried Eclipse. Hated it. Complete opposite to Netbeans intuitive design and approach to Java programming.
That really sounds like it has nothing to do with Java at all. It sounds more like a bug in Windows, or perhaps you already had some malware on your pc that got executed when the installer ran. How did you get the SDK installer? Was it from a USB stick? Could be a bug in recuva... 
1.6 is used still in many cases for compatibility. Nothing wrong with using the SDK if you need it - just don't install the browser plugin on any browser that connects to the internet. Oh, and don't expect any support from Oracle.
Which semi-obscure plugin was that?