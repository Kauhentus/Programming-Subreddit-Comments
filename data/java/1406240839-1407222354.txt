edit: [Direct Link to pdf](http://bayfiles.net/file/1ij5K/0prmYW/Java8-final.pdf) (trying out bayfiles (thepiratebay's file hosting service). It worked fine for me to upload and download...I can upload it somewhere else if people want) [Bugmenot](http://bugmenot.com/view/infoq.com) for any and all sites with registration requirements. User: bugmenot2011@mailinator.com Password: bugmenot 
Lambda version can look like this (I never tested it actually ;). I think Comparator can be cached/reused for better performance. @Override public int compareTo( Student otherStudent ) { return Comparator.comparing(Student::getLastName) .thenComparing(Student::getFirstName) .thenComparingInt(Student::getAge) .compare(this, otherStudent); }
How am I going to try something when you don't really know anything but a few basics? Oh and I love what you said about spouses lol. But I can try them if I can find a way to learn some more.
&gt;Closures have also been part of java since the beginning with anonymous inner classes Ignoring whether anonymous inner classes actually count as closures... they haven't been there since the *beginning*. Inner classes (anonymous and otherwise) were added in Java 1.1.
Can confirm. Using it on Elementary OS (Ubuntu Derivitive). Only thing noteworthy is a mysterious console notification of an unfound Gtk pixmap. Otherwise it works like a charm.
I am only 14, about to be 15, so I can't go to college obviously. And for that website, I'd rather not mess with something that I have to wait for. Do you have any other recommendations?
sounds like a job for the preferences api. import java.util.prefs.Preferences; public class Test{ public static void main(String args[]){ // use .systemNodeForPackage instead to have a single count for all system users Preferences prefs = Preferences.userNodeForPackage( Test.class ); int count = prefs.getInt( "startcount", 0 ); count ++; prefs.putInt( "startcount", count ); try{ prefs.sync(); } catch( Exception e ){ System.err.println( "Count wasn't saved :("); } System.out.println( "App has been launched " + count + " times" ); } } depending on your OS this count is saved somewhere (you don't really have to think about where. in osx it's in a file, in windows i believe it's in the registry). 
Like what? The grammar reads like a non English speaker, but I'm not seeing a lot of issues with the code with a quick read through.
There are utility methods in the Collections class for dealing with Enumerations.
They archive a lot of their courses so you can just google what you want and look at classes that have already passed. IMO it'll be better and easier if you just take the course, that way you don't burn yourself out in a few weeks and abandon it. It's not going to teach you the structure of Java but that's not really something you need a class for if you have a background in programming, what's valuable is it will give you a way to apply Java to something that's fun and relevant. tl;dr the worst way to learn (in my opinion) is trying to read a dry book on programming, either build something yourself, or enroll in a course that allows you to apply that language to something tangible 
I just went onto udemy.com and found supposedly the best free one.
Looks good ! Calling "Complex Objects" to an StringBuilder instance is too much but since it shows deployment, some data structures and inheritance should be good for you to catch up. Don't give up ! 
It can't be in your personal device... So put it on github in the cloud! ;)
Most common way: the Scanner class. It also provides methods to only get strings, or only ints, etc. EDIT: Example: Scanner scan = new Scanner(System.in); String input = scan.next(); int intput = scan.nextInt(); 
I think remote desktop and vnc are the only way you can technically get around these rules. if you are mounting remote drives, your temp/caching directories are still local and you essentially have violated the rules by copying code. If you can mount drives locally, mount it from home, copy them over, do your work, and winmerge your changes back via shared drive and delete code before you shut down. i used to work in a pretty security conscience env, so If i had work on my home machine, I would keep it in a truecrypt encrypted volume (basically a virtural encrypted drive). When I wanted to work, Id enter my password to decrypt the volume, do my work (my code and my intellij home folder were in the encrypted volume).. when finished, shut down intellij, and close the encrypted drive.
That's a good idea. I'll see if that might be a possible solution. Unfortunately I think the worry is that copies of code might start floating around as people leave the company and have checkouts on their personal devices.
I'm starting to think that's the case. VNC is usable, but the scrolling/layout drives me a bit nuts when trying to code - the display on my laptop is much smaller.
Around the house I use a [portable copy of Teamviewer](http://portableapps.com/apps/utilities/teamviewer_portable) and connect by lan with the [Teamviewer server](http://download.teamviewer.com/download/TeamViewer_Host_Setup.exe). Have no issues opening or using intellij connecting through online or lan.
Just spell check stuff. Nothing big. Generally spelling errors that are easily caught by an editor indicate a haphazard attitude, and reflect quality of work. Examples: &gt; thre fields &gt; usuallyb e adopted &gt; to privde But, yes it is clearly an ESL post. Which doesn't bother me. Attention to detail does.
Can't you just change the resolution of the target computer via VNC?
Learn vi and ssh?
What is your criterion for using an enum instead of just creating dedicated classes for the items to be enumerated?
Remote desktop is much better performance-wise than VNC. I work remotely via a VPN and remote desktop to a Windows 7 machine with IntelliJ IDEA on it and it's just like being in front of the physical machine.
I think he meant to get an idea or goal that you can work towards and implement what you learned. 
As respectfully as possible, I am telling you that for the future, post all of the help type questions in /r/javahelp or all youll get are downvotes. Thanks
To even suggest vi as a replacement for intellij is naive. Vi may have lots of plugins but you have to waste countless hours configuring everything, and at the end of the day unless you use headless eclipse or something you don't even get type checking or intellisense. Vi is a HUGE step backwards when it comes to actual productivity
Or perhaps..... emacs? *[ducks]*
Depends on where you draw the OS boundary I suppose. Ring 0 stuff is generally C. But a lot of your other OS libraries are C++ (Qt, for example, in the Linux world, and large swaths of various Windows APIs).
Plain VNC is not really performance wise. NoMachine's implementation is rather good and works on any OS.
&gt; Besides of the fluent API, the ComparisonChain performs a “lazy” comparison. This means it only performs comparisons until it finds a nonzero result, after which it ignores further input. But it still retrieves all the values to compare, so it is not that lazy.
It's giving a number below 1 because if you read the javadoc for say gen.nextFloat() you would see it returns a number between 0 and 1(0.56374.......). Depending on what you're trying to do, you could just multiply your output by 10, 100, etc.. I'm not really sure what you're trying to do but there's a lot of stuff with regards to random number generators all over the internet so have a look. 
Hi. German redditor here, and author of the post. Thanks for pointing out my mistakes. I will correct them once i have finished my work for today
He does have ssh. Comes by default on OSX. The actual problem is getting X forwarding to work and since XQuartz sits on top of OSX's own display server the performance won't be that greit either.
VNC in particular sends entire screen refreshes (compressed) whereas Remote Desktop sends just the API-level drawing commands so naturally it's much less bandwidth intensive and much snappier.
No thank you, haha. I should have gone there first. Thanks for not bein harsh on me, and thank you all for helping!
Hi, I am learning Java at the moment and found the following book quite useful. http://www.amazon.com/Java-Beginners-Guide-Herbert-Schildt/dp/0071809252/ref=cm_cr_pr_product_top
If you have ssh access, you could try sshfs. It needs FUSE on OSX. I used it for a class that had a weird environment that was fully set up on the uni's server. I worked through vim for that, however, but I don't see why it wouldn't work with intellij, as long as you have the same JDK on your local machine. Not sure if it'll work for you, but something to try at least. Good luck!
I know about the limitations of the current GC algorithms. And even with GC you have to think about the memory, you have to calculate memory usage, once in a while you need to care about the reachability of the references and so on. Nevertheless for me and my problems GC is a must. To be fair I am not a programmer, I just rely on it. And I am trying to become more and more better at it.
Dont read books. Watch the free interactive java course at udemy. 
Yeah thats what I just found :D thanks man!
I've used it before over X11, but only on the local (wifi) network (Using my laptop with an SSH connection to my desktop where IntelliJ was running) and it worked fine but a little but sluggish on occasions. Significantly better than when I tried doing the same with Eclipse years ago though! 
Scanner::next() reacts to whitespace, so your code is wrong for long names. eg. for input "Johny Mnemonic" your code will return "Johny" and because you must press Enter key anyways, here is correct code: System.out.println("Hi, what's your name?"); String name = new Scanner(System.in).nextLine(); System.out.println("Hi, there, " + name + "!"); 
Im literally doing that one now :D Thanks anyways!
Any chance you're due fora PC upgrade? My work started moving people to laptops, perhaps you can make a case as to how it will help you be a "better" employee (I.e. giving up time outside of work to do work;). Obviously it's not feasible for every work environment, but I tend to work better with changing my environment every so often.
What operating system are you using? I recall on Fedora and Ubuntu the last installations of Netbeans did the same thing and required being run as root the first time.
3 years ago my company changed policies and I had to work on a windows laptop, using nomachine to a linux machine. Didn't like it at all. Lagged a lot and crashed now and then. I soon left the company. Might have got better since then.
I think it's very specific use cases. Why use Spring if what you are doing doesn't need all the features that Spring uses. I know for example at LMAX they don't like Spring, they have some very tight requirements where they can't even do 1ms garbage collections so they use a non pausing GC. To go even further they built there own DB that only allows inserts and reads, no deletes as having this functionality in Oracle slowed the system down considerably. 
Update: I couldn't get the current master to compile - which is a shame. Edit: Another update: I just got help by the author, uncovered a performance bug, which got promptly fixed by the auther and now the HftcHash really is faster than trove.
Every developer doing anything internet related should know html5/css/javascript. That includes basic HTTP knowledge, what XHR is and how it works and what the term REST really means.
Java's a funny term. When you say "Java" do you mean Java on the desktop? Then yes, I see more and more stuff become websites vs desktop UI apps. (But hey, a better rise of Java on phones/tablets thanks to Android...) OR by "Java" do you mean Java on the server side? Node.js won't ever replace Java for enterprise projects. It's good, however, that future Java specs are helping server side developers with stuff modern web apps want. Or by "Java" do you mean Angular.js vs GWT? In which case, yes, I see Angular winning that fight too.
Momentum shmomentum. Yes, Java adds features, mostly because they understand really well how much hipsters like new shiny things. Reactive functional socket based async framework with non blocking IO and NoSQL backend. I'm telling you, it's 2014 and it is the only way to develop.
On the front end, JS/HTML5 have won out over Java technologies like JSF. On the back end, I haven't seen that much enterprise development done in JS, but maybe in time.
Related question for folks with experience in such things: what's the current viability of node.js as a replacement for Java in enterprise?
Perhaps wondering about popularity is not the best metric; there are a ton of people who just jump from one fling to the next. Not trying to suggest javascript / html5 is a fling, but java (GWT on the front end) has many many advantages. As a guy who spends all day developing java server and desktop applications, I cringe everytime I have to get near the bare bones javascript and html, it's just too finicky and unstable. Mind you, I feel that way about all dynamically typed programming languages like python, ruby etc. Won't catch me using those for anything important or more than a 100 line bash replacement script etc. Swing will be around for a while yet, the replacement (javafx) is gaining steam too.
No.
Do you think JSF will ever be used to generate full client-side MVVCs? My gut says no, especially since [RichFaces is not going to release a 5.0, and only bugs/compatibility will be worked on from here on out](http://www.bleathem.ca/)
I would suggest redoing a website you've previously coded in Java using jsp and servlets. Then I would redo the website again using a Java MVC method of serving the webpages. This will give you a good idea of the basics before moving on to something note OO.
JavaScript is certainly relevant for back end development. But... The paradigms are a bit different when it comes to writing back end code in JS and front end code in JS. I know I am being a bit vague, so the best analogy I can make is the English language. Spoken in New York, a small farm in Mississippi, an inner city project in Chicago. We know how different each dialect will sound, yet it's all still English. 
yes, you can use it. but you cannot credit me, it's too trivial of a code example :) btw... if you enjoy learning by example you should love java2s.com, it has short examples for virtually anything in the java api. in your particular case you could browse this for more examples: http://www.java2s.com/Code/JavaAPI/java.util.prefs/Preferences.htm
Javascript is the language of fads, every five minutes a new fad comes up and everybody jumps into it. Node.js is a joke , imagine writing a server with no integer support, or no solid thread support, it's very hacky. Not to mention that maintaining Javascript is really really annoying and error prone.
thanks for the sign mate :D
A quick google found many other solutions. Apparently .net is callable via COM so Java just needs to speak COM. http://stackoverflow.com/questions/283679/how-can-i-call-net-code-from-java 
Books are great references, and a lot of times tutorials can move way too slow or cover information I already know - sometimes with something I *don't* know stuck right in the middle of information I don't need. I can skim a book much more easily than a video. A good book allows me to flip to the relevant section, rather than checking a handful of videos and trying to find that right piece of data. (PDFs are great, Ctrl+F)
The best way is to find an actual job and be paid for your work. Is there a reason you want an internship instead of a job? Do you actually know how to program? Because an internship won't really teach you. But... to find an internship you basically do the same thing as finding a job. And you can search google on how to do that, you need to make a resume and submit it to search sites and what not, look at postings and so forth.
There is an Angular Faces project but I do not know much about it. JSF can and does work with client side components. I think for most it is not the focus because it is not what it needed for the type of application you would use it for. Client side MVC's make sense for some development but it is not great for others. I think they each have a place in the present and the future. I think this really comes down to people who are building different things. If you are building web applications client side tends to get very buggy are hard to manage. If you are building a web site that focuses on presenting data rather that updating and validating it then it might work out. I do not really think RichFaces has much to do with it. It is just one JSF component library, there is also PrimeFaces, IceFaces, Oracle ADF Faces, Pretty Faces, Omni Faces and others. RichFaces going into a maintenance mode has more to do with PrimeFaces winning the battle than JSF.
Learning Java well would probably be a good start. I'd recommend learning about rather common enterprise frameworks like Hibernate (database stuff), Servlets/JSP/JSTL (website stuff) and JAX-RS (REST stuff). If you're already familiar with Java, I'd recommend reading the book "Effective Java Second Edition" by Joshua Bloch if you haven't already. That'll make it easier to pass technical questions and really help with architecture skills. In terms of agencies, don't bother. Go and apply directly to the companies you want to work for (i.e. IBM, Oracle, Facebook, Google. etc). Assuming you're in university still and your school offers a co-op program, check postings from smaller companies and go to local job fairs.
Are you me? Just now I was looking for some things around my school for an internship during the fall. I think I might be a little late to start looking, but I'm going to pretend like I'm not. 
Where do you live and are you a student?
My interns get paid. Well, in fact.
If you are in Austin you can PM me. :)
I don't see Node bringing anything to the table that solves any of the problems I deal with on a day to day basis. Javascript on the back end is a nightmare (refactor difficulty, callback hell, all the language design problems like truthy/falsey and scoping) not a selling point, nothing we do is limited by how many requests per second we can serve, and our business process has several heavy calculations. 
This is a good question. I've tried to ask Node people, when I can, "What's the biggest Node project you've been on?" I've never gotten a really straight forward answer. Where as, if I ask my Java writing friends, the answer is, "Oh, a couple of engineer-centuries big". I ask my Rails writing friends and the answer is, "Oh, maybe 15 developer-years big". (Yes, I tend to know a bunch of folk that have been writing government project big Java projects,...) I'd love to talk to the Walmart Labs folks, or dev from Paypal(??) - where large companies have employed a bunch of Node people to write apps... but I'd hazard a guess that these are still projects measured in developer-decades, not centuries. The biggest Node app I know of personally, because I'm working on it right now, is about 3 developer-years large (10,000+ lines of Coffeeescript) TL; DR: Pretty sure the sweet spot for Node is highly "web real time" projects that are measured in developer months in size. Node is too big, and as a community doesn't want the abstractions that - in my eyes - make big team work possible.
I can move to Austin! 
What do you think of Hybernate, and Spring frameworks?
Well I was working for a firm in the DC area, that mainly worked on sponsoring OPT students. Since I don't need one, I feel like I can just find a project on my own. But so far all the jobs that I have seen, it was ether for Architect Level, or Senior. 
AngularFaces aims at "marrying" AngularFaces and JSF. The idea is simple: I observed how painful the JSF way of doing AJAX is. JSF is a very simple framework - but only if you stick to the original request-response-paradigm. I often observed that very simple requirements are expensive to implement in JSF, but cheap in Javascript. That's AngularFaces for you: it's based firmly in the JSF world, adding the option to implement simple things in Javascript. But then, nobody's stopping you to implement almost everything in Javascript. In this case JSF is simply an alternative way to communicate with the back end (it's an sort of an alternative to REST).
 JSF uses JavaScript and HTML5 they are not in competition.
Now that Cagatay has withdrawn, I'm free to promote AngularFaces :). AngularFaces is a JSF framework supporting AngularJS and/or AngularDart. On the long run I want it to blend seamlessly with PrimeFaces, so you can benefit both from Angular and from the powerful PrimeFaces components.
Yes, they are not mutually exclusive. The main difference is where the rendering work is done. With JSF most of the work is done on the server side. With modern JS/HTML5 apps, most of the work is done in the browser, and the browser communicates to the server with JSON.
Time will tell. I do like JSF, but I know some big enterprise software companies are transitioning to HTML5, at least for new projects. With the amount of JSF code that's out there, it's going to be a long time before it all gets re-written.
Do you have experience? Internships are meant for students, you need a job. Make a LinkedIn account and start connecting with tech recruiters. Most Fortune 500 companies hire junior engineers via agencies, which will make you stand out among the hundreds of applicants applying through monster/indeed/etc.
Most interns get paid. We have career fairs at my school every semester and I don't think there's any company there that doesn't pay for the internships or co-ops. 
I appreciate the enthusiasm but I don't think I want to be responsible for someone moving to a different city just for an internship. What if it didn't work out? 
Use a Scanner: http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html And (simplest way, not necessarily the best) in your main ask for a first name, last name, and salary then you can pass those into the constructor. Alternatively if you want the object created first, use method overloading and create another constructor which takes no values (or maybe just the salary value, for example) then use a Scanner to get the values to setFirstName, setLastName, etc.
I would use an instance of the Scanner class. That's one of the most straightforward ways of getting user input from the keyboard. You'll find a nice discussion about using the Scanner class [**here**](http://stackoverflow.com/questions/17538182/getting-keyboard-input). I'm sure you can find other example uses of this class by searching online.
Well is worth the experience, so how does the technology stack looks like
Yeah, what the previous commenters said about the scanner class, it's pretty useful, but not necessarily the reason why it's throwing errors. My best guess is that the program is throwing errors because A. It doesn't know what type the nulls are, and B. You used 0 instead of 0.0. I haven't used Java in a long while, but my first guess would be that it's trying to possibly find a constructor that takes (object, object, int) or some variation on that, instead of looking for string, string, double. I think the easiest fix would be if you NEED the defaults in there before asking for user input, either use empty strings ("") and specify 0.0 so that Java knows "Okay, I'm looking for a constructor that takes two strings AND a double, there's no question about the types given to me", or the second option (my recommendation) is to define default constructors (no parameters) that set those defaults for you (for which you could actually use null directly, instead of resorting to empty strings).
Hype is the antithesis of enterprise - reliable and proven beats hype every time
What school did you graduate from. I live in the DC metro area so I could possibly point you at the right places.
Cloud was new ten years ago. Now, its established and safe. When Microsoft has a large offering in a certain area it's pretty likely that enterprise will be happy with it.
&gt; With JSF most of the work is done on the server side. With modern JS/HTML5 apps, most of the work is done in the browser And guess which approach your customizers on their mobile devices with their almost dead batteries prefer? 
Native apps?
Oh yeah X forwarding is complete shit, even over an in-network host my mysql-workbench session groans under the weight of a 97 table schema. But sometimes all the desktops at work they give you are stuck on a distro from 2006 and you have to have the sysadmins spin up virtual ubuntu just so you can use a gui and IT WON'T MAKE YOU BITTER AT ALL
&gt; So yes, frameworks like AngularJS are on their way to replacing JSF(as they should) Just like RoR, GWT and a bunch of others would replace JSF (as they would)? GWT is walking on its last legs, RoR isn't doing too well either, while JSF is still going strong after more than a decade. There's official support available (for those companies who care about that) for JSF 1.2 (ancient version from 2005) till something like 2022 or so. It's just as with the "Java is dead" stories, that have been going on for over 15 years now (i.e. as long as Java exists). Every time there was a new fad language out there: Oh, the Java killer! Well over 100(!) languages later and thus some 15 years later and Java is still one of the most widely used languages. 
Yes, I know Java (Desktop, Swing, Android all of them). See: https://code.google.com/p/zipeg/ (a bit obsolete - from 2006) And I play ice hockey 5 times a week also coach kids and referee. And I know how painful it is just to organize the pickup game. I am a user of TeamSnap for few years. You can send me email at L e o dot K u z n e t s o v at gmail 
Sure, that an alternative indeed. And guess what, that's roughly 40% Objective-C (probably soon Swift) and some 50% Java ;) But when the choice is made for a web based app (or when there really is only a web based app) then doing most work server side is very often a win for users. Some developers are like: Wow! We've got all those untapped and idle computing cycles out there! Why spend time on OUR servers when we can delegate it to THEIR devices! This will mean our app is infinitely scalable! Users will love us, and our manager will love us too since they won't have to buy servers anymore! WIN! PROFIT! But there are many issues with this thinking. Users have widely varying devices and widely varying amount of CPU cycles sitting idle, and both on desktop and mobile, thanks to incredibly sophisticated sleep modes users don't think of CPU cycles just sitting there doing nothing useful (sitting in spin locks or so). On the contrary, every time a web site thinks it's a win to offload computations to the clients the CPU gets pegged and can't go to sleep. Fans will spin up, the chassis will get warmer and users increasingly know their energy bill will go up, and yes at mobile as said the battery will drain, fast. No win win at all. Remember that servers most likely have warmed up caches and can serve a given page much faster. The client's device is much more likely to have cold caches, and will have to do a lot of work for a single request that other clients elsewhere have done as well. Additionally, when you realize that rendering data into JSON or XML is a kind of rendering too, and that the client has to process and render this data to HTML, you'll see that the net effect is that more computations are done and more cycles are wasted globally. Already websites will have to state minimal system requirements. Crazy? Well, a reality if you think in term of offloading so many stuff to the client via Javascript. 
Are you in ct? I'll try to get you an internship at the company I work for. 
Going rate at my place is 20 an hour for an intern. 
&gt; It's a kind of fallacy that you need Angular and similar frameworks for that. No you don't ***need*** them, but they certainly help a lot. &gt; Going back as far as the mid 80-ties I build applications that had their UI completely decoupled from the back end I get it the concept is nothing new, but again you can't live in the past. Just because you could do it without angular doesn't mean that you shouldn't embrace it. I am talking from experience when I say that after ditching JSF in favor of angularJS, my UI headaches are pretty much gone, and my UI related productivity has grown tremendously. I get a lot more stuff done faster and easier, without sacrificing the end quality.
JSF can use HTMl 5. It makes no sense to say HTML 5 is replacing JSF.
As I mentioned in another comment, JSF and HTML5 are not mutually exclusive. The main difference is, do you want to do most of the view work on the server (JSF) or client (HTML5). The answer can be: a mix of both.
What would be the advantage of JSF generating full client-side MVVCs? Are you talking about the client parsing .jspx files and rendering the UI?
Have you looked into google web toolkit? it allows you to write java for both client and server, sharing some of the code (such as common classes) between them, and the javascript it produces is highly optimized, much better than handwritten javascript. Plus it takes care of browser quirks for you. 
How do you define 'winning that fight'? If you mean more devs using angular, probably. the number of js vs java devs is high anyway, so that will translate to a higher number of people using angular. I personally did a project using angular, changed my mind halfway when I discovered gwt, and rewrote it using gwt. the difference between the angular version and gwt version (same project) is night and day.
how is gwt walking on its last legs? there were two versions released this year and another is planned soon. the development is going healthy. plus have you seen gwt's [2013 report](https://vaadin.com/documents/10187/42fbbec4-51c8-426b-8aa8-fe46129353a3) and compared it with its [2012 report](https://vaadin.com/documents/10187/b74a2275-232d-4d55-9158-fad1c8da5230)? Its clear that its dev satisfaction / numbers have grown in that year, and are likely to grow more this year when it adds java 8 support. is there any other project out there where 90%+ of devs report that they are productive or very productive?
It's a fad serverside, and single page applications, and all those "non intended uses".
&gt; If you mean more devs using angular, probably That's pretty much what I was thinking of, yes. More mindshare and more developers, and more developers because more mindshare. Like so many things in the JavaSCRIPT world, technologically "better" doesn't mean winner (usually far from it) ;)
I can second learning Jave EE editions and learning about both web apps (servlets, jsp), a web framework (wicket, etc), some kind of web service (JAX ws or rs are both good to know). As for books, I agree on Effective Java, one of the best books out there. Pick up Head First Design Patterns as well, it breaks down some of the most highly used patterns in an effective manner that's easier to read. As for interviewing, make sure you study up on sorting algorithms, code problems with how to do worst and best case (most times worst case will be like n^2 or n^3 algorithms, and then using datastructures or other cool things to make it quicker). Know the differences between sets, lists, trees, etc. What's better and why. Here is a good (but old) video series with some lectures on data structures. http://www.youtube.com/playlist?list=PL4BBB74C7D2A1049C. there is a more recent one, but I haven't viewed it myself.
Yes, it is happy to go up to many 100s of GBs. This is where it shines. Now you need to be able to generate garbage at a slow enough rate it can keep up. If it is making 100 GB a second, you will outrun the GC threads and be in a bad situation. But for your normal app with a giant heap but only normal rate of GC generation.. it kicks BUTT. Q: Why do you have 100 GB in heap? Can you move some stuff to off JVM storage? In general, the smaller heap the happier you will be in the end.
Yes, but JSF based UIs still need a container to run. I can literally spin up an Angular frontend in a web browser without installing *anything*. (I may have to flip some switches to allow local javascript to work properly, but no installation necessary.) (OK, so the web browser was probably an install... but you needed that for your Facebook reading anyway.)
Not only in the enterprise server, I've seen some of my friends converting back to Java because of Java 8 and Spring Boot for casual web service. It's damn too easy to code and deploy a REST backend on it. The functional part of Java 8 is also interesting features that attract those with bright mind.
Start out with reading books, reading internet tutorials and watching youtube tutorials like Derek Banas' channel. When you've become fairly familiar with the concepts, start making your own small projects. I think making games is a good way to learn, because it can be motivating.
Unfortunately JAVA cannot call COM any easy way. There are some bridges like this one which allow calling COMs but in this case you need to first expose your methods on .NET side as COM and register in the system and next use them. With this solution you just copy .NET dll as they are and use them directly from JAVA. I would be afraid of making step backward and moving back to COMs to call some methods... And I can't imagine using whole WinForms or WPF namespaces through COMs honestly ;)
I've got a reasonable understanding of both the .NET and Java side of things. If you're fluent with C# then Java won't be a problem, these days (as long as you're using Java 6/7/8) they are very similar apart from C# having LINQ, inferred types (var keyword) and a handful of other things. Immediately look into the Apache Commons and Google Guava projects. They shore up some of the annoying difficulties with Java very succinctly. Your Maven problem you'll have to expand on and provide actual error messages. Maven is a bit of a beast but as long as you're not doing anything too funky it tends to *just work*. Eclipse has a workable Maven plugin and I think you can create a project based on a Maven POM file. My general workflow when I have to maintain a new Java/Maven codebase is to get the latest code from SVN/Git then tell IntelliJ IDEA to create a new project from it. If the codebase is sanitary then I generally have a working project that compiles. As an aside, IntelliJ IDEA is your homeboy. Get the free community edition if work won't pay out the measly $100 for a license and you won't regret it. It's just so helpful I can't begin to describe it. Try it, you will understand. Many organisations have an internal Maven repository allowing them to publish internal libraries that are under development and allow other teams to use them. Find out if your company has something like that.
&gt; Yes, but JSF based UIs still need a container to run. &gt; I can literally spin up an Angular frontend in a web browser without installing anything You need to have a computer, and an operating systems as well. Seriously, if downloading TomEE, Tomcat, whatever and unzipping it is somehow an issue then I wonder about what kind of developers we're talking here.
&gt; is there any other project out there where 90%+ of devs report that they are productive or very productive? For Angular it's probably 300% or 400% or so. (meaning many more developers claim to be very productive, without actually using it, but it's just fancy to say at the moment that Angular is productive etc) 
Just a slight correction on the bit about the license for IntelliJ - &gt; if work won't pay out the measly $100 for a license and you won't regret it. The [license comparison page](http://www.jetbrains.com/idea/buy/license-matrix.jsp) points out that the personal license (which costs $200 - though there are not infrequent sales) *must* be purchased with one's own funds that are not reimbursed by the company. I'm not sure how they would know or enforce that bit, but its there. If a company buys it, its a bit more expensive *but* it is a concurrent license allowing for developers to come and go. And all that said, its a superb IDE (I've got it and haven't regretted it at all). One can always start out with the 30 day trial and then get hooked.
As far as Maven goes if you use Eclipse or IntelliJ just use the project wizard to import the project. Make sure you select maven project. It should pull in all of the dependencies for you if they set it up correctly. If you only have 8 weeks you might have to lean on their Java experience a bit but use your architecture knowledge to make sure everything makes sense. Ask which frameworks they chose and why the chose them. Ask what some alternatives are. Then go home and research them. Searching for comparisons between the frameworks they chose and the ones you have used in .Net may help. 
Clients, mostly.
I'd love to see anyone use angular for anything complex. I had an app done in angular, which experienced regular lags / slowdowns. Once you have a bunch of components using ng-repeat and using two way data binding, it slows down to a crawl. Completely unacceptable way of building any mobile html5 apps. Contrast that with gwt which produces highly optimized javascript. My html5 app runs like a native app on mobile.
Thanks for the correction, I bought it for $100 during a sale and must have assumed that was the cost going forward. It's tax deductible in my country so you really can't afford not to buy yourself a personal license. It's like a carpenter forgoing a skillsaw for a handsaw because he's too stingy.
I've just installed the latest Eclipse (EE version) on my personal machine due to your post and it comes with the Maven plugin by default.
&gt;do you use the "set" instead of the "get" for example System.out.println("Enter a string"); a = in.nextLine(); salaryEmployee.setFirstname(a); Yeah, pretty much just that! Keep in mind, you'll probably want to include some kind of error checking and you can make it a lot fancier if you like, but the general gist of it is get a value, then set that value on the object you created.
Hmm that's very interesting. Did the problem stem mostly from development headaches or were there performance concerns as well that eventually led you back to JSF?
Don't worry too much, depending on your role the manager's job is more focused on personnel handling, some tech guidance and then who to talk to to find out something you may not know. Good coding practices overlap between many languages, and as you seen motivated to succeed in your new role - I think you will quickly find the java specifics on the differing practices. As an employee, I more respect those that are open about admitting they don't know than trying to BS to look like they know everything. If you're coming from c#, I doubt it will be too rough of a transition beyond the build system. Even then, most of the team leads in my area admit they only know enough about maven to get by and reference other systems in the department for weird maven configurations.
I thinks we are talking about apples and oranges. Javascript can handle frontend even today, but replacing Java sounds a bit too much. You need all those nosql databases, performances etc. I mean one can't bring all power of Java in scripting languages.
Maven has loads of archetypes including a standard java servlet set up. Dependencies are specified by the group id (usually the project or company name) and artifact id and a version number. You can specify the repositories to search if your company hosts them internally or it uses the main public repos by default. 
Websockets is its own spec. But they have a jira tracker running. If there's anything specific you can report, please help us all and report it ;)
I dunno, we always demonstrate at the client using a laptop. Never encountered a client where you couldn't connect the laptop to some presentation screen or simply sit with the client behind your laptop. In fact, I far prefer working with my own system then with some unknown OS the client may be using for presentations (of course the server is almost always known, but what they use at their office isn't)
Why are there so many typos and exclamation points on that page? 
https://incubator.apache.org/odftoolkit/odfdom/
Probably Objective-C, or maybe Apple's new language, Swift. Objective-C and Java are a good combination to have for getting into the smartphone app market. Some people recommend Scala. Scala is neat but it's syntax can get so complex that it can make large projects very hard to read. I worked on a industry level Scala project for a year and it was hell. Not solely because of Scala, but it was a contributor to the overbearing complexity. Scala + OSGi + Camel + Akka Actors = productivity to a crawl.
In the java family Groovy is a good one to be familiar with. I tend to use Python for a lot of things outside of that. 
Yes, but these methods are extremely limited. There's even only a single method to convert from an Enumeration and this method converts to an ArrayList. You could call .iterator() on the ArrayList returned by this method to get an Iterator, but iterating over all elements in an Enumeration and storing them in an ArrayList has a few obvious drawbacks when compared to simply wrapping this Enumeration in an Iterator. It's not a big deal to have to write such a wrapper yourself, but as there are still quite a few APIs out there that return legacy Enumerations, it would have been nice to have this basic functionality added to the Enumeration interface as a default method.
I've not yet looked into that api. What are the worst parts?
I wonder why I didn't hear about Scala before. Honestly I was planning to start Python but now I'm seriously thinking about this. Thanks a lot 
I was lucky to have gotten mine in the [End of the World clearance sale](http://blog.jetbrains.com/blog/2012/12/20/jetbrains-end-of-the-world-clearance-sale-24-hours-only/) when everything was 75% off. The [license for upgrades](http://www.jetbrains.com/idea/buy/choose_edition.jsp?license=PERSONAL&amp;#upgradeuser), however, is half of the new license ($99 for an individual user), so you are right there that it *is* the cost going forward.
It's more useful when your client wants to present your app as a seamless part of their own site. This way they can reskin it all they want without having to go through the bureaucracy of product support. They can move stuff around and play with it, because they're really paying for your service level stuff anyway (data retention/capture, business logic)
I took quite a while to find about the scripting feature, because most tutorials make you start programming in an IDE. Just write your simple program in a file: script.scala println("Hello world") and run this command: $ scala script.scala Hello world You can access command line parameter: println(args.mkString(" ")) $ scala script.scala panda world panda world You can also pipe into standard in: println(io.Source.stdin.getLines.mkString(" ")) $ echo hello | scala script.scala hello 
I think Javascript would be a nice complement to your experience.
The functional paradigm in its entirety only pretty recently caught on in industry with the advent of parallel processing. Before that, it was pretty much confined to research. It's still not overly popular yet because a) pretty much all legacy production code today is imperative and b) a lot of more senior developers aren't overly familiar with the functional paradigm and prefer to stick with what they know.
I know that java and javascript are two different world with different logic but is there any benefit if you are a java developer and move to javascript?
If you learned Java then at some point in your career you will be doing front-end web work as well. JS is a very good choice.
Groovy is a good choice because the Gradle build system is used in many Java projects (usually you'll see Maven tho).
it's just javascript, not java-script. lol 1 word In any case, programming is programming. Alot of what you will find is alot of business programs are moving to the web. Java is very good at backend web programming. If you get into this side of things, then you'll need to know Javascript at one point or another, unless you're strictly backend for your entire life. You can also use Javascript for the backend using things like Node.js. Below it looks like you're interested in Scala. If you want to mix all 3 check out http://www.playframework.com/ and start building some websites.
If you want to be employable, Javascript. If you want to expand your horizons Clojure.
If he's a CS Student, he'll get plenty of ASM and MIPS. 
I kinda doubt that. The interns we're seeing lately have very little low level experience, if any. We burn through hundreds, so I feel like I have a pretty good view into what's coming out of colleges these days. 
This sounds like a lot of Python projects I've worked on. Easy to get stuff up and running and to prototype. But fails miserably on larger scale projects and longevity is terrible. Not to mention library and package management is a hot mess. 
Not much besides slightly similar syntax. I only say it's a good complement because you have a lot of back-end oriented languages and a front-end language would be useful to know.
&gt;The interns we're seeing lately have very little low level experience, Well, at least they have plenty for most jobs then! :) 
As I pointed out, I'm not recommending it for its application in landing a job. Outside embedded systems, or really time critical apps, you'd probably never user it. However, the precision and attention to detail that assembly requires will improve your skills, and teach you good habits that apply across the board. 
C# is a cinch to learn if you are familiar with Java. Took me less than a month to learn and a few more months to master. Having Java and C# knowledge gives you a wide range of job opportunities, though you will not be developing video games or databases with it. If you want low level, complex programming work, you have to learn C. 
I'd answer this with a couple options: 1) Another JVM language - you're in the Java ecosystem, you could try out Scala, Clojure or Groovy and use all the same tools you're using now. These languages can access Java code easily too. 2) C and/or C++ - this will help to see a little bit more about what's happening under the hood with Java. Note that Java itself is written in C++. 3) Javascript - you're going to use it sooner or later as you don't have much choice on the front end. Like C++, it will give you an insight into a different way of doing OOP than Java. Also like C++, it lets you write non-OO code too. Unlike Java. 4) Some other popular language like Ruby, Python or PHP. 
Different languages in no particular order. **Python / Ruby**: Because these are great languages for building tools around complex applications. Also great for quick web apps. **Go**: Feels like C/C++ with modern thoughts to making the developers life easier. Has a different perspective on how to compose objects, concurrency, and many other things. **C/C++** Because sometimes you need a native lib to speed things up. And perspective of what came first. **Javascript** Because NodeJs &amp; frontend development is taking over the world. If you want to dismiss it, then do so with an informed opinion. And realize that at some point in your career, love it or hate, you will need it. **C#** Very close cousin to Java. Also nice to know the enemy, so to speak. Feels like Java with many of the rough edges cleaned up. **Obj-C** Knowing Java gives you one less hurdle to be an Android developer. If this is a route you want to go, learn Obj-C as well so you have an understanding of iOS apps as well. Even you don't focus on them. **Groovy** Very similar to Ruby (and Python to an extent), but with it being build on the JVM, it integrates very nicely into Java applications. Very easy to add a scripting side to an app using Groovy. **Scala** Another very popular JVM based language with many functional programming aspects. Also strongy typed unlike Groovy. **Clojure** Lisp on the JVM. Like all functional languages, has many vocal enthusiasts. Just a note on JVM languages. The JVM is, in my opinion, the most amazing part of Java. Threading, GC, portability, stability, etc, are second to none without compiling to assembly. The Java language itself is full of warts. All the other languages build on the JVM help with those warts while getting all the benifits of the JVM. Many times, they help usher in changes to the language itself (like invokedymanic). It is always great to know of them and their place in the ecosystem, if not be proficient. In the end, don't be a Java developer. Be a developer that currently focuses on Java and knows X, Y, Z. Whatever you choose, it will be great because it expands your perspective. 
I have to say, C can really be eye-opening. Some of the things you take for granted in Java (e.g. strings, arrays) are not quite so simple. I think it's definitely worth the time to work through Kernighan and Ritchie's book.
Yeah kind of the same with JetBrains's Kotlin. The syntaxes of Scala and Kotlin are interesting but just funky in some areas which just leads industry people to default to Java (though Scala and Kotlin are both very much worth checking out). Plus, you know, the paradigms and stuff are different, too...
Try "Java Programming" Author: D.S Malik or try downloading the "NetBeans" 
Huh I edited that and thanks for the advice
And if you want to gain a sense of superiority over all other programmers, learn Haskell.
You should learn python, javascript, c, and c++ to some extent, at some point. Read a bit about each and see which one you think sounds fun. (javascript for websites, c for OS-level stuff, c++ for graphics, python for scripting and general purpose stuff). (Not that this is the 'right' answer, but it's a good one.)
I'd suggest Clojure for the following reasons: - It's a Lisp. Every serious developer should learn at least one lisp. It's an enlightening experience. See: http://www.paulgraham.com/avg.html - It's a functional language. It is good to learn a functional language since this will complement and enhance your OOP skills. You will get relatively little intellectual benefit from learning more OOP languages at this point since you already know a few. - While it is *completely* different from Java as a language, it runs on the JVM and you can benefit from your knowledge of the JVM / tools / library ecosystem. - It is awesome for concurrency and data processing. Which are hot topics. - It encourages a very productive REPL-driven style of development where you interact with the running programming. This is a great skill / technique to learn. Clojure basically means you can tick several boxes at once: Lisp, Functional Programming, JVM language, concurrency, interactive developement. What's not to like?
You can combine the two, and go for ClojureScript :-)
Well, it is only natural - you don't pass control back to the main loop; the UI doesn't get the chance to update. Rework the code so that you use callbacks.
I evaluated JavaScript on the server recently (node.js) and decided against it. Reasons: - Too many issues with JavaScript as a language. Weak typing, callback hell etc. - Really poor support for concurrency. You expect servers to be able to handle lots of simultaneous load, so good concurrency is essential. - If I wanted a productive new language on the server side, it makes sense to go with Scala or Clojure which are (IMHO) much better languages than either Java or JavaScript - Whatever you think of Java-the-language, the JVM rocks as a platform. It will be *very* hard to match it for serious projects any time soon with any other platform. The only real advantage I saw with JavaScipt on the server is that your client side devs can share skills with server side devs. That might be OK for building a simple web-app for a startup, but it isn't very compelling in the big enterprise space where there are much more important considerations.
i got your point ... but the point is where should i be updating it!!!! please can you help with a better idea
Maybe try putting this loop on separate Thread via SwingWorker.
If you want a modern low-level systems programming language, try Rust. If you want a scripting language, use JS. These should be good enough. Of course if you are looking to do native mobile app development, then you have c# for windows, Swift/Objective-C for iOS and... Java for android.
Java, Javascript, JSP, HTML
In addition: **Swift**: Apple's new language to replace Objective-C. **Rust**: Modern lower language, like C++. Don't make anything big in it until version 1.0 though, its still changing quickly **D**: Similar to Rust but much more closely resembles C++.
Clients can adjust Java code just as well, can't they? I don't see the big difference.
webapps They figured out I know javacript, and now I can't escape this jquery front end webpage niche :( No one else wants to deal with this dynamically typed insanity. They still pay me for writing java though :P 
colleges aren't popping out thousands of reasonably cheap mediocre scala developers a day either. Pretty much every scala developer I've seen is an ex java guy. So they're coming into a completely different paradigm maybe 1-2 years experience at it at most, and they're not really comfortable with it yet.
This is the best idea, you should definitely consider it. Virtually all the other languages mentioned are managed and GCed. If you want to broaden your skillset, this offers the most interesting contrast.
Why not Scala?
You don't feel as superior, obviously. 
Sure, read this: http://www.leepoint.net/notes-java/other/10time/20timer.html
If you take a look at big and modern software companies that solve unique problems, it doesn't look bad at all. Twitter, SoundCloud, Foursquare, Firebase, Amazon, Walmart and many others use Scala for their backend. Also I see more and more job postings for Java which mention scala experience specifically (not clojure, not groovy) as a plus. Of course your typical webshop will probably still be using ruby on rails or php, so it looks like it hasn't caught on. 
A copy of my comment on the blog, as it didn't persist my generics: Not bad. It seems that you're still finding your way around in Java, though. Here are a few remarks on how to make the code better and/or the class more useful: - Since Java 7, you really shouldn't use the `File` class if you can. It's not bad or wrong, but there are better alternatives. Read up on Java NIO2, or simply use the `Path`, `Paths` and `Files` classes, they're better at many things. Change the constructor to accept a `Path` instead of a `File` - `new HashMap()` should really be `new HashMap&lt;&gt;()`. A minor thing, but still, get used to it. - Your `FILE` is not a constant, it should be named `file`. Or, rather, `settingsFile`. - Why is the `read()` method public? It shouldn't be! - Why is it `void`? There's no reason to do it that way. Simply make it return a `Map&lt;String, String&gt;` and construct the whole map in there. If you can remove any side-effects of a method, do so! Here the unnecessary side-effect is changing of the `settings` field. If you remove this side-effect, the method will be suddenly become a `static` utility as well! - `public String[] get(String[] keys)` should be `public List&lt;String&gt; get(String... keys)`. See some discussion on why to prefer `List` over arrays, e.g. here: http://eclipsesource.com/blogs/2014/04/11/3-good-reasons-to-avoid-arrays-in-java-interfaces/. The `String...` is a var-arg and is very useful in this place, too. - The `save` method should also be `private` in my opinion. Make it save the file on every change, probably? It makes the usage so much easier. If you're worried about the performance, don't be. - Exception handling. But you probably know that :). Uh, and more, but this is a good start. I'll gladly address any questions.
Good place to start: https://www.youtube.com/watch?v=Hl-zzrqQoSE&amp;list=PLFE2CE09D83EE3E28
I almost forgot. For something a little bit stronger, [read about the `java.util.prefs` package](https://www.google.com/search?q=java.util.prefs). You could even extend it to save the prefs to a file, as you'd like. And the `FILE` should not be `static` (what if you wanted to use several setting files in one application?) and should be `final` (you can assign it in the constructor if you didn't know).
I'm alway surprised when good suggestions like yours get down voted.
Relevant http://bodil.org/hipster/
I already got the stuff. But thanks anyways!
Syntax is noisy, slow compiles, the added features are a lot less useful than you'd think. 
I did both in college and don't really remember much that I still care about. 
Did I read this Wrong? There are a ton of video games made with Java and C#... 
Oh, one more thing. You might want to have an interface `Settings` with the `get()` and `change()` methods, and a `FileSettings` (or something) that would be this class which would implement the interface. This enables you to implement `DatabaseSettings` and `WindowsRegistrySettings` etc. in the future if you'll ever need them.
He said he mastered java in 'a month to learn and a few more months'. 
I always found the CPU pipeline to be interesting. it explains a lot of lower level concepts like the need for branch predictions and how cranking up the clock rate can mess up execution. 
Yeah I taught myself Java so there are some spaces. A few books and a whole lot of google. I'm only 17 so no education or work related experience with Java and this is one of my first sources to be public. * Thanks for the info. I changed it. * I used to write it out as HashMap&lt;String, String&gt;() but then NetBeans started flagging it and suggesting I leave it out. It works and I save a few characters when writing. Is there any reason to write it there or is it just about the readability? * FILE used to be a constant and these are the remnants of it. Thanks for pointing that out. * that's another remnant of a previous version * I changed it by having each level of readNodes() return all info it found to the previous one and the mother-method return it to the read() method which returns it to the caller. * Thanks for the info. I changed it. * I was indeed worried about performance but if you say it's okay I'll trust you. * Added some exception handling. Díky za opravy
Není zač! `HashMap&lt;String, String&gt;()` gets flagged, because from Java 7, you can write `HashMap&lt;&gt;()` instead. It's called "diamond operator". For an example of why you should not just leave it out, [look here](http://stackoverflow.com/questions/4166966/what-is-the-point-of-the-diamond-operator-in-java-7). About the performance - it might be a problem, but most likely it won't be. If you'll need many updates, you should do it via the bulk `change()` method. The point is that removing the `save()` method from the interface removes a lot of complexity of the users that will (potentially) use your code. With `save()` method, I might also expect `isChanged()` or something similar. With the common usage of the code, the performance will be just fine. It's possible to misuse the class, but for the usual thing, it will make things better. Anyway, that's up to you. The point is - _always_ aim for readability / usability first. Then, if something seems to be problematic, measure (via a profiler) it and fix it afterwards. I'm leaving now for two weeks, will take a look again afterwards and will try to provide more ideas. Good job!
Closure 
I think that writing code and doing a code-review afterwards teaches people so much! Also, you code is pretty good. If you needed anything else with any other code and/or Java (or computer science) concept, PM me or comment here, I'll see what I can do.
Java 8, as cool as it is, puts a lot of people off. If you want more people to use your library, then I'd suggest downgrading to 7 until 8 is more widely adopted. I use Java 8 too, but only in private projects currently. 
Hijacking this so you can see it. [JODReports](http://jodreports.sourceforge.net/) is the library you are looking for. We are using it in our company for enterprise purposes. Basically you make a template in .odt format that can get converted to doc,rtf and few other formats. That beign said it is easy to change a template. All you need is openoffice and basic word skill. 
There are tons of games written in Java (mostly mobile games, but also stuff like Tribal Trouble). There are also at least two major databases written in pure Java: HSQL and H2.
Definitely java first, then I would go with C. Java gives you the OO experience you need, C gets you closer to systems/OS programming. Besides, if you learn C you must learn pointers, and that is crucial to a deep understanding of computer science.
C# is awesome, but very similar. Chances are you might even drop Java in favor of it for your own stuff... it will also give you job oppertunities surely. But here's the thing, if you want to be more competent it is better to learn something new than more of the same. And what you need to learn to be more competent at programming is functional programming, and thusly, a functional language. Part of the reason is that it will make you a better Java programmer too. Haskell is a good choice to learn, and people rave about it. Clojure is too if you want to stay within the JVM ecosystem (but again, I recomend something different...), or Scheme for something outside.
C lets you understand how the world really works... it is super important! Understand C and you will undertand "programming". After tht it's just syntax which can learnd in a weekend. 
1 year of Java as a student is still not that much. Maybe you could have a look at Java EE and frameworks like Spring and Hibernate? I think experience in those fields could be useful if you are worried about employment.
You use &amp;&amp; when you should use ||, but you don't even need the first if statement u can just have the else at the bottom of the other if blocks
If you put a while loop, around the input, thats only active when the input isnt equal to the 3 valid inputs you specify it'll loop that part of the code until the input is valid, then move onto the rest. You can end the statement with an if statement printing if the input is valid. Also as the other poster said, use || instead of &amp;&amp;
Programming languages are more or less the same, people are not. By choosing a language, you choose a community.
o wow, the &amp;&amp; was a complete my bad moment, but for the while loop how would i word it? while(employment.equalsIgnoreCase("Hourly") ||...) { //do this } 
You never know :P
A ! In front of it since you want to stop the loop and resume the program when the user inputs the right string value. Can't type it out properly atm as I am on my phone EDIT: in front of every employment.equalsignorecase, use a ! to invert it
Java bindings for Qt already exist: QtJambi, although I've never used it.
There's no inherent reason why you can't provide a different implementation of common widgets for each major OS. SWT is already a proof of concept for that. The issue with SWT is that its dated, and doesn't seem to be in too much active development any longer, and has rough edges (like no auto resizing scrollbar). I'm calling for a modern / fresh take on SWT.
Personally, I think most pure UI-based apps are dying a slow death, on all platforms (except maybe those on OSX App Store) There are some brilliant web-UI frameworks out available now that provide a functionally-dense cross-platform experience, that compete well against native-UI frameworks. A great example is SmartGWT, which I've found to be extremely powerful and full-featured.
It really depends on what you're trying to do. I feel like Android throws a lot of layers on top of Java that makes it somewhat tedious to learn programming. But there's some things in Java that isn't necessary for Android. I'd say go through a book and learn Java for everything except Swing GUI and you should be able to hit the ground running with a simple android dev guide. 
FYI - Use System.getProperty("line.separator") rather than adding in more System.out's, it will make it simpler to browse later on. (You may be able to remove about 1/3 of your code) String newLine = System.getProperty("line.separator"); System.out.print("Welcome to the Payroll System" + newLine); System.out.print("Are you an Hourly, Salaried or Commission Employee?" + newline); System.out.print("Enter your type of Employment: " + newline);
&gt; I know this would be a huge project, but you could start small, with just &gt; the basic widgets like Windows, labels, textboxes, buttons, combo &gt; boxes, checkboxes, and radios. Once that's done, I think this would gain &gt; traction and gain a life of its own. In order to gain traction, library needs to be full-featured enough to create a half-decent application. Your proposed "version 1" feature set isn't nearly sufficient.
I think once you show a proof of concept with those basic widgets, and show your new API, people will start to contribute to the project.
Qt widgets are not native ;)
or use System.out.println?
The source code doesn't always have a new line terminator when using print. Print and new line where applicable would be more consistent that sometimes using print and sometimes println.
Thank god Indonesia is a big country: http://en.wikipedia.org/wiki/Jambi Otherwise we would have run out of names five years ago.
What native widgets are you looking for? The UI components in JavaFX are quite sophisticated and there additional projects out there creating others. Find them here: http://fxexperience.com/ Java 8 includes a native packager which can package full installs of your apps now including Java itself for Win/Lin/Mac. http://docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm 
&gt; Java 8, as cool as it is, puts a lot of people off. whom? 
not an expert in this, but following a few links around and googling a bit it appears that oracle fixed this in java7. apparently you can pass the UNICODE_CHARACTER_CLASS flag or use (?U) in your regex. i haven't tested it because it wasn't a problem for me so far, but the javadoc for Pattern.class says this: &gt; Predefined Character classes and POSIX character classes are in conformance with the recommendation of Annex C: Compatibility Properties of Unicode Regular Expression , when UNICODE_CHARACTER_CLASS flag is specified.
Now you mentioned it, can you please tell what field they are used in? Especially spring which i heard a lot about it
Depends where you work. On one side is a lot of legacy BS (but that makes gobs of money) built on an old Struts like framework. The other side is kindof running along the other side and patching capability holes so the development process isn't as organized but the stack is much more modern -- RESTful APIs built with Play!, RabbitMQ based message queues, I've even been playing with vert.x and Meteor here and there. Not to mention mobile stuff. It depends on the capability hole to be filled at the time. Right now we are in desperate need of report writers with experience with Jasper. The way we use it is very generative and Java heavy...
Standard java skills translate to lots, including android. However learning java specific to android may not translate as well to as many places. Of course, if you chose to go straight to android learning and you delve into why you're implementing the things they suggest - you'll get a pretty good handle on some good java concepts. I didn't at first with android and when I translated to java work for enterprise, I had to go back and get a more in depth understanding of some of the concepts.
Dig into Java first, especially the standard libraries. So yes, start with the basics (variables, arrays, functions, classes, all the regular stuff.) And then go beyond that and learn the Java SE libraries by example, especially in regards to collections. I wouldn't waste your time on Swing, Java FX or too many of the Java EE tools, but there's a lot of value in the Java SE stuff. If you don't learn that stuff first, you won't know how/why to use it when you need it in Android (and you DO need it in Android.)
awesome, thanks for this and the other answers guys. I've been looking up some teaching resources online to kind of help guide me through the JAVA stage for now.. I'll keep an eye out for Swing GUI
Isn't this basically [Bootstrap](http://getbootstrap.com/)?
lines 10 - 16 should be done using either println or \n escape code. Google escape codes java (they're really helpful) System.out.println("Welcome to the Payroll System\nAre you an Hourly, Salaried or Commission Employee?\nEnter your type of Employment: "); String employment = input.nextLine(); System.out.println();// creates a new line note that on what was line 3 now doesn't have "" in the (). If you just want a new line do System.out.println(); or if you feel like you don't want to use println use the escape code System.out.print("\n"); also in text based programs it saves a little time to do import static java.lang.System.*; if you do that then you never have to type System."something" so instead of System.out.println("sfagreg"); System.out.print("sdfsdfg"); Scanner scan = new Scanner(System.in); you can do out.println("sfagreg"); out.print("sdfsdfg"); Scanner scan = new Scanner(in); I am a beginner too computer science major in high school(I'm going into sophomore year now so we learned these techniques. Don't forget to use Google it's help me a lot, and this is a good place to get help to. Keep coding and keep learning :) and don't be afraid to ask questions. that's how you learn.
Whenever someone asks this question, they always get a long list of what's trendy and what's the latest fad. "Scala", "Go", etc. If you asked a year ago you'd get answers that are mostly things that you've never heard of today, because they stopped being trendy and people moved onto the new trendy thing. Occassionally they stick around, but mostly they disappear. For work, once you've learned java, the only other language your job usually really cares about is javascript. Java runs on the server - javascript runs in the browser, it's not a matter of one or the other, if you're doing web development you do back end stuff in java and real-time page manipulation (sliding menus, calculating values, etc) with javascript. And obviously you need to know html/css if doing web development. Past that, it's not a matter of languages as much as it's a matter of frameworks. For javascript, JQuery (and JQuery UI) are widely used. For web development, the most popular frameworks are either Spring MVC or the most recent version of J2EE. And understanding sql and databases is very pretty important to. If you planned to get into Gaming, the requirements are different - C++, DirectX, and...I'm not sure what else as I write web apps not games, but there's probably something else. But frankly, you don't get much professionally from knowing more than 2-3 languages, in my experience. It you want to be able to easily find work, having experience with the frameworks that are widely used is far more important than knowing Scala/etc.
this post have helped me a lot thanks GuyWithLag ... this post is very good and useful for beginers... 
swingworker also works.. this post and GuyWithLag 's post have helped me come out of the problem ... thanks viciu88
Small bikeshedding issue: The captureThrowable method should be named "thrown". This way your code reads: `Throwable t = thrown(Foo:doIt)`
IT'S COMPLETELY DIFFERENT. This one is tightly bound to the business logic container. In all seriousness, couldn't the PrimeFaces examples be made to look prettier? Bootstrap is very cool looking out of the box... it's not that hard to emulate it if that's your thing. Slick pagination example in bootstrap: http://getbootstrap.com/components/#pagination I guess what I'm saying is why does this look like a Swing app?
Thank you for your suggestions. I agree that it's better to stick to a few languages and do not deviate a lot. And thanks about framework suggestions too.
Why not use the cross platform alternative rather than Unix specific? line.separator will return \n on Unix and \n\r on Windows. That's what it is made for. Please don't just blindly use escape characters. And the reason for print over println was due to the source code /r/yabbayoung linked to did not always create a new line, so I was suggesting something that allowed consistency, reduced that amount to write, and gave the flexibility to insert the line breaks where they wanted it.
windows 8 needs to be 64 bit also to run java 64 bit but try over at /r/minecraft please. this subreddit is for java programming.
I'm not asking for help with my minecraft, I'm asking for help with my Java program.. I figured people who program with Java would know Java better than people who build things with blocks..
Wrong sub. Try /r/techsupport Also deleting files as you described doesn't sound like a good idea.
Beauty is in the eye of the beholder, our new showcase has been received critically very well. Anyway if you like bootstrap look and feel, you can use the bootstrap theme of PrimeFaces. http://www.primefaces.org/themes If you like MetroUI, use MetroUI theme or choose one of the upcoming Premium Themes; http://blog.primefaces.org/?p=2515
clean up the indentation in that code for your own sake, and then look into loops. in this case you'll want a while or do-while. http://howtoprogramwithjava.com/java-loops/ the program ends once it finishes all the work you've provided it to do. you'll need to loop before the program ends. if you're looking for someone to spoon feed you the answer, then you're not ready to do them yet. ensure that loops are really what you should be learning right now. look over your current code and make sure you understand exactly what is going on. if you do not, research some more into the parts that confuse you. you should also look over books and other online tutorials/references to figure out a path that you can take while learning Java.
your problem is not programming related. i think its not even java related. Your pc cant run 64 bit apps. you need to fix that problem.
But it can, I've verified by looking at the properties. Every video and website I've come across has told me that's where I can verify it. I've found a few people getting the same error message as me and they say it's something to do with a corrupt file and that Microsoft Fix It has fixed all their problems... 
Very interesting, that's news to me! Thanks for sharing. I've created a feature request for Eclipse to add support for that: https://bugs.eclipse.org/bugs/show_bug.cgi?id=440507
Why do you feel you deserve help from this sub? Your post is a bit like posting to the French subreddit begging for help understanding les miserables. There is a Minecraft subreddit.
&gt;all the while not even having the logic done on the back end because you're so loosely coupled. All the while you keep pretending that this is some inherent advantage of Angular, while I've been doing exactly that for a long time without ever needing Angular (heck, browsers didn't exist back when I first started doing this). How old are you kid? I know every generation thinks the every latest thing in their time is a word scattering, game changing thing that has never been done before. When you get a bit older you'll learn that many times this is not the case ;)
One of our team members was from China. She said I would probably find it easier to learn Chinese that Scala.
it was new to me too :) 
It doesnt seem like you actually have any kind of loop going on here. If you want to do what you're saying above you will need some kind of loop. Again, the link the guy above gave should tell you how to use those so all you need to do is some reading.
Your computer can run 64 bit programs - ok, but that's the hardware side. Did you also check the Windows Operating system you are running? There are 2 Versions of Windows 8, 32bit and 64bit. **Can you confirm, following the instructions of /u/king_of_the_universe, that you run Windows 8, 64bit?** If you are not running a 64bit Windows, you **can not install and run 64 bit Java**
Can confirm that Win8 does the same. Have a Win 8.1 machine and it works as in all previous versions.
searching javascript tutorial for beginners? do you want to learn javascript programming so javatpoint provide the best tutorial for javascript learner in easy language with simple examples.
This is great. I just wanted to say thanks to Cagatay and his team for creating PrimeFaces. It has made my job a lot easier.
You could use something like this here: https://code.google.com/p/chromiumembedded/ https://code.google.com/p/javacef/ Your business code could run in a normal java application that has a REST interface and your GUI/UI run as client application (e.g. with AngularJs, Extjs) in the headles Chromium browser environment. Applications like Atom Editor https://atom.io/ or Lightable http://www.lighttable.com/ use this technique to provide an desktop environment like feeling. 
+1 to that! :)
Typically the database connection pool would be managed by the app server and you can use a JNDI name to reference it in your application. This way you don't need your db connection details in your app. An alternative if you wanted everything self contained in your war would be to have the app itself manage the connection pool and just get the password from an external properties file. 
Totally wrong subreddit. This sub is for JAVA, not Javascript.
I've been using SWT/JFace for 6 years and think it's great for desktop applications. SWT works on mobile and web with [Eclipse RAP](http://eclipse.org/org/press-release/20130215_RAP2.php) Setting up a good build process using a build system like hudson or jenkins prevents you having to do anything manual again.
The External Properties file seems to be much more portable - JNDI isn't supported by AWS for example - but I then get caught out with a portable way of specifying where that properties file should live... What I'm trying to avoid is the idea - that I've seen done at work plenty of times - of just having properties files for all of the supported environments baked into the WAR file directly, so that if you want to support a new environment or change one of those properties you need to re-build and re-release the software. I'm leaning more towards system properties instead, but that could get unwieldily quickly as the number of properties increases...
I don't understand why you're mutating your service endpoint after you start development... I'm 31, but I've been working professionally for 10 years now. I've seen this workflow get used internally since I first started working with WSDLs nearly 8 years ago. Back then we used them for intra-app communication, development workflow hasn't changed much. [Atwood's law](http://blog.codinghorror.com/all-programming-is-web-programming/) converted me in 2010 or so.
You can look at the [source for CommaFeed](https://github.com/Athou/commafeed). He uses a couple different maven profiles to produce a war to run on TomEE (what the developer uses) or on OpenShift (JBoss).
The technique is not based on some external configuration file in which you define the workflow, if this is your concern. The technique is based on a Java library that dynamically provides proxies for your classes; as a result, the proxies perform the asynchronous calls but the code is written as though the calls were synchronous, which may be preferable to see and, in particular, forces the compiler to perform exception checks. However, the use of proxies is explicit in the code. The annotations are used to simplify the creation of the proxies, but they are not a fundamental aspect.
I think it need support for more basic Java types (int, boolean). Using Boolean.parseBoolean and Integer.toString is painful ;)
The technique is aimed at managing the first kind of exceptions, each of which must be handled at the proper place. The exceptions are in fact caught in the thread that generates them. It is just the way the code is written that seems to indicate that the exception is caught in the thread that launches the asynchronous operation. But, in fact, the methods that involve the exception handling are kept by the proxies and run only after the exception has been thrown. This is, actually, the way I would like to specify how asynchronous errors should be handled. That is, the same way I am allowed to specify how to handle synchronous ones.
You can put an external properties file in the classpath of the application or application server, or reference system properties. Then, you can use the [PropertyPlaceholderConfigurer](http://docs.spring.io/spring/docs/4.1.0.RC1/spring-framework-reference/htmlsingle/#beans-factory-placeholderconfigurer) to inject values from the property file into property values in your beans, such as a DataSource.
http://i.imgur.com/9DL3PFm.jpg this bit here? If so, this is where I confirmed that I could download it
Can confirm 
At least try to understand the things you are spamming. Also, read the [reddit rules](http://www.reddit.com/rules/), please.
Can you access the low level OS resources like File I/O from such an app?
There's lots of submissions that ask for exactly this problem. Look through them here or over in /r/javahelp.
Absolutely. So, 64 bit Java it is. Let's try this again: Use the Control Panel, "Programs and Features" to uninstall all Java versions you might still have (best use the search feature inside that window). *Afterwards*, can you check your C:\Program Files and C:\Program Files (x86) for a Java folder? Is there any left, and what's inside it (e.g. how big is it)? Afterwards I would ask you to delete these Java folders completely. Then I would ask you to download the newest JDK because I know that one works, at least on my 64 bit W8. It also won't insult you with Ask-toolbar install options, and it will not install the insecure browser plugin. Link: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html (or whatever Google says when you search for "jdk" - 64 bit, of course) and install it. It will also install a "JRE". I hope this installer does run after all the above measures.
Did you check? Many community colleges will let you take classes at 15.
Yeah, that's true. Absolutely trivial in practice for Weld, but not standardized. This particularly means that it's not possible, or just unknown for CanDI. For CanDI it's not even possible to download separately. It's internally in Caucho's Resin and it's just there. There's not even an individual jar in the distro to be found. With the Java SE focus it may be easier to somehow use CanDI separately as well. You could ask, who would actually need that, and I wouldn't know the answer to that to be honest but still. Another benefit would be that they may have to add a bunch of bootstrap APIs, so even within Java EE you could then manually activate CDI in places where the container doesn't activate it now or where due to some bug it's not activated when it should (request listeners in early containers comes to mind).
[Apache ZooKeeper](http://zookeeper.apache.org) might help you. From their homepage: "ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services."
I don't use sysout so println didn't come to my mind immediately either.
I Googled a bit and found this: https://answers.yahoo.com/question/index?qid=20131220172528AAeEi2R &gt; cannot download Java due to an error message ... Go to Control Panel/System and Security/Action Center. Once you are in the Action Center, click on Security, and then click "change settings under Window SmartScreen". Turn off Windows SmartScreen. Now you should be able to download and install it. 
this hasnt worked either.. i tried a few different versions of java this way as well
DBUtils is exactly what you're looking for. I wrote and maintain [Yank](http://xeiam.com/yank/) which wraps DBUtils and adds some convenience on top.
You could check out [MyBatis](http://mybatis.github.io/mybatis-3/), a more SQL oriented persistence framework which keeps a lot of the good parts of having an ORM (mapping object fields to SQL in a friendly manner) and gets rid of a lot of the bad parts (you are in full control of the SQL). 
is that using a thread per afc.read() ? i've tried reading through [the source](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/sun/nio/ch/SimpleAsynchronousFileChannelImpl.java#SimpleAsynchronousFileChannelImpl.implRead%28java.nio.ByteBuffer%2Clong%2Cjava.lang.Object%2Cjava.nio.channels.CompletionHandler%29) but don't see anything obvious
You are able to change Swing's look and feel to match the one from the OS. - check http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html Swing is still cool, however saf not, please check http://en.m.wikipedia.org/wiki/Swing_Application_Framework
Spring's JDBCTemplates with RowMappers should solve your problem.
FYI, on mobile, I can't scroll across and read the code snippets because swiping to the side loads a new article. 
Java SE support is not the main thing. The main thing is modularity and things that it will bring. On the SE support side, standardization of this feature will force us to add a lot of SPI to manipulate BeanManager from outside CDI and probably have a mutable BeanManager (bean registration at runtime). So while SE support is the visible part of the iceberg, there are a lot implication beneath... 
First, I would go to the libgdx forum for this. Second, there are tons of articles about how to scale for multiple screen sizes. But you need to think about screen pixels and "game pixels" as two different things. 
What have you tried? What does your render code look like? Here are some links: http://blog.gemserk.com/2013/01/22/our-solution-to-handle-multiple-screen-sizes-in-android-part-one/ http://stackoverflow.com/questions/9198932/how-to-deal-with-different-aspect-ratios-in-libgdx
When I delegate work to a thread I pass it an ResultListener object, which is called back through a method "completed." The completed method is passed an argument of type Result(which basically just wraps an object.) The result has one public method "get" that returns the object it has wrapped. Now here is where exception handling comes in. The get method can throw a checked exception. The Result object can be constructed by passing either an object or an exception to its constructor. If you pass an exception, the get method will throw that exception. So in the delegated task you are giving to another thread, surround the task with a try-catch and in the catch simply invoke the observers completed method with a result object constructed with the respective exception.
This. DBUtils is probably the most lightweight library when it comes to SQL. Just give it a connection, a query, the query parameters, and a handler and it returns the result as an instance of your desired class. The library takes care of everything else. No need to worry about closing `ResultSet`s or`PreparedStatement`s. Another advantage is that it is part of Apache Commons and hence long time support is granted.
Post up a screenshot from the java security panel, and the url in the browser you are loading from please.
I took screenshots http://imgur.com/a/bqka2 
http://imgur.com/iWPxtni 
Since you made the changes to the java security settings, have you completely quit the browser, and re-opened it. Just thinking of what could be misbehaving. Also, on my Mac, the only browser I could get the game to run in was FireFox, (Chrome on Mac and Java doesn't work, Safari showed the game, but refused to create the temporary files needed).
I closed and reopened the browser as well as restarted the computer itself, and that didn't work
One more comment. I found a different Java Options page that actually seemed to change the type of game (there are 4 options on this one): http://www.funorb.com/options.ws?game=arcanistsmulti Hopefully this'll kick the problem in to touch. Never played, nor heard of Archanists, but hopefully this'll unblock you.
Thanks, I tried all the options but with the option about microsoft java, the first step is to make sure I have the latest update of microsoft java and that link is invalid. And I have chrome so I don't know how I'd disable sun java like it says. Thank you for the help anyway
&gt; There's no inherent reason why you can't provide a different implementation of common widgets for each major OS. I don't disagree. &gt; The issue with SWT is that its dated, and doesn't seem to be in too much active development any longer, and has rough edges (like no auto resizing scrollbar). And it once was backed by IBM and is still a fundamental part of the popular Eclipse IDE. I can't see an all-volunteer competitor starting from scratch and exceeding SWT any time soon. &gt; I'm calling for a modern / fresh take on SWT. Most modern GUI development happens on the web or (decreasingly) on smartphone SDKs. The newest cross-platform GUI action with commercial support is JavaFX. I see what you _want_ and I agree it would be nice, I just don't see it as a thing that's likely to ever happen. Even if it got some traction, more than likely it would wind up being a poor imitation of SWT/wx/Qt. The odds of a new open-source volunteer cross-platform GUI toolkit suddenly launching and overtaking any of those well established and supported projects seems pretty low. Although I suppose if major contributors to all those projects wanted to work on something new, rallying them might be the best bet in getting anything off the ground, I guess...
Who uses JSF?
&gt; The odds of a new open-source volunteer cross-platform GUI toolkit suddenly launching and overtaking any of those well established and supported projects seems pretty low Its a matter of providing people with a better alternative. May be they won't switch their legacy projects, but for new projects, they may use the new library
or why is it generally preferred
Don't use a word processor to write code. (Even if it does have a text edit feature.) Eclipse is an IDE which is a whole different ball park. It provides classpath managment, syntax highlighting, etc, etc. 
I use JSF. But if you don't, just ignore it and move on. Just like I ignore technologies I don't use but others find useful. 
Java doesn't really have multi-dimensional arrays, instead you have arrays of arrays (of arrays ...). So, if you want to loop through the first level / bracket pair, you ask for "grid.length", if you want to loop through the second, you ask for "grid[0].length" (or whatever entry you want, it doesn't matter, so using 0 would be the best choice). The first asks for the array's length. The second asks for one entry of the first, then uses this entry's length.
hmmm. Let's just say that grid is an array of 'things'. Who cares what they are for the minute. What we want to do is loop over how ever many 'things' there are. We do this by going up to the length of the array. (This works because array's are 0 based. An array with length = 1 will only have a thing at array[0]). Now, once we are looping over each thing in grid, we want to do something with it. Sometimes it is handy to store the single element we are dealing with in a variable before doing any more work, ie, thing = grid[row]. It just so happens to be that each thing we are looping over happens to be another array, so we are going to do the looping thing again. Hope that makes sense.
If you have the choice, use IntelliJ instead of Eclipse. It knows much more about your code and shows this by having much better auto-complete and other recommendations. It will suggest better loop types, lambdas (if you use Java 8), etc., and you can have it change your code accordingly with a simple key combination. It's the better beginner Java IDE, but you can stick to it once you're advanced.
I think what he's saying is the application runs a webserver on the client machine, let's say bound to localhost:10080, and the front end speaks to the webserver over HTTP for IPC, and then displays the results. It is none-the-less not a very good architecture. 
That seems like an unnecessarily complicated architecture with major drawbacks. At that point your interprocess communication goes over HTTP, your application data is always serialized and passed around that way between processes. No thanks, I hope I never encounter this in production. 
not to mention, the anti virus / firewall on your average windows 7 computer would go crazy if you tried to setup a http server on it in the process of installing some software.
Basically we call `afc.read(...)` with a callback that handles read completion or failure. [example](https://github.com/zhong-j-yu/bayou/blob/0.9/src/bayou/file/FileByteSource.java#L192)
i understand that, but under the hood that afc.read() could be blocking a thread. or it could be using something like select or epoll that doesn't block. i just downloaded the src.zip and am going to see if i can step into it in the debugger and figure out what's going on
I've found that IntelliJ complains to much (even over what I would consider minor things), and it doesn't feel right to just go through and disable the warnings.
You don't need \n\r on windows. \n already brings the carriage return down to the new line. (I've only been programming for a year so please do correct me if I'm wrong)
Just have an external classpath entry, and drop properties in there. We're still maturing with AWS, and one of the steps we've taken is that we pull properties from s3 into a local folder and draw from there. Probably not the ideal, but it's a start.
I feel that IntelliJ is more fluid and faster at it. Eclipse also doesn't have Sublime-like multi-caret mode. It's also been about 2 years since I've switched away from Eclipse so I'm probably out of date. 
It depends on what you are viewing it in. Windows has always required \n\r and Unix has always used \n, which is why when you open a readme file that was written on a Unix box in Notepad the whole thing runs onto one line. If you are opening it in an intelligent viewer such as the Java console from within your IDE it is most likely to know what you meant and interpret it correctly, so for quick logging it would suffice, but this is for the CLI which probably won't. This is for the same reason if you open a Windows formatted file in VI on Linux each line ends with \^M. http://stackoverflow.com/questions/12747722/what-is-the-difference-between-a-line-feed-and-a-carriage-return
+1 good suggestion
To answer your question bluntly, no. Textedit is more *efficient* to use. It will not drain as much power (battery if you are on a notebook), consume less memory and probably even be a little bit faster. On the other hand, programming in an IDE (be it eclipse, netbeans or intelliJ) is more *effective* - you get all those neat helper functions like autocomplete, navigation tricks, refactorings, code templates, syntax highlighting (though many editors have this now, too), etc. When being on a puny windows netbook, I used to prefer notepad++ or jEdit to a full-blown IDE, because while the functionality was nice, I was to impatient to wait for it to come up. I type fast. Nowadays I'm on a well-powered linux box, so I run eclipse or intelliJ (but I still sometimes wait for both to update the display while I type).
ok, http is not the optimal solution. you need a way to communicate with the embedded cromnium window. Currently what i can see you can send informations by cookie or windows title. Maybe someone could find a better solution. But i think for a lot of applications this could be an alternative. Client gui frameworks will become better every day. And html5 is very powerfull at the current stage. e.g. local storage, FileReader, canvas, webgl, indexdb and a lot of more.
you might find QueryDSL useful (and maybe Jooq). 
Amazing, I never known of dbutils before. Thanks
Hm. You could be very right about that. Whenever I "advertise" IntelliJ, I forget that the first thing I did was to *thoroughly* change the syntax (and warning etc.) highlighting. Apart from some details, I have found it to be a *great* color scheme so far. In case someone wants to try it: http://s000.tinyupload.com/index.php?file_id=09721284013963484634 7 KB screenshot: http://i.imgur.com/dP38n4W.png You're right that IntellIJ nags too much with its default settings, e.g. even though this module of the project is supposed to be library code (There's apparently no way to tell IntellIJ that.), unused methods are marked with a warning. But with my highlighting definitions, such markings do not disturb me. All warnings that matter are background highlightings, and other stuff has stronger effects, e.g. actual errors are bold in screaming red with thick gapped underline. The only inspections I change: Turn off spell check. Turn off "final" complaint for static and private methods (because I just want to make *everything* final as far as reasonable and don't want to think about yet another condition). Turn on warning for missing Override annotations.
I tend to follow the instructions, they generally lead to better code in the end and it points out to potentially smelly and faulty code.
Okay, you're welcome:)
off topic: One of the most unnecessary [bugs](http://stackoverflow.com/questions/2225737/error-jdwp-unable-to-get-jni-1-2-environment) in the Windows JRE seems to be this one, which happens every third or so time if your application ends without explicitly calling System.exit: ERROR: JDWP Unable to get JNI 1.2 environment, jvm-&gt;GetEnv() return code = -2 JDWP exit error AGENT_ERROR_NO_JNI_ENV(183): [../../../src/share/back/util.c:838]
Hmm, interesting. Does it have any effects on the application other than producing a confusing error message?
What happens if you just call ant from the command line?
To my experience, there are absolutely no side effects. Another interesting fact regarding not using System.exit is that using JFileChooser (or even JOptionPane?) prevents the application from "naturally" shutting down, at least for about half a minute, then it quits by itself. No matter how properly you closed the JFileChooser. Two good reasons to always let it end with System.exit(0);
Another good reason is [this one here](http://stackoverflow.com/a/25010987/521799) (couldn't resist): try { ... } catch (Exception ignore) { // Developer 1: This should never happen // Developer 2: Then you don't mind if I do this: System.exit(-1); }
Also the response times vary by mere nanoseconds I doubt that this has a significant impact later. You'd still have to add the time it takes the server to build the HTML or whatever resource was requested.
Me
Who uses Spring MVC?
Great post, but the writer may want to take some English classes. It's clear that he's not native English, so fluency isn't expected, but there are now a lot of basic (grammar) errors that I'm pretty sure would not have to be there after just a little extra training.
JAVA_HOME should be the path to the base directory of Java, not the \bin subfolder. Same with ANT_HOME. So your JAVA_HOME should be C:\Program Files (x86)\Java\jdk1.7.0_65 and your ANT_HOME should be C:\apache-ant-1.9.4. I'm assuming you've made a typo in telling us that you installed it to C:\apache-ant-1.9.4-bin, the "-bin" part shouldn't be there. Set it up like that then try opening a command prompt and typing `java -version` and `ant` And report back to us what it says after each command. For example my JDK is installed to C:\Program Files\Java\jdk1.8.0_05, my JAVA_HOME is set to C:\Program Files\Java\jdk1.8.0_05 and my path includes %JAVA_HOME%\bin. My output for `java -version` is: `java version "1.8.0_05"` `Java(TM) SE Runtime Environment (build 1.8.0_05-b13)` `Java HotSpot(TM) 64-Bit Server VM (build 25.5-b02, mixed mode)` I don't have Ant installed so I can't do the same for that.
Imagine you have 3 bags, each with colored marbles in it. The first bag has 1 red, 3 green and 6 blue marbles {1, 3, 6}. The second, 2 red, 5 green and 8 blue {2, 5, 8}. The last bag has only 4 red marbles {4}. Put those 3 bags in a box and you'll end up with a multidimensional box/array of marbles. The first statement is basically saying open the box and examine each bag. The second statement is saying open each bag and examine each marble. Let me know if you want to get into more details. **Edit:** Next time try posting your Java questions into [this](http://www.reddit.com/r/javahelp) subreddit. I'm sure you'll get more feedback than in this one.
No concurrency in a server benchmark? What's the point of that? The *core* purpose of a server is to handle concurrent load; if you exclude that from your test you're hardly testing anything at all.
I have also found this one. http://stackoverflow.com/questions/22564682/cant-install-jdk-7u51-64-bit-on-windows-2012-r2-this-app-cant-run-on-your-p
Have you tried to use the IDE to reverse-engineer the DB into JPA classes for you? I know Netbeans has this functionality and I would assume the others do as well since they all copy each other. I'm not guaranteeing it's going to "just work" but you could just see what it comes up with and go from there to get a jump start on the process.
It's not complete but it's not pointless. I think this shows the baseline performance overhead of a single call.
This is the simplest/smallest one with zero external dependencies: http://persism.sourceforge.net/main.php
No. Apache is a full blown httpservice, nginx is more like the little brother that serve static content faster, but has less features. Tomcat, jetty, etc are application servers. They mostly have a standard api. They can serve static content as the rest, but they are mainly targeted for Java applications. Microsoft has the equivalent for. Net I'm on my phone now and can't expand more. Hope that helps
Sorry, I should have clarified. I mean more like a depndency manager. For example, Python has pip, PHP has Composer, Node.js has NPM, etc. I actually did my homework before asking here, and found a lot of people recommend Maven, but also found a lot of people that warn against using it, that's why I came here, to know what the people on this subreddit use.
Maybe such a thing exists for Java and is of good use - I really don't know. So far, I have just added the libraries that I wanted to use to the class path via my IDE and henceforth used them in the project, later delivered them with the produced runnable jar or unpacked them into the produced runnable jar.
So, you have read this, right? http://www.bleathem.ca/blog/2014/07/richfaces-will-pursue-stability-over-innovation.html
I'm using Maven myself because I adapted it from the Projects I'm helping with. It took some time to learn using it properly but so far it has helped me in many ways to automate packaging processes. An alternative would be Gradle. I haven't used it myself so far but I hear many good things about it. If you have the opportunity to chose by yourself which system you use, I would recommend to test both and choose whichever suits you best. Aside from that, there's a long way for a Java newcomer until dependency mangement and package automation becomes relevant. The standard Java API is pretty expansive and using those big dependency management systems to include one or two libraries is probably overkill.
[Apache Ivy](http://ant.apache.org/ivy/) is a Java dependency manager that knows how to work with Maven repositories and can be configured to use your own repository. 
Using textedit for learning is fine but you should download IntelliJ, Eclipse and Netbeans and try them out - and pick the one you like best.
And you have read this, right? https://twitter.com/pkkamos/status/491786676990402561 https://twitter.com/cagataycivici/status/491695533787205632 ???
Me. What should I learn next?
Maven bro
I'm asking specifically about bayou. There's no reason a servlet container can't serve static content. Tomcat actually contains embedded apache libs for exactly that. I've dreamed of the day that I could write web server config in testable code.
I was looking into the last few days. Why shouldn't you use it?
Sorry guys. I used it at my last job. The comment was more me hoping it just dies. Very happy with JSF right now. 
Gradle's not bad. It's like a Groovy driven hybrid of Ant and Maven.
[**@brunoborges**](https://twitter.com/brunoborges): &gt;[2014-07-28 22:31:04 UTC](https://twitter.com/brunoborges/status/493886383740964865) &gt;[#IEEE](https://twitter.com/search?q=%23IEEE) ranks [@java](https://twitter.com/java) as top programming language, even by ignoring its [#Embedded](https://twitter.com/search?q=%23Embedded) capability. [*spectrum.ieee.org*](http://spectrum.ieee.org/static/interactive-the-top-programming-languages) [*pic.twitter.com*](http://pbs.twimg.com/media/BtqjC_5CEAABuO1.png) [^[Imgur]](http://i.imgur.com/SYInRg4.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2c1k2t%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
I'd be interested to hear some of those grumblings. That sounds suspiciously like the "write only" complaint about Ant.
I mostly use Maven but if you're just getting started maybe you should think about using Gradle since it's probably going to be heavily adopted in the coming future.
Hi Lukas, apparently Oracle had rejected the bug, and Eclipse had [reopened](https://bugs.eclipse.org/bugs/show_bug.cgi?id=340506#c14) the bug. It might be an Eclipse bug after all:)
Gradle is a newcomer, but it's ridiculously powerful and easily extensible with Groovy. It also supports Maven and Ivy repos, so you can easily include projects maintained with either. It also doesn't bury you in XML like Maven, since everything's just Groovy. We chose it over Maven about a year ago and haven't looked back since.
Nice to hear from you again Zhong. Good to see that you're still on this issue :-) I personally still think that the bug is really in the JLS. From a backwards-compatibility point of view the following piece of pre-generics code code: public void setValue(Parameter parameter, Object value) { } // Here, it's easy to see that this method is more specific public void setValue(Parameter parameter, Field value) { } ... should not break client code when adding generics: public &lt;T&gt; void setValue(Parameter&lt;T&gt; parameter, T value) { } // So why, all of a sudden should this one (with the same erasure) // become less specific?? public &lt;T&gt; void setValue(Parameter&lt;T&gt; parameter, Field&lt;T&gt; value) { } 
Gradle is as much of a package manager as Maven is. In fact, it uses the same system as Maven and Ivy. 
Gradle. Please, don't use Maven. It had it's time, but the amount of XML Maven requires to do even the tiniest thing is ridiculous. Gradle is light years ahead, much more flexible and easier to use.
Try using @JsonAnySetter/@JsonAnyGetter to store the variable data part in a hashmap property of a POJO?
I *may be* wrong, but I always thought Gradle just uses maven behind the "pretty code".
I dont know about bayou. You asked &gt; Is the goal of these projects to compete with apache and nginx? I have no knowledge about bayou in particular and also I said in my reply that app servers can run static content. It is just not what they meant to be doing. best of luck
Honestly he should try both eclipse and intelliJ and use the one he likes.
Gradle uses Ivy whereas Maven uses Aether. Separate libraries, same basic behavior.
Because it is usually an overly complex solution that will take a lot more time to develop than using the standard JavaServer Faces (JSF) and CDI. It is good to learn it though as there are a lot of applications out there that still run it. There are some other parts of Spring that are nice in some niche situations but unfortunatly Spring is not very modular so it is difficult to use just one piece of it.
Gradle actually no longer uses Ivy. Ivy was used in early versions of Gradle, but no more. All the same system though (approximately, as I understand it Ivy and Gradle use an extended version of the Maven standard).
Hi tootie. Bayou does not compete with apache and nginx. The target audience of bayou is Java programmers, who rarely need apache/nginx anyway. As you've said, Servlet containers already take care of static contents. From my point of view, apache/nginx should be for non-developers to setup a static site. Of course, developers on some platforms (e.g. PHP, node.js) heavily depend on apache/nginx. I think it's a flaw of these platforms for lack of good built-in static capability. Bayou provides built-in [StaticHandler](http://bayou.io/release/0.9/docs/http/Http_Server.html#StaticHandler), because if it doesn't, I don't feel I can legitimately called it an HTTP server. There's an obvious concern of its performance, so I'll throw in some unofficial numbers here - for bigger files (&gt;10K), IO is the bottleneck, bayou and nginx have similar throughputs; for smaller files, nginx outperforms bayou by 20k to 15k (request/second on a test machine); but it's easy in bayou to just [cache](http://bayou.io/release/0.9/javadoc/bayou/file/StaticFileConf.html) all the small resource files in memory, which brings bayou's number to 20k too. Now, for Java programmers, we have Servlet, so why do we need anything else? Good point; I would recommend Servlet to majority of Java programmers too. But there are people who are not quite happy with Servlet... Bayou is designed to provide more programmatic control over server behaviors. What distinguishes bayou from others the most is probably its ["pull style response"](http://www.reddit.com/r/programming/comments/2arzv9/dont_give_me_an_http_response_ill_give_you_one/), which makes bayou much more composable. 
Don't know why you've been downvoted; I'd be interested to hear people's opinions on the pain points of gradle, as I've not yet experienced attempting to maintain a massive gradle project, and have had a largely positive impression of it.
Standard setup that I use is apache for serving static content with mod_proxy to load balance between tomcat servers for non-static content. Surely even a servlet engine that can server static content as well would require an http load balancer anyway.
Textedit can be good for learning but if you want to develop a real project try Netbeans. You can download it along with a configured application server with just a .exe file. It is much easier to get up and running than Eclipse. NetBeans.org
Sure, but at least Gradle would seem to be an attempt to bridge the gap between two well established (but differently purposed) solutions. I've only just begun playing around with it. However, I haven't seen any practical examples of how Gradle eliminates the monolithic nightmare of a complex ant script or anything that would demonstrate Gradle's superiority in dependency management over Maven so I'm pretty dubious.
I'm surprised to see that question here:) Is it a JLS flaw? Well, we can always blame JLS, but there's no objective standard for that. The migration use case you raised is very good; but backward compatibility is already so complicated, I don't know if your case could be incorporated. I'm pretty sure nobody in Oracle wants to revisit this area:) 
yo man thanks a lot, you do a lot of good for easing the programming process. Having worked in Javascript front-Java back, it's amazing to see how easy it's to write with PrimeFaces. As a beginner I have just one suggestion. In NetBeans, we write attributes to JSF elements right? How do I get the *options* inside those attributes as to what I can fill. Many times, I have found something I need only because of StackOverflow. Even showcase fails in some cases, like the filtering options. From the showcase, it may seem a bit opaque Another bug I can recall is the global filtering works *only* when the inputText is given id globalFilter... What if I have multiple dataTables in a TabView. Only one can work. Also the possibility of having filtering and row-editing alongside customized number of columns (say header has two columns, but data 5, these don't seem possible (I don't recall how) if I have a checkbox or rowEditor... Just recalled these bugs... It's a great experience working with PF, but I feel the documentation (currently in PDF) can be much more useful if searchable online.
good point about load balancing. Update *2015-05-07* : now it's easy to program a load balancer in bayou, see http://bayou.io/release/0.9/docs/http/Http_Intermediary.html#Create_a_Load_Balancer
I wouldn't call any of its features "crap". But there are some people who would like to program directly on the HTTP layer, and bayou could be a good choice for them.
Since Maven and Gradle have already been mentioned, I'll mention [SBT - (Simple Build Tool)](http://www.scala-sbt.org/). It's in Scala, but will do Scala and/or Java. Here's a bit of reference info from [Getting Started](http://www.scala-sbt.org/release/tutorial/Running.html) and [Java Sources](http://www.scala-sbt.org/release/docs/Java-Sources.html) 
&gt; I'm surprised to see that question here:) Oh, I'm just re-iterating old (but good) stuff. We've had a case like that on the [jOOQ](http://www.jooq.org) user group recently. This is confusing people, as Eclipse allows for some code to compile, but when you build with Maven / javac, it no longer works. &gt; I'm pretty sure nobody in Oracle wants to revisit this area:) That's the surest thing. So probably, what's gonna happen is that Eclipse will fix the bug :-)
Yes use an IDE, but I would highly recommend Netbeans or IntelliJ. Use Eclipse if you have to.
Maven all the way until Java 1.9 comes out with it's native package management.
JavaFX seems pretty capable to me. The problem is that a lot of people still have a bad taste in their mouths from the applet days and common issues with Swing. There is little to no adoption. That said, there is a small groups of folks trying to carry the torch. The latest release of JavaFX 8 comes with a very modern looking (IMHO) CSS (Modena) file and a pretty good set of default controls. It's probably no where near rival, much longer established UI frameworks but its a good start. There are already third party control options for it (ControlsFX). Also, if you are dead set on native look and feel check out AeroFX (win7) and AquaFX (OSX). These are several projects aiming to match native look and feel in JavaFX.
&gt; and a SIM, neither of which will be programmed in Java. JavaCard would like to have a word with you.
See, I've never found maven's XML that ponderous, even with complex projects. I can definitely see that argument with ant, though.
Just because something can be done, it doesn't mean it's worth doing. This is one of those cases. Even if you can figure out the answer, **don't do this**. This is a terrible thing to do and you will end up writing code that can not be modified without breaking in the future.
Ok but doesnt row &lt; grid.length mean that lets say there are 3 elements in grid, row can never be 3 because 3!&lt; 3. i hope my question makes sense. Just wont 1 element always be left out because row can only reach 2? Or is row counted as 0,1,2 and grid.length as 1,2,3?
JSF ;)
Maven to work with. Gradle to play with and prepare for future.
**Edit: Nope, I'm wrong below, there's an issue with the DBCursor... not sure why.** I just removed the loop through to read the DBCursor and sysout (to make sure it was grabbing it), and ran again. No error popped up, but it returned nothing in the web browser. Getting very confused now. =/ Edit #2: 127.0.0.1 - - [29/Jul/2014:16:59:24 +0000] "GET /apps/app_info_print HTTP/1.1" 404 - "-" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0" 6 Getting a 404 on this now. Getting more confused, will have to take a break.. haha * * * * * * * * * * * * * * * Alright so that seems to be working (mostly), I'm just having a hard time taking the last step and delivering the response. public class AppInfo { public final String name; public Map&lt;String,Object&gt; other = new HashMap&lt;String,Object&gt;(); @JsonCreator public AppInfo(@JsonProperty("_id") String name) { this.name = name; } public String getName() { return name; } @JsonAnyGetter public Map any() { return other; } @JsonAnySetter public void set(String name, Object obj) { this.other.put(name, obj); } @Override public String toString() { return "MyBean [name=" + name + ", other=" + other + "]"; } } Then in my resource class: @GET @Path("/app_info_print") public Response listAll() { DBCursor&lt;AppInfo&gt; dbCursor = collection.find(); List&lt;AppInfo&gt; appInfos = new ArrayList&lt;AppInfo&gt;(); while (dbCursor.hasNext()) { System.out.println(dbCursor.next().other.toString()); appInfos.add(dbCursor.next()); } return Response.ok(appInfos, MediaType.APPLICATION_JSON).build(); } The sysout is working fine - it's the expected JSON from each Mongo doc. It's not building the response though... when I return List&lt;AppInfo&gt; or DBCursor&lt;AppInfo I'm getting : ! java.util.NoSuchElementException: null ! at com.mongodb.QueryResultIterator.next(QueryResultIterator.java:111) I know the objects are there, because I'm able to go through them and print out the JSON. Before that, I was getting an issue where it would see the fields but they were unrecognized and refused to process them. (Still printed out fine, but it would not build the response). That disappeared when I changed it from Map&lt;String,String&gt; other to Map&lt;String,Object&gt; other, I believe. Bah, I'm just completely missing something here.
You can only iterate over the cursor once. Only half is making it to the list, the other half is being wasted in the print. Furthermore, you are calling next() twice per iteration, bypassing hasNext, causing the NoSuchElement. You can also just return the list or POJO directly instead of building a response.
Can you run it on a Atmel AVR microcontroller?
I'll cut you!
An array with length 3, has indices 0, 1, 2.
your link is broken, should be http://www.infoq.com/fr/articles/curryfication-java
Glad to hear it's working. MongoJack is usually a buggy mess :P.
I agree with your assertion.
Make it into a jar, put it on a server with a JVM installed, and run it? `java -jar runthisfoobar.jar`
I'm also a bit new and I suggest Maven. 
http://www.harbaum.org/till/nanovm/index.shtml 
thanks I've try that in a bit!
Give this a lookie: http://docs.oracle.com/javase/7/docs/api/java/util/Random.html Maybe take a break from your assignment, and see if you can write a program that just generates and prints a few random numbers. That should at least help you understand the Random class.
thanks for the excellent explaination /u/zhong-j-yu. i'm on linux and it appears that it's just using pread here, which i believe is blocking, with a thread pool, though it's hard to tell for sure given the windows/solaris/linux overlays, all of which provide sun.nio.ch.FileDispatcherImpl 
I think I get the Random class, at least the concept behind it. The thing I'm having trouble with is changing the target number from * public static final int TARGET = 37; to a random number, if that makes sense. For someone with my lack of experience it's difficult to wrap my head around sometimes.
&gt; and a SIM, neither of which will be programmed in Java. Almost every modern SIM card is programmed in Java. 
&gt;It is not a full featured Java VM and it will never be. It will always be limited to a small subset of the java language and the standard java libraries and a few application specific methods. Furthermore, it is not meant to replace C as the standard way of programming microcontrollers. It is less flexible and has a lower performance than C or assembler programs. Basically, take Java and remove all the high-level features that C doesn't have and on top of that, have slower performance too.
I'm not trying to make a *quick* buck, I spent 4 months on the course and for $39 it's a fair price. I'd previously asked for feedback here (and got heaps!), I did this by giving away FREE copies, so 500 people got great content for free in exchange for helping make the course even better. 
Begrudingly, maven. I know how to use it, Netbeans seems to support it well. I'm not fond of it, but it works for what I use it for. It can be a pain when something doesn't work exactly as expected, but eventually I've found that if you read the documentation you can cajole it into doing what you want. The more I've used it the fewer problems I've had. Although I still find Maven's XML files kind of dense and not the most clear things to read even with a working knowledge of it. But I will give it this: It beats ant as a build tool (Ant can be OK too on relatively simple projects as long as the IDE is doing everything for you). I'd love to start using Gradle, but at this point I don't really have time because our build process currently just works. 
How many pom.xml files have these large projects required?
Create an object of class Random. Random random = new Random(); It can be used to generate random numbers. From the Java documentation: &gt; nextInt(int n) &gt; &gt; Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence. So you can call random.nextInt(100) to generate a random number between 0 and 99. Store that value with an assignment statement. You'll need to think of a way to modify the range 0-99 to become 1-100 like your assignment asks for. 
You really want to quote a source that is still talking about J2EE? That has not been used for a decade. Anyone who has a technology website and does not know that should close up shop. 
Ok. Well we're clearly not going to give you the answer, but maybe I can help a little. For future reference, programmers and teachers both have a lot easier time providing assistance if your questions are more specific. "I don't get it" or "I need to do X but I can't" are not useful questions, which is probably why you're not getting a ton of feedback here. A lot of people on reddit/stackoverflow will just ignore questions like that. Always be as specific as possible about what you've tried, what problems you are having, and what exactly you don't understand about the situation. Let's break down that line you gave us (if you haven't learned classes yet, don't worry if you don't understand all of this). * public - this variable is part of a class, and we want to let other classes access it. * static - If multiple instances of this class exist, they all share this variable. If one of them changes it, it changes for everyone. * final - Once this variable is set, it can never change * (and of course the rest of it declares and initializes the variable) So here's another thing you should try. Change that line to: public static final int TARGET; So that it doesn't set it to 37 at all. Then try setting it somewhere else, like in your main() function like this: TARGET = 37; You'll get an error, but I'll give you a hint: one of those keywords in the variable declaration doesn't work if you want to set TARGET later. You should be able to figure out which one, remove it, and it should work. Once you are able to set TARGET within the main loop like any other variable, you can work on how to generate a random number and store it in a variable. Feel free to PM me if you have more trouble.
The crappiest device I've used a "full featured" JVM on was a 133mhz arm with 32MB ram. It actually worked just fine for the application. It was not the intended target platform or we would not have used java in the first place, but it went surprisingly well. That's much more limited than even a Pi but still *huge* compared to what I think of when I hear "embedded". Maybe that is changing or will be changing though.. With prices for fairly powerful computers dropping towards zero and their physical size entering embedded territory, why not use them instead of microcontrollers, cpld or whatever they call the embedded stuff these days. As it did in the project I mentioned above, it could save a lot of time to share a code base with the software used on more powerful devices in some cases. There will always be a need for real time code, but if a general purpose computer is fast enough I guess anything can be effectively real time. Just musing.
Wow, you clearly have no fucking idea what you're talking about...
Doesn't Netbeans IDE keep it's project config and compile stuff in Ant format?
Looks like 197 owing to the various sub-modules, but from what little I know of Gradle, sub-modules appear to be managed in a similar way.
I use Maven in a it's own project to download the jars to a local location, then delete the existing stuff and copy them into source control. It avoids a lot of the headaches with Maven - each developer needing to do a download, periodic Maven hickups, corrupted downloads, etc (well it limits those issues to one person when doing an update, rather than the entire team a lot of the time). No need to setup a local Maven repo to get around firewall issues... 
The variable "firstarray" is declared as type int[][]. The way he's written it is discouraged, int arrayName[][], it should be int[][] arrayName. He's passing the firstarray variable of type int[][] into the method that accepts a parameter of type int[][]. For clarity think of it like this: public void display(int[][] arrayToDisplay) calling the parameter "int x[][]" is confusing and out of standard.
I changed my JAVA_HOME as you suggested. The output for java -version on windows command line and cygwin was as I expected $ java -version java version "1.7.0_65" Java(TM) SE Runtime Environment (build 1.7.0_65-b19) Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode) the top level ant folder was actually named apache-ant-1.9.4-bin, so that wasn't a typo on my part. However I changed it to apache-ant-1.9.4 to avoid getting confused. When I ran ant on windows command line, the output was C:\WINDOWS\System32&gt;ant 'ant' is not recognized as an internal or external command, operable program or batch file. When I tried running ant on cygwin(just to double check), the result was the following: $ ant -bash: ant: command not found 
Out of curiosity, how long did it take you to study for the Java Programmer 1 cert? I'm thinking of taking the test myself, but unfortunately from what I've seen most of the practice questions are syntax "puzzle" and "trick" questions, nothing substantially real-world thus far in terms of design patterns and architecture. 
How do you manage that number of poms? Are there tools involved, or some kind of strategy?
My ANT_HOME is set to C:\apache-ant-1.9.4 and my path(shortened for convenience) includes %JAVA_HOME%\bin; %ANT_HOME%\bin. This is the results of trying ant again and running echo %ANT_HOME% C:\WINDOWS\System32&gt;ant 'ant' is not recognized as an internal or external command, operable program or batch file. C:\WINDOWS\System32&gt;echo %ANT_HOME% %ANT_HOME% At this point I'm not sure what I else can do except keep tinkering until I figure this out. I appreciate all the help you've given me, even if it didn't produce the results I wanted. 
You've set ANT_HOME incorrectly. Try `echo %PATH%` from the command line and report the results. Also run `set` with no parameters and report that. I noticed earlier that you seem to have a space after the semi-colon delimiter in the parts you've added to the PATH environment variable. I don't know if it's affecting anything, but don't do that.
I picked up my [textbook](http://www.amazon.com/OCA-Java-Programmer-Certification-Guide/dp/1617291048/ref=sr_1_1?ie=UTF8&amp;qid=1406676048&amp;sr=8-1&amp;keywords=oca+java+se+7+programmer+i+certification+guide) on amazon about a month ago. I usually studied about 1-2 hours a day. It was an awesome book and really helped me understand what the certification exam would require. That said, I felt the exam was more an exercise in determining what trick the exam makers were up to rather than a test of my actual understanding. Luckily, the book helped prepare me for that.
You're getting downvoted to shit, probably since you posted something anti-Java on /r/java . Just want you to know that I, at least, agree with you. 
Thank you. I really wasn't ragging on Java. As I said I use and like Java. But if I suggested we use Java for our next low power bit banging motor controller with UART interface I'd be laughed out of the office. Or maybe an spi accelerometer interface on a 2k flash 512 byte ram microcontroller should be programmed in Java? It's just silly to think Java is appropriate in these situations. It's the IEEE I'm mocking. Not Java.
That they think it matters whether they include embedded Java or not when devising on a top language. If you pick top language only by number of devices with software programmed in a particular language then c is bound to be top. That would be a silly way of choosing though. You could get any winner you want in lists like this by careful choice of your ranking criteria.
There will always be price as the comparator. I agree these devices are getting more powerful. However it also means that for the same power you can pay less. You can get embedded microcontrollers for literally pennies. Why would you spec for a chip capable of running Java in the situation that the 20p chip will do the job?
openssl password encrypts those keys in a non-RFC format. So you'd have to check their source code to find out how they do that (I didn't). There is a library that tries to maintain that compatibility: http://www.jcraft.com/jsch/ Would love to hear what you decide to go with and how it works out for you.
Depends on what kind of project. New Java enterprise projects are by default Maven. Netbeans also is perfectly happy to open and create Maven projects for other types of application, including desktop. I mostly work on JEE projects, so Maven's the default for what I do now. 
I agree with you, but that said, don't you think that it's just so much more difficult many times to get the job done with C and/or asm that the trade-offs in using Java are normally acceptable? I know, the answer is always "it depends", but really it's still a fair question.
It sounds like you've got network troubles to resolve. At home, at work, at Panera - I don't run into problems with corrupted JARs. Worse comes to worst, you should look at setting up a Nexus repository to proxy the Central and other repositories if your Internet connectivity is that fragile. It'd be a more appropriate way of re-hosting end states. Source control is, as you say, for source, not binary end states. 
This the results of echo %PATH% and set:(Sorry the formatting is bad, I wish I could make it more readable) C:\WINDOWS\system32&gt;echo %PATH% C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;c:\oracle\product\11.1.0\ client_1\bin;C:\oracle\product\10.2.0\client_1\bin;C:\Program Files\Common Files \Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Sha red\Windows Live;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Prog ram Files (x86)\EgisTec BioExcess\x64;C:\Program Files (x86)\EgisTec BioExcess\; C:\Program Files (x86)\EgisTec Port Locker\x64;C:\Program Files (x86)\EgisTec Po rt Locker\;C:\Program Files (x86)\Windows Live\Shared;C:\WINDOWS\System32\Window sPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;C:\FPC\2.6.2\bin\i386-Win32;C :\Program Files (x86)\QuickTime\QTSystem\;C:\WINDOWS\System32\WindowsPowerShell\ v1.0\;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Pr ogram Files\Microsoft SQL Server\110\Tools\Bin\;C:\Program Files (x86)\Microsoft SDKs\TypeScript\1.0\;C:\cygwin64\bin;%JAVA_HOME%\bin;%ANT_HOME%\bin;C:\Program Files (x86)\FAHClient C:\WINDOWS\system32&gt;set ALLUSERSPROFILE=C:\ProgramData APPDATA=C:\Users\Alex James\AppData\Roaming asl.log=Destination=file AV_APPDATA=C:\Users\ALEXJA~1\AppData\Roaming CommonProgramFiles=C:\Program Files\Common Files CommonProgramFiles(x86)=C:\Program Files (x86)\Common Files CommonProgramW6432=C:\Program Files\Common Files COMPUTERNAME=ALEXJAMES-PC ComSpec=C:\WINDOWS\system32\cmd.exe configsetroot=C:\WINDOWS\ConfigSetRoot FP_NO_HOST_CHECK=NO HOMEDRIVE=C: HOMEPATH=\Users\Alex James LenovoTestLogFile=preload.log LenovoTestPath=C:\prdv10\ LOCALAPPDATA=C:\Users\Alex James\AppData\Local LOGONSERVER=\\ALEXJAMES-PC NUMBER_OF_PROCESSORS=4 OS=Windows_NT Path=C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;c:\oracle\product\11 .1.0\client_1\bin;C:\oracle\product\10.2.0\client_1\bin;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsof t Shared\Windows Live;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C: \Program Files (x86)\EgisTec BioExcess\x64;C:\Program Files (x86)\EgisTec BioExc ess\;C:\Program Files (x86)\EgisTec Port Locker\x64;C:\Program Files (x86)\EgisT ec Port Locker\;C:\Program Files (x86)\Windows Live\Shared;C:\WINDOWS\System32\W indowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;C:\FPC\2.6.2\bin\i386-Wi n32;C:\Program Files (x86)\QuickTime\QTSystem\;C:\WINDOWS\System32\WindowsPowerS hell\v1.0\;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\; C:\Program Files\Microsoft SQL Server\110\Tools\Bin\;C:\Program Files (x86)\Micr osoft SDKs\TypeScript\1.0\;C:\cygwin64\bin;%JAVA_HOME%\bin;%ANT_HOME%\bin;C:\Pro gram Files (x86)\FAHClient PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC PROCESSOR_ARCHITECTURE=AMD64 PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 42 Stepping 7, GenuineIntel PROCESSOR_LEVEL=6 PROCESSOR_REVISION=2a07 ProgramData=C:\ProgramData ProgramFiles=C:\Program Files ProgramFiles(x86)=C:\Program Files (x86) ProgramW6432=C:\Program Files PROMPT=$P$G PSModulePath=C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules\ PUBLIC=C:\Users\Public SESSIONNAME=Console SystemDrive=C: SystemRoot=C:\WINDOWS TEMP=C:\Users\ALEXJA~1\AppData\Local\Temp TMP=C:\Users\ALEXJA~1\AppData\Local\Temp tvdumpflags=8 USERDOMAIN=AlexJames-PC USERDOMAIN_ROAMINGPROFILE=AlexJames-PC USERNAME=Alex James USERPROFILE=C:\Users\Alex James VS100COMNTOOLS=C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools \ VS110COMNTOOLS=C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\Tools \ VS120COMNTOOLS=C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools \ windir=C:\WINDOWS windows_tracing_flags=3 windows_tracing_logfile=C:\BVTBin\Tests\installpackage\csilogfile.log 
&gt; I would highly recommend Netbeans or IntelliJ. Use Eclipse if you have to. Not everybody agrees with this, so use the three big ones and fiure out what you like. Eclipse has a much richer community and repertoire of plugins. 
Yeah so you haven't set ANT_HOME at all. If it's set, it'll appear in the output of `set`. You're on Windows, so hit WinKey+Break, go to Advanced System Settings, Environment Variables and set a new System Variable with name: ANT_HOME and value: C:\apache-ant-1.9.4 Restart your command prompt and run `set` again and post the results, also try `ant`.
Huh. I'm like 98% sure that at least at some point, one of Netbeans selling points was using Ant as the official Netbeans project config. 
So ANT_HOME shows up in the results of set, but when I run ant it still says it doesn't exist as a command. C:\WINDOWS\system32&gt;set ALLUSERSPROFILE=C:\ProgramData ANT_HOME=C:\apache-ant-1.9.4 APPDATA=C:\Users\Alex James\AppData\Roaming asl.log=Destination=file AV_APPDATA=C:\Users\ALEXJA~1\AppData\Roaming CommonProgramFiles=C:\Program Files\Common Files CommonProgramFiles(x86)=C:\Program Files (x86)\Common Files CommonProgramW6432=C:\Program Files\Common Files COMPUTERNAME=ALEXJAMES-PC ComSpec=C:\WINDOWS\system32\cmd.exe configsetroot=C:\WINDOWS\ConfigSetRoot FP_NO_HOST_CHECK=NO HOMEDRIVE=C: HOMEPATH=\Users\Alex James LenovoTestLogFile=preload.log LenovoTestPath=C:\prdv10\ LOCALAPPDATA=C:\Users\Alex James\AppData\Local LOGONSERVER=\\ALEXJAMES-PC NUMBER_OF_PROCESSORS=4 OS=Windows_NT Path=C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;c:\oracle\product\11 .1.0\client_1\bin;C:\oracle\product\10.2.0\client_1\bin;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsof t Shared\Windows Live;C:\WINDOWS\system32;C:\WINDOWS;C:\WIND OWS\System32\Wbem;C: \Program Files (x86)\EgisTec BioExcess\x64;C:\Program Files (x86)\EgisTec BioExc ess\;C:\Program Files (x86)\EgisTec Port Locker\x64;C:\Program Files (x86)\EgisT ec Port Locker\;C:\Program Files (x86)\Windows Live\Shared;C:\WINDOWS\System32\W indowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;C:\FPC\2.6.2\bin\i386-Wi n32;C:\Program Files (x86)\QuickTime\QTSystem\;C:\WINDOWS\System32 \WindowsPowerS hell\v1.0\;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\; C:\Program Files\Microsoft SQL Server\110\Tools\Bin\;C:\Program Files (x86)\Micr osoft SDKs\TypeScript\1.0\;C:\cygwin64\bin;%JAVA_HOME %\bin;C:\apache-ant-1.9.4\b in;C:\Program Files (x86)\FAHClient PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC PROCESSOR_ARCHITECTURE=AMD64 PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 42 Stepping 7, GenuineIntel PROCESSOR_LEVEL=6 PROCESSOR_REVISION=2a07 ProgramData=C:\ProgramData ProgramFiles=C:\Program Files ProgramFiles(x86)=C:\Program Files (x86) ProgramW6432=C:\Program Files PROMPT=$P$G PSModulePath=C:\WINDOWS\system32\WindowsPow erShell\v1.0\Modules\ PUBLIC=C:\Users\Public SESSIONNAME=Console SystemDrive=C: SystemRoot=C:\WINDOWS TEMP=C:\Users\ALEXJA~1\AppData\Local\Temp TMP=C:\Users\ALEXJA~1\AppData\Local\Temp tvdumpflags=8 USERDOMAIN=AlexJames-PC USERDOMAIN_ROAMINGPROFILE=AlexJames-PC USERNAME=Alex James USERPROFILE=C:\Users\Alex James VS100COMNTOOLS=C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools \ VS110COMNTOOLS=C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\Tools \ VS120COMNTOOLS=C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools \ windir=C:\WINDOWS windows_tracing_flags=3 windows_tracing_logfile=C:\BVTBin\Tests\installpacka ge\csilogfile.log C:\WINDOWS\system32&gt;ant 'ant' is not recognized as an internal or external command, operable program or batch file. 
&gt; I'm learning java, and people recommend I switch from textedit to eclipse. Is eclipse more efficient to use? Yes. Eclipse is an environment built and designed for coding. You don't have to deal with running the compiler manually, it does text coloring and autocomplete, it points out syntax error in the editor itself rather than trying to figure them out via the command line feedback...it does a million things better than using a text editor, especially for a beginner.
The space is the path entry for ant is just a formatting error on my part. Here's the contents C:\apache-ant-1.9.4\bin: https://imgur.com/uDQrCHn
As much as I love Java (built an application that links to a MySQL database to display certain trends) I still prefer C++. Java worked great for my given project cause it was simple to code the interface and connect to the database. However given a choice I love being able to manage my own memory. The garbage collector has made vast improvements over the years but it isn't as perfect as controlling your own memory. 
Yeah, these claims are way overblown. If you're just learning, use whatever IDE everyone else is using, often it's Eclipse. Editor differences won't even be noticeable to you until you get into far more advanced coding, and even then which one is "better" ends up being highly debated.
And you're definitely closing the command prompt window and starting a new one each time you try this? As far as I'm concerned it looks fine. You have C:\apache-ant-1.9.4\bin in the PATH environment variable so every executable in that location should be available from any filesystem location. What about if you `cd C:\apache-ant-1.9.4\bin` and try `ant` from there? Just to make sure there isn't something wrong with ant itself.
I'm trying to imagine why you'd need Java EE on a SIM card... The Java embedded runtime is what is needed for that kind of application. You can't just disqualify it as non-Java because you can't serve up JSPs off of it. 
Looking back on the output of your `set` command I can't see anywhere you have JAVA_HOME defined. Did you delete that environment variable? Ant runs via Java and JAVA_HOME is where it tries to find it. Set JAVA_HOME to your JDK location and Ant should pick it up and work. You'll run into later problems if you keep using JRE7 with the additional tools.jar file. You really shouldn't need to modify anything in your JDK/JRE folders ever- it's akin to messing around in C:\Windows\System32. Anyway, glad you've got it partially working, but I wouldn't consider it completely set up until you have ANT_HOME, JAVA_HOME and PATH properly defined.
I did something kind of like this for a paper. Not totally the same, but it navigates to a page and scrapes it. julia.lifehug.com
That's exactly the kind of manual workflow that Maven helps you avoid....
Absolutely. That a more powerful system makes programming easier is without question. All I was saying (and getting down voted for it) was that that day is not today. Java is not appropriate for 99.9% of embedded projects. It's not really that sensible on something as powerful as a raspberry pi, but is doable. I know this is r/Java but I'm surprised that a bunch of engineers has such an impractical view of Java. It's not for embedded. It doesn't mean it's bad.
I would: * create a scheduled Executor to run the fetcher * grab contents with URLConnection (or HtmlUnit if it's an ajax site) * use JSoup to extract the content you're interested in using CSS selectors * be very clear about where I got the contents from and make sure the scraped site doesn't explicitly forbid scraping or reuse of its contents. Whether the last point is enforced by law varies per country afaik, but it's better not to make enemies, I guess.
I did this a long time ago. Here is the first half of what you want: https://gist.github.com/alanboy/10fcfc4c7a229e0bbd2e 
|The bottom line is that post JIT compilation, lambdas and anonymous classes perform similarly on current Hostpot JVM implementations. So... Spend your time reading about some higher-level programming stuff. Since you're programming Java, you shouldn't be worrying about stuff like this.
When it comes to Android development it definitely has some pain points with regards to IDE integration and unit testing (the reason why for instnace [this](https://github.com/JCAndKSolutions/android-unit-test) exists). It's not really gradle's fault though, but the state of the IDE's (Android Studio) and Google's Android-Gradle plugin. edit: Also it's slow. Compliation + execution of unit tests in a small project I'm doing: 7 seconds with gradle. 2 second with old .IML/Maven-projects. ~3 of those seconds is gradle project file parsing, so that's something I guess can be attributed to Gradle.
Scala We're Doing It All Wrong by Paul Phillips https://www.youtube.com/watch?v=TS1lpKBMkgg Scala collections fail: https://www.youtube.com/watch?v=uiJycy6dFSQ Keep it up Typesafe.
Ivy and Aether are the real package managers, Maven and Gradle are build tools.
Will have to look into that
My guess is they consider that the package space doesn't start with "org.apache" as an architectural flaw?
People who try to pre-optimize a language like Java or C# are doing themselves, and anyone else who works on the same code base, a huge, huge disservice. Obviously, that doesn't mean you can be stupid and careless all the time (like picking the wrong data structure, for small example), but let the JIT do its job. Follow the old mantra of "profile before optimizing". 
Netbeans hasn't been exclusively Ant in a very long time, years even... Maybe when Ant was the new hot thing. But I've been using maven with it since at least 6.8, so at least since 2009. 
The Log4j 2 [documentation](http://logging.apache.org/log4j/2.x/manual/index.html) describes some of the problems with Logback. I'm not sure whether these are indeed the "inherent problems", but many of these sound like fairly deep problems in Logback, so match that description.
Not sure this is a great idea if you are trying to use scala in the enterprise since those customers might have a hard time updating to Java 8. But who knows they should try it and see if they get push back.
I use Maven at work. You may hear complaints about it being painful and problematic... Personally, I find this is only true if you want to customise your build heavily, in which case it can feel extremely daunting. I feel that Maven can feel very inflexible once you step away from the Maven conventions. Things like working with a custom build cycle, for example - good luck with that. I've dabbled a bit with Gradle at home, although my projects will never get as complex as my work so I can't really judge how it compares in this space.
Depends man. A lot of people write things like trading software in Java. Performance is critical. Yes your stupid banking webapp may not need perf, but many will.
Fun fact: Log4j, SLF4J and logback were all made by the same guy. Log4J2 was done without him. I suspect he burned bridges or something by making logback instead of improving log4j when the apache community got involved.
The extract of the linked page is: * Logback will lose events while reconfiguring * Asynchronous Loggers have 10 times higher throughput and orders of magnitude lower latency than Logback * Many Logback Appenders do not accept a Layout and will only send data in a fixed format. * Layouts in Logback return a String. This resulted in the problems discussed at [Logback Encoders](http://logback.qos.ch/manual/encoders.html). Log4j 2 takes the simpler approach that Layouts always return a byte array.
And on that note http://java-performance.com/
It doesn't really matter anyway. Anyone on the functional bandwagon in the Java space will end up using Java 8 over Scala since it will have the least friction in the enterprise.
Been using Jasper Reports lately (my first time using it) and it's great! A bit of startup cost (in terms of time) to learn their way of doing things, but it's worked out well. One benefit of JasperReports is that you can export your report in tons of formats... xml, doc, html, pdf, and I think a few others too. Definitely give it a look. Though I do my report generation in java with what they call JRBeanCollectionSources (so generating reports from lists of Java Beans rather than straight from tables), so our use cases are a little different, I imagine you'll have as good an experience with JasperReports as I have. Also, during this process you will probably be writing some jrxml (their proprietary xml format for doing report layouts), and you should look in to Jaspersoft Studio when that time comes, it's a GUI App for helping you build report layouts much easier (I learned this too late and it could have saved me bundles of time!).
ok site, lots of data out there. Really need to test your specific app.
Try with BIRT (http://www.eclipse.org/birt/).
Scala has no future.
I used to be in the same ant boat, I known that feeling. My boss used to be so close-minded, later I quit the place for an another work with java and never been so happy to use maven rather than ant.
Intend to switch to Jaspersoft Studio at some point. I still am using iReport, have been for years, and it works well. I never write reports in JRXML. On occasion I make tweaks directly to the JRXML. The most unusual thing I've done directly in JRXML is to write a quickie Java program to spit out repeated groups of fields, with increasing vertical offsets, and then hand copy/paste the result into the JRXML. This was quicker than doing it in the visual designer because there were some overlaid fields in each group, with different print-when conditions.
Why? I've never used it, and have no opinion. I just want to hear why you think that. 
+1 for Jsoup parsing. Depending on the scale you need, have you looked at [nutch](http://nutch.apache.org/)? 
Picture is better than 1000 words: https://www.youtube.com/watch?v=uiJycy6dFSQ 
They're referring to the RebelLabs study. It's a good read, but has one very important caveat. It's aimed at *java* developers
Thanks, that was a really interesting watch. 
Certainly not saying you can't use it with Maven, just remembered that it is (or was) Ant by default. Anyways, thanks for the info! (fyi, I upvoted your posts, don't know who's downvoting that one.)
I upvoted you as well because it seemed like you were genuinely curious. So there are at least 2 people out there who downvoted you. The Maven by default for enterprise projects thing is more recent. But Maven's worked with it for a long time. 
Does that answer your question? There's also the license behind each library. Logback uses a less commercial friendly license.
Is it a jar, or is it a war running on an application server? Is it standalone?
It's just a jar this time. I assume it's standalone, just one class that uses API's really.
Then just `java -jar XYZ.jar`. If it's an Enterprise application using Java EE, bundle it with Tomcat/TomEE, or install it in an application server.
Thanks, so I can upload it pretty much anywhere in this case since it doesn't depend on tomcat etc.
I don't think that's quite precise - isn't Maven both a real package manager and also a build tool, wheras Ivy is just a package manager? I think all of them use the Maven repo, including gradle, ivy, etc.
Hm. I wouldn't really call a non-final int "immutable", even if it's not an object, and setting it to a different value would indeed create a *new* number. But in any case: That's totally unrelated to the question.
Log4j 2 has a direct application API. That is insane. SLF4J should be the API. There is far too much fragmentation in logging APIs already; we did not need these assholes adding more.
paulp is still butthurt? Lollerskates. Yeah, Scala collections are fucked. No, that doesn't mean Scala has no future. Troll somewhere else.
yup very true. For those running Scala jumping up to Java 8 prob is not a deal breaker.
Thanks this looks interesting
For the logging API, please use SLF4J, especially in any libraries you develop. That way, the application and/or user can configure all logging in one place.
Scala compiler is also broken beyond repair. Watch carefully. This problem is common for all syntax-driven-statically-hyped languages - C++ is the poster child here. Linus Torvalds has some strong opinions about C++ (and its compilers) and he is right. Also, since Java 8 Scala has nothing to offer maybe except some minor syntactic sugar. Scala collections - language foundation is broken. Thats enough for me and many people to avoid Scala like a plague. This language is built upon a mess. Edit: Of course I'm exaggerating here a little, but AFAIK telling the truth is far from trolling. I think Scala developers are trolling themselves and people like you.
and that is roughly 30*((60/1) * 45 + 41) = 82230 words. tl;dr
Logback wouldn't accept any patches to fix the reconfigure bug. That was what started log4j2.
It works with the slf4j API.
That's not good enough. It should not *have* a native API. By having one, it encourages fragmentation.
Java programmers should move to Java8 too. Life is too short.
The assertion by the title is almost certainly **wrong**. Read the comments and the answer to the question. I did a quick test on my machine, see no difference in performance between anon and lambda. You just need to warm up JVM first.
I have to work with a contracted .NET developer who doesn't log anything and objects to implementing any sort of logging into his applications. I don't know why we still pay him... Anyway, coming from a sysadmin, I fucking love logs and having the ability to read logs for every event. **Every event!** With different levels of reporting and for granular selections of parts of the application, of course (ie. error, warning, info for a user auth sub-mod or something like that), that can be changed easily and preferably without restarting the application. That's some pretty hefty and in-depth logging, but that's a best-case scenario that I wanted to share. As for where the logs go, we send them to logstash.
Programming in general is an art. :)
It doesn't really matter. Log4j provides a bridge in both directions (log4j to/from slf4j). Plus, the log4j API has more features, too. The API might gain additional extensions down the line, too.
Doesn't really matter? Do you somehow not understand why the aforementioned fragmentation is bad?
They are redoing the collections. I think its ok that Java can't call into Scala collections. If you want something to be Java and Scala callable write in Java. 
Logging has so many purposes that it's really hard to reduce them to one comment here. That said, you want information about your running application. No, that was no question. At the very least you want to log errors (if your application exits on error, you can get away with showing the error on the console, but many applications *have* to continue even in the face of errors. You also probably want to log warnings - things that aren't errors yet, but may lead to errors in the future. Those are probably the most useful log entries you can get. Finally, you may want to get information about your program's runtime - e.g. which part of the program was running when. Trace logging when combined with timestamps, make for a good baseline profile, and you can use simple unix tools to find out e.g. how many times a method was called. For that last one, tracing the start and end of most interesting methods is a cool thing to have, especially on production, where you usually cannot get a debugger. Also calling Logger.getLogger every time you write a log is just a waste of runtime. Just create a static field, initialize it and be done with it. Or if you can't be bothered, use [TinyLog](http://www.tinylog.org)
The fragmentation won't go away. I really don't think it's a big deal. We have Commons Logging, JBoss Logging, Pax Logging, OSGi Log Service, and plenty of frameworks and servers provide their own logging API abstraction (like Jetty). Add in JUL, too.
That HTTP client sounds like the prelude to NIO.3.
One of the main things that I log would be an exception... I've seen several times where there is code like this: (sorry I'm doing this on my train ride home) --- FakeObject fakeObject; try { return fakeObject.doSomething(); } catch (NullPointerException e1) { return ""; } catch (Exception e2) { return ""; } --- Now, with my example.. Wouldn't it be nice if you knew what happened? In my scenario, we'd get a NPE since the object was never instantiated but we'd never know that since it just returns an empty string which is extremely dangerous IMO. Sorry I couldn't answer more but it's hard to type so much on a phone for me. :)
None of their documented examples compile to Java. Ironic it's called RxJava. You are better off learning from their unit tests, as they compile to Java. 
Plan out your day very carefully. Decide ahead of time what sessions you want to go to and which are your backup. A description might sound good to you at first and then you arrive and find out it's not what you thought, beyond you, or below your level. Don't feel bad about getting up and moving to another session, they want you to do that. Just know your backups. The worst part is when two or more sessions are going on at the same time and you really want to be in all of them.
solid advice sir. definately dont wanna waste my time in a session when theres a good alternative 
Hey, this is pretty nice. I use these types of tools, a lot. I can't use this one though, because copy/pasting the pretty-printed output doesn't work very well. For one, I can't not grab the '-' (the image used to collapse branches). Edit: Also, the formatting is completely lost when I copy/paste. Also, CTRL + A should only select the contents of the box I'm in. See jsonlint.com. 
I deeply appreciate the thoughtful reply Jeff. I would assume my main focus at JavaOne would be to get a deeper insight into java and it seems like your reply drilled into that. Cant wait!
If you want the jar to be available to any user on the server /usr/local/bin/{name} would be a good candiate. Otherwise, I would put it somewhere in the user's home directory such as ~/bin or ~/{name}
It's turtles all the way down. 
Thank-you!
My interpretation of that is that you only need to include or make available the source code of the EPL-licensed program you are using, not your entire application.
See here: http://choosealicense.com/licenses/ Over your mouse on the "Disclose Source" requirement at the Eclipse license. Just like the GPL, you have to be ready if someone ask for the source code of any derived work. It's kinda sad they choosed that license, since there's a lot of other license out there that doesn't have that "Disclose Source" requirement.
codeacademy does have java script.. ?
Nothing "compiles to Java". Java the programming language compiles into Java Virtual Machine bytecode. Groovy (the language these examples are in), Scala, etc. all also compile to Java Virtual Machine bytecode. If you read about RxJava, one of the goals is to be completely language agnostic and target the JVM. The core is in Java and there's language adapters for Groovy, Scala, Clojure, Kotlin, etc.
I like your style
&gt; Have you ever used System.outs to debug code? See, this is the point, and where I start to get confused. Yes, of course I've done printf-style debugging on occasion. But normally... I use a real debugger. And that's the point; so far, I've only rarely found myself in a situation where a normal debugger wouldn't be a better tool than logs. I do occasionally use printf style debugging in thick clients I send to people; in those cases, I usually have something that sets System.out and System.err to something that captures those two and puts them in a hidden bit of my GUI someplace. Then I can capture all of that and they can simply copy and paste it to me via email. I feel like I understand the point of all of this, now... I see two votes in this thread for the SLF4J shim, so I'll definitely poke at that first.
Thanks man! The tutor instinct just sort of kicked in and took over ;)
A long wait to start the conference. Quick, performant sessions once you're in the door. Occasional pauses for janitors to walk around cleaning up garbage.
I've given a few talks at JavaOne in the past, including the main hall. Like /u/JeffAtSun suggests, plan your time before you get there. JavaOne is big and overwhelming, so it's best to know what you want to get out of it before you arrive. And, like he says, definitely seek out the BOFs. They provide a more intimate setting and the opportunity to interact directly with the speaker. Avoid the product-specific talks unless you are genuinely interested in whatever is being sold. Mostly, expect breadth, not depth. Look for topics that will inspire you to learn more and dive deeper once you return from the conference. Lastly, have fun!
But using a library as a component in you application does not make your application derived work, especially if you have not modified the library.
According to EPL, it's applicable only if we are making changes to the libary source code
Do you have proof of this, for example a jira ticket or forum discussion ? Otherwise this is quite an incriminating statement to make.
Yes, it does answer my question. 
You also could use the Pentaho Report Designer. It's quite straightforward and can be easily integrated into a Java application.
The arguments for Go in this article are ridiculous. &gt; Go also offers closures and maps, which associate values of one type -- the key -- with values of another type, are a built-in data structure in Go. Yiihaa! Built-in datastructures like the maps in Go are poor compared to the Java collection library (not to mention what is available in Scala). The built-in concurrency with Go routines is nice, but not better than something like Akka. The omnipresent slices in Go are leading to meaningful return types like `[][][]byte` (from [FindAllSubmatch](http://golang.org/pkg/regexp/)). &gt; Semi-automatic resource management in Go is offered via the defer keyword. "Instead of having to create, do stuff, and then close at the bottom, I can immediately say, 'Run this function after the rest of the function completes'," Stine said. That doesn't solve the problem that exception handling would be done at the wrong place. Typically you have to go one abstraction level up to handle exceptions properly. The Go approach to error handling is in no way better than exceptions in Java. This article doesn't mention the real strength of Go: its simplicity, (cross) compilation to native binaries and small memory footprint. But in general Go is not an upgrade for Java developers.
&gt; (not to mention what is available in Scala) I'm glad you didn't mention it because actually Scala collections are crap. https://www.youtube.com/watch?v=uiJycy6dFSQ
Exactly. That's why Scala will never gain traction. There's simply no reason to use it since Java 8. 
Given the proliferation of API bridges, I maintain that the fragmentation problem in the java logging space has been massively overblown. What is your personal problem with logging framework fragmentation that hasn't been addressed by an API bridge and that isn't "Not invented here"?
The unnecessary complexity that API bridges introduce. You *are* competent enough to understand why unnecessary complexity is bad, I hope? There should be exactly one standard logging API that everyone uses. Introducing a new logging API—particularly when we already have a perfectly good one—is a step backward. I'm frankly shocked that I'm having to make these arguments. Have you people learned *nothing* from SLF4J?
&gt; unnecessary complexity I'd argue that if the logging space isn't to stagnate, the complexity of API bridges is *necessary* for the time being. Why? Because despite your claims to the contrary, one size *doesn't* fit all. If the whole space of logging is to move forward, useful API changes shouldn't be disallowed because "that's how we've always done it". And if you are so keen on standardization, why do you propose SLF4J when Java already comes with a standard java.util.logging API? If there was one decreed API that everyone uses, it should be JUL. Note that the developers have even distanced their default API from the Log4j API. This was not done by accident. Had they tried to extend an existing API – be it JUL, Commons logging or SLF4J – they would have unleashed classpath hell. So be shocked all you like, but the log4j2 API is not going anywhere. If you take a few minutes to look at the API additions, you may even learn something new.
Go to the keynotes. Ask yourself the question: would I buy a used car from this man. They are the representatives of their organizations.
EPL isn't a license for library, it's a license for software. If it would be on dual license like LGPL+EPL, there wouldn't be any trouble. Right now, if someone find you are using EPL code as derivative work, they can ask you the whole source code for it, even if you didn't made any change to the library, just like the GPL. Would you suggest choosealicense.com website made an error?
The fun thing which people seem to miss is that even with the issues mentioned, Scala's collection library is still far ahead of most of the alternatives. But hey, that would actually require understanding what's said in the video, not just dropping the link on reddit.
What is "classpath hell" supposed to mean?
If you have two jars supplying the same interface differently, your system may behave differently depending on which comes first on the classpath. Thus, classpath hell. I presume you haven't worked on large projects before, right?
choosealicense.com was validated by actual lawyer and there's no mention of that. We can even check the actual text: &gt; 3. REQUIREMENTS &gt; &gt; A Contributor may choose to distribute the Program in object code form under &gt; its own license agreement, provided that: &gt; &gt; a) it complies with the terms and conditions of this Agreement; and &gt; &gt; b) its license agreement: &gt; i) effectively disclaims on behalf of all Contributors all warranties &gt; and conditions, express and implied, including warranties or &gt; conditions of title and non-infringement, and implied warranties or &gt; conditions of merchantability and fitness for a particular purpose; &gt; ii) effectively excludes on behalf of all Contributors all liability for &gt; damages, including direct, indirect, special, incidental and &gt; consequential damages, such as lost profits; &gt; iii) states that any provisions which differ from this Agreement are &gt; offered by that Contributor alone and not by any other party; and &gt; v) states that source code for **the Program is available** from such &gt; Contributor, and informs licensees how to obtain it in a reasonable &gt; manner on or through a medium customarily used for software exchange. Also, see the definition of contributor in the same text. If your work is derivative of their piece of code, then you are a contributor. I known someone that had to change library because of that statement, he had to use an another library, so all his month of work with BIRT were meaningless. You don't want to to the same mistake.
Yes. Large projects whose dependencies were competently managed (with Maven, Ivy, etc). This sort of amateur-hour nonsense doesn't happen in a project run by people that know what the hell they're doing. If you're at risk of "classpath hell", then your own ineptitude is a much bigger problem than the design of your logging library.
&gt; This sort of amateur-hour nonsense doesn't happen in a project run by people that know what the hell they're doing. And have complete control over the frameworks and libraries they're using. Ah, what a *comfortable* position to be in. So if you have a nice OSGI environment where every library is its own bundle, or your build process re-packages everything to avoid clashes, consider yourself lucky. &gt; [...] your own ineptitude [...] Rather that of some of my former clients. But I digress. TL;DR: Just because you haven't got a problem (yet) doesn't mean that a library author (like e.g. those of log4j2) shouldn't think about those who have.
Lucky? No. I consider myself *competent.* Proper dependency management is a given. If a project doesn't have it, that project's developers and/or leads are morons and should be flushed and replaced ASAP. And yes, I realize that there are a lot of incompetent programmers out there. That doesn't mean everything should be designed as a crutch for those charlatans to lean on. Design a system to be foolproof, after all, and only fools will want to use it.
No. I consider their clients incompetent.
Should work: [http://pastie.org/private/loweztsvduq6kozw7rnvhq](http://pastie.org/private/loweztsvduq6kozw7rnvhq) EDIT: Didn't see your posted link, that has almost the same answer. Its the best way I can find, and it works.
I'm not suggesting they made an error, I'm suggesting that you are not correctly applying the requirements of the license because you are not using the correct definition of "derivative work." If I were to download the BIRT source code and modify it, creating my own customized reporting framework, that would be a derivative work and the EPL requirements apply. However, if I simply use BIRT as it exists now (without modification) in my application, my application is not a derivative work. "For clarity, merely interfacing or interoperating with Eclipse plug-in APIs (without modification) does not make an Eclipse plug-in a derivative work." (https://www.eclipse.org/legal/eplfaq.php#EXAMPLE) Furthermore, even if I were to create my own custom reporting framework and then used that custom version in my application, the application is still not a derivative work! The custom reporting framework itself is, and the source would need to be made available for that portion only.
Ah yes, the homelessness. In a city that's supposed to be forward thinking, I found it quite surprising it had such a pervasive homelessness problem. My own hometown (much smaller and colder) had similar issues, but we actually stepped up and helped these people. I digress. If you don't want to see it, stay upwards of 5th(?). A friend and I decided to take a walk that way on our first day and quickly turned around once we figured out we had stepped into the tenderloin.
Ah - language fanboys. You are a funny bunch :)
I would like to add that my attitude stems from a slow, progressive disillusionment I've suffered in regards to the average programmer. I used to think coders were geniuses pretty much by definition, but years spent dealing with other people's stupid bugs and stupider designs have forced me to arrive at my present conclusion. I do *not* enjoy debugging other people's code, yet I've found myself having to do so on numerous occasions. My patience with such nonsense has worn quite thin over the years. I understand why you'd think of me as suffering from Dunning-Kruger. I sound like it, for sure. And there are certainly times when I doubt myself and my skill. Am I still overestimating my own competence, even with all I've learned and accomplished? Perhaps I am. I don't know. Anyway, I thought I should share some context on why I have such a snappy, dismissive attitude about "classpath hell". I hope it helps you understand my perspective.
In that case please accept my apologies - you were certainly sounding very dismissive, which does not exactly make one think of an open mind. Thus my reaction.
&gt; I'm not suggesting they made an error, I'm suggesting that you are not correctly applying the requirements of the license because you are not using the correct definition of "derivative work." So they should have included EPL along side of LGPL, then? I think the problem is there's no definition for "derivative works" in the actual license text. So even if the FAQ say mention "derivative work" is consistent with the U.S. Copyright Act, if you sell your software outside of the USA, you are prone(more than ever) to get sued, because other country may have other interpretation of "derivative works".
I've moved to Java-only Spring configuration, but sadly I'm stuck on Tomcat 6 and Servlet API 2.5, so I can't get rid of the web.xml just yet!
Looks like a more opaque [SBT]( http://www.scala-sbt.org). 
I would rather just have a tool that could rerun a goal continuously (e.g. test) on the same project, keeping the entire maven project structure in memory between runs. If it did all the work up until the "validate" goal, and reused the result of that work for subsequent runs, it could really increase speed, I think. Also, I wonder how this compares to running gradle within groovysh.
Well or just make a fatjar with maven shade + embedded jetty server. DropWizard is more complexity for more features, which many apps do not need.
Is schedule builder available now... I can't find it? Also, are the keynotes worth going to? I understand that it's just a big sales pitch but even so I've found that keynotes often give you a good sense for the direction the company wants to take the product in (and maybe more importantly, what they're ditching). On the other hand, I'm an east coaster who's always wanted to do a hike in the Sierras and if the keynote is a pure BS session I'm going to be sad that I missed my chance to get in some big mountain time.
I don't know, I prefer xml config. at least that way my spring stuff is all in one place.
I'm from the east coast too. I need to do singe research on the points u talked about. Also ever hiked Jones gap?
Jones Gap, SC? Nope, 99% of my hiking has been in the north east in Vermont, New York and New Hampshire.
I've also recently started using jasper. I got the eclipse plugin and it's not too bad, however it is a bit of a hassle to just get it all started. I found this book http://www.infoap.utcluj.ro/bdate/jreports.pdf hosted by some romanian university and it's helped me out a lot with the basics. Once I got it going, I found it to be very powerful. 
When you enter `null` as a value in an array or in a dictionary, it is rendered as an empty string. `null` and empty string are two very different values. 
It doesn't. That project is dead as a dodo. 
It's either on the mailing list or an email from Ralph Goers.
Really? You don't need a health check API for monitoring in production? You don't need an admin port that can be closed off on the firewall for security? You don't need a way to keep track of metrics on key REST APIs? You don't need all best of breed libraries (logback, hibernate validators, jersey, jetty, erc) all integrated for you? Then you must have a very simple app that has not been deployed in production yet. We did a Dropwizard equivalent ourselves prior to discovering it (exactly with embedded Jetty and shade). And dropped it as soon as we realized how much more complete and easy to use DW is.
Shouldn't this be titled Good Bye Deployment Descriptors? XML is just the type of data representation technology used. Edit: This was a serious question.
http://www.crashub.org/
It would be nice if you could provide some detail information or at least some pointer to a technical blog for this. I click on the link and it takes me to the front page. yeah, then what?
http://mojo.codehaus.org/flatten-maven-plugin/examples/example-multiple-versions.html
https://news.ycombinator.com/item?id=8099713 http://maven.apache.org/plugins/maven-jarsigner-plugin/ http://maven.apache.org/plugins/maven-gpg-plugin/ http://stackoverflow.com/questions/3598424/jar-signing-strategy-in-maven-projects http://stackoverflow.com/questions/6565084/maven-verify-signatures-of-downloaded-pom-jar-files http://code.google.com/p/maven-android-plugin/wiki/SigningAPKWithMavenJarsigner http://mojo.codehaus.org/animal-sniffer-maven-plugin/examples/checking-signatures.html http://code.google.com/p/forbidden-apis/issues/detail?id=13 https://issues.jboss.org/browse/JBPAPP6-186 https://github.com/rimerosolutions/maven-wrapper/issues/4 http://www.reddit.com/r/netsec/comments/2c0qce/popular_java_repository_susceptible_to_mitm/ 
&gt; But hey, that would actually require understanding what's said in the video, not just dropping the link on reddit. There is nothing to understand. Just read other people opinions. IMO Clojure's collections are better than Scala's. I think most of Scala's immutable persistent colections are now based on Clojure's collections. So if you find them useful why not use the original ones which are simply done right from the beginning? PS. is there anything in Scala that is not a me-too copy? Odersky tries very hard to make C++ equivalent for JVM and I'm not saying that's good.
Not even a link to [Lombok](http://projectlombok.org) @Data? You don't want to build all this stuff manually, do you?
Or use Clojure's collections. I tried and they work in Java without a hassle. I don't remember where, but i red that new Scala collections will be based on those from Clojure.
DeSoto High school in texas
After spending 5 minutes on this website, it is still unclear to me how this is an advantage over something like Grails. I'm not a fan of Grails, but if your only innovation is 'JavaScript' then that might not be enough. 
Yeah I had that mindset for a long time but you can still have all your Spring Java config in one package. If you follow a convention for naming classes across your app tiers its straightforward to follow. Also the later versions of Spring support the Java EE CDI annotations so you should consider using those (@Named / @Inject) as well so your POJOs aren't as tightly bound into the Spring DI container.
This has been around since Spring 3. The difference is using the Annotation scanner rather than loading up XML. It works well if fully embraced. Getting rid of web.xml makes running up a cheap jax-rs service take no time at all and any java dev can use/extend it :)
Looks amazing. Gonna have to check this out.
I figure Lombok is orthogonal to the subject of the article, but I'll put a link in there.
This is exactly what I meant. You are just embarrassing yourself.
Wish I lived near you to help out. Have you thought about sending out emails to software companies in the area to ask for volunteers to assist with preparation for the exam? Have you thought about trying to start a Kickstarter to get funding for computers? I'd donate. Java is a pretty good choice. Do you plan on making a game to get others interested in joining the club? Our computer club in college started out trying to make a game, but they kept adding requirements and no one wanted to actually code it. Best of luck in this really cool endeavor!
I'm not going to teach , the students will learn on their own.Whether that be from a book or online course. If they.need help we have a math teacher that is great at programming and another kid (friend in the op) who knows alot about programming too. Last resort would be google or something like stackoverflow. 
As one who has been mocked for not using a package manager, I can only say: Nelson-HAHA.
We live a hour from LA ( I lied to the other kid about texas) but I doubt any tech company would help , in the future though and if we need it , I bet we can get some college student to help. The schools have computers but we just need access. I only picked java because of the AP exam but I'm sure if we have time , a big project will be done for us or to give back to the school. Thanks for the the support. 
✓_✓ /u/Tyler_1290 /u/Eligagernorris ✓_✓
`@Data` does the right thing if you have only final fields.
You can also use this website to learn how to speak in broken English. Good work.
HULK WANT BECOME EXPERT PROGRAMMER! 
If only there was an IDE for writing English texts, with compiler errors and all.
 &gt; Scala's collection library is still far ahead of most of the alternatives. It is not. Actually most of alternatives are better than Scala. &gt; This is exactly what I meant. I'm not sure. You say Scala collections are good, but most of who used them say the opposite.
The age old trick: have you rebooted your computer?
Yes. Still does not work.
I assume you are using Windows. Look in the task manager and kill any and all processes and tasks that mention java, and try again.
&gt; Unchecked Exceptions = Unexpected error &gt; Checked Exceptions = Expected error This distinction applies only sometimes. Modern framework usually translate all checked exceptions into unchecked, so even "expected errors" are often unchecked exceptions. From what I hear and read, checked exceptions are usually considered design mistake and it is not recommended to create you own. From that point, it does not seem to make sense to differentiate between them in the code. &gt; But if say a parse exception is thrown (bad user data), I might want to keep the valid data and just discard the invalid data some of the time, but other times I may want to rollback. If the default behaviour was to always rollback I would not have the opportunity to commit when I wanted. For me, natural way to solve this is to have by default rollback on all exceptions, but have "rollback-for" for this specific parse exception. Basically, you explicitly say that you want to handle this exception in some special way. But what troubles me more is that I'm not sure whether you even have choice of commit/rollback if you throw checked exception. When your code leaves transaction context (crosses transaction demarcation), TransactionInterceptor (in Spring at least) has two options - it can either rollback or commit transaction. In the case of checked exception, it commits transaction. Basically the choice whether to commit or rollback lies always inside transaction context (quite obviously since there's no transaction outside transaction context). So you can still cleanup the data - keep valid data and discard invalid data, but this time in a different transaction.
I should note that Gradle actually abandoned Ivy for an internal solution a while back. Maven still uses Aether. Sbt uses Ivy. Not sure what the crazy-named Clojure build tool uses.
It's impossible to give you *the* answer, It all depends on the project that you will be working on. There's no general "every organization has to use this" thing.
I bet Java 7 is the current standard today since 8 was just released recently and may have further bugs. Software design patterns? Not much. Probably knowing the basics of abstract factories would be good since there are a lot of frameworks that are based on dependency injection. Webservices, probably try reading up on REST and SOAP. Middleware frameworks would vary depending on the organization. Version control, probably would be Git or SVN. Play is a good framework to learn but you'll have to learn how to program on Scala. Then again, these frameworks vary. Try learning JPA/Hibernate/Spring? Concepts of dependency injection would be really helpful as well. But then again, it depends on what job you'll be taking up. 
I'm speechless!
What's the error?
Web apps. Get familiar with how web apps work. Struts or any other framework works on top of this. Also the MVC framework. data is your model , the view is how you present your model and the control is what you use to manipulate the model. good luck. 
Bump for git, JPA/Hibernate/Spring, AOP, SOA, maven, DI, and maybe design patterns 
Hope it won't turn out in the usual cloud-only monitoring crap once it get more mature.
/u/FlatBot there is already an issue for that. Feel free to vote for it. https://github.com/stagemonitor/stagemonitor/issues/11 /u/Effetto the project will always be open source and self-hostable. there might be a hosted service in the future for people that don't want to host themselves. thx for the &lt;3
It stores its metric data in graphite. You can tell stagemonitor where your graphite server sits. See also https://github.com/stagemonitor/stagemonitor/wiki/Step-4%3A-Metrics-Dashboard, https://github.com/stagemonitor/stagemonitor/wiki/Configuration-Options#reporting-options. Request traces (including call stacks) are stored in elasticsearch and can be displayed with the kibana dashboard (https://github.com/stagemonitor/stagemonitor/wiki/Request-and-Call-Stack-Dashboard). You can also choose to only log request traces. You don't need to turn the javaagent on. But if you don't you won't get call stacks from requests (https://github.com/stagemonitor/stagemonitor/wiki/Configuration-Options#reporting-options) nor will annotation-based metric tracking work (https://github.com/stagemonitor/stagemonitor/wiki/Track-your-own-metrics#declarative-annotation-based). Graphite and Elasticsearch don't live in the same JVM they have to be set up externally. Or did I get you wrong on 'Is it possible to have parts of it running from a separate JVM?' ?
It'd be good to practice writing clients for caches (redis, memcache), databases (mysql, postgresql, mongo), and queues (activemq, rabbitmq), then trying to unit test them to 100% line coverage (cobertura coverage tool). Enterprise development is all about making shit talk to other shit and proving that your shit works in isolation.
How on earth does one manage to break the javadocs so badly?
I build non web app Java (SE) apps - but I'd still like application monitoring. Is this a solution for my use case? Or just for the web?
Play, Netty and Akka are not common in large companies. I am sure there are exceptions but most large companies use Hibernate, with JavaServer Faces (JSF) or Spring MVC. Also while it is good to know Java 8 a lot of large companies are not at Java 7 yet. 
CDI is the standard Java Dependency Injection framework.
OK, fine. Maybe Play is OK. Either way, I am just happy that Java is moving away from WAR files and stand-alone servlet containers. This approach is looking so dated when you compare how easy it is to make a web app in Go, node.js or other more modern languages.
You get the most out of stagemonitor if you have any kind of request-response semantics (to track response times of requests and get request traces including call stacks). Also, if you don't have a server-based application it will be difficult to get metrics from your real users (as with any solution). However, due to stagemonitor's plug-in based design you could for example add dependencies to only stagemonitor-jvm, stagemonitor-jdbc and stagemonitor-ehcache.
For sure, many of the bad cruft things are slowly being moved away from: XML config files SOAP huge web server But the language itself still has a lot of cruft ;( Really enjoy Scala when I can use it, to get stuff done without cruft.
They are "server based" they're just not "web" based. Thanks for the answer. 
If Scala has not managed to kill Java by now, it never will (especially with the improvements in java 8). They have gone too far and overcomplicated the language. I have seen some Lift code that is truly and awfully unreadable. 
Well, I don't need it to kill java to use it myself. I just need enough people to use it that it keeps getting love. I can still import all those java libraries ;) Also Lift has been dead for 2 years, Play is a lot more sane. For example here is the backend code for a form with 2 parameters that will shove it in an object called UserData.. val userForm = Form( mapping( "name" -&gt; text, "age" -&gt; number )(UserData.apply)(UserData.unapply) Maybe weird to a Java guy, but not a Scala guy
You are seriously embarrassing yourself. Just stop it, you are just making it worse.
&gt; Scala collections - language foundation is broken. Thats enough for me and many people to avoid Scala like a plague. This language is built upon a mess. And this is the thing which you don't seem to get: Could thing in Scala be better? Sure! Are things even worse pretty much everywhere else, compared to Scala? Absolutely! &gt; Edit: Of course I'm exaggerating here a little, but AFAIK telling the truth is far from trolling. I think Scala developers are trolling themselves and people like you. Another thing you don't seem to get is that you are not the first "genius" to discover the talks on YouTube and to run around, telling people that the sky is falling. :-) It's just that some people realized it a bit earlier than you that they were making themselves look like idiots. :-)
This is a critical issue, if it's jvm per acct, the service won't scale, if it's not sandboxed properly, it's not secure or reliable. Too bad, you all have done a lot of work. But there's a reason this hadn't been done.
Difficult to describe, but here's something: * composed of mostly bash scripts and some C (or at least initially, maybe it changed) * overcomplicated command line interface (at least compared to Mercurial) * not a first class citizen on Windows
I agree that in general unchecked exceptions are the norm, and for the most cases preferable. But in the context of why transactions are only rolled back on unchecked, that is the reason. Probably more of a historical thing, but does bring some flexibility. I have not worked with Spring for quite some time, so I'm not familiar with the rollback-for or the implementation of the TransactionInterceptor. but I'm assuming that the TransactionInterceptor is going to work some what similar to the EE transaction management. In EE with the default of commit, if you want the rollback you call rollbackOnly() on the session context.You can probably find something in the TransactionAspectSupport class (if memory serves me). The other option with EJB3 is to use the @Transactional annotation. Something like this: @Transactional(rollbackFor= Throwable.class, noRollbackFor=ParseException.class) 
Didn't want to register for account to comment there but the JAX-RS client API is a lot saner and easier to use than Apache HTTP client.
Have you been [here](http://www.cryptoworkshop.com/guide/) and looked at the PDF guide?
1) About multiline-strings: IMHO should IDEs implement this, and I have no idea why this hasn't happened yet. Seriously, why doesn't it work just like this: You press a hotkey or click a little symbol, and a text editor opens that holds the string. You edit, you confirm, and the rest is not your problem. 
Honestly most of his "annoying things" are things I really appreciate about Java. Scala has some features that I envy, but syntactically it is garbage IMO. I like knowing exactly which type everything is. I like knowing that if I see ";" that is the end of the statement. I like that methods all belong to one and only one class. I like how when I write Java and the guy next to me write Java they are going to look basically similar. Scala is like communism... It sounds great in a book, but in the real life it just does not work all that well.
Multi-line strings seems like such low-hanging fruit. Type inference and the like would potentially be a major change and require a shift in the development community. Multi-line strings are purely syntactic sugar. 
In KONA define yours object with a UI Tool, adding the attributes, types and validations. with this in less than a minute you have your backend running, this maybe is not enough, but there you have a back office ready to insert data (out of the box), Tools for monitoring the app, buckets, etc. But the most important are the apis (helpers) that you can use, for example find object in a model (table like sql) is like this //search with pagination in a model var model = kona.model.open("person"); //connect var find = { //build the query in json mode name : "some" } var q = model.buildQuery().find(find).limit(10).offset(10); with these you are ready to use from the mobile app
the flag `-stylesheetfile` + a-typical-tecnical-person-with-no-eye-for-design, i guess :-)
Java 9 should have another Project Coin like initiative to add some of these functionalities.
Why does it require me to install so many things to run it? If I don't want to install those things, why is my only other option installing a virtual machine in which to run it?
&gt; I like knowing exactly which type everything is. I like knowing that if I see ";" that is the end of the statement. That's a style preference. If you prefer type annotations and semicolons, nothing is preventing you from using them. &gt; I like how when I write Java and the guy next to me write Java they are going to look basically similar. This isn't true at all. For example, Some people DI values into a class using EJBs using annotations and reflection. Some use constructor parameters. Some use factories. Some use AspectJ to rewrite classes to instantiate the dependency they want. Some use dynamic proxies to determine implementation at runtime. Some use all of the above at the same time, and none of it looks remotely similar.
I have no idea how to do any of this. I download javaRA but then winrar went apeshit and I cant open it.
There were no tasks that involved java 
So I got javaRa to work then hit the uninstall and attempted to uninstall the 64bit version. (I do run the 64 bit for sure.) And I got the following error. There was a problem starting C:\Program Files\Java\jre7\bin\installer.dll
Did it to Java 7 update 65 and got error There was a problem starting C:\Program Files (x86)\Java\jre7\bin\\installer.dll
Seriously, you're using WinRAR? Did you happen to pay for it? If not, why would anyone use that software when better compression has been available (and popular) for a long time now? http://www.7-zip.org/download.html This one will *not* go apeshit over a simple *zip* file.
Then just delete the Java folders in "Program Files" and "Program Files (x86)" manually. Then try the program again so that it can remove remaining registry entries etc. If it says "I suggest you try the normal uninstaller first." or something, remember that it's a *suggestion*. There should be a button of some sort to get directly to the wiping.
I assume this means "Java is installed, and Minecraft works!" Have fun.
Java 8 is good to learn to get a glimpse of what's possible, but Java 7 is way more important in large organizations. I doubt many large orgs are on Java 8 yet...certainly very few that I've seen have anything aside from trivial applications running in 8. Plenty is still running on 6 and 7. Version control, definitely. Find out what the organization uses before wasting a lot of time learning the wrong system. You can always do that later!
Thanks, do the shared vms run in a security manager? You are saying the Indie plan is in a shared jvm? Because $45 a month to share a jvm is not compelling, I think getting 10 requests a second is a bit unrealistic as well. How do you throttle request, is it a hard limit?
Except that in Scala you have to define types for function parameters. For example: def sum(a: Int, b: Int): Int = a + b
7. Extreme patience But in all seriousness, maven, ant, spring, some server like tomcat, and jenkins would be good to know
Multiple servers is possible. I'm not sure, what you mean by "can it track related requests (in the same session) that were executed on different JVMs". Could you give an example for that?
Most of these are nightmares in code maintainability, and generally lead to inconsistent design. Sure, they might be convenient when first developing the code... but they come at the cost of readability and maintainability. And most of it doesn't improve productivity much at all. I mean, the Parenthesis point really highlights this. Why would that ever increase productivity? And since you're only going to use it when you think it's "convenient", your style is inconsistent, and quite frankly all it does is add ambiguity at no benefit. And throughout your code examples, sometimes you use semicolons, sometimes you don't... it's just inconsistent and it makes me question intention. Not a good thing. The best way to increase productivity is to make code that is easy to read and maintain. Increasing the initial development process should ideally only be done when it doesn't hurt that.
You don't have to install any backend if log-only monitoring is ok for you (see https://github.com/stagemonitor/stagemonitor/wiki/Step-2%3A-Log-Only-Monitoring). But yes, if you want all those shiny dashboards, you have to set up quite some things. It might be possible to develop a tool with no dependencies, but I don't have the time and will to reeinvent the wheel. Graphite-Grafana and Elasticsearch-Kibana are awesome tools - try them out and you'll see ;) Also, you don't need to install everything at once. I'd recomend you to install Elasticsearch and Kibana at first (they are really easy to install!). That gives you the most benefit for dev-time monitoring. Graphite-Grafana is especially suited for production server monitoring. Besides, by using the docker image (to be exact it's a container, not a vm ;) it is really fast and easy to get a full blown backend set up.
JSF is an MVC framework too!
I remember when I used to have all that ugly script on my pages before I made my life easy and went with JSF and PrimeFaces. There is an AngularFaces project but it does not have a lot there yet. https://github.com/stephanrauh/AngularFaces 
That's what I mean: http://docs.appdynamics.com/display/PRO14S/Business+Transaction+Monitoring 
I don't know Play. But I don't see why you couldn't do a simpler Form userForm = new Form("name",text,"age",number); like in the Guava Maps class. 
May be cases when you can skip, would need to think about it ;) In your face you are just calling a constructor. In my case I am supplying a constructor and a destructor.. to let you go both to and from an object. Your Form class has no guaranteed way to turn back into page objects
&gt; All that being said, if you want the transaction rolled back 100% of the time on exception, go a head and change the default to Throwable. If you're on Java 7+, I'd recommend a try/catch-multi over catching Throwable, as, this way, you're not handling things like OutOfMemoryError and it also makes it explicitly clear what exceptions you *are* trying to handle in your catch block.
http://marketplace.eclipse.org/content/java-multi-line-string-editor
You are. Scala play form is strongly typed. How would the Form method get the class UserData? Or how does your userForm have a return type of "User"? My userForm has a strongly typed return type of UserData. Now the way play did it is a very generic way to do it.. it is asking for the Constructor and Destructor, and having you pass both in. It could just ask for a class, and figure out the constructor and destructor itself, but then it would less flexible to only save 1 parameter. 
Terrible article. Multiple learning 'resources', but no mention of the official Oracle tutorials or any of the many fantastic java books? Besides that, The New Boston is not a very good resource. [Relevant discussion](http://www.reddit.com/r/learnprogramming/comments/11ubro/28_ways_to_learn_programming/c6ppc38).
That's probably because it's just yet another [blogspam user account](http://www.reddit.com/user/Ccohert).
Having moved from a startup to a large organization, I can tell you that none of the items in your list are important to do well in your new role. The most important skill set to have are "soft skills", not hard technical skills. Obviously it is important to have the hard technical skills, but in large organizations, soft skills are the key to getting things done. 1. Social networking - keep inside contacts in other teams so you have people who will get things done for you when you need to integrate. 2. Escalation - learn how to get attention to your problems from higher ups who can wield bigger sticks to force integration when #1 doesn't work. 3. Appropriate audience - you will deal with different kinds of people - business analysts, other developers, operations. You will need to adjust your communications to the right level of understanding to make the most productive use of everyone's time. 
Nobody's catching anything manually here, this is about setting configuration of Spring ORM ...
Did I say... all of them or something? Nothing wrong with multiline strings or cases (although use of cases probably aren't the best design decisions, but that's not here or there) and a REPL is completely out of scope for the argument since Java does have a REPL (and therefore relies upon the other arguments to make its case). There really isn't a case for "better arrays". The example of array creation in Scala could just as easily been done in Java: String[] a = new String[3]; a[0] = "A"; a[1] = "B"; a[2] = "C"; So that argument was just kind of silly... Not that Java arrays couldn't be improved, just that the argument didn't do it for me. Tuples are a nightmare generally period, and are just a lazy way of avoiding creating a proper class that displays why the association between the values exist. So if you want to be overly literal towards what I said, I include Tuples. Which makes it most. Which as said could be created in Java anyways, and the only special usage Scala has regarding this is use of val. Which is besides the point I was trying to make, but there you go.
&gt; where toString could be a field or a method, it forces System 2 to come in and reason about what I just read, which slows you down needlessly and wastes your energy. I agree with your line of thoughts. In a Java world. But all the article is trying to say is that somehow, "magically" (or probably not magically), Scala has gotten 1-2 things so right and straight-forward, that you're actually *not* going to be reasoning about that. Because those subtle, strange, quirky distinctions of things that don't *need* to be different simply don't exist. In the case of `myObject.toString`. Does it really *matter* if it's a field or a method? What if fields and methods are more or less the *same thing*? Why do you really *need* the distinction? But then again, we Java developers are all victims of Stockholm syndrome, so we might not actually grasp what *could* be possible if we didn't bend our minds around the status quo all the time.
In appdynamics' terms, stagemonitor does support business transaction monitoring, as it is able to distinguish different business transactions (or as I call it, use cases). Those use cases are automatically derived from spring mvc request mappings. If you don't use spring mvc, the transaction name is just the url + the http method. You can group several urls to a use case using regular expressions, such as '/item/\d+/detail: Get-Item-Details'. To map /item/{item-id}/detail to the transaction name Get-Item-Details (see https://github.com/stagemonitor/stagemonitor/wiki/Configuration-Options#other-options). However, stagemonitor is not capable of creating a 'transaction flow map', like appdynamics calls it. That means it can't render diagramms of your system architecture. What does your specific use case look like? Is there something missing in your opinion in stagemonitor that is crucial for you?
&gt; Still no useful methods on that array. So you say, but if I wanted useful methods than I could use a collection instead. The thing though is, the whole thing dealt with syntax. And then suddenly, hey, look, an array has a map in Scala! Well... uh... okay, but that's a bit different than what was said and what it was leading up to. &gt; What's so wrong with tuples? The same thing that's wrong with val. Same thing that's wrong if I created a random object with variables named a and b. It's not that combining things into an object that is a problem, the problem is tuple itself gives no information about the relationship nor content contained.
No! That's exactly what I was looking for! Thanks!
ROFL. Yeah Java really needs a broken collections framework, an unspecified compiler, a lack of private and final... etc.. LOL Go drink some more kool aid. 
Scala is basically just shit and a waste of everyone's time. I guess except for monkeys like you. 
Hi markdacoda, all apps run in a virtualized sandboxed environment. You are not paying for one shared jvm, but a whole scalable infrastructure which consists of several pooled virtual machines that scale on demand. Your backend actually runs in all of them simultaneously. As per the requests per second cap, it is a soft limit and we review the limits periodically to make sure we are giving our users as much as we can. This might change (for good) in the near future. All the scripts (APIs and background jobs) have soft limits on execution time and CPU usage to make sure a script won't affect other apps. 
&gt; the problem is tuple itself gives no information about the relationship nor content contained. When expressing something as a Tuple in Scala it doesn't have to only be a Tuple with no other type information. A Tuple is an algebraic structure, just like a Map. Map[String,String] also gives no information about the relationship or content contained, that doesn't mean it's not useful. object Point { def apply(x: int, y: Int) = new Point(x,y) def apply(xy:(Int,Int)) = new Point(xy._1,xy,_2) } class Point(x: int, y: int) extends Tuple2[Int,Int](x,y) val pair = (1,2) val pointPair = Point(pair) def swap(xy:(Int,Int)) = xy.swap swap(pointPair)
Wow, that butthurt. :-)
Passing a function like this is the lazy man's strategy pattern. That's what you're looking for. 
No, a Map does have information on how the contained data is related, the keys are mapped to values. You give one a key, get back a value associated. Also, just because something is useful doesn't mean it's the right thing to use. And in the case of Tuples, it is almost always the wrong thing to use, especially from a maintainability and readability standpoint and arguably a design standpoint as well. A class name of "Point" with x and y variables are far better than a class named Tuple. Extending a Tuple just to give you a proper name is inheritance abuse.
There is no duplicated code here. Each method is doing different things in different ways. The only way they're the same is that they use lists and add elements in a loop. If that's what you mean by "duplicated" then half of Java code is duplicate code. Before you ask yourself "how" to refactor this, focus more on the "why". Is there something unmaintainable about the code? Something that would be easier to understand if turned into your one-line methods? Some source of defects? What benefit are you gaining from condensing these methods? It seems to me that cramming the item retrieval, looping and returning into a single line makes things *less* maintainable, *less* easy to understand and has *more* chance for defects.
JSON, elastic search, Lucene, Hadoop, lots of NoSQL stuff all seems very popular at the minute! I'd say from a working point of view, it may well depend what grade you are going across at... If it's senior developer or principal developer then be prepared to not write a lot of code but spend a long time in meetings and looking at other peoples! 
Hi, do you have to expone your database as a service (rest) and from android get all the data in json.. other options is use some Backend a a service like konacloud.io or parse.com Regard
You probably don't want to direct connect to the database from an Android app, if Android even supports it. Normally you would need to create a web service that the app can call, which then uses JDBC or hibernate against the database.
Honestly the only experience with mylyn that I've had is the error messages from when the plugin crashes
MiGCalendar ... honestly, it's the *best* and has covered everything I've ever needed in a calendar component for a desktop app.
Came here expecting responses like "We don't" - was not disappointed. Seriously though, I developed in Eclipse on a team for over 8 years. Never used Mylyn other than to resolve plugin errors with it.
Paying $800 for a developer license is a little steep for this project.
&gt;Map does have information on how the contained data is related, the keys are mapped to values If given an arbitrary map of K and V, you only know that for some K there may be some V. Given a tuple of types T^1 to T^n there are values of T^1 to T^n. I don't see how that isn't as useful of an abstraction. &gt; And in the case of Tuples, it is almost always the wrong thing to use Just because you say it is? &gt;especially from a maintainability and readability standpoint and arguably a design standpoint as well. Nonsense, provide one example where using a tuple makes something is unreadable. &gt; Extending a Tuple just to give you a proper name is inheritance abuse. You don't have to inherit that was just an example, you can use a type class as well. object Point { trait PointLike[T] { def x(someT: T): Int def y(someT: T): Int } implicit object PointLikeTuple extends PointLike[Tuple2[Int,Int]] { def x(someTuple: Tuple2[Int,Int]): someTuple._1 def y(someTuple: Tuple2[Int,Int]): someTuple._2 } } case class Point(x: Int, y: Int) type Magnitude = Double type Radian = Double type Vector = (Magnitude,Radian) def multiply[L &lt;% Double,R &lt;% Double](pair:(L,R)): Double = pair._1 * pair._2 val point1 = Point(1,2) val vector1 = (1,1) multiply(point1) multiply(vector1) 
Wow, the first part implies that because your town is mostly Hispanic, there are no opportunities to learn programming. That's pretty racist.
Look into REST
&gt; you only know that for some K there may be some V That's a good purpose and what a Map is used for. The relationship is there. A map is a key value pair. A Tuple is just two objects with an undefined relationship. Do not act like there isn't a difference if you want me to continue taking you seriously. You do not use a Tuple like a Map or vice versa and for good reason. &gt; Nonsense, provide one example where using a tuple makes something is unreadable Did I say "unreadable"? There is plenty of room between readable and unreadable. A tuple is harder to read what is going on. This is pretty basic given, and you have no room to argue otherwise. In every case a well named and formed object will be easier to read. Will it be more inconvenient to create? Yes. &gt; You don't have to inherit Well I'm well aware of that. But I'm not aware of what monster you're trying to do now. Just stop trying to force Tuple into it. I don't have any idea why you're trying to put it in there. I'm not even particularly sure what you're trying to prove with it. You asked me for an example where Tuple is unreadable? I provide you your example here. For example, the case class you provided is undeniably more simple, clearer, concise, cleaner, readable, and just altogether better design.
I agree it's expensive but for us it's always been worth it. Let us know if you find some good and cheap alternatives.
Thanks!
My school is 60% Hispanic, I am Argentine myself, and we are the top school in our state. We have a pretty strong computer science area, with most of our students getting internships in big companies. Most kids in my school end up getting accepted to Ivy League universities, but not all of them have the money so they just go in state or to neighboring states. Anyway, you say you don't plan on actually teaching or helping out the kids learn Java, you say you want them to learn on their own. In that case, why make the club in the first place?
Dayum that sounds like heaven. The highest anyone usually gets to in my schol is UC san diego which is great , but only like 2 or 3 year. &gt;Anyway, you say you don't plan on actually teaching or helping out the kids learn Java, you say you want them to learn on their own. In that case, why make the club in the first place? Discussion , planning , keeping people on check , labs , and most important my college application :) 
I'm not super good at Java 8 yet (we use 7 still), but it seems to me that everything you normally do with with lambdas, you can also do with anonymous inner classes. So why not just use those? Sure, they're more verbose, but if you really want to abstract out that code, you could just make an interface. Say, public interface Applier&lt;T,S&gt; { public S apply(T t); } and make your getItems() method take the Applier instead private &lt;T,E&gt; List&lt;T&gt; getItems(Document soup, List&lt;E&gt; items, Applier&lt;E, T&gt; f) { ... } and use anonymous inner classes to invoke the getItems() method with your individual logic. I haven't tried it but it seems like it would work just fine. Its effectively the same construct as you would make in your Java 8 example without the nice Java 8 syntax. Then again, I agree with the other posters here that the refactor you're talking about might not actually improve the readability or maintainability of the code. Just because you can doesn't mean that you should.
&gt; Tuple is just two objects with an undefined relationship. That's not the definition of a tuple. &gt;You do not use a Tuple like a Map or vice versa and for good reason. Then why do does an isomorphism exist between Map and a Set of Tuple? &gt;I provide you your example here. For example, the case class you provided is undeniably more simple, clearer, concise, cleaner, readable, and just altogether better design. The only thing demonstrated is the difference between inheritance and type classes. Or you do have an example of a type class that is more understandable because it doesn't use a tuple?
The plan is to get a 5 on it and I do have a internship at a computer repair shop if that counts. With this I can show leadership skills which I lack on my application.
You could use the google calendar api. https://developers.google.com/google-apps/calendar/
Just try to do things that you find interesting and fun, and don't do them because that's what you think the admissions officer at whatever university you want to apply to wants to read. 
Being able to track related requests together is a nice feature, but is not an absolute must-have for me. I wanted to know what are the limitation and your responses were great. The next step for me would be to try it on Dev environment. If there is something missing, the only proper way to determine would be to test your solution. Thanks again for the great answers!
Did I say I was giving the definition of a tuple? Because I wasn't. &gt; Then why do does an isomorphism exist between Map and a Set of Tuple You mean, that potentially they could contain the same data? Could being the keyword here, because it seems like you don't understand collections at this point. A map cannot have a duplicated key, a set of tuple can be anything, having multiple of what would be keys in a map. A map has a defined relationship between the key and value, a set of tuple does not. I don't feel like you're trying to understand what is being said any more. These are not swappable concepts. &gt; Or you do have an example of a type class that is more understandable because it doesn't use a tuple? You **gave one**. I mean, what use is having tuple anywhere in the code when you can do this: case class Point(x: Int, y: Int) And you're done? There is absolutely no need for Tuple anywhere in the class, in the declaration, inheritance, or composition. There is never any reason to extend a Tuple, and no reason to use it in the composition. All a Tuple is is a generic case class. If you're specifying everything for the case class, why would you then use a tuple? It's not generic anymore! And here's the thing, if you gave me a Tuple with two integers in it, well, I wouldn't know what it is without context. You give me a Point with X and Y, well, I already know what it is. I don't particularly think this is a controversial point.
If you are familiar with javafx you could check this project with ready to use components http://jfxtras.org 
I'm just confused.
&gt; That's exactly the question I need to stop and think about while reading the code, for no good reason. If it's a method, it could have a side effect, or it could have performance implications. There are definite costs to the ambiguity, so what's the benefit of leaving out the ()? We've been doing that in Java since the very beginning. It's called "properties", and the standard is called "JavaBeans", and AWT / Swing applications accessed those "properties" through simple dot notation: someObject.someProperty The above actually translated to someObject.getSomeProperty() ... where that precise getter might've contained heavy logic, e.g. database lazy loading. So, no. I still don't see the point of *having to* distinguish between attributes and methods, syntactically. I'm not saying there should be no distinction. But most often, the distinction is irrelevant and an implementation detail. &gt; Believe it or not, many of us "Java developers" actually have worked in many, many different languages over a long period of time. I do. I'm a "Java developer", and I love SQL and XSLT, and I don't mind Scala. And I've luckily not yet been exposed to JavaScript too often, where the Stockholm syndrome is even bigger. We've come to *accept* things we've learned over the past 20 years. But every now and then, I have to *explain* Java to a junior developer. And I keep thinking WTF. I have to explain the whole 20 years for his guy to actually understand why things are like they are.
&gt; ArrayList is same like Arrays in programming No? And the more sane way would be to use a `while` loop for the scanner like `while(input.hasNext() &amp;&amp; !input.equals("exit"))`
Your Java 8 `getItems` method can be further simplified by removing the unused `soup` parameter and using streams to map the `f` function over the input `items` list: private &lt;T,E&gt; List&lt;T&gt; getItems(List&lt;E&gt; items, Function&lt;E, T&gt; f) { return items.stream().map(f).collect(Collectors.&lt;T&gt;toList()); } At which point it's barely worth having as a separate method - might as well just inline it into the `getPageElementsText` etc methods: private List&lt;String&gt; getPageElementsText(Document soup, String bySelector) { return soup .select(bySelector) .stream() .map(Element::text) .collect(Collectors.toList()); } Under Java 6 your original methods are about as good as it's going to get.
&gt; JCommander is a very small Java framework that makes it trivial to parse command line parameters. You annotate fields with descriptions of your options: import com.beust.jcommander.Parameter; public class JCommanderExample { @Parameter private List&lt;String&gt; parameters = new ArrayList&lt;String&gt;(); @Parameter(names = { "-log", "-verbose" }, description = "Level of verbosity") private Integer verbose = 1; @Parameter(names = "-groups", description = "Comma-separated list of group names to be run") private String groups; @Parameter(names = "-debug", description = "Debug mode") private boolean debug = false; } &gt; and then you simply ask JCommander to parse: JCommanderExample jct = new JCommanderExample(); String[] argv = { "-log", "2", "-groups", "unit" }; new JCommander(jct, argv); Assert.assertEquals(jct.verbose.intValue(), 2); *I'm not the author, by the way.*
To directly answer your question, in a pre java 8 environment I would have implemented these as guava functions.
You're best bet is to head over to http://www.java-gaming.org/ there's a lot of expertise on this topic over there.
Thanks for posting this. I've used JCommander in a few different projects and it has taken a lot of the heartburn out of command line processing. It can be a little awkward at times so I really recommend learning how to customize it a bit.
I feel sorry for your Dev team being forced into using it. The best thing its ever done for me is give me excuses to get up and walk around after it freezes Eclipse. 
Check vkolev's post: http://www.reddit.com/r/java/comments/2cdsbd/best_way_to_implement_a_desktop_event_calendar_in/cjeqmmb In addition, you could use any web based calendaring with JavaFX using the built-in webkit browser on the desktop.
Dude stop raining on the Functional Parade or the Scala kids will come in and down vote you. ;) You are 100% correct and this is one of the big problems of overuse of functional styled programming. I guess the kids will discover that once they have something significant in production.
What about libgdx? 
Also check out /r/gamedev for lots of friendly advice. 
At the rate Java moves we can expect it to be somewhere near Scala features around 2060
And there I was thinking that prefixing Java projects with "j" made them sound weird. http://imgur.com/w94k4VY On a more serious note, how does this compare to using JSON?
Try Slick2D
http://fahdshariff.blogspot.fr/2011/12/args4j-vs-jcommander-for-parsing.html
IIRC PHP's decode\_\/encode\_json() handle utf8 better? So you'd lose out on all the fun of mb\_\* nonsense if you went that route. More seriously though PHP's serialize() is smart enough to call a classes __sleep() method so you have an interface to control how it's serialized. unserialize() can also instantiate classes when deserializing rather than the object/assoc you'd get back from decode_json().
i looked at this. Is it possible to use this only on the Desktop without any syncing online?
The Agenda component looks like exactly what I need. Now to get it installed I'm going to have to force myself to learn just what the hell Maven and Gradle do.
After a quick look it seems that this is using the ThreadMXBean to do the sampling. A quick look at HotSpot reveals (*confirms) that collecting the stack traces is done at safepoints. This kind of profiling needs to be interpreted very carefully for what it is: it's going to sample only at points where the VM safepoints. The VM may (and will!) try to get safepoints out of the hottest parts of the code. This means that you're potentially measuring the contrary of what you'd intuitively think! In general this method will only give you a good estimate for frames that are not too close to the leaves. If you start to need something more precise there are various tools that can sample and take a stack trace even the VM is not at a safepoint. e.g.: * VTune from Intel (expensive, Windows &amp; Linux) * Solaris Studio Analyzer from Oracle (free, Solaris &amp; Linux) * oprofile (free/opensource, deprecated by perf, Linux) * perf (free/opensource, Linux) (Note that both oprofile &amp; perf may need additional work to map to Java source lines but plugins/tools for that can be found)
This looks like a possibility - Do you know whether there's any problem with it being stuck inside of a SwingUI layout manager? That would be the only stepping stone left.
If you don't want to sync at all you might be better off with a different api. 
Scaling, sliding, and layers means you want a good vector rendering library with a scene-graph model; needing Swing is going to muck with your options quite a bit. Really, unless you're willing to do a lot of scaffolding with Batik or something similar, you're probably going to end up with JavaFX. It's got a lot of work already invested in playing nice with Swing, but you have to be *damn* good and careful with how you manage events across the two threading models. http://docs.oracle.com/javafx/2/swing/swing-fx-interoperability.htm
It says the project needs to be built with Maven. Isn't Maven used for Web Projects? I need this for a desktop project.
https://netbeans.org/kb/docs/java/maven-hib-java-se.html You might not be dealing with a database, but essentially it's the same concept.
Java and C# syntax is very similar, so if you learn one it should be easy for you to port to the other. So in my opinion learning Java wouldn't be a waste of time. I actually learned Java and then had to port one of my apps to C#. It was easy for me to pick up on C# because I was familiar Java. I'm just a hobby programmer, so I don't do it everyday unless I'm working on a project. I haven't heard of any games created in C#, I've mostly seen games in Java in the wild.
I am more aiming to make fun, indie games, on my own time. Heck, I don't even want to become rich and/or famous. I just love it. I will probably make my living (hopefully) off of web-design. If I can off a game, that'd be fantastic, too.
Maven works for all app types. The only reason you are seeing it used mostly for web apps is because most apps are web apps. It has nothing to to with how maven is designed or intended to be used. You'll want to use the [exec](https://stackoverflow.com/questions/681235/maven2-swing-projects-build-run-swing-application) plugin for running your app during development. The [webstart](http://mojo.codehaus.org/webstart/webstart-maven-plugin/plugin-info.html) plugin or [getdown](http://www.hascode.com/2012/05/creating-updatable-java-applications-using-getdown-and-the-getdown-maven-plugin/) plugin can be used for distribution.
There are a million different tools and languages you can use to make video games. You can make them in Objective C for iOS devices, you can make them in Java for Android, you can make your games using Flash or just plain HTML/CSS/Javascript and publish them online. You can be success using any language or platform if you make a genuinely good game. Minecraft was written in Java, for example. 2048 was just plain HTML/CSS/Javascript and it was wildly successful.
yeah it's just a package manager / build tool. will work for any kind of java application
I moved over from C# to Java, it took me less than a day to get started. I never went back to C#.
That is something I've been thinking about, is learning Java and then (when I'm ready) learning C#; since their syntax is similar. This is true, the only game I've seen in C# would be Terraria. 
Is there a reason you decided to move to Java?
I was getting bored of C# and a lot of the people I regularly talk to know Java, so I decided to give it a shot.
Well, for me, Java was what first got me interested in actual computer programming (outside of the web-design realm.) Up until now, I hadn't seriously delved into it. More just dabbled around a bit. So, because of that, I do have a 'soft spot' for Java. 
Then Java is *not* a waste of time. [Minecraft](https://minecraft.net/) and [Delver](http://store.steampowered.com/app/249630/), for example, have been made in Java. And in Java, as opposed to C/C++, you don't have to waste time thinking about memory management.
We don't need more complex task handling than what TODO comments afford us, so no, we don't use mylyn.
Someone in /r/javahelp had mentioned using Piccolo2D with swing in order to do this... What are your opinions on that, if you're familiar with it? This is great information though, thank you for the word of warning about event threading with JavaFX!
If you learn Java you can use it for web apps, games, and Android apps. Also, any games or desktop apps you write can work on multiple platforms (Windows, Mac, Linux).
For what platforms would you be making games? Java would be good for making games on Android. Web based? Java wouldn't be a bad choice, maybe javascript would be better, though. If you are making console or PC games, C/C++ would probably be more appropriate. 
Figured it out. Just go here: http://search.maven.org/#browse|273735822 And download the jar files individually, then add them to your project.
I agree. Thank you.
That is true; the compatibility is very nice.
Maybe it doesn't answer your question but I would highly recommend focusing on things like design patterns and OOP principles. When it comes to developing games its all about the correct design and not so much about the language. In any case, Java and C# are pretty similar when it comes to syntax, so that's out of the way. They mostly differ on the libraries and how to approach more specific problems
With your plan, I'd say learning Java would be a good place to start.
Thanks for you input! I agree.
Honestly I'd skip C# and go straight into C/C++. Java does a lot of nice things for you that can make it easier in a lot of ways (memory management). Then diving into C/C++ after learning being comfortable with java gives you much more low level control and consequently responsibility as a programmer. You can always come back to C# and it will be a piece of cake in comparison.
Agreeed. Also the conclusion is nonsense: "So if we are writing a loop to process a List collection, we should consider the traditional for-loop over the for-each to get better performance." I copied the code, swapped the underlying List implementation being iterated over from an ArrayList to a LinkedList and ran it. The results look very different: Loop Method | Time ---|--- Time taken by TraditionForLoop is | [1145648250456]nano seconds (100.000%) Time taken by for-each(enhanced for loop) is | [13848001]nano seconds (0.001%) Time taken by Iterator (with for loop) is | [13011094]nano seconds (0.001%) Time taken by Iterator (with while) is | [12236076]nano seconds (0.001%)
There is a couple hundred project structures to choose from, you just have to find the right one, that's the build tool part. Then it's just a dependency management tool to find your libraries/jars. 
a Java Swing application is a simple JAR application, and maven fits pretty well http://stackoverflow.com/questions/681235/maven2-swing-projects-build-run-swing-application 
Maven is a build system. It's absolutely not only for web development. So yes you should probably get familiar with maven. Or just download the jar file with its dependecies and add them to your build pat. I never used this project it was just the first google result.
That is what isomorphism is. How about you state what it is instead then, instead of parading around acting like your so smart for using a word you don't actually know. You're wrong. Look, I can tell, when given certain data, if something is a map or a tuple set. I just have to look for uniqueness, and then I know it cannot be a map if not. Furthermore, since they are used differently, I could just easily check what functions I can utilize. &gt; What is being debated is the usefulness of Tuple as a abstract data structure. Usefulness? Dear me, no, it's not. Don't interject into conversations you apparently can't understand. I'm well aware that Tuples are convenient. I'm saying that convenience comes at a cost in most cases that doesn't need to be spent. And yes, having no relationship qualifiers means that a tuple is not only harder to read, but maintain in the real world. A map has a relationship. As already explained to you, but you seem to think plugging your ears and screaming lalala makes for a valid argument. A list is completely separate (it's just a group of a type) unless you're completely abusing the point of a tuple and treating a tuple itself as a list. You are really showing off your lack of knowledge of collections, and it isn't impressive. &gt; And what of I'd call you an idiot for making multiple classes with the same name, one of which has a completely unrelated variable that does not represent the mathematical structure it's supposed to. And I have no idea why you're making this completely idiotic and needlessly random examples that have NOTHING to do with what is being talked about, at all. &gt; Patently false. It's by definition. The implementation of a Scala tuple is a generic case class. I don't know why you're really intent on displaying your ignorance here. &gt; list of Integers without context A tuple isn't a list. And if you are creating a tuple as a list you don't know what you're doing. A map of integers to integers says for the given ints, you have a key to access them. You've ignored what I've been saying, I have already explained it. &gt; creating arbitrary semantic types like Point Are you really this stupid? Again, a Tuple is a generic case class, creating a specific case class is doing the EXACT same thing except specifying a name and potentially fields. A map is completely separate from a tuple or point in the first place, so it's really stupid you keep trying to make some connection there.
I was able to download it from the maven website in jar format and add them that way. I found the agenda component was unintuitive. Having to drag down on a random area on the spreadsheet that decides the hours/minutes without any sort of easy way to see which times you're selecting specifically.
You're getting a NullPointerException on this line: mediaArray[i] = new Media(this.getClass().getResource(fileArray[i]).toExternalForm()); Which means the getResource() call is returning null. getResource() uses the classloader to load files. When you're calling from within a JAR this means it's looking for things within the JAR. So, are your MP3 files inside the JAR'd and in the application/sounds folder? If not, it's not going to work, and you should use reference the MP3's using a java.io.File or java.io.Path object instead (you can still use relative paths from your working directory). 
Your github code has the paths defined as "src/application/sounds/...". That's definitely not going to work once it's JAR'd as there's no "src" package. It should either be "sounds/filename.mp3" or "/application/sounds/filename.mp3" for it to resolve in the jar. Edit: I stopped looking at the code after I saw the paths. Didn't realize you changed it to use File. I downloaded your source and it's working fine for me. Edit2: the reason why your original getResource() code returned null is because you named your files "Rain.mp3" not "rain.mp3". Files are case-sensitive in most operating systems, except Windows. They're also case-sensitive when resolving files inside JARs.
&gt;That is what isomorphism is. That's not what an [isomorphism](http://en.wikipedia.org/wiki/Isomorphism) is. &gt; Look, I can tell, when given certain data, if something is a map or a tuple set. I just have to look for uniqueness, and then I know it cannot be a map if not. Furthermore, since they are used differently, I could just easily check what functions I can utilize. No one is asserting that Map and Tuples are equal. And the relation between Maps and Tuples aren't what at debate. Also uniqueness of a key isn't in the definition of a [map](http://en.wikipedia.org/wiki/Map_\(computer_science\)). &gt; Usefulness? Dear me, no, it's not. &gt; I'm well aware that Tuples are convenient. You're contradicting yourself. &gt; A list is completely separate (it's just a group of a type) A [Tuple](http://en.wikipedia.org/wiki/Tuple) and a [List](http://en.wikipedia.org/wiki/List_\(computing\)) are both [Sequences](http://en.wikipedia.org/wiki/Sequence). &gt; You are really showing off your lack of knowledge of collections, and it isn't impressive. &gt; I'd call you an idiot for making multiple classes with the same name &gt;Are you really this stupid? Ad Homiems are unnecessary and counter-productive to debate. &gt; The implementation of a Scala tuple is a generic case class. The only relation a the implementation of a [Scala Tuple](http://www.scala-lang.org/api/current/index.html#scala.Tuple2) and a [case class](http://www.scala-lang.org/api/current/index.html#scala.Product) is that they both extend Product. &gt; A map is completely separate from a tuple or point in the first place, so it's really stupid you keep trying to make some connection there. The only point I'm trying to make is that they're both useful abstractions.
I tried the sounds/filename.mp3. It works if I add the jar file to my documents folder but when i move the jar to any other directory, I get the nullpointererror again. I uploaded a new jar into my github if you want to see again. Do you think it could be that my code has: mediaArray[i] = new Media(this.getClass().getResource(fileArray[i]).toExternalForm()); as opposed to something like mediaArray[i] = new Media(new File(fileArray[i]).toURI().toURL().toExternalForm());
Yes, after fixing the filename case problem, you need to use a URI according to the spec: http://docs.oracle.com/javafx/2/api/javafx/scene/media/Media.html#Media%28java.lang.String%29 fileArray[0] = "/application/sounds/Rain.mp3"; fileArray[1] = "/application/sounds/Waves.mp3"; fileArray[2] = "/application/sounds/Chat.mp3"; fileArray[3] = "/application/sounds/Birds.mp3"; fileArray[4] = "/application/sounds/Thunder.mp3"; fileArray[5] = "/application/sounds/Fireplace.mp3"; .... try { URL url = WhiteNoiseController.class.getResource(fileArray[i]); String p = url.toURI().toString(); mediaArray[i] = new Media(p); mpArray[i] = new MediaPlayer(mediaArray[i]); String fileName = p.substring( p.lastIndexOf('/')+1, p.length() ); String[] titleText = fileName.split(".m"); titleArray[i].setText(titleText[0]); } catch (URISyntaxException e) { e.printStackTrace(); } .... mediaArray[match] = new Media(WhiteNoiseController.class.getResource(fileArray[match]).toURI().toString()); 
&gt; That's not what an isomorphism is. Yes, it is. Maybe you have such a huge ego you never bothered to actually be able to read the link you're providing and assumed you were right, but here: &gt; thus isomorphic objects may be considered the same as long as one considers only these properties and their consequences. Maps and tuples are not isomorphic first off. Neither are maps and tuple sets. I told you why. Maps have unique keys, tuple sets don't need that constraint. If you have a data set that has nonunique objects that would represent the key, you can identify you're using a tuple set. Now, anything else you'd like to ignorantly deny? &gt; And the relation between Maps and Tuples aren't what at debate. Stop talking about what are at debate, if you interject into a conversation you're at the boss of that nor have any authority on it. &gt; uniqueness of a key isn't in the definition of a map And again, your link: &gt; is an abstract data type composed of a collection of (key, value) pairs, **such that each possible key appears at most once in the collection.** Can you not read or something? You're literally proving yourself wrong. &gt; You're contradicting yourself. No, I'm not, how about you read the context behind each statement. But I guess that would take an ability to read what is being put down... &gt; A Tuple and a List are both Sequences Maybe perhaps you need to take a basic class on collections. Tuples do not have type constraints, a list does if you're using the generic ones. In a programming world the usages are not the same, and if you think they are you once again don't know what you're talking about. &gt; unnecessary and counter-productive to debate At this point everything you say is counter-productive and you can't bother to read anything being put down (even your own links!) &gt; The only relation the implementation of a Scala Tuple and a case class Your "case class" link doesn't link to anything stating a case class. Look, buddy, you obviously don't know what you're talking about. How about you shut up for a little bit and listen. Case classes are **syntactic sugar**. Do you know what that means? It means it's shorthand for creating a basic object with the given input as fields. A Tuple is a generic case class, it's literally the exact same code underneath the scene. **The code**, not some inheritance structure as you seem to think. &gt; they're both useful abstractions Nobody here is arguing they aren't useful. Again.
That's interesting, though Optional.of(x) seems a lot more readable. I'd imagine explaining your post to every developer that ever touches my code if I go with Stream.of(x) for a known single value.
I appreciate all the help! This code is still not working. Updated everything in my github. The program at least pops up but nothing is populated. I think even though I put "/application/sounds/Fireplace.mp3", it's still not the correct path for whatever reason. Like I said before though, wherever I export the runnable jar to, the program works. Once I move it though, nothing populates. 
My code works. If you're having problems, it's with your implementation. Your jar has the 'S' in the sounds folder capitalized. I told you that paths are case sensitive.
I don't have my workspace handy to test stuff out, but something that stands out to me is that you're not using CDI. In JSF 2.2 you should really be using @Named instead of @ManagedBean, and make sure you're using the CDI version of @SessionScoped (and ViewScoped, etc.). import javax.enterprise.context.SessionScoped; I'd probably start there, unless you have some legacy reason of sticking with non-CDI. For what it's worth I'm also more familiar with the Primefaces' p: namespace but off-hand your commandButton and ajax elements look good. Let me know if my @Named suggestion helps or not, if no one else helps out I can boot up the work laptop and try it out.
I agree with this. C# was made as microsoft's version of Java. It doesn't take much to code in C# vs. Java. To add to it though, you can do more with java alot faster. For example, want to code database integration on something that is free to use one afternoon...like redhat? Jdbc has you covered. Want to mess around with scripting? implement Jython. I think this makes Java more worthwhile to learn than C#.
Worked in HFT, it was all C++
Actually high performance code is written in C/C++ if the performance that matters is speed (like in trading). I think the Haskell/OCaml/F# guys are using it for mostly strategy research and backtesting. Though I think the Jane Street guys trade with OCaml to an extent, not completely sure though.
&gt; if you manually created a case class, named it Tuple, what would you have? The EXACT SAME THING. This is false. A case class cannot express arity. &gt;Here's something that's isomorphic: a case class and a tuple. This is true. That doesn't make them the same thing like you seem to think isomorphism implies. &gt; generics Generics aren't relevant here. Both tuples and case classes can have paramterized types.
First of all, thanks for letting me know about CDI. Secondly, I think this is a known issue with JSF 2.2 as seen [here](https://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-790). I managed to get lucky with google finding someone who had the same problem, and the solution was to use PrimeFaces, so I'll give that a shot. Thanks for your help!
Haha, gross, makes me glad we don't deal with h:ajax. Primefaces' p:commandButton is ajaxified automatically so you don't even need the child h:ajax (or p:ajax for that matter). And you use the actionListener attribute instead of the action attribute on the commandButton. Otherwise it's pretty much the same.
Don't be afraid you are wasting time learning java over c/c++. I work in defense, and the vast majority of our software is put together using Java. We run C++ when we need to, like extremely complex calculations and such, but in the end if we can get the data into our java side of the equation and stop using c++/c, then we do. C/C++ are growing to be too risky to utilize on multi-million dollar contracts that it can't be justified unless there's a masters or phd level coder working on the c++ code. One bade line could royally fuck things up for days or weeks at a time and any industry just doesn't have time for that kind of garbage. I've worked in other industries too and seen the same thing. It doesn't mean c++ is bad, just that it is a risk because of the language's complexity and unpredictability with bugs -- sure you can roll back your build but that won't help if your chiller just shut off from a pointer error not caught in testing and now you have 40 or so vm's that just had their data store fried for a low low price of $250,000.00. I think java is the safer route to learning code and development rather than c++ unless you plan to devote you life to knowing c++ in and out.
If you're looking for part time work while you're in school, I don't think you'll find anything programming related. Others might have good suggestions. In the past when I was in high school I did some volunteer work on websites for the school and library around town just for the experience, but there wasn't anything that would pay. Maybe things are different these days. (I was in the same situation as you) For summer work though, it couldn't hurt to look around for internships at software companies. You already sound like you're ahead of most first year CS majors, and could do well as an intern. 
I was in a similar situation at your age. I nearly landed a programming job at Sony Online Entertainment however due to my age their HR department had some issues. I was under 18 in California at the time. Work on your own ideas is my suggestion.
Have you tried /r/cscareerquestions? Also, short answer no. I just looked at some questions on the AP CS test and they are pretty basic. As the saying goes, you don't know what you don't know. In CS, that's dangerous. There are a few things you said that make me think you aren't really at a level of understanding of how most of this works. I will say though, you could find success making websites for local businesses and try to sell that if you have a decent portfolio of your work.
thanks, can you please give pointers on how can I do that? 
&gt; This is false Dude. You did it already with your earlier examples. Holy cow, you're now arguing against your own code that has already proven it. The only arity comes from the field names. &gt; A case class cannot express arity To hell it cannot. I don't even think you understand what that word means. How about you show off a code sample of you doing something with a tuple that you can't do with a case class with the same named fields. &gt; Generics aren't relevant My god, yes, yes they are. A tuple uses generics. When talking about how a tuple is implemented, generics are quite relevant SINCE THAT IS WHAT IT IS. &gt; can have parametrized types It's like, you just don't seem to understand what you're talking about. You throw out these words without a single shred of knowledge what they really mean. Serious question: do you not understand how parametrized types and generics are related?
maven is a bit more than that ...
&gt;How about you show off a code sample of you doing something with a tuple that you can't do with a case class with the same named fields. case class Point(x: Int, y: Int) def foo(x: Int, y: Int) = x * y def tuplizedFoo = foo _ tupled val t1 = (1, 2) val p1 = Point(1,2) tuplizedFoo(t1) tuplizedFoo(p1) //Doesn't work def tupleize[T1,T2,R](f:(T1,T2) =&gt; R,t: (T1,T2)) = f _ tupled t tupleize(foo,t1) //Use shapeless to abstract over the tuple's arity. def applyProduct[P &lt;: Product, F, L &lt;: HList, R](p: P)(f: F) (implicit gen: Generic.Aux[P, L], fp: FnToProduct.Aux[F, L =&gt; R]) = f.toProduct(gen.to(p)) applyProduct(t1)(foo _) applyProduct(t1)((_: Int)+(_: Int)) applyProduct(1, 2, 3)((_: Int)*(_: Int)*(_: Int)) &gt;do you not understand how parametrized types and generics are related? Yes, anything [generic](http://en.wikipedia.org/wiki/Generic_programming) is any type or function which takes a type parameter.
Thanks to all for their review comments. Page has been updated.
Use google's [Guava](https://code.google.com/p/guava-libraries/) library. Specifically their Collections2 framework and the transform method.
At your age, you'll struggle to get a job as a Java developer. Most places will require either professional experience or an university diploma. Are there internships accepting highschoolers? I'd spend time learning more stuff or building personal projects. Maybe build a couple of Android apps- if you are good and lucky you might get some cash there.
Very sorry I dont know how to format the thread properly &gt;:(
Saying "Fix my code" is probably the worse way to ask for help IMHO. Regarding your problem, what are you experiencing? It's hard to diagnose the issue if we do not know what the symptoms are. Regarding the question on if/else; no, it isn't required. Else is only use to force the exclusivity of the conditions, but in your case number can't be at the same time 1, 2 or 3. The exclusivity is implied and while the else would make it more readable the behaviour would be exactly the same. Now regarding your code, the only thing that comes to mind right now is `system` vs `System` and `print.ln()` vs `println()`
Start each line of your code with 4 additional spaces
Sorry haha, I changed print.ln to println and the system to System. Exception in thread "main" java.lang.Error: Unresolved compilation problems: The method println(String) is undefined for the type System The method println(String) is undefined for the type System The method println(String) is undefined for the type System at apples.main(apples.java:15) That was the result
Man, im really sorry about this formatting... I'm just copying it from eclipse and its doing its own thing 
Test is bad but the final conclusion is OK. for(Integer value : list) allocates a new Iterator automatically so the last 3 methods are basically identical. The 1st test (traditional loop) MAY (or may not) be a bit faster because it don't allocate a new Iterator object..
 System.out.println("stuff");
System.out.println()
I copied and pasted the line, it gave me a compilation error at line 4 Exception in thread "main" java.lang.Error: Unresolved compilation problem at apples.main(apples.java:4) 
Ah, I had one too many closing brackets { cheers guys, Next time i'll try and format my thread properly with the error and stuff. Thanks a lot :D
You could look in to [libgdx](http://libgdx.badlogicgames.com/). You can code for android, iOs, html5 and desktop at the same time, in Java. 
Everyone here seems to ignore [Unity](http://en.wikipedia.org/wiki/Unity_\(game_engine\)). It's super popular nowadays and is used in Hearthstone, Pillars of Eternity, Wasteland 2, Angry Birds Epic, Bad Piggies, Kerbal Space Program and tons of other (indie) games. It has support for three different scripting languages (C#, JavaScript and Boo) but C# is most widely used. Java is almost useless as a game development language (I know Minecraft exists, but it's an anomaly). Sure, you can learn OOP principles with Java but if you want to learn a language that is actually used in game development then the choice between Java and C# is a no-brainer. edit: To be clear, it makes more sense to learn frameworks, not languages. Knowing how Java works is kinda useless in itself but knowing how Android SDK, Spring or some other large framework works makes a lot more sense. Same applies to Unity and C#.
Read [ http://gameprogrammingpatterns.com/]( http://gameprogrammingpatterns.com/). It's written by a veteran game programmer, so the examples are leaning towards C++., but you can apply the insights in every language.
Loop through Map&lt;String, String&gt;. Initially set the questions as keys and its value as "" (empty string). Lastly, loop throught the map: .... // setup the questions map for (Map.Entry&lt;String, String&gt; q: questions.entrySet()) { System.out.println(q.getKey()); // printout the question ... // plug your code here to get the answer questions.put(q.getKey(), answer); } .... // Now the map is populated properly with matching question and answer, you can then process it further. 
You could write all the questions in a file, which, as an example, I'll call questions.txt. In order to pull the questions from the file, we could do something similar to this: import java.io.File; import java.io.IOException; import java.util.Scanner; public class QuestionGame { public static void main(String[] args) throws IOException //Throw this so that any errors with the file will stop the program. { Scanner file = new Scanner( new File( "questions.txt" ) ); while( file.hasNextLine() ) { System.out.println( file.nextLine() ); user.next(); //Handle the responses here. } } }
Hmm...Interesting. OK. Thank you for the suggestions. Posted a similar question on Stack Overflow and got 0 answers... so far Reddit has been more useful to me in 2 days than Stack Overflow has been in months.
I was actually thinking of trying that but I wasn't sure how to set it up. I had tried using a BufferedReader/Writer but it didn't play out how I intended it to.
OK. I see now. Thank you.
This makes sense. I'll try it out and modify it if need be.
&gt; BufferedReader It's pretty straightforward : BufferedReader reader = new BufferedReader( new FileReader( "your_file.txt" ) ); String line; while( (line = reader.readLine()) != null ) { System.out.println(line); /* Do your stuff here */ } 
Go look at the configuration options for httpd.conf and read about mod_proxy, it's a very basic &amp; common usage of Apache.
I'm almost certain that I did. Whenever I use Stack Overflow people comment and ask me questions that I either a) Don't understand or b) I can answer but it doesn't help my problem. Which is why I'm glad that I just started using reddit. Lots of engagement already and answers that I understand and people I can talk to.
Nulls are fine, what is missing is the flagging and checking for possible null references on variables and return types. This is the aim of Optional in Java 8. I've not used it yet, so I can't say if it's better. I guess it is no panacea as it's use isn't mandatory so there's still plenty if scope for the same errors. It's a pity the compiler can't simply warn for possible null dereferencing.
It's better from the perspective of avoiding nulls. An absent optional value actually means: "this type of object should have been here, but for whatever reason it's not". A null value means: "there is a typeless void here". If this distinction can help your code, then Optional may be suitable for you.
From my perspective, Optional's are nice for indicating to others "this may return an empty result and you need to handle that". But they do nothing for getting nulls provided to you, so you still end up having to do tons of null checking.
DJANGO!!! Djangooooo, have you always been alone ... 
Nobody who actually understands `null`s use are arguing that null is a bad idea. The argument is that `null` dastardly avoids the type systrm, and should not implicitly be part of every type. That's why optional is useful, if its nullable, it has to be explicitly marked as so. I don't see a problem in a few `null` checks, my problem is that some things can be null when you don't want them to be, so this way you can have safety when you want it, and optional nulls when you have a nullable value. Of course in java you don't get compile time safety of non nullable values, so that's a pretty sad downside. But know its only a java problem, not a problem with optionals.
The idea is Optional make null value obsolete. Simply stop using null (and tell your co-workers and library providers to do the same). Ceylon goes into great pains to do just that. In the Java world, Optionals are still useful: if a method declares to return an optional, it's never null. Promised. Problem is it's only a promise. If there's a small minority of programs breaking the promise, you're right: you end up checking both null and empty.
Awesome thanks!
Oh wow! Great insight. Thank you!
This sounds more like Grails than any Java web framework I've ever used.
&gt; The problem with null is that it avoids a very powerful mechanism that is already present in most languages -- their type systems. Why do you mean that? I'm trying to understand your angle. In Java, if you set a variable to null, the variable still has the same type. And if you call an overloaded method, both of which take an object variable, which causes an abiguity compiler error, casting the null to the type you indend solves the problem. If you meant "Yep, but you have to cast it, that's what I mean.", then what if you instead give a variable of a certain kind that is null?
Since null can be such a problem, I actively use null whenever I can as an expression of information, e.g. for console applications, I have a standard yes-no-cancel input method that returns a Boolean (true/false/null). Since I actively incorporate null as an expression of information, I hapily put null-checks all over the place, and they are not defensive mechanisms. Side-note: I really wish that there was a way to have a chain line "variable = someInstance().someField.etc;" just return null instead of throwing an NPE if there was a null somewhere along the path. Such a situation occurs often, and having to package that into a bunch of IFs just sucks. I'm not talking "make it the default", just give us an option, e.g. an annotation.
I am most in favor of compiler enforced annotations (built into java, not one of the many many standards that currently exists). So returning Optional is from my perspective pretty safe, as I can control myself. If others don't want to trust me, well they can waste their time. But as far as taking in actual arguments, I would never taken in an Optional, because I would never trust another developer to not give me a null (so it just gives me yet another thing to verify).
Use Groovy! Their Elvis operator is what you're looking for.
 Congratulations. You have created a prototype. A Dropwizard prototype: http://dropwizard.io P.S. Your heart is in the right place. But please don't re-develop something that's already been done 
Thanks, I've got it.
What in the world...? You didn't prove anything! Not only did you not even follow directinos, you also seem to have proved yourself wrong with your second half. Your first part is idiotic. You can't call tupled on anything with an arity of less than one. (x*y) if given the point will always create something with the arity of 1, thus not able to be tupled. It will never work, and I'm not sure what you're trying to prove other than you don't understand what that function does in the first place. I'm not even sure why you keep trying do call function foo, it has nothing to do with any of this. You know what? I'm sick and tired of your absolutely lack of knowledge here. This should finally shut you up a bit, like the rest: val p = Point(1,2) p.productArity p.productElement(i) p.productIterator All of these will calls will be successful. Yes, case classes have arity and you can see it. Yes, you can access case classes elements by order. Yes, you can iterate it. Do you want to know why? Because, as you even said yourself, both case classes and tuples inherit from Product. And Product is what supplies these. Your whole idiotic notion that case classes don't have arity has never even come close to being true, because case classes and Tuples get their arity from the same place... their base classes! This is just like your issues with Map, you know absolutely nothing about these things your using in your code. You don't. You just use them without thought of what is really going on. &gt; Yes, anything generic is any type or function which takes a type parameter Good, so generics and type parameters are related, meaning generics aren't irrelevant or so you'd like to claim as you follow that up with saying they both can accomplish having type parameters. Now, the case classes you keep making are not generic. But you could create a generic one... Maybe something like: case class MyTuple[T1, T2](_1 : T1, _2 : T2) Wait wait, did I just create my own tuple class that behaves just like the default one? Yes, yes I did. Somebody stop me here, why, Tuples are just generic case classes? Wtf?
Or just don't use GET request for processing any sensitive information like jsessionid. It is a known good practice as it helps preventing proxies from logging sensitive information also. 
If you want a basic nothing-fancy cache, you can also use the new `computeIfAbsent` default `Map` method in Java 8 as a cache mechanism.
 &lt;session-config&gt; &lt;tracking-mode&gt;COOKIE&lt;/tracking-mode&gt; &lt;/session-config&gt;
The chained null return is a feature if some languages like Objective C.
The behavior you want is to set a new session id after a user logs in. The user pre and post-login should be treated as completely separate entities. Other factors at play are allowing users to specify a session id, allowing sensitive data as a query string parameter, etc. However, the GET request isn't only attack vector here. There's XSS, and browser vulns too.
&gt; Having arity isn't the same thing as expressing arity My god, it's like you just don't understand anything about programming. The arity is derived from the base class. There is no difference in arity between a tuple, and a generic case class, because they both are the same thing code wise. Here genius, how do you think a Tuple is programmed under the scenes? Eh? What is the code? &gt; The type of MyTuple doesn't express the arity of the sequence You don't know what you're saying. You don't. You really don't. You haven't a clue as to what the words your putting down on the paper is. It "expresses the arity" the exact same way. It is the same. It is a Tuple2. &gt; apply functions to any product A case class is a product. You should know this already, you showed it yourself.
It has **everything to do with programming**, what subreddit are you in, are we talking about a programming language and how a programming concept works. Do you think a case class is a mathematical concept too or something? I'll ask you again, HOW DO YOU THINK A TUPLE IS PROGRAMMED UNDER THE SCENES? Let me put it like this: If Scala didn't have a tuple class for you to use, and you wanted one, how would you make it? You don't know what you're talking about! &gt; They are not the same thing however That's right, because a Tuple is a generic case class, but not the other way around.
You'd make an abstract class, such as public abstract class ElementSelector&lt;T&gt; { public List&lt;T&gt; getItems(Document soup, String bySelector) { List&lt;T&gt; items = new ArrayList&lt;T&gt;(); for(Element e : soup.select(bySelector)) { items.add(getItem(e)); } return items; } public abstract T getItem(Element e); } And then you write: private List&lt;String&gt; getHeaderTextFromPages(List&lt;Document&gt; pages, final String bySelector) { List&lt;String&gt; items = new ArrayList&lt;String&gt;(); ElementSelector elSel = new ElementSelector&lt;Element&gt; { public String getItem(Element e) { return e; } }; for (Document page : pages) items.add(elSel.getItems(page, bySelector).get(0)); return items; } private List&lt;String&gt; getPageLinkUrls(Document soup, String bySelector) { ElementSelector elSel = new ElementSelector&lt;String&gt; { public String getItem(Element e) { return e.attr("abs:href"); } }; return elSel.getItems(soup,bySelector); }
From the Guava docs: &gt; It's rarely obvious what a null return value is supposed to mean -- for example, Map.get(key) can return null either because the value in the map is null, or the value is not in the map. Null can mean failure, can mean success, can mean almost anything. Using something other than null makes your meaning clear. We've been talking about Optional, but this is just the tip of the iceberg as far as getting rid of null for better options. For example check out Scala which provides a "Try" class: http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.util.Try The problem isn't that you can't make null work -- the problem is that unless you need the raw speed that null can provide, you can do a lot better. There is no reason to return a null to signify an error while you have exceptions, Optional, Try, Either, and a number of other patterns that you can employ. It's really just self-rationalized laziness.
He just needs a bit more exposure to expressive coding style. This article was probably a bit premature for him.
Make changes, not commit and then checkout. I'm fucked aren't I? Would it make any difference that I haven't closed Netbeans since doing the checkout? Maybe a Ctrl+Z type function so I'm not forced to learn a lesson?
I almost never get NPEs ever since I started using FindBugs [@NotNull, @Nullable, @Checknull](http://findbugs.sourceforge.net/manual/annotations.html). I know Java 8 and the Eclipse Luna may support these features, but I haven't upgraded, yet. 
&gt; It has everything to do with programming, what subreddit are you in What subreddit we're in is irrelevant to the the topic of conversation. &gt; are we talking about a programming language and how a programming concept works. No we were talking about tuples, abstract types, isomorphisms. More specifically on the relation of values in a tuple, which you claimed have no meaning. These are not programming concepts. We only used Scala as an example, but perhaps set notation would have been more appropriate. &gt; If Scala didn't have a tuple class for you to use, and you wanted one, how would you make it? You don't know what you're talking about! Scala's tuples are deficient, and don't meet the definition of a Tuple in some ways. Unfortunately I don't have any idea's on to better implement tuples than they already are without changing the JVM.
Ah, interesting. I wasn't sure if this was a fever-dream of mine or actually made sense.
Upvoted because it seems to be quite good. I think they downvoted you because of statements like &gt; The most effective Java guides on the Internet. which not only sounds pretentious but also necessarily contains untruth: You claim to know this while you can't know this.
What the hell, you're so full of it! We're talking about programming dumbass! In specific, Scala Tuples and case classes. **This is programming**. &gt; about tuples Tuples **in Scala**. &gt; abstract types **Which is programming.** &gt; isomorphisms **In the context of collections.** You're really, really pathetic. We're in a thread about Scala jackass, and yes, everybody but apparently you has been talking about Scala. Is this your escape from admitting you're full of shit now? Is this what it comes too? Why, now Scala doesn't matter. Here you've been trying to show me wrong using Scala examples, but hey! That's not really what is being talked about. Why, the moment it comes for you to put out a Tuple class, and now it's not about Scala. &gt; which you claimed have no meaning What was actually said: "**the problem is tuple itself gives no information about the relationship nor content contained.**" Which is still the case, which is something you haven't proved otherwise, and is apparently something you never read properly. No big surprise there, we've already covered several times your incapability at reading. &gt; Unfortunatey I don't have any idea's on to better implement tuples You don't even understand nor know the current implementation even after I've told you. I wouldn't trust you anywhere near the JVM much less any code period. The audacity for some twat who doesn't even understand map keys are unique to sit there and pretend like you'd be qualified about changing the JVM! Your balls are far, far too big for your britches. And you're deluded if you think the JVM would need to be modified in order to represent anything. That just shows your own lack of programming ability. It's a generic case class. Get over it. Learn something from somebody way, way smarter than you here and stop pretending like you have any knowledge over this matter. Scala's tuples meet the definition of a Tuple fine, and I'm not sure why you ignorantly think otherwise. Oh wait, I know, you have no idea what you're talking about like usual.
JavaScript is like ice cream. Super yummy in small doses. Extremely painful in large quantities :)
C# is a much nicer language than Java. Much nicer.
Take a look at TypeScript, it's maybe what you're looking for
I have recently become in love with Java myself. I find much of it refreshing, after using C++ for a while. I try to avoid dynamically typed languages. 
If you get any comments here, be prepared for a myriad of answers, each with a strong testimonial from the comment author. That said, this comparison might help: http://zeroturnaround.com/rebellabs/the-curious-coders-java-web-frameworks-comparison-spring-mvc-grails-vaadin-gwt-wicket-play-struts-and-jsf/ 
I have read that article, and some of them looked interesting (I should have mentioned wicket). A lot of these frameworks seem to rely on magic and incantations. There needs to be some way to work through that in hopefully not a lot of time (be decent at understanding in a week or two).
Or you know.. maybe it's Java.
Hi .. seems dropwizard and cuubez are conceptually different. cuubez developing rest framework from the scratch but dropwizard doing aggregate frameworks like cuubez. 
Strongly and statically typed languages like Java really shine when it comes to refactoring and maintaining large codebases. I'm working on a product with a 10 year old java codebase. The code is in a pretty good shape but with every large code refactoring I'm super happy about every compiler error I see, because compiler errors are the easiest to fix. Maintaining our javascript codebase is much harder.
Well, if you are looking for a non-magical framework that lets you work with HTML directly, then Spring MVC (and Spark) is a good choice. Perhaps you are done looking! If you use Spring MVC, I highly suggest [Thymeleaf](http://www.thymeleaf.org/doc/thymeleafspring.html) for the templating. Myself, I use Vaadin for quick projects that need to have a lot of fancy RIA features in a short timeframe. It's not great for general use websites. Vaadin is great for a controlled environment like possibly the one you described; a feature-rich web console, for example. It's easy to get started. If you want to write HTML and you plan to support your application for a long time, Wicket is great. It's component-based approach make long-term maintenance more manageable. Sounds like this isn't the case for you, however. I'm not a fan of JSF, so I'll let others guide you there.
I was just looking at Vaadin, and it looks like there is a good amount of documentation there. I am a little wary on the generated code bit, but something that wouldn't hurt to try. I think for the next day or so, I will be trying out Spark. I would really like an up to date (and inexpensive) book that deals with Spring MVC — I might be mixing up things because there are so many projects around Spring, but most stuff does not seem to be for Spring 4.
It is true, that C# is nicer in some points. Although C# has some strange things like the event mechanism. But overall Java and C# are pretty similar. They are much closer than Java or Scala. By the way: [Kotlin](http://kotlinlang.org/) is a nice Language influenced by C# (generics syntax, for-loop syntax) and Scala.
Why? It's very weakly typed.
If you are planning to stay(use) longer, then take some time to evaluate those frameworks. May be writing a small app would help. Only you know about your taste. May be you can add www.ninjaframework.org to ur options. 
&gt; And C# doesn't get nearly as much "hatred" as Java gets That's because, in contrast to java, C# is a well-designed language, which has: - Real generics - Real Properties. - Events / Delegates - A sane type system which includes value types (since forever) - LINQ (since forever), which java only got a poor imitation for on it's latest version. - Operator overloading. - Iterators (yield keyword), which are extremely useful. - dynamic typing (if ever needed) - Extension Methods. - Indexers. - Expression Trees (System.Linq.Expressions) All of these features make the language really pleasant to work with, rather than cumbersome, inexpressive, extremely verbose, clunky, which is the general feeling people get from java. Not to mention that if the OP is doing Android development, even java's latest features are unavailable for him, so if you compare the java version he's using to C#, it's even further. &gt; the hatred of Java is more irrational than it looks Sorry, NO. even oracle has now admitted they need a major refactor on java to make it similar to C# (by adding Value Types and non-retarded generics). and pointing a language's incapabilities and flaws is not "hatred", it's just being realistic. java sucks. By 2027 when they finally add real Value Types and Generics into it, it might become a more usable language.
Did you stash your changes? It seems strange that netbeans would let you checkout with uncommitted changes.
&gt; C# has some strange things like the event mechanism surely the "anonymous inner class"-based "listener" approach in java must be somehow less "strange" to you than real language-level support for events? IMO the former is weird and ugly, while the latter is much cleaner and less verbose.
It's also worth considering SmartGWT, which is much like Vaadin but targeted more at functionally-rich desktop replacement applications. The SmartGWT is framework huge and more wildly in comparison but generally very rich. It competes well with native UI toolkits in terms of the number of widgets and widget functionality.
SmartGWT, ExtGWT, GWT etc and their ilk are great until you try and implement your company's style guide using it. You'll end up bending those frameworks to and beyond their limits, wasting a lot of time on the way. If you're willing to use the frameworks' layouts/widgets as they are and as they look (most provide some customisation for look and feel) then you'll be productive with them. Otherwise steer clear. 
The vitriol in this post kind of proves /u/phao's point...
A very good point. You are somewhat hamstrung by what is provided. The company behind SmartGWT, Isomorphic Software, does have a 'skinning' service where they can provide a new skin that meets your requirements. Obviously this isn't free, but as you say it would likely reduce a lot of problems.
Then I must be lactose intolerant, because I find any amount of JS painful. To put it another way: Programming without static typing is like spacewalking without a space suit. Unless you're Batman ([who can breathe in space](http://tvtropes.org/pmwiki/pmwiki.php/Main/BatmanCanBreatheInSpace)), it's not going to end well for you.
It depends what sort of app you're building. Some frameworks are better suited to some than others. Read about as many as you can, try example projects out. That said, I'd recommend avoiding them all until necessary and when you do need one, use one that just does the one job required if possible (e.g. Apache Shiro/CAS for security, Guice/CDI for dependency injection). I prefer to use a JAX-RS implementation and lots of plain HTML and JS as a rule; other team members not familiar with the same frameworks won't be at a disadvantage, you'll be less likely to hit issues others haven't and frankly the chances of not hitting issues with a framework or being able to use it on a second, third, etc. project are small IME.
I was looking for some solution of java method call caching some time ago, and ended with writing my own (partial) implementation of JSR107 annotations support. As I hate JVM agents and code generation, I did it through on-the-fly bytecode generation. It feels ugly though. I will be glad to hear any alternatives. Or... maybe I should share my hack in GitHub? =)
In our experience Scala's been more like democracy. Once you've tasted it you don't want to go back to the constrained world of Java.
I was of the same opinion as you regarding dynamic typing, until I tried Clojure.
C++ is definitely more weakly typed than java, maybe that's what he meant.
Unfortunately, C# comes with some awful platform lock-in. 
Or dart if you don't want to deal with java scripts horrible semantics
If you want to make your life easy use JSF with PrimeFaces. Spring MVC has a big learning curve. It is still popular because when it came out it was a big improvement but today it is a bit behind. JSF and CDI are much easier to learn and work with. They provide more functionality and focus on reasonable defaults over having to configure everything. There are some really good tutorials with Netbeans and the major frameworks. The IDE installs fully configured with application server by just running a .exe Check out the web frameworks at the bottom https://netbeans.org/kb/trails/java-ee.html Look at the showcase with the demo code to see what is possible. www.PrimeFaces.org 
A lot of the comments in here seems to suggest that this all comes down to static vs dynamic typed languages. Why do you guys feel that this makes such an key difference? Full disclosure: Java and Python are probably my favorite languages.
This is why the modern shift toward js saddens me. Node being the first major case of Atwood's "anything that can be written in JavaScript will be written in JavaScript". I worked in JS for about 8 months and had to get out. Like you said, fine in small doses where appropriate (and truly not a "bad" language), but painful to do too much with.
&gt;Optional also has flatMap support. Do you have an example? I see Optional.flatMap but nothing that will take a Stream&lt;Optional&lt;T&gt;&gt; and produce a Stream&lt;T&gt;. This is why I prefer Stream.of(x) over Optional.of(x).
Started back using Java after a three year hiatus as a C# programmer. C# is a fine language and they have rushed in a more "modern" direction with the language than Java has. Where C# and the entire dotNet platform has lagged behind is in the area of tooling developed by open source groups as well as their near complete dependence upon the Windows platform. Additionally, while nuget and msbuild have come a long way, the platform and community lack both a wide adoption and understanding of what continuous delivery and enterprise build systems should be. Java has however been resting on its laurels a bit too much. The reason dotNet has been as attractive as it has been really comes down to the fact that Visual Studio has a lot better built-in tooling that works seamlessly than Eclipse has to offer. I've had recent disappointments with Eclipse taking forever to get set up and working (even with the Spring STS) without problems. The Java community needs to get in gear and really get behind a better IDE. I like what I see from Intellij, and I haven't looked into NetBeans in a while. But this debate is also one of Java major symptoms. In dotNet you have one or two good frameworks to choose from for development. In Java, you have five or six. There is a well-known psychological phenomenon called choice paralysis that basically says faced with a number of equally good choices, people tend to freeze up and face crippling anxiety. I think the Java community needs to begin improving the language, pare down the frameworks to a manageable set (some projects need sun-setting), and really come together to improve and integrate the tools into one IDE that squarely takes aim at Visual Studio. 
I have, didn't really swing far either way on it. I like its concurrency syntax but not much else stood out to me. I actually think it's a bit awkward to write especially the error handling, and the weak type system doesn't let you build out expressive abstractions.
&gt; MEAN (Mongo, Express, Angular, Node) stack This is actually a thing that people say? So many hip buzzword-laden technologies in one place! Must make tech recruiters and tech hipsters alike, along with marketing people jizz in their pants. &gt; I’ve recently been doing some Android development in my spare time which has forced me back into revisiting Java. After hacking javascript in VIM for a year and a half, writing Java in an IDE has been an awkward transition. Why not use an IDE for Javascript out of curiousity? It seems like that much would make browsing the file system, getting to your databases to browse, etc. would be that much easier. What's with the resistance to IDEs in the hip-startup land? They can be helpful for pretty much any language, and the most popular ones already have plugins for the most popular frameworks, like Node.js. &gt; I might just be in a honeymoon period, but I’m really seeing Java in an entirely new light now. It seems to have fallen out of favor with the trendy “hacker” crowd Java's not really in favor with trendy people, this is true. But it's still a great language, has been for years, and will be for years. The thing about what's trendy, maybe 6 years ago Python was trendy, then 5 years ago Ruby became trendy, then it was Javascript/Node.js, now it's functional programming languages... What will it be next year? Hey guys I developed this brand new MVC framework in Brainfuck which runs on JVM, it's super fast and super easy to develop! What's cool with that crowd shouldn't really matter that much to you in what you choose to use, because that crowd's very much so driven by short term trends that "Solve every problem ever" that they read about in some random dude's blog. &gt; I’ll be considering it much more seriously for future web development projects. One thing I'll say for Java on the web: Use a framework... Be it Spring, JSF, what have you. Just doing it with JSP and Servlets is not the way to go. 
There's a code sample in my latest blog post about Java 8 Streams: http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/ class Outer { Nested nested; } class Nested { Inner inner; } class Inner { String foo; } Optional.of(new Outer()) .flatMap(o -&gt; Optional.ofNullable(o.nested)) .flatMap(n -&gt; Optional.ofNullable(n.inner)) .flatMap(i -&gt; Optional.ofNullable(i.foo)) .ifPresent(System.out::println);
I was really enjoying the article, until [this happened](http://i.imgur.com/BAXUnLS) and I ran away from your website
This explains a lot about SOE quality standards.
You are totally right - that's just crap! Sorry for the inconvenience, I fixed this. Glad to hear you liked the article nevertheless!
Thanks for the prompt solution! 
This is not the stream operation that I'm talking about. For example you could rewrite https://github.com/karlthepagan/MagicForest/blob/master/src/main/java/unisoft/MagicForest.java so that meal(...) could be implemented using flatmap.
&gt; Why not use an IDE for Javascript out of curiousity? It seems like that much would make browsing the file system, getting to your databases to browse, etc. would be that much easier. What's with the resistance to IDEs in the hip-startup land? They can be helpful for pretty much any language, and the most popular ones already have plugins for the most popular frameworks, like Node.js. The benefits just aren't really there. Navigating files in VIM with NERDTree and Ctrl+P is extremely easy. In webstorm navigating to function definitions works for nodejs, but not for angular, and I basically know where everything is. The things I've been really loving about the IDE -- confidently and easily changing method/class names/definitions, live type checking -- don't really apply to Javascript. Then again, it's been a while since I tried it, maybe I should give it another chance.
&gt; vitriol And, just now, I've learned a new English word. =D Upvote for that. 
*There are only two kinds of languages: the ones people complain about and the ones nobody uses.* - Bjarne Stroustrup
I use vaadin and have nothing but good things to say about it. Layout of course can get wonky, but you have full control with CSS and can do all the css-hacks you like to make it work. Documentation for Vaadin is excellent, as is the eclipse plugin that just works. It's not even that hard to create your own custom client-side components if you need extreme interactivity.
do you have to search the file for entries, or are you just storing them?
Just storing them. It's like this. Say there are 3 entries already in the file. Line by line. I basically ask user for the information of the book, and he enters it. What the program has to do is add that to the file as a new entry below the other entries without disturbing those other ones.
All these are fine, but can it run on anything other than Windows? (No Mono pls)
Since I'm getting mixed messages ("university level Java" vs "super beginner in Java"), I'll just suggest my standard solution which is very easy to implement and only needs Java's default libraries: To keep all options open - except the one where the sumtotal of the data is too big (e.g. 100 mb) - I'd use this approach: java.nio.Files.readAllLines(theFile.toPath(), StandardCharsets.UTF_8) to read the whole data file into memory with one command, java.nio.Files.write(theFile.toPath(), byteArrayWithLines) to save it. Big advantage: You can save into a temporary file first, afterwards delete the original file, then rename the temp to original. This is also known as "safe saves". You wouldn't have this advantage if you'd keep accessing/extending the same file. File structure: id=15 name=The old fart and the oversized lake location=6th rack on the left, then walk while counting to 3 currentlyBorrowedBy=142 id=3 name=Idiot's guide on how to invigorate a turnpike location=far end of the second row currentlyBorrowedBy= Every entry - each to be transported into an instance of the Book class - is separated from other entries by an empty line. What keys-values you use is entirely open, and you can even use different once from block to block, partly because you can even announce in the head of the block what data will follow, e.g. "blocktype=bookinfo", or you could even say "section=books" and "section=customers", each as a single line. It's a joke to parse. You would ideally create a method to load such a file into an ArrayList&lt;ArrayList&lt;String&gt;&gt;, and one to do the opposite. You'll use them in the future *a lot*. Except if you go the whole way and use a proper database right away. But if you want to get shit done, keep the executable small, keep the file format open/neutral/humanreadable/maintainable, stay independent of other people's libraries/licenses, just use this solution. A GUI mask for showing / editing / adding Book entries would have to be created - GridLayout comes to mind (JLabel left of field right-aligned, JTextField to the right left-aligned).
I was just as OSCON, and talked to some of the spring guys. Their advice was to not start a new project in Roo. They have what they believe are better ways of doing what Roo used to do. For example, for starting a project and getting all the configuration set up properly, the now recommend spring boot (which can be configured to generate either a traditional war you put on an app server, or a jar with an embedded app server), and for handling CRUD stuff, instead of using the roo approach of aspect j files that get injected at compile time, they recommend using spring data repositories (http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/repositories.html). As far as an admin interface to crud operations for your data--I don't think there's anything built in that will give you a UI, but there is something that will give you a complete rest interface to your objects--see http://spring.io/guides/gs/accessing-data-rest/ for an example. All that said, I agree with the other posters, who said Grails is closer to Django. For example, you actually can get a prebuilt admin ui: http://grails.org/plugin/admin-interface
One of the most important features of a language is its ability to catch errors as early as possible - ideally at compile time. Also, error messages should be as descriptive and close to the location of the actual error as possible. If I try to use a Foo when I should be using a Bar, a statically-typed language will throw a descriptive compiler error along the lines of "Foo used where Bar expected", and it will be near where I used the wrong type. However, in a dynamically-typed language, I'd get a message like "Object does not have method barMethod", located where the object was going to be used (often in a third-party library I'm using); ideally, this will simply be down the stack from where my bug is located, but it could be somewhere completely different (for instance, if the bug is located where I pass a Foo to a BarUser, and the error doesn't occur until BarUser.useBar() is called). Of course, it's good practice (especially important when writing frameworks intended for wide use) to always check your inputs as soon as possible, and this is still needed in Java (check for nulls, correct ranges, etc.). By adding type checking, however, you're having to duplicate features that the compiler in a statically-typed language provides for free. Unit tests also help to catch a lot of type errors. However, they don't make debugging easier - the location of the actual bug may be difficult to ascertain. Also, perfect 100% unit test coverage is an ideal that is never consistently reached by actual humans. I like to have as many bug-fighting tools in my toolbox as possible. Static typing is a huge help, with very little downside. It certainly requires more skill to use, but it forces me to put more thought into my code and be more knowledgable about the tools I'm using. The early detection of bugs and increased development speed (if one considers debugging to be part of development) is well worth it, IMHO.
I somewhat agree about the choice paralysis but you get over it after you learn your first framework and realize it uses many of the same idioms and patterns as other frameworks in the domain. Regarding IDE's. Perhaps it is because of my experience but I never have trouble getting a project imported any more. I don't know if that's because the maven support got better or because I'm smarter or what. It just hasn't been an issue in a dogs age.
I had the exact same experience. I started in Java, went to web and then to Android. I ended up loving java development afterwards. 
You're not too far off, with the recent 'acquisition' of Express by StrongLoop.
You can get 90% of the featureset of c# with tons of extra nice features with scala.
The differences between type systems are really too complex to be distilled down to &gt; "Programming without static typing is ... not going to end well for you." Personally speaking, I've been involved with successful systems development in both dynamically and statically typed languages. (I've also had some good success working in C, which has a very weak typing system, and assembler which is weaker still.) IMO, the key to all of these different types of development is to understand the strengths and weaknesses of the toolchain you're using *and adapt your processes and thinking to match*. In a sense, the fact that JavaScript is syntactically so similar to Java does it a disservice. As similar as they look, the two languages require a radically different way of working.
I kinda depends on what your goals are. Are you interested in learning something once that will still be used 5 years from now? Are you interested in learning something that will give you returns when you put it on your resume? If so, it's either Spring MVC. I use a lot of frameworks at my job doing java development, and a lot of them I find pointless. We use Maven, but I'm not a huge fan - it doesn't work well from behind our firewall, I'd rather be using Maven to download the jars and actually be putting them into source control we don't have that monthly "uh-oh, a developer is having problems with maven" issue. (And no, a lot of excuses about not "using it right" or "you can set up a local repo", etc etc matter to me). Hibernate is another annoyance - I keep needing to write direct sql anyways. I kept trying to write something in hibernate recently and finally just threw in the towel and had to rewrite it in jdbc - then I wrote it once and it worked. I don't see the value in writing in hibernate if you're only going to use 1 database system for your app. But Spring MVC is one of the few frameworks I actually find to be more productive than trying to write it by hand without a framework. It's a bit annoying to get setup, but once you do it consistently works and saves me time. Every year there's a new framework to play around with - ruby rails, Play, etc etc. Problem is, a year or several years go by, and new whiz-bang framework comes out, and no one uses the old framework any more. Sometimes - like with Ruby on Rails - it's popular for a while, then people go back and rewrite it in java anyways (ex - Twitter). I imagine Spark will be another one of these - fun for a while, then something else will come along. So since I usually focus on something that will add to my resume, I would choose Spring MVC.
Scala is positively amazing
I had a thought about this, and I don't think you can make that statement generally. If you take a look at what Java does have, you could argue it contains mostly the same things (references to objects being pointers in c++), simple generics supporting some type limitations (&lt;T extends Comparable&gt; for example). But then I had to think about what else C++ does with its type system. It does have references that cannot be null (and the program still being well formed), value types for all things not just primitives, and lastly template metaprogramming being its own language living in the type system. Practically speaking, I think Java is good enough for the vast majority of things application developers do. It has a leg up on specifying limits on generics, but if you are a library developer I think C++ brings a stronger type system to the table^(*). Certain Scala developers might be able to corroborate this. ^(*) I know a certain PhD student doing work on a C++ library that is doing some amazingly useful things that are basically TMP magic to most. But a library user would be able to do more things simply with it, essentially benefiting from TMP without having to use it.
Ironically enough, in some ways it makes no difference at all. Given two Turing-complete languages, the type system has no impact on the expressiveness of the language. What the type system does for you is change the notation that you use, which can be a double-edged sword. As has been said elsewhere in this thread, it's very true that Java's static typing and explicit declarations can catch errors at compile time. Whenever I write code in Java, I always marvel just a bit at the confidence-inspiring nature of the compiler's inherent type checking. But, however useful this is, it's not without its disadvantages. As soon as your system starts to deviate from the assumptions built into the type system, you wind up forced to hack around those assumptions. This can introduce extra complexity and opportunities for errors.
No, I'm specifically talking about C++'s fondness of implicit conversions when I speak of weak vs strong typing. C++ will downcast longs into ints and ints into chars happily, while java will throw compilation errors.
Well, it seems to me that the no side effects thing makes it easier to reason about the logic of my programs, and the functional way of doing things leads to a lot less complicated/bloated types and data structures, thereby negating many of the problems of dynamic typing. Yes I would have preferred static typing, but I honestly find it a small price to pay for the mind boggling expressiveness and awesomeness of Clojure. It gives you the goodness of dynamic typing with a lot less of the badness (i'm looking at you python).
How about the PostgreSQL Enhydra Netbeans iBatis Spring stack? (I don't know of this combination actually being used to develop things anywhere). 
Look at your class declaration. See if you can figure out why the Java run time does not have permission to see that your class has a main method.
Java is great, but there are some aspects of Java "culture" that should be avoided: * Dependencies are not free. I've seen so many projects with massive pom.xml and many of them are there because of just a single or few method calls. Too many Java developers think that there's no cost to dependencies. This is not true. Every dependency adds build complexity. Increased build complexity means slower builds, more time debugging issues (that thing is using some_library 1.4, but that other thing is using 1.3, however 1.4 had breaking changes, and now the build is broken, the dev who did this left a long time ago, and our continuous integration is broken for hours until we figure out how to fix this dependency mess. Also the rest of the company updated their workspace from source control, their local builds are broken, and they're mad because now they can't get any work done) Don't go the other extreme of reinventing the wheel. Knowing the balance is part of what separates a junior from a senior developer. * Too many Java developers think Maven is "magic". I wish more would just spend an afternoon understanding what Maven does. I've seen so many cyclic dependencies and people often don't even notice they're doing it. They understand once it's pointed out, but it should never happened in the first place. * Effective Java by Joshua Bloch. This should be required reading for any Java developer. There's a lot of book recommendations, but this one should be right in the JDK installer with a "Did you read Effective Java?" and stopping the install if they click no. * If you're fighting the Java language, probably someone did the same thing at Google and told the Guava devs about it. It's likely there's something in Guava to make it easier. Guava should be the first dependency in every Java project. * IDEs are great, but they are not magic. Developers should not just pick the first import that kind of matches what they're looking for. Look at the actual package name and make sure it's the right one. And I don't care if it builds in the IDE. If it doesn't build on maven command line, it's BROKEN. 
Thank you for the clarification. I made up some code that assigns a long value to a char using a variable and using a constant. Assigning with the variable produced no warnings at all (even with -Wall), but the constant did produce: warning: implicit conversion from 'long' to 'char' changes value from 4938934875 to 91 [-Wconstant-conversion] Call me surprised.
career
Try to tell that to my customers using my C#-based Android apps connecting to my C#-based WCF services hosted in my Ubuntu servers ;).. sorry your platform-lock in argument is pure bullshit. java sucks balls and is retarded.
Is developing a Python backend similar to Node? Fast to develop, hard to maintain a large codebase?
Find a good ORM (object relation mapping) tool, Hibernate is the popular one right now in the java stack. Or start breaking into Jquery or other javascript frameworks. for a web application. 
I'll tell you what's been working phenomenally well for me and my team for close to a decade now, and I suspect it's an answer you won't get too much: NO FRAMEWORK! Or, to be more precise: as little framework as possible. What we've standardized on is ExtJS for front-end and DWR on the back-end. Within our DWR delegates we use Spring JDBC for database work... and that's about everything :) Sure, we'll use some other libraries here and there as needed, but that ExtJS+DWR+Spring JDBC is about as close to a "framework" as we get. Now, the down side for a lot of people is this pattern will definitely make you more client-heavy. No question about that. If you aren't up on HTML, CSS and JS then you'll likely fall flat on your face developing this way. And, certainly for classic Java developers it's something that's tough to wrap your brain around... but, I can tell you that my team was EXCLUSIVELY Java developers before and they were able to pick things up without much trouble. They found that they were more effective too for any number of reasons. The best part is you can swap pieces out as things evolve. Don't like ExtJS? That's cool, use Angular or Dojo or jQuery UI or whatever else floats your boat. Want to use Hibernate? I'd council against it, but you can do so if you want without any problem. The common glue in it all is DWR, that's the singular piece that you probably wouldn't want to swap out (but, having said that, while DWR was unique six years ago, there's some competitors now that look and work A LOT like it, so really you could switch if you wanted). What you wind up with is a SOA architecture with Java code on the server that's about as thin as it can be (read: POJOs, unless you explicitly TRY to screw things up!). I think modern developers have a tendency to look for "the next big thing", or that one perfect framework that will make them super-productive without lifting barely a finger. I've been a professional developer for closing in on 30 years and I've yet to see that materialize. Instead, the simplest combination of "basic" technologies possible has proven to be the best way to go. Better productivity, easier to troubleshoot which leads to long-term stability and maintainability. So yeah, no framework is my suggestion :)
Very nice... are you looking for contributors? I could see this being a very nice library..
I had an issue with this too. Maybe set the int of Math.sqrt(arguments[0]) to a variable and use that? arguments[0] should still output what you expect.
well, java 8. http://docs.oracle.com/javase/tutorial/ Lots of nice new API. 
And now I feel like a complete idiot. I will repost. Been a long day. :)
Pretty much every wish you just expressed is answered in IntelliJ. No, it's not free beer, but neither is Visual Studio. IntelliJ has an open source CE edition though and Microsoft can't claim that despite all the other open source projects they may have at the edges of their ecosystem. 
"I can do desktop applications" Qualify this statement. Show us something. Put up a public jnlp that we can have a look at and understand exactly what that means. 
Doesn't have to, but usually is. I got better things to do than generate a full on class for every click, double-click, drag, drop, snoop, moop, bebop and flipflop that I can listen for.
The 'no framework' approach seems quite sexy in the PHP world. I hadn't heard of DWR, and I will be looking at it. What you have just said, sort of comes after my own heart on the matter. It is easier to understand interactions between components when all those components are quite small.
Well for example I have been working on this app that manages a shop's client credit. Its a desktop app that stores all the info into a mysql database. Its simple enough it has Create, Read, Update and Delete of the information used: Clients, their purchases, their credit, an history of their payments and their payment plan. Future plans include full store management with inventory and that stuff. Its not 100% complete and I don't know how to do the jnlp I'll be looking on how to do it ASAP.
I've heard about hibernate. I'll go take a look at it, next step after hibernate would be checking spring to make them both work together maybe?
I'd recommend a book called Effective Java: http://uet.vnu.edu.vn/~chauttm/e-books/java/Effective.Java.2nd.Edition.May.2008.3000th.Release.pdf
&gt; Yes I would have preferred static typing, but I honestly find it a small price to pay for the mind boggling expressiveness and awesomeness of Clojure. Much of the expressiveness of Clojure comes from the fact that it's dynamically typed. Where the language shines is, at least in part, from the fact that it makes it easy to use a few common data types to store many different types of data. Then, it provides powerful functions for working with those few data types. This is the embodiment of the Alan Perlis quote: *""It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.""* http://stackoverflow.com/questions/6016271/why-is-it-better-to-have-100-functions-operate-on-one-data-structure-than-10-fun The explicit static typing of Java works to reduce the breadth of data to which functions can be applied. Let's say I have a new function that I want to write that applies to Lists. In Java, I have to either define it as a static utility method (which is second class to the built-in List methods) or pick a concrete `java.util.List` implementation and subclass that with the new method, which presents its own reuse problems. In Clojure, I just define a function over seqs, and it works wherever it can.
Lambdas. Streams. New libraries for concurrency. Promises/futures. Dropwizard. Optionals. Good stuff, all in all.
It really is a different style of working. Java developers find it especially cumbersome since they have learned to rely on the compiler quite a bit. In JS many classes of errors thought eradicated re-appear. A spelling error in a property name is not an error in JS, etc. The 'advantage' is that you will test your code a lot more. It's no fun debugging JS. 
Do you have anything constructive to offer or just platitudes like modern, super powerful and outdated marketing terms like web 2.0?
I feel like every 2 years someone figures out a new way to do the tasks that were already pretty easy. Yes, you can bootstrap a node.js site or a rails site or whatever it was before that in 5 minutes. You could bootstrap in Java in maybe an hour. That was never a bottleneck. The bottleneck is, was and always will be maintenance and extensibility.
If you don't want to use AspectJ and compile time weaving using aspectJ compiler you should use plain dynamic proxy in the JDK. With current advances, dynamic proxy wouldn't place a hefty performance penalty. Plus you could chain your proxies/aspect together nicely too. See the concept described here: http://dmly.github.io/blog/2013/04/28/java-proxy-chaining-aspect-on-the-cheap/
While it's great to see that Sonatype addressed the concern raised by recent articles so quickly, it's still concerning that this was an issue in the first place. If this were a simple oversight, it wouldn't have been so bad -- it happens, sadly. The fact remains that this was a design decision, not an oversight. They *knowingly* put users at risk.
except for having to work with windows and .net. (yeah, I know about mono, but we all know that's not the majority use case of c#)
That's true. I always secretly wished C# for JVM
Absolutely, email me at team@jcabi.com
His brushing aside of the Optional/Maybe pattern is amusing at minimum. Here's a great solution (along with JSR-305, which provides compiler warnings for @Nullable and @NonNull), which provides type safety and forces a check of present-ness, is damn nice. I don't understand why he blew it off so quickly. 
If you get the jsr-305 module and use @NonNull annotation (or whatever it is), the compiler should at least warn you of those. And set up your build system to fail the build if those warnings are seen in the console output. 
Np. [This is some other terrible implicit conversion stuff C++ will happily do.](http://ideone.com/HDfCFK) IIRC, C++ will hunt for conversions like that throughout your entire codebase/library dependencies. 
Right, I don't think (until jsr-305 is part of the language spec, with compiler errors turned on) accepting Optional&lt;&gt; as a method param is good practice at all. Ideally, you can set up @NonNull annotations (and @NonNullByDefault with findbugs) to get some semblance of IDE support
Thanks for the advice! 
So what's the proposed solution? Is there anything that prevents secret agents from using another exploit to change the contents of your developers' (or CI system's) local Maven cache? Are we really going to propose a system that builds the SHA-512 hashes of "official" java library releases, and distributes them for validation by everybody?
I think the only thing wrong with that code is that enums will convert, so you should use an enum class instead. As for it converting an int to a Butt, I don't think that is terrible in principle, it means you can treat char* and string as almost the same thing, which due to legacy can be a very important attribute. In some cases the biggest issue is that it will only do it once - to understand why you would want this, some Haskell knowledge would likely help. At least you can turn that off with explicit before the constructor.
The idea of implicit conversions isn't bad, but they have to be limited in scope. Scala has implicits, and they're really useful, but even with them only activating if you import them into the current context, you still have to be careful. 
The code you supplied doesn't compile, You need to convert the parameter to a integer. Use [Integer.valueOf(String s)](http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#valueOf%28java.lang.String%29) to convert it to a int. Other than that it ran for me using java -cp . com.java24hours.root2 [number] 
You're better off using the schools computer lab. Sublime text and javac is all your pupils need.
Why is it mandatory that programming articles contain memes now? It's really annoying to see old as fuck memes peppered throughout an article like this. Also, maybe organizations will go through the effort needed to build the reputation you need for signing keys to be trustworthy, but your common OSS programmer is not. It's a ton of hassle to do all the promoting and networking to build the trust needed for signing keys to be useful. Anyway, no you're not secure with SSL, but you're never truly secure from being tricked anyway. Signing keys are a nice idea, but they do not improve security enough to be worth it for most small-time devs. edit: thinking on it more, a public keyserver like https://pgp.mit.edu/ is security theater without background checks or any kind of identity verification. it's far too easy to fabricate a new identity otherwise, and it'd be real easy to scam a ton of peeps into installing your malware, then when you get found out switch to a new identity.
Usually I just use a lambda instead. Scala's nice like that.
I don't see how a standalone function is any different to a Java static method, nor what the relevance is to dynamic typing. 
If you look at the license matrix for IntelliJ, you will see that classroom licenses for IntelliJ are FREE: http://www.jetbrains.com/idea/buy/license-matrix.jsp I suspect all you need is for your professor to sign off on, or submit, the application for this. Note that VS was obtained from Microsoft in much the same way, so this isn't exactly a huge barrier for a student.
i would recommend writing your own library in java using the Pi4J library to use the raspberry pi gpio pins. it won't be that hard for you and it will be good for your students to learn about objects that way. i would give you my code if i could, but i wrote it for an internship :/ http://pi4j.com/
to clarify: write the code for motors so students can take Motor objects and use them to make a FourWheelRobot or a ThreeWheelRobot and just call motor.forwards(int duration) or whatever on the robot
From my memory of AP comp sci, I recall that the baseline topics you need to cover are basic control flow constructs (functions, decisions, loops) and OO topics. As *important* as electronic groundwork is, IMO, I think it might be overwhelming for your students to have to deal with hardware *and* software mysteries at the same time. If there are a couple of students in your class that are excelling though, you should definitely have a couple of Pi hanging around to push them further. 
Really helpful.
Working well. Its help me solved my Java problem :)
So "hacky" it's just good enough for I don't know... the Linux code base.
Awesome articles. Help me lot.
working well.
I just bought this a few weeks ago and I'm learning a lot from it. It's pretty dense, but offers an incredible amount of design tips that you're not going to stumble across in most Java tutorials
But libraries should all come in signed jars right? /s The fact is that our software toolchain is very fragile because the majority of it is based on unauthenticated dependencies which until this Sonatype change were usually distributed via unencrypted connections.
Here's a quick breakdown: 10 - title-case your class names. In this case, "Subject" 15-19 - "public static" means these are completely global variables, which is totally unnecessary here, and very bad practice outside of defining constants, e.g: public static final String STRING_EVERYBODY_NEEDS = "foobar"; Make these all private, and not static. 19 - But, in reality, this isn't going to work. Delete. 24-30 - This isn't going to work as-is. Get rid of lines 25 and 26. Change 28 to: render(getGraphics()); 31-36 - Delete. 51 - Here's where you can make your thread. Replace with this: Thread renderThread = new Thread(subject); renderThread.start(); That should be enough to get you rendering. BUT, this is not going to scale to what you probably want to do. This is just going to eat all your CPU drawing a rectangle. As /u/cebarks suggested, look into Java2D, or read up more on Applets. http://docs.oracle.com/javase/tutorial/deployment/applet/
I wrote a blog post about this topic, which I hope some people may find interesting: http://clojurefun.wordpress.com/2012/09/06/something-i-still-love-about-java/ TL;DR - Java is actually pretty darn good if you want to maintain a rock-solid large code base.
Start with some "pet" projects, preferably some web application with JEE or Spring. Then incorporate/switch new frameworks as you go on (Hibernate, JSF, Wicket etc.). You get to learn the concepts and have hands on experience, as well as compare and contrast tools/frameworks for yourself.
That's not an advantage...
That's not been my experience. Even for little things, a good statically-typed language works fine and doesn't take forever. It's also more likely that the program will work properly, which is helpful no matter its size. Note that I mostly use Scala, whose heavy type inference makes it somewhat resemble dynamic typing without sacrificing static type checking. There are some places where you have to give an explicit type, but a bunch of places where the compiler will figure it out if you don't.
You mean like having to write tests for every little thing, because there is basically no automatic verification of any kind? Ugh. No thanks. Even if the program does end up working right, that is a massive waste of time. Also, don't program in assembly if you don't really, really have to. Even if your program is correct, it'll never be as fast as the output of a modern compiler.
Clojure's expressiveness could mostly still be achieved with static typing. In fact, there are various efforts at the moment exploring how to add type systems to Clojure that are very exciting. Clojure + static typing would be a pretty amazing language.....
As a proponent of C#, you're really not helping anybody by making such silly remarks. Yes, Xamarin exists and it rocks. But saying java "sucks balls and is retarded" isn't going to change anybody's mind.
Do you have any references to support that?
You're right. I get infuriated by the fallacious "platform lock in" argument (which couldn't be further from the truth, considering the myriad of non-Windows platforms where C# runs, including: - Unity - Xamarin - "Server-side" Mono - Xbox) which I always get as a response every time I point java's flaws, and C#'s inevitable and completely self-evident non-opinionated non-subjective vast purely technical superiority in every possible level. Anyways, I'm not trying to change anyone's mind. It is really convenient for me that a bunch of these code monkeys keep fighting their dinosaur languages hoping for the devil (oracle) to somehow, sometime have a minimum decency (which they don't, evidenced by java's Ask crapware prostitution) and actually care to fix their ridiculously flawed appalling language, which they really OWN as opposed to it actually being somehow "open" as the code monkeys often claim... After all, should they decide to use modern, decent, open technology (C# / F#), there would be a greater competition, since they could also be creating good quality products, as opposed to vomiting useless java boilerplate and hoping that it will not get broken upon the next critical-security-fix of the week.
It all depends on what you value.
Evergreen: Uncaught TypeError: undefined is not a function in your-compiled-external.js line 1 ;-)
 if(thread.isPunThread()) System.out.println(brain.makePun(thread.getTopic())); else System.out.println(brain.makeHelpfulComment(thread.getTopic()));
I like your sense of entitlement. /s
Was posted by the author yesterday. http://www.reddit.com/r/java/comments/2ckbz0/java_8_stream_tutorial/