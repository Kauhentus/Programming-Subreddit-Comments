Also read somewhere that java uses escape analysis to optimize the use of "+", as long as it does not leak outside the scope of the method it would work just as well as String builder, ran a couple of tests on my own but I could still see a major difference in performance. So, don't be a fool like myself and research that stuff before you go to an interview and ruin the opportunity for yourself. 
You're making a huge set of assumptions without examining the use case. SQL isn't a silver bullet. You should pick the right tool for the job.
It really depends on what you want to do. You say the application is JavaFX and you want to store the user's data on your website. Does this mean it's a desktop or mobile application, and you want to save the data on a central server? If so how will you communicate with your server and what do you have available on the server-side? If this is the use case, then your choice of database depends heavily on what the server can do, and you would actually be saving the client data using a web service on the server, which would then save it to the actual database. If you're on AWS, [DynamoDB](https://aws.amazon.com/dynamodb/) and [SimpleDB](https://aws.amazon.com/simpledb/) are good (and cheap) database solutions for this kind of stuff. On AWS you can also use [API Gateway](https://aws.amazon.com/api-gateway/) to set up a server-less web service. If you just want to save the data locally, then others have suggested some databases which can easily be embedded in Java. This seems like the easiest route.
For serialisation I would recommend staying away from Java's native serialisation format. It's bulky, cumbersome, and slow. Straight up JSON (with [Jackson](https://github.com/FasterXML/jackson)) or [Google Protocol Buffers](https://developers.google.com/protocol-buffers/) are also interesting choices.
SQL is a proven model that works for most things, especially for backends. 90% of the time it's the best thing you can use.
It should also indicate the "level" of the professional, and his/her age
Payscale in Norman Oklahoma versus NYC is going to differ by a factor of two. 
I remember going through a dr exercise where it took me way too long to realize it wasn't sungUardas... I don't remember the context... user name to get into the environment or something like that.
So plan for it, and run entropy generation on startup using the nonblocking means. Or something
All the "poorly researched" article says is to not overcomplicate simple string building with builders. return "Name:" + this.name + " Age:" + this.age; vs return new StringBuilder("Name:").append(this.name) .append(" Age:") .append(this.age) .toString(); I'd personally rather read the first one and let javac make it into what the second one is explicitly declaring. But if building in a bunch of conditionals and/or loops, you still want to use StringBuilder. So unless the DZone "article" was edited after the medium "article", they both came to the same conclusion. The only foul was the click bait BS title on these.
"The poorly researched article" got off on the wrong foot by originally claiming this issue was due to the Java 8 release, which had nothing to do with it. To the author's credit, when the error was brought to his attention, he corrected the piece.
Unless you're being extremely careless
I fully agree with you on this example. There are no arguments there. Now I see that the author has updated the content. Here is the original version: https://webcache.googleusercontent.com/search?q=cache:Im80XNF8qqwJ:https://dzone.com/articles/string-concatenation-performacne-improvement-in-ja+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us Or https://web.archive.org/web/20161222144139/https://dzone.com/articles/string-concatenation-performacne-improvement-in-ja 
Agreed.
I'm sorry but that simply isn't true. Cloud-native simply means that the application is designed to be deployed as a container inside a cluster. There are some specific pitfalls (discovery, file IO) that you need to deal with. It's just a term for something we're already doing today. 
Including blocking your application waiting for the OS :)
It's still complete overkill if he's just reading a bunch of config parameters for example. In such a case just reading a properties file is much more convenient. 
&gt; Also read somewhere that java uses escape analysis to optimize the use of "+", as long as it does not leak outside the scope of the method it would work just as well as String builder Oh heck no. Javac is in fact dumb as heck (which it gets away with because the JVM is so awesome). It won't optimise concatenating of strings inside a loop for example. 
You can generate a large cryptographically secure pseudo-random stream of entropy from a small amount of seeding entropy using hash functions or other cryptographic functions. This is called a [CSPRNG](https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator). A java example for this is the SHA1PRNG SecureRandom documentation described [here](https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecureRandom).
&gt; Math math = new Math(); &gt; double myPi = math.PI; You could replace that with: double myPi = Math.PI; 
I agree completely. The only advantage java's integrated serialization has is that it is already there to be used. But I seem to have skipped the part where OP mentions that he plans to put the data on a website. In this case I would strongly recommend using a database server such as postgres or mysql. This will make it much easier and safer for data when you have multiple applications accessing it at the same time. 
 public class Foo { public static void main(Object[] args) { String a= "0"; String b= "1"; a = ((b =( ( a = (a^b) ) != (a^b) ) ? a^b : a^b ) == 0 ) ? a-b : a-b ; } } -&gt; $ javac Foo.java Foo.java:6: error: bad operand types for binary operator '^' a = ((b =( ( a = (a^b) ) != (a^b) ) ? a^b : a^b ) == 0 ) ? a-b : a-b ; ^ first type: String second type: String
&gt; It is Java related. This motor gives the possibility to be controlled directly out of Java, or any other language who is able to deal with sockets. You wouldn't post pictures of movie stars in /r/cars just because people can sit in cars, would you? &gt; the purpose is to find out if my product has a market Which makes you a spammer, congratulations. Please read the [site rules](https://www.reddit.com/help/contentpolicy) (linked at the bottom of every page) and the definition of [spam](https://reddit.zendesk.com/hc/en-us/articles/204536499).
&gt; absolutely everything is a garbage collected object It's not quite that extreme. The JVM will 'allocate' small objects that are only used within one method (or group of inlined methods) on the stack and not use garbage collection for them.
Nope. 9
(yes. words are hard.)
Was this just a thought experiment or did have you actually used this somewhere?
Even if it were config properties, and they were user submitted SQL would still be indefinitely better than creating a bunch of properties files or XML files on the disk drive of the server. Based on OP's description of what he's doing, SQL sounds a like a fine match, as it is 90% of the time. Using some new technology in this regard can usually mean shooting yourself in the foot.
Precisely. It's like comparing (exaggerating, of course) a car mechanic with an automobile engineer. One has more hands on, the other has better conceptual skills, and can, arguably, pick up hands-on skills quicker than the other way around.
Looks great. Unfortunately didn't find match for me. Will keep looking. 
You, CREEP !!
As part of that correction they added the part from this op that clarified that you should still use string builder inside loops, without calling out that change in their edit message. Seems shady. It makes the article read oddly too, since now the text of the article directly contradicts its title.
Remote work has closed the gap a lot
&gt; hard to test Would the Java Mission Control profiling help with that?
It was supposed to be one statement. So something like works: Arrays.asList(a = a ^ b, b = b ^ a, a = a ^ b);
&gt; doesn't make it abject trash software. There is a chorus of folks disagreeing with you, put your arrogance to rest as it only makes you look stupid. &gt;My post is worthless because you don't agree with it? Your post is worthless because it shows a childish binary understanding of reality, and doesn't even contribute an explanation... just moronic propaganda.
String.format does a ton of stuff under the hood and is not performant for use in e.g. loops.
It depends, if you constantly utilize ide such as Eclipse or intellij then learning this functionality would clear a few things up. You can also utilize it to deliver a project easily and update it as you make changes to it. All in all I would say that you should read up the basics on it atleast, its fairly easy. 
&gt; This makes me sad, I really like immutability and would've loved the Val-keyword :( I would have preferred *let* for easier visual disambiguation.
It's not that it won't support it, it's that it will make the preferred case the more challenging to type which is unfortunate final var bestPractice = 1; vs. let bestPractice = 10;
You're wrong here Tricky Dick.
If you want to get cleaner with your code, and see some nice suggestions about design, i would recommend it. It's easy reading but the topics are valuable quite a lot.
When comparing the Maven site generator to GHP's Jekyll, if you're not using the Maven report generation, there is no comparing the versatility of the two, or the availability of readable, reactive themes.
Do you have any experience in moving mechanical stuff with Java in real-time? Because these people would love to here more about the idea. I have not even postet the kickstarter link or a product page. Of course I would put a pic in /r/cars, or why do you think that every second celebrity makes a photo on twitter where you can see he's iphone :). 
Like everywhere there is a cap. To earn more than 2500euro after tax in a regular job you have to be quite good. There are peple earning 4k for sure but I would say that it's pretty hard to get. Poland is definitely not a golden country for devs. Plenty of us still move to Germany, Sweden or USA. For sure it's one of the best paid job in Polish job market but there are better opportunities in western europe.
LOL I honestly don't think that. I was expecting "Yes, that amount of money saves you from bad code." or "No, this other book is cheaper and will equip you with the same skills." that's why I asked for an explanation. FWIW in the title I ask if it's worth it because that price is already 25% of some Senior Programmer's gross monthly income where I'm from. (But please let's stay on topic.)
Throwaway because controversial. Have Robert Martin, Martin Fowler, etc, ever actually written any software? Thinking about other people I respect in software and who have opinions that I value, they're all people who have written some major piece of software. Like Linus torvalds who wrote Linux, or Joe Spolsky who led Excel development. What have Robert Martin or Martin Fowler written? Martin goes on about how he's been writing software for forty years. What software?
As an architect dealing with enterprise software, I haven't seen new JEE projects for quite some while. Unless, of course, you want to twist "using the Servlet interfaces between a HTTP server and libraries" into "JEE project", but you'd have to be pretty intellectually dishonest to do so.
In Krakow I live an apartment that cost me 500 euros now and it's extremely spacious
(1) That argument is pretty nonsense even if you haven't ever seen anything he's created. The books and blog posts and other writings he's published make it extremely clear that not only has he written software but that he understands and appreciates software development better than most. (2) In his books he mentions many things he's done including FitNesse: http://fitnesse.org/FitNesse.UserGuide. If you were actually familiar with what you were criticizing you wouldn't be making ignorant, silly statements and instead just looking up the answer to the question you're asking.
[removed]
Got you I understood it as weblogic 11 
Because that kind of depth of experience and knowledge is unfakeable to anyone who has faced the same kind of problems and had to come up with solutions. He's just plain right, in many cases. Even in cases where he may not be absolutely right, he's certainly got a valid point of view. 
Thanks, I did have a quick look but didn't find anything. The odd thing is that all of his commits appear to be minor refactorings, renames, and non-source edits. Some of them even seem [pointless](https://github.com/unclebob/fitnesse/commit/2a12d36cf7ec5c527e27e0cefa9efef156a716e4#diff-4f769fb0354fa63be0e694e43133ddf3). I'm not suggesting open source repos are the be all and end all, but they are one very quick way to get a sense of how hands-on someone is and what the quality of their code is like. On that point, his other repos are quite the eye-opener - along with the source code there's .DS_Store files, .idea dirs, binary .class &amp; .jar files - there's even CVS directories in a [few places](https://github.com/unclebob/smcjava/tree/master/source/smc/CVS). Peppering your code with [logic switches on enum values](https://github.com/unclebob/Episode-10-ExpenseReport/blob/master/src/expenseReport/ExpenseReport.java) seems like a beginner mistake. I'm struggling to find a piece of code I would hold up as well-written and idiomatic Java code, or even object-oriented code. It's a mess. And I had completely forgot about [this gem](https://github.com/unclebob/WTFisaMonad/blob/master/Monads.pdf), possibly the worse introduction to monads ever.
Brilliant. Short and sweet. I didn't know the difference(s) between the two. Hopefully, I get to meet with Eugen while in Romania. I want to thank him for all the good stuff he is posting about Java. 
He just wrote an article about it. The disruptor was created by Martin Thompson, Mike Barker, and Dave Farley
Ah thanks for the correction, it must have got mixed up in my head.
I don't think agile is missing a definition at all, or a cultish fad. I use agile/iterative development on my independent projects and on my team based one, and prefer agile extremely to the alternatives that is waterfall or chaos.
In the case of java you can do much better in a variety of ways. E.g. you can put more data in your Enum classes, for a pretty name/label or whatever. So you don't need to switch, you could just go yourEnum.getLabel(); I know if I saw it in a code review branching over a enum in a way that could be bettered handled by functions in the enum, I'd send it back for clean up.
And all agile does is breaking that up into iterative chunks. Waterfall is basically a giant kanban board in it's best version.
Short, but useful article. Thanks for posting.
You and the other person's comment pointed me towards an alternative to switching on enums, so thanks. However, the code you describe as a beginner mistake might be sample code that will be refactored.
[removed]
OK, I disagree.
About what?
Hi, sorry for the late reply but thank you for your help! So I have been working on this a few more days and have not gotten much farther. Here is the global idea: the user uses the app to log their workout, how they slept, how they felt, body measurements etc. All these variables are stored in textfields or captured with checkboxes. I would then like the data to sync with my website, so it can be seen and edited there too; and to sync with other instances of the app running on their phone or different computer (same login). I was thinking SQL, but then every time I SELECT, and UPDATE, would the old data not get overwritten? Thank you for any help!
Thank you! But if I go with H2, how would the data "sync" with my website? 
I am hosting on hostgator with a business account, but I am experimenting on a dedicated server too, so I do have the option to switch there and install my own software. I do not have AWS I am afraid, could I link that somehow?
It will be a desktop app and eventually mobile apps as well. I want to save the data on a central server. For communication, JDCB?
There are lots of sources in the internet for a programmer to make revenue. And its very interesting that most of these sources are capable in making a full time income for you. I've categorized all these sources to 6 types. These are the major 6 methods through which you can make money online with your coding skills. 1) Freelancing 2) Start a personal website 3)Develop games 4) Build trendy applications 5) Participate in programming contests Give advertisements in business listing directories For sure you can make money through these methods I've mentioned ,but the range will depend on how wise you are going to utilize it. Good luck to all programmers who are trying to make some money online. These ten interesting ways to work with Java merely scratch the surface of how to rejuvenate your love of programming. Java is so popular and widespread that there’s a practically infinite number of ways and places to do fun and fascinating things with the language. Whatever you want to do, Java skills can be your ticket to a fun career with no room to be bored. If your searching for job or good company for development field I would to suggest company like [cygnet infotech](http://www.cygnet-infotech.com/mobile-application-development) is the best one thanks 
It's a good book, I liked it.
A SQL database hosted on a central server is most likely what you'll want here. You can update your DB from your application via HTTP, I recommend JSON for responses. SQL has the ability to not only insert and select, but also to update existing tables and pretty much do anything you'll need to represent your data structures. Basically the flow would go something like: * Application requests POST/PUT/GET to server with needed parameters * Server responds with JSON * Application digests data EDIT: There are a lot of good web frameworks out there that make implementing easier, it really comes down to which language you're most comfortable with / feature sets you need. For something small like this I would probably use just plain ol' PHP or maybe Play Framework or Spring.
This looks promising, thank you!
No, see, there are essentially "levels" to SQL databases: the database itself, tables, rows, and columns. Each of which are made up of the last. For instance, say I wanted to add a *row* to the *customers* table, I would do something like INSERT INTO customers (name, email, gender) VALUES ('John', 'john@example.com', 'male'); Now maybe later the user decides to change their email, no prob, we can do something like UPDATE customers SET email = 'newemail@example.com' WHERE name = 'John'; Maybe John decides to delete his account, then we do DELETE FROM customers WHERE name = 'John'; etc, etc
Thanks for the replies (I've read the other ones too). So you have a desktop app that collects data about a user, and you want to store it on a server. Looking at Hostgator, you have PHP, Ruby, and MySQL available. You can't put Java on that server. So you have to do two things: 1. You have to build a small web service to manage logins and storing the data. Ruby and PHP are fine choices for this, and with some searching you can probably find some simple tool to help you build a web service for it. Since you have MySQL available, just use that. 2. You have to integrate said web service into your Java desktop application. There are plenty of tools around for this as well. So in a nutshell the Java desktop app would collect the data and send it to the server via you HTTP web service API. The PHP or Ruby script on the server would then handle authentication and actually save the data to the database. Whenever you want to get at the data from your desktop application, you'd use the web service as well. You could also have a local cache in an embedded SQL database like H2, but I'd suggest solving that problem separately when you've got everything else working. 
Hello and welcome to Java! Please see the sidebar, questions like this are better served by /r/javahelp. That said, you are probably missing the import for Scanner. Of course, without seeing your code it is hard to say...
&gt; I have expierence with Java, HTML, CSS and a tiny bit of SQL. I would strongly recommend going from "tiny bit" to "quite comfortable". SQL is a must-know for pretty much any developer. Had you dove a bit deeper into it most of these questions would've been quite obvious to you. You really should become comfortable with setting up a database and inserting, updating, deleting and selecting data. Also these kinds of questions should be posted in /r/javahelp.
You're welcome :-) Happy to have been of service
Not sure I follow - did I post two comments in a row on some older submission? A direct link would be great. Cheers, Eugen. 
It has closed the gap *for remote workers* but there are nowhere near enough remote jobs in existence to have any noticeable impact on average salaries. 
Most of the reason these debates exist is because these terms are highly *relative*. An object that's anemic in one context, is not anemic in another. The argument against "anemic domain" is basically that you shouldn't repeatedly implement your business logic outside your domain, and you should keep your interface as small as possible (which means not revealing implementation details unnecessarily), so the implementation can be kept flexible. This is not something anyone would possibly object to: we don't want to implement the same thing over and over, but slightly differently, do we? We don't want interfaces that lock down our implementation too tightly, do we? It was never about getters/setters, because the concept of getters/setters is neither good nor bad in principle, the context is required to make a judgment call. It was never about having objects that are perceived as "just data", those are DTO, and data is the only thing that survives over the wire, so of course we'll have data objects at some places. But the argument about the evils of the "anemic domain" eventually became about getters and setters, because discussing the [cost of the bike shed](https://en.wikipedia.org/wiki/Law_of_triviality#Examples) is more accessible topic for most people rather than getting the nuclear reactor next to it budgeted and built.
[removed]
I'd recommend looking into an ORM like Hibernate.
It's quite obvious you read a couple of sentences from the article and stopped, so you can post a comment. Read more carefully.
I think OO has it wrong in many ways. Its not the concept of OO, but more how its used. Think of a print press. It has many Parts, or objects, that make it up. You have the inkers, the stamps, the conveyers to move the paper, and so on. All different parts of this press could be thought of made using different objects, and each one of those objects could be tested in isolation. All of the parts make the printing press. HOWEVER. We also have the 'paper' object that moves its way though the printing press. At each stage, parts of the press alter the papers 'internal state', by adding different coloured inks, etc. SO.... this might well be considered anaemic design..... the paper is a dumb object, and is acted on by lots of other objects, to produce the final result.... the paper has lots of 'setInkAtPixel()' that applys ink to the right places. and when viewed, the paper has a 'getBitmap' which presents the image to the viewer. Lots of objects.... making changes to a dum object with getters and setters. You know what? This is *EXACTLY* how it should be. 
I agree that "Hello World!" is not a real world application; however, it shows the raw throughput potential and latency overhead of each framework. I have done a real test for a bank in Canada in comparison with Spring Boot with Undertow embedded and you can find some info in the link below. https://github.com/networknt/light-java-example/issues/9 
Maybe latency, but I wouldn't say throughput, because any advanced microservice communication protocol would batch multiple messages with destination the same node into a single transmission. And that transmission wouldn't be HTTP. HTTP is merely the clumsiest lowest common denominator for service communication. Regarding the bank of Canada app, we do see two orders of magnitude less request/sec there, which kind of proves my point, that the bottleneck in many cases won't be (HTTP) communication.
it is, but the cache plugin overrides that. Should be ok now. 
A bunch of people did say that. I'm saying it shouldn't. How would that mean I don't understand OO?
Good for me to remember the process, thanks!
You mean something like this or not? http://stackoverflow.com/a/5437863 You could build a GUI that looks like a terminal around that. 
There's Lanterna and the clamshell-cli project. Googling this isnt easy. I usually have to use terminal, shell, or console terms and scroll through a few pages.
Entity Component Systems is a much more valid approach to game development than Object Oriented Programming with fixed class hierarchies. This alone is proof that "anemic" objects are acceptable. For those who are not familiar with Entity Component Systems: In ECS, entities are the analogues of game objects, components are data, and systems are logic operating on a subset of components. Components are dynamic, they can be added to and removed from entities during runtime. Systems usually run in a game loop. A simplistic example: Entities can contain Mass, Size, Physics2D (position, velocity, acceleration), Attractable, and Attractor components. Gravity system operates on entities with Mass, Physics2D, and Attractable or Attractor components, and modify acceleration towards each other. Collision system handles collisions based on Mass, Size, and Physics2D and updates Physics2D accordingly. Physics system operatoes on Physics2D and updates position, velocity, and acceleration at each tick. All components can be removed or added to suit the momentary needs of the game. For example you might have an anti-gravity hoverboard that is not affected by gravity. However once it runs out of power, or it is switched off, you might add an Attractable component so the Gravity system starts to affect it and update its Physics2D. 
If Hibernate/JPA is considered a high-performance persistence protocol... the bar is really low here.
Quick and dirty scaffold: http://pastebin.com/8sYdXpv8
Have a look at [Ammonite](http://www.lihaoyi.com/Ammonite/#Ammonite-Shell). It's in Scala though.
http://openjdk.java.net/legal/gplv2+ce.html
https://www.google.com/search?q=java+terminal+emulator
&gt; I was prepared to see an author that does not like OOP. But to see one that does not even know it? That is something new to me. Do you honestly have to be so arrogant? &gt; Have the author ever heard of a Visitor pattern? Have you? &gt; The one where printing logic (such as conditions defining the order of chapters, relations between them, the pictures and the references) is inside the Book class, which calls Visitor's method to let it deal just with the output format specific parts of the logic. Nope, that's not the one. You didn't describe the Visitor pattern, as no printing logic would be within an element's ``accept(visitor)`` method. Visitors implement double dispatch, so elements can only bother with traversing themselves and let the visitor perform the operation through its generic ``visit(element)`` method (where the element doesn't know what the operation is) based on the type of the element and the visitor. So the element will have no chance of defining "printing logic" because it wouldn't know the visitor is printing it. Instead of Visitor, you described something in-between the Strategy and Delegation patterns, while missing the point the author was making, regarding the role of "data objects". And the irony is that a Visitor would still usually need some getters on those elements, so it can print something. Just my two cents, I hope it's enough to buy yourself and eat some humble pie. 
It depends what problem I'm solving. For example, about the most performant way of persisting state is maintaining an event log (recording exact changes in state, not flushing and loading objects). That is, if you're lucky enough that your problem fits the shape of this solution.
The problem with an event log is to ensure data integrity. Since you accept events that might turn into a conflict (2 users booking the same plane seat), you need post-factum conflict detection and resolution. Sagas and compensating transactions are mandatory in this regard. As long as you can benefit from ACID, it's good take advantage of the built-in data anomaly prevention offered by RDBMS. After all, even Google Spanner uses ACID because even for Google engineers it's hard to program without a solid concurrency control data model.
I second this, i use it daily and it works well.
If events might end up in conflict... they're not events. They're maybe commands instructing an event to happen. A command may fail to achieve its effects. But an event is a fact. It has happened, and it can't fail. So when I mean an event log, I mean a log of accepted facts. ACID is more limited than people tend to think. It's actually not very hard to end up with inconsistent state, when not using a high enough transaction isolation, or when not materializing *all* potential conflicts (say, by creating a row for the conflict, and then locking it before proceeding... not that you actually *need* the row for state persistence). But there's a much simpler and much better way of ensuring integrity... a simple linear event log. Check out more here: http://martinfowler.com/articles/lmax.html https://mechanical-sympathy.blogspot.bg/2011/09/single-writer-principle.html https://lmax-exchange.github.io/disruptor/ Once again, it's not a solution to every problem. But when it comes to "fast", it's as fast as they come, and consistency is not an issue. 
I thought we're talking about high performance, and now suddenly we have to lug along the overhead of ACID, non-sequential and concurrent read/writes, MVCC snapshot management, only so we can then extract the events from a RDBMS's transaction log, in order to emulate basically what we can get by directly appending to a plain file? That doesn't sound wise. Furthermore, ideally events are modeled after the domain you're persisting. A RDBMS's transaction log is about changes on table records. It's not very informative with regards to the domain. 
Again, really, really close but no cigar. This one too is for creating your own shell where you have made up your own commands, usually to communicate with your own project.
Your aversion towards Hibernate reminds me of this free chapter from this book: https://leanpub.com/high-performance-java-persistence/read#leanpub-auto-why-jpa-and-hibernate-matter There's more to Hibernate than just plain CRUD or basic ORM capabilities. It's an interesting point of view.
That's a very interesting point about the bike-shedding in this argument. Would you mind sharing relevant resources about OOP models and design, like books or articles?
&gt; Do you honestly have to be so arrogant? I tend to match the tone set by the article while commenting it. Also, I saw no reason to be serious in this thread, discussing this sort of an article. The visitor does not have to be `visit(element)`, it could be more specific - one method for chapters, one for titles, one for illustrations, etc. In fact, a `book.printWith(new JsonPrinter())` would be an example of a visitor pattern applied to a real world problem. The book will have the business logic inside it, the printer will know how to output the bits of information.
As stated in that chapter, write behind caching allows you to speed up writes, which is very important in Master-Slave setups. The write behind cache is strongly consistent and is bound to a single transaction without no implications on ACID. Do you have an actual example to demonstrate how Hibernate write behind Persistence Context can lead to read/write skew?
Anemic objects are definitely, absolutely, not OK. They're not actually objects in any reasonable sense of the word, they're just glorified, overcomplicated structs. Problem is, we don't actually _have_ structs in Java, so we're stuck using not-ok make-believe structs by repurposing classes with accessor methods. The only sane way to deal with this is to embrace the struct-iness of these "anemic objects", and stop trying to hit every programming nail with the OOP hammer.
&gt; As stated in that chapter, write behind caching allows you to speed up writes, which is very important in Master-Slave setups. I doubt that batching a couple of queries in a short-lived transaction (as it *should* be) would be that of a triumphant win for master-slave replication (especially if it's not synchronous). After all, you can't combine most kinds of statements into one, because the SQL interface doesn't allow it, so the remaining win is sending multiple statements in one go, saving you the roundtrips. Needless to say, you'd batch statements when possible whether you use Hibernate or not, so I don't see any unique value here. If the write-behind doesn't operate within the boundaries of a transaction, like Coherence does (and some other JPA providers) then it *can* be a big win for performance, and a big loss for ACID, of course. &gt; The write behind cache is strongly consistent and is bound to a single transaction without no implications on ACID. That actually depends on people not changing their FlushMode... Options are nice, right? In theory. Hibernate has lots and lots of options. &gt; Do you have an actual example to demonstrate how Hibernate write behind Persistence Context can lead to read/write skew? It's hard to figure out all the edge cases of "smart" tricks like these, but my experience always shows there are loopholes. This is theoretical, but imagine two concurrent transactions, A and B: - A: foo.bar is 2; foo.bar = 5; foo.bar = 2; // Write-behind detects no change from the initial value, nothing gets written. - B: foo.bar = 10; // Write-behind updates foo.bar to 10. There's a conflict between these transactions, but it never gets materialized, so both transactions go through. Here's a less theoretical problem: Hibernate will execute operations in a specific order with write-behind, which is not necessarily the order in which you did them during the session. So you're deleting an item with PK 123, and then inserting another with PK 123. And you get a unique key constraint violation. Why? Because write-behind does inserts before deletions. Enjoy your performance improvements...
Let's stick to the books as our real world example. Consider a scientific monograph. It has chapters, that can be arranged in different order, and objects such as illustrations, formulas, tables, code snippets, etc. Those should be numbered either by chapter (tables in chapter four get numbers 4.1, 4.2, 4.3...) or through (simply 1, 2, 3 through the entire book). Depending on the country in which it is about to be printed. Whenever the illustration or a formula is referenced in the book, the number there needs to reference its actual number. So when the author rearranges sections of the book in different order, many numbers change, but all the references are updated accordingly. Then, there are other auto-generated sections on the book, such as Table of Contents, list of references, index, list of illustrations... All of that logic matters at printing time. This is the time when the book takes into account certain conditions and produces the final text. That logic ought to be inside the Book or its members. Once the final book text is compiled by the book this way, it can pass it over to the Printer (visitor) to deal with Printer/Plotter details. Consider this simple example. You want to have a book that considers the current locale and prints either color or colour. Would you have this logic in the book, or would every printer of yours have a `s/color/colour/g`?
Are you looking for a terminal emulator written in Java?
Did you import Scanner class? Try write "import java.util.Scanner;"
Who gives a goddamn whether the operations of a type are defined inside of its declaration or outside of it as long as they all respect the correct semantics? OOP advocates, that's who! Because they're superstitious about that sort of stuff.
The book was at one time a seminal book in the development of Agile concepts. It was called the PPP book b/c of its subtitle (Principles, Patterns, and Practices). At the time, it was one of the better explanations of the principles and practices and was often recommended. However, since its appearance, many, many books have come out on these topics and practices have evolved. For example, continuous development did not exist as a concept then. And many of today's technologies (containers, clouds, REST APIs, etc.) were not known then. So, the book is a reasonable overview, but out of date. And given its size, you'll spend a lot of time reading a volume that doesn't relate directly to the work you're likely to be doing. TL, DR; It's out of date and there are better places to get the info it presents.
Thanks for the insight. I fear your assessment of the book being outdated is right, as I had the same conclusion for some parts of The Pragmatic Programmer.
Chicago, U.S. I do healthcare credentialing software. So I use Java as the backend for a SaaS for doctors and various hospitals to do their credentialing/re-credentialing. 
It's common in the industry to code Java GUIs by hand. This is because [Java](http://www.cygnet-infotech.com/success-stories/javagrails-javaspring) lacks a really top-notch GUI designer, of the type you get with Visual C#. If you want to get a really deep understanding, there's no substitute for learning how to code GUIs by hand, at least with Swing. JavaFX has a quite reasonable visual designer, but it only designs the XML code that drives the GUI. The Netbeans Visual designer for Swing, unless it's changed since I last looked at it, creates code that you can't then edit directly yourself; so doesn't teach you a whole lot and it ties you to Netbeans. The free Window Builder Pro plugin for Eclipse (for Swing) does generate Java code that you can edit, but tends to make a bit of a mess of it. If you learn one of these tools really well you could definitely get by with just using that; but then you'll be stumped if you ever have to create a GUI without it, or if you need to optimise your GUI code. So you can stick to these tools if you like them, but they just won't give you a good understanding of how it all works. Whether learning GUI by hand is a good investment of your time or not, depends on what your aims are. If you want to get a job with Swing, it's worth learning to do it by hand. I wouldn't bother learning to write JavaFX XML by hand too much though -- you only need to be able to occasionally edit it a bit perhaps. The advantages of a graphical user interface (GUI) are ease of use, higher productivity and better accessibility. Electronic devices with GUIs often let users accomplish tasks at a faster rate over devices that employ older interfaces. 
The title is completely misleading. The result graph makes this very clear: http://images.techhive.com/images/article/2016/12/bootcamps-vs-college-100699157-large.jpg Bootcamp grads do slightly worse on "practical programming", a bit worse on "low level design" and a bit better on "web system design" (which makes sense; this is what bootcamps focus on). But they are completely rubbish on algorithm's and data structures (recent grad average is 3/4, bootcamp grad is 1.5/4). So they score worse on 3 out of 4 portions and somehow the result of that is "boot camp grads write better code"?
It didn't, it was a reply to amazedballer.
Thanks for the nice words! Recently, client-side frameworks like Angular have become more popular, but those JavaScript frameworks targeting enterprise applications have a learning curve, too. One of the advantages of JSF is that you can start with knowing little about HTML, CSS, and JavaScript. On the long run, you'll have to learn about these things too, but you can achieve a lot without intimate knowledge of web technologies.
The issue here is that Java objects and OOP objects are not the exact same things. We can use Java objects to do OOP, but we can also use them for other things. An "object" with a couple of public fields, maybe a constructor and getters/setter might be what Java calls an object, but it's really just a struct. Similarly a class with only a number of static "methods" is not a class at all, it's just a namespace.
See above statement about how I'm not interested in discussing why it's a waste of time. 
I never called it a waste of time. Its simply very hard to understand what you're looking for, since it seems like you neither want a terminal emulator, nor a shell.
Bad thing is at least in part these are self fulfilling prophecies. If enough people read Gartner reports and act accordingly what they suggest will eventually happen. Also, if there were no new trends in the industry that they can "discover" then people would lose interest which is bad for their business. So there are reasons why they write the reports they write.
You could probably do some stream-y lazy concat approach these days as well, though with all these templating systems flying around I can't recall the last time I saw string concatination in a loop. 
This little bit strange question and I think you try to play trick. But it is no concern, I play this game no? You bit quickly brush over no relevant. I think this is bit too quick huh? When we talk microservice, there is no one definition. I give you definition, you give me definition. Who is right? You tell me, please. Now we go my definition and thus is single service. Is focussing on one task. Maybe authenticate? Maybe do file parsing? Can be anything. So go for authenticate... maybe we need input validation no? Then for input maybe we need to do little validation huh? Or you trust client blindly? Please tell me, if you do I not use your software! So we must do validation, so we use bean validation, okay? Then bean in which we accept parameter from client, it is CDI bean, so we can easily validate input with bean validation. Now we check data base for credential match? Maybe we use JPA for this huh? Then to speed up we make advantage of jcache no? So we make 1 micro service, is pretty small, but is important most: is focussing for task is small and well defined. Is no monolith huh? Please, you call other software monolith if you want to, but nu exempel is not. But I already use 3 technology from Java EE! Maybe you understand where is going, no? Is you saying microservicr not need validation, not can make use of manager bean, not need cache? Sorry, I think you have weird view of world my friend! 
Sorry I didn't make myself clear. I have the same definition of microservices like yours. Let's use an simple database updates transaction as an example. 1. Bean Validation is very slow as it is generic and designed to handle too many beans to simplify validations in a big monolithic app. For microservice, I don't even use bean as it creates garbage that needs to be collected after the request is done. Validation will be done by schema validator as well as programatically using Java code based on domain knowledge. JSON schema validator: https://github.com/networknt/json-schema-validator 2. CDI or Spring are designed to manage complex applications with many beans and they are really heavy. I never use them in microservices as I don't have bean or there is only several beans. I use my own service module to many injection during server startup. https://github.com/networknt/light-java/tree/master/service 3. JPA is designed to manage too many different type of database transactions with huge overhead on top of JDBC. For microservices, you normally only have one or two database operations and do you want to load a huge framework for it? Plain JDBC with Hikari Pool is the way to go. I have given above recommendations based on my experience on microservices building and I have a link in another post in this thread for comparison with servlet implementation. By using the three libraries you mentioned, your production provisioning cost will be at least 10 to 50 times more than mine to have the same throughput and latency. 
link requires to create an account... 
:( Didn't notice it since I was still logged in it seems. Okay, that is not so nice...
Ubuntu (unity) has weird window-disappearing bugs with intellij, so xubuntu here for zero problems.
Solus project. No problems so far with Intellij. I also had no problems with Mint
Ubuntu (Unity)
Neon. Before Kubuntu. There are Ubuntu/Debian compatible.
Antergos
Maybe you use multi screen? For me same, but seems window drawn outside visible screen. With shortcut, can move it back.
Ubuntu!
I liked Solus project but found its package repositories were far too lacking in dependencies. 
Ubuntu
Void Linux, OpenJDK, Geany
Antergos
Ubuntu + i3
Ubuntu Mate, running as a VM (configured with 8GB RAM and 40GB storage) under Windows 10. Previously I was developing on Windows 7. There are a few minor quirks (mostly of the user interface variety) but overall I'm very pleased with this setup. 
I work in a large enterprise with Hudson as the build server. That is absolutely the reason - no one wants to go through and update / verify a few hundred builds. Yea, I know - switching to Jenkins probably wouldn't impact the builds. But even at a "rebuild and test" for, lets say 250 builds at 10 min / build thats a full 40h week. Tell that to IT governance and you've got a Project. Now that you've got a Project, that needs buy in from other managers and a project manager assigned to it and... Meh. That Hudson server will keep running. Sure, there's a plugin or two that tweaks with divergent code bases that won't run in Hudson (that I do dearly miss)... but its not worth starting a Project for.
I'm currently using Fedora 23 and use IntelliJ with no problems. 
Why isn't it? It is. Rising World is a great work in progress by one or two developers using jMonkeyEngine. There are plenty of 2D and some 3D games done in libGDX. I did a small demo with libGDX and it ran super fast even on my old Nexus One.
&gt; C# has the same GC "issue" (especially in Unity, with a ~10 year old version of Mono) and people use that just fine. I see that all the time in Unity games, not knocking it, Unity and game developers gave me some great games on Ubuntu but great point you made there.
Not that I've seen, not on Windows or Ubuntu.
&gt; Microsoft Xamarin bought and extinguished RoboVM. THAT ^^^ is the only problem with Java. From the beginning Microsoft has sought to either control Java or kill it.
We have the same definition of microservice but have different standard regarding to performance. I am pushing to millions requests per second and less than 10 ms latency with minimum memory footprint. 
How so?
For me I'm using testing. It's starting to stabilize. 
Anyone download the PDF? I don't feel like registering
Fedora and CentOS for target platform RHEL
Is this bait? 
it's political, depends if you think the Hudson fork is the main line because it kept the name or if you think the Jenkins fork is the main line because the project founder and core developers stayed with it when it shifted its codebase + renamed
Fedora for dev, CentOS for production
Who's your hosting provider? There may be metrics gathering and notification and messaging tools you can use offered by the provider. You can use services like newrelic or appdynamics to do this as well. You'll be including/importing libraries that let you send metrics and error messages to newrelic or appdynamics api's, where you can then build dashboards, monitors, and alerts. I believe there are other services like this out there as well, but these are the two big names I run into. You can also implement things like nagios, logstash, kibana, grafana? am I spelling that right?, etc. if you want to maintain monitoring, log shipping/aggregation, metrics visualization, and alerting tools yourself. There's actually a wide range of tools for this, as I understand it. Some of these will require additional operational overhead, possibly including dedicated servers. Compare what it might cost you to implement your own monitoring stuff to the cost of managed services. Do take into account how much you might expect to scale up, too.
PDF looks very good, but annoying you have to register for it indeed.
Typically, process level monitoring is going to include some kind of on-system service running that exports metrics about the running (or not running) service. I recall doing this sort of thing on AWS, though I can't recall the exact name of the agent that exports system metrics, and I'm not sure how configurable it is. I'll have to explore it a little bit more soon. This is also how newrelic works. Monitors run which export data to newrelic endpoints. It's probably how appdynamics works, too. The default metrics that can be monitored without an on system agent exporting information to some place are going to be limited to what the hypervisor is able to monitor. This doesn't include processes. I would suspect DO only provides hyp level monitoring, but I've never used them, so I could be wrong. If you need robust, host provided monitoring tools, aws is an excellent choice. You can build useful dashboards in cloudwatch and use sns to send alarms to your phone and email. Monitoring capabilities are pretty feature rich without relying on an outside service. Google Cloud has similar features, but I've no experience with their monitoring tools as of yet.
Same here. Absolutely love it 
Upvote for OpenSUSE. YAST really is a blessing!
Linux Mint.
Linux mint here. Not a fan of that distro, but it does the job.
If you're using SE8, have a look at Java Mission Control, it can connect to a remote VM and give you CPU/RAM profiling, as well as some other useful features (can't remember off the top of my head)
Probably overkill for a single jar, but maybe [Hystrix](https://github.com/Netflix/Hystrix) works for you. Standalone dashboard [available](https://github.com/kennedyoliveira/standalone-hystrix-dashboard).
JDK7 and lower have basically the same thing, Java Managed Beans and Java Management Console. Very similar to Java Mission Control, just jenkier and all around worse UX, but the same capabilities have been there for a long time.
Have you thought of using apache commons email and sending an email to yourself whenever some exception is thrown?
I dont use NetBeans and never have so I'm not too sure of the issue you are talking about. The great thing about Linux tho is that there is a massive community out there helping each other out. So, if you're having an issue with common programs, someone else has probably already fixed the issue or knows what's up. For instance just doing a quick google on the font issue brings up a load of results from Superuser, stack overflow and some other forum sites. 
$20
Monitoring is part of fault tolerance. :) But yes, overkill to add all of it for this kind of application.
You could try using Splunk, it basically tails logs and gathers events. It then has a web UI for viewing the logs and events and can setup alerts for you. 
Here are a few tools I've used in the recent past. There are log indexers and metric frameworks. Both I think are key. It sounds like you're most interested in log indexing, but I'll mention some monitoring tools anyway. Normally I use AWS Cloudwatch in conjunction with a log indexer and a monitoring framework to handle overall system health. - Logstash: you'd run a process on the machine running the fat jar that ships the log files to a Logstash server and indexes them. You'd then be able to access them remotely. You can add tools like Elasticsearch to help index log data, and Kibana to visually digest them (web UI). Likely you'd run your own ELK servers somewhere. - Graphite: monitoring library you'd integrate into your app to send metrics to a Graphite server. Likely, you'd have your own server. Has a web UI to monitor graphs, etc. For tracking how data moves through your system (how many users logged in, how many downloads, etc). - Librato: like Graphite, but 3rd party. You'd integrate metrics into your application that send data up to their servers. They provide an awesome UI to track stuff. - Loggly: similar to Logstash+Elasticsearch+Kibana, but 3rd party. They have a great UI too. Edit: regarding phone notifications - all of these have notification tools built in so if something is awry, you have it dispatch an email or something to another service like Pagerduty.
&gt; Number of posts: 1598 I'm not surprised :)
any recommendations for alternatives?
I considered Slackware too, but since I am more familiar with Gentoo and portage ended up going with it. 
Archlinux / Eclipse Neon / Spring Boot
Great concept 
I have downloaded and put on gett - http://ge.tt/8XlGI5i2
Right, monitoring those faults is part of fault tolerance but implementing hystrix does not answer OP's problem for log indexing and metric monitoring. Maybe I don't understand? I suppose you could wrap everything in a hystrix command and report on that, but that's a misuse of the framework.
Even open source projects have owners. In the case of Hudson, that's Oracle, who've acquired it when they bought SUN. It was just good luck that the open source license was liberal enough to allow for an independent fork.
Seeing as how the last commit was in [May](https://github.com/eclipse?q=hudson) and the changes prior to that were all tiny, I suspect that no, they're not actually maintaining it any longer.
Sun didn't really own Hudson. Kawaguchi started the project while at Sun, but the developers never assigned their copyright to Sun. Most of the codes copyright was owned by individual developers. Sun didn't even own the trademark. So it's hard to see how Sun or Oracle "owned" the project. Oracle was the one that filed for the trademark in late 2010, once they had that tried to use it as a cudgel to block the communities migration to github. At that point they just figured it was easier to break ties with Oracle and move on. 
Definitely understand you here. I can't count how many times I've seen (or been a part of) a slow transition [e.g. Only new projects on the new whatever, then plan to go back and bring up other projects]. In many cases we never were allotted the time to go back to get the "legacy" stuff moved over... and ended up maintaining two build servers (or code based, or classes, or style standards, etc) Sometimes it's better to stick with what works, regardless of possibly missing out on some features. The cases where the previous paragraph succeeded had someone in management (or a referential manager type) really championing the move with a clear cutoff date.
Thank you!
I use something similar to this but without the gui, instead it emails us when a log is warn/error. I think it's the same project but just used differently. https://codebox.net/pages/logmonitor
&gt; In computer science, a data structure is a particular way of organizing data in a computer so that it can be used efficiently. https://en.wikipedia.org/wiki/Data_structure imagine a list of students. In an abstract sense a list will always be the same: sorted/ordered with allowed duplicates which is basically the same as a finite sequence in math. But it depends how memory and cpu efficient your data structure is by different implementations to map the real world into a computer representation. For example a linked list (a list where each entry knows its pre- and post entry) can easily fit in new entries in your memory, whereas a array list (a list using an array implementation) requires you to allocate a whole chunk of your memory even though its access is faster. At your question of taking the course: we generally teach both at once. if **Intro to CS** is just about you learning Java, then I would also take Data Structures. It is a university and you are supposed to learn more theoretical stuff afair. In University you should learn to program and not learn a specific language. Data Structures will always apply but not every language will behave like Java does. 
Yeah but I'm taking both Data Structures and a 400 level class called "object oriented programming" which the descriptions says it's like more proficient towards classes, extreme api's, etc. So I don't know if not knowing Data Structures will hinder me in OOP.
Oh God, you've picked the worst possible resource to learn Java. This channel is generally a [discouraged resource](https://www.reddit.com/r/learnprogramming/wiki/index#wiki_discouraged_resources) as it does not adhere to common coding standards and teaches questionable practice. The best way would be to do the MOOC [**Object Oriented Programming with Java**](https://mooc.fi/english.html) from the University of Helsinki. It has graded exercises that you need to complete before moving on. Also, questions like these should be better asked in **/r/learnjava** or in **/r/javahelp**.
Thank you a lot for the golden resource and your insightful answer. 
You're welcome! The MOOC is generally one of the highest regarded and most often recommended courses. It could be that it is offline/limited until new year because quite often the University of Helsinki does upgrades to the course during the Christmas Holidays up to New Year.
Yeah, thank you!
yeah, if you have a single class who's source is 1.5GB you have other more pressing problems than the JDK crashing....
[removed]
Yes, of course. The point is that I am experimenting with performance, optimizations and redundant code, so the size doesn't really matter in this case. I am more interested in the behavior of the compiler and JVM.
Sounds like something is fundamentally broken then, since that package should be in the xenial main archive, this is what I get: $ apt-cache policy openjdk-8-jre openjdk-8-jre: Installed: 8u111-b14-2ubuntu0.16.04.2 Candidate: 8u111-b14-2ubuntu0.16.04.2 Version table: *** 8u111-b14-2ubuntu0.16.04.2 500 500 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 Packages 500 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages 100 /var/lib/dpkg/status 8u77-b03-3ubuntu3 500 500 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages Unfortunately I don't know enough to help you further, sorry... Try taking this to stack overflow or /r/javahelp
huh, I had no idea.
Thanks for the feedback. It is probably a bug because the compiler should print a readable error message instead of throwing an exception. The bug report is still under revision, so I don't have a link at this point. I will post a link once it is available.
Maybe I'm using it wrong, but visualVM is painfully slow compared to YourKit. I've also used the free trail for YourKit several times using the same email. We use it at work though, and I think if its used enough it justifies spending the money. 
Consider reducing the number of loop iterations to identify the smallest source file that still crashes compiler. Oracle might take you more seriously if bug occurs with more reasonable code. You could do a sort of binary search...
I bought it last year on their end of year sale... used it three times over the last year, I'll probably use it another 3 times this year. Well worth the discounted price. Any more and I'd have to justify a company paying for it.
I don't think "extra large" can really adequately describe the mammoth that is the NetBeans repo.
What is the normal price?
Later in the link it is mentioned that this $99 is a 40% discount, so I assume $165?
I think you're looking for a Bash (or whatever) interpreter written in Java. Searching `Java Bash interpreter` gave me this: https://github.com/crashub/bash It seems like it's not quite finished, but maybe you can fill in the parts that are missing, since the grammar seems pretty comprehensive.
Well, lo and behold! Bingo! Ding ding ding ding. That was exactly what I was looking for. Someone else had suggested Crashub, but the website just made it look as if it was meant for accessing/controlling some other Java service. It looks like these folks just made said "other" service be a bash command interpreter. Why didn't I think of that? Now, what I would want to do is layer my additional functionality on top of that Crashub window. Thank you so much.
&gt; I can't remember the previous price If only there was a thing like the [way back machine](http://web.archive.org/web/*/https://yourkit.com/purchase)
Why go through all those whoops to crash the compiler? Just compile this on any Java 5+ compiler: interface Type&lt;T&gt; {} class C implements Type&lt;Type&lt;? super C&gt;&gt; {} class D&lt;P&gt; implements Type&lt;Type&lt;? super D&lt;D&lt;P&gt;&gt;&gt;&gt; {} class Test { Type&lt;? super C&gt; c = new C(); Type&lt;? super D&lt;Byte&gt;&gt; d = new D&lt;Byte&gt;(); }
I remember trying YourKit because I needed something that was missing from visualVM. I think it was monitoring separate thread memory usage. But to be honest, I don't know how to properly use any of them. One advantage of visualVM is that it is open source.
You can activate it on 3 devices. If you need to 'deactivate' (after reinstall), you need to contact their support. After deactivation, you can activate on another device. Personally, I use it on two machines without any problems.
There's plenty of Hibernate, from which JPA was copied. No non-Spring CDI, no JAX-RS, JSF has been long replaced in new projects by the combination of microservices and modern frontend architectures. 
Sorry, I should of posted an update here, I posted this on /r/javahelp and they managed to help me and I got it installed. :)
The bug is now confirmed, see: http://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8172106
Do you not use the floating license server?
Just make sure you don't email yourself to death... Straight Log4j mail appender is good for scheduled reporting, but to trigger an email every time something goes wrong is literally asking for trouble. You'll usually want a central service to aggregate similar faults and manage associated alerts so you don't get spammed. This way you can also reconfigure / reroute notifications in one place. 
Don't use java.util.Date and related classes at all anymore: https://bugs.openjdk.java.net/browse/JDK-8164898 http://openjdk.java.net/jeps/277.
&gt; If someone asks you’re birthday, 
Hey, this is really cool! I've been working on an in-house, soon to be open-sourced, Java metrics library that works the same way (local collection of metrics). My goal is to let an app publish to multiple custom channels (log, JMX, statsd...) from the same set of timers and counters. I'll see if I can also integrate into netdata infrastructure.
I've used gigster before and they're all right, but seem to be having issues matching capacity to their networks size and they tend to be biased towards newer technology. I'd reply to some emails recruiters are sending you saying you're looking for some side contracting work, and your rate is X, and you'll pay them 25℅ of that rate for the first n months of work if they connect you with someone.
I use personal license, don't know about /u/Jire
Sorry, not agree with you. Just not. Have a good day! 😁
I'm currently uninterested in using Java.time over Joda dates. Unfortunately, it's all or nothing while joda lets me manipulate Java.util dates when I'm going back and forth to the database. Until they introduce a way to convert it's pretty much impossible to convert an established code base over,
You could try ssh + vim with loads of plugins. There is also http://www.eclipse.org/che/ but I haven't tried that one.
Meanwhile crickets at JetBrains. I decided to look into the tooling for git IntelliJ provides, as I was looking for a better way (speak with graphical support) to split my changes into several commits and discovered that the tooling not even knows of the staging area. There is only commit, basically they didn't change the tooling for git, it is cvs/svn workflow for git. The ticket to support the staging area with their tooling for git is open since 2010: https://youtrack.jetbrains.com/issue/IDEA-63391 Came here to complain about it and see the awesome features EGit has implemented ;( I was an Eclipse User for the majority of my programming career and converted a year ago, and there are many things I miss from Eclipse, but I know that I will miss many things when I switch back. "Why can't I have both???!"
&gt;Unfortunately, it's all or nothing while joda lets me manipulate Java.util dates when I'm going back and forth to the database. What do you mean? I'm storing java.time classes in database through Eclipselink without problem, I just defined few converters. There's no java.util.Date or java.sql.* in the codebase except for those few converters and few other legacy API endpoints.
People are pretty hype about java 8 time in my circles at least
Hibernate has support for Java8 Time API without any converters
http://venturebeat.com/2016/11/18/aws-adds-web-access-to-its-workspaces-virtual-desktop-tool/ https://www.youtube.com/watch?v=3uZahg-i7DM https://www.eclipse.org/che/getting-started/cloud/ https://codenvy.com/ https://chrome.google.com/webstore/detail/vim/dhhoacdlegcbdglbfnhgnlchpkdlofkb 
Hudson was started as a hobby project on Kawaguchi's own time. Later once it started gaining steam Sun started paying him to work on it. They had a stake in the project for sure, but they didn't own the project out right. There are plenty of other developers who didn't work at Sun who contributed and never assigned their copyright.
While it may have started as a hobby project on his own time, we are not privy to the terms agreed upon when his employer (Sun) started paying him to work on it. Regardless, I like the name Jenkins better.
He was employed in California which prohibits by law employment contracts that assign ownership of intellectual property for work done the employees own time. Kawaguchi has also written about this on his blog, he never assigned the copyright for that work. Additionally there have been scores of outside developers who have contributed code and have not assigned their copyright.
Cloud9 is nice
Use checkstyle? You can have it run in your gradle/maven build so that code violating the style you decided upon doesn't get built. There are also plugins for all 3 major IDE's. 
&gt; ntil they introduce a way to convert it's pretty much impossible to convert an established code base over, You can convert dates from and to Instants just fine?
Pythons HAS to have conventions like PEP8, java not really. Other than curly braces (after parentheses or new line), camel case, constant naming variable , that's probably all needed.
In my team we use Sonar cube https://www.sonarqube.org/ we really like it. It suggests edits to your code depending on various Java standards. There's is a plugin for intellij which does quality check on dev machine. You can also have a dedicated server and do all sorts of useful things like automatic comments on PRs determine tech debts, code smells, bugs etc etc.. Highly recommend it!!!
I would say the most common would be [Google Code Style](https://google.github.io/styleguide/javaguide.html), all this is consistent with all Java conventions. That being said, the most important thing is **consistency**. Find out what your team are used to and confortable with.
If you work in a team, code style conventions are useful in *any* language. Even little things like indentation or placement of the curly braces can become important. If you have several people working on one code-base and everyone writes classes/methods in his/her own style it will end up looking like a huge mess.
Hit the IntelliJ styling hotkey and call it a day if you ask me. If you're going from Python to Java most of the conventions are either common sense or a part of the syntax 
It's a chromebook. The whole thing is "only going to work if you have a network connection" :)
sorry given the context that shouldn't apply to code that doesn't meet the only one person who should merge approval. If the coders themselves ever merge to my project and don't submit a PR or work in their own branch (it's happened 3 times in my life) they look for a new job. It's like shaking a baby as far as I'm concerned. If you wrote the code you cannot be in charge of merging it unless you work on your own, in which case you shouldn't come into problems with coding standards. If you write code for a project with 2 or more people, you should submit a PR and one person should be in charge of what is merged (interesting side-note it's not always me which is fun if my PR gets rejected).
Use a git hook
Whatever style you decide on set that guide in the IDE and configure to autoformat or don't waste your time. If someone is writing unreadable code take it up in review. 
You can use pmd and checkstyle. I would also advice to create this standard with your team and not only 'make them obey'. Code review/pull request is also a good way to talk about it and to verify.
1. Get the checkstyle xml file: http://checkstyle.sourceforge.net/style_configs.html 2. Import it in your favorite IDE / or use the proposed choices: doc for Idea: https://www.jetbrains.com/help/idea/2016.2/code-style-java.html 3. Bonus, setup a Continuous Integration system with Jenkins &amp; Sonar: https://www.sonarqube.org/ https://github.com/checkstyle/sonar-checkstyle/releases https://blog.codecentric.de/en/2015/10/continuous-integration-platform-using-docker-container-jenkins-sonarqube-nexus-gitlab/
Yep. It's not 2005 anymore, there's really no reason to make this more complicated than it needs to be.
Crouton and a full JDK+IntelliJ installation. Not technically a dual boot.
&gt; Find out what your team are used to and confortable with. Usually there is two opinions per developer. Good luck determine one that fits all.
Then there is the Eclipse users and suddenly you have an IDE war on your hands.
I've browsed them a bit, but was looking for "the best" recommendation. Will check those out.
I never thought about using a recruiter for contract work (only employment). I think I'll give that a go!
&gt; sorry given the context that shouldn't apply to code that doesn't meet the only one person who should merge approval. So view in context &gt; If the coders themselves ever merge to my project and don't submit a PR or work in their own branch (it's happened 3 times in my life) they look for a new job. It's like shaking a baby as far as I'm concerned. Not a big reader are you... * Only the person responsible for merging into a project can merge. * All anyone else can do is request to merge * Anyone else merging is telling the team that **we will do things their way**. * Anyone telling their team, not asking appointed person permission are the ones with the problem * Not doing this harms every single coder on the team. * I'm not the only person that thinks this way. * I think you are confusing nice fuzzy-wuzzy sentences you've heard As for this... &gt; and you are ignorant of basic software engineering principals. Really? Okay maybe, I'll bite... Highlight to me oh oracle of the principles I am missing. &gt; You sound delightful to work with. Thanks, you don't! You don't seem like a nice person at all, you were not who I was responding to; you've been rude, bombastic, overly assured and vague. I can't think of a single task in the world that would benefit that collection of traits. I simply said one person should be responsible per repo for merging and that would enforce coding standards because that person could enforce those standards for that repo they were responsible for. I've simply stated that my code is not a place for anyone to "play", express themselves or do anything but solve a problem. Most of my work is still done in private repo's; for businesses. Most of my customers are pre-million when we start working together and I have the past 5 years of experience pushing many of them beyond that or telling them they are not worth my time because like you they don't listen. I'm aware some people have different approaches, and I am willing to learn if they make sense, if they are measured and can evidence success. I will not accept blindly poorly thought out ideas; Ideas from people that would introduce problems I don't have. How I avoid merge conflicts is by advocating and making chunks of code as small as possible; accepting merge conflicts might happen, but we won't sacrifice ourselves on the altar of bad decisions just to merge. This makes PR's smaller, this makes reviews easier and merges trivial to approve and people can do what they like in their own fork, their own branch. Pretty simple really.
1. Use a default. Keep modifications minimal. 2. Assume authority before hand. Lots of codestyle issues lead to endless debate. Avoid the debate by asking the team to be the authority on this and then use a default. Stick to that default. 3. Do avoid wildcard imports. 4. Put your formatting rules in a repository. That way people can import the settings into their ide quickly rather then having to manually configure it over and over again.
Either Google or Sun style is a good starting point. Use checkstyle to verify the commits, here you can find configurations for the above mentioned styles https://github.com/checkstyle/checkstyle/tree/master/src/main/resources
Yeah, but they aren't generally centered around a poorly written, obfuscated core. It's a nightmare landscape for exactly that reason.
only spaces you damn heretic
Thank you, I keep hearing about SOLID, but nobody ever writes articles about it.
Great one! Have you thought about adding Querydsl JDBC to the comparison? Although maybe not as expressive as jOOQ, it's sort of playing in the same area… http://www.querydsl.com/static/querydsl/latest/reference/html_single/#sql_integration
Thanks :)... Actually, QueryDSL implementation is one of the opened Issues (https://github.com/bwajtr/java-persistence-frameworks-comparison/issues/8) - so I know about it, but I already spent lots of time with this comparison and since QueryDSL is so similar to jOOQ I decided not to do it for now... but I'm open to pull requests :)
Link to walk through or setup?
&gt; https://www.maketecheasier.com/run-linux-in-window-chromebook/ https://www.reddit.com/r/java/comments/5kz7x6/best_cloud_ide_or_way_to_code_on_chrome_book/dbs2ww7/
arf!
@bwajr You should have a look at modelmapper.org. It can help you with the mapping to objects with nested objects, so you don't have to have flat objects. It is also very easy to extend.
&gt; Is it common to consider JPA "bad" like OP? It seems to be the "hip" thing right now from what I've been seeing.
&gt; any advice? You are on the right track, use the most popular convention you can find (official or Google) and use autoformatters. **Do not customize / modify it** that is poison to a standard. Everyone is going to hate parts of it, that should include you. As soon as you touch it one bit, it can't take flight, it is no longer a 3rd parties, it is just random things you like. A good proverb from the Go community is *"Gofmt's style is no one's favorite, yet gofmt is everyone's favorite."* **Use autoformatters** almost all IDEs and text editors have support for either continuous or on-save autoformatters, be fairly insistent your team uses them. Confirm with commit checks. Another benefit of not screwing with the standards is this is easy to setup without tweaking, built into most tools you might use. 
I agree. It's the closest thing to magic. You can make your streams lazy, filter them however you want and be comfortable because there are Optionals in scope, and when a clever condition is met -- POOF! And like that's not enough, there's memoization...
I've found Hibernate falls into the "easy to use but hard to master" category and while everything seems rosy when you have it set up nicely, not fully understanding the framework can have nasty implications. The bugs or refactors I've done that took far longer than they should have were all Hibernate-related. That said, I'm fairly junior in my career and may have run into just as many problems not using ORM. However, I know many projects that use Hibernate by default, regardless of whether they actually need ORM and I think it is a mistake to add the complexity of a tool without actually needing it in the first place. 
spam, nothing to do with java. solve your homework elsewhere
Another big plus to using the google style guide as a baseline is that they have a matching checkstyle config file that you can grab as a start. Potentially saving quite a bit of time. Once that is all setup run a checkstyle check on each PR with whatever CI system suites you.
I play a lot of survival games, none come close to the features and capabilities of Java Minecraft. The Microsoft version is lagging far behind.
&gt; I've found Hibernate falls into the "easy to use but hard to master" category Amen. It's like Maven, when it works, it's great. When you need to change/fix/update/extend it, get the java out, you'll need a lot of caffeine. 
Or use Eclipse if you can and avoid IntelliJ weirdness.
Not technically true, as many apps do have offline support.
Yes, PE should be dropped. 😊
I attended a Java bootcamp program, and have gleaned just enough knowledge to figure out that if I'm going to continue in software, I'm going to need to learn more. One thing that I never quite understood was how or why to split up classes. I can't tell you how awesome this article is. A whole bunch of concepts just finally clicked for me. Thank you!
Out of curiousity what intellij weirdness? I've been using it for almost two years now and i like it quite a bit
I haven't tried it yet, but this library solves one of my major pet peeves with JDBI and Spring JDBC, which is retrieving entities with nested sub-entities in a single query. I'm very excited to try it out.
C is very hard. Java is fun! It's a much more modern programming language. 
do yourself a favor and buy "Clean Code: A Handbook of Agile Software Craftsmanship", or buy Uncle Bobs videos. SOLID is part of them.
Although you can do things like "Write all your code in a single file" and write the implementation without coding to an interface and a million other shortcuts to pump stuff out because **you** "understand how it should look in the end", I've lived by the motto of "Practice like you play" Someone may come along and try to replicate your patterns when they are still only half baked in your mind and on paper. I think it is a misstep on the road to programming professionalism. An amateur will practice until they can do it correctly, a professional will practice until they cannot do it incorrectly. 
Yup. This is the problem with almost all introductory texts. They rarely discuss drawbacks and tradeoffs and almost never discuss the challenges of implementing what they advocate on large programs (&gt; 1 million LOC). It's my single greatest grievance with most of the talks at conferences and the corresponding blog posts. When you finally get someone who has applied the principle or technique in this way, you have really useful information. Even then, the ultimate lesson is think and use your judgment. 
For years programming was a drag for me too, and frankly, it pissed me off. I didn't see the purpose in it, and lost interest. The only thing that piqued my interest was a little language called Ruby. And eventually, that led to an interest in other fields as well. All hope is not lost, and actually, you're just getting started. OP, you'll be fine. C (in my opinion) can be a serious pain in the butt to deal with at times. Unless you're dealing with some very low level/ OS based tasks or are truly interested in that field. You won't be working with it too much necessarily right now. Some pretty foundational OOP Fundamentals can be hard to translate to C, and those fundamentals are imperative. There's a good reason as to why a lot of Intro level courses start with java/ python. Because honestly (in my opinion) it's easier to visualize things. However, As someone who just picked up a position as java developer/ advanced software engineering position. the one thing I can tell you, that will definitely be fundamental to your success, is to find what you love. Take some time starting now to just explore what you enjoy about technology. Whatever the hell it is, start experimenting now, with anything honestly. A big part of programming is taking time to research the fields you don't know. Little steps yield big rewards. I would recommend Big Java Early Objects for reference. Codeacademy a good place to start, Start at stack overflow when stuck. a lot of colleges/ university's have a search for their library and have a lot of free online books on various topics. For me it was really helpful for code examples early on when I was still trying to learn. You WILL get into things like GUI's, Threads, Inner Classes, Client/Servers + Sockets, XML, Data Structures (Bags, Queues, Stacks, private data structures), Searching/Sorting etc. These are all important topics to at least have some strong familiarity/ general knowledge of. But before this, Take some time to pick up VCS Software (Git), Java coding standards, and How to work with VM's. You can use VMWare Workstation/ VirtualBox (which is free). VM's are very VERY helpful to know in the future, and you will be using them a lot in the IT Field, regardless of where you end up. I know you mentioned Network Security as well. Maybe some day work towards getting your CCENT/CCNA/Security+/CEH. But not today, anywhere in the immediate future but keep it in mind. It's really a lot to take in, but nowhere near impossible. Regardless, I would recommend taking the java course and seeing where things take you. But the most important things to take away from my rambling above is to 1.) Take a breather, relax and spend some time figuring out/ familiarizing yourself with things that genuinely interest you 2.) understand that programming is an active learning process. We all sucked balls at it at first, it's a different way of thinking about things that most learning systems do a poor job of teaching. But practice, practice and more PRACTICE is important. It takes a significant amount of time sometimes to pick up certain concepts. (10-20 hrs sometimes to really get it down solid). 3.) You're not alone. Keep you're head up, work hard, and keep your nose to the grindstone. I was miserable at it at first. But now I'm at an esteemed position with a great company, and couldn't be happier. 
Java is much better since it does not deal with memory management like C such as pointers, addresses and multiple inheritance all those are managed implicitly by java 
Or you're a student and have to work with DB2 for a class, but don't get a jOOQ license (been there, done that).
As mentioned above, Google code style is a great starting point. Maven Checkstyle plugin, and your IDEs Checkstyle.xml Plugin.
Someone needs to write the Jigsaw guide for OSGi developers. I would imagine there are some similarities between the two systems. I'm very fluent in OSGi, but have really put off learning what is coming with Jigsaw and I'm starting to feel like it's going to hit me in the face soon. 
`JOIN FETCH` or use `.fetch` in Criteria API
Let me guess you must be the Chief of Public Relations preparing your next blog post?
From my almost non-existant experinces with C, most of my time was spend learning the syntax and quirks, where with Java, 99% of my learning time was spent reading documentation for all the bat-shit insane API's I have to use. Java, without a massive buildpath, is much easier than C. From my experience.
I agree, Lukas, but it's an unfortunate reality in many projects... :( Believe me that it's not easy to persuade project managers, that developer man-hour is the most expensive asset they are managing and that spending few (relatively speaking) bucks on some tool now can save lots of dollars on saved work-time ... hmm... or maybe I just had bad luck on project managers in the past :)
This is exactly my experience from work, it's easier for all the simple things, but as soon as you have new requirements in the project that require that you tweak or refactor, then it can become extremly complex, and also very hard to verify that the JPA model is correct. We are about 15 developers in our team, and ca 30% of the codebase is JPA, and we have had some nasty bugs in that, for example one common failure scenario for JPA is that it degrades into doing multiple selects in a loop, and that goes quick enough in development mode, but when it's deployed into a production envirorment it blows up. 
xs:dateTime only supports UTC-offset, not region-based time zones [1], so it maps more accurately to OffsetDateTime. JDBC also supports only OffsetDateTime, not ZonedDateTime [2]. [1] https://www.w3.org/TR/xmlschema11-2/#dateTime [2] [JDBC 4.2 Specification](http://download.oracle.com/otn-pub/jcp/jdbc-4_2-mrel2-eval-spec/jdbc4.2-fr-spec.pdf), p195, table B-4
I would rather change jobs than go back to Eclipse
Seems so simple! Must be that my issue was trying to use spring data jpa repository convention based approach instead of just writing out the JPQL. 
I thank you from the bottom of my heart. Your reply has lifted my mood so much! I will take your advice and try the course out and see if its manageable. With all of societies pressure, sometimes its hard to remember that you just have to take life at your own pace. I'm only 19 and still figuring out what I like and don't like. Thankfully I have really loving and supportive parents that pretty much told me the same thing you did, in terms of life advice. So there's not much pressure from that end. Its just me getting anxious lol. If you don't mind, after the course, i'll message you and give you and update. 
I've been fighting with JPA with GeographyCollections in PostGIS, and providing RESTful endpoints. Non trivial things can really be a pain. 
yes, you can
\&gt; memory management ... C \&gt; multiple inheritance
Yes, exactly. If you decouple your service layer from your data layer you may find that one or the other may give you better performance in certain circumstances. In some instances it might be quicker and easier for you to write a SQL expression and directly map it to an object rather than try to figure out all the JPA annotations to get your entities mapped properly.
hmm, I already have a separate service layer and data layer, so I guess I can already start making comparisons.
I don't know if it's still the case but mybatis is pretty closed. You can't just use the part that interest you. I for example like my query inline. Also there was no way to get the result set and use other mappers. Might have change.
[FizzBuzzEnterpriseEdition](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition) is pretty SOLID example...
"I didn't think it was possible, but Single Responsibility Principle appears to be producing even more bullshit code than Law of Demeter." -[DHH](https://twitter.com/dhh/status/216238003817938944)
&gt; Is it common to consider JPA "bad" like OP? I think since there has been a shift to stateless REST API's the last X years the JPA model really doesn't work all that well anymore. You often have a per 'view' (REST endpoint) data view instead of having a single monolithic data model. More often than not I don't want to get every single column in an entity. Often I just want a few columns from a few tables joined together. So this is basically just a single SQL join which results in a result set that then needs to be mapped to a DTO. In my experience something more basic like Spring's JDBCTemplate or JOOQ fits this way of working much better than JPA. I'm simply more productive that way even though I've used JPA a ton. 
This is a good read : https://www.toptal.com/java/how-hibernate-ruined-my-career
There is no need to use Jigsaw if you are using OSGi. OSGi is far far better and complete. The only useable thing about Jigsaw is the JDK modularity.
I'm working with a large-ish Swiss bank (4M customers, 1B transactions / year, ~600 tables, thousands of views and stored procedures) that puts the Oracle database at the center of their product, and even uses it as a centralised message queue (Oracle AQ) for all sorts of client systems written in Java, JavaScript, Perl, Bash, and PL/SQL. The traditional RDBMS centric approach works really well, because that monster can scale vertically really easily even for concurrent end-of-year batch jobs and login peaks. Oh, and JPA would be a rather poor fit.
Elegance != efficiency. Elegance is not good enough. 
Ruby just facilitates using brew, which is the Mac equivalent of apt-get. I'd suggest anyone doing any development on a Mac regardless of the language installs brew.
Ruby is already installed. OP suggested to install `homebrew` , which IMHO is a good idea since it's a somewhat good package manager for OSX and a prerequisite for the rest of the guide.
Yeah, sure. However, IIRC, brew doesn't yet support JDK 9. I've got so used to JShell that using JDK 8 seems like a real PITA.
Any reason why homebrew should be preferred over mac ports?
i mean, you could have googled this. https://msdn.microsoft.com/en-us/library/aa266196(v=vs.60).aspx it looks like jview is part of visual studio, so you might want to consult MS's documentation on this.
&gt; I mean, you could have Googled this There's an entire industry built because end users do not head this phrase.
You going to at on to this?
I *know* both Streams and Lambdas show how you can do more in less code, offering an elegant way to manage redundancy. Don't think *you do*, however. All I can do right now is to wish you reconcile your imperative way of thinking with the functional one, and in the new year.
Going to extremes is always unwise. In the end, whatever design principles you end up following, you mostly just shuffle around complexity. With SOLID, the complexity gets shoved into assembly and the code itself ends up being rather simple. With Get-It-Done, YAGNI and the ilk, the complexity ends up in the code itself. In the short term, YAGNI yields much easier to follow projects. In the long term, I am not so sure. I've seen a code base that has been in active development for 10 years. That code had evidently taken YAGNI to its extremes. I saw patterns of code repeating itself multiple times in a row. I saw same operation being applied with same arguments to exactly the same data multiple times in a single code flow. I saw methods of 3kloc and more. It wasn't pretty and it sure as hell was not easy to find proper place to modify when you needed to fix a bug or add functionality. In short, it was quite opposite of easy to maintain. 
@nutrecht thank you for valuable comments.
Although I did not make it explicit I think it's pretty obvious what my feedback is; I really don't want to use Spring XML configuration anymore. In fact I don't know a single Java dev who prefers it over annotation based configuration. 
Java is very easy to pickup and learn. I came from vb.net (lol) which isn't hard at all and it was a huge step up and I liked the challenge. C is very hard and I aswell have a hard time understanding it, but java is very fun.
There's a cask for the JDK9 betas. https://github.com/caskroom/homebrew-versions/blob/master/Casks/java9-beta.rb
I don't think that Java designers are thinking in terms of compile time null checks as of now because it isn't a part of Java 9 specs(Java 9 is the next Java version due in July 2017). Also, since Optional has been introduced in Java 8 the designers have already taken a different approach to handling null pointer exceptions. An optional value prevents the notorious null pointer checks with its capability to hold both null and non-null values for the same variable.
Optional is a class and it doesn't help enforce Method Contract Specifications like a language construct does.
That site needs to kill the blinking text in the top corner. .blink_me_ebook { font-weight: 600; color: #00e5e6; animation: blinker_ebook steps(1) 3s infinite; } edit: And tutorial contains about as much info as the Javadoc for predicate and doesn't add much to the existing documentation about functional programming already published by Oracle.
 &gt;In the world we live in where people will step into a codebase and copy-paste until they know what they are doing... Code review and a willingness to fire people who are incompetent solves this. &gt;The fact it is hard for you to navigate is a lack of understanding the system. It's really not. It takes time to read code that jumps between files and more importantly where you have to look elsewhere to discover which implementations the many interfaces interfaces are using in this particular execution. &gt; *Nix command line and file structures, vim, as well as many other "hard to use tools" have a significant amount of logic behind why they are the way they are, which I would argue has been a reason they have withstood the tests of time. Now you're just going off on a rant that's not even relevant to the conversation. &gt;Overloading your classes with unneeded functionality, no matter how fast it makes you, is not recommended. It equates to the argument of "I only eat dessert because it tastes my favorite." Getting stuff done quickly and correctly is the purpose of our jobs. You're the one who's arguing for what feels good even if it is slower. 
/r/androiddev will probably have more help for you
I agree with the flashing being (a little)annoying... Feedback taken! Will improve on it. Regarding the second point - I read the Javadoc for writing this tutorial. So what you are saying is correct to some extent! However, not everyone can code by reading a javadoc. And this tutorial has been written keeping in mind people across experience and skill levels who want to learn the basics of Predicate interface. It is a good/decent starting point for someone new to Predicate as it offers code examples showing usage of each important method in the interface.
The real problem with everything you said is that Java runs on a virtual machine, so everything that they program for it is optimized specifically for the Java runtime. I agree, there are a lot of things that remove newcomers from the necessity of knowing how to debug and makes programming a lot simpler, but that's the point of a programming language. Programming languages are meant to evolve. This isn't a language like C or C++. Java manages it's own memory through a garbage collector. You don't have to do anything but avoid creating too many objects too quickly. Lastly, just because I like Predicates, does NOT mean that I am an inexperienced programmer. This is a level of elegance that does not sacrifice performance, and if it did, I would seriously take into consideration the fact that it does. I have a problem when it comes to memory management, I am too compulsive about it to the point where I change entire classes to fix it....
Two spaces is fine, but indentation renders as one space here (Chrome, desktop). 
Forget the idiotic Kotlin syntax. The good thing in Kotlin is that there are 2 types of String. String that can be Null. and String that are proved to be not null. that is a better quality String! You should have the same thing in Java. &gt; if(string != null) { &gt;//compiler promotes string to not null string type &gt;//do stuff with non null string types. i.e. call method requires non null string types. &gt;} Kotlin compiler promotes reference to null safe types. This language construct is VERY GOOD for better expressing method contracts.
For all intents and purposes, `String` is a subclass of `String?`. You get the same smart cast if you check if an object is an instance of a certain subclass too. It's a very elegant way to deal with nullability. 
check out the project optaplanner, it's a constraint solver library.
Writing Kotlin programs is faster than Java, then I can spent more time to study. Seriously, your comment doesn't help me to understand why C# code style is wrong. But, you prefer: try C# ;)
[relevant xkcd](https://xkcd.com/927/)
Anyone else who is interested in coding and do some coding but still get very sleepy as soon as you start reading a book about it? I really want to get the knowledge but i just find when i read i start to yawn and lose focus. I have no trouble reading novels and such things.
I wonder sometimes if that GOF patterns book does more harm than good. The good is that we have a common terminology to describe some different ways of solving problems with code. The bad is that young developers get the idea that the more patterns you use the better your code is.
In addition to /u/nutrecht, I know it's just an example, but it feels a little weird to be declaring value objects in your Spring context. 
Add NonNull annotations /s void foo(@org.eclipse.jdt.annotation.NonNull @org.netbeans.api.annotations.common.NonNull @org.jetbrains.annotations.NonNull @edu.umd.cs.findbugs.annotations.NonNull @javax.annotation.Nonnull @lombok.NonNull @com.android.common.annotations.NonNull @javax.validation.constraints.NotNull String bar) { java.util.Objects.requireNonNull(bar);
The markup plugin is not working on chrome. Black and white text only.
I dont have a list in my head but there are half a dozen codestyle defaults that differ between eclipse and idea. Additionally idea has some non stamdard comments to fold code and supress warnings. Im using idea in a mostly eclipse environment.
Yes. A language construct which allows defining null safe types is definitely good for method contract definition.
Same here. That was one of the reasons I decided to work on this aggregated list. I thought maybe I'm just trying the wrong books.
Thanks, but no thanks.
I just vomited in my mouth.
I'm guessing here (author really should have explained the use case better). When you use a tool like dukescript, TeaVM, GWT etc. you might want to use the JavaScript libraries that go with it. But since there are many of those it's hard to map all of them back to Java... So why not use TypeScript mapping to allow Java developers to write/compile Java code into JavaScript and use the standard JavaScript API. This makes sense if you use Java to write JavaScript libraries... This might actually be quite cool. In the past I used GWT a lot and stopped because it was hard to keep up with the "framework of the week" situation in JavaScript. This might allow tools like TeaVM (which IMHO beats GWT) to keep up with that pace. The advantage over JavaScript is when you use Java on the server or other tiers you can reuse more code (like you could with GWT RPC). (Disclaimer: I'm guessing this is the logic, it's really unclear from the site).
+1 for Dash. Great tool even when using Intellij as well. 
The point is that usually you transpile from a good language to JavaScript, not the other way around.
JavaScript is excellent.
This should come with caution tape wrapped around it. While /u/vprise comes up with a good use, and I would hate to discourage anybody from working on something they enjoy, this should really only be used if you want to take some crappy node.js codebase and start turning it into a better platform because it's no longer intended to be a maintenance nightmare.
If you read my point that's exactly it... For transpiling to be more effective you need it to be a 2 way street.
sure, FYI you meant /u/vprise ;-)
Wrong direction. Turn around now. 
Is it just me or does the example for the Open Closed Principle violate the Single Responsibility Principle? As a side note, in Java `equals` intentionally break the Liskov Substitution Principle due to the general contract for the `hashcode` method.
The current plan is, as far as I know, in Java 10 when value types should be released: * [Optional should become a value type](https://youtu.be/Ej0sss6cq14?t=46m41s) * [value types shouldn't be nullable](https://youtu.be/oGll155-vuQ?t=38m52s) At that time, Optional should make a lot more sense. EDIT: Added source links to each of the statements.
JavaScript is like a horse without reins.
wouldn't this prevent a lot of people from upgrading to Java 10 ? that necessitates a significant rewrite of every project you want to migrate to java 10 
Optional is an abstraction of nullable reference: value type will change only the Optional's performance, unfortunately the sense and verbosity will remain unchanged. null is JVM intrinsic and null-reference should be supported by Java sintax.
Which @NotNull Java annotation should I use? https://stackoverflow.com/questions/4963300/which-notnull-java-annotation-should-i-use
FYI: Just because a digital book is on the internet doesn't mean it is public domain. What you're doing might very well be illegal. 
Nope, there shouldn't be any impact as long as people read the javadocs of [Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), specifically, the value-based class reference and honor that contract.
No, it is not. It is a [value based class](https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html) and that is clearly stated in [Optional javadoc](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html). Can an int contain null? Reference types != value types.
The first example(SRP) doesn't make sense to me. &gt; With this solution, we have some classes but each class with a single responsibility so we **get a low coupling** and a high cohesion. This claim is not backed up at all. Instead, we have now created two classes that both depend on the `Customer` class, and the `CustomerReportGenerator` is probably dependent on `CustomerDB` in order to retrieve historic data. A change in the customer class will impact how the customer is stored in the db, and how a report is generated. This article is far from "The Definitive Guide".
ah I didn't understand what a value type was
How did you like Grails?
even though I have trouble wrapping my head around when I should use `Optional` or just leave it as `null`, I have found a few cases where `Optional` is very nice ... just seems like a good return value for some of my methods - but not all. I think the reason I have a big problem understanding where to use `Optional` is because I use `@NotNull` and `@Nullable` on every return and method parameter in Java. Now I rarely forget to use those annotations. I also have big problems understanding if it is bad to use `Optional` in collections, I read that it was... but I also see a lot of tutorials showing you how to use them in collections. Maybe I'm missing something here... So far I haven't had a need to do that in my new code. And also my understanding is that passing ` Optional` *as a parameter* is a big-no-no due to type-erasure.
Well, the problem is that is sacrificing performance and in some cases optimizations. And I do not think I wrote you are an inexperienced programmer. IMHO, Java is on the wrong way from version 5, falling too easy for the 'fasionable' additions, but without propping them correctly in the basement. Generics were a sloppy job. Now the streams and predicates... Yes, it's workable, and in the end you pay your bills. But please, don't try to suspend your critical judgement...
My two bits is this. You must do what you love. So keep trying new things ( perhaps, even especially, not in a formal educational setting ). Once you land on a few things ( or even one), study that and perhaps, even especially, in a formal setting. 
I use the empty collections now and then, but, if you're not careful, the immutability will bite you in the ass in the form of runtime exceptions. Given that it's now 2017, it would be stupendous, by which I mean less depressingly tedious, to have a collections framework which can distinguish between mutable and immutable collections at compile-time.
Although I agree that you shouldn't suspend your judgement. Java is critically acclaimed nowadays, it's the number 1 most programmed language depending on who you ask, so it holds a lot of power when it comes to people starting and learning programming, especially habits. That being said, it's their duty to understand how languages work and how the computer works. A lack of understanding will separate them from an experienced programmer who understands what is actually happening at the metal. I'm saying that Java is simply a language that can be used by programmers, so it's not their responsibility to teach people how programming works using other languages. As for Java 5+, I believe every new release has been an improvement. The language and "fancy-ness," is debatable, I prefer it, but, between releases, the performance has undeniably improved.
It's because of the change to BlockPos, and the fact that the JVM doesn't have stack types (c# structs) so they need to be heap allocated every time (EA can only take you so far)
Kotlin is elegant in that regard. Yes. Those smart cast by the compiler is a must have for Java.. because I don't think i can ever enjoy reading Kotlin's colons. The Pascal inspired syntax gives me a headache. For the life of me. why is such a modern language looking so ugly.
good links thx. however Optional class is NOT what Java needs. Already in all APIs, Object references are Optional anyways :) Java needs a null safe type for every object. Optional doesn't say anything worth its gold about the method contract. A Null safe type does. It means you are SURE the object is not null. As an API designer, I don't see any good use of Optional. What I want to specify in my method contracts is that a returned value CANNOT BE NULL. It should be enforced Kotlin style by the compiler who just checks the type.
&gt;Analysis revealed that in a recent code deployment a static HashMap was introduced to the code. Pretty predictable. Static maps with keys from a sufficiently large set cause these kinds of problems very often. Few years ago I found such a bug in Apache POI, the program crashed with an OOM after processing few spreadsheets. &gt;Once the HashMap was made a local variable (as supposed to a static variable) in the method, the problem got fixed. If the refactoring was really that simple, then, well, I don't want to be harsh on the developer, so I'll stop right now. 
It looks way better than Java. Just because you're used to Java doesn't make it better. Putting the type before the name is confusing. The type is way more important. 
just put a pr for jdbc template + sfm https://github.com/bwajtr/java-persistence-frameworks-comparison/pull/14
I actually think verbosity makes code easier to maintain, if you come back to some code 3-4 years or maybe more later, would you prefer some short lambda expression munged together with some obscure ascii soup - all very concise and elegant or.. (my personal preference) would you rather have even two dozen lines instead (OH AND SOME BLOODY COMMENTS TOO!)... 
This is a new code generator site I've created. I got sick of writing crappy java boiler plate and simple sql statements for the millionth time. So I created this tool so I'd never have to do it again. I turned it into a web app and hosted it so everyone can use it. The idea is simple... what is the absolute minimum you have to write to define your class/table? Use that to create pieces you need. The web app is in beta right now (more like alpha). For the moment it only creates basic code relating to data objects. If people find this useful, I'll add more functionality to it. The goal is to create generators for an end to end solution. Here is a sample definition: MySimpleClass name string 100 descr string 100 created date count int Let me know what you think? (cross posted from /r/programming)
download unpack and run https://spring.io/tools/sts/all
Yep, two programs that have a similar repaint issue. Must be java's fault. A representative will be with you shortly. Please continue to hold, your call is important to us.
I downloaded it in chromium then ran the chroot and tried to unpack there and it was succesful. There is no way to run anything inside of there though. What am I missing? Thank you btw
val a: Int = 1 int a = 1; Java looks so much better. The : is horrible. The type is important so it should be first like in Java.
Also available under GPL. Though what differentiates this from Netty?
Yeah, I'm sure you name all of your variables with meaningful names like "a", right? The type should be and is meaningless compared to the name. 
my point however is whoever decided to put a colon between type and variable name is an imbecile. Way to go to try convert Java/C# programmers. This is straight up horrible. Bug prone val/var... I will never know which one means final or not. And forcing null safe type by default. String should be like in Java. String? should be the null safe one. I will not rewire my brain for Kotlin. 
I agree. The Kotlin thought brigade downvoted you. Seems like Kotlin fan boys are progressive dictators.
I don't agree and I've written a lot of Java and Groovy. More recently I've been working with Kotlin extensively on the backend. Groovy always felt like a CoffeeScript for Java. It did weird things but looked similar enough to Java that you could make a lot of mistakes or mis-assumptions. Kotlin doesn't suffer from that problem. I feel more productive when writing Kotlin code and on a small team that's valuable. Anecdotally our backend is Kotlin and our frontend tech is mostly Javascript and Python. The JS folks do their own thing but the Python folks *hate* touching Java but have found Kotlin to be a pleasant experience even if it's not their beloved Python. It may never catch on as a full on Java replacement but it's ability to attract attention to the JVM and get more people building stuff on the JVM is good for all of us.
Eh, nothing specific against your blog. I think too often people try to buy improvement, rather than work to improve. Very few books on programming are as good as reading programs themselves. There are a huge number of outstanding free software projects out there. Pick a library you use and start reading.
Purge JavaScript? Where can I start?
Do I do that in the chrome shell terminal or inside the crouton desktop terminal? Thanks btw
As the guide says: `This involves fully installing Ubuntu into a Chroot`- chroot here meens a complete and separate installation of Ubuntu that is different from the Chromebook OS. So, within the Ubuntu desktop. Besides, I don't think that the chromebook OS has apt-get.
Transplaining
The big OS project I help with has this same issue. Someone opens an issue on GitHub every few weeks. Really wish we had someone who knew GUI better to see if it is our doing or just java being weird on some systems.
You think that the people who decided on slightly different syntax that has tangible benefits are the idiots, and not you, who is unable to adapt to the slightest, most trivial of modifications to core syntax? A good engineer would be able to work in *many* different languages with vastly different syntax. The fact that you're basically saying "I will throw a hissy fit if the language doesn't look exactly like C/Java" proves what kind of engineer you are.
do you realize you should be able to code Kotlin with any syntax you may like. That's elegance. There is a reason English is used as a common language. In Middle Earth people used the common tongue to communicate. You are being pedantic. 
изучай русский язык дурак. лучшее!
You should be able to code with any syntax you want? That literally makes no sense. The syntax was decided for a reason. I, and many others, like `{val/var} {name}: {type} = {value}`. Many new languages are opting for this syntax. It's not just Kotlin. Go, Rust, Swift, Scala, Kotlin, Nim... but it sounds to me like you only want to write Java and other C derivatives until the day you die, so it's not like you have to worry about diversifying anyway.
Yes. final int a = 1; Kotlin compiler can use a Java interpreter to convert any statement. You could decide to use this syntax too {final/mutable} {name} FUCKCOLON {type} = {value} ILIKEMYSEMI;;;
Eh, I'd rather have data class User(val name: String, val age: Int) rather than public class User { private String name; private int age; public User(String name, int age) { .. } //hash //equals //toString } The verbosity of Java tends to mask what's actually happening. Functional soup isn't much better either but Java has a lot of unnecessary complexity.
Yes on the JVM I don't think there's anything better that solves the problems arising from nullability more elegantly than Kotlin. 
Immutable empty collections sounds like free range no cruelty water.
I think this is just the reference implementation. Netty actually has their shit together and I would never use grizzly. Why this is randomly posted, I have no clue but OP is a regular spammer of random crap here. I'm actually using Netty for some proxying of udp &lt;--&gt; websockets for browser. It's pretty darn fast.
Why did you include hash, equals and toString in the java version but not the kotlin code? These methods are all inherited from the object class.
I think it would be interested if you would give us the use case. If it's "just because I can", cool. But I don't see end-users choosing this for desktop apps over an installer and I don't see Java devs using this over the standard tools to install stuff either. 
&gt; I actually think verbosity makes code easier to maintain Unfortunately the character count is a bad metric, it is irrelevant in day by day work. On the other hand Java has a lot of code pattern (getter, setter, singleton, library methods, hashcode and equals, ecc...) and all of these are difficult to read if they spread over multiple lines. Goal isn't to reduce verbosity but boilerplate. https://twitter.com/thomasnield9727/status/813857794076110848 
Those are inherited from Object but they aren't meaningful. By default java checks for object identity, while Kotlin data classes check that all of the values are equal. Kotlin also has a few other things I didn't include in the java class, I was actually being generous to Java.
When using the "data" keyword in kotlin, those are auto-implemented
[Lots and lots of libraries use it.](http://blog.dripstat.com/removal-of-sun-misc-unsafe-a-disaster-in-the-making/) I personally have used it as well, to be able to read longs directly out of a byte array without bit shifting and anding woes. Since it's used so widely, they cannot just remove it without providing a replacement. It looks like [JEP 193](http://openjdk.java.net/jeps/193) is gonna be it.
Going through the link from blog.dripstat it does seem like a disaster is around the corner. But then its removal has been written and talked about for so long that many of these libraries(or at least the active ones) would have already started working on compatibility using the EA builds! Hopefully so!
This is highly convenient if you want to distribute command line applications. Something like image crushers or converters. The confusing part will always be, that NPM is the distribution platform for JavaScript.
This only about syntax and bytecode version. -source will check that you don't use newer syntax than requested. -target will emit only bytecodes supported by the requested version There is no versioning info in the bootclasspath files themselves to do more than that. A Java 8 compiler has no way of knowing that java.nio.Path was only introduced with Java 7. The only thing there is the @since javadoc tag, but that was removed when compiling the classpath *.java file, as it is just another comment for javac.
As far as I know it doesn't throw any error before your java 6 runtime actually tries to use this class, when the program flow reaches the missing class, and then it probably throws NoClassDefFoundError. Should work with java 7 and later. I'm working on a software which is compiled with java 8, but supports partially java versions from 4 to 8. And often run into similar problems. Personally my IDE (IntelliJ) shows error in case I try to use Path, but it still compiles when built with Maven. Solution? automatic tests, as much as you can and with all java versions.
Thanks for this info. 'jdk.unsupported' seems to be the temp place to keep the internal APIs which are now going to be removed in JDK10! So, Oracle has found a middle path to avert the 'crisis' which would have happened if internal APIs would have been removed in one shot!
You are absolutely right. Fixed. I've updated all the obvious stuff but I'm sure I missed a thing or two.
If your code will run in concrete JRE and you want to check it for compatibility — just use corresponding JDK for compilation.
Try to improve the user experience. The first time is a bit hard to understand how to use it. 
Maybe I'm not understanding your situation but in IntelliJ you can set your Java language version per-project and per-module to anything you like. If your module supports up to Java 8, set it to Java 8 and it won't annoy you any more with errors about nio.Path. There's probably more to it as it's very uncommon for projects to support Java 4 to Java 8 and I'm torn between offering you admiration or pity.
What exactly have you tried? Where did you download Karel? How do you try to start it? What error messages are you getting, if any? etc. Stanford also offers [an online version](http://stanford.edu/~cpiech/karel/ide.html) that seems to be using JavaScript instead of Java. Not sure how useful that would be to you. Does it have to be the Stanford version? There's a handful of alternatives that should be easier to use. For example, [my own version](https://github.com/fredoverflow/karel-release) is just a single jar that you download and then double-click on (provided Java is installed correctly on your system). It even comes with its own lecture series on YouTube ;)
Can you selectively apply a filter to your controller method via an annotation, or do you rely on String expressions in your filter config? SpringSandwich's design goals were to avoid such type-unsafe Strings in configs, and to express security in the same place where you express controller uris.
order seems backwards. I would create the definition first then choose the code type. Maybe prepopulate the sample also? It was awkward to figure out at first. This is really cool for boilerplate code, thanks for sharing.
I didn't see in that link any example of specifying which controller receives which advice in a type-safe way. That example looks like a cattle call where all controllers receive that advice. SpringSandwich by contrast lets you specify which controller receives which advice, via a type-safe annotation. Is there a way to achieve that in standard Spring?
That's because you also need to use `-bootclasspath` to point at a Java 6 `rt.jar` for it to check the actual types. The compiler issues a warning if you use `-source` without `-bootclasspath`: javac -source 1.7 OldCode.java warning: [options] bootstrap class path not set in conjunction with -source 1.7 (This is from the [javac doc page](http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html), Example 4)
Someone's grumpy.
No that'd be the Ruby folk.
Thanks for trying it! That definitely makes more sense. When putting it all together, I felt it might look weird to have two empty boxes on the side and this long list in the middle. I'm going to try both ways and get peoples' feed back. Of course this is the first rough cut so everything is up for improvement.
Are those free tutorials? :)
I had a very wonky somewhat similar repaint issue with jdk 8 and intellij. it worked in eclipse but played using intellij it did not update the repaint area causing moving sprites to be clipped. It ... might - might be a graphics driver issue still. Closest I could find was: http://stackoverflow.com/questions/22737535/swing-rendering-appears-broken-in-jdk-1-8-correct-in-jdk-1-7 https://intellij-support.jetbrains.com/hc/en-us/community/posts/206281529-Intellij-not-refreshing-the-screen-properly-Ubuntu-9-04- but due to time pressure gave up on further investigation ...
Yes. That NPM is a Javascript tool primarily could be confusing. However, Node is easy to install cross-platform, and users don't need to know anything about javascript to install it. The benefits that NPM brings (e.g. instant versioning/deploys/updates) make it worth while IMO. Personally, I just like being able to deploy apps that I make to the world instantly.
[Java Tools and Technologies Landscape Report 2016](https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/) - survey results look pretty accurate to the current ecosystem/climate. I also appreciate this syntax comparison when I initially switched gears: [Java and C# Comparison](http://www.harding.edu/fmccown/java_csharp_comparison.html)
Unlike C# world, there are actually quite a few tools on in most situations there are multiple possibilities at each stage in the chain. In fact this is true for libraries and frameworks as well. Things to study (bold facing some must know about's ) JVM: **openjdk**, oracle's, azul's. Compilers: Most use the oracle/openjdk tool chain. build tools: ant, **maven**, gradle, SBT ( for scala ), leiningen (for clojure) frameworks: I'm not going to list them all there are probably hundreds at this point. As for suggestions on the subreddit once you have an area you'd like to work in.**Spring**, **hadoop**, **zookeeper** libraries: probably thousands at this point. As rules apply. Apache has a bunch of great libraries as does google. **junit**, **commons-codec**, 
The compiler could know, because of the byte code signature. [Animal Sniffer](http://www.mojohaus.org/animal-sniffer/) is useful to ensure newer classes/methods don't accidentally leak into your classes.
Look up Spring MVC projects with a java application configuration file. Get it running with a Hello World then try to add in data sources, authentication etc. Personally I don't use Spring Boot because I don't use it for actual work projects and I have no problems spinning up new applications by editing a previous configuration.
Thank you for you suggestions. I'll take a look into that stuff.
[removed]
Which certification did you take?
I think you may not know how to look for the information you are searching. https://spring.io/guides are for examples and tutorial type of explanations and not to be taken as documentation, and anyway I have never had big issues with them. It even comes with a tutorial for Boot+Oauth+SPA: https://spring.io/guides/tutorials/spring-boot-oauth2/ Regarding the tutorials that mention xml configuration just try searching including the work "annotations" or filter results older that 2008, it isn't Spring's fault there exists tutorials floating around the internet. Actually when searching on google "spring dependency injection annotations" my first result is a page from Tutorials Point that seems to demonstrate well enough how to use dependency injection on Spring and how to start it up. https://www.tutorialspoint.com/spring/spring_annotation_based_configuration.htm In my opinion Spring's documentation although not perfect is very well written and up to date compared to many other technologies around, and the amount of documentation, videos, conference is massive but sometimes overwhelming. Remember that Spring is much more than a DI framework, it handles many aspects of development of a Java application. 
also, there is a PDF version (sometimes it is more convenient) e.g http://docs.spring.io/spring/docs/current/spring-framework-reference/pdf/
&gt; Spring Integration In Akka, actors are the basic unit of programming. They're closer to the original definition of "objects" as defined by Alan Kay. When programming with actors, you're factoring your projects in a very different way. An actor has incoming messages, and can produce other messages. It can also produce other actors, through which it can only communicate via messages, not directly. This means you can implement Actor Model patterns much deeper in your project, even if you're running it all in a single process. Then once you need to scale out, your project is already factored in a way that scales across machines (or at most would require modest changes). Spring Integration is a suite of features laying on top of an already established different paradigm of programming. You could use it for similar purposes (although I'd say the overhead would be much greater), but they don't have the same purpose and intent.
[An Opinionated Guide to Modern Java Development](http://blog.paralleluniverse.co/2014/05/01/modern-java/) from pron98 is still one of my favorite articles up to today.
[This one](https://pivotal.io/training/courses/core-spring-training) from an Indian company called SpringPeople (online course, the cheapest one).
[removed]
When I'm making data classes in Java I rarely need any of these methods to behave like that.
FYI, in Java 9 they're introducing a --release that will equate to setting -source -target and the appropriate --bootclasspath. See [JEP 247](http://openjdk.java.net/jeps/247) for details. EDIT: /u/__konrad [beat me to it](https://www.reddit.com/r/java/comments/5lr4gp/what_does_javac_source_exactly_do/dbxyjjx/)
Avoid older books and articles. You want to learn the newer Java 8 syntax and API. Take a look at [Lombok](http://projectlombok.org/). It reduces boilerplate considerably. It's controversial, so don't take my word for it; do some research. You'll need a gradle plugin and an IDE plugin. Use IntelliJ. Eclipse and Netbeans are great, but Intellij is the smoothest to start with. But also learn to use the command line, so you better understand what's going on. Use gradle for builds. It's hard to say which framework to use as there are so many and I don't know what you want to build. For a one-stop-shop web framework, JHipster is great, but it's numerous components would mean you'd have a lot to learn. I think Vaadin is a great framework to get started quickly. However, this is also controversial and is best suited for low to medium load business apps. The great thing about Vaadin apps is that it's much easier to port to Android and desktop (JavaFX).
&gt; Hopefully it will also result in a standard repository of Java libraries a la NPM. Java already has that. It's called Maven Central.
Yeah and Maven is a hella of a lot better than NPM even with the XML.
Maven Central gets used by plenty of tools that aren't Maven so the XML doesn't actually have that much to do with this.
Not sure if you can reduce the size of the jar file, but you can probably reduce overall memory footprint of JRE and your application which is going to run in this JRE. Java 9 jigsaw allows you to build your own JRE which may contain only modules which your application needs. As a result, you are going to load less modules which may reduce memory footprint. Furthermore, you can bundle your app with this JRE. Here is a command which creates a JRE which contains only java.base module ${JAVA_HOME}/bin/jlink --output ./smalljre --module-path ${JAVA_HOME}/jmods --add-modules java.base
Thank you for the answer! We were actually able to solve the problem using this library. Thank you.
[removed]
1.5 The customer gets to decide what goes on their servers. 
So, dynamic allocation of virtual address space on account of JVM and the prospect of more abstract hyperthreading on a greater scale?
What are you trying to do? http://mywiki.wooledge.org/XyProblem
There's 2 big things: - Choose something common. Like the IDE's built in formatting. - Don't customize anything. Teams have spent tons of time arguing, debating, and adapting over code standards that are ultimately meaningless (compared to just going with a common way and not arguing over it). Perhaps english isn't your first language (which would be better because the implication wouldn't mean anything), but this language: &gt; then ask my team members to obey it. Sounds like you're looking to turn it into a power struggle, which mostly just ticks people off, and so I'd suggest avoiding it. It's good to generally have a coding standard, but don't turn it into a huge issue. It just causes a lot of fights and angst and it's pointless. I've personally edited code that varied having braces on different lines, different spacing, etc - it was slightly annoying but didn't matter that much. 
If you are familiar with programming, I would recommend not to use any IDE. It's going to be harder, but it helps to understand how things work (java compiler, java launcher, classpath, etc).
Awesome these are really good links.. Pebble and Velocity looks promising.. Thanks again!
Not just that but it's also simply better. Remember the left-pad debacle? Maven repositories have namespaced versioned immutable artefacts signed by the author. 
Could you clarify what you mean by "The compiler could know, because of the byte code signature"? Remember that the whole bootclasspath is compiled by the same compiler as part of the JRE's build process. So all class files use the same byte code version.
Why would you use Spring's FactoryBeans construct when you can use an @Bean annotated method instead?
I think initially your life as a developer will be more complicated, as you'll need to learn and use the module system. The strongest benefits are in packaging and deploying. Faster startup, smaller deploys, less RAM used, and (so we hope) less classpath hell. 
I know Java GUI stuff prettty well. What's the OSS project? Maybe I have time to take a look.
The lack of checked versioning of modules is a concern though.
I tried Velocity, Freemarker and Jtwig, but opted for Jtwig because it seemed to fit my needs (template inheritance, macros, simple language, custom functions) and better than the others
Was not aware of jdbi before. Just added integration with it http://simpleflatmapper.org/0109-getting-started-jdbi.html
Please also include the url to the service, so that the job of exploiting it becomes easier ;)
That would be my first guess as well. OP should read about [The Event Dispatch Thread](https://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html) if he hasn't already.
Code?
How many times are we going to have to put up with this drivel? https://www.reddit.com/r/java/comments/5k0caa/java_ee_claimed_obsolete_by_gartner_is_that/ https://www.reddit.com/r/java/comments/5ig887/gartner_develop_a_strategy_to_deal_with_the/ https://www.reddit.com/r/java/comments/5jjbr8/is_gartners_report_of_java_ees_demise_greatly/
&gt; The bitwise ^ operator performs a bitwise exclusive OR operation. Note that performing a swap using a bitwise XOR is an outdated technique that will make your code hard to understand and probably even perform worse than performing the swap using a temp variable. 
^ is the exclusive OR (XOR) operator. If we have the integers 4 (0100 in binary) and 3 (0011 in binary) and you XOR them you get 0111. b=a assigns the value of a to b and returns that new value, which will be 0100. 0111 XOR 0100 = 0011 (which was b). Now b will have a's old value and a will have b's old value.
It's a [bitwise xor operator](http://stackoverflow.com/questions/1991380/what-does-the-operator-do-in-java). It compares each bit of the two operands (a and b in this case) and compiles a return value based on each comparison. For each bit i in a and b, if the bit at a_i == the bit at b_i, a 0 is the result. If the bits are different, 1 is the result. e.g. a = 10 = 1010 (base 2), b = 12 = 1100 (base 2), then for the leftmost bit, 1 == 1 -&gt; 0, the second bit 0 != 1 -&gt; 1, next 1 != 0 -&gt; 1, last 0 == 0 -&gt; 0, so the result is 0110. There's a sneaky way to use xor to do a swap of two values without using a third, temp value. The algorithm is explained [here](https://en.wikipedia.org/wiki/XOR_swap_algorithm).
1.8, we make it a priority to try and not get too behind and any given point. So far the business has been on board too (knocks on wood)...
Our customers they don't know even what is java. 
By coercing you to switch to a more modern lightweight runtime probably 
There are at least 3 more articles about this topic, thanks for curating the other ones that have already been posted ;)
If you just want a config file to hold environment specifics a simple properties file is probably the easiest approach.
A lot of people would still use 1.x, but you're right, 2.0 is here and this article requires a follow up.
They had to re implement the code behind the api for the standard library though. They pretty much copied all the interfaces, and re coded everything that implemented those interfaces.
No classes actually inherit from `Class&lt;T&gt;`. `Class&lt;T&gt;` is used for the Java [Reflection](https://docs.oracle.com/javase/tutorial/reflect/) system to obtain information about a class. It is recommended that you avoid using the Reflection system if you can as it is relatively slow. `Class&lt;T&gt;`'s `forName` static methods can be used to force the `ClassLoader` to load a class that it otherwise wouldn't, although this is rarely used in modern Java; it used to be the only way to load a database driver.
bro... I did Pascal in my first year at Univ. I hated it. It was ugly. God almighty saved me with Java the next year. Java made me like programming. Pascal colons SUCK. You can convert any syntax back to code internal representation. I guess you couldn't see what I meant in a trolling way. Val/Var is confusing. Which one means final? I will never know. I don't want to wire my brain with this idiotic association. final is not ambiguous.
Maven does not even require XML since it can be polyglot * https://github.com/takari/polyglot-maven * http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22io.takari.polyglot%22%20AND%20a%3A%22polyglot%22 
How's contribution for the project coming along? I really dislike Tom Akehurst's "lead" over the Wiremock project. The guy acts like owner of a pawn shop.
It's still a relatively new project, currently not yet on it's first major version. Contributions are welcome!
val is final var is not. Where is the confusion? Kotlin isn't the first to use it but it did probably because it's been seen as simpler, succinct and to-the-point by a vast majority of programmers since quite some time. In fact one of the winning grounds of Kotlin is it's pragmatic re/use of battle-tested ideas. So, if you want to stick to whatever languages for whatever reason, no one is pushing you. But please for the love of God, either bring logical and sound reasoning when you argue or relax and enjoy your life. In all situations, do not troll. 
Java 1.7. Last week we upgraded from 1.6.
Be advised that I'm a Javascript developer and all views expressed against Java/Maven are felt by my peers who do have ample experience with the language. 
&gt;Apache’s Maven project management tool for Java relies on a complex, impossible-to-read pom.xml. This is extremely difficult for humans to read and slows down development for projects with a lot of contributors. XML is not impossible-to-read by default. A POM is actually pretty readable since XML is descriptive (I wonder what the dependencies section means?). The only difference in readability between JSON and XML is that field names in XML are often repeated in closing tags. You can certainly create some unreadable XML, but the same can be true of JSON. I also noticed that the author promotes npm by mentioning npmjs.com. Maven wouldn't be as popular as it is if Maven Central never existed. Maven has endured so long and Maven Central has been adopted by so many other build tools because they solved problems like [this](http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm) long ago. Abandoning Maven (or Gradle or any other build tool that uses Central) for npm in Java projects is a hard sale. It's not like we're still puttering about with Ant files.
It might help to consider a concrete example. Let's say we have `Object foo = new Object();` `Class&lt;Object&gt; fooClass = foo.getClass()`. fooClass is basically metadata about foo; It's an object which represents the Object class itself. Naturally, `fooClass` is also an object, so we can say again: `Class&lt;Class&lt;Object&gt;&gt; fooClassClass = fooClass.getClass()`. fooClass was a `Class&lt;Object&gt;` object, it had the metadata for the `Object` class. `fooClassClass` is a `Class&lt;Class&lt;Object&gt;&gt;` object, it has the metadata for the `Class&lt;Object&gt;` class. By the way, a `Class&lt;T&gt;` contains the same fields no matter what `T` is, so we can simplify the typing by leaving off the `&lt;T&gt;` and saying that `foo` is an `Object`, `fooClass` is a `Class`, and `fooClassClass` is a `Class&lt;Class&gt;` which is also just `Class`. As you can see, although you can keep calling `getClass()` on a `Class` object recursively forever, it will immediately keep returning the same information over and over, because `Class&lt;Class&lt;T&gt;&gt;` and `Class&lt;Class&lt;Class&lt;T&gt;&gt;&gt;` contain the same information: that of `Class&lt;Class&gt;`, which is also the same information as simply `Class`.
https://github.com/magefree/mage Mostly us just maintaining the game rules engine. Not a lot of GUI work lately from what I know. 
1.6 I'm part of a team that encourages/passively-and-professionally-threatens teams to upgrade to at least java 8. One of the biggest issues I've seen is **fear**. * Teams are afraid of breaking things to the point the code becomes impossible to maintain due to copy-waste and overall technical debt. Which is usually caused by developers/architects that are afraid to learn new things with examples such as * "that's how we've always done it." which translates to, "we copy and paste our libraries into our projects instead of using dependency management" * "We paid for this enterprise server [a decade ago] and we're still paying for support". which translates to "I *am* the support. I refuse to admit that my skills aren't as valuable as they used to be" Managers are afraid they can't meet deadlines or are afraid they will somehow have significant down time if they upgrade. Aside from fear there are just wtf scenarios (which are almost always caused by lack of dependency management). Libraries that generate bytecode such as spring have older versions that throw in jsr and ret instruction which were from a packaged library where nobody can find the original developer if not the actual source code and executed on newer jvm's cause the vm to implode. I can see this as being insanely frustrating for a developer that *knows* java but doesn't know the JVM.
The Java community is much better than that of Javascript. Part of this is because, as you said, everybody moves onto the newest framework or technology every few months (18 to be exact), and early adopters of a new technology are quick to alienate those who don't learn it immediately. That's something that you just don't see in the Java, or really any, community. I feel that NPM will always be a tool used by the community, since it's installed at the same time as Node. Though Yarn is gaining momentum, it'll never pass NPM. Bower was never truly going to pick up, since it was directed toward the front end only. I agree that a Maven/Gradle build is simple in practice; it's just that the pom.xml is surprisingly difficult to read compared to package.json, or even Gradle config files for that matter. But, I believe something similar can be achieved with a simple Express web server.
Ah, yes, the module private class will be included in insight while you're working in that module, but not (for anyone) when working outside of it. That'd be nice and sensible. Still, it won't save a whole lot as there will still be so many classes in the classpath, or potential classpath, regardless.
Isn't swing largely irrelevant now?
Don't. Stick to the current release version. While it may sound like a good idea first, you will run into all sorts of bugs and you'll struggle with incomplete documentation. The Spring team will most likely offer a migration path. 
Why did you delete and repost this?
The blog is hosted on squarespace, which went down just after posting yesterday. I deleted the blog as I didn't want people to click on a broken link. Now the squarespace issue has supposedly been resolved, so I reposted. 
[removed]
Cool, will do. 
enough with your $ spam.
This should be posted in **/r/androiddev** or in **/r/javahelp** as is indicated in the sidebar. 
Thanks, this is something I wanted to do for some time now. I'll be adapting the build system next week, so hopefully all goes well. 
Yes, it wraps a Go executable. Behind the scenes it uses the ProcessExecutor to start and terminate it, then orchestrates it via it's rest API. This makes the Java code simpler, as it ends up being more like a wrapper. Also this means the data can be shared and used across automated scripts and other language bindings. Hoverfly is the core product which does most of the work, and it does the same thing with it's CLI - hoverfly.io Go binaries are single executables with no dependencies, so it's not too complicated to run them. It's true that there could be some issues with security policies or OS detection, but hopefully this should be rare. Feel free to raise an issue on github if you run into any problems - https://github.com/SpectoLabs/hoverfly-java
for someone coming from Java. val means final? why? Your val and var are like budapest and bucarest.. I never remember which is which. 
its* x 2
* Go to http://start.spring.io/ * Add the Web dependency (for Spring MVC) * Generate the project and unzip it somewhere on your hard drive * Open IntelliJ and click on "Import Project" * Select "Import project from external model" and select either Maven or Gradle (depending on which you chose in the Spring Initializr - Maven is the default), then hit "Next" * There are a lot of options on the next screen, but the defaults work for me, so you can probably just hit "Next" again * Once you finish with this wizard (hitting Next a few more times, specifying the location of the JDK on your computer, etc.), your project should be open and ready to go Edit: Right-click on com.example.DemoApplication in the Project view on the left and click "Run 'DemoApplication'". This should run the Spring MVC app. I don't know if any controllers are set up in the demo application though, so actually trying to use the demo app might not work out of the box.
The best, and not only because of IJ, would be to use one of the Maven `pom.xml` files that define the project and its dependencies, then open that in IJ. This means your CI build and your IDE will always see the same thing about your project. This is also true for Gradle based projects, but I believe one will find the declarative Maven descriptor to be more transparent than the imperative Groovy code. I'm on my phone or I would provide a lot more specifics and links, but hopefully that'll get you started and/or something to read up on. Congratulations on your switch and I hope you develop with pleasure
Sorry I didn't make myself clear. I just did tutorials (doing the same of the teacher and trying things for myself), research at the documentation/Oracle tutorial and played around with inheritance/polymorfism/encapsulation/etc. And also I've programmed before in C++/C#
Right, there will be hundreds of bloggers covering it as well. Will just stick to what we know and not worry. Thanks.
You are getting downvoted, but your comment is still useful to the discussion. Anyway here's the deal: * I have a team of programmers who know how to use Spring 4, so I can start right away. * From my manager's point of view, it's unacceptable to use technology with no guaranteed release date (we've seen Java 9 date move already twice I believe) * There's simply not enough experience around with Java 9 and Spring 5. When we get stuck, it's easy to find solution for Java 8/Spring 4. 
Don't use singletons they make testing hard. 
Install Tomcat and make a simple JSP page with dynamic content, like display the current date or something. Then build a simple hello world servlet to accept your name from an HTML form and return "hello &lt;name&gt;" back to you. Then get a Spring MVC example going and learn how to send data to the controller process it and redirect to the JSP result page. Then build a simple Restful web service with Spring that returns some kind of simple JSON data, a list of name or cars or sports team rosters or something, and make a Javascript web page that hits the Restful web service, retrieves the JSON data and displays it on the page without refreshing. After that, learn to use Hibernate to store object data in database tables. Then build what you did with Spring, but do it with JavaEE and a JavaEE Server like GlassFish. All of these things are good skills and will impress people in a job interview. Good luck! 
build a simple CRUD app now using Spring Hibernate and Mysql. Google it for additional reading.
NET::ERR_CERT_DATE_INVALID for live demo
Suggest adding LetsEncrypt to list of technologies. 
Spring 5, doesn't really break a lot of things, unless you use Velocity. Switching from 4.2 to 4.3 was waaaay more difficult. Besides the hiccup with velocity, 5 from 4.3 was nothing more than changing the version I my Gradle build. This application is by no means simple, over 800 beans, all sorts of post processors and factory post processors, load time weaving
Yea, not trusting that self-signed certificate... 
Why not android?
Umm, that's not a spring boot app. Also it wouldn't make sense to put a spring boot app in an app server environment. Indeed that practically defeats the entire purpose of spring boot. You're also using two DI containers; Java EE and Spring. This causes a lot of overhead as well as could potentially lead to some conflicts and/or weird behavior. 
Uh, why not? Were you planning on entering banking information on that website? Seriously, he could have used no SSL at all and then you wouldn't have seen a warning.
I google'd it and seems like a (fairly) easy thing to start and I can use it in my next project. Gonna try that.
Good answer, and covers a bit of everything, so I'm gonna try that. Feel free to link to anything useful you founded while learning.
Good answer. I love how many possibilities I have. Thanks!
NodeJS
Java 9 is still too bleeding edge. A lot of libraries that you might want to use may not work with newer ea builds. If you want to take the state of ea builds as a challenge, by all means, use Java fx. If you want to build something real, I would advise using Java 8.
&gt; To say nothing of the memory foot print the DI has in and of itself, How many MB would that be then, approximately? For instance, the whole of Payara/Glassfish after startup and once GC has kicked in takes up about 33MB. That includes CDI (Weld).
Java 9 is still under development. Although you can use one of the EA(Early Access) builds for building your desktop app using JavaFX, but with the new module system still under development you will have to modify/refactor your dependencies when the modules are integrated with main java libs. I would suggest to wait till Aug 2017 to pick up Java 9 for any "real" development. Till then work with Java 8...
That's a quite interesting possibility too, I'm going to do some research on that.
Thanks for the links!
I'd really learn JDBC before any ORM or any other API that abstracts over JDBC.
What about real-world Java EE bean validation with examples? That would be nice. Thanks!
I apologize for my typo. 
The way Hibernate generates the update statement is a fun example of black magic programming: &gt; UPDATE hibernate_sequences SET next_val=2 WHERE next_val=1 AND sequence_name=default They lock the row before this, but you know, just in case, let's sprinkle some more correctness by adding a WHERE clause that'll literally never *not* match. It also makes an impression that although all the queries supposedly run in a single serialized transaction (serialized as to inserting the entity as there's lock on the identity sequence row), it keeps selecting and updating the sequence on every insert, instead of doing it just once per transaction. Is Hibernate-generated SQL always so damn sloppy? The table identifier strategy is not necessarily bad, especially if Hibernate lets you control the row where the sequence is held. Sometimes you need to serialize inserts anyway, and you need to have *multiple sequences* progressing in a single table (as part of a composite key). Storing events in a table is one such example (storing multiple aggregate instances in a single table which holds aggregates of the same type). So, the strategy is not bad. The execution in Hibernate, however, seems weak.
I wouldn't really call links to documentation and sample applications "tips"
Very contrived problem in the first 2 examples. If the issue is developers copying and pasting code without checking it then leaked connections are your least worry. Also the standard try-finally example just looks a lot clearner and easier to read to me compared to the other ways. 
I am not sure what you mean by self-contained stand alone desktop app, but Java 9 allows you to create a new module which contains you application, and bundle JRE together with this new module. Furthermore, you can put to your custom JRE only that modules which are used by your application. Here is a Module System Quick-Start Guide http://openjdk.java.net/projects/jigsaw/quick-start A command like the following builds a custom JRE with selected modules: ${JAVA_HOME}/bin/jlink --output ./customjre --module-path ${JAVA_HOME}/jmods:/path/to/your/modules --add-modules java.base your.module As mentioned earlier, Java 9 is still under development, so things may change.
That site is unreadable with all the ads. 
By all means learn about generics, but it's not relevant for this sub. It would be like if I posted a blog post explaining conservation of momentum to /r/physics
Yes, probably Spring is a bit easier, and more lightweight -- runs on Tomcat. But JavaEE isn't that much harder. Either way it's mostly annotations and configuration to link everything together. 
I was redirected to a fake Facebook scam page. It's not a layout issue. But thanks for taking an interest in making it right. The content sounds like a good read. 
Ok... facebook scam thing sounds strange! Its a technical blog with few ads from reputed advts for earning my living :) I have removed the big ad on top in mobiles now... it should be a smoother read...
In my experience the singleton pattern creates far more problems than it solves. problems: * The code becomes hard to test since you often have some sort of global state inside the singleton. * Suddenly the class becomes responsible for two very different things, being a singleton and whatever else it does. * not very flexible, when you suddenly need another one of the things that are singletons you need to do a ton of refactoring. My suggestion is to solve the problem with creation and management of objects in another way than with a singleton.
What I am asking myself since some time: How would you integrate a checker for a maximum length of some kind of text, provided by an external source, for example by user input? The key problem seems to me, that you can't do that reliably on a ``String``-Object, if the constraint is based upon a datastore, say, the ``varchar``-maximum size of the underlying (relational) database. You would need to know the target encoding at validation time - but that couples the data access layer to the domain layer in an inacceptable way... So how to deal with that problem? (With other solution than to choose ``UTF-16`` as target encoding 😈)
Organizing the app into multiple projects helps enforce boundaries on larger projects (especially with new developers) because each project's dependencies are explicit. See: http://www.appcontinuum.io I've had moderate success with multi-project builds the past, but that being said, it's not entirely relevant to the concepts mentioned in the post. I appreciate the feedback!
Has anyone tried using ShenandoahGC?
Completely right. There are places like /r/learnjava or /r/learnprogramming if you really need to post stuff like this.
Thanks for letting me know about it. From the project page, I couldn't see any way to download/use it.
Besides being able to cut down the runtime size of the JVM. I really fail to see how the module system will help with productivity and overall coding experience. If it had included versioning, yes it would be worth it.
Better yet: Use Dependency Injection
Intellij recently released [this plugin](https://plugins.jetbrains.com/idea/plugin/8554-ide-features-trainer) for showing all the handy shortcuts. It's a step by step tutorial within the editor. I found it super useful.
All of these jooq blogs aren't really jooq specific and suffers from the felling that someone at jooq said: "we need developers to adopt our product so we'll spam 'useful' blog posts mildly related to jooq and show fixes with jooq so bad developers that only copy paste code from stack overflow will copy our code and we'll gain adoption." Don't get me wrong, my company does this too (different industry) but it's mildy annoying when the blog posts are posted to "my stream" (aka, /r/java). All that said, I found the blog post earlier today about pagination interesting so I guess there's an audience out there for at least some of the spam. I'm sure there's a Jr. developer out there that'll get some use out of this post.
I recommend going through this list https://github.com/akullpp/awesome-java it covers a lot of topics so you can find something interesting no matter what your current interests/needs are.
Yes, you are right... anyone can make a course and it's upto them to charge or not charge for a course. Usually, people create a course and then keep it free for sometime so users can try out and give feedback - but once, they are done with the limited number of students these courses are made paid... and then comes in the Udemy discounts... :) It also depends on the instructor, course material, course structure, time the instructor spent on accumulating/learning the right information.
If you require 1000 classes to structure your service but only need 1 class exposed for its logic it would reduce a lot of overhead, mental as class-loaded. Just hitting ctrl+space and not getting 10000 potential classes should be reason enough, same as using libraries and their transitive libraries, risking collision with your own dependencies or anothers library dependencies. As always, the idea is good, but the devil is in the detail. But I am sure, that big names like RedHat can help improve the implementation
Without reification, Java generics make me sad, but this put a smile on my face!
I don't disagree with your assessment of the rest of /r/java - jooq isn't the only group doing this (jrebel does this a lot, as do others). I don't always post this sort of critisism, but I've seen a recent uptick on the jooq stuff and felt like sharing my opinion on it. Also, I have posted more in the past under other usernames, but I'm more of a commenter than a poster and I regularly (like every 2-3 years or so) delete my username and start anew. It's not complete anonymity, but it's closer to something where me saying something that I believe very strongly today doesn't come back to bite me 20 years from now when I'm running for a congressional seat (yea right!) More accurately, the posts I made 10+ years ago learning Java would embarrass me quite a bit now ;) I enjoy your comments and posts a lot, but the jooq blog specifically annoyed me today... Maybe it wouldn't have annoyed me yesterday or tomorrow (or maybe I had just enough time between builds to make the post) ;)
http://wiremock.org/
jqqqqq .... such a joke. Don't get me wrong, it promotes wonderful data querying practices (like the blog post proves), but which are useless 99.9% of the time. That 0.01% part where what jqqqq is using is critical, they have better ways to deal with it already (since it's critical). jqqqq tries to solve a problem that doesn't exist most of the time, and when it does exist there are better ways to deal with the problem than employing jqqqq for it.
Now you can have public classes for internal use by your library, but not consumers of the library. 
The fact you took from your time to try and explain yourself already demonstrates I had influence on you. If you truly believed communicating online doesn't influence anything, then wasting your time posting comments would be irrational, Mr. Hitler.
I explained myself to you, since you asked. The name itself is irrelevant. The post I made is important. communicating online is important. Warning others about a joke/ripoff library is important. The exact name is not important. Actually, using the exact/correct name would be an insult to the library itself. It does not take itself seriously, why should others?
I'd like to suggest another way of thinking about this - what kind of Java projects do you think you'd be interested in? Once you figure that out you could investigate what frameworks might be useful and take it from there. 
The article describes them as "one of the newest features", what's up with that. This is the wrong sub
Short answer, it's the magic code added to the start of every class file for easy identification. 
But at the end of the day, does this aid in productivity. Where does one draw the line that says the end user shouldn't override this because we don't want you to. Example (A bad one at that) take Spring, most people probably aren't overriding the *Application context classes, but there are libraries that do. Spring decides, no one needs to modify this (Which wouldn't happen because the user needs to start the ApplicationContext implementations in their own code)
Use a filter for auto complete :D, AFAIK the module system will not resolve conflicting dependencys. If 2 versions of ASM are on your class path modules will not help. Oh but they could shade them and use it in a non public module, but then what is the point because you would have to shade them with or without modules
Dependency injection is for configurable dependencies, and singleton is about objects so non-configurable, they have one single instance per type. So the overlap between both, when used correctly, should be none.
 tldr: double locked checking is perfectly safe, as long as you make the field volatile. All articles saying it isn't are outdated to Java 1.4 or older.
I see no reason to ever use double checked locking..... Singletons are pretty bad in anyway. But, if you need to use one, just create a static: static Singleton mySingleton = new Singleton(); public static getInstance(){ return mySingleton}; Simple as that. OK, so double check locking means that the singleton can be created lazily..., without the synchronization overhead. But, I will argue that if you have a method that is been called so many times that this synchronization overhead becomes an issue, then you shouldn't be lazy loading it! And, if its only gets called once in a blue moon, then just synchronise the call to getInstance(), and be done with it!. there is no business case...ever... to use double checked locking.
Thanks!
&gt; The obvious problem with the seek method is also, of course, that you don't know where to seek unless you've served the previous pages and passed that information back (or cached it). Sure, it's not a solution to every problem. But take reddit, for instance. Users often start with the front page. Then go to the next page. Then the next one. Then the next one. You'll get URLs like: https://www.reddit.com/?count=25&amp;after=t3_5medc6 See? It says `SEEK t3_5medc6 LIMIT 25` &gt; So... nice that jOOQ supports it, but you won't need it in 99% of cases, and for the rest, it's extremely trivial to implement it by adding a simple condition to a "where" clause. Sure, but the where clause gets a bit nasty if you start having things like ORDER BY &lt;some_expression&gt; ASC, &lt;some_other_expression&gt; DESC, &lt;yet_another_expression&gt; ASC, &lt;wow_all_those_sorting_expressions&gt; DESC &gt; It's so basic, in fact, I bet writing this blog post took longer than implementing this feature in jOOQ. Well... it's kind of basic once you have a transformable object model of your query available. But then come the edge cases, e.g. when you have `UNION` or `GROUPING SETS` or all sorts of nasty things in your query. 
For those who just want to get things done, I'd consider using [lombok](https://projectlombok.org/features/EqualsAndHashCode.html), specifically either `@Data` or `@EqualsAndHashCode`. Of course you should understand what it does for you :)
Wiremock is a really useful tool also. If you read the article there is a comparison of some trade offs between the two. 
AutoValue and Immutables are probably safer, Lombok uses JVM injection and the author worries that if those features are deprecated then Lombok will stop working. The Lombok plugin for IntelliJ also crashes very often. Lombok also conflicts with Hibernate if you use @Data objects. I so wanted to like Lombok but after much hassle I switched to Immutables.
you should have an IDE that does this for you and not waste any brain power on it
Bonus points for quoting the Javadocs. Not enough people read it
It's always essential to know concepts well even if you may never use it yourself. 
Get the Algorithms 4th edition book from Amazon or find it on PDF. Algorithms I and II from Princeton are offered on Coursera, and there is also a YouTube channel as a supplement to the lectures. All topics covered are relevant to interviews and will help you tremendously. 
It generates a sensible implementation for you, e.g. intellij lets you choose what attributes you want to include and what hashing method to use (Apache commons, or guava or whatever)
You could ask yourself, what does having "private" in classes buys me? If your answer is: "nothing, it just annoys me, everything is public in my code", then the module system would not help you. If your answer is: "It helps with encapsulation and keeps private concerns well, private", then the module system will help you in the same way.
Thanks! Appreciate it!
You should have an IDE that does this for you, but you should not do it blindly, and understand exactly what it actually is doing.
Not really. Good hashcodes are incredibly important with regards to performance -- if you're frequently using hashmaps or sets, which you probably are. Determining a good hashcode strategy can make a big difference. Same for equals. Equality can be a surprisingly a tricky thing.
Forget algorithms and forget Android. Learn Spring, and after you get acquainted learn Spring Boot. This isn't a joke: to be a halfway decent Java engineer you have to know Spring. 
Java has the static utility class `java.until.Objects` which provides utility methods for equals and hash code.
No!!! Learn whatever you can, but you don't need to pay money for anything.
Not an employer but I do technical interviews. Most of them are not focused on technology beyond the basics. It is impossible for any human being to master them all so I'm looking for adaptability. You also have a computer science degree so I would expect much more analytical and methodical skills. A typical interview question I like to ask: * "You're are given an existing project that uses a framework or library you are not familiar with, what do you do?" * "Customers complain the software is not responding fast enough. It works fine on the development machine. How would you go about solving this problem?" * "We have a complex bit of business logic written in a language we're about to deprecate. How would you migrate this functionality in a way that minimizes the disturbance for the business" * "We have this problem were every time we build something, something else, unrelated to the thing we were building breaks. How would you prevent this?" 
We use these on my current project. Unfortunately, they have thrown exceptions in certain cases. I ended up writing an abstract class that implements the methods using reflection and rules that apply to our project needs.
And Spring is more fun to play with. Whether it is more fun or pain for real-world applications is an endless debate, but for fun tutorials I think Spring wins easily.
I haven't used Spring, but I'd consider myself halfway decent with Java. Java EE has come a long way. I know many of the concepts of what Spring provides, and I'm sure I'd pick it up quickly. But it's not mandatory to learn Spring to be successful with Java.
You can override equals() to compare objects *by value*, that is its purpose. The default implementation already provides comparison *by reference*. So the rule is not "stupid", you just don't understand why it's there. When objects are compared by value, and one or both change their values, their comparison outcome will obviously also be subject to change.
Forget android? Right, cause it's not like there's a demand for it or anything. 
Can someone tell me why it might not be a good idea to simply define equals() by just comparing the hashcodes?
It helps if you have no relevant work experience. (i.e. student, changing careers, etc) Otherwise, not really.
Consider also that Oracle's reputation with programmers will probably be [taking a dive](https://www.reddit.com/r/programming/comments/5iogug/oracle_finally_targets_java_nonpayers_six_years/). I wouldn't be keen on giving them any money, knowing it fuels their lawsuit machine. 
Depends on the hash function you're using. Most of the time, you're going from a larger domain to a smaller one so there will be collisions. See https://en.wikipedia.org/wiki/Collision_(computer_science) For most cases the answer is no. Edit: I meant range is smaller than domain. 
Ok. Thanks
It. Doesn't. Dictionaries are a use case. If you do that, use immutable objects. That's not always the case.
Lombok modifies the actual class in-place (so probably is a compiler trick, but reading about it, it's one that may not be supported in the future). It's a bit more odd to debug since the actual methods don't exist in code, unlike the code-gen options. It's not a bad library, but you need the plugin on IntelliJ to use it. 
I take if you aren't a fan of the Liskov Substitution Principle. Though even if you don't care about breaking dictionaries, it doesn't change the fact that they will break. 
First of all we're working under the assumption that you are trying to build a reliable API. As per the Liskov Substitution Principle, every subclass of `object` should be usable in the same context as `object` itself. This includes working correct with `HashMap&lt;K,V&gt;` and other dictionary style collections. *** For the sake of argument, let's say that you made `equals` and `hashCode` equivalent. By that I mean if `a.equals(b)` then `a.hashCode == b.hashCode` and `b.equals(a)`. Given an object, say a customer record. You decide that `equals` and `hashCode` will rely solely on CustomerKey. This will be 0 if the record has never been saved, but even then it obeys the rule. So you stick `aCustomer` into the dictionary. The `aCustomer.getKey` is 0, so `aCustomer.hashcode` is also 0, thus it goes in bucket 0. Then you save it. aCustomer.getKey is now 204. What does `myDictionary.containsKey(aCustomer)` return? Since the key is now 204, the hashCode is 204. If the dictionary has 16 buckets, the default, then its going to look in bucket `204 mod 16 = 12`. But it's in bucket 0, so it won't find it. *** In conclusion, if it is possible to change the result of `someObject.hashcode` over time, and someone uses `someObject` as a dictionary key, then dictionary is broken. The way to prevent this is to make the fields that affect equals/hashCode immutable. And generally speaking, its probably best to just make the whole object immutable. 
Curious about what would be considered satisfactory answers to questions like this. The questions seem very vague. What was the answer you got for these questions that was most satisfactory to you?
There's no violation of LSP, because the rules, which you don't like, come from the Java documentation, which *defines* the contract of hashCode(), and it permits the hashCode() changing when object state changes, if we wish so. I understand what you mean now by "dictionaries will get broken". Dictionaries by default make an assumption that is not correct for all objects. But it's possible to design a dictionary which observes state changes in its entries, and so it works correctly in that circumstance, as well. Notice that the Map interface doesn't exclude the notion of the Map subscribing for state change notifications for its entries. The fact the default implementations don't do so, is just a confirmation we're human and no design is perfect. In a better world Object would also implement something like "obj.addEqualityChangeListener(listener)" method, which notifies objects of equality/hashCode changes (where by default Object would never issue notifications, because its hashCode etc. doesn't change). 
Nothing in LSP says, "unless you document otherwise". If anything, it's a rejection of using documentation to justify unexpected behavior.
Sure, but we have only two canonical sources to determine what Object is supposed to do. Its public interface, and its public interface documentation. The fact Maps is designed with undocumented assumptions isn't Object's problem, but Maps' problem, basically. What you propose would solve the discrepancy, but then again, it's not as if every object's purpose in life is to be designed so it works in Maps. Good uses of mutable values may be rare, but I wouldn't want to rule them out completely.
My response would be : Smoke integration tests built into the build pipeline.
&gt; learn Java EE &gt; learn Spring Yeah, it takes years for people who work with them on a daily basis to learn these technologies, but student has to learn them before even applying. Great logic. 
Please note that the person answering this question (and also is OP), is working on the Log4j project, making him probably not entirely unbiased.
To amplify the other posts, the best way to break-in is to know a framework*. Some of the frameworks are huge and it's not feasible to learn the whole thing. However, the concepts are similar in the most popular frameworks so focus on those. At a minimum REST, ORM (with JPA), SQL, the Factory pattern, JSON (Jackson/GSON) are a good start. None of these are that hard to learn the basics of. (Bonus points for know a web framework too). A young dev who had written some Play Framework code and could explain what each part did would be a welcome addition to a Spring (or whatever) project. *There are lots of Java jobs that don't use the enterprise technologies, but the will likely requires specialized knowledge like embedded systems experience or integration and automation experience. 
Log4j2 seems to love talking about how well it performs. Good for it. If I'm having to log so much in my application that logging performance becomes a problem, I've probably written bad software to begin with and have turned on logging to figure out why something else that's broken. edit: grammar.
Doesn't [my comment](https://www.reddit.com/r/java/comments/5mjmn5/understand_java_8s_potential_conflict_scenarios/dc5iw9g/) bellow address your concerns? Basically what interfaces support is not the same "multiple inheritance" you'd see in, say, C++ or Python. So the conflicts can be resolved automatically with less resulting issues.
They are intentionally vague and I'm not looking for a specific answer. The questions are loosely based on common real world problems with fairly well known solutions. So either you've ran into these before (like /u/wishicouldcode) which will be an opportunity to talk about your past experience or you'll be able to ask questions to figure out what is going on. If you show you're capable of analytical thought you'll do fine. The whole conversation will also show quite a bit of your personality and social skills. You will get bonus points if you can refer back to previous encounters with a similar problem, explain how you solved it and check if the same solution is applicable here.
For some government procurement proposals some amount of certificates might be needed. That is why usually employer pays for these. 
I feel very good about it. If you think Jigsaw competes with OSGi, you need to do more reading. The features are mostly complementary.
You can't use "this is because it is what the documentation says" as a counter argument to my "the documentation is wrong". &gt; Good uses of mutable values may be rare, but I wouldn't want to rule them out completely. No one said you can't use mutable values. What you shouldn't do is mix mutable values with hash code overrides.
Why do you capitalize words randomly? It makes you look very unintelligent.
It's because of my phone, it's not set in english as standard language so it bugs a little. although i really don't see the connection between random capital letters and a person's intelligence level, but oh well.
Maybe they will choose a 3rd party framework and integrate, like how they made joda-time into java.time.
Java7 added try-with-resources, which made vast amounts of code vastly cleaner. I don't see anything even close to that in Java9
Ignore the trolls.
And reducing memory footprint (in my understanding)
Sounds like you haven't read about it. Jigsaw enables new deployment patterns. Minimal jre for a container deploy. Or just even packaging your spring my boot app as an executable so when you run ps you see your app name
I don't know, I feel quite good about it, some of the improvements (compact strings, jigsaw, ~~AoC~~ AOT etc.) are imho pretty important to move java forward. My main worry is about jigsaw, there are a lot of concerns at Red Hat about its current state, hopefully, the problems will be addressed, even if it means java 9 will be postponed.
I would make the argument for JSHell in the simplicity it adds to explaining functionality when teaching your Junior (or sometimes more senior developers when the classical arguments arise) what something does, in addition to the exploration of functionality with easy replay-ability. I find I use REPL's infrequently other than to test those hypothesis, or quickly show off a bit of functionality. I have found they can be a blessing for quickly moving a conversation along.
&gt; AoC What's this?
The docker containers running microsoervices will be lighter. That's the biggest thing imho
He probably meant [AOT](http://openjdk.java.net/jeps/295) compilation. It's pretty huge, together with Graal, but it's just experimental for now.
Why didn't you have logging turned on from the beginning? If you have to turn logging on after a problem happened it may not be easy to reproduce the issue. Log4j2 aims to let you to run in production with logging turned on _all the time_, at DEBUG level if you wish, _without impacting the performance of your application_. The point is not speed for the sake of it, it's to help you as a developer to provide better service to your users.
Yeah part of Java's sustainability in the market is directly related to the fact that it's STABLE and new releases take a while to be fully vetted. I loved the D programming language for years, but it never reached any sort of stability. New features were constantly being added. Maybe it's changed in the last 10 years though.
Ohh hadn't heard of the foreign function interface. That would be hugely beneficial, especially with all the new GPU programming being done recently.
Yes, I did, thanks for the correction.
I actually, don't have any experience, my school requires me to get java certified, i have 3 classes left, and 2 of them are the OCP and OCA certs. 
&gt; Unlikely, unless they do something really bad for java. Java already lost loads of mindshare especially in the young developer generation. It got a dinosaur image. The ecosystem doesn't thrive when it's only used to maintain 10 year old legacy systems. Sure makes a lot of money, but it's boring. Young people don't like boring stuff. For some time it was not so bad, because new graduates were taught Java as the first language. It was replaced with [Python](https://dzone.com/articles/learn-python-overtakes-learn-java). These days it's not rare to hear "eww Java, ok, thx, bye" during interviews (!) or when talking to other developers. Also centrifugal forces are pretty heavily at work nowadays. It became though work to counter a proposed complete rewrite or partwise rewrite in C#, Python, JavaScript (*shudder*), Go, Kotlin / Scala, etc. Here new projects are only written in Java when there are specific hard requirements such as longevity, robust and understood distributed systems (with an equivalant prize tag). Never user facing applications or prototypes or protoypes that grew beyond prototype. 
In terms of feature sets for logging APIs (not implementations), the current hierarchy is: 1. Log4j 2 2. SLF4J 3. java.util.logging (only because they added lambda support in Java 8) 4. Commons Logging (AKA Jakarta Commons Logging/JCL) Just because he works on the project doesn't mean his arguments aren't right. (I, too, work on Log4j)
Maybe for a JEP in Java 10? That'd be neat. Log4j and SLF4J could probably contribute towards a standard API to supersede java.util.logging, possibly while also update JUL to more easily delegate to that new API for less configuration hassle.
I agree I am biased. And that's on purpose: As an industry, we develop best practices so that we can learn from other people's mistakes. This is generally a good thing. It also means that we accept best practices as a shortcut to learning and we sometimes stop thinking of why something became a best practice in the first place. So there is a certain inertia to best practices. They don't change rapidly. Again, not a bad thing: there are many fads in technology and we are all busy people who want to use our time efficiently. SLF4J has been an industry best practice for 10 years. I fully expect there to be inertia, and it will take a lot of convincing by opiniated people before things will improve.
&gt; Jigsaw has still no ways to handle version conflicts I think that is being addressed: http://openjdk.java.net/projects/jigsaw/spec/issues/#versioning
I think there are two type of features, one kind are the new features for programmers, and another one is under the hood changes. With Java 9 they mainly focused on the latter I think. The modular system comes at the right time, with people using microservices more often, the need to keep a low footprint is pretty high, so being able to build a customized version of the JRE just for your application is pretty useful.
So, you're saying, you didn't use some convenience APIs to wrap that boring, low-level resource management? There was Apache Commons IO for `java.io` stuff and Spring `JdbcTemplate` and similar things for `java.sql` stuff forever... or, you could've written your own.
Why would that not be possible in a re-designed `java.util.logging` API?
Anything with respect to training certificates is what I was referring. I would recommend paying for things like toilet paper for example, but then again tp has better ROI than java certifications
In your project use whatever you want. But if you are doing a library, please use slf4j. 
ah I see now. thanks 
Jigsaw effectively replaces/supplants OSGi. After Java 9 there would be little reason to use OSGi. Because of its low market penetration and poor tooling support the lead Java Dev's had little concern in cannablizing it.
Are you trying to be sarcastic? Because every single of your statements is the opposite of what the facts are.
I strongly disagree. That would prevent all libraries from trying to be garbage-free, for one thing. Why should libraries be doomed to use the lowest common denominator? Blanket statements like that without arguments to explain your reasoning is exactly what I meant by the inertia of "best practices" in my other comment above. There is no reason library authors should not code to the Log4j2 API. ---- Update: "garbage-free" meaning https://logging.apache.org/log4j/2.x/manual/garbagefree.html
But that's likely going to have a minimal impact in a one microservice per container world; 20 percent savings in memory footprint overall?
HTTP/2 as stated in the linked JEP has been moved to "incubator status". So it is only being added in Java 9 in the most nominal sense. Based upon the description of an incubator project, it would be unwise to base PROD code on the API available in Java 9 as it could be subject to change or outright removal which would make upgrading to Java 10 an even more painful process. Jigsaw could still offer benefits as it offers better encapsulation and issues like getting a ClassNotFoundException should no longer be possible. 
Jigsaw and OSGi are so different, honestly the only thing connecting them is an accidental collision of the term "module".
Hmmm, no promises, I'll see if I can find the talk I am referring to. Some of that might be misinterpretation on my part. 
&gt; When Java 8 introduced streams, there were already libraries that could do that as well. No. Java unlike the most other modern programming languages has no extension functions. You cannot add more methods to List class. Stream implemented in external libraries would be extremly inconvenient. (Also, the most important feature of Java 8 is lambdas, not Streams).
In the docker world, that's a lot. 
&gt; In my opinion Java is being held back by Jigsaw This is how Jigsaw slipped from Java 7, to Java 8 to Java 9, and almost to Java 10. Just like a big institutional reform which is politically unpopular, everyone is keen to keep pushing off Jigsaw forever, while more pressing issues, like the color of the bike shed are addressed. But having spent a few decades in software architecture, a modular approach is very much needed and inevitable in modern developer platforms. The question isn't whether we need Jigsaw today, the question is would JVM make the jump, or its competitors will make the jump for it. Jigsaw will happen, it'll be good, and all the Java devs will immediately accept it as the status quo and talk about how come we didn't have native modules earlier. And the wheel will keep turning. The one thing I think is a big mistake with Jigsaw is the lack of version support... but hopefully this will be addressed next time.
Thank you for the feedback. I think you have a point. I've updated the title of my answer to something less incendiary.
You're mistaking having logging turned on with having DEBUG turned on. Unless I can help it, I would never turn DEBUG on in Production. Most apps that I support typically have a few Exceptions an hour logged, mostly SocketExceptions or ParseExceptions because of network or data issues at the time. 
&gt; At the same time, all the classes extending ValueType in the core .NET library are immutable. That's not actually true. There are places where they choose to make a value type mutable, possibly for performance reasons. https://msdn.microsoft.com/en-us/library/system.drawing.rectangle(v=vs.110).aspx
Oh well, everything is clear then. Like mud. :-)
You will most likely be working with a web service API over HTTP. Google some basics of HTTP such as verbs and headers. Next take a look at a tool such as curl to learn how to make HTTP requests. Once you get this I would move onto a Java HTTP client library such as okhttp Google it.
You do realize that while python is considered "sexy" in data science the entire infrastructure for big data processing is written in and actively developed in Java on the JVM right.
I really like all the improvements they are making to JavaFX. /s
Yep. 
Yeah man, just return null like god intended. 
I personally think that Java 9 will introduce a lot of difficulty for those who just started in Java. The veterans in Java will have to get used to it but it would not be too difficult. I think the people that do not have a solid development background will struggle. I think that the developers that are older and have more experience will have to fix the problems made by the younger generation or less experienced ones. I see a lot of experienced developers already modularizing there code correctly and they will not have too many problems switching to true (Java 9) modules. And for the discussion between OSGi modules and Java 9 modules: they can work together. Developers with OSGi background will have no issues working with Java 9 modules (and vice versa).
Have fun with your NullPointerExceptions
&gt; There's also no mention of streams in the book either so I'd strongly recommend reading up on streams and lambdas elsewhere Streams are mentioned on p. 440, where it says in *bold* print that streams are not on the exam, which is why they're not covered in this book. 
&gt; This practice isn’t necessarily bad, however in cases where millions of a request are being sent with a moderate to high chance of error this can make a measurable impact to performance. Measurable in completely synthetic benchmarks sure. But in practice all of these typical 'exception' flows in API's are exceptions that happen for example if something doesn't exist unexpectedly in a database. The time it takes to create an exception is not even relevant in the scale of the time it takes to query any external database (or in the time of a simple roundtrip from the client to your API for that matter). So this is a great example of premature optimisation in most scenario's. 
This isn't a list of features to be included, but a list of issues to be discussed. There are no concrete solutions and the final decision might be "we're not doing it".
This doesn't affect us Java devs in any way. People area as usual overreacting due to rather inflammatory opinions of a single site. 
Sure, I completely agree. I just didn't find this such a big deal in my every day work (compared to e.g. generics, foreach loops, lambdas, streams, etc. etc.). Likewise, I won't find modules a big deal in my every day work. For instance, I'll always prefer an API that offers auto-closing semantics out of the box, e.g.: doThingsWithQ(thing -&gt; { ... }); Because it saves the trouble of thinking about this *all the time*, and potentially getting it wrong ocasionally. I understand that people here disagree. Fine.
Same deal there: the password check would include a DB lookup and the creation of an expensive hash. The time to create an exception there is not relevant. 
http://stackoverflow.com/questions/25797650/fileupload-with-jax-rs
Well what languages do you recommend for GUi making apps?
For one: this is help with *Java programming* and as such should be posted in **/r/javahelp** as the many hints on the page indicate. Seconds, neither this subreddit, nor /r/javahelp are a second opinion for stackoverflow. If you did not get a satisfactory answer there, you won't get it here. Most likely, your question is not formulated well enough that anybody will be able to give you a satisfying answer. **Post removed:** programming help &amp; second opinion for stackoverflow
You can improve your performance a lot by creating an exception without stacktrace, and event more by reusing the exception. I think people in Roma Framework have a post about that, but I can't find it. It is a hack, but since we are in the game...
All those features just contribute to OSGi to being the shite bloatware it is today, and is exactly why it's failed to find use in 90% of the market.
If millions of requests are being send with moderate to high chance of error, using exceptions is of course a no go and a design flaw. 
Bloatware? One of the main advantages of modularity is that you only include the parts you need. It's a *solution* to bloat. In fact that's the main reason Jigsaw is being developed, because Java itself is bloated and modularity solves that. But okay, lets look over the things I listed, I hope you can explain which parts constitute "bloat": - *Versioning.* This is fundamental to software development. If you don't have support built into the tooling it doesn't go away, it just means you have to do it manually. Modern OSGi tooling automates most of this stuff. You can even set things up to validate your build against a release baseline so it warns you if you've changed the API without bumping the version. - *Requirement model.* Again, not having it built into the tooling doesn't make it go away, it just makes it manual, and means discovering configuration problems is more often deferred to runtime failure rather than build time. - *Multiple versions of the same library in a single deployment.* Again, a problem that doesn't go away when a solution doesn't exist. It just means you have to work around it by spending hours trying to scrape together a working set of jars. Or where that isn't possible, as is often the case, with nasty hacks like shading. - *The service registry.* Can be thought of as a sort of dependency injection system. Is about as lightweight as they come both in development and runtime costs. If you don't want it then don't use it. As for the rest of it, like I said, it's modular, you don't use what you don't need. In fact the requirement model I mentioned allows you to *automate* selection and validation of a minimum set of jars. I'm pretty sure most of the complaints about OSGi will be said about Jigsaw, too. People blame the solution as overly complex because modularising their software is difficult. It will be *even harder* with Jigsaw. Good luck.
[removed]
In fairness, it depends on the job. The places I work at depend a lot on domain knowledge with the ability to write supportable scalable code. I rarely go near anything that might be covered by standard algorithms. 
And on the 3rd day of java God said, "your array index is out of bounds my son".
how is that even a comparison?
Is a wrong password an exception? Is a missing mandatory parameter an exception? Is a POST without a CSRF token an exception? I think from the point of view of having a single expected happy path of execution for a request, arguably they *are*. Sometimes you just want an immediate exit from a request when you discover an unrecoverable condition, and an exception works even from a few layers deep. I'm not saying it's always the right answer, but I can see the rationale. 
Any HTTP request, like HEAD, DELETE, TRACE, GET
agreed, there is no good reason to ever use exception handling for flow control. 
Let me guess, you manufacture, sell, or develop software for the toilet paper industry?
I wouldn't create a new exception class. But I might throw jersey's WebApplicationException with the correct enum that causes the framework to log and return a 401. 
Good article, would be better if you showed 'not found' error handling for GET trooper id = TK-421
I believe we'll continue seeing a move to smaller footprint servers, even if it's just a Servlet container (ex. Tomcat or Jetty) with libs packaged with the apps themselves.
It is expected that Java EE 9 will take advantage of Java SE modularity. Instead of deploying your code to a big app server, your app will add Java EE modules, then will be deployed as a standalone jar file. Using this approach, developers can mix and match Java EE API implementations from different vendors, i.e Hibernate as the JPA implementation, Mojarra as the JSF implementation, so on and so forth. The concept of app servers will pretty much go away.
Hey sweet, something I already wrote [a blog post about](https://melreams.com/2016/08/should-you-get-a-certification/)! The tl;dr is you should look at job postings in your area and (just thought of this one) look at the linkedin profiles of local devs (you can find them by looking up local companies) and seeing how many of them, if any, have certifications. The big one is the job postings though. Companies want qualified people, they're not going to keep what qualifications they want a secret.
Battle of the annotation crazy rest frameworks. I definitely prefer spark java and pippo and the other micro rest java libraries. 
So this allows a class to be created from a simple json object: var personClass = { age: 2, name: "John Doe", addPerson: { reference: getAge, void: false}, } For example would create a class called personClass (yes I know the capitalization issue) with a field called age, that has a default value of two. It further generates a getter/setter similar to a property from C#. It then creates a field called name with the default value "John Doe." The 3rd item adds a member function called addPerson to that class. You only need to say whether or not it's void, because of Java's type erasure combined with js's weak typing. To do so you simply reference (via Java.type) the UnbornClass type, and then call bake with the json data. This is just a simple proof-of-concept to speed up development. I think nashhorn has incredible potential, but some means of making this faster would be great. It currently uses a MethodHandle field to invoke the ScriptFunction functions from the class. Due to it's technical limitations making this slow it's not particularly useful, but it's definitely interesting. If there's a better way to do this let me know! I'm not great at bytecode manipulation
Everything depends on the job. Spring is useful to know, but I don't touch it.
whats it do ?
Adds classes to nashhorn kind-of. I'll put a better explanation up in a bit
It's interesting to see how type systems evolve. This seems like a quite bizarre, although very useful way of using enums. It reminds me of the "keyof" enhancement in the latest TypeScript release.
It's free, he does a live stream+chat and he'll post the video to his youtube channel after. If you're into Java EE and/or pragmatic programming he's a good one to watch.
First of all /r/javahelp is more suitable for questions like these. That said: I would urge you to start by creating Java console applications. You don't learn Java from just a single course. You learn by practice. So why don't you start by creating a sudoku app as a console application first? Once you actually have a bit of experience creating a simple Spring Boot webapp should not be much of a problem. It's probably the easiest way to get started in web application programming. &gt; I should avoid using SpringBoot and Spring as a whole becasue it simplifies a lot of things and start with just pure J2EE to get grip on the basic stuff and learn much more that way? FYI: It hasn't been called J2EE for a while. It's just Java EE now. I would personally not recommend going for Java EE; the concepts are pretty much the same with Spring Boot (it uses many Java EE standards) and it's really easy to get started with.
I would suggest you to - learn a bit first about http protocol - the request, response model because it applies to every web app/framework ... - learn about servlets/jsp and how you can form a MVC app with that (lots of tutorials about that online, go through some of them), about request parameters, sessions etc ... - then you can learn either Spring or Java EE (spefically JPA, CDI, JAX-RS) , I would suggest bit of both, and also Spring Boot, which is really just Spring with auto-configuration that can be overwritten. 
Maybe this? http://start.spring.io/
[removed]
As a developer, we'd like to upgrade as soon as possible. The longer we wait, the more it will cost. We need to convice the management though. That's harder, as we do write *working* software, but possibliy less maintainable so. Technical dept has no _immediate_ negative impact on the costumers (and therefore the management). Otherwise we would end up like those somewhat unfortunate developers in Java 6 or earlier Limbo. 
Nah, this is not simply type safe enums. For those reading, a type safe enum is one where each enum value is an instance of the enum type, so you can't cast a primitive value to an enum, or in any other way "cheat" the type system. While this may involve type safe enums, it's also "enums that participate in generics". Check the use cases. They're very interesting, if unexpected (to me). I'm sure after getting used to this, it'll be very powerful as I find the examples very compelling.
Why do you want to avoid turning DEBUG level logging on in production?
6 years? very optimistic :(
Sum types? In my java?
Hey, good ideas are like good wine. They ripe with time!
Seems great! But constructive criticism: how did you expect anyone to work that our from either your title, your initial comment, or your GitHub repo starting page? 
Both the linked article and the [JEP](http://openjdk.java.net/jeps/301) use the adjective *sharp* in relation to types - "sharply-typed" and "sharper types". At a guess it's referring to the generic type parameter. I've never heard this usage before. Both pages use it without introduction and I can't find anything on google - is it new?
&gt; Sum types? Or variants, or tagged unions, or enums with values, whatever you call them. &gt; In my java? In what java?
It might be a reference to the use of the word *sharp* in mathematics in contexts of subsets: *sharper bounds* means *narrower* or *more precise bounds*. As sharper bounds designate a smaller subset of the larger set, sharper types describe more conditions on the values, in turn making the value set smalled. Normal `enum E` has more values than `enum E&lt;String&gt;` after refactoring (unless all enum values are `&lt;String&gt;`, in which case refactoring was pointless). This way, you know more precisely what kind of values are expected, the same with sharper bounds. At least that's how I read it. However, I think I'd rather use the word *precise* instead of *sharp*. I'd say that typing sharpness (or typing precision) is yet another axis of typing systems (along static–dynamic and weak–strong) and is usually positively correlated with staticness. In fact, I don't think I know of a dynamically-typed language with sharp types.
Yea, some explanation would indeed be helpful, this post is semi-useless otherwise (since it's not like backing javascript with java classes in nashorn is anything new, assuming that's what you're getting at)
You seem to be conflating Spring and Java EE a bit here. They are different frameworks and approaches to solving similar problems and don't have a whole lot to do with each other. It is true that Spring does depend on Java EE in some places like Servlets, but overall when you are using Spring you won't be directly using Java EE. They also use very different runtimes. A Java EE application needs to be deployed to a fully blown Java EE server like Wildfly or Glassfish while most Spring apps get deployed into a Servlet container like Tomcat or Jetty.
That's a 90 times improvement. Not bat at all.
I bet this whole problem could've been solved with a SQL one-liner in 3 minutes and with 30kb of RAM. ^OK, ^^seeing ^^^myself ^^^^out
Finally! I can't wait for these to be implemented in Java 21
If you [log the auto-generated SQL property](https://vladmihalcea.com/2016/05/03/the-best-way-to-log-jdbc-statements/), Hibernate can also generate a one-liner that takes less than 30kB per query.
I think you're right. I think similar requirements lead to similar solutions... No reason to apologize :) I might got it wrong too...
Serious question from someone just joining the Java sphere: why does Oracle announce these enhancements for Java 10 when Java 9 doesn't come out until much later this year? By the time Java 10 is released, I won't even remember that they talked about doing this. Additionally, why not just include this small enhancement in Java 9? Something this small, with consideration to Oracles resources, should be the proverbial drop in a hat. It could even be included in a patch. Moving from the .NET realm, Java's release schedule feels erratic and slow rolled. 
One of the Amazon comments: &gt;3. Not only is it overpriced, it's not even particularly well written. Quite bluntly, the book's relatively short because it doesn't explain anything.
Doug Lea (Java concurrency lead) likes the LMAX Disruptor but considers it a niche use case that will not make it into the JDK. That means such a JEP would not have Async Loggers. Generally, I imagine Oracle's view is that even though JUL was a mistake, there is little to be gained by competing with the open source offerings in this space. The release cycle for open source projects is much shorter and therefore the pace of innovation higher. It makes more sense for Oracle to spend its limited design/dev/testing resources on things that _cannot_ be provided by a 3rd party library. Things like improvements to the language (value objects, long-indexed arrays, List&lt;int&gt; etc.) So yes, there's fragmentation in the logging space, and dependency management is a pain sometimes. But wishful thinking won't make that go away. Only innovation will. So let's encourage innovation and be willing to try new things.
What's wrong with SonarQube? 
You are wrong ;) Java EE vs Spring has been an epic battle that raged since 2003 or so. In practice they seem to be equally used. It's not Java EE's explicit goal to be ahead, rather to standardise what has proven to work in practice. It's not always that black and white, but that's the official goal. Java EE is generally a safe choice, exactly because of the long support and strict compatibility rules. 2 weeks ago everyone screamed about GWT, then last week it was Angular and this week it's Angular 2. Google changes quite often. Also yesterday everybody screamed about NoSQL and today about MicroServices. But the NoSQL hype has already died out largely and if microservices are still hot tomorrow has yet to be seen. Spring has a record for quickly wrapping and incorporating stuff into their ecosystem. If you're hype sensitive or really are the target audience for a certain tech, you often have it faster with Spring, but at the risk of seeing it fall out of fashion only a year later. Java EE with every release is just about modern enough to be a good candidate for new projects. The latest cycle however has been very problematic with oracle disappearing for over a year and not doing anything. Literally hundreds of much needed open issues didn't get done. 
The new ValueHandle API offers some of the features needed to implement a disruptor, and they're also adding the Flow reactive streams interfaces, so at least there's some nice work being done there. There's also the new system logger interface for internal JDK logging needs, but who knows how long it'll take before the JDK actually uses it internally everywhere. Besides value types, a macro system would be another nice addition similar in idea to Scala's, but I'm sure it'd be severely limited if it were ever implemented. Concrete templates like in C++ could help in that regard, too, but now I'm really getting off topic.
Guano 
Yep, that sounds URGENT. There is a desperate shortage of hangman games in the world at the moment. DROP EVERYTHING.
First of all, since this is help with *Java programming* it should be posted in **/r/javahelp** as the plenty hints on the page indicate. But *before posting there*, read the [**Posting Guidelines**](https://redd.it/48eykt) there. Second, learn to make a proper post. We all understand that you need help, but you need to tell us what you need help with, and [what you already have tried](http://whathaveyoutried.com). We are not going to do **your work**. Also, "URGENT" will drive people away from helping you because if something is urgent, *you* have done something wrong. **Post removed:** programming help and useless.
The link for "Stable Abstractions Principle Constraint" and the next one are broken, so it's not clear what those are about. Under "Average Component Dependency Constraint" there's a sentence saying "For more details read this." and there's no link.
Thank you for finding these. Unfortunately the original link for "Stable Abstractions Principle Constraint" is no longer alive, but I've replaced it with a similar one. Under "Average Component Dependency Constraint" the link was indeed completely missing, also remedied now.
The documentation might not be clear about it, but by packages I meant packages in your codebase and not in the libraries you use. But even if we talk about libraries, I think the interaction with one is usually confined to a small piece of a well-designed code base. There are exceptions of course (e.g. Guava or similar, technology and domain-agnostic utility libraries). Back to the general principle. Like any other good practice, keeping the dependencies low is not something to pursue at all costs. But something to keep in mind, because it usually yields benefits. It is closely related to the notions of low coupling and separation of concerns. You are right in that the using of metrics is a blunt tool. They don't tell you how good your code is, or how to improve it. But they can highlight structural traits that usually relate to problems (either as causes or as effects).
Yes. Thats the even more "civilized" way to do this.. But it was not possible to upgrade the versions of JPA/Hibernate to use it.
*There's that word again. "Heavy." Why are things so heavy in the future? Is there a problem with the Earth's gravitational pull?*
Can jOOQ replicate any SQL query? I keep seeing stuff like: .where(...).and(...) and I'm thinking... what about parentheses etc.?
Maybe the author wanted to modify the fetched JPA entities through JSF controls.
This article is frustrating. I thought it would be an in depth examination of the performance and architecture of the JVM. Instead it was just "the JVM is not that heavy" repeated over and over again, with shitty anecdotal evidence where he compares completely different applications and says the JVM outperforms (oh, your JVM can produce more PDFs than a 3-node Rails cluster can process? Gee, I wonder which task is harder. Not to mention, Ruby/Rails should *not* be your baseline performance standard.)
It will be lighter - after Java 9. 
It seems almost none of this article pertains to Java explicitly. It's just general "things to be aware of before parallelizing your code".
Unfortunately not at the moment. JPrinciple uses JDepend and the latter's latest version doesn't work with Java 8. Neither has it been updated since September 2015. There is a fork of JDepend that promises to fix this, I'm experimenting with that and will release a new version if everything goes fine.
Mutability of captured variables in closures, the way JavaScript allows, is actually extremely useful, and if you can counter this only with vague objections like "it's morally wrong", I can't quite take your opinion seriously. Sure, everything is immutable in functional languages, I'm fine with that, and Java doesn't allow captured variables to mutate (at the root level), I'm fine with that as well. As in, I accept it, not that I love it. But I see it as more of a technical choice, than the Java team sitting in a quiet room contemplating the morality of their JEPs. The inability to mutate a variable, but to mutate the objects it refers to means Java closures have the same semantics as an anonymous class before it, or even any other object instance, for ex. Foo foo = new Foo(someInt, someObj); Now in object ``foo``, you can't mutate ``someInt`` in a way that would change it in the parent scope, but if ``someObj`` is mutable, then foo can change it for its parent. The requirement to explicitly declare variables as "final" for closure/anonclass seems to be to avoid confusion, as we don't want when we're looking at the same variable in one block of code (as closure/anonclass are defined inline), for it to "split" into a parent copy and closure/anonclass copy with two distinct values. It'd work, but it'd probably be confusing to many developers. But in general, allowing mutability and using it intelligently is far more powerful in imperative languages. It requires more care, but with power comes responsibility. If we wanted guarantees on referential transparency and what not, we wouldn't use Java. 
[This article](https://blog.jooq.org/2016/11/08/use-jooq-to-read-write-oracle-plsql-record-types/) contains a nice little jOOQ query that is used to discover all recursively nested PL/SQL RECORD types from the Oracle dictionary views. The query is run from the jOOQ code generator. AllArguments a = ALL_ARGUMENTS.as("a"); AllArguments x = ALL_ARGUMENTS.as("x"); Field&lt;BigDecimal&gt; nextSibling = field(name("next_sibling"), x.SEQUENCE.getDataType()); DSL.using(configuration) .select(x.TYPE_OWNER, x.TYPE_NAME, x.TYPE_SUBNAME) .select( a.ARGUMENT_NAME .as(ALL_TYPE_ATTRS.ATTR_NAME), a.SEQUENCE .as(ALL_TYPE_ATTRS.ATTR_NO), a.TYPE_OWNER .as(ALL_TYPE_ATTRS.ATTR_TYPE_OWNER), nvl2(a.TYPE_SUBNAME, a.TYPE_NAME, inline(null, a.TYPE_NAME)) .as("package_name"), coalesce(a.TYPE_SUBNAME, a.TYPE_NAME, a.DATA_TYPE) .as(ALL_TYPE_ATTRS.ATTR_TYPE_NAME), a.DATA_LENGTH .as(ALL_TYPE_ATTRS.LENGTH), a.DATA_PRECISION .as(ALL_TYPE_ATTRS.PRECISION), a.DATA_SCALE .as(ALL_TYPE_ATTRS.SCALE)) .from(a) .join(table( select( a.TYPE_OWNER, a.TYPE_NAME, a.TYPE_SUBNAME, min(a.OWNER ).keepDenseRankFirstOrderBy(a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID, a.SEQUENCE).as(a.OWNER), min(a.PACKAGE_NAME ).keepDenseRankFirstOrderBy(a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID, a.SEQUENCE).as(a.PACKAGE_NAME), min(a.SUBPROGRAM_ID).keepDenseRankFirstOrderBy(a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID, a.SEQUENCE).as(a.SUBPROGRAM_ID), min(a.SEQUENCE ).keepDenseRankFirstOrderBy(a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID, a.SEQUENCE).as(a.SEQUENCE), min(nextSibling ).keepDenseRankFirstOrderBy(a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID, a.SEQUENCE).as(nextSibling), min(a.DATA_LEVEL ).keepDenseRankFirstOrderBy(a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID, a.SEQUENCE).as(a.DATA_LEVEL)) .from(table( select( lead(a.SEQUENCE, 1, a.SEQUENCE).over( partitionBy(a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID, a.DATA_LEVEL) .orderBy(a.SEQUENCE) ).as("next_sibling"), a.TYPE_OWNER, a.TYPE_NAME, a.TYPE_SUBNAME, a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID, a.SEQUENCE, a.DATA_LEVEL, a.DATA_TYPE) .from(a) .where(a.OWNER.in(getInputSchemata())) ).as("a")) .where(a.TYPE_OWNER.in(getInputSchemata())) .and(a.OWNER.in(getInputSchemata())) .and(a.DATA_TYPE.eq("PL/SQL RECORD")) .groupBy(a.TYPE_OWNER, a.TYPE_NAME, a.TYPE_SUBNAME) ).as("x")) .on(row(a.OWNER, a.PACKAGE_NAME, a.SUBPROGRAM_ID).eq(x.OWNER, x.PACKAGE_NAME, x.SUBPROGRAM_ID)) .and(a.SEQUENCE.between(x.SEQUENCE).and(nextSibling)) .and(a.DATA_LEVEL.eq(x.DATA_LEVEL.plus(one()))) .orderBy(x.TYPE_OWNER, x.TYPE_NAME, x.TYPE_SUBNAME, a.SEQUENCE) .fetch(); The generated SQL: SELECT "x"."TYPE_OWNER", "x"."TYPE_NAME", "x"."TYPE_SUBNAME", "a"."ARGUMENT_NAME" "ATTR_NAME", "a"."SEQUENCE" "ATTR_NO", "a"."TYPE_OWNER" "ATTR_TYPE_OWNER", nvl2("a"."TYPE_SUBNAME", "a"."TYPE_NAME", NULL) "package_name", COALESCE("a"."TYPE_SUBNAME", "a"."TYPE_NAME", "a"."DATA_TYPE") "ATTR_TYPE_NAME", "a"."DATA_LENGTH" "LENGTH", "a"."DATA_PRECISION" "PRECISION", "a"."DATA_SCALE" "SCALE" FROM "SYS"."ALL_ARGUMENTS" "a" JOIN ( SELECT "a"."TYPE_OWNER", "a"."TYPE_NAME", "a"."TYPE_SUBNAME", MIN("a"."OWNER") KEEP (DENSE_RANK FIRST ORDER BY "a"."OWNER" ASC, "a"."PACKAGE_NAME" ASC, "a"."SUBPROGRAM_ID" ASC, "a"."SEQUENCE" ASC) "OWNER", MIN("a"."PACKAGE_NAME") KEEP (DENSE_RANK FIRST ORDER BY "a"."OWNER" ASC, "a"."PACKAGE_NAME" ASC, "a"."SUBPROGRAM_ID" ASC, "a"."SEQUENCE" ASC) "PACKAGE_NAME", MIN("a"."SUBPROGRAM_ID") KEEP (DENSE_RANK FIRST ORDER BY "a"."OWNER" ASC, "a"."PACKAGE_NAME" ASC, "a"."SUBPROGRAM_ID" ASC, "a"."SEQUENCE" ASC) "SUBPROGRAM_ID", MIN("a"."SEQUENCE") KEEP (DENSE_RANK FIRST ORDER BY "a"."OWNER" ASC, "a"."PACKAGE_NAME" ASC, "a"."SUBPROGRAM_ID" ASC, "a"."SEQUENCE" ASC) "SEQUENCE", MIN("next_sibling") KEEP (DENSE_RANK FIRST ORDER BY "a"."OWNER" ASC, "a"."PACKAGE_NAME" ASC, "a"."SUBPROGRAM_ID" ASC, "a"."SEQUENCE" ASC) "next_sibling", MIN("a"."DATA_LEVEL") KEEP (DENSE_RANK FIRST ORDER BY "a"."OWNER" ASC, "a"."PACKAGE_NAME" ASC, "a"."SUBPROGRAM_ID" ASC, "a"."SEQUENCE" ASC) "DATA_LEVEL" FROM ( SELECT lead("a"."SEQUENCE", 1, "a"."SEQUENCE") OVER ( PARTITION BY "a"."OWNER", "a"."PACKAGE_NAME", "a"."SUBPROGRAM_ID", "a"."DATA_LEVEL" ORDER BY "a"."SEQUENCE" ASC ) "next_sibling", "a"."TYPE_OWNER", "a"."TYPE_NAME", "a"."TYPE_SUBNAME", "a"."OWNER", "a"."PACKAGE_NAME", "a"."SUBPROGRAM_ID", "a"."SEQUENCE", "a"."DATA_LEVEL", "a"."DATA_TYPE" FROM "SYS"."ALL_ARGUMENTS" "a" WHERE "a"."OWNER" IN ('SAKILA', 'SYS') ) "a" WHERE ("a"."TYPE_OWNER" IN ('SAKILA', 'SYS') AND "a"."OWNER" IN ('SAKILA', 'SYS') AND "a"."DATA_TYPE" = 'PL/SQL RECORD') GROUP BY "a"."TYPE_OWNER", "a"."TYPE_NAME", "a"."TYPE_SUBNAME" ) "x" ON (("a"."OWNER", "a"."PACKAGE_NAME", "a"."SUBPROGRAM_ID") = (("x"."OWNER", "x"."PACKAGE_NAME", "x"."SUBPROGRAM_ID")) AND "a"."SEQUENCE" BETWEEN "x"."SEQUENCE" AND "next_sibling" AND "a"."DATA_LEVEL" = ("x"."DATA_LEVEL" + 1)) ORDER BY "x"."TYPE_OWNER" ASC, "x"."TYPE_NAME" ASC, "x"."TYPE_SUBNAME" ASC, "a"."SEQUENCE" ASC Challenge me with your parentheses :)
/r/javahelp
Sure. I don't see any reason why not.
Sure, but if you choose to use Oracle's HotSpot JVM, you probably need to acquire commercial licenses from them, since a POS terminal is probably not considered a "general purpose" computer. Not so if you ship OpenJDK. I'm pretty sure you would be in the clear shipping Zulu, but you might still want to consider licensing in that case to obtain support.
&gt; After a few seconds of inactivity ... If only, if only.
&gt; Only a truth in certain situations You mean in most situations. Find me a situation, where Python/Ruby can outperform JVM. 
Niiiiiiice!!
Let's say: WHERE foo IS NULL AND (bar IS NULL OR (bar = "" AND LEN(baz) &gt; 3))
Worth pointing out that you can use WireMock if you're still stuck on Java 7. Hoverfly (I believe) supports Java 8+.
👍👍👍✖️💯❗️
Is there a hosted version I'm unaware of? I host my own sonarqube server.
Eh, Erlang has good performance if you define performance a certain way. Every operation is slower but you don't have a stop the world GC so you'll often have a lower p999 or p100, which can be an important metric for soft real time applications.
Yeah you can use their own hosted version. https://sonarqube.com/projects This would store the code publicly that it analyzes, but not if you host your own server.
You're better off using [org.basepom.maven:duplicate-finder-maven-plugin](https://github.com/basepom/duplicate-finder-maven-plugin) and failing your build if you have duplicates in your classpath. Allowing extras and letting a *machine* delete them will invariably lead to unstable builds. 
Yup, precisely, while Java is attacking throughput, Erlang is attacking latency. Very complementary approaches, love them both.
Hm that's a neat trick, but I'm not convinced it's a good idea in general. What happens if I fetch both the summary and the "full" object, and mutate both? Both are managed by hibernate, which state is written back to the database?
The more bytes you have filled in on your harddrive, the more it weighs. So the size of the program correlates to the weight of the server in the future. Kind of like how your phone gets heavier when fully charged compared to empty, sorta like a car and gas. /s
The big JavaScript engines are definitely better, V8 even beats Java in one test here: https://benchmarksgame.alioth.debian.org/u64q/javascript.html But in most tests Java still does a lot better. Java also has a few pathological cases where it's faster than C. JavaScript's performance is, if anything, a validation of Java's approach of garbage collection, JIT compilation, progressive optimization and so on, because those big JS engines are basically small JVM replicas at this point, and not naive opcode interpreters like Python and Ruby.
I hate the node circlejerk. If I want JS I'll use nashhorn
if I want JS I'll have it translated from a good language.
&gt; if I want JS I'll have it translated from Scala using ScalaJS. FTFY 
Why in God's name does what you described in your second paragraph exist
That's where the power of peer review comes into play.
Like /u/dartalley said it is about removing unused classes. Like it is stated on GitHub it can indeed not do any voodoo regarding reflection. You can however specify packages that you want to keep if you have knowledge about your code's behavior in terms of reflection.
&gt; To be fair, batteries do get heavier. You are technically correct. The best kind of correct.
How many developer are actually using CDI (@Named) instead of Managed Bean?, because even the latest books are not using it, and in JSF 2.3 will finally get deprecated.
[removed]
&gt; For instance, with serverless technologies becoming all the rage (in the cloud at least) you will find that the JVM is indeed way too heavy. If a container is going to be spun up to execute a single method call the extra time for the JVM to initialize and for JIT compilation to occur is just way too long Which is why nobody with even a microgram of brains will ever implement "serverless" that way, no matter which language. Hell, even C would be kinda slow that way since you're basically describing CGI scripts, and there's a good reason Java beat those on performance even before it had JIT! The whole damn point of "serverless technologies" is that they will *never* spin up a whole damn container to execute a single method call; instead the container and the JVM will be up the whole time, with the worst case being that it has to load some classes, and you could even optimize that by just paging in a pre-JITed image from some low-latency storage (ever heard of SSDs?).
There's so much code in there. What exactly did you try to accomplish? Why all those normalizers for autocomplete functionally? And cache? consider using a trie if you haven't (couldn't find where if you did)
Oracle POS (OrPOS) is written is Java. I have the unfortunate pleasure of working with it everyday lol. In general I've seen many Java based POS systems, especially among large retailers / enterprises. 
Came here to say this (trie). I couldn't really find where the searching happens, but objects are only searchable by a single field and it appears to have some sort of algorithm that compares the search word with the actual word. Looks like a lot of code to implement a cache.
This is not well known to students fresh out of college
This couldn't be more accurate.
Section 1 ("Definitions", which is the second paragraph), defines some important terms: &gt; "General Purpose Desktop Computers and Servers" means computers, including desktop and laptop computers, or servers, used for general computing functions under end user control (such as but not specifically limited to email, general purpose Internet browsing, and office suite productivity tools). The use of Software in systems and solutions that provide dedicated functionality (other than as mentioned above) or designed for use in embedded or function-specific software applications, for example but not limited to: Software embedded in or bundled with industrial control systems, wireless mobile telephones, wireless handheld devices, kiosks, TV/STB, Blu-ray Disc devices, telematics and network control switching equipment, printers and storage management systems, and other related systems are excluded from this definition and not licensed under this Agreement. and &gt; "Programs" means (a) Java technology applets and applications intended to run on the Java Platform, Standard Edition platform on Java-enabled General Purpose Desktop Computers and Servers; and (b) JavaFX technology applications intended to run on the JavaFX Runtime on JavaFX-enabled General Purpose Desktop Computers and Servers. Then, Section 2 reads in full: &gt; 2. LICENSE TO USE. Subject to the terms and conditions of this Agreement including, but not limited to, the Java Technology Restrictions of the Supplemental License Terms, Oracle grants you a non-exclusive, non-transferable, limited license without license fees to reproduce and use internally the Software complete and unmodified for the sole purpose of running Programs. THE LICENSE SET FORTH IN THIS SECTION 2 DOES NOT EXTEND TO THE COMMERCIAL FEATURES. YOUR RIGHTS AND OBLIGATIONS RELATED TO THE COMMERCIAL FEATURES ARE AS SET FORTH IN THE SUPPLEMENTAL TERMS ALONG WITH ADDITIONAL LICENSES FOR DEVELOPERS AND PUBLISHERS. Taken together, then, this means that Oracle's Java SE standard binary license lets you distribute Hotspot JRE (and JavaFX) -- excluding the commercial features -- only for use on what they define as "General Purpose" computers. Just to be complete, the "Commercial Features" are defined in Table 1-1 in [this document](http://www.oracle.com/technetwork/java/javase/terms/products/index.html). Also note that there are additional distribution limitations called out in paragraphs C, D, F, and G of the Supplemental License Terms section of the license. 
Of course Proguard is a great tool for many things. I didn't really look into the configurations that much because I only cared for shrinking. It is very possible that you can get better results if you do
I assure you I'm shitposting
So, if you distribute your program with Oracle's JVM and your customer deploys your program on a general purpose server but uses that sever for nothing else but to run your program it's actually not a General Purpose Server and you are in violation of the Oracle agreement. Wow, that's a detail to be aware (and to double check with a lawyer because I'm not one). 
Agreed, Erlang does not JIT to native code, at least by default. The language is focused on robustness, not necessarily computational speed. So it would be an unfair benchmark comparison.
So is this just Clojure + core.typed + bunch of fancy macros? :P
I was more referring to the majority of comments here ;).
That link shows Java being significantly faster than PHP 7. How does it back up the claim PHP is *often* faster than Java? 
Ah, my bad. But some here think PHP/Python/Ruby are faster than Java, so better be safe than sorry.
Considering how much money are poured in them, I wouldn't be surprised if they outperform Java one day(unlikely though, because they have different goals, and JVM evolves too). Also, V8 is created a team which includes Lars Bak, who also worked on HotSpot. 
I'm already writing it! /s
Lol so much bloat in this library. This is why java gets a bad name. You don't need 4 abstract classes every time you want to do something basic.
If you have to post shit like this then it's quite obviously heavy. Give it up. Java is dead and extremely antiquated 
Perhaps you see too much code there but the user, in contrast, would write very little code and that was the purpose(You just implement an interface and a data loader essentially with some config). &amp;nbsp; I thought such an implementation could be an easily-embeddable, multi languages/locales and in-memory framework to load, normalize, tokenize, index, autocomplete and sort user data. &amp;nbsp; For the normalizers, I added few to harmonize the data and the queries: One normalizer to remove accents and such(Éthiopie and Équateur should both come up when one types 'E' in French for instance), one to normalize to lower case, and one to strip white-spaces. &amp;nbsp; The cache is also optional, it's basically a least-recently-used cache to just speed up the most popular queries and can be activated or deactivated as desired: &lt;jcompleter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="org/jcompleter/xsd/jcompleter.xsd"&gt; &lt;!-- Example of a country autocompleter with a 100-element LRU cache, it caches query whose length is between 2 and 5 chars --&gt; &lt;completer name="countryCompleter" numberOfQueriesToCache="100" minimumQueryLengthToCache="2" maximumQueryLengthToCache="5" loaderFactory="org.jcompleter.example.CountryLoaderFactory" /&gt; &lt;!-- Example of a person name autocompleter with no cache --&gt; &lt;completer name="personCompleter" numberOfQueriesToCache="0" loaderFactory="org.jcompleter.example.NameLoaderFactory" /&gt; &lt;/jcompleter&gt; Or programmatically: Completer&lt;Element&gt; completer = new Completer&lt;Element&gt;() .setName("countryCompleter") .setLoaderFactory(new CountryLoaderFactory()) .setNumberOfQueriesToCache(0) .build(); For the trie, it is sure a good idea. But for now, for the default indexer, I went with a scalable ConcurrentNavigableMap based implementation with tokenization on the word border. I'd compare its performance to a trie based implementation later and see which to adopt as the default. You can make your own implementation of Indexer interface and configure it as follows: public class YourIndexer&lt;E&gt; implements Indexer&lt;E&gt; { ........ } public class YourIndexerFactory&lt;E&gt; implements IndexerFactory&lt;E&gt; { @Override public Indexer&lt;E&gt; create() { return new TrieIndexer&lt;E&gt;(); } } And configure it: &lt;jcompleter&gt; &lt;completer name="countryCompleter" loaderFactory="org.jcompleter.example.CountryLoaderFactory" indexerFactory="com.YourIndexerFactory"/&gt; &lt;/jcompleter&gt; Or programmatically: IndexerFactory&lt;Element&gt; yourIndexerFactory = new YourIndexerFactory&lt;Element&gt;(); Completer&lt;Element&gt; completerWithYourImpl = new Completer&lt;Element&gt;() .setName("countryCompleter") .setLoaderFactory(loader) .setIndexerFactory(yourIndexerFactory) .build(); Thanks,
oy... my point is that the situation matters. The JVM doesn't win in every case any more than assembly wins in every case, or C, or Python, or anything really. Fanboys love to talk their particular "thing" up no matter what... the real world is more subtle than that.
Compile the Python to binary and it runs as fast as a C.
Meh. You might want to try quick-search instead: http://zigurs.com/qs/
I’d love to see LuaJIT on benchmarksgame. It’s so capable of beating V8 at least once.
&gt; You simply don't have the information you'd require at compile time oy... Cython -&gt; https://github.com/cython/cython &gt; based on what you've said so far, you have a lot more to learn about parsers, compilers, and language runtimes I have WRITTEN compilers and parsers. Perhaps you have used a few without even knowing it. I've been doing this professionally since before there was an internet. Got started in the 8bit days. So, be careful son. 
You're not reading very carefully, are you. I didn't say you can't compile it to C, I said you don't have the information to make it as fast as conventionally written C code. C doesn't magically go fast, just because it's C. You can write slow code in C, and that's what happens when you translate dynamic script semantics to it. Also... Cython is *not* Python. It's a C *dialect*, that just happens to look like Python, so it's easy for Python coders to pick it up. But it has types and restrictions, which Python doesn't, in order to make it viable.
Shameless plug. I also maintain a Java autocomplete library named [Completely](https://github.com/fmmfonseca/completely). It relies on text preprocessing to create an in-memory index for efficiently answering exact or fuzzy searches in large data sets. The bounds depend obviously on the hardware, but I've successfully indexed a wikipedia dump with 1.000.000 lines (4.000.000 words) with very fast query times (&lt; 20ms). Unlike Lucene and other full featured text search libraries, the API is small and easy to get started. It's available in the [Maven central repository](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.miguelfonseca.completely%22). 
I suppose more zeros on a CD/DVD means it weights less...
Quick reminder : Angular 1.x is now called AngularJs and Angular 2 (4, 5, 6....) is called Angular ;)
I disagree about the "Demise of JavaScript frameworks: JavaScript and HTML 5 standards are become more and more powerful. You can achieve a lot without any external dependencies. " JavaScript and HTML5 are indeed becoming more powerful, but any non-trivial front-end needs some sort of UI framework to structure and organize stuff, otherwise you'll end up with spaghetti code. Yes, there is a trend for minimalistic UI frameworks, but frameworks per se are not going anywhere.
cheers. Any feedback is appreciated!
thanks, I will give it a look as a comparison. It fills one of the gaps I've written JPrinciple for. The other were, as mentioned above, some metrics/constraints Sonar doesn't support. JPrinciple is an opinionated tool, I wanted to encourage Hexagonal Architecture and DDD practices.
Could you use some build tool to build your application (gradle/maven)? I do not want to download eclipse just to build the tool myself. Also add benchmarks about your tool. Stuff like jar size before/after, speed, etc are interesting to compete against battle tested tools like ProGuard (yes, it also does other things, but people use it heavily in Android to shrink size for distribution)
This is not the same though since you could bundle a library for a specific functionality, but you do not want to ship the whole thing.
[removed]
By that logic the JVM starts fast if you disable the JIT compilers. Obviously a runtime without JIT compilers will "start" faster in some sense as it will just never warm up at all.
Why sharing .jar instead of source?
it sounds like both answering your question and your prayers :D
In those rare cases, we have just grabed the source and tests. it's been a handful of files and we've essentially taken responsibility for them (forked). If it were many or we didn't want to take on the maintenance for it, I would lean toward shipping the whole module even if there are things in it we don't need. YMMV with either approach I guess. Just presenting an alternative to the one OP gave. 
Technically, it's not really Oracle who decides or announces enhancements for Java, or at least not directly. [OpenJDK](http://openjdk.java.net), the reference implementation of Java, is an Open Source project that anyone can contribute to through [JEPs](http://openjdk.java.net/jeps/1) (a first, rather informal step) and [JSRs](https://www.jcp.org/en/home/index) (a more formal step). What happens is that many of the decision makers in this process, as well as many of the proposers and implementers of new features, actually work for Oracle, and probably decide what to direct their efforts to based on Oracle's own roadmap. This is why many times things are expressed as "Oracle does this and that", but strictly speaking it's a different body. As per the speed at which things get done, I think the main problem is that Java is a) considerable big (20 years of backwards compatibility isn't easy to keep up to) and b) used and developed by a diverse population. Coordinating changes from different contributors, and making sure such changes don't conflict with each other, it's not a trivial task. On the other hand, the user base is so large that it's hard to make sure that all (or at least most) corner cases have been addressed. So, even the most seemingly simple enhancements need a lot of checking. Mark Reinhold, chief architect for the Java platform group, has previously spoken about [securing the train](http://mreinhold.org/blog/late-for-the-train), discussing the dilemma of schedule vs. features. His argumentation is that it's better to have a somewhat predictable schedule of new versions of Java, even if at the expense of delaying new features. Obviously some people might disagree with it, but I guess when you have such a large user base it's impossible to keep everyone happy, so you just have to settle for the lesser evil.
Plenty of people use Haskell in large teams on large projects. Just need people who have taken the time to learn this stuff.
I only use @Named. I switched when they added View scope to Named beans.
Examples?
Haskell is somewhat of a special case though. It has a unique garbage collector which makes tons of memory allocations a non issue.
&gt; It has a unique garbage collector which makes tons of memory allocations a non issue. I don't think that's really true. It's definitely optimized for Haskell's needs, but the GC doesn't really do much out of the ordinary. It's a generational GC with a few nice tricks for pure functional programming.
Source code added
I build server side software. If I did mobile, I'm sure my PoV would be totally different in many ways, this includes. 
I believe the lint plugin analyzes the code locally based on what rules are set at the sonarqube server. Then, when you do your production build with maven or whatnot, you trigger server analysis on the code and track changes to quality over time. So while you code, sonarlint warns you if you are doing something that will not pass quality gates. The full analysis runs on the server. You can also set up the server to analyze pull requests on github, but I haven't gotten around to setting that up yet.
I'd love to read those performance metrics you got?
You do know an example of something is not the only use for something, right?Like how can you be able to program anything if you don't know this? Unless you just copy and paste each chunk of code, I suppose... 
Funny somebody called `python-scripter` writes it in Java :D
&gt; What exactly do you think reflection is? All OO systems implement these things very similarly. You have this talent of somehow being hitting bad examples for your arguments. Generics is precisely one area where .NET and Java have very different runtime implementations. A generic type in Java doesn't know what its type is. Not via reflection, not via any other way. This information exists at compile time, and then it's gone. You can obtain the type of a parameter or a variable that *refers* to a generic type, but you can't access this information *within* the generic type. While in .NET you can. &gt; Sorry, I'm referring to the work being done right now on Java. Yeah, sure you are. Because talking about what's coming in Java in about 5 years is very relevant when discussing the current mechanics of the JVM. 
Whats “modern“ about it?
Monstrous EE server? You mean 60mb for TomEE, Liberty, or Payara? Often the entire Java EE server is smaller than the fat wars or uber jars you deploy with Spring boot.
Right, as I said in my previous answer, I am comparing it to the Full Stack Wildfly. But I've check what is the footprint of Spring Boot jars which I am deploying. None of them is actually bigger than 50mb. And I don't really care how big it is. They're built on CI and go to "prod" through 1GBit.
xD Python is my favorite scripting language, and it served as my first programming language. However I now write larger projects in Java, plus Java is usually significantly faster than Python.
more Java EE propaganda about Thin WARs and far JARs being bad, blah, blah. We've been using uber JARs with Dropwizard for years now and have zero problems. No way we'd ever go back to the whole "app server and WARs" approach and deal with all of that. Especially in a Docker world, the Uber Jar approach has more and more advantages. Just see how easy it is to deploy Go apps, especially in Docker. Case closed.
Instead of another Haskell on JVM I'd love to see something like F#. I know there are some ML-like languages on JVM but none of them are more than a hobby projects.
There are pre-built .jar files in the [release section](https://github.com/Deconimus/JarShrink/releases), so you don't really have to build it yourself. If you still want to do it it's actually pretty straightforward, as described [here](https://github.com/Deconimus/JarShrink/issues/2). Benchmarking the before and after filesizes won't be of much help, since it will be a completely different story for each program. I'll take a look at benchmarking processing speeds though.
Java is more than just a language. This language happens to run on the Java platform, so it's relevant here. 
Interesting, thanks for the TL;DR. Reminds me of [Lambdaj](https://github.com/mariofusco/lambdaj). I've recently [interviewed Mario Fusco (the author)](https://blog.jooq.org/2016/12/20/jooq-tuesdays-mario-fusco-talks-about-functional-and-declarative-programming/), and he's revealed similar hacks using proxies to emulate lambdas / closure prior to Java 8.
(sorry for hi-jacking) Being a content producer myself, I'm curious about your thoughts regarding these video tutorials... Pros? Cons? Other thoughts?
...and that would terminate the old version (taking care to run the @predestroy methods), then, launch the new? I didn't think spring would do that. News to me! 
Someone should've shown him IntelliJ and a few shortcuts...
Cool, Java's slowly morphing into Scala.
&gt; if it were not for the absolutes you speak in None of my statements were absolutes? Of course laziness has bitten people before. &gt; - ... yet to give **us** any pain &gt; - extremely **rare** &gt; - it's **usually** not hard We're doing a communications system, so it is somewhat realtime and performance critical, though not hugely.
I suppose it follows the same rules as any other keyword. You can't write "goto", but can write "gotoSomewhere". So, my guess is you are correct.
You're right. 
That's because the biggest non-Java JVM language [pretty much does everything an ML can](https://github.com/yawaramin/scala-modules).
I don't believe Scala was broken by jre8. If it was broken then it must have been for a very short amount of time. The update you're talking about took advantage of jre8's new features. 
At least give us some context. Is it for entry CS course? For high school? Is it your distributed systems final?
Sorry bud, if you've cut it this close, you deserve to fail. I wouldn't want to hire someone like you.
Java 9 won't have value types and generic specialization. Java 10 will... I don't know why you keep pretending to know what's happening with Java. 
You're looking for this article: https://coati.io/blog/why_working_on_chrom_made_me_develop_a_tool_for_reading_source_code/
As a keyword, it could be used to denote something (other than a variable). For example, in Scala `_` can be used as an anonmyous variable (among other uses). Example: list.map(_.toLowerCase) Edit: Oh, you mean why would anyone use `_` as a variable before Java 9? Well, makes for a good "don't care" name. 
Ah, so it's akin to my x. Or as I call it, the idgaf variable
Or kotlin
I think youre just afraid your Java skills are somehow being devalued. The negativity just doesn't make sense otherwise. 
Check out Kumuluzee if you like Java EE. It's Java EE microservices.
In Python the underscore denotes an identifier that the reader could just ignore. This is sometimes useful if an API returns a tuple and you are not interested in some value. Often one sees this within a list comprehension. To be honest I haven't seen this in Java yet.
Brian and the others are trying to get it done by 9.
You probably took the test already, how did it go? Next time, i hope you will be well prepared and need not have to ask help here. If not, give us more context so we can help you better.
Not really. It is probably great JavaEE servers feature which I am totally ignoring.
Would be nice to filter out (or in) Android stuffs.
on github they have something similar https://github.com/trending/java?since=monthly
https://www.reddit.com/r/java/comments/5nil4t/eta_modern_pure_functional_programming_on_the_jvm/dcbt12e/?context=10000
/r/titlegore 
Keep crying.
As I said, I don't care. For me it is important to have completely stateless REST service with MongoDB, OAuth2 and integration tests and be able to create it within 3h. Why would I need a @predestroy feature if I don't have a state within my app?
I think I remember Lombok changed from @_ (one underscore) to @__ (two ) to avoid this specific issue
If anyone has anything specific they would like to see done in this style please let me know. The site itself is built using the approach highlighted by the posts. It runs as an executable Jar on AWS. Ideally I would like to put the entire site on github not just the common code / examples but its too early for that right now. Cut some corners to get the site live. Topics I plan to cover soon * REST * Server side HTML templating / rendering * SQL Migrations * DB connection pooling * SQL Transaction per route * Graceful shutdown * build / deploy script to AWS 
Nice! Seems a bit like QuickCheck.
[Direct Github link](https://github.com/Stuie/papercut) I wrote Papercut to help reduce technical debt. I hope other people find it useful. Please let me know if you have questions or suggestions.
That says: &gt; Warning, it seems to me there is a '_' variable in the Java code for Clojure. Which, if I'm not mistaken, means not that Clojure is broken on Java 9, but that you cannot compile the Clojure compiler itself because its own (Java) source code has a reserved symbol, which probably can be refactor-renamed in two seconds.
First, I read every post you made on this thread -- they were all negative, thus my comment. Second, languages that add-to and interoperate-with the Java ecosystem are perfectly at home on this sub. Someone who writes Java libraries can assume that Eta authors will use their library -- more code reuse is good no? Java coders who want type-classes and other strong functional programming capabilities can opt to use this language in the right situations. Having options when the core language is missing a feature is good, right? Java coders who need to integrate w/ existing Haskell code now have another strong option. This is a win, yes? The only projecting being done is that you have decided that you don't need this tool, and you don't want to see anything that doesn't directly apply to you on your precious sub -- sorry but the world doesn't turn just for you, friend.
these useless cosmetic changes that are just breaking things for the sake of breaking them are cancer. i don't use underscore in my code, but it's been a valid identifier. deleting it just for the sake of it is nothing but bureaucracy run amok the one thing that kept java relevant all these years has been backwards compatibility, and now they're breaking stuff intentionally
Neat
Ctrl+A Delete. Problem solved.
With Java EE it's just a few lines as well. JTA is used more than you think behind the scenes, but if not it's a few 100kb just sitting there on your disk and not being used. Do you also strip each and every class or method from the JDK that you happen not to use???
Tempting at times. :-)
&gt; the advantage of erlang is that threads are very lightweight with cheap context switches. for algorithms that depend on many threads, the performance is far beyond what vanilla java can handle The advantage of Erlang's model isn't as much that its fibres are cheap (all fibres are cheap, and they're trivial to implement in every language: it's just an event loop with subscribers avoiding blocking IO). The advantage is that they're pre-emptive, which yields the low latency guarantees. Kilim is an interesting thing, thanks for mentioning it. I wonder if we can call it Java, because when you code in Kilim you're pretty much in your own world, despite it's ostensibly Java. One blocking call in a third party library and... I'm not sure, but I can't imagine it won't block.
I am looking forward for Jigsaw - more or less this is the answer for your question. 
&gt; Non-recursive tail call is handled using trampolines. Are there any resources about this? This is an interesting concept to learn about.
Since the JVM doesn't optimise tail calls, almost all Functional languages on the JVM implement something like this. [Here's](http://blog.richdougherty.com/2009/04/tail-calls-tailrec-and-trampolines.html) Scala's version of trampolines, nicely explained by Rich.
Now I understand what non-recursive tail call really means. Thanks for the informative article.
Reddit markdown compresses whitespace. You should format the example into a code block by indenting all lines with 4 spaces.
Bye
I'm not "bullshitting", I'm mocking the way you throw a name in there as if it somehow makes you less wrong. Generics over primitives are for Java 10. The JEP is full of unresolved issues, and is with status "candidate", and scheduled for "Valhalla" which is codename of the project for Java 10+ enhancements. Please take your issues elsewhere. BTW, I'm in bed with Mark right now, he says hi.
FizzBuzz enterprise edition: https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition 
But then you still have that Java.util.Set sitting by there, even though you do not use it. Does that not bother you still?
thanks! (fixed)
Oh, gosh you have a mountain to climb! I don't usually recommend Spring, but in this case everything is there in one place, ready to go. https://spring.io/guides/gs/accessing-data-jpa/ Start with this. And, I apologise to the JavaEE people.... but, honesty, JavaEE is just too big of a mountain to clime..., spring boot give you the best chance to be up and running in an hour.. 
Thanks, old man. ;)
I'm writing a website about writing embedded web servers using undertow. Its probably a much lower learning curve than Java EE or Spring if you have an understanding of HTTP. Think of Undertow almost like a node server. Here is a hello world server. https://www.stubbornjava.com/posts/java-hello-world-embedded-http-server-using-undertow There are a bunch more posts with more advanced topics also.
I would use AssertJ [1] instead of Hamcrest, but else seems fine. --- [1] http://joel-costigliola.github.io/assertj/
Once a week, meet and reduce it together. Nobody wants to be the tech debt guy or the test guy etc. you can also learn a lot from each other.
Came here this, not disappointed.
That's slightly depressing. I don't think I've ever seen a manager buy into the whole "complete rewrite" thing. I've had a lot more success with incremental improvements. You just have to work out how to do that in each case. Sounds like a good start would be to stop making that file any bigger...
You look like the one with the on his shoulder.
Installed the docker version, and compiled the sample code just fine. However, it failed to run with a "invalid or corrupt jar file" error message. Tried to contact the creators on Slack, but no response as yet, no mention of that in the FAQ. Shame, because it looked interesting, but until (and unless) a community builds up, getting help might be very difficult. Maybe I'll have a look at it after they release 1.0 and beyond.
&gt; Regardless, this conversation has meandered off the main point (situation matters) and my repeated attempts to bring it back to sanity have failed. Oh yes, saying "oh I was talking about Valhalla all along", a future and yet non-existent distribution of JVM, in a discussion about the current state and performance of JVM was definitely on point by you. It wasn't at all a spin so you can be "right" when none of your information throughout the entire thread Java was accurate. "Situation matters" is correct. But when you know enough about a situation to make a call and you say silly things like "hey, we can compile Python into binary as fast as C" and what not, then we're crossing this thin line between deferring a judgment, and demonstrating being unable to make any sort of judgment whatsoever, beyond generic platitudes. "Situation matters" shouldn't be an excuse for spouting factual mistakes and not understanding the engineering trade-offs of the technologies you're talking about.
Well said. And feel free to disagree with me if you can manage a complete sentence. 
&gt; "Situation matters" is correct. That's all I was looking for from you. Thanks.
IntelliJ IDEA sucks. I tried to move to it but there are Eclipse's features I can't live without. One of the most basic is incremental compilations accross projects with multi inter depedencies, dependencies that you can't even define. At least I didn't find how to do that. The Eclipse's Problems View is not in IntelliJ IDEA. Perspectives in Eclipse with configurable views are killer features.
Study with a friend.
Hello, I'm Chuck and I am your friend!
So far, I can't say I've needed many (or any) of the features, though for those with the need it may be a nice change. IMO I'd avoid the "fatal" log level in almost all cases I can imagine (but we do mostly web dev) and the (sometimes) expensive operation to produce a log output (ever). The custom log levels could also be really frustrating on large teams, generally speaking I've found that a more prescriptive style is much better for that to encourage some level of consistency. I'm not saying that one is better than the other, but the arguments so far aren't convincing for someone like me to switch (I'd love to hear cases where someone has a different result!)
Netflix did a study on NIO and async communications. http://techblog.netflix.com/2016/09/zuul-2-netflix-journey-to-asynchronous.html This is especially interesting because they put their production grade monitoring results together and published it. Hope you will find something helpful for yourself.
Library Genesis http://gen.lib.rus.ec/
Amazing site, thank you!
/u/wikes82 has your answer
Reactive is overhyped, yes, absolutely. Anyone who is hyping NIO deserves a whack on their head. It's a more resources friendly IO approach, nothing more, nothing less. And java8 NIO library is quite good when it comes to filesystem stuff as well. It's a boring (good kind of) library.
BTW, true story, Java started by having fibres (which they called "green threads") and then they were like "wait, what are we doing, why are we faking threads" and switched the API to real threads. They didn't believe in themselves :P
I will pm you! Edit: Unfortunately, I only have the 5th and 4th edition. Do you want them?
Can't you mix the two anyway? Stick to slf4j and if you need log4j2s or logbacks or whatevers advanced features in your application, use them. The advantages of slf4j lie mostly in reducing dependencies to improve code reuse. 
I use CDI-managed beans for all my JSF projects since JSF 2.0, when the JSF team itself encouraged people to switch from JSF-managed beans to CDI-managed beans. Did you mean to say that JSF-managed beans will be deprecated in JSF 2.3?
Yes, you can mix. You can mix either way: use the slf4j API with the Log4j2 implementation, or use the Log4j2 API with the Logback implementation. There's no need to stick to SLF4J anymore if you want the flexibility to change logging implementation later. Assuming you're using the Log4j2 logging implementation, you need the Log4j2 API module anyway so there's no need for an additional dependency in order to have that flexibility. 
What are you recommending if not spring or Java EE?
I've never seen a footer link like that outside of academia papers. (Reddit supports links like this: `[text](http://www.url.com)`)
node.js
Under the hood of all widely used servers there is some kind of reactor model. They have in common the usage of select syscall, which is basically a way to interact with the ready state sockets (for read or write). The extent of usage of this call and the way a request is treated after that is what differentiate them. There is an entire class of problems where reactors perform better. For instance, you need to read thousands of files at once in memory. Or you need to read not yet parsed(or interpreted) requests over a tcp / ip protocol. So NIO is an important, mandatory subject for a good sw engineer. Back to reactive platforms like play: the performance claim is true as long as the overhead associated with the model is smaller than that of an normal container. You will find them excellent to use for small requests with a small 'composable processing' task list, non-cpu bond. An adv of such platforms is that by presenting the work as composable tasks, it can be scheduled for execution a bit more smartly. However one must take into account the synchronization between threads and the constant quering the status of the task execution, a major problem in such systems. I would add that the programming model is hard to be understood by medium programmers and that translates in dev time, which in turn translates to cash. Edit: some clarifications.
&gt;Monstrous, because full stack contains completely irrelevant features for me like: JTA, JPA, JMS etc. I just want to have a REST service. &gt;How hard can it be? &gt;With Node.js it is like well... 10 lines of code in total? You are mixing two completely different things; 1. If there is stuff in a in library that you may or may no use. 2. How much code it takes to get something running. 
I know but I like people to know what link they are actually clicking before following it. On mobile it is quite difficult to "hover" over a link to actually see the reference.
We did that in one case for a very specialized logger (for audit). In other cases, it wasn't worth it to try to abstract the Log4j features we needed, so we went direct. I think slf4j could be replaced with a quick find/replace, so depending on that API isn't an issue, in our codebase at least. Will check out the pointer though in any case. Thanks! 
http://mailinator.blogspot.com/2008/02/kill-myth-please-nio-is-not-faster-than.html This is a very interesting read with very real-world numbers to back up claims. Also: https://www.mailinator.com/tymaPaulMultithreaded.pdf
In a horrible way, yes.
&gt; hello world &gt; non blocking you clearly don't understand the challenges of blocking
what's the point? I mean jboss logging does this, but slf4js entire purpose is abstracting this away so you don't depend on a specific logging framework.
I hope this was a joke!!
It mostly depends on the requirements. Framework X can be really popular for some people because you can fulfill requirement Y with that. Tried: * velocity * Thymeleaf * FreeMarker * JSF I personally think that Themeleaf and JSF are superior in their own ways. I think currently Thymeleaf is getting more popular due its enhancement to the naterual HTML markup, so even designers can run your template without an application server. JSF is more popular on clients with a new product idea and they want a more drag'n'drop feeling since it is component based (better prototyping I guess). Trends of JSF, Freemarker, Velocity and Thymeleaf [[3](https://www.google.de/trends/explore?q=jsf,Thymeleaf,apache%20velocity,freemarker)]. If you want to be hipp, then server side rendered stuff is totally outdated :P JavaScript all the way on the client side. I am currently getting the trend of elm [[1](http://elm-lang.org/)]. Showing some trends (btw in general google trends is pretty useful for these type of questions) [[2](https://www.google.de/trends/explore?q=elm,angular,react)] --- [1] http://elm-lang.org/ [2] https://www.google.de/trends/explore?q=elm,angular,react [3] https://www.google.de/trends/explore?q=jsf,Thymeleaf,apache%20velocity,freemarker
Exactly. Two completely different things that look the same. As a newcomer, it's a nightmare to parse. It's also much harder to find the implementation and figure out the semantics.
Well, what is going to be the replacement for JPA/Hibernate in that job? And what does their software do?
I'm more experienced with Eclipselink which is another JPA implementation, but the way that's worded it sounds like another engineer who hates JPA and Hibernate inherited a project using it and wants to get rid of it, but needs some developer consensus to push their agenda. So they got to write a job posting and threw that line in there to try and get someone like-minded to apply. In my experience for any serious database related work you're either using an Object-Relation Mapping, or you're going to be writing one yourself. JPA/Hibernate/Eclipselink/OpenJPA/whatever is just mostly going to make your life easier.
I replaced _ with $ in underscore-java library.
I suspect there will be a use-case for this in a future Java version that is not yet talked about too often. Perhaps, similar to Scala's `_` wildcard in pattern matching?
&gt; I am surprised that an HTML tag is running java code. It's the other way around, the whole jsp/jsf page is processed by Java code, which replaces certain bits whenever it encounters a special instruction. Afterwards, the whole thing is sent to the browser to be displayed. &gt; it doesn't appear to contribute anything of value to the template beyond reducing readability. Err, how does it not contribute anything? It's the vital part, it's where the dynamic content comes into play! As for reducing readability, well any kind of template will look a bit odd because it will mix two different concepts together. What more readable templating kinds are you thinking of? &gt; I don't see why you would ever want code generation elements of your template to look exactly like non-generated elements. Any template confirms to some specification. Either you build your own syntax/language, or you use an existing one. JSF uses XML, and since html is a subset there of, you can represent both languages within the same, syntactically sound, file. 
Yeah in general I hate seeing TODOs which is every one is automatic red flag in code review but then for every 100 with a BS excuse of something like "didn't have time", there might be one kinda legitimate, so putting your own name on that one is my fallback plan
Not sure but from the job posting, in a reply comment below, it sounds like they're going through hell integrating a bunch of different services, from different companies they've bought, into a single entity.
Lol, they say right in the posting they use both a proper RDBMS and NoSQL. I'm not quite sure what the state of the NoSQL tooling is for Hibernate, but for a standard relation database, if they're using it properly, an ORM is the way to go. Heck, at my job I have modules deployed to Enterprise Edition servers (Payara if you're curious) that merge data from several different data sources. And it was really easy to do.
Not a direct answer to your question, but since you said "these days". For the last several years we've been developing apps as a set of REST-like services, fronted with the JS framework du jour. I'm sure there are valid reasons to use JSPs and templates, but I can't think of a reason off the top of my head. (Particularly when doing green field development).
As an Elm programmer myself, I get what's going on. That's not really a debate I'm interested in having though. This question is assuming that SPA is not an option. And I am kind of against automatically going SPA for everything anyway. It's a lot more code and larger tech stack for small gains unless you put in even more work to reimplement all your domain logic in the browser. Classic server-rendered apps still work very well, and are quicker to build and more accessible automatically.
Facelets mainly, in combination with JSF and Java EE.
Readability is always going to be subjective, but compare JSTL to ERB: &lt;ul&gt; &lt;c:forEach items="myCollection" var="item" varStatus="loop"&gt; &lt;li&gt;...&lt;/li&gt; &lt;/c:forEach&gt; &lt;/ul&gt; Vs: &lt;ul&gt; &lt;% my_collection.each.with_index do |item, index| %&gt; &lt;li&gt;...&lt;/li&gt; &lt;% end %&gt; &lt;/ul&gt; The JSTL example doesn't trip any visual signal in my brain that "this is a loop that is generating HTML". It looks exactly like the rest of the document. In the ERB example, my brain stops on the % symbols and automatically has the feeling of, "we are generating code now, this is metaprogramming". Same with classic JSP. The JSTL is also just old-fashioned, forcing me to escape output manually and declare a bunch of taglib imports everywhere. It has more layers of syntax and underlying behavior too, HTML in XML with JSP EL, all calling into taglibs in jars somewhere and based on the servlet architecture.
I just wasn't sure the history of the question, so wanted to throw that out if it was an option. 
you may be right, but in that case they should have already started that discussion (i googled before posting and wasn't able to find anything) and i guess that's the real point - if they're going to break backwards compatibility, they should be justifying it to the community. even if the answer is "we're not sure **what** we're going to use this for, but it's too valuable as a keyword to leave it effectively unused" 
What a mess...
I can only assume they're referring to NoSQL? I don't think there's any industry-wide movement to stop using ORMs for SQL DBs and SQL DBs are making a comeback.
So I agree with you on the first point, sounds like someone writing that job posting just had a massive grudge against ORMs. However, I disagree with you on the second one, i.e. "serious database related work" requires ORM. In my experience, ORMs and specifically SpringData-JPA-Hibernate occupy this weird niche in the enterprise spectrum. They are an overkill for small projects and they become a hinderance for large projects, so they sort of sit there for medium projects. If you start with an ORM on a medium size project and it becomes a big project you can sometimes find yourself in an awkward spot where you are writing a lot of SQL (and not of the JPQL kind). With Hibernate/JPA specifically there are so many things that are broken that they just start getting in the way if your schemas become large enough. To me this is really just a manifestation of Behavioral Problem (Martin Fowler, *Enterprise Patterns*), where relational databases don't really map to objects at all when you get down to it. 
Good read.
thanks a lot! could you also do 5-7 statements of what you mean by "performant" sql (out of Java)? e.g. make sure all fields in where clauses have indexes etc.
I'm not a DBA but have had to play that role. - Check and re-check indices (including ordering in your queries) - As few joins as possible for queries that get called a lot - enable slow query logs - Calling out only the properties you need (avoiding select *, unless of course, you need it) - as a senior dev, or someone laying the foundation, once you've locked down a query you feel is performant, make it a final value in your DAO so that others are using it if they decide to access the data in slightly different ways instead of writing a similar query. (for example. final String CUSTOMER_SELECT_SQL = "select customer.name, customer.address, customer.email, customer.enabled, customer.phone, customer.zip" (etc)
I'm rather opinionated about cacheing so take this with a grain of salt. Wait until the alpha milestone (which varies wildly, I know) to introduce cacheing. You need to some stability in the data models for it to be worth it, otherwise it adds a lot of time to find bugs. Google's Guava is a really simple interface for in-memory (per box) cacheing. You can look into larger solutions like memcached or Redis as well. Putting together per box cache, as well as an app-wide cache can be useful too, but only if you have the traffic to warrant it. This is the first thing that comes up on Google for "Google Guava Cache":https://github.com/google/guava/wiki/CachesExplained
absolutely. they are both an anti-pattern. ....and, even if they were both bug free. The biggest issue is that they give the impression that the database is part of your app. You just read the entities, and the data is there. This leads to having code that just reads an entity, updates it, store it back..., which works, but, can never perform well. Using SQL to read an entity, update it, store it back also does not perform well; converting your JPA to JDBC is not going to make things much quicker, and potentially would end up more complex. BUT... you simply shouldn't use SQL in this read, update, write manor. TO make the best use of SQL, you need to organise your data in the order you will process it.... read big chunks, update , use batch update to write back..... If you have a high performance e-commerce website that, for example handles 1000's of adds to multiple shopping carts per second, you would just store this data in java sets/tables and say a SQL script run every few seconds would take the contents of this storage, and batch update to disk. This gives you phenomenal performance.... Though, this needs to get the developer of the mindset of database entities are java objects, and instead see the database for what it is....a relational database. 
Great points, all of which I agree with. Hibernate also causes an unnatural coupling between two classes. If I pass a hibernate entity from one class to another, I have to worry about how the entity is hydrated. My second class has no guarantee as to whether collections were eagerly/lazily loaded, leading to fun &amp; exciting performance problems. My second class either has to grab all transitive properties itself or the calling class has to be familiar with the implementation of the class it is calling. 
Yeah, I am evaluating it now. With every year I hate Eclipse a little more.