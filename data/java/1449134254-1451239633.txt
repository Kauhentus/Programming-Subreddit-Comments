Another delay...
&gt; Ok u have to use mysql and mongodb. Just curious: Why both? For such a simply system you really should be able to handle it with just MySQL. Of if you really want searchable json storage you probabyl should go for PostreSQL. 
I use it for my blog. It's really nice. But it seems he needs a wee bit more than just static HTML since he also needs a search.
&gt;&gt; To me this reads like this: &gt; I'm personally ambivalent about the benefits of passing objects into objects. I have _no clue_ how you could possibly arrive at that reading. The term "dependency injection" is in fact rather well-defined. It means that: - instead of me writing code to explicitly instantiate an object and pass it references to the other objects it uses, - there is some _container_ (i.e. generic library/framework code) that instantiates the object and sets the references *implicitly*. (This is typically a *recursive* operation.) I'm saying, that for the programs I've been writing recently, I don't have much use for a container. On the other hand, there are some environments (Java EE, for example), where I _would_ use a container that does dependency injection.
&gt; Nearly every news site does the Java jump to the top ad banner 2 seconds after you enter the site and scroll down. That's Java**Script**, not Java. They are two completely different languages that have approximately as much in common as car and carpet. &gt; You do not notice it because your laptop does not have duel xeon fast chips in 64 bit. Are you serious here? The speed of most of what's happening on the internet doesn't depend as much on the CPU as it depends on the network connection. Also, stop dissing. &gt; Laptops need not apply comment as they do not have the prosser power to see it in real time. Really, you should inform yourself before making such statements. The whole post is the rant of a misinformed, misunderstanding, wannabe PC-MasterRace person that just likes to vent off without prior informing themselves. Java has not been used for ads since quite a long time (possibly the very early 2000s). BTW: The *default* Java security settings would even prevent over 99% of any possible Java ads from running. Modern Browsers block Java applets by default. (Chrome even goes so far that there is no way to get Java applets running) **Solution:** Inform yourself, use a decent browser and install Adblock, or set up a home proxy server via for example a Raspberry, install a decent linux firewall distribution there that blocks this content before it even enters your network.
Not so sure. The problem is that the RSS generating template is relatively simplistic and just grabs the beginning or a specific text entry. It can generate the main index of titles/descriptions. It can't really breakdown the keywords since every page is processed on its own and what we would need here is a separate tool that generates an index. That tool should take no more than a few hours to write: just parse HTML, asciidoc and the jbake headers to generate the various indexes. Should be pretty trivial. The reason I didn't do it is that I don't want to go into the javascript portion of it on the client which shouldn't be hard but is always painful.
A pet project of mine - bringing immutability and functional purity semantics to the JVM. I'd be interested to see if anyone else is interested in this; certainly I am, but I might be on my own :(
The linked magazine is from 2015, not 2014.
On a pedantic note, JSF is the framework, Primefaces et al are libraries. But yes, Primefaces is the go to library for UI components. Also check out Omnifaces for additional (non-component) helper stuff.
This sub generally is about Java programming.
1) pure4J is a java tool, so that's why this is on github. 2) yes, that's the whole point of the checker: it will tell you if you have done this by accident. Note that it doesn't mean your entire codebase has to be pure - you can create "islands of purity" within a codebase which also has impure elements. There are more details on the github readme. 
Why did you [delete-and-resubmit](https://www.reddit.com/r/java/comments/3v93h6/java_magazine_novdec_2014/) this?
Instead of a bytecode to assembly compiler would not it make more sense to write JVM implementation for this platform? 
&gt; I have no clue how you could possibly arrive at that reading. The term "dependency injection" is in fact rather well-defined. Ok, where is it defined? By whom? &gt; there is some container (i.e. generic library/framework code) that instantiates the object and sets the references implicitly. (This is typically a recursive operation.) Nothing in dependency injection requires a container and implicitly setting references. Using a container and implicit mechanisms is merely *one way* to do it, and hardly the best one. https://msdn.microsoft.com/en-us/library/ff921152.aspx https://en.wikipedia.org/wiki/Dependency_injection http://www.martinfowler.com/articles/injection.html#FormsOfDependencyInjection Notice in "forms of..." that we have three main forms, and none of them is implicit. We can interpret @Inject as an implicit setter, but that's not listed here. In its core, DI is passing dependencies to an object, instead of that object creating them internally in a non-configurable manner. How that happens is not only neutral, but it *must* be irrelevant to the object being created, in order to fully follow the spirit of the Hollywood Principle. An object shouldn't tell it's creator what framework or container to use to create it, only what it needs. This automatically excludes uses of qualifiers, @Singleton annotations which are resolved in a container, heck the object shouldn't even be aware there is a container out there. Nothing in DI requires a "container". If you think it's *so clear* I'm not in the right here, point me to some source that defines in an authoritative way that DI *mandates* the use of a container and *implicit* injection mechanisms.
From your own sources: &gt; The basic idea of the Dependency Injection is to have a separate object, an assembler, that populates a field in the lister class with an appropriate implementation for the finder interface An "assembler", i.e. what I've called a "container". &gt; declaratively express dependencies in your class definition. Use a **Builder** object to obtain valid instances of your object's dependencies and pass them to your object during the object's creation and/or initialization. A "Builder object", i.e. what I've called a "container". &gt; All require that separate construction code (the injector) take responsibility for introducing a client and its dependencies to each other. An "injector", i.e. what I've called a "container". &gt; If you think it's so clear I'm not in the right here, point me to some source that defines in an authoritative way that DI mandates the use of a container and implicit injection mechanisms. This might be unfair, but it doesn't feel to me like you're even remotely _trying_ to understand what I wrote. FTR, I was the lead designer of [one of the most widely used dependency injection solutions for Java](https://jcp.org/en/jsr/detail?id=299), which is also a key part of the Java EE standards. I feel like I have a pretty good handle on this stuff. 
&gt; No, "container" is just a label I've given to something which performs a certain role in the system of dependency injection. The only references to "container" in the CDI specification refer to specific framework containers like EJB containers. The word "container" is not mentioned once in the CDI overview, and Dependency Injection is defined this way: &gt; Dependency injection: The ability to inject components into an application in a typesafe way, including the ability to choose at deployment time which implementation of a particular interface to inject No mention of container, as it should be, given "dependency injection" in general is defined entirely from the PoV of the *object being created*, and *not the creator*. I want to try and take CDI's idea of "dependency injection" as a definition of "dependency injection" in general. But there's a lot more "Java EE" in CDI, than there is "DI" in CDI. It's not a neutral idea of DI by far. If we extend this argument that CDI spec = DI concept, then I can't do DI without Java EE. So the search for an authoritative definition continues.
+ /r/javahelp is for programming help + /r/java is for news and information about Java and JVM languages and the Java ecosystem in general + /r/learnjava is about learning Java - tutorials, etc. 
I would recommend PrimeFaces. Some others are ADF, Richfaces and icefaces.
i didn't read thru this in great detail, so i'm not sure if it's relevant, but one downside of memory mapping files is that you can't (easily) control when page faults occur, making it harder to take advantage of data locality not sure that it's a problem here, but worth keeping in mind if anyone else is thinking of implementing something similar 
This sounds like a troll, but the rants in this post remind me of Francis E. Dec.
Finding yourself in a place where you feel the need to call `generator::writeRaw` is all kinds of fucked up. The thing is, you aren't necessarily restricted to Jackson only. There are tools such as https://github.com/jayway/JsonPath/ which can really help with pathological JSON formats on the application level. Roundtrip testing of these kinds of serializer/deserializer combos for various fucked up JSON data formats is an absolute requirement. For that, I use https://github.com/fge/json-patch and reference files.
PrimeFaces is ok until you don't do much JS integration. That side of PrimeFaces is quite messy and far from good. 
LOL. Thanks for the warning.
Thanks for the recommendations, guys. Primefaces it is.
When you log in and open the magazine from a desktop, there's an option in the TOC pane on the left get back issues. 
You could also just use MOXy if you want XPath functionality.
Considering there is 64k RAM on a Genesis, probably not possible to run JVM.
JsonPath's pretty interesting looking. I'll check that out. Thanks!
I saw Jaroslav Tulach demonstrate DukeScript and it looks like a very slick solution, allowing you to write code in Java and deploy as native or JavaScript.
Site is horrible on android chrome. Empty dropdown and just a list of sponsors.
Genesis is skynet, you can kill it before its.. 
I don't care how famous this guy and his blog is in the Java community. **[This](https://i.imgur.com/nrb3Tox.png)** is **spam**. If you indeed want to submit this content, make a text post of the relevant portion (*with attribution*).
Not really for me since this stuff is pretty basic. Thought I'd check it out to see your style though. I liked it. Clear and concise, you explain things well too! Plus I can understand what you're saying clearly, some tutorials out there are quite hard to understand. Good to see you're covering the very basic stuff which will help people who are new to programming.
It's [EDIT after 8 hours - man, what a stupid mistake] NOT ~~about~~[/EDIT] about him or his blog. It's just the format with 99% spam-like material and 1% content that I find unacceptable.
Nice writeup. As there has been so much movement around Jigsaw I haven't read about it for years. Based on the OpenJDK website - http://openjdk.java.net/projects/jigsaw/ the Jigsaw project's goals are: * Make the Java SE Platform, and the JDK, more easily scalable down to small computing devices; * Improve the security and maintainability of Java SE Platform Implementations in general, and the JDK in particular; * Enable improved application performance; and * Make it easier for developers to construct and maintain libraries and large applications, for both the Java SE and EE Platforms. So I guess the last point is the one that the article has the beef with. I wonder if the project will deliver on the first 3 goals?
&gt; i do option 1 "You can write a ton of nested Java objects that are very brittle" I did this for the Bing API wrapper I created. Those java objects all have default access in a separate package and I translate them to my own object model I then expose. I have to create many objects twice but it's not actually that much work and it's pretty easy to test. And the API's are versioned so I can quite easily adapt this to new versions and still translate to the same object model.
lame questions. If I got asked these I would be put off the company asking them. &gt; "What are wrapped classes ?" ridiculous. 
Awesome thanks. My next step is to make this use http://checkerframework.org Java8 now supports this as part of the compiler, so moving it to this should mean I get IDE support and gradle for free. I'd definitely appreciate some help doing that, if you're interested. Tweet me at @bobm_kite9 and we can discuss further.
Can you post some code as an example?
GC is a property of the runtime, it doesn't mean a VM is required. There are plenty of AOT compiled languages with automatic memory management. Also the realtime specification for Java allows for immortal memory, region allocation and more fine grained control about the GC.
Speed is a common criticism for pure languages (like Haskell etc.). The same thing applies here - mutable code state can be made to work faster than immutable code. However, whether or not it's "too slow" is going to depend heavily on your use-case and your hardware. Sometimes, it's good to sacrifice some performance for correctness. 
I've told you in your [other post](https://redd.it/3vb6md) that this material is not for /r/Java but for /r/learnjava at best. Please stop your self promotion and obey the [reddit spam rules](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) and the [reddit self-promotion rules](https://www.reddit.com/wiki/selfpromotion). Reddit is *not* a pure *self-promotion* platform. You have to actively engage in reddit discussions in order to have a limited share of self promotion allowed (it's *one* self promotion for *eight* participations). You are currently just spamming the subreddit and by trying to "ask for constructive criticism" you try to circumvent what I've told you yesterday. This is unacceptable behavior and will lead to a permanent ban if you continue to do so.
&gt; Can an interface have an inner class? Not in any code I'm writing! Man do I hate language trivia!
Yeah, they did a great job at modularizing jdk, but ideas about applying this to applications seem very weird. 
IBM Bluemix does not require a credit card for the first 30 days if I remember correctly, and gives you a decent amount of free capacity in the first 30 days before dropping to a lower free tier (which is enough for my hobby projects to run on so should be fine for a college project).
Dumb questions written in broken English
If there is no problem to be solved, what is Java 9 trying to fix with all of the modularity changes causing it to be delayed?
Hey, if Indian outsourcers use these kinds of criteria, more power to them!
and also doesn't know the meaning of clickbait... 
I don't think I've ever heard the has-a relationship called "delegation". Usually aggregation. Some of this trivia is just gotchas that lots of people take for granted without ever actually thinking or caring about it. Completely useless to determining if they can program or not. &gt;why isn't there operator overloading? Who the hell cares? I know all these and I'd honestly walk out of this interview.
i haven't used quasar, but i do use [kilim](https://github.com/kilim/kilim) which is another fiber/actor library for java that provides similar functionality under the MIT license. performance is awesome and the ability to write async code with zero effort is great at some point i'll try quasar, though the smug/spin from the PU guys drives me crazy fibers are definitely worth checking out if you've got a problem that would benefit from massive concurrent scale
I set up [eclim](http://eclim.org/) which uses the Eclipse engine, but essentially exposes an API for vim to use for completion/inspection/etc. It was kind of a pain to get set up for me originally, but that was probably mostly due to my inexperience with both vim and java at the time. So you essentially have a text editor with intellisense, verses guess-isense. There is also support for Sublime Text with [subclim](https://github.com/JulianEberius/Subclim) which works as well, but I preferred how it worked with vim.
no way anyone is going to actually read and understand javadoc's on the API's they are going to use, better to rush off and use intelliguess, its worth the complex overheads and pain of an overweight bloated IDE, why would anyone just use a simple text editor - who wants quick and simple anyway...
Did you really intend to check in a [.DS_Store file](https://github.com/robmoffat/pure4j/blob/master/.DS_Store)? I wish Apple could write an OS which didn't leave it's footprints all over your directories.
It is possible, but not advisable to write Java without a good IDE. I like working with vim. It's neat and is really well customizable - but it's no IDE. A good IDE is more than only code completion: it draws class diagrams, shows dependencies, calculates code metrics. It's more than editing. 
There are a few possible meanings but the modern one is "a custom, principle, or belief distinguishing a particular class or group of people, especially a long-standing one regarded as outmoded or no longer important"
I feel like this is a set of slides that are missing an accompanying video...
no obviously not. PITA.
needing run time generic service discovery and module swapping without a code change is like a unicorn. i've worked a few places that had OSGi in place and they all had no need for it. it just created a huge layer of configuration and boilerplate to maintain. also debugging OSGi and Spring integration bugs in production is a great use of time as well. im glad to be done with it. application servers are like dinosaurs now in the age of the cloud, continuous delivery, docker and kubernetes.
Open it from a laptop or a computer on your desk. That is, something *other than* a mobile device. 
I used to use Java with a text editor when I began with it (95 after years of both IDE's and text editors for C, Pascal and countless languages) and it was pretty good. As Java IDE's started to evolve I migrated thru them and today use NetBeans (although IDEA is pretty sweet too). The difference is tremendous, "Apply Code Changes" (edit and continue) during a debugging session alone is a remarkable thing. I can change the code and see the changes without restarting, inspect variables and modify them during that debug session. Refactoring and hints are remarkable. The strict compiler is great but it can't find things like null deference that the IDE will provide a hint for instantly. E.g. if I have code that might be null it actually shows a noticeable warning hint and in slightly larger blocks of code this might be hard to see. Saved me ages in debugging. When you are working on a small app its an advantage, when your app grows it becomes essential. Some of the non-IDE fans say that the solution to this is to shrink everything to smaller manageable standalone modules. While that might be true it makes debugging and managing these things harder (e.g. locating an issue that crosses module boundaries). So while I agree that code should be more modular even there an IDE is far more helpful in debugging across module boundaries. 
But the answer refers to autoboxing ? Questions created by people who don't actually do development everyday I think.
That is a very good question. The problem with your approach is that it would mean copying the doubles which is expensive due to the limited cache on the cpus we use. The best solution is to place the calculation right up against the memory being retrieved. For example, I have written specialise multiple, add, divide and subtract methods which work over the segments from two different storage areas. These are in the latest git repo version. Sadly, Java does not easily support reified compile time polymorphism. In other words, using, for example, a doubleConsumer for of thing will not work well because the JVM will resort to virtual dispatch. For the examples I have done (+-*/) I hand expended the work to give monomorphic dispatch. One day, when I have time, I want to use anonymous class loading to that the code can generate monomorphic call sites for all operations automatically. Sadly, this stuff is not my day job. Anyhow - to answer your question - check out operateOnto here: https://github.com/nerds-central/SonicFieldRepo/blob/unsafe-data/SonicField/src/com/nerdscentral/audio/SFData.java 
I agree, the method works best when you have naturally locallity. In my case the code tends to walk over data structures in a linear fashion, usually with a stride of 8 (1 double) and therefore memory map files work really well. Less linear structures, like a hash map for example, are not going to work as well without a great deal of care.
Interesting. Building something very similar right now. Repository really needs a license.
I would like to nominate the page transitions on these slides the most fucking obnoxious thing I have seen in 2015. 
This is AWESOME. I really like having my code inspections primarily in the IDE so that it becomes a natural part of your coding practice, but having a backup in the CI chain will allow us to enforce it.
For small edits notepad++ is great there are a ton of useful plugins. Unfortunately the linux version(notepadqq) doesn't implement all the features of the windows one. 
This is the main use case of a complex-event-processing engine. Oracle has OEP/WLEVS, which is built around Spring and OSGi. I have used it, it's very good.
Really interesting stuff. The software I'm writing produces probabilistic simulation data, with result file sizes sometimes &gt;50GB. A use case could be to calculate a 5th percentile for a 2GB result. I will play around with your ideas when I have time, but sadly this stuff is my day job and I have to prioritize adding new features...
It kinda seems weirdly documented, but the middleware return value is passed into following middleware as 'currentvalue' which then is turned into the finalvalue which I assume gets put into the box at the end
so we don't need encapsulation any more ? not a good idea at all
Ok so you list a bunch of technologies thrown at the game, are there any runtime numbers to show how well it all works?
Seems like an effort worth trying out. However, code analyzers will go bonkers due to all the public fields. I'm also not yet sure whether I like all the class and generic stuff needed to declare boxes. Seems like a lot of clutter by itself.
Isn't there an apache project that has been doing this since java 5?
I feel I may be missing something, but how does this differ from the way JavaFX properties work?
Sounds interesting - good luck with it if you get chance.
Thanks. Have added license (MIT)
It's an interesting idea. I especially like how the views give access to 'derived' field values. I wish something like this was implemented in the language, like a 'Signal' type or something
[project Lombok](https://projectlombok.org/) is THE lib that does this. has good ide support but horrible maven integration.
Spam? Naaahhh… domain submitted from|count|% :-|-:|-: [vmob.me](/search?q=%28and+site%3A%27vmob.me%27+author%3A%27bling1bling%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|58|89% [wn.nr](/search?q=%28and+site%3A%27wn.nr%27+author%3A%27bling1bling%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|5% [self.Bitcoin](/r/Bitcoin/search?q=%28and+author%3A%27bling1bling%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [self.learnpython](/r/learnpython/search?q=%28and+author%3A%27bling1bling%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [self.FREE](/r/FREE/search?q=%28and+author%3A%27bling1bling%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% subreddit submitted to|count|% :-|-:|-: [java](/r/java/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [mobile](/r/mobile/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [PHP](/r/PHP/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [webdev](/r/webdev/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [swift](/r/swift/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [Bitcoin](/r/Bitcoin/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [helpmewin](/r/helpmewin/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [sweepstakes](/r/sweepstakes/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [learnpython](/r/learnpython/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [nim](/r/nim/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [pcgiveaways](/r/pcgiveaways/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [IOT](/r/IOT/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [elm](/r/elm/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [c_language](/r/c_language/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [d_language](/r/d_language/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [csharp](/r/csharp/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [Python](/r/Python/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [golang](/r/golang/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [rust](/r/rust/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [cpp](/r/cpp/search?q=author%3A%27bling1bling%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% _^...and ^37 ^more_
Couldn't be any more spammy even if it was a tin of actual spam.
Banned him. The account really has nothing of value to offer. Pure spammer.
Thanks. It's already reported multiple times to /r/spam in the last days, although the bot there didn't seem to catch it.
Hi, can you explain your concern a bit further? You are free to change the underlying implementation and behaviour of a box. Exposing `field.get()` is equivalent to exposing `getField()`. What scenario do you have in mind?
You can use a good editor for development and run command line tools for build.
Another thing this may help with is, that you can have fields that can be initialized *once* and immutable afterwards, simply by using a different type of box. This is hard to do with setters, since the implementation of the class still has write access to the field.
If this is an actual concern then you can declare a box as final and the only thing you lose is the ability for your clients to upgrade a plain `Box` to a `PowerBox`. I don't know what you'd be worried about though unless security is a concern, in which case boxes are definitely in appropriate. Replacing a box to clear out any behaviour is just shooting yourself in the foot and doesn't seem like something that could easily happen by mistake.
Well written project. But why use maven? Ditch it and use Gradle. http://gradle.org/
So my thinking was something that you are changing what the clients of your class are dependent on from an interface to an implementation. So instead of saying "This method will give you the first name" the class is saying "This Object will have a member variable called firstName and its value will be the firstName of the person". The example below may be a little contrived but I think it demonstrates what I am trying to get at Say you have a Person class like in the example: public class Person { private String firstName; private String lastName; public String getFirstName() { return firstName; } // I'm lazy and not going to write out all the boiler plate :) } Now say you realize that people actually have more names than just first and last. You could change the implementation of a Person to something like public class Person { private List&lt;String&gt; names; public String getFirstName() { if(!names.isEmpty()) { return names.get(0); } else { // This keeps the methods contract the same as the above getFirstName() return new String(); } } // I'm lazy and not going to write out all the boiler plate :) } None of the clients of the Person class would ever need to know or care that we now don't directly store a first name, but instead use a list of names and choose the first one in the list to be the Persons 'firstName'. (it could just as easily be another property which tells us the index of their firstname) I may be wrong but i don't understand/see how you might do the same change to the 'Boxified' version of this class: public class Person { public Box&lt;String&gt; firstName; public Box&lt;String&gt; lastName; } As the clients of the Person class' code would look like Person p = employeeDatabase.getPerson("Anne"); p.firstName.get(); thus meaning that all of your clients would have to change their code to work with the new version of the Person class which to me sounds like increased coupling. Or you'd have to do some weird jiggery pokery in order to get it to be compatible. 
I've updated the README examples to use final `PowerBox` fields.
It's simple: you write an implementation of the `Box` interface and implement the methods exactly as you would implement them normally. For example: public Box&lt;String&gt; firstName = new Box&lt;String&gt;() { @Override public String get() { if (!names.isEmpty()) { return names.get(0); } else { // This keeps the methods contract the same as the above getFirstName() return new String(); } } @Override public Box&lt;String&gt; set(String value) { // contents of setFirstName() in your example } } It's only slightly more verbose than the usual way and in most cases not something you need to do. So writing your API with boxes is never a damaging commitment.
Yeah I thought as much. Thanks for the reply. I had a though, what about using lambdas? Then someone could create a function /lambda and then set it like this... myBox.onSet(myLambda) Then whenever the myBox.set() function is called it will call the onSet lambda to process the input? I understand it would mean a lot of changes to your library but could be a feature to think about? 
thanks for the clarification !
Edit: I misread the OPs link as a self post asking a question, and didn't notice it was a link to SO. I've left my origianl post intact for who knows what reason. Check out /r/javahelp for these kinds of questions. First off, what do you mean by 'processing'? If you're 'searching', it's shorter because you can apply a binary search algorithm: https://en.wikipedia.org/wiki/Binary_search_algorithm. By checking the middle element of an array first, you can rule out an entire half of the array from ever possibly containing the value you're looking for (if you're looking for 107, and the middle item is 206, you know without a doubt that the entire upper half of the array has only values greater than 206, and as such doesn't contain 107). You can keep apply this divide and conquer on each new sub-array. If you mean looping over the array and doing something with each element, which is what I would usually call 'processing', than sorted arrays don't provide benfits in general.
Dude, hit the link, it's very interesting.
most people will probably get it wrong, thats why its noteworthy. interview questions aren't about trying to catch someone out/stump them.
Linux isn't really short on editors: You can try sublime or atom if you want something with features comparable or better than np++.
"I'm not okay with directly accessing fields in POJOs" This is one of the weirder taboos Java programmers have. There's no rational justification for it - it would make *perfect sense* to implement immutable value objects with public final fields, assigned in the constructor, but everyone carries on clinging to this weird notion that one day they might want to do some special work in a getter or a setter, so they'd better have a method there just in case. I think there's some superstition that it's more "object-oriented" or something. I hate to break it to you folks, but anemic domain objects like these are already *not object-oriented* in any meaningful sense. They're just structs with a fussy protocol wrapped around them; the only reason you don't object is that you're used to it and your IDE generates the boilerplate anyway. Anyway, boxes are an OK approach to the "[how do I have case classes in Java](http://github.com/poetix/mtuples)" problem, and they lend themselves to some clever tricks like mapping them straight into byte buffer pointers for efficient flyweight objects. In the way they're used here they're rather less efficient, since you have an extra object reference for every value stored. But the added ease of manipulating fields might well be worth it.
I wouldn't reject someone for missing this but it would help distinguish between a good candidate and an exceptional one.
What an awesome read. Thanks for this!
Because Branch Prediction.
There's another way processing an unsorted array in Java can be slow. Imagine you have an array of objects with sub types - say an array `Foo[]` with `Foo` instances and `Bar extends Foo` instances. You might see a lot of cache misses as the body of one implementation needs to be retrieved, and for the next call the body of the next implementation. In those cases it's sometimes faster to put all the `Bar` instances together (in sequence) in the array.
Actually, I think immutable value classes should look like *this*: public case class Person(String name, int age); and you shouldn't have to create a file named "Person.java" to declare them. But that's another argument.
it happened half a year ago...
Stack Overflow at it's *absolute* finest. Well done Mysticial, whoever you are. 
Haha, I see that now. I misread this as a self post since I've been frequenting /r/javahelp a lot recently.
Every transition made my eyes strain. I got through the slides but I was not happy.
Why the downvotes? That seems like a reasonable description to me.
int t = (data[c] - 128) &gt;&gt; 31; sum += ~t &amp; data[c]; i never would have thought this way. man i feel stupid.
Subreddit confusion, possibly. You can build your own multireddits, which is what I have done e.g. with java, javahelp, learnjava. I really have to look each time, or I won't know where I am. Or maybe juckele came from the frontpage.
Everything that is wrong with the java community summed up in just one line..... *sigh*
But, if a rule like 'No magic strings/ints', *ever* is set into stone, and you have to follow standards, then we would have no choice, other than to do this. 
&gt;everyone carries on clinging to this weird notion that one day they might want to do some special work in a getter or a setter, so they'd better have a method there just in case I think this notion, by itself, is reason enough to use getters/setters. But yea, it doesn't make it any more oo.
 @Data @Builder public class Person { public final String name; public final int age; }
It makes changing constant values more safe, though.
I think the point that's being made is that, in the example, you shouldn't be naming your 9 constant as NINE but something more descriptive and readable like PUZZLE_SIZE
@Value for immutable classes :) 
I also used to use final on local variables for a while, but stopped later. It just clutters the code and my IDE already shows which variables are modified. An explicit var/val would be nice, though. 
The way selenium works is incredibly simple and I like it. But I had a small dispute with my boss because it is so incredibly unstable it is actually useless. I could not implement a single test-step for all browsers at once, one always had to write a version for each browser which interferences heavily with Seleniums' concept of "loadable components". You have to define interfaces and browser-specific implementations and if the logic of the program changes your selenium structure instantly falls apart like a house of cards. Getting simple window handles and working with windows was one of the few actually simple things that worked in every browser. In my experience it was harder to implement a component representing buttons because those actually get browser specific way faster. Nevertheless a good article, but my last word is that I am very glad to have ditched selenium and the productivity is higher without it. 
&gt; we would have no choice, other than to do this. What would stop you from giving the constants more useful names instead? Like private static final int FIRST_ROW = 1; private static final int LAST_ROW = 9; Now the loop expresses that it's iterating from the first row to the last row. That actually gained you some more readability. The whole point of such rules is that your code should express what it's doing instead of just having random numbers there (and i'm sure with more context and time one could come up with even better names). Yes, such a super-strict rule is pretty stupid and in many cases literals are clearly not an issue, but if you have to, you can always come up with a name that at least expresses what the number you chose is doing. If you can't, then that's only a sign that the number is useless (or you don't understand its use). It'll get tedious, but it's certainly not like you don't have a choice. At least i couldn't come up with an example.
&gt; "I'm not okay with directly accessing fields in POJOs" &gt; &gt; This is one of the weirder taboos Java programmers have. &gt; There's no rational justification for it Because interfaces do not have fields. And one would like to program to interfaces, not implementations. One day the programmer might want to replace the implementation, new implementation has a different set of fields, programmer has a problem.
Double-checked lock Singleton. Returning null. Using StringBuilder where '+' would do Using Streams and lambdas wherever possible. 
And that's useful when the value is a) used repeatedly and b) amenable to change, but for a lot of common situations that's not the case. The typical case where named constants just serve to muddle the code is when you're parsing or constructing data in a given format. This sb.append( LENGTH_FIELD_HEADER ) .append( data.length ); is just pointlessly obfuscated compared to sb.append( "length: " ) .append( data.length ); No, the string "length: " is not going to change. It's part of an established protocol. The only thing that can make that change is if you change the protocol, in which case you have to rewrite the parsing / building code anyway. In this case, *immediacy* -- to have the details readily at hand at the place where they affect the outcome -- is preferable to abstraction, mainly because abstraction here doesn't reduce the cognitive load. You're not substituting a complex concept with a simple symbolic name in this case. Effectively you're just substituting one symbolic name with another, and that's just adding a mental step of redirection for no purpose whatsoever. 
&gt; Call me crazy, but I do that, too. But only then, I remove the "final" modifier. &gt; about the argument in set methods I sometimes use the same name, sometimes I don't, depends mostly on the thing that's being set. Sometimes I use very descriptive names for the class variables but would only use a simplified name for the parameter.
https://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/ObjectUtils.html
Indeed, this could be used to generify your solution against 4x4, 9x9, 16x16 puzzles.
I disagree with this for two reasons: 1) it *does* increase readability by attaching semantics to the value. The string "length: " tells you nothing about what it means. You'd have to go to the protocol specification to understand what that string means in this particular context. Dangerously people start guessing at what these strings mean, which is one of the root causes interoperability problems. 2) it lets the compiler check the correctness for you. You might use the "length: " string in many places, and if you happen to misspell it somewhere you will only find out when it blows up at runtime. By using a constant the compiler will ensure it's correct in every place you use it. Further, protocols do change, and new versions are published. If your protocol details are hardcoded across your parsing/generation logic, it makes updating to a new version more difficult. When you abstract away those details via constants, it's easier to and safer to update your code.
 import java.util.{Collections,List,HashMap}; pls
We had a similar issue. We ended up ditching Selenium for cross-browser compatibility and only run it with Chrome now. It greatly reduced churn and still adds a lot of value, although only in flagging regressions.
1. When you're working with code that parses or builds a protocol message you have to go to the protocol specification _anyway_. Re-writing the protocol specification in your source-code is _not_ a good idea. 2. Yes, _if_ you use the "length: " string repeatedly (_and_ these uses are fundamentally the same, not merely incidentally), _then_ -- and only then, will it make sense to move it up into a constant. I'm not saying that you should *never* use constant strings when you're doing parsing or message building. And yes, protocols do change, but named constants aren't going to help you with managing that. It doesn't matter if the string "length: " is hard-coded in a method or in a named constant -- it's still hard-coded and no easier to change. (Besides, protocols never *really* change in this manner -- if the name of a field changes, then that'll be tied to a change in the semantics of the field as well.)
&gt; By using a final variable you add clarity, No, it doesn't. It just peppers your method with pointless working variables that serve no purpose and all need to be given sensible names. It's just adds chaff.
You are loosing clarity in what the code does. Its adding one step toward a difficult to understand, and maintain system. I am a maintenance programmer. A new ticket was raised because the export function isn't working anymore. Looking through the code, I see this: sb.append( LENGTH_FIELD_HEADER ).append( data.length ); Fair, so I go to the constant, I see public static final string LENGTH_FIELD_HEADER="srclength:"; Ahh this is the mistake..... But this has worked before....so checking through source control I find out that a previous programmer decided to use LENGTH_FIELD_HEADER for their export routine...... And, this also worked fine. And at some point, the format of their export changed, so a third programmer changed the constant value to "srclength". Now this third programmer, wouldn't have known the two exports are unrelated.... The sharing of the constant makes it appear they are related, so to be honest, just updating the constant value might be considered the correct thing to do at the time.... But, resulted in a new bug. This happens..... I have had to unpick bugs like this, caused exactly because people started sharing constants like this. This is well worth reading.... http://thedailywtf.com/articles/Soft_Coding TLDR; Using constants like this, because of 'Best practice', should be considered an anti-pattern. 
Why not "const" keyword (it's in Java but unused): `public const class Person...`
&gt; How is adding another degree of freedom going to make you less likely to make a mistake? Because it lets you change *only* the value or *only* the semantics at a time. Meaning you get to focus on a smaller part of the problem at a time, meaning that you're less likely to make a mistake.
But the problem here is always going to be the mismatch between the value and how you use it. Focusing on just one is never going to be fruitful. You might as well just split the field name into _two_ named constants, to let you focus on the first half of the name separate from the second half.
This code: sb.append( "length: " ).append( data.length ); Is totally, unambiguously easy to understand by anyone what its going to do. it will output "length:" followed by the length of the data. This is as simple as it gets, and results in less bugs and faster code changes because questions such as 'Is this constant used anywhere else', never come into it. 
I am pro-`final` parameters, but less because I want to enforce a style of unchangeable parameters and more because I want to avoid changing them accidentally. I consider deliberateness a reasonable excuse for lifting a `final` qualifier, although I would strongly advocate for introducing a new variable: final String safeArg = argumentOrDefault(argument);
That's cool and all but I like IDE support for editing POM files. That would be a big loss compared to a relatively small gain.
&gt; Project Lombok makes it fast and easy to generate shitty Java. &gt; Field injection is not an option. Your constructor is not "unnecessary" or "dead code" just because Spring can generate it for you at runtime. Do you have any more thoughts about these? Here's a position you could argue against: The code that Lombok replaces and the constructor code that field injection replaces tends to be very simple. Often, there's exactly one correct way to write that code and every alternative is a mistake. Avoiding the shorthand in favor of spelling it out doesn't do anyone any favors. All it does is increase the surface area for mistakes and make it more difficult for readers to spot those mistakes.
I've tried various GUI builders over the years, like NetBeans Matisse, and I've found I always return to laying out UIs using code in Java. The various layout managers in Swing and JavaFX are incredibly powerful, once you learn them. On the other hand, in the Windows world, I lay out UIs using UI builders. I take that as a deficiency in the APIs, and sorely miss Java in those times, but the preference for builders in the Microsoft world might also be due to superiority of IDEs for a very long time. Workflows are heavily driven by what you're used to.
I wrote this article, so please feel free to ask questions and I will respond ASAP. 
Used SceneBuilder until I got tired of it applying ugly formatting to my FXML files. I still sketch stuff out in SceneBuilder, but usually just copy the FXML myself.
The JavaFX binding library is quite general purpose, and though bundled with JavaFX, is not dependent on it. It's even better now that JavaFX is a part of the JDK.
I have, but I so seldom make single user applications. Try javafx, it does not look terrible : https://docs.oracle.com/javafx/scenebuilder/1/use_java_ides/jsbpub-use_java_ides.htm
These days I don't use EJB's, rather I use CDI beans along with Apache Deltaspike to fill in the missing gaps. In the long run, EJB's will be depreciated.
Protip: If you are going to explain how to do some cool acronym with some fancy tool in your article, maybe you could say what the acronym stands for? WTF is BDD? There is even a section called "What is BDD" that doesn't say what the acronym stands for. Yes, I know I could Google it but then I'd probably find a better article about it, which probably isn't the best way to drive traffic to your blog.
I use the NetBeans gui builder for pretty much everything I do. Some stuff needs to be done from code, but as a whole I find the gui builder to be too efficient not to use 
Take the number of days out of the past seven years on which Lombok actually stopped working. Now take the number of times Scala broke upwards compatibility over a fraction of that period. Apply logic and intellectual integrity.
Seriously? Who doesn't know BDD, or TDD, or even FDD?
I never understood the desire to write build files in a turing complete language. Programming is complicated enough, I prefer to keep things simple personally.
If your class needs twenty things injected it might be bad design. That needs to be split up into smaller pieces or something
I dislike GUI builders, but after working in a Swing project for more than 2 years, I firmly believe that Java is not a good language for writing a GUI, mostly because it iis imperative. If I were to start a Swing project today, I would try [JavaBuilders](https://github.com/jacek99/javabuilders). If JavaFX, I would try hand editing JFXML.
*TL;DR: @InjectMocks is bad because it's too convenient, like @Autowire* 
Yea that's kinda how I read it too.. since when was making your job easier a bad thing? I mean having a test with @InjectMocks is generally always going to be better than no test at all, so what if it uses @InjectMocks..
Never had that happen with a domain object. Literally, never. Like I said, they're not real objects in real object-oriented programming, where separating interface from implementation of course makes perfect sense. They're structs in silly costumes. We should take off the silly costumes, and treat them like the anaemic record types they actually are. 
Re: named parameters: it's *really* nice to be able to write public final class Person { public final String name; public final int age; @JsonCreator public Person(String name, int age) { this.name = name; this.age = age; } } and have Jackson be able to pick up the parameter names via reflection without having to annotate every constructor argument with a @JsonProperty annotation restating the name you've already given it...
Thanks for the feedback. Anything in particular that you would like to see? 
Part of it's stylistic/consistency. Part of it's widespread JavaBeans support, even outside of EE. I know that exposing fields in other languages like C++ is the norm, but Java's more like Ruby in that the language itself favors methods to fields (interfaces can only have methods). Also, in this case, the boxes are mutable, even if the fields are `final`. There are a number of desirable interface changes that would be extremely difficult because of this. If I was code-reviewing a class like this public class Point { public final int x; public final int y; public Point(int x, int y) { this.x = x; this.y = y; } } I wouldn't necessarily consider it so much bad practice as I would bad style.
Nice! I'll check it out. Looks like there's a version for Eclipse.
Clicking "all known" doesn't do anything here...
I use WindowBuilder (VisualEditor before that) every now and then. Its not fantastic, but faster than coding by hand, especially when you have to adjust small things or rearrange/extend an existing GUI. My experience: - You need to know every bit as much about the nifty details of each swing or swt layout as when coding by hand. - I never put a single piece of business code into the generated UI classes. I write all my controllers by hand and link all listeners etc. by hand to exposed UI elements. So I don't see the editors as means of easier GUI design (or for inexperienced GUI designers), but it makes you faster.
Thanks! What's wrong with the generated UI classes?
when you say "terrible search engine (for example, search for "spring")" - what exactly qualifies as a good search engine?
I used to hate them with a vengeance but Matisse mostly won me over when I had to build a really large app in a very short amount of time. It has its issues but overall I find it reasonably good. I mostly didn't get along with most of the others except for the Codename One GUI builder which is now [being replaced](http://www.codenameone.com/blog/gui-builder-walkthru.html) but that's for mobile.
Ditto. In addition, I would add that I there is a real advantage when you come back to a GUI designed a long time ago and with one click get to the exact event handler for a particular control rather than reading through tons of layout code to find it.
Compare these results and weep: good: http://javalibs.com/search?searchFor=everything&amp;q=spring bad: http://search.maven.org/#search%7Cga%7C1%7Cspring https://libraries.io/search?q=spring https://bintray.com/search?query=spring To be fair searching for "spring" is pretty harsh on the search engine, because we don't search for example for "org.springframework:spring-webmvc", but if we knew the group and artifactId, then we wouldn't need some public search engine, would we? (you can easily search the artifact directly in IDE). Btw. if you want to make it easier for search engine, try to search for artifactId, for example "spring-webmvc", but then you can weep again.
It makes hard to work on projects that switches people often. When I "inherited" a project that was made with excessive use of Lombok, I saw a fuckton of errors in Eclipse and compilation problems. It took some time to find out what was wrong and how to install this shit and get it to work. All of that because someone was too lazy to press right click -&gt; generate -&gt; getters and setters. Lombok is bad because it doesn't harmonically play with Java, it forces it's way into the code with a hacksaw. IDEs don't support it without hacking them with some external executables. It is based on a hack so it was never the intention to have such a thing working in the first place. It's just bad practice. Use it all you want in your private project, but if I personally ever see Lombok used in a professional project I get to work on, I immediately recognize a poor developer.
I assume you won't use any other tools which require you to install an Eclipse plugin, either, and will happily tell people who use those tools they are poor developers, like those crappy people who used Git before support was finally added to Eclipse installation packages?
&gt; domain object I overlooked that. Googled what it means. You might be right on this one. I guess OO patterns (develop to interfaces) do not work well with OO anti patterns (domain driven design). :)
Yes, Kotlin's very promising in this area. Needs lenses tho...
I used IntelliJ IDEA's GUi builder in making Poker Copilot (https://pokercopilot.com). I sometimes love it, sometime hate it. I typically use it for specific dialogs or panels, while building my main UI by hand. 
Nice! I think you commented on my last post about nice-looking java UIs. I've been thinking of switching from Eclipse to InteliJ. Not too sure yet.
Just been playing about with this having seen your comment - very nice, seems pretty easy to get a clean, modern UI (to be expected, given it's Bootstrap). Plays nicely too with Primefaces for the additional components it doesn't support, so yeah - all in all I'm impressed.
Using git doesn't litter your code with compilation and IDE errors. It can also be handled by an outside-IDE tool. Lombok cannot do these things. Either you hack your IDE with their executable or live with everything littered in errors and compiling out of IDE. As I said. Every other plugin works **with** Eclipse, according to the rules. Lombok **craps** at all those rules and hacks its way into your IDE forcefully. It's not a download-and-restart, regular plugin. But that's just my opinion. I still hold it though - using Lombok in any professional project that is supposed to be worked over a long period of time by multiple people is unprofessional because it forces everyone besides you to install that damn thing and hack their IDEs and play by the Lombok rules. If you use git, it doesn't force another devloper to install a git plugin for Eclipse, because they can do git from the console or SourceTree. If you use Lombok, everyone else has to use it too or deal with the whole code shining in red errors. EDIT: Just to be clear, I like **what** Lombok is doing but I strongly dislike **how** it's doing what it's doing. I'd love to have a @Data annotation built into Java. But I won't hack my way into it - and I surely won't force anyone else to do it to.
Oh a tooltip. I didn't get that.
Thanks :)
Yes, its reverse proxy with different ip on each request....
I prefer Spock or Scalatest to Cucumber for my unit tests. I like having the code inlined with the specifications. 
No, your remark exposes your lack of long-term experience with the Java ecosystem. JBuilder was infamous for the UI code it produced, for example. VisualStudio and VisualCafe are also other IDEs that produced shit code.
Same here. Whenever I hear someone say they code their java guis by hand I immediately assume they've never worked on a large scale java desktop app. At work our application has hundreds of forms. Think of the countless man hours wasted coding guis by hand not to mention the man hours to fix and the bugs.
Can't you just use the "community" version which is a bit delayed from paid version?
Vitingo, thanks for mentioning my little project. Glad to see folks are still using it after all these years. Cheers Jacek
&gt; Yea that's kinda how I read it too.. since when was making your job easier a bad thing In the case of @Autowire, the problem isn't that "it's easy", but it's that it makes your job easy in an area that's not hard to begin with (wiring) and makes your job nearly impossible in an area that's crucial to the project overall (dependency flow, which directly determines the architecture and behavior of a system). Regarding @InjectMocks, I believe the author is complaining that it incapacitates your IDE's ability to do static analysis of what's going on and you're walking blind at runtime, which hides problems you'd see early with more traditional techniques. Deferring what could be instant error feedback to runtime doesn't make your job easier, it makes it harder. We keep having this debate all the time, that typing is not the bottleneck, so typing less characters in a source file doesn't equate to "easier", yet people keep counting characters when analyzing tooling. The more interesting point here, though, is that use of @InjectMocks is often a direct consequence of using @Autowire. It's another example of how poorly conceived magic doesn't stay "contained" but it cascades throughout the codebase, causing a few problems for every problem it solves, so now you need additional magic to solve the issues caused by the previous magic. The result is a more complex, harder to learn and understand system overall.
Not sure exactly what you mean by boilerplate, but e(fx)clipse does have the ability to generate controller code skeletons from fxml files. Just make sure all the components you need are labeled in scene builder and it will generate the controller class for you. 
&gt; It's noisy, and likely to have a negative impact on the overall quality of the test. I disagree. I am a junior level dev, but I like the word test being in a test and here's why. When I'm wanting to find out if there is a test for a specific function, especially one that's repeated a ton, I'd prefer to be able to prepend the name of the function with test when searching the whole solution. P.S. I am coming back to java from .NetLand. Are they called solutions? I've forgot. 
Wrote my own Gui and Gui Builder a long time ago... (Java is pretty lacking in the Gui department).
Are you on drugs right? Not a troll serious question.
Anyone use MigLayout? I haven't used it a lot, but it seems better than any of the other Java Swing ones.
This is fantastic.
Indeed. Great blog. Wasn't aware.
Thank you. This was a useful source to help me compare. I'm currently working on transitioning my program from Swing to JavaFX. 
I haven't done much complex work with Swing, but for FX, FXML is a must. It's much more practical for modeling a GUI than straight Java code is.
Don't bother clicking. I want my 5 seconds back.
I've used a lot of swing and a lot of Windows forms and xaml. Winforms and Xaml blow swing out of the water. When you add a label or textbox to a NetBeans swing gui and it pulls everything else out of alignment, it's enough to make you want to pull your hair out. Also, in NetBeans you can't directly edit the generated code. In vs you can. I can add something to my form where I want it and go to the designer gen code to fix it up how I want it. Netbeans prevents that unless you go through the gui. I can't even format my code in the gen section. Also, winforms user controls are pretty self explanatory and show up by default in the toolbox, while I have to manually add swing components. On top of which, java has apparently decided swing developers can go screw themselves. No more support for swing application framework. Oh, you can add a plugin, but there are 2 with the same name, not including the one included in the NetBeans list, which isn't the swing application framework but is a small portion of if. And God forbid you have mismatching maven components. You will spend all your time trying to figure out how to get your forms to show the gui, when you discover, gasp! NetBeans had replaced the types in the gen code. Meanwhile, VS and Winforms still open forms and user controls from 10 years ago like it's nothing. Sorry man, winforms wins this contest hands down.
It is bad design, but but even for hibernate @Entity this approach can lead into bad design. If you have table with more than 6 columns, you will get bad design.
How do you manage to create "fill parent" layouts with SceneBuilder? I always end up writing FXML by hand because it's just so damn hard to get controls to fill their parent container.
Yes it is really a nice framework and the development is very active! They do support primefaces and omnifaces which makes a perfect match for (imho) 99% of all usecases. I also love the ajax extension they introduced with bootsfaces - makes it so much simpler!
But does this really matter? In my opinion, content should be judged for what it is, not for who posted it. ^^Now, ^^if ^^some ^^certain ^^tutorial ^^video ^^maker ^^reads ^^this: ^^People ^^with ^^years ^^of ^^experience ^^had ^^determined ^^that ^^those ^^videos ^^are ^^not ^^quite ^^a ^^valuable ^^contribution ^^to ^^the ^^Java ^^world, ^^plus ^^it's ^^not ^^like ^^there ^^are ^^only ^^a ^^few ^^such ^^tutorials ^^out ^^there. What would you say is wrong about the post itself?
It's u/BenRayfield. That is the only answer to all your questions.
AFAIK Oracle keeps maintaining the code, but doesn't distribute binaries anymore. You can still get current binaries from gluonhq.
They are crap - it really isn't that hard to hardcode it, and it's a skill that is great for debugging anyways. 
Ok, I do see reason in what you're saying. * JavaScript forces ads into the surfers' faces (e.g. as an overlay after a few seconds that you have to remove first). * JavaScript is being used a ton more today than years ago - the pages have grown a lot, are often bigger than several of their contained images combined. (The source code of this page, for example, is currently about 220 KB.) Therefore, depending on machine load or how many tabs are open or how fast the computer is, one can easily experience stutters and such. * Java and JavaScript have sadly (FU NETSCAPE!) an extremely similar name, so people would assume that they are closely related. If they'd dislike JavaScript, they would at least subconsciously draw the connection to Java. But personally, I don't think that's a problem for Java: When people browse the Web, they want content - where JavaScript might slow them down because effectively programs are being pushed into their faces. When people execute programs locally, they want programs - where Java(Script) would do what it's supposed to, and the people would interact *with the program*, they would not feel that the book they're reading behaves in an unwanted way. What I DO see as a problem for Java is that Sun/Oracle put crapware in to the JRE installer. (Which is why I keep recommending to use the JDK instead, because its installer doesn't have that stuff, it also doesn't install the browser plugin abomination, and it doesn't install the update nagger. (Why would you care if the security problems of the browser plugin aren't part of your Java experience in the first place?)) That certainly smeared dog feces all over the face of Java, tainting its image in the public. I can't imagine that the money this made for Sun/Oracle was *even remotESTly* worth that damage. Not to speak of being so unimaginably ignorant towards the millions of Java developers whose work is (metaphorically) being pushed towards the spam folder by this. Reminds me of an army of developers making a game (in C or Unity etc.), and then some asshole decides that all of it shall be locked away behind an unchangeable much too low FieldOfView. So, again: I understand your point, but I don't think that the effect you describe is taking place on a relevant scale. ---- Btw.: Do you happen to use an automatic translator (at least as support) for your comments, and/or what's your native language? Assuming that this is so: Automatic translator (-&gt; very weird English), and the confusion of Java and JavaScript - that was a recipe for disaster. I can imagine that this post would have taken a completely different turn without those factors.
You're making my point. I've developed both WinForms and WPF apps, but I still prefer Swing. The problems you have with Swing is due to the Windows development workflow you bring to Java. I don't have those problems because I don't use builders, I know the layout managers very well and prefer to write code. Swing doesn't have an app framework, you have the power of choice. Similarly, the problems I have with WinForms and WPF, namely every advantage you list is a burden to me, but clearly my problems with Microsoft technology is due to the Java development workflow I bring with me. I can't write code, I *must* use a visual tool or XAML. I put up with WPF and WinForms because that's what is necessary to write native apps for Windows. Again, which is better is what you're used to. 
I'm not really acquainted enough with Akka and Reactor to make a qualified comparison, but I would say that the main difference is that Vert.x is meant to be a library that you can include in any framework/application where you need functional/reactive capabilities without having to worry about concurrency issues. For a more in-depth discussions, you might look at the InfoQ interview with Tim Fox, creator of Vert.x, [HERE](http://www.infoq.com/articles/vertx-3-tim-fox)
spam
Correct me if I'm wrong, but the term: &gt; You can not get rid of the "Powered by B3log 开源" from any page, even which you made is not compatible with the apache 2.0 license, correct? I mean, I could take their source code, "embed" it in my commercial application (with attribution in the code) on a system which did not contain the "Powered by". https://tldrlegal.com/license/apache-license-2.0-%28apache-2.0%29 - Commercial Use - Modify - etc
This reads like some of the ramblings from the guy who made TempleOS. Well worth a read if you haven't seen it before. He is constructing God's holy operating system because God personally told him to do it: http://www.templeos.org/Wb/Home/Wb2/TempleOS.html
It depends on the parent container. I use a lot of vboxes and hboxes and then just choose the VGrow-&gt;Always or HGrow-&gt;Always where I need something to expand. 
ianal, I'm not actually sure I'm right though - someone else might have an idea.
Microsoft just announced a very large partnership with Red Hat. This agreement puts in place support for Red Hat Middleware such as Jboss EAP, Jboss Fuse, and OpenShift. In my opinion this is making Java a first class citizen on Azure. OpenShift would allow you to run generic Java workloads, think of it kind of like a Docker management solution. Press release here: https://www.redhat.com/en/about/press-releases/microsoft-and-red-hat-deliver-new-standard-enterprise-cloud-experiences
Why *must* you use a visual tool? Why can't you write code? In fact, I'd argue it is far easier to write code in WinForms than it is in Swing. You don't have to use Actions and Listeners and all that other nonsense. &gt; The problems you have with Swing is due to the Windows development workflow you bring to Java The problems I have with Swing have nothing to do with my workflow. They have to do with the fact that Swing is complicated (to show a form it's not form.Open(), form.Close(), like Winforms, it's form.setVisible(true), how is that intuitive at all?), and it's damn near impossible to get it to look right. Also, card layouts are ridiculously confusing, and the only way to do multiple pages outside of tabs. It's almost like a single window, single section app is all the creators of swing thought would be necessary. In Winforms I can add both UserControls to the page, call Dock() on it, then call userControl1.BringToFront(). Easy. In Java, you actually have to get CardLayout from the panel before you can use it: CardLayout cardLayout = (CardLayout) contentPanel.getLayout(); cardLayout.show(contentPanel, "myControl"); Typical Java, it takes 2 - 3 lines of code for every 1 in C#. You can do everything in code in WinForms that you can in Swing. With less code. The only difference is that you **almost have to** do it in code in swing, bc the designer sucks.
We used it a while back so a lot might have changed. We needed it for Windows Phone build servers for [Codename One](https://www.codenameone.com). So we used the IaaS. We had a lot of stability issues but it seems like more of a "windows" issue than an Azure issue (mostly Linux/Mac guys here). But the thing that made us dump them completely is their opaque billing. Their UI is very pretty but it makes navigating thru to billing almost impossible and hard to track. We ended up with a major bill which we didn't receive because of miscommunication about their startup package. Anyway, we decided its easier to work with a single IaaS provider and moved everything back to AWS (which we later replaced with Digital Ocean). 
The question is why? A linux server is cheaper and more stable than a Windows server. In theory most Java apps can run on both.. why would I pick Azure? Look at AWS or GCE for more linux focus (and I think both can fallback to windows if you really need to)
Azure does linux on a windows server right? So you still have the underlying windows host crap to use?
&gt; about akkida746's posts' quality in general Personally, I think this: * two year account * -7 comment karma * 92% of links submitted (=22 out of 24) from the same domain. 
So, how about the fact that the 24 blog posts gave him 60 link karma? If that's the way you're evaluating content, you're saying his content should stay.
New version System Properties are (as printed by `java -XshowSettings:properties`): java.version = 9-ea java.specification.version = 9 java.runtime.version = 9-ea+95-2015-12-02-blah.blah.blah... (semver) The root JDK folder (in tar.gz package) is now called `jdk-9` instead of `jdk1.9.0`. &gt; The most common problem we've discovered is that applications that detect the version number may include code which assumes that the version string begins with "1." or that there is always a '.' in the version string. (&lt;http://mail.openjdk.java.net/pipermail/verona-dev/2015-November/000293.html&gt;) Yeah, [enjoy fixing your code](https://github.com/search?l=java&amp;q=System.getProperty%28%22java.version%22%29+java7&amp;ref=searchresults&amp;type=Code&amp;utf8=%E2%9C%93) ;)
no, it's just a Linux VM. no different than what you get at other cloud vendors. Their other more "specialized" offerings like Web App, etc. runs on Windows and IIS though.
That all may be so, but I want to return to my original question I asked the other guy: "What do you think about the post's content itself?" That is what this should be about. Not if OP is Hitler's stepson. Ok, disclaimer: I just watched [Thank you for smoking](http://www.imdb.com/title/tt0427944/) (2005) and the credit music is playing on my headphones. But isn't the question really: What benefits the subreddit more? Let's say we'd remove all posters that are in here for the link score or even the money. How many interesting Java content posts would there be? I'm not arguing there wouldn't be any, I'm *asking*. Have you done *that* math? Would it benefit the subreddit to remove all those? Or would it make /r\/Java almost free of content? Let it be known that I won't do a thing if the argument is not about *what* is posted instead of *who* is posting it.
Terrible title and terrible article. This just means that the JDK version numbers may be different, as proposed in [JEP-223](http://openjdk.java.net/jeps/223).
I totally get that -- it's precisely the same when you want to reject invalid arguments. But now your method parameters are suddenly part of the public API and can't simply be changed. C# has Python-like formally named parameters -- it solves no real problems, but hides one (unwieldy signatures) and comes at considerable link time complexity. Fancy annotations and hidden reflection makes it far too easy to forget that you're making your class a boundary object.
They run a linux host? Do you have a citation for this?
Hmmm, a curmudgeon is talking about JBuilder as if it's still a relevant example.
&gt; What would you say is wrong about the post itself? What value do you think this post adds? I can't speak for new developers, or experienced developers, or intermediate developers. Speaking for myself, using Spring since 2.5, this is clickbait so I stated as much.
A related article detailing how escape analysis works: http://psy-lob-saw.blogspot.hu/2014/12/the-escape-of-arraylistiterator.html
(this is starting to be a personal conversation, I doubt anyone else is reading it this far down :) ) &gt; What do you think about the post's content itself? I deliberately sidestepped this, because in cases like these (and in the general case of this subreddit, see below) I don't think that one mediocre or even good post justifies the means of spamming 100 bad ones. But since you ask: I think it's garbage. * It's three small paragraphs, providing nothing of value * It's in bad english &gt; ..This transaction **is resides** in one JVM only.. * The (blurry) image is possibly stolen from another webpages (e.g. [here](https://www.progress.com/jdbc/resources/tutorials/understanding-jta/distributed-transactions-and-the-transaction-manager)) * It tries to explain **2**PC in terms of having *three* phases * The 2PC section was also separately submitted [a minute earlier in this very subreddit](https://www.reddit.com/r/java/comments/3vsd5k/what_is_twophase_commit_in_java/) (and hillariously to /r/yahooanswers, too) than this submission here. Word for word the same sentences. "Why only submit one post if you can copy/paste and make two Reddit submissions out of it"? * It doesn't actually explain what a transaction is, just that there are "local" and "global" ones. ---- &gt; Would it benefit the subreddit to remove all those? Or would it make /r/Java almost free of content? I've heard this argument before, and I guess it's clear what my opinion is :) I feel it's choosing between drowning in thousands of shitposts just to find a good nugget once in a while, or to just start out with less submissions but without any noise. I look at these posts like advertisments: just because I can look away doesn't mean it's less annoying. I know what people say about that: just downvote and move on (which I do, who would have thought). The thing is: I feel that a) the up/downvote system is very broken on Reddit, both for small and very large posts, and b) it sends the wrong incentive to spammers/advertisers/shitposters to allow anything just to say "maybe there will be a golden nugget once in a while". IMO this ends in a sea of shitposts, and will drive away quality content. 
I was short with what I was thinking. I think calling a test testFooWithNullParameters is a great name, but testFoo is bad.
I'm managing like 20 Ubuntu VMs on Azure right now without any problem if that counts as citation
Luckily Corba is looking to be pruned
Yeah, there was an interesting discussion on this topic on JEE8 spec EG mailing list: https://java.net/projects/javaee-spec/lists/jsr366-experts/archive/2015-10/
&gt; What value do you think this post adds? I can't speak for new developers, or experienced developers, or intermediate developers. And I can't speak for developers who use Spring at all, that's why I ask.
&gt; because [...] I don't think that one mediocre or even good post justifies the means of spamming 100 bad ones. I agree, I wouldn't *not* ban a user because some of their constant spam is kind of good. And for the record, before I started to ask about this in here, I had kicked off a moderator [discussion](https://i.imgur.com/2A84YR6.png) (that seems to have died) about the problem of this user. (incl. the blurry heavily reused image) It's kind of moot at this point, because desrtfx has removed all posts by this user as spam, though I'll come across this kind of problem again. Well, good that we don't have just *one* moderator. Ok, so your analysis of the content itself makes it seem to me as if it's pulled from some kind of content pool that was created for the purpose of feeding into spam posts, not to actually deliver content.
Okay, I misunderstood that. But `testFooWithNullParameters` still doesn't capture the intent of the test, only the context, so you better hope the body is comprehensible. Last week I found a test with a method name, an assert message, and validation values that were all unaligned.
Why did you move from AWS to DO? Were there any AWS services that were hard to migrate from?
Does this count as a citation? https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-tutorial/
Nice catch.
Call me crazy, but i use plain JSF with bootstrap from webjars. It actually works pretty well. For a true open source JSF library take a look at openfaces (http://openfaces.org/) or richfaces (http://richfaces.jboss.org/), although that last one will not be developed any further.
We didn't use AWS services at the time only IaaS. A while back we started using S3 for some functionality in the build process but since this is so separate its not a big deal. The main reason for the switch is simplicity in pricing/management. We used to have the whole reserved instance thing which is just painful, you go thru the process and there is no visual indication that you went thru it and you are locked in for a year (somewhat an antithesis for the whole "cloud" benefit). I did the math and at that time Digital Ocean with no commitment was cheaper than a reserved instance for a year. It also had better configurations in some aspects (SSD etc.) so we tried it with one instance and loved the management console, the ability to pay with paypal etc. I later talked with google guys a bit and we reviewed their management console where they claimed that "there is no way a startup can compete with our pricing". Turns out that DO is cheaper than google too or at least was at that point in time...
Don't see host OS listed
I assume the reasoning is basically: You have two hands and ctrl+z is already taken.
Wow, that is beautiful sample code. A basic question: How do you chain setters like this? LoadingCache&lt;String, Book&gt; booksByTitle = Caffeine.newBuilder() .maximumSize(10_000) .expireAfterAccess(5, TimeUnit.MINUTES) .refreshAfterWrite(1, TimeUnit.MINUTES) .build(title -&gt; { // Using a jOOQ repository ...
I love IntelliJ, but boy do their default keyboard settings suck. I changed about *all* of them. Which I suggest everybody should do: Do not fear to lose anything. Instead, whenever the desire to call a function comes up, think of the best key for that, assign it, and start using it. That would also be the best way to get into the demo-game [Receiver](http://store.steampowered.com/app/234190/) with its relatively complex gun mechanics: The moment I just tossed out the old settings, it all became very easy for me. Just do *your* thing, don't care about the defaults at all. I also suggest to change the color settings, because there are some sophisticated helpful options buried in there which are not all turned on by default. Well, one thing I particularly hated about the keyboard settings was this: CTRL+z undos, but CTRL+y deletes a line. So, if you think "Crap, I better redo that.", you're instead doing a new action that clears all subsequent undos that you would want to redo.
Looks like it's gonna be supported in upcoming Spring, too. https://github.com/spring-projects/spring-framework/pull/921
It would've been interesting to see the final performance numbers on the Atom server, since it behaved differently to the i7 desktop PC. Nevertheless, this was a very interesting and well-written article :)
Great move!
For me it's dd ;)
Reasons: 1. Premature optimization 2. You have to learn new syntax 3. You have to learn new syntax 
Thanks for your very insightful experience. On paper, ADF and Oracle SOA Suite looks amazing when compared to the JBoss stack. Glad to see it really isn't so when you get into it.
Was it "WTF? why didn't I see this before?" or "wtf??? I thought Java EE was so heavy, but it isn't! Rod lied to me all those years!"?
Are you sure that you're using the Default Keymap? The default shortcut for **Next Difference** should just be [bound to [F7]](https://www.jetbrains.com/idea/help/differences-viewer.html#d1072733e159).
Love this article. The new stuff in java 8 is wonderful but so over used. So many developers think because these things are there now and new then they *should* use it by default. Rather than thinking about what the most appropriate solution is, which IMHO is often the 'old fashion' way.
I'm 32 and bald now. I blame that completely on the Oracle SOA suite. One really fun part of Oracle SOA is when you realize that the tablespaces in your database are getting full. So you start looking around at how you can purge some of that data. The the nasty realization hits you that SOA doesn't come out of the box with anything to do that. Oracle does have some SQL scripts you can try, but they most likely won't work for you. You'll probably end up writing your own like I did, or just ignore the problem and keep adding more space to your database. You'll get really familiar with this page: http://docs.oracle.com/cd/E23943_01/admin.1111/e10226/soaadmin_partition.htm#SOAAG97256 
The speed of looping infrastructure probably isn't the main issue in most code.
I won't encourage you in this conversation, I know you are one of Java EE trolls, but if I were you I wouldn't endorse this shit. I think that this "server" is bad for everyone. Do yourself a favour, go to their website, try to find out anything about it, go back here and apologize politely. 
I might replace 2. with "Wait maybe it is better"
To prevent errors due to mixing concerns as you describe, every result is always passed trough the local pipeline. The article says that the intermediate actions are consumed and removed, but that is only in the context of parsing the pipeline. When the results come back from the database, every element will still make the journey down the pipeline as before. The only difference is that some elements have been filtered out before leaving the database. The general rule of thumb is that every element that might or might not pass the filter due to incompatibilities between SQL and java should be sent anyway so that it can be tested locally. If an error occurs in the local pipeline or on the database side, you will also have access to the entire pipeline as well as any generated SQL code. It is not magical.
I'm on the author's side in regards to num 1: &gt; Premature optimisation is not good, but cargo-culting the avoidance of premature opimisation is even worse. If you gotta write a sorting algo, do you start by writing a bubble-sort until you get complaints? Of course not, because you know a faster way to get the same results. 
like my Tomcat + Spring + Hibernate stack traces could get any worse
I played around with Groovy in its early days, I'm not even sure it was at 1.0 at that point. We wrote a significant project in Groovy and, at first, were excited by the syntactical shortcuts. Things like building XML were 'really easy'. After living with the code base in production for a couple of months, my entire team started to resent the language. When it worked, it was fine, but when it didn't, it was a nightmare to debug. The insanely long stack traces coupled with a lot of the 'magic' that allows Groovy to have the syntax it does made debugging it a nightmare. We eventually re-wrote the entire project in Java. Groovy has probably evolved a lot since I used it ~7 years ago and I'm probably being unfair to the language by judging it from its early days. I've been living in 'pure Java' since then and I don't really miss the syntactical sugar I gained by using Groovy. 
Interesting, thanks for sharing. Certainly, the language has come a long way, but I can imagine what it must have been like
cept the stack trace is still readable. the topmost stack line referencing a file you own is where the error is generated in your code. plus, once you start having functions and libraries involved you're likely to run into much nastier stack traces than that. it's a poor argument.
The purpose of Streams is *not* as some sort of replacement to for loops. If you just have a list you need to iterate over, it's obvious that `Stream.forEach` isn't necessary. `Stream.forEach` is *not* for when you have a List that needs iterating. It's for when you have constructed a `Stream` that needs iterating. The difference being that Streams can come from a lot of different sources, not just a straight `Collection.stream()`. And converting Streams to an `Iterable` or a `List` just for iterating makes less sense than just having a `forEach` method. Using `Stream.forEach` means that you get to live under your Stream's pipeline, rather than forcing your own imperative loop. In general, it's theoretically possible for different kinds of Streams to exist where the pipeline is in some way different than an ordinary imperative pipeline. Currently, the only example of this is parallel streams, which will call your lambda in a parallel, non-sequential way, which will make the "loop" faster if the code inside the lambda is performance critical. But the point is that you can let the `Stream` pipeline control when and how everything happens. Although even in these cases where you would use `Stream.forEach`, it's likely that some reduction, mapping, or flatMapping process is more appropriate. I've been writing a lot with Streams since they came out, and I can count on one hand the number of times I've used `Stream.forEach`. I'll reiterate: The purpose of Streams is **not** as some sort of replacement to for loops. Streams are meant to compose data.
Either Microsoft makes the hypervisor, or someone like Xen makes the hypervisor. They are different.... 
Ooh, interesting idea for a follow-up blog post, indeed
&gt; sometimes substantial performance gains can be achieved through substantial refactoring, such as (for example) adopting a data oriented design approach. if one considers performance early, it may be possible to avoid technical debt in this direction. foreach and for are not different enough that substantial refactoring would be needed. plus, I would contend that it's better to develop a prototype and get a better feel for the problem space than overthink a design in the early stages that may end up hampering performance instead of helping it. 
No mention of the fact that `forEach` should be avoided since it implies a side-effect-only operation, which doesn't lend itself to composability, parallelism etc. Instead, prefer `map` &amp; `flatMap`, for mapping pure operations over collections (as well as `filter`, `reduce`, `collect` etc).
Ant is better
Any other Guava modernization libraries you find useful?
Further, I would question the benchmarks (the code isn't provided). In my own benchmarks the forEach was equally as fast as the "for each" loop over an iterable. (Though, interestingly raw arrays were definitely faster by a factor of almost 2).
It's still readable, in the sense that you can indeed read it. But there is no doubt that there is a lot more to read for code that does essentially the same thing, which means it is *less readable*.
And just to add to this, it is a pattern called [Fluent Interface](https://en.wikipedia.org/wiki/Fluent_interface). It is very commonly combined with the builder pattern that you see here, but can be useful outside of the builder too.
something.. something.. matrix code reading joke about not even seeing the code anymore..
As a fellow users of Tomcat + Spring + Hibernate, I can only offer this: Somehow, they get worse when using streams.
4. The syntax, it's not so pretty
&gt; I did the math and at that time Digital Ocean with no commitment was cheaper than a reserved instance for a year. Wow, that's nuts. Thanks for explaining. I guess you really are paying a premium for the AWS brand as well as the other services available.
You sound like me at work, when I'm talking to a PM and I need to make a getaway. Nothing incorrect about the words, but it doesn't really pertain to the matter at hand. It sounds like you're just trying to convince me that you know a lot about performance. Not for nothing, bit I've done game dev too; it was standard practice to not use foreach loops on Java collections because of the GC overhead of instantiating a new iterator every time. At my current non-game-dev job it's not as big a deal, but we still don't knowingly introduce less performant code unless it gets us something better, like readability. I'm still waiting for someone to claim that in the author's example, the less performant example was objectively more readable.
That's probably because Collection.forEach (inherited from Iterable.forEach) doesn't actually use streams, it uses a for-each loop internally and just calls the lambda function you give it on each element.
&gt;code that missed the deadline doesn't exist in the customer's app. Don't you see how this is totally bypassing the conversation? In what world does a standard for loop delay a ship? Did we see a sharp decline in release delays when Java 8 came out, because finally we didn't spend 3 hours hand-crafting a one-line loop construct? &gt;I suspect most people won't claim the code is objectively more readable since there is no such thing. I give up.
What is the main issue in most code? We should probably notify everyone who writes dev blogs on the internet so they can retool.
You know about [joda-time](http://www.joda.org/joda-time/)?
I believe that first example could be simplified to: names.forEach(System.out::println); Use of the method reference can remove a lot of code. 
Then use a loop...
A lot of people seem to think that Java (pre-8) sucks, but I find it rather nice. Sure, it's a bit verbose (though really not as much as people make it out to be), but at least you always know what you're looking at.
1) Premature optimization. If it's a performance-critical part of your codebase, you can isolate it and optimize it later. 2) Really? The author cherry-picks a highly optimized, upvoted SO answer and compares it to his own framework and then points out that HIS OWN FRAMEWORK is less readable. That's some serious confirmation bias, and 99% of typical code in pull requests pre-streams isn't going to look remotely like that. 3) OK, the stack trace is longer, so what? The very first line of the stack trace points to the line in his own code where the problem is, and all the rest are JDK calls. Well, 99.999999+% of the time, the bug isn't going to be in the JDK. It sounds like what the author is really trying to say is not "lambdas have bad stacktraces" but rather "give me an easy way to filter out all the JDK calls from the error stacktraces because they make it harder to find bugs in my own code." The author is dutifully ignoring the fact that streams eliminate most bugs arising from improper iteration and help force the programmer to focus on isolating more parts of the computation. Not many shops have discovered this, but it really helps to set stylistic guidelines and force any lambda statement longer than a line or two into its own method, which is then invoked by method reference. It is then easier to test that method in isolation and also keep breaking it up into smaller methods for readability and reuse. TL:DR - author is bitter about coworkers forcing him to learn new paradigms
Mocking could be improved by using JMOCKIT. This tool can even mock static or final methods. Additionally the API is more consistent compared to most other frameworks. And it is the only mocking framework that is actively developed. 
This is very interesting for jsf web applications - would you mind building jsf components? ;-)
&gt; Premature optimization. If it's a performance-critical part of your codebase, you can isolate it and optimize it later. There is performance and there is load. When you systematically generate a 10% load overhead throughout your application (which obviously doesn't hurt individual loop performance), there is no way to optimize that later. The article was explicitly stressing the effect on load and the fact that developers cargo cult this "premature optimisation" argument, completely forgetting that there is such a thing as load. &gt; That's some serious confirmation bias, and 99% of typical code in pull requests pre-streams isn't going to look remotely like that. The article mentions "it depends". &gt; but rather "give me an easy way to filter out all the JDK calls from the error stacktraces because they make it harder to find bugs in my own code." That would be wonderful! Being able to filter / group / colour / etc stack traces in logs / profilers / IDEs, etc. would be some real added value, specifically when used with frameworks. &gt; TL:DR - author is bitter about coworkers forcing him to learn new paradigms I suggest you read (not tl;dr, this time) more of the blog posts ;-)
I downloaded it.... Its running on my PC now, looks to be tomcat based, like TomEE. Its Certified by Oracle as Java EE 6 compliant. So, unless some big back handers have been paid to Oracle behind the scenes (it can happen I guess!), then it should in theory run any application made for this platform.. This guy http://gurkanerdogdu.blogspot.com.tr/2015/11/ow2-siwpas-certified-java-ee-6-web.html - has put a huge amount of work into bringing this into fruition. He isn't just anyone, he was on the Expert group for JSR 299, CDI spec. He's obviously trying to bring out a server to the marketplace that people can use for free, and he can charge people for support.... one has to make a living after all. Just like Spring do for their framework. So, honestly, I see no reason for this to be voted down....at all. Unless the mere fact that this technology frightens Spring trolls like yourself, as it kind of makes Spring irrelevant. 
There's no point talking to you, you're just too stubborn. Java EE is like religion to you. 
True, good point. [I kind of wrote the book](http://blog.jooq.org/2012/01/05/the-java-fluent-api-designer-crash-course/), but it hadn't occurred to me to mention that...
Everyone has an opinion about Java, this is the best symptom of the language's health.
This one has been challenged a long time ago, but it's still in the mind of everyone (including myself, at times). That horrible practice of prefixing every method with `get`, even if we're not in JavaBeans&amp;trade; properties land. And JavaEE's love for [annotations](http://www.annotatiomania.com) everywhere. They'll regret that just as much as the previous XML frenzy
No.... Dont you dare blame this on Java EE. This is the needless addition of other frameworks that is causing this. Look at the zoomed in version here: https://ptrthomas.files.wordpress.com/2006/06/jtrac-callstack.pdf Look at the first part of the callstack. It isn't just using a lightweight container, like tomcat, it is using JBoss... a full blown JavaEE Container, with things like Security / Dependency injection built in. Look at it. It has references to org.jboss.web.tomcat.security.JaccContextValue. So, there is security management going on there. So, why did they also throw Acegi into the mix...... (the next block of shite down) And then they throw Spring MVC in, and Spring webflow, even though JBoss has a MVC framework Built right in (JSF) And then more Spring AOP shite Followed by Spring ORM, and then Hibernate And then finally JDBC. SO, the standardised parts Java EE, take up just about 1/4 of this stack trace.... the bit at the top, and the JDBC bit at the bottom. All the rest is shitty frameworks thrown into the mix. This is what gives Java a bad name. its not Java EE's fault at all.
Yeah, also with the following snippet, I guess Person p1, Person p2 can be simply p1,p2 
that pretty much every library is available as native Java also helps on the cross platform portability, Python and Ruby code for instance regularly falls over because I have not installed the correct libSomethingSomething-dev C package.
Just upvoted you. I rather use the JEE stack as well.
I highly recommend including log4jAdmin.jsp as well so when you need the extra levels of logging you can easily change it.
I do this all the time..... If you use Hibernate, you just add a field. And it updates everything. If using raw sql, then so long as you've named the columns you want to return (rather than specifying *), then you should just be able to add a column to the database table and everything should work fine. 
They're both bad. Frameworks are over in most other languages. Other languages are moving towards small libraries. And for good reason. Frameworks make debugging difficult because you don't know what's happening behind the scenes and they get in the way when you decide to go off of the beaten path. Your code should never be a dependency of your libraries, but that's just what you get with both EE and spring. 
There's still more considerations. There's constructors that need to be updated. Methods that copy data to new objects need to be updated. Serialization often needs to be updated. You avoid this when using JavaScript, clojure and many other dynamic languages. 
Is this the new Enterprise Quality Fizzbuzz but for hipsters?
Because it's a copy-paste job that doesn't apply here: using a more performant loop structure will have zero impact on how long your prototype takes to make. There's absolutely nothing wrong with considering performance early if it doesn't impact time-to-ship or readability, which the author's examples clearly don't.
What gives you this impression? I don't see much C# talk at all, and i don't see any polls or analysis that implies it's making any real headway in marketshare. If anything Java is on a big high.
This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. I disagree, I think most other people would too. Extraneous noise makes things less readable. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. 
&gt; https://ptrthomas.files.wordpress.com/2006/06/jtrac-callstack.pdf Anytime you have eight nested methods all named the same thing being called by each other -- your API is likely shit.
I guess, seems like it would be very rare though. More likely that it is provided as an alternative to a normal for loop.
The article addresses your (overly generic) argument.
&gt; TL:DR - author is bitter about coworkers forcing him to learn new paradigms The author had a popular functional library for Java out, before you even wrote your first streams Hello World. You should be less arrogant and more open to balanced opinions discussing pros/cons of an approach. Everything in engineering is a trade-off.
&gt; And my point is that this is a penny-wise, pound-foolish approach to development. Slow but correct code is preferable to fast but buggy code. Streams don't prevent bugs, and loops don't cause them, so you might need another argument there.
I just wish Java could have more language features, most importantly, type inference, like `auto` in C++11. Not having to spell out all the types while still enjoying the safety of static typing would be a big plus.
It makes things less readable when you don't know where to look (like in your example). Your post should read &gt; I disagree, I think most other people would too. Extraneous noise makes things less readable. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. This is noise. Which really isn't less readable because in a stack trace you know you rarely need to look at the lines past the one with the relevant information. Everyone who has dealt with a stack trace knows to look at the first line your source is mentioned, which is pretty easy to do. Further, as I said you're going to have this noise if you're using anything beyond the most basic frameworks.
Thanks for your input! I'm just gonna respond to them in one fell swoop. To answer the "why" question: this lib is intended to provide basic conversion between dates, so it uses the Julian Day as the backbone, and so extending to more calendars is easier. It's also very easy to use in that converting you can just pass any calendar as the argument. It's certainly a niche lib, and it supports joda-time as well as Java calendar as input.
&gt; Everyone who has dealt with a stack trace knows to look at the first line your source is mentioned, which is pretty easy to do. As someone that has dealt with countless stack traces, I can tell you that you frequently need to look past the first line of the stacktrace to see where it is being called from.
It's not copy-paste so I don't get your complaint. also, foreach is composable unlike for loops and it's less likely to have bugs such as off by one issues like traditional for loops. enhanced for is better in this sense but it is more difficult to use for modification of elements in the datastructure (you can use map for this effect). further, with foreach and such you remove non-pureness from your loops (your loops don't perform destructive changes on the data they're working on). Lets also not forget that you have to implement iterable on your own datastructures if you want to have the ability to loop over them while you only need to implement a forEach function for your datastructure if you want to use forEach with it. 
Did I say first line of the stack trace? No, I didn't. Please read what I posted: &gt; Everyone who has dealt with a stack trace knows to look at **the first line your source is mentioned** If the relevant portion of the stack trace is not on the first line of your stack trace that's because a library or function you called is throwing the error, and you cannot control the structure of said code anyway making those lines noise you can't do anything about.
&gt; Perhaps you can understand my confusion given that you previously said: &gt; It makes things less readable when you don't know where to look (like in your example). Your post should read &gt; ...followed by a paragraph where the relevant line was the first line. Well, in human speech we don't have set conventions for locating the appropriate information in a sea of text unlike with a stack trace. The best you can do is show an example with the relevant info at the beginning because there's little way to distinguish the important sentences and the unimportant ones without reading a decent amount of them. &gt; So you agree that it's not just about looking at the first line, which means that it will impede readability if you must now search through more lines in order to find the most relevant one. You have to search through more lines period if you're using a function you didn't write and it throws an error mid-execution. Your point is entirely moot because your choice of programming conventions has no bearing on the programming conventions of the libraries you're using nor their structure. &gt; I can't believe I'm wasting my time with this dumb discussion. If it isn't obvious to you that extraneous lines in a stacktrace impede readability, particularly when the relevant line isn't always the first line, then you're probably beyond rational persuasion. Disagreed, I'm fairly rational. I think it's moot to argue about stack trace lines in something you have no control over though. I don't know why you're even bringing it up as if it's a strong point. As for wasting your time, there's an easy solution to that. Stop responding. If you don't want to discuss something don't discuss it, otherwise don't whine at me because I don't adopt your poorly argued viewpoints.
I think that the verbosity still is a problem when reading. It has gotten better with the `Stream` Api but you still have miles of code between the data and the actual logic that operates on them. Especially when the typesystem is limiting the way to express generic behavior in a concise way. Most of the javacode I see is just wrapping and unwrapping data with businesslogic sprinkled in between. For a statically typed language it has one of the worst typesystems. The article has some valid pros of java, verbosity is definitely not one of them. This seems to be a popular standpoint though. Pre java8 I have seen people defend the absence of a `Files.readLines()` Method in the jdk by saying that you get a better feel of how `InputStream`s work that way.
I really love this syntax. When my lambdas grow to big I just extract them into a method and use `this::myMethod`. I would love an eclipse macro for that. Too bad sonarqube doesn't get this syntax and flags my methods as unused.
 // takes an object, returns an Integer Function&lt;Long, String&gt; f = (l) -&gt; l.toString(); Typo or ..?
Yea this slide-show-as-a-website thing... I hate it.
Side-effects could have unexpected behaviour if you parallelise them.
Yes they COULD
&gt; Package-private is not part of the public interface so it normally shouldn't be tested. I could not disagree more. In Utopia, they don't test non-public methods, because they have infinite time to produce perfect code coverage via public api testing. In reality, that' not the case. Else you could argue to only write integration tests against the public facing classes, because the public methods of internal classes are not public API of the library as a whole. &gt; less than a month ago, I discovered a bug in a class with a lot of complex internal behaviour -- the internal behaviour was all package-private and validated with tests, but the public API, which wired it all together, was untested and wired things together incorrectly). And in what way would that have been better if neither the public nor the package-private methods had been tested? The problem was not the *presence* of non-public-api tests, but the *absence* of an additional public api test.
I wouldn't say it's legacy. It makes sense for some projects. I hate it though.
yes I read the article. it's kind of important to discuss the capabilities of each type of looping pattern (and yes, a stream is a kind of looping pattern). distinguishing for and for each loops is necessary because for each loops are inherently safer than for loops, but also more difficult to use in certain situations. a for each loop is much more similar in safety to a stream than your typical for loop, but it's less composable, and it makes use of side-effects as a rule as opposed to streams where you can do side-effecting patterns (like forEach) or pure patterns (like map).
I was not previously familiar with Project Coin but looked it up at http://openjdk.java.net/projects/coin/ and most (or all?) of the features they list have been added to Java. * Strings in switch * Binary integral literals and underscores in numeric literals * Multi-catch and more precise rethrow * Improved type inference for generic instance creation (diamond) * try-with-resources statement * Simplified varargs method invocation Is there more to the project that I'm missing?
I'd like to find out as well. I would say it's at a minimal an extra option. TomEE is Apache, and large Apache projects have a tendency to disappear. Look at Geronimo, just vanished without a trace. And now TomEE which just doesn't do a Java EE 7 release (they are doing commits just no release). I doubt it, but perhaps this Siwpas will do a Java EE 7 release before TomEE? At the current rate it looks like TomEE will need another 2 to 3 years for an EE 7 release, and I won't be surprised if they don't certify at all (since Apache is no longer a JCP member).
Yes, I'm aware of them, and extending those libs would be something I'm open to.. For now this is a slightly different approach by creating these calendars as separate objects that all implement a common interface. It also uses a common calendar, the Julian Day, as the driver for all conversions.
 // peek: debug streams without changes peek(e -&gt; System.out.println(e)). // map: convert every element into something map(e -&gt; e.hashCode()). Consider this instead? // peek: debug streams without changes peek(System.out::println). // map: convert every element into something map(String::hashCode). 
The only thing Spring does is allow you to access other things in Spring.
My team just inherited a sloppily maintained hibernate3 legacy project.. Does anyone know of a good resource for a clean (and sane) hibernate setup?
https://news.ycombinator.com/item?id=10692247
&gt; Method parameters – use plain values. Dealing with tons of Optionals pollutes the method signatures and makes the code harder to read and maintain. Maybe a reference to @NotNull and @Nullable annotations as replacements would be nice.
Yes, you can also build a version yourself from github since all changes in paid versions are at github as well under main branch.
More accurately I think the trend of mega-frameworks is over. Frameworks are being decoupled and split into smaller and more granular libraries with clear boundaries. This enables either a take it all approach (mega framework) or a more piece-meal approach.
Debuggable is a pretty terrible example. It could easily be defined Public static void debug(Class&lt;?&gt; class) and you wouldn't have to make a fake interface that doesn't really make sense. If you really need that interface (why?), then let implementers just call the method above. Default methods were a hack to make the streams API possible. We shouldn't pretend that they actually make sense. A more sensible thing would have been to just get rid of interfaces all together and remove the multiple inheritance restrictions. They already had to solve all of the multiple inheritance issues with default methods anyway.
ELI5: JBehave vs Cucumber 
I plan on it! Once I have 10+ calendars done I will just have a simple web interface.
I'm not entirely sure. This library is only designed to make date conversions, and I have a lot of calendars in the works right now.
or libraries, because Java has an amazing community and non profits like Apache behind it.
&gt; One thing I don't understand, is that "everyone" is drooling over C# right now and how hot it is. But if you bring up the fact that Java serves a similar purpose you get a lot of hate. i have a completely different perspective. I'm in the states and active on reddit and HN as well as the tech news sites and blogs. 
Sidebar: &gt; Please seek help with Java programming in /r/Javahelp! Also, as /u/thundergonian said: please include a screenshot. Also you should check the "Problems" view (Window -&gt; Show view -&gt; Problems), it should tell you about causes.
I've been coding java for a living on and off since 99. This whole Java 8 stuff makes me feel... hmm... uncomfortable (I guess that's the right word). Does anyone else feel like that? Am I getting old?
ZeroTurnaround produce some good reports and summaries 
Vert.x is really cool and I would recommend using it for many different types of applications. However, as a word of warning, when you one day need to do heavy lifting and low latency HTTP, Vert.x will come back and bite you in the ass (been there). The messaging system uses JSON, which is both good and bad. It means you can use other languages and have seamless inter-server communication (great) but it also means you spend loads of time generating and parsing JSON (bad). As with all tools it depends on what you want to do, but as a general piece of advice I'd say if you realistically want to do thousands of requests per second with &lt;10ms response times, Vert.x is not your friend.
Ah, thanks for the clarification! That update interval is fast for Java (compared to 6-to-7 or 7-to-8 upgrades) and in the same ballpark as mature languages (C++, C#) but perhaps slow compared to newer ones. 
/r/techsupport
But what is advantage of defining List.sort as a default method vs a static method in the List interface? And even if you like that better, how is an interface with default methods different than an abstract class, except for the fact that multiple inheritance, which was supposed to be bad news, is now magically allowed. I'm not saying the concept of default methods is bad, I'm saying the implementation was a hack. There didn't even need to be an implementation, they just needed to allow multiple inheritance on abstract classes and get rid of interfaces. 
&gt; But what is advantage of defining List.sort as a default method vs a static method in the List interface? &gt; Well, for one thing, it's backwards compatible: existing _List_ implementation doesn't have to be rewritten and recompiled just to copy in a bog-standard piece of code that's repeated ad nauseum in implementation after implementation. 
Because no one refers to Java I/O classes as "streams" except you apparently. Sure there are some classes in java.io that have "Stream" at the end of their name, but that doesn't mean anyone refers to java.io as "streams".
The old corporate sponsor did drop it but it was picked up by the Apache Software Foundation. Groovy is alive and well. http://www.groovy-lang.org/sponsors.html
Why even post this?
When I ran into this, I found a third party implementation: https://jpathwatch.wordpress.com/ It has almost exactly the same API as WatchService but it is much faster.
&gt; AWT doesn't follows MVC (Model View Controller) where model represents data, view represents presentation and controller acts as an interface between model and view. Swing is follows MVC. I didn't even know the former. Swing isn't dead yet, so it's not irrelevant. But I'm not saying that the post is good or anything.
The deserialization issues is part of the standard installation but on it's own may or may not be unsafe. The way it's used in 3rd-party libs is what makes the security vulnerability occur.
Hi henk53, Most of Apache implementations already implement the specifications required for Java EE 7. Also TomEE is working hard to push a version with EE 7 support, and hopefully it won't need 2 to 3 years :) Regarding certification, this is a different matter. TomEE wants to achieve the certification as well, but a few things need to be sorted out before. For the moment, I can say that this is also being worked out.
Seriously, this company is on fire! Intellij is the best IDE I used. Their pricing scheme was way off and they listened to the community. I like the new logo and what their marketing team is doing. Kudos.
I have played with AngularJS/Bootstrap in a Java Desktop App based on the JavaFX WebView. It is easy to connect JavaScript with Java both synchronously and asynchronously (callbacks from Java to JavaScript): https://github.com/lipido/javafxwebview
Personally I don't see any value, given that Swing, SWT and JavaFX offer more control over the application performance than any web technology does.
I'm starting to get really annoyed at things that are something out of the box. Your software does something? Well, now it does it out of the box. Weeeeee
Incremental compilation of a handful of files takes a second or two for our codebases. So the feedback loop is tight. Plus the compilation phase is definitely worth it due to how much Scala's type system helps you write correct code.
Lots of devs don't understand that being able to write and then run code quickly isn't what it means to be more effective. The real cycle time that you want to be improving is the time from when you start writing code to the time that you have completed, confidently correct code. Ruby wins in the naive category of write-&gt;run because it'll run anything. It doesn't win by the actual useful metric.
A welcome/splash page! Welcome to the '90s.
Yes, and your software does something "automatically". Like that feature is somehow different than everything you didn't say was automatic.
Java FX uses CSS for styling.
Seems like the logo I see when I launch phpStorm is a space shuttle displayed on a crt screen with those scan lines in it. I don't hate it, it actually makes me smile... but the shuttle? Don't get me wrong, they make me feel 80's nostalgic... but yeah... didn't 40% of them explode during missions? (And that's unfortunate. Respect to those who lost their lives.) And weren't the shuttles retired for those reasons? So... I'm not sure what that has to do with php...
&gt; Intellij is the best IDE I used Intellij is nice. Visual Studio 2015 blows my mind. Sorry... I know... Here come the down votes. :(
&gt; But those Java UI technologies don't offer the powerful layout technologies that modern browsers do. Have you used JavaFX? Inspired from XAML, both provide native OS integrations without DOM headaches of a document format trying to pretend to be an application. What XHTML + XML Modules should have been. &gt; HTML5 with CSS3 is very powerful. Sure you could code anything in Swing, but how long would it take? For me, a fraction of the time it would take me trying to hack CSS and JavaScript together to make tons of &lt;div&gt; look and behave like the OS native widgets. Or bend &lt;li&gt; to pretend to be menu entries and similar tricks. 
It only does that the first time you visit the site.
So every time you visit if you remove all cookies and history from your browser.
Just click Skip ~~Intro~~Video
Things to consider: 1) If you get hit by a bus, it's easier to hire a run of the mill web developer off the street, and hit the ground running. Go with html, css, js based technology. It's easier to hire talent. 2) User experience between native-feel and webby-feel. VSCode was buit with electron. It feels native. 3) Ease of deployment and upgrade rollouts to end-users. I remember DLL hell of rolling out desktop VB to hundreds of standalone PCs. Or how about JAR hell and JRE hell with SWT apps.
&gt;Two ended in failure, that is a 1.5% failure rate. Correct. Not counting Enterprise which was for testing only, there were 5 shuttles - Columbia, Challenger, Discovery, Atlantis, and Endeavour. Sadly, Two ended in failure, that is 40% of all shuttles.
Okay Now I am convinced JetBrains is spamming the forum. Up votes for a new website design? Who cares and what does this have to do with Java programming? I know they make a Java IDE but a splash screen on the website does not really change anything there. The Marketing is fantastic! 100% would buy!
How dare you sir! How dare you. Jetbrains web page design is clearly better than other IDEs. I was a loser before I saw it but now beautiful women are begging for me. JetBrains Marketing 4ever!
except perhaps perl.
try Kotlin, or Ceylon, or Scala. 
&gt;Intellij is nice. Visual Studio 2015 blows my mind. Wait a minute over here. Are you saying that I can code a Java WebApp with VS2015??? 
And better FX support , FX works better compiled on Intellij , but coding is better on Netbeans.
This is extremely unlikely to actually happen, but I'd be thrillled if the major feature for Gradle 3.0 was dumping Groovy in favor of Kotlin, a-la [Kobalt](http://beust.com/kobalt/home/index.html).
I was aware that it was given to the Apache Foundation, we'll just have to see how much attention it gets. Other projects have gone to ASF and never left the incubator.
&gt; Regarding a date library I don't see a point why https://www.youtube.com/watch?v=-5wpm-gesOY This explains just one small part, time zones. Great video if you haven't seen it.
&gt; Their pricing scheme was way off and they listened to the community. Not to beat a dead horse here, but ... they didn't HAVE to be as drastic as they did. Nothing was stopping them from keeping the old perpetual licensing model and adding subscription on top of that. 
community version is full of bugs that never fixed. Just be ready to buy for it in some stage, it not so expensive ... 
Talk about a company that is doing everything wrong... 
Just click the super big "X" in the corner. It's not like they're forcing you to watch it.
 The OpenFaces commercial licensing makes it a non starter.
You got me excited for nothing. You mention VS2015 in a Java group so one can only assume.... Anyways, back to Visual J++ for me.
Geronimo vanished due to IBM withdrawing from the project. We (IBM) started 2010 with a skeleton crew and after we EE 6 certified Geronimo in 2011, the last WebSphere Community Edition version was shipped and the remaining few of us were moved to Liberty. This left a large void amongst the various EE-related Apache projects where IBM had impact. I left IBM (2012) to start Tomitribe (2013) in an attempt to fill that void. Growing a startup with enough margins to direct back to the world for free is a tough feat, but we're getting there. :) We did a case study with Walmart this JavaOne and the logos are showing up. On Java EE 7, Apache's 10 year license to the Java EE TCK expired just before EE 7 was released. Apache was unwilling to sign the TCK agreement as-is since trust in Oracle had evaporated and the terms are being broken by Apache and everyone else in the industry. I worked with Cameron Purdy and others at Oracle for 2 years on reforming it till he was abruptly fired this August when we were just about at the finish line. http://mail-archives.apache.org/mod_mbox/www-jcp-open/201510.mbox/%3C9CAB30A4-957B-4919-89CD-78137968D1B6%40gmail.com%3E Dust has settled in that camp and we are continuing the discussions. One would not think you would have to work so incredibly hard to give away your code, but that's our industry :) Everyone out there giving away an app server, Siwpas included, are nothing short of heroes.
It's my favorite statically typed, Object Oriented programming language that runs on the JVM.
Pays the mortgage :)
There does seem to be a lot of places that use it. So it would be easier to get a job using it, depending on where you live. I just haven't touched it since doing a subject in Java at university.
Sorry. It might be possible with some of the new stuff. I dunno...
VS 2015 is still worthless without ReSharper. Source : Daily VS 2015 user.
wut
I read "full rebrand" as "full retard". It wasn't wrong. 
I strongly prefer their previous site, with the understated claims and the elegant, low-key design. 
I'm guessing that Dalvik is far too integrated into the inner workings of the kernel and other low level parts of Android as for it to be just updated like that. Otherwise I think Google would've already done it.
Visual Studio is really great. Especially with reshaper ;)
Not Scala?
When I worked at Sun we had our JVM running on Android using native code pretty much like Xamarin runs their code. Back then there were advantages such as performance (as Dalvik was pretty slow) but with ART taking over I now only see drawbacks to this approach. It will make code slower as any native call will exit the JVM to ART and will have to go thru this relatively slow process. There is absolutely no benefit on Android. I'm not sure what their approach will be for iOS but back when I worked there the choice was writing an interpreter as JIT's are illegal on iOS. Again, not exactly a great choice... At [Codename One](https://www.codenameone.com/) we use ART/Dalvik and deliver Java 8 features using retrolambda. For iOS we translate to C code and compile natively: https://github.com/codenameone/CodenameOne/tree/master/vm This is fast and really powerful since it allows us to access all of the tools from Apple and be 100% compatible to their ongoing changes (e.g. bitcode, 64 bit etc...). Those sort of "sensible" approaches would fall flat within Sun/Oracle where there is a rigidness of thought that can't be adopted by a startup. I honestly hope OpenJDK for mobile takes off since it will be really great if we have access to an "official" JDK but knowing the risk aversion of some specific people at Oracle I seriously doubt this will produce anything you'd want to use in production.
Starfleet SOP: Catch it and then discard the core. Problem solved. After that, run on impulse to find the nearest planet/space station (hope that it's not too far away).
I read somewhere that JIT everywhere was a political issue at Sun, mentioning AOT compilation was tabu, regardless of what other JVM vendors were doing. If that is true, I would say that it seems the same people are still in charge, regardless of the work Oracle Labs is doing with AOT support. This attitude has made many of us switch to C++ for portable code across mobile OSes.
Looking forward to some commercial products (hopefully)!
Yep. We took a different approach of leaving Sun/Oracle to do this work as a startup. I think Java is still a great option here since this is a Sun/Oracle political issue and not a technical limitation of Java.
I know of such problems (but I didn't know this video - I like that one). Anyhow - a huge amount of typical date API usage is not related to such specific problems. Just because a problem exists doesn't mean everything is related to it.
The release notes: https://github.com/google/guava/wiki/Release19
Triggering consumer doublethink (or even frenzy) through marketing in order to conceal an unpopular pricing move. Here's how it works: - Shock the community (sometimes referred to as "the valley of tears"), get them bike shedding. - Listen to the community's concerns and "suddenly" find a compromise. Makes the community members feel valued. ("Stockholm syndrome") - Rebrand (generate even more desire for the loved product) In the meantime, everyone overlooks that this was just a classic price increase. They must have learned from Apple. I respect them on an economic level for that! And the new brand is quite neat indeed. Thus far, I thought that rebranding should happen in parallel to the price increase to give the increase additional credibility. This postponed rebranding might just be very cunning, though.
Don't know. I'm Swiss. We have referenda and confirm ourselves by popular vote that we want to raise taxes by 10% :)
All my tools now have the same icon. The two letters are different, but fuck having to read letters instead of picking by shape &amp; color when alt tabbing.
Oh boy, another major release. This is going to be fun. Not.
&gt; Otherwise I think Google would've already done it. Google could have done it long, long ago. They didn't because they didn't like the license (which, incidentally, is the same as the Linux kernel's, but they must have figured vendors might want to fiddle with the runtime and not with the kernel), which is how the whole Android law suit mess started.
Thank you. Believe me this is exactly our context! We have: * good java backend developers but they have no (or little) experience with java GUIs toolkits * Two awesome web designers, I mean they are really good. They developed our website and mobile app, they excel at web design and that's why we would like to profit from their experience to develop the desktop app using technologies they love (HTML/CSS/JS) and not FXML or other. That said, our prototype embeds a tomcat exposing services which are consumed by the GUI built on electron. This architecture is a lot easier for a desktop app compared to a webapp since many problems just disappears when you have only one user and one session :-)
Don't get me wrong, I have absolutely no problem using Swing, SWT or JavaFx (BTW JavaFX 8 is a great release). But you can do a lot more with HTML5/CSS3/ES6. Ok you can use CSS to style your JavaFX app, but web technologies with all available frameworks and GUI toolkits take you GUI to the next level :-)
I hope so, as my mixed Ant/NDK builds still run faster than Gradle build times and they don't trigger the fan.
Asking this on /r/java will probably not yield the most measurable results :P
I used to really enjoy Java programming, for me Java was a verbose language that above all meant that it was easy to read, you could maintain code you hadn't looked at for years really quickly - while good documentation helps, clear code is even better Sadly since the demise of Sun it seems that Java needs every new language feature - often badly implemented, take generics (which are then erased during compilation - great...) the syntax is obscure a few random characters sprinkled in the code and in some cases its just not obvious whats going on. All in all if Generics really were needed (which is debatable) it could have been better implemented Java *used* to be a conservative language (the language itself) this "old fashioned" language meant you had a solid bedrock underneath you... c99 is still in active use today (in a number of libraries and elsewhere), seem fine without Generics... (for example) how is it some almost prehistoric language without all these modern features is still so popular... &lt;/rant&gt;
It is to be used by the developers, not the users! Are you expecting users to install a JVM and compile software themselves?! Zero difference from any other commercial JVM vendor that offers AOT compilers for Java, like Aonix or Excelsior JET, just to cite two examples.
It's a major pain if you are working with hadoop. The version incompatabilities are a complete clusterfuck. They get away with it by just making everything a major release. That's not good engineering.
Yeah, but the major number allows them to break stuff, like they always do... Painful.
And the arse-backwards pricing model too.
&gt;“open source” &gt;the only part that's actually open source is a client to their cloud servers &gt;you can run their build infrastructure yourself—[but it's proprietary and costs $20k/year + $3k/seat/year](https://www.codenameone.com/corporate-server.html) &amp;#3232;_&amp;#3232; Calling that “open source” is like leaving an open bottle of grape juice outside for a year and calling the result “fine wine”.
Electron and node-webkit both embed a webkit based browser (chromium) that supports WebGL, WebWorkers, Audio, Video, Local Storage, etc In regards to integration with native UI, this is already supported by both frameworks. Here is an example of how electron abstracts the notification system with a JS API which is bound behind the scene to the OS specific notifications System: https://github.com/atom/electron/blob/master/docs/tutorial/desktop-environment-integration.md That said, the "look &amp; feel" of the app looks native even though it is based on web technologies behind the scene. I have atom editor on mac os and on windows and it looks native on each os (buttons, menus, etc) 
wtf
No. We try to stay away from OpenJDK code as much as possible. Since the Oracle/Google lawsuit I think that's a prudent policy. Regardless, I think a lot of these projects are overambitious trying to be everything for everyone which usually ends up being nothing to no one. What we created is huge and complex but the implementation is both simple and very conservative. These are "good things(tm)" when you are targeting the quicksand that is mobile platforms. Apple changes things all the time (64bit, bitcode etc.) and dealing with those changes require the agility that a small/simple code base can afford.
I hope they do the same for their pricing maaan even Adobe is more merciful. 
&gt; Since the Oracle/Google lawsuit I think that's a prudent policy. How so? OpenJDK has a very clear, well-known and well-established, license (GPLv2 + classpath exception). Google chose not to abide by it and decided to gamble on an interpretation of copyright law which they figured they could defend in court to circumvent the license (nor were they sued for *using* Java). If you just stick to the license there should be no cause for concern. AFAIK, Oracle has never sued anyone who has claimed to have complied with the OpenJDK license (Google obviously didn't; they claimed that the APIs they copied weren't covered by the license because of their interpretation of the law). So quite the contrary. Google didn't use OpenJDK code, so steering away from it shouldn't put you in the clear if that's what you're concerned about. If anything, providing Java APIs *without* using OpenJDK would put you *more* at risk. &gt; the implementation is both simple and very conservative. These are "good things(tm)" when you are targeting the quicksand that is mobile platforms. OK, fair enough. Although, have you given Graal a look? It is more of a framework for (very) easily building good compilers than a particular compiler. You could perhaps be even more agile when using it (and I'd be interested to learn how that works out).
This is one thing that I've only noticed since I had to do some C# development and now I miss it badly, too.
&gt; do people really consider that [AspectJ] part of an idiomatic Spring implementation? No it's not necessary at all. But it's so convenient. And I don't see why I should make my life harder. In this particular case AOP was used in two places: One as already mentioned to make @Configurable do its magic. The application requires a constraint to check if an email address was already registered. To my knowledge ConstraintValidators are not managed beans. So @Configurable comes here to get the required service into the [`UniqueEmailValidator`](https://github.com/komarserjio/notejam/blob/master/spring/src/main/java/net/notejam/spring/user/signup/constraints/UniqueEmailValidator.java). The second is just a classic authorization cross cutting concern. [`@PermitOwner`](https://github.com/komarserjio/notejam/blob/master/spring/src/main/java/net/notejam/spring/security/owner/PermitOwner.java) will check the authenticated user against the owner of the respective entity.
Nonsense. Our entire VM is open source as well as all the code for everything! Did you bother checking GIT before posting this? It has always been that way!
FYI https://github.com/codenameone/CodenameOne/ I see here: All the abstraction libraries Ports to all the platforms Native iOS VM's Themes etc. GUIBuilder &amp; theme designer sources What's missing?
&gt; I have never had a problem with guava version incompatibilities. A quick look at maven repo says hadoop is compatible with guava versions 11 - 19 ? No it is not. There are subtle changes in the StopWatch class for instance that will break your app in very hard to debug ways. Even the hadoop devs say now, that using guava was a mistake.
Whatever the hell is in that server package I linked to, which I can't see because it costs an assload of money to get a copy of it.
The source is open. Go to github, seriously. The per seat license is for the cloud servers and support. If you want to work with the code you can, its just not "magically easy" and can't be because you need a Mac for iOS and a Windows machine for Windows phone. So we sell a service to simplify that to a trivial level and the support that goes with it. It still open source and yes that does hurt our sales, thanks for caring.
I'm not sure there is any, depending on the level of detail you need you might have to read the source code. This book is very detailed on certain parts of it: "Java Performance" -&gt; http://www.amazon.co.uk/Java-Performance-Addison-Wesley-Charlie-Hunt/dp/0137142528/ref=sr_1_2?ie=UTF8&amp;qid=1449831270&amp;sr=8-2&amp;keywords=java+performance At least in terms of garbage collection and how the JIT compiler works it covers those well. It also has a lot of stuff other than that, like how to troubleshoot memory issues in a unix/windows box
Whose talking about the corporate server? That's a niche project for guys who don't want the cloud servers. Our cloud servers are totally open and have a fully functioning free tier: https://www.codenameone.com/pricing.html No I can't prove that we use the *exact* same source code in the cloud build. But you *can* build offline and see that it produces a similar result. E.g. this is our VM https://github.com/codenameone/CodenameOne/tree/master/vm How is that any different from Sun/Oracle open sourcing their VM? Why is this not valid?
Java 8 rocks but a lot of companies aren't using it yet, due to slow upgrade cycles of application servers. Many are still at Java 6 making the transition to 7, let alone 8. Java got the backend right, 100% thats a given. But in the frontend they really messed up bad over the years: some of the biggest aberrations of sofware engineering are Java frontend frameworks. Stay away from Java for the frontend and do it in Javascript. The quality of the Java backend frameworks is top notch, specially Spring and Hibernate. For example node still does not have an ORM to match Hibernate, or a dependency injection container like Spring. 
&gt;Whose talking about the corporate server? That's a niche project for guys who don't want the cloud servers. Letting one's trade secrets anywhere near any cloud service is extremely stupid. &gt; But you can build offline and see that it produces a similar result. Really? Because your doublespeak-laden pricing FAQ basically says I can't.
The per-seat licensing is for support in the intranet server case. You don't have to purchase it as noted in the page above. The 20k USD license is for the offline cloud deployment, that's a complex deployment and when you spend the time looking at our code you'll appreciate just how complex that is. We actually try not to sell this, its not very profitable. We'd rather have 100 19USD per month cloud users than one corporate server customer. We only offer this because some companies wanted that. Among our corporate customers you will find major telecos etc. Notice that they do purchase the hardware. The complexity is in the deployment and support. A huge corporate customer can take the code and say that they don't need us, but they *want* us. The value we provide is the guarantee and the support for the product. Mom and pop shops don't need the offline build capabilities and don't have the "we aren't allowed to use the cloud" policy that banks, government and teleco have. So the corporate server is totally unnecessary. You need an IT department to install the corporate server. &gt; I still don't believe you. I don't see where *believe* is a function here. Do you know how to browse source code? Ask me where a specific function of ours exists in the source code e.g. I gave the VM as the example above but the GUI builder, the ports to the native platforms they are all there. Why in the world would I lie about something that is so easily verifiable? Two things are not open source in our code: The build server scripts &amp; the plugins. Both of these are totally unnecessary for you to create an offline build as shown by Steve (before we hired him). I honestly don't see the reason of this animosity and lack of faith in us? Sure, its the internet so we don't get the "innocent until proven guilty" treatment but I'd expect at least some small sliver of doubt? 
What are you on about? That just means they don't provide support for it. Doublespeak? There is something badly wrong with your reading comprehension if you don't find that entirely straightforward.
Why? Being cautious from a major corporation that has a history of being litigious isn't prudent? 
I worked at Sun &amp; Oracle during the days before and after the lawsuit. A good friend of mine was one of the people who reviewed the Android code base for Sun (not Oracle). I'm very familiar with the case and its proceedings and I understand your point fully. My point is that keeping as much distance as possible from a huge tech corporation that has unlimited legal resources and the ability to squash a small startup without even trying and without us doing anything wrong... That's prudent. Especially since we used to work at Sun/Oracle, so yes our contracts don't include the "non-compete" clause which is illegal in California (thankfully) but you don't want to even give off anything. 
Yeah, they're way harder to distinguish now. Somehow I imagine the words "brand cohesion" had a part to play in this.
We also changed that policy recently, we don't support this in the discussion forum but we will provide offline building help in stack overflow: https://www.codenameone.com/blog/how-to-use-the-codename-one-sources.html
[Winston Churchill comes to mind](http://i.imgur.com/awf3mpN.png)
I can't recommend this book enough - http://www.amazon.com/Java-Performance-Definitive-Scott-Oaks/dp/1449358454 O'Reily's Java Performance Definitive 1st Edition. It has everything you'll need. The section on the "new" G1 collector is special.
I actually gave Netbeans another solid shot due to their change and have been happy so far. My only complaint is the way they do multi-module maven projects (you open each subproject up individually -- but there's a plugin to change that). I'll never go back to Eclipse though. 
I used it through Wildfly 8 and I had no problem with it. However, I didn't used it as a standalone server for now.
I am quite happy with those being off by default. I find them to be annoying. I think they would be annoying to a lot of people so off by default seems to be correct. On the rare occasion I need to find my open file in the project view I simply hit alt-f1 and choose Project View.
TL/DR. #1 Faster development with Java 8 Spring 3 doesn't support Java 8, so you cant use it unless you upgrade to Spring 4. #2 Productivity improved Spring 4 has new things to make you more productive. We took things available in Java EE 6, like the Observer pattern /Events, and re-implemented it in our own proprietary way to make it better and more streamlined than the JavaEE standard. #3 Up to date Spring 3 uses older libraries. Upgrade to spring 4 and you get the benefit of using more up to date versions of those older libraries. #4 No more JAR hell Spring 3 you ended up with conflicts between libraries especially if you built your framework stack yourself and happened to include some dodgy 3rd party frameworks. Spring IO platform, provides set versions of Spring jars so as long as you use Spring 4, and don't add any other framework to the mix, you'll be fine. #5 Happy developers Developers will love you if you upgrade to the latest Spring... because they will be using the latest technologies, and developers love to work with the latest technologies. Do them a favour and upgrade to spring 4 now, before they leave or demand a pay rise. &lt;/sarcasm&gt;
These aren't the splash screens you're looking for. *waves hand*
It is not great. It is just another utils library, one of hundreds.
IMHO, they really should start working in a java8 -friendly version, with less overlap and taking advantage of new idioms and classes. 
Really interesting to see government backends based on things like DropWizard and inspiring of course 
I like Scala better, but I consider that a functional-OO hybrid language instead of just an OO language. (I agree I should have been more clear.)
The simplest solution to this is to shade the Guava dependency. That can be using jarjar, maven's shade, gradle's shadow, etc. That adds to the build time, but very easily resolves the problem. The issue is really due to Hadoop's poor approach for executing user code.
haters gonna hate?
[Durian](https://github.com/diffplug/durian) is pretty close to what you're asking for. Since Android is Java 6, I wouldn't expect a Java 8-based Guava anytime soon.
Wow, you are clearly drunk on hateraid. How have you not poisoned yourself yet, stewing in such toxic bile? &gt; Spring 3 doesn't support Java 8, so you cant use it unless you upgrade to &gt; Spring 4. Of course Spring 3 supports Java 8, but the framework itself isn't designed to take advantage of the new features of Java 8. Spring MVC supports `@RequestParam` binding on `Optional`, which is pretty cool. More functional interfaces means Spring plays well with lambdas and streams, no more wrapper functions. This in itself has sold me on Spring 4. &gt; We took things available in Java EE 6, like the Observer pattern /Events, and &gt; re-implemented it in our own proprietary way to make it better and more &gt; streamlined than the JavaEE standard. So Spring DI took some good ideas from CDI? Spring already builds on and tracks the latest JavaEE APIs (along with others from outside the JavaEE world), so what's wrong with keeping up with CDI? Spring is built on its own DI container, so of course the changes are "proprietary". &gt; Spring 3 uses older libraries. Upgrade to spring 4 and you get the benefit of &gt; using more up to date versions of those older libraries. The state of the art has advanced since Spring 3 was introduced, and there are an abundance of new libraries out there for to integrate in Spring 4. Uh yeah, this is what Spring has been doing since forever, and what will continue to keep Spring alive and kicking. &gt; Spring IO platform, provides set versions of Spring jars so as long as you use &gt; Spring 4, and don't add any other framework to the mix, you'll be finefine Integration is hard, let's go shopping. Given the decentralizated nature of Spring projects, there are rough edges in integration. Collaborating on common platforms with more consistent versioning is a good thing, and will make the various Spring projects work better together. This will make it much easier for Spring to continue doing what it does best, integrating technologies from many different sources on a common platform. And, oh yes, Spring deals in bleeding edge technologies, often not yet fuy baked. So yes, you can cut yoursf sometimes experimenting with new things. &gt; because they will be using the latest technologies, and developers love to &gt; work with the latest technologies Someone's got to advance the state of the art, and it isn't they who play it safe.
"Had we been using Maven, I expect it would not have been as easy to adopt Groovy into our project." You add the groovy jar as a dependency in your pom and your done. Take this article for what it is guys. One guys perspective on the only build tool he has ever used.
Thanks for the great reply!
Having spent a fair bit of time working with ant, makefiles, and maven.. No thanks.
Maybe I'm wrong, but I see Durian as a complement to Guava. I've never used it in production code, but looks pretty neat. However, I'm not able to find good documentation about it. I'm not talking about javadocs, but thinking about uses cases and such
Undertow is more modern but I don't know that there are really many differences in a functional sense. I know it has support for HTTP/2 and we sockets but I can't imagine that Tomcat doesn't at this point. What you can do with Undertow is embed it (like Jetty) and create a single jar service which is great in some cases. It's also less complex than Tomcat and easier to extend, in my experience. I haven't used Tomcat in quite a long time though. If you need EE I would suggest looking at WildFly.
This seems biased and unhelpful in so many ways. &gt;"...all major IDEs have quite good support for Gradle. I haven’t had any issues in IntelliJ, and those using Eclipse haven’t reported nearly the same level of frustration that we experienced a year ago." How can you make claims about 'all major IDE' support when you literally only used one? People don't only stop complaining when things get fixed. They deal with it because they realize no one is going to fix it. The comparisons to Maven just stopped halfway through. So you did something with Gradle. How would it be on Maven? The article is literally "A Vs B", it would have been great to *compare* them or something.
&gt; I see Durian as a complement to Guava That's true. But there are now so many "complements" to Guava's various pieces that I think it has become obsolete, except for its collections. **Back when Java 5 was the latest JRE, Guava was a magical glimpse into what java could be. But now that Java 6, 7, and 8 are here, I think it has mostly become technical debt** (in a similar way that code that doesn't use try-with-resources has become technical debt). For me, Guava's value-add was: - ListenableFuture (antiquated by CompletableFuture in Java 8) - Sane Charset stuff (antiquated by Java 7) - Fewer diamond operators `Lists.newArrayList` (antiquated by Java 7) - Cache (antiquated by [Caffeine](https://github.com/ben-manes/caffeine)) - Misc utility methods (most good ones are now in JRE 7 and 8) - FluentIterable (antiquated by Java 8 Stream) - Functional programming utilities (mostly antiquated by Java 8, gaps are filled by [Durian](https://github.com/diffplug/durian)) - Immutable collections and specialty collection types (Guava's still gold here) I'm sure people use it for all kinds of things, but for me, everything that Guava does (except Collections) is now done better by either the standard JRE or by a smaller specialty library (with semantic versioning, no less!). &gt; I'm not able to find good documentation about it. Disclaimer: I wrote and maintain Durian. The README is a comprehensive description of what it can do. The [test cases](https://github.com/diffplug/durian/tree/master/test/com/diffplug/common/base) do an okay job showing example usage. Durian's best class, Errors, has a [pretty good tutorial](https://github.com/diffplug/durian/blob/master/test/com/diffplug/common/base/ErrorsExample.java). Like Guava, its usecases are diverse. I tried to make the javadoc for each class explain its place in the grab bag, but maybe that's not enough. Maybe it would help if the readme had some inline code-examples? Or at least if the Javadoc it linked to had code-examples?
Uuuh, mistyped "jacked"?
Go read the article. They don't want to include the groovy interpreter into their project. They have Apache Camel code written in a groovy based DSL and they need to have that compiled as part of their build. It's not quite the trivial case you describe. 
&gt; New Java 8 features are nice but often come at a readability cost, especially streams I don't really agree, can you provide some examples?
I could not find a link to their blog on front page (which has also been updated)
Tomcat has support for WebSocket. I don't know about HTTP/2, but I'm relatively sure it's supported. Embedding is also supported, as far as I know. Also, see Spring Boot, which comes with embedded Tomcat by default. 
This code is terrible and extremely bad example.... /** * Returns the name. * * @return The name. */ public String getName() { return name; }
I use both maven and gradle where I work. When I start new projects, I use maven for a very simple reason: My intention is for my project build to be very simple. If I find it growing beyond that, I rethink the solution altogether. I have found if you need your own programming language to support the build...maybe you need to rethink how tightly coupled your different components are. Since I don't plan on ever making things so large or "unorthodox" that I need what gradle offers, I just choose maven because it's what I'm most familiar with. I'm not suggesting that all gradle is good for is complex builds, because I could just as easily choose gradle, it's a great build tool. I don't question people's use of gradle either...I think if you're starting a normal size project, they're both nearly interchangeable. My preference is simply maven. This is a personal anecdote, but to me it's very much like our journey into dependency injection. When we were all building massive sites or services and trying to new up an object with an interconnected web of dependencies...that was a nightmare. Dependency injection was a great solution to that problem. These days though, my individual services are so small and the quantity of objects that are necessary to spin up the service so limited, I haven't been seeing the payoff for DI like I used to. I kinda view the "need" for something like gradle the same way. I'm sure there are any number of projects that prove me wrong, so this is just my experience.
Great post!
We are mostly interested in the performance of Undertow. However, we need more through test to prove that Undertow is more performant than Tomcat for our app.
I haven't used Tomcat in a long time but it's a frontline battle tested code base and I'm sure newer versions have those features. Embedding has been *possible* for a long time in Tomcat (that's part of how JBoss used to work, iirc) but in Undertow it's dead simple. Easier, IMO, than Jetty even. I'm too married to EE to have ever worried much about Spring but I know that spring boot has been valuable to many people. I'm not sure how I feel about its inclusion though.
Yep, I've been pretty happy with the 8.1 changes.
Yeah, as is Jetty. Just wanted to confirm that Tomcat is indeed embeddable. 
Let me copy something I wrote some months ago: A group of people work in a system from zero. Some of them barely know each other when they begin. Some of them are in the same room. Some of them in another continent. They have different design ideas, different skill levels. Some leave the project just when it starts, some in the middle, some once is finished. New people (again, with different skill level and design ideas) came to the project. Of course, the is no documentation, no guidelines. Maybe not even unit tests. At one point none of the original programmers are working in the project. Some of the original libraries were replaced, because newer/better things appear. Some of the oldest libraries somehow survive. The compiler itself has been updated a couple of times. Some parts of the program are not being used at all. New functionality (that has no relation at all with the original functionality) is added. Some parts of the program are even made in new languages. The system manages to work, without serious interruptions, year after year. Bugs are found and fixed, of course. Java programs (maybe because the lack of some advanced features) are incredible tolerant to human interaction, time, changes in other systems, changes in team composition, bad management, inflexible design, unplanned changes in scope, etc 
I'm in the same boat. I think streams are a huge improvement in readibility.
Yeah, and to be honest I think some people obsess a bit too much about readability anyway. In my old job we were at the point that code reviewers would basically complain about loops making the code too complicated..
&gt; Forge is a tool and a framework for the rapid development of Maven-based Java EE applica... Stopped reading here
&gt; that comes with using, well, XML. Turning a declarative language (XML) into an imperative build tool (Ant) is definitely a bad idea. But this doesn't get around the fact that using a imperative build tool is a bad idea, even if the turnkey case is a declarative one.
Gotcha. 
From my dabbling, I know Java has a [Sound and MIDI Synthesis API](https://docs.oracle.com/javase/tutorial/sound/).
Agreed, things like this are handled by the IDE and trying to cut out boilerplate like this reduces readability IMHO. 
I went to a lecture on Java logging a few months ago - the feature set on log4j2 is insane. The whole pain point on logging is a) speed and b) too much output. They switched to an async logger that's dramatically faster and made many additions to help with B: for instance, you can use markers to quickly find, for instance, all the SQL statements you use, or use conditional logging to slowly build a picture of what's happening over the course of a method and then only actually log the statements if an exception is thrown. These are the slides from the talk (slides in English, talk was in Hebrew, so no real point posting a link to the lecture): http://slides.com/nukemberg/jvm-logging-guide and it shows some other really cool things you can do with log4j2. If there's a problem with it, it's that they're optional by design, so you really need to persuade other members of your team to not just logger.info(expensiveFunction()) and educate themselves to take advantage of the benefits
I can't even remember the last time I actually typed "import" or declared a field that wasn't part of just hitting Ctrl-1. This is really a problem for people that don't write Java looking at Java.
Use the Maven Enforcer plugin
Nothing to stop you using the native libraries from Java using JNA.
Care to expand on the trouble you had with Bamboo? We use it at work for building about 50 different projects of all different types and sizes, and it seems extremely robust and flexible to me.
https://github.com/mhroth/jasiohost) this ASIO library is a pleasure to use. Performance is noticeably improved over Javasound. Edit: I syntax done mistake a
This is a library https://github.com/mapio/j4im I developed for teaching purposes (I teach first year students in a CS/Music minor); the documentation (method and field names) are in Italian (due to the fact that my students unfortunately can't speak English), but the code is very simple and I think it can provide a good starting point.
Cliff is awesome, too bad he left azul to go chase big data.
I am not really looking into performance aspects and troubleshooting but I think there are some topics worth to read. thanks.
Yes, its a good book. I have read around half of it. But its about Jrockit than hotspot. Although there are some good topics that got covered in it.
My team has pretty much decided if you need power mock in your test you need to re write your code. A bit extreme, but it's made things generally easier.
[This](https://github.com/SalGnt/Medley) is my attempt to create my own music library. 
I combined the various import syntax ideas together ;) // BEFORE: (copied from java.util.Collections) package java.util; import java.io.Serializable; import java.io.ObjectOutputStream; import java.io.IOException; import java.lang.reflect.Array; import java.util.function.BiConsumer; import java.util.function.BiFunction; import java.util.function.Consumer; import java.util.function.Function; import java.util.function.Predicate; import java.util.function.UnaryOperator; import java.util.stream.IntStream; import java.util.stream.Stream; import java.util.stream.StreamSupport; // AFTER: ~ : relative import package java.util; import { java.io.{Serializable,ObjectOutputStream,IOException}; java.lang.reflect.Array; ~.function.{BiConsumer,BiFunction}; ~.function.{Consumer,Function,Predicate,UnaryOperator}; ~.stream.{IntStream,Stream,StreamSupport}; } 
Arquillian is for integration tests, mocking is for unit tests. Some teams want coverage on both, and sometimes mocking is the only way to get good unit test coverage.
Once you open the Pandora's box of "what if someone used reflection to ____", it's over. It's not worth the time or effort to even try to imagine. The team I work with has a convention that has served us pretty well: *If you think you need to do reflection in production code, it's a code smell, and you should probably rethink how you're solving your problem.* There have been some exceptions to the rule, but only after the team says "yea that's necessary there". It's worked out pretty well.
Very interesting
I also concur with you. Visibility is not just about the language enforcement but a documentation to users about whether the method is part of the public API or not.
Great name for a tool to trace memory leaks. This is also useful dealing with memory leaks: https://en.wikipedia.org/wiki/Mat_%28Russian_profanity%29
Currently I use HPROF to profile code that is running on a locked-down remote headless server that doesn't have very many ports open, if at all. It profiles for the life of the executable and produces CPU profiling information in a log file. (ex I want to do task profiling on Hadoop tasks in a very locked down cluster where I don't have access to the data nodes directly) How can I get VisualVM to do this? It seems like it can only do remote profiling if I can get a network connection to the JVM I want to profile. HPROF works flawlessly to do exactly what I need, but I don't see VisualVM filling this role. Am I missing something?
Someone else called it "snake case", whatever it's called I think it's easier to read than camel case and wish the naming convention was like that. TodsonUser.java TodsonUserAddress.java TodsonUserType.java TodsonUserCreate.jsp TodsonUserDelete.jsp TodsonUserEdit.jsp todson_user.java todson_user_address.java todson_user_type.java todson_user_create.jsp todson_user_delete.jsp todson_user_edit.jsp I'm not sure if this is the best example, but I've used both and underscore naming is always easier for my brain to parse. I think it's close to "normal" naming - you know "todson user address" is what you'd write in a sentence. 
I think Java is solid, and frankly, most of the other supposedly "better" languages always come with improvements and drawbacks that largely even out. Java made a HUGE improvement for programming over C/C++ - stack traces that actually told you "the error happened here", no more memory management issues from having to release pointers. Not having to use 2 files per class... The drawbacks of Java are often things like "framework nightmare" which new languages haven't exactly fixed either. The "new better" (supposedly) languages mostly tradeoff one thing for another. Dynamic typing means a little less typing and a lot less server restarts, but is a maintenance nightmare in my opinion when a year later you need to change something and don't even know the type being passed in. Other times they oversimplify things then when you need to change something small that's not quite what's expected it's difficult / impossible. The biggest problem with java is the framework explosion. A million different frameworks to do the same thing, frameworks that break idioms that make things easier (with dependency injection you can't trace back to it's source, at the same time it's not standardized enough to just know where to look, so when something goes wrong with dependency injection on something you didn't write - good luck finding how to fix it). Bjarne Stroustrup - "**There are only two kinds of languages: the ones people complain about and the ones nobody uses.**"
Please advocate constructor injection over field injection as it promotes testable and safe code :(
I'm more concerned about CPU profiling. For instance we commonly run the JVM with this argument on the remote server and then go collect the log file later. I don't see any way to make VisualVM collect this information in an automatic way like we can do with HPROF today. -agentlib:hprof=cpu=samples,depth=12,force=n,thread=y,verbose=n,interval=20,cutoff=.001,file=%
 &gt;but being able to manage individual threads gives Java applications asynchronous performance that isn’t possible with Python. It's not impossible to write Python code which makes proper use of your cores. It might be harder and a bit slower but not impossible.
Maybe all us programmers are just starved for visual stimulus and glad to see something with color that isn't syntax highlighting.
Curious: Are you speaking about our removing APIs that were labeled as @Beta or about our removing APIs that have been @Deprecated for two years?
Why do you need a java PaaS if you can deploy your docker container that can have what ever you want? What is so special about having a java PaaS?
Here's the plan: https://groups.google.com/forum/#!topic/guava-discuss/ZRmDJnAq9T0 
Anyone know if the web sockets memory leak is fixed?
it has a dual license, gpl &amp; commercial.
Hi @vad1mo Docker is a very fantastic tools that simplify the management of the life cycle of the application. But developers and especially Java developers, already have to deals with a lot of frameworks and tools. It's already very difficult for them to focus on the business they have to implement because of the number of tools they have to know (Hibernate, Spring, JSF , Application server .... ) With a Java PaaS like CloudUnit, developers don't have to worry about containers networking, registry, security. Actually they don't need to know anything about Docker and how to manage containers. CloduUnit also gives you all the tool that developers need to deploy and manage his applications on the same platform and with an easy Web application. 
Have you used Jenkins and, if so, does Bamboo still compare unfavourably? We are stuck with Jenkins at the moment (actually its a been a hard sell trying to at get any kind of CI) but I'm finding the job management horrific.
I heard that it hotspot and jrockit will become one in the future releases. You are saying that they are already merged? Any source article for that? 
Most importantly it comes with OpenJPA 2.4.0 still which only supports JPA 2.0 (JavaEE 6).
Makes me hesitant about their software if their blog can't produce clean simple html
People still use jsf?
i was going to put the same comment. really jsf are mostly garbage. i don't see the use for them except for legacy code
I guess if you have die hard ee gui fans? I remember leaving jsf along with struts and now nothing?
I understood this is one of the biggest hurdles. OpenJPA was being developed by IBM, but IBM left the project. TomEE is required to be fully Apache, so they can't just bundle EclipseLink or Hibernate instead.
Testing something because you need to test it is fine; it's creating unnecessary/duplicate tests for the sake of per-phase coverage statistics that is going to end up in daiilywtf territory. If the performance of tests is such a critical factor that you are willing to double your TLOCs to partially wokr around it, then something is deeply wrong with your platform or setup. 99% of the time mocking for test performance reasons is simply premature optimization. YMMV in a pure scripting language (i.e. no static syntax checker at all) that needs the unit test step to guard against typos. 
The snippets are hosted on github, presumably to get pretty printed. Also, FWIW it displays fine on my iPhone. Still not sure what OP means by fluent though. 
[removed]
He assumes prior knowledge because fluent api's have been a thing for a while now. It's basically a matter of allowing you to chain 'setter' calls on an object so instead of having to do this: Person person = new Person(); person.setName("John"); person.setAge(35); person.setEmail("john@example.com"); You can do: Person person = new Person().setName("john").setAge(35).setEmail("john@example.com"); Or even (getting more common): Person person = new Person().name("john").age(35).email("john@example.com"); The problem the author describes is that this often breaks certain libraries that expect setters to have a void function so it proposes a builder pattern instead: Person person = Person.builder().name("john").age(35).email("john@example.com").build(); The downside of the latter is having to create builders. I personally much prefer my second example. The less redundant information the better.
Can we focus on the content instead of how 'broken' their blog is? Thanks.
I think a better example is assertj: assertThat(intVal).isGreaterThan(0).isLessThan(100); http://joel-costigliola.github.io/assertj/
Oh definitely. I am a big fan of AssertJ myself. I just wanted to give an example of something a beginner would understand. Apache Fluent HTTP Client is really nice too: Request.Post("http://somehost/do-stuff") .useExpectContinue() .version(HttpVersion.HTTP_1_1) .bodyString("Important stuff", ContentType.DEFAULT_TEXT) .execute().returnContent().asBytes();
There is a problem with constructor injection, but it can be dealt with. @ApplicationScoped public class SomeBean { @Inject public SomeBean(@SomeDB EntityManager em) { ... } } This isn't a valid bean definition, since it has no default constructor. You can work around it by making a private default constructor. Granted, you can still test without constructor injection. Leverage arquillian to spin up an embedded container, or leverage mockito w/ the @InjectMocks annotation to populate private fields using reflection. I'm curious to know how it makes code safer.
[JSF + HTML5] (http://www.oracle.com/technetwork/articles/java/enterprise-html5-2227136.html). Wow, yeah look at all that shitty legacy HTML5. Who uses that anymore? 
They ported a few feature in java7 and 8. JMC is one, no perm gen another one I think https://technology.amis.nl/2013/10/06/javaone-2013-java-mission-control-2/ hard to find a lot of details... some info there too https://bim360field.cn/questions/33490108/is-jrockit-merged-into-jdk-8 
We have 100 - 200 builds that we need to manage which previously were all managed manually, on developers individual machines. We are just beginning to move them onto a CI server and have been allowed to use Jenkins because it is free. The problems we have Jenkins so far are: * No authorisation for job configuration. I want individuals to be able to specify who receives an email notification for their job. I don't want to allow them to turn off log rotation and cause the disk space to run out. * No sensible defaults. Maven already specifies which version of Java is needed to perform the build. Why do I need to specify this again in the job? * No shared configuration. If we decide that setting X makes sense across all our jobs, we have to manually configure it in all 100 jobs. * No standard, plain text description of a job. I want to be able to point Jenkins at a git repository (or ideally, an entire group of repositories) and for Jenkins to create jobs automatically, based on a configuration file in that repository. I realise there are plugins and scripts that have been written but none of them seem to solve all of these problems, cohesively.
-I don't know if this was the tool or how they were using it, but Bamboo didn't send me useful email (too many emails that weren't relevant to me). -I think this is not a problem with Bamboo. -I have no clue on this one, either way. -I don't think Bamboo can do this...
Thanks for the mention! Hopefully awesome and not scary :) If you are already using Java 8 a good place to start is [cyclops-streams](https://github.com/aol/cyclops/tree/master/cyclops-streams), either the [StreamUtils](http://static.javadoc.io/com.aol.cyclops/cyclops-streams/6.2.3/com/aol/cyclops/streams/StreamUtils.html) class - that adds a lot of static functions for (sequential) Java Streams, or the [SequenceM](http://static.javadoc.io/com.aol.cyclops/cyclops-sequence-api/6.2.3/com/aol/cyclops/sequence/SequenceM.html) Stream wrapping extension (which also extends Jool.Seq aswell as plain ol' java.util.stream.Stream) https://github.com/aol/cyclops/wiki/cyclops-streams-:-Streaming-examples https://github.com/aol/cyclops/wiki/cyclops-streams-:-Asynchronous-Terminal-Operations
The Order of Magnitude here tells you how the runtime of the algorithm scales with how many elements it has to process. (not really, usually it's referring to number of operations, but i'll just say runtime here to keep the phrasing the same) O(1) mean it's constant time. So increasing the elements doesn't change the runtime significantly, or at all. O(n) would mean it scales linearly. So if you triple the elements you triple the runtime. O(n^2) would mean the runtime scales with the square of the input. So if you double the elements the runtime increases by four (or 2^2). So here they give you the runtime for 1024 elements, and want you to estimate the runtime based on if you had 4x as many elements (4096). 
8:54min: what are better ways to describe programs?
For the JavaBean example, I usually just use the withXX pattern for fluent setter instead of breaking the setXX setter. That way I can have both fluent and JavaBean api. I just set up a template macro in my editor to generate all of them. E.g. class Foo { int bar; float baz; Foo withBar(int v) { bar = v; return this; } Foo withBaz(float v) ... Calling them becomes new Foo().withBar(1).withBaz(2.0); 
The UI for [Matlab](https://www.mathworks.com/products/matlab/?refresh=true) is written in Java. There's tips for hacking on the Matlab UI with Java at [Undocumented Matlab](http://undocumentedmatlab.com/blog/tag/gui).
I understand it now thanks a lot!
Baby steps first. Solve some problems that have already been solved. Make your own version of your favorite command line tool. Sometime basic like `ls` or `tee`would be fine. Start with basic functionality then expand it to feature parity. Compare runtime. Optimize. Explore a couple different approaches. Do this without looking at the GNU or BSD implementations. When you are satisfied with your implementation, compare the GNU and BSD implementations (note that they are in C and not Java). Then try solving a new problem that you are not aware of any existing solutions for (even though there are probably solutions out there). Don't google the problem until you are satisfied with your implementation. Then google and compare your result to other implementations. Do each of these until you feel you aren't getting much out of it any more. Then maybe change the focus. Try solving a problem in a different area. Perhaps networking. Make your own basic version of `nmap`. etc. Anything higher level like frameworks and Intelligent Systems can come later. You need to figure out how to solve random problems. Then later you can make informed solutions to the problems that really interest you. You do this by breaking them down into problems that are more accessible and self-contained. I hope this helps.
You're welcome, and good luck.
I agree with the baby steps. I've been having a lot of fun with adventofcode.com. It has a bunch of simple coding exercises that can be as easy or as hard as you like. I've been forcing myself to try technologies I've not used before to complete the problems. As a junior level programmer, they would be a good place to apply what you have learned, especially with data structures.
here are some benchmarks https://www.techempower.com/benchmarks/#section=data-r11&amp;hw=peak&amp;test=plaintext 
Fluent API aka Builder Pattern.
Why not both?
What are IS projects?
I do like the "look" of fluent APIs, but what I don't like is their widespread use of state for implementation, i.e. do some update on the current "builder" and `return this`. It means you cannot reuse fragments of previously constructed expressions and chains to build bigger ones. P.S. Spark does not look like it is a fluent API at all to me. 
Intelligent Systems. It's OP's concentration.
Not gonna lie, it took me a second to figure it out as well. I always refer to Intelligent Systems as AI.
I'm really not a fan of "fluent" APIs
Actually, spring generally requires proxy-able classes as well, for AOP reasons.
wait...... fluent just means every setter returns this? I was under the impression ( i write alone mind you) that fluent simply constructed with the most common defaults and made those defaults chainable... every setter can't return this... can it? I think I am missing the big picture, i don't see this in the sidebar, can you link me?
Hardly. Show me the Java app that can run without a JRE. Http is a tiny part of it.
You also need the JVM/JDK which is more than 20MB. But yes, the Java .jar is just one file which in Spring's case it also has the webserver embedded (Tomcat/Jetty/Undertow)
This is due to Spring MVC and all its dependencies.. A plain Java Web App with a HelloWorld servlet is about 4Kb, see example [here](https://github.com/benas/webapp-embedded-tomcat). run `mvn package` to generate the binary artifacts. Even with the embedded container (in the same example), the final war is about 5Mb, just run the `Webapp` main class.
My problem is not the size of the jar, but the amount of options you need to configure for each component. Where do you get them? How do you know what are the defaults, how do you know what other options are there that you need/can configure? How do you know what each decorator (also coming from Django and that's how they look to me) does and when to use it? How do you know what are all the decorators that you have available to use? I'm also trying to get started with Sping Boot and until now it feels overwhelming and the documentation doesn't feel that nice as opposed to how I got used to Django.
https://ratpack.io/ 2.6MB
it's because these are all old guard application server frameworks that pack the kitchen sink. something like play or dropwizard or ratpack will be more up your alley.
Why focus on such an uninteresting metric? I'll take a 100mb disk space overhead over a 1% hit in productivity in most cases. Focusing on "hello world size" metric is good if you are writing hello world, idiotic in most other cases. I'm not saying that Java is the bees knees- I have suffered pain from its warts- but such a superficial analysis is worthless. 
&gt; wait...... fluent just means every setter returns this? I was under the impression ( i write alone mind you) that fluent simply constructed with the most common defaults and made those defaults chainable... every setter can't return this... can it? Why would it not be possible?
You could have said this much nicer, but I agree. @OP: an advantage is that this jar is self-contained. You can deploy it just about anywhere, no matter how the target system is configured, what specific versions of libs are installed, ...
Because there are people, like my parents, who are stuck in a situation of really shitty internet, with excessive caps (I believe it's 10GB/mo for them), who are finding even basic browsing to be excessively taxing these days. **EDIT:** I wrote this while extremely tired, and now even I have no clue what I was thinking. Ignore me.
It's funny how everyone bashes Java for this kind of stuff. [Here's my project template with ReactJs and ES6 transpilation](https://github.com/fforw/b6-react-template) . It does nothing but transpile one main file with exemplary syntax. After you've installed all the libs with NPM the folder contains a fricking 100mb of Javascript files.
It's more dependency injection than configuration. If you don't need DI don't use CDI, it's useless and overkill for you... But you can't reduce interest of CDI to disposer and resource producing which are a very small part of the spec.
Very cool. Giving it a read now. Don't know if you are the author of this content but so far I have noticed a small typo in the C++ smart pointer example code stared_ptr&lt;vector&lt;int&gt;&gt; elements = make_shared&lt;vector&lt;int&gt;&gt;();
My advice is to use the right tool for the right job. For the moment, try to use something simple, minimalist which resolve your current needs. In this phase I think that Spring Boot is overkill because you have to learn alot about Spring ecosystem, so it's like a [yak shaving](https://en.wiktionary.org/wiki/yak_shaving). In my opinion Spring Boot is OK if your project is based entirely on the Spring libraries (Spring DI, Spring Security, Spring Data, Spring MVC, ...) On the other side, if your target is to work on big projects, for big companies then Spring and/or JEE is a must. Personally I prefer to not use a full stack Java framework, I want to have the possibility to choose each library/framework for each layer or task. I like to use [Apache Wicket](http://wicket.apache.org) for the large projects and [Pippo](http://www.pippo.ro) for small, medium or prototype projects. Because here we talk about small java web application I will argue below why use Pippo: + it's small (the core size is 150K and depends only on slf4j-api) + it's fast + it's modular (trivial module system via Java ServiceLoader) with a lot of modules built-in with zero configuration (just add the module as dependency in your project) + it's not so much to learn to be productive + it's Java plain (no web.xml or other xml file) + I prefer to use my favorite servlet container (Undertow is my choose but from time to time I use Tomcat or Jetty) in embedded mode + I prefer to use my favorite template engine for page rendering (Pebble is my choose) + I prefer to use plain jar files (no war file) and to run my application as a trivial application (via main class) 
I disagree with the assessment of G1. First, while it does lay out the heap differently from other GCs, the principles are pretty much exactly the same, there are eden, survivor, and tenured spaces. It pretty much behaves exactly like the other GCs. (with the added bonus that it collects some tenured with every minor gc) The place were it is different and a whole heck of a lot better than CMS is in the fact that it is compacting (a fact that was glossed over about CMS). CMS is pretty much guarenteed to eventually crash hard while G1 avoids that a lot more aggressively. Further, G1 has a lot of tuning options (more so that the author gives credit), but you shouldn't be using them. G1 was designed to be tuned correctly out of the box. The only tuning anyone should really do is setting the max heap size and desired pause times. Beyond that, G1 will auto-adjust to match the load (which it does quite well). While it isn't as battle tested as CMS, our luck with G1 has been fantastic. We have yet to see a full GC with it (it has always done either minor or concurrent GCs, never a stop the world everything is going done type of GC).
That still looks big, if you really need something very small size I can guarantee right now nothing beats https://github.com/decebals/pippo if you need a java solution. I was using nodejs(and not very comfortable doing js) for IoT stuff but since pippo I've never looked back that's why I feel like I owe it to spread the news.
There are a few ways around this. You could just do a binary diff. 99% of that 100mb won't have changed. You could do it by storing the files in a distribution git repository. This is doing the binary diff for you with some version tracking that could be handy. That being said, if a 1 minute turnaround time is something that really hurts you, I would say you need to re-evaluate your production deploy process. Nothing should go out to production that can't limp along broken for more than a couple of minutes. If that is the case, you aren't sufficiently testing your product before deploy.
So. Who *needs* it? :) (i.e. what are good signs of when CDI beats any alternative, explicit solution?)
&gt; Or.... I can choose to keep the server and framework on my live server, and just send my app's war file. I am sorry you don't agree with this this tried and trusted standard method of deploying java applications. &gt; I am at a gasp to why this method has been apparently 'deprecated' in favour of single runnable Jar apps. It makes no sense to me at all. Why would I ever want to do this? Seriously? We deploy single wars with all the dependencies in them. The benefit is that now you don't need to track server library versions vs developer library versions. It is a lot easier to ensure that all dependencies are met and met correctly when they all live together. Further, it is a lot easier to ensure that you are developing against an environment that is close to what is going to be in production. The worst kind of bug to stumble across is a dependency mismatch in development vs production which introduces bugs. (especially if they are subtle). For small applications, the benefit of doing this isn't high. For large applications it becomes a necessity. The jar running vs war running depends on what you are doing as a company. But it boils down to the same argument. Developers don't like losing control of the version of the sever software which is running on production. If it is a single jar, I can update the jetty version on the next deploy. If people could embed the entire jvm into the deployable, they would (ok, they actually do, that is a large part of the point of docker). &gt; Deploying a war is the quickest and easiest way of deploying a change, and something I have never had any problems at all with. not one. So, Spring boot, or any solution that packages up the server, configuration, and web application into a single unit in my mind is a solution looking for a problem and produces far more headaches than it claims to solve. I never said anything against war deployment. If that is your cup of tea, go for it. You were complaining that 100mb of transfer took more than a minute for turn around. I said "That shouldn't matter if you are doing things right". Who cares if it takes 1 second, 10 seconds, or 10 minutes to transfer? If that amount of time is going to negatively affect your business, you are doing things in a bad way. It is indicative of a "test in production" style of programming.
Question, making a standalone JAR means using Spring Boot only? or you can make a standalone JAR with other frameworks?, I'm sorry, I'm new to this.
Yes, you can do it with other frameworks.
This is a straw man argument. Yes, running multiple projects in a single app server is SPOF and bad for scaling.... However, I am arguing that deploying using war, is more simple than deploying via stand alone jar. There is nothing at all stopping you running multiple wars on multiple separate app servers. One war per server. All running in their own separate JVMs. However, the simplicity of running all wars in a single JVM makes it far *far* easier to have a development environment where multiple microservices need to be running concurrently for the system to work as it should.
&gt; Any suggestion??? Sure: check out the sidebar, realize that you're in the wrong subreddit, follow the links to the related subreddits &amp; check out the sidebars there, too.
In my experience, stand-alone JAR deployment is best for the situation where you can't control the deployment (e.g. your code is used by customers). You provide reasonable defaults and allow for inclusion of a properties file or JVM params to override them. One tool that does a good job with this is [dropwizard](http://www.dropwizard.io/0.9.1/docs/); deployment consists of two artifacts: a single JAR and a YML file for configuration.
Here's a reason. At my shop we have 4 teams, 3-4 full-time devs per team with another couple of interns per team, anywhere from a few dozen up to almost 100 apps per team. We have 5 "environments": dev's-localhost, Dev, Test, Prod, PCI; but depending on the app (for various reasons we don't need to go into here) we might be running on either GF2 or GF4, so really we have 10 "environments"; but we also load-balance Prod on 4 servers and Test/Dev each on 2, so really we have 14 "environments". Do the rough math: we have 500 apps spread over 14 separate GF installs. Don't make the mistake of oversimplifying here either: each of our environments have their counterparts in the associated services world too (ie: database, LDAP, ERP). And (for reasons we don't need to go into here, but mostly political) we have exactly 1 guy that's responsible for all of those GF installs (plus a backup but who does primarily other things except when the primary guy is absent). And those GF2 apps? Part of the reason is that we have such a high app-to-dev ratio that it can be hard at times to iterate on older apps and get them upgraded to GF4. What am I trying to say here? In our world our ops guy is a serious bottleneck. Whenever a system-wide upgrade/change happens, he's the guy that's pounding like a crazy man trying to get all the stuffs stopped/changed/started/debugged/etc trying to figure out (when things don't go smoothly) what the hell is wrong. OTOH, if we could migrate to a "here's a VM for your app... it's preloaded with the configs you'll need for operating in the environment" then the problem of "it runs here but not there" almost goes away because virtually all the infra is self-contained inside the project. So then the ops guy is mostly just copying a JAR, stopping service, restarting service. He no longer needs to worry about things like "does it run on this GF" or "is AppX (running on the same GF) causing a side-effect for AppY". But it's possible I'm miscalculating. I haven't been able to convince anyone here that this is the direction we should head. That said, they ARE looking into moving towards Linux-containers which is a similar approach -- and that would be nearly as good I think. And before you repeat the idea that each app could live on it's own GF, remember: that would be 500 GF's and still only 1 ops guy. TLDR; depending on your org's configuration, it seems this approach could actually reduce complexity. 
Wats wrong??
I think it depends on how you stand up and manage your environments. Installing an app server, configuring it, defining container managed resources can also be pita. Depending on your approach it might be easier to have a single jar with external configuration. Or it might be that something like docker works best and then it doesn't matter whether there is a single jar or an appserver under it. The simple fact for most environments is that operations is pita. 
With docker the app server would have to be part of the docker image.
Thanks for the handbook, it's fairly good, and I'm looking forward to a better G1 section. My experience with G1 found I needed to tweak -XX:G1HeapRegionSize for larger heaps. In this document, http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html, there is some advice to keep the number of regions around 2048, which without any further explanation why, it turned G1 into a good choice for me. E.g. for a 16g heap, I needed -XX:G1HeapRegionSize=8m for a good result. Using the default of 1m region size, I ran into some nasty STW, full collections.
As a php dev desperately trying to transition into a Java Dev.. I like it way better than php, I just wish the documentation was as good as php. It's a really hard language to teach yourself and I feel like I'm at a disadvantage if I don't take college courses on Java.
You can still take advantage of application server features like clustering even though you are deploying in a Docker container. For instance, you can set up a cluster of Wildfly images behind httpd running with mod_cluster and mod_advertise and then just spin up a new one when needed. Automatically joins the cluster and registers itself with the load balancer.
I think you need /r/javahelp buddy. Also check the side bar for helpful links. 
You're assuming that you have 1 running server instance with several applications that's preconfigured with the right tomcat (server/context.xml etc. settings). In a high performance environment that would not scale. The solution is a cloud environment: you'll have basically 0 (zero) - 100 servers. Each server instance is started with a script that automatically selects the right (hardware+ platform) server image. That image might not have tomcat or another application server preinstalled in it. The script takes care of copying your jar to it. When you want to scale horizontally you just run the script again, and bingo, you have another server with your application. You gain agility by scripting this. You would loose that with the extra hassle of having to install TomEE, when it's not really needed. BTW, the buzzword here is Infrastructure as code. Ninja edit: spelling
It is better to post something like this in the openjdk hotspot mailing group with actual numbers. I think they added a caching mechanism for MethodHandles especially for lambdas in u60 maybe that causes the delays (I am of course not sure). 
Maven makes the things you iterated through a non-issue. Perhaps that is the discrepancy you're noticing.
It should say 'uncheck box to confirm your human'.
How do you use Spark with a database? I wasn't able to find any tutorial that shows me to to configure Spark to talk to a DB and make some queries. This might be obvious for someone with Java experience but for someone that's getting started with Java web dev not so much.
Curious: Could you post screenshots of those profiling results?
Neither does the 64-bit JRE installer, for some reason.
spark doesn't directly talk to a database. It's just a REST API. If you are looking for a lightweight SQL API, I recommend http://jdbi.org http://sql2o.org or something similar. 
The blue check box seems vertically misaligned with the text. Is it a fake non-clickable check box like in older Google Chrome offers? ;)
I tried G1 on one of our apps recently, let it soak for a full work day. Everything was moving along perfectly with no full gcs at all. (This is an app that has a pretty big heap, like 20 GBs). Perfect perfect perfect BAM, like a 60 second full gc, and the heap size hardly even dropped - this was after about 6 hours. Wish I could post the logs but they are on my work laptop. These are very funny (?) applications, and they deal with memory like freshman college students getting their taste of hello-world. It's actually pretty fun to go through them and get them up to snuff. Have you (or anyone reading this) ever seen something like that with G1? Full gc out of nowhere with hardly any heap-usage drop? I'm more apt to blame the shitty code than the collector, but I'm interested to see if anyone has seen that before. During the 6 hours it was working fine (no full gcs), heap varied by maybe a GB or two.
it looks so inviting.. I might as well try out this newfangled contraption they are offering to install freely for me!
Oh ok.. now a get it. Thanks
I installed JDK 1.8 on a new work computer today and was surprised that I didn't have to unchecked a malware selection.
Ah the poopstain on the Java platform.
Old good times... I want 90s back 
[Capsule](http://capsule.io/) (I'm one of its developers) lets you make standalone JARs that *always* work, even if you have native dependencies or agents, and never ever causes any dependency conflicts. Capsules even automatically set up the JVM flags so you don't need a startup script. In fact, we've been able to package a full standalone JBoss server along with its WARs in a single standalone capsule JAR that you just launch with `java -jar bigapp.jar`. People even use Capsule to package [Spring Boot applications](http://www.insaneprogramming.be/blog/2015/09/15/capsule-spring-boot/) or Dropwizard applications.
i guess many when you look at the adoption rate of java8, including some companies i personally know of (for mostly new projects)
Is being [confirmed.](https://en.wikipedia.org/wiki/Confirmation_(Catholic_Church\))
Wha, no more Ask toolbar!? I want my toolbar!
Should have re-titled to "Why are Spring MVC web app so much bloaded." There are plenty of lightweight web frameworks on Java. Try out Pippo, Spark, or Rapidoid. 
War or single jar is really depending on your requirement. One thing though, to lock down a production server for security reason, you really should disable the admin console of the app server. That means the war needs to be copied via SSH to the server, same as the single jar case. For jdbc and other dependencies, Maven or Gradle can hunt them down and bundle them when building the single jar. Configuration files can be bundled with the jar or deployed separately. I usually bundle all the config files for different environments into the jar and identify them by name. When the app starts, just check an environment variable or command line argument for the current environment. E.g. at start time, export CFG=cfg1; java -jar app.jar, or java -jar app.jar -c cfg1. Have a way to specify an external config file on the command line as an override for those new environments whole configs weren't bundled in the jar. As for stop, copy, and restart the app, it's just a simple script file. Edit: Single jar is great when handing it off to someone (like a customer) to install and run. They only need to run it with: java -jar app.jar. There's no need to install and configure an app server. It's also easy for integration with the standard system services: like the Windows Service, the Linux init.d service or systemd. Most IT admins know how to work with executibles. They don't know about Websphere. 
We are still on Java 7 where I work. So now you can all tell me how terrible this is and how I'm vulnerable to things that won't be fixed. In reality land where I live, the stack we are using which is Jboss Fuse and Jboss EAP did not move to Java 8 until pretty recently. I think maybe over this past summer is when they moved. Since we have not upgraded Fuse or EAP yet we are not running Java 8.
I actually have no reason to believe that any of that is the cause. I think its most likely something in the native zip implementation, but i cant find it. There have been no issies running older versions of java 8. And FWIW, I love and use those features a lot! At first i was unsure, but it really does make thongs easier once you get into it.
This was a great read, thanks! I've passed it on to my guy in ops, not sure our architecture can handle it (which I realize is the actual use case) and (politically) it might go nowhere with us... but I did my part. :)
&gt; And FWIW, I love and use those features a lot! Of course, I love them too! But in order to pay my bills, I have to fix my clients' Java code (I'm a Freelancer). And that code is sometimes as ancient as JRE 1.4 era! Now, the ideal thing to do is overhaul all their component projects to make them compatible with 8.0, but the effort involved in man-hours is unjustifiable. Instead, I just end up fixing whatever immediate issue is nagging in that project. And lambdas and default methods are certainly not a luxury when you work on code targeting JRE 1.4! Having said that, I do keep building small side projects using these newer features to keep myself updated. For instance, only yesterday I wrote [this](https://www.prahladyeri.com/blog/2015/12/rockstar-java-dev-series-using-lambda-expressions.html#comment-2414150071) article about using lambda expressions and the new `Predicate` interface in Java using a test scenario.
Thank you! I just accidentally installed the 32 bit JRE and realized this because of your comment 🐯
wow, 1.4...I don't envy you, anything pre 1.5 should be upgraded for sure....i have not seen anyone using anything older than java 6 in a LONG time.
Very nice, but a refresh button for the UI?
Thanks for passing this onto your team! We have started using it with out clients and it's been super helpful. Hoping it can be a very useful utility. Check it out on Github [here](https://github.com/in-the-keyhole/khs-trouble-maker).
Stop spamming your website.
I'm assuming the grid can only be modified when it's not animating? Surely the grid can be live updated as you change the spinners/slider? What do you mean move? As in the grid getting bigger automatically expands the window size?
In the main post I added the profile for the stack whiich becomes super frequent in u60 compared to previous versions. I also linked to a project which does NOT seem to reproduce the issue, even though it seems like it is doing the same classloading behavior. So I am unsure what the secret sauce is.
Yes, the Spinners and the slider both disable when animating. I made all the components responsive to the width of the window. The Spinners would move because it is responsive to the width of the window.
I see it now, thanks. It was "removed", 30minutes ago...
doesn't seem to have any build instructions. Would importing the source and simply building all into a jar work?
I don't mean this to be rude, bit this is probably one of the worst examples of using lambdas. The author implements a bunch of unnecessary overhead to create: List&lt;Product&gt; r = Product.searchWithLambda(list, (Product p) -&gt; (p.name.equals("foo") &amp;&amp; (p.price&gt;=10 &amp;&amp; p.price&lt;=50) &amp;&amp; p.size.equals("15in"))); Verses a much more concise, and readable: List&lt;Product&gt; filtered = myProductList.stream() .filter(p -&gt; "foo".equals(p.name)) .filter(p -&gt; p.price &gt;= 10 &amp;&amp; p.price &lt;= 50) .filter(p -&gt; p.size.equals("15in")) .collect(Collectors.toList()); Edit: Fix Type-o "Prodict -&gt; Product" Edit2: Comment from /u/overachiever, checking equals on the known string to avoid possible null pointer exception
is that "no flame war" tag used to discourage discussion? Anyway, like others have said, the IDE takes care of most of it. I would hate to see optional/implicit typing being an option in parameter lists, especially when somebody wants to introduce more variables. Then again, in your example, I'd flag you in a code review for having too many parameters to a function. 
Ok so this is the file I'm talking about: http://runetracker.org/updater It's a program that auto-updates a website that tracks your XP gains in RuneScape (yes, let's take a minute to laugh at me for playing RuneScape). All I get is "unable to access jarfile RTUpdater.jar" And yes, it's meant to open a window where you can enter your Account name and pick some settings.
&gt; All I get is "unable to access jarfile RTUpdater.jar" When you do `java -jar RTUpdater.jar` while being in the folder where that file is? If so, I have no idea what that's all about.
I'll respond, since I'm a huge proponent of the JAR methodology. First, to talk to some of your points: &gt; My own projects I deploy by creating a war, then deploying them using PsiProbe on Tomee. You don't address how you create the war or deploy it. Are you doing these steps manually? Are you building them on a CI server? Are you getting binaries from an artifact repository? &gt; If I was to move to single Jar model, with everything packaged as one I would have to: &gt; ... Bundle the configuration of database server together into the jar This is just completely wrong. If you think programs run as JAR files can't access environment variables or external configuration files, your knowledge of java is laughably bad. &gt; ... Bundle JDBC drivers First off, you should be doing that anyway. Second, the entire point of the JAR-style is to have a single artifact with all the dependencies exactly specified. Relying on the EE server to provide some libraries means your app is using implicit dependencies, and is thus not portable. It's depending on a very specific environment setup. I see this as a benefit rather than a detractor. &gt; ... deployment time would consist of SSH to the live box, stop the existing server, copy the new version accross, restart. Right, and what's bad about this? Is it because you're doing your deployments manually? Do you not like process cycles? I don't really understand your objection here. Is it because it's command line and you're used to a tool that does all of these things for you in an automated way? I mean, deploying a new WAR is: ssh into the box, copy the war file, put it in place, and notify the running server, and hope to god all your code and libraries play nicely with hot reloading. You just have a tool that does it for you. Why would this be any different? You're just being purposefully obtuse. &gt; This is nothing to do with 'Microservices' - I could just deploy all wars on the same server, but using different contexts. OR, if there was an issue with a particular 'service' using too much resource, I could move that to a server on its own. So I can run a 'Microservice' type architecture using wars as individual services.... It doesn't need a stand alone jar. So what you're saying is you don't understand microservices. It's not all about moving them around to another computer. The base assumption in microservices is that (1) your services are on at least 2 servers, and may elastically scale up or down, and (2) your services should fail early and fail fast, and then start right back up. Microservices are an architectural pattern. It's about designing a system where it assumes processes will fail often (or just go away), and having plans built-in to mitigate that. You're advocating for a high-uptime SPOF, assume-its-working model. That's not microservices. &gt; Really.... I find this way of DevOps so much simpler, and more reliable. I find it difficult to understand why this way of working is apparently now been frowned upon. That's because you're doing ops. There is no "doing" devops. DevOps is a culture, not a process. It's a culture of ruthlessly automating everything you can. It's a culture of building failure assumptions into your code. Devops is completely independent of container vs. jar models of deploying applications. So as for the why of using JARs vs WARs: 1. I don't need a whole EE container. It's just overhead to me. So I'll bundle a lighter-weight container (like Jetty) into my app. 2. Since I have to provide all dependencies, I know exactly what they are for each build. As long as there's Java on a machine, my app will run there with nothing else needed. 3. I want my apps to be seen as a single process that can be easily restarted with a service like upstart. 4. My largest stack (currently) involves about 600 machines. 600! I can't fathom a world where I'm hand-building and hand-deploying artifacts to various servers while relying on hot reloading. I have a couple scripts that do all the hard work. Our Ops:Server ratio is somewhere around 1:400. Yours is probably closer to 1:4 at best. We have all of 4 ops people managing all those servers. And it's done through crazy amounts of automation that may not make sense for a project like yours, but absolutely do for us. 
open the command line yourself, run "java -jar &lt;jarfile&gt;", and see what it does. there's probably an error you need to fix, like an old version of java or something. 
How did you get the Google material theme for the buttons and stuff?
Neat, you should share this with /r/cellular_automata too!
Also, when I run it, a window with the title "C:\Program Files (x86)\Java\jre1.8.0_66\bin\java.exe" opens for a fraction of a second and then closes. That makes me assume that it's trying open java.exe itself rather than RTUpdater.jar for some reason.
Your command is right but it needs to be run from the same location as the .jar file (right now the command is looking for RTUpdater.jar in C:\Users\Mike). Easy way to do that is to click on 'File' in Explorer, then 'Open Command Prompt'. You should notice that the path before the '&gt;' in the prompt is that of the .jar file. Edit: Alternatively you can shift-right click the .jar file and click 'Copy as Path' to get the full path of the file on your clipboard. Then from the command prompt just run `java -jar [paste file path here]`.
Android.
It works! But for some reason it ONLY works by opening it through the Command Prompt. While I'm happy I can do that at least, on my other PC it opens perfectly fine when I just click on it, and same on my friend's PC. This is a file that I need running on my PC at all times so my goal is to have it as a startup program, but it isn't working that way. What could possibly be going on that the only way I can open the file is through Command Prompt and not through just simply clicking on it?
Really irks me to see equality checks written like p.name.equals("foo") instead of "foo".equals(p.name)
Have you done anything GUI related? In my first year we had a task to create a version of minesweeper using a 2d array of JButtons as the cells. I really enjoyed implementing it and would definitely recommend it.
It is running java.exe. The jar file is really just a special .zip archive containing java code. The java.exe program is going to read it and execute that code. 
Ah, I see. I guess it just isn't executing it properly for some reason :(
I like packaging as a jar better because it minimizes dependencies. Yes, you still have your OS environment and JVM to deal with etc, but at least when you package with a particular version of, say, Jetty, you can be confident that it runs in that environment, which you've been testing with locally and on deployments, etc. There are a bunch of relatively minor advantages to be had from this, including that it forces developers to write the app such that it is easily runnable from anywhere (IDE included) and can be passed around and such. You can argue all of this to hell of course, the end of the day it's tomayto, tomahto.
Unless a jar has been specifically packaged to run on click (Maven-assembly dependancy) you will have to run it through the command prompt. You could always create a .bat file to do what you need in cmd prompt, and stick that in the startup folder.
Head over to the /r/learnprogramming wiki: + [Programming Challenges](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) - plenty projects of various sizes and difficulties there. Also, maybe do the [Advent Of Code](http://adventofcode.com) challenges (as far as your skills allow you to.)
It is a library I installed called [JFoenix](https://github.com/jfoenixadmin/JFoenix).
Sweet. 
Good job! Looks neat! :)
You would be surprised what you could pickup in 2 weeks if you really want to. Follow some tutorials on YouTube and setup a basic app. 
Release notes: http://commons.apache.org/proper/commons-collections/release_4_1.html
Thats true. I guess I shouldn't say I don't know nothing about GUI, I have went through a couple tutorials, but school has been keeping me busy. We had 6 assignments due last week and started finals on Monday, and then done tomorrow!
Good tooling. I used Ceylon IDE to get a project up and running quickly, and it was easy to add third party libraries from Herd. As features go, I got a sense of the power of the type system but I couldn't really speak to it. I immediately liked the flow sensitive typing. http://www.ceylon-lang.org/features/ Look at OP's other posts for more information. Gavin King is a lead developer/architect.
Full of tons of factual errors, incoherent grammar, questions that just plain don't make sense, and other nonsense. Stop wasting our time.
thnx!) and JavaFX is dead)
Not sure to understand. you're asking who needs CDI ? People who need managed component having an automatic lifecycle and enhanced services like transaction management or security without having to activate these explicitly in all your code. So if your code is only 2 or 3 classes CDI might be overkill if you have more and need services in your pojo then you should look at it.
No need for the first / C:/STUFF/STUFF :&gt; cd / C:/ :&gt; cd Users/Mike C:/Users/Mike :&gt;
Thanks for awesome info :) I've always gone through the laborious task of setting up the dependancies, pom etc etc to get it working. In work at the moment, but the first thing I'll be doing when I get home is checking out the class you made :) I've used launcher4j in the past. Is your class an alternative to that or a way of making click able jars? Again thanks for the insight :) 
The class is for enabling double-click start for console .jar apps. It detects if a console is open (or if you're in the IDE). If not, it starts the .jar in \*which it is running in the command box and exits the current instance. Not an alternative to Launch4j etc.
Why is this downvoted? This is a reasonable suggestion. We don't really know how much OP already knows but a semester of Java *can* be enough to get started with Android. Plus it can be very rewarding.
A simple profile with a good profiler (like JFR) would show you that 99.9% of non-GC code is spent in C2-compiled code. GC should account for no more than 1-5%, and most of its time is spent on memory access. Much of the warmup time is due to C2 simply waiting to collect profile results and, of course, lots of IO when classloading. I would be amazed if a better compiler would buy you even 1% of improved steady-state performance, and more than 3-5% shorter warmup.
Ah alright so this is it I hope: http://i.imgur.com/7R01Svs.png Unfortunately that's not working either :(
Try to do a Swing app that loads and saves some entered data e.g like a simple questionnaire about your course. That should fill up two weeks.
Try cd / cd Users/Mike java -jar filename.jar
Additionally, you said about the LinkedList usage in an application that it's answer is None. It's not, the answer given in the quiz is right as also supported by the answer from the thread on the stackoverflow. It says that "The main benefits of using a LinkedList arise when you re-use existing iterators to insert and remove elements.". If you wish, check the below link: http://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist
I like to code my middleware as statelessly as possible, so I have also never understood the point "lifecycle" and "services". If you don't have any state outside of your database (which is the best place for state), why maintain any lifecycles? And how is a service different from just a method / function? I'm not talking about 2 or 3 classes. I'm talking about a million+ LoC E-Banking system I used to maintain for a previous employer, and I had always failed to understand the point of these things. We refactored away most of the Java EE stuff, except for the DataSource, JMS (both of which were very easy to "activate" explicitly) and the servlet spec (because we needed *some* HTTP end point), and the application was much much simpler afterwards. So, if we managed without needing managed components in a medium sized application, who *does* need them? I'm genuinely curious because I've personally found these things to be there only for cargo cult reasons, and no one is able to give me an *extremely good* use-case (apart for a taste for a given programming style), which couldn't be solved without DI.
Nothing seems to have changed much in the low-level code paths in 8u60 here, but the code synchronizes on the ZipEntry... maybe something in the list of classes changed between 8u45 and 8u60 so that the code higher up in the stack is now trying to concurrently load the same classes/entries and ending up blocking each other more? A full reproducer would be awesome!
Android has *relevance* to a lot of people, and that can be good for motivation, but the Android ecosystem is pretty lousy for learning good Java (and programming in general).
Each and every Oracle's study guide or 1Z0-803 dumps set is complete with the entire course of information you will need to learn, know and commit to memory. Like actual Oracle certification, https://exambraindumps.com/1Z0-803.html Oracle training materials are in multiple-choice questions. 
It already was fixed on 3.x with [Release 3.2.2](https://commons.apache.org/proper/commons-collections/release_3_2_2.html) (though in 3.2.2 serialization still can be enabled via a property whereas in 4.1 it seems to have been removed completely).
This is quite easy to fix, actually. First, you need a formal build process, using something like Maven. Then you plug a style checker into the build process, using something like [Checkstyle](http://checkstyle.sourceforge.net/). Then you pick a coding standard and find the checkstyle config xml for that standard. Here's the [Sun standard](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml) and here is the [Google standard](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml). Those are the two most common styles. Or, you can write your own style config and make it as picky or as lenient as you wish. My experience has been that, especially on large code bases, the team should adhere to a style. Which particular style is less important than the fact that there is a standard and it is agreed-upon. And rather than pick your style versus my style, it's better to just pick a known style, such as Sun or Google. That way you're not saying your way is better than his way. You are committing the entire team to adhering to a style that is standard throughout the industry, and not any one person's preferences. Checkstyle will fail your build if code does not adhere to the style. Also you can configure Eclipse, and I believe IDEA to mark Checkstyle violations as errors. So they are treated as compiler errors. If your codebase is large, it will likely be a pretty big effort to bring it all into convention. But that is part of it. You shouldn't just pick one person's style violations and treat them as the problem. If you commit to a style, then there will likely be an adjustment by everyone on the team. Which is good because that way nobody feels singled out. Edit: people, nobody is saying secretly fail the build under the cover of night. Shit, that wouldn't even work anyway since the guy could just reverse the change. Ultimately, it sounds like there is no project leader. Business/personnel management isn't going to do anything because they don't get it. You don't have a standard without an enforcer. Checkstyle is just a tool.
The first thing should of course be talking, he has to have a reason for ignoring the decision of the rest of the team. But if that's not working... do you use checkstyle? You could create your own little checkstyle rule ([Anti Hungarian Checkstyle](http://blog.blundell-apps.com/create-your-own-checkstyle-check/)) and either combine it with a pre-commit hook for your source control system or let Jenkins job fail or show errors in Sonar or whatever else you are using. Of course if you all have the same rights, then he could always undo everything you setup. On the other hand: Hungarian notation may be outdated, but it's far off from some bad design patterns. Rename then when you're annoyed by it, but they won't change the logic or structure of the code.
As much as possible automate without being invasive. For example checkstyle is great, but failures will cause frustration and he may be resentful. Instead auto-format during the build, e.g. [spotless](https://github.com/diffplug/spotless) with Google's Eclipse format rules. Add [ErrorProne](http://errorprone.info/) and PMD as well. These can be sold as catching bugs, improving quality, and reducing work rather than be seen as a personal attack.
OP, try and see it from another point of view: How would you feel (not think) if you were given a chance to work in another codebase and people reacted negatively to it to the point of talking with management about it? I'm not saying that what you did is wrong. I'm asking you if you thought of the other developer as a person and not as a developer. Don't think about the code. How would you feel if a team member complained about you in the same way? At this point, the other person is probably feeling stressed. What you could do is try and solve it from a friendly perspective. Instead of doing the "This is how it should be done" approach talk to him/her about coding in general. Listen and pay attention. People form opinions after experiences. Listening to those experiences will shine some light. If, for some reason, it ends up being just pure hardheadedness, then you can define a style document for the project and put it into effect. make sure that the style document is fair to everybody and not defined to undermine the opinions of others. If you feel like you want to talk more about privately send me a PM. I'll gladly listen. :) 
Works in my Firefox.
They did. 
When I read things like this, I sometimes wonder if the coddling of software developers is causing issues like this in the first place. If the entire team is gelled on using a particular style and one person refuses to adopt it, why is it the teams responsibility to work at getting them to adopt? Perhaps it's a trait that management needs to be aware of because in my experience, things like this don't end up going away but are usually a symptom of a bad team member who perpetually creates issues to gain attention or feel powerful. 
Yes, good points. My approach is to talk to the person and listen first. It can either be resolved or the person removed. But you should always give one fair shot to everyone. Which is not clear from the OP. It reads like a typical me versus him situation. I had not considered the bad apple example you mentioned. The op mentions the developer was transfered from another project. Maybe he was kicked out? I just err on the side of listening to both sides on the first take. Sometimes it's shitty communication and sometimes it's shitty people.
This is how you can tell that your language needs extension methods: when it's considered *completely normal* to use a bunch of "\*Utils" classes, and there are *multiple* very popular "StringUtils".
sponsored content, maybe?
"I've tried to talk to management and they won't seem to put their fist down and tell him he has to follow the rest of the team. Thoughts? " Maybe management thinks that wading into a debate on how variable names should be capitalized is not worth their time? Maybe their inaction means your complaints are reflecting poorly on you, not the other developer. I think you need to choose your battles more carefully. 
This! A thousand time this. We do this and there is no arguing about code style. We have checkstyle do its thing and its a non issue. You or your coworker may disagree but if its a company standard it really doesn't matter.
3 Hibernate created disasters...
The funny thing is we do use check style but we do not implement it into our build process just because the code base is so large and since many developers use it would hinder their work. We have agreed upon sun standards he just doesn't want to follow the same notation the rest of the team is using.
I'll check this out! Yea I have witnessed many very stupid arguments about very silly things. I guess I might actually be one of those people right now haha
what kind of names does he use? How does he name a HashMap&lt;Integer, HashMap&lt;Integer, Integer&gt;&gt; ? hmihmii ?
Java already has you write the type out like a billion times to do anything. Just use one of them
How would it hinder your developers work? Add it to your CI builds, causing the build to fail and the developer responsible to be notified. If you want to go one step further, add it as a pre-commit requirement to your SVN or Git repo so code can't be committed if it doesn't meet the CheckStyle criteria.
Have two builds - one that checks conventions and one that doesn't. That way it doesn't officially fail, but it will nag.
Who owns the project? Who does dev report to. If the project owner/direct report doesn't care then move on. It's his/her decision. You ask for a solution and multiple time you're told the fix is to impose the checkstyle via build. You're saying it would impede others but only if they too didn't follow the standard which means it's not just this dev? Anyways, I'm pretty sure we're all telling you this is your best option. 
A large codebase isn't really a reason not to use it as part of your build process. We have the same and can't sensibly migrate the whole codebase to a unified standard in one go, so we just have Jenkins configured to mark the build as unstable only when new warnings appear - the legacy ones are gradually declining as code gets fixed/refactored or replaced. If it's code that isn't being touched then it probably doesn't really matter if it isn't 100% in line with our standards.
If we added the check style check when commuting code it would work great. If we just added it to our trunks any build it would cause build issues with our jar and cause run time issues. But I see where your coming from and do appreciate the response!
Sounds like yall need a competent team lead...
So what if sName were to become a StringBuilder? Would he change the name to sbName? What if you turned it into an enum or abstracted a domain type? Why does this guy need to know the precise type at a glance? Does he not trust the compiler or the IDE?
Just a guess... Are your methods or classes too large? I cannot think of any other reason in Java why Hungarian notation would be even remotely necessary.
Wow you just described him to a T. 
I have no clue. Exactly why we don't think it's that big of a deal and could easily be a easy fix.
Typically not any more than 700 lines at most and that's very rare.
Haha it "technically" is but really isn't. Overall can just make it really hard on myself and other developers to sometimes interpret what he's doing.
One step ahead of you! We've already agreed on Sun standard he just won't follow it! That's why I'm looking for guidance!
Java 8 has default methods on interfaces which are better than extension methods - but keep whining because .not is less popular than ever. 
I mean I guess if you want to bind your front-end to your backend...
Ok first take some time and look into how Binary Search Trees work and how they are ordered. In their ordering, the bigger node always goes right and the smaller node always goes left. So if you had 6 as the root(The absolute first node when starting in a tree or subtree) and wanted to insert 7 and then 2 in that order, 7 would be on the right of 6 and 2 would be on the left. Now to find a path for a certain node first you must compare with the root, is it greater than or less than? If less than go left, if greater go right. Do this for the next node that you hopped on to because of the comparison until you have found your goal. Every node should have another child node linked to it unless it is a leaf node(absolute last node) and should have a parent unless it is a root. Please if you have anymore questions message me, I love answering basic computer questions. It actually helps me because I am starting to forget some stuff and lecturing really helps in sharpening your mind.
Out of curiosity what did I say to cause you to draw that conclusion?
Think you forgot these. #&gt; #&gt;
Not the same person but, for what it's worth, as a baseline I try to limit class size to ~150-200 lines, and methods to ~30 lines. It really depends on the subject matter but I found that most of my classes are between 50 and 200 lines Javadoc included, large classes can reach ~300. Larger than that and it becomes rather impractical for me. But in the end it's mostly common sense. I'd rather have 4 x 40 lines methods than 40 x 4 lines methods. Same as I'd rather have 3 x 200 lines classes than 30 x 20 lines classes, you get the idea. We can't really discuss line count without also considering architecture, code "terseness" or other parameters. 
This is the type of decision an architect makes and enforces. If you are not the 'architect', you need to come to consensus as a team. I have a few standards on my team like this, we typically enforce them in code reviews. You are in a team, dude. Build consensus. Next, Hungarian notation hinders polymorphism. And, hungarian notation interferres with 'interface programming'. Hungarian notation doesn't really make sense for object oriented programming. EG, if your variable is a List interface assignment, you can switch from ArrayList to LinkedList to CopyOnWriteArrayList without modifying a lot of code or renaming. If he names the List alData for an ArrayList, it wouldn't make sense to change it to a LinkedList if that is what you need. dataList still makes sense though. You wouldn't say sHeader in object oriented programming. You would say header.toString() and let header by whatever type you want and even change it from version to version.... He wouldn't really write sHeader.toString() would he? The type notation is handled by methods, rather than the Object type/name itself. In less object oriented languages where 'header' might mean a series of variables (stringHeader, labelHeader, containerHeader) hungarian notation is more important. I typically use hungarian style notation for temporary primitive variables (i for int, sTemp for string, whatever) but when naming longer term objects I try to stay for Coherent names. Hungarian notation makes more sense in languages which aren't as OO as Java.
Talk to his boss, this is a management issue. EDIT: I see you already did talk to them, but it really is a management issue and if they won't take care of it there isn't much you can do.
:)
Is there a viable alternative to Guava's immutable collections? I, too, am sick of Guava and would prefer to minimise its inclusion. Most of Guava's utility can now be completely replaced by smaller, more specialised libraries, but I will still consider it for the collections -- unfortunately that brings in everything else.
You can use checkstyle etc. or talk to management all day long....in the end th only thing lasting that would help is to explain and make him understand why it is bad what he is doing. People "blindly" following rules are not people i would want to work with. Doesnt it help showing him some open source projects? He should just take a look at some apache projects or the jdk itself....there is a good reason why they are not using his style. Or does he REALLY think he knows better?!
If you're not going to get backing from your management, then you need to get a consensus across the team. Enforcing the style by making non-conforming code fail to build is going to be pretty brutal, so you might need to agree a plan to selectively enable it for a subset of projects first, perhaps projects that the Hungarian doesn't work on as you'll get less pushback. 
&gt; This is quite easy to fix, actually. &gt; First, you need a formal build process, using something like Maven. &gt; Then you plug a style checker into the build process, using something like Checkstyle. &gt; Then you pick a coding standard and find the checkstyle config xml for that standard. I violently disagree: social issues cannot be solved by technology. If the shop has a management that sees value in unified code style and decides to enforce it, this might be a way to go. It does not seem to be the case here. So this is not an option. But if someone agrees on code style and then does not adhere to what he agreed on himself then this is clearly a social issue that needs to be addressed on that level and not "simply" enforced by technology. As /u/ford_madox_ford said, this is a typical solution from a technical person. This type of enforcement won't work here it seems. Even if you can get the code to be one style that way you'll likely kill motivation and the team spirit will be spoiled. /u/MFlood7356 if talking to him as a peer does not work and management refuses to intervene the best is to accept the situation as is and make the best of it. Change it, love it or leave it - but do not continue to chase goals which are not reachable.
&gt; This hard-headed individual is making the codebase harder to understand because he is using a non-standard coding convention. This makes maintenance and support harder for new hires and hence more costly. I am not sure I agree. There are other issues that have a much more severe impact on maintainability than this naming convention.
When you are having a discussion with another Reddit user, it's customary to eventually read their entire comment history. That permits you to glean some idea of their character. That said, you are free to bring your own interpretations to the evidence, and my opinion in this matter carries no more weight than does yours.
You chose to use biased language to describe your co-worker, such as always trying to slant the reader's opinion of him by calling him a "hard headed developer". One man's "hard headed developer" is another's "strong willed developer"--and I have known and admired a lot of developers like that and usually they were great. "hard headed developer doing things on his own and not respecting my opinion." --So, this just makes you look like a dick. You assume, with this comment, that this other developer is required to kowtow to your judgement--which is just nasty. I would hate working with you. "We are now going back through and fixing his design mistakes after much discussion." --Again, this just shows you to be a dick who forced his own preferences on the others--especially given that it's such a small team. 
So I did 
I think a lot of you folks are either not reading, or ignoring the sixth and ninth paragraphs of what I wrote.
That's the part where I said it should be agreed upon and nobody should be singled out.
Argue forever? The only people who argue forever are those unwilling to concede that spaces &gt; tabs
I know Hibernate/JPA solves a problem for me(I even mostly understand what that problem is), but it sure as hell creates about 20 other problems I never had before...
If they'd actually be methods on the class, I'm all for it, but if it's only sugar for turning foo(bar) into bar.foo() I don't see much point.
&gt; This hard-headed individual is making the codebase harder to understand because he is using a non-standard coding convention. I disagree I never used Hungarian notation and had to look it up. Although unusual, it's not that bad. If you need variables *named* a certain way for your staff to understand the code I'd say there's a problem with the staff.
Well, if you notice that "a lot of [us] folks" are not reading or ignoring what you wrote that might be a hint that it has more to do with what you wrote than with people being ignorant or misapprehending. :-)
This article is boss.
So now its way more complicated.
Yup. Other operations (like date manipulation) were greatly simplified, but this one wasn't one of them.
&gt; We really can't afford to add check style to our builds when we need our constant build with Jenkins to always work for sale of the other development teams using our framework. Here's an approach that might help to introduce CheckStyle without the project grinding to a halt. Add it to the build but simply have it log all diagnostics to a file and report success. Run simple statistics over the file. This could be as simple as `wc -l`. Then, plot the graph of the count of style issues, and make it a team goal to reduce this to zero over time. There should be specific but gradual milestones. Add cleanup tasks to sprint plans or whatever. If the whole team is doing this, it might help convince the individual in question. If you can't get management support to allocate time to do this, maybe it's not important. (Or maybe you have bad management, but that's a different discussion.)
I violently disagree.
The exception list is for the *websites* that JNLP files are started from and that are mentioned in the JNLPs, not themselves. Spherical Easel runs fine after I added http://merganser.math.gvsu.edu/easel/ to the exception list, although with a big warning message which requires you to tick a checkbox and click "Run".
Great idea! I'm going to look for into this. Thanks for the suggestion!
I didn't downvote, but this is better (although more verbose than creating a `Calendar`, the old equivalent to `ZonedTimeDate`, from a `Date`, which is the old equivalent to `Instant`, using the system’s default `TimeZone`) because it forces you to take timezones into account explicitly. Unix timestamps and `Date`s on the other hand are supposed to represent a point in time using UTC, but `Date` is often abused by programmers (and ancient Java code like javax.sql.*) for storing local time and doing calendar operations, despite being deprecated for that case since JDK 1.1.
I found this to be the case when I put many classes in one .scala file, as save causes all of those classes to have to be recompiled. Is this the case with any of your files?
You are correct. What forced me to write it down was working with JDBC which doesn't support the new java.time package as well as I'd like (it does support it using setObject / getObject, but for my usecase it's not as flexible as I need and I'm forced to use the old API and then transform the data to the new one, so at least for me it's a hassle. 
Enum keys should be declared in upper-snake-case as they are constants. http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html
Interesting. Can you compare it to other libraries like apache commons configuration?
Artraxes, I think it's a kind of "holy war" problem. I saw all kind of code and I can take all kind of declarations. No big deal :)
Wolfsdale, thanks for the detailed feedback! About enum: it will be your class, so you can write it by canon, of course :)
There is some sweet irony happening here. :) No worries. I was just curious.
certainly the case with Slick's generated schema code. We have a table with lots of columns which in-turn makes slick even make this class that's unorthodox.
I'd prefer Maven to delivery what you're suggesting, but that's not solving the core of my problem. my rationale is: * I want one configuration file, or at least pattern of configuration * I don't want duplicate alerts distracting me * I don't want everybody splitting efforts and essentially duplicating things * I want a solution that doesn't require a running service * I don't want divergent ways to mute alerts
They want to be system agnostic. So they don't rely on the host operating system even having any sort of concept of ssl or a trusted ca list. So they packed up a shitty version of openssl and went with it. 
key tool gui is a much easier approach
I spent a long time thinking about how to respond to this because your comment is so unbelievably stupid that it almost defies response. Here are a few of the problems with your comment: * My comment contained 22 words. The minimum sample size that Flesch-Kincaid is intended to measure is 100 words, so the score cannot be correctly calculated for my comment. * Flesch-Kincaid is a designed to analyze prose in an extremely simplistic manner, without regard to context, audience, medium, or many other factors that influence perception of what constitutes good writing. For instance, the standards for assessing the quality of writing for a short Reddit comment (say, mine) would naturally be expected to be lower than the standards for assessing a longer-form published piece designed to summatively assess knowledge in an expert technical field (i.e., your quiz). * Flesch-Kincaid does not purport to measure anything related to factual correctness, so it has nothing to say about a major problem with your quiz. * Flesch-Kincaid does not purport to measure anything related to grammatical or syntactic correctness, so it has nothing to say about another major problem with your quiz. * Who cares whether "it was[] a grammar competition that the author was competing for [sic]"? Grammar competitions (if such things exist) aren't the only reason to use good grammar. Incidentally, this comment has a Flesch-Kincaid readability of 52.5 (grade level: 11.3), which — since you set so much store by that bizarre and irrelevant measure — may or may not help convince you that I am perfectly capable of writing sophisticated prose. With respect to my previous comment, I will just point out that it's a matter of when I choose to focus my efforts on writing quality. A published quiz would have been a good time for you to focus your efforts thus; a Reddit comment is frequently not such a good outlet for me, though it certainly can be.
It sounds like you've built up some sort of good vs. evil conflict regarding .Net and Java in your head. In my personal opinion, that type of thinking isn't wise for your career. Yes, Java is much farther along in the open source world, and if that is something that is valuable to you, by all means pursue it. But, OS is not always the best option for every company and product. Having a personal bias might cause you to miss opportunities. Use the technology for what it is, not what you want it to be.
I've had jobs programming in .NET and Java. Whereas I prefer to use Java for almost anything and over .NET, .NET can also be used for just about anything that you put your mind to as well. Heck, I've "hacked" and reverse engineered a .DLL file to figure out how to programmatically interface with a credit card printing machine. I think the .NET ecosystem is nice, along with the languages, such as C# and even VB. I do think Microsoft sucks, but, then again, Oracle sucks, too. Oh, and Windows 10 is too big brother for my liking. I'd take OS X over it any day and Linux or BSD over OS X any day.
I really appreciate the efforts you've put in to explore about the subject (the scale) which may not be your favorite one. And now there are facts and figures in your reply which are convincing. That's the only point I was trying to make that criticism is welcome but it will prevail only if supported by the facts. Anyways I do regret for any inconvenience caused. And we try to do better, learns from the feedback. Thanks.
+2 on using checkstyle in the builds. An alternative I came across the other day is to introduce http://code.revelc.net/formatter-maven-plugin/format-mojo.html (if using maven) to _automatically_ reformat all code as part of the build process based on shared code style guidelines (this plug-in uses the eclipse formatter so it consumes eclipse settings files). I've not tried it much yet but seems to work, although it's default formatting favoured using tabs - yuck.
Java dev, architect here. I can assure you that .NET has its advantages too. The less products there are to choose from, the more you know they integrate well together. Both when it comes to libraries and ALM products. 
It's actually a coding convention, which is important to have code which can easily be understood by the huge majority of the community. 
That is a very logical opinion if your goal is maximising income opportunities. Maybe, just maybe, he wants to become a great programmer?
I think you might be interested in this: https://en.wikipedia.org/wiki/Software_craftsmanship http://manifesto.softwarecraftsmanship.org/ 
I think the "community culture" made him feel lonely. While it is not necessary to be able to relate to your colleagues, it is what makes us human. It is debatable but perfectly understandable.
Cool example, however you didn't talk about what happens if you had places elsewhere in your code using the customersreader, now shit is all fucked and you would have to go change how you initialize those everywhere. I think I would have left the default constructor with the http client and the configurations initializing like they were before and having that second constructor with a visiblefortesting annotation. 
I do not consider Oracle's Java very much more "hacker culture" like than .NET. If you are looking for intellectual curiosity consider one of the languages that target the JVM — Clojure, Kotlin, Scala (I prefer Clojure). 
Neither do you.
&gt; When you are having a discussion with another Reddit user, it's customary to eventually read their entire comment history. That permits you to glean some idea of their character. No it's not, this is something you made up on your own. There is no such custom.
I have done a fair amount of programming in Objective-C, Flex, JavaScript, Python, Perl, and Java. The Python, Perl, and Java communities are so much better than the Objective-C, Flex, and JavaScript communities (in terms of the quality of questions asked and quality of answers given). I've never dabled in .NET, but I wouldn't be shocked if the community quality was massively different for two languages that are otherwise so close (I think of JavaScript and Python occupying similar spaces, but again Python has a much better community).
Could you be more specific? when you're using those deffered result operations you're essentially putting the thread in a queue waiting for a result for something there is only one of so it has to wait for access to it, or something that takes time like a database call. If you want to control memory useage in this situation you can artificially keep it one copy by useing singletons, however you will need to synchronise access to that object with some kind of lock which really is often more of a pain than those few mb's of ram are worth and it creates a choke point where you are putting your threads in a line. You can also make use of stateless static methods (pretty much functions) to control the memory which is better. In the model of async optional future calls for database, you can also arrange it so that it sets up all the calls before you start processing the returns throw them in a list(use Collections.synchronizedList) then process the list, it gives it some time for the call to come back before you start asking for the result. less time wasted on is it back yet thread checks like that. edit: Collections.synchronizedList thingy probably a good call
Well done. 
They should move to hungrain notation
Android devs have same kind of code and they use type prefix
I think some people can think outside of the box. They do it one way and can even give a different way a try.
I agree, they should create smaller classes, methods. For me it looks like mac vs pc flame war.
[removed]
Not for javaws though
ok thanks for this explanation guy!
That is actually my preferred solution, too.
&gt; That describes Java-culture. This is a cynical view of Java culture, and not one that I've experienced, working in both startups and enterprise. I love that Java has a huge amount of quality libraries, because *I don't have to reinvent the wheel*. I can focus on developing actual *business* logic, which is the actual value, and just use "commons-lang" instead of wasting time reimplementing the same "StringUtils" class over and over again. &gt; Java engineers are effectively gue or wiring engineers This is not limited to Java. I would dare say most software engineering is derivative work. &gt; Only architects are allowed the privilege of creating I have not experienced this in the Java world. I don't think I've even been in a position where there is an actual "software architect". I have however experienced this in the C++ world. Which leads me to conclude that the phenomenon of the almighty "software architect" has nothing to do specifically with Java, but is a cultural artifact of organizations, independent of the language being used. &gt; Java-culture is not for creative types. Again, not specific to Java. The large number of startups using Java is a clear counter example to your claim. &gt; you won't always have the freedom to integrate your favorite libraries, and &gt; will often have to deal with enterprise bullshit (i.e. Oracle, IBM, etc &gt; products). I have never had a problem integrating Java *libraries* with enterprise or non-enterprise applications. Just drop the library in the WEB-INF/lib or META-INF/lib of your project. Tools like Maven and Gradle make this integration even simpler. Now *frameworks* on the other hand, which Java also has a lot of, pose bigger challenges with integration. But that's because you call libraries, and frameworks call you. &gt; Microservices are an attempt to rebel against the enterprise all-the-things &gt; Java world This is not what microservices are about, and microservices can be just as enterprise as Java EE. Microservices are about modularity and independence of modules in terms of development and operations. "Enterprise" software development is integrating and coordinating a wide variety of systems with requirements for fault tolerance and high availability, which is the problem that enterprise middleware attempts to solve. Microservices can be just as involved with that middleware as monolithic application servers. And monolithic application servers might only be involved with managing local resources and not enterprise at all. But this is not the nature of Java, which can be used in non-enterprise environments just as easily. Most work I've done in Java is non-enterprise software. Java is just a programming language, and does nothing to "stifle" creativity. &gt; There seems to be more open-source java, but I don't know that I'd call it &gt; a revolution. The revolution is open source, and Java benefited greatly from it and greatly participates in it. The revolutionary aspect of open source is communal development of commodity software, so that while business do still compete against each other, the competition can focus on the product differentiation, and labor can be pooled on the software of common interest. It is amazing that Maven and the vast common repository of very useful libraries, developed in the open, came to be not as a commercial product of one company, but the combined efforts of the entire Java community. &gt; That sounds like 90% of Java. Not so! Spring MVC is only one web framework out there! You can also choose from JSF, Wicket, Play!, Spark Framework, Rat Pack, a wide variety of choices. This kind of diversity, for many different things, doesn't seem to exist in the .NET ecosystem, which seems to look to Microsoft and its commercial partners for guidance.
I at least partially agree with most of your post. &gt; &gt; That sounds like 90% of Java. &gt; Not so! Spring MVC is only one web framework out there! You can also choose from JSF, Wicket, Play!, Spark Framework, Rat Pack, a wide variety of choices. My intended point was that most of Java development is web or something similar to it (i.e. Android). I've tried to find something more creative/interesting/challenging in the Java space, but the only other thing I can seem to find is Data Science, which typically requires a masters degree, and still is much the same thing of fighting against shitty data, doing a mimial amount of processing, and then generating a report/ui for some user. I know the above is quite cynical, but I've looked and looked, and can't seem to find hardly anything in the Java space that isn't mostly CRUD + UI work. I may just be looking in the wrong places.
From my point of view, Java was conceived as an easy to debug language. You can see it from the lots errors that the compiler checks (sometimes even paranoidly), from the fact that iterators are fail-fast, and from the cautious type-safe API of most classes of the platform. However, when it comes to Java EE I don't see much difference between it and .NET. I've worked with both of them and most EE features seem to focus in the easiness of writing programs - may God help you if you ever have something wrong in your XML files because Java or then application sever certainly won't. Sometimes they will even silently do what you're not expecting them to. &gt; .NET culture, as I have experienced in several different workplaces and online, is the very opposite of hacking culture Agreed. Just want to get things done, don't care how they work. &gt; I'm not sure if the .NET culture even values programming for its own sake. They seem to hate exploring anything that has to do with programming. I think this is a general problem in the world of programming. Most programmers will avoid typing "a = b + c;" if they can achieve the same result with 100 lines of XML. They say it's for maintainability, and that's a term that everybody uses but very few people actually know what it means. IMHO maintainability means minimizing dependencies so that any modifications have minimum impact (long live polymorphism and design patterns!), but I don't think the fact of not having to recompile the code matters much. Certainly I prefer recompiling instead of having to modify 100 different files just for a trivial change. The Java community is not very different from .NET under this point of view. 
I have a minimal implementation. Check this out https://bitbucket.org/kechap/game-of-life
[removed]
Interesting - didn't know about [Slick](http://slick.typesafe.com). Thank you. Does your database schema change very often? If no, are you talking about incremental or full build/compile times? Leveraging incremental Scala builds may help lessen your current pain. :)
Not sure if I'm using the incremental build.. I'm using IntelliJ. I'll read on that. Thanks
Can't say I have *that* much experience with Swarm, but I think it boils down to this: Wildfly Swarm has a Maven plugin to create a standalone JAR file, so that should be quite easy. Creating a WAR from that same source code shouldn't be that much of a problem either, although I guess it's like mixing two types of targets (standalone JAR and a deployable WAR). So it may involve altering your pom.xml or configuring it that somehow outputs both a WAR and a JAR. It's JEE7 either way so I think it won't give a lot of hassle. And FYI it's more of a Maven or Gradle thing, than Eclipse. My rule of thumb is to make things compilable/buildable with a build tool such as Maven, so you aren't tied to a specific IDE.
Are you sure that will work?
Christ man, do some research. This is beginner level stuff that can be answered with a simple Google query. He answered your question, the link reaffirms it, and all you can do is say "are you sure?" Plus, you're not even in the right subreddit. Check [here](https://www.reddit.com/r/javahelp) for future needs.
his company is doomed =) 
The other answer here has you covered, but the phrasing of the question raises concerns ... If you're dealing with such sensitive data with serious risk for you then are you sure you're experienced enough for it? It sounds like you don't have much experience at all. SQL injection is pretty basic stuff and there's lots of other stuff to worry about when you're not using a good framework. Better to say you're out of your depth than having to deal with the consequences later.
well to be fair, it probably is a "company" in a Java class that the instructor made up 
They can be nice but there's a definitely a learning curve. I do think once you've gotten past that, it is nice to take something that is really a single logical operation and condense it into one (long) line. Compare an example: List&lt;WorkerModel&gt; activeWorkers = workers.stream() .filter(w -&gt; w.isActive()) .collect(Collectors.toList()); vs List&lt;WorkerModel&gt; activeWorkers = new LinkedList&lt;&gt;(); for(WorkerModel worker : workers) { if(worker.isActive()) { activeWorkers.add(worker); } } Another example that's much much nicer as a lambda Map&lt;Integer, List&lt;JobModel&gt;&gt; assignedJobsByPriority = assignedJobs.stream() .collect(Collectors.groupingBy(JobModel::getPriority)); vs Map&lt;Integer, List&lt;JobModel&gt;&gt; availableJobsByPriority = new HashMap&lt;&gt;(); for (JobModel job : availableJobs) { int priority = job.getPriority(); if (!availableJobsByPriority.containsKey(priority)) { availableJobsByPriority.put(priority, new LinkedList&lt;&gt;()); } availableJobsByPriority.get(priority).add(job); }
At the most basic level SQL injection is allowing the user to send commands directly to your database. Literally *injecting* the command they want to run into your SQL. The way that an application is written that usually allows injection is by not preventing the user from executing *unescaped* SQL. The bad way to build a SQL statement is something like this String uid = &lt;get uid here&gt; String sql = "SELECT * FROM USERS WHERE UID = " + uid; The user, if they were malicious, could pass in "12; drop table users;" and cause the `USERS` table to drop. In a nutshell, that's SQL injection. Preventing SQL injection is pretty much as simple as using [PreparedStatements](https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html) (as mentioned by /u/infinity_plus_1). What this does is insert the user provided value (`uid` in our example) in a safe way that prevents any arbitrary SQL from being executed. Connection con = &lt;get jdbc connection&gt; String uid = &lt;get uid here&gt; String sqlTemplate = "SELECT * FROM USERS WHERE UID = ?"; PreparedStatement prepStatement = con.prepareStatement(sqlTemplate); prepStatement.setInt(1,Integer.parseInt(uid)); ResultSet rs = prepStatement.executeQuery(); There are more nuances to preventing SQL injection but this step goes very far towards preventing the issue altogether by preventing the user from being able to even **send** arbitrary SQL statements to the database. Some other things to be aware of would be: * Ensure that you don't 'leak' table names to the user. Catch and mask thrown exceptions like "could not query table USERS" so that the database schema cannot be determined through forcing errors. * Validate your data before even getting it near making your queries. If you expect an integer and it doesn't parse into an integer then it's probably not a good idea to just jam that into a query. * Don't assume that the queries will be safe. The user performing queries from the application should not have certain privileges to the database. If the user **can't** drop a table then if they somehow still manage to inject/execute the command (after bypassing the other security measures) it won't matter because they don't have the privileges to execute that action. * Deletes aren't the only action a user might take. They may be looking for information from other tables like addresses, emails, or even passwords. Segment the database user's permissions according to the access level of the functions being performed. * Passwords stored in databases should be hashed with a cryptographically secure algorithm and salted on a per-user basis. This isn't really related to preventing SQL injection but bears repeating. This prevents, or at least greatly diminishes, the risk of having passwords stolen through injection. These suggestions may seem overly paranoid but software security is mostly a strategy of [defense in depth](https://en.wikipedia.org/wiki/Defense_in_depth_(computing\)). The more layers that an attacker has to peel through the more mitigated any attack. The same goes for the breadth of data that they can access. If all of your sensitive data is stored alongside other sensitive data (or thrown in with non-sensitive data) then you broaden the amount of data that can be compromised with any single attack. And, of course, just because your application is successfully defended from SQL injection does not mean that it is inherently safe from other forms of attack. I recommend that, in addition to fuzzing/analysis tools like [sqlmap](http://sqlmap.org/) (as suggested by /u/lukaseder) you also use a static analysis tool (or more than one) like [FindBugs](https://en.wikipedia.org/wiki/FindBugs) or [PMD](https://pmd.github.io/). FindBugs even has an addon called [FindSecBugs](https://find-sec-bugs.github.io/) specifically for looking at security bugs. You can integrate these with your maven build process. I think this information is important enough to repeat, repeat, repeat so that anyone who looks for it can find it easily. I still have my reservations about the question.
" cryptographically secure algorithm" Actually, that's not entirely the correct answer. There are some types of hashes which are specifically designed for passwords. Generally these are computationally expensive. There are also other cryptographically secure hashes which are fine for other purposes, but which should not be used for passwords. 
Good point. I can't ever remember the names for some reason and I just google word soup until I find the current recommendation. But you're right: as good as SHA512 is that's not what you need here. (Although per-user salted SHA512 would have prevented quite a few recent password breaches.)
Looks pretty sweet. Similar to spark, maybe not as popular, but very cool. 
Well google will give you customized search results. So what you saw may be different that what I saw. And each of us will get results which google deems more appropriate given what google knows of us. 
You should know about design patterns and when _not_ to use them. There is a lot of over-engineering going on in a lot of Java applications because people throw design patterns at every problem without knowing what they are actually for.
It's soo painful true... 
I always liked Cafe au lait
Are they ranked in any specific order or is that just the other they were added? 
If you have to ask this question, please don’t apply as a Java developer.
Currently a student. So uhm let me see. Asking questions having to do with my future means that I should avoid going down that path? Nice one. Very, very helpful and well thought out. I think you've earned the title "Douche"
STAY.AWAY.FROM.MICROSOFT.IF.YOU.CAN wow what a discovery :) 
[**@Nick\_Craver**](https://twitter.com/Nick_Craver/) &gt; [2015-09-11 01:01 UTC](https://twitter.com/Nick_Craver/status/642140793847812096) &gt; @MikeWills Porting to another RDBMS. Honestly, I’d rather not spend time doing it. Sometimes though, choices are made for lack of options. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
[removed]
As a minimum to apply for a job you need to pass an interview. This is standard way, so some points about it. Passing an interview consist of several parts. 1. You need a CV. You should post it somewhere or send it somewhere. How to write one you can know [here](https://www.reddit.com/r/resumes). Again I speak only about standard way, so I suppose that you will need a CV. 2. You need to be invited on interview. So you need to know how to speak with HR on the phone. Just remember, they don't know almost anything about development usually. Same about on-site interview with HR person. 3. You need to know stuff, which you will be asked for on tech interview. If we talk about Java SE it will be at least: OOP basics and general JDK/JRE questions, Collections, Threads, Exceptions, GC and so on. You should know SQL (you will be asked to write some sort of select most likely). Probably Hibernate. Regarding Java EE, questions could be very wide, and it is not an absolutely minimum, but be ready at least for Spring questions. google "top java interview questions" to understand what kind of questions you will face. Obviously, you need to understand how things work, not just memorize answers on top 100 questions. 4. Algorithms. Basic questions, Big-O-Notation. You need to be familiar with Strings, arrays, data structures and collections of different types, sorting algorithms and so on. Again you don't need to memorize how to solve particular question, you need to understand main points of finding solution. 5. Programming tasks. They could be on paper (everybody hates it) or on computer in office, or at home. This is simple, you have to know how to develop. 6. Previous experience. It depends, whether you have experience or not. Try to have some. Learn how to draw your previous projects' scheme and how to explain to other people what is it for and how it works. After first few interviews you will realize in which areas you have most problems, and which areas are completely dark for you. This is a good moment to start work at improving of these areas. 
Ummm still relevant? We moved to ReactJS and Springboot years ago.
Is that still relevant then? We moved to JSF and Java EE years ago.
Dang it.
Thanks. Most of them are already tracked at http://www.topjavablogs.com I will add the rest now.
&gt; About Axel Fontaine &gt; I'm the founder and CEO of Boxfuse GmbH. You really want to find out in practice what Reddit's site-wide ban threshold is for [self-promotion](https://www.reddit.com/wiki/selfpromotion), right? Just in case your user page goes blank soon, [here](https://i.imgur.com/C5PITkT.png)'s a screenshot. Quote from the self-promotion wiki page: &gt; It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account.
I think this would be a junor / apprentice role.... I dont think he needs to know this. 
Get a laptop (if you dont have one already). Be prepared to show off some of the things you've done. There is not enough java dev's out there. There will be companies will ing to take the risk to employ you, so long as you can show them you are willing and able to learn new things. Make a web app. Even if its just a simple one.... if you can piece together what you need to know to build a site, the java, the JSP, the javascript, etc, and put it all together, then this will be enough for someone to take you on as an apprentice. Dont expect to be paid the earth though!
I agree with the "idea" of this; but since the "java standard" is to not do that, I have opted for a visual-equivalency: I leave the curly-bracket at the end of the method's declaration-line, but I add an empty line below that (where *your* curly-bracket would be). Similar effect (for the most part), but still aligned with the standard. ;) Course, it drives me nuts when my peers start writing code on that first line... and if I work in that method, I put a blank line there! But otherwise I don't say anything else about it b/c it's mostly a petty discussion. 
Sure. If you know what data is being sent to the server (the content of the POST, most likely), there are a number of Java libraries that will allow you to do the same. [This post](http://stackoverflow.com/questions/4205980/java-sending-http-parameters-via-post-method-easily) covers how to do it with built-in Java objects, but there are some packages that will hold your hand a bit more. Google "send POST data java".
If you don't instinctively know how to solve [FizzBuzz](https://en.wikipedia.org/wiki/Fizz_buzz), you aren't ready.
This is Visual Studio all over again. That was the killer IDE around version 5 and 6 then Microsoft made it worse with every further release. RIP jetBrains.
Yes, the JVM is the only thing that makes sense in the first statement. Some companies (banks and insurance, that I know of) still maintain internal applications written in Java that are distributed through the browser. It's why some companies are slow to adopt new browsers, and even slower to drop things like Java or (at my current company) Flash. If you don't *need* these for some specific business-critical application, you should uninstall them.
Intranet Java applets are still around.
I agree with cww. Nothing can beat good GitHub profile. As for things that asked on interview, I'm not very familiar with internship conception, but I suppose that algorithms will be important and may be Core java questions. 
Guess I should count myself lucky then with my HP switches running some arcane webui which is mixed Java applets and html, at least they work with a recent version of Java(Last time I tried was 1.7).
Lol this has to be a joke
School is a bad place to keep up with technology.
Yea, I am kind of at a loss. I will keep poking at it and see if I can figure it out. Apparently no one else has really noticed this yet. If anyone wants to stay on the journey with me, send me a PM.
Webex
Trade schools / Community Colleges aren't so behind the times ...
No specific order. 
Lol, browser-based IDE.
If you're a developer you never stop learning. Go build a webapp that does something useful to you, however small that use may be. 
Looking good. Definitely needs a lot more documentation, such as authentication and other modules.
Call me crazy, but why not have them commit it to a repo on GutHub? I'm not I'm college anymore but I work with a professor and this is what he does.
..yet another example of why journalism is dead.
Search for "java jar hell"
I tried this with an advanced Java class last semester, and it backfired horribly. Two class periods to introduce Git isn't enough. I'll go back to paper.
I'll come back to this comment in 5 years to piss on its grave.
&gt; dependencies sorted out correctly That's the definition of jar hell.
But that's the problem of package manager right? As a user, I just specify `spring-mvc` to maven using pom.xml. Now its maven's job to see what hundred other dependencies spring-mvc has and pull them. So isn't the jar hell problem handled by maven entirely, so you and me can be free of it?
No it isnt. When spring-mvc needs xyz version 2.1 and package abc needs xyz version 1.8 ... have fun. 
What year did you get your CS degree? I got mine in 2000 and it was mostly 80s and 90s stuff.
With how many solid IDE's are coming out based on Node, Good browser based IDE's aren't far off.
The classloader don't give a fuck.
Yea you learn how to program with pen and paper. Which you'll _never_ do in real life. Carpenters don't learn to build with a plastic hammer and styrofoam for wood, why don't CS students learn to program with the actual tools they'll use when entering the job market? Instead of spending time dwelling on syntax, which the compiler will help you with anyway, you can spend time learning the API, learning the ecosystems, the tools, the more advanced langauge features.
&gt; c9.io IDE is actually approaching usable for javascript, so essentially the built in JavaScript console (ctrl+shift+J for keyboard junkies)
http://www.javaranch.com/ or maybe http://stackoverflow.com/
The point of lmgtfy is to affront someone that he is unable to enter a simple search query into the google search bar ;-) anyhow the results are not wrong - google just tries to show you more customized sites that may be more specific for you than for others. IMHO this works pretty well for my search queries.
I haven't checked out their policies (privacy and security) but I don't see why they would be nefarious, they provide a service for a price. I could see this being useful to some
Should be fine, I sometimes do Java dev on a mac air with 2gb ram and it ... works. Slowly. 
&gt; These students need to tinker with programming and learn the syntax directly, rather than indirectly learn through abstracted pseudocode. That depends on whether you're trying to teach them a programming language or *to program*. In my opinion the latter is preferable. 
Installer... I barely know her!
Unfortunately this doesn't work for example if you declare beans using XML with Spring. With Java Config it works just fine, though. 
I think that what really changed is that it is not necessary to prove yourself in any way before you are able to climb on a stage which has a very large public. Anyone can open a YouTube channel and preach to millions of people today. This is a great thing from one point of view but it found us completely unprepared to the harsh truth that the majority of people on Earth really have nothing much to say, in the best scenario. This should have made us pause and think but it was nobody's fault really, so it went unchecked.
Thanks for trying to help, but it seems that your account is still banned, so your comments / posts don't actually appear. You need to set things right via the Reddit admins first. And your comment should have more empty lines, I think. You wanted to appear those warning texts on a line each, right? Well, on Reddit you need to press enter *twice*, or the next line will be treated like a part of the same flowing text.
Ok grampy
[removed]
Well sometimes I'm an idiot. I can't remember pbkdf2 and scrypt reliably. (Though for some reason I can remember the long form: password based key derivation function 2.) I was excited that maybe that lmgtfy phrase would be the way my memory could be jogged better. Of course I've thought about it so much in this thread that it could take a while to forget again. Note: it's more important to remember that the concept of time/resource-intensive cryptogtaphic hash functions than the names of the algorithms. That's something that will change over time as more expensive ones are created.
Seems like a no brainer to lock down the permissions of server side Java apps to just what they need. Very similar to not running services as root. Anyone have any experience running pro-grade in production?
LOL at all of these comments, arguing back and forth about whether it's a good idea to hand-write Java code on paper. The OP merely said that he makes students "print it out" on paper. If you look for a "File -&gt; Print" menu option in Eclipse, IntelliJ, or whatever... it's there. You've probably never had a reason to use it, but it's there. And that's almost certainly what OP was talking about, doing the work in an IDE and then printing it out.
It's called shadow-banning. You can check if you're still banned by looking at your user page while not logged in. Currently, it should say: &gt; page not found &gt; the page you requested does not exist (Fun fact: I wasn't even notified that you replied to my comment.)
I mean what is the traffic like on your app? I had some on a single $5 digital ocean droplet for a while... then moved to aws and gce behind elastic load balancers when I grew up... Free anything is not going to be awesome, I would suggest shelling out at least 5 bucks...
Ehh... I keep toying with Cloud9 once every few months, to see how far it's come along. It's way ahead of Koding, Nitrous, and probably this new offering... but it's still just a novelty rather than something I could use full-time. I'm impressed by the array of languages supported with syntax highlighting and app launchers, and the ability to serve up your code as a public web application directly from your server workspace. Maybe these things have some use for JavaScript-slinging students, who can't pay $100 for WebStorm... or perhaps for people stuck in boring corporate jobs, so they can tinker with personal projects without having to install anything on their locked-down PC's. However, the lack of true Intellisense-style autocompletion, and refactoring support, makes these things unfit for real professional use. Until that changes, they're pretty much just toys. I've thought about this a lot. When I was starting out in my Java career, I worked with some IBM midrange developers (i.e. RPG, COBOL). They viewed Java as a hipster thing, didn't want to learn anything new, and eventually all those guys faded away. So am I just becoming a crusty old man, too? Are tools like this really the future, and I'm just failing to see it? Perhaps, but I really don't think so. For a counter-anecdote, I'll point to Google Apps. Let's look at the timeline for cloud-based office collaboration suites: 1. Through the 1990's and most of the 2000's, all office workers used Microsoft Office on their local desktops. Perhaps there was some very manual collaboration, in the form a shared file server on the local network. 1. Google Apps comes along. Now you can collaborate wholly through the cloud, from any device with only a web browser installed. Everyone is really excited. There are a lot of small early adopters, and by the mid-2010's you're even seeing some large corporations transition over. You don't *need* an office suite installed on your desktop anymore! 1. Microsoft develops Office 365 and says, "*Sure, you don't NEED a full desktop office suite. However, if you're ever doing any non-simple work, or even just working with a document that's more than a couple dozen pages, then you'll probably wish you DID have one! And if we can get real for a second... at least 90% of the time you ARE working on a device that supports them. So our cloud-based offering still comes with the desktop suite as an OPTION for when you need it, and it's been updated to work very closely with the modern cloud-based collaboration system.*". People tend to like this, especially in larger companies, and Microsoft catches up with Google in the cloud space. So if cloud-based IDE's go anywhere at all, then I imagine they'll follow a similar trajectory. No one cares about running sophisticated software in a web browser *per se*... they only care about solid collaboration. If you can improve collaboration outside of a browser context, then I think people will generally prefer to use real applications... particularly for specialized content creation (e.g. PowerPoint or writing software). However, I don't really see cloud-based IDE's even making it that far. Where exactly IS the "collaboration bottleneck" that these things solve? We already have a cloud-based collaboration system for writing software together... it's called "git". Are you really going to eschew source control, and just all login to a shared workspace and edit files together instead. I kinda doubt it. And if you are still using "git", then the need for everything else starts to crumble. 
I already do that by using Git and Gradle... It's pretty awesome.
Tried that. God no.
Very nice, thanks.
Java jar hell is way overblown. Just more FUD spread around about Java. In 15 years of Java development I can count on one ~~hand~~ finger how many times I have ran into a situation where I had two dependencies that depended on different versions of the same dependency. Sorry, it just doesn't happen that often. Library developers are pretty good at maintaining backward compatibility. 
Works just fine with Eclipse. I added a task called `eclipseSetup` in my `gradle.build` file. If I sit down on another machine, all I have to do it type `git pull &amp;&amp; gradle eclipseS` and then reload eclipse and whatever libraries I've just added on another machine are ready to go. task eclipseSetup { description = "Cleans and generates eclipse project/classpath files that are not under version controlled." } eclipseSetup.dependsOn cleanEclipseProject eclipseSetup.dependsOn eclipseProject eclipseSetup.dependsOn cleanEclipseClasspath eclipseSetup.dependsOn eclipseClasspath It would be nice if I didn't even need to do that, but 30 seconds to switch machines is hardly onerous.
It totally does! &gt; There are two List implementations.ArrayList, which is usually the better-performing implementation, andLinkedList which offers better performance under certain circumstances. ArrayList performs better except when it doesn't and sometimes LinkedList performs better - when it does you should use that! Great article
Hey, spammer: You should know that cloudrail.com is completely banned. Have a nice fucking day.
c9 has class-aware completion (this one does too) and go-to-declaration works. the only critical thing the c9 is missing is "find usages". it appears that they're parsing the javascript and generating the AST, and just need to make the UI for find usages i believe the tool that does the javascript processing is ternjs 
I call that designing or architecting, nor programming. I do that all the time myself but I don't _program_ on paper. Haven't written a for loop with a pencil since University (11 years ago) 
What a nice answer! How can a community based solution for Java developers which is entirely for free, liked and upvoted by the people here be banned as spam? Don't see any difference to the other posts. 
Great list! Thanks for sharing. Here is also a collection of resources on software craftsmanship: https://github.com/benas/awesome-software-craftsmanship
not really any different from the trust that's required to run any sort of software. free software provides some assurance, but even in that case inserting a backdoor is pretty simple. and with commercial software, it's totally an act of faith and enterprises routinely outsource all sorts of stuff involving critical data - this is the least of their worries 
No, not running Eclipse in a tablet, but I do run Eclipse on multiple desktop/laptop machines. Honestly, the problem with my setup if you want to code on your tablet isn't even that Eclipse can't run on a tablet, it's that it would be a terrible experience if it could. We need a new generation of IDEs and or languages for developing with touch screens, and even a web IDE would be terrible for that if it doesn't address that typing is much more expensive on a touch screen. Nothing stops me from using emacs on my phone to edit code on my laptop, except that the experience would be terrible...
Evidently they moved to html5 in 2013. Is there a reason to use an applet instead?
Well many higher end tablet do come with keyboards now so that wouldn't be a problem. My main problem is, as you mentioned the lack of a working IDE. I'd love to not have to carry my laptop everywhere if I didn't have to. Again, I think that time will get us there, we're just not there with the tech and software yet.
Right. You just thought "Hey, let's participate in Reddit! I'll just make a quick account. Ok, here's a useful post for /r/java! Great community, looking forward to participating." Maybe you want to take a look at https://www.reddit.com/domain/cloudrail.com/ Most posters who submitted it are shadowbanned. Now, how did that happen? Merry Christmas. Learn some manners.
&gt; Hadoop FTFY.
depends what you will run, however, for most part should be enough
My app is very simple CRUD app and traffic will not be intense for sure. I will be testing it and some of my team members initially. I can say traffic will be minimal to average(This is going forward not now) 
Hadoop*
I would say very good. It is not something that happens overnight though. You need to continually code and learn the craft. Start with simple projects and tutorials and build up to greater knowledge and skill. A solid portfolio of projects can open many doors. You are a car salesman because you sell cars. If you want to be a Java coder then you have to code Java so go and start doing it today. There are myriad Java tutorials for beginners to be found on the webs. 
That's true. I've been working with Java since '98 and no, it is a very rare thing. When it does happen in painful, but luckily it is rare. Which is again, why the answer to the title of the article is NO. Mostly because jar's didn't fail at all. Jars are just fine. Jigsaw will bring improvements, especially when modularizing the jre itself, but there are no problems with jars as they are right now. 
And don't forget to go to Java-related meetups in your area. It will not only help you grow as a programmer but will also give you face time with future employers. 
Ad-hoc, but just comment it out and see if it breaks. Then run a test suite to see if there are runtime dependencies on the commented out deps. And start.spring.io is your friend.
Yes, i agree that I am where I am because I choose to be. I wake up early in the morning and study and after a 12 hour shift I code till about midnight. I am studying design patterns right now. Derek Banas has a great tutorial series on youtube which I have watched two times (95 videos in total). Thanks, again for your reply and advice!
Hardloop
I have heard mixed reviews about certifications but my plan is to get certified anyways. It can't hurt. I am probably pretty close to being able to pass a cert test. Thank you, for your reply and advice. 
I had no idea such meet-ups exist! hmm.. that would be amazing. Thanks you, for your reply and advice!
Consider mocking the services which provide you that information.
I use AWS, and I am currently running apps with the same stack as yours. I deploy to EBS using Docker, and use an RDS instance for the DB.
Whoops! 
I'll just say it - Code Complete is vastly overrated. Unless you're just starting out, you should already know almost everything in that book.
You listed Kudu as an Apache project, but, as far as I'm aware, it's a project currently in Cloudera's possession that is intended to be contributed to the Apache incubator.
&gt; a CS degree would be required only for software architecture positions As a person without a degree, in a software architecture position, let me tell you that if you are enthusiastic, good at what you do, and love pushing whatever position you are in - you can totally land a great job with a company that wants to hire you. You just wont jump right in there first off. I started doing for-hire tech support for local libraries, then worked 8 years at a transportation company (started as 'network tech', ended as developer after transitioning my position there through self-learning), did 4 years as an at-home consultant, and now am a principal engineer working remote and love it. When I am hiring folks as developers for our team, the schooling is interesting, but the conversation and depth of knowledge, personal experience (not 'I was one of 12 on a team that did X', but more of 'I did X'), and code examples are big points I look for. Whatever you do, love what you do, and it will show - you will get hired!
Similar, yes. Would love your feedback though.
Your project page becomes critically important if you don't have a CS degree. Start putting stuff up on GitHub yesterday! I think that a lot of shops are willing to give anyone who claims they can code a technical interview, especially if they have any sort of automated screen.
They didnt move. They created an HTML5 version as an experiment. It runs terribly as HTML5 just doesn't cut it yet. In fact, they just shut down the HTML5 version in the last few weeks. People still have to use the applet for the old school version and new. They are releasing a client made in C++ though and that'll have to take over since things like chrome aren't supporting applets anymore.
No, but it's a really easy blog post to write in order to drive traffic to your site.
Thanks for your reply! I can do some basic JavaScript but I figured Java fluency would yield me more opportunities. Maybe I am wrong. I can actually build halfway decent websites but finding a job in web development has been challenging. Thanks, again! 
I think Java is just a good language to learn because you can't really learn Java without learning object oriented programming.
If you live in the United States, then don't learn java. Most of the good jobs in java are with companies that require a degree or at least years of experience. Unless you want to get into Android development. Then learning java without a degree or experience can be lucrative. Otherwise, learn ruby with ruby on rails or JavaScript with node js. There are a lot of good jobs in those languages that won't require a degree or experience. And don't neglect html and front end JavaScript. They'll help a lot with the types of companies that won't require a degree or experience. If you aren't in the United States then I don't know what your job market is like. 
I know HTML and CSS like the back of my hand. I can code JavaScript but everything I code barely works and I'll admit a bit ghetto. It wouldn't take much effort for me to polish my JavaScript skills. I don't know much about Ruby on Rails so I'll take a peak tonight. Thanks for the reply and advice. I think I will put Java on hold and concentrate on JavaScript for awhile. 
Learn complexities, algorithms and data structures. Learn Gradle or Maven or both. Learn Git and Hg. PowerShell or bash shell. Also, there is a topic on Quora about what self-taught programmers lack. Google should be able to find it. Quora's own search function should be able to find it too. If I might add, Java has great many fine programmers already. Since you are on the JVM, consider learning one of the other JVM languages. Clojure and Clojurescript, or Scala. This pairing could brighten your prospects. If you are confident with your programming abilities already, consider showing it off on some place like HackerRank. Best wishes. 
Device freedom would be the reason, tablets phones laptops without having to have a different (or wonky for mobile) ide 
&gt;I think I will put Java on hold and concentrate on JavaScript for awhile. I think that's a really good idea. Learn JavaScript really well. There are jobs there on the front and back end, and you're better off learning it well enough to put together a web app with it before moving on to something else. I wouldn't bother with ruby on rails unless you had a job offer for it or really wanted to learn it. JavaScript with node js looks like it will have a much brighter future.
I thought it would be to my advantage learning Java since there are so many good programmers. I know the flip-side is a saturated job market but I need forums and free open-sourced libraries. I had a technology guy I recently sold a car to suggest studying data science. I guess data scientist make big money. I'm not trying to make big money I just want to feed my family. I watched a tutorial on Scala which seemed familiar and logical. I know nothing about Gradle. I'm feeling a bit overwhelmed. Thanks for the reply I really appreciate your time!
I'm glad I learned Java because it really taught me OOP. I guess I'll just polish my JavaScript skills and plunge into node. You are awesome. 
Ok, is it a free deployment?
Well here's what I'm doing right now. I'm revisiting it and I'm going to see what my impressions are. First thing I notice is the site is much smoother than before. It loads quick and it has a nice looking interface. I like the containers concept. This makes sense, it's intuitive. But this little typo doesn't give a good impression: http://i.imgur.com/2EfgMIS.png So my container is created. I chose an empty Ubuntu one because none of the listed ones match what my plan is. I'm doing a lot of Java lately so I want to make a Java hello world application. Still nothing on my screen about Java so in the empty file it creates for me I'll start coding some Java. I assume the play symbol is for compiling and running so I click it. Says my container is currently accessible. Maybe I didn't save my file yet. So I save. I'm faced with this error message: http://i.imgur.com/a7rGnu5.png Apparently I had to click on my container in that list to save it there. Nothing was selected by default. Maybe if the error message were less cryptic I could have figured that out sooner. So far not very intuitive. Still can't figure out how to get this thing to compile and run. I click that "Run Project" button but it still says the container is inaccessible. I'm guessing there's more I need to do here, maybe set up a build system or something. But to be honest, as a beginner programmer I have no idea how to do that. I'm used to IDEA or Eclipse setting that up for me. At this point I feel like going back to my desktop IDE. At least with this terminal I can compile manually I guess. http://i.imgur.com/tvJw1GY.png Oh. Ok.
Tried it. Couldn't make a Java project but it had a C++ choice. I was up and running in less than a minute. Very simple to use. I'd use this, if I happened to be coding in what's offered!
For your Play app, you can use Boxfuse's Play support + AWS to do so as described here https://boxfuse.com/blog/playframework-aws and here https://www.playframework.com/documentation/2.4.x/Deploying-Boxfuse This solution is 100 % free for a single t2.micro (1 GB RAM, burstable CPU) with an elastic IP and a small RDS PostgreSQL DB for one year (the AWS free tier expires after that). Setting things up this way is incredibly easy and gives plenty you of room to grow. *Disclaimer: I'm Boxfuse's founder and CEO* 
I think it probably depends on where you live. As a general rule of thumb, Java tends to be used at large established companies.
OOP is largely considered a giant mistake by many prominent developers. 
Also be aware that modern JS is not making websites as much as web applications. The JS projects of today are generally much more complex than even five years ago.
I am not good enough programmer to comprehend how or why that is 
Thanks, I will give it a try definitely and will prepare a screencast if my deployment is successful. Any specific community forum for boxfuse would really help for newbie like me.
I think Eclipse is one of the main problems people have with Java development. IntelliJ &amp; NetBeans are far superior especially on the Mac where SWT is still an alien. Eclipse tires to be everything for everyone and makes everything so general that its just really hard to get started with it. Once you are used to it then it has its strengths but teaching it as the first IDE gives a culture shock to most developers.
&gt; That is exactly my question. Why does a user get shadowbanned after posting something which ended with 65 upvotes? I don't know. Shadow-banning is something only the admins can do. I only do know that posts made by shadow-banned people are not tolerated by most subreddits (incl. the Java ones), either. &gt; Seems like everything from an unknown source and a new user is automatically spam. Probably I have to just accept that. My hope was to get in touch with some other developers and discuss this new solution and let them vote if it's good or not. We had a terrible Korean spam post influx with new accounts every few minutes that started about a week ago, so a "no new accounts" post mechanism was implemented. This is still going on, albeit with a lot lower frequency. Evading a ban by making a new account is not allowed. I have no idea if your case or the case of what you are trying to do is special, good, should be treated differently, etc. - just see this as a customs booth situation where the tollkeepers hand visa to some people and not to others, and the rules for that decision have been laid out by others and with good reason. Win some, lose some, but overall achieve a reasonably optimal situation. I assume that *at least* one of the other accounts that are shadow-banned who submitted this site were yours. This was also what prompted me to make that initial comment - new accounts popping up posting the same site and all, plus the impression that emerges from the overview that I linked. Don't know what else to say.
The upside to all this is if you get those programming skills down, you can use those car salesman skills to sell yourself. Should put you ahead of 95% of developers in that department ;) Good luck
Write some code that can purge a DB and populte it with data. Use as much of your persistence layer as possible, to reduce refactoring overhead. Consider using Groovy for the populator to be quicker (thanks to all the dirty API-bypassing hacking Groovy allows). Then either run against an in-memory database (less ops overhead, but not testing against the real DB), or dockerize your tests. Googling for integration tests with docker should give you something. Maybe also google for ansible / java combinations.
As a Java developer I would urge you to reconsider that. Java certs only show that you memorized a bunch of stuff on the language. It does not show a prospective employer ANYTHING about if a developer can actually turn requirements into working code, not to mention follows some basic best practices like unit testing / SOLID / DRY / etc.
Although I admire the optimism for a lot of people here I feel they are not being very realistic. Like the mention of using sales experience to 'sell' yourself to employers: it's fine and dandy if you can bullshit your way into a job but if you can't actually deliver you'd be 'let go' within a month. Learning a language is just one aspect. What's most important is doing actually a ton of programming. So make sure you have at least 3 moderately big projects with good code quality that follow best practices that you can show to employers. Feel free to hop over onto /r/javahelp to have us review your code and suggest improvements. Being a developer isn't really about languages: it's about turning a customer's problem into a working solution. That's the hard part. One last tip: for someone without any CS education but who is going into an area where OO skills are a must this book is a must read: http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8 Heck. Showing an employer that you read and understand it and apply it in your projects would give you a huge head up. 
I know even senior level developers that don't get equals/hashcode and other basic java concepts, which a certification process would suffice. Unless the developer is active in opensource (some great github contributions or something), a certification it's better than nothing, but that's just my opinion.
why not use http://www.onjava.com/pub/a/onjava/2004/01/21/dbunit.html
Oh my: default String getRating() { System.out.println("I am the default method for getRating!"); return ""; } I don't know if I have to laugh or cry. Both I guess?
&gt; It's just a matter of time until a manager or customer reads something like this, gets scared, then tells me to remove "Java" from their servers. Oh sure! Should we rewrite all the business software too? Ah yes, the infamous straw man manager who's hilariously clueless.
I don't see any benefit to using this over Jersey or even Spring
You're welcome. However; take care to not switch between languages too much. It takes a lot of time away from learning. I can understand that you might want to go for a front-end dev position because these might seem a bit easier but in the end I don't think it matters too much. I also don't know if there are as many NodeJS back end jobs as there are Java back and jobs; it's something you'll have to check for your area. Anyway; if there's any learning issues you should hop on over to /r/learnprogramming. There's many people there willing to help.
Is It so they can divert traffic to their shitty blog?
The value of a certification greatly depends on the certification. MS certs have typically been a joke in the industry for the past 20 years. Cisco ones are worth their weight in gold. The Java certs aren't all that bad and won't hurt your resume any. The exams also give you a solid target to study for.
Yeah, that's the push to get people away from the applet.
I started in Qa, and learned vb. Automation and testing were my first projects. I learned C/C++ and moved into development. Learned Java, and have been an independent consultant for 20 years. Yes you can do it, if you have the love and the energy for it. Although I took only one community college programming class, I have a degree in Mechanical Eng. Just no programming background. I worked with people whose prior careers were piano teacher and mathematician. Continuously improve your knowledge and follow best practices and you will rise. This career has more opportunity than most.
Research jobs in your area. Java is by far the most popular language and has remained so for a long time. Your Js can be used for node.Js on the server side. Do, however look at jobs postings in your area. Learning an unfamiliar language ruby, may slow you down. It may also be on the wane. Someone else suggested meetups. Great idea. Networking helps on many levels, and should be fun. Java user groups are also worth looking into. Someone in your area is understaffed. If you show enthusiasm they may roll the dice. Let me tell you, finding GOOD developers is the hardest part of most IT departments day. Oh yeah, someone mentioned Java certification.... That's a great idea and will focus your learning without being very expensive or overly time consuming. I personally wouldn't bother increasing language scope without proving a need.
Yeah, I'm a decent salesman but selling is getting boring. I've thought about possibly looking for a software sales position but nothing really panned out. Thanks for your comment!
I have a decent core understanding of Java but for sure need to learn more algorithms. I studied a lot on design patterns and data structures and I hope it all clicks soon. Thanks for your insight!
Nice. Sadly we still have some projects stuck with Lucene 2.1.
Standalone jars are more fashionable. Please don't rain on the parade. Just comply. Microservice and springboot everything. Ponytails and goatees are also frowned upon. Wear colorful pants.
How does Lucene compared to Elastic Search? 
I have used only lucene and we search millions of records and the search is really fast. I would also be interested in the comparison.
2 years ago Jersey2 wasn't robust enough. Don't know how it is today because we switched away. Also they use jetty directly without servlets.
Can you run a Spring (Boot) service without a http server? In apollo the http server is a optional module and I'm pretty sure they have quite a few services which don't need a http server module.
What was missing from Jersey that you needed? 
I keep telling myself I'll get back to it someday, but other project keep distracting me. Even if I do pick it up again, I'll probably just post solutions on GitHub instead of writing out the long explanations on my blog. It's a *lot* of work. :(
Do you mean just as a Java process? I'm a bit confused as to how you can have a http resource without a http server :S
I think that you won't be able to learn all that by 15th of January. Understanding OO programming by itself is hard and would take you substantial amount of time. See OO books here: http://farenda.com/reading/top-software-design-books/ - "UML and Design Patterns" and "Agile Software Delevolpment" are great for understanding OO programming (SOLID and GRASP), but are not that easy to understand and apply IMHO.
License seems to be trouble. 
From the same time period, see also: http://antoniogoncalves.org/2013/07/18/java-ee-8-whislist
[Nice styling on the title](https://i.imgur.com/OEKV34z.png).
A significant number of C projects use 3 spaces?!? That's horrible.
I don't have facebook, g+ or github account.
Essential link to discover Jigsaw. Thanks for sharing it !
Might be GNU style?
&gt; You can consider this post as ads, and *partially* you are right. I laughed when I reached that bit.
Because 11 spaces is less pretty than 1,10,100 spaces. 
I thought you meant 0b110100 there for a second and was like WTF is up with your digit grouping. 
This is pretty normal. 2-spaces indent is quite standard in the Ruby world (as you can see), and tabs are the official way to indent code in Go. A lot of people use `go fmt` to automatically format their code and it uses tabs.
http://pastebin.com/RrEuipxw
You can have a spring boot application be a console application instead of web app
three? what are you? [a Russian??](https://en.wikipedia.org/wiki/Ternary_computer)
I don't understand why anything except tabs are popular: * Tabs are specifically designed for indentation, spaces are not * It's impossible to half-indent something * In the IDE settings, it's easy to configure the number of spaces used for every tab. So if you have a personal preference, you can change it there without affecting other people * It's at least half as many keystrokes to use tabs instead of spaces I can't think of a single positive reason to use spaces.
The love of 1 2 4 8 16 32 ... probably.
Shouldn't python be more consistent cause you could use autopep8 to automatically format to the pep8 style (4spaces)? Or do people use in house styles with tabs? I'm really confused by that
We purge what we get reported. The reports need to come from **you all**, the **community**. If we purge on our own, we would apply censorship which is prohibited by the reddit rules. So, if you see a spam article, or any other content you deem unfit, feel free to report it. Instead of complaining about the mods not practicing censorship and leaving everybody with the right to free speech, you could have actively improved the community by just reporting the post as spam.
It's easy to say such a thing as long as you don't have power. I remember that every time when the guy I ride to work with say something like "They should kill all those bastards." when the radio news are on. The moment you *do* have power and are only a decision away from affecting someone else's (OP.) situation or that of a group (/r\/java users), you have to ponder a lot harder whether what you're doing / what's going on is right. As mods, it's often best not to act unless the community voices that something should be done. One person's spam is another person's "TIL, thanks for that!" What specifically makes you think that the post is of insufficient quality? The content-to-grease ratio seems ok, the English seems proper, I don't even see ads or "Meet us at xyz convention!", and other articles of the same site also don't trigger me. The poster is not shadow-banned and ... I see, the only other submission is of the same site. But that was 2 months ago, imho a seriously sufficient timeout. If you were moderator, would you remove it? And why?
The content is free and there are no ads. It's pure knowledge. Why do you think it is a spam article? It's true that in this very article there was no code from pros, because they shay away from this, but if you look at the other articles is the series, they have good examples from pros, which is very valuable.
&gt; It's at least half as many keystrokes to use tabs instead of spaces Pretty much every editor except for notepad will indent with whatever number of spaces/tabs you want if you press the tab key. Besides that auto indent usually does indenting for us. I use to really have a preference one way or the other, but now I really don't care much. Most of the arguments one way or the other are pretty weak. I think anyone making a conscious decision on this really has to decide whether they rather enforce how the code looks with spaces or not. By using tabs it does give any developer working on the code the freedom to setup their editor to display a tab as many spaces as they like. Honestly, the only reason I'm using spaces right now is because I don't want my code to look like shit in github. Not that anyone ever looks at that shit but me. But I'll be damned if I take the time to write nice small functions with little to no nesting and then have github's code viewer display the indent code with 8 space width for each tab.
Person who posted this article states in other comments that other JUnit articles on the blog are full of pro stuff. I checked it. There are three articles in total, which gives us 2 articles to find some pro stuff. And now I understood what author means by "pro stuff". Those are test written by guys who work on Spring or Facebook. The problem is - that those snippets shows really basic stuff. `assertTrue` or `assertFalse` on some simple data structures - nothing more. I appreciate the idea of showing pro unit tests from Open Source Software. But showing basic stuff done by top tier developers is still basic stuff regardless of amount of dollars on paycheck of this particular developers. 
**NO**. Censorship by another authority (such as mods) is wrong. Reddit is a community driven website where **we**, the community get to decide. The mods are not there to **censor** submissions **unless** they receive some reports. If the mods would apply censorship by themselves, many people would be complaining about unnecessary censorship. Yet, all of us, as the community have been given a tool to inform the mods that we want some mod action: **report**. On the other hand, we have **down votes**. We can downvote any posts that we deem not good, or not worthy, so we as a community can express our agreement or disagreement. Ask yourself: **would you like censorship or the right to free speech?**
Do you mean very few?
I was using spring boot 2 years ago 
These are [annotations](https://en.wikipedia.org/wiki/Java_annotation), not [type annotations](https://en.wikipedia.org/wiki/Type_signature). Consider: @Deprecated public int foo() { ... } Here, `@Deprecated` is an annotation and `int` is a type annotation.
I think these have been since 1.5... Also what does the class info provide? What are the benefits over the header just like that? The default ide template already has most of that info. 
&gt;So what big puzzle this JigSaw module is supposed to solve that JAR already doesn't? One thing it lets you do for example is letting you choose which packages you expose to the users of your API jar. There's plenty literature to find on the interwebz on what problems jigsaw is supposed to tackle, i.e. http://branchandbound.net/blog/java/2015/09/java-module-system-first-look/
There is another tool at our disposal, and we call it the reddiquette. Which (besides other things) implies that mods should 'censor' (as you put it) link submissions unless the account has a history of commenting on reddit. Without this rule, subreddits devolve into spam dens full of 'cheap tutorial here' links *very* quickly. Otherwise only bigger subs where the signal cardinality is already large can maintain a sufficient signal-to-noise ratio to keep being useful.
The main advantage of React is that it can be integrated with any kind of JavaScript framework, and of cause, React has component approach in its foundation. In my experience Java application needs only light-weight UI with clear code for connection to the back end (REST, etc). As for Angular, it is a big framework which is overcomplicated for Java developers. On the contrary, React has a very low threshold for developers.
Thank you for such detailed answer. What kind of components would be useful for Java application? Of cause, we will create many different specific components, but from the beginning we want to make more common purpose components.
Some that immediately come to mind are the typical components * Buttons * Drop down lists * Combo button/dropdown. Easy to style and data-bind * Textboxes/textareas * Allow ease of including rich text formatting * cells/tables * Filter &amp; Sortable, with any combination of the two * Allow state-dependent widgets within cells The latter I wouldn't expect you to tackle as part of the initial release, but it is an important part of any UI component library as tabular layouts are such an efficient way to display a great deal of information to the user. GWT didn't bother implementing filterable with sortable functionality, and there were several edge cases that had to be fixed in the process. Furthermore, the GWT cells use a flyweight pattern to write out the HTML and not worry about binding it to any sort of state. There are ways to get around this, but they are time consuming, and IMHO, completely unnecessary. Good luck!
When you make an editor that can get this right for anything except all spaces, let me know.
You shouldn't be centering or indenting with tabs either. There's button a for it.
Yeah I'm a computational chemist and I've seen some code that isn't 4 spaces but it's only because they had no formal coding training. Some weird things can happen in the scientific community because people assume they're writing a small program that no one will ever read..