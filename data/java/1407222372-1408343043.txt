[It actually depends how hard you're willing to try...](http://www.docjar.com/docs/api/sun/misc/Unsafe.html)
I just resently started a carreer as a Java Developer myself (m/22), so I can remember the things I had a hard time with like it was yesterday. What I had the most trouble with, carreer wise, is the configuration of a lot of frameworks. Java in itself is relatively easy (especially since you already are an experienced developer), it's the frameworks that require the most time to learn. A lot of them require a certain amount of configuration, mostly in XML. Learning how to set them up was mostly trial and error in my case. Like someone else said in the comments, pet projects are the best way to learn this. So, to answer your question about what I hate about Java: this configuring is it. Stuff like that is easier in, say, C#. However, if you join an already existing project, the configuration is already done most of the time (although not always very good). Now for the resources. I really did a bad job with Java in my first year of college, but this guy really helped me with his tutorials (I got 100% percent when I took the exam again): [The New Boston] (https://www.youtube.com/playlist?list=PLFE2CE09D83EE3E28). I linked you the beginner tutorials, but he also has intermediate. [Effective Java] (http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683) is also a good resource, like mentioned in the comments. Another one I like is [The Well-Grounded Java Developer] (http://www.manning.com/evans/). It is a really balanced book, talking about important things like Threading, the JVM, Dependency Injection, Continuous integration etc. I would suggest you first do some little projects to get a feeling with Java as a language, and then stepping over to frameworks like Spring and hibernate. Check the differences between Spring and Java EE, read about dependency injection (Martin Fowler has a great [article](http://martinfowler.com/articles/injection.html) about this), etc. This turned out longer than I expected, so I'll leave it at this. If you still have questions, feel free to PM me or leave a comment.
Ok, so the transport of jar files seems to be safe now. But what about the repository servers? Why isn't public key signing used to secure jars?
makeHelpfulComment threw an UnsupportedOperationException in my brain, sorry
am i the only one who can't stand to see another one java 8 stream/lambda/.. tutorial?
&gt;The big thing for me is no messing with a build tool like SBT or Maven and fast to make changes and reload. That's understandable, although it's not as much of a problem if you're thoroughly proficient with those tools (and have some existing projects to copy-and-paste build configuration from). &gt;In some cases its nice to just be able to write a file and run, no worries about compilation. Scala does actually have an interpreter (the `scala` command-line tool), and a slightly-different "script" syntax to go with it. Java doesn't, but there's Groovy and BeanShell. The main downside to using the Scala interpreter is that it doesn't have any easy way to fetch libraries for you. If the Scala and Java standard libraries are enough, great, but if you need anything else, you're going to either fiddle with classpaths or give up and use something like SBT or Maven.
It's a ~~Burrito~~ Monad!
If you think Spring is hard, you're using it wrong.
I don't particularly think Spring is *hard*, I just think it introduces a lot of conceptual overhead for a pet project, especially for a new Java developer. You can't be effective at using Spring without either getting a decent course on it, or spending dozens of hours reading documentation and tutorials. You can't refute that.
/r/learnjava /r/javahelp /r/learnprogramming - especially their [FAQ](http://www.reddit.com/r/learnprogramming/wiki/faq) 
&gt; You mean like having to write tests for every little thing, because there is basically no automatic verification of any kind? This is obvious, but for serious production code, it's worthwhile to write unit tests even if you're writing in a statically typed language. The static typing can be helpful to improve correctness, but it's far from a panacea. In any event, I was referring to more than just unit tests. I've found it useful to pay stricter attention to things like naming conventions, small function size, immutability, and higher-order functions when using dynamically typed languages. &gt; Ugh. No thanks. Even if the program does end up working right, that is a massive waste of time. It's only a waste of time if it's not offset by corresponding time savings elsewhere. For some systems, the benefits of dynamic languages outweigh the costs. &gt; Also, don't program in assembly if you don't really, really have to. Even if your program is correct, it'll never be as fast as the output of a modern compiler. Thanks for the tip, but that was ~20 years ago, and the code was on an embedded device with low enough power consumption to safely operate in an explosive atmosphere. 
Agreed... I'd love to see more of that in production languages. I do find it a bit concerning, however, that some of the type systems are getting complex enough that people are asking for compile-time debugging facilities. 
&gt;for serious production code, it's worthwhile to write unit tests even if you're writing in a statically typed language. Of course. *For non-trivial code* that isn't already obviously correct. &gt;I've found it useful to pay stricter attention to things like naming conventions Naming conventions? You mean like including the expected type of a variable or parameter inside its name, as in [Hungarian notation](http://en.wikipedia.org/wiki/Hungarian_notation)? &gt;small function size, immutability, and higher-order functions What does any of that have to do with the type system? &gt;It's only a waste of time if it's not offset by corresponding time savings elsewhere. Indeed. Which, in my experience, it isn't. Programming in dynamic languages has always been an exercise in frustration and unpredictability. &gt;For some systems, the benefits of dynamic languages outweigh the costs. I find it difficult to believe that such systems exist. I certainly have yet to encounter one. &gt;that was ~20 years ago, and the code was on an embedded device with low enough power consumption to safely operate in an explosive atmosphere. Oh. Well then, I guess you really, really had to.
Thank you very much, I'll check those out!
&gt; Naming conventions? You mean like including the expected type of a variable or parameter inside its name, as in Hungarian notation? Not quite. Personally speaking, I find Hungarian notation rather difficult to use. I was thinking more along the lines of Uncle Bob's naming convention, particularly with respect to pluralization of nous, and the arrangement of nouns and verbs within names. http://c2.com/cgi/wiki?UncleBobsNamingConventions Also, The type of work that Kent Pitman did on T and Olin Shivers did on his SRFI's also comes to mind. &gt; they chose a standard set of lexemes and a regular way of assembling them into the names of the standard procedures, so that you could easily remember or reconstruct names when you were coding. (I have followed this example in the development of the SRFIs I've done for the Scheme community. It is not an easy task.) -- http://www.paulgraham.com/thist.html &gt; What does any of that have to do with the type system? Nothing, other than "I've found it useful to pay stricter attention to [these] things ...when using dynamically typed languages." &gt; Programming in dynamic languages has always been an exercise in frustration and unpredictability....I find it difficult to believe that such systems exist. I certainly have yet to encounter one. I've had a different set of experiences, many of which have been more positive regarding dynamic languages. I don't claim that they're perfect, only that they're a useful tool for some applications.
Very true. Thanks!
I don't think most programmers actually started out as kids nor does it necessarily make them better as adults. There are some real genius programmers out there who post stuff on the internet that makes a lot of us feel dumb. The average professional programmer is actually nowhere near that level. You can have a very good career just being competent and having a good personality. 
&gt;In most AMAs I read from programmers, they've been hackers from early age or built their first program when they were 6 years old. These are a rarity. The majority of programmers out there go in 9-5 (presumably) and go home. Some people LOVE it, and take it home with them. Some people leave it at the door. However they are all good programmers. You don't need the incredible enthusiasm or talent. What you need is the capability to learn, adapt, and problem solve. 
Could it be that your byte buffer for your incoming UDP packet containing the object isn't large enough and the data is getting truncated? If you're using byte[1024] pretty much exclusively everywhere, you're only getting ~1 KB of space to work with. Also, from a design standpoint, you may want to avoid using the default Java serialization and write your own serialization protocol for data exchange. It's more maintainable and a lot easier to debug.
I mentioned this in the original post, but it was lengthy so I don't blame you for missing it. I changed it to 10240 temporarily just to make sure that it wasn't a size issue, same EOFException. Unless changing it to 10240 didn't work for some other reason. I really don't know much about serialization. I just added it because that's what I saw in examples of how to get objects to flow over a network. I guess I should read up on it.
AN off-topic question . I am trying to learn javafx which is basically a UI library. What's a good example of a business application (and I mean **Real World business app** ) that I can try to build while I am learning javafx ? 
Read [this](http://www.reddit.com/r/learnprogramming/comments/2cl3x1/im_looking_for_advice_suggestions_or_your_story/) thread - it's more or less about the same situation as yours. There's also /r/cscareerquestions.
I would rather work with someone who cares about what we have to do and is willing to think, discuss, experiment to make something great in the end.
Thanks, we're looking to offer a non-AP computer/robotics course in the future, and hopefully I can convince them of using them there. 
Seems pretty reasonable. As long as I do the backend/hardware stuff, and let the students focus on coding, they'll still get to play with objects, methods, etc. Thanks!
That's correct. It's pretty basic coding otherwise, and being able to create/decipher algorithms. This past year was my first year teaching it after taking it extensively in college, and eventually it just gets dry and you can only make up so many things to code. A working poker game was probably our highest achievement, but I don't even get them working with graphics since it's not part of the test. 
Well, you're starting college courses so you are getting into it. The teachers will get you going at least a bit. What you need to do is now prepare yourself mentally for reality: You're going to suck. And that's okay. The goal is to get better. You're going to be given homework and tasks... and you're going to spend weeks on these sometimes. Only to have the student right next to you do the same thing in a night, and have better code to show for it in every way imaginable. Don't distress about it because it's normal, there is a difference of magnitudes between an experienced programmer and a non-experienced one... but don't worry, I'd say roughly only 10-20% programmed before college to large degree. And you can learn everything they have, in time. You will discover that half the class will be gone in your next semester, don't become one of them. Do visit the links proposed by others and get your feet wet a little bit. Just don't worry about how much there is to learn, you don't need to learn it all, this is just to help ease your starting classes a bit. Enjoy it. Do some of your own stuff if you can think of something you want and if you have the time, it will help you grow.
Almost certainly losing parts of your UDP packets in flight. Theoretical max is 64k, but practical max is much lower, as intervening stuff will fragment your packets. Is there a reason you're using UDP instead of TCP? EDIT: you're flushing streams at the ends of messages everywhere too, I trust.
I was under the impression that when you send a UDP datagram, the entire message has to show up in the low-level at your network card and be reassembled before it will be delivered to your application. In other words, from the Java perspective, you either get the datagram or you don't; not something partial. Regardless though, I would assume the guy is testing between two machines probably on the same LAN where loss is pretty unlikely... unless the machines are on a crappy WiFi connection or something. He's probably also using UDP over TCP because games tend to use it for faster network performance, which may be irrelevant if he's not planning on having a lot of players nor planning on sending a lot of data around.
Fair enough, in which case I'd suggest that he pack his messages *tight* with a custom serializer, and put a bit of integrity stuff at the head and tail... Say, a count of the number of messages in the packet, and an end-of-message flag at the end of the packet. Once you can actually *see* your serialized form and understand it, you'll be in a better position to deal with hammering down your latency.
&gt;Are you running this in a loop perhaps? No. Well, kinda, but no. I have a thread that sits and waits for messages. Looks like while(true) { socket.receive(incomingPacket); client.processPacket() } and in the client backend code, processPacket runs the NetworkMessage netmsg = (NetworkMessage) is.readObject(); &gt; like just catching the EOF exception and acting like no object was received I do actually catch the exception... I guess I could just have the program continue as though nothing happened, but I'm 99% sure the client would not get any "Entity" messages if that was the case. &gt; if you're serious about getting performance out of this program ... Automatic object serialization is generally regarded as something that was a mistake to be included in Java. I'm caught a little between "doing everything the way it should be done" and "doing what I need to to get this thing off the ground". A little backstory, I've been "working" on this for close to a year. It was just a little project to help me learn Java. I made a version of this game using TCP and Swing, decided to strip out the multiplayer to focus on the actual game, then decided I really didn't care about it unless it was multiplayer, then decided to use LibGDX, and now finally, decided to use UDP. If I can get away with not re-writing another system so that I can just get to the actual fun code, I'm kinda willing to do that. Edit: I think the next logical step would be to do some testing on the server side. As soon as the packet is good and ready to send, I should instead treat it as a packet I just received and pull it apart. See if it throws an exception there. If it doesn't, then it's something that occurs when it is transferred over the network. If it does, then it's something to do with.. some kind of corruption I guess. Not sure.
&gt; Regardless though, I would assume the guy is testing between two machines probably on the same LAN where loss is pretty unlikely... unless the machines are on a crappy WiFi connection or something. Actually right now I'm running the client and server on the *same* machine. Still see substantial packet loss if I rapid fire 50+ packets from the server to the client. But implementing reliability is, I believe, another issue than what I'm seeing here unless it is possible to lose part of a packet.
Pretty much just what /u/Ownaginatious said. &gt; you're flushing streams at the ends of messages everywhere too, I trust. Uhm .. come to think of it, I don't think I am....
Is that necessary for diagnosing this issue? At the moment, the server generates a single Entity. A tree. When a player connects, it sends me two entities: The tree and myself. The exception is thrown when the tree is received. I'm not really at the level of optimizing network packets, I think.
I think it was important though. It's the first time I was exposed to working with a codebase that I didn't write myself. It was a good concept, but not effectively taught. 
Please don't [spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F).
One more point: In order to reduce the amount of space being used in a packet, is there some way I can detach the actual data from the methods? For example, right now in the "Entity" class, I have methods to get/set every variable. Is there any way I could split this up so that I have "Entity" which simply has the variables initialized and a constructor and then another class which does NOT get sent over the network that basically handles all the manipulation of the data? I don't need to send the "get/set" methods over the network... both the client and server can just have a copy of that code.
1\. Html and Css 2\. Spring MVC or J2EE (the latest version which is basically a copy of spring mvc) 3\. Javascript and basic JQuery 4\. Hibernate / SQL (I'd put SQL up further but you said you already know some of it) There's a lot more web development jobs than their are Swing UI jobs.
Easy to remember with a juvenile joke: "Whenever you output a stream, don't forget to flush!"
Well, you've stepped down below flow control, so you're taking that on. Easier would he to just step up to TCP streams, and be sure that all your bytes get there in the right order.
Thanks for the suggestions ill go check your recommendations since I haven't ever programmed webservices
Thanks for the suggestions, is Spring MVC the best/more requested framework? I'll go take a look since it seems most recommendations online say so. Yeah I can do some stuff in SQL it seems like hibernate just makes some simple stuff easier
&gt; Java is almost useless as a game development language Not if you're developing for mobile...
It's either Spring MVC, or the latest J2EE. I haven't worked with the latest J2EE (we use Spring MVC where I am) so I can't compare, other than I know that previous versions were pretty terrible, but they finally got smart and copied Spring MVC and now it's supposed to be pretty good.
Found the solution. When initializing the table, add a TableRowSorter: // Create JTable model studentTableModel = new DefaultTableModel(); // Create columns Object[] tableColumns = new Object[]{"Last Name", "First Name", "Student ID"}; studentTableModel.setColumnIdentifiers(tableColumns); // Set sorters TableRowSorter sorter = new TableRowSorter&lt;DefaultTableModel&gt;(studentTableModel); while (resultSet.next()) { // Run forloop, first create String[] object then model.addRow String[] row = new String[]{resultSet.getString(2), resultSet.getString(3), resultSet.getString(1)}; studentTableModel.addRow(row); } // Set data/model to JTable studentsTable.setModel(studentTableModel); studentsTable.setRowSorter(sorter); Then, create the function that handles the auto-update. This regex function will return any matching rows with text in ANY of the columns.: // Search Filter for input text private void searchFilterAllRows() { RowFilter&lt;DefaultTableModel, Object&gt; rf = null; List&lt;RowFilter&lt;Object,Object&gt;&gt; rfs = new ArrayList&lt;RowFilter&lt;Object,Object&gt;&gt;(); // Check for any matching pattern in columns try { String text = searchTextField.getText(); String[] textArray = text.split(" "); for (int i = 0; i &lt; textArray.length; i++) { rfs.add(RowFilter.regexFilter("(?i)" + textArray[i], 0, 1, 2, 4)); } rf = RowFilter.andFilter(rfs); } catch (java.util.regex.PatternSyntaxException e) { return; } sorter.setRowFilter(rf); } Then, set a Document Listener to listen for key changes in your text field (this should be initialized in your class constructor). When a key is changed, it calls the function we just created (searchFilterAllRows): // Sets initial fields private void setFields() { // Create new document listener DocumentListener textChangedListener = new DocumentListener() { public void changedUpdate(DocumentEvent e) { searchFilterAllRows(); } public void removeUpdate(DocumentEvent e) { searchFilterAllRows(); } public void insertUpdate(DocumentEvent e) { searchFilterAllRows(); } }; // Set search field listener searchTextField.getDocument().addDocumentListener(textChangedListener); } Hopefully someone finds this useful.
As someone currently struggling to figure out the differences between Java EE, Spring, JPA, Hibernate, CDI, JSF, etc... this was a good read.
I just want to be able to do proper java-related web apps. 
How does this compare to RxJava? 
Try BlueJ
I have no doubt that could be true, but it won't stop me from trying to get a good server side going in Java. The client can be mostly separate for all I really care. But I am curious if there are actual numbers backing up the "taking over the world" beyond publicity from web oriented companies.
Does this help? http://stackoverflow.com/questions/10560295/compiling-and-running-java-code-in-sublime-text-2
This was me 2 years ago. I am 24. I got sick of swinging a hammer all day and decided to go to school for programming. I too, am a gamer. I spent forever deciding on what I wanted to do with my life, and I was unsure as too what I wanted to take in school. I liked computers, I liked problem solving("It can't be too different from like,.. playing Sudoku right..?"). Math to me was always a meh, and knew that getting into this type of work I would have get used to the idea of doing it. I literally knew nothing though, about programming. I had not a clue how computers really worked, but I could do the basic Google search and work my way through trouble-shooting a problem. Doing this you're going to forever going to need to learn, as technology moves forwards, however it's not that hard to follow if you have an interest. Once you get rolling and you start learning, you start to find that things just eventually "click". Then magically you just somehow understand how and why that application/email/website/reddit post/late night amazon purchase is working the way it does. From what I know, and seeing my progress, and the progress of others around me, talent can 100% help you move forwards in this career, the attitude is also a much needed factor. With a will and a want, you will be able to do whatever if is you're striving for. The best way to learn anything programming related is to do it yourself, and fail. Debug your work, and figure out why it isn't working the way you want, and how can you get it to work. Once you start figuring things out, they get easier and easier, eventually you start building your own personal "code base" which kind of serves as a toolbox, others use in other fields of work. There are lots of ways to meet people in this industry. You will meet tons of new people in school who all share very similar interests to you, that helps a lot. Want to make some Java developer friends? Go to a user group in your area (google it). Meet people who have tons and very little experience in the field, ask them anything you want to know, trust me, they want to tell you about it. I know I made the right choice, it doesn't feel like work if you enjoy doing it. its a rapidly growing industry, computers aren't going anywhere. There are tons of different career paths. You're signing up for working in an industry that allows you to develop something as an individual and turn it into a multi-billion dollar corporation, or work in basically any sector you want. Don't want to work for someone else? Freelance. anyways, goodluck 
The maximum transfer unit (MTU) over Ethernet is 1500 bytes, and that's also the default MTU for Windows. Anything larger than that will get fragmented and network equipment is *not* required to handle it, and may discard the fragments. You can reach that pretty quickly if you're simply using the default serialization mechanism. Try to keep the packets small or switch to TCP which ensures data delivery.
You haven't really stated a question. You'll need to define a "compareTo" function that takes two Strings and compares their length. Also, this looks very much like a homework problem - and the purpose of this subreddit is not to do your homework for you. Asking questions about the language is fine, but you haven't done so here.
This was a nice read. I see a lot of people use J2EE or JEE when they mean Java EE. It is just a term but when someone does not know the correct term for the standard framework it does make me question their qualifications. The article is about more than just a name. It points out how far Java EE has come. A lot of developers seem to think they still need things like Spring MVC but I do not think it adds much with modern Java. I would say it is needless complication for most new java applications.
&gt; I really don't know much about serialization. That is your problem. You are probably serializing the object id of the array out but then trying to read each value of the array on the other end but there is only a four byte value to read in, which is reference to an array on another machine. RETURN VALUES IN ALL NETWORK OPERATIONS SHOULD NEVER BE IGNORED. If you don't know what to do with them then write an assert with what you think the value should be.
Glad to hear that !
Very nice and easy read. Thanks! 
Some of us just still say j2ee out of habit 
Thank you! I got it all set up. Turns out my path was directing me to something with NVIDIA.
I think Google would help.
Thanks. The lecturer told me he was actually asking for the lexographic value which is why he wanted us to use compareto(). Managed to figure it out using if. Didn't know that compareto() can be defined as "is greater than" which made it so much easier to understand. 
You only need to override if they're defined as abstract in Applet. Otherwise it's optional. Using 'this' in a main method won't work. The Runnable you want the thread to use is subject.
sadly not as much as i would hope. 
Yep, return values of -1, 0, and 1 represent "less than" "equal to" and "greater than" respectively. So "a".compareTo("b") returns -1 and can be read as "'a' is less than 'b'"
Did you delete what was there or just add to it? The PATH variable is used for other purposes in addition to setting your default java location, which is probably why the NVIDIA location was there. 
[JGO](http://www.java-gaming.org/index.php) is your friend.
Gradle is probably a massive must. Takes a bit to get used to, but as you do, you see the power and simplicity of it. 
Why a video? Any links?
The links are in the video description.
yes seems to be a fine site, just the topic.. :)
I think you have made [Gson](https://code.google.com/p/google-gson/), but a bit less usable due to having to implement an interface everywhere.
Great post. An eye opener for those not familiar with the whole Java ecosystem.
Date &amp; Time revamp... Finally!
Any idea how does this compare to OrientDB?
Dang. Uhh... So... Do you have a copy of the path for the NVIDIA? ~~I think it's C:\Program Files\NVIDIA, but I'm not sure.~~ EDIT: Actually, no, it's NVIDIA Corporation, but I still don't think that's right.
Exactly! That is the whole point of this post :-) &gt;Great post. An eye opener for those not familiar with the whole Java ecosystem. 
Submitter just shotgun spammed this sub with his blogposts.
Yeah. Admittedly, I have been using it as a magic "make stuff work" tool without knowing how or why. I'll read.
I'm sorry, I don't. Since it's nvidia, maybe you can try reinstalling your driver - it might add the correct location back to your path. 
Would be nice to have info on reverse engineering/diffing the development DB to create/add to the changelog.
Network send/write and receive/read operations usually return byte counts. Count the number of bytes you are sending/receiving. When you figure out that doesn't match then actually look at the bytes you are sending. When you figure out that isn't right then look at the encoding/decoding you have chosen, aka serialization. 
I'm beginning to see why people are told not to create a networked game for their first project.
I would rate myself Integer.MAX_VALUE/10;
Well now I know what GSON is I guess.
I did. I also traced the issue to Jetty implementation of servlet 3.1. But the bug is not consistent and only happens randomly on production. A parameter that spring boot sends trigger this behavior which I am puzzled about. A simple if condition in jetty implementation would secure and solve it. Anyways, I cannot reproduce it so I'm asking for help. 
Also I'm not sure it's a recursion or some kind of an event-deadlock that's happening (for example, an exception is begin thrown around which the code catch, rethrow, then another part catches it, and calls the method again). I am sure that the last part is recursive becouse it seems that "Dispatcher$ForwardAttributes" is forwarding to himself (hence the simple if condition that could've solved it) but I cannot be sure as I cannot debug it well. only stacktrace and guesses at the moment
Sqlite is embedded
And don't forget Jackson which is also widely used.
*head scratch* NoSQL isn't literally about not using SQL. It's about non-Relational databases to support better performance and scaling. Being an NoSQL RDBMS doesn't really make sense. I'm really not sure what the point is. Is it just because you don't like SQL? There are scores or ORMs and DB abstraction layers out there that work on proven databases. Plus your feature comparison chart is pretty much false or subjective at best. 
H2 can be embedded too and you don't have to use JPA with it. Plus it supports encryption out of the box.
I'm not sure what I'd use it for, but that is fucking cool
I agree the description is goofy. I think this is a basic object database though and in that respect it's probably a nice hobby project option. That said, I doubt that it would stand up to a comparison of more mature object databases; so I don't think I would use it in production at work.
1. Hypertext is a constraint of REST. If you're not using HATEOAS it's not REST. There's nothing wrong with building services that aren't REST, it's not a magic bullet, but it's an important distinction below. 2. I suggest using a Javascript/HTML5 front end. AngularJS is fine, you could look at other Javascript templating libraries as well. A server-side approach with JSF or Thymeleaf still has wide acceptance, however with a JS approach you can always move the rendering server side if needed, with a framework like JSF you're stuck there. Additionally, if you are actually building REST services and not the pretendsies fake REST services most places are then all your UI would need is a single end point. From there it can be self discoverable, and most JS frameworks like Angular have some pretty decent support for this. Aside from that if you're going to need to staff for UI positions go take a look at how easy it is to find front end developers that know JS/HTML5 versus Thymeleaf or JSF. 3. If your UI is tightly coupled to the back end, then you might as well deploy them together. However if they're not, and if you're really building REST services they won't be, then the UI could potentially be run any number of places and against a number of different versions of your backend. In that case you should probably consider separating them, especially if you're likely to see disproportionate loads.
Right but Ohm has the ORM nature of it built right in. That's what I was getting at.
Sure thing!
Should be using a master changelog that references discrete changelogs. See [best practices](http://www.liquibase.org/bestpractices.html). Should be documenting the changeset, the comments get pushed into the DATABASECHANGELOG and the first person that has to look at that will thank you. The example changelog is a very bad one, you shouldn't be using &lt;sql&gt; unless you have to. Liquibase is *also* about portability between implementations. It should have been: &lt;createTable tableName="user"&gt; &lt;createColumn ...&gt; &lt;/createTable&gt; And so on. If you ARE going to use &lt;sql&gt; then you need to specify your own rollback. Liquibase doesn't do this for you unless you're using the aforementioned (and you should be using them) createTable, createIndex, createColumn, etc. Just a note for anyone who hasn't used Liquibase: you can also do this programmatically, or through Spring, or with a Maven plugin, or on the command line using a JAR, etc. So another benefit (not listed) is that you have a lot of options in when and how changes are deployed. P.S. This is directed at the article, not you specifically, unless you're the author too...
:) thanks! Here is a link to show a few uses: http://codeexchange.ics.uci.edu/examples.html
Thanks for your review and feedback, Actually it was very basic and HelloWrold type of tutorial. I will change this based on your comments.
I investigated this very thing recently, and the closest I could find was [Sorumula](http://www.sormula.org/). Wound up not going with it for various reasons, but it is the closest thing I found to an AR competitor in the Java sphere that is still being maintained. 
It does the same thing, but being on the JVM makes it possible for existing JVM build tools to run Procfile base system, e.g., for maven, define processes to run in the pom file and manage them gaffer, similar use case for gradle. See https://github.com/jingweno/gaffer#why.
Businesses are essentially paranoid and conservative about a lot of this sort of thing I would imagine. Do we actually have numbers on this sort of thing?
Actually I did the same thing earlier today, just straightforward doing this: return x -&gt; f.apply(fix(f)).apply(x); Your object wrapping solution is better!
It is definitely very close to what I am looking for. Unfortunately since those structures we have are missing the id fields altogether, I think this library wouldn't be able to do what we want without using javassist or something else that dynamically modifies the objects to add the id field. However outside of that issue, Sorumula seems like it would work fairly well. Thanks for the recommendation.
Ideally that's how it would have worked all along (programmed to some interface providing some sort of backwards\forwards compatibility). Unfortunately for us, since we inherited this code from a job that was contracted out and is already in production, the sheer number of messages and data makes it practically unfeasible (at least financially for our users).
Wouldn't it be easier to use jdbc, and generate dynamic sql by using reflection on the objects?
I believe that is tied for one of the better options (other being javassist manipulation with the use of an ORM). Ultimately I think this will be the route we end up going, I was just trying to see if the software world had a library that did this already (as it seems like something pretty commonly requested). Unfortunately all of the research into this matter has not provided any results into whether or not something that can do this already exists.
You would only need one strategy implementation per software version. How many software versions are you supporting? A static method call to a factory method and a virtual call to a strategy method does not impose much overhead at all in Java. Is it not possible to add a few more classes? Adding one class, one interface and a few concrete implementations sounds a whole lot easier than essentially monkey patching existing classes.
If you decide to go this way, I recommend you to take a look at JDBCTemplate in Spring.
/r/programmingcirclejerk 
Yours is cool. Of course, both of our solutions are "cheating" due to recursive-reference. 
OhmDB is a combination of the best of RDBMS (ACID transactions, ad-hoc queries) and some nice NoSQL features (graph-based relations, and fast joins implemented as graph traversal). Since it's a pure Java library inside your project, implementing custom triggers, custom indexing, etc. is just writing normal Java code. Which part of the feature comparison does sound incorrect to you?
Thanks. I'm disappointed. Not even an alternative or discussion about using tracking tools in eclipse enviroment. Will look somewere else 
OhmDB is not an object database. :) It is something between RDBMS and a graph database.
Have you looked at Head First Java? I seem to recall thumbing through that and finding it quite conversational and friendly for beginners. Sincerely, Richard Nixon
nosql isn't well defined or standardized. consensus is it means "not only sql". but the details are still up for discussion. it includes non-relational, alternative query languages, non-ACID, ...
The most common response to these types of questions is that programming isn't for everyone. There are actual people out there that find even the simplest task too difficult. The thing with programming is that you also need a bit of skill with computers and being able to successfully navigate around the programming environment without having much help. Lots of people begin learning a programming language only to find out they need to learn how to navigate around an IDE or do simple things such as use the command prompt to compile and run(to many people, doing this is a no brainer - to others who are not very tech savy, they have trouble just opening the command prompt). They go in expecting the books to be tailored to **complete beginners** who don't know how to do anything, like use a computer. Sometimes these "beginner" books are made for those who already know how to program and are looking to learn another language, or are made for people are just starting out, but have some knowledge of the basics (ex. Someone who wanted to learn a more difficult language like C++, but started out with Python to learn the basics of logic and thinking like a programmer). There are, however, books out there that are tailored to "complete" beginners. You just have to keep looking to find them.
Thanks, it's more than just for fun! ;) Although it has object-oriented DSL, it doesn't store objects, and graphs are separate structures than tables (separating then on different nodes in future might be possible scenario). Thus, it doesn't sound like ORDBMS. Since it is not a complete (but almost complete) RDBMS nor a typical NoSQL, the "hybrid" description comes natural. And, yes, the transactions are actually ACID, but I agree such statement is not enough, I guess more docs and demos won't hurt...
Wow this is an amazing tool
http://persism.sourceforge.net/
Maybe try getting a new monitor 
wat
I have not read the book, so I don't know the outline or the exercises. I see several options: * 1. You do not get the concepts well enough to execute them in a program, try to do the exercises step by step and look back in the book to see how it should be done. * 2. If the exercise tells you to make a this-and-that program, write down the lowest-level steps in english on paper. Make the steps understandable for a toddler or an alien. For example: Write a program that asks for two numbers from the user and adds them together. **1. Ask the user for number 1** **2. Store number 1 somewhere** **3. Ask the user for number 2** **4. Store number 2 somewhere** **5. Add both of the stored numbers together** **6. Store the result somewhere** **7. Display the result on the screen** This kind of stepwise approach to programming will help you a lot no matter what level you are. It's the mindset which all programmers think in. * Reverse the learning, not by reading the information first and then doing the exercises. Start an exercise you don't know how to complete, write down the steps in english, and see what steps you don't know how to do. Find out how to do these steps in your book or the internet. If you think of a fun exercise you also have more motivation to find the answer and complete it.
thank you for the response :)
Lightning fast search with useful results. What more could you ask for? Brilliant.
The "not only SQL" isn't uniform either. The only thing they all have in common is non-relational. Even the coiner of the term admits NoRel would have been a better name.
I think you may need to do some external research in places, but overall it's a fairly decent book to get your feet wet. For java, I've not seen many others that cover the necessary basics as well. Granted, I'm not new to the language but I read quite a few of those books anyway to try and see how they teach concepts.
Thanks very much! The search engine and the mining code are written in Java. The web application is written in JavaScript. We are currently writing about the engineering involved, but I can give a quick summary. We are mining code off GitHub with this: http://sdcl.ics.uci.edu//wp-content/uploads/sdcl/2014/05/pis.png (a 45 Raspberry Pi cluster). These Pis mine code off GitHub, process it, and then upload the code to our search engine. The search engine code itself is built on top of the Apache Solr framework.
Haven't been on the Teach Yourself Java in 24 Hours book, but I know some others of the series and my advice would be to stay clear of them. They are way too condensed and basic. If you are looking for a book, go for [**Head First Java**](http://www.headfirstlabs.com/books/hfjava/) (I know, it's an older edition - don't know if there is a new one for java 8 out yet, but Java 8 is also not that common in the industry yet either, Java 7 is good enough to learn for starters.) If you are willing to go for an online course, go for [**Java for Complete Beginners**](https://www.udemy.com/java-tutorial) free on Udemy.com. It's Java 7 but a very well laid out beginners course.
What kind of a non-article is that? The article doesn't mention a single reason why you shouldn't move to Java 8. Just stuff you need to be aware of when using some of the new functionality. And the last point argues like functional programming is what every language should allow. What a load of bovine excrement. Java is a great language, it is very widely used and Java 8 brings many great enhancements. I was expecting some serious bugs in the official JVM that are still not fixed. That would be a reason to not migrate just yet.
Will you make the tool available ? I.e to install on one's own server(s) and mine a different code base ...?
Use Java 8.
More helpfully (maybe): most of the time you can get by with a small set of re-usable generic interfaces such as Supplier&lt;T&gt;, Callable&lt;T&gt;, Predicate&lt;T&gt;, Function&lt;I, O&gt; and Consumer&lt;T&gt;. Expecting a concrete class when all you need is *something* that will "handle the next value", "decide whether or not to do X based on Y" etc., is also an antipattern.
I started with the Dummies All in One Desk Reference by Barry Burd. That's 1000 odd pages of examples and descriptions, with some but not all explanation of every element. Then after getting to grips with the concepts in that book I moved onto Beginning Java by Ivor Horton. This goes in-depth into everything I've needed so far. It's comprehensive and encyclopedic, with a great index and detailed explanations. I've been learning for a few months and I'm about 140 pages into it, it's taught me an awful lot combined with the basic knowledge learned from the All in One Desk Reference. 
I liked the code examples on your Github page and gave it a try. A few things stuck out from a very quick test. Firstly, you persist the data but not the indices. That is somewhat confusing. Secondly, why return an array instead of a List or Collection from get()? Thirdly, a few things are printed to stdout. Is it possible to disable that or to pipe it into a logging framework? We have some environments where we want to control where stuff is being sent to.
So I should have a small number of recyclable interfaces that I use for everything? That actually seems much nicer. I do have a tendency to lose track of badly organised interfaces and have accidentally implemented something very similar to an already made interface in the past. Does the problem never occur where a class needs two interfaces that provide a similar function, and one of the functions of the class gets neglected because the class seemingly satisfies the interface required for it to be passed into another class? 
Android developer I'm afraid. It's been a while, but as far as I'm aware Android doesn't use Java 8 yet. Out of interest, why would using Java 8 solve my problem/invalidate my question?
**Get rid of the frickin' Windows.** &lt;rant&gt; How can anyone expect Windows to be taken as a serious environment if it FAILS TO SUPPLY EVEN A MINIMUM PACKAGE MANAGER with the base distribution? Even when Windows is widely criticized for being unsecure and people are adviced to uninstall it on their machines, you give them even more reasons to do so by not bundling something that everyone needs. The early 2000's called and wanted their thing back. GAH. &lt;/rant&gt; Edit: Oh, and &lt;/irony&gt;...
[It's time people start using Ninite. It's practically a package manager.](https://ninite.com/)
Okay, that's actually pretty funny. To disable the offers in the installer, they recommend you do it via the Java Control Panel, which doesn't exist on the client machine until you run the installer. That's some Dr. Strangelove-grade logic.
Your point got buried in the snark. Windows has crap in the installer precisely *because* it requires an installer. On other platforms, you typically don't even think about downloading and installing Java separately - you install your client app from a package manager, and a JRE is installed automatically, along with whatever other dependencies are needed. Many Windows peeps have simply become resigned to accept the nastier parts of the OS because "that's just how it is". 
Isn't it ironic that one of the worst features of Windows is the window manager?
I applaud your - obviously rare on this subreddit - irony-detecting capability. :-)
And just to add another non-ironic take on the subject, the Ask.com toolbar was added to the Java Installer for windows under supervision of Sun Microsystems, who apparently wanted to cash in at least a bit on the popularity of Java. I'm not sure about the specifics of that deal, but it appears Oracle hasn't yet found a good reason to break/terminate that contract.
&gt; To disable the offers in the installer, they recommend you do it via the Java Control Panel, which doesn't exist on the client machine until you run the installer. You can still use old-school check box in the installer window ;p
Oracle makes money from unsuspecting moms and dads and grandmas who don't know any better. 
I can recommend the **Udemy.com** course. Java for complete beginners is excellent - and it's free, so what have you got to lose?
Yeah, that toolbar thing is stupid. I wonder why Oracle is still doing it, do they really need that cash, or is the contract too screwed up to terminate it? I think Linux version of JDK installer doesn't have any of that crap though. Given that Java is most often used on server-side apps these days, Linux Java is arguably more important... I wish Windows had a proper package manager, like most Linux distros. Someone mentioned Ninite, I'll need to look into it.
Take a look into Chocolatey as well: https://chocolatey.org/
Oh how i love ninite. First thing I do on a fresh computer is go to ninite 
Oracle's acquisition was over 4 years ago (jan 27 of 2010). I really doubt the original contract had a term that long. See also: http://www.computerworld.com/s/article/9236273/Oracle_will_continue_to_bundle_crapware_with_Java (pub: jan 2013) &gt; Doland Smith, who heads Oracle's OpenJDK team, cited contractual obligations that prevented him from discussing the bundling deal in detail. But he hinted that no changes were in the offing.
But I love Ask toolbar Said no one ever
[UML](http://en.wikipedia.org/wiki/Unified_Modeling_Language) is a collection of diagrams. It sounds like what you are talking about is the [class diagram](http://en.wikipedia.org/wiki/Class_diagram). In the class diagram, each class is a box, divided into three sections. The first section is class name, the second is the attributes and the third is the methods. There are modifiers to signal visibility of attributes and methods. Classes are then linked to other classes, these links represent either 'has-a', or 'is-a' relationships. Both of those link types have further specialized forms, for example, a solid line with a hollow triangle arrow is an 'extends' relationship while a dashed line with a hollow triangle arrow is an 'implements' relationship. The wikipedia page on class diagrams I linked to above should have plenty of examples to get you started.
It's a long ways from being a real package manager, but it *is* really convenient. 
What's wrong with Windows' window manager?
&gt; I really doubt the original contract had a term that long. On the contrary, AFAIK contracts like this usually don't expire until one party terminates it. As I said, Oracle has little incentive not to sell Windows+Java users to Ask.com. They're all about the enterprise server space, so end user clients don't matter too much to them. Edit: To all downvoters: Could someone explain to me why this comment is not apropos?
It is not in the post request. I found someone with a similar problem [here](https://groups.google.com/forum/#!topic/polymer-dev/V0qah6T1Lzk). It seems that the components aren't built for form submission at this time.
&gt; ojdbc14dms_g.jar You've got the Java 1.4 version, try ojdbc6_g.jar. Edit: Just noticed the DMS, so maybe try ojdbc6dms_g.jar if you need DMS.
I just tried it. I don't really understand how I can use it like a package manager? I mean, I downloaded some executable, it installed a specific app, and what next? How do I see a list of installed apps, their versions, do an upgrade? Alternatively, how do I download &amp; install 10 apps automatically from command line?
Just use the native packager and stop whining. 
Well, it's not *exactly* a package manager. It just installs applications without any adware, and you can use the installer as an updater by running it again.
Upgrades are done by rerunning (you can throw it in a scheduled task if you want). The other things you list, Ninite doesn't provide. It doesn't even provide a full list of what it will install (outside of running it) if you selected a lot of apps to install (filename cutoff).
None of the JDK installers have it, but it does come in the Windows JRE installer. I don't think the Linux one has it, and I have no clue if Mac does or not.
How does this differ from just using search on github? Why can't I find any actual links to github projects? Instead I just 'keep refining' my query pointlessly. 
Presumably, you dropped an n, an apostrophe and a t. OpenJDK is in the repos. That being said, isn't it nice to have a choice of JVMs?
"But I love Ask toolbar!" - Jeeves 
I don't agree with that. If anything, it's one of the few things it does *right*
I'm a big Java fan. Java is a great language especially for server processing. But I cannot agree more on the desktop integration ! It suck really bad, and I spend my time to remove it from my parent and friend's computers.
I'm not going to excuse Oracle for that, but at least in the most recent Java 8 version, after installation you can go in the Java Settings and the last Element of the Advanced tab, you can select "Suppress sponsors offers...". So the next time you install/update you should be ok.
Java is not what you installed, Java is a language. The *Oracle* implementation of Java *under Windows* bundles the Ask Toolbar. There's other OS and other JRE/JVM/JDKs out there, and even other binary packages for Windows without Ask Toolbar. Don't rant about Java when you should be criticizing Oracle for their Windows distribution instead.
Thats amazing my friend actually has head first java maybe i can borrow it from him :)
STOP SPAMMING YOUR SITE! Its content is not very good, and also - you are SPAMMING it! Reported. And I hope everybody else does the same. Do you have no dignity, no shame, no feeling for when it has been enough? PISS OFF already!
We all know that here (I hope). But that doesn't help us when a manager/client questions Java's viability. This toolbar bullshit (along with applets - they should have been deprecated a decade ago) continues to do a lot of damage to the Java brand.
&gt; OpenJDK is in the repos. It is, but if you want to use, say, Intellij, which uses oracle's jdk, or you want to use oracle's jdk for your own development, then you would download oracle's jdk separately 
&gt; Amusingly, for many of the day-to-day tasks in string building, the class I developed in Commons-Lang over 12 years ago, StrBuilder is still the best option. Notice how there is implicit (yet tremendous) emphasis on the word *I*.
The customary way is: private static final String VARIABLE = "cdefg"; This is covered in the language specification, section [8.3.1](http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1) &gt;FieldModifiers: &gt; FieldModifier &gt; FieldModifiers FieldModifier &gt; &gt;FieldModifier: one of &gt; Annotation public protected private &gt; static final transient volatile ... &gt; If two or more (distinct) field modifiers appear in a field declaration, it is customary, though not required, that they appear in the order consistent with that shown above in the production for FieldModifier. There is similar wording for [method modifiers](http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.3) and [class modifiers](http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.1.1) Edit: Oops fixed the last link.
Can we ban this topic already? Annoying to see this come up every couple weeks
ohh. spamming under multiple user id's now. Reported. You are just going to end up getting your site blocked from posting all together.
As seen in the popular books *"How to make friends with your co-workers"* and *"Fun riddles to sneak into your Enterprise code base"*
Also, there are some bad practices in the examples. This one uses magic numbers, for example. But most of all: No matter how good a site is, someone shouldn't post their stupid blog several times a *day!* How clearly can they possibly say "I shit on the community here, this is all about MEEEE!"
We hope to make it open source, but, as a university project, first we are working to stabilize it and write about it. 
There is an official way to do this that papercrane wrote about. Personally, I have come up with a different way a while ago that I stuck to consistently. As an example: `final private static Object LOCK = new Object();` During that time, I learned about the "final" keyword that people just don't use enough in my opinion. It should really be glued to everything (especially variables, fields, and method parameters) that doesn't need to be changed. No exceptions. Well, and so that I can easily see if something is final or not, I wrote the word in the first location (aka left). One glance, and I know. But there's more to it: I can as well drop the final word, and everything still works the same. Not so much the other way round, but the point is: It's rather optional. It is far removed from the actual hard workings of things. Whether something is public or private is a much more functional distinction. But what's even more of a functional difference (imho) is whether something is static or non-static. And what's, of course, *most* of a functional difference is the actual type of the variable, or whether or not the method returns something or what type it returns. I find this to be a very reasonable order. And since I can't change that the type is denoted *after* all modifiers, it's not even an arbitrary one. A nice rainbow spectrum, *and* it teaches to use the damn "final" modifier. I rest my case. Again, this is *not* the agreed upon way to do it, but I do it like this because I think it's the better choice.
Good questions! CodeExchange's features aim to support you to iteratively reformulate your query. That is, as you get results, it aims to help you change your query so the next batch of results are closer to what you want (some examples here: http://codeexchange.ics.uci.edu/examples.html). These features are unlike those currently available on GitHub or other code search engines. This is an academic research project so we are looking at the anonymous usage logs to see if the features are actually helping or not. Thanks for feedback too! We plan to change the search engine in the future based on the feedback and data we get now.
True
No toolbar on mac. 
Poor grandpa still goes directly to askjeeves.com all by himself
If you're using Windows, you can edit the registry to disable "sponsor offerings" for the updates: http://superuser.com/questions/549028/how-can-i-prevent-ask-com-toolbar-from-being-installed-every-time-java-is-update Spread the word! 
Do you work in a team? What ordering do your other team members use? What do you do if they want to do it differently to you? Ultimately the ordering doesn't matter. The key thing is that as a team you all agree upon a standard and then stick to it! Edit: words
Does anyone know where I can get the ask toolbar without the pesky java install?
Have you spent any time in the real world? You're making some very good, very academic arguments. None of it matters, especially if you've already sunk the time and effort into creating a big code base. These kinds of things matter a whole lot to programmers, and not much at all to anyone footing the bill. &gt; does not suffer from java's incapability to grow up and evolve and become a decent language Yeah Java's pretty vanilla. But I'd wager you (the end user) couldn't tell the difference between an app written in Java and an app written in Scala. You're confusing the issue here. This is about installing a JVM on a computer, not the language the app was written in. I'd also launch into a rant about the superiority of the JVM's cross-platform capabilities, but I suppose you've already addressed that with "if you're targeting windows". &gt; Value Types, as opposed to the bizarre "primitives" stuff you find in current java. It's true the Java language sucks at this. However that's not to say the JVM can't possibly represent the concept. Case in point, Scala has the "AnyVal" type which is exactly what you're talking about. &gt; Latest .Net Framework is included in latest Windows They used to make that argument about their browser too. Thing is, vendor lock-in isn't a good argument. &gt; you can install it perfectly fine, and it does not bundle any sort of crapware, like java does On the flip side, Java only needs one single JVM installed to run all JVM code. Java 8 can still run code targeted for Java 1.4. .NET requires each targeted version to have its own dedicated install. Which makes supporting legacy applications a burden for the admin and the machine it runs on.
&gt; Have you spent any time in the real world? Not really. Since you seem to, can you tell me where are the gaziliions of java-based customer facing apps? I'm sure there must be.. since according to your argument java's such a good platform for client side apps? (developer targeted apps don't count, neither does Android, because that's not real java). &gt; couldn't tell the difference between an app written in Java and an app written in Scala. That's right. Their UIs suck equally and suffer canny valley. java tries to be everywhere, and it's not really a first class citizen anywhere. At least C# can leverage native Windows capabilities perfectly fine. &gt; I'd also launch into a rant about the superiority of the JVM's cross-platform capabilities Granted. C# is only first-class on Windows, then it also runs ONLY on Android, iOS, Xbox, Linux, Mac. It's cross-platform capabilities are pretty bad. That's why 99% of all games you find in, say, Android Play Store, are made with Unity, which runs C# (rather than java). &gt; vendor lock-in isn't a good argument. I'd rather have my (Windows) app "locked in" to Windows (WTF??) than have my customers complain that my app has dependencies on stuff that installs CRAPWARE. &gt; Java only needs one single JVM installed to run all JVM code That's why 90% of search results you get when you search "java" in Reddit are from people complaining that they installed "java security update U55612.S1232351" or something and it broke their Minecraft. &gt; Which makes supporting legacy applications a burden for the admin and the machine it runs on. Sure, because 3.5 and below are included in Vista and above, I guess "the admin" has a lot of extra burden caused by having to do literally nothing? Sorry, java might be ok for server side stuff, but it sucks and is retarded and useless for client-side. Admit it.
The guy is clearly still proud ;)
Jeeves is dead on this side of the water.
I've read that in the most recent release, that setting is even available in the Java Control Panel.
Grandma, why did you buy that for me? I wanted a gun rack, not a 16 CPU RAC license.
It's to disable the offers when Java updates, not when it's first installed. The damn ask bar tries to install every time a new version comes out
&gt; don't know. Perhaps I'll ask the programmers Amazon or Google though. I was talking about Windows apps. Other than GTalk (which I'm not sure it's java or what), that's not an argument. Amazon is a freaking web app. That's server side, FYI. &gt; Fucking moron. Are you java guys so jealous that C# is better that you need to resort to insults?, here, have some taste of modern-ity: [Draft spec for records and pattern-matching in C#](https://roslyn.codeplex.com/discussions/560339). &gt; many thick client apps have you developed? 5 at the moment, not counting the Client side apps of the companies that I worked for before becoming a contractor. Not a big number, I know, but I'm a solo developer. &gt; Who brought UI's into this? You did: &gt; couldn't tell the difference between an app written in Java and an app written in Scala. If you aren't talking about UI, then I have no clue what the hell are you talking about. &gt; How many customers have you met that are just clamoring for some thick-client UI? 5, at the moment. &gt; Everyone and their mom is going to web UIs, where yes Java does quite well for itself. Except you're forgetting that Web UIs are HTML + CSS + JavaScript. java does not play a role there except on the server side (which isn't the "UI" per se). &gt; You know, on Linux.... I began my comment talking about Windows. I don't really give a fuck what it's like on Linux. My customers DONT RUN LINUX. regular people who run their small businesses have NO FUCKING CLUE about LINUX, nor do they care. They're not computer geeks and they aren't fucking interested in a stupid command line. &gt; Right, because between being a perfectly usable web platform, SOA platform, enterprise platform, embedded platform, and mobile platform, its ability to look pretty on the desktop is what kills it. What really kills it is that it bundles CRAPWARE and makes it look like a non-serious platform for the client side, which is what this post is about. &gt; Lose the false dichotomy, lose the fanboyism, go get some real-world experience. Will do. Thanks. 
&gt; Are you java guys so jealous that C# is better that you need to resort to insults No, you made an incredibly ignorant statement. And I called you a moron because it's a moronic statement. Java is one of the most prolific languages out there. And just because users aren't seeing the little coffee icon all the time doesn't mean they're not interacting with Java code all the frickin' time. &gt; If you aren't talking about UI, then I have no clue what the hell are you talking about. Byte. Code. &gt; Draft spec for records and pattern-matching in C# Which Scala has had for years. &gt; 5 at the moment That's unusual. For your particular use-case, you probably made the right choice. However most customers see thick clients as limiting. &gt; I began my comment talking about Windows. I don't really give a fuck what it's like on Linux. I went on to say how the same thing works on windows. Fuckwad. &gt; What really kills it is that it bundles CRAPWARE and makes it look like a non-serious platform for the client side, which is what this post is about. Right, because Windows doesn't come in server flavors.
One or two years ago, there was a worm that spread through default-password-using tomcat servers. It just used the manager interface to upload itself as a .war and start it. It didn't contain any C&amp;C structure, so it was probably an escaped proof of concept, but security researchers estimated around 10k infected systems at the time.
&gt; I learned about the "final" keyword that people just don't use enough in my opinion. &gt; It should really be glued to everything (especially variables, fields, and method parameters) &gt; that doesn't need to be changed. No exceptions. In Eclipse, you can configure so that when you save a java file, everything that can be final gets a final declaration. So you don't need to worry about writing final everywhere, the final keyword will magically appear, before your eyes, when you save the file. Each time I hit Ctrl-S a handful of final modifiers appear. 
&gt; just because users aren't seeing the little coffee icon all the time doesn't mean they're not interacting with Java code all the frickin' time. Except, you know, when java is not installed in their computers, because of security concerns, and/or because they don't want crapware in their machines, which is what this post is about. &gt; Byte. Code. You mentioned "end user" then you mentioned bytecode. I still have no clue what the hell you're talking about. &gt; Which Scala has had for years. every time I point at java's flaws and deficiencies the only defense argument I get is "Scala!!!"... which proves my point that in order to avoid/workaround java's imbecility you need a different language. &gt; However most customers see thick clients as limiting. Yeah, except if I can provide a native experience on the platforms they care about (Windows and Android), while sharing my underlying business/application logic thru MVVM. &gt; I went on to say how the same thing works on windows except it's not the way end users are used to do stuff on Windows. Maybe Linux users are used to command line stuff and managing files, but my clients don't even know what a file is. I can't ask them to "unzip a file" and do stuff simply because some horrible corporation decided to bundle crapware in their installers. &gt; Fuckwad. More insults? [here](http://whyjavasucks.com/), that site has some funny stuff, so you can calm down and relax and speak like a civilized person. &gt; Right, because Windows doesn't come in server flavors. So what? this discussion is about client side end users and the shame you should feel about making them install java on their machines. Servers have nothing to do with the discussion. Maybe if I repeat myself this time you can understand better? after all, from a java developer's perspective, it's okay to repeat the same thing over and over? MyService&lt;MyEntity&gt; service = new MyService&lt;MyEntity&gt;(); versus C#'s: var service = new MyService&lt;MyEntity&gt;(); &gt; Sorry, java might be ok for server side stuff, but it sucks and is retarded and useless for client-side. Admit it.
There a PPA for the Oracle JDK/JRE, apparently...
You must be HighCore's alt, going around parading things you know little about.
Okay, why not? You're obviously not serious, but I'd hate people to say Reddit is unhelpful. [Here](http://apnstatic.ask.com/static/toolbar/everest/download/index.html?source=sp) (NOT SAFE FOR BROWSERS)
The sleazeballs in suits who made the dirty deal to install the toolbar can't hear you over their enormous sacks of money. And even if they could hear you, they'd snort and laugh. They don't give a shit how much you hate it, and they *really* like their enormous sacks of money.
Jesus. Motherfucking. Christ. Pay attention. Java = Language. JRE / JVM = What you install. When I distribute PROGRAMS it doesn't matter what LANGUAGE I wrote it in, as long as the JRE can run it. THEREFORE all your whining and ranting about the Java language itself being the problem is a red herring. Guess what, .NET has languages that suck too. You want me to start tearing the .NET framework apart because VB.NET is so horrible to write in? No? Then shut. The fuck. Up. About all this "C# rulez" shit and keep the goddamn focus on what the original article is about, which is installing the motherfucking JRE. Which CAN be done without the installer, you fucking tool. 
Their [paid version](https://ninite.com/pro) does that, and can install/upgrade/audit/uninstall across several computers at once.
LOL. I love the way you lose it so easily. Have a break from your `getXXX()` and `setXXX()` stuff so you can calm down a little bit. I started commenting by telling the OP that if they're doing client-facing applications targeting Windows it's better to use a saner platform that does not bundle CRAPWARE. &gt; all your whining and ranting about the Java language Every time I point at java's deficiencies and flaws, that's called "ranting". However when a java fanboy speaks about how C# is somehow "Windows only" (which I then proceed to prove wrong by showing them the FACT that there's Unity and most Android games are made with that, and also stating that I have already delivered C# based Android apps) that's somehow "objective criticism". LOL. And I never said "C# rulez". I merely pointed the FACT that java SUCKS and is RETARDED and useless for client-side. You're incurring in a logical fallacy/misinterpretation. &gt; Which CAN be done without the installer except that's now how people regularily do stuff on Windows. At best, java has a bad user experience (on Windows) because it either bundles crapware or forces the user to engage in non-standard installation procedures, which many users might not be familiar with. Keep insulting though, I find this very funny. After all, I'm at the light side really enjoying my modern language and usable platform, and my customers are happy and satisfied with the solutions I provide.
 apt-get install openjdk-7-jre No ask toolbar. Weird.
pacman -Syu god dammit why doesn't android studio work anymore...
&gt; To use this option, go to the JCP Advanced tab, and check or uncheck Suppress sponsor offers when updating Java. Given that the section title is "Disable Sponsors in the Java Control Panel", they could have been a little more helpful that simply saying to "check or uncheck" an option. Can't wait for the setting to be renamed to "Don't not suppress third party sponsor non-install option", with the advice remaining to check or uncheck the option. Still, can't complain too much - having the option's better than the alternative.
I use .NET a lot at work, and Java a lot at home, but as a consumer, probably 95% of the apps I install are written in C++. And then most of my time isn't even spent using those apps, but browsing websites. We're a dying breed. Javascript won.
Yup! You can prevent the toolbar offer from the control panel, in Java 8+: http://www.java.com/en/download/faq/disable_offers.xml Just disable it under the advanced tab. 
I find it dubious that you can't provide a link to the actual github repository for your search results.
Everyone loves the smell of their own brand. - Fat Bastard
Math.sqrt takes a double as an argument, and you are passing it a String. "arguments[0]" gets you the String at index 0 in the String array. So Math.sqrt should only be passed a double. Might want to try Double.parseDouble(arguments[0]) instead of argument[0] 
Like you might create a facebook account just to click the like button on mavens page because you liked it so much?
If this ain't spam, i don't know what is
The one from the aur work well, just rerun yaourt -S android-studio when a new release comes out. However a recent update to the openjdk caused all the fonts in android studio to break, took a couple hours before a [reddit thread](http://www.reddit.com/r/archlinux/comments/28d6p9/upgrading_openjdk_removes_text_in_idea/) came to everyones rescue.
The problem with your algorithm is that it does not always provide the correct answer. Suppose your knapsack holds a total of 13 kg, and that you have only two types of boxes. One type of box weighs 3 kg and has a value of $6 (ratio 0.5), and the other type of box weighs 2.5 kg with a value of $4.90 (ratio 0.51). If we put in the lowest ratio box first, the 3 kg one, we can put in 4 boxes for a total value of $24 (12 kg total weight) within the sack. At that point, the sack can only hold 1 kg more, so we can't add any more boxes or value to it. In contrast, if we put in the higher ratio, 2.5 kg box first, we can put in 5 for a total of $24.50 (12.5 kg total weight). So, in this case, using the higher ratio boxes first generates a knapsack that holds more value.
I created a JavaFx web browser inside a jframe (or was it a jpanel? cant remember), then created an html file and pushed it into the web browser. I was then able to add listeners for the html elements, calling back to java from javascript using javafx, and execute code. I could also push changes to the ui from java. I couldn't believe that it could be done. It allowed me to write the front end of my application in html, I know something a lot of web developers would be attracted to. Don't take my word for it, because my application was pretty simple, but it worked nicely.
That's awesome, why didn't I find out when I was still using Eclipse? (Changed to IDEA.) Would it even add the keyword to method parameters? EDIT: I really wish the Java team had decided for the opposite solution: Everything is final until you add "var" or something.
Team: Only in a library-kinda way. I code, build a jar, the other guy uses it, so it's not a problem.
Haha my mom Literatly has 3 toolbars on ie(which she uses) when ever I go on it I remove them,but then they come back!
Could you clarify the second paragraph with examples?
Typical Android code: button.setOnClickListener(new OnClickListener() { @Override void onClick(View v) { alert("Button clicked"); } }); Android + Java 8 (theoretical, not yet possible): button.setOnClickListener((v) -&gt; alert("Button clicked")); Android + Scala + [Scaloid library](https://github.com/pocorall/scaloid) (not theoretical, actually possible right now): button.onClick(alert("Button clicked")) 
I am glad this change is being noticed! (I am the author of the change). One note: The comment about the initial capacity remains correct. When the first entry is added and the table is "inflated" its capacity is going to be 10 for ArrayList and 16 for HashMap--the same sizes they were before the change. The patch only defers the allocation until the first insertion.
This ordering is commonly referred to as the "blessed modifier order" as coined by Doug Lea and is indeed what customarily used in the OpenJDK sources.
The example program doesn't compile for me. Until you change this line: OhmDB db = Ohm.db ("ohm.db");
I actually managed to solve the issue. It is a mix of both, if the solution set is large, as in their are a lot of items and possibilities to consider, this method is definitely over complicating a simple problem; however, with a large solution set the use of a genetic algorithm allows us to iterate over the code less. Essentially a genetic algorithm will generate a population of chromosomes with random bit values(0 or 1), representing whether an item is taken(1) or not(0). The idea of a GA is to allow these chromosomes to mutate(in order to avoid falling into a local optimum, crossover(breed), etc. This makes it so that each generation of chromosomes is a better solution to the problem, thus lending some benefits when trying to solve a combinatorial optimization problem, like the knapsack problem. As for why I am doing it, I am writing a report on the benefits of utilizing GA's when solving combinatorial optimization problem, like the Traveling Salesmen problem and this one.
Because your making uninformed assumptions 
You guys should maintain a blog for this stuff, because I am sure that some things like this get missed all the time, but its so interesting (to me at least)!
My assumptions *are* informed, as I have worked with Oracle in the past (been consultant for a local Oracle partner company).
Thanks to OP for the post and to you for your response. I often rely on the default size of 10 for small lists and was worried that I now have to always specify a default. I'm glad to hear that this old default is still there, you just optimized the memory consumption. Also, I agree with /u/Sinistersnare that I'd like to hear more about changes like this one. Release notes are often cryptic and don't do the change they describe justice. A blog would be way more helpful.
Interesting. Certainly cuts down on boilerplate, but I'm still fairly certain that I'd be using delegates.
Good luck working in a team that uses CheckStyle with that ordering...
It's not a standard, it's a convention. If you have good reasons you're more than welcome to create your own. But if you work in a team you all should use the same style.
Apparently it is a money grab if you are teaching it without even know the basics. This is very simple stuff here.. 
In both scenarios where array or list is required, it's functionally simpler to get them from array. But your agrument about having a List is valid, so I agree there should be some ellegant way to get a list, too. I am going to add getList() or something similar soon... Thanks for this valuable feedback!
Nice, thank you for that explanation, and good luck with your report :)
Oh wow. And here I was wondering why no one bothered to use that seemingly simple method, now I know. Thank you very much for pointing that out.
Thanks for this improvement bondolo, It surely gives one more reason to upgraded to Java 7 to projects which haven't done it yet.
I agree with this. Plus I like John Purcell, I bought from him the Spring course and it was awesome. 
 &gt;&gt; Byte. Code. That would be the equivalent of CIL for C#. &gt;every time I point at java's flaws and deficiencies the only defense argument I get is "Scala!!!"... which proves my point that in order to avoid/workaround java's imbecility you need a different language. There's also Groovy, Kotlin, and [a bunch if other languages](http://en.m.wikipedia.org/wiki/List_of_JVM_languages#JVM_languages) targeting the JVM. &gt;So what? this discussion is about client side end users and the shame you should feel about making them install java on their machines. Servers have nothing to do with the discussion. True. And languages have nothing to do with this discussion either. &gt; MyService&lt;MyEntity&gt; service = new MyService&lt;MyEntity&gt;(); &gt;versus C#'s: &gt; var service = new MyService&lt;MyEntity&gt;(); This is once more deviating from the original topic. def service = new MyService&lt;MyEntity&gt;() var service = MyService val service = MyService() All of the above are valid code on the JVM.
Ok, I know way too little about what you are doing to give you proper advice. You have some kind of legacy project? Using JUnit for testing? The project is in Java? What kind of build system are you using? Ant? Maven? Gradle? Or is it just a project file inside Netbeans? Which version of Java? 5? 6? 7? 8? The way I would do things, is first, make sure that project builds with Maven (or Gradle). Then I would make sure tests are run as part of build process. Then I would configure JaCoCo plugin for Maven to provide code coverage information. Then I would install JaCoCoverage or maybe MavenCodeCoverage plugin for Netbeans. I'm not using them at the moment, so I don't know how they differ. But in general, my experience is that to get things working properly, you first fix/implement the build outside IDE (most often using Maven), then make sure IDE works properly with that external build system (and Netbeans &lt;=&gt; Maven integration rocks).
This post must be sarcasm.
This +1
What would you like coverage of? Unit tests, integration tests, or black box tests?
Depends on your router configuration. There is absolutely nothing Java-specific about your question - try in /r/HomeNetworking or somewhere specific to your router model/distribution. 
&gt; Byte. Code. That would be the equivalent of CIL for C#. Dude, I know what bytecode is, but this was your original comment: &gt; I'd wager you (the end user) couldn't tell the difference between an app written in Java and an app written in Scala. so I don't understand where is the relation between the end user and the bytecode?? &gt; There's also Groovy, Kotlin, and a bunch if other languages targeting the JVM. None of which invalidate my point that java sucks balls. if it didn't, people wouldn't have the need to create all these other, "alternative" languages. Have you heard anyone claiming that they need an alternative for C# in the .Net side? No, because C# does not suck like java. &gt; var service = MyService &gt; val service = MyService() Where's the `MyEntity`?... Ah, right. Type parameters are erased by java's (or should I say JVM's?) retarded [lack of real] generics anyway. So, how do you tell the difference between a `MyService&lt;Product&gt;` and a `MyService&lt;Account&gt;`? 
Try looking into SwingWorker.
Why?
A simple interface, defined by the problem domain, is sufficient. Any domain independent abstraction of such a simple concept would be crazy.
I love JRebel. But their price is very high. I would understand if they have an individual license for developers a little cheaper and an enterprise license for companies at whatever price they think is right. A lot of developers are looking for JRebel alternatives. I believe if they have a license that is 50-150$ per year, many more developers would take advantage of their technology and might request from their companies to buy them an enterprise license, however at 365$/year that is a lot for an individual developer. 
did you check /System/Library/Frameworks/JavaVM.framework ?
Although I disagree with the authors opinion about Oracle's handling of Java (I like their road maps) - it's interesting to read regardless...
"Oracle has a project to finally "fix" Java and address a bug I filed with Sun years ago making List&lt;int&gt; work properly" Thank goodness the author submitted that bug - otherwise the java authors would have never known that generics didn't work with primitive lists! /s
 &gt;so I don't understand where is the relation between the end user and the bytecode?? And that's exactly the point. The language doesn't matter to the end user. The end user doesn't care whether you used C#, F#, Java, Scala or even C++. Edit: oh and by the way; I didn't post that first comment you are referring to :) &gt;Where's the `MyEntity`?... Ah, right. Type parameters are erased by java's (or should I say JVM's?) retarded [lack of real] generics anyway. So, how do you tell the difference between a `MyService&amp;amp;amp;lt;Product&gt;` and a `MyService&amp;amp;amp;lt;Account&gt;`? MyEntity is not needed. The first example was Groovy, the next Kotlin, and the last Scala. I agree that C# handles generics better than Java. However Scala doesn't erase type :) &gt;Have you heard anyone claiming that they need an alternative for C# in the .Net side? No, because C# does not suck like java. I'm not arguing that anyone has claimed that. What is your argument that such a claim is on topic? &gt;None of which invalidate my point that java sucks balls. While that may be the case it still isn't the topic discussed here. You seem to steer the discussion away from the actual topic :) 
I haven't worked in Swing in a loooong time.
You could create an object that is sent as an argument to the modal. Modify it and depending on the value of the object after the modal closes run your method? public void something(){ Object params = new Object(); Modal m = new Modal(params); if(params.attribute == 1){ //run something } } Whatever you do with params inside the modal should be back on the something() method.
I think that Oracle's done a pretty good job--certainly better than I expected when they acq'd Sun. Java 8 was an important release with many new features that make coding easier. And the Java 9 roadmap looks promising . Most language surveys show a very healthy Java and JVM ecosystem. I don't see anything that would suggest Oracle killing Java by omission or comission. 
What a joke. 
I believe java can survive without oracle. If oracle drops java, well it's just a language and byte code specification. There are other JVM's out there that are completely independent, and things like openJDK can continue to survive without oracle.
What advantages does JSP have compared to, say, Thymeleaf or Twirl?
Absolutely! And if you have any questions about the code, let me know.. Good on your learning by yourself 
We all know that Adam is a Spring hater and a Java EE advocate. 
Performance over thymeleaf, not needing a build system plugin and scalac over twirl.
Again? They have been the default option for the past 15 years. And he doesn't even mention tag files which are way faster and easier than tag libs. Of the last 50 or so java projects I've done in my lifetime only one didn't use JSP.
The answer is no, things like angularJS will push templating away from serverside rendering.
So what? There's plenty to hate about both Spring and Java EE. 
You are a bad man and a crook. Sincerely, Spiro Agnew
I agree. $70 is probably the right price point... 300+ is a nonstarter for individual.
Personally, would look at http://www.sonarqube.org/. It gives alot more than just code coverage. Available from maven and gradle(ant too but a step in the wrong direction IMO) +1 on proper build if there is not 1, maven or gradle tho WRT to gradle and netbeans I have found the plugin terrible slow on my home machine, but I am not absolutely sure it's the plugin as ubuntu grinds alot lately. Apologies for the aside :-p
The article said the FacesContext and component are rarely if ever needed for the actual conversion. This is indeed true. In the case of JSF, a JSF provided Converter can call through to a standardised converter. If a conversion error would occur, this provided converter can use the passed in context and component to register the conversion error. Unified validation (bean validation) is integrated into JSF in pretty much the same way. For the other case the new spec may introduce both returning and streaming converters to better support those specs utilise streaming today. 
There's no "back to" as most people are using serverside templating because it's by far the superior option.
JClouds is great, but it's not really the service-independent API that I think it claims to be. So moving from say AWS to RackSpace isn't exactly straightforward, whilst it's 'streamlined' each cloud provider is a different implementation within JClouds.
Things like Angular are only said to do that because HN talks about it today and people like you just parrot that. When really working with Angular you'll come across plenty of nasty issues that'll make you scream in agony. But hey, HN talks about it, so it's cool and will be the tech that pushes everything away, right? (Just as ruby on raiks would, and then python/django and then Scala/play and then Node.js). Everytime HN is sure that X will replace everything and next year there's always Y and people using X are behind.
JSP is much faster and allocates orders of magnitude less short lived objects during request processing. The disadvantage is that JSP has scriptlets which will always lure one silly developer to put true business logic inside a JSP (and duplicate it to tons of other JSPs). JSP also doesn't have the nice templating features that Thymeleaf, Facelets, etc have.
Thanks for the answer! I've updated the original post with some more information (Java 7, only project file, we got a "piece of code from our client"). Keep in mind that all of this is new for me (As I said, not the jUnit part, but all the coverage measurement), and the people at my company don't even know what ant is (I know what it is, but never used it personally), so we are in a kind of "if our custom installation breaks, we are all fucked" situation, and that's why I want to understand what the hell I'm doing. For what I see, first I need to get the project building with Maven, then integrate it with JaCoCoverage, right? There's somewhere where I can get some knowledge about Maven (besides wikipedia)? 
I updated the original post with a bit more of info about what I (guess) I'm trying to do.
Actually, JSP has a very nice templating feature called [tag files](http://docs.oracle.com/javaee/1.4/tutorial/doc/JSPTags5.html). Makes tools like Tiles or Sitemesh unnecessary.
Please try AngularJS before going back to JSPs. Once you really taste it, there is no going back to server side rendering.
Cool new frameworks/libraries: * [spring boot](http://projects.spring.io/spring-boot/) (fantastic and productive web framework) * [spring loaded](https://github.com/spring-projects/spring-loaded)/jrebel (productive code reloading, better than hotswap) * JavaFX 8 (gui), * [libgdx](http://libgdx.badlogicgames.com/) (cross platform mobile/desktop game development) * [robovm](http://www.robovm.org/) (ios development in Java) * Java SE embedded 8 (normally I use for rapsberry).
It should be "Db db = ..." Which example does have "OhmDB db = ..."?
The license salespeople won't be able to lock you in to their legacy products, if you just go with mainstream HTML + JS + JSON/REST, so they'll try to protect their markets by pushing the terrible component model stuff on people who don't know any better.
But it doesn't have anything like the Facelets templating client, where a page references an existing template and fills in the blanks.
If you want to *find out at some point in time* whether or not the box is currently checked, use the value of myCheckbox.isSelected(); (Mind the [threading](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/), though. Don't work with Swing components outside the AWT thread.) If you want to be *notified* when the state of the checkbox changes, you have to add a listener: An ActionListener would be triggered if the user clicks the box. An ItemListener would be triggered when the state of the box changes, no matter if it was the user or if the state had been changed programmatically. I guess you'll use the former, but you'll have to decide that yourself. [This](http://stackoverflow.com/a/9883541) example demonstrates the difference and also how you can distinguish in the event between the box becoming selected or deselected.
Tag files make everything so easy. They are like some secret feature even though they're 10 years old and work perfectly. I guess Oracle has been pushing JSF instead for whatever bizarre reason. 
This is not the mainstream choice. In fact, it's very impractical for many sites. Realistically both with exist side-by-side for different types of sites.
* /r/javahelp * Read &amp; respect the posting guidelines there. Be sure to ask a *proper* question. As it is now, it seems you just want Reddit to do your homework for you. Instead ask a specific question, tell us what you're having problems with. You'll never learn Java nor other programming languages nor *anything* if you just get other to do your homework. 
I don't know what an HN is, so I don't really know how I'd parrot him. I actually came up with that conclusion on my own after seeing many big companies do the switch, and using it myself. I am aware of the issues of angular, but honestly I'd STILL take them any day over the old way of cobbling together complex UI systems with jquery, or messes like JSF components. And note I didn't say angular but "things like angular": ember, backbone, meteor, etc... The direction they are all going is superior, making both serverside and clientside code easier to maintain for data driven development.
Beautiful post.
I don't know where you're doing your development, but I've been just consulting at a huge governmental agency (which some would not necessarily consider to be at the very forefront of innovation) which set this architectural policy about a year ago, and has done all their investment since in this manner. REST/JSON APIs for data and apps. Contractors offering JSP/JSF haven't really had a good time on non-legacy projects.
Most intense crash-course ever.
[Here's a lesson on recursion if you'd like](http://www.reddit.com/r/java/comments/2d2nma/java_programming_tutorials/cjlids1)
&gt; set this architectural policy about a year ago Ugh. Setting architecture by policy is such an antiquated way of working. It's ironic that they would use a 90s management technique to dictate cutting edge technology. The problem with every technical debate (like JSP vs JSF) is that different problems call for different solutions. If your site is more than 30% static content, it will be worth your while to at least allow those parts to be templated server-side. In my line of work, JSF is usually a non-starter because we do highly customized UIs. Using any decent MVC stack (we're usually Spring) you can just as easily expose your models with a REST view and templated view. Then we can choose whether to do JSP, JSON+client-side views, or even a hybrid on a page by page basis.
Bezos gets away with it because he's Bezos. It certainly seems to have chafed Steve Yegge.
Programming pure JSP always frustrated me because you have to take care of everything. I prefer widget libraries such as PrimeFaces. Nowadays there are nice client-side widget libraries such as AngularPrime and Kendo UI (and many, many others). Adam's point is things like this (and the power of HTML5 in general) will convince many developers to abandon JSF/GWT/Vaadin/whatever in favor of simple JSPs. Sounds convincing to me.
Just like nobody thinks they chose coca cola because of any commercial they ever saw. Keep on dreaming dude ;)
Funny, this is exactly what I did!!!
Nah I think I chose coca cola because i've done objective studies between coca-cola, pepsi, and RC Cola for many many many many months. You're the one dreaming if you think the choice is purely based on hype.
Yes, I have written one
The problem is that there are several interfaces to implement here, not just one. 
JCP isn't only about EE... In fact, it's about way much more than EE ... ;-)
If you really want to make something out of your resume, it's not certification but more of experience on projects. Create your own project, contribute to the community, put your project online for people to see.
There's parkNanos since JRE 5: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/LockSupport.html
If you don't like catching the exception, create a utility method which takes care of that for you.
The first question is: Why do I need to block? There are many many answers depending on what the reason is. If you waiting for another thread to complete some work some possible options are: * Object .wait() and .notify()...allowing one thread to block on .wait() until another thread does a .notifyAll() on the same object * You can also use a Lock Condition to do similar semantics as described above. * Maybe you should submit the task to a thread pool, and get a returned future. You can then use a .get() to block till the task completes. If your waiting for something in unit test my library "Threadly" offers a couple options: * AsyncVerifier: http://threadly.github.io/threadly/javadocs/2.4.0/org/threadly/test/concurrent/AsyncVerifier.html .... this class allows you to verify using asserts actions which happen in different threads, and the main test thread blocks on .waitForTest till the thread signals that it is complete * TestCondition: http://threadly.github.io/threadly/javadocs/2.4.0/org/threadly/test/concurrent/TestCondition.html ... This is an abstract class where you must implement the .get() function which is pulled regularly to know when a condition is done and ready to continue the test. You block by calling .blockTillTrue()....which if it never becomes true it will throw an exception (thus ensuring that the test will eventually complete). Long story short, Thread.sleep screams race condition. It is something that in general should be avoided at all costs. You should consider your specific situation, and figure out the best way to block _only_ as long as necessary, and no longer. Hopefully that helps, feel free to ask any questions you might have.
It should be worth noted that catching the InterruptedException resets the threads interrupted status. And thus when this returns the interrupt is not handled....This can be problematic if your trying to gracefully shutdown or stop threads.
At least I answered OP's question directly, instead of starting some condescending lecture (conveniently publicizing your Java library).
That's true. The [link](http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html) in the method descripton thoroughly explains those concepts, if anyone wants to add that feature.
Warranted, I just don't think using Thread.sleep is the right choice like 90% of the time. And parkNanos can be even more dangerous. So I just thought it would be important to point those details out. I definitely was not intending to be condescending....But this seems to be a common mistake made by many early on developers (IME).
That's fine, I guess. This thread has 3 kinds of answers: * Your question is wrong * Here's a complex and potentially buggy workaround * Direct and simple answer I'll let you guess which one is downvoted to oblivion. So, yeah, I'm unsubscribing from this place.
Guava has a method for 'sleepUninterruptibly': http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/util/concurrent/Uninterruptibles.html#sleepUninterruptibly(long,%20java.util.concurrent.TimeUnit)
still not sure why you require Thread.sleep(); but... I like ExecutorService for managing threads on the quick. No need to create a run() method, a start() method, or put in your class "implements Runnable"/"is Runnable", etc. etc. ExecutorService: http://tutorials.jenkov.com/java-util-concurrent/executorservice.html
New account posting that superfluous site again. Guess who it is. I hope people report this crap like I do.
Awesome, thank you! Although, I'm assuming [http://docs.oracle.com/javase/8/docs/api/](http://docs.oracle.com/javase/8/docs/api/) is the updated one? 
Download the Java docs http://www.oracle.com/technetwork/java/javase/downloads/index.html (about below the middle of the page) and tell your IDE where they are. If you just put them next to the src.zip (which btw. contains the source code) into your JDK installation, IntelliJ IDEA would find them (and the src.zip) automagically, but you can also tell Eclipse where these things are. In the IDE, you have a complete list of all classes and their members on the left side, and now that you also have the documentation, you're omniscient - if you take the time to read.
Hey, Mister or Mrs. You are doing this not for the others, but *only for yourself*. That is just like email spam that tells me how to not be fat. No one wants that crap, so go away already and rethink your life.
Thank you for imparting some of your omniscientness to me, oh king_of_the_universe 
My pleasure. (I hope you didn't mean that to be a snarky response, as I didn't intend "take the time to read" to be snarky. If you did, no harm done - just know that I meant to inform, not to give you a slap in the goodbye.)
Nope, it was just a joke on your username
Correct. Sorry for the old link. I haven't switched to 8 yet.
OCA is the first one. OCP is after that, then OCE I think.
I like the cola example above, as it's pretty spot on. You're probably being sarcastic when you say you did months of studies. While there may be exceptions for specific goods, on the whole everyone (you, me, all others) are incredibly influenced by commercials. We are social animals and we have an instinctive desire to please the group. This is probably not the place to discuss this in depth, but remarkable experiments have been done (as where members of a group gave a very obvious wrong answer just because the others in that group who were conspiring with the researches gave that wrong answer). To think your choice of everyday brands is not influenced is naive at best. As said, there are exceptions, but the funny thing is that a very significant number of test subjects when asked think -they- are the exception (while research clearly indicates they are not). 
The official tutorials are good too. They aren't references, but they show you how many of these classes are supposed to be used together. A big part of learning all this stuff is understanding how these things are made combine, the use cases for them all, and so forth. The tutorials do, IMO, a pretty good job at that. http://docs.oracle.com/javase/tutorial/ Good luck.
AngularJS is quite nice actually - except for the fact that you need to write JavaScript.... ;)
&gt; What external library will be interrupting your thread without you instructing it to do so? Obviously, I don't know all existing libraries down to the very last line of code.
You don't seem to get the fucking message, Mister yet-another-new-account. Let's just say that this doesn't look good in the report I have here in my little book, the "Book of Life". regards God
By the way, about the author: https://www.apress.com/index.php/author/author/view/id/1866
I would say it really depends on what stage you're at. If you've been in a job a few years, I'd agree with you. The likes of myself however, just out of uni, there's a lot I am still unsure about and the Java SE 5 and 6, Certified Associate helped me understand the basics a good bit better. At this stage though price could be a big factor too.
At the moment, I need to wait between System.out.println()s for presentation. I'll eventually need to pause it with game logos and for appending strings into JComponents.
&gt; But you must know at least one since you wrote that code. That logic is not sound. &gt; I'm struggling to even imagine such library, My imagination doesn't have trouble with that, though. &gt; since I certainly design my code with the assumption I do not assume, I protect myself, sanitize my input, etc. I would like to know why you are so suspiciously insisting. Is it that you feel that you discovered an opportunity to drive someone into a corner and then to slay them? I think that this is what you are trying to do.
You can try experimenting with Java SE embedded 8: http://www.oracle.com/technetwork/java/embedded/embedded-se/downloads/javase-embedded-downloads-2209751.html Use it with compact profile to minimize footprint: * http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html * https://blogs.oracle.com/jtc/entry/a_first_look_at_compact Make sure you code your application as memory efficient as possible. One of the easiest way is to use [Trove](http://trove.starlight-systems.com/) for collection. Another way is to use Python if your application is more I/O oriented where performance didn't really matter.
 "C:/Users/JC/Desktop/JC.txt".contains("DrawFps") This is a funny bug :)! Java converts the "C:/...JC.txt" string in your code to a String object and then calls its *contains* method. It is not opening the file and looking at the contents! For this you will have to do something like [this](http://stackoverflow.com/questions/326390/how-to-create-a-java-string-from-the-contents-of-a-file) and then calling *contains*. 
Your not reading the file to check if the value is already saved. You must either read it first (and thus conditionally write the file if it is in there or not). Or you need to pass in a false, and not append (assuming this is the only value saved in the file). In the future please use /r/javahelp
&gt; In the future please use /r/javahelp They did. 54 minutes ago. http://www.reddit.com/r/javahelp/comments/2d5im2/check_box_help/ A little impatient.
You don't automatically get a console. If it's a console Java application, you have to start it from the command box. Try this: * SHIFT + RIGHT MOUSE BUTTON in the file explorer window that has your runnable jar. In the menu, select "Open command window here". (This works in Windows &gt;=7.) * type "java -jar theNameOfMyJar.jar" - Entering the filename will be easy because you can just press TAB a few times and/or enter a letter or two first. Press ENTER. (Btw. "java" (which is "java.exe") is for console applications, "javaw" is for gui applications.) This should run the jar and show you your output. There are libraries that allow to open a console-like window when you use the doubleclick to start the jar, but I don't know if there is a way to do that without a library.
&gt; Or is it possible to write in the code that it needs to run via. command prompt? I'm not *sure*, but I think that this option doesn't exist. &gt; Do you know which library it is that can open a console-like window? I assume I just need to import it? I haven't used such a library yet, so I can't say. You'd need to add it to the class path (ideally via an IDE), then use its functions like the respective documentation tells you to. The first two Google hits are: https://code.google.com/p/lanterna/ (Supposedly very good, I have heard good things about this one. But it's *very* capable - maybe overdoing for your purpose.) http://sourceforge.net/projects/jline/ (No idea. Maybe what you need.)
Cool. I wasn't sure how memory efficient Java or Java applications were. I was afraid someone was going to tell me to code it in C++ or something. 
You can use Launch4j (which is extremely capable) and other such tools. http://www.reddit.com/r/java/comments/2ar9wj/native_launcher_for_java_applications/
You can't convert a .jar into an .exe, but you can place a JAR within an executable wrapper. http://launch4j.sourceforge.net/ http://jsmooth.sourceforge.net/ Here's a lengthy article on the topic too http://www.excelsior-usa.com/articles/java-to-exe.html
That's not a problem, that's a challenge! Find an interface or maybe set of interfaces that works for everything. For instance String to Object converters are a subset of Object to Objects ones, which are a special case of generic S to T converters. If the standardised interface is a little different the spec can use wrappers or adapters.
I just ran a simple test (I did a couple since I am interested in the accuracy of the individual methods presented to block your thread for a defined period.) LockSupport.parkNanos performs exactly the same as thread sleep (in terms of the accuracy of the sleeping period.) However, ScheduledExecutorService.scheduleAtFixedRate has a fairly large error margin += 10ms at a sleep of 25 ms and when you schedule at intervals of something smaller (like 5ms) you get a sleep around 0 - 37 ms in delay My point being that the two have different use cases. ScheduledExecutorService seems to introduce significantly larger error margins as your sleep time decreases. In a active render loop (where you calculate your approximate sleep periods to limit the FPS) having an error margin that large makes frame limiting completely impossible.
Please stop pushing your website, [it's considered spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F).
http://stackoverflow.com/questions/9776465/how-to-visualize-console-java-in-jframe-jpanel
[Lesson: Concurrency](http://docs.oracle.com/javase/tutorial/essential/concurrency/)
Read through [this](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683) entire book before your program anything big.
There's a Data Structures and Algorithms class on coursera taught by Robert Sedgewick, here's the booksite: http://algs4.cs.princeton.edu/home/ There's a good chance this is the book you'll use in your college DSA class(check syllabi from old classes to verify). I'm currently taking DSA over the summer quarter. I'm also reading Thinking in Java by Bruce Eckel to make sure I understand generics, interfaces, and the like.
Just make a .bat script to launch the jar and use a converter to turn that into a .exe. That's a little easier than the .jar converters. 
thanks alot guys. i know i should read thru all the official Oracle docs and tutorials...but theres so many I dont know where to start. should I just read them all in order or...?
When you double click the .jar it only uses your file associations to launch java.exe or javaw.exe with -jar c:\file.jar. eg: "C:\Program Files\Java\(version)\bin\javaw.exe" -jar c:\games\simcity\simcity.jar
The one on generics is really good. So are the ones on java 8 Streams.
My loop excludes the time spent printing to the console. It literally measures the intervals spent sleeping exlusivley - which is important because with something like a frame-limitter (or a simulation) the time spent executing the render or step routine is variable - so you must sleep for (ie 60fps, so thats one render per 16.6ms): 16.6ms - [time consumed by render/step routine] Ie, it is critical how _long_ you sleep for since your intention is to fill the gap of cpu time not consumed by the simulation. If you need to consume more of that gap to render at a higher frame rate, you shoudn't be sleeping
Ah, I understand now. Thanks for explaining that. That explains the results I was getting in my test-case (since ie println does incur a overhead.)
I use John Purcell's tutorials from his website caveofprogramming.com (also hosted on udemy). He has a huge list of short topics that he covers VERY well. There is a basic Java series that goes up to and well beyond arrays, and a Java swing series that is also super valuable knowledge plus many more.
Even if it's almost 6 years old?
Yes, almost everything in this book is still relevant. Defiantly get it, even if you plan to only read parts of it. You will be required to have a comprehensive knowledge of Java already.
Use a BoxLayout with a vertical axis, and set the preferred size for your buttons. http://docs.oracle.com/javase/tutorial/uiswing/layout/box.html
Thanks, this is working but it is putting it in the middle of the JPanel. How can I tell the JPanel (to which the GridBagLayout is being applied) to begin at the very top rather than in the middle. The anchor doesn't seem to be doing anything.
Thanks for the advice. As someone that is scattered all over the Java map, I need to regroup and focus on the intricacies (and patterns) that comes with the territory. Much appreciated.
IMO, very few read docs especially SDK docs. You can read through effective Java or design patterns but to get anything practical from them is , I think, very hard at this time. You should try to write some code, build something that you need, may be you need a todo list, build it. Do your thing, learn more, blog your findings. Then build some more, explore libraries, look at github and see what people are building in Java right now. Point is that you need to write your own code, make mistakes, make a lot of those, get stuck with tools, get stuck with horrible documented libraries that's supposed to do something for you, read a lot of code. Then you can read the next-level books on effective Java or gof design patterns as you will need some experience writing or looking at bad code to learn the good way to do it. 
Cool, I'll keep that in mind.
Java doesn't move *that* quickly.
How are you representing the shape? If you are using something like [`Path2D`](http://docs.oracle.com/javase/8/docs/api/java/awt/geom/Path2D.html) then it has the `contains()` method for testing if a point is inside or outside.
oh jeez, i hadn't gotten there yet. I wanted it to be a shape that the user could input. Is that possible with Path2D?
This is the advice I give every person who asks this question. Also this book: http://books.google.ca/books/about/Design_Patterns.html?id=6oHuKQe3TjQC&amp;redir_esc=y
Well thanks fone.
take a look at the [`Shape`](http://docs.oracle.com/javase/8/docs/api/java/awt/Shape.html) interface for a list of all the built in shapes. All shapes will have the same `contains method to determine if a point is in the shape or not. Path2D can be used for freeform drawing.
If python is an option, I would look for John Zelle. http://www.amazon.com/gp/aw/d/1590282418?cache=ce3142468b03545c10a957e22cf7266d&amp;pi=SY200_QL40&amp;qid=1407729669&amp;sr=8-1#ref=mp_s_a_1_1
This is a wide open question. There are APIs that will read news feeds from different sources. How do you want to present the data? Web page? Mobile device? ESP? Email? Snail mail?
Is there a good third party random number generator? (Best I have seen thus far is C++11's)
What if you wrote a number generator such that you got a random int between 1 and 1000, divided by 1000, and used the random floating point value to give noise to the least significant digits?
I wonder if the facts explained by the post also apply to SecureRandom, which is also part of Java's default libraries (extends Random). It also has ".getInstanceStrong()", which returns an even more secure (and even slower) generator (on Windows 7 and 8 with Java 8).
I don't know for certain, but my sense is that it shouldn't cause a StackOverflowError. I've done work in the past where objects have contained circular references and I didn't run into any issues. That being said, that was done with SQLAlchemy on Python, so I can't speak to whether it's the case with common Java persistence layers (e.g. hibernate). In fact, in this case I'm not sure that I'd even bother with an ORM persistence layer. Now that I re-read your response it doesn't seem that you were implying that you wanted to use an ORM specifically. Writing SQL to handle this without overflowing would be pretty trivial. The only slight challenge is you would likely have to explore all paths out of an object, insert each object into the table (so they have an id) then double back and set up your references. I'm sure there are other algorithms that are equally or better suited to the task.
as /u/coolplate suggested, pick up an opensource project and do something real: https://openhatch.org/. Only reading the stuff won't get you anywhere.
True, but that's the name of the game lately. The altenative is worse UX.
1) http://www.oracle.com/technetwork/java/javase/downloads/index.html You need the JDK (8), and the "Java SE 8 Documentation" further down the page. Install the JDK, then copy the documentation zip into `C:\Program Files\Java\jdk1.8.0_05` or whatever your precise installation folder is (if you're even on Windows). 3) Absolutely. Do get an IDE. Not using one is insane. Download either [Eclipse](https://www.eclipse.org/downloads/) "Eclipse IDE for Java Developers" 64 or 32 bit (Always go for 64 bit if your system can handle it.) or [IntelliJ IDEA](http://www.jetbrains.com/idea/download/) "Community Edition". I heartily recommend the latter and can in comparison not in good conscience recommend the former, I also say that it is *not* a matter of taste: To my experience, the latter is just too much better to let taste play a significant role, e.g. you don't even have to tell it to use the JDK documentation if it's in the place I told you to copy it. But it's up to you. And please be more willing to use Google, you'll need it *a lot* while programming, and it could have given you e.g. the JDK download link. Also, better subreddits for you: /r/learnjava /r/javahelp /r/learnprogramming
Mobile device. 
As long as your learning something, you're learning. Some possibilities include: - books as others have mentioned, and doing any exercises in them. - reading through tutorials - implementing an actual program that does something personally, I'd go with option 3 and pick up the pieces from the other 2 as you go. As that gives you a reason to learn things, and them implementing them, makes them stick a lot more than just reading a book, but YMMV.
This happens. My recommendation is that you implement the Externalizable interface, and define your methods to read/write. It is less complex than to add a dependency to a database just because you don't feel like writing a few lines of code. Think about it: in a database you would have something like Node | Linked_to -----+---------- A | B B | C C | A You'd need code to produce this data, and then read from it anyway. Just add it to a map or something instead, then serialize the map.
I use [this](http://cs.gmu.edu/~sean/research/mersenne/MersenneTwisterFast.java)
Two choices a) use a packer to pack the jar into an exe that loads the jvm and passes the jar to it. b) grab a native compiler that will produce a binary specifically for the platform targeted. 
1) See /u/king_of_the_universe 2) If you want to handle incoming HTTP requests and handle them any way you want, I have good experience using Jetty (http://www.eclipse.org/jetty/). 3) Yes, get an IDE. I highly recommend either Netbeans (https://netbeans.org/) or IntelliJ's Community Edition (http://www.jetbrains.com/idea/download/). I will not recommend Eclipse to anyone, but in the end it comes down to personal preference. ~~You should be aware that IntelliJ does not allow for commercial development with the free license.~~ Edit: My comment on the Community Edition licensing was wrong, as pointed out below.
&gt; You should be aware that IntelliJ does not allow for commercial development with the free license. **Wrong!** Please link to your source. Mine is this: http://www.jetbrains.org/display/IJOS/Ultimate+Edition+vs.+Community+Edition &gt; The Community Edition is covered by the Apache 2.0 license https://tldrlegal.com/license/apache-license-2.0-%28apache-2.0%29 http://www.apache.org/licenses/LICENSE-2.0.html
Do you want to display the information on Android, Apple and Windows devices? You can either develop apps for each platform (there are tools that help with that) or simply develop an HTML5 website aimed at mobile devices. Depending on the kind of webservice you are looking at you might only need JavaScript.
*(Best I have seen thus far is C++11's)* Apparently not in GCC 4.8 or Boost.Random: http://mumble.net/~campbell/blag.txt *Is there a good third party random number generator?* There are generators in commons-math. Unfortunately, it seems to be broken as well: https://svn.apache.org/viewvc/commons/proper/math/trunk/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java?revision=1612042&amp;view=markup public double nextDouble() { final long high = ((long) next(26)) &lt;&lt; 26; final int low = next(26); return (high | low) * 0x1.0p-52d; }
Uses the same method criticized in this article. From nextDouble(): /* derived from nextDouble documentation in jdk 1.2 docs, see top */ return ((((long)(y &gt;&gt;&gt; 6)) &lt;&lt; 27) + (z &gt;&gt;&gt; 5)) / (double)(1L &lt;&lt; 53);
I hope that JSP will be replaced by more modern template engines like [Rythm](http://testng.org/doc/documentation-main.html). The syntax is more handy and Rythm is not tied to Servlets or the web at all.
I am going by this chart: http://www.jetbrains.com/idea/buy/license-matrix.jsp Under "Purpose of use" for the Community License the chart says "Non-commercial, for development of open source projects".
The Java Random's nextDouble() is incorrect, because: - It only ever returns a small subset of possible numbers [0,1) (approximately 1 in 500). - IEEE double numbers get more dense as they approach 0. There are as many valid values in [0.5, 1) as there are in [0.25, 0.5), as there are in [0.125, 0.25) and so on. However, each subsegment should be given equal changes. 
&gt; Under "Purpose of use" for the Community License There is no such section in the chart. The chart is exclusively for the various ways to license the Ultimate Edition.
&gt; Under "Purpose of use" for the Community License the chart says "Non-commercial, for development of open source projects". It's incredibly confusing but that's not the community edition, it's the ultimate edition with a specific "only use for open source" license. A lot of people make this mistake and Jetbrains doesn't work very hard to correct that :)
&gt; I was wondering, how do people build applications that show stuff like, the current condition of the weather, or traffic jams within the area? I'm just interested on how someone could build an application that provides you with updates of current events. There's two components of that problem: 1. Getting the data into a 'database' somehow. 2. Displaying that data in an application. 2 is pretty straightforwards: there are MANY public API's for all kinds of data. You simply to a GET request to an URL, get data (often JSON, easy enough to parse in Java) and display it in whatever application you want. 1 is the hard part: most of this data is produced somewhere somehow (traffic data is a combination of road sensors and cell phone information, weather data comes from public or commercial weather services which create this from forecasts and / or satellite and radar information). Most developers don't have to worry about this though since they only need to do 2.
Ah, thanks, that makes sense. I was curious how JetBrains would reconcile that and the Apache license. 
If you chase links you get to http://www.jetbrains.com/idea/buy/choose_edition.jsp?license=OPEN_SOURCE which is the free (beer) license for the ultimate edition of IDEA for people who are developing free (speech) software. This differs from the community edition.
An excellent recommendation, I'll have to pick that up myself.
You may want to look at the [XorShift](http://xorshift.di.unimi.it/) family of generators. They're usually faster even than ThreadLocalRandom, and produce fairly high-quality output.
I second this. The Head-First books are amazing. Almost like a hipper version of a "for dummies" book. Good luck to your cousin, tell him to hang in there. Eventually the hard stuff will make sense :D
Same problem: public double nextDouble() { return ( nextLong() &gt;&gt;&gt; 11 ) * NORM_53; } The problem discussed in the article is not the quality of output of integers, but floating-point numbers.
Maybe the author does not understand the Double type. All exact values cannot be represented by a double value. A double value should not be considered as an exact value. That is why for instance the Junit assertEquals method also takes a delta parameter. Random does what it says, it does not say it will output doubles with randomly generated bytes but the the value is pseudo randomly distributed. The reasoning is flawed, of course if double values are more dense when approaching zero and we want an uniform distribution, then generating a random double is not about generating random bytes.
Use Google @AutoValue https://github.com/google/auto/tree/master/value
Thanks for pointing that out. Still, there are many applications where the problem the linked article discusses is not an issue. And /u/zzing did not ask specifically for a third party random number generator that solves the problem discussed in the linked article.
You don't unit test JSPs. They are a target for integration testing or functional testing. JSPs are tightly coupled to the servlet container.
Don't unit test JSPs. Cover it with functional and/or integration tests. Some form of Selenium should do.
Java (and OOP in general) concepts don't change too much. The main things that change are Java versions that include tweaks to the JDKs.
This seems to seriously suck for those who adopted the tool. Anyone have some more detailed insight into why it didn't really work the way they had envisioned it would?
Really though, a lot of these questions are bad or poorly written.
&gt;learn not just to make my colleagues miserable(that's just a fringe benefit) what? besides the point that unit testing isn't what you are after why would having someone write tests make someone miserable. I would be happy if we had more time for testing where I am at. 
I'm very surprised that a product like this is not viable. Perhaps it's just not as big a success as they were expecting it to be and would rather focus on something else? It's funny that they mention that they're biggest competitor is usually a few shell scripts and a wiki, because I honestly don't think it's that much work to write these tools in-house to fit each company's individual environment. They may not be as sleek and generic, but they don't need to be... Still, I'm surprised it didn't pan out.
[0.5, 1) should have an equal chance of being hit as [0.25, 0.5)? As you pointed out, the distribution of double values increases exponentially as you approach zero, but 99% percent of programmers want nextDouble to have a very near equal chance of returning a value from [0, 0.5) and [0.5, 1.0). If nextDouble picked at random from the set of double values in [0, 1) with an equal chance of being picked for all values in the set, you'd have nextDouble only returning extremely small doubles most of the time.
If you are adament about the certifications, you should get Java 7 certs. If goes, OCJA, OCJP. The problem with the certifications is that they really just expect you to be a walking compiler. The questions are designed in such a way as to lead you to one answer when that isn't what you should be looking at. It really is just a money grab. Honestly, I wouldn't be shocked if the next round of exams had a perfect set of code with the answer "Won't compile" and an explanation of "the wrong character set is used, even though there is no indication of that in the materials presented other than this 'e' character having a slightly different shape than the 'e' it should be". Experience and portfolio is king. Having the certifications on your resume is nice, but really, you'll take the test in the tests mindset once and then never think that way again.
The thing about downloading stuff with Google is that they have advertisements that come up with search results anymore, and its hard to tell which is the correct download link. No one wants their development computer to get a virus from fake advertisements posing as a download link. Thank you for the information.
I had always thought of doing this and just never have. Your comment makes it easy and so I shall save it for home time!
Yeah, it was bit too long, but informative nonetheless.
Is it still experimental? Seems like he's not dedicated to continued support of the J-Smile project. It would be nice to see him keep it going if he can.
I'm having some trouble testing your code, could you help out? class RNG extends java.util.Random { def myNextDouble(): Double = { var significand = 0; var divisor = 1; var continue = true while (continue) { var leadingZeros = java.lang.Long.numberOfLeadingZeros(significand); var usefulBits = 64 - leadingZeros; var pendingBits = 53 - usefulBits; // We need 53 useful bits if (pendingBits == 0) continue = false else { var bits = Math.min(pendingBits, 30); // 31+ overflows below significand = (significand &lt;&lt; bits) + next(bits) divisor = divisor / (1 &lt;&lt; bits); // Keep track of total shifts done } } return significand * divisor; } } This code does not seem to terminate (unless I replace the pendingBits equality check with &lt;= 0).
this was posted a few months ago: http://www.javacodegeeks.com/2014/04/java-interview-questions-and-answers.html. In my opinion more in depth and better explanations.
Shame you've been downvoted as most of the advice is too advanced for a beginner! Personally I would do what krishnabhargav says, but also get 2 beginners books. I've always found that when I get stuck on one, the other invariably steps in to assist and fills in other gaps.
Its alright..don't mind being downvoted..that comes with any advice but I am glad someone agrees with me. As for beginners books, Bruce ekcels thinking in Java really helps you think oo...
I think you are confusing unit testing with functional testing. They are often written using the same framework (JUnit or TestNG) meant for unit tests, so maybe that's the source of your confusion. I suggest you use [TestNG](http://testng.org) and [WebDriver](http://docs.seleniumhq.org/projects/webdriver/) for writing functional tests.
I am not good at Scala but I think you are using the wrong types for divisor and significand. Try using: var significand = 0L; var divisor = 1.0; 
There shouldn't be any code in a jsp. Take the code in the jsp and put it in a unit tested taglib and other classes, then unit test those. All that should be left in the jsp is html. You can system test that with selenium or the like.
The only interesting jep imo is [JEP 201: Modular Source Code](http://openjdk.java.net/jeps/201). jdk9 isn't going to be as exciting as jdk8
It isn't the best sounding solution ever but - by installing Ubuntu?
Android.
That was what I was missing. According to my quickly put together [microbenchmark](http://ideone.com/MTi6JJ), the distribution is pretty much the same as the old method, and the new method is usually around 2-3x slower than the old method, but both seem to take in the hundreds of nanoseconds range to generate a double so whether or not that slowdown matters is pretty questionable.
Look up chrubuntu. Unfortunately, you're going to have some trouble if you don't have an Intel processor in your Chromebook.
Yes, yes it will. 
Just last week I was recommending that our tools management team should take a look at a great example of how deployment should be done. I hope that some of the huge amount of work they put into this is salvageable for other projects. If they ever consider selling it at a reduced price in a basic bugfix-only package, I'm sure there would be plenty of companies willing to give it a try.
It should! If you don't mind me asking, what's the model? EDIT: http://www.reddit.com/r/chrubuntu
man I really wish they could catch up on the BASICS: a) multi line strings (please, for testing of JSON, please) b) indexers, it's time for list[0] not list.get(0) or map[key] not map.get(key) c) integrate Lombok into the JDK Lombok should stop being a hack it should be part of the Java language With Lombok we reduce our code verbosity by 90+ % on all POJOs. It's amazing such an incredible library is totally ignored by the JDK team
OP is running Intel, but if he were using ARM, wouldn't the official [Java 8 from Oracle](http://www.webupd8.org/2013/12/oracle-java-ppa-updated-with-arm-support.html) (not OpenJDK) work just fine? From what I understand, [Eclipse works fine on Raspberry Pi](http://eclipsesource.com/blogs/2014/05/01/programming-the-pi-with-eclipse-and-java/), which is also a (less powerful) ARM machine.
chromebook hp 14 c001ea
so I should be able to download eclipse without Ubuntu?
2) See #4. 4) Learn [Gradle](http://www.gradle.org/) (or Maven) build tool. Any good IDE will have great support. Use a [web server plugin](https://github.com/bmuschko/gradle-tomcat-plugin), making #2 unnecessary. 
I put Eclipse on my acer c720p using the crouton method. It has worked very well and was easy to install on Ubuntu. All told it took about 3 hours to do
So I Googled, "weather.com public feed api" and found, http://www.weather.com/weather/rss/subscription/ Then I Googled, "java rss api", and found, http://www.vogella.com/tutorials/RSSFeed/article.html Then I Googled, "simple ticker android app" and found, http://stackoverflow.com/questions/7735394/simple-android-scrolling-text-ticker Who said programming is hard!? ;)
Item (b) is pure syntactic sugar. All that's needed is for the compiler to translate it to a method call. Scala has been doing exactly that since forever ago, and it's awesome.
Why waste time and effort on a lightweight JSON API, when good solutions already exist? That seems like something not needed for the core JDK.
I think eclipse would work fine on ARM, it's just harder to get ubuntu on the machine.
&gt; There are existing JSON APIs for Java. The most popular of these generally offer more functionality than the planned API and/or don't take advantage of Java 8/9 language and library features.
The list of [Unsubmitted draft JEPs](http://openjdk.java.net/jeps/0) (scroll to bottom) is also interesting..
I'd rather that the capability become available due to an extension of the language capabilities, than by way of extra "sugar" The java language has been, historically, largely free of such artificial sweeteners. Primitives being the exception, of course. Edit: also, "Scala does it" is not a very compelling argument, given the number of high profile Scala developers that have come out describing how unmaintainable Scala has become
Nonsense. The entire Java language is an "artificial sweetener". If you don't want any, write JVM assembly instead. More specific "artificial sweeteners" in Java include: * Autoboxing (translated to method calls on the box classes) * Generic types (translated to `Object`) * String concatenation (translated to `StringBuilder` calls) * Inner classes (translated to top-level classes with a reference to the containing object) * `import` * [Array initializers](http://docs.oracle.com/javase/specs/jls/se8/html/jls-10.html#jls-10.6) (translated to assigning values into the array one-by-one) * [Instance initializers](http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.6) (combined into a single block of code in each constructor) * [Static initializers](http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.7) (combined into a single method `&lt;clinit&gt;`) * Checked exceptions and `throws` clauses (which most other JVM languages rightly ignore, because checked exceptions suck) * [Default constructors](http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.8.9) (a `class` file containing no constructors cannot be instantiated at all; Scala uses this for its native singleton support) * Looping and branching statements `while`, `for`, `if`, etc (compiled to comparison and `goto` instructions) * `finally` ([compiled to](http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-3.html#jvms-3.13) a `catch` that re-throws anything it catches) * The `++` and `--` operators * [The conditional operator `?` `:`](http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.25) * [Compound assignment operators `+=`, `-=`, etc](http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.26.2) * Types on local variables (the JVM doesn't enforce them) * `switch` on strings (compiles to a series of `if`s, if I recall correctly)
How did you get them?
Most of those features are broadly useful. What do I gain from just adding special syntax to save 4 characters of typing?
Saving 4 characters of typing is pretty valuable on its own when you do it all the damn time. It also reduces syntactic noise, making the code more readable. One of Java's biggest problems is that it's *really* noisy. Shit like `public` and `void` is *everywhere,* repeated constantly. That's a lot of BS that one has to visually filter out to grasp what the code actually means. I like Scala because, among other things, it makes great strides in bringing that about. `public` is the default access level. There is a shorthand syntax for methods that don't return anything. Types can often be omitted (e.g. on variable/field declarations). Custom operators means I can define a plain old `+` method for a class where that would make sense, instead of having to say `add` everywhere. These features mean that poorly-written code is even harder to read, but well-written code is vastly easier.
Wot stop. String concatenation does wiggly woggly with stringbuilider? Since which version!? My book is so outdated ;_; maybe I'll just stick with the Oracle tutorial...
Someone posted here a while back about how java.net was offering stickers. They closed the form shortly after.
I'm a pretty fast typer, so no, saving 4 characters is not valuable at all, to me. I also disagree with the syntax noise argument. Apparently there are a lot of coders that are seemingly incapable of reading more than one character at a time, so things like "verbs" and "nouns" freak them out. Things like "public" and "void" are everywhere because they MEAN SOMETHING. What does this function return? How accessible is this function? I don't want to rely on front-loading myself with the quirks of the language to comprehend code. I want it spelled out so I can read it at 7am before I've had my first cup of coffee. Shorthand highly-symbolic context-crazy syntax is just too busy, to the point that I think that the verbosity of well-written Java code is a *strength* of the language, and not a weakness.
I'm not sure what jvm version they are using as the backend for scala, but I get similar results on my personal machine (i7 @ 2.7GHz - OpenJDK8 64). Both methods are too close to make a real distinction after warm-up, and they both run in about 20-30ns.
&gt;Shorthand highly-symbolic context-crazy syntax is just too busy, to the point that I think that the verbosity of well-written Java code is a strength of the language, and not a weakness. Agree so much. if i've learned one thing in my engineering career it's that pretty, elegant code is cool but rarely useful. Verbose, spelled out java code takes on an elegance of its own when you come back to maintain it in a year and you can figure out what the hell is going on
Awww man! I want a t-shirt! I got a weird car flag. 
The site has been back up for a few weeks : https://www.java.net/node/add/gimme-java
Oh, I didn't know. Not that I'd ever need any more. Ever.
I've been running elementaryOS on my Chromebook 14 for a few months now. Its absolutely fantastic. IntelliJ and Steam on a $200 device is amazing. 
*grabby hands*
Can confirm. I develop lightweight Java web apps on Crouton using a Chromebook Pixel. 
Plain old Gnome. With only a couple of tiny exceptions, it's an *extremely* productive environment.
Go to the link /u/InfoSec812 posted above.
Thank you, friend!
Yeah I got the flag as well, the t-shirt would have been so much cooler! 
It always helps when you have something to show. Participating on an open source initiative demonstrates you are interested. Reinventing some wheel out there (our own ORM for instance) just for the kicks demonstrates you are capable of doing something a little more complex than a login screen, and you do it because you like to solve problems. Creating a login screen (or any screen for that matter) demonstrates how good you are creating decent deisgns with consistent and usable user interfaces. In short: having something to show or to talk about helps a lot. It shows you like what you do. A question such as "What's something you did you are proud of" shouldn't be replied with a blank stare. If you did something, no matter how small, you at least can say something. I always prefer to put the candidate to code something. Not a pencil and paper thing but using a computer. I myself forgot how write using a pen a long time ago.... it's going to be painful and slow for no added benefit. "Here, there's a bit of code that looks bad, refactor it". "Get this data here and makle something appear on the screen", etc. I want to see how you structure your code to create a solution. If you are not experienced, at least that shows whether you are capable of doing something that works. Don't be awkward, don't look crazy. Control how much you speak. Answer the questions, but don't keep rambling there. But that's me. Many interviewers will give you stupid IQ tests or worse: ask things like "What is a class? How does it differ from an object" to someone who's been working with java since 2001 (gosh if I have a computer science degree it is implied I already know that)
Interesting, not quite what I was looking for but I'll keep it in mind. I currently work with clients and in a team where I'm a subject matter expert for just about everything for the team so it shouldn't be a problem for me, and I was in the military for 6 years... so talking to people and working in a group is not at all an issue for me, though at the same time I think it's a little ridiculous to base ones hireability on charm alone. Personally, being in a team environment I can tell you it is not fun to be training people(as I have multiple times) when they are personable and likable but ask you the same question(s) a billion times(even after politely telling them how useful Microsoft Onenote is) thus wasting my time and someone else on my teams time when they are too embarrassed to ask me again. Just my take on it as I also work with many brilliant but socially awkward people as well and would take 1 of them for every 2 scrubs we get. IMO you have to find a balance. Someone who is too charming, will charm their way out of work and create a lot of unnecessary resentment from the rest of their team.
Since version 5, when `StringBuilder` was introduced. Prior to that, it did said wiggly-woggly with `StringBuffer` instead.
Wore my shirt today, my wife laughed at me. Many of you may know the drill: "It's a cool design, but..."
On a high end laptop, eclipse can bog down pretty often using tools or even just starting up. Did you have to strip it down to basics to get decent performance?
Oh thanks... Maybe I should read things twice. 
is it free?
Generally I will target the job I am going for. If it says I need to know Swing GUI and MySQL database. I'll download all that stuff and cram learn it and I would write a little Swing GUI that connects to a database and loads/saves stuff (a proof of concept to myself that I can do it). That way you know when you get hired that you'll be able to at least do the basic requirements. If you are hired you'll no doubt come to the realise the scale of what you don't know and the key is to learn it as fast as possible so it doesn't become a liability. Don't just learn the little bit you need to finish the job - learn the entirety of it (as a homework task). After a while you'll run out of things you don't know and people start coming to you for the answers :) 
Well I accidentally just ordered some. I was testing to see if payment info would appear after clicking on Order Stickers. Turns out the stickers are free.
Unfortunately, I swim in the shirt
I don't quite recall. It was about the same day the link was posted last time
Thanks! For anyone else wondering, it takes about a month and a half (The last post was submitted on June 23). 
Using the IDE solves the write problem, but that still leaves the read problem. It's just frustrating to open a `.java` file and be greeted by two pages full of boilerplate. It's even more frustrating when you're quickly scanning through the file, and you can't find the little crucial piece of business logic because it got buried amongst all the other rubbish.
Where are you storing the table data? When you deploy the application you need the create table scripts because people who use the database for the first time won't have it. Unless you include the starting database inside the jar, but you won't be able to write to in (I believe).
There are no guarantees in life my friend... You ask for stickers, they give you what they feel like giving you... In my case, it was a car window flag with the Java and Oracle logos...
Fair enough :)
&gt; http://www.amazon.com/gp/aw/d/1590282418?cache=ce3142468b03545c10a957e22cf7266d&amp;pi=SY200_QL40&amp;qid=1407729669&amp;sr=8-1#ref=mp_s_a_1_1 And if that wasn't enough, you could still try http://www.amazon.com/Modern-Rustic-Homesteading-Greenhouses-Self-Sufficiency-ebook/dp/B00M8UFFT6/ref=sr_1_2?ie=UTF8&amp;qid=1407821257&amp;sr=8-2&amp;keywords=gardening
You better ask Andrew - I have not been in contact with him ever since he pointed me to his project.
Really? So there's no way to transfer a HSQLDB database to another computer and allow that computer to read it?
Did you honestly just say that you can't use Google to find the JDK?
&gt; switch on strings (compiles to a series of ifs, if I recall correctly) It actually compiles to switching on the hashcode of the String.
When I have had this discussion with folks my assertion has never been Oracle is killing Java. It's making it their own. Unfortualty many of the things they are doing is to support their own interenests in supporting their internal and external products. While this does improve the language to some degree and give it legs to the future I assert that Oracle also actively ignores the wider community for their own goals. As for profit company that owns Java it is of course a very sane move for them. The question I have always had is will it kill off a bunch of Java development in the long run. As the language gets more and more repurposed to support oracles plans I believe we will see the types of developers who support the language change drastically over time and a large group will abandon it all together given enough time. All that said, they still might not "kill" things, its just a very common possible scenario when a company starts building product for itself rather than its customers.
I'm working with AS3 Flash now. I used to use sockets back in the day and was happy, but Adobe changed some security along the way, so I can't use them anymore. All I can do anymore is do html gets, or some insecure P2P stuff, it is sad. I wish someone could help me do sockets with AS3 and I'd be happy.
What is the field *Name* under *Shipping Address* refering to? With *Street* i have enough.
&gt; I'm a pretty fast typer, so no, saving 4 characters is not valuable at all, to me. It's not about speed of writing, but about readability.
Interesting article, thanks! I'm building an charting web app with Spring MVC and chose Google Charts for js library. Article definetly gave me some new ideas. 
Do you really want to do Swing? Otherwise you could look at JavaFX (Java 8), it's easier and you could make everything more responsive.
It's also already part of Java 7. Back then, the JavaFX docs were a separate download, no idea if that's still the case.
http://jenkins-ci.org/
Nah. That's useful for building my releases, but not for any keeping track of what I've released.
Parts of the article seem good, but no sane Java programmer would make the mistake in the first place: To concurrently access data, you have to either use volatile (which enforces using the value from main memory, ~~but it doesn't enforce a happens-before relationship,~~ but that's not relevant for the simple example given) or use synchronized. Threads can cache variables and never realize that another thread changed something, so volatile would be needed - or synchronized, which is what I prefer for clarity and easy extensibility. ---- EDIT: I wonder if it would make sense to introduce the "synchronized" keyword for classes, too. It already exists for methods, but I never use that: The effect there is that only one thread can execute the method at a time, but this doesn't make the accessing of data outside the method any safer, except if only that one method accesses it. I often make classes that have `final private Object LOCK = new Object();`, and every method has a `synchronized(LOCK){...}` around their body. This is just what I'd imagine the "synchronized" keyword in the class declaration to do silently in the background. What are your opinions, would this be an asset, or would this rather promote sloppy coding, etc.?
TIL. What does it do if there's a hash collision?
Using JavaFX in Java 7 involves some wonky-ass bootstrap class generated by an ant task because the jar isn't in the classpath by default though :(
The top priority should be the permanent removal of that crappy bundled toolbar thing.
What about adding the [Release Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Release+Plugin)? 
“Assignation” should probably be “assigment,” no?
2014, and no single mention of [hamcrest](https://code.google.com/p/hamcrest/)’s `MatcherAssert` and its wonderful matcher library? I AM DISAPPOINT.
First of all, volatiles does give you 'happens-before' guarantee. All writes that happens in one thread before writing volatile variable are seen in another thread after reading the same volatile variable. Second, synchronisation gives you stronger guarantee, than volatile. In addition to 'happens-before' it gives you exclusivity. And this comes at extra cost. Synchronisation, especially contented one, is more expensive, than volatile.
&gt; All writes that happens in one thread before writing volatile variable are seen in another thread after reading the same volatile variable. Is that so? I didn't know that. Comment edited. &gt; In addition to 'happens-before' [synchronized] gives you exclusivity. What does this mean? Or rather, what does the absence of exclusivity mean - can concurrent code alter a volatile at the same time?
I was wondering if it might be that if Oracle isn't killing Java, might they be overseeing its long term decline? I am just starting to get into it, and with 8, I find a lot of things to like. I seem to have found a webframework that works for me (ninja - right amount of coverage and documentation), so I want to go further with it. But it does remind me the problem of people leaving — where will they go? C# I don't think is a great option because of uncertainty and Microsoft never really doing a full cross platform strategy for it. C++ is very complex when taken as the whole language (manageable if you restrict the scope of use), but even so it doesn't have the library development. Obvious performance isn't a huge issue, otherwise they wouldn't use Java to begin with. For what Java excels at, I just don't see anything that does quite what it does - and scripting languages do not cover it.
Oh come on, you install Java just once, the toolbar thing is not the top priority. It is just a circlejerk about the issue.
I don't know yet
Nexus is kind of nuts...I tried it out recently after many years using the free version of Artifactory and I was kind of blown away by how hard it is to use and setup. If you haven't completely sworn off maven repository managers yet, give Artifactory a shot. It integrates nicely with the Jenkins release plugin, too.
Promotion plugin in Jenkins can be used to track what was released. For example, every commit creates binaries and only those that are promoted are considered released.
Of course, thanks! It's a french habit I just stopped to try getting rid of, sorry! I'll fix that back at home. However, this is just a sample code and shouldn't affect what you will be able to do with that!
I've been swing developing for about 10 years. I find the folks @ Stackoverflow are always helpful. A couple of libraries I feel are really helpful once you know how they work: [miglayout](http://www.miglayout.com/) is the most versatile layout manager I've worked with. There is source code and a working example on their site [swingx](https://swingx.java.net/) is an extension to most swing base classes and offers a cleaner implementation with more power. PM if you have questions
Artifact Repository is a good term to search. Archiva, Artifactory and Nexus are all popular.
No, you don't install java just once, it has updates sometimes and they also include the toolbar
You can create a "release" task that performs the necessary steps to add an artifact to wherever you're keeping them. A very simple way to manage artifacts is to just copy them to a network location, and Jenkins is all the software that's needed in that case.
It's easy to cherry pick short examples like that to make an argument on an internet forum. It's another thing entirely to write a large application and maintain it.
It's time to move to TestNG and [AssertJ](http://joel-costigliola.github.io/assertj/)! See [Why TestNG?](http://kaczanowscy.pl/tomek/sites/default/files/testng_vs_junit.txt.slidy_.html) 
JavaFX in Java 7 is really buggy and the behavior is in some cases different compared to Java 8. My advice is to use Java 8 (with all the nice features and JavaFX-bugfixes) and bundle the latest JRE with your desktop application. Don't assume that your users have an up-to-date JRE installed, bring your own, the size is really not an issue in 2014.
I agree with delivering the JRE with the program, if it's a considerable program and not some small app. My experiences with Launch4j have been great so far! http://www.reddit.com/r/java/comments/2ar9wj/native_launcher_for_java_applications/
Absolutely. (Most of the good ideas in this profession are more than six years old.)
This goes contrary to some of the advice in this thread, but I'd suggest you start working on developing a simple project. For this to be useful, this has to be a project you're committed to for some period of time, even if it means pushing through difficult problems. (The main value of this project will come from the process you take to work through these problems, so they're kind of the point.) Then, as you start to develop your project and run into issues, then start to bring in some of the other resources that people have mentioned in this thread. What this approach will do for you is give you some of the context you need to appreciate the material presented in books like 'Effective Java' and 'Design Patterns'. For what it's worth, I agree that these two books are the most logical 'next step'. The Java platform itself is absolutely loaded with 'advanced' stuff to learn. However, what you should realize is that these tools are generally useful, but should be avoided unless absolutely necessary. (Tricky/advanced code is more difficult to work with.) Get the basics well established in your repertoire, start to become more aware of what's possible in the platform (in case you need it), and continually use your developing skills to solve problems in ways that are useful to yourself and others.
Ive contacted their community manager and I've been told, that those stickers are free.
&gt; I believe we will see the types of developers who support the language change drastically over time and a large group will abandon it all together given enough time. I think that for this to happen, there needs to be a compelling 'next step'. Java has the immediate home court advantage, in that it has excellent tool/library support, a strong base of skilled developers, and high quality implementations for a wide range of platforms and scales. These advantages are all possible to overcome, and they will be eventually, but any discussion of a switch away from Java has to be made in the context of whatever's next.
Nice. I'm working on a PEG Java 8 DSL, we need more of these basic tools, but packaged in a way that makes simple usage in a modern context as easy as possible.
Not open source. This page says it will become open source in version 6.0: http://www.jave.de/developer/index.html But the 6.0 release candidates were in 2009, and no updates since then. It still could be useful to run it in a locked down VM with no network connection. 
Why not just use this form? @Override public int hashCode() { return HashCodeBuilder.reflectionHashCode(this); } From http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html There's also similar support for toString and equals. 
The official Java tutorials are always a great place to start: http://docs.oracle.com/javase/tutorial/uiswing/index.html
Are you serious? I'm not even mad
Go, Node (server side JavaScript) and Python seem to be where the market is looking these days. 
While I agree with the fact that TestNG is globally a better tool than JUnit, the latter is supported by WAY more extensions that make it a better candidate for many teams.
Short advice: Don't. Java desktop app development is dying. I did Swing for many years, and thankfully was able to escape several months ago doing more relevant, in-demand stuff. Sure, you can find good-paying Swing gigs, but they are becoming fewer and fewer. I had to brush up on a lot of stuff before I started looking for a job earlier this year. EDIT: Downvotes? I guess the resident Swing developers have found my post. I worked with Swing for almost a decade. I didn't want to get left behind, so I moved on. Holding on to Swing is a bad career move.
Thinking in Java 3rd edition is freely available from the author (http://mindview.net/Books/TIJ), and is excellent. Java doesn't change so fast or so much that a book from 2003 is useless: there are some new ideas on Java that aren't in Thinking in Java, but what's in there is solid OO programming in Java that can be applied to any version of Java. There is some overlap with Head First Java, though, so you might want to skip around. Head First will give you a good start, Thinking in Java will get you closer to real productivity, and Effective Java will push you toward mastery. 
Well, I don’t see any mention of those, either. And I disagree with teaching stuff that has been superseded by clearly superior alternatives. (Then again, I already disagreed with writing tutorials for stuff that is 15 years old.)
Scala and possibly Ceylon. In the non JVM world there's Swift, Rust, Go, D...
Name some extensions that have junit support but not testNG. Maven, Spring, and Jenkins all support it... (As well as jacoco and Clover), so what else do people use? I'm always interested in hearing about cool new stuff! Heck, it might even give me a side-project to fork a cool junit only thing into testNG.
It's kind of dead in the desktop/end-user environment, therefore it is dead everywhere! It's not like servers weren't always the bulk of Java use because its feature set was better geared there anyway.
Java doesn't win because it's the best language -- it wins because the JVM is one of the fastest, most-portable, and innovative virtual machines ever written. C# is not in the same league of portability as Java, nor was it intended to be. It's a language/platform for writing windows programs, because that's all that microsoft cares about. Apples and oranges. 
It's not just the @Data that removes getters/setters. it's trivial to create immutable structure by declaring everything final and then just having an @RequiredArgsConstructor. Then you have @Delegate for composition over inheritance, etc. The list of Lombok greatness just keeps coming.
Let's not forget another BASIC: -&gt; Properties Enough of this getter/setter bean standard, give us proper regular properties...you know like in C# since version 1.0. Instead they are wasting time on repeating annotations...who gives a damn. 
obviously you are not up to speed with java &gt; List&lt;Entity&gt; entities = new ArrayList&lt;Entity&gt;(); has become List&lt;Entity&gt; entities = new ArrayList&lt;&gt;(); and I for one prefer this to your var example. Better separation of interface from implementation.
I'm not. Bc like I said, Java 7 broke my app and the bug still hasn't been fixed so I I'm stuck on Java 6 because I don't want to change my entire project to not use CORBA or to deploy through a method outside my app server and have to maintain a separate piece. &gt; Better separation of interface from implementation. And this sounds like using something for the sake of a by the book rule. For me, it is much easier to read var when I'm looking at thousands of lines of code. Edit: and removing a single word at the end from the entire line of code hardly makes it more readable than the previous implementation.
Artifactory will do what you're looking to do, without a great deal of setup. There's a pre-built Artifactory image on the AWS marketplace which I tend to use for new setups. 
I guess I just disagree about Sun being a clusterfuck -- i think in a lot of ways they deserve a lot of credit. And i think 99.8% of Java-6 apps run on Java-7 just fine. Obviously, if you use a feature that they broke in all your programs, the difficulties are exacerbated. 
thanks, these look nice! It is indeed for "simple" UI - that other people might reuse one day
You should be able to just install it the same way from the usual place ( http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) Then, on the command line switch java implementations with &gt; export JAVA_HOME=$(/usr/libexec/java_home -v 1.7) I setup an alias for java home in my .bash_profile to make it a little easier. alias java_home='/usr/libexec/java_home' 
Once you learn Swing, it is really easy to put together most things -- especially for drawing graphics, sprites. If you actually need specific placement and are designing forms, its harder - e.g. gridbaglayout.
&gt; i think in a lot of ways they deserve a lot of credit. Couldn't agree more. I think they did a fantastic job with Java, especially early on. There wouldn't be a C# without Java. I just think it was easier early on. With Java's adoption rates, the community process was bound to take longer and cause more problems. I think it was the nature of the business. They wanted to involve the community, which get's difficult when your community is the size that it was. It's easy to get agreement on where to go when there are 10 people on board. When there are 10,000, it takes a lot of compromising, which takes vastly longer. Hence, Java 7 taking over 5 years to release. It's a good idea. In practice, it gets messy. I just think one company at the helm is a good thing for Java. It pisses people off, but it get's more direction and a faster path. That's just my opinion. But Oracle has already released 2 major java versions in less time than Sun and the JCP could even agree on a spec. edit: &gt; 99.8% of Java-6 apps run on Java-7 just fine I don't know, out of 5 java applications we had 2 break for different reasons with that release. Just anecdotal.
I assume they mean for the Windows system, which most non-devs use. Of course, if it was on GNU/Linux or a BSD, just install from package manager, and no toolbar bollocks. This is less an issue for people who develop Java, more an issue for those who don't, which is a larger set of people.
&gt; C# is not an answer I wasn't answering a question. I was saying that being led by a single company was better than the JCP, despite people disagreement. I was saying that bc C# has been led by a single company, it has developed more features faster. &gt; and probably has more problems Using 'probably' in this context means you don't actually know, and that that is a complete guess. So let's just leave that out. 
Probably because it's not objective. One of the biggest issues with C# is the fact it's (essentially) Windows only, making it useless to a lot of devs and for a lot of typical uses.
Just install the JDK. It never had a toolbar. As for the consumer version, people should learn to read.
glad to know you know so much about cythawll's motivation. Can you read my mind too? I've done two projects now, small and large with angular and I'll take it over jsp's any day. The fact that I can prototype something without firing up a java web server is a huge plus. And ultimately the app will be more scalable since you can move more processing to the client. With that said, Javacript is not suited for large projects, so you do have to write good code to keep it maintainable but you can say that about any language. Sounds like you're the one being reactionary. 
I don't understand this line of argument at all. It has nothing to do what I was saying. I'm confused why we are even talking about cross platform abilities.
Because it's a (big) problem with the language. 
&gt; In my opinion, if C# and .Net were truly, officially cross platform, Java &gt; would be considered legacy by now. No. That's because no one gets any say in how the .NET platform evolves except Microsoft. There are no competing implementations of the .NET platform except Mono. But that's not even real competition. On the other hand, there are many competitive JVM implementations, both closed source and open source. There are many competitive implementations of Java EE application servers, both closed source and open source. Consider even Java tooling. Which professional .NET developers are using an IDE other than Visual Studio? Which professional Java developers are using JDevelop (Oracle's official IDE) as opposed to the numerous open source and commercial IDE choices (IntelliJ, Eclipse, NetBeans)? It takes longer for Java to adopt new features, but that is because of the JCP process. What you consider a bug (a horse designed by a committee), many others consider a feature. And you think that's bad? In the Microsoft world, there are very few "officially sanctioned" ways of doing things. How many different ways are there to write a web app? How many different ways to write services? In Java, there is Java EE vs Spring, app servers vs Spring Boot vs DropBox, all the myriad web frameworks. Oracle has tried to establish standards (which is good), but the Java community continues to find ways to do things their own way. This is why Java has not become legacy and will not likely become legacy in the near future. There are enough people who prefer choice over consistency.
How does directing the features of a language have anything to do with the open source community surrounding it? All of those projects can still exist just fine, and do now, with one company at the helm. &gt; It takes longer for Java to adopt new features, but that is because of the JCP process. That's exactly what I was saying. &gt; What you consider a bug Where did I say anything about a bug? &gt; And you think that's bad? I think it's bad that it takes so long to get any modern programming features, that the language is (until recently thanks to Oracle) still essentially stuck in 2005, despite advances in technology. This would be like Google allowing the community to design and add new features to Android, taking over 5 years to release a new Android version, while Apple plugs away and releases a new iOS version each year. Android wouldn't stay very relevant that way, would it? I don't see the difference here in the language itself. Adapt or die. Oracle is helping that process along by taking control, in my opinion.
Off topic, but whatever: Why would you even bother reimplementing scroll? And even if for some reason you do, why would you make it behave in such a weird way?
What does this offer over [annotation based Ehcache](http://ehcache.org/documentation/recipes/spring-annotations)? 
&gt; How does directing the features of a language have anything to do with &gt; the open source community surrounding it? Everything. There is an open source community surrounding the .NET, but it is nowhere near as vibrant as the Java open source community. Those who use the Microsoft stack are usually looking to Microsoft for best practices. In the Java world, developers frequently thumb their nose at Oracle and would rather do things their own way. These different values translate into to what kind of activity happens in the open source community surrounding the language and platform. &gt; Where did I say anything about a bug? What else is meant by this: "Java was the epitome of a "camel", a horse designed by committee." &gt; I think it's bad that it takes so long to get any modern programming &gt; features, that the language is (until recently thanks to Oracle) still &gt; essentially stuck in 2005, despite advances in technology. So what? Did you consider that there are things that are more important to some people than having all the bells and whistles right now? You still have choice even in that regard if it is important to you. Use Scala or Clojure. &gt; Oracle is helping that process along by taking control, in my opinion. Oracle is a better steward of the language than Sun. But as long as the JCP exists, Oracle will never have as much control over the language as Microsoft. It will always take longer to incorporate features because everyone gets a say. And *that is a good thing*.
It's a java subreddit and you basically came in to say how Java sucks and C# is superior. I am not sure what you expected. C#, by the way, broke backward compatibility themselves and continues to do so every release. It's funny how you shot Java 7 in the face for wrecking your webstart (even though you are very stupidly running bleeding edge in production), but are not upset that when you moved from .net 2 to .net 3, you have to reprogram a bunch of systems or else be left behind. Hell, .net 4 isn't even actually fully backward compatible with .net 3. Come on man, if you're going to make fun of Java for something while praising C#, you should probably make sure that C# isn't actually a worse offender. Hell, we have a vb.net program that targeted .net 3.5 and it won't even begin to compile in .net 4 without a total rewrite. Microsoft will never overtake java with .net so long as they keep breaking backward compatibility so badly.
It seems self-evident to me that Oracle won't kill Java. Before Oracle bought Sun, they owned the database you build your enterprise on, and a few other bits and bobs. Buying Sun gave them the entire stack, so a bank [or similar] can write one, huge, cheque to Oracle, and be confident that everything will be awesome and reliable. With Sun's slate, Oracle can sell a *complete* stack, way beyond what any other vendor can truly claim to be their own: * Hardware * OS * Database * Application Server * Developer Tools * Language of choice for development Dropping anything from that lineup would be stupid. Several pieces of that might be a bit clunky but they're also famously expensive and famously bulletproof. And dropping anything in that stack cracks open a window for big businesses with big pockets to depart from the vendor lockin, which Oracle would be stupid to allow.
&gt; Oracle is a better steward of the language than Sun. Great! Then we agree :)
Great! Then we agree that Java is better served by not having one company in control of the language.
Separation of interface from implementation is really an issue. It is also in the list of best programming practices in Effective Java from Joshua Bloch (Item 52). var entiities = ... doesn't cut it. Especially if I look at thousands of line of code.
&gt; you basically came in to say how Java sucks and C# is superior. Seriously, you either went pretty far out of your way to pull my comments out of context, or you didn't actually read what I wrote. The only reason I brought up C# was to support my argument, which you clearly missed, that having one company in charge of a big project moves it along faster and better bc you don't have to make a bunch of compromises. The JCP was nice in it's day, but with so many opinions, it makes it hard to get anything done. This discussion has nothing to do with whether C# or Java is "better". Jesus, it's like a complex. As soon as C# is mentioned in this sub people lose all their senses.
Haha. I don't see how we got there. Sun always took the entire community into the discussion, thereby delaying any sort of progress indefinitely. Oracle pisses off the community by not taking everyone's opinions into account, but gets out releases faster with more progress. But you said Oracle was a better steward. Which I agreed with. Meaning Java is better served by a single company. Or am I misunderstanding something?
&gt; Separation of interface from implementation is really an issue Why? &gt; It is also in the list of best programming practice in Effective Java from Joshua Bloch Right, the by the book way. &gt; doesn't cut it. Especially if I look at thousands of line of code. I think this is more a matter of opinion. 
I knew after [I posted the 'anti-Oracle' article on Friday](http://www.reddit.com/r/java/comments/2d0ez3/oracle_hasnt_killed_java_but_theres_still_time/) that someone at InfoWorld would put out a counter. Easy pickings
&gt; Or am I misunderstanding something? Yes. The entire process by which Java evolves. Oracle still follows the JCP, just as Sun did. The difference is that Sun was a terrible leader. Oracle is a far better leader, but not one that everyone likes. It's like the difference between Bill Clinton and Jimmy Carter, not like the difference between Stalin and Jimmy Carter. Oracle isn't a dictator over the development of Java like Microsoft. All changes to the language are designed by committee and are voted on by committee. The development of Java is served by many companies and individuals, which is the JCP.
&gt; But Oracle makes a lot more unilateral decisions without the JCP. Such as? Which change made it into the language without a JSR that was voted on? 
I don't agree with this. Those are technologies that come and go... Some of them stay... Overall there is nothing like Java. 
Long life to Java! 
Breaking up the Java 7 specification and releasing it without all the approved changes in the first place such as closures/lambdas in order to get it out bc it was taking too long.
I can access the site if I am NOT logged in to java.net. But not if I am logged in.
Maybe a lot of that faster schedule comes from the OpenJDK deal that Sun did in 2006? Also about the same time RedHat signed on as a Java code contributor. I think a lot more people are working on the JDK now than the old days when it was more closed off. Microsoft should learn a lesson from it.
Your question is specifically designed to avoid my answer. The JCP originally agreed on a set of features for a Java release. Not all of those features went into the final release. The answer to the real question is the same. Oracle unilaterally changed the release. Which was a good thing. And I agree, it showed effective leadership. Which is what my original point was. The title of the article is "Oracle is strengthening, not killing, Java." My entire argument originally, despite all the discussion, was that I wholeheartedly agreed with that notion. A strong central company directing Java is better than leaving it up to the community entirely, which is what Sun did, and why, in my opinion, Java lagged behind in progress.
You can't do that. Generics are for static type safety. You might consider a different approach that doesn't involve generics but ordinary polymorphism.
&gt; OpenJDK deal that Sun did in 2006 That's when Java 7 was started. It took more than 5 years after that to release Java 7. The longest of any release. Maybe that deal slowed the schedule. It certainly didn't make it faster. &gt; Microsoft should learn a lesson from it. Learn what? C# is years ahead of Java feature wise. That doesn't make it "better". So don't take my words and spin them. They are different. And Java has a ton of strengths against C#, specifically the strength of the JVM. But that doesn't mean Microsoft needs to learn anything about how to run their project. It seems pretty well run to me.
The thing is, I'm trying to load a class dynamically via Factory. I wan't to be able to scan a package and determine compatibility based on the generic type. I thought that interrogating the class for implementation this way would be pretty fast.
Looks like I was only half-right. &gt;The feature has now been implemented in javac with a "de-sugaring" process; a clean, high-level syntax using String constants in case declarations is expanded at compile-time into more complex code following a pattern. The resulting code uses JVM instructions that have always existed. &gt;A switch with String cases is translated into two switches during compilation. The first maps each string to a unique integer—its position in the original switch. This is done by first switching on the hash code of the label. The corresponding case is an if statement that tests string equality; if there are collisions on the hash, the test is a cascading if-else-if. The second switch mirrors that in the original source code, but substitutes the case labels with their corresponding positions. This two-step process makes it easy to preserve the flow control of the original switch. [source](http://stackoverflow.com/questions/338206/switch-statement-with-strings-in-java)
&gt; Your question is specifically designed to avoid my answer. Because your answer changes your original argument, which is what I have been responding to: &gt; Java was the epitome of a "camel", a horse designed by committee. and: &gt; C# being run by Microsoft and Anders Hejlsberg specifically has made &gt; strides leaps and bounds ahead of Java. Java is still designed by committee. Java is not run by Oracle the way C# is run by Microsoft and Anders Hejlsberg. The committee is organized and run better under Oracle's stewardship. Oracle is demonstrating better project management than Sun. Thus, I agree that Oracle is a better steward. I disagree with the Microsoft approach and that Java would become legacy because Oracle/Sun didn't follow that approach.
How are we supposed to take, and I am paraphrasing here, &gt;Java keeps breaking my current code base without fixing it with new releases while C# has been getting better and better every release I am not sure that YOU read what you wrote. Your bias is so strong that you can't even see that you actually did say, effectively, "java sucks, C# great". Why does C# get a free pass on breaking existing code bases while java does not? To fix your java problem, by the way, you'll need to update your things to be https, like they should have been in the first place. Yeah, that particular update should have come with java 8 instead of jackhammered in to a java 7 update, but it also isn't as if it wasn't something you should have been doing in the first place. edit: For someone who is whining like a baby about downvotes, you sure are quick to pull the trigger on the blue button.
&gt; you actually did say, effectively, "java sucks, C# great". Spinning what I said. What I actually said was, Java's development has been stagnant in the past bc it was bogged down while C#'s continued rapidly bc it was under the direction of one company. And that Oracle is doing a good job by being more active and controlling of the process, which is what Java needed. I said nothing about C# being better than java, or that java sucks. You don't have to read random nonsense into what I wrote. And you don't have to say what I "effectively" said. You're making shit up. Edit: Also, don't "paraphrase" me. Why don't you quote what I actually said. Seriously, just baby town frolics here.
"I know nothing about C# or Java and I have a stick up my ass, also Java rules and C# drools" - /u/JavaDroid I can paraphrase ridiculous and random things also.
Long-time Java guy checking in: Swing is showing its age, but has some really well-established libs you can take advantage of. First off, if you're going to use Swing, get an IDE with Project Matisse support. It is flat out the easiest, fastest, most flexible, most precise way to go from idea to completed UI I've seen anywhere, ever. Now that I'm done fanboying, I suggest that you look at JavaFX 8 as your next UI. Everything before version 8 was utter crap. The application instantiation portion of the API is still batshit insane, but the rest of it is very well put together. The Scene Builder is a godsend, even without the Matisse layout managers.
What, in your estimation, makes C# years ahead of Java feature-wise? 
Lambdas, closures, LINQ, delegates, functional features in general, inline properties, Asp.Net MVC, Web API, Asp.Net Identity, JIT Web, partial classes. I understand some of these things have equivalents or open source projects in Java, but only lambdas have official support as of now.
I think you have so many downvotes because you uttered some factually wrong statements, have some disregard to books and best programming practices and are quite stubborn.
I believe that being printed on a page doesn't make something the holy end all be all. Also, "By the book" doesn't mean written in a book. It means by the strict adherence to the rules. Which are laid out in Effective Java. Anybody who has worked in a real programming environment knows that rules can and should be broken in certain circumstances. Actually, anybody who has every worked in any real professional capacity knows that.
What statements are factually wrong? And best practices are hardly agreed upon. There are as many best practices as there are books. and I have a disregard for "By the book", not actually books with pages. But you're right, I am stubborn. Although thats not why I'm being downvoted. Thats bc I dared to have the audacity to bring up C# in /r/java
&gt; Did I say follow this rule because they are written in a book and books are holly? I didn't say you did. I wasn't even replying to you. I was replying to the other guy who asked me why I thought books were bad. Which I don't. And I said, that that is best programming practice in that particular book. And that there are many other kinds of best practices. The issue is not whether one practice is better than another, but which one you prefer, and as long as you adhere to it, why does it matter? Which brings us back around to &gt; &gt; doesn't cut it. Especially if I look at thousands of line of code. &gt; I think this is more a matter of opinion.
An example for your factually wrongness: Best practices are agreed upon. Ask every mayor Java programmer which is the most important book in Java space. "Effective Java" will be named almost every time.
You're saying it's a fact that all best practices are agreed upon? So [this](https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=best+practices+java+disagreements) Google search is wrong? Or every single one of those people that doesn't agree with Effective Java is not a major Java programmer? A Fact is a pretty serious thing. It's pretty black or white. This issue seems far from a fact.
Doing things "via interface" is not the same thing. LINQ is a cool feature for tons of developers. Not to be rude but your personal opinion, or mine for that matter, doesn't really matter in a discussion of which features a language does or doesn't have. And people have a big push behind open source projects for many reasons, not the least of which is that Java EE was like running over a nail with a tank and servlets aren't much fun (understatement). As far as the benchmark goes, I don't see what that has to do with features at all. Whenever I get into this discussion, people inevitably throw out the notion that java can do everything, just 'different'. I don't understand that argument. It either has partial classes or it doesn't. C# can do those via interfaces also. But it also has partial classes. That argument makes no sense to me. I'd imagine any language could accomplish the same goal, just 'different'. Doesn't mean it has that particular feature. edit: I will say, it goes the other way as well. I don't understand people who say IIS is just like an app server. It's not. Makes no sense to claim otherwise. And app servers are a great strength of Java that C# doesn't have.
Where in the links you have given, there is a disagreement with "Effective Java"? Maybe we should make it a challenge. Please make a list of well known Java programmers opposed to the book. If you do this, I will list supporters. Then we compare. Deal? 
&gt; whilst they have "moved on" to other languages. Where do you find that people typically 'move on' to? 
That's right, type erasure... Ok, now it's coming together. Thank you for the refresher.
Haha. These discussions just keep going in weird ways. I don't understand why everyone keeps putting words into my mouth or paraphrasing me. Tell you what, if you can point out to me exactly where I said that anybody was specifically "opposed" to that particular book, I'll make you a list. But maybe you should go back and read what I actually wrote. That best practices aren't universally agreed upon, despite how beloved that particular book is. And that people can have different ideas of best practices, despite not being opposed to that particular book. Unless you are saying that that particular book is the official standard for practices backed by Oracle, the steward of Java, and it's not possible that anyone anywhere disagrees with it? Edit: Would you consider a companies Coding Guidelines and Naming Conventions an example of 'best practices'? And if so, wouldn't the fact that different companies have different conventions constitute disagreement?
I would like to see java in the browser as a positive thing and not a panic attack trigger for users.
https://www.youtube.com/watch?v=zkJR9lmjqQo &gt; gridbaglayout 
The fact that you did NOT chose RC cola proves you were influence by marketing ;-) 
Your link was a google search with "best practices java disagreements". And the result was a dud. Then you question "people that doesn't agree with Effective Java is not a major Java programmer?". And I want to know about those people. Find them and name them please.
We see many programming languages and platforms coming in and python it's one of those that is standing still. I believe that this is true because it was one of those that first introduced a general propose, multi paradigm way of writing code, with a pretty straight forward syntax. Which means, you could use this framework and write your whole stack, in a fairly easy way. I ocassionally wrote pieces of it, and it's nice, quick and stands for those boiler plate tasks. But Java, in terms of code base organisation, tools, frameworks, performance, platforms and others it's one of the best pieces of computer science. Java powers up airplanes software my friend. 
You're entirely right.
Well, Haskell developers would say that type-class polymorphism is a killer feature, but both C# and Java developers have gone on without it happily. Erlang developers would say that destructuring assignment and pattern matching are exceptional features, but again we don't have them and don't seem to care. At some point every feature has a subjective value to a given developer, and the chorus of voices that results determines the winners and losers in the feature universe. People vote with their feet. That being said, I don't see anyone caring, trying to emulate, or otherwise asking for LINQ in other languages. On the other hand I do see other languages copying type-class polymorphism, destructuring assignment, and pattern matching operators (see Scala, Clojure, Rust, Go, D, etc. for examples). I do see the distinction you're making with partials from C#, namely they can have partial state, which interfaces will not do. You would normally (and correctly) use composition in this situation under Java. Why is it "better" to use composition instead? Because inheritance violates encapsulation, and mucking around in the state of base classes (partial or not) makes for brittle designs. It's a terrible practice to make your class dependent on the internal implementation details of another class/compilation-unit, if it can be avoided. So, even if i havent convinced you, at least you now have some of the thinking behind why I dont view some of these features as you do. So, one data point to aid in your understanding of such arguments. 
IMO even in light of my comments above, the timeline I see for this happening is in the 10-20 year range mainly because the software is so embedded in the industry (see how long cobol has been around). There is still plenty of time for careers to be made in Java and due to its adoption even if it does "die off" it will still be kicking around for decades. As always I will urge all developers to be polyglots, banking your entire career on a single platform is extremely risky IMO. 
So the argument is whether or not that you personally think of them as a "feature". I think that most people would agree that they are "features". Whether you personally think they should be in the language is irrelevant. The question is, is it a feature one language has that another doesn't. That's what I was asked. What features does C# have that Java doesn't. I answered that question. It doesn't matter whether you think it should or not. That's a completely different discussion.
We are discussing the fact that "Effective Java" is the defacto standard agreed by almost every well known Java programmer and you cite the Oracle Coding Conventions? Is this a joke?
You are discussing Effective Java. I am discussing "best practices" in general. For some reason you are intent on only discussing that particular book. There are best practices and standards outside of that book, you know. Lets go back to my original point, that I keep trying to return to, even though we keep coming back to that particular book. **Best practices aren't universally agreed upon, and in fact change from company to company** Now, despite that particular one book, is there anything to refute my actual point?
The problem isn't that it's an inconvenience for Java developers - it's that it tarnishes the Java brand. When the non-programmer higher-ups at your company see the Ask toolbar when installing the JRE on their home computers, the Java experience on your resume gets dinged a bit.
A few cases of Python (including in an enterprise/financial setting), some Ruby + Rails, some ObjC and some C#.
Now I know you're just trolling. Partial Classes? WTF. Partial classes are a disaster. That's the reason in the 21st century 2 devs can't work on the same VS project at the same time. Unless of course you pay more for teamcity because the Java Jetbrains guys figured it out - Microsoft is still confused on how to do it.
Sounds interesting; the readme puts forward decent examples of where this library is preferable to JodaTime/JSR310: https://github.com/MenoData/Time4J/blob/master/README.md
You're confusing APIs with language. There are many APIs and frameworks out there to do things. If you find one too convoluted then just use another simpler one. Properties at the the language level hide performance deficits and mask threading and mutilbility issues. I would rather have it the way it is in Java and know what the code is doing. "And what's wrong with operator overloading" Really? The feature that killed SmallTalk and you think nothing's wrong with it? The problem with it is that it has few uses and can easily be abused - obfuscating the intent of the code. and in Java you just write: List&lt;Entity&gt; entities = new ArrayList&lt;&gt;(); but I guess if using "var" makes you feel all JavaScripty then good for you I guess. 
From the latest update onwards, it can be disabled from the Java Control Panel (Advanced Tab -&gt; scroll right to the bottom -&gt; tick "Suppress sponsor offers when installing or updating Java").
It should be pointed out that Hamcrest is part of JUnit, while AssertJ is not. So for completion's sake, I'd argue Hamcrest should have been mentioned.
But then you have to know a string's hash at compile time. Unless the hash algorithm for strings is part of the spec, that's not necessarily going to work.
Unfortunately, I've gotten fat enough since becoming a programmer to wear it :'(. Double edged sword my friend!
Did you try [this](http://usb4java.org/)?
I agree completely. It makes Java look cheap to anyone looking at the language. It isn't a question of reading, it is a question of polish.
TL;DR: nextDouble() is uniform for [0,1) but doubles are not uniform so some double values have a higher chance of being selected than others. If you want an algorithm that is *not* uniform then use his. I'm not sure I've ever *wanted* that, ever, but I suppose there must be use cases.
I actually would like to see java taken out of the browser and, if necessary, reintroduced and rethought. An applet shouldn't run in the same JVM which has the ability to screw with data on the disk. In a perfect world, there would be 2 JVMs, on for the browser, and one for everything else.
Ok, the project is now able to compile itself! I have added one terminal generator (like strings and regex's) which is "until(C)", taking a single character as parameter and handling escaping until it finds one. Because regular expressions weren't adequate for this task. I think I'll rework the syntax tomorrow to be more readable, but then I should release something. Oh! And I've compared the generated bytecode with the Java one, there's a real gain! Both in size and speed.
The non-programmer higher-ups know who Sun and Oracle are, and maybe even play golf with their representatives.
An observation about /r/java: There seems to be two distinct views in /r/java I have noticed: Those that say Java is on the way out due to scripting languages, and those that correct them. There always seems to be 3x the number of people correcting them.
The swingx demo refuses to run on my (OSX) machine - even after jumping through all the security hoops.
post the url you're using to run the .jnlp file
:), no i asked what makes C# years ahead of java in your estimation, and we were deciding, of the list you provided, which features were actually unique to C#, and whether, or not, they constitute the dramatic advance you credit to that language. And some of the things you listed were language features, others were runtime library features -- the difference being that you implement library features using language features. So yes, the conversation has gotten a bit muddled, but im not sure we've solidified your original position yet.
The kernel of your operating system is what is going to handle this. What I mean by that is, when you're writing a userspace application, what you will be interfacing with are kernel driver provided abstractions, e.g. when you plug in a joystick, a 'joystick device' appears on your system, on Linux this will typically be /dev/input/js0. As it happens though, there is a protocol enforced by USB standard compliant hardware that kind of makes it impossible to check whether a data pin is high or low as all sorts of other things have to take place before this kind of information can be made available. Things like handshaking have to occur before the USB controllers in your computer will begin allowing communication. As an aside to all this though, it's important that this kind of thing is only possible through kernel space drivers, otherwise there would be all kinds of security concerns involved as well as hardware damage concerns. But... As a potential work around, I purpose you investigate using your line in or microphone in as an input channel instead of a USB socket. There will be all kinds of guides available to show you how to do this in Java. I assume you're checking to see if a switch has been flipped or something. Disclaimer: I really glazed over the whole driver thing and the USB handshaking stuff is all coming from memory. If you ever can't sleep at night, try reading the USB standard. I know it's not the answer you wanted, but hope it helps.
Start with Spring Roo + Clean Code: * http://projects.spring.io/spring-roo/ * http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882 Design a simple todo list or something else you can use and then get creative from there to learn new concepts. Make sure you do not just follow examples; **apply them**. Use the following to expand your skills for specific situations: * http://spring.io/guides * http://shop.oreilly.com/product/0636920026518.do Use the following as a reference for open source Java tools * http://java-source.net/ Read the following sites daily just to keep your awareness open to new ideas and trends: * http://www.javacodegeeks.com/ * http://www.theserverside.com/ * http://www.infoq.com/ Your training wheels are off at this point and you are ready to move into the Java landscape with confidence. I have been coding Java since you were 1, so trust me on this... EDIT: Taking a class in programming would not hurt you, but you will move more quickly and more directly outside of classroom, so do both. Give preference to the learning outside of the classroom, as it will invariably be more practical. 
Wow! Thanks. These are some great resources. 
You are right, [this has everything OP needs](http://usb4java.org/quickstart/javax-usb.html).
Interfaces and (multiple) inheritance are very different things. Interfaces are a contract that says a class which implements the interface promises to do what the interface says it should do. An interface is a promise, the class that implements the interface fulfills the promise. This allows you to plug in objects whose class implements the interface. It's like "plug compatibility" between objects. When you extend a class, you inherit the behavior of your parent class and add specialized behavior for the subclass. Java only allows for inheriting behavior from one class. Other languages, like C++ allow for inheriting behavior from multiple classes. This leads to situations like [diamond inheritance](http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem). But inheritance has a worse problem in that the state of the subclass is mixed with the state of the superclass, which can lead to unpredictable behavior, especially if the superclass changes the way it is implemented. You can prevent these kinds of problems by using inheritance very carefully, following patterns like the [template method pattern](http://en.wikipedia.org/wiki/Template_method_pattern). Check out the difference between [composition and inheritance](http://en.wikipedia.org/wiki/Composition_over_inheritance). Interfaces implement compositional patterns which are preferable to inheritance, such as the [strategy pattern](http://en.wikipedia.org/wiki/Strategy_pattern). The strategy pattern is superior to the template method pattern because a class can use more than one strategy and because strategies are easily composable. But more importantly, by keeping classes separate from each other and coding to an interface, the classes which are composed together do not share behavior. That separateness reduces the unpredictability of inheritance and make the code easier to understand and easier to change in the future. These are very important attributes for "programming in the large". 
Imagine you have the following situation: class Base { void proc() { System.out.println("Base"); } } class BaseEx1 extends Base { void proc() { System.out.println("BaseEx1"); } } class BaseEx2 extends Base { void proc() { System.out.println("BaseEx2"); } } class Weird extends BaseEx1, BaseEx2 { ... /* Does not override proc. */ ... } Base b = new Weird(); b.proc(); // which proc should this call? I've never spent too much time on this issue. But it seems there is no easy solution to this question. You could force weird to choose a default proc to call whenever there is such confusion with some sort of statement like "on proc call choose BaseEx1.proc", but imagine you're inheriting 10 methods. In that case, you'd need 10 of those statements. Having defaults like "it'll call the first method from the first left-to-right inherited calss", and so forth. It's a mess. Interfaces don't give you the confusion of "which method to call". The implementation to select is pretty much determined (I'm not sure how things go with default methods in java 8, but I think they've made it so that the problem doesn't arise). __Edit:__ I'm just re-reading the OP's question, and I'm not sure my comment is any good for answering it.
Answering my own question: no. No they don't. JavaFX 8's 3d support is actually still quite spotty.
with the default methods, its a compile error to have the original method be overridden by multiple interfaces. If only one path of interfaces overrides it then it will choose the bottom most interfaces's implementation interface A { default void foo() { System.out.println("A"); } ; } interface B extends A { } interface C extends A { default void foo() { System.out.println("C"); } } interface D extends C { default void foo() { System.out.println("D"); } } class Foo implements D, B { }; This is perfectly legal and `Foo` would use `D`'s implementation. If B were to provide an implementation for `foo()` it would be a compile error and require that `Foo` implement it.
&gt; No. That's because no one gets any say in how the .NET platform evolves except Microsoft. I don't think that statement means that C# wouldn't be a favored choice if it were truly cross platform. &gt; This is why Java has not become legacy and will not likely become legacy in the near future. There are enough people who prefer choice over consistency. The road to legacy would be shorter if C# had a compelling cross platform solution. People would have the option to choose the consistency and rapid advancement of C# and .NET, and I feel like a fair amount of folks would. I just switched from doing Java EE development (for about 9 years) to C# and .NET, and I'm pretty impressed with the state of things. It certainly feels like I can solve problems with a lot less code. One of my favorite things? Reified generics. Java chose backwards compatibility, while C#/MS moved the language forward.
There are two ways you can use interfaces to take advantage of multiple inheritance. The first way is that you can define new APIs by inheriting from existing interfaces. For example: public interface Car extends HasColour, HasBrand, HasModel { } If `HasColour`, `HasBrand`, and `HasModel` are already defined, then you've defined what it means to be a `Car` with very little additional work. The second way is to implement multiple interfaces in a class. In this way a class can participate in multiple contracts by implementing multiple interfaces, but the implementation of each interface method is unambiguous. For example: public class AmphibiousCar implements Car, Boat { // all the abstract methods from Car and Boat must be implemented here } 
i don't think you need to mix in node for the backend, you'll probably get plenty of push back for that. its common to see java used for backend work with an exposed rest api that a html/js front end can interact with (i recommend angularjs). java rest services are very easy to write, lots of examples, lots of control. if you've never done them lars has a good [tutorial](http://www.vogella.com/tutorials/REST/article.html).
That's unfortunately not possible. You can only talk to devices that support the protocol. RS232 or a LPT ports would allow you to do it.
Don't get hung up on inheritance, multiple or otherwise. It was an important concept back when Java was released, but the common belief now is 'composition over inheritance' -- that is, nesting a class instead of inheriting from it.
Here's a concrete example of where I used multiple interfaces lately. In AWT/Swing mouse events are split into 3 interfaces: clicking, wheel, motion. MouseAdapter implements all 3 with do-nothing methods. (public abstract class MouseAdapter implements MouseListener, MouseWheelListener, MouseMotionListener) The advantage here is that I'm encapsulating all of my mouse events into one object instead of having one for the motion, and one for the click. I did this as an anonymous inner type, but I could have just as easily done this in it's own class and just implemented those 2 interfaces (leaving out the wheel) MouseAdapter mouse = new MouseAdapter() { @Override public void mouseMoved(MouseEvent e) { rocketPanel.follow(e.getX()); } @Override public void mousePressed(MouseEvent e) { space.fire(); } }; rocketPanel.addMouseListener(mouse); rocketPanel.addMouseMotionListener(mouse);
I think you forgot something.
This isn't the only issue with multiple inheritance. It can also very easily lead to circular dependencies.
Scala or if really edgy clojure
These are some helpful resources but certainly not suited for a beginner. Suggesting to dive head first into the Spring ecosystem is like learning to swim into a rip tide. You're sure to drown him. He needs to learn the most basic concepts, and for that pick a project idea that he wants to do and write some plain Java code. It will be messy but he will learn a lot.
You can't do that directly but Guava's [TypeToken](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/reflect/TypeToken.html) might help you here. Some more info : http://code.google.com/p/guava-libraries/wiki/ReflectionExplained
I'm using maven-release-plugin to deploy the artifacts to an Archiva server and tag the source at the same time. It's manual but only 2 commands, and I like to keep releases a manual decision anyways.
It is not a very easy problem, especially if the shape can have loops. Basically to test if a point is inside you draw a line from that point and another point at infinity (very far in any direction). Then you count the number of times this line crosses the border of your shape, if it is an odd number than the point is inside, if it is an even number then the point is outside.
You've got to be fucking kidding me.
There are a few public weather APIs, for example : http://openweathermap.org/current http://api.openweathermap.org/data/2.5/weather?q=London It would be pretty straightforward to build an app that displays a few icons along with this information. I don't know about public traffic APIs however.
This is one of those libraries that are solving problems I wish I had.
I downvoted this post or something
Oh yeah, probably the best comment I could've hoped to be told. I wanted to introduce on Reddit but I failed because of the format I thought was really limited. I'll try to upload that on GitHub and show more of my previous work.
Thanks for mentioning this. I am in contact with my theme provider right now regarding this problem. It would be helpful to have a screenshot showing this issue, as we are not able to reproduce it. Could you be so kind to send me a screenshot showing the problem to fappel@codeaffine.com? I appreciate your effort, Thanks again.
That depends on what "advanced features" you want to learn. * Multithreaded HFT-capable systems: Look at [disruptor](https://github.com/LMAX-Exchange/disruptor) and perhaps read [psy-lob-saw](http://psy-lob-saw.blogspot.de) * Data structures: [trove](https://bitbucket.org/robeden/trove) and guave (you already mentioned that) * How to overengineer *all the things*: [spring](http://spring.io) * Embedding a small interpreter: [beanshell](http://beanshell.org), also [beanshell2](https://code.google.com/p/beanshell2) * ...
How about: public void &lt;T&gt; test(T o) { ColorAware&lt;T&gt; thing1; … } Also if you want your ColorAware to be covariant, you'd specify `ColorAware&lt;? extends T&gt;`. If you want it to be contravariant, you'd need a `ColorAware&lt;? super T&gt;`, but this is rightfully rarely used.
thanks! but my Java project is not a distributed/web interface, but a UI to control HW (Arduino like). I noticed that the Arduino IDE ( https://github.com/arduino/Arduino ) is a Processing/Java combination too, but I need a bit more of controls, buttons, panes, ... that is why I am looking at Swing. Well.. the other solution would be to use node-webkit, then I would avoid Java altogether and use web technologies as desktop app. but this would bring other problems probably.
Agreed. Absolutely a must read for all Java devs once you've got the basics down. I recently read The Well-Grounded Java Developer, can highly recommend that too.
&gt;It only ever returns a small subset of possible numbers [0,1) (approximately 1 in 500). I'm not sure if I understand this sentence correctly. I re-read the article and still am unsure of what he means. He's not really saying that if you call nextDouble(), there's only 500 possible results to be returned? That at least is not the case when I tested: Random rand = new Random(); HashSet&lt;String&gt; hashSet = new HashSet&lt;String&gt;(); for (int i = 0; i &lt; 50000; i++) { double d = rand.nextDouble(); hashSet.add("" + d); } System.out.println("Different numbers: " + hashSet.size()); ...the output was "Different numbers: 50000". But I ran on Java 7. Has nextDouble changed to Java 8?
If firing up a web server (a single click in an IDE) is such a hassle for you, don't you also have issues then with pointing your web browser to your project? &gt;ultimately the app will be more scalable since you can move more processing to the client. I can tell you that increasingly clients are NOT happy with you draining their batteries and you require them to upgrade their systems just to see a simple page in your site.
Right, that wasn't clear from the text ;)
http://www.mistas.se/2014/08/13/mutating-languages Just finished reworking the language... Seems pretty decent!
When I went to download Crouton I found out that I need to enter developer mode, which wipes all of my local data. Does this mean that everytime I want to use Crouton I will have to enter developer mode and wipe my files? 
When I went to download elementaryOS I found out that I need to enter developer mode, which wipes all of my local data. Does this mean that every time I want to use elementary I will have to enter developer mode and wipe my files each time? 
I'm biased but I like Lucene for data structures. The ones that go to disk are more fun then your standard in memory data structures. Elasticsearch is a distributed system that exposes Lucene over HTTP and across multiple servers and that is fun. Guava is always good to look at. [RandomizedTesting](http://labs.carrotsearch.com/randomizedtesting.html) is also pretty cool and something I couldn't live without. Its good to understand the tools that you love regardless of how complicated they are.
&gt; not possible Many projects (going back as far as 2005) taught me that, in fact, it quite *is*, silly ondra.
I created [uniVocity-parsers](http://github.com/uniVocity/univocity-parsers/). It is a suite of text parsers for java. The objective of this project is to provide the fastest and most flexible text parsers, with a consistent interface for processing different formats. Currently CSV and Fixed-Width text files are supported. I've documented everything I could and created a complete tutorial there to make it easier for everyone to understand and contribute to it. This project provides an architecture to make it easy to create parsers for different text formats (atm tabular text formats. Hierarchical formats such as JSON and XML are on the pipeline). I am more than happy to offer guidance if you (and anyone else) is interested in contributing to this project. To demonstrate how simple creating a parser can be: this is the implementation of the CSV parser: http://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/csv/CsvParser.java And this is the Fixed-Width parser: http://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/fixed/FixedWidthParser.java All features of bean processing with annotations, value conversions, master-detail reading, column selection, comment and empty line skipping, are handled by the underlying architecture. You just need to extend from [AbstractParser](http://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/common/AbstractParser.java) and process the characters. For writing, you extend [AbstractWriter](http://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/common/AbstractWriter.java). This project is part of my (commercial) ETL framework for java, [uniVocity](https://github.com/uniVocity/univocity-api), and it's going to be maintained by my company. If one of our clients requests (paid) support that involves these parsers, we are willing to involve (and pay) the contributors. If you (or anyone else) are interested, we can arrange a skype meeting. Edit: things you can work on immediately if you are interested: implement parsers for [delimited files](http://en.wikipedia.org/wiki/Delimiter-separated_values), [fielded text](http://en.wikipedia.org/wiki/Fielded_text), [TSV](http://en.wikipedia.org/wiki/Tab-separated_values), [LTSV](http://ltsv.org/) or any text file with data in tabular format.
Well then don't leave us hanging and share your wisdom.
The OpenJDK project is a good start. There you have everything and should teach you a lot of how the language itself works.
A whole lot of nothing...
Nothing that really separates it from for example IntelliJ IDEA , although I'm unsure as to how IDEA integrates with various embedded. 
it's not that. It means "PROP" can be passed around as an actual type safe object, instead of string names of bean variables.
Thanks for the info! I managed to find a library that did most of the heavy lifting for me, [point2line](http://sixthsensor.dk/code/p5/point2line/space2_method_insidepolygon.htm) if you're curious.
Making a wrapper for BigDecimal is a very good idea. And there even *seems* to be every last BD function/constructor in it - not just a helper but a real wrapper. A word on currency calculations: Yep, don't use float/double. But you can make use of long under certain circumstances. For example, if you know that the highest number will not exceed a certain value (say 100,000$), you can e.g. store your prices in micro-cents and do simple calculations (addition/division) with them. If precision gets lost via division, it'll take a *long* time before it begins to matter in the actual cent realm, and you don't get any of the weird float/double effects. Abusing longs like this is an underestimated approach. You can e.g. store the location of objects in a space way larger than the Solar system in millimeter precision.
And Java 8 is yet to reach Arch.
Head First Java, always. More interesting and easier to learn from than its counterparts.
Can you just slow down on the spamming of your website.
Forget about $100,000. A Long is big enough to easily express the US National Debt, expressed in Argentine Pesos, with room to spare. US national debt (April 2014): $16,787,451,118,147 http://www.concordcoalition.org/us-total-national-debt?gclid=Cj0KEQjwmayfBRDo25CR9un4hvEBEiQAv9fBbRlJ9L80yYaGmj00H5GBX1s0zqFEo5-NvssfISE-s9YaAqck8P8HAQ Today's conversion rate from USD to Argentine Pesos. 1.00 USD = 8.26500 ARS http://www.xe.com/currencyconverter/convert/?Amount=1&amp;From=USD&amp;To=ARS US National Debt in Argentine Pesos: 8.26500 * 16787451118147 https://www.google.com/search?hl=en&amp;source=hp&amp;q=8.26500++*++16787451118147&amp;gbv=2&amp;oq=8.26500++*++16787451118147 Or to do calculation in Clojure: =&gt; (* 8.26500M 16787451118147) 138748283491484.95500M =&gt; (. Long MAX_VALUE) 9223372036854775807 So unless an application needs to work with how much money Congresscritters can spend, a Long should be quite safe as a way to express currency in cents, or even smaller units.
&gt; Prior to 8u11, the platform did not require a call to a superclass constructor to be the first action undertaken by a constructor. While this wasn't enforced at the bytecode level, it was in the Java language spec, if I'm not mistaken. So, maybe tools have been able to take advantage of this (or at least not take care), it's not a complete change of mind from Oracle, but enforcing something that was a bit too lenient before.
&gt; If precision gets lost via division, it'll take a long time before it begins &gt; to matter in the actual cent realm, and you don't get any of the weird &gt; float/double effects. Do multiplications before divisions. Because divisions truncate to integers. But watch out for overflow. And don't forget -- you still _can_ do intermediate calculations using BigInteger, or BigDecimal. You could think of BigInteger as just a bigger form of Long, do your calculation with pure integers, then check to ensure result has not exceeded Long.MAX_VALUE. You could keep a public static final BigInteger on hand that holds a pre-formed value of Long.MAX_VALUE, so it is easy to call it's .compareTo() at the end of intermediate calculations. 
Well, yes. Before reading the article, I wasn't aware that the JVM didn't enforce this; Java code that tries to do this certainly won't compile. As I understand it, strict ordering of constructor execution is necessary for inheritance to behave predictably, and is the reason that calling an overridable method from a constructor is a no-no.
True to a point I would say that SQL 2008 was still a bit of a reach to hit oracle feature for feature however it was certainly close enough to scare oracle. IIS was also much weaker as an app server at the time as enterprise Java app servers were superior prior to IIS7 and technically Java based enterprise app servers still have more features out of the box. 
Usually when people have a good encryption scheme, they don't ask that question. They usually say: "Here is my encryption scheme. Here is proof that it is strong. Here are 10 other experts who agreed with me after I made some changes. Here are the changes I made to make it stronger. Here are the tuning parameters that you can use to make it stronger or weaker."
And is currently broken.
I don't know, but I know that this one is very good: http://www.reddit.com/r/learnprogramming/comments/2ajf9r/java_creating_unique_filetypes_with_encryption/civzzv8 (It's not my code, I just got it from somewhere and combed it a little.)
&gt; What i want to do is keep my code looping until a logic 1 comes to the Data+ lane Is USB really what you need? Maybe you should have an external device ([Arduino](http://playground.arduino.cc/Learning/Tutorials)? [Raspberry Pi](http://www.raspberrypi.org/)? [Phidgets](http://www.phidgets.com/)) that can detect logic levels, and then inform your program. Of course, your program could communicate with the external (Arduino / Pi / other) device, probably by USB, using the tools for whatever external board you select. 
I believe you can (IIRC) also configure it to add final declarations to parameters. (I don't -- but considered it.) The nice thing is, if I ever were to change my mind, it would be easy to change the setting, and gradually my project would get more and more of them. Yes, that, about the 'var' instead of 'final'. There are a great many things, at this point, that we can wish the Java team would have done differently. I am really liking Clojure, and have very much embraced the concept of immutable values. (Like String, BigInteger, BigDecimal, but unlike, for example, Date.) Why, oh why did Java ever get mutable values like Date? It's a concurrency nightmare. But I guess they lived in a single core world that was a lot slower and with less memory. 
Yeah, i know. And i really want to learn how to use Arduino/RBPi but, this is a low cost project hehe (IR LED and a photosensible transistor from an old mouse, a broken umbrella, USB wire and male jack from a broken mouse and some other stuff) McGyver style!
The JVM (by design) is more liberal when it comes to these things. Oracle is obviously aware of that and the fact that bytecode/JVM does not always mean pure Java. There are two separate specifications. For byte code modification tools the *language* spec should not have to matter. **If** there was no such restriction in the *virtual machine* spec, Oracle is in fact breaking backwards compatibility and not "fixing a bug in the specification". If the latter were the case it would need to be mentioned and motivated more prominently. They cannot just change a solid specification during an update cycle. I just gave the JVM spec a quick glance and it says ([4.9.2. Structural Constraints](http://docs.oracle.com/javase/specs/jvms/se8/html/index.html)): "Each instance initialization method, except for the instance initialization method derived from the constructor of class Object, must call either another instance initialization method of this or an instance initialization method of its direct superclass super before its instance members are accessed. However, instance fields of this that are declared in the current class may be assigned before calling any instance initialization method." So the relevant spec, i.e. the JVM one, only seems to disallow instance member access before the superclass constructor call. It does not say the first action needs to be a call to the superclass constructor. I might be missing something (in another section), of course...
First, consider how vast the Java landscape is. Second, consider trying to dive into "the basic concepts". What are "the basic concepts"? Standard Java classes/main methods? Swing? Servlets? JSF? EJB? The list goes on, and on, and on... Starting with a framework provides a distinct advantage of simplifying where to start. Spring Roo is about as easy as it gets in Java. Roo abstracts much of the "Spring ecosystem" away from the developer and puts you on a course to implement a generally sound architecture under a structured approach to integrated some of the industry's leading OSS. Roo will force him to write plenty of "plain Java code", while putting the code in a more formal structure that is build-able, testable, package-able, and deployable (often the most difficult concepts for a new developer). Starting with plain Java code and figuring out how to wire everything together is a great learning experience, but it is not the most efficient way to start in today's environment. 
But the JVM isn't Java. Several languages target the JVM and bytecode can also be generated directly and they don't necessarily have the same rules as the Java language.
It may fail in case of [Hyperinflation](https://en.wikipedia.org/wiki/Hyperinflation#Currency) ;)
I used crouton to get elementaryOS(a linux based OS), but now how to I get Eclipse and Java 1.6 JRE
Create a small plug in for Eclipse. Their API design is generally top notch.
Meh, have you seen enums? They are defined circularly.
JVM alternative? What is this horseshit, and who is faking the upvotes on it?
This article was pretty poorly written, its not a JVM alternative, thats the CLI. And the author messed up his comparison to JavaScript.
Are there any Time Window implementations? Im ending up implemeting my own as I have not been able to find one that supports my requiements. Inclusive and exclusive markers for start/end. A navigable collections based class that supports time window math. 
The Hamcrest matchers are somehow contained in the jar but they are not really a part of JUnit.
What now?
Are you talking about IDEs (Eclipse, IntelliJ, etc)? You're going to need to be more specific than "programs"
http://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-for-2014/
Yes IDEs
[Multiple Selections](http://blog.jetbrains.com/idea/2014/03/intellij-idea-13-1-rc-introduces-sublime-text-style-multiple-selections/)
Spellchecking variable names 
While IDEA is a sweet Java IDE, and its Java editor is arguably the best of the big three, the article does point out at least two places where NetBeans is ahead of IDEA and Eclipse: 1. Profiler - neither of the others has an integrated profiler. You can launch VisualVM from IDEA or Eclipse, but it's not near as nice an experience. 2. IOT (if you care) - For embedded Java, NetBeans has a pretty good story. 3. git integration - I don't tend to use this much, as the command line is comfortable for me. That said, NetBeans has one of the best, if not the very best, git integration of the big three, IMHO. Not mentioned in the article is the reason *I* don't use IDEA as my daily driver: C &amp; C++ support. I spend much of my time in Java, but a significant time programming in C. I also do have C++ work to do, though I do my best to avoid it, as it's a preexisting pre-C++11 code base with ... I'll say "suboptimal" design &amp; style. Both NetBeans and Eclipse have very nice C &amp; C++ support. IDEA has no useful C &amp; C++ support. Yes, I know they're talking about it, and I know that google has indicated that they'll be adding NDK support to Android Studio, so that might be another vector from which IDEA might eventually sprout C support. That doesn't do me much good now, though. Speaking of the NDK, that's the reason I'm not using NetBeans these days -- I've gone back to Eclpise, which I ran screaming from around the time of NetBeans 7.0 release. I have to say, Eclipse Luna (4.4) is actually working out pretty damn good for me. I miss the Java profiler, and I have yet to look into the state of its Gradle support, but I've been using it every day since release, for both Java and C, and it hasn't pissed me off at all yet. The only issue I ran in to was the Java debugger locking up the X server when I hit a break point on the AWT event thread -- I had forgotten to add the -Dsun.awt.disablegrab=true VM argument, because NetBeans has a workaround for the issue, so I haven't needed that info for years.
If you're going for a IDEA environment for android, Android Studio is a pretty good IDE to use. I personally use it though it was a pain to move it from Eclipse to Android Studio. Other than that, I still prefer Eclipse for other languages
I never knew of this! This will come in so handy for large classes. 
Double-shift file searching. Makes finding files in multi-module projects so easy.
Smart Step-Into (Shift+F7). When you're debugging and you come across a line like this: `myObject.utilise(foo.getFooId(), bar.getBarCode(), blob.getQueryString(), frob.getName());` You want to step into the .utilise method to see what's going on in there but if you hit Step Into (F7), it'll take you into `foo.getFooId()` then back out, then into `bar.getBarCode()` etc. If you hit Smart Step Into (Shift+F7) it gives you a list of the methods in reverse execution order so the one you're likely to want is at the top and you can just hit Enter to debug into it. I use it all the time and love it.
Fuzzy search! ctrl+shift+n searches files in a project and when you have a file called FundraisingCampaignDonationsReportController being able to type FundCampDonRepCont makes things go a lot faster.
Well you could do unit testing and build servers. Use the number of passed tests to automatically determine the grade. Jenkins, team city etc etc... I recall github was working on an online editor a short while back? Teaches them some version control as well :) 
Oh, that's great advice! I am not using a book. I've watched/followed Youtube tutorials in the past and using my knowledge from those just kinda did it. I was surprised it actually worked. Haha. I have a Head First Java Book, but that is more for reference now it seems.
Yeah, I'm sticking with Eclipse for everything for the time being, now that I've moved back from NetBeans. It works well enough, covers all my needs, and I have little interest in splitting my muscle memory more ways than I must. Vi[m] gets the primary slot, followed by some residual emacs for use at various command lines, then my primary IDE (was NetBeans, is now Eclipse), GIMP, and a smattering of others. To the extent I can avoid bloating that list, preferably using one tool for each family of work, I find that I am more productive, even if it means using tools that aren't as "good". I find that knowing how to use a good tool very, very well trumps using a great tool, nearly every time. Same goes for languages, IMHO - I have learned and used many languages over the years, and used to relish learning new ones often. I've found that my productivity (and happiness) is higher when I focus on just a few, though. Java, C, and shell (BASH) are my main weapons of choice, FWIW. Perl used to be there, too, but I drifted away to Python, then found myself most often not having either available when I needed to do simpler scripting tasks, so I fell back to shell. To make the concept visual, think of a wide, shallow lake, with a few deep trenches.
Thank you so very much this helped me a lot 
The entire refactoring menu. Harness it's power and it will change your life.
Ha ha! "Programs." Welcome to Java, bro.
I have done this many times, and EVERY time it is a chore. Having to nitpick all the tiny details. Every time it is rewarding when the canvas properly paints and repaints. I cant help but to rebuild and rerun about 50 times, even if its only displaying a black screen, to celebrate the victory.
A heads up slick2D is no longer kept up to date (or atleast it wasn't when I last checked) libgdx however is updated regularly and is very good in my opinion 
Haha, right? 
My university uses [Web-CAT](http://web-cat.org/) for auto grading. From the student's perspective, you upload your code, the site runs through its test cases, and give you a grade based on how many of them you passes. It also does some style checking and assigns points based on that aswell.
Well so are objects when you use the typesafe enum pattern https://stackoverflow.com/questions/5092015/advantages-of-javas-enum-over-the-old-typesafe-enum-pattern
I can't talk about Schildt's competence on Java. I know about his C books, which are pretty much recommended to be avoided. Bruce Eckel's on the other hand, I've heard only good about his materials (although I didn't really like his design patterns book very much). I've never read the two books you've mentioned though. Have you tried the official tutorials for learning Java? They're very good IMO. They're freely available too. My first book on java was __The Java Programming Language__ (it teaches Java 5 [current version of java is 8]). Except that you'd be learning Java 5, which is still fully applicable, this book is very good. One of the authors is the creator of java, another is Guy Steele. He's a programming languages expert whose books I believe are worth reading just because he wrote it. He's pretty above the average, and also one of the creators of Scheme. Look him up on wikipedia =D. I've read __Core Java__ too (it has pretty up to date editions). I found it good, which is a win on its own since most learning sources are terrible IMO, but I didn't find anything particularly interesting about it. It does cover __a lot__ of ground, though. I surely recommend it. A lot of writing good java code is about understanding the usual patterns of which people make use. The author of Core Java has a book on this (http://www.amazon.com/Object-Oriented-Design-Patterns-Cay-Horstmann/dp/0471744875/). I've never read it, but I'd guess it's good. I don't know how advanced it is though. You can, of course, always look up the __Design Patterns__ book (http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/). I'd __not__ recommend reading this before learning java. I think you should only do it after learning some java. Although I don't think it's a particularly challenging book, I think it'll make a lot more sense given you can see its code examples (mostly in C++, and some in smalltalk; but __mostly__ in C++) and understand what they do. You don't need to really know C++ for that, honestly. The code doesn't make use of any (IMO) advanced features of C++. Knowing java and using common sense I think is enough to understand what is in there. There are many books on better using java. If you google for good java books, you'll find plenty of reviews, recommendations, and so forth. You can search amazon too. By the way, a lot of the programming techniques for writing good code in one language can be learned by studying materials in other languages. For example, I owe much of my programming basis knowledge to __K&amp;R2__ (The ANSI C Programming Language - 2e), __SICP__ (Structure and Interpretation of Computer Programs), __The Little Schemer__, and __The Seasoned Schemer__. These books teach in C and Scheme (two languages that I probably will never use professionally), but a lot of what they teach I've been able to apply while coding in C++, Java, JavaScript, PHP, SML, Python, and also other languages I've used in the past. Good luck.
That's exactly how I got into programming, trying to make a god damn game loop (after laboriously figuring out games need game loops). Good luck on your journey
That's awesome, you should look into lwjgl. Its a pretty neat framework. 
Wouldn't recommend this, learning OpenGL when you've just discovered how game loops work probably means you'll have a tough time. Try something like Slick2D or LibGDX or [shameless plug](https://github.com/freefouran/root-framework)
You may want to look into the book JavaFX8: Introduction by Example. There is literally a chapter about using JavaFX with Audrino. It could give you some ideas to go on. I'm currently developing a pretty complex UI in JavaFX but the project is still in design stages so I can't yet provide much meaningful insight. I would really hesitate to initiate any new development in Swing. I don't want to appeal to authority but there had to be a reason Oracle is basically dropping Swing in favor of JavaFX. The major problem with it right now is that it is so new that there is little adoption. It is very hard to find complex examples or Google issues because so few folks are using it.
I'll second libgdx. It's open source and awesome
That's awesome! How long did you work on it for? If you don't mind, could I read your source code, for learnsies?
Don't read it in one sitting. Simply refer to it every now and then... treat it as an approachable oracle on your journey through java.
Nice, it's always an awesome moment when you arrive at the first usable state of an app. Since everyone seems to be recommending their favorite graphics library I'll go ahead and recommend libGDX, it's for OpenGL but low level so not too hard to learn.
Thank you for the hint. I have updated and simplified the internals in class SystemClock for sake of better performance. Generally this class is not so much designed as replacement for System.currentTimeMillis() but rather as system time source for mocking test purposes.
This is subject to next version of Time4J (see also [milestone page M3 and M6](https://github.com/MenoData/Time4J/milestones)) so it has relatively high priority on my estimated schedule. You are welcome to tell us your detailed requirements for discussion (maybe on github issue #45).
Hey, for sure! Keep in mind, I have a separate class for where the rendering happens. But, for just the game loop, it should be everything. Also...not really sure what the deal is with the 'timer.' I don't think it is working quite right. It took me the majority of the day. I had watched/followed Youtube tutorials; to see what all was invovled. And then, just kinda went for it. Of course, I used a lot of what I learned from the tutorials. Here is the pastebin (let me know if link isn't working for some reason): http://pastebin.com/rbzAyyYe
Awesome! Thanks.
Alright, I will!
Alright, awesome. I'll check it out! Thank you.
Haha, thank you! It feels great. I think I'm finally getting somewhere with Java/programming.
I hate to be the guy that goes against the grain, but I think the way you are doing it now is great. I also started as you did, and wrote little games that weren't too intense. With Swing, AWT, etc. you get to focus on things like game loops and fps, and even start early on AI, as well as find out the limitations of them. I say keep going at it if you are having fun, and once you hit a limitation that can't be overcome, you'll know enough to easily understand the power of slick2d, libgdx and such frameworks/libraries.
Perhaps try to code it once in a more abstract manner that you can reuse over and over.
/r/gamedev will be your best friend
As somebody who's only subbed here out of interest in learning to code, can someone explain what OP just did?
Yea my main programming language now-a-days is java/android dev. So Android Studio is my go-to IDE at the moment. When I start coding in other languages again, then I'll hop back on Eclipse because I havent uninstalled it.
Great advice! Thank you.
Essentially, I created a 'loop' that will update the game/program 60 times in a second. This is an essential element in games; and is often known as the 'heartbeat of the game.' At least, that's what I've heard it been called. It keeps the game alive, and prints the updates (changes in character position, health, etc.) to the screen, in simplest terms. 
Great! I subscribed.
It IS a big thing! Congrats!!
jcabi doesn't require Spring
Even just typing 'fcdrc' would also work.
This every now and then makes the IDE hang for me and I have to kill it, do you get that as well ? 
I once made a working Java realtime-graphics game loop (using `BufferStrategy` on a `JFrame`) for a layout editor. Then I realized how painful it would be to create all required UI components myself. So I reworked the whole thing to use a `Window` which I kept floating directly in front of a JPanel whose only purpose was to layout this part of the window. If the window resizes, is minimized/maximized, or deactivated, the Window behaves accordingly (resizing, moving, pausing the loop etc.) with no graphical glitches. Eventually I turned this into a library class (1200 lines in the usual fluffy formatting; wanted to keep everything in one file because it's in a library with lots of other classes - didn't make proper use of packages at the time yet; can't give you the code because it's for our company) that allows to plug `Runnable`s in various places, e.g. for "calc" (Thinking about stuff, e.g. player movement.) and "draw" (Drawing the graphics.), but also for window resizing when you need to recalculate game stuff. Because of other useful classes in the library, it now takes about 10 lines of code to get from zero to a fullscreen application that checks for single-instance, optionally closes on F12, optionally runs code on shutdown, and has this realtime graphics loop thing. It's even all thread-safe. The Swing-compatibility-aspect caused a lot of overhead, e.g. tricky pauses in the game-loop. If you omit this aspect, you can relatively easily create a once-and-for-all realtime-graphics gameloop class that uses Runnables. It's double the fun in Java 8 where you can just use method references instead of Runnables.
nope
It's better practice to use `synchronized(){}` blocks than to use synchronized methods, and the coding overhead is really minimal. Synchronized methods only ensure that they are not run simultaneously by different threads. Synchronized blocks ensure that no other synchronized block that refers to the same object can be run simultaneously by a different thread. All it takes is `final private Object lock = new Object();`, and instead of using the synchronized keyword in the method declaration, you wrap the method body into `synchronized(lock){...}`. That's not the end-all answer to multi-threading, but it's the go-to solution for the average Java programmer.
Congrats on the implementation! I would like to give some constructive criticism though. Right now you're essentially running two threads: The *main thread* that is automatically created for you by the JVM and to which the execution of the main method is attached too and the *thread object* that you have created as a member of your Game class. Now the *thread object* will immediately die after you have started it, because it has no code to execute. If you need to have your game loop run in a thread other than the main thread there are two options: 1. let your Game class extend the Thread class so that your *run* method will actually execute code on a separate thread 2. or create a thread object by passing your Game instance [like this.](http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#Thread%28java.lang.Runnable%29) I don't think though that there's a need for creating a new thread. Just let your game loop sit in the main thread and create a new one if needed. Also there's nothing wrong with using AWT/Swing. Just use whatever you're comfortable with.
&gt; What is wrong with this code? Method name() is not final and can be overridden by a class that extends Employee. Design-wise this is wrong, since a child class is allowed to break a super class, overriding its method. Holy crap, what? Inheritance is now a bad thing? How am I supposed to declare a method that may be overridden by subclasses? I’m all for lots of static checks, they can really spot a lof of weird things but requiring everything to be `final` is just over the top.
I agree with you, it's how I started too! There's a lot of information to be found on the net for swing and awt, less so for JavaFX. While JavaFX is very cool and powerful, you should pick it up in a next project I think :) 
"live templates", which is basically you creating custom entries for the auto-complete list (via preferences). I type `syn`, press `Tab`, and I get synchronized(lock) { [&lt;-- cursor is here] } or `mai`, `Tab` for final public static void main(final String[] args) { [&lt;-- cursor is here] } (Don't try these at home, I added them and so would you have to.) I also like all the corrections/suggestions this IDE offers. If I want to iterate over entries of a Map, I type for(int e:theMap.e[TAB]) { } and when the error highlighting occurs, I choose the first (selected by default) quickfix that converts "int" to e.g. "Entry&lt;Long, Boolean&gt;". Saves a lot of tediousness.
My first experience of fuzzy matching like this was in Sublime Text. It's such a powerful way to search, that it hurts every time I switch from, say, Android Studio to NetBeans (for reasons I won't bother going into)!
&gt; fcdrc or just fdrc
Just gonna hop in here to say I agree with the guy above. I'm currently using libGDX for my game and it just isn't worth it if you're not serious about it yet. There's SO much overhead to libGDX and frankly I have more fun making games using AWT.
Thank you for the notice; in my case, I don't see the horizontal scrollbar at all. We entirely leant on GitHub Gists for the management of the scripts. I hope you could reach and use the "view raw" button on the lower right corner.
Effective Java.
&gt;Asp.Net MVC, Web API Java EE has JSF, which is light years ahead of ASP.NET.
If people move on to Scala, how come after ten years Scala only has some 0.3% market share?
If people move on to Scala, how come after ten years Scala only has some 0.3% market share? 
If people move on to Scala, how come after ten years Scala only has some 0.3% market share?
I don't think Tiobe and many other stats really agree with your statement. All of those rank pretty low, with one exception: stuff where /r/programming and HN talk about.
I don't know how experienced you are, but if you are not yet familiar with concepts such as listeners and events, then I would suggest that you first start with Swing. There is a lot more documentation and tutorials available for Swing compared to JavaFX. The JavaFX tutorials that are available do not really delve into the basics much, and mostly assume that you are familiar with design patterns such as MVC. The [Really Big Index](http://docs.oracle.com/javase/tutorial/uiswing/index.html) is a good place to start learning swing. They cover all of the basics, and offer many examples. Once you are comfortable with these basic concepts, move on to JavaFX. 
Don't extend thread, but implement Runnable 
Runnable is just an interface and doesn't start a new thread itself. So there's no point in using it without a thread worker or a new thread.
The point is not to couple what it executed and how it is executed. A runnable may be executed by a thread or sent to a thread executor, for instance.
I'd also recommend making your class variables private static
You might want to look at this as well: http://sourceforge.net/projects/reddwarf/ 
Which is exactly what I advised to do in option #2.
I'm currently trying to cut through the weeds with writing a Jenkins plugin. By "cut through the weeds" I mean 101: creating the maven project from scratch. I won't trust an archetype, OSS plugin archetypes are always in a state of severe depreciation. To give you an idea of how important Jenkins is, and how strongly this ability will reflect on your resume: companies hire people who are merely proficient enough to *use* Jenkins as part of the CI/CD process... being able to offer custom plugins is highly desirable, to say the least. This is my job, so I am not asking for help, it's just something to think about that most people really don't think about. http://jenkins-ci.org/
Scala has come on pretty strong the past year or two. Twitter, Netflix, Comcast, and Walmart are all using it now on one level or another. I've also seen Scala becoming a popular topic at conferences. C# not so much. In reality, if Microsoft didn't provide massive commercial support to C# and .NET in general, it wouldn't exist. If they didn't have Windows to leverage as a hammer behind their development platform, no one would use it. That being said, Scala very well might not be where those developers go -- im sure python, c++, go, etc all take a bite as well. People are writing apps for phones, tablets, and clouds -- the back-ends for phones and tablets are in the clusters/clouds. Since this area is largely dominated by non-windows operating systems -- why in the hell would any developer with a brain goto c#? 
Oh damn, you're right :_( I didn't really know nothing about how USB's work, now i do and i see why i can't. Would have been great to use a USB instead a paralled though. Thanks for all the help!
Oh sweet, thanks a lot for the criticism; I need it hahaha. Thank you, this makes a lot of sense. I've been trying to figure out threads; and that's one of the reasons I added one, to see if I could figure it out. Hahah. Thanks again.
Thanks!
Oh, alright! Thanks for the advice/criticism. It is very helpful. 
I'd suggest using some higher-level device for that; an arduino or raspberry pi would do the job. You may be able to do it using a serial -to-usb adapter too. 
Welcome to Clojure. (And probably also several other functional JVM languages.) I am happy to have some of these facilities in Java. I just wish it could have been years earlier.
This really just depends on what you want to do. If you want to learn about the internals of game engines or the principles of game programming then just using Swing (or AWT) or JavaFX is fine. If you just want to make a game, then I would recommend using a library like libGDX. This saves you from writing game loops, input handling, graphics, audio, etc., which takes really long to write yourself.
Alt+Enter
/u/phao has already linked the tutorials, +1 for that. Apart from that, start out with the smallest possible project that will teach you something and still be fun. * A program to parse roman numerals and output the arabic numeral * A web application to allow someone to post birthday presents and to allow others to choose one they'd want to gift (if you're stuck, first write it in PHP, then switch to JSP or JSF) * A ray tracer for a simple scene (you can hardcode scene data) * A program that takes photos (or other images) and overlays weekdays and days to create a calendar * ... the possibilities are [endless](http://prog21.dadgum.com/193.html). Just start something useful and/or fun.
How did I not know about this?
Here you go. http://avsid.es/JavaGameGoodies.zip Stuff from the learn game programming course on university of Reddit. Also some Java3D stuff.
Someone posted this http://cadmus.herokuapp.com/ seems like a fine resource.
Awesome! Thanks for postin your code. Now, I'ma make my own game loop :D
not Java... Why not ask the guys that wrote it?: http://www.zetasoft.co.uk/ecommerce.htm and http://www.oscommerce.com/
Try builtwith.com, not the right place for this post though! 
I've been meaning to mess with the push features for a whole. Thanks for the link, I'll be using their examples for sure. 
UI coding gets treated like second-class work in a lot of software shops, but it actually has an *enormous* impact on the perceived quality of a product. Go grab a swing tutorial, click some buttons in a GUI designer, and write some simple handlers for UI events. This is the easy part. Where it gets tricky is when you have to deal with any quantity of work that lasts longer than about a half-second. Computers don't mind synchronous processes; it seems to be the thing that makes them "happiest". Humans, on the other hand, *hate* synchronous processing. You can have the most efficient code in the world to do your heavy lifting, but if the UI doesn't finish painting the "button click" animation within a half-second, the user will believe that something has gone terribly wrong with your application. So, good UI programming necessitates an understanding of how to send messages across threads, and synchronize the apparent outcomes when work finishes. This is actually pretty tricky, but it's not the worst part. UI *design* is distinct from programming, and consists of coming up with a sane way to show your user what they want to see, and get the information you need from them in as few gestures as possible, all the while guiding them towards the most likely thing they're going to want to do, without making them feel stupid. It's equal parts mind-reading and prognostication, and when it's done right, nobody notices it at all. You're starting down an interesting path... I hope you enjoy the journey.
https://javaserverfaces.java.net is what the project actually is
A better way to do the last one: iter[TAB] 
follow ballusc on stackoverflow :)
Awesome thanks!
Haha, good luck :P
HTML, Javascript, CSS and PHP.
Thanks
Check out the JSF 2.x tutorials at [Core Servlets](http://www.coreservlets.com/JSF-Tutorial/). Be sure to check out the [PrimeFaces](http://www.primefaces.org/showcase/) tutorial too, if that is the component library you choose. How you develop your JSF app will have a lot to do with the component library you choose. JSF is a component-oriented MVC framework, so it works differently than an action-oriented MVC framework like Spring. Action-oriented generally flow like this: URL -&gt; Apply request values, validations to beans -&gt; Controller method -&gt; Select and render view JSF flows like this: URL -&gt; Select view -&gt; Build component tree from view -&gt; Apply request values to components -&gt; Validate components -&gt; Apply component values to beans -&gt; Execute application events -&gt; Render view The logic you would put in the controller method in Spring MVC goes into event handlers in JSF. If it helps, you could think of JSF applications as being implemented sort of like you would Swing desktop applications.
Heh. It blows my mind that one of my professors made this.
twoDArray is a double[][] pretty much what im trying to do is go thru twoDArray[i] and sort the numbers in twoDArray[i][j] from smallest to largest. for example; say i have a double[2][3] that looks like this.. twoDArray[0][{4,3,5}] twoDArray[1][{7,6,5}] im trying to sort it so it looks like twoDArray[0][{3,4,5}] twoDArray[1][{5,6,7}] 
Hi, you can visit this site http://www.codetriage.com ... I think is a good choice
yeah exactly! haha
If you wrap it in a list, or provide appropriate helper methods, you abstract the 2d array into effectively a 1-d array. Then you can apply a standard [sorting algorithm](http://en.wikipedia.org/wiki/Sorting_algorithm) on it.
i cant use extends AbstractList :/
nice thanks. my teacher said selection sort was the best way to do this (even though its still really inefficient ha) what is the difference between selection sort and bubble sort?
Simply don't extend it in this case if you don't want the additional functionality. I'ts the get set and size method's that you'd need to sort, all of which don't depend on `AbstractList``s code
[Selection sort](http://en.wikipedia.org/wiki/Selection_sort) sorts from the begining of the array to the end, [bubble sort](http://en.wikipedia.org/wiki/Bubble_sort) does the opposite, sorting the last position to the first position. In dept, selection checks every element in the array looking for the smallest one, and only after that it puts it on the beggining. Meanwhile, bubble sort checks every element with it's adjacent element, and swaps then if it'll put the larger number in the back. In practice, it means selection has to swap less times, and makes it a little faster than bubble sort(yet there are faster and more complex algorithms) Here's the code for it: /* a[0] to a[n-1] is the array to sort */ int i,j; int iMin; /* advance the position through the entire array */ /* (could do j &lt; n-1 because single element is also min element) */ for (j = 0; j &lt; n-1; j++) { /* find the min element in the unsorted a[j .. n-1] */ /* assume the min is the first element */ iMin = j; /* test against elements after j to find the smallest */ for ( i = j+1; i &lt; n; i++) { /* if this element is less, then it is the new minimum */ if (a[i] &lt; a[iMin]) { /* found new minimum; remember its index */ iMin = i; } } if(iMin != j) { swap(a[j], a[iMin]); } } 
Seems like I'm wrong, and bubble sort *can* be faster than selection in the right conditions. I had the less optimized version of bubble sort in mind. Anyways, selection code is simpler to understand, and they're both not the fastest options, so go wichever you understand better :3
Thanks!
none taken Bro, this is just the first part of my final assignment for an intro to java class, so I doubt my teacher considers it a simple task for us beginners. 
&lt;http://docs.oracle.com/javase/specs/&gt; These specifications might answer your questions.
Thanks, but that's the Java language rather than the runtime
CLR via C# link for anyone interested http://www.amazon.com/CLR-via-Edition-Developer-Reference/dp/0735667454 
Actually, the specs for the JVM are linked on that page, but here's a direct link for the Java 8 JVM specs: [http://docs.oracle.com/javase/specs/jvms/se8/html/index.html](http://docs.oracle.com/javase/specs/jvms/se8/html/index.html). The JVM specs are a very good and canonical source for information on the JVM, but if you're interested in something else, I have seen [Java Performance](http://www.pearsonhighered.com/educator/product/Java-Performance/9780137142521.page) recommended elsewhere as being a good low-level guide to the JVM. 
Look at BalusC's zeef page at https://jsf.zeef.com Great index about everything you could possibly want to know, including several great tutorials to get started.
Indeed ;)
*Nods towards OP's direction.
Do you know of any relatively high-profile or at least complete games that would show off AWT/Java2D for game programming? Most success stories I see use LibGDX or something else; I suggested JavaFX since it's definitely the newest and most supported UI toolkit (under the guise that it's in the same class as the unsupported AWT), and Slick2D simply because it's easy to use. That said I'm not doubting that AWT may actually be a great choice that I wouldn't think to make, but personally I've never seen it discussed or promoted, especially for 2D games. So any examples of even moderately successful or just even well-made freely available 2D games with AWT would be cool. Also most libs tackle more than just 2D; if one goes for AWT for 2D, what options do you use for e.g. audio and input handling? Also I don't know if "carrying around" JavaFX is an appropriate metaphor since it is now bundled with the JRE. From what I can tell JavaFX is at least *as* good a choice as AWT and equally portable. Certainly there seems to be much more community activity around it.
So much Google and Spring hate there. Is it because Google and Pivotal are not in the sponsorship?
This wasn't that great. The Java4Ever parody was much better -- at least it made sense.
So much cringe.
 I'm looking for contributors to [uniVocity-parsers](http://github.com/uniVocity/univocity-parsers/). It is a suite of text parsers for java. The objective of this project is to provide the fastest and most flexible text parsers, with a consistent interface for processing different formats. Currently CSV and Fixed-Width text files are supported. I've documented everything I could and created a complete tutorial there to make it easier for everyone to understand and contribute to it. Things you can work on immediately if you are interested: implement parsers for [delimited files](http://en.wikipedia.org/wiki/Delimiter-separated_values), [fielded text](http://en.wikipedia.org/wiki/Fielded_text), [TSV](http://en.wikipedia.org/wiki/Tab-separated_values), [LTSV](http://ltsv.org/) or any text format with tabular data. If you (or anyone else) are interested, we can arrange a skype meeting.
Well, I sort of agree with you - I think the movie was a bit too long to be really funny and clever and started being cringy. I also sort of agree with them - I think that Spring ecosystem (pardon me, 'framework') is starting to get too big for its own good, but you know, that's just my opinion, man.
A new release is certainly unexpected! I have been using 20070724 on a project since 2007 and long since gave up hope that it would ever be updated.
Not as good as last years video. Also at 46 seconds he hands him the "JavaCode" and it's actually clojure.
Hey, thanks for your message! Could you PM me your Skype?
Why should I use this over [**OpenCSV**](http://opencsv.sourceforge.net/) (or vice-versa)?
The throat slitting bit was pretty funny. That was about it. Wtf was the sponge thing referencing? 
It sounds to me like you're violating the 'single purpose' rule for your classes. A class should be responsible for holding data or serializing, not both. Also - hard to say without seeing your code - but sounds like you could just use Jackson?
Not really an answer to your question - but why aren't you using something like Jackson, which can automagically serialize/deserialize things back and forth from JSON? &gt; Some solutions I've seen are factories for handling the static method problem, but I'm not really a fan as I need to update the factory every time I add a new class to the hierarchy. Well, my unit tests would fail, so that's my reminder 
1. Here you go: * JDK: &lt;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&gt; * IDE: &lt;http://www.jetbrains.com/idea/download/&gt; (community edition is more than enough) 2. There's plenty of choices here, but since you are just starting I'd recommend looking into: * Tried-and-true standards: * Tomcat (servlet/web application container) * Maven (kind of sucks, but it's extremely popular and flexible) * Plain' old servlets. They suck in usablity, but they have tons of learning resources and give you extreme flexibility * Dropwizard: http://dropwizard.io/getting-started.html * Look into following libraries: Guava, Guice, Jackson (JSON), commons-lang3, commons-io, [metrics](https://github.com/dropwizard/metrics), slf4j+log4j * Bonus: Netty or Jetty. These are bit above and beyond of what you most likely have to use. 3. Absolutely! I recommend IntelilJ IDEA. Eclipse is fine too, but it is less responsive (as in, takes longer to respond to your actions)
Bill Venners: Inside the Java Virtual Machine: http://www.artima.com/insidejvm/ed2/
Hmm, I embarrassingly enough didn't actually know about Jackson's capability for doing this. I have used Jackson before, but that was exclusively for XML stuff when that was still cool a long time ago. I'll give it a try. Thanks!
Yes, I realize now that I really should be using Jackson for this. I have used it before a long time ago, but was under the impression is was only for XML and more closely tied to web frameworks. Looking at the newest documentation, it looks like it's just what I need. Thanks!
Someone answer this man. 
Are you on a corporate or school network? You may be firewalled.
Do you have a key(like a map key)
I like how the vim keys are the most pressed.
no /'s? and you must have made a lot of typos!
mind sharing vim plugins / configuration to code java with vim comfortably? 
The only reason I'm using vim to program in java is to get used to not having code completion. I'm getting ready to take AP computer science, and you have to write java code with pen and paper. Even though I have been using java for many years, I've been spoiled by Eclipse's completion. Before I started using vim, I wouldn't have known the exact code to find the length of an array (array.length vs array.length() vs array.size()) So I installed vim for windows and have been using that. No plugins or configurations. I did write a batch script to compile and run code easier though.
You can have some github graphs in https://github.com/jhipster/generator-jhipster/graphs/contributors and https://github.com/jhipster/generator-jhipster/graphs/commit-activity . IMHO it is a real project.
it worked eventually
Heat map, or frequency diagram?
Whatpulse heat map?
I took that last year. I didn't really have to practice without auto complete because I memorized them subconsciously while using it. That, and the IDE we normally use doesn't have auto complete.
It's a real project. I considered it for [CommaFeed 2.0](https://github.com/Athou/commafeed) but I chose [Dropwizard](http://dropwizard.io/) instead. Jhipster generates (a lot of) boilerplate code in your project, dropwizard has all the boilerplate code inside their own jars. Your codebase is smaller and to the point, there's no distractions. It's also easier to upgrade since it's just a version change in your pom, jhipster has to overwrite your files and I'm not sure what happens when there's a conflict. The Dropwizard project is also a lot more mature.
Can anyone explain why they name-drop Google so many times? Is the company the designated New Bad Guy on the block?
Lot's of dollar signs?
&gt; That, and the IDE we normally use doesn't have auto complete. What IDE is that?
BlueJay :-(
God damn it English keyboards are so simple... I already got used to the monstrum that is the German one so I won't be switching, but damn this looks so tidy.
https://github.com/ocpsoft/prettytime &gt; https://github.com/joestelmach/natty &gt; http://wiki.modularity.net.au/ical4j/index.php?title=Main_Page
I'd love to see more explanation of how the library works, what kind of results one would expect from a dataset.
...and ensure that JAVA_HOME points to correct directory.
That plugin , can't map jk to Escape well so no
Yes, we've got some work to do there. For now take a look at the [old README](https://github.com/sanity/quickml/blob/00956411c365d1628d0c6df41ed0b0e664985a55/README.md), it has some details about the internals.
Isn't it just basically JodaTime?
Yes it is. The author of joda time wrote the java 8 implementation. Here's the blog where he lays out the differences between joda time and jsr310. http://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html
I've never generated a heat map before... what did you do, just log each key press and determine the color based on how high each number was? What was your algorithm?
This is neat, thanks for posting!
It's like building a bookcase for a woodworking exam, but not allowed to use a hammer. 
They worked on this for years. I remember reading that it was supposed to be released for Java 7 but instead pushed it to 8. 
I just used a program called whatpulse
I dunno man, I like having the ability to work with more than one project at a time. In all seriousness, I like to use eclipse because I'm used to it and All the programming competitions in which you have to use their computer have eclipse. I do have Intellij on my computer, but I just never got used to using it.
A project switch doesn't take that long...and if you really wanted/need to switch between projects really fast, it should probaly have been structured into (sub)modules from the beginning on.
I ninja edited my comment for the actual reason, And I use multiple projects because I work with both java 7 and 8
Swing is the default way but it is quite old , JavaFX is the new way by oracle standart , but not all VMs support it.
JavaFX is the next GUI framework for Java. 
Check Qt and SWT
JavaFX would be the best way to go - if the VM doesn't support it, it might be time to update your VM to something more current.
As others have pointed out, the two "built-in" supported GUI frameworks are Swing (old, well-supported, a little rusty) and JavaFX (new, shiny, still has a few kinks in the pipe). If you want to try Swing, grab an IDE with Project Matisse support. Netbeans is not a bad option. Use their "Swing Application" template. If you want to try JavaFX, ignore all versions before 8. They were wretched. Make sure you grab the JavaFX Scene Builder. In both cases, there are plenty of tutorials out there. Make sure you understand their respective threading models. Moving from Python to Java, this might be a bit of a jump, but it's the difference between a bad GUI and a usable one.
If you are familiar with the Spring Framework and possibly AngularJS, JHipster is a fantastic stack to develop on. It takes care of all the annoying details that stop so many people's projects in their tracks. Out of the box it has a working user login system with Spring Security, database configured, caching, hot reload, etc. I've been using Spring Roo to bootstrap large projects but just starting with JHipster now and really liking what I see. 
&gt; but not all VMs support Fuck those VMs! Sincerely, Richard Nixon
Oh come on, this question again, like how many times? JavaFx.
I use [Pivot](https://pivot.apache.org/) for my project which worked out really well for me. The tutorials are good and they have plenty of examples on their SVN. However the JavaDoc is barebones and the community is still very small.
JavaFX if you want to be "full Java". It has a modern API (ever tried Swing? It is a mess. Compared to JavaFX is much more cumbersome. The main drawback is that JavaFX hasn't a native look and feel (it has CSS styles that can simulate that well, though). I'd suggest Qt Jambi if that is your main concern.
Quite a lot of XML configuration considering Spring 3.2+ has been moving away from that.
This looks really nice. :)
While I'll agree that JavaFX 8 is great fun once you've got the runtime up and rolling, the stuff around the edges is, well, a bit wacky. Imagine the case where your application needs to do some work before starting the JavaFX runtime... You unpack some resources, parse some command-line parms, establish some web services, or whatever. The time comes to invoke the runtime, and the entry point is... &gt; public static void launch(String[] args) **Wat.** No handle passed to the calling thread. No way to pass anything but strings as parameters. The least convoluted way to pass context into a running Application is *static scope*... Sigh. Whatever. Okay. Let me just instantiate a UI defined in FXML. &gt; FXMLLoader.load(getClass().getResource("foo.fxml")); Cool. Now -- how do I get hold of the controller for this UI? Oh. *I can't*. So there are additional hoops to jump through, with each UI needing to be loaded on a separate loader, with the resultant controllers being treated as elements of *state* on the loaders. While I won't dispute that the resultant UIs are functional and beautiful, the APIs are pretty rough around the edges.
No offense at all meant, but I just don't understand the technical aspects of a lot of your post. I just started using JavaFX too, so my familiarity with the API is limited. I assume launch() is just their statically accessible way to invoke an Application, i.e. via a main() method. With FXML, you have to use "fx:controller=&lt;class&gt;" to define a controller. Then simply loader.getController() to instantiate. What JavaFX needs right now is more adoption. More frameworks. More code out there on the web for people to expand on. It's just so new and there is so little adoption that everything is pretty raw. The API is pretty expansive since it is intended for multiple applications (e.g. games, enterprise apps, mobile apps [..kinda], etc). That's my issue. They don't provide any sort of MVC framework to roll your own enterprise app or anything like that so you have to roll your own. It's not hard, but it would be nice if they did some of that stuff up front or borrowed some concepts from GWT or something to get people going quickly.
The creator of pivot was hired and designed the FXML standard used in JavaFX. The capabilities of JavaFX are well beyond pivot at this point, especially with JavaFX 8/Java 8.
Setters are methods that are used to set the value of a variable of an object, so that the variable doesn't have to be public. The "this" keyword is used to refer to the instance of the object that you're currently within scope of. http://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html
when you pass bar into setBar with (String bar), where is it coming from? So this.bar always refers to the first declaration of bar?
this refers to the current object you are working on. So if you use it in a class, then it will refer to the current class when it is instantiated. The setters are for setting the value of a private field on an object. It is used for encapsulation of variables in an object. 
Sorry I don't follow. Do you mean FXMLLoader? It does not return a scene. It just turns FXML described Nodes into Java objects. You mean if there is a runtime error in the case of a typo specifying the controller class in FXML? Tom Schindl is developing a tool that will convert FXML to Java/Class at compile time if that's what you are after.
When you call setBar from somewhere else in your code, you have to pass in a String. String newName = "foo"; setBar(newName); Now setBar uses the newName String which equals 'foo'. Thats where String bar is coming from inside of the setBar method
I thought I was the only one :P
I'm disappointed at the lack if love SWT is getting here. If you want to write Java apps that actually look like they belong on the desktop, it's simply the best choice. If Eclipse is your IDE, you are already using it. 
And here I was thinking that youre using dollar signs in your variable or function names like some sort of monster. 
For basic printing of data it is fine especially when learning. As for professional programs they tend to use something like log4j. This allows console and log output as well as output levels such as debug, info, warn and error. So for learning stick with it but in the future take a look at a logging API instead.
Quick and dirty debugging is always a few printlns away with it. Makes it easy to see if some variable is doing what you think it is.
As a professional I use it for debugging. For production code you would use a proper logging framework like log4j. It can be useful to print out nodes while visiting a graph. Or, in a multi threaded environment problems like race conditions may be hard to reproduce under a debugger so print statements can help show what is happening. In eclipse, you can also do tricks like putting print statements on a conditional breakpoint to print stuff without having the calls in the real code, which is useful when debugging remotely. 
Or learn COBOL.
First off, like everything in life, it depends on the context in which it's being used. For first year developers who are often writing console applications it can be very useful. It does not require any special libraries and can be a good tool for debugging and just displaying output for a user. Often times when applications get big and complex there are libraries used to help with text formatting, display of complex objects as strings and other stuff, so the print line may be used but it's deep inside some library. When you move beyond the console and you start talking about servers of all different kinds and gui desktop like applications, many times the console for those types of programs is just dumped to no where. Since there is no console attached, often times those type of applications use a logging framework. In some instances the logging framework will in fact be configured to print to the console for local debugging by a developer, but when it's running in product the output will go to a file or database of some kind. 
For logging information to the console, you should use a logging API like SLF4J or Log4j2. Use of `System.out`, `System.err`, etc., really ought to be limited to logging frameworks. That way you can easily change what `OutputStream` (or equivalent) is being used to output log messages. For making terminal applications, however, use of the three standard IO streams makes plenty of sense.
There's nothing wrong with System.out.print() and System.out.println() when you're just starting out. There's nothing better than seeing your program produce the output you asked it to or for simple debugging. As you progress you'll learn how to use the interactive debugger, which is much more productive for complex code than putting in System.out.print() or System.out.println() everywhere.
An example: System.out.print("Please input your name: "); final String name = getUserInputFromScanner(); System.out.println("\nYour name is " + name + "."); results in Please input your name: jmgoodhart Your name is jmgoodhart. EDIT: -4 points? I wonder what I did wrong. Sadly, people don't speak as much as they should.
In addition to what was already said: If you need to refer to the current instance of a class that you can currently not reach with "this", because you're in an anonymous class or an inner class, you can do DatOtherClassIMean.this (assuming that you do have legitimate "this-access" to it and the only problem is how to tell the computer what you mean).
Intro courses tend to have you write methods that do three different things: read input from terminal/file/constants, calculate answers, and print the answers. This is bad style; most methods should get their info via arguments, compute and answer and return it. Better intro-books will at least separate those three tasks into three methods (and at least you can unit test the middle, calculation part). In larger programs, only the 'outermost' methods get terminal/file input and `System.out.print` results. And in real-world programs, the I/O is even further abstracted away -- you'll have Views that listen to UpdateEvents you generate (and the View might print to a terminal, or change an html5 canvas, or generate an email), Logger objects that will handle log-messages (again, they might print, or write-to-file, or suppress output, depending on their internal configuration). Your 'core' programming will do little I/O.
I went through an entire bachelors degree and not once did anyone mention THAT. For fucks sake.
This. Do this. I could not have said it better.
I had some decent working experience with Java thick client GUIs. If you're looking for a professional framework, I might suggest that you utilize Eclipse RCP. The tooling platform is great. You also have a drag and drop GUI builder that's very similar to how VisualBasic GUI applications are being made. Except the event listeners you are writing is of course in Java. That's the only thing I use Eclipse for. For enterprise web applications, I stick to my tried and tested Intellij. 
You wouldn't believe how that relic of the past is still being used whenever you do some transactions like ATM/credit card and so on. Rumor has it that the programs itself has even outlasted the original developers who have written business apps in Cobol. 
Java FX is fucking amazing. Swing is good to begin with, as there is a lot of documentation for it, but FX is the future.
I always used it for single line text. .println creates a new line. 
I've heard people discussed a lot about logging framework. Why aren't people using java.util.logging (the built-in logging facility)? Is it because it is synchronized and may impact the performance of the program?
I don't like it using for "quick and dirty" debugging. From my experience, if you need to quick'n'dirty debug something, it's better to use some kind of logging routine anyway. The reason is that you can usually turn off those debug log messages using some configuration switch, but the messages themselves will stay in code. OTOH, System.out.print needs to be commented out or removed completely. Usually when I debug something, there is a good chance I will debug it again once requirements change. Having debug messages already in place speeds up the process.
Be careful! I have seen many large projects with tons of printlns that you cannot disable, other than going through each println and checking if it is valid output or not. Almost equally bad are a gazillion commented out println statements. If something could be important for debugging, log it at the debug level. If you just want to see the value of a variable, if you use decent IDE, you can just watch a variable: http://www.jetbrains.com/idea/webhelp/debug-tool-window-watches.html Combine with JRebel and you can fix the bug live while you are running the program ;).
When you want to be able to rely on `stdout` to provide a consistent interface to your program, you better be sure that any library code you use do not write to `stdout`. A useful trick is to capture and reassign `System.out` immediately after your program is started. Then if other components writes to `System.out` the output will not go to `stdout`.
If you download an IDE like NetBeans, it includes the option to create lots of Sample projects. These contain lots of documented examples which you can experiment with. Oracle also has an online tutorial at http://docs.oracle.com/javase/tutorial/
Honestly I have always used log4j. Some of the work I have done required very fast writes to the file and yes synchronization would impact the performance of those applications. I personally also like the fewer number of log levels and haven't found a reason to have the fine, finest, etc group.
sun.misc.Unsafe will give a performance gain over this... If you're brave enough to use it.
Read the OP's post - your comment has nothing to do with the question that's actually being asked, hence the down votes (same goes for /u/theangryirishprodigy).
Thanks for the reply. OP is &gt; wondering about the use of *System.out.print* for which I gave an example. In what way is it off topic?
Bot/spam post.
http://en.wikipedia.org/wiki/Daemon_%28computing%29 Yes, CLI your Daemon. a CLI alt: http://args4j.kohsuke.org/
https://secure.csse.uwa.edu.au/run/help3001?p=np&amp;a=24&amp;all=y3 http://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/
In the wiki article it says: "A daemon is usually either created by a process forking a child process and then immediately exiting, thus causing init to adopt the child process" How can I do that with java? Even when I manage to fork a child process, I still need to be able to communicate with that process.
with a Thread http://en.wikipedia.org/wiki/Thread_%28computing%29 http://www.neilson.co.za/creating-a-java-daemon-system-service-for-debian-using-apache-commons-jsvc/ "A daemon is a computer program that runs as a background process, executing tasks on a predefined schedule or in response to particular events, or in response to requests for information or services from other programs." "Systems often start daemons at boot time and serve the function of responding to network requests, hardware activity, or other programs by performing some task" http://math.hws.edu/javanotes/c12/s4.html
This code sample is pretty non-standard java and would only be used if there were a serious performance reason to do so... So... Using unsafe would be a perfect fit for this kind of code. The more mainstream way (albeit with less efficiency) would be to create since kind of composite object that could act as a key into a map or something.
No, the OP's sample code is straightforward Java (albeit low level). Check out the source to DataOutputStream for another example. Unsafe is for the brave and I've seen some significant gains when reading longs from a byte[].
That's because you can learn that at your job in about 30 minutes. Spend your time studying real computer science (and not java libraries) while you are in school. That's the stuff that takes more than 30 minutes to learn. You probably went to a good school.
The best part about slf4j is the printf functionality. Huge time saver when writing debug statements.
For me it was simply a lack of knowledge. I don't remember how I came across `j.u.logging` but I was glad when I did. Log4j did not offer me anything on top of `j.u.logging` that I needed. Do I ditched it in favour of `j.u.logging`. One less dependency. Having said that, I do not *know* if there is any good argument in favour of `log4j`. But for my applications `j.u.logging` was *more* than enough. Because essentially I used it in the exact same way as I used `log4j`.
I did; I agree that it's hackish; you're initializing both AWT and Swing in order to create a nested FX instance, so that you can get a handle to the FX event thread. It works, but it's not what I'd call elegant. I simply don't understand why we can't just have an API where you pass in a URL, have FX build the UI, and give back a handle to the controller. Maybe I'll go write one.
SWT has quite a few annoying issues, but it does make cross-platform products that look and behave as natively as any framework I'm aware of.
How to?
it's an environment variable that should point to the jre directory. it should be updated during jdk installation, but it doesn't hurt to check it. you can edit it in system properties (btw, if you are using `cmd` to test out whether it works, you will have to open new instance/window of cmd after every change)
I suppose for simple GUIs, the code can be quite trivial if you're just using SWT/XWT which is still part of RCP. Just instantiate a shell as your root component, design it with WindowBuilder and you're good to go. I think the inherent complexity that you are referring pertains to RAP? 
I'm not too sure. Last time I checked with 1.7.0, at least packing 2 ints into a long was compiled into exactly the same assembly no matter if I used Unsafe or &amp; / &gt;&gt;.
Maybe try /r/javahelp ? Technically, if you were just compiling the application using 'javac' you'd just put the jar as an argument and then run your application with the jar on the classpath, assuming it wasn't a source jar.
did you try googling? https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=importing%20a%20library%20in%20netbeans http://stackoverflow.com/questions/7318598/how-can-i-import-a-library-to-a-java-project-in-netbeans 
Yes I tried googling. Problem is that it's not a standard jar file to import. It's like a whole folder and mess of Java files and jar files
j.u.logging used to be pretty bad, hence the reason log4j was created. Then Apache Commons logging was created ... and finally slf4j to wrap them all up in a "unified" way. [Java people are obsessed with their logging](http://en.wikipedia.org/wiki/Java_logging_frameworks) :)
The only part about this I don't find satisfactory is &gt;Of course we need to feed in this droid to the next routine somehow, which is IsEnemyStronger. This can be achieved by giving the droid a context. One simple way could be that the Droid class could have an attribute nearestEnemy and on success the routine will populate that field and on failure it will clear it. This way the following routine can access the droid’s internals and use that information to work out its success or failure scenarios. By doing this your Droid can now be out of sync and the routines become coupled (you can longer call attack prior to checking if an enemy is within range), and if you do this for moderately complicated logic you could have non-obvious failures because you have to keep track of what state needs to be updated prior to each Routine. 
I was reading about Lambdas in Java 8 and came across this page. I find the explanation of the usage scenarios rather confusing. Anyone can clarify?
Lack of features and performance. Really it's fine, just not the best. SLF4J is a facade for any popular logging framework including j.u.logging.
I think demons and threads are not the exact path to follow, if you want to keep things easy. Moreover, you want to use a serial interface to talk with arduino, so you don't need to create a multi-threaded application. If you use linux or mac (you talked about terminal, so I think so) just use the proper commands to run programs in background and running also when you close the terminal or logout. I personally like nohup, because it does what you need with a simple single line: nohup [your-commands] &amp; See i.e. http://linux.101hacks.com/unix/nohup-command for details. Next step is to keep the app running. Easy: just use an infinite loop, with a variable check, so the app can shutdown itself later with a specific command. Next step is to enable the app to receive external commands. You can re-use your already developed application logic opening it to external control using the standard and powerful Java Management Extension (JMX) (http://docs.oracle.com/javase/7/docs/technotes/guides/jmx/examples.html). I use it often and I think it is really cool: it's standard, easy, and there's many powerful tools, like jconsole and jvisualvm for example, that will be able to interact with your JMX enabled application. In your case, you can expose 3 methods like "startSendingData", "stopSendingData", "shutdownBackgroundProgram" and a String "data" field, so you can choose what to send, and maybe a float "progress" field to see how much data was sent since start. Final step, create the CLI program that receive commands and send them to the background app. Or, simply open jconsole and call the exposed methods you prefer.
It's a Maven project as evidenced by the pom.xml file in the root of the project. I can't advise you how to build it in Netbeans as I don't use it but to build the project on the command line you should: 1. Download Maven and unpack it to a logical place (e.g. C:\Program Files\apache-maven-3.x.y) 2. Put the Maven binary directory on the $PATH or %PATH% (e.g. C:\Program Files\apache-maven-3.x.y\bin). 3. Get the Kumo code from github into some local location 4. `cd` to the Kumo project root directory 5. Run `mvn package` If you've done everything right and the project is configured correctly then you'll have a new JAR file in the ./target directory. Copy that JAR into your own project and tell Netbeans it's a dependency.
Looks like it's a maven project. So just add this as a dependency if you also use Maven, else compile it to a jar (still using Maven) and then import the generated jar as usual.
I'll defend java from most detractors until the cows come home, but I'm really curious *why* you'd want to do this. I thought bit twiddling was relegated to hw programming these days. 
Could be anything, but most likely they simply want to see how you think and work, right answers being less important than your thought process. If they just kind of let you tackle something from the ground up, talk out loud what you're doing. I would want to see that you're asking them or Google the right kind of questions. If you're unfamiliar with a topic, don't be afraid to voice that, but also show that you're adept in figuring it out.
Holy balls I love you. Thank you so much! 
Did you get it going?
Is there something you found specifically not clear?
That's excellent advice. Many technical interviewers will ask questions with no interest in the "solution" but great interest in the process you use to arrive at your solution.
Yes sir. Works like a champ. Thanks again :)
Any time
Last time I was applying for jobs it was stuff like implementing the logic for an othello game, writing a word count progam, writing a function to determine if a point was contained in a given convex closed manifold, a depth first tree traversal progam, and a bunch of other similar little toy progam snippets. Most had the boilerplate written and just wanted a function or two filled in. All in all it was pretty straight forward stuff and if you know your stuff and don't let the pressure get to you you should do fine. None of the stuff I was given was meant to trip you up or demonstrate some weird corner case in a language.
You should at least know some sorting algorithm, some string manipulation, streams and collections.