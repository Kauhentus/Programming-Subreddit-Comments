It's good when the the function is pure, but there another deeper level of hell underneath, when it's static but also modifiers state. You could probably solve your issues with testing using method references and structuring your code so that if uses higher order functions concept.
Makes sense: https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html#remove()
This sub is pretty dead, just use this one.
Yes perhaps I sound a bit harsh/judgemental. But the person who writes code like this isn't new. Their resume reflects years of experience. I suspect maybe it's somewhat "embellished."
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Agreed. The utter tedium and verbosity of getters / setters is what started to really turn me off of programming and OOP programming in particular. Are JavaBeans, for all intents and purposes, finally dead? Does anyone still seek to conform to the standard?
/r/javahelp 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Jump outside closing bracket/quote with Tab Nice.
Spring and some ORMs still make use of Javabeans specs and reflection techniques based on its conventions. Also, popular Java IDEs still provide automatic generation of getters and setters. Hundreds of thousands of Java programmers still adopt those conventions without putting any thought.
We needed a place where all the Java videos could be linked and critiqued. Thanks!
I make my libraries without the get/set prefix. One thing to note is that you'll lose interoperability with Kotlin, which converts get/set methods to property accessors.
Is it *your* definition, or can you elaborate on this one? By the way, std::move is not something a compiler supports, but it is a part of the standard library. You might be thinking about move semantics. That first comes with the version C++11, which was approved on 12 August 2011. Would you consider a 7 year old software *modern* given the pace of today's IT progression? Anyways, I'm out, as it just feels like you're trolling, sorry.
&gt;verbosity of getters / setters Try [Project Lombok](https://projectlombok.org/).
How about explaining right at the start of that blog post how many developers responded, and how did you reach them for that survey ? Your results here seems to indicate that survey isn't worth much...
Please, maintain proper language. Racial slurs or slang have no place here.
Kotlin is also being supported by JetBrains. I don't think Kotlin was meant to completely replace Java. It's supposed to integrate into existing Java codebases
I prefer Swing. It is well documented and a lot more customizable than people think. Even IntelliJ IDEA is made with it! As a side note, JavaFX is actually being removed from the JDK in Java 11. See [here](https://www.infoworld.com/article/3261066/java/javafx-will-be-removed-from-the-java-jdk.html).
If it doesn't understand ASTs and even deeper, then is it even an IDE? It would be called a "text editor". I've seen a few Eclipse refactoring errors over the years, but not lately.
"is" prefix should probably stay in many cases
I dunno, maybe you are right... But it is definitely better than the "p" suffix convention in Common Lisp, lol
Yeah I read about that, thats why I was wondering about it.
It’ll still be available, just as a separate download.
As far as I know I won't be seeing java GUI on college, thats kinda why I'm wandering on my own...
Good question, I've forgotten, I'll get back to you on that. 
I'm yet to give it a try, I even have a class on Udemy about HTML5/CSS3(...) and another about Spring Boot, Hibernate, REST, Ionic, JWT, S3, MySQL, MongoDB, but since I have to manage my time between college/internship I'm kinda delayed on that, but hey thanks for the advice... should I just stop with it and try messing with those instead?
&gt; Ability to filter a breakpoint hit by the caller method Oh my goodness, yes! It's too late to be of use with the pig I was trying to unpick yesterday, but will be a massive help in the future.
Oh I see, thanks for clarifying that for me
No problem!
I would suggest XML. It's very user-friendly, having been designed from the ground up for manual editing. The signal-to-noise ratio is great, and the syntax makes it easy to read and modify. Error handling is one of the nicer aspects of the ergonomics. Other formats introduce an inordinate amount of complexity trying to accommodate user error; XML keeps it simple, and your configuration file is either correct or incorrect (usually incorrect). Additionally, XML is very extensible, allowing advanced local and remote behavior constructs (e.g. [schema healing](https://www.owasp.org/index.php/XML_Security_Cheat_Sheet#Schema_Poisoning), [entity expansion](https://www.owasp.org/index.php/XML_Security_Cheat_Sheet#XML_Entity_Expansion) and [native compression](https://www.owasp.org/index.php/XML_Security_Cheat_Sheet#Billion_Laughs)). Finally, memory requirements are fairly modest, certainly well below the requirements of e.g. Google Chrome.
Can you force push without that dialog?
Or Kotlin 
Agreed.
Properties at the language level is a bad idea. I'm glad Java doesn't have them. In Java it's very easy to explore new frameworks because you have to necessarily know the names of everything. Is it it Width, Height, Size, Length, Depth? In C# I find myself doing ".W" then ".H" then ".L" etc... In Java I can just to ".g" to see all the getters and quickly see what I need. In C# there's no setter overloading. In Java I have had cases where I have a LocalDate property but I'd like convenience setters to allow string "yymmdd", long ms, "y,m,d" setters. This is not doable in C#. Properties at the language level hide performance issues. In Java for example: for (int i=0; i&lt;getCount(); i++) { setSomething(i); } this is more obvious that this possibly slower depening on what those getters and setters are doing - not obvious all the time depending on the framework - could be web services or data access... it's less obvious like this: for (int i=0; i&lt;Count; i++) { Something = 1; } Or best int count = getCount(); int counter = 0; for int (i=0; i&lt;count; i++) { counter++; } setSomething(counter); 
&gt; Would you consider a 7 year old software modern given the pace of today's IT progression? Uh, yes? RVO has been table stakes for compilers since c++11.
Not a subreddit, but a nice collection https://dev.tube/
It looks like in your [submission](https://www.reddit.com/r/java/comments/91v8af/java_boolean_bug/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Such questions belong in **/r/javahelp** as our Automoderator has told you. Nonetheless: You are using the *object type* `Boolean`, not the *primitive type* `boolean`. Object types cannot be compared with `==`, they need `.equals`. Under most circumstances, you want to use the *primitive* type `boolean`, not the *object type* `Boolean`. The *object type* `Boolean` mainly exists for storage in collections.
It's better with old icons https://plugins.jetbrains.com/plugin/10777-legacy-icon-pack-for-intellij-2018-2-
"MacBook Touch Bar support" finally :) All right, does anybody see where performance improvement?
Hmm so Im in a similar situation as OP. In my application (Crypto Portfolio Tracker), I store a list of trades. Say I want to run some calculation on those trades like finding the current profit of the total portfolio. Where would I store the business logic for this? I was thinking in the service layer but Im not sure. Any advice?
you can use editor.swagger.io to design your API, that will help you to generate your API with models for angular and backend(using swagger-codegen plugin) 
Thanks for the tip, I will look into this
How do I move this to r/javahelp ?
The "decentxml" lib is good: it is able to read/write while preserving comments. You could maybe add a thin layer on top of it to get exactly what you want. &lt;dependency&gt; &lt;groupId&gt;de.pdark&lt;/groupId&gt; &lt;artifactId&gt;decentxml&lt;/artifactId&gt; &lt;version&gt;1.4&lt;/version&gt; &lt;/dependency&gt; 
&gt; Yes perhaps I sound a bit harsh/judgemental. no, you don't. You weren't mean about it. And this isn't a kludge to satisfy weird business requirements... its just bad. Like hopefully the guy was on a deadline working at 2 am kinda bad. 
This! I hate this stuff.
For me, getters are readers while setters are writers for that objects fields, so I think it just makes sense. As I see it, classes are made up of three classifications of methods: getters, setters, and actions. 
Well, mutable static state is definitely a hellish scenario in almost every case. 
Its pretty straightforward in the maven documentation. For a basic project, javac/ant is going to be a bigger pita anyway. 
This is anecdotal, but in seven years I've never met a single person that asked me about certifications or claimed to have one.
+1 heres hoping for this too! 
This perfectly describes the code base I've inherited. I've never heard the term string based programming before, but that is exactly what it is. Booleans are "yes" or "no". 'Objects' are passed around as pipe delimited strings. .equalsIgnoreCase()s everywhere. Most frustrating part is that this isn't just in some legacy code. These are continued practices that I see happening within my team and being the most junior member I don't know how to stop it.
Isn't the configuration standard for minecraft mods standardised trough forge? I would stick to that as it's what everyon expects.
Great, maybe my company will make this version available to us by late next year.
No, no it isn't. Mods come in many forms, Classic forge mods, Sponge Plugins, Bukkit Plugins. But it's not hugely relevant to my question, my question is more focusing on the UX of configs in situations where they are preferable to clunky UI.
Self executing jars tend to be more convenient (at least for unix-like OS users). I made this little plugin that takes the well known process of appending an sh script to the head a jar, and automated it! If possible I will write the executable bytes to the generated file directly in future versions so that chmod is not needed. Let me know what you guys think! I hope people find good use for this.
I can only talk about the ones I've used, It's perfectly valid to not like everything I've tried. Doesn't mean that my mind can't be changed, or that people can't provide input, or that there isn't something I might be ignorant of. 
Downloading now... :)
How is Tomcat, a servlet container, relevant to JavaFX, a GUI/framework platform? Sure they're both written in Java, but they serve very different purposes.
While I appreciate the effort, there are some missing pieces here. For example, the classpath of dependencies used by your jar needs to be handled. Your code doesn't seem to handle it, and I believe the existing `maven-jar-plugin` does what you want for you: Let me give you my example: &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt; &lt;addDefaultSpecificationEntries&gt;true&lt;/addDefaultSpecificationEntries&gt; &lt;addClasspath&gt;true&lt;/addClasspath&gt; &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt; &lt;mainClass&gt;com.univocity.parsers.html.Main&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;/plugin&gt; Here `&lt;mainClass&gt;` will make the jar executable (as you can see in the generated jar's MANIFEST). If you simply double-click it then it should run. The `&lt;addClasspath&gt;` will also introduce all dependency names in your pom to the MANIFEST Finally `&lt;classpathPrefix&gt;` tells that all dependencies will reside inside a "lib" folder alongside the built jar. 
Yes, I understand why you would think that but this is a misscomunication. The maven-jar-plugin or some plugin used to the end you described is actually needed in order for this plugin to work. What this does is append a bash script that executes your jar to the head of the jar itself. So in addition your jar file you now have a self executing variant. Lets say you have a jar naned example and you want to run it Regular: `java -jar ./example.jar` Self executing `./example.jar` This trick only works on systems with bash with the current implementation I'm using. You can even double click to expecute these types of files on many systems with little to no configuration.
GUI as a webapp in HTML/CSS, backend in java. If you use something like spring for the backend it'll even automatically make a REST API for you letting you focus on your algorithms or whatever
I really enjoy some new icons as run, debug and breakpoint icon.. but maven and database icon are so terrible now
Start your own projects and post them on GitHub which should be better than any certifications.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My IDE has a weird issue where 2018.2 repeatedly indexes causing the auto-complete dropdown to disappear. It is SO frustrating. I suspect it has to do with my Android module as read from the forum. I’m going to try and see if removing that fixes the issue.
Alternatively if you're fine with the icons but not the tool bar icon color (which reading the story they wrote they didn't actually give a shit about user feedback, they even admit that gray was not a good choice but pushed it out by default anyway), they link this plugin https://plugins.jetbrains.com/plugin/10863-toolwindow-colorful-icons
Whow! What for a nonsense in this context! Someone asks whether he should use Swing or JavaFX and then someone else come up with the proposal that one could use a client/server architecture with html/javascript/css for the front-end instead and promotes as an advantage that Spring could generate a REST API that wouldn't be needed in the first place for this scenario -- a desktop application!
He wants to know what to write a gui in. I suggested HTML/CSS, which is a gui language. Swing/JavaFX really are going legacy.... it will not help his future career as much as knowing HTML/CSS.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
true, but as long as the company pays for it and he has to do something to satisfy the silly HR and their goals, it might be worth it. ¯\_(ツ)_/¯ 
There will always be people, that complain about changes. You cannot avoid that.
And there will always be people praising stupid changes...
O
I don't even use getters and setters. Call me crazy but extra blocks of code when I know I'm not gonna be modifying the member variable within a class thats private and thus does not necessitate a wrapper function make me queezy.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Does not start on Fedora, problem with swing look and feel. No new edition for me then. 
IMO, that is why you think so because you got used to it. There is no notion of getters and setters and actions in Oop. There are objects and messages. IMO writing getters and setters, in most cases is cancerous. People tend not to think whether they actually need it, but rather make them by default. The fact that methods should be verbs and describe actions is something that I'd also think about, because recently I'm validating this more and more and I do not think bad about it. 
A sudden "Low memory" warning appeared.
Last one out turn off the lights
Much more elegant solution is to make use of binfmt\_misc interface Read this: [https://www.kernel.org/doc/html/latest/admin-guide/java.html](https://www.kernel.org/doc/html/latest/admin-guide/java.html)
Different sides of the same coin.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Try giving it more memory via the toolbox's setting dialog.
Report it: https://youtrack.jetbrains.com
As long as the public members are named properly, I actually don't mind that much. For example one of my employers likes to use `_field` for (private) fields, which has the advantage that it avoids many conflicts with method parameters and removes the need for useless `this.` clarifications. Also code completion in the IDE is improved, because you only get field suggestions when entering `_`. The other stuff is obviously not okay.
37? That's less a list of the best books and just a list of all the books.
Yes, you can click the small arrow / triangle next to Push to show the Force Push option. The option might be hidden if you have "Disable Force Push for protected branches" (or something like that) enabled in Settings and you are pushing to a protected branch.
writeOut is never closed btw
Weka! (although it is machine learning rather than deep learning like DL4J).
Is it closed source? And it seems to me that there is only program with GUI but I can't see any possibility to use it programmatically. Is there a possibility to integrate it in my code structure?
Whoops nevermind, my bad, I was running on Java 10, but IntelliJ needs Java 8 to run correctly. Now everything works and yes, it's smooth =)
Weka is great but you should take up python and get into Tensorflow for sure.
But thats not nearly as powerful as swing or javafx, how would you make a media player or a drawing tool. You'd need javascript for such stuff, and the question is not how to make a webapp for XY.
well... setters and getters have nothing to do with OOP, therefore you can keep programming with it :)
This could easily be fixed by implementing the library itself in Kotlin ;-)
The only place where Spring forces to use getters and setters are property editors that were superseded (at least in my eyes) by the Converter API.
That doesn't make much sense in terms of encapsulation. You should "tell" an object what to do without knowing it's internal state. If you can query and set all the internal state from the outside there is no encapsulation and no advantage of using OOP (if it could be called OOP at all).
We're not here to do your homework.
Thank you! I just pushed out a new version. Resource leak is closed and now chmod'ng the output is no long necessary.
My team writes desktop GUI applications, so the only pattern we really use is MVC. We use multithreading for any actions that are potentially time consuming (and not GUI related), so that the GUI remains usable at all times.
Still wondering why 3/4 of my toolbar icons are disabled... Oh wait, someone just thought it would be cool ta make them gray?!
Will it still work with java -jar after having the script prepended? Can you still unzip it?
I used javafx for several projects. Then I tried making a webapp with spring. It was a lot less work, I could leverage frontend frameworks like angular, while still utilizing java for heavy calculations, and for what I was doing access to the users local filesystem wasn't necessary. A webapp is a valid way of making a GUI for many projects. I don't know exactly what OP is trying to make, and perhaps a webapp won't work at all for that. But it's not totally off topic.
Yes you can still unzip the prepended jar and still run java -jar on it. By default I left the original jar in tact so your output contains the original version and the pretended variant. I do plan adding a parameter for setting the plugin to overwrite the original if desired. 
[Java vs PHP](http://lmgtfy.com/?q=java+vs+php)
sorry man just thought this would be a good way to start ya know if you want to lean about the something first thing you do is ask the people who do the thing about the thing
so far so good, no particular issue found
* Repository: https://www.cs.waikato.ac.nz/ml/weka/svn.html * License: [GNU General Public License](https://www.cs.waikato.ac.nz/ml/weka/index.html). * Maven Central: [weka-stable](https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22weka-stable%22)
To appease the people that hate the new icons this plugin has been released: https://plugins.jetbrains.com/plugin/10863-toolwindow-colorful-icons
You don't buy your own license?
Often had to do multi-threading for performance optimizations or when asynchrounous work is involved (e.g. web-requests, io, GUI-Thread,...). Almost every project at work uses multiple threading.
Multithreading is used everywhere. Even if you are not creating threads manually, you should know how it works under the covers, otherwise your life becomes full of surprises. Factories/builders/proxies/iterators are everywhere in enterprise. But it's useful to be at least aware of the rest.
Weka is open source as _INTER_ mentioned. Lots of good documentation too. https://weka.wikispaces.com/Use+Weka+in+your+Java+code 
 Nice explanation of the complexity inherent in multibody libration orbit mechanics. Images of Halo families generated by the [Deep Space Trajectory Explorer](https://www.youtube.com/watch?v=U7wdvhRKEiY) (DSTE) software. DSTE is a trajectory design tool built for multibody and libration orbit scenarios, written in 100% Java and JavaFX. Featured as [DevNexus 2018 Keynote address](https://www.youtube.com/watch?v=qZBa_tIBrRE&amp;t=5880s).
Definitely use JavaFX over Swing at this point assuming you can use the latest version. (Not the older JavaFX 2). I work for a NASA contractor. We have lots of desktop applications using a variety of technologies. We have multiple applications written in JavaFX which is a perfect technology for such things. One of our premier JavaFX products is the Deep Space Trajectory Explorer featured [here](https://www.youtube.com/watch?v=qZBa_tIBrRE&amp;t=5880s) in the DevNexus Keynote. Swing works... to be sure, I used it for years... but once you start using JavaFX you'll never want to go back. Very powerful stuff and with open source frameworks like those from Gluon you can very easily transpile your JavaFX applications to Android/iOS. Someone mentioned JavaFX being removed from the JDK for Java 11. That is true but then again a lot of packages are being moved outside of the core JDK into external modules. That's the whole point of the new module system... to separate functionality to allow for far leaner runtime bundles. JavaFX is now open sourced and is available as part of the OpenJDK module set. You can now pull down the JavaFX module as either a Maven or Gradle import and you're off to the races.
Oldie, not sure how relevant it still is: https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/
Would it have made you feel better if it happened to be a rounded number, like 30 or 25?
The return code example is bad style, even if C. You should give your return code a name, and wrap the value inside a constant value. Example, #DEFINE ESOMEERROR -1 and return ESOMEERROR. Also, if you can, use standard error names instead of custom ones. So not only is the error code example bad Java, it's bad C as well.
What does your return code represent? If it's an error or a problematic situation, throw an Exception. That's Java's way of treating edge cases. If it represents a result from an enumerable set of possibilities, like a state, use an Enum. Otherwise it's a case-by-case basis. It depends what your use for return codes was at first.
It works in simple code bases where no special Java behaviour comes into play. I once had to refactor similar function and classes name and it didn't work because it used reflection and dynamic class loading, so the function's name was used at large in the code based but encapsulated in Strings. Those cases are not caught by the IDE because they are not reflected in the AST.
Thanks, loved the way you described it, everything seems clarified now.
[Smile](https://github.com/haifengl/smile) for "classic" machine learning, [Deeplearning4j](https://github.com/deeplearning4j/deeplearning4j) for neural nets. Although you probably should do a few courses/tutorials on machine learning at first before tackling your problem. Just so you know, Python ecosystem is years ahead of Java in this case. Definitely not my favorite language by far, but I'd recommend Python due to sheer amount of high quality frameworks and resources.
I did, eventually up to 8gb for xmx and it still happened.
No, something less than 10, like 5 .. or even 7 - but a reasonable number.
What if you just looked at the first 10 items then? Just ignore the books after 10?
Spending **effort** would have been a good start. Just sitting back and waiting for others to basically write your paper isn't. Sure, we will help, but **only** if **you** first start the work. No effort - no help.
Sounds nice so you are not using any design pattern to ensure your architecture structur?
Yeah I was really surprised to see that since 2004/2005 the only effective way to maximize the core speed is to use multi-threading. I really thought you could still get more cores on one processor.
Yeah we did like 24 different design patterns so there is that, but yeah it amazes me to think of all the possibilities and nice things you can do with multi-threading.
Wait, what? Java will put people on Mars? 
\&gt;I fail to understand your points. I don't know how you can't. **Again, JavaFX was only ever packaged with Oracle JDK, not OpenJDK by default.** Since the only change being made is that Oracle JDK is no longer available for general use, nothing has changed. **OpenJDK builds never had built in support for JavaFX**. \&gt;Up till JDK 10, the Oracle Java SE SDK (the most widely used distribution of code defined in OpenJDK projects) contained the JavaFX API's, implementations and native libraries (built by the OpenJFX project). That will no longer be true as of the release of Java 11. \&gt;Most JavaFX developers used to work with the Oracle Java SE SDK, and they would, starting from 11, find that the JavaFX modules are missing. Because they are were using Oracle JDK and not OpenJDK and are now using OpenJDK which doesn't support JavaFX built-in.. \&gt;The OpenJDK sources (at r/[http://hg.openjdk.java.net/jdk/jdk](http://hg.openjdk.java.net/jdk/jdk)) do not contain JavaFX code. So if you want to build your own version of OpenJFX, you need the code at OpenJFX ( r/[http://hg.openjdk.java.net/openjfx/jfx-dev/rt](http://hg.openjdk.java.net/openjfx/jfx-dev/rt)) or the github mirror. I highly recommend people to do this. Building it is indeed not hard. And while you're doing that, please test it, find bugs, file them, discuss solutions, fix them. Come up with great new features, implement them, discuss them. That's how the OpenJFX community works. If you want people to contribute then you should probably make it easier to get the code and compile it. The wiki page has a huge section on how to use Gradle on the command line(should be moved somehwhere else of deleted) but doesn't provide the command line commands for downloading jFX 8-11(should be added). You should \*probably\* specify that a working system JRE with jFX support is also required to build it. \&gt;I think this is the first time ever someone calls my writings "lies" and "fake news" which I think is rather disrespectful to developers who spend tons of spare time making things work for other developers ... oh well. It's just not accurate or true. OpenJDK(what is going to be the main general purpose JDK post 11) never had support for JavaFX, JavaFX doesn't have to be standalone, and there are more than two ways to develop JavaFX applications. 
Telling is an action, and a class needs data(and probably other classes) to perform actions. \&gt;. If you can query and set all the internal state from the outside there is no encapsulation and no advantage of using OOP (if it could be called OOP at all). Who said anything about setting all state outside of the class? That's horrible. 
Thanks for the fucking eye cancer. Solid white on black, morons
\&gt;IMO, that is why you think so because you got used to it. There is no notion of getters and setters and actions in Oop. There are objects and messages. Encapsulation? You create getters and setters to encapsulate your field, do you not? \&gt;IMO writing getters and setters, in most cases is cancerous. People tend not to think whether they actually need it, but rather make them by default. The fact that methods should be verbs and describe actions is something that I'd also think about, because recently I'm validating this more and more and I do not think bad about it. So you would consider something like this cancerous, then? public interface NvReadable&lt;E&gt; { public void update(); public E getCurrentValue(); public NvAttributeBuilder getBuilder(); public Property&lt;String&gt; cmdNameProperty(); public Property&lt;String&gt; cmdValueProperty(); public Property&lt;String&gt; displayNameProperty(); public Property&lt;String&gt; displayValueProperty(); public Measurement getMeasurement(); public OperationalStatus getOperationalStatus(); public UpdateFrequency getUpdateFrequency(); } If so, I'd like to see what you consider good design then.
yeah you seem like a real helpful bunch i asked a simple question and rather then idk ingoring it because it has no effect on you or whatever you have to go out of your way to be a dick. 
thanks man 
We *are* helpful, but only to people who have initiated the work. Had you started with some article that you found through google, had you written something yourself, your post would have been received way better and you would have gotten some actual responses. The way you posted comes across as incredibly lazy and low effort. Two things that are not welcome in any programming related subreddit.
They were essential for JavaBeans though, weren't they, and strict encapsulation of all variables through getters / setters seemed to be the insistence in the 90s. Now I prefer programming languages that are hybrid OOP - functional, like Scala and Java 8.
I feel like you're taking this like it's some kind of personal insult and I don't get it 
&gt; the only effective way to maximize the core speed is to use multi-threading Hmm multi-threading utilises multiple cores (ideally), do you mean hyper-threading? &gt; I really thought you could still get more cores on one processor Hard-ware manufactures are still packing more cores into processors. E.g. newest models have up to 28 or 32 cores. ([info](https://www.extremetech.com/computing/270828-amd-unveils-32-core-threadripper-2-cpu)) 
If you're a firefox user press F9. On chrome you have to do some extra things to enable distill.
I'm on android/chrome. Simplified view doesn't do anything
This list doesn't make sense. The book ranked#33 not yet released, then how can this make to the list of best books? The title ranked#27 is the latest version of 23. So, whats the point of including both the titles in this list? This looks like some guy took all the books available in the amazon search 'java ee' and listed them as best books. Nonsense.
Yeah I mentioned it here the other day. 
What do you think the rover software was written in? PHP? LOL
You're assuming that they're in some sort of order. What if they left the best to last?
That won't change anything at all in this case 🤔
I found the devox link to this: https://www.youtube.com/watch?v=qZBa_tIBrRE&amp;t=5880s 
Hmmm, good question, but there's a rating on which they seem to be sorted. Although I've no idea where that rating comes from. It's not amazon.
Why not? A library written in Kotlin has typically a pretty good interoperability with Kotlin! :-)
&gt; Who said anything about setting all state outside of the class? That's horrible. That's the typical getter/setter style! If you provide only certain methods to change some internal state it would be more a method with a business (or domain) meaning and then it doesn't make sense to speak about getters and setter anymore in many cases (at least `get` can and should be avoided, it is just clutter). 
Yeah that's exactly what I thought. 
Deep learning is about high throughput floating point arithmetic, which Java isn't.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
These six billion devices have to be _somewhere_
At least it's not "Flash plugin required" thing.
Yes, but then all getters and setters are generated with get/set prefixes for Java, which I don't like. I write my libraries in Kotlin, but I'm not a big fan of creating separate versions for Java and Kotlin. So I write my getters/setters manually without the get/set prefix. I need to jump a lot between the two languages, so I prefer keeping the libraries consistent between languages rather than completely idiomatic. It's a trade-off. 
You can generate Kotlin getters and setters with custom names: var myProperty: String @JvmName("readMyProperty") get @JvmName("changeMyProperty") set
Thanks, I'll consider that!
of course for some old patterns are needed, but as you say we're talking about 90's I think with a different approach you can get rid of them; at this time and so far Java is one of the few languages which do not support class-properties and it's perfectly fine ironically
Kudos for touch bar debugging control support and dark mode.👏👏
This maybe what you are looking for: https://github.com/blazart/dynamic-reports 
35MB might be a price I'm willing to pay for a cross platform jar. pity about the web dependencies
I guess I mean hyper-threading. I am not that goof with the english words for all that stuff. And well yeah but isnt there a problem with overheating?
I guess I mean hyper-threading. I am not that goof with the english words for all that stuff. And well yeah but isnt there a problem with overheating?
What would be a business or domain? How would I get the info of a shell process then? How would Javafx get property's to display for GUI?
"Deep learning in Java". I think your title is wrong; you probably meant "machine learning". As far as I know there is no real network analysis in deep learning.
The web module is basically an embedded web browser, albeit limited. I'm not too worried about excluding it from my builds
Python is better than Java. Try it and you'll never look back.
Love ANTLR! Great post!!
Is your issue that you want to type less?
&gt; Weld is the reference implementation of CDI: Contexts and Dependency Injection for the Java EE Platform - a JCP standard for dependency injection and contextual lifecycle management and one of the most important and popular parts of the Java EE. Weld is integrated into many Java EE application servers such as WildFly, JBoss Enterprise Application Platform, GlassFish, Oracle WebLogic Server, WebSphere Application Server and others. Weld can also be used in plain servlet containers (Tomcat, Jetty) or Java SE. For the rest of the uninformed.
JavaFX is meant to replace Swing so I would just switch over. I would also prioritize learning data structure (w/standard libraries), design patterns (gang of four), database (SQL), and debugging (unit testing) before JavaFX. At least if you want to be prepared for interviews. 
Java 8 really made me redevelop an appreciation for Java again after Scala and Python. Streams and lambdas really make all the difference in the world. C++ and Java are still a little bit clunky in that regard, but far better than they were in the past. My team at work is largely focused on being as purely functional as possible, and given how much UI work we need in our software, I'm not convinced it's the best approach. It still seems like UI + functional programming is trying to find its footing.
As long as they keep the light theme.
Is .net core still around? I thought they abandoned it?
Key pull quote (as highlighted by \[@mreinhold\]( r/https://twitter.com/mreinhold/status/1022701663281266688?s=20 ): \&gt; ... including options based upon Git rather than Mercurial, and including options hosted by third parties." I take that to mean github and/or gitlab are key considerations (though of course bitbucket might be in the running, as well).
I don’t see an issue with continuing the use of Mercurial. Bitbucket even offers support for it.
I realize this is /r/java, but please tell me you're kidding?! If not, then I would like to suggest to you that you look into .NET Core; especially v2. It's poised to take over for the .NET Framework itself for much of web development in C#, and it will likely dent Java market-share as well, though not in any concerning way. I know because I do .NET Core based development myself and I have for almost a year, and I did some more besides that on my own before it took off. It's a very nice stack. You might like to try it. Install VS Code and the .NET Core 2 SDK and you'll be operational within 15 minutes.
Providing methods to query the internal state is not wrong in principle, but adding \`get\` to these methods adds nothing. As already said, setters for each field are an anti-pattern that undermines encapsulation. It's best to think of a mutation method as a "transaction" on the object: all coherent mutations should be performed with a single method call. But sometimes it is best to avoid methods altogether and use simple DTOs with public final fields. 
You can write your methods/properties in Kotlin while having nice names without get/set by using the `@JvmName` annotation. class Foo { @get:JvmName("x") @set:JvmName("changeXTo") var x: Int = 99 }
Or Scala case classes. Kotlin data classes. Groovy POGOs. Or immutables, autovalue, free builder. There’s tons of stuff that will do this for you. 
Not exactly, but I like "aesthetic" code. 
Thanks for the clarification!
Yah, it is wrong. After posting it I've seen the same mistake but couldn't change the title. Sorry for confusion
&gt;The fact that methods should be verbs and describe actions is something that I'd also think about I don't think so. String.lastIndexOf isn't a verb Strring.length/List.size isn't a verb Object.hashCode isn't a verb [Random.next](https://Random.next) isn't a verb InputStream.available isn't a verb ...
Thank you, I hate these posts that just mention a framework or library and some version number and link to the changelog that doesn't really explain to me what it's about either. 
So it is git, git, or git. Or maybe git?
I was thinking of using it in some of my applications
That was a great read ! thanks 
No problem!
"Best" is a relative concept but the javax.crypto package makes it possible to encrypt/decrypt using AES: Key secretKey = **new** SecretKeySpec(key.getBytes(), "AES"); Cipher cipher = Cipher.getInstance("AES"); cipher.init(cipherMode, secretKey); 
and should i store the key somewhere ?
Well from what I read the problem with OpenJDK is that "OpenJDK will have a feature release every 6 months which is only supported until the next feature release." meaning that you would need to hop from one release to the other as soon as it's published or you lose the newest security updates/bugfixes. Is this true?
That totally depends on the use case: are you running this as a command line program where the user is supposed to enter the key every time, is it a secret key from a resource, stored in a database... Without some context we cannot offer you advice. Here's a couple of links that have different scenario's: * [http://tutorials.jenkov.com/java-cryptography/index.html](http://tutorials.jenkov.com/java-cryptography/index.html) * [https://www.ibm.com/developerworks/java/tutorials/j-sec1/j-sec1.html](https://www.ibm.com/developerworks/java/tutorials/j-sec1/j-sec1.html) * [https://www.javacodegeeks.com/2017/11/encryption-trust-tutorial.html](https://www.javacodegeeks.com/2017/11/encryption-trust-tutorial.html)
There are other FOSS alternatives, namely git that they could use instead of these.
I think the main issue with setters/getters or rather properties in Kotlin is they are mandatory, there's no way to get rid of them silently: ``` data class Person(val firstName:String, val lastName:String) class Person(val firstName:String, val lastName:String) ``` and both of them have properties in order to get firstNames and lastNames. To me it does not make too much sense, it would be nice if only data class will have properties, not plain classes, otherwise - paradoxally - Kotlin could be a little annoying and most of all this could lead to some misconceptions: ``` class Person( private val firstName:String, private val lastName:String ) ``` classes are implementation of something, not data containers.
Only the really basic ones such as Factory and Builder :)
Oracle Table Partitions are transparent for DML operations. At least in simple scenarios. So Hibernate should work without any Java code modification - all work is done by the database. Hibernate Shards is for splitting data between different databases. In this case all work (splitting, coordinating queries to several databases etc.) is done by Java side.
I like it. I'm worried about stack depth, though. Intuitively this approach feels like additional overhead that will add more calls to the stack than the traditional try-catch-finally approach. I'll test it and see what happens.
It looks like in your [submission](https://www.reddit.com/r/java/comments/92bk4r/error_related_maven_build_for_oozie_430/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If it's passwords you should hash them, not encrypt them
i am assuming you got yourself a job with some ( very old ) legacy code... so, your best bet would be older oreilly books: - http://shop.oreilly.com/product/9780596005726.do - http://shop.oreilly.com/product/9780596516680.do 
https://metrics.dropwizard.io
SpringMVC also uses JSP, or do I live in a bubble and everyone is now using Thymeleaf?
Ahh the immortal question. Yes, you can use the file system but then the key is in plain text. A password protected Keystore but then you need to protect the password somehow or manually provide it when you want to decrypt your files. A hardware security module but then that's a lot of cost. 
Here's a library that makes it easy. There's a bunch of options others have suggested like hashed passwords. https://github.com/rockaport/alice
you are right, i completely forgot jsp was (still) an option on Spring.
reason?
You can recover the original data if it's encrypted, whereas you (hopefully) cannot after it's hashed. 
right great point
My newest baby, the [univocity HTML parser]( https://www.univocity.com/pages/html_parser_about) is faster and also faster to code with. You define matching rules and each one goes into different threads so a 100mb file with thousands of data points to collect is parsed in 1 or 2 seconds. It's really good especially on complex, large pages and it can help you narrow down to elements of interest using text matching with wildcards. The code becomes way more readable as you almost never have to work with the tree of HTML elements, or use XPATH or CSS selectors. Give it a go if you need to squeeze more performance out of you current solution
Will definitely give it a try ! Thx :)
In addition to Coda Hale's metrics library that hooba_stank mentioned, there is also the MicroProfile Metrics library: https://github.com/eclipse/microprofile-metrics
Thank you sir ! I will look forward the books.
You can use password-based encryption which turns a password into a symmetric key. The PKCS#12 spec uses this functionality. https://en.wikipedia.org/wiki/PBKDF2: should get you started.
I found this [site](https://www3.ntu.edu.sg/home/ehchua/programming/index.html) recently that is full of great Java resources. I dabbled with the [JSP / Servlets tutorial](https://www3.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html) found on that page and it was very helpful.
&gt; You might like to try it. Install VS Code and the .NET Core 2 SDK and you'll be operational within 15 minutes. Yeah I installed it 2 or 3 years ago, it was a harrowing experience. VS Code refuses to work in my Ubuntu VM unless I disable 3D. That might have been fixed, haven't turned it back on to test. So IDK maybe it's better now, might uninstall, wipe the .Net Core vestiges and install fresh. Not sure what I'd use it for. Java works for UI's, Web UI's, systems work, script work.
I would recommend using Prometheus client library inside your Java code and installing Prometheus server to collect and store metrics over time. 
Most people use something else out of the box, but .jsp works just fine... After being bitten by freemarker numbers more than once (WHO PUTS COMMAS INTO A NUMBER BY DEFAULT!!!!!!), I've found myself nostalgic for .jsp and JSTL. Trust me, I know they're rose colored glasses, but that's how it works, right? right? And before you say "just don't do that" - I know the ways to get around it value=, ?c, etc -- the problem is when you forget "just this once" and customers have a Heisenbug when they reach db id 1000.
I am with you on JSP. Still think JSP + Taglibs is the best way to handle UI Web in Java/JavaScript Web applications. In a past life I used to write RichFaces components, and I don't miss JSF, Facelets and such. Specially debugging lifecycle issues, JSP is plain, simple and it works.
Python's floating point math is orders of magnitude slower Java's and yet Python is popular among deep learning researchers. What matters is the use of hardware accelerators, e.g., GPUs, for the math, which requires special libraries. But such libraries also exist for Java and JVM based languages. 
Thank you sir for sharing ! \*bookmark added\*
Not that I need performance, but will take a look at this. faster to code is always good.
My first thought was I bet null is really high in this list :p
Na, public members are absolutely fine for DTOs. Bean convention adds only noise in this case.
Doing things functionally will always incur extra overhead, especially in a non functional language. Just like doing things object oriented will add overhead onto pure imperative code and imperative code will add overhead onto assembly. We use these tools because we are willing to sacrifice a tiny bit of performance for a large amount of abstraction to help us reason about and prove our code. When you see functional things, assume that it comes at a cost. 99%+ of code doesn’t care, and the rest probably shouldn’t be written in java to begin with.
Understood, but I want to leverage partition while accessing data via hibernate (HQL, API &amp; SQL). So, does hibernate support partitions in this case?
Huh, you just pinpointed an irritation I hadn't realized I had :) In this case I was familiar with Weld but there's a million other frameworks that are updated all the time. It's even worse in the Android context as things move almost as fast as in the front-end world there.
When I here *webapp* I don't tend to think of Java as opposed to PHP, Python, Ruby on Rails, etc or even CGI (although that could be done with any number of thins). Of course it doesn't help that Java for desktop vs. server seems to be deliberately separated.
This is what we use. It's great. The other one to check out is micrometer (SLF4J for metrics) https://github.com/micrometer-metrics/micrometer
Split your metrics library from your storage library. Dropwizard metrics is pluggable and will, out of the box, measure a whole bunch of stuff you might care about. From there you can just add Prometheus to collect/analyze metrics over time. We don't use prometheus internally. However, it looks like there are a few reporter libraries out there already built.
I like the concept but not the ignorance of Java best practices (method names start lowercase). Ignorance of those best practices often correlates with other opinionated code which is why I will most likely not use it. 
No reason to avoid it if your library/framework supports it.
Yeah my point was actually that most of the stuff people use python for is actually just dynamically linked native code, where you have things like fast math. Vanilla python is indeed a lot slower than Java.
&gt; I don't tend to think of Java as opposed to PHP, Python, Ruby on Rails, etc or even CGI *You* may not, but Java makes up a significant share of web app development, so many people do. &gt; Of course it doesn't help that Java for desktop vs. server seems to be deliberately separated. Of course they are separated. Server applications and client applications have completely different execution profiles. Server applications are optimized for peak operating capacity, at the cost of memory and startup time. Client applications are optimized for lower memory and startup time, at the cost of raw performance. 
Thymeleaf just happens to have taken off because it can be easily loaded from the classpath, without requiring the JSP compiler (and separate application server), which makes it useful for fat JAR deployments. Thymeleaf is also plain HTML with additional attributes and can be mocked up in the web browser without the app server, which some people find aesthetically pleasing.
Regex
&gt; We consider a very bad practice to allow an external framework to tamper with the visibility of object properties. Why is this considered a bad practice? Visibility guarantees are good for preventing other classes from depending on the implementation details of your class. But, in this case, the external framework (such as Hibernate Validator) doesn't depend on your code, but rather you are intentionally exposing details of the class to the external framework to use *its* features. Which direction does the dependency arrow point? If a class depends on you, it's a good idea to hide details, so you are more free to change details. If you depend on a class, especially a framework, I don't see what difference it makes to allow the framework to reduce visibility at runtime through reflection if it is required for the feature to work.
Use webdriver with headless Chrome or Firefox. Then you can parse the html from sites that require javascript 
API.Try is the first I've seen it used in that way, usually we use the class Try - Try.of(() -&gt; someMethod()). I think their API class is the only class that offers these opinions, and it's to allow you to not need that .of() so it can look more functional. So yes, the API class is opinionated, but it's just convenience - they by no means force this opinion on you, just give you the option to use it if you want.
I think most people would google for an XML parsing library when they need one, etc. Rather reading an article like this.
&gt; I guess I mean hyper-threading. Hyper-Threading is hardware-side multithreading, where a core can switch between threads when one is waiting. Depending on the design, a single hyper-thread (ht) has its own cache, registries, stack- and program-pointer. The count of hyper-threads is fixed, normally 2 per core. Software-threads are spawned and destroyed by software. Applications could spawn thousands of logical threads that work in "parallel". In the end only #ht * #cores progress in parallel, but the they switch so fast that they run seemingly in parallel. Also note that the cores don't need to be in a single machine. &gt; but isnt there a problem with overheating? The problem occurres the most when trying to pack more and more transisters onto a core (+ leaking currents), so a single cores performance / clock speed. If the design is right you could still add more cores by using more physical space.
Thanks mate for the nice explanation :D
But that would effectively nullify the need for this article?! (srs)
FWIW, I have always seen it on the member variables. It's easier to find. I think most people won't check the getter or setter.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Use Google Tink and an AEAD. https://github.com/google/tink/blob/master/docs/JAVA-HOWTO.md#symmetric-key-encryption
Despite this article being released today, it talks about Java 9 in the future tense. In particular it dismisses the new HTTP library, which is much easier to use than the old `URL.openConnection()` API. I'd also recommend looking at OkHttp as an alternative to Apache's HTTPClient. Item 12 is less a library and more "use `java.time.*`". Some of them are not really libraries that everyone should know. Excel, PDF, bytecode manipulation aren't really every day requirements. 
Just a random thought, i think you can send js codes to a RESTful service side service and let the server side program consume them, evaluate them and return results?
Also https://www.crypto101.io/
You're right. I shouldn't have used the word 'opinionated', it wasn't what I wanted to convey. What I wanted to convey is that libraries ignoring the conventions (even if only at one place) of a language are often written by people more familiar in a different language which want to bring stuff over to another language. Ignoring conventions can be an indication that they didn't spend much time mastering language specifics which can result in bugs and performance-/security-issues. It doesn't have to be that way but I personally see it as an indicator.
A creative solution, although it really doesn't fit with our product and will introduce more issues than it solves (network connectivity isn't guaranteed, for example).
The problem googling for libraries is that you can't easily find out what's current and what's too fresh. 
You may like https://blog.ometer.com/2015/09/07/json-like-config-a-spectrum-of-underoverengineering/
What's wrong w jsoup? 
But its much slower and they are concerned about performance so probably not a good choice.
You can. You need graalvm sdk and truffle api off maven central Then you need to download the graalvm ce In it, you can find two jars, tregex.jar and graaljs.jar. Adding those to your build will fully enable the polyglot engine and give you access to graaljs, the nashorn replacement. One note though, this combo may be slower than nashorn. The graaljs jit is not included with anything but graalvm atm, and so your code may run faster in nashorn. You will have the pieces for graaljs jit in a later release of openjdk. Maybe 11
Bean Validation 2.0 spec lead here; I always prefer putting constraints to getters instead of fields. That way the constraints are part of the bean's public API and as such visible and known to users of the class. It's also advantageous in conjunction with the Java module system as Bean Validation implementations may obtain values via public getters without the need to open up the module containing the beans towards the validation provider module.
Nothing, I'm looking / benchmarking tools to see if I can gain a few seconds on my [website parser](https://ffnet.fr)
I was hoping for at least one swear word. 
I suppose the heading is accurate,. I think most Java programmers \*do\* know these libraries. I expected at least a few new or obscure libraries in addition to old workhorses.
test
Using encryption without authentication is a bad idea. Unless you know crypto well you should use a proven high level library that automatically handles the details for you. 
At my job we're stuck with Java 7 for at least the next year or two, so as the article points out, we can't use java.time.
I think the point is that the article is actually recommending certain libraries. Yes, a Google search would have showed the libraries - along with all of the other similar libraries. Google can tell you what libraries are out there, but it can't tell you which ones are good. Oh and by the way, a Google search will also find...the article. 
Meh. If you're trying to remove bottlenecks small adjustments like these are not the answer, usually.
Java EE 5 Tutorial &gt; Part II The Web Tier, starting from 5. JavaServer Pages Technology https://docs.oracle.com/javaee/5/tutorial/doc/bnadp.html (In later versions of the tutorial, JSP was removed in favor of JSF)
&gt;are often written by people more familiar in a different language This was [my observation](https://www.reddit.com/r/java/comments/8j7q3s/trylambda_exception_handling_for_lambda/dyz8hfh/?context=1) when I first looked at vavr too. I don't think there's anything inherently wrong with vavr, but it seems like the problem they want to solve is that Java doesn't work enough like some other language. Whereas with (shameless plug/my library) [trylambda](https://github.com/nullterminated/trylambda), the objective is very specifically focused on handling exceptions in lambda functions and handling try with resources without unit test coverage penalties... two areas where standard Java has specific problems.
Maybe OP did profile his application and found indeed that Jsoup is a hot spot. What makes you think it is a small adjustment?
And the cryptography section doesn't mention cryptography at all.
I really appreciated the additional information links on each item in this article, thanks.
It was missing the clojure.jar library ;)
Unless they have improved the SSL support for the new HTTP library, it is unusable in production. The initial preview didn't support SNI.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
in my opinion it would be better to get rid of a precise problem here: primitive obsession; instead of relying on the primitive type (int, string, double, float, long, char and boolean) you should implement an object which must be validated during its instantiation for instance: ``` class Person { private int age; ... } var p = new Person(999); ``` of course here you can use Bean Validation in order to fix such issue (since that person can not be that old... well I think): ``` @Min(value=1, message="d'oh") @Max(value=120, message="d'oh") private int age; ``` however if you pass such property to another method or object or variable: ``` int age = p.getAge(); ``` you totally lose the validation information and that age variable can be just anything; instead why can we create something which is always validated? ``` class Age { private final int value; private Age(int value) { this.value = value; } // getter public static Optional&lt;Age&gt; ageOf(int value) { return Optional.of(value) .filter(it -&gt; it &gt;= 1 &amp;&amp; it &lt;= 120) .map(it -&gt; new Age(it)); } } class Person { private Age age; ... } ``` as you can understand everytime you use Age you're always sure it has a validated value. I created a static factory method with Optional by purpose, since if anything goes wrong (in other words the value is not validated) then you can do whatever you need: throw a specific exception, or pass a default value. Such pattern is referred as Anti Primitive Obsession Pattern. You can find an extended explanation with C# examples in a nice article :)
FYI for people that read this: 1. SLF4j is a standard, a common interface that logback and log4j implement but you still need a concrete class to do the logging. 2. Oracle has Json-p which is not as performant or as feature rich as gson or jackson, but you would be using an EE version of java anyway if you were working on a web-tier or layer 3. same goes for JMS, again its part of the EE edition JDK, still part of the standard just not SE and the author does not even mention any of the MQ libs that you need in order to make JMS useable 4. you dont really have "networking libraries" you need a web server or servlet to be running to handle those things, not just drop a lib on your class path and have at it. I cannot really comment on the other ones mentioned but the article is just sloppy. For the author to go into more niche topics like byte code manipulation, pdf reading, excel reading, and cryptography, but not mention async, like reactive streams? it just feels thrown together and not thought out. It is tiring to see this lack of detail as there will be many new Devs that look at material like this and start forming knowledge of the Java ecosystem with every so slight holes in their understanding. I am definitely being nit-picky, but programmers always have to deal with the details. So they can only be so inaccurate before it becomes to much 
you have all my sympathy mate! with my old company we were stuck at Java 6 then I changed and everything was new again
By his own admittance there’s nothing wrong w jsoup and he’s hoping to “gain a few seconds”
It definitely makes it easy for parsing/refactoring/generating
Also I've seen others point out the issue of what happens if your getter does formatting of a String or something. If you do the annotation on the field you get the raw value which is avoids running into confusing results if the field is transformed some way in the getter. 
The problem I have with what you're suggesting is you took what was a one-line annotation whose function was easily understood and turned it into an entire class! One of the points of annotations is to provide a sort of AOP-like way to spread cookie-cutter functionality across a large surface with one implementation.
I used that approach at first, before we decided to use Prometheus. After that decision was made, I tried to adapt our existing metrics for use by Prometheus, but it was surprisingly painful (eg. to get labels right, or to translate some metrics like rates and averages that don’t make sense when using Prometheus, because rate and average is just a function over time). After switching to Prometheus library, our code became much simpler, no more problems with correct labels, I removed all output formatting or displaying metrics in the app itself, and use Prometheus with Grafana for visualization. Prometheus client library also has support for various metrics out of the box (like Java GC and Hotspot metrics, http metrics, etc.)
If this works well, it has huge potential implications for backend Java applications. IMO not having fibers/continuations is/was a major missing feature in Java. Having ability to spawn a fiber for each item of work you need to process, and then block in each of them waiting for IO, and have &gt;10k of them at the same time allows structuring the code in completely different ways and seamless batch processing.
The biggest problem is trying to keep my skills up for whenever we do change. I try to use 9 at home but I don't really have a use case. We were supposed to go to 8 this year, but there was a compatibility issue with a library that is heavily used (JiBX) so they decided to wait and jump to 11 in a few years. It's a huge project with millions of lines of code, so I understand their need to be conservative, but as a developer it drives me nuts. 
If they can pull this off that would be very impressive!
Why are properties at the language level a bad idea?
I thought I explained it. No. In Java and in C# they are methods so they're not inlined in most cases since you can't make assumptions that these are simple backed fields. 
I'm going nuts here trying to convert several small rtf, html, and PDF docs into one long PDF doc.
You should take a look at Kotlin's coroutines.
I like kotlin coroutines, but it also eventually delegates all the blocking I/O calls a different thread pool which blocks a thread, In project loom I think all jdk i/o APIs are adapted to fiber. Means blocking i/o calls won't be an issue at all. 
Had me until the license part. Looked so nice until that.
Use Joda-Time. It is what inspired the Java 8 time API, and is an excellent time library.
Any issue in particular?
I wish these articles were better at English.
[Because!](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags)
&gt; which is much easier to use than the old URL.openConnection() For basic uses `URL.openConnection()` was easier (it barely worked, but one-liner ;)
The 499$ price. Back to Jsoup and manually fingerprinting forms it is.
you don't need a web server or servlet to do networking. There are other ways to do it too, you don't need a full-blown server/servlet container to manage some socket connections
That's AUD. Around 375 US dollars for a perpetual license. If you are paid 50 bucks/hour that's equivalent to 8 hours of work. If this library can reduce the amount of work you'd need to complete a particular project (from 2 weeks down to 1 week) then why not get a license?
They're inlined at runtime (on the JVM at least, don't know aboutC#) by the JIT, this is one of the most trivial optimizations it can do. Because it happens at runtime it knows they are simple properties.
Original post here: https://javarevisited.blogspot.com/2018/01/top-20-libraries-and-apis-for-java-programmers.html /u/javinpaul: This is your own article, right? Curious: What's the motivation of posting the syndicated DZone version?
&gt; 8. Bytecode Libraries I think [bytebuddy](https://bytebuddy.net/#/) is the one that should be mentioned first here, right? &gt; 9. Database Connection Pool Libraries Please, consider [HikariCP](https://blog.jooq.org/2017/02/21/jooq-tuesdays-brett-wooldridge-shows-what-it-takes-to-write-the-fastest-java-connection-pool/) first
It always depends on what you want to achieve: even in this case once you implemented the class (or rather it's another way to monkey a value-type) you can use it everywhere, the difference here with the annotation approach, it can be tested just once. Let's make another example: ``` class Person { @NotNull(message = "d'oh") @Size(min=10, max=128, message="d'oh") @Email(message="d'oh") private String email; ... } class Company { @NotNull(message = "d'oh") @Size(min=10, max=128, message="d'oh") @Email(message="d'oh") private String email; ... } ``` as you can see I always need to put annotations, or rather I have to remember to put annotations if I need that kind of constraints on `email` field. Most of all the values on annotations must be remembered or put somewhere else in order to be a shared constant (since we want the same constraints), something that is not very suggested by Bloch (Effective Java, a constant must be an encapsulated part of the implementation). Instead if we do something like this: ``` class Email { private final String value; private Email(String value) { this.value = value; } // getter public static Optional&lt;Email&gt; emailOf(String value) { return Optional.ofNullable(value) .filter(it -&gt; it.length() &gt;= 10 &amp;&amp; it.length() &lt;= 128) .filter(it -&gt; it.matches("regex for email")) .map(Email::new); } } class Person { private Email email; ... } class Company { private Email email; ... } ``` we are always safe about `email` field, we just put it there in the class we need and we don't have to bother us with other tests against Person and Company in order to be sure about the constraints on `email` field. I know it could be a little bit annoying at the beginning since we have to create an object about that, but then the advantages will come up step by step during the development process: we don't need to rely on annotations, on a particular framework or AOP development (that sounds quite an overkill option for validation only...).
noted ! thank you for sharing.
If you want to dive in and see the magic, it is located somewhere in here: http://hg.openjdk.java.net/loom/loom/file/006f5c0da463/src/hotspot/share/runtime/continuation.hpp http://hg.openjdk.java.net/loom/loom/file/006f5c0da463/src/hotspot/share/runtime/continuation.cpp http://hg.openjdk.java.net/loom/loom/file/006f5c0da463/src/java.base/share/classes/java/lang/Continuation.java#l397 In my uneducated understanding, I think it lies around variables with names like: * stack (with a nice comment: "The content of the stack arrays is extremely security-sensitive. Writing can lead to arbitrary code execution, and reading can leak sensitive data") * sp (stack pointer?) * fp (frame pointer) * pc (program counter?) that would be aptly shared and manipulated on both sides between Java and Cpp. Here is the list of files patched/added to see the extent of scope: http://mail.openjdk.java.net/pipermail/loom-dev/2018-July/000058.html http://mail.openjdk.java.net/pipermail/loom-dev/2018-July/000059.html http://mail.openjdk.java.net/pipermail/loom-dev/2018-July/000060.html In which you'll see as well the modifications made to the Standard library so it can profit from the cheap unmount/mount cost (java/util/concurrent, I/O)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hi Gunnar, Thanks for responding. I was a little confused by the spec regarding this topic because the examples seem to be inconsistent. The first example of using a constraint on the Address class do so on the public getter, but the next two examples do so on the private member variable (zipCode in both cases). Personally I think it looks better on the private member variable but the reasons you give for setting the constraint on the public getter() are enough to sway me. In these instances I can always add a comment above the private member variable that states "see getter for constraint"
Is there a good explanation of the performance benefits somewhere? Does it boil down to the context switching between fibers being much more efficient than context switching between Threads because they are a kernel/OS level thing?
You cannot have many native (real) threads. Linux with &gt;1000 threads which linux treats like processes is undesirable. With fibers you can easily have &gt;10k
The solution isn't to redistrict multiple districts, but to have a single district that returns multiple winners. Especially has it would mean replacing First Past The Post, which causes additional issues, like two party systems.
The original project Loom proposal, with some details about the problems this project aims to solve: http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html
Yes that is a good point and one I missed when going off on a bit of a rant. Thank you for mentioning it
Yes you do not need all the functionality in a serlvet/server to implement some networking capabilities, Thank you for bringing this up. 
They're both solutions better than what we have right now.
What does this have to do with Java?
GraalVM dev here. We will ship jdk 11 based versions of graalvm when it is out. Also we plan to deploy modularized graal and graal.js on maven soon. So we will support fast graal.js on stock jdk 11. At the moment you need to run with graalvm for speed. More info here: https://medium.com/graalvm/oracle-graalvm-announces-support-for-nashorn-migration-c04810d75c1f
Yes, I know. It's in the article, which is why I was talking about it in the first place. 
Hi, I filed a bug regarding ce being slower than nashorn on some of my benches, and it appearing that jit wasn’t triggering for CE while it did for EE. https://github.com/oracle/graal/issues/459 There hasn’t been any update to the issue for 2 months and I haven’t had time between messing with sulong and work to bench graalvm ce rc3 with the nbody bench. Do you know if the issue has been resolved?
OptaPlanner is **a constraint solver** written in Java.
What's an example of a high level library for just this?
For Java and other JVM languages [Tink](https://github.com/google/tink), otherwise you'll want [libsodium](https://download.libsodium.org/doc/) since it's a C library that has bindings to many languages.
You posted this a day ago. I know reddit is full of reposts, but this is a bit silly.
Wow , this is a huge. I thought it would take much more years but it's really amazing how fast the JDK is moving over the past years. Fibers could really improve performance for frameworks like Undertow ( and obviously containers using it like Wildfly ) . 
Uh huh, but your link doesn't mention that. I have to go to the main page to find that out.
This. There are nearly infinite ways to mess-up encryption and vanishingly few ways to do it correctly. Tink is a high-level cryptography library from Google that does everything right _for you_, designed in such a way that it is easy to use correctly and hard to use it wrong. 
I've been learning Java at my current position and Spring has been pretty painless. Of course I have incredibly talented Java devs to learn from so that might be a factor. I come from a background of javascript, python, ruby, etc... If that helps.
I have really enjoyed working with Dropwizard. It is really easy to get started, the documentation is great and it bundles some good frameworks to go with it like hibernate, Jackson etc.. Recently I have also been working with the newest version of JEE or Jarkarta. It has become very easyz with minimal XML configuration. A bit more work than Dropwizard, but then you have more building blocks. But to be fair, the safest bet is probably spring boot :) 
Tnx :)
While maybe not as beginner friendly as others, I highly recommend vert.x, it will teach you about reactive programming, which is a very useful skill to have nowadays.
Spring Boot. Many '15 minute' starter guides on their site.
Because if you're doing primarily hobby projects/home projects these days, you don't want to dump that much money on a singular dependency.
They are concerned about housing a large codebase with a huge history, didn't MS or Google create their own fork or similar CVS as they struggled with this as well?
Yes.
The link submitted isn't about what is OptaPlanner. It is about an innovative usage of it. Not every submission about a particular Java technology on this site includes a description about what it is. For those that don't know, most submissions assume that you can go and learn about it.
Vaadin is pretty awesome if you want to get something up fast with no javascript... Vaadin spring boot is slick as hell. Even allows async/websocket updates with laughably little effort. 
&gt; fibers being much more efficient than context switching between Threads because they are a kernel/OS level thing? Yes, fibers are scheduled by JVM (i think Fork-Join scheduler by default). Watch this presentation from Ron itself -https://youtu.be/nnw2dQBpRYQ?t=1775
Greater than 10k? I'm pretty ignorant on this stuff, but aren't fibers somewhat like goroutines? You can easily have millions of those; I would hope project Loom has similar goals.
&gt; The link submitted isn't about what is OptaPlanner. It is about an innovative usage of it. So what does this have to do with Java? By your argument you could post the same link to r/sand because the CPU it runs on is made out of sand.
&gt; With fibers you can easily have &gt;10k 10k is nothing. As per this (https://youtu.be/nnw2dQBpRYQ?t=1775), you can have millions of them. 
ninjaframework
Are you referring to deconstructors?
You mean... destructors?
I'd look at Jooby (https://jooby.org). It's a lot like Dropwizard, but comes with more batteries included with better support for returning HTML instead of JSON. Yes, Dropwizard supports templating, but it doesn't feel as integrated. Jooby also recompiles changes for hot-reloading which is nice. There are a bunch of modules for things and some pretty good documentation and examples. It's not as big a project as Spring or Dropwizard, but it's quite easy to use, really fast (does significantly better in the TechEmpower benchmarks https://www.techempower.com/benchmarks/#section=data-r16&amp;hw=cl&amp;test=fortune&amp;l=hra0e7), and feels pleasant to use (for me). I use Dropwizard a lot, but Jooby feels a bit more complete if you're looking for something to create a web app with (more of a Django or Rails competitor).
Yep! Autocorrect...
I think it's the same (on mobile but this is the link: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html) 
Depends: what's your role?
well okay. I kinda figured. But the problem is that I can't do it with an object from an external library. For example, I tried using it on Mat from OpenCV library. And it just says the operator~is undefined for the argument type(s) Mat.
The beat advice anyone can give you is to be a sponge. Learn as much as you can! 
Java doesn't support operator overloading which is how I assume the C++ code works. You would need to create a method that takes a "Mat" object in and returns the complement. 
Using a Java library to solve a problem in a innovative way is related to Java. This example can inspire someone to use OptaPlanner outside of traditional problems related to scheduling in logistical scenarios. As to your analogy with r/sand and CPU's, if you wish to use the Straw Man debate fallacy to extend my statement to something that is extreme, then I am not going to waste effort responding.
I've been a Java developer and architect for over twenty years. Play with everything, learn everything. The key is to learn when to keep it simple. Maintainability and extensability is the key.
Be hungry for and appreciative of feedback. Get code reviews early and often. Make small changes with accompanying unit tests. Favor readability over clever tricks. Work your way through Effective Java: https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997 Work your way through Concurrency In Practice: https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601 Have fun and keep learning! :)
Definitely a great place to start, I learned a lot using their site. As I've gotten better I've learned better ways to do things but those guides are fine. 
So post it in /r/optaplanner not here
How do you join districts. That in itself is gerrymandering unless you only have 1 district, the entire state. Of course this destroys local representation.
Spring is by far the most marketable. 
You’ll have to declare a method to get the complement of a matrix. As stated above, Java does not offer operator overloading.
From the issue it seems we were not able to reproduce it? I pinged my colleague about it. 
You can't use this operator on *any* objects in Java. It says 'on integral types' there. You need to use a method call instead. Can you point us at the documentation for what you are doing in C++, and we'll translate that to Java for you. Is it somewhere on this page? https://docs.opencv.org/3.1.0/d3/d63/classcv_1_1Mat.html
I love Vaadin, but I always find myself fighting it to get the components to behave how I want. Also compiling themes and such is a huge PITA
This is the right advice. To zoom in on “make small changes...”, make the smallest meaningful changes you can. Working in a team on a complex piece of software may be daunting at first. Just make sure you understand your assigned tasks, and bite of small pieces that make concrete contributions. First, this is the right thing to do for anyone except in rare cases where some major piece of code needs to be upended — and even then, experienced developers will work hard at making sure there are no incremental alternatives (that fully solve the problem.) Second, though, you aren’t going to deliver all of your assignments on time, in sufficient time, and sometimes not at all — it happens to everyone, and it happens to new coders frequently (I’m sure you experienced this in your IT role, as well.) if you have been making small, verifiable changes, the person who has to pick up your code will build on what you have, and you will be seen as having completed the task together. If you chase down a top-down idea you can’t get working, though, somebody else will come in, scrap it, and finish the work *instead of* you. It’s much better for the code and your peers’ perception to have the former occur. (Side shout out to readability over cleverness)
Thanks for the link! He very casually mentions having support for fibers in java.io without mentioning how much effort that was to do :-) Can say 10,000 fibers simultaneously receive/stream data from 10,000 network connections using just one OS Thread? Or is there some sort of Thread pool and switching going on? 
Wow not a single question about the Java software involved even posted on r/java.
Give the Apache services suite a good overview. I’ve seen these used a lot in enterprise Java systems. Kafka, Spark, Hadoop, etc. Also, the Spring web framework in particular the Cloud and Boot microservice parts.
Exactly, live in a pineapple under th-... Oh yeah learning is good too
Soft skills are important. Ask lots of questions and never take requirements at face value. Requirements are always wrong and incomplete - seek to understand "what is it you want the program to \*do\*" from the business users. One of the most important skills that nobody teaches is how to accurately translate a business need to code. In school all your requirements are well defined. In the real world they're vague and poorly defined. And most of the time the users don't really know exactly what they want. But they do tend to know what they \*don't\* want. Seek to see things from their perspective. 
Have you tried eclipse or Intellij, I use both and they're really good?
Uhhh Yes... I think, but I thought it was a bitewise_not operator complement thing?
To be honest, I kind of forgot. According to my notes, ~mat is supposed to be a bitewise_not thing to binarize the image. However, in OpenCV C++ library it also has this function called ~Mat(), which is the destructor. I am kind of confused on this right now
Well either way, Java does not have destructors or operator overloading.
Well if you can figure out what you want in C++ (and it won't be calling the constructor) we'll translate it to Java.
I figured it out! It is just an overloaded operator. https://stackoverflow.com/questions/29563658/what-is-operator-in-opencv-c https://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#matrix-expressions Basically, it is the same thing as bitwise_not function in C++, but it does not work in Java with OpenCV. It inverts everything in Mat or matrix.... So looks like I have to code something for that
Isn't VSC just a text editor? If so you gotta compile through the terminal 
&gt; I figured it out! It is just an overloaded operator. That's what people told you in this thread two hours ago!
What is the terminal?
Requirements are always wrong and incomplete. Truer words have never been spoken
Hey not too far from me! I started as a Java developer 3 years ago. The so far the prior comments are very solid. What helped me is picking up and reading books like Clean Code, Effective Java, and other technical books. I use the spring framework heavily in my current project, specifically spring boot for building restful api’s. Knowing build tools like maven, or gradle will benefit greatly. Also if you have some free time after work, try hacking away at your own personal coding project or learning a new language or tool. Personally I think I learn more from my off hours effort than at work.
Don't ever start an argument or talk about Eclipse vs IntelliJ
Are they really good?
WRITE notes for everything
Do code reviews too. Ask questions. A bad dev is someone who is content not asking questions
Many developers don't take all aspects of the application as seriously as the classes with business logic. Most schools that teach Java focus on the business logic code and basic syntax. Learning about things like good unit testing, deployment configuration (Maven POM, Gradle build files, etc), and framework configuration (spring beans, log config, database connection, etc) are often the most important lessons you will learn and will take you to the next level very quickly.
Read books. Lots of books. Here's one: [https://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382](https://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382) The ones u/mr_grieves mentioned are good too. Read the documentation for any frameworks you're using. Hopefully they do code reviews where you're going to work. Having more experienced devs rip through your code in reviews can be an excellent learning tool. I'm sure peer programming would be similarly beneficial, I've just never worked at a place that does that so can't say.
This is very true!
Start a personal project to put that you learn in. You will face a lot of problems, and this is great.
here is a vouch for effective java, I don't even program in java and it was a good book
This is so true. It's why we have have developed [practices](http://openpracticelibrary.com) to help. 
You probably need to start with a programming course designed for people who are totally new to programming.
Take defect tasks or other minor tasks if you have the chance. Some of the projects you probably might see everyday are going to be large, multi-foldered, and legacy code. Use these tasks not only as a practice to resolving bugs, but to help understand how each part of the project functions, and recognizing other patterns. Other than that, allow yourself to make some mistakes along the way. If you are able to learn from the mistake that you encountered you will become a better developer rather than not recognizing making an attempt to learn.
It can help a lot if you install Java extensions to enhance VSCode for your Java development.
Read clean code
test2
All the best. Be open to learning. Learn the business too that way you can write sensible code. Learn design patterns, go through java again even if you had learned it in college. Suggest SCJP by kathy sierra for java 6 and upgrade your knowledge for java 7 plus taking selective concepts.
imptext
Hey, so VSC is just a text editor. You can use it to write code. The thing is though, Java is a compiled language. You need to compile the code in order for it to work, in order for it to do stuff. This is a problem because VSC doesn't compile. Netbeans compiles, that's why you were able to use it before, because netbeans compiles the code you wrote and then runs it. Terminal is basically your command line, that black screen with white text you see when you search cmd. You can use the terminal to compile a Java file by doing "javac javafile.java" and then you can run the program in this terminal. VSC might have an extension that does this all for you, but idk! For now, try to stick with netbeans. 
I suspect we could find them in comments in files mentioned in the stack trace frames.
Follow the lead developer. The way he codes and makes decisions. Seriously, I've witnessed low to high level developers get really offended by how their code was reviewed and told to change in order to follow the code style and architecture. Also, I hope you have a good lead developer and be happy that you got an entry level position, they're hard to find.
None, the time of java web frameworks is over. Try javascript frameworks.
Read/Listen to requirements carefully. Understand how to read code properly because reading code is very different from writing code. Don't forget unit testing. Always ask for help when you are stuck and before you go to stackoverflow. Good luck!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Should try out Vaadin Flow then :) No compiling of themes anymore. 
Good luck multithreading. 
Be prepared for abstraction hell.
Next time, please address such questions to the appropriate subreddit: **/r/javahelp** 
Next time, please address such questions to the appropriate subreddit: **/r/javahelp** 
Yeah so vaadin 10 is on my list, but I've never heard of Vaadin Flow. I'll check it out. I LOVE the idea of a component based frontend *in java* but vaadin just hasn't seened to be there. They are constantly working so hope they are now.
Vaadin Flow = Vaadin 10 :) If you don't wanna use the webcomponents (you should try though, they're cool!), they still have a Java API for most of their components and even most of the HTML5 default ones (H1-6, P, Div, Anchor). 
&gt;If you don't wanna use the webcomponents (you should try though, they're cool!), they still have a Java API Wait what? It's not a Java based framework?
It is, it's a binding between webcomponents and Java. They still handle all the dynamic listeners, all that cool stuff. But most of it is a lot faster, and now you write code in client side as well. All their components (grid, vertical layout, form layout) are all web components based. 
If you wanna know more, hit me up. I'll give you a demo :) 
Hahaha you Vaadin employees hop on every reference like white on rice on a paper plate in a snowstorm! You guys run way too many ads though...it's why I waited all the way until Vaadin 8 to try it.
Not a Vaadin employee. I just like the framework :) 
Oh well that's pretty cool. I've encountered a lot of vaadin employees on here haha (they've been very helpful tbh) so I assumed Even more reason to check it out soon 
Yeah they're pretty aggressive with their marketing haha. But I guess that's a good thing? Don't know. 
I vote for Javalin. Easy to grasp yet feature complete.
Their ads actually REALLY turned me off the platform before I knew it existed. Later I talked to a Vaadin employee, and I felt he very sincerely loved the system so I checked it out. So...break even I guess?
Their ads look so sleek though! 
Yeah, but seeing the same ad everytime I pull up a youtube video like 20 times a day makes me hate the thing being advertised haha There should be a name for that
Realize that you cannot learn everything at once, accept that some things will work without you knowing how until later or you will drown in things to learn. Use others expertise in the things you don't know, ask questions! 
unregarding to your answer: Are you aware that there are multiple wrappers for OpenCV in Java?
Right, so after much consideration we've dropped the price down to 199 AUD (~150 US dollars) as we want to have way more users than we have now. On top of this we created the HALFFORME discount you can use at the checkout to get a further 50% off that price. Valid for the 100 first people who buy it.
You have one voting district that returns multiple winners, but multiple representation districts that have a single representative. I've seen an algorithm that can apportion the winners appropriately, so most representation districts get roughly the representative they wanted, but overall the voting district has proportional representation. The alternative is to have multiple representatives. This might be an advantage or disadvantage depending on your point of view. All voting systems are a trade-off between competing goals.
That's why I hate operator overloading.
But we all know IntelliJ is better, right guys? ^...right ^guys? ^^...right?
`Lazy` itself should implement `Supplier` as well. The get method should check the presence of the value, by checking if the supplier is non-null instead. This allows nullability, as well as garbage collection. @Override public T get() { if (supplier != null) { synchronized (this) { if (supplier!= null) { value = supplier.get(); initer = null; } } } return value; } This also means that value doesn't have to be volatile, which could result in better memory performance (of course this is just a micro optimization)
Good points, initially, it was supposed to be just an illustration and not a fully production-ready code... but screw that. Let's actually make it production-ready :) I will update the article soon.
Also, you can check out vavr's implementation of Lazy. It seems pretty production ready 
No. Nano for life.
There's a very good chance that the projects you will inherit have little to no unit tests. Writing unit tests will help you both understand the existing code and its function and begin writing new code in a safe way. Then once you learn how much of a PIA it is to write unit tests after the fact, you'll do it as you go along.
You're confusing server side rendering with client side rendering. Spring MVC is server side web framework that is commonly used with client side frameworks like Angular or React. Also, client side web frameworks don't work for every kind of application. They are good for applications, like GMail. Many applications, however, would be better served by server side rendering. TLDR: server side rendering is far from dead.
Looks like cactoos library (it has lazy evaluation using Scalar, and e.g. memoization using StickyScalar)
Guava already has the implementation of memoizing supplier, and implements optional expiration support on top of it.
Why would synchronizing the get method add more contention than the provided solution? Is it just to avoid the lock in the case that the value is not null?
Synchronization is needed only at the point of initialization, after that, the value is in there and no point in forbidding the concurrent access. So, it makes more sense to actually synchronize a small check inside a branch where we suspect that the value is not initialized yet
Notepad++ all the way
If you have the time, side projects are a great way to work with new tech/frameworks and get a deeper understanding of how things work. With your actual job, I've found that pairing with teammates, at least for a couple months, can help you learn lots of tips/tricks that may have taken a long time to learn on your own.
Article’s goal is to provide a step-by-step exercise and not to compete with production-ready libraries
By default, a thread takes 1MB of stack space. That means 10,000 threads would take up about 10GB of RAM.
Nah 
Stop down voting this poor guy for asking what a terminal is... sheesh, he’s clearly very new to programming
I think this is a VERY important lesson to learn early on as an entry level Dev. There have been many times where I would get really discouraged because I felt I wasn't smart enough or learning fast enough how our particular systems modules were funtioning past the general gist. Also realize that even though you probably are very confident with Java, OO, etc, sometimes the system you are working with can be very old, very convoluted, etc. So be prepared to use some after hours time to dive into it and just try your best to learn how it all functions with it's other parts. And try not to get too discouraged. With enough time and patience you'll get there. 
There is also a very good chance that the project you inherit will have been developed by a singular Dev at a time, and had little to absolutely ZERO documentation or comments. There is also a good chance that it will have been developed without any decent coding standards in place, again, since it had a single Dev at a time for the most part. Not to mention it's still using 1.4... And now that the last Dev that was working on it is leaving the company, the boss realizes how awful an idea it was to have one Dev per huge module, especially with no documentation or standards.. Now, you and another entry level dev have been hired to take over and have very little time to learn the system, yet are expected to fully replace the last Dev that was on it and turn the project around so that new devs after you won't be in as bad a position. Sorry... Kinda went on a rant there. But just try not to stress too hard over stuff. It's going to take time to learn the system and become more confident with working on it. 
I respectfully disagree with the last point. You should do your best (without spending insane amounts of time, of course) to figure out a problem on your own first by doing research before going to someone else for help. This isn't to say you should ask for help and ask questions, because you definitely should. But you also shouldn't go to another dev first thing every time you encounter a problem you can't immediately solve. 
It still might be worth mentioning it at the end. Guava is a very common library and if you're already using it there no reason to write your own version.
Thank you. 
I totally get your point but let's think about it in this simplistic way. Would you rather having someone in your team who copy paste stuff from stackoverflow to your project or someone who works with you to implement tough parts ?
Try IntelliJ IDEA - the UI is a lot more intuitive.
I have tried Webstorm and not feeling it either. Probably VS Code is too powerful for me :(
Uh? Calling VS Code powerful in comparison to IntelliJ IDEA is a bit... questionable... There's a Java plugin for VS Code, why don't you use that? https://code.visualstudio.com/docs/languages/java
Yes. I saw that plugin but not sure if VS Code could optimize all the features like the IDE for Java 
I don't know what you mean by "optimize all the features", but Eclipse, IntelliJ IDE and Netbeans are basically all the Java IDEs that are commonly used that I know of.
Alright. I’ll give the IntelliJ a shot. Thank you 🙏 
I consider myself a decent Java programmer with 3-4 Android apps under my belt, yet I have no idea what this article is talking about. Can you recommend any material that I could study to get a better grasp of some of these more advanced concepts? Thanks!
Please, next time address such questions in the appropriate subreddit: /r/javahelp.
Also, be willing to try things even if you aren't sure. Be willing to take the crap jobs such as debugging, hardening, etc. You will learn tons about your codebase and programming techniques. Learn about singleton classes, MVC, and web services. 
In addition, use the search feature. This question is asked far too frequently.
It can not. VS Code is a text editor. Plugins give you some functionality, but nowhere near what an actual IDE can do.
Can you try to narrow the area you have no idea about? Since you're working with Android, how's your experience with Lambda Expressions and Functional Programming in general? I remember Android always staying a bit behind the standard Java release cycle. Have you tried Kotlin?
Cool, but defies the purpose of *dynamically* loaded classes and in turn defies the purpose of using reflection in this context. Too bad that apparently the JDK itself uses reflection.
Well I don't know what Lambda Expressions are or how / when functional programming should be used. I have not tried Kotlin. And yes I think Android is a few releases behind the Java release cycle.
If a text editor is more what you want rather than an IDE, Kate is the one I use, much better than any other in my opinion.
I think the purpose of reflection is to dynamically refer to classes, not necessarily to dynamically load them. People use reflection to build plug-in systems where there is no static dependency on all the possibly plug-ins. If you know what plug-ins you need when you build you app for deployment (which you must, as otherwise where would it get the plugins from), then you don't need the dynamic loading functionality.
Yes, Eclipse is really good for developing Java applications. I use it personally to develop applications. This website [http://www.ntu.edu.sg/home/ehchua/programming/howto/eclipsejava\_howto.html](http://www.ntu.edu.sg/home/ehchua/programming/howto/eclipsejava_howto.html) gives a pretty good explanation on how to setup Java in eclipse. If you also need help learning Java, there is free course on uDemy, r/https://www.udemy.com/java-programming-tutorial-for-beginners which can help you get started with Java. Good Luck.
The top three tend to be Eclipse, Netbeans and IntelliJ. My personal preference is for Netbeans because of its good Maven integration and intuituve UI.
This is the same approach used by .NET for AOT static compilation. https://docs.microsoft.com/en-us/dotnet/framework/net-native/runtime-directives-rd-xml-configuration-file-reference Given reflection's nature it is impossible for a compiler to understand all possible cases. Unless it takes the blind approach that every .jar maps into a distinct dynamic library.
Obviously the latter. But researching things, even on stackoverflow, so that you can learn from them and implement them is different than simply copying and pasting. Obviously, my suggestion goes out to those who actually want to learn, not those who copy and paste everything. Would I want someone coming to me every time they do not understand something? Hell no. How are they going to learn that way? Good research skills are important for programming. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/92ydfn/how_do_i_reverse_an_int_array_in_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Anyone use the three big IDEs? Eclipse, netbeans and IntelliJ. How would you rate them? Which one do you consider the best and the worst. I've only worked with eclipse mostly and it's just adequate.
Those, who switched to Idea, never look back.
For Java I went back to Eclipse, IntelliJ just feels too clumsy For non Java IntelliJ is miles ahead of Eclipse though
I'd place netbeans and intellij about even; * Netbeans is what I'd consider the reference point; cartesian zero. It works, and works well. * IntelliJ IDEA is very good, with a moderate learning curve, but a sneaky pricing scheme geared towards incentivising individual users to act as evangelists towards their employers. I've been the user, and I've been the employer, and as the employer it pisses me off when a vendor end-runs my procurement process. * Eclipse is positively painful. It tries to impose on your build process and your repo. I avoid it unless I'm absolutely compelled to use it.
Try visual studio code with plugins for a lightweight approach 
What do you mean for non Java? IntelliJ is made to work with Java.
Probably other JVM languages like Kotlin if I had to guess. 
I took it as non JVM. I use IntelliJ with Java and have no issues. To each their own, though.
I have about 15 collective years with the three IDEs. **Without a doubt:** 1) IntelliJ 2) Eclipse ^(distant 2nd) 3) Netbeans ^(extremely distant 3rd)
You're not doing it right.
I used Netbeans for many years (since 4.0), no worries. Tried Eclipse but fells somewhat sluggish to me, works well, but never get into it. I use Jetbrains nowadays, fell in love with JB tools at first sight (i use idea, phpstorm and webstorm). My last projects in Netbeans 8.2 were in PHP, Netbeans 8.2 works suprisingly well with PHP. I hope Apache Netbeans get PHP support. Sorry my english :)
I used Netbeans for many years (since 4.0), no worries. Tried Eclipse but fells somewhat sluggish to me, works well, but never get into it. I use Jetbrains nowadays, fell in love with JB tools at first sight (i use idea, phpstorm and webstorm). My last projects in Netbeans 8.2 were in PHP, Netbeans 8.2 works suprisingly well with PHP. I hope Apache Netbeans get PHP support. Sorry my english :)
&gt;I'd place netbeans and intellij about even; &gt; &gt;* Netbeans is what I'd consider the reference point; cartesian zero. It works, and works well. &gt; &gt;* IntelliJ IDEA is very good, with a moderate learning curve, but a sneaky pricing scheme geared towards incentivising individual users to act as evangelists towards their employers. I've been the user, and I've been the employer, and as the employer it pisses me off when a vendor end-runs my procurement process. &gt; &gt;* Eclipse is positively painful. It tries to impose on your build process and your repo. I avoid it unless I'm absolutely compelled to use it. I humbly albeit absolutely disagree with your take on the IntelliJ pricing model. I've been both the user end employer as well. The pricing for ALL their products is about $20/mth (eventually $15/mth). That's a bargain. It would take years of use to match one license for Visual Studio. But everyone is entitled to their opinion, of course. I wholeheartedly agree on Eclipse.
I don’t believe that NetBeans is still in 3rd. Hasn’t VSCode overtaken it?
I've stopped singing the praises of IntelliJ because I want there to be competition. So please, use Netbeans or Eclipse :)
Commercial licenses are way higher than that. I think the point was making was I have a nice cheap license at home, tell the boss we definately need it for work then boom! Few thousand in fees per year for a small team.
Hey, Good\_Guy\_Engineer, just a quick heads-up: **definately** is actually spelled **definitely**. You can remember it by **-ite- not –ate-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
You probably meant ***DEFINITELY*** -not *definately* --------------------------------------- ^^^Beep *^^boop. ^^^I ^^^am ^^a* ^^bot ^^whose ^^^mission ^^is ^^to ^^^correct ^^your ^^^spelling. ^^This ^^^action ^^was ^^^performed ^^automatically. ^^Contact ^^^me ^^^if ^^I ^^^made ^^^A ^^mistake ^^or ^^^just ^^downvote ^^^^^^please ^^^^^don't
Hey, Defiantly\_Not\_A\_Bot, just a quick heads-up: **definately** is actually spelled **definitely**. You can remember it by **-ite- not –ate-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
VSCode is an editor, not an IDE.
This is false. I code node and react-native using IntelliJ. Our node project has literally 0 java code.
I didn’t say it doesn’t work with other languages, but first and foremost it is made to work with languages on the JVM.
As the other commenter has pointed out, the $15/month pricing is only for individuals. It's $50/month for businesses. The "sneaky" part I was getting at was the discount usage for users who self-fund the purchase, and use the license professionally. If the employer reimburses the user for the license, the price jumps back up to the enterprise price point... The net result is that they're subsidizing users to act as evangelists for their product. It's a tricky approach; some people won't care, some will embrace it, and some (like me) will be unhappy at being manipulated. I'm not disputing the quality of the product; Idea's refactorings and autocompletes are downright sexy. I might yet be convinced to make the jump; but I'll need to get past the sales trickery to do it.
I have used all three, and idea is hands down the best. That said, if you can't afford it or just don't want to pay for your software, net beans is ok. I was a Grails developer for a few years and idea has the best support (pro only unfortunately), however as an avid fan of the groovy language, idea also has the best support. Net beans also supports groovy but the indexing and speed of idea can't be beat. Eclipse is really just trash, I know it has it's fans somehow but i would sooner use notepad.
Shut up shill. 
oh rad! thanks for posting, I'll take a look! Grats on working through this!!
&gt;If the employer reimburses the user for the license, the price jumps back up to the enterprise price point... can you point me to language for that?
https://www.jetbrains.com/store/license_personal.html - Section 3.3... plus a bunch of the articles in the KB, under "License Types and Users"
thx
Say a simple example where you want to filter a list of strings to only the ones containing the letter "a". Without lambda expressions and Java 8 Streams it would be like this: List&lt;String&gt; inputList = [imagine this is populated]; List&lt;String&gt; outputList = new ArrayList&lt;&gt;(); for (String inputItem : inputList) { if (inputItem.contains("a")) { outputList.add(inputItem); } } Having to construct an extra list and loop through the input is so much boilerplate when all you really want to express is the `inputItem.contains("a")` part. Java 8 Streams simplifies this by allowing you to in one step iterate over a list applying a function to each item to determine if it should remain in the output. List&lt;String&gt; inputList = [imagine this is populated]; List&lt;String&gt; outputList = inputList.stream() .filter(item -&gt; item.contains("a")) .collect(Collectors.toList()); The `.stream()`, `.filter()` and `.collect()` are the Java 8 Stream API, and the `item -&gt; item.contains("a")` is a lambda expression, a short anonymous function that is passed like a variable. The benefits are - It is much more clear you are filtering the list, with the original version you would have to comment saying what the purpose of walking the list is. - There is no mutable state- you can be guaranteed the inputList is not modified in any way. This is a big part of functional programming. - Because there will definitely be no changes to the inputList, the JVM can decide to execute this on multiple CPU cores, gaining a linear increase in performance with the number of cores. This is a very simple example, the Streams API is very flexible so you can slice and dice the data any way you want while gaining performance increases, increasing readability and code safety. It allows you to filter, map, groupBy and have the output as a List, Map or anything you want.
that makes no sense. Kotlin was created by the creators of IntelliJ
I used to use NetBeans then Eclipse then IDEA. They are all good but I like them in the order I switched to them.
Been waiting for this to appear in general Java lang (as opposed to Ron's earlier work with Quasar and Pulsar) for so long. Amazing work Ron!
Thanks for taking the time to explain this! The only question I have is what you mean by this &gt;There is no mutable state- you can be guaranteed the inputList is not modified in any way. This is a big part of functional programming. Can you expand on why/how the old way may have made changes to inputList? Thanks 
&gt;If the employer reimburses the user for the license, the price jumps back up to the enterprise price point... Interesting, I submit my invoice for reimbursement once paid. Not sure if that technically goes against EUL, but it's worked for me for years.
But yeah, though. 
Calling Ada’s convention camel case is strange. It’s convention to capitalize each English word included in an identifier but the language is case-insensitive so it’s not required. Separating the English words with underscores is almost universal naming convention, though. `System.out.println`’s counterpart, for example, is `Ada.Text_IO.Put_Line` (although, as I said, the capitalization is technically optional so this could be written as `ada.text_io.put_line`).
Eclipse has settings for this. Go to the build path settings on a project and go the the libraries tab. Double click jre/jdk. Add Java 10, and set it to any projects you want compiled under java 10. You'll need to change maven settings though
Bad bot!
Bad bot!
Bad bot!
I'm switching from Scala and this article is great. 
Please, next time address such questions to the appropriate subreddit: /r/javahelp.
Thanks, what was wrong with Scala? :)
I worked with Scala for one year and I personally don't like it. It helped me understand Functional Programming and that is cool. 
IntelliJ all day,
True. I found a good deal of Josh Bloch’s advice to apply outside of the context of Java. Just be careful that you don’t approach all languages as if they’re java.
Did try, definitely wouldn't recommend. I use vs code very extensively at my internship for node and react codebases and I never feel the need to open webstorm. Writing any other language (i tried java and python) feels very clumsy compared to using an IDE.
why the hatred lol
You can just use VS Code, but you're going to find a lot less resources out there to help you with it if you do. See these articles for reference: https://code.visualstudio.com/docs/languages/java https://code.visualstudio.com/docs/java/java-tutorial Personally, I have used IntelliJ and Eclipse the most and I know the communities around those can help you if you get stuck. However... I suspect the IDE isn't your first problem. Your first problem is learning Java and the way Object Oriented Programming is done in Java vs. Javascript. They are different. So... get a good book or tutorial or PluralSight course or the like and just go learn Java. Pick a course that speaks to you, and use whatever IDE or editor they recommend or use for that. You'll learn a good way to do things this way and it will be a starting point. The next time you try to use Java to accomplish something, then it will get real and you'll have to commit to some set of tools just to get going. At that point, you can use whatever you used to learn on, but you'll probably want to go with IntelliJ, NetBeans, or Eclipse. Anything else is just a bit more difficult than it needs to be. And before you ask, no you probably cannot learn Java just by doing it. There are fundamental differences between your knowledge base for Javascript and what you need to know for Java. You'll want to get some explanation up front to save you from a LOT of confusion and trial &amp; error.
Which is why they said: &gt; For non Java IntelliJ is miles ahead of Eclipse though
VSCode is great and I use it regularly but I’d never use it for a Java project of any reasonable. 
I use all three of the Java IDEs at work in parallel. Each can do things better than the others in different ways. For instance, when auto-completing a method argument, Netbeans and IntelliJ will list possible options with the same data type first before listing other options. Netbeans project structure is rather rigid compared to the other two. I haven't figured out how to arrange my workspace in IntelliJ with tabs like Netbeans and Eclipse have. IntelliJ and Eclipse spell-check all comments and strings, while Netbeans only spell-checks Javadoc comments. In project view, IntelliJ combines all classes in a package from all sources, which puts test classes next to implementation classes (good? bad? just different?). I believe Eclipse has the most diverse plug-in ecosystem (has IntelliJ gotten bigger?). I've collected several other differences but don't have them available now. But from my subjectively objective research, Netbeans is the best IDE of them all. ;)
This is actually an excellent icebreaker if you are on a party with only developers and don't know what to talk about. Same goes for the question "Do you prefer programming language C++ or Java?" - They will be busy talking for hours...
Once you go Intellij you never look back.
A very general advice from me is: Learn the design patters, especially the ones that are used at the place where you are going to start working (You know... visitor pattern, gang of four all that stuff). It does not make a good impression if your team talks about a design pattern and you have no clue what they actually talk about as everybody assumes you know what it's about...
I tried all 3 of them and in my opinion 1. Eclipse 2. Netbeans 3. Idea I tried to like Idea but it feels all wrong to me even with eclipse key bindings. 
The same platform for their java ide is used by Jetbrains for IDEs for several more languages. The names are are different but it's basically the same IDE. 
No changes are made to inputList in my example, but the compiler can't be 100% sure of that so it is forced to be as conservative as possible and iterate through the list in a single thread because that's what you've told it to do. In the Streams API example I have told it what I want (all elements where `.contains()` returns true), not how to go about getting it (loop over this list one at a time and perform this action). In this sense it is a bit like a database with SQL. You don't get to tell it how to do things, just the data you want returned and it does all the optimisation magic to make it happen as performantly as possible.
Eclipse feels somewhat messy to me. The UI is ugly (in my eyes), the handling of similar things is not always similar (say Git vs. SVN), and it doesn't have as many good things to support you while coding as IntelliJ (e. g. quick fixes). NetBeans has a pretty clean (although somewhat dated these days) interface and has a good usability. The plug-in manager for example is way more pleasant than the one from Eclipse. When I used it the last time it felt a bit snappier than Eclipse. NetBeans has good Java EE support, but not so good support for non-standard technologies like Spring, Grails, Play, Kotlin, or Scala. IntelliJ is unquestionable the best Jave IDE available today. It has support for lots of frameworks, it has fantastic quickfixes, best in class static code analysis, very good refactoring tools, best support for other programming languages than Java, it has the best support for multi language projects (google "language injection idea"). And last, but not least, IntelliJ has a very good UX (once you get used to some uncommon keyboard shortcuts). I would use the IntelliJ community edition rather than Eclipse or NetBeans if I were not willing to spend money (but it is worth every cent, if you need some of the features of the Ultimate Edition). 
I consider explicit casts a design weakness most of the time. Since Java has generics, casting should be needed very rarely. In most cases it turns out that you haven't used generics properly (or not at all!), if you need explicit casting.
I consider frameworks like Vaadin with a mixture of client side and server side rendering (e. g. JSF, Wicket) suboptimal from an architectural point of view. You won't get a clean server side interface, for example. Such an interface would not only make it more comfortable to add other clients but most important it makes testing way easier. With such frameworks you'll get a mixture of Java and JavaScript without all the benefits of the one or the other. And if the site would have a lot of traffic, Vaadin could lead to scalability issues, since vaadin is based on shared mutable state (aka session) and transerfers a lot more data then theoretically needed. I would prefer to use a clean REST framework (I consider JAX-RS / Jersey the best) and would use a JavaScript framework like React or Vue.js on the client side. Then you would get all the benefits of the JavaScript ecosystem and a clean, reusable server side REST interface.
&gt;**No Surveys** &gt; &gt;We do not allow surveys. Also, a survey that requires login. lol. But regards to the subject, I vote for 'only exceptional cases'. I agree with u/cryptos6 that it is indeed a design weakness. However, there is one use case that I found: When designing an API through interfaces, you might have two declarations: public interface Context { ... } public interface Child { Object doOnContext(Context context); } In this case, the Child implementation might need to cast the context paremeter to the implementation class in order to execute the operation. One might wonder: But why don't we use the Context as a factory for the Child implementation? Well, the child instance might need to be serializable. In that case, the context cannot be serialized along with the child, and later after deserialization, it needs to be attached again. So instead of creating a reattach method on context, we pass the context as a parameter for the function call. So in the end, the function implementation might look like this: public Object doOnContext(Context context){ ContextImpl impl = (ContextImpl) context; ... } I think that a thrown ClassCastException is fine in this case, as children should be used on their respective context instances, which is the responsibility of the API caller. If you need to act based on the type of the parameter, there is also the Visitor pattern for you.
I would use JAX-RS / Jersey, probably with Spring Boot. Spring Boot is very helpful because it packs so much useful tools and best practices. However, I would stay away from Spring MVC. It is ok, but as a REST framework JAX-RS is much better and cleaner.
Yes, you should. In a number of situations. * `Object.equals()` requires you to explicitly cast from `Object` to your type. * Bad API designs where you need to cast from a generic to a more specific object to get access to the required functionality. I'm looking you W3C DOM. * You're implementing a generic container class and some situation requires you to cast before returning to your users. I'm sure there's others I forgot. It is a good idea to try to encapsulate your casts so you only do it in one place. If you're dealing with generics, rather than return `Object` or your base type, require a `Class&lt;T&gt;` to be passed in as a second parameter, so the cast happens in that function rather than for every caller. For an example, look at Spring's `BeanFactory.getBean(...)` functions. After Java 5, they replaced: java.lang.Object getBean(java.lang.String name) with &lt;T&gt; T getBean(java.lang.String name, java.lang.Class&lt;T&gt; requiredType) That means you have: Bean bean = appContext.getBean("bean", Bean.class); rather than Object obj = appContext.getBean("bean"); if (!(obj instanceof Bean)) { throw new CustomException("not right bean class"); } Bean bean = (Bean)bean; or Bean bean = (Bean)appContext.getBean("bean");
Care to elaborate on the „much better and cleaner“, i.e. what exactly makes you prefer JAX-RS over Spring MVC?
I don't disagree... Vaadin is talky as hell. However you can minimise that with custom components when needed. But to knock something quick out it is really good, optimise later when you have the thousands of users which might start causing performance problems. In a serious project I would treat vaadin like the view and have an Api layer below it which would create the separation you suggest. I'm of the opinion that if you can minimise the amount of javascript in a project, do so. 
Historically Spring MVC was not a REST framework. The REST stuff was added later with annotations, but all the old stuff was kept as well. The result is a framework with a greater API surface. The REST principles are not implemented as strict as in JAX-RS. If you annotate a method wit `@RequestMapping` (I even don't like the name!) the method would accepts requests with any HTTP method by default. The URI builder of Spring MVC is more or less a glorified StringBuilder, whereas the JAX-RS URI builder takes the actual program structure into account ("build an URI to the method "doIt" of class "Class&lt;X&gt;"). You can have nested resources with JAX-RS, what is not possible at the code level with Spring MVC. And I like the content negotiation capabilities and the conversion features of JAX-RS better.
Vscode is nice, but but for a verbose language like Java. 
So long as they're encapsulated it's fine. That is, don't design an API which requires your users to make casts idiomatically, and don't write code which risks throwing CCEs. Sometimes the type system isn't strong or flexible enough to express what we want and we have to work around it, which is fine.
Is works with the latest java version? 
&gt;The main goals for this release are &gt;* IP clearance of the Oracle code donation. &gt;* Java 9 and 10 Support.
In order to produce the good code, you should read this book: - Effective Java by Joshua Bloch - Java Concurrency in Practice by Brian Goetz - Design patterns explained by Alan Shalloway (because software requirement is always changed)
IMO, Spring Boot is the best framework for the beginners. Reason: - No painful XML configuration - Fast dev to production time - Good career opportunity - Got many available tutorials
Intellij marketing team out in full force today with the downvotes.
&gt; It tries to impose on your build process and your repo How so?
lazy suppliers are ok, but this is limited to this only type constructor (Supplier). Having lazy thunk built-in for other your data types as well simplify a lot of thing, ie. you don't have to duplicate all computation paths, one for strict and one for lazy evaluation. Which is why derive4j support this: [https://github.com/derive4j/derive4j#first-class-laziness](https://github.com/derive4j/derive4j#first-class-laziness) (/insert disclaimer)
Spark Java
A useful article since I was just looking at creating signed rest commands for my webserver implementation.
Once you go Czech, ypu never look back.
Don't use one. Just do it with servlets and gson to start. Heck, I've got years of experience and I prefer that.
Yup. That nullifies your license. Sec. 3.3, as I linked elsewhere.
Started with web and php storm in college. Instantly fell in love. Android studio then introduced me to intellij and again, felt like the best thing ever. Suddenly I needed to do some Spring practice. Couldn't afford intellij pro version which includes Spring and ee support. So I grab eclipse. New best thing ever! Then just for fun I grabbed netbeans based on hearing it from a friend. And now netbeans is my primary go to ide. I mostly program in Java so it's all I really need. It feels lighter than the other two, amd faster. The ui in my opinion is much cleaner and "out of the way" so I can just work. 
Started with web and php storm in college. Instantly fell in love. Android studio then introduced me to intellij and again, felt like the best thing ever. Suddenly I needed to do some Spring practice. Couldn't afford intellij pro version which includes Spring and ee support. So I grab eclipse. New best thing ever! Then just for fun I grabbed netbeans based on hearing it from a friend. And now netbeans is my primary go to ide. I mostly program in Java so it's all I really need. It feels lighter than the other two, amd faster. The ui in my opinion is much cleaner and "out of the way" so I can just work.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
As a netbeans user myself, I'm wondering: what is that better with IntelliJ ?
Thanks for the insights. I took 2 Java classes last year. But haven’t used it since then. I am working mostly with JS for a year now. I think I’ll be able to pickup easily. 
What really jumped out at me about intellij was how smart the autocompletes and refactorings are.
1. Intellij 2. Netbeans 3. Notepad 4. Vim 5. Word 6. Eclipse
Java EE, with JSF, of course :)
&gt; In project view, IntelliJ combines all classes in a package from all sources, which puts test classes next to implementation classes (good? bad? just different?). Assuming you mean Package view (Project view mimics the filesystem layout so tests are under /src/test) if you click the gear icon and check Sort by Type the test classes will be grouped at the bottom of each package. Not hidden completely but at least out of the way.
The Java extensions for VS Code are fairly good for building Maven projects, Spring projects, and basic Java code.
I've tried to get into using Netbeans and Eclipse but can't seem to feel comfortable with them. I've always used Emacs (with JDEE mode). I can configure the IDEs to more or less work like I prefer to work but one thing I haven't gotten to work, perhaps someone can direct me to how to do it in Netbeans, is multiple frames on multiple monitors. With Emacs I can fire up a new frame, drag it to a separate monitor and load any buffer it in I want, all frames share the same buffer list. For these IDEs they all seem to be tab based with no way to undock a tab into a separate frame. Is that possible with Netbeans? If you search for multiple frames and Netbeans all the links take you to writing multi-frame Swing applications, so I've not found any directions to having multiple Netbeans tabs being on different monitors.
How many of you have used the unspeakable evil that is Rational Application Developer?
Depending on your organization's SDLC, expect to be asked to provide feedback on work effort for assigned tasks. That might be a complexity rating or time in hours. Be as accurate and honest as you can. If you don't understand the task assigned, factor in some learning time on that and let your team/scrum leads know this is an issue. If you find yourself getting behind on your estimate, don't think you can "cram" to make it up, raise the issue in your standup immediately. Ask for help. You won't be expected to take on high risk tasks early on, but you will be expected to learn from the tasks you do get assigned. And when there are code reviews of the code you write, if folks make comments, ask them why without taking offense. If you're with a good team the reviews should be constructive and educational, but if you get defensive or upset because someone points out issues that doesn't play well. But in general, enjoy it. Take advantage of everyone you can, not just the developers on your team, but the QA folks, the DBAs, the networking guys. Ask questions and soak it all up. And if your organization has a "rotation" model where you can move to different areas, take advantage. I did a rotation through finance at one point and it was a very eye-opening experience.
Ok thanks!
Ok I'll keep that in mind. Thanks.
I use Keystore Explorer for Windows, it's a godsend.
Oh God, while I do agree with most replies here, for the love of everything that is holy, learn and understand how to work with Maven and/or Graddle. Don't let a fancy IDE cripple you. If you can't open a terminal in any system to test, build and deploy (locally or not) your project, your IDE is doing things without your knowledge and consent. This is specially true for InteliJ, the community version won't allow to import a Tomcat server, but you don't need one if you can write a decent pom file.
Don't laugh... I use it for C++, in my hobby projects. It has a grate parser for code and project files so working with the language is kind of fun but I have no experience with prod grade builds to judge its capabilities in this space.
Run to the hills
Yep, there's also [xca](http://hohnstaedt.de/xca/)
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](http://hohnstaedt.de/xca/) - Previous text "xca" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Man, that brings back memories... that I've been drinking heavily in an effort to forget. :-) Was the capitalization always optional? It's been many long moons since I formally learned the language, but I don't remember that part. Was there an older standard/version that required you to match case in identifiers?
&gt; lightweight There is nothing lightweight about Electron.
&gt;Rational Application Developer I too have stared at the abyss.
&gt; If you annotate a method wit @RequestMapping Spring has @GetMapping, @PostMapping, etc.
Ah makes perfect sense, thanks again!
I‘m pretty sure case insensitivity goes all the way back to Ada83 (it’s on Ada2012 now) but not counting on it may have beaten out of you because it’s considered bad form. It was meant to be usable on systems that didn’t have a full range of characters. 
A couple of question for the community: Do you recommend WebStorm for JavaScript development? Could I just buy IntelliJ Ultimate and customize it with plugins to get the same features offered by WebStorm?
I'm not completely sure but I think the Ultimate version contains what you have in Webstorm and more
Intellij Ultimate has ALL the features of other IDE's through the plugins
Minus OSX and C/C++
Run for your lives
Do they only do subscriptions now? I thought they still had an option to buy outright, but I can't find it...
It's strange. If you buy a years subscription you get the version originally purchased in perpetuity. However, I think they roll back any updates you got over the year if you discontinue your subscription.
It is also worth mentioning that Guava implementation does not free-up memory retained by the supplier upon evaluation (it does so to support java native serialization). If you don't care about java native serialization (as you should) then guava implementation is not very good and you probably want [this implementation](https://bitbucket.org/atlassian/fugue/src/106e0b88d9aeec537ee9b3830661405bf8524798/fugue/src/main/java/io/atlassian/fugue/Suppliers.java?at=master&amp;fileviewer=file-view-default#Suppliers.java-159).
Sort of, you can keep all the "minor" updates you get, but can't keep a new major version if you stop paying. Something like: you buy version 1. Then install 1.1 and then 2.0 comes along (should be one per year) and you install it. If you cancel your subscription you can keep 1.1 but not 2.0. Hope this made sense 
Ahh I see. That is more reasonable
1) Netbeans 2) Netbeans 3) Netbeans
The subscription is only for major updates after one year.
IntelliJ Ultimate would include the functionality found in WebStorm.
Get help.
NetbeansNetbeansNetbeansNetbeansNetbeansNetbeansNetbeansNetbeansNetbeansNetbeansNetbeans
I generally just use Ultimate, though if I'm working on a frontend-only project then I just use webstorm (I have the all tools pack).
Any updates to the GUI builders?
I have my subscription on auto. I would recommend buying this now if you were close before.
Yes, I'm aware of that. But the default behavior of RequestMapping remains a bit strange. The names GetMapping etc. are even worse! 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You can. But jetbrains did some tricks which make your life a bit more difficult if you use ultimate edition as I do rather than buying a full pack. I have to hack project iml files in order to all plugins to work correctly. Idea ultimate always create java style ink project. Changing it to python manually using text editor make idea happily discover Django as framework. Which it failed to do by default. Don’t know how to fix it by default. 
By OSX, I assume you mean appcode. 
Damn. I am currently stuck with PHP at my current workplace, where money is tight so a jetbrain license isn't on the menu. I tried phpstorm during the 30 days trial and I must say it was a lifesaver compared to using sublime text/vscode with clunky extensions. I think I'll just buy the whole package and be done with it.
It looks like in your [submission](https://www.reddit.com/r/java/comments/93685v/last_class_in_college_last_program_need_a_95_on/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
So how does it work if you have an active subscription? Can you prepay for the next cycle?
Does anyone know what's the diff between All Products Pack and Ultimate? Really thinking about getting Ultimate.
Iirc you should be able to. 
Wait, does it really work the same? I have currently both Ultimate, WebStorm and PyCharm installed. Does that mean the latter are redundant?
Ultimate is the Java IDE but you can install plugins to support everything else. Ultimate lets you install each application separately. It sounds similar, but trying to work on a non-Java project with Ultimate can be a pain as it keeps deciding it isn't a project without the maven POM. If you have a project that has a mishmash of languages in it then Ultimate is the best.
I think it’s worth getting the whole package since the individual IDEs are a large portion of the full cost. Plus maybe it’ll give you some motivation to try out something new in your spare time?
I once read that other Idea-based IDEs are released as Idea plugins but with some delay (so that it would still make sense to own them if you want everything fresh). But if you are able to wait a while for PHP/Rails plugins updates then, yeah, Ultimate becomes *pay once own them all*.
Yeah - out of the box, it has (nearly?) all the [features of WebStorm](https://www.jetbrains.com/idea/features/#out-of-tools), and you can get the features of PyCharm through a [plugin](https://plugins.jetbrains.com/plugin/631-python).
It says so right on the linked page. &gt; Already a friend of JetBrains? &gt; Friendships are forever — add another full year to your current subscription at 50% off the standard 1st year price. So it's not *as* good a bargain since JetBrains reduces the prices for subsequent years, but $75 for the third year is still better than $89 for the third year, for example...
Its a little funny to see a site that serves a cryptography-related application.. Not have always-https.
Ah only for individuals. Wish they did it for businesses too. 
About 2-3 years ago they switched to a subscription model, you can no longer buy the version + updates. 
Yes, I understand that. But I haven't done such things. In that case you would no \_worse\_ off than if you were working with, say, JavaScript or Python code where you had to do search &amp; replace as text.
Yup, that's my reasoning as well. I've been trying out and building up experience on other languages and frameworks though (thank god). I am having fun with Typescript at the moment, it's really nice for webservices and smallish scripts/daemons. And I really wish to go back to Java one day. I've been looking at Spring quite a lot, but it's hard to get into it : everything looks like black magic, I'm struggling to "get" what it does and how to integrate everything together in a real project. But I'll get there ! PS : and honestly, while PHP has its shortcomings, it can be rather pleasant with an up to date framework. Yay for Symfony !
Yeah I’ve worked with PHP before and don’t really have much of a problem with it. Keep learning new stuff that you want to learn (not just things that will help with your job) and it’ll keep you from ever getting burnt out of your career!
Read this: [https://code.visualstudio.com/docs/languages/java](https://code.visualstudio.com/docs/languages/java) Install the Java Development Pack extension. You can then run/debug your program with F5 and the result will be displayed in the integrated terminal. For anything more complex, you would then want to install something like Maven or Gradle and configure it accordingly.
I run Apache Tomcat, for example, without "installing" Java, on Windows. I even run MULTIPLE INSTANCES of Tomcat on a single Windows OS. I create a SetPaths.bat which sets several environment vars: @echo off rem Server Instance Foobar06 set "SERVICE\_NAME\_SUFFIX=Foobar06" set "CATALINA\_HOME=C:\\Foobar\\Servers\\apache-tomcat-8.0.52" set "JAVA\_HOME=C:\\Foobar\\Servers\\jdk1.8.0\_181" set "CATALINA\_BASE=%cd%\\CatalinaBase" This goes in the CatalinaBase folder for a particular instance, such as Foobar06. Where the product is named Foobar. There might be multiple Foobar servers for development / testing. Eg, Foober01, Foobar02, etc. Notice that the SetPaths.bat specifies which Tomcat and which Java to use. Note that Java HAS NOT been installed onto the Windows OS using any kind of a "setup.exe". In fact, Tomcat hasn't been "installed" either. It is just an unpacked zip, at the pathname specified above. Next, create several scripts named: service-control-panel.bat service-install.bat service-remove.bat startup.bat shutdown.bat The startup.bat looks like this: @echo off call .\\SetPaths.bat "%CATALINA\_HOME%\\bin\\startup.bat" The service-install.bat looks like this: @echo off call .\\SetPaths.bat "%CATALINA\_HOME%\\bin\\startup.bat" Similarly you would create service-remove.bat, shutdown.bat. The service-control-panel.bat looks like this: @echo off call .\\SetPaths.bat "%CATALINA\_HOME%\\bin\\tomcat8w.exe" "//ES//%SERVICE\_NAME\_SUFFIX%" As you can see, the first scripts simply set the paths for everything and then invoke the official Apache Tomcat scripts for startup / shutdown, or alternately service-install / service-remove. You would use service-install / remove to install this Tomcat instance as a "service" under Windows. (Start --&gt; Administrative Tools --&gt; Services control panel.) Which lets the Tomcat start in the background as soon as Windows is booted, without logging in to the computer. Or if you simply want to run Tomcat "on the desktop" you are logged into, then you would use startup.bat, which calls SetPaths.bat and then starts Apache Tomcat in a command window. Don't close the command window. Instead open another command window and run shutdown.bat, and the first command window will go away. This tomcat is only running while you are logged into the computer desktop. By replicating server folders Foobar01, Foobar02, etc, you can have multiple instances of Tomcat on a single Windows OS. Each server instance can be using a different version of Java and/or a different version of Tomcat. All of these servers can be individually installed as background services in Windows so they are always running, all the time, as long as the VM is booted. On Linux I use a similar approach -- except I write a systemd unit file for each tomcat instance. (Hey, that's what all distros are going to, so I'm just going with the flow.) Someone else already explained that you can have as many different Eclipse instances as you want, running on the same Windows desktop, by pointing each Eclipse folders eclipse.ini to the appropriate unzipped Java folder. In fact, nothing here is "installed" on windows. When I'm done with a particular Java, or a particular tomcat, or a particular Eclipse, there is nothing to "uninstall". Just pick up the Java / Tomcat / Eclipse folder and chuck it in the trash. Hope that helps.
I really liked [this](https://www.lynda.com/Spring-Framework-tutorials/Learning-Spring-Spring-Boot/550572-2.html) course.
Wow, this awesome! Thanks!
Do you mean something like this? - Right click the tab you want to detach - Select `Float`
Is there a comparison between community and ultimate edition somewhere?
This is more a question for /r/learnjava but Spring really revamped their [online tutorials](https://spring.io/guides) a few years back. I don't see a lot that's not covered just by taking these tutorials and then actually reading the manuals for the various Spring products.
The website says you can add on another year at half the price if you havent already that way you dont pay full price when your subscription renews 
IntelliJ Ultimate has all of the features of Webstorm \*eventually\*, but they may be available in Webstorm first. As of the most recent release, however, this was not the case - both [IntelliJ](https://www.jetbrains.com/idea/whatsnew/#v2018-2-javascript--typescript) and [Webstorm](https://www.jetbrains.com/webstorm/whatsnew/) got the same features at the same time. It may only be relevant if you use their [Early Access Program](https://www.jetbrains.com/community/eap/), which is free to use even if you don't pay for a license.
An unfortunate article. It's a bit broad (should be titled "20 Categories of Libraries...") and includes categories that not every Java programmer should know (not everyone is going to need to read Excel files). Given the title, it would have been good to find 20 specific libraries that really do apply to all Java developers, though even that might be difficult and could be shortened to ten.
I just paid for my second year a few weeks back (and my subscription would have been up just a couple of days ago), so I'm really torn about jumping on this. Is it worth paying $125 a year in advance just to get a $25 discount?
Does that work for a given tab in the edit window such that you can have two edit windows? I know you can float separate areas like the output console from the edit window, but can you float an individual edit window tab?
Project Loom : [Fibers and Continuations for the Java Virtual Machine](http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html)
I have a $149 renewal on mine and the deal shows up as half the full price $249 for the renewal. Still cheaper by $25, but I’m concerned it will renew at the full price so I’m holding off.
DataGrip (part of the full package) is also excellent if you’re doing any database work.
Renewals are half the standard renewal price of $249, regardless of your current renewal rate (for personal licenses anyway).
Ah, ok. So if I buy one year using this sale and then cancel. I get to keep that version and any minor updates for ever?
1. Are you likely need that $125 over the next year for something more important? 2. Can you invest that $125 and get a return of more than $150 (&gt;20%) within the year? 3. is there a possibility you might not renew next year? If the answer to all 3 question is no, pay the $125 for the extra year now! 
There's one thing I haven't seen addressed though. If you have a lot of plugins and work across multiple projects then having separate IDEs helps with performance. There's no point in having Java plugins enabled while working on a pure ruby or js code. I'm not sure you can disable plugins in the IDE based on the project.
It's half price of the first year price. So for the all products sub it is about a $25 discount per year for renewal (renewal is $149 vs $249) and with discount comes out to $124 and change. Still worth it cause it's a discount and they don't seem to do it often.
Yer link is broken mate.
Are there slides anywhere?
I haven’t seen them posted anywhere yet. I’ll comment again if I find them.
Here's a couple of early studies of using it: https://aardvark179.github.io/blog/fibers.html/ https://medium.com/graalvm/bringing-fibers-to-truffleruby-1b5d2e258953
If I buy it for myself and don’t expense I can use it at work right? My company won’t pay for a license for me 
Is the 50% off recurrent? Or only for the first year?
Nvm just saw this... &gt; Unfortunately not. The 50% discount is off the standard 1st year price of a yearly subscription not including any discounts which users have already accumulated. The subscription will count towards your continuity discount for next year though.
Kotlin/Native requires CLion. You cannot duplicate that functionality via IntelliJ plugins currently.
A small note: the language is Java, not JAVA. It's not an acronym. 
I use both. PyCharm is not exactly IntelliJ with a different program name. PyCharm’s GUI is built for Python. IntelliJ is built for a lot more (including Python). I find developing Python in PyCharm to be more intuitive than in IntelliJ...and I’m in IntelliJ 80% of the time for work. If you work for a company that can afford both, I HIGHLY recommend getting both. 
[https://www.jetbrains.com/idea/features/editions\_comparison\_matrix.html](https://www.jetbrains.com/idea/features/editions_comparison_matrix.html)
Yeah, as long as your work computer isn't sharing the same license to different employees. You can install it on as many computers as you want, as long as *you* are the one using it.
Ok I’m definitely buying this then IntelliJ is the best 
https://www.chordbuddy.com/guitar-learning-system-for-everyone/how-to-play-the-guitar-for-beginners/
😔🤦‍♂️
So, I just had an issue with this, that I managed to sort out. If you're currently on a monthly subscription, the system will just say "You already have an active license" when you try to buy the discounted annual subscription. If you go to your licensing page, and switch to an annual plan, you can then take advantage of the deal with no problems. I only figured this out after shooting off a request to support. Figured I'd share what I found out if anyone else runs into this issue.
Your project doesn't / shouldn't be in your workspace.
Yep. Regarding the community version, since it’s free I assume you can continue to update it freely but I don’t use it so can’t say for sure.
If you're looking for more beginner stuff, codingbat.com has some good problems you can solve, especially on substring, indexing, searching, etc.
No. This one is basically to get it all over to Apache ownership (IP) and to allow it to build on the newer JDKs. Now that the IP portion is over they can start doing more stuff.
Not sure I understand what you ask, but you can have one window window per open file, and even multiple windows for the same file (possibly looking at different content sections)
Yes, you can. I just tried it, you can float/detach everything, even the project view on the left, it's pretty fantastic. :)
This sale is awesome -- but for anyone who doesn't know, if you're a student, [you can get IntelliJ Individual licenses for free here(http://www.jetbrains.com/student/)](http://www.jetbrains.com/student/)!
Why get both when you can get them all? Far cheaper over all.
Yeah we get the all products pack. My point was I see posts that claim IntelliJ Ultimate does everything. It might technically be true, but the individual GUIs like PyCharm are tailored to their respective languages which is a non-trivial benefit IMHO.
We talking basic strings or massive amounts of text?
&gt; Do you recommend WebStorm for JavaScript development? To answer your first question since noone did: Yeah, totally, WebStorm was great for JS.
I wouldn't trust this. I had ultimate and the node support still felt lacking even with all the plugins, most notably debugging never worked. I sprung for webstorm today and it's much better product imo Gotham ultimate+plugins. Everything works out of the box, including debugging. Only annoyed it took me so long to grab it.
✓
For me it's the exact opposite, I switch to idea and the keyboard shortcuts are a pain, and everything feels overorganized(if that's a thing...) And underwhelming. I switch to netbeans, and I become greeted by awful UI. I honestly just like eclipse because I can get some plugins and almost never have to switch my ide again. With plugins for python Ruby go scala c++ c r and when you pay you get SQL support too. 
You don't have to put anything in the workspace. The code can and should live whereever you want. Use Import, that isn't importing the files. The workspace is what enables you to run multiple projects, they can be dissimilar projects. You can have a C++ server running in the debugger at the same time as debugging a Spring web service that uses it. You can't open more than one project with IntelliJ at a time without needing new instances then having to window swap between them. Eclipse is far, far superior and truly open and free. IntelliJ CE is crippleware, only providing some features and charging for the rest in Ultimate. Even at that, Eclipse is superior to Ultimate. IntelliJ is good at making it "seem" like it's easier, which is easy when offering such a supremely limited product. 
Hey, ReadFoo, just a quick heads-up: **whereever** is actually spelled **wherever**. You can remember it by **one e in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I find the UI clumsy and quite ugly.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You're assuming the full toolbox ... renewals are 50% of whatever product you're talking about. IntelliJ ultimate, for example, would be 50% of $149.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Excellent! Not as good as their mayan end-of-the-world sale but I just saved heaps on my renewal for next year. Cheers OP!
Which is why go error handling sometimes infuriated me. Don’t get me wrong, I like go a lot, probably a bit more than Java, but the error handling mindset I still haven’t been able to completely wrap my head around. 
Please, address such questions to the appropriate subreddit: **/r/javahelp**. Also, be more elaborate when asking questions. What do you want to achieve? Have you looked into the documentation of the `String` class? It should give you a lot of information.
Meh, i'd be a lot more open to intelliJ if it was a one off payment rather than a subscription. 
I used to create a workspace for each project I worked on. That's a bit more like the IDEA model, I think. But if managing multiple workspaces is annoying, you can always put all your projects into one workspace, but separate them into groups. I don't use Eclipse much anymore these days, but I seem to remember way to group projects and toggling between them (I think they were called working sets, or something close to that). You can find how to manage these groups in the Project Explorer.
I think this is the video about Constants.
Yep! They changed the title.
Question about perpetual fallback - say I buy the all pack now and don't renew after the year is up. I assume most IDEs are at 2018.2 right now. Meaning, in a year I will have a permanent license for 2018.2.x products, is that correct?
It's based on purchase/renewal date. If you buy it now, your fallback version will be 2018.1 for AppCode, ReSharper Ultimate and Rider, 2018.2 for the others.
There's enough of this on the front page with all the ads JetBrains spams, do we really need to do even more marketing on their behalf? So many interesting talks on the sub atm from JVMLS and the engagement with this promo blows them all out of the water.
Both just trying to see what I can do with strings
This sounds interesting and I'll definitely look into it.
So how does it actually work? Since now it seemed to me that when I create a new project it puts it automatically in the current open workspace and that's it. Sure, I can later move it out where I want but I'd like to cut the extra step altogether if possible. Same thing for importing them back into the workspace again: the fact that I can't open projects directly in the directory where they're stored unless I make that into a workspace too sounds a bit too clunky for me. Or, again, is there something extremely fundamental that I'm not aware of?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I do Maven projects, and Netbeans built-in Maven support is great. I test out idea about once a year, but I always end up frustrated and switching back to Netbeans.
&gt; I switch to idea and the keyboard shortcuts are a pain, and everything feels overorganized(if that's a thing...) Interesting - I think they are a lot easier in IDEA. Pressing Ctrl-Shift-T to jump to a class pains my hand just thinking about it (it all is pressed with *one* hand, unless you want to lose productivity by moving both), while Ctrl-N for classes and Ctrl-Shift-N to "extend" it to files seems super reasonable. The best reason to use IDEA though is, that the search works instantly and everywhere and integrates well into the IDE (no extra window) - every windows results can be search, and it searches instantly in the whole project. 
Vs their free tooling? ... It's a hard ask for hobby programming, when my day job is strictly Visual Studio, because Rider's very fussy about solution files compared to Visual Studio.
 Well, it is both. You just don't get the next version for that one off payment.
If I buy all then only renew intellij will I pay as a new customer or not? 
That's the default location, and that's grand if you're working on a small project. However when you are creating your project (again, something that you would rearely do in the real world), you have the option to select the code location anywhere you want (by changing the default to any other location)
Thanks, I may need to re-install and give it another go.
A question mark
When creating a new Java project with the wizard. Untick 'Use default location'.
Google Eclipse Working sets. Done.
A Python 2/3 like split of the community.
... was it really this easy? I mean, I had already figured out that importing projects worked that way but it never crossed my mind that by changing THAT option I could also save them wherever I want.
I haven't used IDEA that much and yeah, coming from Eclipse some things obviously feel different but I can't really say if it's for good or worse because I've never worked with really big projects so far. I've spent even less time on NetBeans but it just didn't feel right for me.
Writing a plugin that does that is probably not too difficult, but I generally worry about the usefulness of coloring each keyword differently. [These themes](https://github.com/rainglow/jetbrains) generally already look very colorful and adding more colors is probably just adding confusion.
Check with management or security officers in your company, my place won't let me do this since it breaks the data loss prevention policy.
But I thought it has Java 9 and Java 10 features.
I tried the perspectives a while ago when I was still searching for a definitive solution for writing C code in an efficient way and the whole thing looked ok (although maybe a bit counterintuitive to setup) but in the end I went back to text editor + terminal so I can't say for sure.
I know testing logging isn't the sexist thing, but it's something I have needed to a few times in my career and when I first tried doing it, I thought it was way more complicated than it actually was. I should have part 2 focusing on testing logging when executing your test suite in parallel soon. I will also cover a lot of the parallel test execution features coming in JUnit 5.3! 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;Low mem I am having exactly the same problem. Did you figure anything out?
It's more about personal preference. The previews shown are in PHP, and don't come close to reflecting how each of the colour schemes look with Java syntax. I don't need to add more colour, I just want the Java colours to be a bit more consistent with the PHP ones on rainglow. I'll look into plugin writing, but sounds like it could potentially be more effort than it is worth. Thanks for the reply!
Simple answer? He's a troll. Please see the [Scala FUD FAQ for Newbies](https://kubuszok.com/2018/scala-fud-faq-for-newbies/). 
fun fact, it's practically impossible to make a desktop application with javafx that uses less ram than electron.
JDK 11 for sure
Oracle for their licensing fees.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It’s time! Migrating to Java 11 [https://medium.com/@leonardopanga/its-time-migrating-to-java-11-5eb3868354f9](https://medium.com/@leonardopanga/its-time-migrating-to-java-11-5eb3868354f9)
But which one? Oracle wants money, you could go with OpenJDK but have no support if you don't keep up with the newest release, so maybe another vendor like Azul?
It’s time! Migrating to Java 11: Why you should migrate to next Java now! [https://medium.com/@leonardopanga/its-time-migrating-to-java-11-5eb3868354f9](https://medium.com/@leonardopanga/its-time-migrating-to-java-11-5eb3868354f9)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Another option is [AdoptOpenJDK](https://adoptopenjdk.net/)
Let me ask a stupid question. How common is it to need the support? Or is it a requirement? Just asking because I can’t remember the last time we’ve called a vendor for support. Or is it an issue of the 6 month cycle is too short? Each JDK version has receive updates, for what, 2-3 years? So it’s not like you could stick with a version before. But 3 years vs 6 months is a big deal. But this leads me to my next question. JDK 9 is the big upgrade, right? After that, there shouldn’t be too much structural changes?
AdoptOpenJDK is just a prebuild OpenJDK
podcasts: https://www.hanselminutes.com https://stackoverflow.blog/podcasts/
I think it was a severe mistake to introduce modules and changing the release model at the same time. I'm specially sad with it because the module system is very nice and well thought, with clear upgrade path allowing even incremental steps. But doing that while also having to adapt to frequent "forced" updates is too risky in most cases. This scares new projects too, as it feels risky to build an app on top of a soon to be obsolete tech. The worst part is the Oracle positioning. They have the worst PR ever. Most of these problems could have been mitigated if their communications didn't sound like they were trying to rip you off every time. Like the new releases are all minor, so if they named then like minor releases (9.0, 9.1, 9.2 and so on) they would not imply they are *mafiosos* holding your application hostage in exchange of support money. People already don't expect long term support for minor releases, so they could compromise on giving critical security-only updates for 3 to 6 months and gain good will from community for almost no cost. These short sight from its main stakeholder makes me to get doubts if my skills will still be relevant in the far future and if there will be interesting uses for them outside legacy app support.
When we talk about 'support' for a particular JDK we're not really discussing the availability of a way of reporting a problem and getting a resolution (although Oracle and others like Azul, who I work for, do offer this). The main aspect of support in this type of discussion is the availability of updates, which include both bug fixes (for stability) and security patches (to prevent exploits). Certain industry verticals require updates to be applied in order to conform to regulations (banking, finance, insurance, etc.)
I neglected to mention that the multiple Tomcat instances, each have a different server.xml configured to listen on a different port.
I'm thinking of switching back to notepad or MS DOS edit.
Where would you put MS DOS edit on your list?
For a second there I thought you would make MS-Paint be choice 6 for writing Java, and push Eclipse down to 7. I've used Eclipse for more than a dozen years and find it more than adequate. I use it on both Windows and Linux.
Didn't the UN Human Rights commission do away with that one, or are they still looking into it?
I just looked into it, and intellij ultimate also doesn't support c#. There's no plugin for it and it doesn't sound like there ever will be. 
&gt; because default 'variables view' panel uses method toString to display information This is the same for Eclipse as well. &gt;toString method changes state of the object And I've thought I've seen some awful code. This is a next level design flaw. I wonder how this passed code review.
Great if this tool becomes available! Here is a talk from the Java Language Summit about the internal Google implementation of it: https://www.youtube.com/watch?v=UykhZ36W04I
speeches: • •
I thought the Human Rights Council was led by Saudi Arabia, and that RAD is the default IDE for the whole country. 😐😐😐
&gt; The developer would configure and _build_ the JDK with a config flag --use-tsan. Then, when invoking java, the developer uses the -XX:+TSan to enable TSan tracking. If a race is found, TSan/Java would generate the following report at program exit: If it is not possible or practical to have the JVM distributed with the sanitizer, I hope there will be pre-built distributions with the tool so that one does not need to build a JDK to use it. 
The plurale of mafioso is mafiosi
Ah yes I forgot Rider was a thing.
I mean... I could see a case where you'd want to only initialize a few things once, so you could cache them, avoid paying that cost multiple times - I see this done with hashcodes (especially over large graphs of immutable objects) regularly. But the way the post makes it sound, this isn't just a cached field, but is actually used as if it was part of the object's state? Nooooope.
For the first time since the inception of Java, I have the feeling, that it could be a dead end: &gt; Each OpenJDK binary will only have updates (security patches and bug fixes) for six months, until the release of the next JDK. The Oracle JDK will have a long-term support (LTS) release every three years. JDK 8 is currently an LTS; the next will be JDK 11. Many people had assumed that they would move from JDK 8 to JDK 11 because it’s an LTS. However, the Oracle JDK 11 binary, the one with LTS, is not going to be free for use in production. If Google moves to Fuchsia an with it to Flutter and Dart, a big Java use case will disappear. On the server side other languages like Go gain popularity. At the moment the Java ecosystem is hard to beat, but the software ecosystem is always moving. Oracle's latest moves in the release cycle and licensing model have hurt Java dramatically. 
With backported security fixes, IIRC.
But OpenJDK provides that. What it doesn't provide is bug fixes and security without additional features. I may be wrong, but I've never seen any compliance rules that dictate you need to say with an older version. The closest I've seen is that new versions need to be approved.
JDK 9
Jetbrains.cf
| fun "fact", it's practically impossible to make a desktop application with javafx that uses less ram than electron. {Reference needed}
*“Microsoft want to know your location”*
The complication is that upgrading can be disruptive, so many companies enjoy having security-only or bugfix-only updates that aren't going to require them to change anything else about their application. That is the main reason anyone stays on old versions: change is hard.
Java isn't going anywhere anytime soon. It's way too prevalent on backend services.
Who the fuck puts side effects in the toString() method? That's just asking for trouble. Oracle should put something like /**this method may be called at any time, do not put side effects here, or the jvm might delete all files on you computer*/ in the contract of the toString() method of object
That's their stated goal but who will actually do the backporting? It's a great community effort but it's currently relying on volunteers to do this. Will they have the necessary skills to backport potentially complex security fixes to older versions of the JDK with significant changes (like JDK 8 being pre-modularity)?
It's completely valid to cache the hashcode, especially for immutable objects. It can speed up the performance of your HashMaps. However, toString() is typically only needed for debugging. I don't see a reason why you'd need to optimize this.
The compliance rules that I'm referring to are ones that mandate that any version of software that you use must be kept up to date with relevant bug and security fixes, not that you must use a particular version. AdoptOpenJDK, whilst a great effort to provide free supported JDK builds, does not yet have a clear plan for how they will backport updates to older versions (like JDK 8) once Oracle stop updating the relevant repo in OpenJDK.
That is probably true, since all the systems written in Java can not be replaced over night. But the question is whether the Java usage for new systems will decline - and I think so! This move from Oracle feels like a turning point for Java.
I'm hoping for git+gerrit for code reviews.
Apologies if this is a dumb question, but even after watching this talk and the talk by Dan Heidinga and Paul Sandoz, I still don't see what is so powerful about ConstantDynamic. We have this API which allows me to write lots of code which the compiler can turn into an `ldc`. Cool! But.. Why? I don't understand why I, as someone who is *not* a compiler writer, would want to do this. I am certain that this is, in fact, a very powerful tool as all of these people are quite smart, but I feel that there is some implicit knowledge that I am lacking to understand its power.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Using the OS's native secret storage (such as macOS Keychain) might help. Just let the OS/User decide whether entering a password is necessary or not, and let the OS take care of the storage. This is my approach for non headless Windows and macOS machines. For other stuff we use environment variables, set by the host/orchestrator/brain of the cluster.
You are right, I should not use the term *fact* there, I'll correct it. That said, try it yourself. The most basic javafx application as shown in the documentation of Stage with a capped max heap usage to the minimum will still make the jvm process be around 64MB of ram. The moment you start doing anything non trivial, it'll go up to 200MB easily. The problem is not the heap, it's the metaspace plus related JVM bookkeeping memory. That example code in Stage's documentation already loads around 3300 classes, throw some libraries at it and start coding, specially using lambdas which look cheap in bytecode but still expand to a full class instance in runtime. You'll quickly go up to 10k classes and then, you have a base memory requirement of about 170+MB not including your actual heap data. My toy chat client which uses about 60% of javafx (it doens't use charts for intsance, nor animations or bindings or advanced things) loads 6357 classes **just** from javafx, that's without adding on top my code. So good luck keeping your ram usage down.
That's quantum Java shit right there
(The Video)\[[https://www.youtube.com/watch?v=\_26KZAegYRM](https://www.youtube.com/watch?v=_26KZAegYRM)\]
Each upgrade can introduce certain incompatibilities (like the Unsafe issues) or change performance characteristics (for instance CMS being deprecated). Various regulations require us to provide security patches within 30 days of them being discovered. Due to lack of overlap between support cycles we'd either have to do prior testing on pre-release versions (plus then certification on the actual release version) or throw everything business-related away every 6 months to make it in time. If there was an overlap of even just a month or two, this would be a smoother process. I agree that with projects living in a different regulatory space this should not be a huge issue.
&gt; "Best" is a relative concept but the javax.crypto package makes it possible to encrypt/decrypt using AES: &gt; Key secretKey = new SecretKeySpec(key.getBytes(), "AES"); &gt; Cipher cipher = Cipher.getInstance("AES"); &gt; cipher.init(cipherMode, secretKey); Chosing the right cipher mode for AES is important, especially when dealing with files. Using the default ECB mode is not recommended (for this case). https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation I suggest using a mode which suits best - for example at least CBC, or if available GCM. As AES is a block cipher and OP tries to encrypt files, he will surely need Padding to (java has enabled padding by default for the "AES" instance) depending on the mode. Also you will need to provide an IV for modes such as CBC,..., which does not need to be kept private, but should be random and should never be reused with the same key. &amp;nbsp; So yea, either use javax.crypto with all the mentioned and unmentioned crypto pitfalls in mind, or go for a more abstract library, because simply using the Java default AES Cipher instance may introduce vulnerabilities.
**Block cipher mode of operation** In cryptography, a block cipher mode of operation is an algorithm that uses a block cipher to provide an information service such as confidentiality or authenticity. A block cipher by itself is only suitable for the secure cryptographic transformation (encryption or decryption) of one fixed-length group of bits called a block. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.Most modes require a unique binary sequence, often called an initialization vector (IV), for each encryption operation. The IV has to be non-repeating and, for some modes, random as well. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
my understanding is that L-World Value types are basically value types prototype version 2. they have all these gotchas cause they are not anywhere close to the final product, and are just the second step towards it
Yup seen this one before. Came across an enum that people kept bolting shit onto until one day some genius decided this enum needed some runtime statefulness (which was mutated in toString among other places). I got lucky in debugging though because I personally often override toString to add extra object detail in log statements and when IntelliJ started showing my custom toString values in the debug console I thought “oh that’s cute”. So when I came across this enum Schroedinger bug I had a head start down the right path. 
I'm pretty sure `toString()` should neither cause side-effects nor alter the state of the object is in Effective Java. Is this open source and still present in the latest version?
I've seen libraries where `toString()` is the way you serialize the object. *rage*
Yeah, you're right, I need to calm down. :D
1st of all, loaded classes usage might be way better with Java 9+ and a modular app. A similar .net app would probably have similar characteristics. But that still doesn't make Electron a lightweight framework. I wonder how much your electron apps could do with a cap of 200MB Good luck with that too.
https://imgur.com/a/zK9h74g
This is also important when working with lazy objects backed by an ORM. This happens in both Cayenne and Hibernate depending on how stuff like toString() and hashCode() are implemented.
&gt; 1st of all, loaded classes usage might be way better with Java 9+ and a modular app. I tested with java 9 and 10 as well. &gt; A similar .net app would probably have similar characteristics. No clue about .net, I'd assume that given that they AOT a big deal, they probably don't require as much runtime info. &gt; But that still doesn't make Electron a lightweight framework. Absolutely, in fact the reason I was toying with this was to see if I could make something like Discord using around 100MB of ram for the total process (the desktop app for discord uses about 280 for me, even with artificially big accounts). For reference, a similar toy application in c++ and QT for the same data was 40MB of ram, I would have wished to at least be in the 100MB ballpark. &gt; I wonder how much your electron apps could do with a cap of 200MB Good luck with that too. I'm not a js person myself so I can't test. I can haphazardly say that given that js has no classes and no multithreading, they avoid a lot of per instance cost (no pointer to a class, no header with lock information). 
That was not a sideeffect on the toString() method - it's a sideeffect from *loading the class*. It probably has a static initializer that touches or registers the appropriate classes.
&gt; I wonder how this passed code review. this one is easy. just remember, *there is no code review*
Some. Yes. https://netbeans.apache.org/download/nb90/index.html
How do you subscribe to new JEPs ?
That has been my biggest fear with AdoptopenJDK. I would be more than happy to use either their Hotspot build or J9 (I use J9) for development, but the JVM seems to be a very complicated piece of software, like OS Kernel levels of complicated. I have been trying to get management to consider something like Zulu or Zing, but they seem content to want to gets paid for our software, but not pay others for theirs.
I discovered that IntelliJ uses toString in the debugger by actually debugging a tricky toString method and noticing that I didn't actually need to call it to debug it.
Inception dot gif
It is a hard ask in that case.
"Code review?, you mean that check box in Jira? Ya i checked that off."
Umm.. I think you're conflating .NET Core with VS Code. First, and if you're interested, I would get VS Code working. Personally, I think it's great but I haven't tried it on Linux. YMMV obviously. Secondly, once you have an editor that can reasonably handle C# 7, try .NET Core. As for what it's good for, well the answer is "more or less the same things as Java". And that's not a bad thing. Even if you choose to not use C# professionally, it can't hurt to see how things are being done elsewhere, especially since .NET is such a strong alternative to Java. That said, if that's not fun for you, then... I don't know... Don't I guess. But it's your loss. 
Yeah switched horses in mid-stream. I have (had at one time) .Net Core installed in my Ubuntu VM and also have VS Code (the editor). .Net Core was harrowing back then, might be better now. VS Code, except for needing to disable 3D in VirtualBox, runs OK, I don't find much use for it but it runs. I've used C# 1.0 and some 2.0 professionally for several years back when it came out. Built .Net Forms apps, .Net utilities, ASP.NET Web Services and ASP.NET Sites. &gt; As for what it's good for, well the answer is "more or less the same things as Java". There's really no comparison until I can make .Net Forms UI's that are supported on Windows and Linux. 
This right here. Static initializers are quite often the culprit to behavior like this. Plus, they make unit / integration testing a living hell when they load dependencies that are not available during testing. 
That's a cute story. I wonder why they put it there in the first place? for optimization or something else?
Few weeks ago, I tried to see how the logging framework does unit test and I found this class in log4j2. https://github.com/apache/logging-log4j2/blob/master/log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
I view it as one of those enabler features, like `invokedynamic` before it. It might not be immediately useful to most Java (or Scala, or K...) developers, but will enable some optimizations under the hood and possibly entire language features down the line. 
Slides here: [http://cr.openjdk.java.net/\~redestad/slides/startup\_challenges\_jvmls2018.pdf](http://cr.openjdk.java.net/~redestad/slides/startup_challenges_jvmls2018.pdf)
First of all, hashCode, toString, and equals won't throw or require implementation, they'll have reasonable defaults. And if a type can be statically shown to be a value type wait, notify, etc. will be a compile time error not throw an exception. And it's not that simple. What about when you invoke a method with null, and the type of the parameter isn't loaded yet? We need extra speculative loading to see whether the null is allowed. Turns out there are a few situations like this, and cascade of speculative loads of types that might not even be available was deemed problematic. The bigger problem is with keeping generics functioning. If value types can't be assigned to object, our assumptions that type parameters and wildcards all extend object mean that we can't just plug value types into existing generics, we have to introduce a new magic top type above object and probably a new keyword to indicate that a generic type parameter accepts it. Doing this while maintaining backwards compatibility is a nightmare. You should look into the pre-l-world model, I think it was referred to as MVT. They ran into far more problems with this than I think you appreciate, it was a complicated mess. The new model is way simpler, and I think a few throwing synchronization calls are a small price to pay.
Wasnt this also called a Heisenbug? Atleast thats how I recall it. The debugger causes state to change. It can be “toString” related (which is imo a very bad thing) or the simple fact timings change when stepping through code (ie in multi threaded environments).
Congratulations! Before diving in Java, I was an IT guy too. Here're my humble advices to your question: **What to expect** 1. tons of code. 2. unfamiliar frameworks and tools. 3. people who are easy / hard to deal with. **General tips** 1. try hard to avoid questions that googling can answer(very tempting to do)，ask questions as much as you can about business requirements and design decisions behind the code. 2. writing to-do-list to keep you stay focus and take notes. 3. be friendly! **Coding tips** 1. coding with comments, it's very important for maintainability. 2. step after step, don't try to refactor until you completely understand the tradeoffs of the code. 3. thinking more coding less, @amackenz2048 points out, it's very common that the users don't even know what they want. 4. avoiding over-engineering. 5. have fun!.
It's probably not that unusual with lazy initialisation, as the "side-effect" is transparent to the user. It can only be seen by reflecting over class internals, e.g. a debugger inspecting private fields...
You can choose NetBeans.. https://netbeans.org/
Write hobby projects. Something cool, a game, a simulator or some miscellaneous program. Doesn't even have to be useful, as long as you are interested in developing it for a while. Use modern technology and methods, like version control, latest Java and library versions, IDEs and maven/gradle to make your application build with one command on every OS and be shipping ready. Publish the code to public repository like Github and ask for feedback. All of it requires you to use considerable effort, which essentially is the learning process.
Quick question because I'm still not clear on this and you seem to be working for Azul. Is Azul backporting security fixes in their zulu openjdk lts binaries? And can I just download those or do I need a contract like with Oracle? So can I get an up to date zulu opejdk 11 in say 2 years time from you?
Is the automation being done actually any good? Lots of automation code may be written and designed by testers and isn't the best. I'd be looking at the over all automation framework and how to contribute and improve that. For example, are the tests stable without random failures, are they quick, is it easy to find where the problem is when they fail, are they easy to understand so everyone can contribute, do they run after every commit, are there barriers between development and testing that need breaking down etc etc.
That would be a good way but after work sometimes I am just not in the mood to do more java, since i work 8-10 hours a day, which is average, but still. I want to write bot for a game but it has a complete framework around it, so it's not that hard imo. Thanks for your input!
I wanted to familiarize myself with TDD, but i don't know how to apply it when my program's half purpose is to send and get info from the Microsoft Graph API? I started to watch the clean code video series, since the company got it purchased and man I love Uncle Bob :D (Robert C. Martin). I started to use maven, because the basic api authenticator part was developed with maven. I'm only scraching the surface though right now, but hey I've been only working with java at my current workplace for 2 weeks only. Anyways, thank you too for your input!
Well I've been using Java in the university too, but the assignments wasn't hard nor long. I could complete them in one day, since they only were like a database and make a gui which can interact with it (movie, car repair database etc.). I'll take a look at the book then if it's better than the videos and leave them if I don't have anything else to do. I will check out gradle too and try familiarize with Mockito. Should I try to write tests now that I have everything working? I might have to modify a lot of code since it wasn't developed with TDD :C
Okay, that makes sense. I dislike static initializers for behavior like this.
&gt;Understood, but I want to leverage partition while accessing data via hibernate (HQL, API &amp; SQL). So, does hibernate support partitions in this case? Hibernate supports Oracle partitions use but can not create them. So I recommend you to generate all tables structure by yourself (via manual DDL scripts execution) and switch hbm2sql mode to "validate" or "none". So basic steps are: 1. Create all tables required by hibernate: some with Oracle Table Partitions, some with default settings etc. 2. Turn off Hibernate's automatic schema generation (hibernate.hbm2ddl.auto=none) 3. Use all of Hibernate's api for reading and updating data (HQL, SQL, API).
Effective Java is without a doubt the one book that every Java developer should read if they want to go from intermediate to advanced.
&gt;Should I try to write tests now that I have everything working? I might have to modify a lot of code since it wasn't developed with TDD :C Absolutely, units test are the best starting point when you ever need to fix a bug or add a feature. New developers who need to work on the code in the future will thank you for it!
What's wrong with that? Sounds pretty reasonable to me.
Well then off I go to write some much needed test.
This story is a good intro to functional programming and to importance of immutability in preventing heisenbugs. :)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
thanks for the clarification! :)
oh god pls no
As I understand it, JEPs start out in state `Draft` the Java Bug System. This is Jira, so you can do a search there and export it as a RSS-feed. This feed is for draft JEPs, so you'll be up to date on new developments: https://bugs.openjdk.java.net/sr/jira.issueviews:searchrequest-rss/temp/SearchRequest.xml?jqlQuery=issuetype+%3D+JEP+AND+status+%3D+Draft&amp;tempMax=1000 Details on the process [here](http://openjdk.java.net/jeps/1) and [here](http://cr.openjdk.java.net/~mr/jep/jep-2.0-02.html).
As you said, given that a lot of the code was not written with testing in mind, you may find it difficult to write tests without also refactoring the production code. Fortunately, the principles that make code easily testable are generally speaking also the principles that make code easy to read and maintain. So, by refactoring your code to be more testable, you are simultaneously improving the general quality level of the code. The book recommendations above are really good for giving you an understanding of what testable code means, so I just want to add my support to that suggestion as well.
Thank you for your comment too! I hope that I'll be able to refactor the code to a state where I can test it.
I need all these features injected straight into my veins! a ton of my work with java will be greatly enhanced with vector api, value types, project panama C interfaces, and more. Graal is helpful too. I am so excited for the future of the JVM, and I want it to be the future now so I can start using these features in my projects.
 - Write your own projects; something more complex than your job. Or contribute to some open source project. - Answer questions on stackoverflow. If you don't know the answer do some research and some testing. 
I'd second learning design patterns. Once you start understanding them, they'll change how you approach new problems. Head first design patterns is a great read (if a little silly), and GoF design patterns is a classic. 
See if your company will spring for a [Safari Books](http://safaribooksonline.com/) subscription for you. I highly recommend it - it provides you access to all sorts of technical (and business) e-books that will help you out in any computer technology you care to read up on. The internet is great and all but sometimes there's no substitute for a complete and structured book written by a knowledgeable author. Every book that's been suggested in this thread so far is available through Safari, for starters.
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers Generally the hsts should be set to a high timeout, and cache-control should be file type specific. There isn't a one-size-fits-all answer. You should read up on what the headers do. 
What projects and libraries are you using for your job? Are you really intrigued by any of them? Are they open source? I'd consider reading and trying to contribute to a high quality open source project.
&gt;First of all, hashCode, toString, and equals won't throw or require implementation, they'll have reasonable defaults. But what counts as a "reasonable default"? The code for hashCode and equals would have to be generated to actually work, which might not be what you want. &gt; And it's not that simple. What about when you invoke a method with a null parameter, and the type of the parameter isn't loaded yet? And what if different types in the hierarchy, which override this method, were compiled at different times and are unaware of the types migration to a value type? We need extra speculative loading to see whether the null is allowed. Turns out there are a few situations like this, and cascade of speculative loads of types that might not even be available is problematic. This is why being required to label all fields, parameters, and variables that are values seems like the only way it could work. Using heuristics to tell if something is a value type seems like it defeats the purpose of having them. If the reference isn't labeled as a 'value reference' (not really a reference), it isn't a value type, and it can be null.
I mean I can see toString being a viable fallback to serialize, but not the main path.
I feel this is more a Matrix.gif
It looks like in your [submission](https://www.reddit.com/r/java/comments/93qu1h/migrating_struts_10_to_struts_25/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#hsts
No, because it isn't a logical fallacy. It may be a mistake if the sampling isn't truely representative, but generalizations are not necessarily unsound. It isn't even necessarily a logical error in assuming that a specific member of a group necessarily has the a trait commonly seen in the group, so long as you you are open to evidence to the contrary. For example, it is ok to initially assume Joe Smith has two arms and legs, but not after you learn his nickname is Long John Silver.
For which part do you think it would be difficult to settle on a reasonable default behaviour? And bytecode generation probably isn't the only way this can be handled (and I don't think this is what they're prototyping atm). Take a look at John Rose's "Meta" talk where he goes into linkage tricks for Panama with BSMs etc. So in your model labelling the type is not enough, you also have to label all *uses* of the type? That is an insane syntactic overhead, nobody would want to use that. It also doesn't answer the problem of value types as type arguments, in fact it seems to make it more difficult. Most of the time uses can be *automatically* labelled with the ACC_VALUE bit. We can't assign null when the compiler knows we're dealing with a value type, which is most of the time, and the rest of the time we get an exception or something. Afaiu any "heuristics" are only needed in difficult spots where we're e.g. interacting with old bytecode that doesn't know that a class has been migrated to a value type. I don't see how this "defeats the purpose" of value types. We still have all the same performance improvements almost all of the time.
If you want backwards compatibility, you can’t assume everything is a value. If LocalDateTime becomes a value type, but someone is using wait/notify on it, that code is now completely broken.
Another vote for the book, Effective Java, along with building your own system.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
" **codes like a class** " does not mean "has no syntax additions whatsoever" &gt; And for when the user explicitly *does* want their VT instance to have identity, if/when there are facilities to explicitly box a value type that will obviously look different. Which is why I'm saying there should be explicit declaration of a value instance of a class. It's either that or explicit declaration of when something should be boxed, which would probably break all existing source and bytecode everywhere.
Don’t forget about Concurrency in Practice ✌️ 
&gt; " codes like a class " does not mean "has no syntax additions whatsoever" No, it just means existing syntax should have the same semantics *where possible*, with the modification that it should now "work like an int". I expanded on what this means in context in the paragraphs which followed. As I said, there will never be a way to explicitly declare something be stack allocated, and there is no need for it. &gt; Which is why I'm saying there should be explicit declaration of a value instance of a class. That doesn't follow at all. &gt; It's either that or explicit declaration of when something should be boxed, Yep. &gt; which would probably break all existing source and bytecode everywhere. No it wouldn't, that's an outrageous claim. Migrating reference types to value types will break some existing code, in some edge cases, that is true. &gt; The current concept of making value types "basically objects" really reduces their usefulness and safety (wait/notify throwing exceptions). Most of the time they don't act like basically objects. When a type is statically determined to be a value type it will not look like an object to a user. They will not be able to treat it like one, they'll get compiler errors. &gt; don't have wait/notify Not really. In most situations it looks identical to a user. If you have a statically known value type and try to call those methods it will be a compile-time error. The user model is as if they're simply not available. &gt; don't have inheritance Like Enums? Like final classes which extend Object? The existing class model can model this just fine. In many cases it already does. &gt; are immutable Classes can already be immutable if you want. Adding a statically checkable restriction for VTs that they *must* be doesn't make Object an inappropriate model, it simply makes it a specific application of that model. Non-issue. &gt; don't have == In locations where we statically know a type is a value type, this will be a compile error. In other locations it will return false. &gt; might not need hashCode(), equals(), or toString() What do you mean by this? All those methods will be present and useful, just like with reference types. Do you mean don't need *explicit implementation*? This is also true of reference types extending object. The user model is exactly identical.
hello1aug
Hahahahaha have all my upvotes 
By evolving I hope you meant “retiring”
I can see my name on the slide at 10:24 :-).
&gt;When a type is statically determined to be a value type it will not look like an object to a user. They will not be able to treat it like one, they'll get compilation errors. And how do you propose this happens without declaring each field, parameter, and variable as a value, without also breaking existing code that treats Objects as Objects?
Great thanks!
I guess you didn't watch the talk even a little bit. Your loss.
Gary? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This kind of breakage of backwards compatibility is still not viable. You can use wait/notify on any Object, and there aren't even 'best practices' for where you should and shouldn't use it. As far as equals/hashCode goes, I think having a default implementation of hashCode on object was already a mistake (it requires info stored in the header of the object and some kind of lookup table), there's no reason to require them on value types, which are supposed to be very minimal and shed a lot of the cruft that objects have.
Yes, after some years I still make that mistake even when adding the dependency to my projects... JMockit with the annotations is a much more elegant solution.
It's not really breakage of backwards compatibility if it was documented that you shouldn't use it on a given class. And again, I understand that you think it's unacceptable in those cases that it *does* break backwards compatibility, but I disagree, I think it's worth it. There's no point in repeating ourselves. And okay fine, but if it is a mistake then it's a mistake that was made a long time ago, people live with it just fine. Avoiding having them on VTs certainly isn't valuable enough to be worth constraining the design over. So long as there is a path to including reasonable defaults with little to no overhead, which there is, then it's little more than an ideological nit-pick.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This doesn't modify the Java language in any way. What it does is to extend the syntax for type names inside the JVM (think `Ljava/lang/String`). But what it does do is lay the foundations for future developments to include reified generics and non-nullable variables. They include a few more examples, but they're two big possible additions. 
I like very much this talk. Most important thing: readibility. 
Yup, and even if Java never gains some sort of (necessarily optional) general reification mechanism, this is still needed to facilitate specialisation over value types &amp; primitives (e.g. `List&lt;int&gt;`). Also, I get the impression that some of the people working on this stuff are hopeful to expose specialisation over *other* kinds of type parameter to the language level, for example: class FixedSizeList&lt;T, int&gt; { /* ... */ } new FixedSizeList&lt;String, 10&gt;(); // a list with a size of 10 with some language level mechanism to specialise the implementation of `FixedSizeList` for certain specific sizes as an optimisation, as will be familiar to e.g. C++ programmers. In any case, regardless of what the Java language ends up building on top of this, having this machinery in the JVM means that other JVM languages have a clearer path to implementing more expressive type systems in a performant way.
Yeah, I was thinking that Kotlin could use the nullable/non-nullable references during runtime and not just compile time for better performance. I don't know if they do null checking now by adding bytecode to assignments/parameters, but it would be quicker if the JVM knew it couldn't assign a nullable reference to a non-nullable reference.
Can someone TL;DW who is in charge?
TL;DW Mark Reinhold is in charge.
Helped by John Rose (JVM) and Brian Goetz (Language and libraries) and to a lesser degree other people. There is also an OpenJDK governing board if you want to appeal against any of Mark's decisions. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
yeah, i'm sorry to hear that, but at least we get 3 years lts openjdk. we'll have to see how it works out, but I think it'll be fine. This'll also be a good exercise in making the openjdk even less dependent on oracle
it's me
When did IBM open source web sphere? I think WS 8? was the first time they shipped the Liberty variant and I don’t think it was open source then?
Netbeans is great. Just run the executable and it works right away. You can even include some application servers that come configured. Maven support is top notch as well.
I’ve been thinking about learning Lanterna text-based GUI framework for fun.
In kotlin it means that only classes in this file can implement this interface / extend this class. I guess in java it will mean only classes in this package.
I use the Microsoft Graph api, and maven, because it came with an example on how to authenticate with the app that can access it. Do you think that with such little knowledge I could contribute to that giant project?
Already came across with java puzzlers, it's in the queue, gonna take a look at the other book too. Thanks!
Gonna check them out, thanks!
Since we have an internal system like this in place with thousands of videos and training materials I doubt that they would shell out money for this sadly. I may have to buy it myself. Thank tho!
There already a spring guide https://spring.io/guides/gs/uploading-files/
I'm Spartacus.
Go back to JS land where you belong.
&gt; the simple fact timings change when stepping through code (ie in multi threaded environments) Or the debugger forcing JIT not to happen and preventing JIT from making optimizations that will break improperly written concurrent code.
Most of those fixes -- like most (~90%) of OpenJDK work -- would still come from Oracle. The other community members will backport them.
What a wonderful craft we have! ;-)
The thing is, the hope is that many classes in Java SE can be converted to value types, not just a few that explicitly say they shouldn't be used a certain way. Any break in backwards compatibility is not worth it because that literally goes against the design philosophy of Java.
Does Apache Netbeans support C++ development? 
Remember to export your preferences so that you can import into a new workspace. After that you never have the think about it again. New workspace == new context
&gt; for better performance Why does the Kotlin compiler need to insert null checks at runtime if the compiler proved that the value is never null in the code? Or can it be bypassed with something like bytecode injection?
Because it has to interact with Java code. 
You can always get involved with LWJGL/OpenGL. Or try C#. If you're fluent in Java you could pick up C# in an afternoon, and within a week youd be able to put it on your resume. I don't really even use Java anymore, .NET is very powerful. Then again I write mainly desktop applications. 
In the worst case scenario you'll learn how they work a bit better. For instance I never really understood Gradle's build model until I've contributed to some of the plugins we needed. The potential problems you might find is people not really wanting to merge external contributions, or not having time for reviewing new features. Outright hostility is not that common, actually it's usually users who are hostile to developers for not including features very specific for these users' uses.
I admire Brian Goetz very much. In this talk, I took away "concision is not a goal unto itself", and it remembers me of a chat I had with a friend of mine, who was trying to come up with a solution for a problem in Haskell, then giving up, and after seeing the proposed 2 line solution stared at it for a couple of minutes without getting it :)
And here i am learning loop and conditon (if and else) lol
Came here to see if it was posted as it's one of the best videos I've seen about upcoming changes to the language. Very clear with great code examples. I'm super excited about a lot of the things he mentioned - String escaping and value type are two of my favorites as well as the concurrency updates. 
we all gotta start somewhere. keep at it!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
IBM never open sourced WebSphere. WebSphere has been deprecated a while ago and is now called classic. A new generation server called Liberty had been in development for quite some time, parallel to WebSphere 8. This was first just a kernel and a few APIs, later it became WebProfile compatible and sometime after that full EE compatible. Somewhere after that WebSphere got deprecated. At some point the new Liberty server was made free to use for small production environments, and in the beginning of this year or late last year (too lazy to look it up now), Liberty was open sourced as Open Liberty, which is on GitHub. 
this is a test reply
Thanks for that. I’m going to check out Lanterna. I’ve been interested in doing something like this before. May be a good fit for a project I’m working on. 
From what I’ve heard, we will likely be able to declare multiple records in one file, so they may restrict `sealed` to the file. Package would make sense too, though.
I'm a giant jvm fanboy, and I'm hip with all the new jvm languages (that's still how the kids talk, isn't it?), but I love how slowly and methodically Java evolves. There's features I'd like to see added tomorrow, but I'm in no rush. Keep up the good work Mark, John, Brain and co.
Have you heard about the new release cadence? It will bring some features to us quicker that before, not having to wait for the larger features to be completed. An example of this is local variable type inference, which was added in 10.
&gt;Hibernate supports Oracle partitions use but can not create them Gotcha. In my use case DB is created and maintained separately. Hibernate is used only for CURD only. I assume if I wrote native SQLs, hibernate will run and let me access data from partitions. But I don't know how to access data from a specific partition using HQL or Hibernate APIs.
My jury is still out on the new release cadence. :p I can see a lot of benefit to incremental language updates more frequently, but the big changes (Valhalla, fibers, etc) hopefully are still well thought out, and breaking API changes aren't made between regular releases and lts releases. It seems, imo, like an easier way for the language and vm teams to shoot themselves in the foot, and give us another Date/Calendar API that we're stuck with. But, I'm a pessimist, so take that for what it's worth.
Features won’t go in until they are absolutely ready. Some have thought that feature development is now only allowed to take six months, which isn’t the case. The architects have compared it to a train station.
Look it up in other languages for examples. Scala has it and it's easy to understand. It generally means a class that can only be extended within the compilation unit that it is declared in.
Thank you for the insightful comment.
Yeah, well, dzone is not exactly known as a high-quality source of Java source code… :)
Did you try [odoo](http://learnopenerp.blogspot.com/2018/01/python-class.html)
Very nice post. Please fix the grammar: all of the enum members **require to** implement the method. Basically, enum members are instances of the enum and to make it instantiable, we need to implement all of abstract methods as **announemous** class at each of the enum member. all of the enum members **are required to** implement the method. Basically, enum members are instances of the enum and to make it instantiable, we need to implement all of abstract methods as **anonymous** class at each of the enum member. I know I'm nitpicking, but could you also fix the indentation here (and possibly elsewhere)? It will 
Any time line when this will be done? Looks extremely useful. 
My loggers can output Strings as well as writing to file. String contents is easy to test. But even if the logger writes to file: just read the file and check for expected and unexpected content. 
That's what I do, too. Each project has its own workspace. That way I can open multiple copies of Eclipse, each accessing a different project. While one project is running unit tests, I can work on another in a separate memory and CPU space. I have workspace shortcuts on my desktop to start Eclipse with a specific workspace. It uses Eclipse's -data command-line parameter.
It looks like in your [submission](https://www.reddit.com/r/java/comments/948sqk/mirror_the_words/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Holy fuck, Sun/Oracle. You guys really don't like making security easy, do you?
&gt; Nice error handling... Haha
The final parameters stems from the idea that you should not be reassigning your input arguments, and thus making them final enforces this requirement at compile time. There's a similar theology about local variables: that all should be final, at least until there is just cause to need to reassign a variable instead of creating a new one. Both of these prevent a certain class of errors (accidental reassignment or just forgetting/not realizing it's been reassigned), which are generally pretty easy to avoid, but are also a half step towards immutability, which leads into another theologic rabbit hole. Hopefully that helps.
Aren't there more fitting patterns instead of adding methods to enums. This look so inelegant. Surely there's a better way with Java 8 and lambdas/functional interfaces/whatever.
Yes, you can use a functional interface as a member of the Enums and take a lambda as a constructor parameter. It's my favorite way to implement the strategy pattern.
No time soon. There's a message on the mailing list for that JEP that said they're basically stuck. You wouldn't be able to put generic Enums in an Enumset.
[\[enhanced enums\] - end of the road?](http://mail.openjdk.java.net/pipermail/amber-spec-experts/2017-May/000041.html) :(
U made me sad... I feel like I lost something I never had :(
Meanwhile, with Kotlin and sealed classes, we can achieve this and more already
Meanwhile, with Kotlin and sealed classes, we can achieve this and more already
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
thanks, I take my meme specificity seriously
Sealed classes are in the works as well. See [here](https://www.youtube.com/watch?v=A-mxj2vhVAA&amp;t=28m23s).
I use Enums to create 1. Mini-Tables, baked into the code. 2. 3. Fixed list of selection items such as drop-down menu or set of option (eg "radio") buttons 4. 5. HIERARCHICAL menus! yes, really
The big win for me is if developers would use them more often. Too often I see mile-long constants files: &gt; public static final String INPUT_WEEKDAY = "M-F"; &gt; public static final String INPUT_WEEKEND = "Sa-Su"; &gt; public static final String COLOR_ORANGE = "Orange"; &gt; public static final String COLOR_BLUE = "Blue"; Just create a few enums, stuff the data in there, and let your interfaces use these enums to guarantee some safety
Another thing about Enums. You can have a comma after the final enum item. And you don't need the semicolon unless you're going to declare a constructor or other methods in the class. So instead of: `enum WeakDay { SUN, MON, TUE, WED, THUR, FRI, SAT; }` I declare: `enum WeekDay { SUN, MON, TUE, WED, THUR, FRI, SAT, }` For bigger enums: `enum DuplicateInvoiceNumOption {` `ALLOW_DUP( "Allow duplicate invoice numbers", . . . ),` `WARN_DUP( "Warn if duplicate invoice numbers", . . . ),` `STOP_DUP( "Do not allow duplicate invoice numbers", . . . ),` `; // semicolon ends list of enums` `// Constructor` `private DuplicateInvoiceNumOption( String caption, String tooltip, String errorMessage ) { . . . }` `// . . . possibly other methods here . . .` `}`
I do not know if either application you mention is a Java web application that can be deployed into a Java Application Server. Terminology: Zero or more Servlets can be in an Application. Zero or more Applications can be deployed into a server. Simple exmaple: if you set up Apache Tomcat, it will have several applications already installed. Documentation and the Management application are a couple of them. From the management application (using your web browser) you can see the other applications running on this Tomcat server. You can use any of those applications, including the Management application which you are using to look at the status of the other running applications. If you have an application in the form of a WAR file, then from your web browser, in the Management application, you can "deploy" the WAR file. The browser will prompt for the WAR file, then upload it, the management application will deploy it into Tomcat, and then you can use it. From the Management application you can start, stop and remove applications.
Openfire comes packaged with its own JRE, YaCy uses the default JRE installed in Scientific Linux (/usr/bin/java -server). I don't know if either one would work with Apache Tomcat. I guess I'll go a-googling. 
The copy paste they did there is awful. I really wouldn't recommend doing this to anyone. Writing out the code let's you spot mistakes immediately unlike blindly copying and pasting
Yeah I had a tone of that in our old app. Took a while to refactor. we also had hierarchical interfaces doing that too. :(
If you mean "can they both run on the same physical server, and same OS instance", the answer is probably Yes. YaCy can probably be manipulated by starting it with a shell script which first sets the JAVA\_HOME, or JRE\_HOME environment variable to point to a Java runtime of your choosing, ignoring whatever is the default Java on the Linux distribution. On real servers (either Linux or Windows) I never have an "installed" java. Everything is started with an environment that I control, pointing to specific versions of java, tomcat, etc. Make sure that YaCY and Openfire listen on Different ports. (eg, not both on port 80 or 443, for example.)
One thing the architects announced is that they plan to ship the OpenJDK builds under the [GPL](http://openjdk.java.net/legal/gplv2+ce.html). Other than that, I have not seen any other differences besides support.
See? Nobody cares.
Tupac cares, if don't nobody else care.
"While we know there will initially be differences, our intent is that within a few releases there should be no technical differences between OpenJDK builds and Oracle JDK binaries." [https://blogs.oracle.com/java-platform-group/faster-and-easier-use-and-redistribution-of-java-se](https://blogs.oracle.com/java-platform-group/faster-and-easier-use-and-redistribution-of-java-se)
Thank you very much!
OpenJDK is promising three years non-commercial support for LTS releases, but Oracle employees won't be involved after the first six months, so it remains to be seen if the community can pick up the slack. But the intention is there. 
Yeah, time will tell! I am hopeful.
Why not use caffeine async loading caches? This is a solved problem from a mature caching library within your own ecosystem. Do you really think you've managed to do better than that implementation?
Thank you for the polite feedback.
I'm a big fan of using two value enums over booleans. Easy to extend in case it wasn't actually two values and self documenting (in theory). Every time I see more than boolean in a method call, I cringe a little because there's usually some complex chain of if, ands, ors, nots, etc to determine what the booleans actually mean. My favorite is adding a second bool when something is only tristate, so the true or false of the second value isn't ever considered and one day someone passes a technically invalid combination 
Caffeine is something that complements this approach. Post has also has a Node.js version of same approach. It’s not the tool being compared it’s the language/stack agnostic idea that is being pitched. 
I've also used them in state machines to represent states. Make the enum an inner class of the state machine class, and give each enum an execute() method. 
Honest question. What's good use case for using GraalVM? I read the documentation and I get what it does, but I can't figure out what real-world problems this solves?
I suggest asking on r/javahelp.
No problem!
As of right now, I don't think it's worth using in any serious capacity. What *will* be cool in the future is the native compilation feature, combined with the language interop. Being able to write programs in Java/Python/Javascript and compile all of it to a single **native** image would be awesome. No mucking about with JVM/Python/Node installations on the target machine. I have my doubts as to the feasibility of that, but it seems like the Graal team is trying pretty hard to make it work. If they do, it'll be a massive boost to the community. One of the (very) few reasons I use Go is when I want to make a native standalone binary without going through the headache of dependency management with C/C++. If I could do that in Java or Python, I'd be a lot happier.
Or you can keep updating the java version of your app every 6 months and not pay a thing
TIL: DoorDash runs on Java (JVM)
I wrote a blog about this a couple of weeks ago that provides a summary of how the JDK is delivered and updated and the commercial implications, [https://www.azul.com/eliminating-java-update-confusion/](https://www.azul.com/eliminating-java-update-confusion/). The important thing is that Java (in the form of the JDK) remains free. It's just how you get updates (security patches and bug fixes) to a specific version that will be a consideration.
Here is the direct link - [https://github.com/oracle/graal/releases/download/vm-1.0.0-rc5/graalvm-ce-1.0.0-rc5-macos-amd64.tar.gz](https://github.com/oracle/graal/releases/download/vm-1.0.0-rc5/graalvm-ce-1.0.0-rc5-macos-amd64.tar.gz) in case someone just want to download it then try out it. 
[it stinks](https://www.youtube.com/watch?v=YdDMrncAy4U)
&gt; With fewer lines of code, in theory, one can expect fewer bugs. That's just not how programming works. &gt;Blob Class (BLOB), Swiss Army Knife (SAK), Long Method (LM), and Complex Class (CC). And the Android anti-patterns included: Heavy Broadcast Receiver (HBR), Heavy AsyncTask (HAS), Heavy Service Start (HSS), Init OnDraw (IOD), No Low Memory Resolver (NLMR), and UI Overdraw (UIO). I don't see how using Kotlin instead of Java fixes **any** of these smells and therefore the conclusion should be about the developers of the applications rather than the language difference.
There are certainly features of Kotlin which help us catch bugs, but this doesn't seem like a very valuable analysis without making some effort to control for other factors. Are amateur developers more likely to be using the more well-known Java? Does the fact that Kotlin apps skewing newer mean they're built on a broader knowledge base, better tools, libraries, &amp; documentation? Saying that apps which switch over to using more Kotlin see improvements is particularly suspect ... Are they *rewriting* bits? You might expect that to show an improvement in quality *regardless* of the language they switched to. Do projects *typically* improve in quality over time, or do they otherwise stay the same or get worse? Did they even ask these questions?
It looks like in your [submission](https://www.reddit.com/r/java/comments/94ilu2/calling_all_software_developers/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
**Sidebar** + **No surveys, no job offers!** Such content will be removed without warning.
I don't know how their analysis works exactly, but if they're just counting LOC to say it's a BLOB class or a long method, that's obviously not a fair comparison as Java code \_is\_ longer. However what's important is code complexity, not length. And that's difficult to measure. A Java method with 15 LOC may be perfectly fine, while in Kotlin you could write the same method in 5 lines and the 15 line version would be unnecessarily complex.
&gt; With fewer lines of code, in theory, one can expect fewer bugs. &gt; &gt; That's just not how programming works. If that was true, perl would be the language used for critical software like medical devices. Imagine that. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Does it really?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's not all that comparable. Javalin is more of a routing library than a framework, a DSL built on top of Jetty. The entire codebase is less than 4k lines, including comments. It has the tools you need to handle HTTP and WebSocket requests, as well as some convenience methods for JSON and templates. Nothing related to databases, dependency injection, etc. I've seen some people use it as a server dependency for their framework. There's this comparison matrix someone made, but I can't guarantee it's correct for Dropwizard: https://docs.google.com/spreadsheets/d/10tc89O8KjwfJ42lintaJvcSisW2WHJrF-hRcS6iUgyU/edit#gid=0
Read the docs of javalin, it's really micro. But yes, there are so many options nowadays one can't choose. Dropwizard, vertx, micronaut (check this out), spark.. I'd really like to know what are people using and what for?
That's not quiet right. OracleJDK can't be used in production without a paid license. OpenJDK however can't.
It's because people who barely know Java publish code. You din't use Kotlin until you're fairly good at Java....usually.
Please make an issue if you run into any trouble!
I always grab DropWizard for rest services, for anything else I use Spring Boot, since it has drop in libraries for everything I need.
While I like enums, I think the operator example is an anti-pattern. For the simplest of cases, you could define an interface and have the enum carry an instance of that interface (which, might be a lambda). And in the most complex case, you have to ask yourself "does this really make sense as an enum?" The enum method overriding trick is simply ugly and unnecessary.
urg, or worse, changing a `boolean` into a `boolean` and having null carry some additional meaning... \*shudder\* I've seen some awful stuff.
Who wrote this ridiculous bot? What does it do, literally just see if the post has a question mark in it? Give us a break.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Looking forward to the full 2.0 release! Javalin is now my go-to library for messing with web-sockets!
The methodology in this article lacks some explanation. As someone pointed out- people who pick up Kotlin, usually know Java well already.
I wonder if Java will provide something similar to [std::string_view](https://dzone.com/articles/performance-of-stdstring-view-vs-stdstring-from-c1) in the future
Any support for other servlets beside Jetty?
What ? Once we have the host, by tomorrow, we will already have a server and game functionnal and running. We will already start taking donation for Pearl, which we would have to handle ourself and hence why we are looking for java programmer and all. I do not understand your answer and it look like the typical "mmo bashing reply" which is totally unrelated to this post.
&gt;I do not understand your answer and it look like the typical "mmo bashing reply" which is totally unrelated to this post. Nothing in my post had anything to do with that, you delusional nut.
And now you insult me ? You have no reason to act like this. I am reporting you
Please do bring more attention to this post.
It is my goal indeed lol what kind of strange person you are.
This post breaks at least 3 rules in each sub you've posted it in.
As I said... *runs on Java* **(JVM)**
It can be, but should only be done that way when nulls are not expected at all or are expected to be very rare since it's significantly more expensive to catch the segfault signal. Both modes exist and the default mode is to perform the check during null-sensitive operations (mostly invocation on an object reference).
I thought there was going to be more to the travails of memory optimization not just trying a different GC + flags.
Probably searches if there's code blocks.
Upvoted for dad joke
The article is more about objects in general than `Object` as capitalized in the title.
Poor article. It goes from explaining basic concepts, for newbies, like what is a class and what is an object to hard-to-follow JVM side story and ways to construct an object when not using the constructor. I doubt a newbie will jump straight to Class.forName(...).newInstance() idiom. And the cat and dog thing? Those are not instances of Animal but sub-classes. Spike, or Tom, or Jerry would have been better examples of instances. Also, mentioned hashcode but haven't explained it. In short, this article mixes beginner stuff with more advanced stuff and would have been better if it was split in 2 parts and better explained. And please, if the author is reading this and goes ahead and rewrite it as 2 parts, pretty please don't abuse the animals again.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why the heck are you trying to save files in the bin folder of the jdk in the first place? I’m guessing Windows restricts files saved in that folder to installers somehow
what's the error?
It depends. Sometimes testers are seen as scaled down-developers but this is not always true. In fact you might find that some developer might be specialised just in writing the front-end rather than the back-end so they might be limited as well. Best thing to do is constantly train to learn something more being confident to find the opportunity to apply whatever has been learnt
Why do you care? Are you planning to send it to the moon? If not then what you are doing is probably irrelevant and you should instead spend time on producing value.
It says that I need administrator permission but I am the administrator , the only account present 
If I want to run java files on command prompt , we have to save it there 
No you don't: Example file: package mycode; public class Hello { public static void main(String[] args) { System.out.println("Hello world"); } } Example folder structure: C:\ MyFolder\ mycode\ Hello.java Compiling: cd C:\MyFolder javac mycode\Hello.java dir mycode Hello.class Hello.java Running: cd C:\MyFolder java mycode.Hello Hello World
It's so long. The method I used is shorter 
Putting your compiled Java files in the bin directory of your JDK is wrong and prone to error.
I tried installing netbeans but I can't get it to work
Gonna need to be a bit more specific.
Gonna need to be a bit more specific than that.
Which IDE can I use apart from Netbeans 
IntelliJ or Eclipse are what most people use.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why would this be desirable?
For small short-lived strings I wouldn't expect such view to make much difference. The view objects would still pollute the heap.
I also find it to be one of the more puzzling features in JDK 11.
Which literally becomes _Java script_ (do not mislead it with _JavaScript_)
It’s groovy but not. 