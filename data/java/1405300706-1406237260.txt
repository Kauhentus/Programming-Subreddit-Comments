To be completely honest, there is no reason why websites such as code academy shouldn't teach Java,C,or C#. They would attract a much wider demographic of people into programming. Their main goal is to teach programming not only to those who are new to coding.
Funny, those are the languages that all of my friends/I learned first in their computer science/software engineer majors.
Same here, my first language I was taught at university was Java. 
Udacity has a java course which seems to focus on the concepts first.
Right, because it's a legitimate education that is worth what you paid. My classes were all in C and Java and it's paying off quite well for me. 
So the "mainstream" sites prefer the more *hipster* languages...
1. Give us your entire code, not just the one line. 2. What do you mean by "but it always says it's false"?
Webpages that load as a [.do](http://struts.apache.org/) file are utilizing Java; just because you don't see an applet (a dying and very obsolete solution) load doesn't mean Java and friends aren't involved in generating the content displayed. Also, anything Android related is utilizing Java. Those two alone should give you a sense of the scope, which is *massive*. 
No, he's saying that collisions are 100% allowed, as long as 2 equal objects DO collide; it doesn't matter if 2 unequal objects DONT collide. You, on the other hand, just said avoid/prevent collisions, big difference
Ironic isn't it.
Much better than VIIM
Do hipsters still love irony, or do they only "like" irony now?
I have a sinking feeling that ruby might go the way of perl.
&gt; Writing out java code by hand on exams That's just sadistic. 
So true. It also annoys me to no end that on our own /r/learnprogramming sub so many claim that Python is "the best" teaching language. Like hell it is! I personally think that new developers are MUCH better off being taught a strict OO (m ight as well get it right the first time, I had a lot of troubles 'forgetting' the bad imperative stuff I taught myself), statically typed (so the compiler / IDE helps you a lot) language running on a VM (so you get very good stacktraces instead of just a 'core dumped'). Aside from that; Java has tons and tons of teaching materials. The official tutorials are very good. Heck, the API docs are much MUCH better than those available for Python (seriously, they're a mess!). So I don't get why people are suddenly so infatuated with Python. Sure it's a fun language, I use it myself all the time (typically to script some menial tasks or to create a very simple webapp). But I personally feel Java is a MUCH better teaching language.
I understand the theory, but my experience (primarily as an HS math/programming teacher) has been that the strictness is precisely what saves you the moment your program gets longer than 5 or 6 lines. I was helping a friend of mine with a lengthy JS project for a CodeAcademy course, and most of her problems originated from the mix of her inexperience and JavaScript's permissiveness. She'd do something like mix up variable types (especially in function parameters) and the environment would give her fuck all in terms of useful feedback. I know that types (like declaring variables or defining a class's fields and methods) can be a real drag, but they are really there to save you (and by "you," I mean "me," because I screw these things up all the time). I periodically look into languages like Python for intro programming, but feedback I get from former students and nearby universities is that our current languages (C++/Java) really do a good job of preparing students.
&gt; Because java is so damn strict No, the compiler is strict. This is because computers are strict. Computers are not humans who can interpret what you're trying to do in a certain context. The compiler tells you you should not stuff an int into String because computers can't handle that. So instead of a millisecond to type "int" before a var you now have a great potential for the type of bug that's incredibly hard to find for a beginner who doesn't have the ability to form a mental model of the code. Heck, even for seniors these bugs can be a pain in the ass. 
&gt; Give us your entire code, not just the one line. Preferrably on pastebin or in a gist, not dumped without formatting in a comment.
It looks like there's a problem in the checkstyle xml config file, on line 1, column 50. Did you happen to (accidentally) edit it recently?
Java, C# are both good for the reasons you specified. Both are rock solid languages with excellent IDE compatibility.
While Python was easy to learn, it made the transition to Java and C# an absolute nightmare for me. So. Fucking. Different. Wiah C was my first language tbh.
I would have tended to agree with you, but you should read this comment: https://news.ycombinator.com/item?id=8002089. This describe's a university's transition from C to Java to Python as their introductory teaching language. It's a response to an ACM article: [Python is now the most popular introductory teaching language"](http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext). 
&gt; Automatic specialization is not unification. It is a workaround for the lack thereof. It is also a huge waste of memory due to all the specialized classes that get generated. I don't think that they are going to generate classes profusely. Some invokedynamic maginc will happen. Furthermore, there are some solutions to reduce even more memory footprint (look the [miniboxing](http://scala-miniboxing.org/) research project at the scala community). 
Java is one of the most popular languages. It's teached at universities and there is a lot of literature available. Check the TIOBE language index to get an idea about Javas popularity. So for one, there is simply no need to school someone in Java. But then, Java is mostly used in a work and business context. It's not a big open source language in my opinion. And Oracle/Sun is partially to blame for this. Java integration into Linux is still bad in my opinion. Of course, there is OpenJDK and there are groups like the Eclipse foundation and the Spring Team. But in the end Java lacks hip blog posts and beginner tutorials for 'advanced' topics. Many of the older languages do by the way. A lot of posts about java are really old and outdated.
irony is so mainstream now...
The arguments they give: &gt; The move to Python gained us, among other things, the freedom not to have to explain Java's generics and access modifiers. So basically they gained the 'freedom' of not having to explain proper encapsulation practices. Having to think about whether a method should be public or private is a GOOD thing. Back in my days we were graded on this; because it teaches you to hide stuff that the outside world should not touch. &gt; Many of our students have never programmed with a text editor before our unit, and dropping them into the big boilerplate world of Java micro-management was not good for them or for the course. Oh bloody hell. People keep bringing this up. Having to write public int getSometing() instead of def getSomething(self): isn't going to be holding your students back. In fact; being explicit in what a method accepts and returns makes reading code a lot easier for them. And I think we all know you spend more time reading code than writing it. &gt; We used to spend too much time on syntax and other details ("native types are like this, reference types are like htat") that we should have been spending on data structures and algorithms. That took us one whole class, to explain the difference between primitives and objects. How on earth are you going to explain OO without explaining objects and how object references work? There's no difference there between Java and Python, Python just makes it less visible. &gt; The only difference I noticed was that students had less support from their IDE, and that some common errors (attempting to access attributes on None is the top one) that used to be picked up statically are now runtime errors, as expected. And guess what's the biggest hurdle for new programmers is: figuring out what they did wrong. Because when you start out you get stuff wrong all the time. &gt; Type errors are still caught, again by the runtime instead of the IDE and, if anything, this is a better exercise for students, since fixing them requires better understanding of what the program is doing. Yeah, forget all about helping students because now suddenly telling them they did something wrong way later is suddenly 'better'. This is incredibly typical of many of the communities that are suddenly a 'fan' of something: they make up all kinds of argument that really actually don't make any sense. The real reason universities are moving to Python is much simpler but unfortunately not to the benefit of students: it's much cheaper. Don't mistake universities as something that is there to teach: they're commercial companies that are just there to make money. If they can somehow save money (by having a class take less hours) they will. And what better way to save money by switching to a methodology that somehow magically takes less time to teach. Where do you think this time is coming from? Do you really think students suddenly learn better, or is it because they might be skipping certain VERY important aspect, such as proper OO programming?
Wow, that's cool project. Should try to make something like Gradle with dependency management and stuff.
Dunno if the world really needs yet another full-blown dependency management tool. ;)
I would stick with GlassFish. However, if that was not an option, I would go with WildFly, since it implements 100% of the Java EE specification, where TomEE only implements the web profile.
Honestly, University CS programs aren't very useful or relevant. Most of the time the instructor has spent their entire time in Academia, so they're teaching as if their students are going to become computer scientists in academia, rather than developers in the real world (you find a few profs with experience here, but after being at a few different universities, I'd say that it's rare). The other deal is that intro CS classes are rarely just CS. Ridiculously enough, the CS Intro Java class at my uni was a prereq for the Information Systems major Visual Basic for Office class. The intro CS class was also a requisite for Engineering students as well. When 70% of your lower level students don't need to learn and develop good programming skills, you probably aren't going to invest in it.
Java is pretty hard to get to start with and most those sites don't really go in depth into anything they "teach". 
&gt; Honestly, University CS programs aren't very useful or relevant. Most of the time the instructor has spent their entire time in Academia, so they're teaching as if their students are going to become computer scientists in academia, rather than developers in the real world Erm, maybe that is why it's called "science" and not "engineering". 
That's true. Python is less verbose but it looks like a mess when you type it out. Java and C languages are a bit lengthy but they aren't going away anytime soon. Those hipster language trends will go away after some time.
Those kinds of sites are all about getting noobs interested in programming. Teaching them Java as opposed to say, Python or Ruby, is probably more likely to scare them away from the whole idea of programming than attract them to it.
...the fuck is with that blog photo?
It's funny, I've stuck with Java for what, 15 years now? And "Hip" languages like PHP, Perl, Python, Ruby seem to come and go, and at no point in time reach the maturity and completeness Java has, even with all its flaws. Each of those new languages has some cool new features, and is better than Java in some ways, but as a whole, taken as an ecosystem of 3rd party projects, documentation, standard library, support, application servers- they are just so much worse.
Wildfly for sure, it is much more mature than TomEE. Plus, neat features like graceful shutdown are coming down the pipe.
I will have to disagree here. I really really love Java, but I just spent over a year at a job where I was a Python dev (thankfully I'm back to Java at the new place!) so I have a good bit of a hands-on comparison for both langauges in a production environment. I think that a first langauge should easily let a person map what they are thinking to how the code is written. I've personally never encountered a langauge that does this as well as Python. You can easily show a block of code to a novice programmer and have them understand what is going on. For someone who has never touched code before, this is huge. Also the environment is much easier to comprehend, one simply types their program in whatever text editor they happen to have and then they run it. No IDE, no class path, no setting of JAVA_HOME or anything like that. I think not sending potential programmers running away confused should be as much of a goal as anything. Also, I don't know that strict OO should be considered the end-goal of programming. There are a lot of different programming paradigms out there and OO is just one of them. I personally think it's useful to learn all of them. The time I have spent in Scheme, Javascript, Forth, Haskell, etc have made me better at programming in general. It really depends on what a person plans to do with that programming knowledge. I do agree whole heartedly that the documentation culture of Java is vastly superior to Python (and just about anything else). That was one of the more challenging things I found about working with it. As to why people are infatuated with Python, I think it's a few things. It really does let you express problems succinctly. The libraries out there are pretty great. If you are doing backend web work, Django is just glorious. I cannot sing it's praises high enough. I just came off of a very complex project that used Django, and I became impressed that never once did I have to write sql to overcome limitations in the ORM. It was able to do complex joins and produced efficient sql. The biggest thing I think Python has going for it is that you really have 1 way to do a particular task. There's no switch statement for example. Switch is really just a if/elseif/else block anyhow, so that's what you have to use. Removing options on things like that keeps code looking very consistent. If you tell two programmers to sit down and write the same program in python, their resulting code will probably look very similar. This has an added benefit when you have to go digging through other people's code. When working in Django, sometimes documentation would not tell me what I wanted to know about a particular feature, so I checked the code out. In any other language, a large advanced codebase would be difficult to understand. I had no such problem here however. The code within that project was still clean and easy to read. Both are great langauges. I just feel the barrier to entry is lower with Python. And once someone is hooked, they'll learn the rest as they go. I learned on Apple2 BASIC, and I turned out ok :)
Yes, look out for other languages too. Do not tie yourself mentally to one language. You'll learn new concepts there for sure. Like JS (e.g. the 'deferred' concept of jQuery) but also functional programming ones like Scala or Lisp and similar things. Another interesting topic for you could be WebGL or WebSocket (+ not sure about JavaFX?). Also learn concepts and algorithms, they won't change in version 2.0 ;)
&gt; lso the environment is much easier to comprehend, one simply types their program in whatever text editor they happen to have and then they run it. No IDE, no class path, no setting of JAVA_HOME or anything like that. No difference to Java there. The python interpreted needs to be on the path, so are java and javac. You don't need to set java_home if you just compile your homework. And any text-editor works fine. Heck, back when I was learning we had to use the commandline and VI. &gt; Also, I don't know that strict OO should be considered the end-goal of programming. I'm not saying someone should only learn OO, I am saying that OO is a must for any student. I'm a huge fan of functional programming and what it teaches you, but that's a bridge too far for new programmers. The beauty of OO is that it very closely models what we do in the real world. However; learning imperative programming first and then OO is not the best route to take: when you start OO programming the switch is actually harder. I had troubles 'forgetting' a lot of the stuff I taught myself programming basic, C and assembly. &gt; Django is just glorious We are not comparing frameworks, we're comparing languages. How great Django is or isn't is not an argument; it's way beyond the scope of a starting programming student. &gt; Switch is really just a if/elseif/else block anyhow, so that's what you have to use. Removing options on things like that keeps code looking very consistent. If you tell two programmers to sit down and write the same program in python, their resulting code will probably look very similar. Don't get me started. That alone is in my opinion a huge argument against Python. People go on about it being less verbose but on the other hand it doesn't even a construct that gets rid off a lot of the verbosity in programming. &gt; In any other language, a large advanced codebase would be difficult to understand. I had no such problem here however. The code within that project was still clean and easy to read. I can't image you claiming that very similar code in Java is less easy to read than the same code in Python. If there's anything that's Java got going for it is how explicit the code is. 
&gt; Speculation though. I actually love both Java and Python. And C. All great languages in their own rights, tools for different jobs. Same here. I just think that as a teaching language Java is the best of the 3. So it really surprises me (or well, it doesn't really, it's a money issue) that universities are moving to Python.
&gt; Brogrammers don't use Java "don't?" or "can't?" heh, ok that was a troll. but anyway yes, i honestly believe you hit on a very important point. a former job of mine, where i was the lead of the (small) engineering department, had a not insignificant "brogrammer" vibe about it. it was actually very annoying and was like working with unenlightened hobbyists. but, through some tolerance and the introduction of Java, and actual software engineering practices i got us thinking and acting like an actual engineering department. it was tough on a lot of the more brogammer types and most of them left (seriously? are code reviews and documentation that much of a cramp of one's style? really???) but yes through the introduction of Java, that went a long way in actually installing some discipline. for a time anyway, but the company was so dysfunctional it was only fleeting and i gave up, feeling and being defeated everyday for almost a year takes its toll on a person. heh and to be fair it's not like i forced old school java development down anyone's throat. no websphere or hundreds of xml configuration files and confusing dependencies. PlayFramework (which i love) for crying out loud! heck, even a brogrammer could probably figure that out (i'll end with another troll) 
&gt; No difference to Java there. The python interpreted needs to be on the path, so are java and javac. You don't need to set java_home if you just compile your homework. And any text-editor works fine. Heck, back when I was learning we had to use the commandline and VI. But with Java you pretty much have to use an IDE to get real work done. I honestly found the issue of setting up my dev environment to be a pain when I was getting started in Java, and that's with a decade of programming under my belt already. I started with Java5 however, the situation is probably better now. &gt; We are not comparing frameworks, we're comparing languages. How great Django is or isn't is not an argument; it's way beyond the scope of a starting programming student. Of course, I was just bringing that up as a reason people are infatuated with Python. Although it did just occur to me that I don't think any language as such a robust and mature set of libraries as Java does. But I think the Python (and ruby and node) folks do a better job of marketing their libraries. &gt; Don't get me started. That alone is in my opinion a huge argument against Python. People go on about it being less verbose but on the other hand it doesn't even a construct that gets rid off a lot of the verbosity in programming. It's a trade off, and personally I think it's a good one. I spent a lot of time in Ruby and Perl. Both languages that will give you 20 ways to do the same task. This becomes a readability nightmare. A small team working on a codebase is one thing, but when you get multiple people, or are constantly cycling through developers, that becomes a major pain. But of course this is an area where Java shines the most I think. &gt; I can't image you claiming that very similar code in Java is less easy to read than the same code in Python. If there's anything that's Java got going for it is how explicit the code is. Again this is a tradeoff. What I ADORE about Java is how explicit everything is. I can look at code and know what's going on because I know exactly where variables are created, and what type they are which helps me to figure out what a block of code is doing in a snap. When you're inexperienced though, that can easily look like a wall of text and that can scare folks off. Of course once you are familiar with a language you sort of see past it. I'm thinking of a person who has zero familiarity with programming however, which is hard for me to do, as I just realized I picked up programming over 20 years ago (yikes!), but I do think the fact that Python lets you write less code for the same task (generally) makes it easier for someone to grasp the concepts presented. 
Meh. Article title is about calculating hashes but it seems they're bitching about encoding the binary output of the digest to a hex string as the digesting itself can easily be a one-liner both ways. Not the strongest case for bringing a hefty library into your project.
It is not clear why you are abandoning GlassFish. Without that it is hard to say which to choose. But as you mention "which is mostly used in the enterprises", then I would say: none of these. For enterprises, things like commercial support, tooling support, consulting services, High Availability capabilities, Operations and Admin features (you don't want to spend days editing XML files), high level of integration with other stacks (such as databases, SOA products, etc), optimizations for some hardwares (like Oracle Exalogic or maybe IBM PureSystems, although I'm not sure if IBM does provides this), support SLAs, 24x7 support, multilingual support (if your enterprise is from Spain, you may prefer to have someone from support speaking with you in Spanish), etc. These are things that Enterprises consider too, not just "developer productivity" as people tend to point to, since of course most giving opinion are developers. For enterprise-level Java EE application servers, options are really: WebSphere, JBoss, WebLogic, TmaxSoft (if you are in Asia) and a few others. These options provide most or all the requisites I pointed out above. And some are closing the gap on developer productivity. The new WebLogic 12c branch for example comes with advanced Maven support, integration with top 3 IDEs (NetBeans, Eclipse, IntelliJ IDEA) plus of course JDeveloper, partial Java EE 7 support, small distribution for developers (~190mb instead of the ~900mb distro for production), and more. IBM has also improved WebSphere a lot for developers (look at Liberty Profile) and similar to WebLogic already comes with advanced production features (HA, adv clustering, admin UI, etc). Consider all these before choosing your next application server. **Disclaimer:** I work for Oracle.
Java man. Dig it. (Snaps fingers like a hipster). 
Yeah, the first time I looked at Python code, I could already tell they had basically dumbed it down, and when you dumb things down, you just enable lazy programmers. Of course, I just found out that a company I am hoping to work for in the near future, uses python and ruby, so I might have to hold off with the Java.
It also helps people starting out with the platform. You can start using JPA without worrying about installing a driver on the app server, configuring a connection pool/datasource, etc. Most beginners probably aren't jumping right into JMS and Concurrency, but pretty much everyone is going to use persistence.
try www.javapassion.com 
thanks!
so far two responses have been: Udemy.com codingbat.com Udacity as well EDIT, a few posts down: http://www.tutorialspoint.com/java_technology_tutorials.htm http://www.java2s.com/Tutorials/Java/index.htm http://docs.oracle.com/javase/tutorial/reallybigindex.html also http://www.learneroo.com/
I'm a python fan at heart, and my uni teaches python-&gt;java-&gt;java-&gt;C &gt;So basically they gained the 'freedom' of not having to explain proper encapsulation practices. Having to think about whether a method should be public or private is a GOOD thing. Back in my days we were graded on this; because it teaches you to hide stuff that the outside world should not touch. I mean, kind of, but not really. Yes, understanding encapsulation is important, but for someone learning what programming is, encapsulation isn't a vital concept. I don't need to understand what the difference between `private` and `public` methods are when learning basic concepts like looping and recursion. And in fact, despite having an intro-to-programming prerequisite, our java OOP course didn't touch on private and public methods until the third week, and the word "encapsulation" wasn't mentioned until much later. &gt;Oh bloody hell. People keep bringing this up. Having to write public int getSometing() instead of def getSomething(self): isn't going to be holding your students back. In fact; being explicit in what a method accepts and returns makes reading code a lot easier for them. And I think we all know you spend more time reading code than writing it. You don't teach intro to programming in python with OOP python. OOP in python is ugly. I use it, but I don't love it. In fact, Objects and classes were mentioned in the final week of class, and we never were tested on them. I believe MITx's course is similar. So yeah, writing def printAString(string): print(string) printAString("hello world") is significantly less confusing than public class FirstDay { public static void main(String[] args){ FirstDay.printAString("hello world"); } private static void printAString(String string){ System.out.println(string); } } The first raises the questions - what is def - what is the stuff in the parenthesis And the answers to both of those are important concepts in *all* languages (defining functions and parameters/args) With he java version you have all of these implicit questions - What is public - what is class - why the hell does this only work when the file and class have the same name - why does this only work when the class has a main method - what the hell is a String[] - what is static - what is void And you then have two options, either you wave your hands and sprinkle magic dust and say (as an instructor) "just do this for now and I'll explain later" and students are confused by this "useless" boilerplate, or you spend the first three class periods going over java syntactical stuff, explaining all of the keywords and such before writing the first bit of code, neither of which are great solutions. And that of course ignores the whole use of having an interactive REPL. As someone just learning, being able to do small incremental changes immediately is wonderful. As for being explicit about what a method returns and accepts, I'd argue that that can be done just as well by enforcing good documentation style in homework and projects, although I agree that for things of scale Java enforcing it is cleaner. &gt;That took us one whole class, to explain the difference between primitives and objects. How on earth are you going to explain OO without explaining objects and how object references work? There's no difference there between Java and Python, Python just makes it less visible. So the biggest difference is that code gets ugly. Say I've got a vec3 class in java and a vec3 class in python, and I'm adding a few together. //in java Vec3 a = new Vec3(1,2,3); Vec3 b = new Vec3(1,2,3); Vec3 c = new Vec3(1,2,3); Vec3 d = Vec3.add(Vec3.add(a,b),c); #in python a = Vec3(1,2,3); b = Vec3(1,2,3); c = Vec3(1,2,3); d = a + b + c; #if the class is implemented pythonically The first three lines are similar enough, but don't tell me that java isn't unnecessarily verbose. It (mentally) makes sense to add things with '+'. Doing ClassName.add(obj1, obj2); is weird and foreign and ugly. &gt;And guess what's the biggest hurdle for new programmers is: figuring out what they did wrong. Because when you start out you get stuff wrong all the time. But its ok, because now you have a REPL to explore your errors live, you can figure out exactly why def returnAString(string): print(string) returnAString("hello world")[2] raises an exception because you can easily explore what the function actually returns. &gt;Yeah, forget all about helping students because now suddenly telling them they did something wrong way later is suddenly 'better'. I actually agree with you here, catching things at compile time is nice. &gt;This is incredibly typical of many of the communities that are suddenly a 'fan' of something: they make up all kinds of argument that really actually don't make any sense. The real reason universities are moving to Python is much simpler but unfortunately not to the benefit of students: it's much cheaper. &gt;Don't mistake universities as something that is there to teach: they're commercial companies that are just there to make money. If they can somehow save money (by having a class take less hours) they will. And what better way to save money by switching to a methodology that somehow magically takes less time to teach. Where do you think this time is coming from? Do you really think students suddenly learn better, or is it because they might be skipping certain VERY important aspect, such as proper OO programming? This might make sense if they didn't also teach OOP (in java) in other classes. You seem to be making strange assumptions here about how the courses are taught and their goals and such. Let me make something abundantly clear: the majority of people that take intro to computer science courses are not computer science majors. They will probably never use programming in their day to day jobs. Of the schools I've looked at before that do intro in Python (MIT, Georgia Tech, UIUC, CMU, Berkley, couple others), the only one that I've found that doesn't explicitly require a followup course in java (usually either data structures or implementation of a project) is CMU, whose undergrad program basically just feeds their graduate program. So I doubt that they are saving money by not teaching people OOP concepts just so that they can go back and teach people OOP concepts later. Its just that "programming" and "object oriented programming" are two different things, much as "programming" and "functional programming" are two very different things.
&gt; This might make sense if they didn't also teach OOP (in java) in other classes. You seem to be making strange assumptions here about how the courses are taught and their goals and such. Let me make something abundantly clear: the majority of people that take intro to computer science courses are not computer science majors. They will probably never use programming in their day to day jobs. I'm from Holland and I guess I just don't understand your school system. My frame of reference is people who want to be programmers and go on to become software engineers / architects. 
Spoiled brats, now they think Java is hard. When we were kids we've started with plain old **C**. My grandmother was using **[this](http://dealbreaker.com/uploads/2013/05/abacus.jpg)** visual language. 
I think Python is great for teaching the basic of programming. Functions, variables, conditions, loops. Procedural stuff. I think Java is best for teaching OO concepts. It's very strict and straigthforward about it which is really nice for learning them. My school did intro in Python and then Data Structures in Java which I was very happy with. Python was nice and friendly for learning the beginning stuff and then once we were all comfortable, we got to move to Java for learning OOP.
The university system in the US is a bit strange. At most "engineering schools," the majority of students will need to take an intro to programming course. At my university, this is either in python, or MATLAB for certain engineering disciplines. Students focusing on CS then continue and learn more about other aspects of the subject, data structures, OOP, low level programming, and then generally focus on a certain area of the field (networking, systems programming, AI). So I for example took the intro course in python, and then an intro to java, and then simultaneously data structures (in java) and low level concepts (C and LC-3).
How is it a money issue? Java doesn't cost anything to work in, I think. 
Not taking the time to teach programming basics (like OO) before diving into actual programming saves the university money.
Oh, in that sense. I see. I guess you may be right. 
because they teach java in highschool now. also, most people are born with the ability to code java - weren't you?
Had to do this in high school for my cs exams. It was the worst when you had to write a whole new bug for bug world. You were asked to make new algorithms on how a "bug" would move in a simulated 2d array environment filled with other bugs and rocks, and if you made a mistake in your code you had to erase huge segments of it to fix it.
Not sure why you are abandoning Glassfish but I would go with TomEE or just use Tomcat with OpenEJB. It is the same thing either way.
There's a lot of people throwing the word "hip" around like there's some sort of arbitrary malice against Java, but that's wrong. I love Java and I've used it professionally for years, but, honestly, it's not really an ideal beginner language for multiple reasons. In isolation most of these aren't too bad, but they accumulate into a lot of complexity. Beginners are extremely sensitive to setbacks, for good reason, so there must be as few barriers to entry as possible. * **Required OOP**. The simplest Java "Hello, World!" program involves defining a class, using access modifiers, and declaring a String array. When you're teaching someone the very basics, you really don't want to get into this. The best you can do is wave your hands and tell them to ignore all that stuff for now. This is a mental burden on the beginner. * **Static typing**. Before they can start doing useful things, you need to teach the beginner the basics of the type system. This is complicated by having special-case primitive types in the language. More so, Java doesn't support duck typing, so there's more planning required to fit things together. (C++ has duck typing, so this isn't really a limitation of static typing.) * **Generics**. Before the beginner can start making use of the standard library, *especially* the collections framework, you need to teach them about generics. IMO, even most professional Java developers don't have a full grasp on generics (covariant vs. invariant, type erasure, wildcards). * **Compilation and IDEs**. Unlike Python, Ruby, and JavaScript, there's a compilation step before the code can be run. Either you explain this to a beginner and teach him/her how to do it, or you hand them a big fat IDE that hides this detail. The latter just adds more complexity, because now they need to learn both a language *and* an IDE. The three languages I mentioned can be written by a beginner with a basic text editor. Don't make beginners learn something else they didn't set out to learn when they started. * **Client-side Java is dead**. The age of Java applets is (thankfully) long over, and Java application programming never really took off in the first place. Java's strengths are on servers, but it's hard to sell that concept to a newbie. Oracle knows this, which is why they're milking the Windows Java installer for everything they can by bundling extra crap. The best you can convince a newbie is saying, "If you learn Java you can mod Minecraft!" Now, Python and Ruby are no better off in this area -- when was the last time you ran a stand-alone Ruby application? -- but, as I said, it's the accumulation of issues that sets Java behind for beginners. * **No REPL**. Python, Ruby, and JavaScript all have some sort of REPL where the user can experiment with ideas without formally laying it out in a source code file. In some cases, this REPL might even be attached to their running program, so it can be manipulated from the inside. Java has nothing close to this. IMHO, REPLs are a huge part of learning a new language. The barrier to experimenting with new ideas is much smaller, and Java's boilerplate-ness only makes this worse. 
Check out this RebelLabs report, titled "Abandon Fish! Migrating from GlassFish to JBoss or TomEE" - http://zeroturnaround.com/rebellabs/abandon-fish-migrating-from-glassfish-to-jboss-or-tomee/ Note this is not a recommendation to Abandon GlassFish, rather useful advice for an alternative if that is the route you've decided. Disclaimer, I work for ZeroTurnaround, the company which funds the RebelLabs content division. P.S. Great video in that link ;)
Because Java by itself doesn't provide much value in contrast to C#, Scala, [insert favourite language here]. The power of Java lies in it's ecosystem of libraries, frameworks and tools.
We've been using it in production for 1.5 years now. It has spread in our company like wildfire, all new projects are Dropwizard only, all the old Tomcact instances are slowly being converted to WAR-less, self-contained Dropwizard apps. Sorry, no need for JRebel or anything like that. Dropwizard apps restart in seconds, no need for extra plugins or app-server specific hacks to minimize WAR reload times.
Are you an xp user by choice? Or is that just what you are forced to use? 
Perl was popular mainly because of its CGI abilities. It was a good language to use when tying things together in webservers because there wasn't much of anything else around at that time. But with better and newer technologies it's been used less and less. Ruby is popular because of Rails. And as new things come about, it'll be used less. If Python ever gets dropped by Google, it might go the same way.
What does Google use Python for?
Hm, yeah, fair enough. Nothing new here though, the author makes a fairly obvious argument. Plus -- and I might be the last one who cares -- I still think it's a great thing to not frigging execute code on a client machine needlessly, esp. for pages that don't need to be interactive. Having the no-script plugin in Firefox is more or less pointless nowadays, since for about 90% of pages I visit I have to create an exception. *sigh* I might just have become old and grumpy 
They're both not going anywhere. It's like asking if you should use Netbeans, Eclipse, IntelliJ. If you *really* want to get serious about it research the kind of work you want to do and the companies you want to work for and find out what they are using and learn that.
Likewise. At my college for my IT degree, our programming classes were both Java. (Aside from the web scripting languages).
First time posting. Don't know why the code I copy/paste ended up like that. =/
Count me in the "old and grumpy" group too. I'm still firmly stuck in the "Javascript for progressive enhancement" camp; javascript's an optional setting on the client, the site shouldn't make/force assumptions about the state of this setting.
Code needs to be indented by four spaces in order to be rendered as code; for something this size, you're probably better off posting it to PasteBin/equivalent and providing the link here. FYI based on the title /r/javahelp's probably a better place for this (I've not actually read through the post's content yet).
If I'm reading that correctly, you have two problems. First don't compare string objects with == or !=. Those are to check if two objects are the same object, and because the strings are not the same objects (even if they are the same value) you will always get false. Use monThruFri.equals("sunday") instead. Then I think you are missing a } in your invalid loop, which is why you are managing to progress to the end of your program. I would expect two invalid inputs to give you some interesting results. And as a bonus, you need to indent all your lines by at least four spaces to format them a code.
Git isn't meant for being a deployment tool on its own. I'd recommend looking at something like ansible for this. It's a deployment / provisioning tool that doesn't need an installed agent and uses simple YAML files. If you want to automate builds / deployments on commits to master, look at a CI tool like Jenkins and use git hook scripts to trigger jobs.
Some recomendations in no particular order: * JavaFX * More Spring! (Spring social, Spring Web services, Spring Mobile, Spring AMQP....) * JSF * Gradle ( gaining a lot of traction) * Cloud Computing platforms that support Java (Google App Engine is really easy to learn and get started, Amazon Web Services takes a little longer imo but lots of options) * GWT * Andriod - If you want to really branch out * You are probably not working with Java 8 at work, could look into the new features 
Thanks I tried to post over there but (new to reddit) said I had to wait a while to do that. Here is the pastebin link. http://pastebin.com/AGbS9F3c
Some people seriously want to stop making HTML something that the web transfers. Instead, they argue that somehow it's more natural to not abstract from HTML and thus only send JSON over the line (???). HTML is then something that generated client-side via java script. I AM old and all of my friends know that I'm a grumpy person, but c'mon... why is it natural and closer to the web by having web servers only send data via JSON?
&gt; Client-side Java is dead. Disagree. I think it is only mostly dead. JavaFX is (very quietly) starting to look more and more like WPF. Which means Oracle is trying to give all those corporate .NET developers a sane path into a Java world, where the runtime (JVM) has full support on the big 3 platforms: Windows, OS X, and Linux. Not to mention all those big shot middle managers carrying iPhones around with them to the latest trendy restaurants. .NET still has no sane cross-platform story in the desktop UI department, and it never will. If Oracle can walk the walk this time, and not turn JavaFX into an incomprehensible pile of shit like WPF is, they will have a real shot at the long-fabled cross platform promise of Java/JVM. On the other hand, if they blow it *again* with JavaFX, then yes, all we can do is go through the pockets and look for loose change.
 if(!monThruFri.equals("sunday")) will evaluate true if its not true. 
Jboss or WebLogic, it depends on how big ur project is. 
AngularJS is hot now. 
u can use only java ee, but hibernate will help u a lot of work. 
Yeah I mean, I understand that, but I don't know how to express that in the code. Am I getting close with something like this: str1.substring(firstMatch, str2.length()).equals(str2); or should I declare a whole new variable instead of trying to reference str1 again?
More flexibility. Spring Boot ties you totally down into Spring and worse Spring MVC (which if you ask me, is OK, but not as nice as JAX-RS). With Dropwizard, you get the best OSS components: Jersey, Jetty, logback, easy config with YAML (extensible to add your own stuff to it), etc. You're not forced into some giant monolith like Java EE (or even Spring, which is getting bigger with every month). As for authentication, Dropwizard already comes with Basic Auth and OAuth2. It is trivial to add your own custom auth filter (part of JAX-RS) or integrate Spring and Spring Security. See my sample app: https://github.com/jacek99/dropwizard-spring-di-security-onejar-example 
Why not have two apps, one that's a RESTful API and another that renders html server side for initial page loads and passes it off to some js framework. Then you also can easily generate non dynamic pages for those without javascript or whatever. This also gives you the benefit of scaling the webapp and api separately since your api is going to get most of the load if you are doing mobile interfaces/3rd party integration as well.
We use Jenkins (http://jenkins-ci.org/) for continuous integration and the Jenkins Github plugin (https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Plugin) for git integration. After every git commit, it kicks off a build on Jenkins. From there, you have several options for deploying the .war file. Jenkins can run shell scripts, execute ant tasks, execute maven objectives, etc. See this discussion: http://stackoverflow.com/questions/15476206/how-could-i-automate-build-deploy-in-jenkins
/u/tea-drinker and /u/sadjava already answered your question but I'd like to chime in here to comment on your coding style. Starting on line 34 you practically wrote the same code 7 times (one for each starting weekday). Worse, for each starting weekday you had to put a lot of thinking into which day of the month falls on a monday. That's the kind of task computers are good at. You are good at finding patterns. In this case the pattern ist: * Print spaces until you reach the position of the first weekday * Print integers in ascending order until you reach the number of days of the month * Insert a line break after every 7 prints This way you save a lot of work, especially once the problems get harder than this. Also it will be easier to read when you come back to it after a while. So it's good to start now, while you're still new to this and can get into the habit easily. [I rewrote your code a little](http://pastebin.com/4r40h3Zx) to show you one other way to tackle this problem. I tried to stick with what you already seem to know but assumed you know how basic functions work. I'd be happy if you took the time to have a look at it and spot some of the differences between our styles. This is by no means the gold standard of doing things and some of the less rusty java-coders here will will do things different and probably better than me. If you have questions, please ask them. In any case, I wish you all the best and success in your class. Edit: credit, where credit is due
&gt;do you see Java EE catching up to Spring / Hibernate in the next couple of year First of all, to be clear: Hibernate implements JPA which is part of Java EE. Many Hibernate users are therefore Java EE users. &gt;(or has it already?) Yes, absolutely! Java EE was way earlier with the NO-XML, annotation approach and contextual type-safe injections. Spring is now following suit and desperately catch up with Java EE where it concerns its core bean model. 
You are definitely on the right track. Keep in mind that the [substring](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring\(int,%20int\)) method takes a *beginIndex* and and *endIndex* rather than a length.
Java can currently make true arrays of primitives and of references. Any array of Objects is actually an array of pointers to objects. There are efforts underway to provide support for user defined value types which would allow arrays of objects with the objects being adjacent in memory in the array. This probably won't happen in Java 9 though.
Disclaimer: I used to work for Oracle/GlassFish and now work for Red Hat/WildFly. If you are abandoning GlassFish, then a logical choice would be to pick another open source application server. That brings your choice to TomEE or WildFly. I did not contribute to Zero Turnaround "Abandon Fish" report but the well grounded report makes sense to me as a developer. TomEE is Java EE 6 Web Profile at this time, WildFly is fully Java EE 7 compliant application server. Of these, TomEE is the only one commercially supported. So if you need Java EE 6, then you can go with TomEE. But wait, JBoss EAP 6.x already provides all of that and is commercially supported from Red hat too. Commercial support for WildFly/Java EE 7 will be coming with JBoss EAP 7. If you are considering WebLogic or WebSphere, then I highly recommend looking at TCO calculator: http://www.redhat.com/promo/eap_calculator/ JBoss provides 92% saving over WebLogic and WebSphere over 3 years. Some other factors worth considering ... - Do you want to assemble your own stack using Spring or use a multi-vendor/JCP supported standards-based products ? - What are your developers comfortable with ? Do they have time/resources to learn a brand new stack, such as Spring ? Do they have time to learn a new IDE ? - Heavy weight app servers provides lots of enterprisey features for a lot of money, but does your application really need all of them ? In my experience, 90% of applications use only 10% of features, YMMV. - How much docs are available ? For example, WildFly 8 docs are maintained at: https://docs.jboss.org/author/display/WFLY8/Documentation - How healthy the community is ? WildFly is thriving pretty well at: https://community.jboss.org/en/wildfly and there are several other venues. - How much active development is happening on the app server ? How much of it is transparent ? How fast is the turn around time for bug fixes ? Can you live with 12-month closed cycle release ? Or do you want a more open source/agile environment ? - Do you have visibility in the roadmap ? - Do you necessarily have to download your app server or can you get quickly started using PaaS ? Another point to note is that JBoss EAP is derived from WildFly, so there is 99.9% code similarity. This allows you to start running your applications on WildFly today, and migrate to JBoss EAP when you need commercial support, without much effort.
They are but aren't exactly noob friendly.
&gt;you just enable lazy programmers. I have seen some unbelievably shitty Python code. Especially when written by scientists or business analysts. However you still can write good Python that is clean, tested, etc. Its just not very common.
Why are you using raw pointers? Why are you so fucking stupid?
Well, in case anyone else comes along with the same problem, I found a solution here: http://stackoverflow.com/questions/18047843/cannot-search-for-artifact-in-eclipse-kepler-using-m2e-plugin I had to select "Download repository updates on startup" in Window &gt; Preferences &gt; Maven to fix it. 
A few things - the way you are instantiating the getNumbers map every time seems wasteful. Why not just make two maps that can be initialized statically? Also not sure why you are doing string comparison on the digits - I think you can come up with a more elegant solution using integers and modular math. Why is nothing marked as private? Do you need members for unit testing? The whole flags thing is pretty confusing - I'd been explicit and pass in a boolean named useFormal or something like that for ease of use and clarity.
The board is instantiated to all '' values. the stalemate only checks one value (instead of all values), which is '' then returns true. Stalemate function fails while loop. proceeds to check game win condition and since 3 '' values in a row pass and it's X's turn the Game is over! Cheers
I should also add, I only answered cause this was fun for me. You should learn good debugging skills as this would be easily caught with step through debugging. As I have no debugger I just walked through each line of code. Good debugging skills are more valuable than good programming skills.
Using smart pointers for a simple demonstration of memory allocation techniques is probably a little overkill.
Looks pretty decent, since you aren't modifying your maps and arrays at runtime I would make them into static fields and set them up with a static initializer block that way you aren't re-creating them every time.
Java is pretty similar in this respect. You can pass variables to a function by using `function(argument1, argument2, ...);` just like in MATLAB. For your purposes you would write `pace(hours, minutes, seconds, distance);` assuming you have already made the function and initialized the variables. If you want to use arrays just pass the array object as an argument `function(arrayName);` but I don't think this is what you're looking for.
Really? I need to get a pi now.
 final int[] myArray = new int[4]; // makes an integer array with 4 fields, all initialized with 0 final int[] myArray = new int[] {2, 4, 6, 9}; // makes an integer array with 4 fields and initialzes it with values myArray[3] = 8; // In both cases, you can change the fields 0 to 3 afterwards. myMethod(myArray); // calls a method (aka "subroutine") with the array; it's "pass by reference" like almost all method calls (exception are primitives like int, double, float, ... - but all objects are passed by reference) final ArrayList&lt;Integer&gt; myArrayList = new ArrayList&lt;&gt;(); myArrayList.add(2); myArrayList.add(4); myArrayList.add(6); // btw, this is not the mathematical "add" :) myArrayList.add(9); myArrayList.add(15); // ArrayList is often better than array because you can dynamically extend it. // You can call methods with an ArrayList just as well. Or with any other object type. void myMethod(final int[] arrayToWorkWith) { // method head for the first two examples // do stuff } void myMethod(final ArrayList&lt;Integer&gt; arrayListToWorkWith) { // method head for the third example // do stuff int aNumber = arrayListToWorkWith.get(0); // gets the first entry of the ArrayList } There are more possibilities, like e.g. the "..." syntax in method heads, but I'm personally not a fan of it as it feels too arbitrary to me, I prefer explicit statements.
A big thumbs up to using a EnumSet, using bitmaps is NOT good practice, almost ever.
* Why are your flag constants package protected? They should probably be public. * Since you have conversions that go up to 10^68 it would make sense to accept `BigInteger`/`BigDecimal` and not only `Integer`/`Double`. * The `to` functions takes a weird mix of arguments, for example `(Integer integral, String fractional)`, is there a use case for this? * I have not tested your code but the double conversion seems buggy. You subtract the integral part from the double without accounting for rounding errors and and the exponential notation (like 1e-4) will mess with the rest of the code. * protected static methods should probably be avoided. * The conversion itself based on strings is a bit strange. Do you have a specific reason to have used this instead of something based on integer math? * As others said you could store your symbols into constant arrays instead of recreating them each time. That said that's quite interesting that the Japanese have a specific symbol for 10^48 and a phrase for 10^68. Do you know why they need this? Is it religion-related? I know some religions try to enumerate all the possible names for their god and come up with some pretty big numbers.
Would it help if you thought of it in terms of an array? This approach also makes it easier to skip X chars if you found a mismatch on the Xth char. 
You need to add the button after setting the Layout and specifying a layout constraint like BorderLayout.NORTH. Just put your images in another JPanel inside the first panel, JTable is not very friendly to work with if you're not using things that can be represented as Strings, and you will have trouble getting click events on your items. That said I wouldn't choose a Java applet to write a new game these days. Java in the browser has a pretty bad rep and most people have probably uninstalled it by now. I think Chrome even removed support for the Java plugin entirely.
whoa, so the while loop is the problem and how would you go about on fixing it?
Yes. Generics currently work through type erasure, at runtime ArrayList&lt;SomeClass&gt; is just an ArrayList&lt;Object&gt;. For this reason, you cannot use generics over primitive types (int, double, etc). As the sibling poster says, this will change in a future Java version: you'll be able to create your own value types and create collections over value types. For the time being, if you need to have primitive types adjacent in memory, use arrays, or something like Trove: http://trove.starlight-systems.com/
That's part of a (growing) "software as a service" trend. Some of the big names's (Google's...) wet dream is that eventually we'll store all our data on their servers and use web browsers merely as containers for their apps. That way they'll control everything and know even more about us than they already do. In that regard they view HTTP as a generic data exchange protocol and not only to transfer hypertext.
If you are testing input validation, then I have a question: What if I say there are 'Steve' days in a month?
Unless your class has some sub-classes, protected keyword makes no sense in here. The whole concept is kinda cool! Actually it was fun to see some program that handles the translation between this kind of numerals. &lt;Double&gt;.toString() and &lt;Integer&gt;.toString() is not a good practice. String class has the right method to invoke in those cases. Keep up the good work ! 
BTW: to answer your question: there is (probably) no optimization going on. The important part is that IF you want to have such a feature you will have to change the semantics to copy semantics. E.g. arr1[10]=arr2[5] in C++ won't change the pointer it will copy the object (maybe you need to implement the copy operator before not sure) where in Java just the reference is changed so that actually both entries point to the same memory location (JVM won't be able to optimize anything). 
Have u ran your code against static code analysis tools? Eg. findbugs, pmd, cobertura, checkstyle. 
I'm really excited for the direction Java is going in with the proposals for structs and now primitive generics. Wowee!
Casual as casual sex?
I want to stay a kid forever.
https://github.com/hoesterholt/JRichTextEditor http://www.pilotltd.com/en/products/jword/ Have a look at these I've never used them though. 
Thanks. I will evaluate those along with standard swing one...
Honestly, any of those will be a boon to your CV, but I would highly recommend *not* just learning a single one. If you have 2 years, then you should be more than able to get a working knowledge of each (not to mention that there's overlap between them). Being a software developer doesn't mean knowing an API or library perfectly, but being able to pick up and use different tools for their intended tasks. I'm currently working in a very large enterprise company, and we've used both Spring MVC and AngularJS (we're quite happy with how AngularJS worked out in the projects). I know of several other companies that go with JSF. I would personally see more companies using AngularJS in the future, but Spring MVC and JSF aren't going to disappear.
Well, as I just realized, it crashes the program. Why doesn't the loop run if the user inputs a string?
Given your description, I'd reckon Spring MVC would be a good choice. It will serve as a good base to learn the round trip while working on both front and back end in addition to preparing you for tackling on Angular in the future. Spring MVC has great tooling for creating RESTful services, so it won't be that far of a stretch to leverage it in a couple of years and pick up AngularJS (or other similar tech) in the near future. Having said that, I'm more experienced as a JSF developer and would recomend JSF as well. However, after some years in the industry, I have a sense that the industry is slowly shifting towards RESTful back ends and fancy front end technologies. Given this, JSF will not go away anytime soon. JSF is great for enterprise development because it allows Java developers to build great looking sites (primefaces component library is a godsend) without having to know JavaScript in depth. Companies in the enterprise realm are more focused on functional sites rather than fancy consumer sites, hence JSF will suffice with the benefit of regular Java devs working on front end as well. Hope this helps.
I would go with JSF. It has a very active community and many external parties that directly support it (PrimeFaces, RichFaces, OmniFaces, many others). JSF is also very easy to pick up and you can easily get help at places like SO should you get stuck. JSF is also the fastest of the bunch and outperforms Spring MVC by a large margin while using less memory per request.
Is there any good tutorials for JSF and PrimeFaces? I am myself coming from JSP background.
jUnit
I changed the code a bit to... System.out.print("How many days are in the month? "); Integer daysInt = in.nextInt(); while (daysInt &gt;31 || daysInt &lt;28) { System.out.print("Maximum 31 days/Minimum 28. Re-enter."); daysInt = in.nextInt(); ...and it working as before with the parseint. I can't figure out a way for the loop to run if a string is entered though. I tried useing .hasNextInt() but I think I am missing a step somewhere.
There is no OR. Here's a new youtube turorial on Sping and Angular. https://www.youtube.com/channel/UCcawgWKCyddtpu9PP_Fz-tA/videos JSF is worth learning too. Just pick a sample project for yourself and build it.
Thanks for highlight. I am looking for something which will be actually an editor but it must allow me to strictly control what user is doing (changing lines, typing text, pasting) and to annotate those actions at the side... 
There are prrimitive list types in third-party libraries (e.g. Trove) that have the values adjacent in memory. Apart from that, it is possible to use Unsafe to allocate off-heap memory and cast the appropriate locations to objects of your choice. For more safety and convenience, we will need to wait until Java 9.
I recommend JSF. Spring MVC still has the most market share (it has been around the longest) but JSF is growing rapidly with new applications. I do not know a lot about Angular but I do not see a lot of demand for it professionally yet. It might take off but who knows. JSF is much simpler to learn than Spring MVC and because of it's component architecture you can develop rich web application much faster. You cannot go wrong really learning any of all of these. No one can really say which ones will be around in the future for sure. There are some nice tutorials for both Spring and JSF at the link below. https://netbeans.org/kb/trails/java-ee.html To get an idea what you can do with JSF look at the PrimeFaces demo below. PrimeFaces is a component library for JSF. It includes the code so you can see how to do it. http://www.primefaces.org/showcase/ 
If the component does not do what you want than you can just revert to good old HTML and JavaScript or JQuery or whatever you like. You can write a JSF app using all standard HTML if that is what you want as well. Other than some CSS cosmetic stuff I have not run into this problem in the last 5 years. JSF is not going away anytime soon particularly with how fast it's use is growing. There were very few JSF jobs when I started with it and now it is pretty common. Not to mention the huge user groups and many component libraries. This is now where close to all inclusive but here are some places using JSF https://wikis.oracle.com/display/GlassFish/RealWorldJsfLinks http://www.primefaces.org/whouses 
Learn JSF first. On the way, you'll learn lots of common java technologies like CDI, annotations, interceptors (maybe), injections, and JSTL. Very probably you'll need to use hibernate. It's fundamental in database java apps. Then you can learn Spring. I suggest you to also learn Spring- MVC, which uses a different paradigm of MVC than JSF. JSF is component-based, while spring MVC is action-based. AngularJS is well... *different*. Leave that for last.
I don't know what exactly this launcher can do - but I got up and running with http://launch4j.sourceforge.net/ (Free.) in minutes, and I can even choose to ship an already unpacked (quasi installed) JRE (or JDK) with the application. You get an optional splash screen (BMP) and can set the icon. (You still have to set the window icon of your application in Java.) The result is just an exe, that's all. (Optionally, you can keep the launcher and your jar separate.) I made that one application I used it with in Java 8 which isn't exactly omnipresent yet, so I created two packages: One with only the EXE, and another with EXE and a subdir that contains Java 8 JRE - I just copied my installed Java 8 into that folder, told launch4J to insist to use that folder, even if J8 is installed, and that's it. (Afterwards, I deleted all files with *jfx* from the subtree (Java FX) which saved me 45 MB.) The application with JRE does not need installation: Run it, that's all. In case the submitted launcher can't do this, you know what to use.
OK, you can listen in on all events and do whatever you want naturally, but this is no small job to implement, people can do all sort of things :-)
Or you could just learn angular and not bother with all the obsolete java tech from the last 15 years that you just listed and shouldn't be used anymore...
This guy speaks the truth.
This guy does not speaks the truth.
Scala.
http://www.amazon.com/Java-Program-Early-Objects-Edition/dp/0133807800/ Deitel's has plenty. __Edit 1__: and just to be clear, if you cannot get access to the 10th edition, but can to the 9th or 8th, I don't think there is a problem. __Edit 2__: I have the 9th edition, for example. Here are more or less how many exercises it has per chapter: - Chapter 1 - 15 - Chapter 2 - 35 - Chapter 3 - 17 - Chapter 4 - 39 - Chapter 5 - 32 - Chapter 6 - 39 - Chapter 7 - 38 - Chapter 8 - 18 - Chapter 9 - 8 - Chapter 10 - 13 - Chapter 11 - 22 - Chapter 12 - 19 - Chapter 13 - 6 - Chapter 14 - 20 - Chapter 15 - 32 - Chapter 16 - 28 - Chapter 17 - 11 - Chapter 18 - 23 - Chapter 19 - 10 - Chapter 20 - 21 - Chapter 21 - 11 - Chapter 22 - 30 - Chapter 23 - 13 - Chapter 24 - 40 - Chapter 25 - 16 - Chapter 26 - 11 - Chapter 27 - 23 - Chapter 28 - 9 - Chapter 29 - 5 - Chapter 30 - 4 - Chapter 31 - 11 - Appendix F - 2 - Appendix G - 13 - Appendix H - 30 There are appendices which are available on the web (I didn't check them to write this). The appendices A, B, and so forth, which aren't listed in that list, don't have any exercises.
Wow, that is just what I am looking for. Deitel is the same guy who wrote the C++ book I will be using this upcoming academic year so a book by the same guy is awesome. Thanks!
I've read the C++ one. I see nothing really wrong with it. The problem I have with Deitel's is the length of the book. It's freaking huge. You can go through it pretty quickly though.
Another alternative is [libGDX's packr](https://github.com/libgdx/packr#packr)
Thanks! I'll start reading this book as soon as I get home from work. I am astonished that Java: A Beginner's Guide is so popular. It has barley any problems to solve. I don't understand how it is possible to learn good programming practices without actually solving problems!
We also have native packaging built-in Java 8 which builds installers for win/lin/mac.
Learn how to do [REST with Spring](http://spring.io/guides/gs/rest-service/). Then learn AngularJS (or you could do it in reverse order). Then you can build your front end using AngularJS and supply the data from Java...
Wow this book looks great too, thanks. This looks like something I was looking for.
&gt; JSF is also the fastest of the bunch and outperforms Spring MVC by a large margin while using less memory per request. Do you have a source? Typically component frameworks such as JSF take much more memory and CPU per request
Site breaks hilariously with NoScript and/or RequestPolicy. Bad, bad web designer! No `border-radius` for you!
I work in a big company with hundreds of java dev, we use spring a lot. No one uses jsf, so I would recommend that. Plus I think spring is more versatile and mature.
Angular is client side tech. You'll need server side tech, and if that's going to be in Java, you'll need something like Spring MVC or JAX-RS.
I wouldn't mix plain jQuery with JSF except through a component library. f:ajax does not work the same way as JAX-RS or Spring MVC. Standard HTML elements (like h:form) also don't work the same way as pure taglibs. If you start pushing JSF more and more like a pure request oriented framework, JSF will fight back.
He should start from Spring Boot with Maven/Gradle if he decided to venture into Spring then learn AngularJS for the client side application: http://spring.io/guides/gs/serving-web-content/
Or JSF...
It's pretty obvious...your doing == comparisions to see if someone won. But your not considering the fact that you initialized the board with ' ' for every space (so thus they are all equal). So it thinks there is a winner because of all the blank space on the board. You need to exclude that condition in "won"
It's a well known fact that JSF performs really well. But just as Python fans keep cracking jokes about Java being slow (oh the irony, oh that lovely irony), fans of other frameworks keep saying JSF is slow. Of course they never provide any sources. You're now asking for a source, yet you make the opposite statement and don't provide a source yourself. Anyway, here's one source with some very hard figures; http://www.jsfcentral.com/articles/understanding_jsf_performance_3.html
Don't take it as a personal attack, but where did you learn your code style? I can see having a { dangling off a statement, but most people have a newline after a }, and not put a statement on the same line as }, as you do. Its hard to read, IMO. Anyhoo, I popped your code into Eclipse, and its saying there is dead code in your stalemate() method, and I indeed agree with it. Its in your j loop, you check to see if there are blanks, but you have an else that will quit the loop during the first iteration, no matter what. I also think the statemate logic is off by an inversion of what you're trying to do. Play around with that logic. You want to check the entire board to see if there is a space, and if a single space is found, there is no stalemate, but if none are found then it is. Other than that, I think there are more elegant ways of checking the win conditions, but work on those after your logic is solid.
Also, as a standard practice, ALWAYS close your I/O streams, like your Scanner.
I don't agree with you. When a component does not do what you want you don't use that component. That's like saying that java sucks since if a class doesn't do what you want you're just shit out of luck. Hey, guess what, you can customise existing components, swap out there renderer, inherit from them and override stuff, or just write your own one. Just like you do with Java classes ;)
in.nextInt() is throwing an InputMismatchException. You need to catch it and deal with it, e.g. like this: System.out.print("How many days are in the month? "); Integer daysInt = 0; try{ daysInt = in.nextInt(); }catch(InputMismatchException e) { System.out.print("Yeah, that's not a number"); in.next(); } Note that if nextInt() throws an exception then it won't return the faulty token so you can pick it up and process it in the catch clause. In this case we just discard it. If you'd used parseInt(next()); then the next() always works, but the parseInt() would have thrown a different exception.
I see that the AngularFaces exists, but it seems like it would only be useful for JSF developers who want to use Angular, not Angular developers who want to use Java. Angular developers will probably want to use JS, not Facelets. A more appropriate Java EE technology in that case would be JAX-RS. Also, I wouldn't use jQuery directly with JSF, but only through a component framework like Primefaces. I've tried this before, and it only results in an ugly mess.
Oh, I didn't know Angular could run server side as well? I don't know about that, but I do know that JSF can use Angular and that this usage of Angular will lead to Angular code being eventually executed on the client.
I am getting an error that says InputMismatchException cannot be resolved to a type.
Dude, just read oracle java tutorial then specialize on your need (eg. for web look for Spring Boot, for game look for JMonkeyEngine/LWJGL, etc, etc) Oracle Java Tutorial: http://docs.oracle.com/javase/tutorial/
Angular is a Javascript MVC client-side library. AngularJS code is written as static HTML and JS files. These can be generated by JSF, but then you're writing JSF code to target Angular, and no longer developing Angular code, which I don't think will be a popular idea.
I work in a big company with hundreds of java dev, we use JSF a lot. No one uses Spring, so I would recommend that. Plus I think JSF is more versatile and mature.
&gt; I wouldn't use jQuery directly with JSF We use jQuery directly all the time with JSF. Just saying... 
You will need to import it like you did with the scanner.
so would i need to completely change that "won" condition?or is there an easier fix?
We had "Java:how to program" or something by Deitel. Great textbook imo and a good amount of problems after each chapter
I know it's possible. I've done it as well. It's just ugly as hell (if you're doing anything complicated), and ultimately it's just better to use Primefaces or not use JSF at all. EDIT: The primary problem I faced was that f:ajax cannot be used outside of h:form and h:form cannot be nested (inner h:form do not render &lt;form&gt; tags - stop fighting me JSF!), leading to nastiness in the Facelet definition. On the other hand, pure jQuery AJAX calls could care less if they are being invoked from within a &lt;form&gt; tag.
AngularJS isn't really a competitor to JSF/Spring. It's a client-side framework for creating views using a REST backend. Spring/JSF aren't really views either because both will leverage something like JSP for it's views in a traditional app. Shops will most likely choose between Spring/JSF but AngularJS is an option for both. Spring definitely has the most market share and I don't see that [changing anytime soon](http://www.indeed.com/trendgraph/jobgraph.png?q=spring%2C+jsf).
I can't speak for the other technologies, but I just started learning JSF (Primefaces) for a project at work, and it's pretty easy to grok, and has some really cool features.
I think this paints a rather different picture where it concerns market share and popularity: https://mobile.twitter.com/edburns/status/474222543633539072
I'm currently doing work with JSR-311, and I don't have any experience with Spring, but it looks like the major issue is the dependency injection scheme...
It is no less efficient to use a wildcard import -- all those extra classes will only be loaded if they are used. The only problem you may run into with wildcard imports is a cluttered local namespace. For example, there is **java.util.Date** and **java.sql.Date**. If you import java.sql.* and need to use java.util.Date, you will need to refer to it by its fully qualified name: import java.sql.*; ... // this creates a java.sql.Date, which is not what you want Date d1 = new Date(); ... // this creates a java.util.Date, which is what you want java.util.Date d2 = new java.util.Date(); In cases like this it is better to import only the classes you need: import java.sql.abc; import java.sql.xyz; ... import java.util.Date; ... // this creates a java.util.Date, which is what you want Date d1 = new Date(); 
Good write up. I've considered finding good uses for **volatile** but like the Sonar warning, I'm not sure I can trust co-workers and posterity to understand what it means and continue its use correctly since its so poorly known in the industry.
JSF is 'on hold' at the Technology Radar by Thoughtworks.http://www.thoughtworks.com/de/radar/#/languages-and-frameworks. The Problem with JSF is its Stateful architecture and distance to the frontend technologies themselves. I would not waste my time learning it. Decoupled webapps with a separate frontend talking to the backend via rest api is the major trend. So if you want to learn Backend development, go for Spring (Spring Boot, Spring Data, Spring MVC, etc.). If you want to learn Frontend development go for Angular. It is booming, and it is very good. You should learn both Spring and Angular
Hi, I'm the maintainer, where is the typo ?
That's a good question, probably in the past using tuples was considered a bad practice because it allowed you to return two values without explicitly defining a class whose name would make the relation between them clear (Like ClientPhone, which could be defined as Tuple&lt;String,Integer&gt; or StreamFiles as Tuple&lt;InputStream, OutputStream&gt;). But yeah, they are really useful and should be added in the near future along with Either. If someone comes with a better explanation i'd like to hear it.
In a type safe language this is not a reasonable thing to do, that said I sometimes run into cases where I wish I could just return a tuple in Java. If I could return 2 different primitive types, like object and int or similar. At this point I resign myself to either creating a wrapper object for return or when lazy (and no one is looking), returning a List&lt;Object&gt; with what I need, knowing that the code will be hard to read and 6 months from then I will no longer remember what the tuple contained (which is why I prefer returning a composite object). TL;DR: If you plan on having readability and maintainability for the code then do it the right way and create a return composite object, if this is a one off that no one will ever see, use List&lt;Object&gt;. 
I would have written the JUnit version differently: public class AudioPlayerTest { private AudioPlayer audioPlayer = new AudioPlayer(); @Test void notPlayingAfterInitialization() { assertThat(audioPlayer.isPlaying(), is(false)); } ... } I don’t find this unreadable at all.
Okay, thanks!
&gt; if this is a one off that no one will ever see There is no such thing. The "temporary", "quick" "hacks" are the ones that survive the longest because everybody is afraid to touch them.
Hi, I'm the library author. I agree this is unneeded in most cases and will make performance even worse if wrongly used. However, the JIT is not a magic thing that knows about everything you are trying to do. If you type this command: java -XX:+PrintFlagsFinal -version | egrep 'C2|Inline' You can see there are numerous options for tuning the compiler, and especially there are several thresholds. For instance, let's take `MaxInlineLevel`: default value is 9, which means whatever happens no more than 9 nested method calls will be inlined. Now if you look at Collections.sort(), which delegates to TimSort, you can see it has a depth of at least 5/6 on its own, which leaves few room for your own code. Also, the usual advice regarding JIT optimization is "split your code into small methods", which goes against this. When hunting for the last bits of performance, it can be interesting to dig into this kind of stuff. &gt; JVM and Java language have been specifically designed so that application programmers don't have to be concerned with those details. Agreed, however IMHO it's never a bad thing to understand how it works under the hood. Also, the only thing the lib does is turning annotations into a config file. The JVM developers choose to add the `-XX:CompileCommandFile` option, so they think there is a use case for this, otherwise they would just have closed this door. 
Not really sure what you mean. Using plain jQuery or any other standard HTML, JavaScript or CSS mix just fine in a JSF application. The reality is that this will not be required very often but there is no issue. 
Learn AngularJS. It's the new hotness, and it's supported by Google.
The likelihood that I download an app for every website I visit at random is extremely low. Either the site is responsive and usable enough that I can visit and use it easily or it is clumsy and slow enough that I have little reason to bother - some would call that a bad first impression. 
I thought C++ added tuples. I'm pretty sure they had &lt;pair&gt; for a while. I don't think they have an easy way of unpacking them, though. 
Those are not mutually exclusive at all. Spring and AngularJS in particular play very well together. I'm not a fan of a component based architecture like JSF and would not recommend it. That's a personal opinion.
Not sure why this is getting down votes. Spring Boot and Gradle aren't bad things to know, though I would recommend having a solid understanding of the Spring framework and in particular the core IoC container first.
I like that you've maintained the seemingly contradictory advice in the second sentence.
That's a flawed comparison - JSF is purely the front end, Spring covers a lot more than that. Fairer comparisons would be: * [JSF vs Spring MVC](http://i.imgur.com/KYDsvxp.png) * [Java EE vs Spring](http://i.imgur.com/M0HWOuN.png) Although to show how out of date technologies in job listings are, there's also: * [J2EE vs Spring](http://i.imgur.com/XfgScu0.png)
&gt; I wouldn't mix plain jQuery with JSF **except through a component library**
Did you read your source? First of all, it compared Spring MVC with JSP, not plain old Spring MVC. Second of all, Spring MVC with JSP outperformed JSF, not the other way around. It had the fastest response time and the highest throughput.
I would and I am not sure what kind of issue you think there is. It works just fine.
It is flawed, as are most comparisons and polls. For example, one poll has "Javascript/HTML5" and "JSF" and "Spring MVC" as three separate options. Since when are they mutually exclusive? Spring has excellent support for building a backend that powers a Javascript/HTML5 front end. You could even build a Javascript/HTML5 front end into JSPs, I wouldn't recommend it but to present them that way is silly. Another has "Spring MVC/JSP/Struts". What? Spring MVC doesn't require JSP, and why are we lumping it in with Struts? All this really confirms is that: 1. A lot of people on these discussions, forums, polls, editorials, etc. don't know what the hell they're talking about. 2. There's a wide variety of request and component based frameworks being used in part or in full with web applications. 3. You should check them both out, understand their pros and cons and make up your own darn mind about what works for a given project.
"Lose semantics" with respect to what, two lose independent values ? I would say that it conveys *more* information by saying that they go together. You're not going to create a class for each use, often context only what a specific value means. For example `String` could be an address, a name, whatever. In this context using tuples is not worse.
I'm using resteasy included in Wildfly . It's very good combination. Spring is good, too but it's quite heavy framework. 
Well, to be fair, the numbers are buddhist in origin and from like the 1600s so
Java still works on Chrome. I know this because I use Chrome all the time and have little trouble with it. Should I just make the game a normal Java program instead of an applet? I am doing it in an applet for practice.
Here's an interesting view of how it does have them: "Java has tuples, but we can use them only as function's arguments and not for function's return values." 
Tuples are completely orthogonal to type safety, and you'll find them in basically any type-safe language with support for pattern matching, such as Haskell, Rust, the MLs, even Scala...
Haha! :P Yeah I did. The whole comment is a jest anyway ;)
Every company is different. If you so choose you could recommend to your employer using an onsite training company such as nTier Custom Solutions. We come out to your job site, as long as it is in the US, and train your team on whatever it is you requested. We do Agile, as well as Java, Linux, and many others. You can see more at http://www.ntiercustomsolutions.com/about/. We have been able to help a lot of companies with their software development and maybe it would make sense for your employer to seek out an option such as this one. Either way, we wish you the best of luck in your search!
For practice it's fine. If you want to make some money I don't really know, I guess you would try to target Android although the API for UI stuff is completely different.
If you have budget to learn more, instead of traveling you could have your training come to you. nTier Custom Solutions is a company based out of Atlanta, which is not too far from you. We specialize in software training and development in company settings. We come to your facilities and take whatever time needed to train you and your co-workers on whatever it is you want. Some of our services are provided at this link, http://www.ntiercustomsolutions.com/training-courses/. Conferences are a good experience as well. Whichever you decide to do, know that we are here at any point in time to help. Good luck!
He was basically just quoting the link(s), which was posted by some very smart people
This question in only relevant, if you are interested in how the java internals, classloaders and stuff works. In real life, if you write code, the IDE takes care of imports. I don't even remember the last time I typed an import statement. It was probably years ago.
* Make your constructor private and your class final, since this is a utility class. That makes sense to me, and is being done. * Make your constants public, but better yet, create an enum for the flags and pass an EnumSet to methods which need them. This was an error, they should have been public. I'm looking at enum set and it essentially boils down to two booleans. Is it better to just have these as parameters in the more final to() function? * As other commenters said, don't re-generate your tables each time. You can initialize them in a static { } block. Most of the time this class is hopefully only instantiated once, but if it isn't, the options might be different, and the tables are generated with different values depending on those options... * Decompose your long to() method into smaller helpers. Reasonable.
I'm not exactly sure what you're getting at here. While I respect some of your comments in other threads (incidentally about the same topic), this one seems confused. First of all I was not talking specifically about AJAX, just jQuery in general which I use all the time for looking up elements by selectors, copying stuff all over the place etc. Can be done using the DOM APIs, but jQuery is just more elegant. The h:form that cannot be nested inside another h:form is not a JSF limitation but an HTML one. In HTML you can't nest a form inside a form. Plus, you can still do pure jQuery AJAX calls if you want. JSF handles HTTP request and doesn't care if the request comes from a full page request from a browser, a pure jQuery piece of code on a page, the curl or wget commands, or whatever. There's an example of a jQuery "AJAX" call between one of the OmniFaces examples here: http://showcase.omnifaces.org/components/componentIdParam (but again, I wasn't referring to this specifically, just about jQuery in general)
Yes, it does (well, sort of). javatuples, we use it all the time. http://www.javatuples.org/
&gt; In a type safe language this is not a reasonable thing to do It can be perfectly reasonable if the tuple is typesafe as well. For example, the [Ceylon programming language](http://ceylon-lang.org/) lets you write “a tuple of an integer and a double” as `[Integer, Double] id`. “Two Characters and then at least one String” is `[Character, Character, String+] ccs`. And all of this is completely typesafe – `id[0]` has the type `Integer`, `ccs[1]` has the type `Character`, and `ccs[5]` has the type `String?`, which is an abbreviation for `Null|String`, which means “the type `Null`, or the type `String`”. Perfectly typesafe and reasonable.
Servlet containers initialize the filter in their main (or other non-request handler) thread while requests are server by request threads. There's no guarantee that request threads will see the initialization done by the main thread. Hence without volatile there's a possible race condition. Because some containers use either synchronized or volatile in their initialization, this could not be a problem as a side-effect of their implementation. Other containers might handle things differently.
To be honest, Sonar is an aggregation of a bunch of static code analysis tools. Some of their rules are useful for red flags in code, some are more style related. The tool is pretty useful if configured well. That said, I see most usage of the tool with mostly its default ruleset. Like I said in the article, rules that discard language capabilities without any reasonable alternatives should not be used. This is not really about Sonar, although they could provide a better default, or maybe none at all.
&gt; and it's supported by Google Oh yeah, that worked out great for GWT didn't it? 
Thanks. I would agree that many of the people I meet don't really understand concurrency. Some of them don't even think of web apps as concurrent systems. Preferably these people work closely with experienced programmers who do understand. Sadly I don't often see that happen.
The SPA approach does not preclude making a site that's responsive in any way, and frankly, for a simple site it really doesn't matter how it's built. There's absolutely no reason why you should get a bad first impression from a site written using Angular. However, many web applications are much more than simple websites. When you deal with something like FB or Gmail it's an actual app and no matter how responsive you make it, it's going to provide a shitty user experience compared to a native application. 
Tuples are structs with anonymous members. They are typesafe but in public APIs can be really ugly. Of course, they are cool in return positions with arity &gt; 1 and they are handy in local scope for pairing data but still ... if they are exposed in public APIs things can get really messy.
&gt; Every modern shop uses Spring MVC with Thymeleaf No, just no. A "modern" shop uses a Javascript/HTML5 front end that can be cached and distributed via a CDN, not an outdated server-side templating engine. &gt; As you can see from the performance numbers, Spring MVC with the modern and most often used Thymeleaf Well, first of all, this "every modern shop..." nonsense is just that, nonsense. Second, comparing Spring MVC to JSF is different than comparing Spring MVC with Thymeleaf to JSF. Your original post didn't even mention Thymeleaf. &gt; Now you can improve performance with Spring MVC by using JSP. Except that nobody wants to do that anymore. And then plain Servlet (with or without JSP) still beats everything, but that's also something nobody wants to do anymore. Or you could eliminate the obsolete templating engine entirely and use Spring MVC as a web framework instead of lumping in other frameworks that are related at best. &gt; JSF always wins the memory benchmark, and wins the response time/throughput when both use a similar rich featured templating language." See above.
&gt; not an outdated server-side templating engine. Yeah, right! server-side templating engines are not outdated by a long shot pal!
Can anyone ELI5 Tuples? I came across them in python, but I don't understand their structure or use.
&gt;A "modern" shop uses a Javascript/HTML5 front end that can be cached and distributed via a CDN, not an outdated server-side templating engine. That's YOUR opinion. One of your Spring MVC friends below just said the following: &gt; I'd go with Spring MVC but would replace JSP with a natural templating engine like Thymeleaf to inject your models into plain old HTML. You can have all the opinions of the world, but the fact is that I see tons of shops using Spring MVC with Thymeleaf. There are also some who use it with JSP, which are generally considered old fashioned as your buddy below mentioned. &gt;Your original post didn't even mention Thymeleaf. Which original post??? &gt;Spring MVC as a web framework instead of lumping in other frameworks that are related at best. Do you even know what you are talking about? It's not "lumping in other frameworks that are related at best". Spring MVC naturally uses JSP, Velocity, Freemarker or Thymeleaf for its view rendering. If I'm not mistaken most Spring MVC books and the docs pretty much have that in their introduction. If you only return JSON from Spring MVC, which I guess you're aiming for here, then I wouldn't bother with Spring MVC at all and just use JAX-RS directly. &gt;See above. There's nothing to see above. It's clear that JSF wins the server side templating on most parts, which was what the source benchmarked. Now if you want to compare performance against Spring MVC without a server side template you can't just look at the server responses. This is a classic mistake. You now need to look at both the server response time AND the client processing time. To really compare apples to apples you also need to do this for the Spring MVC + Thymeleaf case, but we all know that a ready to render HTML response renders MUCH faster than a JSON response that still needs to be processed by the client. Why do you think Twitter went back to server side templating? The initial time to display a tweet is just much less. 
If you are actually passing raw String objects throughout the code, then I think you certainly could benefit from using simple wrapper classes, so that it's clear that your method takes an Address, not a Name, and so you don't end up with a method that takes 3 String arguments, meaning you have to make damn sure you pass them in the correct order or your program will fail in non-obvious ways at runtime. Similarly with tuples, `Pair&lt;Integer, Integer&gt;` is so much less meaningful than `Point`, and also harder to change if you have to. It's a shame writing simple wrapper classes in Java is so verbose, or we might be less tempted to use tuples.
 public class Tuple&lt;A, B&gt; { public static &lt;A, B&gt; Tuple&lt;A, B&gt; of(A a, B b) { return new Tuple(a, b); } private final A a; private final B b; private Tuple(A a, B b) { this.a = a; this.b = b; } public A getFirst() { return a; } public B getFirst() { return b; } /* * Add equals(), hashCode(), compare(), etc. */ }
And [this one](http://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-for-2014/) says I'm right. I've been in industry for about 15 years and most of it consulting so I've been in and out of many IT departments in many industries and have never even been asked to evaluate JSF. If it's not Spring, it's not Java. I'm not saying that makes it bad, just I'm extremely dubious that it has a significant market share. I also am suspicious that every time I report my honest observations about JSF or JEE I get downvoted. 
Java 8 has Pair&lt;S,T&gt; built in to FX. 
&gt; That's YOUR opinion. Are you saying "every modern shop uses Thymeleaf" isn't an opinion? &gt; Which original post??? I apologize, I mistook you for the one who posted the link and made the claim. &gt; Do you even know what you are talking about? Spring MVC is a web framework. JSP, Velocity, Freemarker and Thymeleaf are all separate frameworks. Due to their popularity integration is provided out of the box. That does not make them part of Spring MVC, nor integral, nor "natural" per se. The fact is Spring MVC doesn't even *require* a view resolver at all, nor is it limited to rendering HTML. You're adding a constraint that is not an inherent part of the web framework itself. If you want to know why a book chose to use a particular view renderer for an example I suggest you ask the author. &gt; There's nothing to see above. It's clear that JSF wins the server side templating on most parts, which was what the source benchmarked. That's true, it's also not what the post I replied to claimed. Regarding server side vs client side. Where the content is rendered is orthogonal to how it is rendered. A Javascript framework can still be used to render server side. What is better, or even faster, depends entirely on the constraints of the project and the clients using it. My point here is that a blanket "JSF is faster than Spring MVC" is misleading at best. Regarding the original question (which to learn?) as I mentioned elsewhere: look into both and make up your own darn mind. Any of them are going to help a resume.
This is a personal and subjective opinion, and not a reason why Java doesn't include them. As a C++ dev, tuples are highly useful when used correctly and can actually add semantic meaning by saying these few things belong together, even if its just temporarily. As well as that, the code is easier to read, not harder, because you know this set of values are grouped together and you don't need to keep track of them all, just the tuple. Of course, tuples are not a 'use-this-everywhere' concept and there are better alternatives to tuples in some situations. You need to recognise when to use them and when to use alternatives, but in the right situation they are quite powerful.
One of my favorite eclipse features is the auto complete. Type in "main" and press Ctrl + space. It will speed up development a lot if you learn an ide's full functionality
If you are really insistent, you can return a n-tuple as an Object array. Object[] tuple = new Object[2];
damn, C++11 still looks ugly. Doesn't it make more sense to just use auto to define the tuple and then define the left and right parameter using auto as well: auto t = set_of_s.insert(value); auto iter = std::get&lt;0&gt;(t); auto inserted = std::get&lt;1&gt;(t); instead of this: std::set&lt;S&gt;::iterator iter; bool inserted; std::tie(iter, inserted) = set_of_s.insert(value);
Oh. That's super simple. Cheers
And Scala
&gt; quite heavy framework Which is an ironic statement to make given Spring's beginnings. 
You can return an immutable map with 1 entry.
&gt; Is it an argument of authority? The arguments in that link present a clear argument against Tuples. You're argument has simply been * I, for some reason, don't want to create a class or * it may not be related content. In the first argument it's not maintainable code, in the second it's a violation of seperation of concerns. Using a decent IDE like eclipse it's a simple matter of: return new UnrelatedPair&lt;String, Integer&gt;("foo", 2);&lt;Ctrl+SPACE&gt; and it will pop open the new class with boilerplate. Also you could just add a maven dependency of one of the libraries that has support for it, but at least it's not soiling the core language.
I'd agree, in general tuples in Java don't make sense. However, I think `Pair&lt;A, B&gt;` and possibly even `Triple&lt;A, B, C&gt;` are reasonable abstractions. They do still hide the semantics of members, and you do obviously lose type information, but they're no more susceptible to abuse than any other language feature or library. I personally think there are more places where two and possibly even three of a thing are natural than not.
I'm planning on having it as an application that I'll use fairly often, so I suppose I'm going to use it for multiple sets of data
what's .add() do? also is it possible to have variables within the array and call on them later?
hm, in that case you could ask for the user to input the values each time you/they execute the program. do that like this import java.util.Scanner; public class SomeClass{ public static void main (String[] args){ Scanner sc = new Scanner(System.in); System.out.println("Enter Hours"); int hours = sc.nextInt(); System.out.println("Enter Minutes"); int minutes = sc.nextInt(); System.out.println("Enter Seconds"); int seconds = sc.nextInt(); System.out.println("Enter total distance"); double distance = sc.nextDouble(); System.out.println(calculateFunction(hours,minutes,seconds,distance)); } public static double calculateFunction(h,m,s,d){ //Do the math return product; } }
Given bean conventions and their widespread use it's a wonder to me there hasn't been any syntactic sugar for defining and documenting them.
&gt; In a type safe language this is not a reasonable thing to do Nonsense, Scala and Haskell both have them. You can still define the types of the items in your tuple. 
I write "not going to create a class for each use" and people seem to understand "never create a class". I'm pretty sure you're using lose Strings here and there to store values inside a function for example. In that context a tuple to associate 2 values that go together does not seem like an outrageous violation of typing rules.
I never liked that argument... Should we then also change the API to have a class TelephoneDirectory, instead of using a general Map&lt;String, Integer&gt; because the latter lacks semantics?
Java 7+: new Tuple&lt;&gt;(...) Other than that, yeah, sure it's a little verbose, but even syntactic sugar like (String, String) wouldn't be that much shorter. Adding that to the language would be easy but probably it really is a Java-culture thing of preferring more explicitness (in terms of meaning).
I'm one of the few who prefer to write code using the wildcard import, simply because I work faster. Here are my reasons: 1 - It's one thing less to worry about when merging code 2 - I don't need to invoke "organize imports" on my IDE and pick between "java.util.List" and "java.awt.List" in every class where I replaced "Collection&lt;T&gt;" with "List&lt;T&gt;". It is very common to have other classes from "java.util" in almost every class you write anyway so having a wildcard import there won't hurt. 3 - You can't import java.util.Date and java.sql.Date then write code like "Date d = new Date()". You MUST write "java.util.Date d = new java.util.Date()" anyway if you have both imports. 4 - It affects readabilty for me. Every time I open a java file and see a hundred lines of explicit imports, I have to skip a block of text that I won't read anyway. 5 - If I modify a class to not use java.util.List anymore, the import line will appear on the diff before committing. It will also show up for anyone reviewing the code, with no added benefit. It is just extra, irrelevant information, that my brain has to discard. It bothers me to no end. Edit: 6 - Unusued imports generate warnings. You may be disciplined enough to clean up after yourself but on a team with more than a dozen people you will see plenty of them. 7 - One day you decide to organize the imports and have to commit 200+ classes at once, possibly causing some merge conflicts on the process. Addtionally, these commits contain essentially just noise and nothing useful. To me all this is just a waste of time that can be eliminated simply by deciding to use imports with wildcards
&gt;Spring MVC is a web framework. JSP, Velocity, Freemarker and Thymeleaf are all separate frameworks. That's IMHO really, really pushing the definition of framework. The docs and places like wikipedia all call them templating engines, which is what they are. When not using Spring MVC as a glorified JAX-RS, you need a templating engine. From anecdotal evidence (I've seen quite some shops) I would say that Spring MVC is most frequently used with a templating engine. You don't outright say it, but your entire tone suggests it's somehow weird or ridiculous and out of the ordinary to use Spring MVC with a templating engine, and that "normal" usage is to let Spring MVC return only JSON. As said, I don't think this is the case. Therefor for the blanker "JSF is faster than Spring MVC" we can pretty much assume it's about the standard use case: JSF with Facelets, Spring MVC with Thymeleaf. Yes, as we learned JSF can be used with JSP or even with Angular, Spring MVC can act as if it's JAX-RS, there are a couple of alternative templating engines for JSF, but these are all not that common. 
I agree that it loses meaning if your tuple is of, say, &lt;Integer, String, Double&gt;, however, if it is something like &lt;Person, Car, Account&gt; I don't really see the problem. 
Tuples works fine if your talking about Tuple&lt;Person, Account, Building&gt;, not so in your case.
Seriously? Posting a restricted page?
I think persistent state vs. temporary value is important here, as well as public API vs internal to some class. For public APIs, having TelephoneDirectory is just good future-proofing, vs. a bunch of classes having references to a single Map, which just calcifies the data structures. As a temporary value, Maps are also quite useful for packing up values to pass to a method or return from a method, and then unpack on the other side. Using a Map usually means you're pulling in some fundamental [invariant from the real world](http://en.wikipedia.org/wiki/Cardinality_(data_modeling\)), so these method signatures are usually self-evident. Pair does pretty poorly in all of these cases. Of note, using Pair&lt;A, B&gt; (vs Pair&lt;B, A&gt;) means taking the complicated relationship between A and B and reducing it down to an ordering when there's usually nothing fundamental about A or B that makes one go before the other. This works alright in some languages (more functional ones), but not when you have to deal with getFirst/getSecond.
Of course I read that source! What is plain old Spring MVC? But read the thing yourself carefully. Spring MVC/JSP takes more memory than JSF, which was the main argument remember? You convenient didn't remark on that, did you? And Spring MVC/Thymeleaf takes both more memory and CPU. You're reading a bit too selective if you'd ask me. Selecting the one and only case where Spring MVC wins and then implying I'm some sort of fool for not reading my own link? :/ 
Sorry. It works for me. Maybe try the link without the parameter at the end. http://www.oraclejavamagazine-digital.com/javamagazine/july_august_2014
this is for subscriber only, so log out and try yourself.. or you using access of your facility
That tweet refers to a dozen or so sources. One data point has Spring MVC as the winner, and therefor you immediately conclude that you are right? :X By the same token I could just pick a random other data point where JSF wins and declare that I'm right. It just doesn't work like that. At most we can conclude from the sources that there is no clear winner. The market is just very divided and data points are inconsistent. As per the post we can only create some segments and then we see that both JSF and Spring MVC are always in the top segment and something like Tapestry is always in the bottom segment. Declaring yourself winner based on one data point is really desperate and it looks like you're desperately trying to turn a blind eye to reality. In your little world it may be unthinkable that JSF is so popular, since all your friends among each other always agree on how great Spring MVC is, so the entire world has to use only Spring MVC? Sadly for you your own bubble doesn't change reality.
Sure thing although it never states when the container creates its request threads or that the initializer threads leaves a synchronized block (although this is likely) after the init is completed. For the latter to guarantee visibility the request threads must enter a synchronized block after initialization (which I think is unlikely). The way I see it this opens the race-condition of (some) request threads not seeing the initialized value. Using volatile fixes this race-condition.
I received the link via email and I remember I had subscribed a while ago. I think you might need to subscribe via email or if you can't I can send a pdf link
How does it compare with Dropwizard?
If only Java had value types, wrapping a couple of references in a class with the overhead as big as the members itself is quite painful to do :(
Preferences -&gt; Java -&gt; Appearance -&gt; Type Filters, add packages you want excluded from hints :)
I think that's different amongst the different departments, though I know I'm going in somewhere using SVN, which is fine. Thanks for the tip though!
Scala has some really nice options for testing (ScalaTest), and it's got seamless integration with Java/Maven stack. This way you could maintain the Jasmine style of testing. 
Very cool. I can write some old skool apps again!
Hibernate Is Fundamentally Broken. FTFY.
2011 article
Even then, it would take 10 seconds to write the POJO to hold them. What does that tuple represent? PersonInformation? Then say it so, and get on with it. 
ArrayList&lt;Object&gt; tuple = new ArrayList&lt;&gt;(2); Don't worry, I kid.
i dont think they are fools. state IS bad on server side. state does not scale, state produces unnecessary complexity. i dont get why anyone would want to use jsf, jsp, gwt, vaadin, zk or asp, even though i know and did use some of them. it really depends on what you are doing, but for many cases these frameworks are just painfull. for frontend development all you really need is html, a css preprocessor, javascript or another script language that compiles into javascript, and a javascript mvc framework like angular. add dependency management, build tool, and tests, and you are top nodge.
First off, I'm still getting downvotes for honest opinions and factual observations. So fuck whoever is doing that. Secondly, that link from twitter is a mishmash of 3 year old German online polls and misleading keyword searches. No one posts job listings or questions for Spring MVC, they just say Spring which [blows Spring MVC or JSF out of the water](http://www.indeed.com/trendgraph/jobgraph.png?q=jsf%2C+%22spring+mvc%22%2C+spring). The ZeroTurnaround survey was actually a professionally conducuted survey of over 2000 IT professionals from just a few months ago. [ThoughtWorks says to avoid JSF](http://www.thoughtworks.com/radar/#/languages-and-frameworks/jsf). My own eyes and ears say there is no buzz around it in any industry vertical or horizontal that I'm involved in. I know it's used in a significant number of shops since even ZeroTurnaround says it has 21% penetration, I just haven't seen it.
But valid again since the associated issue just got closed and the problem was never solved. It's as valid today as it was in 2006 and as it was in 2011.
&gt;Secondly, that link from twitter is a mishmash of 3 year old German online polls and misleading keyword searches. I looked at it, and I see a list of pretty much every survey that was conducted over the last few years. Just using Spring is incredibly misleading, so I don't agree with your indeed.com link. Spring is so much more than just Spring MVC. I've seen tons of places that use JSF with Spring. It's not for nothing that there is a Spring beans EL resolver for JSF available. And MY own eyes and ears say that JSF is everywhere! Every other survey, poll, keyword search or whatever puts JSF at one of the top spots. Many places I've been to have experience with JSF. There are tons of 3rd party extensions, books, talks, etc about JSF. I think you're getting downvotes for stubbornly imposing your own reality distortion field where JSF is a minor framework that nobody uses. I don't see any of the JSF users denying that Spring MVC is used a lot. I wonder why you so much feel the need to spread FUD that JSF is a little unused project? 
Old school? Midnight Commander (or Windows Far Manager) is still the best, most efficient way to manage your files. It's a combination of command line and GUI offering the best of both worlds. Also, concept of "current directory" which is lost in most todays GUI apps makes life so much easier when you want your files in some place that isn't "My Documents" or "Desktop". Well, I guess you could have GUI apps while preserving same concepts of "current place" and command line, but I don't see that being done.
So this issue appears to be part of a cleanup. If the issue is still present on ORM 4 then you'd need to re-submit the issue with some example code or other things as mentioned in the comments of the issue. I don't see this as a big deal.
you could do it with byte code manipulation...but i don't think it is worth it. animal.getDog() will throw an exception if animal is null....the only alternative would be to wrap animal in some object which can provide a proxy (reflection). then do the null check in the InvokationHandler in your proxy object.
Never heard of Thoughtworks but they also recommend using Go and Scala. Those are not exactly high market share options. You are getting down voted because you are linking to a site with little credibility as evidence. Who even knows what they mean by hold and why it is lower than trial? 
From that if statement you provided, try { if (animal.getDog().getBone().getType() == "rawhide") // Although, .equals("rawhide") is what you should be using { // Do something } else { // Do something else } } catch (NullPointerException npe) { // Do something else } would have the same effect, since you aren't implementing specific cases for where the null pointer is.
A proposal was made to put a feature like this into core Java, but it did not make the cut for Java SE 8. http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/000047.html If it had, you would have been able to say if(animal?.getDog()?.getBone()?.getType() == "rawhide")
State is fantastic and a huge time saver if you are building web applications. When you have forms with lots of validations it makes life easy. If you want to make things more difficult you can just use Stateless JSF and do the extra work yourself. Now if you are building a web site it is not as important.
causing an exception to throw is very inefficent.
Infinispan can substitute as an L2 Cache for Hibernate and uses serialVersionUID to update/invalidate/refresh entities. Edit: Also, am I the only one that thinks updating a relational entity in-place in a clustered/cached environment is poor practice? You'll never update the web servers/ backend / objects / cache cleanly. Why not add a new entity and move to it instead? If you'd rather do in-place upgrades of existing 'table' schemas in production, use NoSQL.
was actually pretty close. I did not use your result variable though, since I want to break the loop directly anyway, else you still loop through your array even though you already found your result. http://pastebin.com/ACHQvR3Y
Ohhhh okay, so I see.. You're saying that the if statement enclosed in the for statement doesn't need to reference the array since the for loop already does that, is that right?
If anything, it's less cluttered even, as you're forced to provide a good description in the names instead of writing out the whole phrase like in Jasmine
That's what I do in java. But in C# it is a real temptation to use Tuples when you suddenly want to return two objects from one methods. I guess this is why the Java folks haven't added it.
ThoughtWorks has a pretty huge reputation in the industry. Martin Fowler is their main Java evangelist. He popularized the terms "Dependency Injection" and "Continuous Integration". Their tech radar is not about what's popular, it's their opinions of the viability of the technologies based on their experience. I'm starting to suspect that Spring and JSF exist in different spheres which is why both sides seem to think the other is irrelevant. I'm not trying to be dismissive or derisive in any of my comments, just calling it like I see it.
Java doesn't really have any nice syntax for this (like the null-safe traversal operator, like /u/JustinKSU's example). Although it might be worth thinking *why* you are doing this kind of deep traversal and whether it is actually necessary. Think about applying the [Law of Demeter](http://en.wikipedia.org/wiki/Law_of_Demeter), and structuring your objects such that this kind of deep traversal is not necessary. A paper on the subject: [The Paperboy, The Wallet and The Law of Demeter](http://www.ccs.neu.edu/research/demeter/demeter-method/LawOfDemeter/paper-boy/demeter.pdf)
Ah that would have been nice.
I don't quite understand the series of null checks you used, since you'd be doing something wrong if you have to chain method calls like that. I hear once in a while to avoid null checks, but in many cases (like in binary trees) they are necessary, and having a NullPointerException being thrown is an error, and they shouldn't be caught. I suppose you could have something like you suggested: public static &lt;T&gt; boolean isNull(T object) { return object == null; } As for the method chain, that would also work with the method if getType() returns some sort of Object.
Or, I believe, you can use animal != null &amp; animal.getDog() != null The single &amp; means it will not perform the second check if the first one fails... Can anyone confirm deny this?
Part of the reason is that these sites were designed by groups of 6-12 devs. I am just supporting them. As awesome as it would be to restructure them; I don't think they would allow me that much time to rewrite them. A lot of them have Java beans backing the websites. Those beans do database calls, timeout after so long, take user input, etc etc. They also communicate between quite a few different systems; old and new. Some of those communications will get FTP errors and things like that and break. It is more of the situation where the company doesn't want to re-write/re-do an entire system that works vs making a minor 40 minute change here and there. :(
Not really. If its a subclass of RuntimeException, there really isn't anything you can or should do. If its a subclass of Exception, it should be thrown until it makes sense to catch it. Any exception, as the name implies, is some exceptional case and is generally ignored in efficiency calculations.
Every thread talking about Spring vs JEE results in negative votes for Spring and positive for JEE. I honestly suspect astroturfing by Oracle is going on. The JEE folks seem to take this very, very personally.
In Java, the &amp;&amp; is short-circuiting. And the single &amp; is the bitwise-and and does not return a boolean.
In java...generating the stack trace for constructing the exception is expensive. I agree, it is not normally included in efficency calculations. But if you end up doing this a lot, I garuntee you will find it in performance profiles (assuming the application is performance sensitive).
You don't have to rewrite, you can refactor. Introduce methods which encapsulate data access patterns. If you don't have support for this, well, and all you can really do is patch the code, then you'll have to use the &amp;&amp; chain.
Ah ok, thanks fr the clarification! I'll show myself out... 
I guess I don't understand why with the rise of Android and basically needing java for that unless you want to try using things like Kivi and pysyde and pyqt to make it cross platformed. I don't know what to call the wrapper portion to make it cross platform sorry. Anyway. for someone new to programming like me I can't make sense of it either I can do some Python, but now well enough to venture into Kivi and all that to make the GUI's I want. Am I crazy to think that learning Java from get isn't just easier for mobile development, and that mobile and cloud is where we are heading? 
Ah, please, not that again. It's getting stale. Spring fans are just fans, while Java EE fans are astroturfers? Ever thought of the possibility that there may be a few more Java EE fans here? Spring fans are doing the exact same thing. I saw more than a few comments that were pro Java EE being downvoted, then later they were upvoted again. As mentioned, there's A LOT of downvoting and upvoting going on from both sides. Java EE just outnumbers Spring here. If there were just a few Java EE fans less than I'm sure all the Java EE comments would be negative and the Spring ones positive. Please... pot and kettle, y'know? 
Read [this](http://docs.oracle.com/javase/specs/jls/se8/html/index.html) if you want to have a good time.
No need. We are all here to improve ourselves and learn (I think). Plus admitting and accepting when you are wrong is a good skill to develop; especially when you do it so gracefully. I think everyone could work on that a little bit :)
Value types are being worked on: [State of the Values](http://cr.openjdk.java.net/~jrose/values/values-0.html). There will probably be more about the plans at JVMLS in a couple of weeks.
You, sh0rug0ru and daedalus have a history of always hating on Java EE and JSF and applauding everything that's Spring. In every thread it's the same thing over again.
Being pro-Spring isn't equivalent to having nothing in your comment history except shilling for Spring. There are several users who contribute nothing to reddit except undying support for JEE. There no users doing that for Spring.
Your tutorial seem a bit outdated. Thought, if you never used Eclipse for a small&amp;quick project to understand how it work, you may consider using Android Studio, since the learning curve should be a bit easier.
Which version of hibernate is affected by this?
Actually still no advantage over the JAXRS compliant library but from next release cuubez will hope to give very unique API monitoring feature. You're absolutely right still cuubez is not fully compliant with JAXRS but definitely in future it will fully compliant with JAXRS.
Hmm, alright, I will give that a try, but I am supposed to use Eclipse at some point right? I just can't seem to install it. I downloaded this http://developer.android.com/sdk/index.html#download Then I got an error that a JRE was missing. He needed to find a DLL in a Bin folder. Okay so I downloaded jre8. Put it in the folder I downloaded. Renamed it to ''jre'' so it could find the correct path Then I get the Shared Library error, all the freaking time. I searched the internet and it said that I should have every program the same bit version to fix this, but everything is the same!!! aaaah im frustrated
I'm actually building something with this right now. It's a little bit limited in terms of flexibility with the API, and multi-threading is painful. Overall though, if you keep things simple it's not too bad.
Btw I get that error whenever I try to run Eclipse
There have been a lot of tools for "templates as code" coming out in recent years. So far I've liked Groovy's [MarkupTemplateEngine](http://beta.groovy-lang.org/docs/groovy-2.3.2/html/documentation/markup-template-engine.html) and PlayFramework's [Twirl](http://www.playframework.com/documentation/2.3.x/ScalaTemplates) the best. Even with Lambdas, I really don't think Java is expressive enough to pull this off elegantly.
In Java 8 this should work... Optional.ofNullable(dog) .map(Dog::getBone) .map(Bone::getType) .ifPresent(/* do something with type if everything is non-null */);
&gt; And the single &amp; is the bitwise-and and does not return a boolean. That's not true. The non-short-circuiting counterparts can also function as logical operators when used in a context where it makes sense.
I (the author) think I pulled it off elegantly:) This is not just another hobby project. It is very carefully designed and implemented. I should write an article showcasing the merits, but basically - - The syntax is intuitive and consistent for adding elements and attributes. The most ugly part is actually the lambda cruft `()-&gt;`. - Elements and attributes are standard compliant. - This builds a tree, which can be modified in flexible order, e.g. adding a css to the `&lt;head&gt;` element later in the code. - Tree nodes can be custom components. - In pure Java:) 
[Coherence](http://docs.oracle.com/middleware/1212/coherence/COHIG/usehibernateascoh_n.htm#CJHBDIFB) can act as a L2 cache provider for hibernate and has [evolvable](http://docs.oracle.com/middleware/1212/coherence/COHJR/com/tangosol/io/Evolvable.html) objects which supports schema changes. Would that work in your situation?
It looks great! 
Do you mean you have created an applet and now wish to share your genius with the world via the internet? 
Try uninstalling all versions of java you have, and then redownload and reinstall.
I am so stupid, I thought x86 was 64 bits... nevermind, I fixed it and I can run Eclipse now.. Thanks anyways man, I will try out Android Studio
This is what Groovy does. There's a few more cool syntax things Groovy has. Here's a default initializer based on a shortened ternary operator &lt;boolean expr&gt; ? &lt;truthy-expr&gt; : &lt;falsy-expr&gt; def animal = userInput ?: "dog" If &lt;userInput&gt; is not null, the variable is initialized with userInput, otherwise it gets the default. The expr needed between the ? and : is dropped for truthy and just the initial expression used to evaluate the boolean is returned.
Crisis averted!
IntelliJ @NotNull annotations. http://www.jetbrains.com/idea/documentation/howto.html 
Don't get me wrong, I think this is great. I've already shown it to coworkers and we all agree that this is a fantastic tool for pure-Java templating. "Elegant" was a poor word choice on my part. All I really meant to say is I'm looking for a template language that and 1) gives errors and warnings at compile-time, and 2) looks and feels like the markup language. Pure Java excels at (1), but you can only go so far with (2). Here are three examples that produce identical output which I hope will illustrate what I meant to say. Each builds an unordered HTML list from a collection of Car objects, with each Car object having a make and model. (Full disclosure: I didn't test any of these, or even make sure they compile) Pure Java: public class CarList extends Html5Doc { public CarList(List&lt;Car&gt; cars) { _head( _title("Cars") ); _body(()-&gt; { _ul(()-&gt; cars.forEach((car)-&gt; _li(car.make + " " + car.model) ); ); }); } } Twirl: @(cars: List[Car]) &lt;html&gt; &lt;head&gt; &lt;title&gt;Cars&lt;/title&gt; &lt;head&gt; &lt;body&gt; &lt;ul&gt; @for(car &lt;- cars) { &lt;li&gt;@car.make @car.model&lt;/li&gt; } &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; MarkupTemplateLanguage: html { head { title('Cars') } body { ul { cars.each { li("${it.make} ${it.model}") } } } } 
Oh, your problem was running eclipse, not trying to compile in eclipse? I missed that. Eclipse is itself a java program, and needs a JRE to run. But even thought it's running now, you'll still need a JDK to compile anything with it. I bet eclipse will ask you for a path to a jdk when you set up your first project.
Yeah, actually, I am reading a tutorial right now and it says I need 3 programs, I already got 2 of them, all I need is the compiler now. I downloaded a JDK, how do I use that? How do I compile something? Thanks
This works: _ul(()-&gt; cars.forEach( car-&gt; _li(car.make, " ", car.model) ) ); or a little fancier way: UL ul = _ul(); cars.stream() .map( car-&gt; _li(car.make, " ", car.model) ) .forEach(ul::add); It's very easy to make a reusable car list template public default UL _carList(List&lt;Car&gt; cars) { UL ul = _ul(); for(Car car : cars) ul.add( _li(car.make, " ", car.model) ); return ul; } // usage example: _div( "blah", _carList(cars).id("car-list") ); 
It looks more like he wants to run his own applet, something that can be a real pain. I have my own applet where firefox requires me to approve it in about five different ways - resulting in either a running applet (great) or one of the modal dialogs appearing behind firefox and blocking any input (not so great). While I can add exclusions the web-page lands in a timestamped directory - any exclusion I add is useful only once. Have to replace that auto generated page with a native application, writing it in Qt and C++ should be easier than dealing with the now completely broken security model. /rant Edit: the username does not give me high hopes that he really tried all that hard to find a working solution.
Can you just use an array? Name[] names;
Check the /r/Javahelp wiki - plenty tutorials listed there.
Read head first java and head first design patterns
Hats off to Scala's XML literal, though I hear they're removing that soon.
Both nameList and intRanks could be switch to basic linked list (java.util.LinkedList). If you can't use that, you can just use an array with int to keep track of the current position if you know the maximum size of the array. BTW, please don't have array named 'list', that's just wrong.
I certainly do not claim that Java's syntax is as terse as others. The terseness of the groovy html builder is due to generic language features (closure block, omission of parenthesis and semicolon). If a programer prefers the groovy html builder over (my) java html builder based on the syntax alone, he would likely prefer groovy over Java for general programming as well, for the same reason. However, some programmers prefer to stick with the Java language if possible, for various reasons, and this library is for them. The question is whether this library is simple *enough* to use. I hope so.
Amen to that, Android Studio is very slick. Haven't done Java in a while, but I'll probably give IntelliJ a go when I do.
assuming that along the way nothing throws a nullpointerexception for some other reason. Suppose getBone() has to call a helper method that is bugged and returns null, and getBone tries to dereference it and gets an NPE. You'll still catch that NPE, which, since it's not the kind of NPE you were expecting, shouldn't be caught and should propagate up so you become aware of the bug. This will allow a program to wrongly fail silently, or fail somewhere else unrelated because of your assumption about the nature of the NPE you caught, leading to confusing bugs.
I actually liked the 2nd option a lot. The third one seems even better, but i dunno how to implement it. Also other problem would be the password to decrypt the encryption key. That needs to be 16 chars long... Obligatory. And that isnt user friendly.
Don't worry about all of the tutorial crap bro. Just start fresh and reload everything. Load the JDK and JRE first and make sure you have both or you will get the ini and dll errors. Once those are bot successfully installed start installing Eclipse.
I've heard (in general, I admittedly don't know much about the Java certs) that any cert practice exams lose their value the more you take them - you adapt to the way the questions and answers are worded more than actually thinking about it yourself. Do you think this could have been what happened?
School. I go to WGU, and it's a requirement for my degree.
I'd imagine just like any other cert, it's supposed to declare you're able to perform a vast number of real-world tasks, right? How much experience do you have performing those tasks? Not just in a simulation, but in a production environment? I personally tend to retain things much better when I learn them as I'm utilizing them. (Granted, I'm sure there will be things on the exam you never use.)
Same problem with the list array. if you want to hold N values in an array, construct it with at least N as the value. You're trying to avoid an off-by-one error, it appears. The first item in the array is at index 0. The last valid index in an array of length N is N - 1. But the length of the array is N, and it holds N elements. 
Edit: to answer your question, I've never used Java on the job. I've taken several courses on Java just using the console. Some of the test questions are what one would consider 'real-world,' but I'd say the majority of it is stuff like "will this compile and run without errors" kind of stuff. And that, I think, is where most of my trouble is coming from. Something like for (;;) {} Yeah, sure, it compiles and runs as an infinite loop, but I've never seen anyone do that, and I have no idea *why* anyone would do that. The questions that ask "what of the following are valid" and then list different method declarations, statements (written, not code) about different Java classes, etc I'm okay on. It's just the really obscure stuff that trips me up.
You are reading the first line of the file and then trying to create all 4429 Name objects. You have to create them one at a time.
Wow. You can't use List subclasses? You should be using Lists wherever you don't have a need for raw arrays. just create an int variable to hold the next position in the array, and each time you write to it, increment the variable. int[] values = new int[MAX_VALUES]; int pos = 0; while (fileReader.hasNextInt()) { values[pos++] = fileReader.nextInt(); } this saves the next int into the values array at pos, and then increments pos by 1. Of course, if pos &gt;= MAX_VALUES, you get an IndexOutOfBoundsException. If this happens the input does not conform to your expectation about the maximum number of values, which means either the input is bad, or your expectation is wrong.
Regarding password hashing: https://crackstation.net/hashing-security.htm
 java.nio.Files.readAllLines(new File("fileName").toPath(), StandardCharsets.UTF_8) reads all lines into a list with opening/closing, which would take one problem off your table.
Okay, thank you, I've changed my array lengths so that they are correct now, but I am still getting a null exception pointer.
That makes sense. A general test-taking rule that's personally helped me is to pick the answer that is "the most correct" - thinking along those lines might help.
Guys, if you downvote the post, please write the reason
&gt; how would I keep track of the current position? In a separate int variable
Those loops do not necessitate busy-wait. for(;;) { processPool.submit(serverSocket.accept()) ; } Is very different from: for(;;) { if(nonBlockingCondition) { doStuff(); } } You're right busy-wait/spinlocks can be bad, rarely a terrible idea though. Sub-optimal performance is about as bad as it can get if you aren't trying to use threads.
For the sake of completeness, how have you seen it implemented?
Well its not about that, but thanks anyways!
Get. Genymotion. While you're learning you will be testing lots. I was in your exact position.. Googled through the errors, got Android Studio going and use Genymotion as an emulator. It is fantastic. 11/10 you will need it.
maybe a bit too much, but i leave it here http://www.oracle.com/technetwork/systems/articles/index-139113.html
No, those don't imply busy-wait, but the one the OP showed does. &gt; for (;;) {} If the worst problem in a source code file is that ``while (true) { ... }`` is formatted as ``for (;;) { ... }``, I'm not too bothered, but I'd rather see the ``while (true)`` form, as it communicates the intent slightly better. There really isn't a modern environment where you wouldn't be egregiously wasting resources by busy-waiting. In a VM, you're hosing the host's CPU allocation patterns, and paying for CPU you're not using to support the business. In an embedded device, you're throwing away your energy storage capacity.
Worth noting that if you download the JDK, it will also contain the JRE as well. Probs best if, like others have suggested, you clean your machine of everything and start again from the top. Grab the latest JDK, install that somewhere like C:\java. Unzip eclipse/IDE of choice and then you can get going. Also if you are using Windows you may need to add the bin directory in \java to your 'environment variables - path' if you ever need to use the java tools from the command line
You want to encrypt the encryption key with a user key that is either typed in as a password or a random string of bytes on some portable storage, e.g. an SD card or USB stick. Note that you can also do both. Edit: I just wanted to add, be sure to only store the keys in byte[] arrays whenever you need them unencrypted and overwrite those arrays as soon as you no longer need them.
No good functional language is complete, it seems, without an example that lazily computes the Fibonacci sequence.
Would it be possible to use the Jodatime library instead? It'll make it easier when working with dates. Anyway, I'm not 100% what you're trying to do, but I'm assuming that you're trying to compare ***cal*** with the dates found in the ***dates*** collection? If that's the case, the milliseconds would play a factor if the dates you are comparing were the same, but the milliseconds differed. E.g. if ***cal*** and one of the dates is meant to be == 0, but due to the milliseconds, one of them ends up being bigger than the other. Before I discovered Jodatime, I used the following code to strip out the time component; not the ideal way but it works. Hopefully this helps. public static Date resetTime(Date date) { Calendar cal = Calendar.getInstance(); cal.setTime((Date) date.clone()); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); cal.set(Calendar.MILLISECOND, 0); return cal.getTime(); } 
Show us the output (and/or the code, and maybe some context), rather than a video. By the way, why are you using a Vector&lt;Date&gt;?
Without a lot of information I would say that the differences in the time fields could very well produces different outputs. Since you are only concerned with the date differences the time fields should ideally all be set at the same To make things easier you could use [JodaTime](http://www.joda.org/joda-time/) or Java 8 new [DateTime package](http://docs.oracle.com/javase/8/docs/technotes/guides/datetime/index.html).
Note that to compute the Fibonacci sequence you don't need to memorize all values, just the last two. E.g. (simplified pseudo code) int f1 = 0; int f2 = 1; int next() { final int tmp = f1 + f2; int result = f1; f1 = f2; f2 = tmp; return result; }
I think i will go for the first option! And thank you for the edit tip! Thanks!
That will be the follow up post as stated below in the blogpost (infinite stream).
As mentioned in a comment before, that will be the next blogpost as stated below in the blogpost. I didn't want to go into the details of the Spliterator in this blogpost. That will contain basically what you are stating.
ah sorry i missed the last part
No worries, I did put it in bold now for other readers 
sorry again :) you may want to say it at the beginning of the article that this is not the best solution and a more correct one will be given in the next article, as it's not appearent until the end and some people may just download the code and not read the full conclusion (such as me).
It's important to now just hash the user's password on its own, if you do this than anybody who shares the same password would have the same key. To make matters worse, there are lists of passwords on the internet matched with relevant hash value...meaning that an attacker can just iterate through one of these 'rainbow tables' until they find the correct password. The overcome this problem, you should 'salt' the password with something else that is unique to that user (e.g. Their username, or a stored random string). So you are hashing as follows: password + salt = hash
I was raging a bit until that part... but it's a good teaching technique to explain the naive method first.
If you do, you may want to give the user feedback about the entropy of their chosen password. Look at how popular password safes do this. Or [follow Randall's take on the issue](https://xkcd.com/936/).
I've written many applications without the benefit of an IDE, sonny. Besides (tongue-in-cheek), what language do you think the IDEs are written in? 
Looks like it, I'll check it out. Thanks!
I really like it. It's competency-based, so if I know the material, I take the test and move on. This is the only exam I'm having issues with.
You do realize there are [better sources](http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html) for that information than some blogspam that is so bad you cant even post the actual link and are forced to link to google search results?
TL;DR: exceptions thrown in threads don't bubble up to the main JVM thread. You need to handle errors inside your thread code, usually by wrapping it in a try catch block and then logging or returning the exception to the calling thread. 
Cool. I implemented that after my original post and wasn't able to reproduce the error before calling it quits. It just seems so clunky to have set all these fields or carry around the same Calendar instance. I think this will adequately solve my issue. I'll have to look into Jodatime! Thanks.
I'm on Java 6. I'm going to look into Jodatime!
Interesting way to use the new Map methods for memoization. It seems the Stream interface lacks an `until` method that would truncate the stream when a specific condition is met. It would have allowed to do without stuffing all the values in the builder beforehand. Also why are you using an iterator since all you're doing is a simple loop? It would have been simpler to write: long n = 0; while(n &lt; 4000000) { builder.add(n); n = &lt;compute next value&gt;; } Edit: or rather `while(predicate.test(n)) ...`
Everyone. Far better than JSON or XML for defining configuration.
Code excerpt looks fine. I would use a List&lt;Date&gt; (it is better to pass interfaces around), and initialize it at the top with List&lt;Date&gt; dateList = new ArrayList&lt;Date&gt;();. As other have said, there is a possibility that not all fields in the dates are initialized as you think they are, and Joda Time might be better suited for the job (but is something new to learn) (but at least you will be ready for one of Java 8 new features).
http://www.compileonline.com/compile_java_online.php http://ideone.com These two websites will compile simple java code online. If you just want to show some use cases why don't you just show them your console on the beamer? Or your IDE? Of course, if there is no beamer that's a problem. I assume the students have access to computers, at least in groups, so why don't you show them how they can easily write javac on the console?
That is one funny xkcd. But it explains very well. Ill try to look about entropy. I will also add salt.
Wouldn't this cause two threads to be run instead of one?
The University of Helsinki has something like this, check with their CS department.
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html
I cannot speak to desktop Java as I do not have a lot of experience there. For the web I would go with JPA using Hibernate and JSF using PrimeFaces. I am not sure what IDE you are using but if you use Netbeans they have great tutorials that cover the major frameworks on their website. Also check out PrimeFaces Demo to see some code examples on working web components. www.netbeans.org www.primefaces.org If you are looking to just do this as a hobby then I am not sure I would bother with Spring. It adds a lot of complexity that you will probably not need. Professionally it is still pretty popular and would be a good thing to know a little bit about.
&gt;...major frameworks on **their** website. Also... FTFY avoidhugeships :) *Please don't hate me. I'm only a simple bot trying to make a living.*
Because that is more hardcoded, a predicate is more flexible. The goal is to get a reusable fibonacci stream for different purposes. Imagine you want to generate fibonacci numbers &lt; 4000 000 or ( &gt; 2000 000 and even). Ok it is a weird case, but you can express it using a predicate. And yes the Stream interface lacks the limit based on a predicate method, which is a real pity which I will go over in the next blogpost (it is especially missing for infinite streams)
Oh I completely understand. I like my program in general, but I don't necessarily see myself using Java in a career. I'm not completely against the idea, but I had other plans. Right now I'm just trying to finish my BS, and this is part of it; I like to think of it as another non-core class.
Stop it, I was just fooling around with my last comment. Of course you couldn't right a serious application today without an IDE. That said, for people just starting out, having to learn an IDE at the same time adds another level of difficulty. 
Spring is not really an alternative to Hibernate ORM. Spring can integrate with Hibernate though. Some people feel that Springs extensions make Hibernate easier to use. I do not think that is case but I am sure someone who disagrees with me will chime in soon. Spring has many parts but what most people are referring to when they say Spring is Spring MVC. It is better compared to JSF and CDI than Hibernate.
I didn't realize Vectors were antiquated. I thought the differences between them were minor. For example, a Vector changes it's underlying array size by double when it needs new space, and an ArrayList adds 50% more length. That was my basis for choosing Vectors. Since I had an unknown number of inputs likely in the thousands it would be more efficient to use Vectors because it would require fewer memory reallocations.
Yeah.... this is just one of those things you learn when starting to write concurrent code in java. Exceptions don't get passed between threads. You're executing in a different thread. In fact, if it just kept running the broken thing, there'd be 1000 people asking how to stop running it. 
Could you not dump the variable to sysout when you're at the relevant breakpoint? ( Not familiar with intelliJ but I'm sure you can 'evaluate' a cal to sysout ) Then just put that into notepad?
This will get interesting, doubly-so if JSON-B has to play nice with JAXB. XSD interoperability? Annotations on java beans? Or will there also be the ability to consume JSON from dynamic (not-predefined) classes?
Go to rosettacode.org and finish all of the challenges without looking at the source. You will be a whole new programmer.
You can use a profiler like visualvm to get a thread dump or heap dump while the application is paused. Simplest answer might be to just take a screenshot while it's paused.
Pretty sure that the poster wants to use this for automatic grading of students, not showing students their own program.
Why not just use JUnit? Have them structure their programs to return the values that you want to check. By the way, please please please have a human look at the student's code, too. Checking for good style is important. I see so much poor quality code from students just out of university because their teachers only graded them on results/outputs.
Well for single variables that works fine. The issue I'm having is that the variable is a tree structure that doesn't provide a mechanism to output all its values. So I'm looking for a solution that doesn't require me to write code that walks the variable I'm looking at. 
I am in Intellij 13 Ultimate so this looks promising, but it doesn't support maven is that right? Might not work for me.
From my reading, the real problem is that the scheduler service no longer executes your task when you scheduled it if an exception occurred in previous runs. A slightly different problem, but related. I assume this is to avoid unnecessarily running tasks that are assumed to fail since they failed in the past.
I created [Learneroo.com](http://www.learneroo.com) which lets people learn Java by solving challenges. It meets your requirements since it: 1. lets teachers make challenges with expected outcomes submitted by system.out.println or return 2. lets multiple students write or paste their .java file into the editor, where it runs the use cases and compare the expected outcomes with the computed outcome 3. returns the correct and incorrectness of each test case Email me at ak[at]learneroo.com and I can give you access to creating challenges. (Not sure why this was downvoted)
Why two machines? Couldn't you run two IntelliJ instances or even two executions of the application from within the same instance?
How does the 'run zero or more user-defined tests' work? Does it run in a sandbox for each user/test? What about security and malcious code? What about code that runs in an endless loop? Does peach take all of this into account? What about other languages?
I disagree. Who is the better developer in the real world. The developer that writes a "perfect" program in C that's all 1 line, with no documentation or the guy that has maybe a few bugs but the code is easy to read, and well documented. If you think the first one is better, you've clearly never worked on a large project with multiple developers. Clean, styled code is easier to both debug and maintain than "perfect" code that is horrendously formatted. 
That plugin only appears in the application run configuration, not the maven run configuration.
I ran across [the Mimir Platform](http://www.mimirplatform.com/) a few weeks back. If it were free, I would be using it in September. It may be a good option for you if you have funding. /u/Lerke mentions Peach^3 and that seems like a good option. Ultimately you'll still have to write the tests yourself, and they will probably still be JUnit tests, no matter what framework is built around them. Last year I just gave my students the JUnit tests that their assignments were supposed to match to. If you're going to go with any sort of automated testing, please remember that style testing is important too. Which is okay, because there are Style Testing tools: * [checkstyle](http://checkstyle.sourceforge.net/) * [PMD](http://pmd.sourceforge.net/) And there's also the super important part: make sure that your students aren't just slapping a new name on someone else's files. Plagiarism detection is very difficult to automate in programming assignments, but at least the very simplest cases (ie- carbon copies) can be checked with something as basic as a hashing algorithm.
Because its a web app. Running twice on the same machine results in port collisions.
Run on different ports?
I don't know how your project is structured but I run Java web services from IntelliJ using Tomcat and the port is just a parameter in the Run Configuration, no code change required. Other solutions would be to run a VM, eliminating the need for a second physical machine, and potentially using reflection to look through all variables in the current stack frame. I don't know much about Java reflection though so not sure if that's doable. Worst case scenario you have to write code to traverse the tree-like object and spit it out to the debug window or file or something.
Are you serious? You must be joking, right. Damn I hope you are just writing front end code that doesn't harm anybody. Hopefully you don't write any critical code...
If we had an open source solution, we could built a library of test assignments, then you would not have to write the JUnit tests yourself. I wouldn't grade them on the automated assignments, instead provide an additional feedback tool. I mean you can test much more example programs with an automated test suit and you can provide immediate feedback to their users. Does anyone know how Udacity, Coursera, edx, and similar do their automating grading?
Generally residential grade firewalls will block any incoming connections unless a rule is specifically set allowing them. Even then, many ISPs block incoming connections because they want you to upgrade to a much more expensive business grade plan if you're going to be hosting services.
I know from the courses I've been a student in on Coursera, it was left up to the instructors. They had an automated system for submitting and receiving feedback, but what happened between submitting and receiving feedback was different for each course.
We use Checkstyles. Integrates with Eclipse and will provide markers for missing javadoc at the severity (error, warn, info) that you choose.
This whole suite looks great. Thanks much!
&gt; And there's also the super important part: make sure that your students aren't just slapping a new name on someone else's files. Plagiarism detection is very difficult to automate in programming assignments, but at least the very simplest cases (ie- carbon copies) can be checked with something as basic as a hashing algorithm When I was in school my professors all used [MOSS](http://theory.stanford.edu/~aiken/moss/) for plagiarism detection. It was definitely effective.
You are correct. I can't imagine letting the exception propagate on a thread.
I found a way. Using a view action, I clear the map/list I have created on every request. Then, if it's null/empty, I redo the query.
Cool!
http://codingbat.com/ has a teacher mode. Students can be put under you, they can program in the webpage, and you can write sample code or base code (like to provide information to the function that they're tasked to write) My teacher used it. it works well
The perfect code because I make her throw it through a formatter before the code review is complete.
I'm a little late, but I spent most of last year writing a program to do just this. Check it out on http://gamershut.net/grader/ The website is not at all polished but downloads are up and the source is on github. It integrates with Dropbox and using http://dropitto.me for students to submit .zip files with source code inside. The naming format for these source files is ClassPeriodNumber_StudentName_AssignmentNumber_AssignmentName.zip It can autograde using junit or my own form of simple unit testing (pass in variables to a method and check the return value). Its not really well documented but I'm going to start on that in a week when I get back from vacation. If you have any questions comment or pm me on here or github. Its basically done but some settings aren't yet configurable. Like email notifications are currently only sent from my domain. Or late penalty is 50%. But both emails and late detection are optional features. 
I use IntelliJ 13.1 You can unfold trees like in Eclipse and anywhere in Windows: Press \* on the numpad. I just tested this: In debug, you can click in the variables view, press CTRL+a to select all entries, press \* to unfold the trees one level, keep doing that until you have the level you desire. Then finally press CTRL+a and CTRL+c to copy everything. :)
Script: int x[] = 'Hello World!' + TRUE; JavaScript interpreter: x = 5. (I'm helping!)
I'm concerned that you're teaching some kind of programming course but still asking these questions. I hope you are a student trying to help a teacher out.
I know, right? I think maybe /u/yaaay replied to the wrong person. 
Ah, well, it is genuinely appreciated... I'm a completely self-taught programmer, and it's exactly this kind of knowledge that I am here for; the kind of... unexciting 'formal' information that it's difficult to be motivated to sit down after an unrelated days work and learn about, and easy to settle for a half-assed understanding (or, in this case, a complete misunderstanding... :P). 
A presentation I did at the Houston TechFest a while back. Documents our extremely positive experience with Dropwizard (and Spring as the IOC layer), for developing our distributed real-time applications.
No problem. And I don't want you to think you can't get help here. Just pointing you to those that can Bette answer crypto questions. 
This is probably better suited for /r/javahelp. Bit *please* read its posting guidelines, particularly "how to ask questions" - just dumping code without any explanation will get you nowhere. You should use a proper, descriptive title, properly format your code and should also specify the exact error message (line numbers!). That said: the first thing that comes to mind is that you open a file within the function you're calling recursively - that's most probably wrong.
I love automated tools but enforcement is still going to be an issue. At the end of the day, being a strong technical lead is the only solution. Creating wiki pages of technical specifications or migration to GitHub and using the Forking Workflow so that all commits are Pull Requests that get peer reviewed may be the only ways to enforce proper documentation. When the Pull Request is submitted, you can check if the appropriate Javadocs are created and if they aren't, create a conversation with the developer with recommendations for what the Javadoc should look like in that particular case. Don't just write "missing Javadocs". Offer your own solution so the devs can learn. Sometimes documentation missing because the devs honestly don't know how to write documentation. They know how to write code. Love the dev. Don't hate.
Can you actually READ? I never said that. I never said that 'well-documented, straight-forward code' is not important at all. I was saying that one should focus on confidence, logic, and problem sovling skills in entry level developer that have to write simple algorithms like fibonacci or linked list and such. You said that it's ok to have code that has bugs in feavour of readable code. Really you must be kidding. Ever heard of ugly fixes just to make a thing work. Look at real world code. Edit: I meant ugly fixes, not ugly bugs...
You are correct, this piece of code will never end. Every time fibonnaci(int) is called, a new file is parsed and in turn calls fibonnaci. There is no exit possible so the memmory grows exponentially 
Perfect. My google skills are clearly not good enough. Thanks much!
i googled for `AWT Video` [and found this](http://stackoverflow.com/questions/5457269/show-video-to-jpanel), hope it help.
Another of those CV-fodder JSR, which the competent ignore in favor of Jackson.
Vectors actually increases the buffer by a fixed amount, also Vector is synchronized, this makes it even slower.
Ah I see. Well I guess I'll be keeping an eye on this, as a (readable) dump of variables at any given point would be quite handy!
With liferay + tomcat this is still an issue. Need to reboot after every 10th deploy.. This is naturally because of old tech.
Have the students use an IDE with code formatting on safe turned on. Whether you use IntelliJ or Eclipse is up to you, but please give them: * Code formatter on auto-safe turned on * Findbugs with auto-check turned on, also set the appropriate Errors/Warnings in Java → Compiler * Infinitest preinstalled And then let them write code against a well-written test suite. For bonus points, create a few good and bad implementations for a specific problem and let them write a test suite that catches the bad ones. Grade by running a script on their solution instead of writing a server (which will face DDOS and hacking attacks, causing an unending stream of problems for yourself and your students). Since their environment already checks their effort, you won't need a server anyway. That way, they'll get immediate feedback, and will hopefully have more fun.
Because it weds your code to the logging framework, the configuration and the appenders' targets. For example: You want to log into a file based on some information that is available at runtime. With the direct approach, you'll just get the appender from the LoggerContext, set the output file and be done. It works, and you're happy and go home. Fast forward two years. The system you wrote is now in the cloud, and a new security edict requires that all logging goes into a predefined directory, that is unfortunately not the same as when you wrote the code. Now you'll have to play Pokémon with all occurrences of meddling with appenders in your code. This is stupid and wasteful. Also your customer wants to plug in another logging framework. Since the bridge APIs usually don't allow changing settings at run time, you'll be out of luck. You still have headaches because of the nervous breakdown last month when some idiot changed the appender's name ("to make it more consistent"), making your code crash hard. It took you two nights and an unhealthy mixture of coffee and aspirin to figure that one out. It's not pretty. On the other hand, if you put a property in your config, you can base the location on a system property or thread context or what have you. Now when the edict arrives, you'll go into your config, change the property and be done with it. The configuration, as well as the logging, are self-contained and orthogonal. When the customer wants another logging framework, just throw in the bridge APIs into the classpath.
If you are hiring someone to program using java he better knows the ins and outs of it on top of algos, architecture, testing and all other stuff. I don't like certs either but for different reasons. Knowing how the jvm and the language in general behaves is very useful.
The "load a youtube webpage in a JEditorPane" approach doesn't work because a JEditorPane isn't a full-fledged browser with JavaScript, HTML5 video, or Flash plugin support to show the video. For Swing there's Java Media Framework ([JMF](http://www.oracle.com/technetwork/java/javase/tech/index-jsp-140239.html)) - which is the official API, but as you can tell from the horrible webpage at Oracle, is pretty old and doesn't appear to be a focus for them. [FMJ](http://fmj-sf.net/) is an open-source re-implementation of the JMF API. You could also [play video through JavaFX](http://docs.oracle.com/javafx/2/media/overview.htm) and [load it in your Swing application](http://docs.oracle.com/javafx/2/swing/swing-fx-interoperability.htm).
That was not what he was arguing. He was saying that it is better to ship software that has bugs but looks pretty instead of shipping a software that is bug free = aka. feature complete (because bug free code does not exist). But he was OK with it having some bugs in favour of pretty code - which is insane. So stop blaming me for things I haven't said. First and foremost is writing a software nearly bug free (feature complete) and with a low bug count, i.e. focus on logic, problem solving skills and confidence, and probably testing. But of course readable code that has intention-documentation is super important, but I was not saying that it is not.
Serializable is mainly a *signature* interface which indicates that the class that implements it should be able to be serialized, and is used by some of the IO package. It is a bit confusing, but if you read the documentation on the **ObjectOutputStream** the **writeObject** method takes a standard Object, not a Serializable, but will then throw a **NotSerializableException** if the Object (or a parent object in the hierarchy) doesn't implement Serializable. Other serialization mechanisms, like **java.beans.XMLEncoder** or 3rd party packages like XStream don't seem to care about the Serializable interface. I'm not certain, but I think that RMI required the objects to implement Serializable, possibly because it used object streams. 
You could perhaps pick up [Introduction to java programming comprehensive version 9th edition](http://www.cs.armstrong.edu/liang/intro9e/) (There are PDF versions). Perhaps this book is not the best for you as you already seem to know the basics but you never know, but it is the book I use(d) to learn java. You could also start implementing databases into your programs. Always nicer with a database managment program, instead of using maps, trees or arrays. But to do database in java you should study up on JDBC. Btw I am a student myself and very new at this, so there could be better options out there. I also suggest JavaFX, makes it a lot more easier to build GUI's.
&gt; rosettacode.org Care to tell where exactly on the site I find the java related challenges, or are the challenges maybe generic and can be completed on w.e language? 
Seems like a limited benefit for most apps (or at least the apps I work on). If I'm logging to a file or network the bottleneck is the file write, not the logging code. Has logging performance been an issue with people here?
At the bottom of the page it reads: &gt; Log4j 2 is now available for testing. Does that mean it's not ready for production; so, in effect, it's not final for beta? I'm confused.
Here's a link to their course system: http://mooc.cs.helsinki.fi/programming-part1 Apparently it's using this as the server: https://github.com/testmycode/tmc-server
&gt;There are only two hard problems in Computer Science: cache invalidation and naming things. -- Phil Karlton
How do you handle probably malcious code or file system IO? How about socket communication? Do you set up a sandbox for each user test?
To serialize something means to save the object instance's current state (the values of the fields in your object class), preferably to disk or a database. You would want to do this if you had an application that needed to remember how the user left things between last shutdown and next startup. There are other java libraries that do serialization because the java serialization model is a bit broken. 
All hail log4j2
No, it's been in beta for a while. It's certainly ready for production.
If you've written your app to SLF4J API, then you should be able to slot in log4j2 in your classpath and that's it.
I've seen around 10% performance improvement in some applications we have just by switching log4j to log4j2. In short, the async loggers not only benefit from output batching (which you could get by async appenders), but also from the lock-free disruptor. Admittedly it costs a measurable amount of RAM, but if you have a multithreaded application, the benefit can be considerable.
As dunattyp said, JMF is the official API, but it is so old... You could use JavaFX WebView in a FXPane, it will work for youtube. But know that since the WebView is not 100% java, when/if it crashes, it will bring down your whole app.
Nice! But not a nice name. Can we have a name with more numbers? Like 10g4j2?
The problem with synchronous logging is if you e.g. write heavily to the file system (or a database does this for you) and you need logging at the same the system will stop if you do not have separated discs. Thats a real world issue I had ;) even with a RAID system
Aha ok, it is just because you mentioned the source, so figured it was java specific source.
For how long have you practised the profession of software development in the industry?
This is java, not visual basic. Disclaimer: While I have helped pinpointing a few bugs in the betas, I'm not a member of the log4j2 development group. But hey, anyone can bring up anything on the issue tracker. But if you do, be prepared to have your issue marked as invalid.
You could use the ThreadContext to set a property that is referenced from the configuration to determine the file path. If you want to really be future-proof, factor out the code to set the property. Just put it in a class and call that. If it doesn't work out, you can change your class back to appender mangling.
You need an object to be serializable to send it across a message queue as well. 
&gt; not a nice name I don't know. Log4j is a household name, known to managers, so much than "selling" them Logback has sometimes been an issue (when Logback was less-known than it is now). I can see "Log4j 2" being a much easier sell to them than whatever more pleasing name the team could have found.
If the page announcing a products deployment has issues I wonder how many issues there will be with the software. It shows a lack of attention to the details.
Is what you're thinking of similar to log4j's MDC? log4j2 merges a bunch of things into the ThreadContext instead: https://logging.apache.org/log4j/2.x/manual/thread-context.html
This is one of the few times in memory that I've ACTUALLY used that feature! Normally I sell slf4j on its more clear syntax.
Is there something like Janino for Log4J2, to make conditional rules in the configuration?
I assume so, it is the Javascript for Adobe. 
Uhh, slf4j overlords took over... what, 3 years ago now? log4j is the project that needs to re-prove itself as worth the effort of switching as far as I'm concerned. 
is log4j2 slf4j compatible? 
It's part of an old, brittle, agonizingly slow, poorly-designed serialization framework that you shouldn't use unless you really, really have to.
 Have a look at the [numbers](http://logging.apache.org/log4j/2.x/manual/async.html#Performance)
http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextLong%28%29 The only choice is to use Random or SecureRandom (depending on your needs).
You mentioned games... so Serialization is like a savegame :)
That would be the cache invalidation part. The reason immutability (when it can be applied) makes concurrency a piece of cake. &lt;http://en.wikipedia.org/wiki/Cache_invalidation&gt;
Two solutions * Use *Player* see this http://stackoverflow.com/questions/6525493/a-simple-way-of-embedding-a-video-in-my-swing-gui Some videos might not work because of the encoding * Use a container that support HTML and put the Youtube URL http://stackoverflow.com/questions/6360744/how-to-render-basic-html-markup-inside-a-jpanel-in-java-swing The problem that you could face is the encoding 
The short explanation is it gathers all your data and formats it a certain way so you can do something, typically save it to a file or send it across a network stream. That may sound simple but it's really tricky. When you say "String s = new String("abc")", you've now created a string SOMEWHERE in RAM. The catch is, you don't know where. "s" isn't the string. "s" just points to the string. "s" is little more than a number to a memory location; the location of "abc". But in addition to just the "abc", String objects contain lots of other variables and methods, used internally by the object. So your variable "s" is pointing to a chunk of ram containing "abc" and all these other variables too, even though you're just interested in the "abc". Now, say you created an object with lots of Strings. Let's call them s1, s2 and s3. Remember, s1, s2 and s3 are just pointers. If you were to save those variables to a file, you'll just get 3 numbers (I don't think java let's you do that, but C does). But that's not what you want, you want the strings those variables point to. And remember, those variables point to chunks of ram that may not be located next to each other, and you don't want things like the internal variables used by the string class, you just want your strings, e.g. "abc". And this is where serialization comes in. When you implement the serializable interface, you're telling java that when you want to do something with the data like send it over the network, java must collect only the relevant data and send it one byte after another. Serializable will look at each pointer, figure out what it's pointing to, extract the bits you're interested in and make it available as one series of bytes. Serialized data can also be passed to a deserializer which reconstructs the object from a series of bytes. I used strings in my example, but it's true of any object implementing the serializable interface, e.g. Integer Hope that helps 
Would I be able to make it work with this format somehow? long max = 9223372036854775807L; long min = -9223372036854775808L; long var3 = (long)(Math.random() * (max - min) + min); Obviously that isn't working working properly, but maybe it can be tweaked? 
[Log4j 2 SLF4J Binding](http://logging.apache.org/log4j/2.x/log4j-slf4j-impl/)
From a sample size of one.
I'm not that amazing at Java, but this might work? Make an array with a random size and fill that size with random numbers. Then you loop through the array and turn those numbers into a variable?
&gt; Another major index to look at is from TIBOE which is a more accurate measure of language market share compared to the CodeEval index which is a much better indicator for language popularity in industry. Can someone explain what the difference between "market share" and "popularity in industry" is?
The project I'm on tried to move from log4j to log4j2, but two bugs were show stoppers for us: unable to dynamically change log level via jmx (known bug, but may be fixed now. On my phone so can't find link) And Unable to specify a conversion pattern for the syslogappender (our app is already running using syslogappender in prod with log4j so we wanted to maintain the same functionality for now) So we switched to logback instead. Still an upgrade from log4j, and we already use slf4j so maybe we'll move to log4j2 in the future. 
So, you write bugged pretty code?
Naming a class *Predicate just because the method returns a boolean is a terrible reason! This should only be done if the class is side-effect-free.
&gt; private static Logger logger = LogManager.getLogger(); Logger name defaults to the full class name... THANK GOD! How hard was that? A simple merge would be enough to have this in 1.x ages ago.
I would guess codeeval skews heavily tward software development shops. Factories and schools and banks hire programmers, but it's to support other operations. The software is a means, not an end. 
What exactly are you trying to do? Are you just trying to get a random long within the scope of longs? If so, you sould do something like Random r = new Random(); r.nextLong(); Are you trying to have a configurable max/min?
Head First Java explained Serializable with that exact example, only a very basic version of it. You create a Character class with three variables; a name, a race, and something else...I forget. You create a few Character objects and then save the characters to a file with your own extension, lets say .char. You can then close and re-open your program, using the .char file to recreate your Character objects just as they were. Any class that implements Searializable means you can store an object and all it's variables and the recall them later, except transient variables, there is always an exception to the rule right?
No, there are only two hard problems in computer science: cache invalidation, naming things and off-by-one errors. 
Where does the article say anything about naming *classes*?
Python is increasing rapidly. 
just deploy war file like normal. 
or [ThreadLocalRandom](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadLocalRandom.html)
That doesn't necessarily mean a language is more or less popular. It just means that more people are asking questions about it. The number of questions related to a language is correlated to how popular it is, but that isn't an argument for saying more projects exist for that language. For all we know, the number one language could have several hundred or thousand instances where questions were asked because someone using SDKs and APIs and was considering or prototyping a project in the language and ran into the issue, and later changed languages (and didn't need to ask questions on Stack Overflow). Actual number of projects in a language is a better indicator.
Yup, if your using 7 or newer...it's a great addition
I would definitely recommend it. Especially if you are fairly new to OOP topics.
thanks, as of now I'm doing a course on udacity. Waiting to get paid so I can buy the book.
I read the book last year to gain a foothold in java. I would recommend the book for anyone starting off, but it's not for everyone. When you read java books and they start talking about Swing I would also recommend checking out javaFX.
thanks, would you happen to want to donate it?
The numbers don't mean shit. If logging is where your performance bottleneck is at, you're doing it wrong. Sure, it's nice if your logging framework doesn't add a lot of overhead. But you know what's even nicer? Not having dependencies on a dozen different logging frameworks when building any kind of sizable application. Kill Log4J already. If the public API has sometihng that isn't present in SLF4J, then add it to SLF4J. If you want magical performance improvements, then add them to an SLF4J implementation. Addendum: the use of the LMAX Disruptor (while very nice and useful and shiny) makes certain audity people a bit nervous. I had the unfortunate experience of bank auditors telling us to move back to the drawing board because one of our dependencies used sun.misc.Unsafe. I expect this sort of nonsense might be common in environments where the Java security manager is heavily used.
I've been programming java for a while now and read it, not tons new for me but I picked up a few things from it. It seems to explain the concepts fairly well and I think if you're new to moderate at the language, you'd gain quite a bit of good insight. Edit: I will echo what some others said though, it was a little annoyingly joke-y. I think the attempt was to make it less technical so concepts stick. Whether or not that's helpful probably depends on how you learn.
It feels like Codeeval submission data would be the source for figuring out which languages firms have the hardest time analyzing ability in a language rather than what's most popular. It's easier to find out if someone knows php than if someone knows python, you can find and likely have employed, more developers fully or partially versed in the language. Also why it's not overly strange to see javascript so low on the list or Ruby to be behind Java. Some of it probably relates to demand but that's why things like Go are so low, with the more widely distributed languages it's probably a fair bit of the opposite going on (more popular languages stick to middle of the pack whereas trending languages with smaller developer pools would probably see increased submissions for automated analysis). You could probably consider it a metric of opportunities with lowered barriers to entry.
Fucking garbage stats, everyone knows that Brainfuck is #1.
Development lead on a large project here -- after a good long talk with our lawyer, we don't use *any* LGPL code in our projects directly. Where we do, we have our clients download it themselves, link the jar into the classpath dynamically at runtime, and invoke the classes through introspection wrappers. In our shop, everything *must* pass all tests and run with no compile or test-time references to GPL or LGPL code.
If by popular you mean widely used/largest deployed production codebase, then I'd say it's probably actually #1. If you mean most widely liked/accepted...based on the seeming opinions of most redditors it's like #1000000000000000000000
Yeah sorry, I pirated the java pocket edition for a few shortcuts. Will pirate that as well, arrg! 
If it's deployed codebase then C and C++ wins in a landslide.
Doesn't work. First I got ClassNotFoundException, then I added jsf-impl.jar and now getting Caused by: javax.faces.view.facelets.FaceletException: Must have a Constructor that takes in a ComponentConfig. I am not working with any JSF at all. 
Do you have to use Math.random? Used a UUID. http://docs.oracle.com/javase/7/docs/api/java/util/UUID.html
In case you haven't noticed, log4j2 implements a sl4j bridge, so one could reasonably say that log4j2 *is* a sl4j implementation (of course that statement wouldn't do justice to log4j2, but in this context it makes sense. I think it's too simplistic to say 'you're doing it wrong'. There are different types of applications and different types of logging and in a multithreaded application that needs to log a lot, logging can take a considerable part of runtime, especially with synchronous logging. And of course, banks will be better off throwing more money at hardware vendors instead of weakening security policy.
The problem is that any two objects who's compareTo() value is equal are considered equivalent and should always be consistent with equals() result. ie. assert !(0 == foo.compareTo(bar) ^ foo.equals(bar)) : "Inconsistent equals() and compareTo()"; If calculating equality is too expensive then use a Comparator that can compare only the fields you care about for the TreeSet order. The same condition has to apply though, anything pair of objects which returns 0 from compareTo() will be considered equivalent. What you are doing with identityHashcode will fail when you have two objects with the same order integer and same indentity hashcode. In your implementation TreeSet will consider these to be equivalent objects. You need to compare more fields to establish the complete ordering even if that order is somewhat arbitrary. 
I think I'm the lone dissenter here. I actually didn't like it. The information contained within is good enough, but the layout is obnoxious at best. The book tries too hard to be goofy and random (pictures of cats and memes scattered throughout), but comes across as childish (crossword puzzles at the end of the chapter). It sounds fun and appealing before you get into it, but it's really just distracting. Maybe if I was fourteen it would be fun, but I'm not. I want a serious textbook, not some bullshit. Look up "the Java programming language, 4th edition," it's much better, and is written by former employees of sun. 
Perhaps you need something other than a tree set? Do you change your set often? If not, maybe use a list and sort it. Or a heap (PriorityQueue). Or one of the bag classes available with third party libraries.
Its not bad for a total beginner. Like the title says, 'Head first'. However if your toes are already wet and you want something more then skip this book. My preferred method of learning Java after this book was to search for Java tutorials/quizzes provided online by universities or schools offering Java courses. They might not provide you with the code answers but you can ask for help on relevant forums if you're stuck. Good luck!
I am quite OK with using a different collection, but I can't find anything else that fits my requirements. Now that I think about it, I do recall reading about using a simple LinkedList and using a binary search to determine the insertion index. It's not as elegant as I would like, but I guess I'll try it.
I think you miss configuration. 
&gt; ..and should always be consistent with equals() result. Actually not. It is **strongly recommended** but not at all required, see [Javadoc](http://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html).
The post is about *functional* interfaces, these should always be side-effect-free. Otherwise they're not functional.
LinkedList will have slow binary search. ArrayList will have slow insertion. How do I decide which is worse, aside from testing? EDIT: I did a quick test adding about 10,000 items with this method. ArrayList was faster at about 920ms. LinkedList was about 1750ms. Dumping all the items in and then sorting was 150ms. I will use the sort method for the initial setup, then binary-insertion-ArrayList for subsequent changes, which are much more sparse.
why would you say the teacher wasn't that great?
Just no. Even if you correctly specified the range [Double.MIN_VALUE, Double.MAX_VALUE], it would be slower than random.nextLong() and return inferior results. Doubles are not evenly distributed. Add rounding, and your numbers will be biased towards smaller values and values where low bits are zero.
Also you may want to have a look at PriorityQueue and the apache commons collections bag classes.
You could do it something like this: import java.util.concurrent.atomic.AtomicLong; public abstract class Foo implements Comparable&lt;Foo&gt; { private static final AtomicLong ID_GENERATOR = new AtomicLong(0); private final long instanceId = ID_GENERATOR.getAndIncrement(); private final int order; protected Foo(int order) { this.order = order; } @Override public int compareTo(Foo o) { int c = Integer.compare(order, o.order); return c != 0 ? c : Long.compare(instanceId, o.instanceId); } } This way every instance will have its own unique ID that can be part of the comparison and will make all instances unique even to TreeSet. An additional effect is that the iteration order is completely defined by ordering first, then creation time.
*Ordering between objects with the same order integer is unimportant.* But, if the other member variables can be compared, it might be worthwhile exploiting that when the orders are the same. In this way you can also guarantee uniqueness. Or you could just consider the set to be a multiset/bag and use an appropriate class. E.g. Guava has multiset classes.
PriorityQueue doesn't work because it is not guaranteed to iterate in any particular order. I'll look into a Bag.
This would certainly do the trick. EDIT: I have decided to use this solution. 1. It meets my sorting requirements. 2. It confines the ugliness to a single abstract class (and isn't really all that ugly). 3. It uses TreeSet. 4. It provides a good immutable way to define equals() and hashCode(). 5. equals(), compareTo(), and hashCode() are consistent. 6. The instanceId field may help in debugging.
As mentioned above, there are many different child classes. The only member variable of the parent class is the *order* integer. (The parent class also has several abstract methods.) This would make comparison a very messy ordeal. As I understand Multisets, they merely count duplicates, rather than storing them separately. It's not that I want to store duplicates, it's that TreeSet thinks they're duplicates when they aren't.
 Random gen = new Random(); long randomLong = gen.nextLong(); That should work if i'm not mistaken 
Take with a grain of salt, as this is almost a year old, and in that time frame, things can change.
I learned using "objects first with bluej" it's not perfect but it has some really strong points. 
None of these lists ever show a logical methodology that doesn't include massive self-selection bias. The only thing this data set in particular shows is that Python and Java are the languages that are most often chosen by people who are looking for programming jobs. This is not surprising, because both are known as good languages for beginners. 
Bit late to this, but there's no reason you can't write Gradle plugins using Java / Groovy, and indeed you should. It's also much, much easier than writing maven plugins in my experience.
That one's complicated because it implements a plugin directly in the build file, which I would consider bad practice, but it's the same sort of logic you'd have in a maven plugin.
this. Every OS and and every device driver ever written alone make the code base of C/C++ much bigger
Market Share - how many actual jobs popularity - the cool new language that everyone is talking about. so for instance, Python is a cool language, but there are more java jobs. [here is a chart - I like charts](http://www.indeed.com/jobtrends?q=java%2C+python&amp;l=)
the only stat that really matters : [job trends - indeed.com](http://www.indeed.com/jobanalytics/jobtrends?q=java%2C+python&amp;l=)
But this blog post _does_ give you relevant information on how to evaluate CodeEval's other marketing claims.
Pretty sure (max - min) will result in a silent overflow, completely breaking the result. 
I would just follow the tutorials at Oracle. Read a few developer blogs (e.g. James Gosling sometimes has a few good entries). Then open up my IDE of choice and try to implement a few simple applications, like a program that prints roman numerals, a ray tracer or a program that takes some pictures and creates a calendar.
Reconfiguration at runtime without lost messages.
I fully agree here, maybe 0.000001% of all java applications out there will need to log more than 2 million messages per second. Of these, none of them will use log4j2 because they already solved that problem in a different way. All the others have jumped on the logback-slf4j combo. Having options is always good but in this case it's just embarassing for the java community that we manage to put out yet another logging framework out there. Curse you commons-logging!
The scientists I'm working with are addicted to c/c++. I'm slowly easing them into java.
Maybe I missed something, but why not use the TreeSet constructor that accepts a Comparator instance and roll your own comparison strategy?
I don't care what anyone says, this is the only correct answer.
The best I've found online: http://www.tutorialspoint.com/design_pattern/
My class implements Comparable, which achieves the same thing. With a separate Comparator, TreeSet would still determine equivalence with comparisons.
I've found the Head First Design Patterns to be very useful when I first started. Easy read plus nice examples in every chapter.
Why Java and Python? Don't get me wrong I love Java, but usually a lot of analytics fall under the Python scope.
If the creation time is not a useful secondary sort, you can just use their hash codes as the fall-back when the initial order is equal. 
Well, they choose c++ right now because they have high performance computing needs. I'm pushing towards java because I believe the programs they're making in c++ can be made in java with less bugs and not much loss of performance. Java is also pretty easy to get working well cross-platform, and seeing as code is now part of reproducibility for the articles we publish, java is very valuable since it's more solid in its cross-version compatibility than c++. 
Thanks! I'll use this. Thanks for all the other suggestions as well :)
Run the jar from the command line instead of double clicking it. (cd \path\to\folder\ ; java -jar filename.jar) You should, hopefully, get a stack trace printed to the console when it crashes.
Good call. Found out it didn't like that one of my images was lowercase in the code, but the file itself was upper case. Not sure why that made a difference based on location of the file, but whatever! Thanks!
"Does not work" is a very vague problem description. I would bet the problem lies in loading resources - files. While in eclipse, they can be found easily. If packed in the jar, you can't simply presume the directory structure of the jar is visible to the program. It isn't. I'm on my phone, so I won't write everything down. Simply google for "java load resources from jar".
http://gameprogrammingpatterns.com/ It's a bit focused on design patterns within video games but it's definitely understandable and presented in a fun way. If you like video games then it's just a plus.
Why does it matter if they like hockey? Code is code.
The book Refactoring to Patterns by Joshua Kerievsky might fit your description. I haven't read it, but I have heard many people recommend it.
Publiqué el enlace pensando que habian personas que hablan español
What's with the recent trend of bundling a JRE with the application that I've been seeing? Is it because of the simple fact that a user might not be running the latest version of the JRE on their machine, for instance?
Came here to say this. Excellent book that very much fits OP's description.
Whoops! It's a general availability release, so it's production ready. I've updated the source on that page which will be updated when 2.0.1 is released.
What's neat is that in order to locate the calling class's name in the LogManager.getLogger() method, the stack trace is obtained from a new Throwable. This is different from the code that's used for logging method names and such in log messages which has to use the internal `sun.reflect.Reflection` class for performance reasons (at least until a standard JDK API is made for it).
Ah, this makes sense. Thanks!
Think of it like bundling a (rather large) library with your app. And yes, it's because there are no guarantees about what JRE (if any) is installed on the user's machine.
I want the safe navigation operator!
It's a good point. The problem is my app is already multithreaded so those logs are being written and I need to manage the RAM usage and processors. That said I'll investigate log4j2, should be an easy swap if it is sl4j compatible. 
Oracle, Y u do dis? Seriously though, do they need the money?
Why give something away for free when you can make money on it? That's Oracle for you. 
They probably have a contract, and users of Java applications don't really have a choice but to use the JRE so why not. I'm waiting for them to invert the question and uncheck by default to trick everyone...
I believe Sun were the ones who agreed to this.
&gt; Why Java and Python? Don't get me wrong I love Java, but usually a lot of analytics fall under the Python scope. Until they need to work with more data than fits in their laptops memory.
No problem! Let me know if you need help with anything else:D
How is this a surprise. 
Thanks, I found a bit more by searching on IL Merge and NHibernate, because I am looking at doing the same thing with Maven Shading and Hibernate. Seems like I am going to have to have users download the connection library on their own, kinda frustrating but oh well. Now for an obligatory Fuck the *GPL, making shit harder than necessary on a developer.
As long as you include log4j-slf4j-impl with log4j-api and log4j-core, then SLF4J will log to Log4j2 instead. From there, I highly recommend using the asynchronous loggers as they're hella fast.
I've proposed making a JSR, but I didn't get any interest at the time. I'll try to get more interest in making an updated Java logging API since the current one is super limited.
[Unchecky](http://unchecky.com/) will automatically uncheck these offers in installers.
Larry Ellisons been enjoying Hawaii too much.
And which one would that be? Oracle Java supports it and JavaFX itself is developed under the OpenJDK umbrella.
There is this Ask crap, the always running update annoyer, the confusion with JavaScript, and the browser security issues.. none of it has anything to do with the software I write in Java, but as an independent dev, I get to hear the crap from users who bitch about "hating Java".
pacman &gt; apt
Just for people who don't know: Starting with Windows 7, you can open a command box in the folder you want by right-clicking (for context menu) on the background of the File Explorer window of choice *while holding shift* (which extends the menu). -&gt; "Open command window here"
This is probably not it: Could this be a language problem of some sorts? More helpful: You can have several Java installations on one system, e.g. several versions, and simultaneously a 32 and a 64 bit version, also there's Java Runtime (JRE) and Java Development Kit (JDK). Are you sure you uninstalled *all* of this before reinstalling? You can check by looking into both your "Program Files" and "Program Files (x86)" folders for a "Java" folder. Maybe you even have a proper Java running on your system now - but Minecraft automatically picked the other one which was never touched by the reinstall fix. *Or* reinstalling didn't fix a few things because they were still in the system because of the other version, and those are broken. Maybe you could also manually take a look at your installed fonts (Windows key + R, "fonts", ENTER). I think the only fonts that come with Java are the "Lucida" fonts - I have these in my fonts folder: Lucida Console Regular Lucida Sans Unicode Regular And these are in C:\Program Files\Java\jre8\lib\fonts: LucidaBrightDemiBold.ttf LucidaBrightDemiItalic.ttf LucidaBrightItalic.ttf LucidaBrightRegular.ttf LucidaSansDemiBold.ttf LucidaSansRegular.ttf LucidaTypewriterBold.ttf LucidaTypewriterRegular.ttf Opening any of these should give you a readable sentence in various sizes. Is the text jumbled as well in your case?
A submission about bundling JRE with your Java applications: http://www.reddit.com/r/java/comments/2ar9wj/native_launcher_for_java_applications/ My experiences with Launch4j so far have been nothing but great.
I just tried completely deleting Minecraft and all related files, Java and all related files, and checked all of the Lucida files in both the System 32 folder and Java folder. Everything checked out, and after a clean install of both Java and Minecraft, I am still showing the strange text. Should Java be in the Program Files (x86) folder rather than Program Files? I'm at a complete loss. Thanks again for any and all help!
If you have a 64 bit Windows, you should download/install a 64 bit version of Java. This would go (and probably automatically suggest while installing) the "Program Files" tree, while the 32 bit version would suggest the (x86) tree. I have no ideas otherwise. Good luck.
Yeesh. Yeah, that's absurdly pedantic. I've luckily never had a professor deduct points for stylistic issues. However, I did once receive a zero for HTML that didn't validate against the W3C spec. I was pretty fumed about that one.. 
I must agree. I once saw a comment which said the package manager for Windows is google xD Gotta love dem virus' and ad-ware.
Haha thats another thing. After switching to linux iv become quite careless when clicking links. The chances of actually downloading a virus that will run on my system are quite slim compared to if i was running windows.
I dont really know to be honest. But my jdk and jre are version 7. I dont really know how the relationship between openjre/jdk and the standard jdk work. I suppose its possible though since a lot of testing goes into packages before they become available for stable debian. 
Real men use a C compiler.
Oracle will never stop until they have literally all the money in the world. They are the most greedy company you'll ever see. Think Comcast is bad? Ha - you don't know Oracle yet. Oracle's entire business model is to buy companies, suck them dry, and throw away the husks. Be grateful they haven't killed Java outright (yet).
The problem is how easy it is to do stuff like this. You may not do what is considered a bad practice, but others will. In fact, you can already find LOTS of custom gradle build scripts like these. Additionally, when you start writing your build script, it is clear and adding a few custom implementations here and there will work out well, so there's no need to create a plugin. But as with everything in software development, what was simple and straightforward at first grows into a little monster over time, and moving it all into your own plugin may not be easy or cost-effective. Then someone else jumps into your project and has to find his way with the build script. That's how it always happened with ANT as well.
I agree with Google and say for (int i = 0; i &lt; x; i++) I think it has a higher readability to detect the important parts 
What about real women? 
I liked Java *before* it sold out and went all mainstream/commercial.
Check the install instructions on the OpenJDK page, or the open bugs/feature requests of your Linux distribution of choice, OpenJDK 8 isn't there yet and JavaFX isn't available for OpenJDK 7. Of course you can find early access builds for Linux, with a rather restrictive license - cite: "for the sole purpose of internal non-production and non-commercial evaluation and testing ". Or you can spend a day building the OpenJDK and OpenJFX from source.
Until you have Ubuntu bundle a desktop search bar and you have to uninstall that (not that I care, happy with Debian).
I concur on most of what you've stated (I've worked on and created many build systems for Java using: Ant, custom scripts, Jenkins, Maven, Maestro, Continuum and Hudson) yet, I keep coming back to the (no scripting language) declarative vs. imperative issue. Imperatively, I can precisely describe how the build is to behave. Time and time again. And we all know automation and consistency go hand in hand. Declarative is really a form of indirection (i.e., abstraction) and if something changes in the new release of your build tool, (it's behavior) your backwards compatibility could be at risk. No? Perhaps I have yet to build something so complex and "own" it for any serious duration that I have yet to cross that bridge. I can see your argument against imperative if devs constantly are committing ad hoc poor code. (i.e., lots of if's, jumps, seriously f&amp;&amp;ked up procedural coding, but you can easily find yourself in that predicament in declarative programming as well). I'm reminded of DSLs. I wonder if a (NON-XML PLEASE!) DSL declarative construct would be elegant. Thoughts? I'm definitely open minded. I don't give a sh&amp;t, so long as the tool is an improvement in the overall lifecycle.
I can't give much feedback on the code since I don't have much time... 1. the c_ prefix for your classes (or just concrete classes?) is _really_ ridiculous and unusual. Any particular reason you adopted that? 2. You haven't used any sort of asset factory or manager that uses a cache/flyweight sort of implementation for loading graphic assets. That means you're loading multiple instances of the same image into vram. For example, if you have two enemies, it looks as if you will load the enemy texture into memory twice. 3. Looking at c_player.java, you have some seriously hacky &amp; unmaintainable code. Pro-tip, if you have that many member variables you are doing something wrong. The player class has _way_ too much responsibility. I could probably find something in every class, but I feel as if I am being overly critical. You still have a lot to learn, but it is a good start. I would suggest grabbing some code-design books and giving them a read. 
Seriously, who gives a fuck. I think code style should be consistent up-to a particular point. After that we're just wasting our time bickering back and forth.
Thank you for your feedback. The c_ prefix was something the other guy doing the JFrame stuff and KeyListeners did when creating a player and a floor class, I had no idea wether or not it was important, so I used it for the other classes I created. As it turned out, it just meant "class" for no apparent reason. The whole loading assets stuff was worse when I started this, I was loading every graphics with the getResource() method on every usage of said graphic. :x In the next project I start I will make a class for all Images all being loaded once and then just get used from there on I guess. Oh and well, the cplayer, it was the very first thing I did and I pretty much just went into it blindly. All KeyListeners pretty much are used to set booleans on true, instead of changing the dx-Value directly, since I wanted to make the character start walking slowly and then becoming faster and stuff like this(almost all of the got scrapped doe). Thanks a lot again. 
Neither on ubuntu. I just add the Oracle PPA and get the latest oracle java that way.
from what I can see so far: * you replaced all your images slidewise, but its better to have a common background and add tiles to it. For example hud_boss_h_lifepoints_0.png would be better of as a template and for half and a full heart an image. Saves a lot of size. * you named all your classes c_name. You always have to question yourself in OOP: is this object there a c_enemy or an enemy? * consider using `final` for fields to inline them as constants and prevent manipulating them without wanting to * class names are always CamelCase by convention, so start with upper case letter (because variables are lower case) * if you have a fixed amount of states consider using enumerations instead passing an `int`, which could be out of bound * use smaller private functions to split huge logic into smaller fractions (better readability, maintainability and reuseability) * `c_enemy.java`: you allocate `bosssprites` just to fill in some Strings and in the end don't re-use them properly (in the end only used in `biArray`). * no comments at all, even though method and class names should tell you what they are supposed to do, its easier to have more explaining text why and such its doing so. * `c_invinc`: cache the `ImageIcon`s * `System.out.println` is often used only to quickprint some stuff, I would advise looking into logging frameworks though. * `gameboard.java:public void paint` instead casting it 30 times, its better to cast it once and to re-use it. Casting has some overhead you may want to prevent. JIT often helps you there though. * not sure about the usage of threads, cause you running just one thread anyways. In GUIs threads are often used to split calculation logic and rendering into seperat threads so user interaction wont lag if the computer is doing some heavy calculation. 
Thanks for the help
portage &gt; pacman
This is not a big deal. Uncheck it and move on.
[Yes](http://www.omgubuntu.co.uk/2012/10/does-ubuntus-amazon-lens-break-eu-law).
Could we patch open-source browsers to just igore such parasitic plugins? Make a config option called "Enable crap (click HERE to see the list of blocked plugins)". Oracle may have contract with ask, but open-source projects do not.
who cares, pick one, then enforce it by tool so everyone is on same page.
almost exactly what i said; personally in solo code who cares, but in a team code consistency is key...just pick one have a tool enforce it on save or pre-commit hook or something, and boom everyone is on the same page. typically people who nitpick this kind of shit for so long should have something better to do like actual coding. :(
The preferred JDK is OpenJDK, but Debian also has the java-package utility, which allows you to make a .deb from Oracle's JDK.
They're just trying to give the installer a look and feel that is native to what windows users are accustomed to. 
Trying to show you're hipster online? ;-)
It would be helpful if you posted a .zip file or better, a link to a github account. I cannot open .rar files on my mac without downloading some sort of utility. Just saying. 
No need for the full JDK, just install JRE from [the same place](http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html)..
There was a thing, can't remember its name, that packaged a jar with a java runtime on Windows/Mac, and they used some fancy method to keep the runtime to &lt; 50MB (if I remember correctly). It's on github, I'll try and find the link. EDIT: [the link](https://github.com/libgdx/packr)
[OpenJDK unofficial installers for **Windows**, Linux and Mac OS X](https://github.com/alexkasko/openjdk-unofficial-builds)
Total side note, the latest version of Java has an option to disable "3rd party ads" on upgrades.
Some asshole probably signed a contract 15 years ago and they have to stick to it?
Here is the official FAQ: http://www.java.com/en/download/faq/disable_offers.xml
pole position &gt; pacman
No, we use DI frameworks like Spring or Guice. Neither *requires* AspectJ or compile time weaving which appears to be your pain point. In either case the *framework* should instantiate the object instead of using the new keyword. There's quite a few ways to do that, in Spring they all revolve around asking the application context to provide a bean of a certain type and/or with a certain name, implicitly or explicitly. Is there a specific use case you have where you're not understanding how to use the container?
I mean I think I understand it give or take. My biggest thing was basically... "I should stop using the new keyword to build objects" (so that I can stop relying on compile time weaving), now... how should I refactor my app to not use compile time weaving. I'm aware of doing things like ctx.getBean... but am under the impression that this gives you a reference to a specific "singleton" rather than a new instance. So, then how do I go about getting new instances? Or more specifically... how do I create "new" things, but make sure my services/repositories (which were previously autowired via compile time weaving) are accessible in those new things. Well, factories would be one way. I could create factories which have all of my services/repositories autowired and then build objects in those factories. That said, if there are other common/recommended patterns I'd love to know about them! edit: As a somewhat specific example, I'm building my application with JavaFX. So, I would like access to my services/repositories inside my controllers. The way I'm considering doing this is creating a spring @Component or whatever to serve as a controller factory. This factory would have autowired all of my services/repositories that I use inside controllers, and would build those controllers for me when I need them (providing services/repositories to them as necessary).
Then it is the operating system. You have some funky locale or internationalization set as the default which minecraft can't handle because there is a character encoding error. Control panel-clock,language,region.
Same here. We have a RAID with 1.5G/s sequential write performance, but still see massive gains for logging to a single SSD outside of the RAID. And that's with asynchronous logging.
I'm more of a web guy, but generally everything that requires objects in the Spring context should be in the Spring context themselves. Why not annotate your controllers with @Controller so you can autowire the dependencies?
Then going by all your arguments, sl4j and logback (and possibly j.u.l) should not have been implemented, because log4j solved the same problem before.
I do web mostly too! Though not in java. But I understand what you're saying. With GUI dev I need to have one controller for every instance of a component, because that controller will maintain any state that component might have. As such, new controllers are common. If a user takes an action that spawns a modal, then takes that action again, we have two modals. They'll share a controller type, but will each need their own instance for maintaining state. This is the problem I'm having, that I think a controller factory is a reasonable solution for. That said, what occurs to me is far from a tried and tested solution, so I'm looking for advice around this. I realize that spring / javafx (or GUI dev in general) is not an extremely common combination.
&gt;[...] instead of an API. I believe your statement is not entirely fair to log4j. They *had* an API - and yes, the configuration syntax is horrible. But a) let's not forget that log4j was the first major logging framework for java (and by that time, noisy XML configuration was in fashion) and b) following your argument, logback and sl4j folks could just have extended log4j. The silver lining here is that while log4j2 has its own API, you can easily use Logback, SL4J or j.u.l in your code and put the API bridge in your class path. What's more, you can easily have all of the above in your application with just one backend. 
Any sane logger, when you invoke `logger.log(myStringHere);` will have that log line end with a newline character, and thus there is no need for you to add a blank space or whatever.
I'm not sure i understand why you'd need the aspecjweaver plugin. From the [docs](http://docs.spring.io/spring/docs/4.0.6.RELEASE/spring-framework-reference/html/beans.html#beans-factory-scopes-prototype): &gt; The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans. So you'd just need to call ctx.getBean(...) every time you need an instance of said controller, and annotate the controller with @scope("prototype")? 
I only have the knowledge of java through AP Comp Sci in High School. What is this?
I used [this](http://www.manning.com/walls4/) to learn the Spring framework, imo It's a very good book and I cant recommend it enough. This is a little old but still dose a very good job teaching core spring. It sold me on [this](http://www.manning.com/bauer3/) for Hibernate/JPA this book is alright not quite as good as the other but I'm fairly confident in my ability to start mapping domain objects and creating database models. But I'm sure there is better out there for JPA/Hibernate.
I see. Right now I always download the *.tar.gz package from Oracle's website and copy it to the server running Debian GNU/Linux (I need to download it manually and upload it again because the computer is headless and the website forces me to "accept" the license by clicking on a radio button on the page), stop applications using Java, update path to Java installation path and start Java applications again.
Either 1. Someone missed the spring jdbc library dependency from the build (unlikely) 2. Messed up deployment of new code 3. Someone rm'd the lib folder The Hibernate library was making a call to the Spring Jdbc library and the Spring library has gone away :) Flow is authentication attempt &gt; database call &gt; something in Hibernate/DB layer threw an exception and the dependant library used to create the exception was missing from the Java classpath at the request time.
~~Just pirate the pluralsight videos. U can find them in torrents and ebookee.~~ Also try springbyexample. It's free. 
It's still down, now there's some JSP exception due to EL. Apparently it's been down since yesterday. Edit: Must've come back recently because it was still down this morning. Strange that such a large volume site would be down for most of the weekend without resolution. Then again, they're not handling bank accounts or insurance policies.
I used this and Objects first with BlueJ at the start of my degree. It helps with some of the fundamentals. It's not going to be everything you need but should help with the basics of OOP. 
My try, a more OO approach that takes advantage of some new Java features: import java.util.Map; import java.util.concurrent.ConcurrentHashMap; public class RomanNumeral extends Number { private static final Map&lt;String, Integer&gt; INTEGER_FOR_VALUE = new ConcurrentHashMap&lt;&gt;(); private static final Map&lt;Character, Integer&gt; VALUE_FOR_SYMBOL = new ConcurrentHashMap&lt;&gt;(7); static { VALUE_FOR_SYMBOL.put('I', 1); VALUE_FOR_SYMBOL.put('V', 5); VALUE_FOR_SYMBOL.put('X', 10); VALUE_FOR_SYMBOL.put('L', 50); VALUE_FOR_SYMBOL.put('C', 100); VALUE_FOR_SYMBOL.put('D', 500); VALUE_FOR_SYMBOL.put('M', 1000); } private final String value; public RomanNumeral(String value) { if (value == null || !value.matches("^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$")) { throw new IllegalArgumentException("Invalid Roman numeral representation"); } this.value = value; } @Override public int intValue() { return getIntegerForValue(value); } @Override public long longValue() { return getIntegerForValue(value).longValue(); } @Override public float floatValue() { return getIntegerForValue(value).floatValue(); } @Override public double doubleValue() { return getIntegerForValue(value).doubleValue(); } @Override public String toString() { return value; } private static Integer getIntegerForValue(String value) { return INTEGER_FOR_VALUE.computeIfAbsent(value, x -&gt; { int totalValue = 0; int lastSymbolValue = 0; for (char symbol : x.toCharArray()) { int symbolValue = VALUE_FOR_SYMBOL.get(symbol); if (symbolValue &lt;= lastSymbolValue) { totalValue += lastSymbolValue; } else { symbolValue -= lastSymbolValue; } lastSymbolValue = symbolValue; } totalValue += lastSymbolValue; return totalValue; }); } } 
Have you considered Dagger?
Thanks for the info, I wasn't aware that OpenJDK was so slow to make it into the package managers. However, it seems to me that it's being/been fixed on major distros as evidenced [here](https://bugs.launchpad.net/ubuntu/+source/openjdk-8/+bug/1297065).
haha, I don't understand your upvoting and my downvoting; maybe I should have explicitly stated that I was joking? ;)
I am a first year student at a community college taking a programming degree and I found Head First to be really annoying. I gave up at around the "Chair Wars" section of the book and looked for a different resource. I'm about halfway through ["Big Java: Early Objects"] (http://ca.wiley.com/WileyCDA/WileyTitle/productCd-EHEP002512.html) by Cay Horstmann. I find that it strikes a perfect balance between lightness and denseness; my favourite thing about this book are the exercises included at the end of each chapter. They really drive home some of the points. If I finish a chapter and still feel like I need some more material on the topic, I'll look for the chapter in Core Java covering the same material. Here's an example of a problem presented in the book: Declare a class ComboLock that works like the combination lock in a gym locker, as shown here. The lock is constructed with a combina­tion—three numbers between 0 and 39. The reset method resets the dial so that it points to 0. The turnLeft and turnRight methods turn the dial by a given number of ticks to the left or right. The open method attempts to open the lock. The lock opens if the user first turned it right to the first number in the combination, then left to the second, and then right to the third. public class ComboLock { . . . public ComboLock(int secret1, int secret2, int secret3) { . . . } public void reset() { . . . } public void turnLeft(int ticks) { . . . } public void turnRight(int ticks) { . . . } public boolean open() { . . . } } 
I rarely understand citizens of the tubes. Fwiw, I didn't down vote you. I assumed it was a joke toward hipsters :)
Why don't u use CDI? 
Inside that keystore created by -genkey is your certificate. It is both the public and private versions. Any time you have a private certificate - the public version can be extracted from it. If you do a keytool -list you can see your new certificate. It should be listed as 'private'. You reference it using the alias (which is also displayed there in the -list results). To generate/extract the public version you can do a keytool -exportcert. Then you can import this into an empty/new keystore if you want a keystore with just your public cert inside. 
While I didn't write tests to ensure that it doesn't give false positives, there's a regex expression in the constructor that *should* prevent incorrect strings from being processed. That's sort of how I was able to simplify the logic so much; the getIntegerForValue method can assume that the string is correctly formed.
op wanted to know how to generate a large random number...... randomUUID() will indeed give him a large random number. The fact that those chars are always the same doesn't matter. Use the entire uuid as your rando. 
Thanks! So I can view the public version by doing -exportcert. Is there a way to view the private version? 
Not with keytool. You'll need to do it programmatically or with another tool like OpenSSL. Is there a reason you need to 'see' the private version? Is it not good enough for your usage inside the keystore? 
&gt; The most obvious pattern that occurs to me is to simply put together factories which are dependency injected, and build all new objects from those factories (and just use setters on new object inside the factories to give them services/repositories). Is this what people actually do in production? Yes, exactly. @Component public class MyObjectFactory() { @Autowired public FooService fooService; public MyObject create() { MyObject myObject = new MyObject(); myObject.setFooService(fooService); return myObject; } }
&gt; keytool. You'll need to do it programmatically or with another tool like OpenSSL. Is there a reason you I see. No reason - just asking out of curiosity.
Highly recommend Hibernate Made Easy by Cameron McKenzie.
It's not really what you're asking for but you can have a look at the "JAutoDoc" eclipse plugin, which allows, based on (customizable) jautodoc templates to automatically fill the javadoc. It works quite well and allows to have at least basic javadocs everywhere (constructors, getters/setters, methods, class, ...). Then you just have to fill for the important methods with the really important additionnal informations. Of course, one could argue that having an automatic javadoc for methods like getter/setter is not very useful (indeed, some people tend to prefer not having javadoc for obvious methods, only for mandatory ones). http://jautodoc.sourceforge.net/
This is the link to the book Table of content: http://www.packtpub.com/java-ee-7-performance-tuning-and-optimization/book
Meh... 
As for separate technologie, there's a nice curated lists of books to learn JSF here: https://jsf.zeef.com/bauke.scholtz#block_72 and a good set of totorials here: https://jsf.zeef.com/bauke.scholtz#block_71 Indeed, there are not that many that explain all three together. Java EE texts typically explain JSF and JPA, while Spring texts explain Spring MVC and whatever template/wrapper Spring is using for JPA/Hibernate these days. There's an example project listing all three here: http://onlinetechvision.com/?p=566 which for understanding technologies you might want to contrast with this one: http://henk53.wordpress.com/2012/04/15/jsf2-primefaces3-ejb3-jpa2-integration-project The above two implement the same thing, but one uses JSF, Spring, Hibernate, while the other uses JSF, Java EE, Hibernate (JPA). 
thank you...
Will check out when I get some free time. Interested to toy around with it.
Best learning is by doing. You can try [this](https://github.com/ignl/happyfacescrud) archetype to create such a project and play around. To understand all 3 technologies you need to understand how they help you. JSF - component web framework. This allows to create a "component" and later reuse it easily instead of working directly with html. Component libraries like [primefaces](http://www.primefaces.org/showcase/index.xhtml) has a lot of ready to use components. This can save a lot of time. It is simple to start and understand and basically any recommended tutorial will do it to you. However later on you will have to read a book if you want to understand JSF better and be more efficient. It is simple on the outside, but not so much in the inside :) Spring - dependency injection framework. You can read about it [here] (http://martinfowler.com/articles/injection.html). Of course right now it's much more - it has all kinds of plugins ready that you can "inject". Most used for web apps probably is transaction management. You can read more about transactions [here](http://www.ibm.com/developerworks/java/library/j-ts1/index.html) Hibernate - last but not least. It is a framework that automatically maps database entries to your objects. That is actually pretty cool as otherwise you would have to set a lot of fields manually! You can read a bit about it [here](http://www.tutorialspoint.com/hibernate/orm_overview.htm). As you can see each framework solves different problems and allows programmer to do certain tasks faster or keep code cleaner. They are different animals so probably aside from tutorials you won't find a book that is written for all of them. Probably most important framework is spring. It serves as a "glue" for your system. You can plug in something that spring already has (transaction management, webservices) or some 3rd party frameworks (JSF, Hibernate). So probably I would recommend you to start with that. JSF and Hibernate is actually pretty easy for simple cases and learning.
sounds great! Dobra rabota :-)
&gt; Para allows you to have plain objects like this: class User { public String name; public int age; } &gt; and turn them into persistable Para objects just by adding one annotation **and extending the core Para class PObject**: class User extends PObject { @Stored public String name; @Stored public int age; } I have a feeling that requiring users to extend a base class is going to be a detraction.
eh, I think Spring is too much of a kitchen sink personally.
There should be a standard for the spacing of loop terms. IMO and my university professors have found this great is for (int = 0; i &lt; x; i++) { ... } It is far more readable for the programmer.
Agreed. Implementing a marker interface (or even yet-another-annotation) would be preferable. 
Why are you using TreeSet (that is Sorted Set) to begin with? That is a sorted set which means you need to defined notion of order and a notion of uniqueness. You've described a need for sorted list. Just use a normal ArrayList and insert into is by using Collections.binarySearch.
Yeah, that turned out to be the problem. And I would have given more information if I had any. I went as far as to have the program log its steps to a .txt file so I could determine where it got to before it crashed, but it didn't even get far enough to log the first entry. "Does not run" was all I had ;)
Interesting. I would like to see file storage can handle manage files on local file system, because a small web application may choose to store files on local computer instead of using AWS S3 or Google Drive. By the way, I can't see the whole index of [doc page](http://i.imgur.com/buoHj7I.png) in IE 11 and Firefox 30 but ok in Chromium 37. Could you check the CSS?
Thanks for the comments, guys! There is a parent interface. The PObject class simply provides a default implementation for some of the boilerplate code.
Thanks for reporting the CSS bug - fixing this asap. The FileStore interface can have many implementations, including a local storage one. I've left this for a future release.
Is there an actual __Getting Started__ guide? Skimming the docs I can see how to run Para but there doesn't seem to be a cohesive step by step guide to persisting your first object with Para and retrieving it.
Actually, only the private key (please no one use the term private certificate as there is no such thing) is stored in the keystore after you do a key generation. The public key is easily created with the private key but not the other way around obviously. Crypto tools/toolkits don't typically store public keys in their raw form. Part of what that command did is create a certificate with the public key and self-sign it (self signing means signed with it's own private key vs sending it off to another CA to be signed). After running the command you have 2 bits of data stored in the keystore, the private key and the certificate. Edit: Just want to clarify...Certificates and Keys are totally different things and don't confuse those terms. A certificate *contains* a public key (because the whole point of PKI when it was envisioned was that an entity, the CA, attested that the identity on the cert was who it says it was and bound that identity to a public key), but *is not* a key and a private key is *not* a certificate.
WAT? As everyone knows, there should be totally no whitespace between "for" and "(". Sheesh.
Whoa whoa whoa... space around the terms is one thing, but you'll pry the white space between the `for` and the `(` from my cold dead hands! 
Mersi :)
So be it. Where shall we duel? I wish the keyword was indeed "for(". That would: - Keep them juniors from adding that useless whitespace - Free the word "for" for variables and methods
This was a great book but it is pretty outdated at this point. The focus should be on using JPA style Hibernate at this point. It is the standard and makes a lot of what is recommended in Hibernate Made Easy no longer needed. I wish he would write an update.
&gt; how should I refactor my app to not use compile time weaving Ask the context for the bean. There's numerous ways of doing that, see below. &gt; I'm aware of things like ctx.getBean... The *default* scope for a bean is singleton (in Spring). If you change that to prototype then you'll get a new instance every time you ask for one. &gt; (how to DI) paraphrased First, there's several types of DI. Constructor injection, setter injection, field injection. Second, there's several ways of asking the application context for a bean, directly or indirectly. One way, in Spring at least, is XML. You use the Spring namespace to declare that bean "foobar" should be constructed by passing dependencies "this" and "that" to it's constructor. Or you could use setters and likewise in the XML declare that those dependencies should be passed in. My *preferred* method is constructor injection using annotations. You create a constructor that has the required dependencies as parameters and then annotate it with @Autowired. If for any dependency there's more than one bean that can satisfy it then I'd use @Qualifier to name the specific bean I'm expecting. Yet another way is programmatically asking for it. This requires you to have access to the application context. One way of doing that is implementing something like ApplicationContextAware thus telling Spring "I want you to give me the context I'm part of" at which point you can directly ask that context for beans. This is generally only useful (to me) when I need to perform some kind of logic to determine what bean I need. &gt; specific example In the ideal scenario your controllers would be built by the application context, then it's trivial to ask for dependencies such as repositories from the context that creates them using annotations. Who is creating your controllers, why are they not created by the context? If your controllers are being started up because of something like a menu event then the menu should ask the context for a new controller. If you don't want the controller to be a singleton then set it's scope to prototype. None of this requires AspectJ, all it requires is that your menu event use something like "applicationContext.getBean(FooController.class)". It seems to me the only reason you're stuck on compile time weaving is because you're using the "new" keyword instead of asking the context for a bean.
&gt; create a certificate with the public key So where is the public key and how do I view it? Is the output from doing keytool -exportcert the public key?
The object responsible for menu events can implement ApplicationContextAware which will provide it with a reference to the context. When an event comes in that requires a new controller you can ask the context for an instance of that controller. If you need one controller per event you can set the scope to prototype. It would also be possible to inject the dependencies into the object handling menu events and simply pass those in to the controller yourself.
Ah the client but was the missing piece here. Thank you.
Something like this might work for you... if (HM.get(key) != null) { HM.put(key, HM.get(key) + value2); } I'm on mobile, so I can't really be more detailed.
"keytool -exportcert" will *export* the *certificate* from the keystore. Remember, the certificate *contains* the public key, but *is not* the public key. First you need to define "view it". The key is just a bunch of bits. Most of the time when certificates are printed to the screen the public key is dumped as hex output. Java's keytool doesn't show the public key info. However if you use -rfc instead of -v on the list command it will show it in openssl's PEM format. copy and paste the -----BEGIN CERTIFICATE----- through to -----END CERTIFICATE----- into a new text file and use openssl to view: openssl x509 -in certificate.txt -text and you'll see below and more: Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (2048 bit) Modulus: 00:cf:93:68:b0:03:8c:a2:6f:4f:b5:d9:73:33:1f: 67:fe:d6:ee:f9:43:47:6b:ab:52:0b:d9:b3:d2:7c: 12:b9:a5:e3:7e:44:e4:c9:d4:73:a8:11:ac:30:89: 9d:b4:d4:f9:43:42:35:34:38:96:1d:9a:f9:46:9f: 53:66:5a:1d:9d:fb:66:ff:a5:0d:32:7d:ee:bc:6d: 55:a9:aa:3f:07:e9:b4:35:1f:68:61:2a:09:20:8e: e7:65:0c:4e:15:35:30:b8:3c:40:87:c9:e4:d6:3e: 64:f6:ab:1a:d7:03:2d:70:8e:f0:fe:11:fd:dd:4f: d0:7e:dd:55:9e:bc:a9:78:f3:e1:50:a8:94:b1:f4: b2:25:a4:ad:0d:1a:92:9f:92:12:fb:f5:d2:91:50: 3c:62:c3:ab:ca:3a:35:03:e0:9f:fa:d1:29:3d:2a: fb:3b:e0:b8:e5:86:68:26:e0:c2:11:7f:40:c6:d7: c5:6d:34:c8:f1:e4:fc:35:d7:ee:14:07:ef:c6:94: eb:6e:c4:1f:a8:b8:9b:81:bf:ae:74:df:68:c1:f4: 5e:be:ff:34:47:36:ff:7e:74:c9:a5:f2:10:0e:3d: 05:56:1e:04:f4:5d:20:c1:0e:95:c1:bb:2c:07:29: 0e:c7:98:c3:df:35:95:0e:7f:41:7c:69:76:87:1b: ce:9f Exponent: 65537 (0x10001) NSS Looks almost the same (this is a different key): Subject Public Key Info: Public Key Algorithm: PKCS #1 RSA Encryption RSA Public Key: Modulus: aa:88:2a:0d:55:5c:58:6f:55:20:c4:d8:11:d5:56:d1: 45:57:29:02:b5:97:1d:e1:5c:25:da:63:f1:4a:bb:1b: 11:e2:d4:19:04:58:4d:40:89:12:74:5c:c3:fe:2f:f3: df:ac:d1:0e:27:5d:27:90:dd:40:79:aa:c2:ac:f9:6d: bf:6f:ea:9f:75:75:4f:76:72:4d:d6:15:1b:ca:6c:0d: 8d:49:38:65:eb:f5:28:87:cc:ba:2f:1d:12:5d:80:dd: 88:6d:dd:40:74:9f:e2:d1:79:15:9c:ee:f0:32:23:c0: 63:10:4f:a5:85:3e:4b:4d:1a:55:6c:cc:d7:c7:66:15: bd:79:e5:c0:9d:21:0f:2e:cc:a7:f1:41:0b:7f:8c:d9: ba:8b:1c:53:c4:8d:ca:24:96:a8:03:06:76:80:c2:69: 8f:ff:75:31:da:aa:4b:00:76:93:1b:6c:a5:3f:47:d2: 48:5c:55:96:ab:fa:e3:25:21:5a:42:99:b4:24:31:c6: ad:bc:59:4c:86:a4:a7:e3:4f:b9:2d:ec:31:83:d0:8d: 00:c4:60:72:4f:69:ba:1a:fb:6a:e9:04:94:df:75:ef: 88:7b:70:aa:14:aa:c4:0f:8c:dc:65:5f:44:30:9f:ff: 31:a8:ca:07:e5:8d:06:5d:6f:9e:75:3f:af:da:29:c9 Exponent: 65537 (0x10001) If you want the public key you can access it programmatically using the KeyStore and Certificate APIs. Edit: clarified -rfc was option of -list command of keytool
Oh God, please yes. After using Python's and Lua's FFI interfaces, every time I have to use JNI, I have to cringe.
It is this window http://imgur.com/Jbac5VW that I am thinking about.
Thanks! Is there a way to view the private key from the keystore? 
No, you can't display it with keytool. A cool interoperability thing is that if you pass the option **-storetype pkcs12** to keytool when you create the keystore you'll get a PKCS#12 file as the "keystore" which is a standard for moving credentials around. You can use openssl command line tools to display, convert, etc at that point. Alternatively you can create the pkcs#12 with OpenSSL and then read/access it with keytool by passing the -storetype pkcs12 option.
As far as I can see, this image is from Sublime Text 2 (and from there I know that feature). Haven't found anything alike in Netbeans.
Any idea what the feature is called?
In Sublime Text 2 it's called **Minimap**
Aha ok thanks. I have a rather big screen and I hardly ever code beyond the "suggested code length line" or w.e it is called. 
Hey thanks for that link. I have been considering about switching over to IntelliJ for a time now. 
Para means money in Turkish. *The more you know...*
In your code, you are always replacing the item keyed at parts[0] with the new value, effectively throwing away any existing values you have stored. You then go on and check if there is anything keyed at parts[0] (which will always be the case if parts[1] is 4 or 429), and if there is, you then replace the value keyed at parts[0] with the the value keyed at parts[2] and the new value. You probably want to be doing the check before you do the first put, but in the same if block. And then you want to get the value keyed at parts[0] and add that to the new value (parts[2]) before putting it back at parts[0]
I have no idea what lines 11-18 are supposed to do. That looks way more complicated than it should be. Just run the sum of all numbers in parts[1] until parts[-1] (Index of -1, in some languages, means the last element, unfortunately it doesn't work in Java). Then insert sum into the map, doing an addition if the key was already inserted before. Line 22 is wrong, you should get the value of parts[] at index 0, not 2. You will also need an else branch. To sum the numbers you read, you'll have to turn the Strings into ints, which you can do via Integer.parseInt(parts[index]) Also what's up with StringUtils? I've never even heard of that class and whatever else is in it, right now all it does is make your code less readable. Something like line.trim().split("|").equals(X) is the better solution.
Cool! We also say "pará" as an synonym for "coin".
Hey Alex, This looks very interesting, I really like the idea of having REST resources templated out, and I think the default technology selections are reasonable. Forgive me if you've already addressed my comments - I briefly went over the 'Getting Started' document. As far as API crafting goes, is there a way to extend the generated API? Occasionally, I find myself needing to add a subresource to an entity that will perform some task on it. Additionally, it would be nice if there was a hateoas/hyperlinking layer built in as well. I like to lay out resources with links to their parents and links for operations available to a client (edit, delete, etc..). Those links can be shown based on business rules predicates, and trying to invoke the endpoints without those predicates being true would emit a 403. Speaking of errors - do you have a way of mapping exceptions to HTTP error codes? Can developers craft custom error messages? Thanks for your work!
at one point you write: &gt; Instead of writing &gt; &gt;double a = b + c * d &gt; &gt;you need to write something like &gt; &gt;BigDecimal a = b.add(c).multiply(c); I think you meant to have it say 'd' instead of 'c', as in: BigDecimal a = b.add(c).multiply(d); 
Interface w/ annotations as mentioned earlier. Why do your models need have sub-classed methods?
Devil's advocate: why do you want this? Your code is so long you need a map to find your way around it? Should that be a sign it is time to break things up a bit? I'm not trying to be a troll, I've seen people use this, it looks cool, but I don't see much actual value. Currently I'd rather have the horizontal real-estate.
Yes. There are a lot of ways enums can be used. They can be sort of like records: [example1](http://www.reddit.com/r/java/comments/27k9dj/help_with_comparing_large_amounts_of_strings/ci3wxxw) [example2](http://www.reddit.com/r/java/comments/25lxvg/enum_vs_constans_java_file_in_java/chio5wu). You can even [hardcode tree structures](http://www.reddit.com/r/javaTIL/comments/25dk0i/til_enums_can_implement_interfaces_and_each_enum/chinthf) (like menus or database table relations) into your code using enums. 
Yes, I write long codes.
I write wide codes.
Where has PermGen gone? It died and went to MetaSpace.
You declared HashMap for keys and values as Integer, but provide both keys and values as String. You should parse the Integers from String before using as map parameters. like: Integer key = Integer.parse(parts[0]); Integer value = Integer.parse(parts[2]) map.put(key,value); 
Well... I have to admit I don't have reliable statistics at hand how many companies do it the one way or the other. However, many consultants tell me the single-server-model has become very popular. From a technical point of view, sharing a server makes you run into all kind of problems (that's my everyday business :)), so I'm inclined to believe "my" consultants.
Thank you for your feedback! There is no support for registering custom API resources yet. The API uses Jersey 2 that's quite flexible, so I might be able to come up with some solution to that. As a workaround to this limitation, you could write your own Jersey resources that "augment" the default API. For example, you could add Para though Maven, then write your own custom Resource class with a custom @Path("customurl"). There shouldn't be any conflicts between the custom and default endpoints. HATEOAS was in my list of "nice-to-have" features that I just haven't had the time to implement. :) There's a very simplistic Exception mapper what maps exceptions to error codes, yes. It basically checks if an exception is an instance of WebApplicationException, in which case it returns the proper status code and message, otherwise it just returns a generic 500 error code. So, you can craft any error message in the form of a WebApplicationException.
&gt; if (parts.length &gt;= 3 &amp;&amp; &gt; (StringUtils.equals(StringUtils.trim(parts[1]), "4") &gt; || StringUtils.equals(StringUtils.trim(parts[1]), "429" ))) &gt; { &gt; &gt; map.put(parts[0],parts[2]); &gt; &gt; } &gt; Its' these lines (11-18) that are doing this. Whenever it parts[0] matches 4 and 429 it does this replace, which throws away any previous value. 
These types of problems arise from poor decisions. Insufficient resources, improper configuration, poor application design, etc. and, this is not unique to Java. If you do things CORRECTLY there's no reason to even consider the single server model, unless you're in need of really fine-grained dynamic scaling in an environment like EC2. 
&gt; but in some cases tuples are actually the best tool for the job. I would have to question that statement. If you have to return multiple values, then they most likely have a meaningful relationship, and so you should represent them with an object. If they don't have any relationship, then you should examine what your method is actually trying to accomplish.
I agree - partially. We're all humans, aren't we? So we have to deal with errors. A crashing application can tear down the entire server. Every application running on the same server crashes, too. Those things are clearly poor application design, but no matter how hard you try, they happen every once in a while. Another interesting topic is the server's configuration. Some applications require a lot of configuration. If you work closely with the operations department, that's not a big deal. If they seal themselves off from the development department (or if they happen to be a customer hundreds of kilometers away), trying to maintain a common configurations for dozens of applications quickly becomes a nightmare.
The decision to implement common methods in the parent abstract class just seemed practical, I guess, and it follows the DRY principle. There's no other valid reason. Every domain class can override the CRUD methods which can contain custom logic. Do you reckon that this is a major issue/pain in the design, and needs changing immediately?
Java is a fairly easy and simple language. Once you get the basics down, read *Effective Java* by Joshua Bloch to learn the more advanced parts, and a design patterns book, hopefully something more up-to-date and the classic Go4. With these two, you could begin to understand codes that other people have written, so now you could start reading them.
I started learning Java two months ago. I used this lecture series to start https://www.udemy.com/java-tutorial/#/ While going through those videos, I tried programming whatever I could on /r/dailyprogrammer/
Have you tried JNA?
Thanks! The Keystore Explorer is very useful!
You are right but sometimes you don't feel like creating an object for every little thing. That's how Java has become notorious as the bloated language where you have to write pages of code for simple problems. Tuples in most languages also come with other nice features like unpacking or pattern matching. In Python you can even create a named tuple to show the relationship.
&gt; Do you reckon that this is a major issue/pain in the design, and needs changing immediately? Yes. :-)
Most places I've worked at usually have a 4 node cluster for redundancy. and run the admin server on top of one of the 4. I don't if this is the most common, it's just how it's been where I've worked.
If you know all the basic loops and statements just go ahead and build an actually application with the help of online resources. It's simply the best way to learn to program.
I personally think it a fairly major issue as people will want to be able to subclass from their own supers. It may have seemed DRY at the time, but for the user of your framework it will cause them problems. Even if the user doesn't need their own supers, adding mystery methods to their models adds unnecessary complexity.
Just posting a stack trace likely isn't going to net you any solid help. The fact that it is a StackOverflowError though should indicate that you should look for any recursively called methods (methods calling themselves directly or indirectly) that are not properly breaking out of the recursion. 
What information would be needed for some help? Like I said... I know very little, as in... your probably VERY basic information was over my head lol.
Java Blog
Did you write the code that produced this error? If not what chain of events caused it to come up?
I am not capable enough to write any code period lol. I'm being difficult and refusing to switch to keyboard to play minecraft lol. So two days ago I was using minecontrol and DS4 tool to use the playstation 4 controller on PC. It ran flawlessly, went to start up today and received that. 
Have a look at the /r/Javahelp wiki. There is a page dedicated to tutorials. Also [this comment at /r/learnprogramming](http://www.reddit.com/r/learnprogramming/comments/2b7y0p/do_you_have_any_recommendation_of_a_programming/cj2tt9a) might be helpful.
The second thing to learn would be to stop adding "lol" to every comment.
&gt; I have found tuples most useful for things that are pure data-processing. The kind of things that you'd normally use a relational database for (Which deal with sets). Sometimes you need to do this kind of thing in Java Yeah, that's what I was thinking. I would have been arguing that Java isn't the best tool in that case, but as you mentioned, you sometimes don't have a choice.
Thanks for the feedback, guys! I will definitely put this issue on top of my TODO list. 
1. I prefer Intellij IDEA (there's a free community edition), but Eclipse works just as well. Try both and see which one you like best. Remember to look for the shortcut lists as well. 2. The thing that irritates me most about reading people's code is casting and instanceof. You should (almost) never use casting in your code (manually telling the program what type an object is). Instead, you should build your classes in a way that makes casting unnecessary, and instanceof is meaningless. There are exceptions to this (such as overriding the equals method). 3. If you're proficient (or at least fluent) in C#, Java should come naturally. Try [Learn X in Y minutes](http://learnxinyminutes.com/docs/java/) to get to know the syntax, and if you need some more advanced tutorials, try [learnjavaonline.org](http://www.learnjavaonline.org/). For practice, try [CodingBat](http://codingbat.com), which has an awesome Java exercise pool, with plenty of tests to show you exactly where you went wrong and helps debug beginner mistakes.
I've been in plenty of gigs and actually I've never seen the multiple apps per server in practice :X Maybe by coincidence, but every place I've worked from 2002 we always used the single app per server model. So many problems that I've heard people talk about are just no applicable then.
I don't agree. The one app per server model is by far the most superior one. No AS has the isolating properties that the OS process or hypervisor model can give you.
Startup of the month? We did it in 2002 and still do it today. Companies include established and fairly big ones in Europe.
Another list of algorithms while we're on the subject: http://xlinux.nist.gov/dads//
1. After almost two years of Eclipse, I changed to IntelliJ IDEA (The free Community Edition. Its license allows to create all kinds of commercially used code.), which is much more supportive: It tells you a lot more about your code, it teaches you some Java from time to time, and its auto-type / code completion features are stellar. I wish people wouldn't see this kind of statement as fanboy-ism but would instead just try this IDE and realize that recommending it to others (especially beginners) is an act of love, plain and simple. 2. Structuring code/classes can be tricky, and it took me a long time to find the right approach in regards to Java. You see, the access modifiers plus the fact that on the one hand you should strive for small classes but on the other Java is very verbose make it necessary to use Java's package feature, otherwise you'll drown in classes, and you'll also not be able to make meaningful use of the default access modifier "" (No text.) that makes a member accessible for all classes in the same package. --&gt; Everything above the level of a console-based Rock-Paper-Scissors application should have more than one package, and classes should ideally be small, generally below 500 lines, rather below 200. 3. Use Google. Start with a console based Hello World. Modify it a little, add a window, some buttons etc., Google is reliable, I have used it all the time for this for years. The first hits will give you the proper answers.
&gt; BigDecimal a = b.add(c).multiply(c); &gt; &gt; This is not only awful and verbose, it is also wrong! You got it? Yes! In standard mathematical infix notation, * has more precedence than +, so [...] I've actually never had any issues with that. Au contraire, I've found math precedence rules cumbersome to mentally parse, let alone programming language precedence rules. Personally, I think that a strict left to right semantics is really the best, because it will never cause any issues. Consider assigning intermediate expressions: BigDecimal a1 = b.add(c); BigDecimal a = a1.multiply(c); No doubts about precedence there, right?
[When will this Unicode mess finally end?](http://geekandpoke.typepad.com/geekandpoke/2011/08/coders-love-unicode.html)
Hi, Please post your progress, if/when you actually do learn enough programming that you feel you need to brag about it :) And please post your questions if you get stuck. Some people might make fun of your inability to do things, but others will sincerely try to help, and as long as you improve, it will be worth it. --Coder
Yet the first post is about some trivial HTML stuff.
1. IntelliJ, however, as a beginner, i needed to learn the whole building &amp; compilation process, and i had to use notepad-like editors &amp; command line. I'm happy to use intelllij since 2008 at work, but i am damn happy to say i know what it does behind the curtain so it isn't outsmarting me. 2. PLEASE learn standards. I'm sick of colleagues who quick-write undocumented, custom tailored, hidden scripts that do what could be done as well with a documented, well known, well integrated standard tool. 3. I have no perfect tool for you, but you can find the one that fits on the web. I like looking at the JSPs specifications, the javadocs. The Oracle java tutorials, inherited from Sun, are quite good to learn the basics. Good luck :)
1. If you are beginner, I will suggest you not to use any IDE use notepad++ to write your codes and compile with cmd/terminal. After having little practice you can use NetBeans,Intellij IDEA or eclipse Java IDE. Check [This Link](http://www.javatalk.org/2013/11/BEST-JAVA-IDE.html) for all good IDE used for Java. 2. for beginner I can only suggest you to take care of [Common Code Conventions](http://www.javatalk.org/2013/11/Code-Conventions-for-the-Java-Programming-Language.html) 3. Start with ebooks and video tutorials. Here is more information [Best Resources to Learn Java for Beginners](http://www.javatalk.org/2014/01/best-resources-to-learn-java-for-beginners.html) 
1. Eclipse 2. The biggest mistake, I think, is making things too complex. Write the code to do what it needs to do and don't do anything superfluous. 3. There are tutorials all over the web. i'm sure there are rankings for them out there as well. 
In beginning , I used notepad++ to write my codes and compile them on terminal. Tried to code old basic problems in Java. After having little practice I start using NetBeans Java IDE. Check [This Link](http://www.javatalk.org/2013/11/BEST-JAVA-IDE.html) for all good IDE used for Java. Ebooks and video tutorials were very helpful at beginning . Here is more information [Best Resources to Learn Java for Beginners](http://www.javatalk.org/2014/01/best-resources-to-learn-java-for-beginners.html) After getting enough basic knowledge one can start with complex level coding with help of google. Site like [stackoverflow ](https://stackoverflow.com/questions/tagged/java) is helpful, you can learn by solving problems
1. I use IntelliJ at work and home, not just for Java but for a lot of other things, it has the fastest and best intelligent auto complete I have seen in an IDE and supports a whole tonne of frameworks and programming languages, it's also got some kickass keyboard shortcuts and a nice dark skin. However all the main IDEs are good, those are Eclipse, Netbeans and IntelliJ (as far as I am aware). At university you will probably be learning with Eclipse, BlueJ (which I have never used, but is supposed to be educational) or maybe even notepad. If they give you a choice I'd use Eclipse to learn with since it is used by a lot of companies and open source projects. 2. One thing to watch out for is String comparison using the `==` operator. The `==` operator in Java compares memory address and not content of the strings, a quick google search turns up this [blog post](http://javarevisited.blogspot.co.uk/2013/07/java-string-tutorial-and-examples-beginners-programming.html) with some details on Strings in Java. Basically you should use `string1.equals(string2)` when comparing strings in Java. 3. Nab a book from your university library or buy one on Amazon/The Book Depository. I taught myself it following various tutorials online but the books teach you better practices than those most of the time and are more in depth. [Java a Beginners Guide](http://www.amazon.com/Java-Beginners-Guide-Herbert-Schildt/dp/0071809252) seems highly rated on Amazon and has been kept up to date. When I was at university I saw a few copies of [Thinking in Java](http://www.amazon.com/Thinking-Java-Edition-Bruce-Eckel/dp/0131872486) around but it's a tad out of date now, [Head First Java](http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208/) might also be worth a look. The videos I used to learn Java were a combination of [thenewboston](https://buckysroom.org/videos.php?cat=31) videos (these don't encourage good practices but show a basic way of getting started) and some Java games programming related videos by [thecodinguniverse](https://www.youtube.com/playlist?list=PL19F2453814E0E315). Once you have the basics of Java down, might I also suggest completing the challenges on /r/dailyprogrammer to help get you more comfortable with it.
Are we really suprized about this? JBoss has been dipping its toes in a bunch of other frameworks for some time now. The JBoss webconsole is based on GWT, they have a kind of weird GWT-CDI project going, they have made some noise about brining Spring MVC into the Java EE fold (project would standardize Spring MVC via some JSR, led by JBoss), and now they are ALSO jumping on the Angular bandwagon? Wonder if JBoss can really make up its mind. GWT, Spring MVC, Angular... what is it JBoss?
Do they really need to make up their mind, and invest (money and/or effort) into one specific platform? At the end of the day, diversity can be very useful, and allow you to use the best tool for the job.
I've also seen my share of hopelessly overengineered "solutions" that caused more problems than they solved. Many of them were in Java (because that's what pays my bills nowadays). *However*, there are also simple, clean, beautiful applications and libraries out there. So, yes, the language may be verbose and crufty, and many a developer has extended a silent prayer to oracle to please unify primitive types and objects, add real properties and some such. But tell you what? It doesn't matter. Java is popular. Hugely popular. This is a boon and a bane, because it attracts the brilliant and the poor developers (I'd argue by the same magnitude relatively to their distribution). Thing is, there are a lot more poor developers than brilliant ones. That's why you'll see shoddy code and crufty design using every available pattern at once (because the developer got it from a book, so it must be good). So don't be depressed by the poor design - you will find enough shoddy code in just about every language. Hell, there's even some shoddy Rust code out there, and the language isn't even released at the time of this writing. Seek out the beauty in well-designed systems, and follow their example.
Maybe not tuples but a one liner shorthand for small value classes would be nice. Something like python's named tuples.
GWT is abandonware. Google has already offloaded it some time ago. Only vaadin cares about it, and they are fighting an uphill battle against javascript mvvm frameworks.
You tricked me into giving you a Kudo via this very unexpected kind of input gadget. Just so you know how to read your numbers.
Some people call that lacking focus. 
Funny how so many people here don't address the request for a text that combines the requested technologies at all. Anyway, here's another one that does (JSF + Spring): http://beyondjava.net/blog/integrate-jsf-2-spring-3-nicely
I have an almost perfect ignorance about BNF... That's something I need to correct. I'll try later
You are right! I read that pages a million times and never saw it! Once I got my svn working again, I'll fix it, thanks you.
&gt; I've found math precedence rules cumbersome to mentally parse Now that you say that, that's odd. I mean, math rules are more complex because of precedence, I agree, but I never had any problems with them. Intermediate expressions are always better than big formulas, but I've found, in the business environments I work, most people are used to read and write big formulas. Maybe it has to do with what are you used to see. Have you tried any Lisp-like language, like Clojure? If you value consistence and simplicity in syntax, you will probably enjoy that.
&gt; Maybe it has to do with what are you used to see. Probably so. &gt; Have you tried any Lisp-like language, like Clojure? If you value consistence and simplicity in syntax, you will probably enjoy that. I know Clojure a bit. But you know. Free time is scarce ;-)
And after all that. It is the wrong answer. I am finding with more and more regularity that the correct information on SO is the 2nd or 3rd most voted response. Not the 1st.
I've had several bizarrely acrimonious debates here about JSF. I'd be curious what use cases people think it's best suited to. I've honestly never seen it implemented anywhere or even evaluated, but clearly a lot of shops use it. For background, I work in consulting for a shop that does highly customized web sites, mostly marketing-side, usually mobile-friendly. We usually do Spring and JSP. 
Well for large organizations Vaadin makes a lot of sense if they care about avoiding the new-javascript-framework-of-the-month problem. Enterprise architectures should be established based on mature and supported frameworks, not 6month old self hyped javascript. Yes, bring on the downvotes.
I'll tell you that your code will blow up at the entrance of your for loop... Unless you defined your reader somewhere else.. (I hope you didn't) :)
Liberal arts colleges call it well rounded.
Hmm, why? The accepted answer was the right answer to the OP's *actual* question. The highest voted answer is just an interesting side-note about what can go wrong when people think that `\s` is good enough for matching whitespace, but that wasn't the OP's actual question
I was using angular 2 years ago. Its pretty established at this point, not a flavor of the week.
Any IDE has it's problems but I have used both eclipse and dr java and I prefer dr java but that's just me
Red Hat is a huge company with thousands of engineers, they don't all have to work on the same thing.
I use it for data heavy web applications that are internal to the organization. I am also required to have a Rich front end but in terms of functionality and look. It saves large amounts of money and development time. Basically it is like having an entire front end team that will test against all major browsers for free. In addition when you have a data driven application with a lot of business rules state is very important. JSF can manage state very easily.
If I'm remembering correctly, unless you pass false to http://docs.oracle.com/javase/7/docs/api/java/security/cert/PKIXParameters.html#setRevocationEnabled%28boolean%29 then it will try to do CRL checking and if they are unavailable it will throw an exception. All through this doc it talks about CRLs. (e.g. "The setCertStores method allows a caller to specify a List of CertStore objects that will be used by a PKIX implementation of CertPathValidator to find CRLs for path validation.") http://docs.oracle.com/javase/7/docs/technotes/guides/security/certpath/CertPathProgGuide.html#CertPathValidator Edit: You can also add "-Djava.security.debug=certpath" to your command line and look through the output to see if it actually looks at CRL.
&gt; JSF can manage state very easily. Easier than Spring/JSP?
http://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/PBEKeySpec.html PBE stands for Password Based Encryption. Firefox/Thunderbird's Master Password uses this concept to protect any private keys you have stored in the NSS security DB. It's also used for PKCS#12/PFX files. Basically, do what this guy does: http://stackoverflow.com/a/992413/3437938
The real disaster of this is that once you ditch jsf you're back to jsp. The default java web stack needs something better than that. I guess whip out your Tiles if you want any sort of non barbaric jsp.
of course you need state. but you keep the state on the client side... server side state needs replication thus does not scale well. also, serverside state produces those errors that happen once, and are hard to reproduce. i am not an angular zealot, i have only little experience with angular. i have experience in lots of serverside webdevelopment technologies... jsp, zk-framework, gwt to name a few. i just like to decouple my frontend from my backend via rest-api. so i can integrate my webapp with other apps, or other apps can use my api. other than that, the frontend technologystack based on javascript/html/css has much more advantages. you have no limitations and are very flexible, you can write clean html, you can create a slim frontend. you use the right tool for the job, namely write your frontend in javascript (not java). if you need types or other language improvements there are script languages that compile into javascript. 
It was pretty established as of 1.2.x. Before that, it was evolving REALLY quickly (and it still is to some extent). I tried building a few small side-projects on it, and every week I went to check the documentation I was noticing huge patches, often with some breaking changes. I think enterprises will move there eventually, but right now there aren't enough enterprise-y classes, books, and helper libraries built on top of angular/ember for everyone to have caught up.
Vaadin does not make sense. No front end dev in their right mind would choose to use it. From my experience, it's Java architects that don't understand how front end is done these days that choose frameworks like Vaadin. My previous client had a few apps that used Vaadin and I've never seen so many nested divs. The performance in the browser was horrible and writing CSS for it was a nightmare.
I don't think the problem is as widespread as the author thinks. Gradle and Android is an unfortunate pairing. Both has some of the worst documentation of any Java tool I've used. You shouldn't have to click through 10 times to find the answer you initially thought you found on click 1. Talk about stack overflow. In the end Android I can usually find an answer to online and I get a thrill once its working. With gradle, it always seems to end with me looking at groovy source in github, and I hate it for that.
I really don't understand why the world needed Thymeleaf. What does it offer beyond the range of existing template languages?
Or forgo using any type of templating entirely and just write HTML 5 + AngluarJS + JAX-RS.
The other answered enough abuout 1&amp;2. Apart fom recommending [Head First Java](http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208) I'd advise you to go to [Coding Bat](http://codingbat.com/java) and try to solve at least the beginner puzzles there. We got a student here at work who learned (or should've learned) Java in university but the professor was so stuck on high minded patterns and theoretical stuff that none of the students actually learned a bit of coding. Those puzzles are perfect for getting to know strings, loops and all the beginner stuff that you should know inside out. And depending on what you do at uni help you with your exams a lot.
1. Eclipse, long time user, very productive. 2. Not using an IDE. Choose an area of focus and learn it well. Learn to code-refactor-code within an IDE, as it a highly productive Java cycle. 3. Stanford had a great intro series but I can't seem to find it now :( It had algorithms and bunch of cool things in there in very bite size assignments...
Plenty of sites are heavily content focused from a variety of different areas and are not updated dynamically when the page is rendered. The need for angular drops dramatically in those cases.
HTFC sounds insanely cool. I'll have a look into the benchmarks and see if I can reproduce the results.
I think you are right about that. If you are building a marketing website that does not have a large amount of user interaction JSF is not really needed.
In my opinion yes. It requires a lot less configuration for starters. Usually when using Spring and JSP your JavaScript and the process of sending data back and forth becomes a bit of a mess.
I guess I haven't seen that but then I'm not at all familiar with your domain or process, so who knows. We use angular and it's pretty easy to manage the back and forth. Even when we used straight js it wasn't that bad. It was just tougher to maintain.
Why yes absolutely enterprise architecture is all about the amount of nested divs a framework generates.
But why would you want to ditch JSF? For server side rendering of HTML this works perfectly, and for AngularJS, iOS, Android and friends Java EE has JAX-RS.
Will it still be available and supported 10years from now ? Because that's how long our apps are maintained and developed. All you javascript front end boys will have moved to the next hype by then, i guarantee it.
And lacking focus for a big company is bad?
Yes , that and having companies supporting it. 
Having skimmed through the responses, I'm not sure if these have been mentioned (and I'm sure the more salient points have): Type "/**" above your method declarations and hit enter, eclipse (and I'm pretty sure intellij) will generate a template for your javadoc. Remember to implement hashcode and equals on any class you'll want to use in a hash-based collection. Again, intellij and eclipse will automatically generate a good one for you based on whatever fields you want included.
Vaadin is hardly more of a mature and supported framework than AngularJs is, though. Vaading is seen as an amusing project that will be forever stuck at that corporate process that validates and establishes norms for the usage of new technologies. Enterprise projects will probably rely more on JavaEE or Spring. *EDIT: Fixed typo
Your company is already dead. 10y is an unacceptably long timeframe, and technology is moving faster than ever.
I saw the setRevocationEnabled piece and included it in my code but I couldn't tell if it was actually working since the build() method would also not throw an exception with the OpenSSL certificates that I knew were revoked. I ended up just checking trust chains and CRLs manually since the code was more obvious and easier to modify if needed. It also wasn't that hard to implement. The CertPathValidator and similar classes seem to have way too much stuff going on behind the scenes to be useful but the debugger appears to be exactly what I would have needed though.
at one point you write: &gt; Once I got my svn working again I think you meant to have it say "Once I *get*" Just messing, thanks for making this write-up!
My 'company' is a large supranational union employing some 30k people. It has transitioned from paper-only to mainframe terminals to powerbuilder, coldfusion and more 'recently' java. It is not dead i can assure you that. We build apps that go far beyond the omgtweetlike stuff you seem to be occupied with. To each his own though i have no issue with that.
I didn't say your company had noticed. EDIT: Full disclosure, I work for a smaller company, only 8000 employees. We are focused on cloud solutions right now because owning your own datacenter is going to get prohibitively expensive REALLY quickly REALLY soon. This technology didn't *exist* 10 years ago, and it will probably shift dramatically again as companies our size come online in the next couple years. Just because you haven't been disrupted yet doesn't mean you won't be.
I agreed with him on this part: &gt; The biggest problem I’ve encountered over the years looking at Java code is that it always seems to be the product of someone who fancies themselves as an architect. I see a lot of "frameworks" that get thrown in because "framework words sound cool". I've recently been writing stuff in hibernate. I'll describe the process: 1. You spend 2-3 months getting hibernate set up and actually working 2. Finally it's working, and you start doing simple cases and it's faster - yah! 3. Then you get into complexity, and suddenly you're spending 2-3 times longer than you would if you just wrote jdbc trying to figure out the hibernate way of doing things. Specifically: a. We have to edit like around 6 files to add a domain object, service layer, and dao. There's 2 xml configuration files, despite that we use annotations, and then you have to copy those to the test project for some reason. b. Hibernate will not work with a table without a primary key c. If your primary key is bad (non-unique values), hibernate will not tell you and throw an exception. It will simply give you bad data. d. If you configure anything wrong at all, hibernate will loop endlessly on startup and not tell you where the error is occuring. Did you misname a column? It doesn't tell you that, it just loops endlessly. e. You can theoretically create a composite primary key, someone else on our team did it successfully, but for me it causes an infinite loop no matter what I do. I had to rewrite my code in jdbc to get it working. These frameworks are always poorly documented to get setup, help with simple cases, but then when you get complexity once again it takes several times more effort to figure out how to get the framework to do it than it would to just write it without the framework. 
I agree with you. At my last job I pushed to use Vaadin 6 and it simplifies our code a lot: no more JSP scripting, hiring devs is easier too. Right tool for the right job.
Vaadin was created about ten years ago and it's still treated as an amusing project that will "eventually" be adopted by the enterprise when the corporate tech adoption process is finished. AngularJS is five years old, BTW. Yeah, it will never be adopted by the enterprise.
I saw no mention of AngularJS whatsoever in the blog article. Are you making it up with your title?
Ha. I wrote JMeter. AMA
I have used the Merlin implementation a lot, which ships with WSS4J and is what most people use. Why don't you just grab the Merlin source and change the relevant parts to add your JDBC magic? It should be easy, this thing was designed to be plugable.
Eh...properly chaining isn't easy. Especially when you start adding in things like Policy Constraints extension. I would recommend using the CertPath API *at least* for chaining/path validation with revocation checking turned off and you can manually check the CRL yourself after (though again, I know it can do it as part of the check). I actually implemented it this way because I was using custom OSCP with CRL fall-back for revocation checking.
Thanks man, ill check that out.
The main issue I see with people trying to adopt JSF is how complex it is. Out of the box you have to have an understanding of Context lifecycles and Dependency Injection, which can be a large learning curve, especially for people out of college. It would be nice if they added a "light-weight" version or perhaps some defaults to JSF, that hides that level of complexity. That would make it much more appealing.
I don't miss my JSF RichFaces days. Many times we were forced to step through the code to understand why some component was not behaving the way it should. Their Eclipse tooling was great, though.
Who says we want to host our politically sensitive apps and data in an externally hosted commercial cloud offering that god knows who can tap into? If anything Snowden says is true i would say we are going to trend back to private hosting rather cloud. At least those companies that care about their data.
I use GWT daily and love it. Other folks are taking point in developing GWT but it isn't abandoned. Sencha pushes it along with Vaadin.
I use JSF2 a lot for applications that don't require a highly customized front end. As best I can tell in the community, not many people outside of Redhat seem to be using Richfaces for new projects. Primefaces has been offering a superior library for years now. I don't see anything in the article saying they are going to focus on Angular though, that seems an odd title.
I could not disagree more. JSF is a simplification of web development. Dependency Injection is not JSF specific but very useful. Getting a simple JSF CRUD application up is a snap with very little configuration.
People following stereotypes will seek out information to confirm them. I've done hacks in Java so ugly that it would make many a C programmer blush. I've seen the latest Gnome framework, and let me tell you, it's the very definition of over-engineering. So what should I infer from this?
Like avoidhugeships, I don't agree with it. The things you cite are the kind of "complexity" you have to deal with in every (web) framework. Dependency injection is indeed not specific to JSF and in the current JSF version (2.2) you would not even use the JSF version of this but the Java EE platform technology: CDI. Alternative web frameworks like Spring MVC have perhaps an even greater dependency on uhm, dependency injection. I do agree with you that a light-weight version or something with better defaults would be nice. If there's one thing I really hate in JSF is that it doesn't default to an .xhtml mapping. The default .jsf or /faces mapping, words can't express how much I hate it and how much this simple omission causes beginners to needlessly struggle with their first page.
I like to use the hammer anolgy. JSF basically gives you a hammer that is sutured to your hand. When you want to put the hammer down and use something else, the response is, "Why would anyone want to do that. This hammer can do everything." The dream was that you could easily drag and drop components. That was great for standard data input with little customization. As soon as you wanted some additional functionality, you have this goliath of a framework sutured around your app that can't possibly account for everything. It's not fun.
With announcements like this you do have to read between the lines. What companies typically say that are the reasons are rarely the actual reasons. Maybe the fact that they weren't able to regain marketshare lost to PrimeFaces is the main reason, but you won't see that being mentioned. As for Angular, they say this: &gt;Many parts of the industry are moving to rich HTML5-based web apps that leverage frameworks like jQuery or **AngularJS** with lighter-weight server resources that leverage JAX-RS. Through JBoss Developer (http://www.jboss.org/developer-materials) we’ve been providing examples and quickstarts to help developers explore and get started with **these new approaches** for building user interfaces So according to the above JBoss thinks "many parts of the industry" move to jQuery and Angular. With which they probably mean that they are convinced Angular is the new hot sh*t and everything else sucks. They have already been providing examples and quickstarts for Angular and (not mentioned in the article) most new things in JBoss tools (Red Hat studio) have been about Angular support for some time. Reading a little between the lines and putting A and B together JBoss does say they're moving to Angular. There are a few open ends. Before JBoss was in love with GWT, and they still have several support projects for this. What will happen with these? JBoss has also announced they're bringing Spring MVC into the Java EE fold. How does this correspond to them supporting Angular? And will they only support Angular, or also build their own Angular clone? 
Their Eclipse tooling IS great ;)
&gt; The dream was that you could easily drag and drop components I don't know if this was THE dream. It was part of the original requirements for sure, but the focus shifted away from it at a pretty early stage. As far as I remember, I haven't seen a single new feature since JSF 1.0 that in anyway helped the drag and drop visual editing. 
I had the same question in mind, when I looked up their website
JSP with tag files and JSTL is perfectly good for 99% of use cases.
The bonus for Angular (as I see it) is that it's not a huge framework. It also doesn't have a huge learning curve, and you can be productive in it pretty quickly. Compare that with something like JSF/GWT, or even a more heavyweight JS framework like Ext JS. You pass up the support, but you are WAAAY closer to the far more establish standards of HTML[5]/CSS/JS.
&gt; Many parts of the industry are moving to rich HTML5-based web apps that leverage frameworks like jQuery or AngularJS with lighter-weight server resources that leverage JAX-RS. Through JBoss Developer (http://www.jboss.org/developer-materials) we’ve been providing examples and quickstarts to help developers explore and get started with these new approaches for building user interfaces. Be sure to take a look through those quickstarts to explore the available alternatives to JSF for building Web UIs. Didn't see much at that link that was specific to AngularJS, so probably just speculation. Interestingly enough, JSF 2.3 was just proposed/announced with features to support JavaScript-to-bean-method-invokation via AJAX. Something that most shops probably rolled their own implementation of years ago.
Well I remember backbone at 2 years old being pretty established and then being replaced by angular. 
I think the dream was a stateful component UI framework in the days before AJAX was popularized.
Not sure I understand why Spring MVC is part of the conversation when CDI is already part of the Java EE spec...
Cmd-Opt-L (IntelliJ/Mac) or some variant for everyone on my team. We're monsters that use the built in default formatting profile. 
I just stopped at their booth at OSCON and told them something similar. I felt bad.
jsf is dead... [Gosling on jsf](https://www.youtube.com/watch?v=9ei-rbULWoA#t=47m)
I've been messing with it for a while now, I like it quite a bit. What is it that "people" seem to hate so much about it?
We use IBM's version of Eclipse ( Rational Application Development) at work, so I will say Eclipse. JGrasp is good for beginners. Take your time with the language and don't rush it. Often if you don't keep working on personal projects, you might just forget how to use inheritance, polymorphism, abstraction, etc. Coding bat is excellent for smithing and honing your problem-solving skills.
Safer from what? * Obsolescence? I think the chances are about even * Memory leaks? Most probably (though with byte code generation, the outcome is still open) * ... (you get the idea)
You're a bit [late](http://www.reddit.com/r/java/comments/2b15g3/log4j2_is_final_congrats_to_the_team_and_welcome/cj2qdzu) to the party.
Holy shit balls.
The Primefaces lead in a [forum post](http://forum.primefaces.org/viewtopic.php?f=3&amp;t=31266) mentioned concerning Angular: &gt; I have plans to add built-in js mvc framework support, probably it will be angular. So it seems in some near future Angular could be powering the Javascript part of Primefaces, instead of or together with jQuery. Anyone needing very custom widgets can make them using Angular/jQuery and integrate them in Primefaces, and everybody else can keep using the Java / XML widgets. This could be an alternative to going full polyglot, like this only a few developers in the team need to know js to produce custom widgets. 
logback for the win!
Oh dear... Did you LISTEN to the fragment? It's a wellknown slip of the tongue. James is talking about JSP, not about JSF! 
I meant PrimeUI not PrimeFaces back then. [PrimeUI!](http://www.primefaces.org/primeui/) is a set of Javascript Widgets on top of jQuery UI. We have good knowledge on AngularJS and various other *JS Frameworks so thought we could port PrimeUI to AngularJS (aka PrimeNG) but the custom directive mechanism is really awful and overcomplicated compared to the custom component model of JSF. So until AngularJS offers simpler APIs to implement custom directives, we've no plans to provide PrimeFaces Widgets to it.
No, AngularJS is in the article. Read it again and use your browser's search function if you can't spot the word in the text. Believe me, it's really there! ;) One mistake I made is that the title should have ended with a question mark. It should have ended with ", JBoss to focus on AngularJS?" Unfortunately I can't edit the title anymore... 
Not really, JSF 2.3 has started for JavaEE 8. Liferay has just announced a new component suite for JSF and most of Oracle products are powered by their very own ADF Faces. [PrimeFaces!](http://www.primefaces.org/) has a strong user base as well. PF 4.0 has been downloaded 150K+ times.
As a technology for source code XHTML is not deprecated at all. The fact that a Facelet's source is XHTML doesn't mean it also renders XHTML. In nearly all cases a Facelet these days renders HTML 5, and occasionally HTML 4, but rarely if ever XHTML.
Author here. Surprised to see a little traffic spike from Reddit after 3 years, but you never know. This was Hibernate 3.3 or 3.6. The problem is Hibernate, not cache provider. Hibernate would only cache raw arrays of fields, without a way to provide compatibility, versioning, anything. If an object is populated from that array on another node, you may be lucky and it can just work, or you may be unlucky and it can misplace fields. I have seen data loss caused by this issue a few times in production. Test case is hard - you would basically need 2 apps (or 2 classloaders?) with 2 versions of a class, and find a layout that is broken for everyone. While I am a fan of testing in general, I think this is one of the cases when tests can merely support your reasoning, but it is a bigger issue that actually requires some deep design first. If anyone was willing to make an effort on actually fixing it, then understanding theoretically how it is possible would not be an issue. Then we can talk about better design or warn loudly that it is not supported. Saying "no tests - no bug" is just a hostile and selfish thing to do. (Yes, I do understand it's open source...) **Bottom line**: Hibernate (at least 3) is doing the worst thing possible: It fails *silently*. It allows you to share cache for two class versions, but does not actually support it. It would be better if it did support it (look at least at serialVersionUID?) or failed loudly when it happens. Silent data corruption is the worst thing that could happen.
On the other hand, increasingly EVERY web framework is pretty much suitable for almost every kind of web app. There was a very good article about this a few weeks ago. There are a few edge cases, but generally "the right tool for the right job" is greatly abused by developers in order to advocate or chose their favourite framework of the week.
These are not bugs; if anything, shortcomings of spring.
&gt; server side state needs replication thus does not scale well. In JSF you can optionally keep state on the client. It has advantages and disadvantages. Replication is not always needed, and if you need it then buddy replication is nearly always good enough and this scales perfectly. State can also function as cache, which IMPROVES scaling, since individual nodes don't have to contact global resources as much, which will delay them becomming a bottleneck. 
&gt;jsf is dead... no way!
Thanks for all the replies guys. It looks like IntelliJ is the most popular but I will give them all a try. 
Thanks for the reply. I usually stick with standards except my commenting and documentation is pretty poor. 
Thanks for the heads up on string comparison
Of course, Log4j2 is an even better Log4j than logback. Async loggers blow async appenders out of the water, performance-wise. Also the API has progressed nicely. I particularly like the hard separation from API and implementation. This means a) creating API bridges is simple, b) you don't wed your logging code to the config or implementation.
At last, a java log framework. [Put it on the pile](http://www.eltomation.com/images/Large/MachWWCB/Log%20Storage%201.jpg).
I haven't read up on this so pardon the ignorance here, but just based on the article it looks like it's saying if you use an async appended and set the max queue depth to 500, that if it fills up with 500 messages it will just start dropping any new message received. Is that right? If so then no wonder that outperforms everything else. Logging goes really fast when you don't actually log haha While a bit slower, it sounds like that larger queue is a better idea to avoid message loss. Or am I missing something important here?
In this case log messages are not dropped if the queue fills up, they just make everything much slower but do find their way in. That's why the async appender also includes a discarding threshold for low level messages to help avoid that. Also, the logging speed was derived from counting the messages that were in fact logged to a file. There was no significant difference between the 500 and 1,000,000 instances so it looks like the size wasn't much of an issue.
Yeah, my bad. I realized that angular was mentioned once along with jquery. And that's it! It doesn't mean they are going to start developing in angular. 
Ran into something similar a while ago and solved it with http://en.wikipedia.org/wiki/Visitor_pattern 
&gt; like the hard separation from API and implementation Wasn't it the case between SLF4j and Logback before? What has been improved by Log4j2?
logging should be async by default, I wish the framework had done that. even the so called "synchronous" logging typically are asynchronous under the hood - we make a call to write something to a file or a socket, the call returns, yet the bytes have not really been persisted on the disk, or delivered to the remote machine.
Yes, as far as I recall, the idea to separate came from the guys who left the log4j project to create logback. I can understand their frustration with the backwards compatibility requirements of log4j. On the other hand, log4j2 isn't just logback by another name. No-messages-dropped reconfiguration, logging streams and logger wrappers (to allow e.g. new log levels) are really nice to have.
So when you call log.info(value); for example, what happens specifically? If the queue is full - how does that message find a way in? I guess I could look at the code and see. In a quick search I couldn't find what discardingThreshold actually does, I'll have to do a better search later for that.
hey, I use jmeter @ work but can't think of a question.. it just works :)
Cool. The "just working" part is mostly due to folks like Seb, who currently maintains it. I handed it off to him in 2005, but the basic plugin structure and UI structure is what I made from 2000-2005. Every now and then I have occasion to use it and it's gratifying to see that basic structure is still the heart of JMeter, after nearly 10 years. If the UI is wonky, it's because I have a wonky mind. You should see the UI's I make these days ;-)
http://tools.ietf.org/html/rfc5280#section-6 It seems simple enough for basic certificates but when you get into some of the extensions it gets a little more complicated. For instance, if you are accepting a certificate and it has an extension marked as critical and you don't know how to process it you are supposed to reject the cert immediately since the issuer has marked that piece of information as critical to using the cert and if your software can't understand it then how you can 100% verify it. I've been working with PKI for about 10 years now and I *ALWAYS* let a library (JRE internal, BouncyCastle, JSS, EMC's Share, etc) do the hard stuff. Trying to implement an RFC is a royal PITA. I figure there's a chance there's a vulnerability in the library code but how much more chance if I write it myself?
yeah, the UI is odd but the docs got me through that. and once i had a basic outline i just re-use/modify that for 99% of what i do.
Even within asynchronous handling, there are different levels (possible with log4j2): * fully synchronous: synchronous logging on a filesystem with full write-through * synchronous logging &amp; appending: The same, but with filesystem caches * synchronous logging, asynchronous appending: The messages are formatted and serialized synchronous in your thread and handed over to an appender thread that does the writing. You still suffer from locking, but at least not from file locking. * fully asynchronous logging (log4j2 async loggers): Your thread only creates a log message object that is then put onto a ring buffer that only blocks if full (and thanks to batching gets cleared quite fast). One drawback is that you are responsible for keeping all objects referenced from the LogEvent in a consistent state until they are logged. E.g. modifying a collection while it is logged may lead to an ConcurrentModificationException.
[**@sempf**](https://twitter.com/sempf): &gt;[2014-07-23 17:29:03 UTC](https://twitter.com/sempf/status/491998441074339841) &gt;Did you know you could tell Java to stop asking you about the installing junkware? [*pic.twitter.com*](http://pbs.twimg.com/media/BtPt-XOCQAEAs6S.png) [^[Imgur]](http://i.imgur.com/DSjlDXc.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2binw2%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
&gt; hibernate well not every framework has a complex setup. for instance you're maybe right, but i juse eclipselink as jpa standard instead of hibernate and i set up a working project within 15 minutes without any manual. it wisely depends on the framework. there are plenty easy-to-use frameworks for java that really speed up development.
The 4th level is not necessarily faster in most cases, since more objects are handed over across-thread. The 3rd level allows VM to apply more optimization techniques, e.g. escape analysis. I think the best default level should be the 3rd level. We are not talking about database transaction logs here; most applications won't mind if some log entries are lost in the event of application crash.
Could you elaborate on this?
&gt;The 4th level is not necessarily faster in most cases, since more objects are handed over across-thread. As long as those objects are immutable or otherwise 'owned' by the async logger thread, this is pretty much instantaneous. As I said, there's no locking. And my benchmarks show that the reduced lock contention is enough to outweigh any disadvantages. &gt; The 3rd level allows VM to apply more optimization techniques, e.g. escape analysis. I fail to see how escape analysis could be thwarted by a read/write barrier. Could you elaborate on this? &gt;I think the best default level should be the 3rd level. We are not talking about database transaction logs here; most applications won't mind if some log entries are lost in the event of application crash. On the contrary, the last thing I want is to be led on a goose chase after an application crash because the message that shows the reason was lost.
Proper async logging requires another third party library (LMAX Disruptor) to really gain any advantages. Using non-blocking IO can help quite a bit, otherwise.
Check out the /r/Javahelp wiki. Plenty tutorials listed there. Mind you, all will require quite some efforts. 
InfoQ's Charles Humble does an in-depth review of the soon-to-GA project, Spring XD. Offers stream and batch processing with a simple, Linux like DSL for common big data use cases like ingest, analyze, process, export. Runs locally for dev, CloudFoundry and EC2.
Say the message string is computed from some local objects. The VM can be smart enough to notice that they will never be accessed by another thread, therefore a lot more optimization can be applied. In the best case, these objects may not even need to be created at all. JMM only concerns with shared memory. Thread-local actions do not need to observe memory barriers.
How often do you log objects that are going to be mutated meanwhile? In my usage, there are a lot of strings and primitive values, with the occasional domain object thrown in, but I always have those immutable or copied / toString'd within my work thread. For immutable objects, the JVM can use all optimizations that would otherwise be invalid on multi-thread access. And you usually won't want to log mutables anyway, unless you can otherwise ensure that they are unchanged until logged.
If you've gotten to the point where tweaking your logging to get gains provides a noticeable improvement in your app you either have already won and can stop worrying about performance or your logging too much. 
API-wise, you can use SLF4J or Log4j2 as the API. Either work just fine. It's Log4j2 versus Logback in terms of implementation, however. There are some key features in Log4j 2 like reconfiguring loggers at runtime without losing any log messages during the reconfiguration, asynchronous loggers (which increases throughput significantly, especially when using slower appenders that use network resources), multiple file formats for configuration, and tons of other things.
These tips are especially handy if you're using Spring Boot since they default to logback. Then again, some of these tips might already be used in Spring Boot.
The doc has some good examples: http://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html
That option doesn't exist on OSX.
The submission is kind of stupid. Because that option was implemented *just now*. At least in JDK 8 (u11). http://www.reddit.com/r/java/comments/2bfs1u/jdk_8u11_update_release_notes/
So, if I select that option, will it: a. not ask me, and not install the crapware, or b. not ask me, and silently install the crapware? I'm hoping it's a, but any company installing crapware like that has already lost enough trust for me to consider b a realistic option.
I can't remember seeing the junkware offer when installing the JRE via the JDK. Never update. Uninstall and reinstall new version every time. That *does* mean that I have to manually fix %PATH% as part of the process though. 
Derek Banas on youtube has good Java tutorials.
Where does your passion exist? What interest you? That's the best place to start
Sure. Write out a file containing the number of times the program has run. Whenever the program runs, it reads the file, increments the number, and writes the file back out. 
Like incorporating a log output on trigger events to file?
Web applications is what I am interested in. just wanted to know where to look for small projects that I can do in my spare time. I already work in a 60 hr/week job to support my family.
Me too, is it because we have the JDK not JRE?
Does it involve butterflies?
Thanks
Thanks
Perfect! Thank you very much for your input!
Check out /r/dailyprogrammer for a lot of ideas. Even if they are too advanced, you can simplify them a little, as well as compare your solution to other people's solutions. 
As I said, look at the performance numbers. Even if the JVM cannot optimize some operations, those operations ultimately don't matter, because: * your application threads just set up LogEvents - an operation hardly worthy of optimization - it could potentially be made faster by specific LogEvent classes that avoid autoboxing primitives, and object pooling, but as this stuff is already so fast, I wouldn't worry about it. * and the potentially optimizable formatting and appending part is run within the AsyncLoggerThread, which is IO-bound anyway. Also the JVM will optimize all accesses for non-volatile memory whether it's shared or not.
Of course, the cliché dismissal - after all it's just another logging framework. And if you don't care too much about the performance of your applications, that's an entirely reasonable response. Your time is too precious to look at each new old thing.
Hey Java Jerk, it looks like you just automatically assumed OP had no programming experience. What if OP just got finished building his own compiler for a language he invented so he could program an operating system for the computer he just built? HUH? Fuck off, jerk. ^^^just ^^^joking
BTW, even if a `log()` method is as simple as one volatile read + one volatile write, the memory barriers could severely hinder JVM's optimization ability on the surrounding code. If the code is performance critical, one must try best to avoid [*Synchronization actions*](http://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.2)
The thing is that the document has to be easily editable by someone that only knows how to use word (or any document editor like word, openoffice, libreoffice etc). That's why I'm limited to that (that plus I have to generate a pdf from that document afterwards)
We had this very same issue, and ended up developing a small wrapper for OpenOffice documents that does just that. You shoud take a look: https://github.com/FenixEdu/oddjet
Whether you append or log asynchronously, you need at least one synchronization point at handoff (either of the assembled log message or the LogEvent). I'm curious: How would you propose avoiding this? Apart from that, a memory barrier is currently the fastest way to synchronize memory access.
I am using pluralsight Java Fundamentals course.. Not entirely a beginners course though, as in he switches between advanced topics once in a while without any warning..Helps if you are already a programmer in some other language
From the Logback docs: "If the queue is filled up, then application threads are blocked from logging new events until the worker thread has had a chance to dispatch one or more events." http://logback.qos.ch/manual/appenders.html#AsyncAppender You could say this makes Async kind of fall back to Sync A discardingThreshold of 0.2 (default) for example means that when the queue is 80% full it will drop messages of levels lower than WARN and ERROR (In the benchmark we used INFO)
There is apache POI: http://poi.apache.org/ Another option, write HTML and give it .xls or .doc extension and/or mime/type, and word or excel will parse it correctly when it gets opened (at least it used to work with previous versions of Office, I haven't tried this for a while). For OpenOffice/LibreOffice, AFAIK there is http://www.jopendocument.org/ Apparently there are others as well: http://opendocsociety.org/tools/odf-tools/ Also, if you need a reporting engine, look at Jasper-reports, or maybe Eclipse BIRT- two most popular free ones. I think they should be able to produce OpenOffice or PDF files. Do you need to generate an editable document? There are a bunch of libraries to generate PDF if you just need a report that you can print.
HTML can be opened and edited inside Word, Openoffice, Libreoffice - all the same. Most users wouldn't even know that they are working on a HTML document. Generating a PDF from HTML is just as easy. I wouldn't generally disregard the idea of HTML as Output format.
... for varying definitions of "modernized"
Let's be honest, **modernized** is not the word i would use. But at least with this release evaded becoming (more) obsolete.
I ain't giving them my email. Put the PDF up somewhere for us to download.
Yes, has to be editable since it's for something like a project, and if it needs some corrections, I want the people to be able to change it "manually" in a way they know well
Stop nitpicking! The author meant "Java 8 release demonstrates that a language can be _evolved_ without...". Also despite closures not being a modern concept, Java 8 has a more modern syntax compared to Java 7.
TIL java is obsolete.
That's true of pretty mech any language over 10 years old, PHP, C#, ... The exceptions being Java, PHP, C#.... Plenty of new work is done in Java, just ask any Android developer.
There have been few breaking changes in java since 1.0. Honestly, it is about time for the language to break some things. It would be nice if one day they decided "you know what, nobody should be using enumerations, let's remove that"
That is the actual OO answer to the problem, and none of them gave it :(
Why would Oracle need such tasteless junkware? Maybe they're crumbling at their foundation, especially since Java is such an important tech for them.
say we have a performance critical busy loop, which occasionally needs to log something. if the log statement is embedded inside the loop, the memory barriers could severely jeopardize optimization. instead, we could save the log entry to a local variable, and do the actually logging after loop exit. then the loop contains only thread-local actions, which can be optimized much better.
[Nope you shouldn't](http://docs.oracle.com/javase/7/docs/api/java/util/Enumeration.html) iterators have all the same functionality and are integrated into the language. Bet you thought I was talking about Enums. ;) You should use the hell out of those. That is part of my point.
I have that option in my client. It was not checked. Yet, I never see junkware offers. I obtain my java from: http://java.oracle.com/ (Then go to Java SE downloads near the top-right area of the page) I always uninstall first, then install, in this order: 1. 32-bit JRE 2a. 64-bit JDK 2b. . . . which installs: 64-bit JRE Then in all three JREs I find the lib/security folder and replace both local_policy.jar and US_export_policy.jar with the jars of the same name from the: Unlimited Strength Java(TM) Cryptography Extension Policy Files. Could it be where I download Java from that has anything to do with not seeing junkware? 
Perhaps this is a dumb question, but is there a reason you're not just compiling them yourself?
fuck this fucking email register thing. look at the op: http://www.reddit.com/user/ancatrusca . all he does is post articles from this site which are behind a register wall.
It's "obsolete" in the sense that C++ is "obsolete". Meaning: it's no longer the sexy new kid on the block, but is in extensive use throughout the world with tons of new projects being written in it, and a growing demand for developers that have experience with it. In other words: it's obsolete to language hipsters.
Thanks, you really did fix that for me.
No problem. There are tons of little classes/interfaces like this in java that should just be cleaned up. This case is particularly unfortunate since the name coincides with a language feature. (The interface came first) Yeah, it might break some old legacy code somewhere, but really that code was likely running on java 1.3 anyways.
Closures have also been part of java since the beginning with anonymous inner classes, the only thing that is new here is the lambda syntax, which is still a nice feature.
Fix the version of your JRE
Pretty much. I mean, I understand the point about Java feeling a little old to people used to newer languages, but it's not like it's a massive burden to use due to its age. Writing w/ TurboPascal, using an old Fortran compiler, or REXX w/ any of the old implementations... now *those* are old burdens. Java? Perfectly reasonable choice for modern software. Sure, it doesn't evolve as fast as some new languages, but adding large language features is not something you can rush into when you have billions of dollars of software written using said language.
dont forget the reworking of many core classes to work with them
Thank you! I will take a look at it.
Try running it from a console and see if it tells you anything
That's like saying that c has object orientation because you can simulate it using existing syntax. 
Other ways of doing so on windows: - install the SDK, not just the JRE - install using Ninite or perhaps Chocolatey; don't use the downloads from Oracle directly
Uninstall Netbeans Uninstall all versions of Java Reinstall the latest version of Java 8 64-bit Reinstall the latest version of Netbeans 8.0
Hey, quick question, how could you do the same with a float? If I just substitute long with float, I only get numbers under 1. Thanks!
Unfortunately a good deal of interfaces that are still in use today use them, so code using these interfaces uses them, and code that uses that code etc. I would love to see them go as well, but it's not always that easy.
why u don't try vaadin? 
I'm in exactly the same boat, using Scala, Swift, and JS for all new projects. But calling Java obsolete seemed a bit much.
Java is not obsolete. But the evolution of programming languages has nothing to do with hipsters. There are practical reasons for it. New problem spaces, smarter compilers and faster machines. It is interesting that you mentioned C++. It isn't obsolete, but we use it less and less for problems that can be solved much more conveniently and naturally with other programming languages and paradigms.
OS level as in "your OS is written in it"? Most of the big boys still use raw C, IIRC.
Yeah, but he doesn't look to be spamming these articles, so I don't see an issue. I do wish people would just not upvote register wall content, but we can't really do anything about that. It is up to the mods if they want to allow it.