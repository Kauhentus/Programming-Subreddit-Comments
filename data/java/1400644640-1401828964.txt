http://ideone.com/1Tsg58 I honestly don't know if this will just confuse you more, but, you can use ideone.com to test out simple java for compilation errors and output as long as the name of the class is `Main` (instead of `Anything`, in the case of your example).
Definitely open to feature ideas if you have any (author here). So far I've just tried to keep the scope tight.
Honestly I actually tried to make the switch recently but I'm going to have to try again when I start a new project, couldn't for the life of me get the project to export cleanly out of Eclipse into AS. Bloody gradle.
Why not give the different tiles different background colors while developing?
Then it is a matter of me not using IntelliJ the way it's meant to be. I usually do it old-school-style and create the block first. I will look into surrounding existing code with a try-catch block, thanks.
Like the other commenters have said, Android Studio is pretty good now if you're starting a new app... Otherwise if you want to use the still official dev tool (and in some ways I prefer Eclipse to Intellij) it's probably going to be easier to grab the ADT Bundle from http://developer.android.com/sdk/installing/bundle.html instead of trying to install the plugin to an existing Eclipse. If you need other Eclipse plugins after you get it running just Google for "ADT enable eclipse marketplace" or similar.
It depends on how serious you are about exploring the different levels of programming, from lower level languages like C to high level languages like python. If you learn Java first learning python will be relatively easy and learning C or C++ will be much easier than if you had started with Python. If you are looking for some immediate gratification Python is the language you are looking for. It is easier to learn and it's scientific libraries are pretty good. If you are looking to make a career out of programming and want to well positioned to explore many different kinds of languages then you should plunge into Java. I don't know if Java has any scientific libraries worth writing home about. I want to say that there is not much want for serious scientific libraries in Java given that there are no multi-dimensional arrays. I suppose when a Java programmer wants to do some scientific computing they simply take off their Java hat and put on their Octave/Fortran/C hat. My best advice is don't be a Python programmer and don't be a Java programmer. Be a programmer that knows how to use the best tools for a given task.
Java is the native language for things like Hadoop, so you can operate at scale and in production. Python is simpler to pickup but it is far less useful than Java when you're operating at scale and in production. Java also has strong statistical and ML libraries. My suggestion is learn both, but use Java first and as much as possible since it's easier to go into production and for the reasons /u/FreeBird423 mentioned. 
&gt; javac -verbose Anything.java . . . [wrote RegularFileObject[Anything.class]] [total 465ms] Totally works.
There was a great article recently about why scientist were still using fortran after so many many years. They suggested clojure as a replacement language, this also runs on the jvm. Java should suit you fine though. 
Thanks for the encouragement, I really appreciate it &gt; In terms of other companies successful with the support model, maybe Gradleware would have been a better example as a smaller company in the Java space. **TL;DR: We've done our math. We've found the optimal solution. We're worth the money, too** Yes, Gradleware is actually a company that we have looked at. We came to the conclusion that build environments (much like servers, e.g. linux, application servers, etc.) are much more complex in a way that a support subscription really makes sense there. In other words, as a user of Gradleware products, you will almost inevitably run into situations where you need support (or burn 10h of debugging / googling), simply because things are complex. This doesn't mean that Gradleware is really successful (as opposed to "funded" by "someone else"). We don't know. Apparently, commercial support didn't work out for Oracle's GlassFish AS... With jOOQ as it is today, the only non-license revenue that we could see so far, would have been SQL consultancy (which is a very very saturated market, trust me). So, when choosing between commercial licensing and essentially free support on the user group (!) vs. free licensing and commercial support, the choice was rather obvious, unless we'd invest lots of time into developing new side-products where support would have really made sense. Having closely analysed the market and all the active players, we had also figured that commercial licensing seems to have worked better for similar and successful products (e.g. [LLBLGen](http://llblgen.com/), [Red Gate products](http://www.red-gate.com/), [Vertabelo](https://www.vertabelo.com/), [ZKoss](http://www.zkoss.org/), [Ext.JS (very interesting story, actually)](http://www.sencha.com/products/extjs/), [Quest products, like TOAD](http://www.quest.com/toad/), [Altova products](http://www.altova.com/de/xmlspy.html), many more). Note, I'm also listing tool vendors, as we believe that jOOQ might fit into that categorisation, rather than server software. Interesting are also: - [Vaadin](https://vaadin.com/home), which used to be commercial and has now switched to OSS with support subscriptions, like Gradleware. I'm not aware of the motivation, though - [Ext.JS](http://www.sencha.com/products/extjs/), has struggled forever with their licensing model. They eventually came out well, but their story really shows how hard it is to meet the expectations of customers who get acquainted with the idea that they deserve free infrastructure software. Transitioning is not easy. I can only recommend you do the exercise yourself and try monetizing OSS :-) That's actually what I recommend to anyone.
Details? How much experience are you looking for?
&gt; but I would miss Ctrl+Y in IntelliJ if they removed it. Not much, since you can easily reconfigure the keymap in the preferences editor. If you knew that, then you were probably referring to all the related key-changes you would have to make.
Hm. I was interpreting "hardcoding" to mean "to put the color values as constants somewhere in the code" (incl. what the screenshot shows, but also incl. defining them in fields). Hardcode explicitly means to write the values right where they are needed? Then please disregard my comment :P
Wow, the code that guy wrote in his video is super ugly, no wonder you can't decipher what coordinate means what. You should try to pluck it apart into variables, that might give you a good idea of what to change for the menu to be in a different place. However, from what I can see, the code only reads input and has nothing to do with the actual placement of the menu (apart from the fact that it somehow uses magical numbers to allow you to click in it).
Thanks. I was trying it out. I know how to compile and stuff. Tried the site but didn't know I had to keep my class name as Main.
Basically I never had Java installed on my computer. I used to practice it in our University's PC Cluster. Exam time and the cluster is busy. I have a guide on how to do it. I downloaded Java and added the path folder of file bin in java to the "Path" in environment variables. Then tried javac in command promt and it said it didn't recognize it. Same with java.
Seems a bit weird to return 0 when you can't parse the content instead of throwing an exception at that point.
If anybody interested in JMeter, check out /r/jmeter 
The company I work for will likely buy an unlimited plan unless I decide that QueryDSL should be the way to go. Fortunately I have rigorously applied the DAO and DTO patterns, so porting (creating new DAO implementations that is) shouldn't take more than a couple of weeks at most. Don't get me wrong, buying a unlimited plan is cheaper than having me spend time porting, but I am just so mad about the license change going from free to paid I would almost rather port than support it. I have no problem supporting open source software or paying for my software and Lukas seems like a great guy, jOOQ is great, and it wouldn't even be me who would pay but the company I work for. However the bait-and-switch just seems like such a dick move I have a hard time supporting it. Offering something for free, only to turn around and wanting money after people have started using it, as an integral part of their software, should be punishable. 
I'd start with Code Complete, Thinking in Java, Effective Java
Why are you concerned about extra text after 'done'? Also you're better off posting to /r/javahelp.
I doubt python using numpy is faster than java will ever be using the same techniques. Numpy is just a nice python wrapper around a bunch of c math libs IIRC, and java can pull the same off with JNI based libs, just more verbosely. https://modelingguru.nasa.gov/docs/DOC-1762 Python is great at prototyping though. Also please don't mention mongodb and scientific computing in the same breath. My understanding is that scientists need to make sure their data is recorded, and MongoDB has a troubling history with that (and general software quality).
I don't have any ideas as of yet but I was going to plan on using it for something this week (or so). Using it for wrapping up RMI calls seems pretty ideal. Sarge is a great name too, btw.
This will be nice for @NamedQuery. I'm always forgetting a comma when I add a new one.
True, use the right tools for the right task: * For learning environment in scientific computing, Python beats Java hands down. It's very easy to setup scipy/numpy/matplotlib. Plus there are lots of books covering the topics using Python. * For in-memory machine learning, Python still beats Java. * For machine learning in big data environment, hadoop + mahout are better. * For enterprise with a lot of business analytic people that can't really code, RapidMiner (which is also written in Java) is a good machine learning environment. The most important things is too understand the algorithms, because no matter what the language is, the algorithms will relatively remain the same.
This is because the regular Java console input is line-based and not character based. You can use the JCurses library to solve your problem. As explained [here](http://www.darkcoding.net/software/non-blocking-console-io-is-not-possible/) If you can't use external libraries, you cannot disallow your user to type more than just "line" in the console...
Thank you.
I agree I didn't actually answer the question. I was in hurry so I left a tip for OP.
Wow, that's a great idea. Is there an easy way to do that in the tiles.xml or do I have to change each jsp? Also, the vast majority of my code is being maintained, so this is more to be able to turn this feature on, see the webpage, and then be able to quickly see the component parts of it and go to those parts and change them. 
Use Spring's RESTTemplate and Jackson 2
Unless I am misunderstanding something, I disagree. If the server is not responding, the experience is going to be unpleasant anyway. Make sure the server responds or displays the appropriate connection errors (e.g. "Connecting to server. Please wait.." -&gt; "Could not connect to server, please verify connection information is correct and server is online and try again"). If they know to enter "done" when they are done, there should be an expectation to wait for the response from application before jamming down keys. This response should only take a second anyway.
One name for such a control is "picklist" or "pick list". 
I've heard this referred to as "cross select". There's a web-based demo at the top of [this page](http://wheresrhys.co.uk/resources/crossSelect/crossSelect.html), but as far as JavaFX or Swing it seems like something you'd have to create on your own.
You should be able to build a custom control consisting of two lists, two labels, and two buttons. Just remove the selected item(s) from the available list and add said item(s) to the selected list. Then, expose methods to retrieve the selected and available items. 
I know this doesn't help much, but here is a RichFaces implementation of a pick list for reference: http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=pickList&amp;skin=blueSky
Yea but you never know who is using your program and even thought if you write "please wait" you will always find somebody who will try to write something and even thought it will have absolutly no efect I just really don't like it. Why he should be able to write when there is no use for it?
we've always called these 'available/selected' controls
If you're starting to learn how to program, start with Python. One thing for sure is that you can never, ever go wrong with Python for any task whatsoever. Sure, there are some language a bit better suited for certain specific tasks than Python, but again, you can't ever go wrong learning and using Python. The community is huge and the libraries are wonderful. If you really need raw speed, write those functions out using Boost::Python in C++ which makes it ridiculously easy to call your C++ code from Python. You'll also enjoy it far more than any other language. Java has some specific use cases, but it's not what I'd call enjoyable to code. 
He asked about *client* side
[JAX-RS Client API](http://docs.oracle.com/javaee/7/api/javax/ws/rs/client/package-summary.html) Jersey is the reference implementation:https://jersey.java.net/documentation/latest/client.html
The name used by Vaadin is [Twin Column Select](https://vaadin.com/api/7.1.0/com/vaadin/ui/TwinColSelect.html).
* In my opinion, the importance of a classic resume is decreasing, at least in the IT world. Unless you want to get a job at "the big corporations" (MS, Google, IBM, Oracle, etc) a classic resume is not really necessary. For young companies and/or startups this holds especially true. * Some companies might have special requirements for a resume, e.g. Google doesn't want you to include your gender or photo with your CV. * Not only are there differences between companies, but between countries as well. You might want to indicate in which countries your experiences were earned. * Your username and posting history show that you are on Reddit primarily for recruiting people for amazon. You might want to include a disclaimer in your post whether you're intending to use the documents for business purposes or not. If it's the later, I suggest you don't use your corporate email address. 
You're at university, and probably 20 years old. You should be able to google a tutorial on how to properly set up a Java development environment on your computer. 
https://vaadin.com/book/vaadin7/-/page/components.selecting.html#figure.components.selecting.twincolselect.captions
Thanks for your comments! Good suggestions. I'm a pretty big lurker on Reddit and like the idea that there are tons of great candidates that share an interest of mine. As for whether or not I'd use the documents for business purposes, that would be up to whoever sent me a resume. If they were interested in Amazon I'd be happy to pass their info along, if not I would not file their resume or pass it along. I am very careful and protective of my clients' resumes. I love what I do and I don't get to help folks out with their resumes as much as I used to in my current role so I thought this would be a good way to stay sharp at it. Also, its a small world and a long life :) its great to make as many contacts as possible, right?
This is for $wing, but you should be able to use it with JavaFx: http://www.jidesoft.com/products/grids.htm http://docs.oracle.com/javafx/8/embed_swing/jfxpub-embed_swing.htm 
This has nothing to do with Java...
Excellent article! It is off-topic is this subreddit, but I think all developers should have some knowledge of the major version control system and ecosystems, and this article provides it.
Hmm. Well, I see what you're saying, but from my (albeit quick) tests the characters typed before DO have an effect. They are added to the front of the output. I believe it is just a delay in System.out.println from displaying in console and not really a bug. I will stay tuned to see what other redditors come up with. If this is the only "bug" that you are concerned with, I would say your code is in great shape. Good luck!
I'm going to interpret the response of this reddit as: "Lots of people want to know, but no one has tried it in anger yet."
AS3 is essentially JavaScript, and Java is to JavaScript as Car is to Carpet.
Exactly. The list of annotations that would benefit from repeating annotations is much longer https://java.net/jira/browse/JAVAEE_SPEC-36 and that is still not all. 
I must say I am a bit surprised, disappointed and also hurt by your reaction. I hope you will forgive me my bluntness and frankness when I explain how we came about doing what we do. jOOQ started off as a side-project while I was doing E-Banking for a major Swiss E-Banking vendor. I thought "there must be more" to Java/SQL development than Hibernate (often overkill, and not about SQL), JDBC ("underkill"), or home-grown frameworks ("spaghetti"). I've had this dream of creating what SQLJ should have been from the beginning. Truly embedded, type safe, composable SQL in Java - even better than LINQ, because LINQ is not about SQL. As I was fully employed and not much of an entrepreneur back then, well, I simply released some prototype under virtually *any* OSS license that would disclaim warranties and liabilities while giving users freedom to experiment: The ASL 2.0. In fact, I never reasoned about free as in beer or free as in freedom, I just wanted feedback (and maybe a little appreciation for my ego). I discovered QueryDSL little later and have been talking to Timo Westkämper on a number of occasions. In the beginning (in 2009), I've learned from him, introducing many great features into the code generator. Later on, he's learned from jOOQ, improving on window functions. Today, I believe that jOOQ has surpassed QueryDSL in numerous aspects when it comes to SQL abstraction, transformation, lifecycle management, type safety and everything else, but that has been mentioned in other answers on this reddit discussion. Eventually, the feedback I got from the community and from my users (and also coworkers) was awesome. I was in a major trap, though. Should I continue to work 80% for this E-Banking company, which has taught me a great many things about Oracle SQL and PL/SQL, and spend 20% (or rather: nights and nights and weekends of free time) for you guys for "fun"? Or should I make the "next big step" to make this a much more serious product? A series of events not only related to jOOQ or to that company lead to me quitting the safe haven and making a move for Adobe Basel, where Thomas Müller from H2 works. A great guy and great geek, whom I knew long ago, from the H2 user group, as H2 is also our favourite integration test database. I thought that working at Adobe ("owners" of Apache Felix, Sling, Jackrabbit, Oak) might help me get in touch with the Apache Foundation to make jOOQ a true all-OSS project, and maybe find some funding. I was terribly wrong. The Apache Foundation is a huge pile of administration, bureaucracy, rules, processes, politics. There are good reasons for this, the main one being the stability this introduces into projects. The flip side is the lack of innovation many Apache projects experience, if the PMC has members from various (corporate) companies. I didn't want jOOQ to be this way, and I must admit, I didn't want to share ownership with others in a time when jOOQ was still that young, and while I still had huge plans. Maybe I've been a benevolent dictator, but I do believe that truly great things evolve from vision, and I simply didn't see that vision happen for me at the Apache Foundation. So I was again left with the decision of leaving an even better-paid, even safer job with lots of very interesting people (great team, Adobe Basel!) for my own adventure: The dreaded entrepreneurship. Yes, believe me. It's really tough as an engineer to suddenly also become a lawyer, salesman, marketing guy, team lead, boss, professional services guy, accountant, intern, and yes, the same original engineer. But it's also fun, and I have never looked back. Never before in my life I have learned so much. Never before in my life I have made such impactful and crazy decisions as in this past year. And it's looking good. Overall jOOQ downloads have not decreased, au contraire. Our marketing efforts and our delicate dual-licensing model worked out and were almost unanimously well received, at least to our knowledge - give or take one or two potential customers that we have had to let go because of early communication mistakes. Obviuosly, you're risking to be one of them, which I would truly regret. So it looks that now, with our team that has grown to help and support me in this endeavour jOOQ might finally, after 5 tough but interesting years, become what SQLJ should have been from the beginning. We're meeting people from Red Hat, Oracle, Pivotal, or also the great guys over at ZeroTurnaround (Jevgeni Kabanov created Squill with Michael Hunger from Neo4j and based his PhD on typesafe embedded SQL in Java. If only I had known them at the time), and all sorts of other companies at conferences, JUG talks, etc. Our customers as much as our continued Open Source users start shouting even more love on Twitter and other social media, and we believe that we're really on to something. To some real need in our industry, which, crazy enough, no one else seems to want to tackle in this way. No one else seems to simply *love* Java and SQL - or maybe we're just suffering from Stockholm Syndrome. Making this commercial software was never the plan from the beginning, let alone a bait-and-switch or a "dick move". The plan was making this a better world for us software developers, and it has been a truly adventurous trip, so far. We then happened to opt for the least painful and most promising way, which in our case was commercialising the license (why not commercialising support is explained in another answer in this discussion). No one is forced to upgrade, you can stick with jOOQ 3.1, which you got for free, and which you may continue to use for free until eternity under the terms of the ASL 2.0, fixing the couple of issues that are still in there yourself. It's true, you don't have an innate right to free upgrades to jOOQ 3.2+ anymore if you're using MSSQL, but I promise you that things have gotten even better now, should you choose pay the license. You get warranties. You get a 100% dedicated team that works for the love of Java and SQL. You get the same jOOQ that you obviuously came to love as much as we do. And you get tons of new great features from jOOQ 3.2, 3.3, and soon 3.4 that we could have never financed if not for commercial licensing. I would really take it as a personal loss if I saw you go like this in frustration. I fully understand that being confronted with the possibility of a sudden vendor-lockin and significant price increase is unpleasant. But I really hope that you will not walk away in anger and regret towards the second-best SQL DSL in the market, just because you've never heard our full story. Unfortunately, up to this date, I don't know who /user/theZagnut is. If I did, I might have reached out to you much earlier to try to find a solution together with you and your company. We have done so with other customers, and we have tried to help them transition from pre-3.2 OSS versions to the new license. We've lost a few, with great regret, but we've also won a few who have never look back. Please, reconsider your options. Please, give jOOQ another chance. For I truly believe that you've made the right decision so far, and you will continue to enjoy working with jOOQ, as much as we will continue to love proving you with an awesome Java/SQL integration. Lukas from Data Geekery
&gt; As a rule of thumb they always take longer than what's initially planned and will have their scope reduced. But I guess that's not really different than most software projects :P Ha ha ha, yeah, I agree, I doubt they will make all the features in, but I can at least dream that they will :D. &gt; Where exactly did you got that? I read it in the text document of the draft that is attached on the web page, it gives a good breakdown of all the features they are aiming to get done. If you look at the Survey 3 pie chart, it has the the goals that they were thinking about. A simple subtraction after that :).
&gt; Not really, python has plenty in this area. Hadoop isn't the only way to do things, mongo couch casandra and even python can use hadoop too. You're missing the point, Hadoop isn't just NoSQL/"Big Data", Hadoop is distributed computing. As I mentioned the native language for it is Java. Streaming is a solution to use Python but it's a very poor performing one, and again it's used for prototyping. At that point, you might as well use PIG &gt;Also python when you do multi processing correctly or use numpy etc will be much faster than java in this area. Java ends up being better at building a really complex distributed system though. This might be another confusing point, Hadoop is distributed+multi processing not just multi processing. 
&gt; If you're starting to learn how to program, start with Python. One thing for sure is that you can never, ever go wrong with Python for any task whatsoever. This is bad advice. No one tool is good for every system. Not sure I would go for Python for RTS or where performance matters. &gt;The community is huge and the libraries are wonderful. Agreed, so is Java's, and I'd argue more so. &gt;You'll also enjoy it far more than any other language. Again, to each their own. I personally find scripting languages (no compiler, not strictly typed) far too frustrating for anything more than a couple pages full of code. &gt; but it's not what I'd call enjoyable to code. I suspect this is driven by your enviornment/skillset.
Java the language or java development? Because it certainly is an integral part of java development, even if it's an integral part of most development.
I second this. [Also look at the Jersey Proxy Client]( https://jersey.java.net/apidocs/2.8/jersey/org/glassfish/jersey/client/proxy/package-summary.html). Given an interface with JAX-RS annotations and a base url, the library will automatically create a proxy class that implements the interface.
&gt;Because it certainly is an integral part of java development, even if it's an integral part of most development. As such, it's more appropriate for a subreddit like /r/programming - there's nothing that makes this more related to Java or Java development than any other language.
I guess I fixed it myself, I got the ADT bundle but it still didn't work. I had to uninstall eclipse, ADT and anything android related and reinstall it. Something was wrong I have no idea what.
On top of that, most jobs I come across want both an OO language like Java and a scripting language like Python. It is best to learn both. 
The invasive nature of the library is exactly why I haven't done anything with it yet. I'm nervous about how the byte code manipulation could mess up my code with future jvm optimizations. I did roll up a project using Akka, and ran into some serious limitations with how we wanted to use the cluster. I'm working on an architectural change using Amazon SWF to fix up some of these issues.
[Project Euler](http://projecteuler.net)
Is by knowledge you refer to the api and the language itself, then is not gonna be useful in any context, but if you have a good grasp on mathematics and logic to make animations it can really help. Java is very different to AS3, the fact that AS3 is a dynamic language compare to java which is static type and compiled one.
I've never used DavidWebb, but it looks like a much simpler option than the others that have been suggested. I'd give that a shot. Especially since it sounds like your application is simple.
As mentioned by /u/Xenasis, this article is more suitable to be posted in /r/programming. I have been using BitBucket for almost 2 years. The offering of unlimited private repository from BitBucket is really attractive to me. I have some toy projects which I'm playing with and not expected to be published to the world. I also worked in a very small company (around 2~3 active developers only), the source codes were not meant to be open sourced, so that's why I chose BitBucket.
I've been using [Gitlab](http://gitlab.com) for my private hosting. I like the interface more personally, but to each their own.
You have to take a quiz on programming concepts in order to get into a class which teaches those programming concepts?
&gt; Making this commercial software was never the plan from the beginning, let alone a bait-and-switch or a "dick move". But from the users' perspective that's exactly what you did. You have given a wall of text justifying why you felt compelled to do that, but it doesn't change the facts. Users will never really care about *you*, but they deeply care about *themselves*.
&gt; so I can run files If you mean "so I can execute code", that's hardly work: Say "new project", pick a folder, click "next" a few times. Right mouse button in the tree, "new package". On the package, "new Java class". public static void main(String[] args) {System.out.println("Phew.");}, run, done. Importing might be the problem, as IntelliJ doesn't seem to have a Netbeans import option. Btw, while importing the first time, you have to choose the JDK in the wizard, and once you picked it, it will fill in everything (e.g. documentation file - *it identified the weirdly-named doc zip in the JDK folder by itself!*) automatically. If you want to try again, just drop me a comment, I might be able to help.
&gt; Users will never really care about you, but they deeply care about themselves. I know and that is their right as customers.
&gt; it's of course nothing personal. This was not meant as a reproach, I'm sorry for the misunderstanding. I wanted to point out that I feel that your potentially leaving would be a personal loss. We've lost a couple of great users on the way, but so far, we haven't seen (or been made aware of) that much frustration. I'm really sorry to see that we have caused this. &gt; There are a lot of free open source java frameworks out there, and it would be immensely devastating if they all started doing what you did. I understand your point of view. You have a right to be frustrated, and I'm pretty sure I would be so, too. &gt; It is just not fair for people who have built a free and open source stack. Now that's news to me. We have special plans for OSS developers. I'd be more than willing to discuss options. &gt; Something that was not mentioned anywhere when they started using jOOQ We've made mistakes and we're very willing to learn. In any case, let's consider the facts, because you will need a solution and we are more than willing to offer you one and help you along the way: - You *can* continue using jOOQ 3.1 for free - ... in case of which, all you're missing out on are new features and bugfixes from us - Instead, though, we're offering you a win-win situation to trade for a lose-lose situation The call is yours.
For any non-trivial sci-comp tasks you'll be using both. I do some machine learning using Python (SciKit) to quickly test ideas and plot data, but in actual production code I use Java.
Purchase/ download a Java textbook (perhaps the school you are applying to uses a certain one for their courses). The first ~5 chapters will cover all the required topics. 
Is there anything similar for Postgres?
I've also learned to code in Java after learning AS3 first. It's certainly doable, just be prepared to do a lot more effort to get a simple rotating square on your screen. AS3 is way more visual, but Java really gets you into programming the way it actually is and you'll get a much better understanding about the platform you are programming on. Maybe it's a good idea to get into 'plain' Java first before you dive into the world of emulators and SDK's.
Nobody is stopping you from being that crazy you are looking for.
I'm not sure why you have a Roll User and a Roll Computer button - is this a requirement of the game? If not I'd recommend having a single Roll button beside the Pass button. The game 'flow' as you say should be controlled inside your game loop, presumably a while loop which checks a boolean to see if the game is still in progress. Inside this while loop you'll want a flag variable for whose turn it currently is, either a boolean or something some thing else suitable for &gt;2 players. When a button is clicked, actions should only pertain to the current player.
I'm partial to sourceforge. It's older and that's their whole business. I also like that you get a website that you can customize anyway you want and comes with PHP and MySQL support. It's also not tied to any particular source control so you can use git, svn, mercurial etc...
Very helpful!! Thanks
Yeah I copied the user code and modified three names so it could work for the computer but what I need to do is put them in the same. I wanted the somehow key the user see what the computer is rolling if I set it on a loop it does its whole turn faster than you can blink. I made a computer but so you would be able to see turn by turn but if there is a way to slow down a loop like add a delay before it re-loops. I'm not sure If this is possible but it is just a thought. As far as the action performed I was running into problems getting it to run with them in the same one so I separated them but haven't really fine anything with the computer button so I never saw the problem with the listener.
its just switching the lowest bit for each character. you can run the above password through the same program and it will give you the "unencrypted" form 
Yes. In general, when checking arguments of a function, I like to throw one of IllegalArgumentException, IndexOutOfBoundsException or NullPointerException. In each case, I throw the exception with a string that explains the problem, including values and parameter names. The value for parameter frobulator was 19 but cannot be greater than 5. The startIndex of 7 was greater than the endIndex of 4. The zork parameter was null. 
Had an interview last year where the guy asked me just about all of these questions for an hour and a half. Then I find out the job required rewriting some open source Java modules to C# :\
We have gitlab at work. The interface is utterly terrible. Can't ever find anything, all the navigation icons have no meaning at all and no labels... 
Eh? What version of Gitlab are you using? Unfortunately you have to keep up with it but it's not hard to upgrade and it's worthwhile to do so.
We do regularly update, but I still find it unnavigable 
I don't see why you feel that way, but I find it to be very usable and a suitable github replacement for what we need. Even better that it updates continuously with useful features.
Duh, it's the language that's been in enterprise development for the longest, simply because it's _been around the longest_ (not counting c/c++/etc of course). 
Pretty good overall but the polymorphism description seems a bit off. It can be a hard concept to describe but I would never phrase it like this *"Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.e."* I prefer this simpler more practical description* "Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object."* Taken from [here](http://www.tutorialspoint.com/java/java_polymorphism.htm)
Sounds like a terrible interview. 
Thank you!
It was. There's nothing like programming in Java for 10 years just to explain the difference between an interface and an abstract class to get a job ;) Immediately sent them an email withdrawing my interest in the position.
ouch, ok well with the amount of information you have given.. and some wild stabbing i would say the library you are trying to load is not on the java library path.
deam reddit doesnt let me formate it q_Q 
There's a "formatting help" link under every submission and comment box... Also: there's really no way to help "your friend" indirectly through you if you can't provide any details or feedback to suggestions. 
lol @ html (xml to some extent), xml, css and maven (xml!) being programming languages.
Am I guessing right that the interviewer actually didn't know anything about programming?
don't they say that for a lot of popular languages?
I don't think I've ever seen the death of ASM.
I never insinuated that there was anything wrong with the language or other languages. I'm saying that because it's been around the longest, companies have had the most exposure to it and thus are more likely to be using it, which will of course turn up the demand for Java developers.
 worries = false; byHappy = true;
You're using a JRE instead of a JDK as the execution runtime. You can change that in the settings (search for "Installed JREs" and change the path to a jdk installation instead of a jre).
The interviewer used to be a programmer. When he brought in a developer (C# developer) to ask questions, the developer asked all of those types of Java questions I mentioned above. I think the developer didn't really care who they hired and just found a list online of common Java questions to ask just so he could get it out of the way.
This post will go through how to setup the Hibernate Second-Level and Query caches, how they work and what are their most common pitfalls.
You could implement a turing complete language using XML. I heard the Ant build system was able to do that.
Oh man. It's really simple: * Learn Java * Take a bunch of computer science classes until you get a better understanding of "Technology" and how computers work.
So basically, it's a standard Java webapp. ok.
Interesting project. Do you have any recommendations what to read in order to understand how such a system is build?
You'd be surprised..
What distributed messaging systems would you consider this would replace?
 worries = !worries;
It's a celebration :)
This is like a laundry list of what's hot in 2001.
Not sure I want Java to be the leader of "how do I do XYZ" questions.
Isn't it bad?
Welcome to legacy systems!
CSS is turing complete if you're crazy and cheaty. http://stackoverflow.com/questions/2497146/is-css-turing-complete
According to studies, being overly represented on SO apparently means you're popular.
Explains why it was so poorly done 
Your code is borderline pseudo. Could you make it able to compile and we can have a look at what your issue is in a debugger.
hmm didn't know it was that trivial. I read some stuff saying you had to install a compiler. Don't ask me... I wasn't really trying as Netbeans had already won me over. I had been using eclipse, and I was totally against Netbeans but one day Eclipse crashed and wouldn't start up properly so I switched. I do like the look of IntelliJ so maybe that will be my next IDE
These aren't interview questions, these are trivia questions. If you find yourself in an interview where they are asking you questions like this, run away. Run far away.
Hi! I am the writer of that tutorial. I discussed this in one of the lessons, but I do not remember which. To change the background color, you should look at the line: Gdx.gl.glClearColor(1, 1, 1, 1); The four arguments are R, G, B and A (you must provide a range from 0 to 1 by dividing RGB values by 255.0f). For example: R = 10, G = 40, B = 20 and full opacity should be: Gdx.gl.glClearColor(10/255.0f, 40/255.0f, 20/255.0f, 1); Hope that helps. 
I see a few hate comments for Stack Overflow here. Let's be honest, it has helped a lot of us, at least in early learning.
Looks very interesting. Saving to look at later 
Hey james! Thanks for clearing things up for me. How do you know how much red green and blue to add? &gt; Gdx.gl.glClearColor(10/255.0f, 40/255.0f, 20/255.0f, 1) This gives me a dark green background, how would I do a dark brown background like [**this**](http://imgur.com/chuervR). 
Oh, I forgot to mention, the inversion of control framework is a lot like Spring and OSGi, but I got tired of all of the hoops you have to jump through to use those. It's a "from scratch" implementation of a container.
I think the problem's coming from your spinlocked while loops. where is `loader` called from?
Do you have 2 separate threads updating the same ArrayList?
Great thoughts. If you're wanting to wait between cycles, I would recommend a Swing Timer. Look it up, it's not too complicated and can be used similar to button actions (i.e. ever 1 second the action is performed, etc). For the listener, you should just be able to attach the single listener to all of them and use the single actionPerformed() method. I would recommend you set each of them to have their own action command string... that way you can just test to see if ("computer" equals the event.getActionCommand()) etc. then just have the conditions set up.... if (source == user) //do user stuff else if (source == computer) // do computer stuff else //button must be pass if those are the only three buttons. Does that help at all? 
Are you sure you are not mistaking projects for products? Some projects feels a bit like a product because they have a strong brand and very well known logotype etc (Apache Tomcat for example). But they are not products... They are a bunch of people who at anytime can go do something else. I can have an os project on github and anyone can fork it and ask me to pull. We might even have a little community going and stuff, great. But if someone comes and offers me a dream position to continue with my idea in a closed space I just might do it. I mean first I would try to explain why they should use the os model but assuming they won't I might still go for the job. Am I a dick because I hacked on a project and spread the source for free and then went ahead and did something else? Removing the source on github before anyone had a chance to fork - that is a dick move. However if people expect me to adapt my path in life because they want me to develop things for free I would just wonder when I became a slave. For instance would you be as upset if the people behind JOOQ just suddenly said that SQL is not for them anymore and we don't really have any more input to give into JOOQ but anyone can fork it and go nuts. I assume this is ok. So because oss is this volatile you need to have a policy when you use it. Here's just how I think about it: 1. Have options. For instance I operate in the Java EE space mostly and my stack is Apache powered (TomEE). However now and then I try my war on glassfish or wildfly to make sure I have some options. My friends on Apache might die, do something else or you know the project can just die peacefully over time. And because I might not be able to fix my problems in the source I at least try to have some options. By your description you seem to have kept JOOQ at a fair distance, great. I wish you luck in replacing it. You have also found the reason why I really like Java EE (multiple vendors, strong apache communities) I also have every project cloned / checked out with regular pulls / updates. (Apache is still in SVN to a large degree). I must admit that I don't have Guava and a few other projects cloned locally but I do have the sources.jars at least. I will go ahead and do it soon though. In the future if you are into an open source project that seems great, remember that one cost for free is uncertainties. For example TomEE users with no involvement in the community have no idea when they will get Java EE 7. They also don't know if TomEE will go to the apache attic before it ever happens. If you want another direction for any open source project you need to leave the sideline and go play ball man. https://github.com/jOOQ/jOOQ/tree/version-2.7.0-branch here you go. Fork that and rename it and show everyone how it's done. While you do that though, don't throw any shit on what others decided to do with the project. What you have left is the JOOQ brand. It was first attached only to a fully open sourced project and now it's not. Please realize that stuff like that happens to put food on the table and so people can continue with their work. But anyway the brand could have been donated to the project but for what good? Many users would just be confused and wonder what happen to JOOQ and since nobody forked it the brand would go to waste too. You want them to waste a good brand? Your attitude towards this comes off as ignorant and naive. The licence for JOOQ is actually really, really good. For me it is also 100% free because I use postgres or mysql. Help open source by migrating to a free database and you are good or help the guys behind JOOQ to some bread and you are good too. Third option, fork JOOQ and make me proud :-)
You could try /r/androiddev or /r/javahelp, but to be honest a quick google search should be all you need 
yes, check this plugin: https://github.com/adrianboimvaser/postgresql-maven-plugin
&gt; i can just try to make it a bit better looking: lemme help: public class code { public static void main(String[] args) { System.loadLibrary("opencv_java249"); Mat mat = Mat.eye(3, 3, CvType.CV_8UC1); System.out.println("mat = " + mat.dump()); } } Error: at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1886) at java.lang.Runtime.loadLibrary0(Runtime.java:849) at java.lang.System.loadLibrary(System.java:1088) at face_detection.code.main(code.java:11)
I find this unfortunate. Some great resources and questions have been posted on SO, many of which have been deleted (and not posted elsewhere) because they're not in a "valid format". Good information is being lost. The mods need to get their act together because they're a detriment to the programming community at large as it is now.
Can I see your controllers, please? I found this tutorial on Spring RESTful Web Services very helpful, by the way: https://spring.io/guides/tutorials/rest/
It's a mixed blessing. The reason why I prefer to go to SO is that there's simply the question and answer. On sites that overlap somewhat with the question asking stuff, but have a more free format like javaranch.com, there's often a discussion going on that just doesn't answer the question. I have to wade through tons of text and distractions, just to eventually discover the plain answer just isn't there. On the other hand, some interesting questions have been closed, questions for which I did in fact like to see an answer or an oppinion.
[tinylog](http://tinylog.org) does the same thing (and is probably faster). I wonder how hard it would be to create an eclipse plugin to insert a log field whenever I use it (e.g. write log.info(...), have the log field appear within the class), yet hide it from my view).
I'd really like to see benchmarks. Also how does it compare to chronicle feature-/performance-wise?
If you look closer, every logging call passes `this` as the first argument. The library uses that to get the logger name.
This is the thing I hate about so. They close questions looking for opinions (sometimes). Programming is a highly opinionated task and there are frequently cases where there is more than one right answer.
Always sending in this is noise too. I much prefer the getstacktrace[2] hack seen in libraries such as log4j2 and slf5j;
The core java API provides the most basic parts to build almost anything. There is a vast ecosystem of commercial and open source libraries, tools and components that developers can use. In fact, it is an embarrassment of riches. While perhaps a bit verbose, the language is solid and 'toolable'. (It is possible to build exact and reliable refactoring tools, for example.) It is an understatement to say that there are many frameworks for building web applications. The JVM is a marvel of engineering and contains one of the most advanced optimizing compilers ever built. There are many languages that run on the JVM. Some of them have a much higher level of abstraction than Java, yet interoperate perfectly with Java and the rest of the ecosystem. The Java ecosystem builds standards, and then has multiple vendor implementations of those standards. This alone is a huge safety net for big conservative organizations. And more. What's not to like? Is it any wonder Employers want Java?
Question 33: &gt; What’s the difference between Enumeration and Iterator interfaces ? &gt;Enumeration is twice as fast as compared to an Iterator and uses very less memory. I have never seen an [Enumeration](http://docs.oracle.com/javase/7/docs/api/java/util/Enumeration.html) before and they aren't used with the [*new* collections](http://docs.oracle.com/javase/7/docs/api/java/util/class-use/Enumeration.html#java.util) (1.2+). Can anybody back up this claim of speed? Would anybody even know what they are? EDIT: Both Enumeration and Iterator are interfaces, how does one even compare the performance.
Maybe because it is more useful to have it broken down. You are free to add them together if you like. But if they report them together, you cannot break out the difference. The argument for combining them could also be made, why not combine JavaScript / Html / Css into one? Or why not combine Html and JSF into one? Or why not just combine them all into one and say that the site is XX millions of lines.
decrypt*
It's not really a place for discussion, it's a place for getting answers. And for that it's great. To elaborate: If your question contains phrasings like "what do you think about", or "what would you say is the best way to" - then you're probably going to get get hate. But if you ask "How do you" and then instead follow up with a discussion in the comment fields, then you'll be fine.
My point exactly.
How would I log from a static function, without a reference to: this?
Who had the lead before?
Or the most popular one
C#
Popular and problematic! Java: the best choice for software developer job security!
For me SO is read only, I don't really want to be skinned alive asking a question or offering advice that might be slightly wrong/invalid. I actually prefer subreddits for tech/programming questions. There are plenty of jerks on reddit, but I find that most of the software subreddits are reasonably civil.
From my own benchmarks, BigIO's average latency is about 4 ms over a lossy wifi connection compared to about 10 ms for a web services implementation.
Chronicle is all in-memory, where BigIO allows messaging across a network. I'd have to run some benchmarks, but I suspect BigIO would be commensurate with the in-memory speeds of Chronicle.
JMS, Web Services, or any other java system for sending messages across a network.
I'd take a look at Netty and Project Reactor.
Yup. Just do the same thing to the "encrypted" password, and it will be back to normal: thisisthedoge
Honestly I've gotten so many bad applicants that I ask 1-2 stupid easy questions to quickly weed out those that shouldn't have applied in the first place. Sometimes resumes stretch the truth. I've had applicants that look good on paper but can't tell me the difference between a static and non-static method.
Lazy people can't even be bothered to google shit anymore.
The contracts for equals and hashcode are laid out fairly well in the [javadocs for the Object class](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html). There are [many](http://www.programcreek.com/2011/07/java-equals-and-hashcode-contract/) [additional](http://stackoverflow.com/questions/3181339/right-way-to-implement-equals-contract) [resources](http://www.artima.com/lejava/articles/equality.html) with proper examples and reasoning behind them.
You must not have very complex problems. For a quick "you could probably just google it" question, they will answer. However, if your question can't be summed up in one sentence in the title often the only responses you will get will generally just be dumb nitpicks about your post with no real answer.
It won't hide it but there is a template for Eclipse to easily add a logger to your class. http://matthew.mceachen.us/blog/simple-log4j-eclipse-template-346.html Here's an SLF4j template: ${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)} private static final Logger LOGGER = LoggerFactory.getLogger(${enclosing_type}.class);
For those of you interested, I'm going to get the benchmarks solidified and posted next week.
We use [Lombok annotations](http://projectlombok.org/features/Log.html) for that. It does the same thing behind the scenes (define a static field), but you don't have to type it out every time.
I know, I use something similar (only that I normally use getFormatterLogger()). Still have to invoke the template and look at it.
Agreed. Although I can't take credit for the in-memory speeds. I'm using an LMAX Disruptor implementation. http://lmax-exchange.github.io/disruptor/
&gt; How would I log from a static function, without a reference to: this? Seems you just need 'an object' to pass through, where it will check if logging is enabled for that class. https://github.com/jcabi/jcabi-log/blob/master/src/main/java/com/jcabi/log/Logger.java The initial complaint of 'code duplication' seems mad IMO. If it is 5+ lines of boiler plate, then I'd agree with his position.
Just like this: Logger(Foo.class, "works fine!");
Just to clarify, the JRE is meant for end users and such does not include any information about variable names (why would any old John Doe need that?), while the JDK is for developers and thus includes that.
Looks nice. Good shout!
It's horribly expensive to build a stack trace.
We did it reddit! 
ListIterator&lt;LittleThing&gt; eltIter=EveryLittleThing.iterator; while (eltIter.hasNext()){ eltIter.next() = 'all right'; }
The best answers I find are to closed questions. * If you need a solution to a problem and have 3 libraries to choose from, asking which is suited for a specific task is not allowed. * If you have a question about a language construct in language A it may get merged with a question about the construct in a similar language B (by people who develop in language Z) * If you have a question about tools/installers/packaging it may be moved to unix at stackexchange, where it is closed as of topic. Similar with questions ending up on programmers at stackexchange. * If you have a question about a specific problem it may be interpreted as too narrow and closed simply for being not unanswerable vague. * If you ask an obvious homework answer where the assignment is due in an hour you will get at least a hundred upvotes, ten complete solutions with similar upvote counts and a discussion about upvoting homework questions as is required by tradition. Not to say stackoverflow is useless, the community can just be a pain to deal with, especially when you fall victim to an achievement hunter (only ten badges left, gotta catch them all).
I completely agree. I have no problem answering a few basic questions to filter out people that take liberties with their resumes. I have a problem with answering over 50 basic questions in one interview.
Looks great. I'm somewhat familiar with UML but could use a good resource for learning UML. Recommendations?
try at least ask your friend the full stack-trace with message :)
so, if I'm happy then I should worry? :(
i saw that on earlier, i dont quite understand it. Maybe it's really obvious and i'm just not seeing it or something
I didn't realise UML was still a thing. Martin Fowler wrote a book called "UML Distilled" about 10,000 years ago, I recall it being rather good. http://www.amazon.com/gp/aw/d/0321193687?pc_redir=1400676568&amp;robot_redir=1
It isn't really used much in my IT shop. It appeals to me because I am very much the "planner" type. I like to plan first, then build. Unfortunately most of my colleagues are the opposite, so my attempts to master UML will likely be in vain.
Much better. Glad the bugs are worked out. 
Better compression. Glad to see the bugs being worked out. 
Thanks, I've actually been going over/following the tutorials on Spring.io, but I'll take another look. I've included the link to the controller in the main post. [Here it is as well](http://pastebin.com/raw.php?i=t31V0q7s)
I'll give this a try and get back to you. Thanks!
Huh? Seems pretty clear, and the small images also show it. I'll go with the method used by Pegtop, because the Photoshop demo image shows an ugly cut in the middle, how knows, maybe that cut actually happens, we wouldn't want that (but I can't imagine Photoshop to be as imperfect as that). Image data values range from 0 to 1 - this is key. Multiply image b data with 2 and subtract the result from 1. Multiply *that* result with image data a squared. Add 2 times a times b to the outcome. 
I hope [this](http://redd.it/236v7p) will be patched in the update. ~~I wonder which version of Jersey will they include in the update? Recently I am working on a toy project with Jersey 2.0 on GlassFish 4.0. I discovered that the method which makes use of `@FormParam` will throw an exception if the request content type isn't `application/x-www-form-urlencoded`. This doesn't happen in Jersey 1.x (at least not in Jersey 1.11.1 + GlassFish 3.1.2.2). I don't know whether I can say that Jersey 2.x is more strict than 1.x.~~ Edit: The issue mentioned above [has been fixed](https://java.net/jira/browse/JERSEY-1978) in Jersey 2.2, workaround is available on [StackOverflow](http://stackoverflow.com/a/17620353). Looking forward to GlassFish 4.0.1!
Can we see benchmarks? How does this compare to a simple BitSet, TIntSet or HashMap&lt;Integer&gt; regarding CPU/memory under different loads?
JSF is dead. The problem is that Java has very long cycles and many will stick to JSF for a long time simply because they are used to it.
As the PF team say thoughtworks are still referring to J2EE and not Java EE... Anyhow I think for enterprises where they have a lot of Java developers, but not front end developers, JSF makes a lot of sense. Especially with a framework like PF added into the mix. And the documentation / user support of JSF is great. It won't be the standard choice for those working on cutting edge front ends or highly stylised front ends - but many big companies just want a GUI building and to utilise their existing skillset. 
It is a static done once per class. It has no importance at all.
Stopped reading at the first "question" about the advantages of OOP: &gt;Modular development of code, which leads to easy maintenance and modification. Has nothing to do with OOP. Modular development can be done equally well in non-OOP procedural code and in functional code. &gt;Reusability of code. Reusability does not come from OOP, it comes from well defined interfaces between components. OOP tends to lead to un-reusable code since people build large object graphs with hard dependencies between classes, making it impossible to lift out a class or a subsystem for reuse. &gt;Improved reliability and flexibility of code. &gt;Increased understanding of code. These are just empty phrases uttered by people that don't *really* understand different paradigms. At least the author should attempt some kind of justification for them.
The cycle of base JSF might be long, but there are lots of libraries on top of JSF like PrimeFaces, RichFaces and OmniFaces that innovate very rapidly. It's really an advantage that base Java doesn't change every few months, so those libraries have a very stable base to work against. Also, don't forget that implementation bugs in and performance issues in the JSF implementations Mojarra and Myfaces are fixed pretty fast. Implementation releases can happen every few week or even days if needed. There have been something like 29 updates to Mojarra 2.1 already.
&gt; It won't be the standard choice for those working on cutting edge front ends or highly stylised front ends I don't know, JSF isn't just about using standard components. You can output pretty much what you want and then have lots of framework support to do a lot of things for you. And then again, what IS the standard choice? The web framework market is highly fragmented and I don't think there is any standard choice at all. There are like 20 well known web frameworks in just Java alone (~10 of them really well known). But then there are some 60~70 smaller and obscure frameworks, where occasionally the author posts here or on the serverside etc and is totally convinced that his framework is the standard choice. Web4J anyone? Micro anyone? Micra? The list is endless. And let's not get started about JavaScript frameworks. There too you have a 20 orso well known ones, and close to 200 obscure ones and this amount is still increasing. Just this week 4 new ones have come out where in the introduction the author was totally convinced of the advantages of his new framework. 
/r/programming ***** [^report ^a ^**problem**](http://reddit.com/r/LinkFixerBotSnr) ^| [^delete ^comment](http://www.reddit.com/message/compose?to=LinkFixerBotSnr&amp;subject=Comment%20Deletion%20%28Parent%20Commenter%20Only%29&amp;message=%2Bdelete+chpxwrr) ^| [^source ^code](http://github.com/WinneonSword/LFB) ^| [^contact ^developer](http://reddit.com/user/WinneonSword)
Perfect timing. I just finished a course where I was forced to use that 2005 monstrosity and it finally gets updated...
I only see AND/OR ops in their paper, am I missing something or didn't they benchmark read access?
What do you propose people use instead? 
I propose to use directly html and javascript without the need for any backend to create them. At the moment AngularJS is the one I prefer for everything frontend and Java serves REST requests.
&gt; JSF is dead. &gt; many will stick to JSF for a long time Huh? I personally don't like JSF, but even to your own admission it's not dead...
To be more precise, any backend framework that is supposed to produce client side code is slowly dissapearing. Client side code will be served as static files from the server (HTML and JS). There is no need for JSF or any other similar tech.
Anyone know where to get the build exactly? Google and OTN are not being very helpful to me right now.
Honest question: Do people in the real world actually use UML? It seems to be a mandatory part of CS curriculum at most UK universities, yet I don't know a single person who's used it professionally.
So then why did twitter went back to serverside generated ready to render HTML? The issue with client-side rendering is that it can be much slower. JSON responses have to be decoded at the client, than transformed in HTML updates. These updates can trigger a lot of events and may require a lot of DOM walking, whereas a chunk of HTML returned by a server can be rendered or inserted in one blast without requiring tons of client resources.
No matter how you put it, client code ends up being JS. The question is only how you write it. It can be written directly or through some other framework. No matter the path, JS is the final result on the client side.
It is true that there are cases where server rendering is more beneficial. What I am trying to say is that client side is taking over bit by bit thus lowering number of cases where server rendering is the best way to go. AngularJS (even though is not always the best choice) changed completelly the way FE development is done. Google being behind it helps a lot.
&gt; What are pass by reference and pass by value? What a shockingly shallow explanation of this. Why mention it in the first place if he's not going to elaborate on this? It's something that isn't really visible to a developer when he's passing in the parameter - he doesn't have a choice to pass by value or by pass by ref.
I've done some significant UML modelization (separately from coding, and before any line of code was written) in government projects, back in 2006. Since then, I've rarely used UML, and mostly to illustrate some specific parts of a design.
These questions are a waste of time in an interview. The interview time should be used to determine if the candidate can write programs (by actually writing programs in the interview). Someone who knows 100% of the answers could turn out to be a terrible programmer. I've seen it. Knowledge and skill are separate. I'd rather have a skilled programmer than a knowledgeable one any day. You can pickup knowledge, but skill is something you have or don't.
Vaadin is a pretty solid choice 
1. You're almost certainly going to have to show some code in order for anyone to help you. Your description is vague. 2. /r/javahelp 
Never used JSF, but if it is the same as WebForms, then it should be prepared to be put to rest. While you use particular tech on a project-project basis, WebForms creates more problems than it solves. - breaking history and navigation with postbacks - breaking unstateful web with view states - breaking url booksmarks - breaking f5 refresh (would you like to post your data) - massive data usage every action thanks to view state and postbacks Improve it all you want, the inherent problems are still there. Yes you can use it but we have already developed much better solutions for the problems that it claims to solve. The example the team gives is horrible horrible confused. Why are they comparing a "server-side" hook with a client-side hook by using ajax? Well duh we're not going to do that. We'll just output the field value from our server side (if we're rendering our views on the server, that is). Any decent web-framework with decent templating nowadays already does that. If you are writing a single-page application, where angular/bootstrap/backbone frameworks would apply, then you don't want the server to get involved anywhere other than the retrieval and updating of data. So you would never use that example either because the server tech should not dictate the front end. Even more notable is their admission that "you can use those frameworks if you want to". If I was going to use it, then I wouldn't have a need for JSF... I would want a REST api backing my frontend application. Its no surprise its prevalence nowadays is in enterprise environments and I would never have heard of it outside of that context: | "Clearly it solves a problem better than others which is creating web applications with an easy, efficient and productive way to meet deadlines." only in environments where the inherent problems can be done away with. No self-respecting site with a significant audience will use this structure due to its numerous accessibility issues. WebForms (and assuming JSF if it is similar) would rank highly in the list of "worst web 2.0 technological decisions ever made", slightly below ActiveX. Even ASP/PHP/JSP would be considered better.
Best reply, I work in projects which have experiences Java developers but no one can or will write in state of the art frameworks like Angular.
Error: reading uninitialized variable worries. What, me worry? :-)
Main author of Quasar here. Quasar's bytecode injection makes no changes to the structure or composition of objects. It merely injects code to save the values of local variables into an array prior to calling other fiber-blocking methods in methods marked as fiber blocking (suspendable). This is just an implementation detail. When the JVM supports "native" continuations, Quasar will trivially support those as well.
The only time I use it is to construct sequence diagrams to document complex interactions in a large system, usually when gaining familiarity with code I haven't worked with very much. 
Solution: Use mod_rewrite to randomly add file extensions to your pages.
Just as a caveat: according to the Google Code site, the last release of log4jdbc was 2012. While I have no reason to doubt that the code is solid after a very cursory overview, I wouldn't rely on support being a key feature with this library.
No, the tutorial does not say that. You misunderstand the tutorial. It tells you to create a JSF page and a servlet that handles *.sec URLs.
&gt; ... We are redirecting him to index.sec page because we will implement a servlet with “*.sec” pattern. When dealing with Java servlets, the file ending is somewhat arbitrary; what matters is how you configure your application. In the case of the tutorial you're following, they are using the `".sec"` extension for denoting pages that will be routed through `SecurityServlet`.
so can i change the .sec extension to use .xhtml?
&gt; Never used JSF, but if it is the same as WebForms It's not. 
i mean sure, that formula is pretty straight forward, but i dont get what data value i'm supposed to be using. RGB values aren't what you're talking about and if you were to examine one pixel value (before you break it into its 3 RGB values) you get a large negative number
Perhaps frameworks and docs are so hard to get used that people are constantly on StackOverFlow?
Thank you :) I've brought a few Java programming books to start me off and I'm reading up on Data structures and algorithms now. I'll start basic on a text based game and move upwards, thank you for all the help :) I will contact you if I'm stuck and if it's okay with you, thank you for the advice, have a good day :D
The space between Collection and &lt;String&gt; would be my only guess.
Not on Eclipse...
I can run that code just fine without any compile error. I'm on Java 1.7, is this only a compile error in other versions of the JVM?
Sorry, I should clarify that this question is for Java 7
That might be a style violation, but it isn't an error as far as the Java Language Spec is concerned. There are almost no places in the Java grammar where spaces are required, except to split apart tokens that would otherwise be treated as a single token (and they're significant in string/char literals, of course). "Collection&lt;" is already two separate tokens, so adding an intervening space has no effect on how it lexes or parses. 
I have to agree and I wonder where this is coming from.
B seems fine to me. I wrote almost exactly this same question on an exam I gave recently. I thought this was mine for a moment. It's not though.... heh.
What do you mean? If you mean you cant have a a collection reference to an arraylist object (in this case), I can assure you that you can do that.
Sure you can. I write: List&lt;String&gt; myList = new ArrayList&lt;String&gt;(); often at work. Collection is no different. I just typed the answer for B into an editor just to make sure I'm still sane. The test is wrong!
Is it just me or is b the 'most right' answer here?! 
Yeah, you're right. A,C will give compiler warnings since Collections and arraylist aren't parameterized respectively. 
What sort of compilation error might that be? I'm not seeing one. It works just fine using my copy of javac.
maybe you should try StackOverflow. Option B looks legit to me.
This is both totally acceptable and considered good style. There's nothing wrong with going from float to double, either. It's the other way around (with potential for precision loss) that is frowned upon. 
There are so many answers on here that make me question my sanity! The other day someone was arguing with me about whether Java uses pass-by-reference or not and how you could do array assignments in a for-each loop over the array. I can understand being wrong, but being wrong, defending it, and criticizing someone who knows better? That's just weird. And then I saw the same guy giving wonderful advice in another thread. So confused.
Welcome to the world of "professional" software development... those sorts of things are the rule, not the exception these days... be it Java, .Net, JavaScript, doesn't matter, it's the same everywhere: people getting paid good money who arguably shouldn't even be employed in this field.
That was a guy on r/javahelp actually. At work people are smarter than that.
Fair. Definitely right about list being good style. Array list is my go to if I need a random collection, though I can't say I've ever had to do the straight assignment to collection.
Try earlier versions of Java. The test might not have been written against 1.7.
Compiles just fine. The only thing my IDE complains about is that the 'String' after ArrayList is redundant.
If this was for something academic, I'd challenge it. Include am IDE screenshot proving it. 
The article in question mentions WebForms, hence my statement. Well safely disregard everything after then. Edit: researching a little bit. JSF2.2 still seems to use many of the same terminology, but are instead now using ajax instead of postbacks. This makes it more tolerable compared to WebForms. 
epractize labs
Naturally. But when you know you're right, and someone else says "you're wrong" it makes you wonder how they got through life to be in a position where they can sit there and make claims like that. They think they're right. But they're not[.](https://www.youtube.com/watch?v=eVSlE28hOgI&amp;feature=kp)
To answer your initial question: instantiating non-static inner classes, the syntax you're after is something like: Item item = new Item(); Item.Equippable equippable = item.new Equippable(); Item.Equippable.Weapon weapon = equippable.new Weapon(); You can obviously wrap this instantiation in whatever conditional logic you like. However, don't do that... You're trying to reinvent (via lexical nesting) the type system (and the existing type system is far more efficient and effective at doing it). What you should be aiming for is something like: public interface Item {} public interface Equippable extends Item {} public interface Weapon extends Eqippable {} public class Sword implements Weapon {} public class Mace implements Weapon {} public interface Armour extends Equippable {} public interface Consumable extends Item {} // etc Your question then becomes one of randomly instantiating one of these classes. For this, you'd use factory pattern applied repeatedly: public interface Factory&lt;T&gt; { T create(); } public class SwordFactory implements Factory&lt;Sword&gt; { ... } public class MaceFactory implements Factory&lt;Mace&gt; { ... } These are reasonably straight forward and (for bonus points) can be supplied via dependency injection so you don't need to know about each Weapon implementation at compile time. Taking a step up, you now have something like: public class WeaponFactory implements Factory&lt;Weapon&gt; { private List&lt;Factory&lt;? extends Weapon&gt;&gt; weaponFactories; public Weapon create() { int idx = random.nextInt(weaponFactories.size()); // pick which factory to use Factory&lt;Weapon&gt; weaponFactory = weaponFactories.get(idx); // get that factory return weaponFactory.create(); // and call it } } Step up a level and you now have: public class EquippableFactory implements Factory&lt;Equippable&gt; { ... } public class ItemFactory implements Factory&lt;Item&gt; { ... } If you want a generic item - you use ItemFactory.create() - if you want something more specific (eg weapon) you use WeaponFactory.create(), etc. 
Prostate.
http://falstad.com/mathphysics.html Some of them are kind of old, but he does give source.
Thank you! This makes much more sense! Thinking of 'swords' as an implementation of a weapon, which is an extension of an equippable, which is an extension of an item . vs.: Thinking of an item, which is either an Equippable or Consumable, which are either etc. I never knew interface, extends, or even factorys, were a thing! I will re-write my code with this approach and post the results soon! 
You were robbed.
The diamond operator only applies to Java 7+ anyway.
A will compile with a warning (missing generics) B will compile with a warning/lint error (space preceding generic) C will compile with a warning (missing generics) D will NOT compile (generic mismatch) 
You may want to look into the [Type Object Pattern](http://gameprogrammingpatterns.com/type-object.html), which would probably save you some headaches in your scenario.
Intro to java. I actually use a very similar question almost every semester. Maybe I need to change.
Thank you this looks very informative. And yes, I am already running into some trouble!
It's a wonderfully simple concept that can be applied in many other places, too: The values range from A to B (In this case: From 0 to 255.), so they can nicely be represented via a float (or double, or divided int) from 0 to 1. They used 0 to 1 because it's not only pretty general (can e.g. still be applied once we have 16 bit per channel and values would range from 0 to 65535), but it also behaves nicely in math. So, in short: Take the RED channel (0 to 255) of both images and divide it by "255f" or "255d", then apply the formula, then use the result (which might require multiplying it by 255). Once you're done, forget about the red channel and go through the same procedure for the GREEN channel, etc. I think that some Java AWT Color arguments even use that 0 to 1 range concept, so it's not really obscure.
I just benchmarked a simple set/get loop with TIntHashSet vs. RoaringBitmap on my PC (Intel Core i7 quad core, 8GB RAM, LUbuntu 13.10, OpenJDK 1.7.0_55). Timing-wise, TIntHashSet beats Roaring by a factor of 1.5 to 2 unless the values were a simple range of 0..999999 - other distributions like random values in 0..1999999, the combined ranges 0..599999 ∪ 1000000..1599999 benefitted trove. On the other hand, Roaring took much less memory (by a factor of 15 to 25, unless the codomain was much larger than the number of contained values (e.g. random integers). if you have a linear distribution, you can get away with just storing the bounds, which would be much faster than both trove and roaring. Otherwise it very much depends on your value domain if roaring or trove get better performance.
Though I did not follow hum_ph's suggestion precisely (as a result of not knowing which bodies go in which files and what arguments all the methods should/would hold in my case) I did implement his idea of interfaces, extensions, and factories with the help of: http://howtodoinjava.com/2012/10/23/implementing-factory-design-pattern-in-java/ after some google searching. So this is what I currently have: (all of this is in Desktop\Project VideoGame\patterns\item\factory): my super duper duper interface: (Item.java) public interface Item { } my super duper interface: (Equippable.java) public interface Equippable extends Item { } my super interface: (Weapon.java) public interface Weapon extends Equippable { } specific implementations of the interfaces above: (Sword.java) public class Sword implements Weapon { Sword(){ } } (Mace.java): public class Mace implements Weapon { Mace(){ } } All predefined constants that my items can possibly ever be. Will be expanded on of course:(ItemType.java) public enum ItemType { SWORD, MACE } and finally instantiating an item after determining what itemType is (for now it can only be SWORD or MACE):(ItemFactory.java) public class ItemFactory { public static Item createItem(ItemType itemType) { Item item = null; switch (itemType) { case SWORD: item = new Sword(); break; case MACE: item = new Mace(); break; default: break; } return item; } } I intend to take a gander at hum_ph's suggestion of having specific factories for each class (sword, mace, helmet, etc) but I am wondering if it would be possible to have a single factory like I do here? If so, how can I choose randomly between all available classes, and instantiate that particular class? I was trying: (TestFactoryPattern.java) import java.util.Random; public class TestFactoryPattern { public static void main(String[] args) { Random rand = new Random(); int randInt = rand.nextInt(2); if (randInt == 0) { String ITEMTYPE = "SWORD"; } else if (randInt == 1) { String ITEMTYPE = "MACE"; } else { } System.out.println("Sword: " + ItemFactory.createItem(ItemType.SWORD)); //&lt;-works System.out.println("Mace: " + ItemFactory.createItem(ItemType.MACE)); //&lt;-works //System.out.println("Random: " + ItemFactory.createItem(ItemType.ITEMTYPE)); &lt;-does not work; cannot find symbol ITEMTYPE } } It seems I am missing something very simple here. Alternatively I tried: (TestFactoryPatternTwo.java) import java.util.Random; public class TestFactoryPatternTwo { public static void main(String[] args) { Random rand = new Random(); int randInt = rand.nextInt(2); if (randInt == 0) { System.out.println("Sword: " + ItemFactory.createItem(ItemType.SWORD)); } else if (randInt == 1) { System.out.println("Mace: " + ItemFactory.createItem(ItemType.MACE)); } //etc else { } } } This code works as intended, but it does not seem very efficient. I would love to hear any more suggestions or how I can think about this code in an even better way!
I'm using eclipse because of its versatility. It has plugins for everything.
I would recommend IDEA. It feels much more intelligent somehow (better/more completion and code checks) and I feel like it's much more useful to me. Coming from Eclipse though, I cannot get over not being able to escape parentheses with tab. I have never used netbebans so can't day anything about it. 
http://www.reddit.com/r/java/comments/26hcd5/why_is_choice_b_not_valid/chr2lo0
With Java8 you can store a list of constructor references(or other loot generating method references) and then just randomly pick one and it will run the constructor and return an item. Drop this into LootFactory.java and run. Learn more about method references [here](http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html) package game; import java.util.Arrays; import java.util.List; import java.util.Random; import java.util.function.Supplier; public class LootFactory { static final List&lt;Supplier&lt;Item&gt;&gt; itemConstructors = Arrays.asList(Sword::new, Bread::new, SomeGold::new); static final Random rand = new Random(); public static Item getRandomLoot() { int index = rand.nextInt(itemConstructors.size()); Supplier&lt;Item&gt; constructor = itemConstructors.get(index); Item loot = constructor.get(); return loot; } public static void main(String[] args) { System.out.println(LootFactory.getRandomLoot().getName()); System.out.println(LootFactory.getRandomLoot().getName()); System.out.println(LootFactory.getRandomLoot().getName()); System.out.println(LootFactory.getRandomLoot().getName()); System.out.println(LootFactory.getRandomLoot().getName()); System.out.println(LootFactory.getRandomLoot().getName()); } } interface Item { default String getName(){ return this.getClass().getSimpleName(); } } class Sword implements Item {} class Bread implements Item {} class SomeGold implements Item {} 
Intellij's the best, fuck the rest (just kidding, but intellij is great and you should use it)
Netbeans is the most lightweight to start with. Eclipse seems to be the most ubiquitous and has the most plugins. I'm one of the few people who don't like IntelliJ. 
Just pick one and go. While an IDE is an important tool, it is more important to learn the concepts of an IDE at the beginning; learning a new IDE is no big deal. PS - Pay no attention to anything I say: I still use emacs.
IDEA or Eclipse. Sublime is good for small projects and once you can write Java in your sleep. I also use Sublime for JavaScript and Ruby over a full blown IDE.
Nothing wrong with learning more than 1 IDE. Each has their strengths. If you're just starting out then Netbeans is probably your best bet since it has a lot of good working startup wizards which you can study.
Eclipse is the most ubiquitous. IntelliJ IDEA is the best, especially if you use Maven to package your apps.
I know all of them, though I code mostly in Eclipse (Sorry, IntelliJ fanboys). IntelliJ is very very good, but expensive (unless you only create open source software with it). However, I find the caret positioning while coding somewhat clunky. Yes, I know it's supposed to be better that way, but I just can't get myself to like it. I've got the Eclipse keyboard shortcuts in muscle memory, that's why I always return to it, despite trying to like IntelliJ. Also, [lombok](http://projectlombok.org) integration on IntelliJ is incomplete AFAIK. Despite being decried as slow by aforementioned IntelliJ fanboys, Eclipse has yet to slow me down - and I've used it on an Atom netbook for some time. The plugins are usually top-notch. I also worked with NetBeans (the first barely-usable version I had was 4.0) for some time, and it has matured considerably. The plugin situation is not as good as with Eclipse or IntelliJ, but workable. TL;DR: They're all pretty good. I'd try and install all three, use them for a bit and stick with what feels best.
Same is true for the two other "competitors". They both offer good support for other languages such as PHP, Ruby, Groovy, C, ...
Used Eclipse for a year, changed to IntelliJ IDEA three weeks ago, no regrets. A few minutes ago: mouseX = vb.getPosX(mouseXInDocumentSpace); mouseY = vb.getPosY(mouseXInDocumentSpace); The parameter for the first method is "x", and it's "y" for the second method. IntelliJ correctly suggested, on the fly and with factory settings (At least I didn't activate some smartipants extra stuff that is off by default.), that the argument for the second method is probably incorrect.
&gt; IntelliJ is very very good, but expensive (unless you only create open source software with it). According to this guy, you're wrong [EDIT - SEE SUB-THREAD]if you are referring to the community edition[/EDIT]: http://stackoverflow.com/questions/1583995/am-i-missing-something-about-the-intellij-announcement Wikipedia also speaks of the Apache license, first sentence: http://en.wikipedia.org/wiki/IntelliJ_IDEA &gt; I've got the Eclipse keyboard shortcuts in muscle memory, that's why I always return to it You can reconfigure IntelliJ's keymap, and it even has an Eclipse keymap preset. I'm a truth-fan.
&gt; According to this guy, you're wrong (...) Yes, the community version is free for all. And I've worked with it; it's quite good. However, I'd like to point out that at some point you will want the ultimate version, which is restricted to open source - or pricey. &gt; I'm a truth-fan. Hey, me too. ;-) I know I can reconfigure IntelliJ to be more Eclipse-like, but whenever I'd go to an IntelliJ-using colleague's PC, the key mappings would be all wrong. That, the sub-par lombok integration, the different caret positioning and a few other small things add up to keep me an Eclipse user. You could say it's a matter of personal preference.
It says right there, "Explained above."
The first question to ask yourself is: what am I using now for the other language I'm programming with? * If you already use one of the three, keep that one, so you'll benefit from your muscle memory. * Otherwise, it does not really matter, really: * Most of the basic tutorials you'll find out there will use Eclipse as it is the most widespread; * Advanced/exotic tutorials will use IntelliJ as it is used by early adopters/hipsters (I am an IntelliJ user); * Oracle tutorials will use Netbeans. You'll find struggling with Java and all the framework you'll encounter more than with you IDE. It's only when you find yourself confident that you see the real benefit of using the one that is more tailored to your needs.
Most of the IDE's today work about the same. They fundamentally do the same thing. I would say its more important to understand **what** the IDE is doing on your behalf to make your life easier. Then you will see how similarly they operate. It will also make it easier to move between them because you'll know more about **how** the Java platform itself works. And knowing **how** the Java platform works will incidentally make you a better developer. As for which one, I would say IDEA or Eclipse. Im an Eclipse user of 5 years that moved to IDEA about a year ago, and I can tell you its only when you become intermediate level developer and above that you'll really appreciate the differences between them. I have no experience with Netbeans, but Im sure its also quite good for someone starting out. 
Poodle_Moth's [reply](http://www.reddit.com/r/java/comments/26hns7/instantiating_an_object_randomly_between_multiple/chrcwbh) referring to Java 8 fits, but here's another idea: 1) [RECOMMENDED] The if clauses at the end of your comment could be done with a "switch(randInt) { case 0: ... break; case 1: ... break; default:}" instead, which makes it more compact. Even better: You are using those if clauses to call the very same Method but with a different Enum value - and there's a trick you could use: Enum entries have a Method called "ordinal()", which "returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero)." So, instead of a big if or switch structure, you could just translate the random number to the enum value. An Enum has the Method "values()" which "returns an array containing the constants of this enum type, in the order they're declared." - this should be enough to collapse it all into like 5 lines or so, no matter how many different types you use. Also, you could think about twisting your Enum a bit - I haven't thought this through, I just want to show possibilities: public static enum Item { BRATWURST("braty"), SWORD("slicy"); final private String propertyName; // This map is purely for easier access to the enum members. Usually, you would have used a for loop to seek the enum members, but with the map you can access them directly. final private static Map&lt;String, Item&gt; entries = new HashMap&lt;&gt;(); static { for (Item e : Item.values()) { entries.put(e.propertyName, e); } } static Item get(final String propertyName) { return entries.get(propertyName); } Item(final String propertyName) { this.propertyName = propertyName; } final String getPropertyName() { return propertyName; } } 2) Depending on how un-complex the items themselves become, you could think about implementing them all in one class and just change a few variables inside (e.g. you could have a the Enum "Type" (or something like that) which decides if something is a sword or an apple; and another variable could define if something is equippable or not), or you could implement all in one class *simplified* and then extend it depending on the item complexity using the concept described in llogiq's [reply](http://www.reddit.com/r/java/comments/26hns7/instantiating_an_object_randomly_between_multiple/chra613).
Learn to use Eclipse because there is a chance you'll be forced to use it at work and if you're used to IntelliJ you may actually want to quit your job over it 
I have been using Eclipse for 10 years now and haven't feel any need to change. I've also tried netbeans and IDEA but always came back to Eclipse so my suggestion is to give it a try. If you learn to use that effectively it helps you on other languages too cause Eclipse has support for almost every language via extensions. 
&gt; However, I'd like to point out that at some point you will want the ultimate version, which is restricted to open source - or pricey. Oh, my bad. I misinterpreted your comment, thought you were referring to the community edition allowing only open source.
Netbeans and Eclipse.
You're not alone.
No big deal - I could also have written it more clearly to preclude such misunderstanding, so I'll chalk it up as my fault.
I'm going to throw out a different suggestion to start with: Vim. Yes, I'm aware that you may want to go with the a full-blown IDE, however starting with Vim gives you two benefits: 1. You can now easily edit programs on any unix-like system that has a vi clone on it. Not saying you're coding on such systems, but you can update config files, check logs, etc. 2. You can transfer your knowledge to other IDEs with the use of plugins. To expand on the last point, I had to use Eclipse for a project, but I'm a big Vim person, so I wanted to be able to work how I like. There were two options at the time and I ended up with Vrapper, which adds vim-like keybindings to Eclipse. It allowed me to edit files efficiently, like in Vim, but still have the power of an IDE. NetBeans and IntelliJ may have similar plugins. Personally, I don't care for IDEs. They get in my way more than help me, though when I used Eclipse I did use Eclemma to check my test coverage and that worked very nicely. Anyway, that's my suggestion. Perhaps you'll really like Vim and want to use that instead. Up to you. I'd offer more advice, but I never use NetBeans or IntelliJ, so I can't provide a fair comparison.
Consider starting with Dr. Java. practice problems at codingbat.com are decent.
Use whatever your instructor, book, guide, or friend uses. Because it doesn't matter, but the less time you spend dealing with this thing that doesn't matter the better.
The most lightweight is the one that I am using now, VIM +Eclim. Is just fast and with the "Youcompleteme" plugin, auto-completation is alot more faster and responsive. The only thing is that there is not GUI in there so you have to use commands or map eclim commands to VIM's keys in order to has a better experience, but you can even emmbed GVIM into Eclipse to use it from there, but in my opinion just using a headless eclim instance running in the background("eclimd") and using VIM as you normally would is alot more responsive than any Java IDE. Eclim offers you most of the useful capabilities from Eclipse in to the VIM Editor.
The usability of Eclipse is not as good as the usability of NetBeans or IntelliJ IDEA. I suggest to try NetBeans or IntelliJ IDEA.
I learned on CodeWarrior and so should you! How about JBuilder? /s Seriously, you're going to have to learn more than one. I would recommend learning whatever your immediate peers are using and then add another after you're comfortable. Be wary of shops that require one IDE, but be prepared.
&gt; but are instead now using ajax instead of postbacks. It's a bit of a stretch to say that. There's platform AJAX support that's used for a lot of things, but the big change that was made to JSF many years ago was simply supporting GET requests. Navigation between pages is now either direct GET with query parameters. This is supported by just using plain "a href", or via h:link. There's even an hybrid approach where you write a plain "a href" in your markup, but then give it an extra attribute to mark it as a component. There's also first class support for the Post-Redirect-GET pattern, where of course the GET request following the post can have query parameters. The initial model was quite like ASP.NET/WebForms with everything is a postback and everything is view state, but that was abondoned as the only option long ago. As said, there's GET support in various ways for a long time now (actually using GET to navigate between pages is the recommended approach) and view state can be either disabled, stored on the server or stored on the client (like ASP.NET). For some time now there also has been the concept of partial state saving, meaning only delta state is saved (this is much smaller than the full view state used to be). 
~~May I rage at everything wrong with this?~~ It's pretty looking code but has performance issues. I imagine this example turning into a "Java so slow" strawman. Edit: I read above the code... Well played. I would actually bet on problems with the heap before the stack. So many lazy filtered collections!
Check out the /r/Javahelp wiki for a list of tutorials.
They're all equally valid. Give them all a go and see what you feel the most comfy with. Don't put too much effort into it, just go for whatever feels good, you won't be restricted by any of the three.
This example uses the legacy IP geolocation database found at [http://dev.maxmind.com/geoip/legacy/geolite/](http://dev.maxmind.com/geoip/legacy/geolite/).
I'm in your boat (new developer, Java was my first language). I haven't learned Netbeans. I used Eclipse for a while and didn't hate it. I switched to Intellij, and the context-sensitivity is incredible. I'm not expert, but based on my limited experience, Intellij will save you time over Eclipse. (Though I understand Eclipse to be more ubiquitous.)
You should try all three and pick the one you like. Give each one at least a couple weeks usage, and go with what you like. Personally I like NetBeans followed by intellij with eclipse a very distant third, but you should try them and make your own decision. 
IntelliJ is becoming more popular, it's quite a nice editor and packages such as the Android Dev Kit are moving from Eclipse to IntelliJ. I personally use Eclipse for anything heavy duty and vim for general coding. I don't have any experience with Netbeans, but it looks fairly nice and is meant to be fairlylightweight in comparison to the others. My preference is Eclipse just because the Android Dev Kit used to be based off it. They're all nice IDE's, just pick one and if you feel like something's missing give another one a go.
Choice C depends on your javac options. For example it will fail to compile with -Werror -Xlint:unchecked args.
You could try Eclim. It's quite interesting.
This maybe an unpopular opinion here, but I hope RoboVM will take a more sustainable business approach and become more like Xamarin or JOOQ. Projects like this would do wonders for the Java ecosystem.
Notice that [Querydsl has been announced feature-complete](https://groups.google.com/d/msg/querydsl/fNFXliG8P-k/7dy2aAotVQ0J).
I'd recommend IDEA, but I guess this is mostly related to a series of unfortunate events I had with Eclipse, specially the mediocre Maven integration, the horrible AspectJ plugin, the atrocious Maven-AspectJ plugin (actually, the atrocious need for M2E plugins at all). So, nevermind my gripes with Eclipse, do try it, if it works for you, stick with it. It's a very capable Java IDE. Just be very careful about the plugins you install. Some people say Eclipse plugins are top notch, but you may run into problems with specific plugins at specific versions fighting each other. 
I hope you have had time to give this some more thought. I would very much like to discuss how we can help you with possible ways out of your situation. But maybe, reddit is not the right channel. Are you in for a call? Where can I reach you? Otherwise, you can find contact information [on our website](http://www.datageekery.com)
Thanks! What have you coded? I'm looking to get into mobile and web apps. 
When I learned Java I started with Netbeans but found it too controlling. I had a hard time breaking out of the mold and I missed a lot of things because it was doing them for me. I switched to Eclipse probably a month in. The learning curve was a little steeper but I enjoyed it and learned more from it. I would recommend Eclipse, but really just get out there and code. 
and the why is great as well... *X is the correct answer.* why: *X is the correct answer.* 
what a scam, I'd strongly complain and demand a refund if this is not an isolated incident.
Huh interesting. What's your job?
I suspect the OP is doing the fabled SCJP (or OCJP or whatever it's called now) examination. 
Let me guess, you're doing a practise exam for the SCJP? Good luck running through that minefield!
Yeah, lol. How did you find it?
If it's any help, most of the questions I got the right answer was "won't compile." I didn't have a high opinion of SCJP going into the test and an even lower one after taking it. Recognizing code that won't compile is not a very useful skill for a Java developer.
As others have mentioned, use whatever you like the most. Try a few, become comfortable with them, and then stick with whatever you are the most productive with. I'm not sure what your expectations are, but based on the phrasing of your question, you should never "need" to learn another one. You'll rarely start a job and be told "We only develop in X, you can't use anything else." Most developer positions will allow you to code in whatever IDE you like, since source code is simply a text file. As long as the output compiles and adheres to whatever standards are already in place, you're fine. Just make sure that you understand your IDE of choice well enough that you can set up your project settings and import dependencies on your own, since you may be in a minority at any given job.
Many enterprise projects use Eclipse as the standard. Like it or not, it can be a good thing to have a whole team on the same IDE. NetBeans is pretty awesome though. If you're a python guy, PyCharm is AMAZING.
There's a free version of the Sun Certified Java Programmer 6 on Java's website in PDF. It tackles a lot of the basics in Java, including several things even amateurs don't even know. Can't send you a link atm, currently in mobile. Try googling SCJP 6 reviewer :) As an amateur programmer, this definitely made me understand Java more.
I would have said the space, but apparently that doesn't matter (TIL) - just tried it in NetBeans. The only other hint I get is to use diamond operators instead.
Oracle does a poor job explaining everything, I think on purpose. Their docs are full of jargon, cryptic, and don't seem to explain everything.
Really? Because more than a few courses use marginal IDEs, like BlueJ
I'd recommend IntelliJ. I think Eclipse and Netbeans will serve you well though if you find a compelling reason to use either of those.
i use eclipse, very complete, there are plugins for everything
Interface code would have to be different, but any other classes from elsewhere can be used. However, using [libGDX](http://libgdx.badlogicgames.com/) (which uses RoboVM) it is possible to use the same codebase for both Android &amp; iOS apps (although this library is more focused towards games than standard apps)
ha! I think you're prob right. I found it confusing how they describe the four different types of method reference. Breaking things down like that is only helpful to the learner if there's meaningful and easily understood differences, IMO. 
NOOO not BlueJ! I don't like BlueJ. /u/lodc was probably only talking about real IDEs.
As RoboVM essentially converts Java bytecode to native ARM machine code, I guess you could use a Java SQLite library for your project - which would work on iOS.
Awesome. Thanks!
Oh awesome. There's so many!
If you want to start at zero, start with the tutorials at Udemy.com - John Purcell's tutorials are excellent. Also, don't forget the Oracle tutorials on their site - very important material. (as is also the Javadoc at their site)
My business partner loves the Spring framework so I guess that will be something I'm learning next! Thanks again
Oops - messed up here - I'm on the SWING tutorial, not SPRING yet (even though I'm planning on doing that sometime later this year) Wait for discounts on udemy (they frequently send mails when they have discounts) - you can get the paid tutorials up to 80% reduced ;) - buy them at the discounted price and go through them at your leisure - it's lifetime access.
could you elaborate more on that? Since none of these actually tell me anything. Like what you mean with more sustainable business approach and what they would need to do to become more like xamarin or JOOQ.
https://code.google.com/p/j2objc/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=j2objc-a-java-to-ios-objective-c-translation-tool-and-runtime-google-project-hosting something made by google which basicly does the same. Besides the UI Code every other class and such will be ported. Not yet used it but your comment reminded me of it.
I can see multiple ways they can do it. Perhaps, they can continue to release their runtime under the Apache license but their compiler under a proprietary license. I believe this is similar to what Xamarin does. Or perhaps, release both of them under an open source but not libre license. Unreal Engine 4 follows down this path. I am sure there are other ways as well. Just something that they could force their users to spend some money on their product. By giving them a greater cash flow they will be able to reinvest it into developing a better product much faster. As long as they contribute some of their work back to the community (such as fixing eclipse bugs), it would greatly benefit everyone.
thank you for clearing it up! It does make sense especially if they are already a go to VM for many. It just makes sense to start thinking in proper business sense to drive this project even further.
Nice article, the Oracle docs seem to assume an understanding of the differences between closure vs lambda when talking about instance method references, so breaking that down with some examples definitely helps, thanks!
Debugging like crazy, throw a breakpoint somewhere and just step through everything. When I started I would grab the "getting started" stuff for a project and step through parts I was interested in. That and pouring over unit tests. I love using tests to help me learn because often you find the little tips and tricks the developers know from working so closely with their own code that you're not going to find anywhere else. Tests are also a great place to find shortcuts for solutions as most people generally want to keep their tests as simple as possible, you find neat little tidbits throughout the test code. Careful to not pick up too many bad habits though hah!
Nice summary. Thanks for that as I did not really have a lot of time to read into the introduction.
man just reading this makes me realize how incredibly little I know. I feel like I should start with Java for Dummies. Do I need a compiler or is that done online? What is an IDE? Jesus I know nothing.
An IDE is the development environment you are programming in. It basicly helps you in combining editor and compiler and overall beeing helpful. There is for example Eclipse as a very advanced IDE that actively tries to aid you and then there are more simple IDE's like JCreator which just respond with error messages so you need to figure out your stuff. The Android Studio by Google is made with one of those advanced IDE's but heavily modified. I heavily recommend reading atleast one tutorial on how to properly use your chosen IDE so you can avoid unnecesary headaches. 
It sure does matter, a poor, buggy IDE can be a huge turn off. No IDE at all is better than a crap IDE.
I'd use netbeans. They are all nice in their own ways. Eclipse with plugins offers a lot of power, but it has the steepest learning curve. Its pluses are not that important to someone new to java and its minuses are a direct impediment to a beginner. I choose Nebeans over Intellij because you would use community edition. It is missing a lot of features you are likely to use in a job no matter which IDE they would use. Integrated Application Servers and popular frameworks amongst other features are important to be familiar with.
At first maybe you have to choose if you want to do some desktop applications or web applications, if you select web application the easier path will be use JSF (primefaces or richfaces); and then in order to manage the backend you could check [SpringFramework](http://projects.spring.io/spring-framework/) and [Spring Data JPA] (http://projects.spring.io/spring-data-jpa/)
Nice app idea! Messaging my master, an app developer, now! ^^created ^^by ^^/u/laptopdude90 ^^V1.0
I write java for a living and prefer IntelliJ. The main reasons: lighter than eclipse, the testing tools are better, git integration is better (out of the box), works a lot like sublime, better intellisense, and seems to support testng a bit better. I started with Eclipse because of the android SDK and my work suggests it for what we do (not android related). But it didn't feel right (not fully sure why beyond the heaviness of the program). Really the best editor is the one that helps you be productive. For me, it's one that behaves like my favorite text editor (sublime) and doesn't make me relearn too many shortcuts. They each have their benefits, as many others have said. 
You learn by doing, and then refining, refactoring, and usually doing it in a more efficient way. Knowing foundational stuff is required though. Remember you do not need to know everything to start. Just start.
And FYI, most apps fail, most 1.0 releases are complete flops. If it was easy, all programmers would be rich. Lucky, skills, right timing and attention help, but the truth is that you'll never know how it will be received beforehand... No matter what you think you have figured out right now.
If you are trying to declare an array variable it would be similar to this: int[] VariableName = new int[3]; Where int[] creates the array of integer values, and 'new int[3]' declares that it is an array of 3 values. The array length can be a variable.
There are two things you need to construct. First you need to construct the array that will hold references to Fridge objects. Then you need to loop through the array, constructing new Fridge objects to put in the array.
[StackOverflow](http://stackoverflow.com/questions/1200621/how-to-declare-an-array-in-java) is best for specific questions. Search first especially for a beginner question.
I'm sorry, it's just that, on top of the fact that I'm learning this in another language which deprives me of some vocabulary, I'm learning very little actual java in this class. The class uses it to talk about other things so I really didn't know how to phrase it to find what I want. But I'm sorry again.
Are you sure? Other people told me otherwise.
I'm sorry, I just didn't know how to phrase it. I'm learning this in Portuguese so I lack some vocabulary, and every time I search of these very basic things, I'm overwhelmed with complex problems. I rarely find anything within my understanding, it's always stuff by programmers to programmers. But I'll try harder next time. Ninja edit: thanks for the answer too, by the way. I'll try and see if it works.
Creating the array gives you an empty array (filled with nulls). If you need actual Fridge instances, you have to loop through the array creating them.
That's the thing, other people have told me that doing it as Fridge array[] = new Fridge[size]; is enough. I haven't tested it yet but it seems reasonable that it should work.
&gt;I haven't tested it yet but it seems reasonable that it should work. Well then, I think you know what you need to do.
I personally recommend modding Minecraft because it shows you good programming concepts in object oriented programming. It also shows how to make classes off of someone else's code. I personally enjoy making simple games so I would try double buffering. You should buy and read Head First Java, it is really great I'm doing general things. I'm not sure what you should do party then. As I am a teenager, I commonly work on projects for the science center. This makes sure you can apply your skills. The most important thing to do is to find an IDE and stick with it. I recommend Eclipse our IntelliJ IDEA. Also learn about generics and the Java built in code. Java 8 is really cool and you can use it. To test your skills, you can go to codereview.stackexchange.com and test your abilities by helping others.
In school we used Netbeans but now that I am done that, I use IntelliJ at work and I love it.
Googled "how make array java". [First hit.](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html) 
Which, surprisingly, doesn't address my problem. I know how to make an array for types like int, char, double and so on. What I don't know, actually, is what I asked about in my post, generic arrays for classes I created. I googled it and searched for it here, but I didn't find anything explaining it. Either way, other people have actually been helpful, so you can stop being a prick to me and go tell someone else to google things instead of asking for help.
I would say learning it properly. Get going with learning the basics of java with some tutorials or guides about java and when you think you are getting comfortable add some tutorials for apps in the mix. But that is just my opinion. Depending on your country there are companies that offer junior programmer positions. These positions usually will help you become am programmer. Making apps is a different thing though. You can start making apps for others as a freelancer or try to get succesful with your own app as you stated at the start of the thread. How succesful you can get depends on you. In the end. Practice is the most important thing about programming. There are many good and helpful rescources that will aid you on how to solve a problem you encounter. The most important part is that you learn how to program and solve problems effectively.
&gt; Either way, other people have actually been helpful, so you can stop being a prick to me and go tell someone else to google things instead of asking for help. You're insulting the people that help you, way to go!
&gt; The most important thing to do is to find an IDE and stick with it Sorry kid, but that just isn't true. I'm a professional Java programmer and I don't even use an IDE. &gt;Java 8 is really cool and you can use it While Java 8 has some interesting improvements, most companies won't switch for quite some time. OP's time is better spent learning computer science fundamentals. A good algorithms/data-structures books is a great place to start. 
If you are looking into web development Java tends to be a more backend language. It does a lot of heavy lifting and has tons of libraries for all kinds of databases. If you are interested in the front end I would look into another language. In my opinion Java front end web frameworks are a little weak and difficult to use compared to Node, Python, Ruby. Tons of java work revolves around databases and creating restful web services. My advice would be try and think of an idea for an application. Build it and make tons of mistakes along the way. Mistakes help you learn very quickly. Also dive into some open source projects. Its very useful to see how other programmers write code. Just keep in mind there is never a "right" way to code. There are good approaches and bad approaches but there are always tradeoffs between different good approaches. Try to keep an open mind when learning how to code and try out different "styles".
Well done!
http://netty.io/5.0/api/io/netty/channel/ChannelPipeline.html 
Being able to (debug-)log generated SQL from a framework is essential for developers. log4jdbc hooks into the right abstraction, as implementing JDBC yourself is quite awkward. This is why by default, [jOOQ](http://www.jooq.org/doc/latest/manual/sql-execution/logging/) also does quite a bit of logging: Executing query : select "BOOK"."ID", "BOOK"."TITLE" from "BOOK" order by "BOOK"."ID" asc limit ? offset ? -&gt; with bind values : select "BOOK"."ID", "BOOK"."TITLE" from "BOOK" order by "BOOK"."ID" asc limit 2 offset 1 Query executed : Total: 1.439ms Fetched result : +----+------------+ : | ID|TITLE | : +----+------------+ : | 2|Animal Farm | : | 3|O Alquimista| : +----+------------+ Finishing : Total: 4.814ms, +3.375ms Can this be done (including the result set output) with log4jdbc?
I don't think you will need too much support for something as trivial as JDBC logging...
Oh mines been totally the opposite. Everyone I know uses just text editors.
No, I'm insulting *him*. There were people such as /u/iohoosierkyle and /u/tootie who actually helped along with telling me to google things. Every single post here that asks a question can be answered with "just google it", but it doesn't take anyone anywhere.
I actually did try it, but for some reason it didn't work for me. It's been a few years, so I can't recall why it didn't work.
Write once, suck everywhere. Some of the Android API's are infuriating to work with and Objective-C is a quick trip to brain damage, but a native app is still the best app.
Why the negativity? CN1 generates native apps (C &amp; Objective-C on iOS)
Rookie here -- I'm a little confused on what exactly "lambda" is in this context. Could someone explain it to me? Also, the example: public static String function(String value, Function&lt;String, String&gt; function) { return function.apply(value); } What exactly is this "function" doing? Can someone re-do this example without naming the function and the argument the same thing? I can't tell if the "function" in "function.apply" is referring to the method or the parameter. Does it take in a function and a value, and then execute the function with the value as a parameter?
What's the job market like for a self educated java programmer with no certifications is I suppose the real question. 
One of those crappy tutorials that tell you what and how you should do, but say nothing about when and why it is useful. Too many good things are not understood well by people because of that teaching approach. Heck, that's where people that don't know difference between interface and abstract class come from.
Yes
The [official Java tutorials](http://docs.oracle.com/javase/tutorial/) are actually quite good. While there are tutorials for the new Java 8 features, I wouldn't worry about them at this stage - learn the basics first.
Skimmed this "tutorial" looking for the practical applications section / so what. Couldn't find it, and wondered what's the point in posting something from a beginning Java book.
What kind of coding are you doing? What type of product do you work on? How many years experience?
I believe it allows you make nearly the same class still serializable. E.g. you can make a class to be serialized, put the SerialVersionUID, add a single function (which would normally cause the class to have a new SerialVersionUID) and still have them be serialized. Basically it's to help keep serialization possible when a class changes but the change has no bearing on serialization compatibility . ***Edit:*** http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it
You are not using the java8 JDK. Method references are new to Java as of this year. As far as your object oriented approach to Java, try to keep objects independent of each other, don't nest classes like you've first shown. The less an object refers to another type of object in its definition, the less constrained your project is when you need to change it. Right now you don't have a full fledged game worked out and so you are just happily bumping around in the dark which is ok, everyone does that a bit when they don't know what they want yet. So not trying to shove everything in a heirarchy at the beginning will save you a lot of rewrite later. 
What would you want to use Java for? What's your goal? GUI app, mobile app, web app, server app? Learn the basic of Java (no need for book, just use official Java tutorial + stackoverflow + reddit) plus some build tools (maven or gradle is good investment) then go learn the framework that better serve your goal. Lastly, create a project using that framework to practice your understanding. Later on you can move to more advance topics like lambda, concurrency, design pattern, etc...
Wow. The showcase has undergone a redesign. Very nice.
It's for serialization compatibility. It's auto-generated so if your classes data structure doesn't change, neither will the generated version. You can write your own readObject/writeObject and maintain compatibility manually if you change your class but require serialization compatiblity.
I second this, but I would amend it in saying that I think lambdas and streams will be important when using the collection classes moving forward, and they shouldn't be put off for later. Basically when you start studying the collections framework, learn it the new way.
This may be wrong, but I feel like writing it.. I thought you put them in because if you've got serialized objects sitting out somewhere in storage and you change the code, thus changing the structure of the object, you need to change the SerialVersionUID, otherwise it will try to de-serialize the object into the current structure and fail miserably. Unfortunately i've never seen this used correctly, but I haven't been on many projects where serialized objects were persisted besides in runtime, and there's always a server bounce for deploys.
Yes, but perhaps more importantly, it's used to make sure you can deserialize your object with a jdk that is different from the one who serialized it, since both can have different "default" values for SerialVersionUID.
What the article fails to mention is the canonical use case of abstract classes: To decouple an interface from concrete implementations while maintaining a contract. Edit: An example: public abstract class Contractual { public final void change(int value) { validate(value); doChange(value); // assert post-conditions here checkInvariants(); } protected abstract void doChange(int value); private void validate(int value) { if(value &lt; 0) throw new IllegalArgumentException("value should be positive, was " + value); } private void checkInvariants() { // some other checks here } } Now an implementing class cannot change `change`, but it has to implement `doChange`, also it's bound by the contract because otherwise the `change` method will fail at runtime.
University -&gt; internal web tool at Cisco -&gt; OpenStack now.
This is correct. If you don't declare a static UID, and then update the class (add fields or methods), the UID will be automatically updated upon recompilation. That doesn't sound all that bad, but in a production environment, it's tragic. If there are older instances of that class (with an old auto-generated UID), perhaps serialized in a database, it will not know what to do with the updated class since the UIDs would not match upon deserialization. You can prevent this by declaring a static UID that remains consistent through all versions of your class. Removing fields and methods from a class are a different story and a static UID will not prevent issues there.
The [rules](http://docs.oracle.com/javase/8/docs/platform/serialization/spec/version.html) for versioning if anyone is interested. Removing methods is fine since methods don't get serialized. Adding/removing fields depending on your code.
Agree i am using VIM with Eclim + command line for android apps, and the experience is a lot more faster than any IDE.
yep, it takes a function and applies it with the parameter as the value. It's pedagogical so doesn't make sense on its own but was trying to explain that you can create methods (in this case 'function') that take an interface (er, again, called 'Function'), which you can pass in disguised as a lambda and that you can call the "lambda" (on line 2.) above. Feel free to post on the blog's comments for more help...
as i see unfortunately only the showcase. i can't find any side-accordion-menu component or theme like this :-(
Also if you want to be pedagogical pass an Integer or something else so people don't wonder why you want call .toString() on a String... It also helps see how the parameterized types are used in the function
The primefaces response shows exactly whats wrong with JSF. You have to rebuild a component essentially from scratch everytime you make one. It's error prone and promotes bad usability since people who need something like JSF aren't familiar with common ui decisions like when something should launch a modal or shouldn't or where the location of the OK button should be or if it should be called something else etc. Don't get me wrong, primefaces is actually a good option out of a ton of bad ones, I shudder thinking about my richfaces days. Frankly it's too mid level - not low level like pure javascript, but not high level enough to where you can forget about the details. A worst of both worlds. The universe of companies that want a simple frontend without bells and whistles that wont have too many complex requirements is where it might excel - but that is a very low number. Also why would you want your Java dev doing front end work? Instead of a team of 7 people doing bad JSF, hire one frontend guy to do great Javascript/CSS! You'll save a lot of money. Division of labor is econ 101.
Sorry, here is the start of my most recent attempt int newCounter) { int[] occurence = new int[newCounter]; // calculates occurence of numbers for (int x = 0; x &lt; newCounter; x++) { for (int y = 0; y &lt; counter; y++) { if (newList[x] == numList[y]) { occurence[x]++; } } } int[] modes = new int[10]; return modes; All it does is calculate the occurrence of the variables.
Wouldn't that only calculate one mode though?
If you need or want to hand write serialVersionUID, an easy way is like this: private static final long serialVersionUID = 2013_05_14_001L; 
That's pretty open ended... Google could help. Apache Commons would be a good example of some of that.
Head First Java end of. Then look at Java 8 specifics.
Something like this maybe? //HashMap to keep count of how many times each number occurs //The key is the number, and the value is how many times that number occurs HashMap&lt;Integer, Integer&gt; mode = new HashMap&lt;Integer, Integer&gt;(); int[] numbers = new int[]{1, 2, 2, 14, 65, 2, 14, 100, 102, 100, 2, 1, 102}; for (int num : numbers) { if (mode.containsKey(num)) { //If number exists get its count and increment it int count = mode.get(num); count++; mode.put(num, count); } else { //If number doesn't exist add it to the hashmap mode.put(num, 1); } } //Print numbers and occurrences for (int key : mode.keySet()) { String s = String.format("%d occurred %d times", key, mode.get(key)); System.out.println(s); } //Output looks like this /* 102 occurred 2 times 1 occurred 2 times 100 occurred 2 times 2 occurred 4 times 65 occurred 1 times 14 occurred 2 times */
I just picked up the latest Java For Dummies e-learning kit. If you like the ... for Dummies format, it's awesome. Head First Java is good too but it couldn't keep my interest past chapter 3
I have haters I think.
/r/javahelp
FWIW I found Lewis &amp; Loftus Java Software Solutions 6th ed. at Goodwill for a buck. So far so good. There are a number of good books like Head First. 
This is probably the best answer: use a data structure where you can write simple logic to determine if a key is present (since maps efficiently searched) and just increment the value at each key where applicable.
You should definitely switch to using a map, as others have suggested. Additionally, unlike the other code snippets here, you can avoid one iteration through your completely built map dataset by remembering the highest count you've seen, as you build the map
unfortunately I have not learned maps yet, and would be completely useless if I tried to use one.
Or /r/javahelp 
[JFreeChart](http://www.jfree.org/jfreechart/) is awesome.
On line 3 you might change it to: Map&lt;Integer, Integer&gt; mode = new HashMap&lt;&gt;(); In Java 1.7+ you no longer have to specify the generic parameters on the right hand side. You also don't need to specify the type of Map on the left hand side. It's usually better to do so in order to not tie yourself to an implementation. On line 20, you can retrieve an Entry&lt;Integer, Integer&gt; instead of just the key, then you don't need to retrieve the value from the Map later. for (Entry&lt;Integer, Integer&gt; entry : mode.entrySet()) { String s = String.format("%d occurred %d times", entry.getKey(), entry.getValue()); System.out.println(s); } I haven't ran this code into a compiler but it should be valid or near valid.
A&amp;B are correct because MyObject's finalize() overrides java.lang.Object's finalize() and is [protected](http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html). The only way it would be visible is if MyObject was in the java.lang package; but in the example, this is commented out. On a side note, the overridden finalize() should call the super.finalize().
This has to do with scoping. The method finalize is protected scope, so only classes within the same package are allowed to call it. When you uncomment Line 1, you are essentially making this class part of the java.lang package. When you call finalize explicitly here, the object doesn't get set to null. Finalized is called prior to GC, but that is something the JVM does prior to removing the reference. You calling finalize does not make the object null.
&gt; protected scope, so only classes within the same package are allowed to call it Plus derived classes. You are thinking *package-private*, where access is limited to package (and class) scope.
I am not sure how B is correct because finalize is _protected_ which means it is visible for subclasses rather than package private as suggested in the other answers. Edit: removed wrong claim
When I came from university, I believed that UML was the right thing to "engineer" software. Then I learned that in almost all cases I didn't know enough to draw the "final" diagram. So the diagrams had to be changed according to the actual code. Today I use UML rarely, but sometimes it is useful to document complex things.
Good question. Read http://stackoverflow.com/questions/15939002/protected-access-modifier-in-java Also see JLS 6.6.2: A protected member or constructor of an object may be accessed from outside the package in which it is declared only by code that is responsible for the implementation of that object.
Backwards compatibility (and inter-set compatibility). You'd need Set (then MutableSet) extends ImmutableSet, which would break binary compatibility with old code. Also Set is also a Collection, so we'd need a MutableCollection, too. And throw in a MutableIterable together with a MutableIterator, while you're at it. This gets unwieldy, fast. Then, whenever you need a Set, you'd have to check if you need to mutate it and write the type accordingly. TL;DR: Yes, it's a nice idea in general, but it won't happen in Java. Perhaps within a third-party library like trove, with a major release.
Straight from the horse's mouth, the [Java Collections API Design FAQ](http://docs.oracle.com/javase/7/docs/technotes/guides/collections/designfaq.html#1): &gt;**Why don't you support immutability directly in the core collection interfaces so that you can do away with optional operations (and UnsupportedOperationException)?** &gt;This is the most controversial design decision in the whole API. Clearly, static (compile time) type checking is highly desirable, and is the norm in Java. We would have supported it if we believed it were feasible. Unfortunately, attempts to achieve this goal cause an explosion in the size of the interface hierarchy, and do not succeed in eliminating the need for runtime exceptions (though they reduce it substantially). 
psss retainAll is a mutator :)
JSF does not hide the front end code at all. There's pages which start with the HTML tag and you navigate between pages using GET and PRG. On the page is plain HTML, CSS and js. JSF adds easy validation. Templating and binding to data. If anything, gwt and especially Vaadin do a lot if hiding. Every framework does some amount of abstraction but JSF remains very close to the metal. I don't see why letting JavaScript build and render pages out if JSON is somehow natural. The web is and always has been about servers returning ready to render HTML!
 final HashMap&lt;Integer, Integer&gt; occurrences = new HashMap&lt;Integer, Integer&gt;(); (The second &lt;&gt; can be left empty, but I chose the example that is *sure* to work. Also, the first "HashMap" could be "Map" to keep the type more general.) occurrences.put(1, 15); System.out.println(occurrences.get(1)); // outputs 15 occurrences.put(1, 12); System.out.println(occurrences.get(1)); // outputs 12, because slot "1" has been overwritten Now you know the very basics of Map. You could make a map for the occurrences of each number. The key (Left side.) would be the number, the value (Right side.) would be the amount. HashMap is unsorted but fast. LinkedHashMap keeps insertion order but is slightly slower. TreeMap sorts by the natural sort order of the keys and is even more slow, but we're talking perfectionism here.
C is wrong anyway, as the object is printed and it doesn't override toString, so no matter what name contains, it will call the default Object.toString
A and B are correct because you are calling finalize on Object, and not on MyObject. The finalize method of Object is not visible from this scope (static method). The finalize method of MyObject is. However, when declaring MyObject to be in the same package as Object the static method can see finalize of Object. MyObject ob = new MyObject(); ob.finalize(); // this is visible Object ob = new MyObject(); ob.finalize(); // this is not visible 
Who actually extends Object?
IMHO, JSF is a step backward compared to the current state of JavaScript/HTML 5 ecosystem. However, some people really like it, especially the version 2. I guess it's a different stroke for different people. 
All I can tell you is I can develop a web application with a rich front end much cheaper and quicker using JSF. JSF can use plain HTML if you like or you can use tags. I do not really see a lot of demand for web applications using things like AngularJS. They get a lot of talk on blogs though. JSF is really nothing like GWT. With GWT you write the front end in Java.
Another problem is you can make a class that implements that interface and it's mutable. You can make a ImmutableHashSet&lt;T&gt; that implements ImmutableSet&lt;T&gt; and also has a method add(T item) So your class will be mutable, and someone may change the set, and that will not be detected neither at compile time nor at runtime. And without using reflection or anything tricky, just a cast will do it. I don't know how scala handles this problem. 
Surely if Set extended ImmutableSet then that would defy the point. Code that produces a set could not protect it by passing it as an ImmutableSet (as the receiver could cast it) and code that receives an ImmutableSet could not assume that it is immutable as something else may have (or create) a mutable reference. That leaves a very narrow use case where an ImmutableSet is created directly as a copy of another collection, for which I think [Guava's Immutable Collections](https://code.google.com/p/guava-libraries/wiki/ImmutableCollectionsExplained) where the collections hierarchy is mirrored with completely immutable types is a far nicer solution. Their use of private constructors means that the classes cannot even be extended to become mutable and so both the creator and receiver of such types can be sure that they really are immutable (aside from access via reflection etc).
But the Guava collections are throwing exceptions and continue the tradition of violation the Liskov substitution principle.
Maybe `ReadonlySet` would be a better name. Type systems cannot prevent all errors, but they can make misuse more obvious.
This is the key point to why having the mutable collection be an extension of the immutable collection doesn't work. The contract of an immutable collection is stronger than "code that references an instance with the immutable type cannot change the collection". Instead, the contract of an immutable collection is that "the collection may not be changed at all once it is created".
&gt; By the time 2.0 finally hit the streets the frontend community was in the midst of a js/css revolution. There's no real js/css revolution. There's a hype for sure and hipster bloggers write about it. But in practice? Not so much really... &gt; Not many shops use jsf Nonsense! JSF is ALWAYS somewhere in the top of every survey! Check the latetst rebellabs survey. It's number 2 there. Check activity on SO, it's number 1. &gt;unfortunately its time has passed. Absolutely not! JSF grew along with the market and does really well in keeping up. It has slimmed down, became easier, modernized it's core approach etc. 
In other languages, yes, in Java not so much because of the limitations of the JVM
&gt; Who explicitly extends Object? ftfy
A possible solution would be to check on construction time if the class implements both mutable and immutable and throw an Error if this is the case. Also IDEs/FindBugs could easily search for this.
Because the only thing a lambda expression does is to wrap an interface that has only one method in an anonymous class. You could do that all before (and it was done, e.g. in the GUI with addEventListener(new XXXListener...)) but with much more boilerplate. Also somewhat related is a 25 years old pattern called the strategy pattern where you pass interchangeable algorithms (which implement the same interface) at runtime. This is somewhat related because you also pass "code" or an algorithm to a method/class constructor, similar to a lambda that is passed for the purpose to pass an implementation of an algorithm as opposed to pass a data structure or data fields.
Where did you learn that if you have a synchronized list, you need to synchronize the access? That is obviously false. Choose either one or the other, not both.
Could you not do without the interface entirely if you use a stream and filter instead?
Posting stuff like this to what should be a technical based sub reddit is a bad idea. I have no idea who "tech.pro" is but my opinion of you is now a bad one.
What you say is true, but that's not really what 'syntactic sugar' refers to. If it's used in the broad sense the OP uses it, then any language feature is syntactic sugar for the code implementation. I have no quarrel with your explanation, but I think the OP is wrong in describing a rather substantial change as 'syntactic sugar.' It's not. It's a new feature that could only be reproduced prior to Java 8 with difficulty. 
JSF uses JavaScript/HTML 5.
The example in Wikipedia is exactly what syntactic sugar is. One expression is the exact equivalent of the other, but the former is easier to use. There is no exact equivalence between lambdas and the convoluted code that could be used to replace them. Rather as you very capably explain, different actions are taking place under the hood to generate roughly comparable results. That is generally not what is meant by 'syntactic sugar.' 
I haven't been convinced of any productivity boost. From my experience people who use emacs/vim are just as fast as people who use IDE's. The only difference is the people using emacs/vim actually know the java API and know how class paths/jars/file systems/etc actually work. Sure, some people using IDE's take the time to learn these things but most that I have seen don't. IDE's give you no benefit except for holding your hand and making you dumb.
Tutorials point has a good one. Also see ejb 3 in action. Very good book 
I could be totally full of shit here, but here's something I'm pulling out of my ass without any real knowledge. What would be the point of overriding a static method? The data in the class shouldn't be any different, since you don't need an instance of that class to call it. Wouldn't overriding a static method be the same as just deleting a method from a parent class and reusing its name?
Cool idea! You might want to as on http://www.java-gaming.org/ - maybe someone has started that project or you could get some interest in starting it over there. 
Lambdas can be thought of as syntactic sugar since they don't exist outside the source file and are not mirrored in the JVM. On SO (http://stackoverflow.com/a/23870800/2364216), Brian Goetz says: &gt; There should be no need to distinguish a Runnable that began life as a lambda, a named class, or an inner class -- they're all Runnables. Also, Wikipedia continues: &gt; a construct in a language is called syntactic sugar if it can be removed from the language without any effect on what the language can do. This leads me to believe that Java's lambdas are 'syntactic sugar' since they are a language shortcut for creating and instantiating anonymous classes like Runnable (or Predicate in this case). 
There is much more that syntactic sugar. You'll note that not a single member of the Java 8 team refers to lambdas this way. Nor do [authoritative explanations by third parties] (http://www.drdobbs.com/jvm/lambda-expressions-in-java-8/240166764). [This conversation](http://stackoverflow.com/questions/15221659/java-8-lambda-expression-and-first-class-values) further discusses this issue and concludes correctly that lambdas are much more than syntatic sugar. 
Hire English Writers for your every reddit post. 
I think this is what you want. int n = 1; for(int i = 1; i&lt;=42; i++) { System.out.println(n); if(i % 2 == 0) { if(n == 3) { n = 1; } else { n++; } } }
My guess i%6/2+1
It ended up being similar (((i - 1) % 6 - (i + 1) % 2) / 2 + 1) I sat there bashing my head against the desk for a bit.
It is more use in languages where the Class is an Object (e.g. Delphi's Object Pascal) and the static methods are methods of the class object. You can reference these Class Objects and call their methods as you would any other object's methods – if Java followed this process you could do something like Class One { static One initialize(){ return new One(); } } Class Two extends One { static One initialize(){ return new Two(); } } Map&lt;String, Class of One&gt; map = new HashMap&lt;&gt;; map.put("1", One); map.put("2", Two); One v1 = map.get("1").initialize(); One v2 = map.get("2").initialize(); which IIRC is similar to the approach Delphi used for dynamically loading objects off a stream – basically turning the Class Object into a factory. When I first started Java I used to miss virtual static methods – but there are plenty of alternative ways to solve the problems in Java which are usually much easier to test so it didn't take long to stop missing them. 
It addresses the same general problem, just with a smaller, more focused API.
Is duplicating the printstatement considering cheating? Because that would be the most obvious, simple and "correct" solution fitting the requirement :-)
What do you mean by this?
 for(int i = 1; i&lt;=42; i++){ System.out.println(i) System.out.println(i) }
I'm done after this post, because you are more stubborn than I :-D. IDE's give you the benefit that when you have code to crank out, you don't spend hours upon hours rebuilding something to help you code faster. Why spend $200,000 to make a ford focus look and feel like a Ferrari, when you could just buy a $200,000 Ferrari. POC is one thing, this is just anal though.
Which languages support this feature?
Definitely recommend EJB 3 in Action, Second Edition.
i also want to use hibernate with it.. hrm..
Ah, oops. Thank you for the advice.
I would say Head First Java is the opposite of concise, all of the Head First books I've read are. Those books don't cover much by page count, they a tiny fraction of a topic over a subset set of topics from the total spectrum of topics related to the technology at hand, and cover those topics rather slowly (not that that is bad, they are books for new programmers, so their slowness and repetitiveness is a plus). For example, Head First Java is 688 pages, but the Java Programming Language which covers much much more is only 250 pages thicker. 
Chromebleed says this site my be affected by the heartbleed ssl bug so be warned. Also if OP is the creator you may want to figure out what's up.
The point i'm trying to make isn't that IDE's are bad, it's that I don't believe they give you any speed boost. They don't make you code faster, I don't see any benefit of an IDE at all. You're more thank capable of remembering the API yourself, you're more than capable of typing "mkdir file_name" and jarring things yourself. Making an ant file for building takes two second. The skills you learn using an IDE don't transfer, if you're programming in java via a text editor rather than an IDE the skills you learn are universal. 
You'll want to create an internal wiki. There's a few free ones out there: * [Question2Answer] (http://www.question2answer.org/) * [ScrewTurn Wiki] (https://stw.codeplex.com/) * [MediaWiki] (http://www.mediawiki.org/wiki/MediaWiki) I haven't used any of these, most companies I've worked for use SharePoint, since it was already there (document storage, workflow, etc.)
You use Doxygen to generate a cross referenced view of the library, and add documentation directly into the sources. Have your CI regenerate the docs on a regular basis. 
You can also start counting from 0 like we usually do and then my formula works. for (int i = 0; i &lt; 42; i++) { System.out.println(i%6/2+1); }
Crawl reddit for something you are interested in and store the result in a DB - use that w/ hibernate and serve the data 
Filled it out. Hope to see results in my favour soon. @Startup would be most appreciated.
If you find yourself debugging with break points, you may want to enable FlushMode Always so that your SQL runs when you would expect it.
Yeah but unfortunately id have to revamp about 30 other lines. It's for massive data insertion into a database.
Updated, thanks.
Seems like a lot of overhead - what is the memory footprint like?
There is. The book I referenced in my post, The Java Programming Language, is coauthored by the creator of Java. It's a bit bigger than The C Programming Language, but that's because Java is a much larger language and the JCL has a much larger set of libraries compared to C's standard library.
I only know what I use it for. Apache Tomcat is a server. I make web apps using Java and Vaadin which compile to a WAR file. The war file is sent to my Tomcat server and then people contact the server via a web address.
I always push for as much documentation as possible to be obtainable as a build artifact.
Read [this topic on Guava mailing list](https://groups.google.com/d/topic/guava-discuss/OjUYv8VM7Po/discussion) regarding SOLID principles vs Java collections framework compatibility. In particular read Guava dev's answer: &gt; You are entirely correct that there is a contradiction of SOLID, but the die is cast. The Collections interfaces were not designed to be Liskov-Substitutability compliant. They just aren't. And the Guava authors made the decision long ago that rather than get "the perfect collections API" we would improve on the existing on in Java, as there are specific costs to departing from what the JDK APIs are, since so many of its facilities are tied to its specific APIs. &gt; &gt; So, you are right. But that ship has sailed. SOLID is a great rule of thumb to understand how to create healthy Object-Oriented code, but it is not a law of physics - it is a design opinion, and you have to use these principles in the context you find yourself - in this case, Java. &gt; &gt; If you were going to design a language from the ground up, you might consider SOLID principles and design the language to conform to it with minimal created boilerplate or verbosity. That would be reasonable. But Guava is a Java library, not a Scala, Kotlin, Noop, Clojure, Groovy, or other library. We aren't re-inventing Java, so we work WITH Java. 
Also note that there's a subtle difference between "immutable" and "*you* can't mutate it, but maybe someone else can" (aka read-only or "const"). If there was an interface that looked just like `List` but without of the mutation methods, would you have `List` extend it? If no, then it isn't compatible with `List` at all, and perhaps isn't very useful. If yes, then it isn't an immutable interface because every `List`, even mutable ones, would implement it. Probably the only sensible approach would be to have a `ConstList` interface with those methods, and then a separate `Immutable` marker interface (a bad smell, but maybe this is a place where they are warranted), and then `Immutablelist` extends or implements both `ConstList` and `Immutablelist`. BTW: you can *almost* simulate read-only collections with an "? extends" wildcard. I say almost, because you can still remove elements as they choose not to constrain remove to the element type. Edit: s/market/marker
Scala (and C#) solve this problem through generic declaration-site variance. Consider [List](http://www.scala-lang.org/api/2.11.1/index.html#scala.collection.immutable.List), which is declared as List[+A]. Informally speaking, this essentially means that the actual type of any List[A] might as well be List[B], with B being a subtype of A. So, you can never add any A to the List, because you don't know if it's a List[A] or a List[B] Java only has call-site variance. You can create an immutable *reference* to List&lt;A&gt; by assigning it to a List&lt;? extends A&gt; type. But this doesn't make the original List immutable.
Good idea, but seems a little more heavy weight than standard pojos. I will have to give it a try. A rapidly expanding domain can get messy when using pojos. There seems to be a big push in the functional space to return to more primative data types. 
&gt; What exactly does Tomcat do? Tomcat is a Java web application server. It is actually *the most popular* Java web application server. It handles requests coming from the network, passes them on to the servlets and JSPs that are deployed in it, who typically go on to generate some form of HTML, which is then returned to the client. The auto-redeployment feature that you have heard of is just a secondary feature, meant to accelerate web application development: when the developer makes a change to a file in the web application, it is automatically restarted by Tomcat, instead of having to issue administrative commands to Tomcat, or having to restart it. Auto-redeployment is typically *not used* in production. Note that Tomcat is not a full-fledged Java Enterprise Edition (JEE) server. It has support for Servlets, JSP and a few other features, buck lacks most other features mandated by the JEE specification (EJB, JMS, JPA, and many others). JEE servers include JBoss, IBM's WebSphere, Oracle's WebLogic, and also TomEE, a Tomcat server augmented with the necessary libraries.
Holy shit **no**! I have their book on Design Patterns and it's just like a grade school book with exercises. Complete with illustrations, dialogs between people explaining things and an overall childish appear. http://imgur.com/Lbfispi I do NOT expect crossword puzzles in my programming books. If OP has even heard of Accelerated C++, then this book is not for him, it would only make him dumber. EDIT: Random fact: in 60% of /u/czipperz his posts he recommends heads first (3/5).
&gt; There's no real js/css revolution. There's a hype for sure and hipster bloggers write about it. But in practice? Not so much really... It's not only hype, the JavaScript ecosystem is really improving. I used to avoid JavaScript and always prefer to code in GWT. However, now I would always prefer AngularJS + AngularUI + RequireJS + its ecosystem (yeoman, grunt, bower, karma) for developing the front end part of the system. 
Not a book per se, but Official Java Tutorial is good and concise enough (just read the chapter you need): http://docs.oracle.com/javase/tutorial/
http://tomee.apache.org/apache-tomee.html http://en.wikipedia.org/wiki/Application_server https://plumbr.eu/blog/most-popular-application-servers-in-2014
https://www.fpcomplete.com/school/to-infinity-and-beyond/pick-of-the-week/basic-lensing http://stackoverflow.com/questions/8307370/functional-lenses
http://www.xwiki.org/xwiki/bin/view/Main/WebHome
http://p6spy.github.io/p6spy/ https://code.google.com/p/log4jdbc/ https://code.google.com/p/jdbcspy/
First try to learn fundamentals from youtube video tutorials. Set up work environment(eclipse+jdk etc) on your desktop and write and execute some programs. As you mentioned you already know lots of languages, so it will be very easy to follow video tutorials for you online. Once you get fundamentals and if you can relate it with other languages you already know then start learning advance topics of Java 8 using official documents
How does this compare to jORM? https://github.com/jajja/jorm
`@Startup` would be nice indeed. It looks like the OmniFaces 1.8 snapshot has implemented something quite like it already: http://snapshot.omnifaces.org/cdi/Eager
Enterprise applications are easy to create, manage and easy to optimized now a days with the help of third party open source libraries like spring, hibernate, grails and lots more. If you want a simple website or easy solution then other languages can be chosen like php,python e.t.c. , but for big application like ERP or something similar Java is a real BEAST :) 
MySQL and not PostgreSQL as the most used SQL? Wouldn't have guessed that. Guess I need to get out more...
Mysql has been much more popular than postgresql for years.. Pretty much every Foss project I've ever used supports mysql, postgresql is more hit and miss. (No comment on whether this is deserved or a good thing.. Just observation) Edit: http://db-engines.com/en/ranking_trend Dunno how accurate that is, but they seem to believe its 5x more popular.
You could do what /u/crapet did. [Make a service that people used but it was shut down](https://github.com/Athou/commafeed). (I'm looking at you Google ¬¬.)
Very misleading title. Most popular app servers... used by Plumbr users. And this only based on 600 environments, and even less unique customers.
Thanks. It would be good if there were some kind of list implementation which was automatically thread-safe for all operations and iteration, without having to remember to synch() each time.
They seem to think Oracle is popular too. 
Yeah, I have no idea what the methodology is or if they can be trusted at all. Just figured it served as evidence that its not really surprising to find mysql rated highly.
It's popular in terms of how prevalent it is. Kinda like herpes. Lots of people have it, but it's not exactly popular in a "everyone loves it" kind of way.
Of course, that only applies if you're using the OmniFaces snapshot. Do we have any idea if the target for EE 8 is actually 1.2 or 2.0?
It's all news to me, wondering what I've been missing out on all these years though. To be honest though, my number one reason for using pg is that I'm more experienced with it.
i'm no expert, but i always got the impression that unless you're a fair bit off the path of general use, there isn't much difference between them. seems the cool new thing is to replace all sql with nosql servers anyway.
I'm not ready to let go yet.
could you give me an example of how this would work? like storing subreddit info in a database? I'm confused. Thanks.
Use the API to periodically check for something - like how often the word "Java" is mentioned and store the stats in the DB - do some transforms and serve it via your web service. 
[There is.](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html) Thread safety always comes at an expense (global lock in the case of a synchronized List, and copy on every write in case of the CopyOnWriteArrayList).
Sticking with the wrong tool because you don't want to learn others that are more productive is foolish. Hopping fads is also foolish. 
freecode.com has a lot of open source projects. You can search by tag to find projects that might interest you.
This article is basically a reflection of incumbency Tomcat is just OK, Maven is a fundamentally limited build system overseen by people that just want to sell... oh yeah, artifactories like Nexus. MongoDB has legitimate scaling problems, Eclipse is well behind IntelliJ, SpringMVC still is far behind Rails and Grails in abilities. MySQL... not a good database. The windows 3.1 of the database world. - I'd use Gradle rather than Maven, even though it is in flux still. - I'd use Jetty over Tomcat - I'd use Cassandra or HBase rather than MongoDB - I'd use Grails rather than SpringMVC - I'd use Postgres over MySQL 
"Most used" and "best" aren't synonymous. Lots of projects use MySQL, but only because it's widespread. It's nowhere near as powerful as Postgres, and also has [lots of odd quirks](http://grimoire.ca/mysql/choose-something-else).
&gt; "Most used" and "best" aren't synonymous. I think pretty much everyone knows that. The topic of this thread was popularity.
ELI5? or maybe explain like I'm lazy?
Thanks for the explanation! My ignorance of Scala is almost perfect, but I think there is no way to be sure a list is immutable. I can create in Scala a AwfulList[T] extends List[T] with a method clear() that removes all elements, right? That list will be mutable, and an implementation of List[T].... please correct me if (when) I'm wrong.... 
I'm currently using maven only and am, let's say, fairly satisfied. What's a good reason to use gradle instead?
How do you avoid downloading half the internet?
It happens a lot. There's a simple test device that you can use. Take a look at many similar web sites and group them by what technology they use. You'll see that a large percentage of web sites in each group are of the same year. This has only partially to do with what technology was the best at that time. What ever was a hype at that time really plays a big role too. 
If maven is doing the job for you then I would say there's no reason. For me, maven always worked well for small-medium projects where tweaking the build system is not needed. Here are scenarios where I'd recommend looking at gradle: * You want to build an android app. This the approach that google is supporting/recommending so it's no a brainer. Also, definitely gradle if you're using android studio. * Your project is complex enough to require custom build rules/functionality. Gradle is much more sane to extend because you can use a real programming language to do it. * You are using more than 1 language in the same project or would not like to learn language specific build tools. For example, gradle can build scala/clojure projects just fine.
I haven't completely done the experiment, but to my understanding: - Subtypes of List[T] won't be able to access the internal representation of the actual list, so they cannot remove any elements - The covariant generic type +A in List[+A] would prevent writing access also to subtypes Obviously, you can never be 100% safe. The List representation is really just a bunch of bytes on the heap, so there is always a way to tweak it. But it will be wanton tweaking, not accidental tweaking.
Interesting. From what I can tell these are "naive" lenses. I wonder if it's possible to implement vanLarhoven lenses though.
Modern applications don't really need "powerful" databases - just basic relational storage with data integrity, transactions ... and that's about it. 
Today I implemented first decent test scenario with Gatling. I will never look back to jmeter.
1. Say you have a Set&lt;Person&gt;, how do you functionally update a person's address in this set? No mutation allowed. Lenses solve this very elegantly. 2. Suppose you'd like to pass a reference to a field. You can't do this in java unless you pass the whole object. Now say you want an integer `id` field irrespective of the type of the object you're passing. Sure you can create an interface, but do you want to create an interface for every field like that? Now say the fields are named slightly differently. Lenses solve this problem as well. Lenses are also extremely simple as well. A lens is anything that is (and a few "common sense laws"): interface Lens&lt;Object, Field&gt; { Field get(Object target); Object update(Object target, Field newValue); } (paraphrasing it from the author's api) If you're a java programmer familiar with C# I'd describe lenses as "first class, functional, composable properties".
I don't really agree with this, though I guess it depends on where you work. In the jobs that I've held, you need to make an informed decision about the technology you're using. This involves having a good argument for or against an approach with regards to budget, team-knowledge/improvement, maintainability, future work, etc. If someone has these points covered, then I've no issue with them saying "This is the right tool for the job". It's also good to switch up the technology stack every now and again (keeps developers interested, improves skills, etc.), but the above reasons still apply.
^ This. Seriously. https://www.atlassian.com/software
Our Nexus repository is over 7GB and 6GB of that is our own snapshots. We're using JSF 2.2 on Wildfly to give an idea of the stuff we'd be storing. My local .m2 directory is ~800 MB. Not that substantial at all, IMO.
Not heard of Gatling before now - assume you're on about this one: http://gatling-tool.org/ If so are there any decent getting started guides you're able to share, or any compelling reason why someone who's used to JMeter should switch?
The uninstall feature. Seriously, if you are still writing new code in Java you need to reassess wtf it is you're doing.
That's a deeply depressing list.
First off, props for using reasonable tools. eclipse, git, jdbi, and dropwizard are all a great place to start. sometimes I see people start with spring and vim. and yeah go figure, they all hate java from the get go. Into the code. I see is that you need to exercise your .gitignore file a bit more. you should NOT be checking in: .classpath .project .settings/ target Those are essentially output files. Depending on which IDE is in use, they are either useless (different IDE ), or annoying ( you use different settings than I do ). Next, if you're going to have a src/test directory, then put some tests in there! Otherwise you're just hauling around more useless stuff. FWIW, I do sometimes write code without tests (sshhhhh!). What is "UpdateWords.java" it seems like code you can only write data into. so I'd think useless. Also not referenced anywhere. Delete this. As a code reader, dead code just confuses me and wastes my time. You should be writing code for other people to read. This is especially true for code that will be maintained or code that will be worked on by other people. "UpdateWordsRunnable.java" another piece of seemingly unreferenced code. And while a thread is created and started, it doesn't appear to DO anything, so I assume it's also unfinished. delete. If you can't tell, my favorite "refactoring" is the delete. deleted code has no bugs and takes zero time to understand. FTW! "WordResource.java" This is a WEB API. but you have both web interface and general logic in there so this does NOT separate your concerns. WordResource should probably collect all appropriate parameters and your data, and pass these onto a class which actually does the work. In this way, if you wanted to do that SAME work via a different interface it would be possible. For example you might want this same work to be done via a JNI interface, or from a Swing UI. The method: public Response uploadFile(.... is way too long. Consider breaking this up into small pieces (see above about separation of concerns ) * pull in data * chunk up file to lists * dedup list * sort list * output list. Smaller parts mean easier to understand and easier to test.... yes, this is code that would benefit from some unit tests! and in this case be pretty easy to write. use junit4 or testng. ACK! I was hoping to NEVER see the use of an iterator again ( this is like java 1.2 or 1.3 ? ultra clumsy syntax ) for (ListIterator&lt;String&gt; itr = tempArray.listIterator(); itr.hasNext(); ) { There should be NO reason for this code to ever write to the local file system. You are doing this with "combined.txt" as well as the output file. should probably use floating point math here: int averageLines = totalLines / totalFiles; since it could easily have a have of something like 2.3 For the section on tracking, where you are concerned about threadsafety. For up, good on you for even thinking about thread safety. For server side stuff, you want to think of the database as being your ONE store of state. This is because your app will often be running on multiple JVMs on multiple machines. So you either need to lock the DB and prevent other code from accessing it while this code does. OR you need to contain all your atomic operations within the DB. I would go with the later. So instead of only reading and writing consider writing some JDBI operations which have the lines and files values increment within the DB. update stat_table set value = value +increment where rowId = 42; And even better, update BOTH the line count and word count in a transaction. This prevent someone from reading the stats in between the line and word update and getting the wrong value. don't calculate and store the average. instead only read the raw value and calculate each time. the computer will be far far faster at the single division that at reading all the way from a database. dead code: private void saveFile(InputStream uploadedInputStream, String serverLocation) { It appears you have been using eclipse. Use the force luke. eclipse will TELL you about dead code by marking it yellow. review ALL your code for dead code. Ok, that's my two bits for now. I'm sure I could find some other stuff, but this is enough to chew on. if you want to try to fix up some of this stuff, and have me look again I'm happy to. 
Bro this is r/java, every single 'tool' here is the wrong tool. Because java is. lol.
&gt; If someone has these points covered The problem is, they rarely have. I've **literally** seen a co-worker leave the presentation of AngularJS by Google at Devoxx with hypnotized eyes totally taken in by the hype of the moment, declaring that AngularJS is the one right tool and that we should rewrite all our software right away. Not long after rewriting to AngularJS indeed started. Minor detail, the Devoxx 2 years before that the exact same thing happened at the GWT presentation, and yes, his team very quickly after started to rewrite major portions of the software in GWT. And before Devoxx it was SEAM. I don't work there anymore, but the code is mix of 10 or more technologies. Now this particular guy is very easily hypnotized by grand presentations with everyone sheering and people heralding some technology as the greatest thing ever, but for others it's the fact that "everyone" is talking about something at hackersnews. Another co-worker of my runs a kind of company within the company and for his product he was totally charmed by RoR, since it was so easy and "everyone was using it", but not long after it was suddenly Node.js since that was so easy and "everyone was using it". And the list goes on... for too many people "the right tool" really is whatever the latest fad is on hackernews. If someday hackernews really thinks its cool to drive a nail by pounding it with a saw, then for those people a saw **WILL** be the right tool for the job of driving a nail, while in reality it's exactly the opposite. 
Ah, that's why I prefixed my comment with: &gt; I don't really agree with this, though I guess it depends on where you work. In most of the places I've worked, you'd need a good reason to switch over, and back that up with a prototype, stats, etc. It's definitely a fine line to tread though, since a workplace can become *too* resistant to change. I don't disagree with you that some people get way too caught up in the latest fads, but I haven't experienced it negatively affecting any of the places that I've worked.
No, I don't believe so. You'll have to have two separate entries as far as I know. This may be helpful if you haven't found it yet: http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html There is also "policytool" which comes with the JDK which can help you in defining custom policies. If you're on Linux and have IcedTea-Web 1.5 installed, it also offers "policyeditor", which doesn't offer all of the options but is much more user friendly.
The nice thing about gradle is that you can use it like you use maven if you like, it integrates pretty well with maven. The format is more concise. A pro/potential con is that it is a groovy script. As a result, you have a full programming language which can be executed in your build process (so you can move files, rename things, or do crazy transformations if you like).
Not a really useful article, particularly as it contains errors and false information.
Just looking at the code in general: * Check out a .gitignore file I usually stick into a new project as a basis: https://github.com/timmolter/XChange/blob/develop/.gitignore * Host your project on Heroku or OpenShift for free. * Get rid of placeholders * Use UCDetector in Eclipse to weed out useless code 
in the javascript-world there is http://todomvc.com/ to showcase the same todo app with different frameworks. i'd compare by amount of boilerplate code, documentation, community (questions on stackoverflow) and maybe speed. The following video might be of interest too: [Comparing JVM Web Frameworks](https://www.youtube.com/watch?v=ygW8fJVlDxQ) 
So, what is a hashmap, is it sort of like an array?
Maven developers are experimenting adding [polyglot support](http://takari.io/2014/02/03/maven-speed.html) to the platform. That should make the Maven much more bearable. 
HP LoadRunner now has a new "Community Edition". It supports far more protocols (e.g. Java over HTTP, .NET, Databases, Firefox automation, etc), includes cloud support, a decent monitoring and analysis engine. Really there is no reason to use JMeter anymore. Even for tests where the limitation of the community edition (i.e. up to 100 concurrent sessions) are too restrictive, you are better off doing the complex stuff with LoadRunner and augmenting the rest with JMeter.
Yeah... popular doesn't mean good or best practice in 2014. Nearly every one of those (except maven and git) is wrong for a new greenfield app. Jetty, TeamCity, JDBI/jooq, testng, artifactory, no nosql, PMD/FindBugs/CPD hooked into Maven report lifecycle, IntelliJ IDEA, PostgreSQL, Java 8. 
There isn't one. It's possible to use gradle well, but every project I've seen, it ends up being this horrible mish-mash of maven paradigms and ant paradigms, with a healthy bit of code thrown in. I know some people like this because it makes something that would require more work in maven work with 1 line, but I think that when it comes to a build tool, consistency is more important than "size." Maven makes it really difficult to do the wrong thing, so if you find yourself fighting maven, maybe you're the one doing things poorly. That said, I use both. I still prefer maven for projects with a lot of people on the team, doubly so if they're geographically distributed. There's a certain power in saying that when you sit down with a new project, [mvn test] should build the app and run the tests. With gradle, it might be "gradle test," but it might also be "gradle test -Dtype=unit" or "gradle test-UT" or whatever crap somebody decided to do. 
it's a one-time thing. I don't see it as a bad thing. If you use Ivy or something you have to do the same thing. 
1. I can give you this, given the first-line support. 2. Through about the last 3 years that I've seen gradle projects while consulting, this is the most commonly used excuse. And nearly universally, it was one or two people who didn't want to take the time to learn how to do things "The Maven Way," and really just want Ant. I'm really curious what these "big, complex" projects are. I've been on projects that power massive systems with millions of users. I feel like I've seen some complex projects, but nothing that would require me to have a fully programmable "build" tool. 3. Maven can build scala/clojure as well, in the same project. Heck, most of my small-medium projects use Java for the main code, and Groovy for the test code. This isn't a reason. I find that Gradle is a tool that's adored by the super-advanced people who refuse to try to make a framework work, and those who never wanted a build tool in the first place. 
This is a good idea, but it suffers from the problem that a lot of Python programmers have. Because the data structure is unbounded (it's backed by an immutable map), it's incredibly difficult for the compiler/optimizer to really optimize it that much. It's basically a nice interface for value objects, with the same verbosity as java beans, with the benefit of some type safety. It's really more the fault of the java language than anything else. You really can't create what we want, which in scala are called value classes. They end up being compiled to a regular class for JVM execution, but their definition is scoped to just the place it's declared. 
Thanks for posting that list. What's wrong with JUnit, Tomcat, and ORMs (that is, why do you prefer Testng, Jetty, and JDBI/jooq)?
 I am curious what you meant by the comment that Spring MVC is 'far behind' Grails.
Just trying to educate some javatards.
I know :)
Thank you, that was perfect 
I think that both approaches are not mutually incompatible (and the primefaces team proved that quite eloquently in [their blog](http://blog.primefaces.org/?p=3035)). I think there is a huge gap between doing a JSF frontend and doing drag-and-drop from your datacontrols panel to your JDeveloper wysiwyg editor and choosing "make here a form for me", you have to choose between your auto generated form and something shiny with angularjs and bootstrap (and probably nodejs). That being said, ADF has very very nice features, and you can write forms very fast using Business Components without a line of code, just declarative bindings, but ADF development is not representative of general JSF development, it has its very own struggles. 
Constructors can't be marked as final or static because they already are final and static. Methods column should be further divided to include static methods as an educational aid. There are different rules in static methods but where you describe 'this' and 'super' it gets confusing because of this. I don't really see anyone confused over methods vs. constructors though, they are really semantically unique enough in java. Some people do have a problem with them in something like a ruby or python since they have special fixed names. I sorta wish ruby and py followed java here, and I don't usually think in that general direction. 
Looks like this only applies to the MongoDB and JPA modules. "For SQL there's obviously more to do".
IntelliJ is so indie
Awesome, thank you. Time to get some sleep, but I did get a lot done tonight (pushed). The biggest thing was moving the logic out of WordResource... and unbelievably, it worked the first time I tested it. (I did have to tweak character encoding, but besides that, it worked the first time) To do list: 1. Fix that iterator situation 2. Finish WFP (error handling for non-txt files, lines over 255 chars) 3. Unit Testing for WFP 4. Floating point on averagelines (will need to modify db structure too, and all the mappings) 5. Contain atomic operations in DB - will need to research this 6. Deploy to Heroku or Openshift I really can't thank you enough for the help! Edit: I realize that List&lt;FormDataBodyPart&gt; probably isn't the best to use in my WordFileProcessor class, that isn't very usable for other types of input. I should make that generic and do the conversion in WordResource I think.
Well, there are already superior languages for the jvm like scala and closure. Other great languages are haskell, erlang, ocaml, common lisp.
True, Timo has just updated this. This wasn't clear from his first E-Mail
Thanks! Unfortunately he appears to have zero optics, but I'm gonna play around with some of his quantum stuff
[Rebel Labs did a fairly extensive comparison about a year ago. ](http://zeroturnaround.com/rebellabs/the-curious-coders-java-web-frameworks-comparison-spring-mvc-grails-vaadin-gwt-wicket-play-struts-and-jsf/)
jooq isn't free though. Artifactory is certainly not a requirement, there are similar technologies that you can't really say "is best"
why are you even in /r/java if you don't like it
Try using Maven on a very big scale banking application with LOTS of repos and endless amounts of dependencies. I guarantee you will sing a different tune quickly.
An array is just a simple list. A hashmap is like a phone book, where a name is associated with a phone number (except you can freely choose the key and value type). You could also think about it like this: An array is a table that has one column. A hashmap is a table that has two columns, and it is optimized / intended for looking up rows based on entries of the first column. If you think "Oh, that's simple.", you have understood it correctly. Another big difference between array and hashmap is that a hashmap has dynamic size. Have you heard of "ArrayList"? Because *that* would be the proper pendant to the hashmap as described above. You should definitely know ArrayList (which are very simple, too), because a Java programmer needs them like 10 times a day.
I've written a few custom Maven modules, which is not trivial. Multiple ant extensions. In gradle it's a couple lines of Groovy in your build script, not hidden away in some jar. But I'd take Maven over ant+ivy. Maven POMs get annoying but the Maven opinion of development is pretty sharp thinking.
It's actually good to leave all the 'non-relevant' stuff in the `.gitignore` in anticipation of other developers contributing to your project. If they use IntelliJ and/or a Mac or other tools that generate their own stuff, your `.gitignore` will then not need to be modified by them. You'll be saving yourself future work by not having to remove crap accidentally committed by other people. 
Test case parametrization is awkward in JUnit. See [JUnit 4 Vs TestNG – Comparison](http://www.mkyong.com/unittest/junit-4-vs-testng-comparison/)
People should think a bit more about whether there is something better available (MySQL over PostgreSQL? Eclipse over IntelliJ or NetBeans? JUnit over TestNG?). I guess if there were a category for mocking tools, Mockito would have won, although [JMockit](https://code.google.com/p/jmockit/) is much more powerful. But maybe this is only an economic necessity, because developers oft don't have the time to look for better tools and learning.
Their review is my main source for the written part of my assignment :) , I was hoping to get a few more articles like that but it seems there just aren't many reviews.
That was my first thought, but I don't think I could manage to do it for all 3 in 10 days.
&gt; 8 Great Java 8 Features Other Than Lambdas Fixed title.
You may want to have a look at [tinylog](http://tinylog.org). Then again, if you are out for speed, [log4j2](http://logging.apache.org/log4j/2.x/), though in RC status, is momentarily the leader of the pack (using async loggers). It requires some configuration, though.
Yes. Every last one. Longadders, joda time, stamped locks, optional. Bam, half of them without trying.
[Part 2](http://zeroturnaround.com/rebellabs/the-2014-decision-makers-guide-to-java-web-frameworks/)
Tinylog seems like it would suite my needs the best. I realy like it.
So a thread can deadlock itself using stamped locks? Doesn't that make them useless?
If the developers get the ordering correct then it won't deadlock, and be 90% faster. That's the deal. I think it also allows lock upgrades too. So a process with a read lock can upgrade to a write lock without read unlock first. Which is very nice, and something the old readwrite lock didn't allow (if I remember correctly).
Aha, thanks for explaining.
Glad to hear that. I'd use it myself, but I need something faster for my work and in my benchmarks log4j2 just burns every other solution.
Effective Java, Second Edition by Joshua Bloch is pretty much the bible
This is the third try. I've been working on this one for about five days.
my applications don't really generate huge amounts of data, so the log will be just used for error/warning logging (maybe 1 log entry per hour or so) and dumping data into files when we need them for debugging/testing purposes. We're not some highly specialized people who use many frameworks (hell, we don't use maven) so tinylog will be more than enough
But you didn't give any reasons or any alternatives
long story short: use Logback if it's a new project. It's quite possibly the easiest logger I've set up.
i tried setting up logback, and it seems quite complicated from my perspective, i need to include logback and SLF4J and who knows what, and it took me 4 hours to figure out that i need slf4j. --- I didn't use java for like 5 years so i'm out of touch about the newest things... and it's realy hard to get up to speed with all these new frameworks (i'm feeling old ;_; )
I didn't now cause I already did in several other posts, but here you go: Reasons Java Sucks: 1) Ugly as shit. 2) Leagues behind other languages in terms of features (Scala, Haskell, Erlang, etc). 3) Terrible standard library with inconsistent typing and general incompatibility of classes (requiring you to make a ton of casts in order to be able to use many of the classes). 4) Low quality tools (maven, ant, ivy, gradle - all that shit sucks). 5) No reason at all to use it over other languages. Better Languages: Erlang, Haskell, Scala, Ocaml, Clojure, Common Lisp 
Are you using Maven, Ant/Ivy or Gradle? If so, just include logback-classic which will transitively download all other stuff that you need. If you're just dropping jars into a lib/ folder, you probably need a refresher on how Java applications are built these days instead of the "olden times" (back when I got started). If you're unsure of how to start building an application and don't mind some XML, Maven is a good place to start as it will bootstrap your directories and has plugins to do most anything you'll need to do. (yea, I realize your question was about logging) Once that's done, this is how you include Logback: go here: http://mvnrepository.com/artifact/ch.qos.logback/logback-classic/1.1.2 (aka, google "maven logback") and then put this into your &lt;dependencies /&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; Like I said, super simple. That's it, you can now start putting loggers (Slf4J loggers) into your application and console logging is already set up with sane defaults. Now, you want a log rotation? simple, drop a logback.xml file into your src/main/java/resources folder with the appropriate config (probably copied and pasted from an example on the logback page or your favorite stackoverflow post). Bam, done. Again, if you're just dropping jars into a lib folder, I feel you're going to have bigger problems (aka, jar hell) than the logging framework choice.
Thank you for the constructive criticism. The're are pages out there at describe Methods v Constructors in more detail. Too much detail. You definitely are correct. In agreement I have removed the the confusing rows. I just started a project with Coca-Cola, they are using Java and Ruby. The Java team cannot understand the Ruby's code and Ruby team says the highlight of Ruby is not having to place the getters and setters. I can't find the time to get past HelloWorld.py maybe someday, better than doing everything in C.
Exactly this is my problem. I never used maven, i touched ant just with what eclipse generated, and i have never heard about gradle. I was used to dropping jars into a folder and include them with eclipse &gt; export runnable jar. I have to get back on track with all the new stuff. I have to try maven over the weekend, sounds like it would help quite a lot. And i think i'll frequent this sub more often
Gradle is considered the "new hotness", but Maven is a little more mature. Ant is just fine, but that requires you to set up Ivy (which is way more complicated than just doing Maven). Good luck!
Thanks so much for this info!
For your key word "modern". Look into Spring MVC with a natural templating engine like Thymeleaf, or a REST API back end in Java with the front end being a JS framework single page application. The official EE stack keeps trying to abstract away the front end and it continues to be a nasty kludgy mess. 
Am I missing something? Is there a question or a request for feedback on the Monopoly applet no one will use? I don't understand!
Thank god Struts isn't on there.
It's that bad? I saw it's in "End of life" stage of development, and in [this presentation](http://www.slideshare.net/mraible/comparing-jvm-web-frameworks-february-2014) first requirement for a good framework is that it's not Struts :D .
This isn't my code, just sharing a video of a really crappy applet...
I've built "JSF" applications using primefaces and I've built "JSF" applications using Bootstrap. There's no requirement for "JSF" to look like a crappy corporate website. I would not reccommend going with JSP+raw servlet under any circumstances. If you want to be all new and HTML5 use JAX-RS with EJB/JPA to easily create a backend service and toss some hip javascript framework on the front-end. You can easily do Websocket and SSE with Java backends. I like to point out [Commafeed](https://www.commafeed.com/) [(Github project)](https://github.com/Athou/commafeed) developed by /u/crapet as a fairly modern Java webapp. I host my own instance on Openshift for free.
I use both ruby and java a bit and while you don't have to write getters and setters in ruby, attr_accessor and friends are the equivalent of project Lombok. It may help your team to be aware of it. 
You can't go wrong with Java EE and specifically JSF. JSF is the most popular web framework in Java and has been around for some 10 years. Do combine it with a widget set like PrimeFaces. If you learned some more about it you probably want to use OmniFaces as well with it. See https://jsf.zeef.com for lots of info about JSF.
Great. I was seriously thinking about starting with Spring, because I see it mentioned EVERYWHERE, so I knew it was used pretty frequently in the industry. 
Thanks for the suggestion! I'll look into it.
The company I work for uses alot of GWT. Our application development teams either use C# or Java for web apps. All the Java teams use GWT.
I would suggest: 1) Create OpenShift account. 2) Download the Spring STS 3.51 Suite. 3) Install JBoss Tools (Kepler) 4) Install Putty 5) Start Googling from there! Source: I'm using OpenShift with JBoss AS7 to develop personal projects without having to run a server from my own machine. Edit: grammar 
[Spring motherfucking Boot](http://projects.spring.io/spring-boot/) man... I just scaffolded up a web app in a day of casual coding. It helps that I'm a Spring guy so I wasn't put off by any of the Spring Context/Bean stuff that I had to add after the actual "Boot" part to make my app worth a shit. Another similar framework is [Dropwizard](https://dropwizard.github.io/dropwizard/). I've used this as well, and it's solid without all the Spring craziness (probably more "straight forward" if you're not familiar with Spring terminology). JEE/JSF could work, but I'm not sure of any "fast" way to get ramped up there. Maybe try: [Forge](http://forge.jboss.org/) which seems to be the JEE equivalient of [Spring Roo](http://projects.spring.io/spring-roo/)
I'd rather go with either instead of JSF since I don't like the component model. To limiting on what you can do the front end IMHO. If there is ever a "Java MVC" Java EE spec I'd be happy to take a closer look though.
Another recommendation for JSF with PrimeFaces. You should learn Hibernate as well. Spring MVC is also popular. I think Spring MVC still has the biggest market share but it has been around a long time. It is more difficult to work with and less productive than JSF and CDI now (My opinion of course). JSF has grown in popularity a lot in the last few years and I expect it to continue to do so. It is probably a good idea to be familiar with both. I would learn the Java EE stuff (CDI and JSF) then go on to learn a bit about Spring as well. Netbeans has some really good and simple tutorials on all the popular stuff. You can install Netbeans along with a couple application servers running just an .exe file. So you do not have to configure anything. Even if you plan on using a different IDE it is worth it for the tutorials. https://netbeans.org/kb/trails/java-ee.html
&gt; So JSF is very crappy corporaty kinda stuff? No, I think he means the exact opposite ;) Like with any web framework, you initially get the basic tooling. If you "just" build a site, place buttons, place inputs etc, you get a crappy corporate website, since those sites never pay any attention to usability and style etc. With JSF you can use whatever cool and fancy CSS style you have in mind ;) 
I don't know why you are being downvoted. GWT is fantastic. Also check out the SmartGWT or Vaadin libraries.
I wouldn't start with Spring. Start with Java SE, then Java EE. If you have a somewhat solid understanding of Java EE for web apps (mainly Servlets, JSF, CDI, JPA, BeanValidation, perhaps some JAX-RS for API stuff) only then take a look at Spring if you are not satisfied with how some things in Java EE work. Spring sort of builds on top of Java EE and always tries to enforce its own API on top of everything. Not everybody likes this, the Hibernate team back then got a bit annoyed with Spring when they out of some kind of habit started wrapping the new JPA API again, in a way saying that every API of every product is bad and needs to be replaced by a Spring wrapper. I'm not sure that attitude made them many friends, especially since the Spring wrapper API often isn't better at all. It's just different. So before you use The Wrapper Framework, it might not be a bad idea to look at the original and learn what it actually is that Spring is wrapping. Then make your own decision if that indeed needs wrapping.
I don't understand why this is voted down. Play has a Java API that is heavily used, and while you can do advanced bleeding edge things with it, the controller and routing framework is very much like Rails. http://www.playframework.com/documentation/2.3.x/JavaHome http://typesafe.com/activator/template/hello-play-java 
Jhipster has a great combination of tech worth learning from: http://jhipster.github.io/tech_stack.html
JSF is well and good, and keeps you choosing in Java more, but if you want to develop language neutral skills I'd suggest using an MVC style framework and templated views like Spring MVC, Play, or something else. Couple the MVC with a decent template language (JSP is alright but Freemarker or Thymeleaf are less Java-y) and you will find that the front end coding becomes more similar to other languages. You could use Angular.JS or another JS framework and your Java code becomes more of an API layer. Both approaches (JSF vs. templated views) are valid and good, but overall I find that templated views have the benefit of being less coupled to Java and more transferable. EDIT: Thanks for the correction folks; I haven't used JSF before, but I understand it is a good framework for Java development. I didn't realize it was part of an MVC stack (or the entire thing).
I simply don't use Hibernate directly. Use something like [Spring Data JPA] (http://projects.spring.io/spring-data-jpa/) which will shield you from a lot of the complexities. 
I've been weighing different ORM options, and so far MyBatis and JOOQ look like the best options for my personal needs. I'll make sure to check out Spring Data as well. The reason I'd like to learn Hibernate is because I'm about to start an internship at a company that I know uses Hibernate, so I can't "simply not use it" if I have to work with it at my job.
I was recently in the same boat as you. I ended up going with Vaadin because I didn't anything about web apps. From what I understand, vaadin is one step simpler than GWT (vaadin uses that). Once I understood the basics, figured our tomcat (easy), I had simple apps up fast. Looks slick and works great. 
&gt; Because it's an open source project, and nobody wants to do documentation. Even on a project as large and well used as Hibernate. I've looked at and tried out a lot of open source projects and the Hibernate 4 docs are the worst by a mile. I'd argue that even no documentation would be better than consistently wrong documentation. &gt; I don't mean that as a flippant response - just that anyone can fix it, and if nobody does it never gets fixed. That's a fair response, but the problem is there is no end to the Hibernate team's maddness. Not only did they make a bunch of major undocumentated changes from Hibernate 3.x to Hibernate 4.0, but even from Hibernate 4.2 to Hibernate 4.3 they recently changed the ServiceRegistryBuilder to a StandardServiceRegistryBuilder without any warning and broke everyone's code YET AGAIN. Hibernate 4 is turning out to be a battle field with the developers on one side and the users on the other. I read somewhere that the Hibernate team's ultimate goal is to mold the project so they hit all of the 5.0 miletones and all of the 4.x releases are just preparation work, or a means to an end. The 4.x releases are basically just 5.0-beta releases, which is why there's constantly so much compatibility breaking between each 4.x release. I don't know if this theory is true but it certainly explains a lot, and there's not much point to update the documentation when the project is in such flux.
Ugly: still a matter of opinion. I've seen some pretty Java. I've seen some ugly Lisp. And frankly, I find C++ and Objective C to be far uglier. Features: most of the features in the Stack Overflow discussion you listed seem to be geared towards text processing. There are a lot of cases where pattern matching really isn't a huge deal. Yes, it's a common task in academic programming, but in industry, not so much. In fact, a lot of those cases seem to be more things that are designed to solve problems only a handful of people have. Standard: There is no standards as issued by a standards body. There's a *spec*, yes, but it's fundamentally controlled by Oracle (though they like to claim otherwise, Oracle can veto pretty much anybody else because they hold the trademark). The "standard" edition isn't a standard based on an independent standards organization, but rather a marketing term to distinguish that version of the Java platform from the Micro and Enterprise editions. Do you even know Java? Legacy: Legacy is a lot more than just "I have this ancient project creaking along in Java." In many cases, there are licensing fees you're paying for third party software that influence your decision for a programming language. Perhaps you've shelled out for a Java Enterprise Edition server. Perhaps you've only got limited control over the production environment because it's controlled by a completely different part of the company (and I've been there several times, where IT was corporate, but each business unit has its own software development shop). In order to force standards and have *some* clue about what's on their servers and ensure no environment conflicts, they only allow a handful of languages on their servers. Sometimes, you need to be able to run the same bytecode on your local Windows box that you do on your production Linux server (and I've been there many times, particularly when I suspect something went wrong with the server's configuration). So why not something like Scala or Clojure? Well, quite simply, they're more overhead. They still require putting software on servers that the dev team still doesn't control (remember: the server environment is set by the infrastructure team, not the dev team). The truth is that these battles are only worth fighting if you're an academic or student. Honestly, I used to be like you. And frankly, Java isn't my favorite language. But it's what pays the bills, and it's not *bad*. It's certainly not BASIC, and it's not the straitjacket you're making it out to be. You still never answered my question about build tools. What build system (and don't be Java-specific) do you like?
MyBatis and JOOQ are very different beasts from your traditional JPA style ORMs and are meant to solve very different problems. If the company you're interning with uses Hibernate then leaning that will do you more good in the long run. There are a lot of quirks with Hibernate and if you don't know how to use it, you'll do more harm than good. While I encourage you to build a simple Hibernate project and do something simple, any real world knowledge you'll probably pick up at your internship. Until then browse StackOverflow's Hibernate tag to get an idea of common problems and answers. 
&gt; There is no standards as issued by a standards body. There's a spec, yes, but it's fundamentally controlled by Oracle (though they like to claim otherwise, Oracle can veto pretty much anybody else because they hold the trademark). The "standard" edition isn't a standard based on an independent standards organization, but rather a marketing term to distinguish that version of the Java platform from the Micro and Enterprise editions. Do you even know Java? Uh just because it's controlled by oracle doesn't mean its not the standard. There is no need for any 'independent standard organization'. And the oracle jdk *is* the standard even though some people try to pretend otherwise. &gt; There's a spec, yes, but it's fundamentally controlled by Oracle Yes, that's what makes it the standard... doesn't matter who controls it, there is one spec that all implementations adhere to (or try to adhere to at least). &gt; You still never answered my question about build tools. What build system (and don't be Java-specific) do you like? (node + npm + grunt) for javascript, cabal for haskell, nixos + nix + hydra can be used for wrapping other build tools, scons for c++, others for other languages.. 
JSF is an MVC framework. 
Effective Java doesn't introduce the language, it assumes you know the language and teaches you how to code better in Java. Taken from page 2, second edition: &gt; This book is not for beginners: it assumes you are already comfortable with the Java programming language. People always recommend Effective Java in all of these "recommend me a first time Java book" threads, not sure if they really have read it themselves.
Without an independent standard, it's *not a standard*. A reference implementation is not a standard. Period. That word has some very specific engineering terms. Java has a public spec, but because it's wholly controlled by one company and largely defined not by that spec but the reference implementation, it's *not a standard*. From an engineering perspective, a standard is a spec that is defined independent of a vendor and not dependent on a reference implementation. Java doesn't have that. Therefore there is no standard, and thus there cannot be a standard library. &gt; (node + npm + grunt) for javascript, cabal for haskell, nixos + nix + hydra can be used for wrapping other build tools, scons for c++, others for other languages.. Hmm. SCons says it is pretty well language independent. You could probably use it for Java, though there is an NIH problem in the Java community. After all, jar construction is pretty well standard. 
Call Thread.sleep(75) to yield for about 75 milliseconds. A [polling loop is not a good design generally](http://stackoverflow.com/questions/320284/what-is-wrong-with-polling).
I'll post what will probably be an unpopular opinion on this sub but here goes... I'd recommend using java on the backend and JavaScript on the front. I've worked using jsf, gwt, and struts and ive found all to be unweildy. Its just easier to do effects and use libraries like jquery if you are already using all js. After doing a couple of projects with anglar and backbone i feel its much more flexible. I do like to build the backend in java. I make this with a restful service. Easiest way ive found is using spring with jdbc templates to auto wire the objects together and to the db. Build tools i used to prefer maven but have recently discovered gradle and its really impressing me.
&gt; Java has a public spec, but because it's wholly controlled by one company and largely defined not by that spec but the reference implementation, it's not a standard. The java spec is the java standard. Perioid. There is the language spec and there is the standard library, which are not the same thing. Standard libraries exist in almost all languages and almost never come with a technical spec. They are almost always defined by the reference implementations and the accompanying documentation. &gt; From an engineering perspective, a standard is a spec that is defined independent of a vendor and not dependent on a reference implementation. That's just completely false. 'A standard' can refer to a technical document describing a standard way of doing something (regardless of who its written by) and it can also be an established norm - a de facto standard. http://en.wikipedia.org/wiki/Technical_standard &gt; That word has some very specific engineering terms. Ok bro.
Look into spring boot + angularjs, it's super productive and lots of resource to learn online! Even Spring provide guides on how to integrate angularjs with boot: https://spring.io/guides/gs/consuming-rest-angularjs/
I personally haven't found much advantage to Spring Data JPA that I haven't gotten with a couple of classes I reuse in every JPA project. Hell, this interface and abstract class are staples to me and I have seen no need to replace them. Repository.java public interface Repository&lt;T,ID&gt; { void delete(T t); T find(ID id); T merge(T t); void persist(T t); } AbstractRepository.java public abstract class AbstractRepository&lt;T, ID&gt; implements Repository&lt;T, ID&gt; { @PersistenceContext protected EntityManager entityManager; private Class&lt;T&gt; entityClass; protected AbstractRepository(Class&lt;T&gt; entityClass) { this.entityClass = entityClass; } @Override public void delete(T t) { entityManager.remove(t); } @Override public T merge(T t) { return entityManager.merge(t); } @Override public void persist(T t) { entityManager.persist(t); } @Override public T find(ID id) { return entityManager.find(entityClass, id); } }
What if it is for a gui like swing?
Then you should have registered for one of the many, many available listeners for Swing GUI components. Those would provide you an event listener for text change or focus changed, and one of those events would let you compute something based on what just happened.
Spring MVC is not a 'wrapper framework'. There is simply is no equivalent in the Java EE spec. If you want to do modern front end development you shouldn't be abstracting away the http request and response with a component framework like JSF.
For Swing use a SwingTimer to schedule an event for every 75 milliseconds and then update whatever Swing components as needed.
heh, yeah it kind of is. but it's a lot simpler, and has both annotation-based setup and fluent builder syntax. ibatis is hibernate simplified, while jdbi is a simple layer on top of jdbc. They're both approaching the middle, but it's more about where they started. 
&gt; Both approaches (JSF vs. MVC) are valid and good, That's a bit strange to say. JSF is primarily an MVC framework. The way that Spring MVC does MVC is not -the- one and only trademarked way to do MVC. In fact, both JSF and Spring MVC don't implement MVC in the way as it was originally designed by smalltalk and later used in various desktop toolkits. 
&gt; Because it's an open source project, and nobody wants to do documentation. Even on a project as large and well used as Hibernate. They do have paid, full-time programmers working on it, you know...
Thanks so much. Yet another great resource. I'd never even thought if doing this until this post!
Interesting I'd honestly never heard of gwt before.
Sweet. Another new awesome option.
Gotcha thanks for clarifying.
I saw some mention of the play framework on here and everyone was saying that java took a backseat in it as opposed to Scala (I think?)
Looks like you're getting down votes but I appreciate your suggestion anyway. I don't really even know where to start so any idea is worth looking into
Sure, that's about all Spring Data tries to provide as well, except instead of a couple of classes you wrote and re-use we get a couple of classes written by a team within a real release cycle! :) Not that there's anything wrong with your approach.
Any dev worth a damn has had something similar in the past, and yes, Spring Data is similar. But the things you get for free along with Spring Data (entity converters for Spring MVC, paging/sorting, QueryDSL integration) make it worthwhile.
This [project](http://jhipster.github.io) is designed to bootstrap a spring web project quickly.
I work at a full time software development shop and our team doesn't have the time to keep our documentation up to date either. It's nothing unique to Hibernate. In most corporate culture, it seems like good documentation is always a 'nice to have', far behind bug fixes and new enhancements.
&gt; I work at a full time software development shop and our team doesn't have the time to keep our documentation up to date either. Sure, but there is a difference between a product that is a business application and a library / framework. There's also a difference between internal documentation your dev team uses and documentation required so that people would be able to make sense of your library. Business apps also tends to have a UI which can simply the learning curve for the user. 
I have read it. And whilst Accelerated C++ supposedly teaches you to code it also introduces high level data structures and design patterns to use immediately; which is what Effective Java does too. And if the OP already knows of the Accelerated C++ book and has read it, I sincerely doubt he needs an introductory book. Hence the recommendation.
I can tell you as a first time learner that trying to learn Hibernate 4 has been a massive frustration. There are just no learning resources for it. You have to fly by the seat of your pants and wing everything, constantly referring back to the source code and java docs. Getting a project started with Hibernate 3 would probably take a couple hours because there are a lot of good available guides and tutorials out there you can use, but if you want to use Hibernate 4 then getting the project started might take you the entire weekend because you have to figure out almost everything by yourself.
You don't want to do this in Xcode; Apple hasn't really supported Java in years. Netbeans is a good alternative that works well in OS X.
Declare it first, initialize it later: private static XXXXX[] xxx; int k = 10; xxx = new XXXXX[k]; Edit: It's really hard to understand what you want to do. But if k isn't predetermined in the method (I'm guessing xxx should be an attribute), you need a Collection like sh0rug0ru said.
First, I'd seriously reconsider your design if you're using a `private static`. But, what you want is a collection, like `ArrayList`, which will grow to fit the contents, so you don't have to know a predetermined size for the collection ahead of time.
Yeah one thing ive learned about this sub is that any criticism about java leads to down votes. Which is funny cause i love java and write it daily for a living. It really depends on the size of the app. Its pretty tough to build out an enterprise style app by yourself. Heavy ORMs like hibernate take a lot of setup. Great once its setup but a lot of xml to write before hand. Check out some of the following, cant link since im mobile right now. Jdbc templates(search vogella, hes got some nice tutorials) Mysql db (or postgre is coming up) Spring 4, learn to use annotations along with the traditional bean declaration xml One of the best things ive found is safari books. If you hunt around theres a subscription that's $10 a month and lets you check out 5 books a month. Good luck to you.
I freaking hate video tutorials without voice. If I wanted to read a tutorial, I would find a tutorial that wasn't a video so I could move at my own pace and not play catch up.
One if the best things about java is its platform agnostic. Not much sense in building an app thats tied to one os
IDEA and Eclipse are both available on iOS. Use one of them instead.
Do you have links to the JIRAs you filed with specific issues? You had time to vent here, certainly you had time to report these problems. Edit: less redundant words words
what about captions, try them :)
Just to clarify what you said because it is confusing: Intellij, which is a favorite among Java developers is free for download and has a mac (not ios) version. Eclipse, another favorite IDE is also avaliable for Mac. Reason is: they are both built using Java. Java applets runs inside a JVM. There is a JVM distro for most operation systems including mobile (which are kind of different.) Anyways, happy coding. 
Again, how is this any different than reading a tutorial on a website? This solves nothing. People watch tutorial videos to have someone speak the steps. lol did you not even put text at the bottom of the screen by default and you have to enable captions? I honestly didn't even get far enough to notice. **THATS EVEN WORSE!**
Of course you're dealing with the http protocol so you will have an http request and response on the web. The reason I don't like component based frameworks is that the programming model abstract away too much of this with "widgets" of HTML CSS and Javascript. When working with modern front end libraries you *need* fine grained control and it doesn't make sense to have to fight a framework that wasn't designed for this kind of control.
Thanks a ton! I'm just trying to find some simple ways to get better at java that involve the web. Web just happens to be where my interest is right now
Have an upvote. Informative. I have a love/hate relationship with Maven at all times. 
&gt; I don't know a good tutorial for you, but I will say that if you hate the documentation, you could fix the things you mention for those that come after you. The OP is trying to *learn* how to use the software. You are telling him he should fix the documentation that he is trying to learn with. Do you seriously not see a chicken-and-egg problem here? This attitude of "if you don't like it you can fix it" is complete bullshit. Anyone who can't be bothered to document their project, and who then has the unmitigated gall to turn around and put that responsibility on people who are trying to get some work done.......???? Truly the inmates are running the asylum. 
Would a static block help? (Just throwing that out here) private static XXXXX[] xxx = new XXXXX[k]; static { for(int i = 0; xxx.length;i++){ ... } } 
Looks like they are using Apache Ant (see build.xml). http://ant.apache.org
Components are great, but if you don't like them you don't have to use them in JSF. There's still many things in JSF to help you without them. But I guess you also don't use classes in Java and don't use widgets in js?
There's hardly any xml to setup Hibernate. There's a minimal persistence.xml that connects a data source to a named persistence unit (3 or 4 lines) and that's it.
You can use components with JSF or you can do it the hard way and write all your own Javascript, HTML and CSS. The components with PrimeFaces have met all my needs. You could also make your own JSF components. You have complete control and flexibility.
The ENTIRE documentation is one big problem. The entire thing. Not just a single line in a single code example, but almost every line in every code example. Nothing compiles, and if it compiles it does so with 100 deprecation warnings. The @Entity annotation has been deprecated, the @Table annotation isn't deprecated but all of its attributes have changed, so if you want to map a class to a certain database table you can't use the "name" attribute anymore but have to use the "appliesTo" attribute. Not only have there been major backwards-compatibility breaking changes in Hibernate 4, but there have also been hundreds of minor backwards-compatibility breaking changes. None of it is documented. How can you possibly expect me, a person who has only picked up Hibernate just a couple days ago, who is absolutely struggling his ass off to learn it, to re-write the entire official documentation in full? Not only am I probably the least qualified person to do it, but it shouldn't be my damn responsibility in the first place. I go to restaurants because I wanna eat, not because I want to prepare and cook my own food, just like I read a framework's documentation because I wanna learn how to use the framework, not because I want to pick out all of the errors and then rewrite the entire thing.
If you want more awesome new options, look at Web4j, Micro, Micra, Ninja, Juzu, Induction, Simple, HybridJava, Spark, Tapestry, Stripes, WebWorks, Struts 2, Click, Sling, Hamlets, ItsNat, ZK, JHipster, jHopster, VRaptor A few links: For Web4j see here: http://java.dzone.com/news/interview-john-ohanley-web4j Spark: http://www.reddit.com/r/java/comments/25agqo/spark_java_rewritten_to_support_java_8_and_lambdas/ Simple: http://www.simpleframework.org/ Micro: https://github.com/florinpatrascu/micro Micra: https://github.com/noelherrick/micra Juzu: http://juzuweb.org/reference/index.html JHipster: http://jhipster.github.io/tech_stack.html Induction: http://www.inductionframework.org They are all the best, incredibly simple to use and way better than all others. Be sure to check them out!
Theoretically, everything that can be done with the Scala API can be done via Java. Just expect a lot of pain, and be prepared to be threaded as a second class citizen. APIs will ALWAYS be designed for Scala. Hopefully it feels natural for you to emulate it with java constructs, if not, nobody will listen to your (java) screams.
The company that developed GWT (Google) abandoned it some time ago. You may want to think twice about investing in it.
This sounds confused. With JSF you can use either high level prebuild components (PrimeFaces is undoubtedly the best, but there are many others) Or you can build your own components in any way you like Or you can use the very basic build-in components which just represent plain input fields, forms etc Or you can use plain markup not representing any component There is no fighting the framework and all of the above can be mixed and matched at will (most typical JSF apps indeed do that) JSF is completely impartial to any specific method you use and there's nothing in the framework that forces you to use high level prebuild or any other kinds of components. That's completely untrue and I wonder what made you think that?
If you have common behaviors between your services, then by all means you should have a common interface. The only reason your example won't work is because the concrete classes need to implement all methods from the interface. 
I appreciate your vent, I really do. I have been frustrated with bad documentation myself. Historically Hibernate's documentation has been some of the best. I am not sure what the state of v4 is but I can assure you that venting here is not part of the solution (beyond your own catharsis of course!). Also, your restaurant analogy would be more appropriate if you were a paying Red Hat customer (which ships Hibernate as part of JBoss EAP and it's pretty straightforward to configure persistence therein). As a user of the community tool set you are shopping at the grocery store and cooking for yourself. Should the recipe be awesome? Yeah! If it's not, consider being part of the solution. I would be happy to help you out in this effort if you are willing to participate. Source: Red Hat employee and former Hibernate support engineer.
If the name is just for accessing/referencing the instance, consider storing the values in a map (for example map.put(name, obj)) . Then you can pull the object you want using map.get( name). If 'name' is actually the class type then you might need to use reflection. 
&gt;Source: Red Hat employee and former Hibernate support engineer. Well that's cool. I'm not sure if you've read my other replies in this thread, but above I talked about how I read a rumor/theory that the Hibernate team's real goal is to hit all of the 5.0 milestones, and all of the 4.x releases are just preparation work, or a means-to-an-end. The reason the documentation may have not been updated is because the team knows they're going to be breaking backwards-compatibility with every 4.x release and they don't want to waste time/resources updating and re-updating the documentation when the project is in such flux. You think once they finally hit 5.0 and the project API stabilizes they'll finally do a rewrite the documentation?
Is it confused? Maybe you can help clear it up. I thought the big advantage to using JSF would be to leverage the component model. If you are not using it, what does JSF offer over plain servlets -- which is too low level? Frameworks like Spring MVC, Python's Flask, or Scala's Play framework offer enough of an abstraction over writing low level code without trying to hide the fact that are you using the http protocol. For example, how would something like this be achieved in JSF? Maybe I really am missing something if there is an easy way to handle something like this: @Named @RequestMapping("/appointments") public class AppointmentsController { private final AppointmentBook appointmentBook; @Inject public AppointmentsController(AppointmentBook appointmentBook) { this.appointmentBook = appointmentBook; } @RequestMapping(value="/") public String get(Model model) { model.addAttribute("appointments", appointmentBook.getAppointmentsForToday()); return "appointments"; } @RequestMapping(value="/{day}") public String getForDay(@PathVariable @DateTimeFormat(iso=ISO.DATE) Date day, Model model) { model.addAttribute("appointments", appointmentBook.getAppointmentsForDay(day)); return "todays-appointments"; } @RequestMapping(value="/new", method = RequestMethod.GET) public String getNewForm(Model model) { model.addAttribute("appointment", new Appointment(); return "appointment-edit"; } @RequestMapping(value="/new", method = RequestMethod.POST) public String add(@Valid Appointment appointment, BindingResult result, RedirectAttributes redirectAttributes) { if (result.hasErrors()) { return "appointments/new"; } appointmentBook.addAppointment(appointment); redirectAttributes.addFlashAttribute("message", "Successfully added "+appointment.getTitle(); return "redirect:/appointments"; } @RequestMapping(value = "/api", produces = "application/json") public @ResponseBody List&lt;Appointment&gt; appointments() { return appointmentBook.getAllAppointments(); } } 
https://github.com/busterlj/Part-II-Project
&gt; If you are not using it, what does JSF offer over plain servlets -- which is too low level? There's compositing a view with Facelets for one, there are things like the FacesContext which give you access to a variety of artifacts like the current request. Even without using components, you can still use expression language, library contracts, resource serving and resource relocating (e.g. define on the middle of a view that say a Javascript file should be relocated to the head). You can use the view scope, flow scope, use flows in general, etc. With the help of utility libraries like OmniFaces, you can use JSF's converters and validators. Of course, much of the power in JSF comes from its component model, but not everything has to be a component. The word component should also not scare you. Maybe Rod has used this word as a stick against JSF? I'm not sure, just guessing, but I know he used the term "container" in the past as a stick to beat Java EE with (until he realized what the exact definition of container is and that the Spring beans ... container, was a container just as well). A component can be anything from a Java class with a separate renderer generating markup servlet style in Java, or it can be a bunch of html tags and javascript in a Facelet that you put into a special directory (the latter is called a composite component, which is basically a slightly elevated include). The example you give is a typical action oriented example. JSF being a more view oriented framework I'm not sure how much sense it would made to replicate it line by line in JSF. The general approach though would be to have the request parameters declared on a view and then define an preRenderView event handler or an action method. E.g. &lt;f:metadata&gt; &lt;f:viewParam name="user" value="#{userEdit.user}" converter="#{userConvertor}" /&gt; &lt;f:event listener="#{userEdit.preRenderView()}" type="preRenderView"/&gt; &lt;/f:metadata&gt; or &lt;f:metadata&gt; &lt;f:viewParam name="user" value="#{userEdit.user}" converter="#{userConvertor}" /&gt; &lt;f:viewAction action="#{userEdit.edit}" /&gt; &lt;/f:metadata&gt; (example taken from http://code.google.com/p/javaee6-crud-example/source/browse/WebContent/user_edit.xhtml) The backing bean in this case would get the converted user as an object instance. In the preRenderView event handler things like contacting a database or whatever could be done if necessary. An action method process the user's input and redirects to a new view (PRG pattern). See http://code.google.com/p/javaee6-crud-example/source/browse/src/backing/UserEdit.java There's no need to explicitly add things to a model like in your example. The backing bean is in scope of the view and it's properties can be directly referenced on the view via EL (which can be a bi-directional binding). In the example given by the link, the action method is executed in response to the button clicked by the user, but it can also execute as part of the (GET) request via the f:viewAction. It's not strictly necessary to declare requests parameters on a view. They can optionally be injected in a backing bean too via e.g. OmniFaces (see http://showcase.omnifaces.org/cdi/Param). So effectively the same effect is reached via a different approach, but that's the entire idea of different paradigms. Where action oriented frameworks express most everything via URL mappings, view oriented frameworks put the view in there first. Where you have the @RequestMapping(value="/new", method = RequestMethod.GET) public String getNewForm(Model model) { model.addAttribute("appointment", new Appointment(); return "appointment-edit"; } JSF typically has: public void preRenderView() { if (user == null) { user = new User(); } } There's no explicit mention of a view necessary here, since the default view (that implicitly maps to the URL by convention) is used. And where you have @RequestMapping(value="/new", method = RequestMethod.POST) public String add(@Valid Appointment appointment, BindingResult result, RedirectAttributes redirectAttributes) { if (result.hasErrors()) { return "appointments/new"; } appointmentBook.addAppointment(appointment); redirectAttributes.addFlashAttribute("message", "Successfully added "+appointment.getTitle(); return "redirect:/appointments"; } JSF has public String saveUser() { userDAO.save(user); addFlashMessage("User " + user.getId() + " saved"); return "users?faces-redirect=true"; } In this particular case the button used for submission was bound to the saveUser action method. It's thus automatically a post to the default view, no explicit route needs to be created for it. The explicit check for errors (which I assume are conversion and/or validation error in the user's submission) isn't needed in JSF when converters and validators are used: the action method will not be called at all then and the same view will be re-rendered with the validation messages visible (JSF has an elaborate message bus/queue and tags to determine where to display those). So while the routing code is fairly different, the core of the action code is surprisingly similar here; 1. new Entity() for the initial get request. 2. dao.save(), set Flash message, issue redirect for the post (back) request. 
I would only do GWT via Vaadin, standard GWT is a little heavy for my tastes. Disclaimer: I haven't used GWT in 2 years.
This is exactly the case. I really liked Play! up until v.2 where they went Scala crazy. Don't get me wrong, if they want to be a Scala framework - go for it I say; however, the docs for Java were awful and it was clear that Scala was the intended target. If I was doing a Scala project, I'd probably aim at the Lift framework anyway.
That article was a great reason to use "mvn clean install". Who has time to read all that crap?
Yeah so you basically illustrated my point. There really is no value in using JSF if want to work with a request/response based MVC web app. You're working against a programming model that many have found to be very effective. &gt; The word component should also not scare you. Maybe Rod has used this word as a stick against JSF? I don't why you always talk as if Rod Johnson is the root of evil or why you think he had anything to do with my preference but you should look outside of your comfort zone to see the direction most web developers are choosing across different platforms. Besides Flask (Python), Play (Scala) which I already mentioned also look at Sinatra (Ruby), Express (Node.js), or Symphony (PHP). Do you think it's a coincidence that developers on all these different platforms have been gravitating toward this paradigm for modern web development? Even Microsoft realized this trend in the industry and went from ASP.NET Web Forms to ASP.NET MVC. I think many of the Java EE components are great, but JSF just isn't the right solution for my team's projects. I've said this before but in case you missed it I'll love to be able to evaluate a Java EE MVC framework if they ever get around to it, but until then I think there are better options.
loganekz gave a simple CRUD example, where JSF and Action-oriented frameworks wouldn't show much difference. A more interesting example would be this: images.jsp: &lt;c:forEach value="${thumbnails}" var="thumbnail"&gt; &lt;div&gt; &lt;div class="thumbnail"&gt; &lt;img src="/thumbnails/${thumbnail.id}" /&gt; &lt;/div&gt; &lt;c:out value="${thumbnail.caption}" /&gt; &lt;/div&gt; &lt;/c:forEach&gt; ThumbnailsController.java: @Controller public ThumbnailsController { @Autowired private ThumbnailsDAO thumbnails; @RequestMapping(value = "/", method = RequestMethod.GET) public ModelAndView images() { ModelAndView mv = new ModelAndView("images"); mv.addObject("thumbnails", thumbnailsDAO.getThumbnails()); return mv; } @RequestMapping(value = "/thumbnails/{id}", method = RequestMethod.GET, produces = "image/jpeg") public @ResponseBody byte[] thumbnail(@PathParam long id) { return thumbnailsDAO.getThumbnail(id); } } To do something similar using JSF and Primefaces, it is a little more complicated: &lt;ui:repeat value="#{thumbnailsBean.thumbnails}" var="thumbnail"&gt; &lt;div&gt; &lt;div class="thumbnail"&gt; &lt;p:graphicImage value="#{thumbnailsBean.image}"&gt; &lt;f:param name="id" value="#{thumbnail.id}" /&gt; &lt;/p:graphicImage&gt; &lt;/div&gt; &lt;h:outputText value="#{thumbnail.caption}" /&gt; &lt;/div&gt; &lt;/ui:repeat&gt; ThumbnailsBean.java @ManagedBean public ThumbnailsBean { @Inject private ThumbnailsDAO thumbnailsDAO; private List&lt;Thumbnail&gt; thumbnails; @PostConstruct public void init() { thumbnails = thumbnails.getThumbnails(); } public Thumbnail getThumbnail() { return thumbnails; } public StreamedContent getImage() { FacesContext context = FacesContext.getCurrentInstance(); if (context.getCurrentPhaseId() == PhaseId.RENDER_RESPONSE) { // We're rendering thumbnails.xhtml right now - id is not available yet - return a dummy value return new DefaultStreamedContent(); } else { // We're rendering each image now - we'll get the id with each resource request long id = Long.parseLong(context.getExternalContext().getRequestParameterMap().get("id")); return new DefaultStreamedContent(new ByteArrayInputStream(thumbnailDAO.getThumbnail(id))); } } } Why is the JSF version more complicated than the Spring version? The Spring version is sitting right on top of HTTP. The URL is routed to a controller method which returns the required type of data. Whether the output is a HTML or any other kind of resource makes no difference to Spring. The JSF version translates the URL to a specific type of request. Either a Faces Request (routing to thumbnails.xhtml) to produce HTML or a Resource Request (routing to a ResourceHandler) to produce the required data format. Primefaces implements the required resource handler, but we have to be mindful of where we are in the JSF lifecycle processing to ensure that the required data (the ID) is available at the right time. There are alternate approaches, either implementing your own resource handler or using a filter to bypass JSF altogether for non-HTML producing requests. But, this is the solution requiring the least configuration that I've found despite the additional complexity.
I'm using SmartGWT a lot...and I really like it, in fact it's the only Java web development framework that really offers enough quality widgets and controls to allow you to build functionally-dense apps. Vaadin (from what I can tell) has a more minimal set of controls, but these really shine out of the box...and are great for apps that aren't 'functionally-dense'. 
I've read much longer articles on less useful things. I would guess any developer that wants to get better at their craft would take the time to read an article that's that short.
Hey, the learning portion is very concise especially comparing to a textbook. Also the data is easily accessible.
OP has already pointed out things he knows are wrong. He also pointed out how it should be correct. Therefore your criticism is invalid in this case. Even in the general case, the point is that once OP has the correct answers, he should go back and correct anything he had difficulty understanding for the next person. That's common courtesy. Your attitude of "don't expect anyone to fix anything, it must all be perfect for the users" is what keeps OSS from improving. 
sh0rug0ru is correct. Take a look at @Qualifier annotation by Spring which will allow you to distinguish those two services and additionally @Autowire the correct one using the said @Qualifier. If you want to have a Mocked Testing implementation you can use @Profile annotation to instruct Spring to instantiate one of those two, according to some Spring profile. Additionally setting @Primary on one of those services will "win" the @Autowire ambiguity you have created with the above definitions. 
So, your advice is to turn your project into a giant monolithic build. Great. I'll get right on that.
Why should you have to tell maven to build module dependencies with the -pl option? Shouldn't it be able to resolve that and build it without explicitly being told?
Well, why the fuck not? (Read as: why doesn't the design of maven accommodate that usage, especially since it feels so obvious and right?)
well what exactly is the error... 
Unfortunately, Apple stopped supporting Java in Xcode a bit ago. The templates for Java are no longer included, and I don't believe you can compile Java code in Xcode. The only thing that remains is the syntax highlighting. 
Hi. I have an error. Fix it. .... Give us the error.
I'm in the camp of people that think that for any language you should start off with just a text editor. Unless you start hitting the limitations of a text editor (like you start having a big package - more than 5-10 source files or you start wanting to run unit tests) then an IDE is just unnecessary and a distraction when you're starting out! 
Yes Java programmers preder to use Eclipse IDE b'coz it provides u more functionality which u can not get in text editor. In Eclipse u can debug , configure, build applications, tgis cannot be achieved in simple text editor..
Cannot read. To old?
I think it's not so much hitting the limits of the text editor that prompts someone to switch, because the limits are there from the start. Most text editors won't do even the most basic language-specific things without plugins. The better you get at a language the more you start to hate distractions like creating a directory for a new package. Using a call tree instead of a text search to find where your method is being used, since the latter shows you a lot of false positives... I still press F3 in eclipse on method calls every so often when revisiting code, just to make sure it goes where I think it goes and that there isn't some overloaded method and it's calling an unexpected version of it. A larger amount of time is spent navigating code rather than writing code. And navigating Java with pure text search just doesn't cut it.
For certain languages like C, because of the low level nature of the language and it most likely being the primary reason for wanting to learn C, you're encouraged to use a text editor rather than an IDE because an IDE hides certain tasks,like compiling, from the user to create a more user-friendly experience. Of course, this can be applicable to any programming language. Yes the Eclipse programming environment seems to be a top choice amongst Java programmers, especially among the Android application development community due to an Android development tools suite available as an Eclipse plugin. If you wish to get technical with the several program interactions that accompany the activity of computer programming, then by all means use a text editor. However, if you don't care for dealing with what goes on behind the curtains to make your program work, then use an IDE. Edit: More detailed
I'd strongly recommend using Eclipse if you are just starting out. However, if you are just starting out, I would urge you to stick to the basics: Just use the IDE to write code, and *don't* install all the zillion plugins Eclipse has (e.g. for SVN or git). The main argument for using an IDE is that Java has a quite large standard library. An IDE allows you to browse the available functions, view the Javadocs instantly (even in the autocompletion popup!) and also allows you to view the source code of the standard library functions [if you set it up correctly](http://www.mkyong.com/eclipse/eclipse-how-to-attach-jdk-source-code/). This is pretty useful and something that is way more difficult to do when only using a text editor. And it allows you to view what each function exactly does (there is no magic involved). Personally, I don't think you would learn more by just using a text editor. It would just lead to a lot of frustration with things that should not concern you as a beginner. An IDE will give you instant feedback when you make a typo or have a syntax error, while especially small errors involve a lot of tedious recompiling when only using a text editor.
Yes, most java programmers use an IDE. The three most popular one's are IntelliJ, Eclipse and Netbeans. Personally I prefer IntelliJ.
Agree, though I think the limit is closer to 2 or 3 classes. Any more than that and you want to be in an IDE. If you're starting to learn java, it's safer to be in a simple text editor and use command line tools. That way, if there's a problem compiling/running your code you don't have to figure out if you haven't set your IDE up correctly, the simple tool chain helps isolate those teething issues
Im firmly in the text editor camp. Vim and a few basic plugins. I find IDEs to be slow and just get in the way. I don't need to be coddled.
Also why does Maven check for updated snapshots of the modules it is about to build when doing a reactor build? If it is going to build them anyway isn't this completely pointless? 
Yes, virtually all Java developers (professional or otherwise) use an IDE. If you really want to you *can* do it with plain text editors and command line tools. This might be interesting if you are curious and want to learn about the underlying tools but I wouldn't recommend it for normal development usage. IDEs give you several major advantages: - Editing assistance like code autocompletion - Automatic highlighting of errors / code problems / warnings - Refactoring tools (e.g. renaming a variable and updating everything that refers to it all at once) - Inline documentation - Debugging / testing tools - Integration with build management systems (e.g. using Maven to manage all your library dependencies)
For Java, you definitely want to be using an IDE. You're going to have a really, really bad time if you don't.
I agree IntelliJ is way better, but eclipse ~~is easier to setup~~(Personal expierence only) and most tutorials are designed for it too. I haven't tried Netbeans, but I'd recommend Eclipse to newbs and IntelliJ to people who know what they're doing.
These are probably the same people who say that autocomplete makes you stupid, since everyone knows that programmers *must* know the entire standard library by heart...
It definitely depends on the language, though. The Ruby community seems to be exactly opposite from the Java community when it comes to IDEs vs. text editors.
&gt;Yeah so you basically illustrated my point. There really is no value in using JSF if want to work with a request/response based MVC web app. I wasn't aware that this was your point. I think your earlier statement was that JSF abstracted from HTTP, which isn't true. There are a couple or frameworks that DO abstract from HTTP and which let you program as if you were programming a Swing app. GWT and Vaadin are perhaps the best well known examples. As demonstrated, JSF doesn't do that. You create pages that map to URLs, on those pages you have (plain) hyperlinks with request parameters to other pages (no tricks that single page systems use), and in the JSF backing bean you directly deal with request parameters and response view. Of course, as I mentioned before, the paradigm is different. In its current form (JSF 2.2 + various libraries such as PrimeFaces and OmniFaces) JSF is NOT an action based framework. So to rephrase your statement slightly: *"There really is no value in using a non-action oriented framework if you want to work with an action oriented web app."* To that I say, no shit sherlock! ;) It's like the age old wars of functional vs imperative programming and to a lesser degree structural vs object oriented. Imperative dude would give a very specific example in imperative style, then asked functional dude if functional language could that. Functional dude would sweat, and came up with some contrived code that more or less emulated the way the imperative code did it. Imperative guy would laugh and say *"There really is no value in using a non-imperative language if you want to work with an imperative oriented app."* And in early 80-ties in the usenet groups the historical "no shit sherlock!" phrase was uttered too. Of course, functional dude could come with some functional code, then ask imperative dude to reproduce that in imperative code. Same thing really. Back to today and us, I could probably cook up some examples in JSF where I put some fancy input selectors in a data table with a connection to a progress bar and ask you to reproduce it in action oriented style, but that's not the main point. The main point is whether JSF is easy for common tasks (e.g. building a CRUD app like demonstrated) and has good performance and is easy to maintain. And it think the answer is yes to that. Putting the view first in a CRUD app, and having two methods bounds, one that is executed on the initial GET, the other that is executed on the POST done by the button IS the exact same thing eventually, just written down (coded) via another paradigm. I state that for this specific case action oriented MVC nor view oriented MVC is decisively better or easier, they are just different angles to look at the exact same thing. Now the SECOND point is what's currently under discussion for Java EE 8 - Should JSF adopt a more elaborate support for action orientation as well? This is not a done deal! Some say yes, some say no, some say yes, but in this and that way, etc. In practice people have been using action oriented frameworks with component oriented views. As the view in many action oriented frameworks is kind of left to the choice of the user it's not entirely strange that people have done this. With functional vs imperative/object oriented, we've seen that people have in fact combined the two paradigms, so I guess it's worth looking into whether action oriented and component based can be combined in a meaningful way. JSF btw already has gone through a paradigm shift before. Originally (1.0/1.1) it indeed tried to be this layer on top of HTTP/HTML and totally abstracting from it. Everything was a POST, there were no real URLs (only navigation rules), you were pushed into using ONLY components on a view, etc. JSF 1.2 had some minor improvements (allowing plain markup to be mixed with components) but JSF 2.0 was the big paradigm shift were the HTTP central approach (navigation using plain GET requests with request parameters, and the PRG pattern) was fully embraced. &gt;I don't why you always talk as if Rod Johnson is the root of evil or why you think he had anything to do with my preference I think Rod was instrumental in stirring up many anti-Java EE feelings. Spreading a lot of FUD that lives on to this day. EJB 2 WAS evil, but he kept ranting against EJB and home evil and complex it was long after EJB 3 was released. To this day, to this very day, I still encounter people who never looked at Java EE again after hearing one of Rods (in) famous talks back in the days, who are genuinely surprised at how elegant a modern Java EE app with JSF, CDI, BeanValidation etc looks in code these days. So I didn't *think* Rod influenced your preference here, I was just asking ;) Just wondering whether Rod has used the word "component" as an evil that we should all hate in one of his talks (I haven't seen all Rod's talks, so I don't know). &gt;Do you think it's a coincidence that developers on all these different platforms have been gravitating toward this paradigm for modern web development? I find this a difficult assertion. A while back I heard people saying the EXACT same thing about statically typed vs dynamic typed. I was supposedly a fool for using Java, since couldn't I see that the entire industry was gravitating towards dynamic? Fast forward some 8 years and now static languages are the most commonly used ones again and there's no gravitation towards dynamic. An other issue is that early 80-ties functional had basically lost. Everyone was gravitating towards imperative. Should functional have been completed abandoned at that time since hey, what's the point, everyone is gravitating towards functional, then it might have been completely forgotten by now and maybe there would have not been a LINQ in C# and Lambdas and streams in Java today? JSF is also definitely not the only component based framework out there. There's Wicket, Tapestry, Lift and my favorite Micro (http://micro-docs.simplegames.ca). Don't forget that the Wicket guys were also incredibly fanatic about Wicket being the one and true style, just as you are slightly fanatic that Spring MVC is it, and I'm a bit fanatic about JSF ;) &gt;Even Microsoft realized this trend in the industry and went from ASP.NET Web Forms to ASP.NET MVC. Microsoft is indeed an interesting case which I might have to study more. ASP.NET and JSF 1.0 started out very similar indeed. From what I understood, the two are more like the opposite of C# and Java, which started out pretty much identical as well, but where C# branched off faster than Java. In the case of ASP.NET vs JSF, it was JSF that branched off into another direction and innovated faster (e.g. with the availability of things like the view scope, Facelets, bi-directional bindings via EL, partial view state and the ability to disable view state). If I'm not mistaken these were mostly things that ASP.NET never got. 
I speak from my own experience. Personally, I'd rather use my IDE of choice, which already comes with all of the development tools I'll ever need, than fuck around with a load of plugins in Vim (I use Vim without plugins and with a relatively small .vimrc). I just prefer IDEs in general.
With respect to IDEs, everyone here is correct so I won't reiterate their responses. Personally, I use Vim for all of my programming. For me, IDEs have (have had) the following problems: 1. They're typically specific to one language. Eclipse is kind-of an exception, but even then it only supports a few languages. I personally like to have a development environment that is familiar to me regardless of the language. 2. IDEs, at least in the past, have been too slow for me to keep up with my typing. The autocomplete has actually stopped the IDE temporarily, thus making me lose track of what I was typing. Frustrated the hell out of me. However, this may not be an issue. 3. They're big. I develop software in a VM and for me to use up a large chunk of my RAM just for an IDE isn't practical when I have to run other services at the same time. Again, this is just me. If an IDE works for you, then go for it. Regardless of what you choose to do, here's some advice: 1. Learn Vim/Vi. Even if you don't use it for development, knowing the basics of an editor that's on probably every unix-like system out there can be valuable during deployments, fixes on servers, etc. Also, as someone else pointed out, you can get plugins for many IDEs that emulate Vim keybindings, so that can make you more efficient in your own editor. 2. If you decide to use Vim or something else that's not an IDE, I recommend keeping a copy of the Javadocs open in a browser. This way you have quick access to the API docs without autocomplete. Also, I find that having the full docs open is beneficial as I can read the documentation to find alternatives to what I think should be done or get more information about how to properly use the API. 3. Know how to use your tools from outside of your IDE. By this, I mean things like Maven and git. Granted, it's been a while, but I have seen an IDE plugin mess up a code base. Also, IDEs tend to not properly update maven pom files with source/target versions, at least by default. This can be an issue if you're using CI tools. However, if you can go to a prompt, run maven, and have everything work, you know you're good to go. Now, while it seems I've trashed IDEs and I do have a dislike for them, I'll offer a reason why I liked using Eclipse on a project: code coverage for unit tests. I leveraged the EclEmma plugin (Not sure if it's still available or maintained) to check my unit test coverage and it worked wonderfully. It was very easy to know what has/hasn't been executed. Anyway, I hope this helps.
Unless something's drastically changed with Eclipse, Netbeans is a far easier out the box experience that Eclipse - it's got a saner set of default plugins (i.e. the version control ones), and in my experience it's a lot more stable than Eclipse too. Eclipse is capable of doing pretty much anything, but I wouldn't say it's overly user friendly for newcomers.
&gt;Is this representative of the Java coding community? Yes. &gt;If so, why? Because the IDEs are so much more. I was anti-IDE for the first few years of using Java, because I considered IDEs too heavyweight. I used only Notepad++. I eventually tried Eclipse, and have never gone back. It's truly powerful and a big productivity boost. I love being able to instantly rename or refactor things project-wide, and instantly have methods added to a class I'm writing that implements some interface. I love at any time being able to mouse-over a method to see its params and doc, and being able to press F3 to jump to something's declaration or source code (including the source code of standard API methods). It's magic to be able to step-debug a program and examine data while it runs rather than only having sysout statements for debugging. Syntax errors are highlighted instantly, that would otherwise take an annoying compile-wait-error-fix-save-compile cycle, and so on. Yes, Eclipse it can take about a minute to start (depending on plugins), but a few minutes later it's more than made up for it. I can't even imagine programming using a true text editor (rather than a programmer's editor like Notepad++). It sounds utterly ghastly. Get an IDE. Any IDE. Eclipse is the only one I've used, but all IDEs are better than a "basic text editor".
The auto-completion is great and it also catches *weird* code; it'll highlight an if-statement if it's always true or always false, it can simplify statements, and more (not sure if Eclipse has all of these?). Also, if you're going to use IntelliJ, **switch to the *Darcula* theme**. I like it's layout better and where things are placed. It also has a bunch of 'technologies' built in.
How is Eclipse easier to set up? I use both IntelliJ and Eclipse and the former works perfectly out of the box.
Worth mentioning that if you're in the Java EE world there's no need add any new jar files to have this available - they're known as [Interceptors](http://docs.oracle.com/javaee/6/tutorial/doc/gkhjx.html) there. I don't know for certain, but I'd be amazed if Spring didn't also have its own flavour in on of its modules. I can honestly setting up a logging interceptor is one of the most useful things I've ever done from an programming efficiency and code cleanliness point of view, so I'd recommend that any doubters give it a try.
&gt; I don't think that anyone could argue that using an IDE can make you more productive. [:O](http://jimromenesko.com/wp-content/uploads/2014/01/typo.jpg)
Yeah the supported and built-in plugins are nice because they are there out-of-the-box and generally work well. With Eclipse the plugins are mostly third-party and can be very hit or miss and sometimes make the whole environment unstable. 
I never realized how many java programmers swear by IDEs, I am personally a fan of powerful editors like Geany(on linux) and Smultron(Mac). But when it comes to writing code for android, without an eclipse its a major pain.
It seems to be that most people that use a text editor are working on something rather low level. To me building a special-purpose filesystem falls under this. Would you agree that this is more the case? Anytime I've seen a team working on something higher level, like a web application via spring or similar it is always being built in an IDE. System level tools I almost always see being done in a text editor. Just something I've taken note of and it sounds like you have experience, so what's your 2 cents on this?
Yeah, but it probably can't do contextual autocomplete ... when you trigger autocomplete on an object you want to see only methods which are in the object, not everything ...
My perception is that Eclipse is rapidly losing ground to Intellij. We've been hiring Java programmers and every one of them preferred Intellij, many of them switched from Eclipse in the last year or two.
Well put. The best practice is to always use the right tool for the job. If someone argues to me that "an IDE is the best tool for this job because ______", that's fine. I use them too, when the project calls for it. I weary of people who argue that "anyone who doesn't use an IDE is an idiot", and I do hear that. I would never hire such a person. This indicates a clear lack of experience closer to the hardware, and overconfidence in a position they haven't gathered enough knowledge about. Inexperience combined with overconfidence *ALWAYS* means I end up having to work late, work weekends, miss deadlines, and waste my life fixing messes.
This is definitely true. Most people I've talked to in the webdev world (which is most of the ruby world) are horrified at the idea of IDEs and the general consensus is everyone should use Vim if they can, and sublime text otherwise.
Eclipse is extensible, in that you can add plugins to it to add new functionality. All of the features STS has over "stock" Eclipse are added via plugins distributed with their releases.
I was talking more about this: &gt; There will always be those who have a philosophical opposition to IDEs Sorry if I offended.
A correctly set up Java IDE will show you every method of a class or any class in a package with its documentation as part of auto complete. It will also auto compile changed classes and highlight errors and do a lot of other things. Due to the languages complexity and some well meant extremism most c++ IDEs aren't even close, however using an IDE for C++ is also quite common (QtCreator, Netbeans, Eclipse, Visual Studio). You should also be aware that small scale projects done for university curses do not reflect real world usage. 
Oh, it's definitely still incredibly useful. I'm a big fan of Rubymine myself. But it seems like most Ruby programmers are more into using Textmate or Vim with plugins.
Yep, he was a big big fan of textmate, but when he saw some of the features that others on the team were making use of, he was convinced to try it. All the benefits of a text editor, but with loads of extra functionality. 
psvm *tab* is one of my favorite auto complete. sout is great too. I'm learning all the shortcuts as I go, but holy crap it's awesome
I'd also argue that Ruby projects generally aren't as large as Java projects. Ruby projects are generally relatively simple Rails applications while Java is used for pretty much everything, including much larger more complicated projects. This means that it's much easier to get by without an IDE in Ruby land.
That's not my perception at all. I teach Java training courses around the world to corporate clients and over the past several years have had exactly ONE request for Intellij. 95% want Eclipse, with the rest split between RAD, NetBeans and JDeveloper.
Nice, thanks for sharing!
I'm a hardcore vi user, have been for about fifteen years, now. I use it for *everything*, *except* java development. Java is just to much of a pain in the ass without all the other IDE trappings. A swing GUI builder, something to manage tomcat, a good profiler and debugger, rich warnings and code refactoring... Vim is just weak for Java development. The good news is that every big name IDE has a Vim plugin so you can have Vim usability (hahahahaha*hahahah*) combined with IDE feature sets Oh, and don't use eclipse, that shit's awful 
if you learn from fresh, use JavaFX. Swing is just painfully outdated :)
Oh, thanks for that. That's why I can't find good tutorials I guess.
I work in a Java company and they all use IntelliJ. I haven't seen a single person use Eclipse.
I teach Computer Science and have used both Netbeans and Eclipse for classes. If all you are ever going to do is Java programming, then Netbeans wins on several counts. Installation is a snap. Get the Java/Netbeans bundle (admittedly a huge download) and install them both at once. It also seems more polished and generally a bit easier to use. Also, and this is a big one for classroom use, Netbeans is pretty much the same across all platforms. Eclipse is very bad about putting things in different places on different platforms and even among versions on the same platform. I switched my classes to Eclipse a few years ago. Installation is sometimes trickier for new students, and Eclipse is not as pretty or easy to use as Netbeans. And the differences in versions/platforms drives me crazy. Sometimes a Mac or Windows user will ask me how I did something, and it takes forever to find it in different versions. So, why do I use Eclipse? Eclipse has become the Swiss Army Knife of software development. That customization across platforms and versions means that it can also be customized to do a bunch of different things. It is even used for things other than software development. Back when I used Netbeans in classes I noticed that some students avoided using certain tools because they were based on Eclipse. So one of my motivations was to get them over that initial hurdle of using Eclipse. Yes, I know that you can use Netbeans for things besides Java. However, the benefits of Netbeans seemed to diminish as I moved to other languages like PHP and C++. The first time I used Eclipse in a course was C++. I was going to use Netbeans, but I got tired of bashing my head against the wall and retreated to Eclipse. I might go back and try Netbeans except for one factor. Oracle. Yeah, I know that I am being a hypocrite because I use Java and that is Oracle, too. Right after acquiring Sun/Java/Netbeans they pulled out Netbean features like UML integration because they had a competing (and expensive) Oracle packages. So I never went back. And don't get me started on the whole Ask Toolbar thing. Another factor that is mitigating the installation thing is that more and more of my students are using Linux. With the major distros, installation of Eclipse is just as easy or even easier than Netbeans. Inexperienced Linux users can install a workable Eclipse and Java with a single command. 
I learned to program in the days of punched cards. So did all of the other faculty. In fact, they were older than me and had grown up even longer with punch cards (and even plug boards). They rebelled against text editors. I remember giving my students a vim config file for FORTRAN and getting chewed out by a senior faculty member because it did too much for the students and they wouldn't learn as well. No doubt when you guys get older you will complain about kids using neural interfaces instead of IDE's. You will be absolutely convinced that they won't learn programming as well if they don't know the tricks of using AutoComplete.
I didn't claim that setting up Eclipse is difficult just that IntelliJ is even easier to get up and running.
Darcula is the only reason one needs to give. 
In contradiction to /u/thatsIch I'd like to say that Swing is still **the** standard for Java GUIs and it'll be a while before it disappears. JavaFX is the upcoming star (and definitely the way that Oracle wants GUIs to go), but it's not all too common yet. I'd still suggest to get going with Swing first. Udemy.com has a very nice tutorial on Swing but unfortunately it's not free. Here is the link: [Java Swing (GUI) Programming: From Beginner to Expert](https://www.udemy.com/java-swing-complete/?dtcode=xemrzvqr). Currently, the price is $49, but it's discounted quite frequently (up to 80% discount). If you just started Java, you also might want to check out the free [Java for Complete Beginners](https://www.udemy.com/java-tutorial/?dtcode=nbc6es6w) course. (It's free so you got nothing to lose - and once you are signed up at Udemy, you'll receive notifications of their discounts.) Since you have a C++ background, I strongly suggest that you at least browse through the [Oracle Java Tutorials](http://docs.oracle.com/javase/tutorial/) since Java is quite different to C++ (especially the ways objects and Strings are handled).
Thanks a lot, I will check all of that.
&gt; Yeah, I know that I am being a hypocrite because I use Java and that is Oracle, too. Right after acquiring Sun/Java/Netbeans they pulled out Netbean features like UML integration because they had a competing (and expensive) Oracle packages. So I never went back. And don't get me started on the whole Ask Toolbar thing. Oh my god, so true. Take a look at how Netbeans justifies why it is an open source project (https://netbeans.org/about/os/) where it makes the point that it is open source because it is ... &gt;A way of ensuring that users of software are able to modify it to meet their needs, and that no single entity can act against the interests of the project or the community. Such irony.
THEY MUST KNOW EVERYTHING ABOUT THE BITS AND INSTRUCTION SETS. ITS THE MOST IMPORTANT PART OF PROGRAMMING /s
Not sure which of these IntelliJ has, but the alt+insert, scroll-select, ctrl+w and the setter/getter generation features I pretty usful. also, ~~IntelliJ seems to be built off a version of Eclipse, so there would be hardly anything it does worse.~~ False, thanks /u/Discrete_Number ! 
I suppose I should add that this is from personal experience, I've set IntelliJ up for about 4 people. There are a couple of problems I ran into, all of the IntelliJs I set up needed me to define the JDK path, which involves looking through both 32 bit and 64 bit "program files" for each drive they have, and one guy's IntelliJ would go completely un-responsive after 5 seconds of usage, it probably could have been fixed but it caused him to give up on IntelliJ and get eclipse instead. And alot of Java tutorials will show you, or atleast have a link to show you how to set up Eclipse, these are some pretty picky issues, but they'd be very hard for someone with no experience to deal with IMO.
"Most"? Hard to say. Certainly many do. I think the better question might be do most programmers use an IDE or do they use an ADVANCED text editor? I personally prefer doing most of my work (Java or otherwise) in UltraEdit Studio (though admittedly lately I've been spending more and more time in IntelliJ)... at work I have no choice but to use RAD, which I loathe with all the passion of the ancients, but at home where I have the choice, UES does it for me most of the time, with IntelliJ catching up. I don't think I'm alone in that, whether it's UES or something else (SlickEdit used to be VERY popular for programmers, though I don't know where it stands now). Especially for us old-school developers... I've been at this game for around 30 years, I've gone through many different dev tools, but I still come back to a feature-rich text editor being ideal most of the time. For me, it's primarily a question of speed... I type VERY fast and I think VERY fast and most IDEs simply can't keep up with me... they all have little delays here and there that really break your stride if you work like me... it's literally faster for me to type a getter/setter than to reach for the mouse and click the generate button... and, when I do need to click something, if there's any delay at all for a context menu to appear for example, that's a problem... ditto autocompletion functions. Yes, an IDE can sometimes save me time in terms of fixes and validations and all that stuff, but a real good advanced text editor like UES lets me integrate all sorts of tools and run all sorts of macros so that even though I'm building things myself, I can get most of the benefits of an IDE while maintaining the speed. That being said, IntellJ is definitely my favorite IDE... it gets in my way the least, and I like that a lot, and it's *almost* fast enough to keep up. To be clear, it still DOES get in my way sometimes, and it still does slow me down sometimes, so it's not quite my daily driver, but it's close to being able to fill that roll... close enough that I bought a personal license and I use it for certain projects... I could see a time when I work in it exclusively, not too far off. I've never been able to say that about any other IDE.
&gt;If you just need a Collection, stick with it, but it only provides an iterator. If you need random access to elements, you need to use a List, which also provides add() and get() methods, that take indexes. This isn't entirely correct. Collection provides more than just an iterator, it also provides an add method, remove, size, isEmpty and a couple of other things like that. Collection is basically the intersection of the methods available on the List, Map and Set interfaces. The most barebones you can get with java interfaces is the Iterable interface, which really does just provide the iterator. 
I particularly like the fact that when working with colors, Intellij puts the color next to the line of code so that you can see what color you have rather than trying to decipher the color value.
&gt; (and definitely the way that Oracle wants GUIs to go), but it's not all too common yet. Annoyingly still not available using any Linux package manager. Currently any use of JavaFX might require shipping with the whole JVM for non Windows targets. 
Nope. I use Vim with no IDE at all whatsoever for all of my Java development, even on Windows (yes, there's a native version of Vim, both for Vim 7.3 and 7.4 for Windows).
The fact that you're pretty much the only one here who said you use Vim for Java dev indicates that you're wrong, and most Java devs do use an IDE.
&gt; Why is the JSF version more complicated than the Spring version? Because JSF does not presents itself as a standalone framework for all file serving needs, but specifically targets the generation of HTML. It acknowledges that it's part of a bigger framework called Java EE, and that Java EE has dedicated mechanism for serving files (namely Servlets and for XML or JSON JAX-RS). The specific example you show is an oddity in the PrimeFaces API. It's not so much about "being aware of the lifecycle and when the ID" is available, but more about this particular component (graphicImage) needing a switch because obviously its `value` attribute is overloaded to take either a textual URL or a reference to a value expression that delivers the content for the image. If I had designed this component I had probably done something like: &lt;p:graphicImage resource="#{thumbnailsBean.image}"&gt; &lt;f:param name="id" value="#{thumbnail.id}" /&gt; &lt;/p:graphicImage&gt; And then the getImage method would just be: public StreamedContent getImage() { long id = Long.parseLong(context.getExternalContext().getRequestParameterMap().get("id")); return new DefaultStreamedContent(new ByteArrayInputStream(thumbnailDAO.getThumbnail(id))); } } When rendering the component, the component will generate the right resource URL and will not consult the value expression. When the resource URL is requested by the browser it simply will. But this is not the only way to do it. An other way is: images.xhtml &lt;ui:repeat value="#{thumbnailsBean.thumbnails}" var="thumbnail"&gt; &lt;div&gt; &lt;div class="thumbnail"&gt; &lt;img src="/thumbnails?image=#{thumbnail.id}" /&gt; &lt;/div&gt; #{thumbnail.caption} &lt;/div&gt; &lt;/ui:repeat&gt; ImagesBacking.java @Model @Eager(viewId = "/images.xhtml") public class MyBean { @Inject @Param private ParamValue&lt;Long&gt; image; @Inject private ThumbnailsDAO thumbnailsDAO; private List&lt;Thumbnail&gt; thumbnails; @PostConstruct public void init() throws IOException { if (image.getValue() == null) { thumbnails = thumbnailsDAO.getThumbnails(); } else { copy(thumbnailDAO.getThumbnail(image.getValue()), getResponse().getOutputStream()); responseComplete(); } } public List&lt;Thumbnail&gt; getThumbnails() { return thumbnails; } } Again this shows exactly the same thing; when there's a request for just the view, the thumbnails are requested from the DAO and subsequently image URLs are rendered with their ID. And for each image request the request parameter is used to fetch that specific image from the DAO and its bytes are served. It's again a different angle to approach the same problem and effectively the same things happen. Here too I assert that the complexity of the code is about the same between the two approaches. I've used the OmniFaces utility library btw for some goodies like `getResponse()` and `responseComplete()`, as well as for `@Eager` and `@Param`. Without OmniFaces this would be somewhat more verbose indeed, but still doable (I would have used the previously shown preRenderView event or an action method and view params). p.s. Not as typical for JSF, but nevertheless possible, is to store the values used by the view directly into request attributes. If for some reason you really hate the extra getter and instance variable, you "could" write the code like this: images.xhtml &lt;ui:repeat value="#{thumbnails}" var="thumbnail"&gt; &lt;div&gt; &lt;div class="thumbnail"&gt; &lt;img src="/thumbnails?image=#{thumbnail.id}" /&gt; &lt;/div&gt; #{thumbnail.caption} &lt;/div&gt; &lt;/ui:repeat&gt; ImagesBacking.java @Model @Eager(viewId = "/images.xhtml") public class MyBean { @Inject @Param private ParamValue&lt;Long&gt; image; @Inject private ThumbnailsDAO thumbnailsDAO; @PostConstruct public void init() throws IOException { if (image.getValue() == null) { setRequestAttribute("thumbnails", thumbnailsDAO.getThumbnails()); } else { copy(thumbnailDAO.getThumbnail(image.getValue()), getResponse().getOutputStream()); responseComplete(); } } } For static references like in this example you would not often see this in typical JSF code, but for some more dynamic situations it's not entirely unheard of either.
Android apps run on android, but Tomcat does not. How do you want them to run "on the same spot" ? You could use your android app to make a web service call to your dynamic web project, but I don't see how they could 'live together' so to speak.
&gt;switch to the Darcula theme. Currently using the Dracula theme with colors borrowed from VS2012 Dark theme and am loving it. 
Here are some of my own: http://hadihariri.com/2014/01/06/intellij-idea-minimal-survival-guide/ http://www.parleys.com/play/5367b4b5e4b0593229b85843/chapter1/about Also, make sure you check out our blog, Andrey posts tips once in a while: http://blog.jetbrains.com/idea
I understand that. How can I do that thing you just said: ''your android app to make a web service call to your dynamic web project'' ? 
The code completion is what keeps me coming back. Sure it exists in all of the IDEs, but IntelliJ has some really neat things. - You can type any part of the method name. So if you want `transformToXml()`, but start typing "toXml" you'll find it. - someList.fori makes a for loop over `someList` with an iterator - I am pretty certain more commonly used methods appear at the top of the auto complete list. Often I find myself typing "." and then just hitting down-arrow once or twice to get what I want. I also really like the automatic integration with Maven and version control. I don't think I had to do anything special, it just knew right away that I was using SVN and was able to detect changes, show new files, unadded files, etc. For maven, it know what a valid pom file looks like and will make changes to my library as I change the pom file in essentially real time.
Deploy your android apk onto the device as usual. It then makes XHR to the endpoint of your Tomcat server that is running on your desktop. You can do this in different way depending on whether your dynamic web project has deployed a SOAP or RESTful service. More detailed answers will require more details about your projects.
Regarding your number 3, I would say that search is plenty fast even with x-hundred MB codebases with lots of dependencies. I like the way you can apply quick fixes to a whole class or a whole project in one go. I have learned to use nearly all of the refactorings, and it has changed the way I code, especially the extract method, extract parameter and move method refactorings mean that I can code in a goal oriented way, and then analyse my code and create the appropriate abstraction level. Often, when you create the design first (decide what the classes and methods will be called and what have you), reality will force you to break your design or just dirty it. This way, you can design with 20/20 hindsight.
&gt; IntelliJ seems to be built off a version of Eclipse, so there would be hardly anything it does worse. This is false. IntelliJ has nothing to do with Eclipse. First, the GUI is based on Swing, while Eclipse relies on its own toolkit, SWT. They are completely different products. I don't even think Eclipse licensing would allow Jetbrains (or any other software vendor) to include portions of its source and make a commercial product from it. 
When I started learning how to code with java, I used [BlueJ](http://www.bluej.org/). It was really simple and easy to use, it doesn't have any of the cool features that eclipse might have. However, its was the same simplicity that made it really easy for me to get started.
Sorry! I edited it now, not sure why I thought IntelliJ was built off eclipse. Also I found this if you're interested: http://en.wikipedia.org/wiki/Eclipse_Public_License
&gt; if you are working within JSF, you have to be aware of the lifecycle phases if you are doing non-trivial things While it's indeed a good thing to be aware of the lifecycle, it's not particularly needed in the case I demonstrated. Here it's just about distinguishing whether there is or is not a certain request parameter. And "Lifecyle" is perhaps a scary word (did Rod use it? Okay, kidding here ;)), but it's just about happens-before and happens-after. You know that at some point all values that are of interest to the view have been converted and validated. This is a convenience people clearly like. &gt;Legacy way to do this is to come up with a Servlet that does the streaming, GraphicImage does all the hard work without the need of a Servlet. Besides the fact that I don't agree with PF here, this is not what I was referring to. My comment was not about PF using Servlets or their own API on top of the resource handler, but about graphicImage supporting both user supplied URLs (e.g. "/foo/bar/kaz.jpg") AND dynamically generated URLs to the resource handler. This specific component needs a switch between those two, and for that switch they have chosen to use a dummy object. The problem here is that for the user supplied URL, PF has to evaluate the value expression during rendering of the img tag, but for the dynamic URL it doesn't have to. It only has to know which value expression should be called when the image request comes in. Become the "value" attribute is used for both cases, PF -has- to evaluate to value expression and therefor the user HAS to provide the dummy. Had PF used some other switch, e.g. a separate attribute to bind the method to that delivers the resource, OR an extra attribute that you can set to "true" or so, then this entire dummy value would not be needed. &gt;Notice how you have an "if" statement? Branches are a reflection of a deeper complexity But you have the same branch! In the case of the Spring code it's declarative in an annotation, while in case of the JSF code it's an if statement. &gt;And I'm not convinced your example would work in all cases, especially if there are other PhaseListeners which might want to do something with the response (such as a redirecting to a login page in the absence of an authorization token) There might be filters that do something like that as well and "interfere" in both cases (it's a totally different story, but security checks should preferably be done at the very start of request processing, if possible even before the first filter is called). 
There are people who want to be great programmers, and people who are satisfied with less.
You like this more than the awesome browser add-on bar?
&gt; And "Lifecyle" is perhaps a scary word Lifecycle is not a scary word. It is critical to understanding JSF, in particular to know in which context events are run, what state is available in that context, and what actions are safe in each phase. Thus knowledge of the JSF lifecycle phases is critical for choosing the right type of event handler for the purpose you wish to accomplish. If you write even a moderately complex application, knowledge of what goes on in each phase is very important. &gt; it's not particularly needed in the case I demonstrated. Here it's just &gt; about distinguishing whether there is or is not a certain request &gt; parameter. Actually, it is. Which is the point I was making. It's not the switch that is at issue, it is the subversion of the response. Calling responseComplete is not entirely safe. You must call it from the correct phase, and it must not have been called by a previous listener. In fact, I learned quite a bit about JSF's lifecycle phases when I tried to integrate PrettyFaces in an application with a custom PhaseListener for authorization, trying to figure out why I was getting response already committed exceptions when I tried to redirect (worked fine before I added PrettyFaces). Or, when I did complex ajax interactions with PrimeFaces and wondering why I wasn't seeing values applied to the backing bean from certain event handlers (in particular, with the PF wizard component). I learned pretty quickly working with JSF that a third-rate understanding of how the framework really works will lead you to spend a lot of time in StackOverflow or BalusC's blog. &gt; This specific component needs a switch between those two, and for &gt; that switch they have chosen to use a dummy object. You're missing the point of this example. I know *what* the problem is. I banged my head against the desk for awhile before I figured this out. This was my original approach: &lt;ui:repeat value="#{thumbnailsBean.thumbnails}" var="thumbnail"&gt; &lt;div&gt; &lt;div class="thumbnail"&gt; &lt;p:graphicImage value="#{thumbnail.image}" /&gt; &lt;/div&gt; &lt;h:outputText value="#{thumbnail.caption}" /&gt; &lt;/div&gt; &lt;/ui:repeat&gt; Why can't each thumbnail bean return its own StreamedImage? Why do I even have to care about the ID? JSF is supposed to component oriented and abstract this kind of stuff away, right? Otherwise, why am I even using it? This lead me down a journey which taught me the difference between resource requests and faces requests. In particular, as you mentioned, the value expression is evaluated once during the Render Phase, and then it is called again for each resource request (which is not a Faces Request and thus not subject to the same lifecycle), which the state of the EL context is very different. The thumbnail property is not what you think it is. Thus, you have to inject the ID into the request parameter so that the information is available from a completely different request. &gt; But you have the same branch! In the case of the Spring code it's &gt; declarative in an annotation, while in case of the JSF code it's an if &gt; statement. Not, it's not. And that is the fundamental point. In HTTP, the browser invokes GET request on the URL for the page and the browser invokes a GET request on the URL for each image. That GET request is *directly* mapped to the controller method. No mess. No state. Your JSF example is inherently messy because you have to check the state and select the appropriate course of action. The reason for this check is obscured in what is happening in the background, namely that you are overloading a view and subverting the rendering process. Your code (as you can see) is not much different than what I've had to deal with in writing JSF applications. I believe my if statement is safer than your if statement, but that is really a moot point. I don't want to deal with these kinds of if statements, because I really don't like dealing with state. The lifecycle phases of JSF demand that you pay attention to state, or you will be burned. There's a reason why declarative code is inherently safer and less complex than imperative code. &gt; There might be filters that do something like that as well and &gt; "interfere" in both cases No, they wouldn't. We are talking about things that work very differently. In Spring or even simple Filter, it's a pipeline. You can decide to continue along the pipeline or abort processing (in case of a redirect, for example by not calling `chain.doFilter()` in the case of a simple Java EE Filter). In JSF, it's a lifecycle. You can continue to the next phase or jump to the Render Phase. The consequences of the implementation are very different, and I've found that I've had far less problems with the Filter chain approach than with the JSF lifecycle approach. There are just a lot less moving parts to the Filter chain approach. I've had enough experience with JSF to know that understanding state and lifecycle phases are critical to using it correctly, and I don't really like the consequences, but I deal with it. Front controller frameworks just have a lot less going on and I end up with a lot less puzzling problems. I vastly prefer request oriented to component oriented frameworks (I've developed Wicket applications, and I have the same complaints). EDIT: Wicket does a better job than JSF on this point: &lt;div wicket:id="thumbnails"&gt; &lt;div&gt; &lt;img wicket:id="image" /&gt; &lt;div&gt; &lt;div&gt;&lt;span wicket:id="caption" /&gt;&lt;/div&gt; &lt;/div&gt; ListView thumbnails = new ListView("thumbnails", thumbnailsDAO.getThumbnails()) { protected void populateItem(ListItem item) { Thumbnail thumbnail = (Thumbnail) item.getModel(); item.add(new NonCachingImage("image", new AbstractReadOnlyModel&lt;DynamicImageResource&gt;(){ public DynamicImageResource getObject() { DynamicImageResource dir = new DynamicImageResource() { protected byte[] getImageData(Attributes attributes) { return thumbnail.getImage(); } }; dir.setFormat("image/jpeg"); return dir; } })); item.add(new Label("caption", thumbnail.getCaption()); } }; add(thumbnails); Ridiculously more verbose than JSF (a complaint I have about Wicket), but at least Wicket makes more sense (consistent to its component model).
Now this is something we can both get excited about henk. :) It seems like Wildfly is moving at a very fast pace. Do you have any idea for when JBoss EAP 7 might get released based on previous JBoss AS / EAP release schedules? 
I am an emacs user but eclipse make things so much easier in java so eclipse + emacs bindings for me. I could setup emacs to make it like an IDE but I am just too lazy ...
I have applied my usual method to it that I use in games (was super useful for [Receiver](http://store.steampowered.com/app/234190/)): I remapped the keys, which motivated me to use them more, and they were in places where I could find them easier with "my logic".
http://docs.oracle.com/javase/tutorial/uiswing/ It all comes down to a few specific tricks that you use all the time, which are also easy to memorize (once you know Swing). SwingUtilities.invokeLater (Concurrency!), ... extends JFrame, ActionListener, ItemListener, ...Listener, setLayout (usually BorderLayout/GridLayout), setBorder(BorderFactory.createEmptyBorder(a,b,c,d)), ...
Looks like the latest link for that is here: http://plugins.jetbrains.com/plugin/?id=4455
&gt; (not sure if Eclipse has all of these?). It does.
&gt;Installation is sometimes trickier for new students, and Eclipse is not as pretty or easy to use as Netbeans. If you have issues installing Eclipse I feel like you should maybe consider the Business Administration field over Computer Science ... I know that sounds arrogant and assholey, but, I mean... let's be realistic... Am I wrong here? 
[But real programmers use butterflies!](https://xkcd.com/378/)
Get a cheap (used) copy of Robinson and Vorobiev's 2nd edition "Swing" book.
I'm sure Intellij is just as good for a beginner, most of the functionality is there in both products. I might be slightly biased, as I've used Java mostly for Eclipse RCP projects and plugins ;-)
I second exactly this. Doing server-side rendered html is soo 10 years ago.. AngularJS is absolutely awesome and you can't touch the productivity boost that this architecture provides you. Using tools like grunt/gulp+livereload you can see changes as soon as you press the save button, browser will auto-refresh. Then with requirejs / minifers you can reduce your front-end footprint and serve it off a CDN like CloudFlare/CloudFront. Using revisioning (see gulp-rev-all) you can request client browsers to cache static assets for long periods of time so subsequent visits are always cache hits. No wasted bandwidth having your backend serve presentation layer that is 90% static. Then for your backend you can focus purely on reusable REST endpoints that are rigerously tested. see RestEasy + Arquillian. PM me if you want me to help bring you up to speed.
Try following one of the Struts 2 Hello World tutorials you can find via Google such as http://plusminus.hubpages.com/hub/How-to-create-dynamic-web-project-using-struts2-and-Maven-in-Eclipse-IDE-or-Spring-Tool-Suite-IDE. After successfully running the Hello World application, try to dissect the application and experiment a bit to see how things are glued together. Depending on whether you use MSSQL, MySQL or any other database things should be pretty abstract for the developer. Depending on your database you will need a different JDBC driver in order to connect to the database. The connection string will also vary depending on the database you're using but examples of connection strings can easily be googled. You can follow http://docs.oracle.com/javase/tutorial/jdbc/overview/index.html for the basics on connecting to a database using only JDBC. 
&gt; Calling responseComplete is not entirely safe. You must call it from the correct phase, and it must not have been called by a previous listener. I don't think this is true. I haven't tested this, but I'm pretty sure al responseComplete does is set a boolean to true. At the end of the phase JSF checks if the boolean is true or not. &gt;Not, it's not. And that is the fundamental point. In HTTP, the browser invokes GET request on the URL for the page and the browser invokes a GET request on the URL for each image. That GET request is directly mapped to the controller method. No mess. No state. &gt;Your JSF example is inherently messy because you have to check the state and select the appropriate course of action. I don't agree with this. In the JSF version both requests are a GET too. The annotaton he used is `@Model` which is stateless (stereotype for a request scoped named bean). There is no checking of state in the JSF version. Both versions trigger logic based on what the request URL looks like. In your version the switch is on `/[id]` while in the JSF version its on `?image=[id]`, but that's a minor detail. &gt;namely that you are overloading a view and subverting the rendering process. Doing something based on request parameters is a completely valid approach. The view is not overloaded but the URL path is re-used. You are really overloading the URL as well. You are just obscuring what is a request parameter as a path segment. Now JSF doesn't have a feature to extract a path segment, but you can use PrettyFaces for this and I think there's a feature request on the OmniFaces tracker for that too. &gt;There's a reason why declarative code is inherently safer and less complex than imperative code. Maybe we should just all program in Clojure then ;) 
CTRL+N &amp; CTRL+SHIFT+N.
Don't learn Swing, unless you have to. Or learn, but not be so focused on it, because small desktop apps is not what java is best for. Consider you prefer back-end stuff (servers, transactions, databases handling etc.) or front-end (as you said - you love GUIs): JavaFX, vaadin (we use it in our company) or more universal: just java-script (angular.js/blackbone.js), css, html, maybe bootstrap. You can make awesome GUIs using it.
You should probably go with JavaFX since it's the newer framework. For Swing you could go with http://filthyrichclients.org/ which is a great detailed text on the subject. There are a bunch of books on JavaFX - but I'm still waiting on a JavaFX 8 book. 
&gt; Just use the IDE to write code, and don't install all the zillion plugins Eclipse has (e.g. for SVN or git) Eclipse comes with a Git plugin already, and it can't be easily uninstalled.
I've used Java, Maven, Hibernate, etc. with MS-SQL, MySQL, and various others. The only significant differences between MS-SQL and MySQL are how you create a database and connect. Perhaps you just need a MS-SQL tutorial? Here is all you need to know about MS-SQL: http://mvnrepository.com/artifact/net.sourceforge.jtds/jtds/1.3.1 (Driver) http://stackoverflow.com/questions/1862283/help-me-create-a-jtds-connection-string http://msdn.microsoft.com/en-us/library/ms186312.aspx (create a DB) http://msdn.microsoft.com/en-us/library/ms187752.aspx (data types) Also keep in mind with tutorials based on Linux: * Linux path separator is ':'. In windows it's ';' * Linux directory separator is '/'. In Windows it's '\'
Head First Java recommends using notepad and the command line to compile your code until you're fluent in Java. That gives you a chance to work out your own mistakes instead of an IDE flat out telling you what's wrong. 
Or just set the response to text/plain for the specific controller methods that are affected by this bug (I've only seen it for AJAX file upload). IE barfs at application/json, but none of the other browsers (Firefox, Chrome) care if the response is text/plain.
I don't even know what those key combination does, but my muscle memory tells me I'm using them all the time nevertheless. Funny how the memory work.
Exactly.
Thanks, Still waiting for javahelp to let me post. Timed out. Can't post the code for this one I'm afraid, it's for an assignment. Would like to understand the reasons why this could happen so I can go over everything and find the root. 
&gt; But i dont suggest to rely on other system tolerance for wrong content &gt; types. I would suggest YAGNI. You aren't going to need to worry about content negotiation. Unless you do. For AJAX file upload, 99% of people are not.
thanks for the reply :) Yeah i have been though that tutorial before and found the most information I can with struts and go it working. The bit im struggling on is the DB calls. The code just dont seem to match up with what i am expecting in the code but Im going to just keep dissecting. Thanks again :)
thank you very much too! I shall check out the links and see if I can match to what is in the code. thanks again :)
There's always some guy on the team that writes incredibly tiny micro-classes. Sure it might adhere to "single responsibility" better, but does it make the code understandable? Have there been studies that prove that splitting responsibility up too much is a bad thing? Or is it just me that's off base here? 
No, it doesn't sound arrogant and assholey, you ARE an arrogant ass hole.
&gt; To prevent PhaseListeners doing their stuff when responseComplete &gt; has already been called you could check &gt; FacesContext.getResponseComplete. We once in a project used a &gt; super class PhaseListener that automatically checked this. Yup, this is what I did as well to solve the response already committed exception. And this is exactly why I dislike JSF. You have to constantly be aware of state, because shared mutable state is flowing through many different layers. Note, this is not only a problem with JSF. Struts 2 (a request oriented framework) has the same problem. A mutable action class which is mutated all the way down the interceptor stack. &gt; I remember being on a Spring MVC project (I did the business code, &gt; so don't know too many details), but the problem was that Spring &gt; MVC generated a lot of intermediate garbage before control reached &gt; the controller method. I would be very curious what garbage you are talking about. I am very familiar with both the JSF (Mojarra) and Spring MVC source code (I've debugged both to try to understand what is going on). JSF is far "worse" because there is a lot more complexity than what Spring (which is mostly reflection for parameter injection and bean property population). &gt; The dummy object that you showed is terrible. This is more than likely a consequence of the way PF implemented GraphicImage as an extension of the HTML GraphicImage, and there is probably a good reason why OptimusPrime implemented the API that he did. I trust OptimusPrime's judgement more than I do henk53's. &gt; POST RESTORE VIEW always executes in POST RESTORE VIEW, but I &gt; do get your issue that there are more things that can execute there &gt; and it may not be immediately obvious if you are the first and last in &gt; the list. This is precisely why shared mutable state and imperative, sequence dependent code cause so many problems. JSF has so many things going on (events and phases and different things being mutated at different times), state management can become a circus. &gt; Filters do have ordering issues as well Those ordering issues can only come about *if* there is shared mutable state. The thing about filters is that, regardless of order, if you commit the response, you should not continue down the chain (that is an explicit action). Very simple. Unlike JSF, which has to finish processing the entire phase. I would contend that Spring Security's issues are caching issues, not filter issues. They explicitly added state (a cache) for performance. If you don't write code like that, you won't have those kind of problems. Basically, *you* have to provide the gun to shoot yourself in the foot, whereas JSF is armed to the teeth. &gt; If I'm not mistaken a Faces Request is a postback. EDIT: see [here](http://docs.oracle.com/javaee/5/tutorial/doc/bnaqq.html): &gt; The life cycle handles both kinds of requests: initial requests and postbacks. When a user makes an initial &gt; request for a page, he or she is requesting the page for the first time. When a user executes a postback, he &gt; or she submits the form contained on a page that was previously loaded into the browser as a result of &gt; executing an initial request. When the life cycle handles an initial request, it only executes the restore view &gt; and render response phases because there is no user input or actions to process. Conversely, when the life &gt; cycle handles a postback, it executes all of the phases. No. All I can suggest is that you read the JSF spec. The URL is used to locate a view by the ID that is parsed from the URL (or whatever resolver is in place, I think PrettyFaces does something very different than out-of-the box JSF), which is used to load the view. The component tree is constructed from the view definition, which wires up the managed beans eventually triggering the @PostConstruct. You can bypass the creation of the component tree by triggering an event using f:metadata in the view to hook pre-execution of the phase. I'm surprised that henk53 didn't use this approach since he harps on it all the time. &gt; JSF does support this Of course it does. JSF gives you access to the raw response. I am merely contending that my way is safer. I never said it was a "cheat", I said it was a "hack". That is, PrimeFaces has written a well-tested library function that isolates you from directly manipulating the response, providing an overall safer approach. &gt; I don't see the big difference between several filters executing in an &gt; unknown order and several phaselisteners, except for the fact that a &gt; filter can indeed abort the chain directly and a phaselistener can't. That last part is all the difference in the world. On top of that, filters don't necessarily involve mutable state. Spring MVC certainly doesn't (out of the box, not talking about plugins like Spring Security, which is a beast), unlike JSF (with managed beans mutated across phases) and Struts 2 (with actions mutated across interceptors). Not aborting the phase doesn't even scratch the surface of the real problem. 
And don't forget code generation; just source &gt; generate getters and setters has saved me oodles of time already.
&gt; It seems to be that most people that use a text editor are working on something rather low level. Nope. Most of those people simply don't know any better. An IDE is nothing but a superpowered extendable text editor. It makes no sense to not use one even for low-level stuff.
An IDE tells you exactly the same as the compiler does. It just tells you before you compile stuff instead of during. I strongly dislike methods that advocate starting in a simple text editor: it doesn't teach you anything other than running javac and switching back to find the mistake you made. During my CS education we were forced to use simple texteditors. When I found out about Visual Age for Java I never went back.
Not all of this is because Java sucks. Some of this is because the java community hasn't evolved or thought sensibly about their problems. &gt; private methods can be made internal and use InternalsVisibleTo if you need to place your tests in a separate "package" or rather assembly. Of course none of that is available in java, because it's 1990, or rather because it's 2014 for everyone except java who still thinks it's 1990. Oh you mean like package private? But we don't use that because... ermm yeah we have no goddamned good reason not to, but we don't &gt;TradeMessageBuilder is completely unnecessary. If you want to keep the TradeMessage class immutable, you can place these "builder methods" as static methods in the TradeMessage class. You can already do this, we don't allow Builders like the one shown in my workplace and I really hope the Builder pattern dies altogether.
And having not enough leads to unmaintainable messes that are not extendable.
Without the actual code all we can do is guess... &gt; Would like to understand the reasons why this could happen so I can go over everything and find the root. The exception tells you the reason: you're accessing something through a variable/field/parameter that is is not attached to an object. Apparently you're initializing the array - but the variable that you're later accessing it by doesn't point to it. Maybe you're running into a scoping/shadowing problem in your constructor (e.g. a constructor parameter that has the same name as a field of the class).
I don't think this guy understands what "responsibility" means in the context of SRP. &gt; Now in the most extreme enterprise-y madness, we could write one &gt; class for each of those “responsibilities”. However, that’s plainly &gt; ridiculous in this case (although add in error handling or some &gt; attempts at code reuse and you’d be amazed how quickly all those &gt; extra classes start to look like a good idea). Would those responsibilities make any sense outside of the context of the parser? Do they have separate reasons for changing? If they don't, they form a cohesive whole and thus obviously belong in the same class. &gt; Now – there’s an issue test driving this class – how do I test all these &gt; private methods? I could make them package visible and put my &gt; tests in the same package, but that’s nasty. Or I’m forced to test &gt; from the public method, mock the builder and verify the correctly &gt; parsed values are passed to the builder. This isn’t ideal as I can’t &gt; test each parse method in isolation. Suddenly making them separate &gt; classes seems like a better idea… Um, no. Those private methods are tested by executing the parse. Did no one send this guy the memo that you test features in isolation, not methods? Oh boy, this list of classes: &gt; TradeMessage &gt; TradeType &gt; TradeMessageBuilder &gt; ITradeMessageBuilder &gt; CSVTradeMessageParser &gt; Asset &gt; AssetRepository &gt; IAssetRepository &gt; TradeMessageBuilderTest &gt; CSVTradeMessageParserTest &gt; AssetRepositoryTest First, the "I" naming convention? Seriously? Second, you can mock or you can stub. And if you mock, this is 2014. You can mock concrete classes. Third, if you write tests, obviously you will have more classes. He's cheating here by including both tests and source in his "implementation". His "solution" at the end is to properly apply the Single Responsibility Principle. Organizing highly cohesive functionality in the same class and organizing loosely cohesive functionality into separate classes, which is exactly what SRP tells you to do. Sheesh.
This link should hit the spot, because it enabled me to implement individually-salted password hashing in my Java library in no time: http://crackstation.net/hashing-security.htm
&gt; I don't think that anyone could argue that using an IDE can't make you more productive. This is clearly a minority position, but for me personally this is an easy argument to make. I started out programming in IDE's back in the late 80's, and have used both editor and IDE-based environments off and on ever since. I continually find myself drawn to editor based development. Here's why: * The IDE introduces a bunch of extra code that might break or act strangely. I've been burned enough by this over the years that I'd rather avoid the mess entirely. * Emacs is my editor of choice, and I've gotten very used to the keybindings. On my OSX machine, Cocoa uses Emacs keybindings throughout the UI and they are absolutely pervasive. On all my machines, I usually have access to a bash shell which (thanks to readline) also uses Emacs keybindings. These keybindings match the way I think about editing text and are mostly already embedded in my muscle memory. There's a lot of value to me in having a consistent and powerful set of keystrokes for editing text. (Yes, I know this is a lot about 'me', but note that I'm not saying everyone needs to use Emacs, or vi, or whatever.) * Emacs is pretty small and is cross platform enough that it runs everywhere. This makes the time I spend learning and customizing Emacs pay off in the long term. (ie: I have Emacs customizations that predate even the existence of Eclipse or Idea. I may have had to spend time developing those customizations, but they've had &gt;20 years to pay for themselves.) * To get easy access to documentation and reference source code, I make extensive use of external tools. Ack and grep are excellent for finding symbols in source code, it's easy to download source packages for external software (including the JVM), and I always have a chrome window that's no more than a keystroke away. (Using dwm for my window manager is helpful for this last bit.) Along those same lines, Emacs makes it easy to integrate external tools. * I used to use GitX and gitk a lot for graphically inspecting commit histories. I've since replaced them with a few git aliases that use specific git command line options to present a graphical view in a terminal. It's not quite as pretty as the GUI tools, but 'less' makes it easy to search and it doesn't involve opening another window. Also, using the command line to manipulate git lets me maintain a looser relationship between the versions of files in memory and the versions of files on disk. This can be dangerous, but I've found it to be useful in specific circumstances. * I find autocompletion more useful when writing code against API's with [large numbers of parameters](http://msdn.microsoft.com/en-us/library/windows/desktop/ms632680\(v=vs.85\).aspx). Java's pretty good in that regard, so having the Javadocs in a browser is good enough. For my own API designs, I find that lack of autocomplete it tends to help me produce more readable API's. * Debugging falls under the same category as autocomplete. The lack of a debugger tends to focus my attention on better log messages and a better overall understanding of the code. Both of these things are useful when the code is deployed, and you might not have access to a debugger, etc. * For everything else it does, Emacs is an excellent text editor. Just a few of the techniques I've found hard to replicate are: `edit-occurs-mode`, editable dired mode, and keyboard macros. (Keyboard macros are uniquely powerful in Emacs because everything in the environment is presented as editable text.) * I tend to write command line utility programs that help automate aspects of whatever system I'm building. Working in an environment that's closer to the command line makes it easier to develop and use these kinds of tools. &gt; You would have to configure all of the components to work together but just "knowing" what to do. You would have to remember what every setting is, every binding, every annotation, everything. You would have to know everything that an IDE knows. Here's a anecdote that speaks to why I tend to shy away from IDE's. A few years ago, I was on a project that was making extensive use of a Java middleware technology. The software worked, but it didn't really match our problem space. As a result of the mismatch, we tended to wind up with a huge amount of source code that didn't really say a whole lot. This made it was easy to make mistakes and difficult to introduce abstraction layers. Code quality and productivity suffered. The way we fixed this was to rip out the middleware and introduce a small custom DSL that more closely matched our problem space. This produced huge benefits to both the reliability of our code and our ability to understand what we ere doing. (Both of these things are related.) Looking at this from an IDE-centric point of view, the IDE didn't help us make the design change, and the design change produced a DSL that the IDE didn't understand. So... the IDE didn't help and served as an obstacle to a productivity improvement. I'm not saying that this is always the case, but just that it's certainly possible that an IDE closes more doors than it opens.
I dabbled in Lift for an afternoon. I can see why people like it, but I don't really care too much for Scala. Not sure why really.
Yeah I'll agree that Java in its current form sucks. I use Scala or python for most of my development not at work. Just wanted to point out part of Java's problem is it's community. Hell there's been a number of anti lambda articles since it was added, so even trying to play catch up is met with flak and resistance.
&gt; Syntax errors are highlighted instantly, that would otherwise take an annoying compile-wait-error-fix-save-compile cycle, and so on. The easiest way to avoid this problem is to avoid making the syntax error in the first place. This is going to sound harsher than I want it to, but if you can't take the time or care to avoid making the (easy to detect) syntax error, how can you trust yourself to avoid making (hard to detect) semantic errors? When I'm working with people, I don't really care if they or I make a periodic syntax error: the compiler will check and detect it automatically and quickly. Where I do care is if they forget to close a file (or whatever) in some weird edge case that'll cause a support issue and phone call at 3AM. 
&gt;I would be very curious what garbage you are talking about. When a lot of requests were done, there was a high amount of CPU resources dedicated to garbage collection. I wasn't in the exact team that investigated this, but I did found a reference to it: http://www.jsfcentral.com/articles/understanding_jsf_performance_3.html It's in the graph labeled "Objects allocated in thousands for a fixed load in Booking Application". Spring MVC with Thymeleaf is on the far right and according to this test allocated ~6 times the amount of objects JSF did. &gt;I trust OptimusPrime's judgement more than I do henk53's. Maybe, but I also saw BalusC writing on SO that Servlets are the best mechanism to do user defined resource serving (like images from a DB), while Optimus Prime says Servlets are an ancient mechanism. Now do we trust Optimus Prime's or BalusC's judgement more? &gt; I'm surprised that henk53 didn't use this approach since he harps on it all the time. He did mention the approach as an alternative ;) &gt;Those ordering issues can only come about if there is shared mutable state The response is always a shared mutable state. And you can also get into trouble if a forward has been done by some filter and another was supposed to have executed before that. &gt; No. All I can suggest is that you read the JSF spec. Chapter 2: *Faces Request—A request that was sent from a previously generated Faces response. Examples would be a hyperlink or form submit from a rendered user interface component, where the request URI was crafted (by the component or renderer that created it) to identify the view to use for processing the request. Another example is a request for a resource that the user-agent was instructed to fetch an artifact such as an image, a JavaScript file, a CSS stylesheet, or an applet. This last scenario is considered a special case of a Faces Request and will be referred to as a Faces Resource Request for the remainder of this specification.* I have to say that after reading this again I'm still slightly confused. It's not that a request TO a JSF view is a Faces Request, since that's covered via "non-faces request generates faces response". &gt;with managed beans mutated across phases I've used JSF a lot but didn't run into a lot of problems. The managed beans do get their state mutated in a well defined order.
To me this seems like an issue with the design of your solution and not an issue with keeping unit tests moved to their new appropriate home. That's not to say refactoring isn't necessary, but I think a lot of this might be alleviated by designing your solution up front first. Of course, I can't see your solution so maybe it's designed perfectly well. But with the information you presented that's what I would lean towards.
Lot of classes say nothing about code quality or the ability to understand the code within those classes. 'Understanding code' is also very subjective. The important thing is to break down complexity in verticals. Only this way, complexity becomes manageable and better to understand. From the outside, the vertical should provide a good interface, that hides the internal complexity. The article is bad, because it generalizes a problem that can not be generalized. The author failed to ask for the other motivations for which all the classes of his trading application are created and just says, that he does not need all the classes. From his perspective, he is probably right. From perspectives of other motivations, he will be wrong. tldr: Architecture is defined by motivation. And that motivation is defined by the outside. The author just outlines one possible motivation (requirement) and figures that an architecture of multiple classes with separated concerns is not the best solution.
It's not designed *at all*. Not even a bit. It's dirty, nasty code that has grown over years with ever-changing requirements. We're doing out best to stay on top of it and I am asking for your advice. "Do it differently from the beginning" is not an option ;)
In that case there's no problem. You were saying stuff 'moves around' and unit tests 'stay behind'. Renaming a single class has never been an issue. You just have to remember to rename the unit test too: but not doing so is just being sloppy. That's what pull requests are for: others slapping you for being sloppy :)
Pull requests. My sibling, this is not a luxury that we enjoy. As for being sloppy: "maybe if we had more time"
I remember they told us to use this in university. I told a programmer friend of mine and he laughed at me. I started using Netbeans after, which was a huge advantage. Now I'm on Eclipse.
&gt; As for being sloppy: "maybe if we had more time" I tend to find that sloppiness feels faster in the short-term, but is much slower in the long-term. 
I think so too, but there's nothing that I can do about it.
Absolutely, but there's nothing that I can change about how we develop. I can however try to use software to get a grip on the problems.
[JetBrains IntelliJ IDEA](http://www.jetbrains.com/idea/) is probably the best java UI but it's not free, so if your company can get you a copy you will be very happy with it. I used Eclipse for about 12 years and when I tried IDEA, I decided that I will pay for my own personal license since it's what I do for a living and it's so much nicer of an IDE than eclipse in almost every way.
This is often a result of someone applying patterns for everything (even when not needed). I worked in a place where to make any implementation class you had to define an interface, interface for an abstract factory, concrete implementation class, and concrete factory for the concrete class implementing the interface. Thousands of classes where few hundred would have been fine. The perm space limit of the JVM was always being increased.
I'm going to trust that a guy building something as low level as a special purpose file system knows what he's doing.
Obviously I can't force your hand in anything but my advice would be to actually sit down with the other developers and take a few weeks to 'straighten the ship' as it were. It will save you gobs of time. That being said, while I'm not sure of any tools designed to move your unit tests around for you, you might be able to leverage code coverage tools to potentially see if you've missed moving a unit test. If you run the coverage tool on a single projects unit tests, you might see "ClassA" has no coverage but you expected it to. This would clue you into the fact that your unit tests didn't get moved to the new project. http://www.eclemma.org/ Another tool worth using is SonarQube. It won't particularly help your noted issue, but it may show you other things worth rectifying. http://www.sonarqube.org/
Lead by example, if nothing else.
Are you storing passwords so that your users can authenticate with your system? (hint: hash) Or are you storing passwords so that your system can authenticate with other systems on behalf of your users? (hint: encrypt)
Ideally, you want to store a hash of the password. Many examples will tell you to use an MD5 digest, which is great for examples, but is not the best as far as security. basically, the idea is that you store this hash in the database, instead of the plain-text password. When someone logs in, you let your hashing algorithm eat the incoming password, and compare its result to what's stored in the database. If the hashes are the same, the password is a match. The reason behind this is that you can't extract the original password form the hash (theoretically). I someone breaks into your database and tries to use the hash in the password field on your site, it won't work. Check out the different hashing algorithms and find something that's stronger than MD5. NEVER store plain-text passwords.....EVER!
Never mind that the bits and instructions are exactly what all programming is used to create, and the entire reason we program. They probably don't matter. Hey let's see what color schemes our IDE can do. Pretty! 
Thanks to you, I googled the right thing: "eclipse jump to unit test" will lead to [MoreUnit](http://moreunit.sourceforge.net/), which looks great.
You'd be surprised.
From the same paragraph you first quoted: &gt; IDEs and syntax highlighting interfere with that pattern recognition. Folding features hide it altogether. I didn't think that needed any padding. I was clearly wrong. When you're examining the shape of the code, all the decorations that an IDE provides are distracting. Syntax highlighting, even subtle highlighting, pulls my eyes away from the macro and down to the micro. Is that clear? I want to see the "big picture" in terms of shape recognition, and colors and breakpoint dots and line numbers and borders and syntax alerts and underlining all take away from that. Folding, to me, is just an unjustifiably silly feature. Also, the default, non-vi-like editing modes of IDEs slow down my process. Then from the next paragraph: &gt; With regard to code completion... I already described why we avoid code completion, but I'll add that I've never seen that feature presented in a way that helps more than it hurts. For every one instance where code completion is helpful, there are dozens of instances where it obscures other code that I want/need to see. To me it's just "Clippy the Paperclip" getting in the way of my work. I despise jumping through configuration hoops to bend IDEs to my will. My POTE behaves *PRECISELY* the way I need it to out of the box, so that's what I use. I'm not demanding that you or anyone else approach development the way I do, I'm simply stating why *I* approach it this way, and that a non-IDE development approach might be uncommon, but is justifiable. So, I had already explained "how on earth" it depends on the IDE. You cherry picked sentences out of my comment and ignored the relevant ones, which indicates that your actual purpose might have been to make me seem stupid and argumentatively incomplete. Hopefully, that wasn't the case. I hope I have guided your eye to the actual arguments I did make, have added more, and also treated you with a sense of anonymous respect that it feels like you failed to show me.
Real programmers worry and ponder on code design, abstract algorithm design and architecture. Whatever is happening beneath that (specific language environment, the native environment) is a means to that end.
Here's what I would do: establish/document a process for refactoring. Any time you move/rename a class, try to open OldClassNameTest, then move/rename that one as well. Just put the documented process in a commonly-accessible place, and make sure all the developers know to follow that process. 
&gt; Obviously I can't force your hand in anything but my advice would be to actually sit down with the other developers and take a few weeks to 'straighten the ship' as it were. It will save you gobs of time. I know that. I believe in that. I've tried to do that. There's just no time. FYI, there actually is a tool that renames/moves unit tests during refactoring: http://moreunit.sourceforge.net/. "eclipse jump to unit test" were the magic words. Bot EclEmma and SonarQube look fantastic, thank you.
It sounds like it will move the unit test to a new package but I don't think it will move it to a new project. Although maybe that isn't a need you have.
Nothing you mentioned has ever interfered with me accomplishing things in Java in my ~12 years of experience. From a neutral standpoint in terms of functionality, IntelliJ and Eclipse are both ahead of Visual Studio (which I've used for several 100k+ LoC projects). I find myself gravitating towards Java for most projects because of portability and how efficient I am with it. C# is great too and there are definitely things I like about it more than Java, but bashing the most widely-used programming language in the world as "retarded" just makes you sound retarded. 
&gt; The IDE introduces a bunch of extra code that might break or act strangely. WTF. Which IDE introduces extra code? All IDEs I've ever used only saved the code that I actively created. 
I can tell you [how not to store a password](https://www.youtube.com/watch?v=8ZtInClXe1Q).
&gt;Dude. I know what a property is. Then you know they are nothing special, just a way to reduce written code. &gt;It lacks proper operator overloading This was a purposeful design choice. I have worked heavily in C++ and not being able to know what c = a ^ b means because you don't know how the operator was re-written was painful. Is that being used as a exponentiation operator between two integers or are **a** and **b** instances of a Vector class and that is implementing a dot product or cross product? Don't know. But if I see c = a.cross(b) I have a pretty good idea what that means without finding the source code for the definitions of the classes to see what the developer did. So what you consider "crap" I consider easier to maintain code. &gt; I don't care about inner classes or any other horrible hack made to compensate for the language's retardedness. What horrible hack? How are inner classes any more a hack than any other form of anonymous function (i.e. lambda)? The do exactly the same thing. &gt;BTW, calling language features "syntantic sugar" shows a retrograde mentality (typical of java developers who refuse language evolution) From the Wikipedia article on C# http://en.wikipedia.org/wiki/C_Sharp_(programming_language): &gt;C# provides properties as **syntactic sugar for a common pattern** in which a pair of methods, accessor (getter) and mutator (setter) encapsulate operations on a single attribute of a class. No redundant method signatures for the getter/setter implementations need be written, and the property may be accessed using attribute syntax rather than more verbose method calls. (emphasis mine) Well I would say continually saying a language **sucks** or calling all the features it has that you just don't like the format of **crap** shows nothing but pure language bigotry. We get it, you like C#, but that doesn't make Java a lesser language. &gt;Everything is "syntactic sugar" over machine code, You are exactly correct, but I didn't say syntactic sugar was good or bad, did I? What I pointed out was that you were arguing something being a *modern* feature that is nothing more than a built in macro. So a language doesn't have a short cut built in for you and you may not like the language, you may not like the way it is implemented, but that doesn't make it bad or wrong. &gt;except it doesn't even have properties As already stated, properties are not something new or amazing, they are simply short cut definitions of field members. People have done "properties" using the C++ pre-processor and macro definitions for years. This is not something that could not be added into the compiler, but why is it needed? Consider that early on there was a strong emphasis on component type programming that helped drive the Java beans approach. That approach set down a standard for field access using the **get** and **set** paradigm as a way to standardize code to make it possible to build tools and common reflection usage that could for the most part expect to find specific method names. Get back a reflected method named **getAge** or **setAge** and your tools can assume the class has a field name *age*, even if the field is a calculated one. But you know it exists and can auto-wire connections to it if you like. What method name gets created on-the-fly for a property? How do you know what to look for when reflecting? &gt;struggles to get things in place other platforms had 10 years ago. Java's been around a bit longer than 10 years with a much large install base than C#, so backward compatibility has to be taken into account, something many large enterprises rely on. C# didn't have generics from the beginning, that was introduced in version 2.0, properties and lambdas in 3.0, so they had the ability to make a fundamental change to the underlying system that Java could not make. For the most common use-cases of generic programming, things like being able to have type safety when creating containers like List&lt;T&gt;, Java's approach works just fine. If you absolutely need to know the type of the contained element then you may need to add some additional RTTI to your containers or use a different model. So C# has generics which basically create new classes on the fly, C++ has templates which create new source code to be compiled and Java has generics that can be used the same way but lose some type information. &gt;That bullshit "default methods" is retarded, a violation of OOP which allows to put executable code in interfaces which are by definition, contracts and should not contain any code. Another horrible hack to compensate java's crappy stupid useless backwards compatilibity model that completely cripples proper evolution. You may not think backward compatibility is a major issue but I can assure you that in the very large businesses that use Java to run mission critical systems, it is. If it wasn't such a big deal then we could all just move to the next big *modern* programming language when it comes out. So the **defaults** model was put in place to provide a smooth evolution between traditional, existing and heavily used interfaces and the new lambda syntax. &gt;Show me whatever java stuff that can match C#'s async/await... please.... Guess you've never read about the **java.util.concurrent** package of functionality that has been in the JDK since 1.5 in 2004 whereas the C# Async methods didn't show up until 2013. The example of **async** in the MSDN shows: async Task&lt;int&gt; AccessTheWebAsync() { HttpClient client = new HttpClient(); Task&lt;String&gt; getStringTask = client.GetStringAsync("http://msdn.microsoft.com"); DoIndependentWork(); string urlContents = await getStringTask; return urlContents.length; } void DoIndependentWork() { resultsTextBox.Text += "Working.....\r\n"; } and using Java **Future** (example uses the Apache HTTP Client library) int accessTheWebAsync() { HttpAsyncClient client = new HttpAsyncClients.createDefault(); HttpGet request = new HttpGet("http://msdn.microsoft.com"); Future&lt;HttpResponse&gt; future = httpclient.execute(request, null); DoIndependentWork(); HttpResponse response = future.get(); //same function as await String urlContents = new BasicResponseHandler().handleResponse(response); return urlContents.size(); } void DoIndependentWork() { resultsTextBox.setText(resultsTextBox.getText() + "Working.....\r\n"); } &gt;Show me anything that can be compared to Visual Studio.. please... What specifically is it about Visual Studio you consider so far above and beyond other tools? What domain are we talking about? Visual Studio only runs on Windows, Visual Studio is designed for working with Microsoft languages, platforms and tools, but what about Mac developers or Linux developers? What about working in languages that VS doesn't support? In the Java world you have Eclipse, Netbeans and IntelliJ just to name 3 that for many developers are considered superior. I don't generally find a need for an IDE over a code editor but when I do I like Netbeans. Very flexible, very extensible, designed to work with not just Java but other tools as well (C and C++, PHP, etc). Ever taken a look at the [Java Monkey Engine](http://jmonkeyengine.org/features/introduction/) OpenGL gaming engine? They built a full game editor atop Netbeans. I'm not aware of any projects that enhanced, extended and shipped a copy of VS with their product, but I haven't really looked. It is obvious from your posting you just hate Java, which I find common among Windows/C# developers who like to forget C# was a Microsoft reaction to having their hands slapped in the lawsuit where they attempted to *extend* Java with Windows proprietary hooks. Microsoft decided to compete with an already established language/platform and had the benefit of experience with Java to start fresh. Good for them. But, as is typical Microsoft, they designed it to lock developers to their platform. If I want to run Java code on my Windows PC I can. If I want to run it on any of the Linux or BSD distributions I can. If I want to run it a OS/9 or HPUX or Solaris or, well you get the point. So Java is a solid, time-tested platform that grows as needed while allowing me to continue to leverage my legacy investments. When my operations staff told all the teams that they had to move any applications still running on Java 1.5 (and some older 1.4 ones) to a supported VM, in some cases we simply replaced the JVM and did a round of testing, in a few others we did a recompile and corrected any language feature changes that were needed. But if *being a modern language* is such a big deal, you always have the option to program in Clojure or Scala or Ceylon or Groovy or any of a couple of dozen other languages all running on the JVM all taking advantage of the large ecosystem that Java the Platform provides. 
Since I am learning java as well, without looking at any previous solutions I would say this may be the least amount of code: for(int i = 1; i&lt;=6; i++){ for int(j=1; j&lt;=3; j++){ System.out.println(j) System.out.println(j) } } Uses the same easy duplicated print statement, but just reduce the overall times the loop has to run to make it end up with 42 numbers output. 
There are guys who put the test code into the code directly which would solve the problem (also there are tools which remove this test code when packaging for production). But I think this is more a tool problem. You should file a bug at your IDE its bug tracker.
Ok so creating a secure user database is really quite a task. not something you're going to get done in an hour, well at least not done properly. At the most basic level this system will require usernames and passwords. So we'll start with usernames. For usernames you can simply store them in plaintext. No one is really worried about their username's security. But, you can't just take a username and feed it into your database. You're going to want to strip white spaces off of the username so that there aren't a thousand trailing spaces. Additionally unless you want people to have to login with the exact capitalization of their username every time you'll want to run a tolower() on the username before you store it. If you want the username to be displayed somewhere as they entered it then you can save a stripped version of the username with their capitalization and then a tolower() version. It should be noted that whenever you are sending user input to a database you are going to want to escape the string. By which I mean you want to run a routine which will escape all of the special characters so that someone can't make their username a database command. Ok so onto passwords. For the password there is no reason to ever actually store the password. That's just foolish. If someone gained access to your database then they would already have all of the login information they need. What you want to do is store hashes of your passwords. But first you must process the password into something useable. You don't want to strip or tolower() passwords since the whole point is that they are known only by that user and are as random as possible. BUT, you're still going to want to escape the password before sending it to your database if you're database is going to do this stuff. Like I said, all user input should be escaped since there is really no reason not to do it and it prevents some sort of wonky injection attack. Ok now back to hashing. A hash is just an encryption technique which takes any input and outputs a "random" string of characters of a certain length. The thing about hashes is that regardless of the length of the input they always output a string of a fixed length. SHA512 for example always outputs 128 characters whether you feed it "a", "password", or "qweroiascdl,nasloidtru". That's part of the brilliance of the hash. But hashing is not as secure as you'd like to think. Because you can only output so many different possible strings, it is possible to assemble a complete list of every input and its output for inputs up to a certain length. These lists are called rainbow tables and they contain the hash of everything from "a" to "ZZZZZZZZZZZZZZZZZZZZZZ". This is where salts come into play. A salt is a random string of characters which you combine with your actual password to thwart rainbow tables. To generate a rainbow table of every possible character combination up to 200 characters in length would take forever, so they fundamentally cannot exist. To use a salt you first generate your salt, we'll say "qweroiuacdsnasdltriuatoihxc098734ljnacd87yjbn", and then you append it to your password: "passwordqweroiuacdsnasdltriuatoihxc098734ljnacd87yjbn" and then you hash it up. The odds that someone has a rainbow table for that combination is pretty low. So let's say the output of our hash was "ABCDDCBA". We now store this hash and in a separate column we store the salt. If someone were to access our database they would see &gt;User: Joe, Pass: ABCDDCBA, Salt: qweroiuacdsnasdltriuatoihxc098734ljnacd87yjbn To discover the password they would now need to hash every combination of characters with the salt to come up with one password. This as you can see is very ineffective. If it takes you 8 hours per stolen password then you'll just move on to another sucker. So now for the final part of this, the actual hashing algorithm. There are a multitude of hashing algorithms out there and some are better than others. MD5 is very common but it's incredibly insecure. It outputs very few characters which means there are a lot of collisions. In hashing collisions are two inputs which produce the same output. The problem with them is that if "password" and "drowssap" both hash to "ABCDDCBA" then someone with the password "drowssap" could log into the account of someone with the password "password". As you increase the number of output characters and start using salts the potential for collisions decreases but it always exists and is always a threat. If you're password is 1000 characters long but there exists a 3 character collision password then the security of your password doesn't matter because that three character password will unlock you're account when checked against the hash on record. The lesson here, more output is generally more secure. HOWEVER!!! There are still many differences in hashes. Some hashes, such as the SHA family, are designed to be fast. They are meant to be executed en mass thousands and thousands of times without bogging down the system. YOU DONT WANT THIS! You want an algorithm which is computationally slow. Using SHA256 encryption someone could attempt potentially billions of passwords on your system every day, it's that fast. But if you use a slow algorithm such as BCrypt then you can avoid this. BCrypt uses memory moves in its hashing rather than strict computation. These moves are slow compared to processor speeds. That being said, the hash is still so fast that your users will never notice. Only when someone is brute forcing your database and trying to run 10 billion passwords through the system will they notice that running 1000 passwords is now taking minutes on end rather than 2 seconds. Right now BCrypt and other memory based encryption algorithms are the best you can get for password security and you should definitely be using them. Just for one final note to round out this discussion: Why do the other fast algorithms such as SHA and MD5 even exist now? SHA and MD5 are commonly used for verifying file integrity. If you hash a file with MD5 before moving it you can hash it again after the move to ensure that it was moved without corruption. For this kind of scenario, especially if you're hashing megabytes or even gigabytes, you're going to want an algorithm which is speedy rather than slow. So that's just one reason why we continue working on these kind of algorithms. I hope this helps you on your quest. It's a respectable effort to build your own user management system but you really do need to be careful. You're going to learn a lot doing this but you should triple check yourself at every step of the way to ensure that you haven't left a security hole. 
yes. he needs a top-level pom that just has &lt;module&gt; definitions, and it would all work. Again, another example of people bitching about Maven without really knowing how to use it. 
not if your team uses a binary repository, and publishes snapshots there. If the published snapshot's date is later than any changes in your checked out repo, it will use that instead. 
This is why you always test the public interface of your classes. That *****is***** the unit. If you're using a builder that's doing crappy stuff, make the builder injected. Problem fucking solved. It's like people are trying to complain about unit testing and java. 
Depends on if they're being used as Value Classes or Records. These help reduce the universe of potential return values. A classic example is the String::compareTo. It's declared as an int, and you have to know that the only important values are &lt;0, 0, and &gt;0. But, the return space is all integers. If you just have an enum for greater, equal, less, then your return space is 3. There's a good case to be made, for example, having an EmailAddress type that extends string. But, it would provide methods that don't allow you to construct an EmailAddress if it's invalid, so it provides more safety to later use of the object. It's also why a lot of people are starting to use the Optional&lt;T&gt;. By default, every class that you return from a method has 2 options: Null or Not-Null. You have to test both of those cases. Optional&lt;T&gt; puts the onus on YOU to verify that you have a non-null value. It simply doesn't let you access the value without either handling the null case, or ignoring it at your own peril. This is what Haskell people love -- it's called pattern matching. There are no hard or fast rules here, unfortunately. It's a judgement call and years of experience and many failures. If you haven't failed at this, I don't trust you to not fail at this in the future :) 
It would be a bonus :)
with oauth, you don't even need the passwords. 
The point about hashes being one-way is crucial to note - it's why you should always be extremely wary about websites where the "lost password" functionality emails you your existing password. &gt; NEVER store plain-text passwords.....EVER! This includes outputting the String to the log files. There's also an argument to be made for dealing with [passwords as char arrays rather than Strings](http://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords), as it slightly reduces the window of opportunity.
&gt; Now this is something we can both get excited about henk. :) For sure :) 
Yeah, it turns out that was just personal experience then, I've edited the comment. :)
&gt;if you can't take the time or care to avoid making the (easy to detect) syntax error, how can you trust yourself to avoid making (hard to detect) semantic errors? When you read something you've written, you see what you intended to write, so such syntax errors are not as easy to detect as you make it sound. Typos during aggressive editing and refactoring will happen. If the IDE assists me in detecting and eliminating them quickly, I'll be able to explore different potential solutions to a problem faster, and have more time to check the semantics afterwards.
No, YOU suck you fucken troll. 
Do you remember why he laughed at you? I use Eclipse as well, but I thought it was a great starter IDE.
Like every statement that begins with "Real programmers...", not very well thought out.
FFS don't run it from the browser. if you build with target JVM 1.6 it will work on any JVM moving forward. 
Some context. We have two SANs from two different vendors, and their "programs" to manage them require using a web browser. They don't provide a standalone jar file.
In regards to your SAN management, Java 7 or 8 should work just as well. If it doesn't then it's likely the fault of the developers and not of Oracle. The 'update 45' is primarily a security fix update, as are almost all the 'update xx' so that specific update likely doesn't matter except of course from a security standpoint. For logging into your remote KVM you should be able to have Java 6 and 7 installed side by side. You might have some path issues going on that are pointing it to the Java 6 install instead of the 7 which it likely needs. From what I can tell Java 7 should suit your needs across all those systems.
Keyword: "Technical Debt"
We do have 6 and 7 installed side by side. However, the app only wants to see Java 7. We tried browser settings this morning, but didn't have time to troubleshoot (other huge issues needing fixed).
&gt; should work I think that's the point of the rant. They *should* work. They *do* not. (It might not be the most well placed rant, as this subreddit is more towards the Java Language, rather than the consumer side of Java.) But there still remains the fact that it's possible to write code that doesn't "run anywhere" with Java. And to someone outside of the ecosystem, that certainly looks like a problem with Java and not with that individual program.
It might not be in your browser settings but rather in your environment variables. Try checking your PATH if you're on Windows.
The poster may very well be correct in their assessment and the software they have may only run with very particular setup. But they may also just see "java 6 required" and give up or need to edit a config file of sorts that checks for Java 6 to be installed because the developer checks for 6 only and not 6+. There are numerous reasons why it may not work but there also may be simple fixes that need to be done instead. It sounds like they aren't familiar with getting their Java environment ready and may not know that 7 is mostly backwards compatible with 6 unless the developer did something very specific or out of the ordinary.
This is a good comprehensive description for a beginner. One thing to note, an alternative to using algorithms like bcrypt because they will slow down attackers one common approach is to hash the password with the salt and then feed that output back into the hash upwards of 1000 times. It will essentially make it 1000 times longer to run, which add you said doesn't impact the user while being noticeable to an attacker. 
Thank you!
I guess because it's not a serious compiler
Thanks man! This is very comprehensive yet easy to understand, especially for a beginner in these technologies like me.
You don't store the password in plain text. You store the salt in plain text and the final hash of the password+salt. Let's say the password is `0147852369` and the salt is `qwerty`. You concatenate both `Strings` to make `0147852369qwerty` and then you hash that `String` with SHA-512 or something similar. Which gives us:- `129b3a390a02a48a0f43414dbe2ce44c057c2af81577ef26a18d6d3d913f0e59a5ed644860210e6de4632d820bb509b2a6393e16589265327736e0768c05f4bd` You then store the salt as it was, and the above hash. The password itself is never stored. You don't need any third party libraries to implement this, it's all do-able with plain Java.
You probably want to randomly generate a salt of 54+ characters More length the better as far as I'm concerned. There are a lot of libraries for random characters that are just a Google away. For Java I don't know a good bcrypt library but I'm sure someone's done it. I'll Google some when I get off mobile.
A good read. It shows that only testing in your application is the way to finding out what lock works best for you. Which at the same time is a tad annoying.
Is there a reason this should even require a declaration for interfaces? It seems like you should be able to derive the variance from the method signatures in the interface. Perhaps the existence of the new default methods complicate this somehow.
Thank you for contributing to the conversation! 
Yeah I used Eclipse (College professors recommended it) before I got Headfirst Java so I never got to try it out the other way.
Not all type variables that *could* be variant *should* be. Especially because adding a (default) method to an interface could change the variance analysis, thus becoming a breaking change.
Old tests that stay around forever without being refactored and still go green is a great thing I wish happened more often to me. If you have to edit the test code (other than minor class/method name changes) when you make some refactoring you really don't get any help knowing if you broke something or not. Organize tests by feature/functions, all tests needing the exact same fixture in the same class, and you will not feel bad about not renaming or moving tests just because some implementation class was renamed or moved.
This is extremely exciting. Can anyone compare this to C#'s implementation? Are they similar?
Jre 7 should be backward compatible with all other jres. This is the reason I like java a lot.
There was an interesting paper from the Kotlin authors that seems to have informed this enhancement proposal. It seems that the proposal has been accepted for version 9, which is good news. Note that currently the semantics of covariant and contravariant type variables under inheritance are a bit unclear; e.g. javac behaves differently than the eclipse compiler.
Try the following snippet to set up a connection and execute a statement: Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver"); Properties connectionProps = new Properties(); connectionProps.put("user", "myUser"); connectionProps.put("password", "myPassword"); String connectionUrl = "jdbc:sqlserver//localhost;databaseName=MyDataBase"; Connection connection = DriverManager.getConnection(connectionUrl, connectionProps); Statement statement = connection.createStatement(); ResultSet rs = statement.executeQuery("SELECT * FROM MyTable"); Note that you will need to specify the MSSQL jdbc driver in your pom by adding the following dependency: &lt;dependency&gt; &lt;groupId&gt;com.microsoft.jdbcdriver&lt;/groupId&gt; &lt;artifactId&gt;sqljdbc4&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/dependency&gt;
IntelliJ will move the tests as part of the implementation refactoring.
&gt; Hopefully, that wasn't the case. I hope I have guided your eye to the actual arguments I did make, have added more, and also treated you with a sense of anonymous respect that it feels like you failed to show me. Well, let's agree to disagree. To me it still reads as an excuse, not an actual reason. There's no point in this discussion if how you work is so far from how I work. But please don't pretend this has anything to do with the type of work you do; getting distracted by syntax highlighting has nothing to do with how high / low level you work.
Your kidding me... You're going to change programming environments at least 10 times back and forth in your entire career. If knowing that encompasses most of programming for you than I am afraid you're hooped. Seriously, how long have you been programming and in what environment? I can no longer take your arguments seriously at all... Entire books, series, have been written on abstract topics such as code design, various mathematical applications, design patterns, best practices, version control, maven, unit testing (and writing unit testable code), api design, networking algorithms models and common interfaces (TCP/UDP), physics, render apis &amp; other common libraries or interfaces etc... leaving "programming" divided fairly well. If knowing a programming language is the biggest part of "programming" for you than you need to broaden your skill set.
Pretty rad, considering it seems to offer a lot of what the core value behind what mixpanel is offering (a lot of their offerings are just feature bloat), and could save a company [tens of] thousands a year by using a customize-able open source project.
&gt; There was an interesting paper from the Kotlin authors that seems to have informed this enhancement proposal [The paper by Ross Tate](http://www.cs.cornell.edu/~ross/publications/mixedsite/mixedsite-tate-fool13.pdf) is referenced in the linked JEP, at the bottom.
So far, I don't see explicit mention of generics being reified, at least not in this JEP. So, if they (still) won't be reified, I guess that's the biggest difference to C#'s implementation, apart from the fact, of course, that Java will have mixed-site variance after this JEP, unlike C#, which only has declaration-site variance (if I'm not mistaken?).
That's not talking about storage though. If it's in a database it will usually be some form of varchar anyway.
Use a directory for user identity and credential storage. 
IntelliJ has this feature built in. If you have the chance give intelliJ a try. I used to use eclipse a while back but then started using intelliJ and would never want to go back to eclipse. 
That's why I brought up default methods. Before they existed, adding methods to an interface would already be a breaking change, so I think it would have been safe to infer variance.
Very interesting. Although, i am still not sure about how and where it can help. Can you come up with an example scenario for its usage? 
Ah, thanks, I had missed that.
The 8th, the Optional&lt;T&gt; class doesn't seem like it would work very well, because nothing enforces that the Optional instance itself is not null. I would love that though, if return values could be forced to be non-null, like in Haskell or like value types in C#. 
This is good to know, thx!
Good to know, thx!
&gt; code reviews :/
No problem, there's a community edition that is free if with pretty good features if you want to dip your toes.
sysadmin here and also coming from a python background, now using mostly java for larger projects. what you say is true for any language; python can have the same problem between 2 and 3, i have seen perl scripts break between version updates (5.6 to 5.8 for example). it all depends on the skills of the developer. normally there should not be an issue. i don't know if you're a nix or win admin, but on nix it is really easy to have multiple java's installed and make each program/tool that requires it load the correct one. i presume it is doable in windows as well, but i don't know how and i hear my win admin colleagues complain about java versions all the time. java problem is more visible because it is used so much in enterprise software or (older) web based tools.
slf4j is the easiest logging framework i've ever used.
What's the vote on java's pbkdf2withHmacSha1 for hashing passwords? 
perfect! wow, thank you :)
I've been a professional programmer for 20 years, and now employ several in my own software company, but I don't suggest you take my own opinion or experience into account at all. Instead, consider Knuth's "The Art of Computer Programming". Not only are the "bits and instruction sets" so central to this definitive work that the book defines its own architecture (for which several emulators exist BTW), but Knuth spends time specifically explaining why an understanding at this level is critical to becoming a competent programmer at any higher level of abstraction. 
One could plug a static analyzer to check the build for null assignment to Optionals. 
Although I don't disagree with the essence of his post I do strongly disagree with the example he creates. CSV parsing is *complex* as hell and it makes no sense whatsoever to have that complexity in a simple immutable Pojo. Heck, with the addition of the parse method his pojo isn't even immutable anymore! A pojo is just data, it's the lowest leaf in your tree, it should not 'know' about anything other than it's data. Code complexity is bad, but many classes don't equate complex code. If your classes do exactly what's advertised on the tin, code becomes less complex. A CsvParser should handle CsvParsing. A pojo should just encapsulate data. If you start mixing responsibilities you start reproducing functionality (which you also need to test!) and actuall increase complexity. 
Well, perhaps in time you will gain some perspective. For now I'm not concerned by or very interested in your overly theatrical opinions. Good luck.
They're facts not theory. You cannot associate "programmer" so strongly to one _native_ environment. It makes no sense. Programming is a skill developed independent of the environment, and perhaps in time you will appreciate that (25 years evidently isn't long enough for some.)
protips: * never deal with plain-text passwords * always use an UNBROKEN hash algorithm, bcrypt is a good one * if you're receiving passwords from client -&gt; server it would be a good idea to use [SRP](http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol) that way the client never sends the plain-text password or the hashed password, just a random number.
I would say https://www.udemy.com/javaspring/ from John Purcell. It was very helpful for me. He explains good and it's a detailed course. With hibernate integration, maven, tomcat and lot's more. 
Try [spock](https://code.google.com/p/spock/), it's inspired by tons of good frameworks and took the best out of them. It is groovy-isd, but works well for java projects and you can definitely pick it up in 5-10 minutes. They even have a [web-console](http://meetspock.appspot.com/?id=9001), where you can play with the sample assertions and see how awesome it is for yourself! Also, check out how beautiful spock's output is: MyFirstSpec - let's try this! FAILED Condition not satisfied: Math.max(1, 2) == 3 | | 2 false at MyFirstSpec.let's try this!(Script1.groovy:7) 
Start off with JUnit: https://code.google.com/p/t2framework/wiki/JUnitQuickTutorial Use http://en.wikipedia.org/wiki/Mockito to mock objects you need in your test cases but are not interested in testing at that point in time (those mocked out objects will be tested in other dedicated tests). Read up about stubs and when to use mocks vs stubs to help you with keeping the scope of what is being tested in a unit tests. Beware, you can over do it with Mocks and it can become a bit of a coding smell if your tests are super complicated. Unit tests and refactoring go hand in hand so do not be scared to refactor your code once you have a good set of working unit tests. Since you haven't written tests before and you're likely to be still working on untested code bases. Established code bases that are untested (Legacy code) are hard to write tests for. You'll need strategies to safely refactor to include tests in new and existing code. Take a look at http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052 You can review slides of the major topics of this book on places like slideshare if you're short on time. Read up about TDD (Test driven development) it's a change in the way you will develop your code so you'll need more time to absorb the lessons in it. You don't need to know TDD to write unit tests. TDD is actually more around code design rather than testing. But either way it will improve your codebase. When you're "test infected" (google that phrase) you'll probably want to expand into BDD (Behaviour driven development), We use cucumber for this which is written in the gerkin language. It's amazing, it reads like english and is a great way to calcify requirements with the business. You should definitely check it out once you're comfortable with unit tests. Give me a shout if you have any more questions regarding testing.
I'm not sure specifically about this tool but there is a great video about event sourcing here. (A little bit specific to his own product but a good overview non the less) https://www.youtube.com/watch?v=DWhQggR13u8&amp;index=11&amp;list=PLSD48HvrE7-Z1stQ1vIIBumB0wK0s8llY
How is it a good reason to force you to catch that exception? What if I know that the file I'm wanting to open will always be there and if its not I want it to crash? Java does stuff in the name of safety but its not always safe to catch that exception, sometimes catching and mishandling that exception just leads to a hard to find bug. Now as a result of having to catch that stupid exception that I didn't even need to catch I have four more lines of code and an indented block. Multiply that in a production code base by 1000 and you have 4000 lines of code that you probably didn't need
Thanks man, I'm off to study links provided.
Personally, I'd recommend you bypass Maven in favor of [Gradle](http://www.gradle.org/). You get everything Maven offers, and more. It's always best to start at the [beginning of documentation](http://www.gradle.org/docs/current/userguide/userguide_single.html), but if you really just wanted to jump in, [Chapter 7 Java Quickstart will suffice](http://www.gradle.org/docs/current/userguide/tutorial_java_projects.html). As /u/gooftroops says, go with JUnit. It has integration with all major IDEs.
Different languages go about this in all sorts of ways. In PHP you run real_escape_string() on inputs before sending them. In other languages I'm sure there are different built-in functions. But you definitely need to figure out how to sanitize your user input.
True, but this is /r/java so I assume that they are using JDBC to talk to their database, and JDBC supports proper bind parameters which force the JDBC drivers to do the escaping in the correct way for that database engine...
is it possible to get a list of implementations of an interface/class in dagger? to make my question clear, I am looking at something like this: https://github.com/ninject/ninject/wiki/Multi-injection, which Ninject provides.
No problem. Honestly, to write your first unit test is the hardest part. Once you've done it and see that it wasn't so bad. Once you get the hang of it you'll love it. You get free documentation of the required behaviour, this helps new people get up to speed on the code base quickly. Your unit tests have your back when you want to refactor. Writing a good set of unit tests will prove to you and others that you understand the requirements. Think of your full suite of tests as a contract. That once these tests are satisfied, I can confidently say my functionality is "working". The day one of your unit tests catches the first bug will be an awesome day, You'll become "Test infected". As for coverage, I'm a little anal and go for around 80% line coverage and 100% branch coverage. Some people go for 100% line coverage but I find that you end up spending a lot of time testing silly things. The flip side of the argument is people will not test the hardest 20% where the bugs will most likely be. But a good team and good code reviews will stop that from happening. If your team also becomes test infected you can set up your builds to fail if code coverage isn't a certain level. http://stackoverflow.com/questions/7982614/cobertura-with-maven-fail-if-coverage-below-threshold-but-still-generate-site Just set it at 1% to start off with and increase it as coverage goes up. Refuse code reviews without tests. There's arguments for and against this, such as code coverage shouldn't hard prevent a build from going into production (i.e in an emergency). to manoeuvre around this you could have a separate build that fails based on low coverage. I know I'm racing ahead here, but I know the value of unit tests and I'm more than a little excited that you're on the cusp of catching the testing "bug" :) Happy testing.
Sorry to ask, why the name *Jimfs*? I was reminded of "He's dead Jim" from [Star trek](http://en.wikipedia.org/wiki/Leonard_McCoy#.22He.27s_dead.2C_Jim..22) and chrome
Spock is an awesome, enterprise ready testing framework. You can use it to mock objects as well. &lt;https://code.google.com/p/spock/&gt; &lt;https://github.com/spockframework/spock&gt; &lt;http://spock-framework.readthedocs.org&gt; JUnit is a simple, industry standard testing framework. &lt;http://junit.org/&gt; You can compare the two with TestFileResource I wrote for both JUnit and Spock. [TestFileResource.java](https://github.com/BetterJapanese/kinkan/blob/5a55b7f955993228649b8879fc7c06e0a2cb02ae/src/test/java/io/TestFileResource.java) (JUnit) [TestFileResource.groovy](https://github.com/BetterJapanese/kinkan/blob/master/src/test/groovy/io/TestFileResource.groovy) (Spock) 
I understand. Maven is great because it forces you into the framework. Gradle allows you to play within the Maven framework, but also empowers you to step outside.
I have tried Gradle myself a few times but always ended up going back to Maven as well. Something just doesn't sit right; in 90% of the cases I just need easy and quick dependency management, build life cycle and the ability to build artifacts and Maven does these things very well. So I wonder, what are the use cases where "stepping outside" of the framework would justify giving up all the other good parts of Maven? I've only ever encountered a few situations where I've thought "Darn, wouldn't it be great if I could write some code in the pom file!" and usually I would find a plugin or write one myself. 
That's fantastic. If a tool meets all your needs, just use that. My main point is that Gradle provides *everything* that Maven does, and more. apply plugin: 'java' apply plugin: 'maven' group = 'com.mycompany' version = '0.1.0-SNAPSHOT' dependencies { testCompile "junit:junit:4.8+" } Maven: &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.mycompany&lt;/groupId&gt; &lt;artifactId&gt;my-app&lt;/artifactId&gt; &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.8.2&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; With Gradle, it's the small things, like not as verbose, and that little + operator at the end of the version.
&gt; No problem. Honestly, to write your first unit test is the hardest part. Once you've done it and see that it wasn't so bad. Once you get the hang of it you'll love it. It's not that I've never written a single test, I just haven't used a framework instead of some doing it 'by hand'. To tell you the truth I'm a bit wary of testing 'everything', and going 'test infected' has a bit of a smell of going Amway on programming if you catch my drift ;) But we'll se if my view on things changes as I go deeper down the rabbit hole.
&gt; Apple just won the war. Devs will flock to Swift, leaving Android (and ancient Java 5) in the dust. Get on board now or be left behind. Oh, my sides. 
Maven lets you step outside too, but under great peril because of how you have to do it (e.g. using the maven-ant-plugin). It does make it hard to do things that are outside of what it does though, whereas Gradle makes it a lot easier to do that - unfortunately at the cost (IMO) of making some things harder than they need to be...
ooooooh, the little plus sign of death. What version was it built with? Why did it work before? Now it doesn't! 
A lot, but the primary use case that comes to mind is you pipe events from your front end into it to determine if a user makes it through a flow in your interface. Calculate where users drop out of the flow (canonical example is a sign up flow).
I've just set up a tentative testing environment under intellij idea, and it has this green fresh look, and the first passed tests seem deeply satisfying... I probably won't go 'test infected' (although don't know it yet obviously), but I think I can see where it comes from. I'll check out hamcrest, thanks. P.S. After quick comparison between TestNG and JUnit I decided to go against the grain with TestNG. I'll need to do a lot of parametrised stuff and it seems TestNG excels at this.
You can also compare Maven to Gradle. [pom.xml](https://github.com/BetterJapanese/kinkan-cbor/blob/0d6623c6199897e61f09ee8615872fec4210a79e/pom.xml) (Maven) [build.gradle](https://github.com/BetterJapanese/kinkan-cbor/blob/master/build.gradle) (Gradle) Maven relies on verbose XML configuration, Gradle relies on Groovy scripts and convention over configuration.
Just tested it with 1.8 and 1.12. What version are you using?
Rather it's a sign that you depend on a project with semantic versioning. &lt;http://semver.org/&gt; A minor and patch version should not introduce backwards-incompatible changes. But of course there are projects where the authors don't understand the concept of semantic versioning, so there are occasions when you won't use operators. On the other hand with continuous integration it is not a big deal to use them. You can always downgrade when nothing else helps. 
That's quite an edge case. I've never seen the compilation of test cases of all things being slow.
Same reaction. I guess he's defensive or feels the platform is under attack.
&gt; Why did Microsoft create C#? Because Microsoft needed a vendor-lock-in version of Java, and Sun wouldn't allow them to fork Java in a way that programmers would unintentionally lock themselves into Microsoft's platform, only to discover this later.
&gt; Why did Google create Go? I am guessing to create a safer and higher level language than C but that can compile to efficient code.
I think that's more for constructing flows and EventHub is more for analyzing the usage of said flows.
Makes more and more sense. Thank you
i'd guess that your antivirus is trying to scan the file and gets stuck.
The Gradle samples ARE concise. With the above example, would I get a similar life cycle as with a Maven project, as in prepare resources, compile, compile tests, run tests, etc? I do like the shortness of the Gradle script, but whenever I try to write one myself, I get stuck because I can't figure out what goes where. How do you guys write Gradle scripts and what do you use to write them? 
that is really interesting, you obviously didn't look into java since you used it last time with java 1.2 , so you must have like what 10 years of experience min.? yet you really argue that you have some production code that does access files in 1000 places and you just assume these files will always be there?and you want your production code to crash if it is not? sry but that doesn't add up also you now only just have a problem with that checked exception, no mention of your initial argument anymore? are you really are programmer at all? if you don't want to handle that exception that you have 1000 times in your code why not just write a small function that wraps that for you? you really want us to believe that you instead have 4000 lines empty catch clauses just because you want to put this on java?and someone pays you for that? yes it is a good thing that java forces you to check that, since one day i could inherit your code and then i would have to maintain it its not like you don't have a point, you just picked the very case where java did evolve, is not that great verbose and probably on of the very few times where that checked exceptions we all like so much do make some sense (and from what i get from java 8 checked exceptions will be a thing of the past)
You get the absolute same lifecycle. Well, Gradle is just like anything else. Read tutorials, and when in doubt, search. As the joke goes, "my job is to follow what StackOverflow tells me..." The biggest learning curve is the structure of the Gradle project itself. However, Maven has that same learning curve.
The WTF here is that you're using Eclipse over Netbeans.
That or the most common case, http://storm.incubator.apache.org/
You can't. A link is used to get data from the web server through an HTTP GET request. This is a form. Forms are sent by the browser to the web server through an HTTP POST. You could *try* this: &lt;absolute path&gt;/join_group.php?submit=Team%20beitreten&amp;gid=1068&amp;id=75&amp;page=1&amp;teamleader=1 It is PHP and if the the web site was written by a moron, this could work. This might work (highly doubt it), but it depends on what browser your friend is running: javascript:xmlhttp.open("POST","&lt;absolute path&gt;/join_group.php",false);xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");xmlhttp.send("submit=Team%20beitreten&amp;gid=1068&amp;id=75&amp;page=1&amp;teamleader=1"); PS: This is how you construct a CSRF attack (sending a link with Javascript in it to manipulate someone else's browser to do things like submit forms without them knowing).
You might want to check /r/Javascript. Your question is about **Javascript**, not about **Java** - they have as much in common as car and carpet.
Thanks, that is indeed quite a helpful comment
I did not know the Files class existed so yes Java evolved there great. I'm pretty sure the Files class was added in 1.7 not 1.2 given its nio package. I'm not gonna go through and find all the places where the standard library is overly verbose though. I wasn't referring to it being the same exception, but there are places all over Java where your forced to catch exceptions that have no good catch. Places like Xpath, where your forced to catch XPathExpressionException. Everytime I've had to catch this exception there is absolutely zero things I can do to correct the issue, my program just needs to rethrow. As a result all of these needless checked exceptions combine will lead up to 1000's of mostly useless try catch blocks. No I don't have empty catch clauses, others dropping in empty catch clauses is what my problem with checked exceptions is. A programming language should try to make its best case the obvious one, and if I don't want to swallow an exception I have to do this catch (Exception e) { throw new RuntimeException(e); // or better in guava throw Throwables.propagate(e); } which people don't always realize. Java as far as I know is the only major language that forces you to catch exceptions, so if forced exception catching is so good why do so few languages do it? In my experience across multiple languages checked exceptions has caused more trouble than it has solved. A swallowed error can take weeks to find but if someone forgot to catch the exception it takes seconds, because the stack trace leads you right to it.
http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks