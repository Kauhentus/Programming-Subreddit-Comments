I dunno about pure Java but FreeTTS does the job. I've used it and the default voice is pretty bad but you can change it if you know how. http://freetts.sourceforge.net/docs/index.php The thing is, the tutorials and stuff all make it so it actually plays the audio and I'm not sure how you can save it.
And using that with another while loop can have the effect of only doing the operation when there are two tokens, right? Actually, I think I might have just figured out my own problem . . int[] intFirstLine = new int[3]; for(int z = 0; z &lt; 3; z++){ ArrayofFirstLine = tempInput.split(" "); if(ArrayofFirstLine[z] == null){ InvalidInput(); } intFirstLine[z] = Integer.decode(ArrayofFirstLine[z]); This sorta works, just have to add an values into my array. Thanks for that as well, probably will use it!
Except for being Mac-only, the "say" command is precisely what you want. Multiple voices, saves to file, etc.
Depends on what the compile threshold was set to. 5000 tests doesn't seem like that many to me. I'd try a few hundred thousand at least
Design patterns java workbook http://www.amazon.com/gp/aw/d/0201743973
I agree with regards to the final, but not with regards to the modulus. The modulus is hardly difficult to understand. I don't think our warrants it's own method.
How Network are we talking? I love talking different protocols. I love coordinating events on different machines. I love syncing. Not quite sure if I'd enjoy distributed transactions though. Haven't been in a situation where they were required. Always found the idea of multi master replication on databases and interesting concept but not sure how I'd get my head around the performance issues. "You are a sadistic bastard." - Probably makes sense.
[A similar question](http://stackoverflow.com/questions/143390/java-text-to-speech-engines-overview) was asked on SO. You may find it helpful.
^^ /agree - GoF makes me want to slit my wrists when I (every now and again) get the idea to read it because I haven't yet. It's a great book and quite informative, but it's not the best read.
/agree - don't get hung up on patterns.
not sure why the hate for your post, I use design patterns all the time, but I cynically agree with your comment wholeheartedly.
You really think instantiating a class and executing it's constructor 5000 times wouldn't be enough to cache it? I'm not attacking you, I'm being serious. That just doesn't sound highly efficient to me
Okay, so now I am definitely missing something. How is this project supposed to compile without the LWJGL library being present? And why is it no longer an Eclipse project?
The default compile threshold for the server JVM is 10000 - so until hotspot sees a line of code called 10k times, it doesn't do anything. (and when it kicks in, it isn't caching it - it's compiling it down to much faster native code.) The default is only 1500 for the "client" vm. (One reason for the big difference between the client / server is because the server VM is intended to be run for a very long time so 10k calls to something on a typical server is not a big deal.) You can adjust it with "-XX:CompileThreshold=n" when launching the jvm (with some value of n... doing n=1 would be a bit nuts, but is possible) 
Sockets: http://docs.oracle.com/javase/tutorial/networking/sockets/index.html Pretty much all you need to know.
Base Java Sockets suck. Use NIO. There are a few good libraries built around NIO. Two of the good ones are Netty.IO and Apache MINA. I'm personally good with MINA, but netty.io is really good as well.
For Ra's sake: Use UDP! Even though your game might be suitable for TCP, TCP is almost never used in actual game development and just rarely even suitable for games.
Ok, maybe I'm a little bit biased... You're right... I, for example, wouldn't use UDP for a chess game or something like that.
I suggest you take a look at Netty([1]), which is an asynchronous event-driven network application framework. As another user pointed out, using good, old Java Sockets is hard to get right, and hard to scale, but going the NIO-route is clunky, and Netty definitely helps getting this right. Netty 4 is right around the corner, so I'd start learning that version right away ([2]). Apart from the user-guide, reading the source of the examples is a great way to learn ([3]). [1]: https://netty.io/ [2]: http://static.netty.io/4.0/guide/ [3]: http://static.netty.io/4.0/xref/
Is there a reason you can't use the Element method? public Elements getElementsMatchingText(String regex) Seems like using the regex ".*(searchString)(?!.*\\1).+" might make sense here.
What kind of server? What do you want to do with it? Are we talking a simple multiplayer server, where you have players connected for the entire duration of their game? Or an MMO style server? Or something as simple as a high scores server? And then if it's a game server, what kind of game? The requirements for Chess are very different to the requirements for Doom.
Investigate Protocol buffers as your means of shipping data to and from your client/server. It makes life so much easier.
Maybe you could look into java RMI? I used it a while ago for a simple java app. Remote method invocation.
**How do I output synthesized speech to an audio file?** With the FreeTTS test program, you can dump audio output to a file using the -dumpAudio option: -dumpAudio filename The audio file format can be .wav, .au, or .aif, depending on the file name. For example, if "filename" is "foo.au" the file format will be .au. The -dumpMultiAudio option (same format as -dumpAudio) dumps audio to multiple audio files, one file per utterance. In this case, if "filename" is "foo.wav", the files are named foo0.wav, foo1.wav, foo2.wav, etc.. Again, the file format is determined by the extension of the filename. If you are writing your own application, you can set the audio player of the FreeTTS Voice to one of the file-based audio players. See the FreeTTS API documentation for: Voice - describes how to set the AudioPlayer for a voice. You can also set the default AudioPlayer via the command line by defining the "com.sun.speech.freetts.voice.defaultAudioPlayer" system property. The value of this property must be the name of a class that implements the AudioPlayer interface, and which also has a no-arg constructor. FreeTTSVoice.getVoice - allows you to get the underlying FreeTTS Voice object from the JSAPI FreeTTSVoice object. NOTE that doing this means you end up straying from the JSAPI specification. An example of how you might use this method is as follows: desc = (SynthesizerModeDesc) synthesizer.getEngineModeDesc(); javax.speech.synthesis.Voice[] jsapiVoices = desc.getVoices(); javax.speech.synthesis.Voice jsapiVoice = voices[0]; /* Non-JSAPI modification of voice audio player */ if (jsapiVoice instanceof com.sun.speech.freetts.jsapi.FreeTTSVoice) { com.sun.speech.freetts.Voice freettsVoice = ((com.sun.speech.freetts.jsapi.FreeTTSVoice) jsapiVoice).getVoice(); freettsVoice.setAudioPlayer(new SingleFileAudioPlayer()); } SingleFileAudioPlayer - an AudioPlayer that sends all output to a single file. MultiFileAudioPlayer - an AudioPlayer that sends each utterance to a separate file.
Oh, I see! Very interesting, thank you :)
LWJGL is still present you just don't have to include it the same way you were before. Maven is a dependency manager/build tool. If you look in the root directory you'll see a pom.xml file. This is a descriptor file that specifies things such as: * dependent jars such as guava and slf4j * native dependencies such as lwjgl * the target compiler level (1.6) If Maven is installed you can cd into the root directory and run **mvn install**. This will have Maven download your dependencies from various public repositories. To integrate with a Maven project you need to install a plugin for Eclipse. It will look at the pom.xml and Maven's output directories and set up your project library paths pointing to maven's output directories and so on. Intellij integrates much better with maven projects...... just saying.... :D
Thanks. :) I use Java every day at work; and only the Java ecosystem seems to have this obsession with 'academic correctness' and patterns. All that really seems to happen is that you end up taking 50% of your time understanding why a colleague has abstracted something in to 4 builders, a DAO, 3 singletons, and god knows what else. :D
Exactly, sazzer. OP: more details about what kind of game server you want to write are needed before you listen to ANY of the well meaning suggestions here about specific technologies. Each of them has their place, and each of them will work wonderfully in the right context. Give us some details and I'm sure you'll get some great advice and focus your efforts a bit more.
I've always been interested in seeing if I could develop a REST based game server using Spring Framework. But then again, I'm more interested in turn based game play than the action, split second lag = death. But you would probably be better off with JDK Sockets (if you want to learn about such things) or just using an existing game specific connection library. This is one of those things where there are many different solutions optimized for specific requirements.
If you're playing chess online TCP wouldn't be that weird. Like everyone here says: It depends on what kind of game it is.
I just gave that example myself as well, I'm realizing I was wrong.
i just did this recently for a word game. use [kryonet](http://code.google.com/p/kryonet/) it's a very small and simple library but probably does everything you need and more.
The overheads/downsides in RMI when compared to every other alternative method of server side comms is just not worth getting into. So no. I wouldn't recommend RMI. 
Its a good question for sure. I'm looking into D* lite but am not really sure what I am doing. I do not want a solution as much as reading material that can allow me to find it. Do you think D* lite is the correct way to attack this problem?
I was just gonna say, smells an awful lot like my introduction to programming class back at uni....... 
To be honest with you, I've been out of school long enough that I don't remember these algos off the top of my head. For the interview, I used a rudimentary wall hugging algorithm given the time constraints on the interview. 
I am sorry I may have missed a rule. I do not want solutions at all as this is for a class. I just want reading material or general guidance to get me on the correct track. If this is against a rule I will remove my post.
Lol no worries just busting your balls. If I remember correctly, and it's been a while, the solution involves maintaining a history of turns and backtracking when you hit a deadend. Then again the Oracle of All Knowledge (Google) might turn up some better approaches.
You could try parsing it as xml but html parsers are much lazier and will generally let you parse non-well-formed markup. Xml parsers are made to die silently when they hit bad markup. If you know your html is xhtml and well-formed, then try an xml parser.
Use somthing like [TagSoup](http://ccil.org/~cowan/XML/tagsoup/) or [htmlcleaner](http://htmlcleaner.sourceforge.net/) to convert the html tag soup to parseable XML XMLReader reader = new Parser(); Transformer transformer = TransformerFactory.newInstance().newTransformer(); DOMResult result = new DOMResult(); transformer.transform(new SAXSource(reader, inputSource), result); 
Ones I have used for incorrectly formatted html are JTidy and NekoHTML
JSoup is absolutely amazing. I was doing all my parsing manually before I discovered it. Never again.
http://sourceforge.net/apps/trac/reddwarf/ I haven't looked at this in a couple of years but at the time it was recommended to me for making a backend to a mobile mmo I was foolishly pursuing at the time. 
After some extremely in-depth analysis I've concluded that you're... uh... missing a return statement. Change it from public static int randInt (int lower, int upper) to public static void randInt (int lower, int upper) And your error will go away. I've gotta say, looking at your code it seems you're a bit confused in general though.
 public static int ... That means that when you run this function, it returns a number. x = pow(2,2) POW return a result of 2 to the power of 2. That result gets placed in X. Somewhere in POW is a `return x^y` In YOUR function... you have "Output" commands. Output is not a return statement. Do you mean to assign the result of this to something? If so you need to `return r;` after the ELSE statements. If you DON`T intend to assign the result of this function, you need to change it to a VOID instead of an INT. So either 1) public static void randInt (int lower, int upper) { } or 2) public static int randInt (int lower, int upper) { ... ... ... return r; } Also... You aren't using your input parameters (high, low) and your if/else if/elses are a bit wierd. Try SWITCH? public static int Magic10Ball (int lower, int upper) { int r; r = randInt(lower, upper); switch(r) { case 1: Output.showMessage("The answer is: No"); break; case 2: Output.showMessage("The answer is: Yes"); break; case 3: Output.showMessage("The answer is: Maybe"); break; case 4: Output.showMessage("The answer is: File Not Found"); break; case 5: Output.showMessage("The answer is: 42"); break; case 6: Output.showMessage("The answer is: Red"); break; case 7: Output.showMessage("The answer is: White"); break; case 8: Output.showMessage("The answer is: Blue"); break; case 9: Output.showMessage("The answer is: Doubtful"); break; case 10: Output.showMessage("The answer is: Ask again later"); break; default: Output.showMessage("Does not Compute. Somehow you got a bad number."); break; } return r; }
Didn't work. The line you gave to change was provided by the professor. If it helps, the full code is public class rand { public static void main (String [] args) { String question; question = Input.readString("Enter your question"); Output.showMessage("Your question was: " + (question)); } // method main public static int randInt (int lower, int upper) { int r; r = randInt(1, 10); if (r &gt; 7) Output.showMessage("The answer is: No"); else if (r &gt;= 7) Output.showMessage("The answer is: Very doubtful"); else if (r &gt;= 6) Output.showMessage("The answer is: Cannot predict now"); else if (r &gt;= 5) Output.showMessage("The answer is: Ask again later"); else if (r &gt;=4) Output.showMessage("The answer is: Most likely"); else Output.showMessage("The answer is: Yes"); } // method randInt } // class rand Does this give a bit more insight? 
I'm assuming you know how many spaces are left over at the end of the sentence before you have written anything. (You can do this by counting the length of each words then adding 1 for each word on the line minus 1) Say you have 4 words. That means you have 3 gaps. If there are 4 spaces left over, you need to put 2 in the first, 1 in each of the others. The integer value of 4 / 3 = 1 (the number of gaps in all) 4 % 3 = 1 is the left overs that you need to start filling from the left. If we had 4 words with 5 spaces left over. 5 / 3 = 1 5 % 3 = 2 This means all 3 gaps have 1 more space (in addition to the basic space to separate the words) and the first 2 gaps have an additional 1. You could do it by string manipulation, knowing how many spaces are on the end and moving them 1 by 1 to each of the gaps in the sentence, but I think --edited cause my formatting always sucks--
The second option you gave solved it. Holy shit balls, thank you. I don't remember this "return" function ever really being discussed in lecture, but it works now. thank you very much.
Which version of java are you using? If your on Java 6 or above, go into your java's /bin directory and run jvisualvm.exe
our class is unfamiliar with switch statements, so i don't think that would pass. The problem i'm getting now though is that even after running it with the return statement, it doesn't output any of my messages. 
I am using Java 7, so I guess I should try that. I had not heard that this existed. Thanks.
OP here on separate account so I got the spaces amount, and just trying out a case where it's evenly split (all gaps get 1) so i have my int spaces, which is equal to 1 (meaning 1 space per gap) but how would I get it to print 1 space, instead of the number 1? right now, I want to get WELCOME.TO.CCC.GOOD.LUCK.TODAY Instead, i'm getting WELCOME1TO1CCC1GOOD1LUCK1TODAY so it's printing the actual int instead of the period...
Something like: for(int i = 0; i &lt; &lt;spaceAmount&gt;; i++) { string.append("."); } -- edit -- replaced space with period
never mind, got it to work like this for (int k = 0; k &lt; words.length; k++) { k++; if (k == words.length) { System.out.println("test"); k--; line[b] += words[k]; break; } k--; line[b] += words[k] + periods; }
Why not set the loop to end -1 from length and do logic outside loop (after checking index in case empty list)?
If all of the 1's are in the right place and you don't use 1 for anything else in the message, you could run a replace method on the string. I think it's stringName.replace("1", "."); 
But I like these people more 
So I got the basics to work, but now I'm stumped on putting in the additional ones. Lets say w = 34. My output right now is welcome.to.ccc.good.luck.today but there needs to be the 4 additional spaces. I have the integer 4 from doing the modulus equation, but how would I implement that to put it in the middle of the string?
Perfect thanks man. I'll be getting some books on it. 
It doesn't make any sense to use public static int for this. Like wernercd said this type of method is used to return something, in this case an int. Maybe your professor meant that the method was just supposed to return the random integer? That way you could do the printing from main depending on what your randInt method returned. In main: if (randInt() &gt; 7) Output.showMessage("The answer is: No"); etc. If not, just use void. Theres no point of having a return statement if you just want the method to print something.
If you know what the XML looks like JAXB is pretty common.
The [Validator.nu HTML parser](http://about.validator.nu/htmlparser/) was written by some of the authors of the HTML5 specification and is maintained in part by the Mozilla Foundation. It's available under MIT and BSD3 licenses, and supports a variety of existing APIs as a drop-in replacement.
Since Bar is a subclass of Foo you can overload any methods that Foo contains. For example, if Foo contains a method called equals(Object o) you can create a method in Bar called equals(Whatever you want). When the program compiles, it will automatically choose the most specific method. 
does jsoup give you a "level 2" view of the DOM, or is it just a generic node tree ? eg, in javascript, a table is an HTMLTableElement, so you can do table.tHead or link.target i'd like to be able to do something similar in java, instead of having to rely on the weakly typed "level 1" DOM. strong typing is one of the great things about java
I'm assuming you are looping over each word for a line, then adding some spacing at the end (unless it is the last word of the line). If the index of the current word is less than the value of the modulus equation, add an extra space.
I got it! Thanks a bunch!
The key here is the difference between *overriding* and *overloading*. If you need more help: Over*riding* is replacing a method in the superclass with a method in the subclass. Over*loading* is providing a new method in the subclass with the same name as a method in the superclass.
Browser plugins. Worst idea ever.
I honestly don't think Java will die as long as multiple operating systems are out there. Java was built to be a cross-platform way to do [OO] programming right? So by my logic, it'll always be useful unless *way* in the future some radical paradigm shift in the limitations of computing changes and we don't have multiple OSs anymore. Although, however much I love Java as a language, there is a chance the JRE's difference in speed compared to native languages will be it's downfall (pretty sure I worded that right - Java apps tend to be slower than C++, etc.). Anyways, in case you haven't heard Java recently had a security issue. I think Java is more affected by this because Java is used so frequently on the web, which means of course more chances for the unaware to have their security compromised. **EDIT: I was trying to describe the difference between the JVM and Java as a plugin running on browsers and some other things. One of the goals of Java was to make a number of things possible via the web, and Java just ended up not working especially well there. I don't personally know the technical details on why Java the plugin has to be so clunky, but you can easily see the drawbacks of the Java plugin.** I love applets, and form what I can tell Java has tried really hard to make them secure, and fundamentally they will always be risky. Hopefully HTML5 (again, speculation) can take some of the burden off of Java ~~with applets~~ **as a plugin**, but admittedly someone who's not alert for viruses and trying to stay safe on the interwebs should not always trust applets. Java also is platform independent so it needs to have optional installations/updates. This can annoy people. Including me sometimes. But then again... There's also Oracle. Fucking oracle man. I believe they're responsible for the stupid toolbar that tries to be installed every time you update. As far as the language itself, I like the Verbosity. I find it's the right level of specificity that helps me code at a good pace (keeps me focused on what i'm doing, but doesn't slow me down with typing too much). Most of the time when I hear people talking about why they dislike Java, I don't hear anything actually about the language. I never hear someone say "Yeah I like how in C# method names have to be capitalized, I wish Java had that." (unless followed by the words "but I'm weird like that LOL") Java was my first OO language, so this whole comment may be a little one sided. If I pissed anyone off, [sorry](http://assets0.ordienetworks.com/images/GifGuide/DealWithIt/bieberdealwithit.gif) EDIT: Made some edits.
Java on the desktop is dying and has been for years. JavaFX is really cool if you want to make desktop apps but those are very few and far between. 9 times out of 10 with Java you will be making either application backends that are called via web service, web apps (or a combination of those two) or Android apps. Java will be around for a long long time, don't worry about that. Part of the problem is that Java has been around for a while, it isn't the cool thing anymore. Oracle is now largely responsible for it and it is kind of cool to hate big corporations like them. The language is a little verbose but it has such a big ecosystem and tool support. And I still remember the days where you had to pay-pay-pay if you wanted a decent compiler and IDE so the fact that I can get everything I need for Java development free just makes me happy. Below is what Gosling (father of Java) said he'd change when asked in 2000. (Read more at http://www.gotw.ca/publications/c_family_interview.htm) Gosling: There are a bunch of things that I'd do differently. There are a number of things that I'm not entirely happy with and it's not clear what the right answer is. I'm not really happy with the schism between interfaces and classes; in many ways it feels like the right solution wouldn't get in the way. There have been a number of things -- like, for example, multiple return values -- that these days I kind of wish I had added. That was one where I really liked the feature and most other people just sort of went, "Huh?" Another one that sort of went that way was that I had been going down this route of having a bunch of stuff to do with preconditions and postconditions and assertions in an Eiffel-like way, and actually in the community of people who were using it at the time the average answer was, "Huh? Why would I ever want that stuff?" I think that the average developer today would say that too. But then there's a pretty reasonable crowd of people who believe in things like Design By Contract, and it's one of these things where a lot of people feel like, "If only the rest of the world was educated enough to understand what this is about, they'd be better off." And I actually kind of agree with that. The problem is that most of the world could actually care less. There are some things that I kind of feel torn about, like operator overloading. I left out operator overloading as a fairly personal choice because I had seen too many people abuse it in C++. I've spent a lot of time in the past five to six years surveying people about operator overloading and it's really fascinating, because you get the community broken into three pieces: Probably about 20 to 30 percent of the population think of operator overloading as the spawn of the devil; somebody has done something with operator overloading that has just really ticked them off, because they've used like + for list insertion and it makes life really, really confusing. A lot of that problem stems from the fact that there are only about half a dozen operators you can sensibly overload, and yet there are thousands or millions of operators that people would like to define -- so you have to pick, and often the choices conflict with your sense of intuition. Then there's a community of about 10 percent that have actually used operator overloading appropriately and who really care about it, and for whom it's actually really important; this is almost exclusively people who do numerical work, where the notation is very important to appealing to people's intuition, because they come into it with an intuition about what the + means, and the ability to say "a + b" where a and b are complex numbers or matrices or something really does make sense. You get kind of shaky when you get to things like multiply because there are actually multiple kinds of multiplication operators -- there's vector product, and dot product, which are fundamentally very different. And yet there's only one operator, so what do you do? And there's no operator for square-root. Those two camps are the poles, and then there's this mush in the middle of 60-odd percent who really couldn't care much either way. The camp of people that think that operator overloading is a bad idea has been, simply from my informal statistical sampling, significantly larger and certainly more vocal than the numerical guys. So, given the way that things have gone today where some features in the language are voted on by the community -- it's not just like some little standards committee, it really is large-scale -- it would be pretty hard to get operator overloading in. And yet it leaves this one community of fairly important folks kind of totally shut out. It's a flavor of the tragedy of the commons problem.
&gt; it can be ridiculously verbose and boilerplate laden at times, but Eclipse really eases that aspect of things. Java is more verbose and less dynamic than other popular languages. Now that there are languages running on the JVM that demonstrate this, Java has still lagged behind. It brings terrible memories of IE. As a language, Java continues to produce libraries and methodologies that are variations on strict typing with multiple passes to simulate dynamic functionality. Java is almost in the same spot we found Perl a few decades ago. Too many ways to do things in unique and specific ways with known ugly hacks + an implacable legacy investment in skill and live code. As hardware continues to evolve, Java's inherent inefficiencies, along with the poor uptake on modern methodologies, will leave it ripe for another cross platform VM+Language to take its place. You can often find a way to replace 5k lines of java with less than 200 of Clojure or Erlang or Javascript. I would expect Java to start losing marketshare in the next decade, but the install base will remain (re: how long is it taking Flash to die?). Without being pejorative (since I'm going to be a Senior Citizen soon enough), Java is senior friendly. It affords repetitive work with little mental investment. You see a lot of older Java programmers compared to other languages. For this reason alone, it will probably last for most readers' lifetimes. 
http://boyetblog.s3.amazonaws.com/PCPlus/267.paragraphjustification.pdf
Hell, I still (have to) use sites that require shockwave. 
Trying doing it everyday for 8 - 10 hrs. Java is a safe, easy, boring language to use; programming with it usually involves more typing than its worth. Its good for businesses but lame and uninteresting for developers. Oracle's leadership has been less than impressive. Is Java dying? Nope, not even close. Where will it be in 5 - 10 years? Probably roughly the same place it is now. 
[This](http://chriskirk.blogspot.co.uk/2012/05/java-modulo-vs-bitmask-benchmarks.html) looks relevant; basically the JVM does this for you once it decides to optimise your function.
Java is perhaps most popular language at the moment. It is often used even in domains where it probably should not be used. I think too big success might be reason why. Because Java suppresses other good languages and technologies. 
&gt; last I checked it was still really hard to beat Java for speed without going native. Speaking to the language and not the ecosystem of java...the speed of java has nothing to do with the language. Java bytecode is what's running. It can be generated from all the 200+ JVM languages. Use JRuby, you get the same performance if you can generate the exact same bytecode. While the JVM is very advanced, it's still not architected to run across multiple physical machines. This is where the next Virtual Machine (Runtime) will crush the market. Fault tolerant parallel execution + storage.
Java and in particular the JVM is good on the server side. Java on the client side is horrible; especially for Windows users because of the crapware in the Oracle installer. 
People get entrenched in their own technology tastes. Especially with new technologies. People are so desperate to differentiate themselves that they will attack other languages for the sake of promoting their own concerns. Python is a great example. I've tried to use it and despise it yet it has a cult like following online. The best programming language to use has been and always will be, the ones most suited for the task at hand. Java still has a great role to play in back end.
&gt;the speed of java has nothing to do with the language. Java bytecode is what's running. It can be generated from all the 200+ JVM languages. Yes, everything compiles to byte code, but the key word there is "compiles". Our source code has to be compiled (or interpreted) to byte code, and the language does play a great deal in what the byte code ends up looking like and how that affects performance. For instance, interpreted languages will always be slower due to their need to be interpreted. It is also possible for languages to work themselves into situations where certain optimizations cannot be performed due to language constraints. &gt;While the JVM is very advanced, it's still not architected to run across multiple physical machines. I don't want something like a JVM that knows, or cares, about the specifics of the underlying physical hardware. That's not the job of a runtime, that's the job of the OS or virtualization layer.
There are two fronts of Java's "downfall" - Java the consumer product, and Java the enterprise braindrain. The consumer product is floundering because Swing is an awful GUI framework for OS integration, Oracle java is a massive program in its own right, it burns memory, and while it has stagnated its competitors (mainly, for me at least, qt) have grown by leaps and bounds. In the enterprise, it is less the usability and more the fact Java is *boring*. Java is great as an intro to programming because you never need to get particular about things like memory mapping, bit representations, callbacks, closures, and other realities of programming - even in the JVM - but Java is very straightforward: you have classes, an inherited set of C primitives, some glyph operators, and everything else is built on top of that. Functions aren't objects, you don't have syntax sugar like list comprehensions, so it is *very* good for enterprise because the skill gap between the worst and best Java developer usually isn't that large. However, it does get boring. I went to a Java school, and have recently been doing some Android app contracts, and I regret not negociating using Necessitas (and soon, qt 5.1) to develop the apps because every 2 - 3 lines I hit a point where I wish I could do a list comprehension or lambda. I have a string builder mixed with a buffered reader next to an IO parser and the verbosity gets mind numbing. It won't go away because Java (and C#) are both the languages that enterprise loves. Enterprise pays pretty good money. It is easy to get into, easy to use, gets the job done but just wastes characters and time to get there. From my perspective, if I were working on a project of 100+ people, I'd definitely like Java (C# has a lot of features Java is missing like delegates, but also applies) because it means *other* people are much less likely to royally screw up the project. Dropping the ceiling at the cost of raising the floor is great in a team environment where you have a *lot* of people. Also, the veterans and adherers to the JVM as a platform can easily move on to Scala, which I've found much nicer to write than classic Java.
&gt; Where will it be in 5 - 10 years? Probably roughly the same place it is now. Honestly I think this is where a lot of the ire comes from. Java was, for quite some time, at the head of the pack with features and capabilities. With Sun faltering and Oracle's acquisition I think most people see Java as a language that is stagnating. While there are a ton of interesting projects sitting on top of the language or leveraging the JVM the language itself seems to be falling out of favor. 
&gt; Our source code has to be compiled (or interpreted) to byte code, and the language does play a great deal in what the byte code ends up looking like and how that affects performance. There's no tethering of performance to the language. That's what I said. Interpreted vs compiled arguments you mentioned are generalizations (compilers are not always equal or relatively efficient). With the JVM interpreting bytecode, it's even more hairy. When you output a platform dependent binary with JIT, you usually get more performance. &gt; I don't want something like a JVM that knows, or cares, about the specifics of the underlying physical hardware. This is another derail. Sigh. The JVM is not architected for multiple machines, but it's been shoehorned in (EJB, RMI, Jini) already. You don't want it? Too late. Not sure what that has to do with the discussion of the java language. Repeating myself now, a better VM (runtime) which has already learned from java and erlang and erasmus and whatever, will surpass the JVM, demarking the runtime starvation of Java.
Javascript - you never know in which imaginative way the core language or a browser's implementation is going to screw you over when you least expect it.
There are two kinds of programming languages. The ones everyone hates and the ones nobody uses. 
This suggestion I find hilarious
-Bjarne Stroustrup
I've heard devs talk about scala as a better more elegant less verbose java. They also like it because devs like to be elite and fewer people are using scala yet and there is a perception right or wrong I don't know that fewer devs can be good at scala so if you work with it you will have higher quality colleagues 
I like it because you can use java libs in a context with lamdas, closures, and less verbosity. I don't care who else is using it - I use C++ mainly because it does the job and has the library support.
The reasons **I** hate Java (but I work with it, so I tend to avoid being such an ass) are: Everything is so damn strict, plain, boring, you need to have interfaces if you want some extensibility and get things a little more dynamic, which is really verbose. There is still no lambdas. Anonymous classes get *near* that, but they're not the same thing. I can't use a variable from the outside scope without it being final, which takes out a lot of the purposes of a lambda. It's a goddamn enterprise and strict programming language that is being used to create *mobile apps*. I don't understand why we need such a verbose, strict and heavy language such as Java on the mobile. We'd be a lot better using something more dynamic such as Javascript. I can't WAIT for SailFish and Ubuntu Phone to give QML a try. It doesn't have really advanced metaprogramming features (AspectJ and iContract are really interesting, but never saw anyone using that on Android).
Haskell.
Scala, for the bored.
So Scala plus Akka?
&gt;I've heard people complain about the "secret" software installs that happen when you download a new version of java. This seems to only be the case on Windows. On Linux and BSD (IIRC) there is exactly zero magic to installing the JDK. The plugins can be a hassle on Linux, but no magic.
Java is an extremely simple language though, in the sense that the language *doesn't have a single ambiguity* in its grammar. It is simple to parse and simple to learn. While this feature may not be hip to most of the programmer society, it makes for maintainable code, which means it will probably remain one of the top languages for large enterprises.
We're getting a lot of cool new features in future though.
Does this includes JavaScript and server side languages such as Struts2?
The first major impact Java had on most of us was as a browser plugin. It wasn't really very good. Also, its "write once run everywhere" motto meant that, early on, its performance was dismal. So what stuck in everyone's minds was that "Java is a slow, godawful language". As a language to develop in, it's become much, much better over time, and the newer JVMs have become much, much faster, all the while Java as a platform was re-focused from a "write once run everywhere" browser plugin to an enterprise-y server-side language. Now, "enterprise-y" always means that the cool kids will bitch about it, but it also means that it's not really going to lose traction any time soon. But the language is very much positioned as a compromise between speed, sophistication and flexibility, and while an objective person analyzing a problem might categorize a compromise as a good thing, but, if you're a pundit, that's not good headlines. Instead, this sells much better: "Ruby/Python/Node allow your developers to be much more productive than Java, and their performance limitations don't really matter when you can just crank your AWS instances up". Or "Lightning fast performance is crucial to any well-run application, and Java isn't really up to snuff when compared to C/C++". Personally? I really dislike programming in Java, because I feel the language itself is way too verbose, but the tools that are available around it are really brilliant.
Scala, though Java is definitely getting better nowadays.
Some of my thoughts in no particular order: 1. Excellent concurrency...no. Java, as a language, is still tied to the basic threading model that is very prone to mistakes. It's too easy make mistakes that can at best only affect performance, but can also deadlocks. The Actor model, used by Erlang, Scala, and others in some variation, is a much safer and saner default that, IIRC, was documented well before Java was created. Not saying we need to get rid of the threading model, but provide a safer alternative for people to use for basic things so we have fewer screw-ups. Granted, there is library support for concurrent data structures, and that's a very good thing to have in all languages, however you have to know about them and they won't always solve the problem. 2. I can't stand the way Java uses memory. Everything except the primitive types is a pointer and it sucks up a lot of memory for a "high performance language." This [presentation by Sony](http://research.scee.net/files/presentations/gcapaustralia09/Pitfalls_of_Object_Oriented_Programming_GCAP_09.pdf) describes issues they had with C++ that I'm very certain are exhibited in Java due to the fact that pointers are used for just about everything. Taking this into account and if it used less memory, can you imagine how much less hardware we'd need to run the equivalent software in data centers? 3. The verbosity of some of the code is annoying. It's the only language I know of where you may have to use 3+ constructors to open a single file and it, at least was, considered a good thing. E.g. A fr = new A(new B(new C())) vs. A fr = new A(); 4. Checked exceptions are annoying as hell. The fact I have to make my code more verbose to acknowledge the various possible exceptions I can get isn't worth it. I currently write long-running software and for the most part, I don't care what the exception is. The best I can do in 99% of the cases is log it and move on. 5. Not sure if it's more the language or the JVM, but calling external processes at least used to really stink. The working code I found involves more code than I've seen in other languages by having to spawn new threads to capture STDOUT and STDERR. Consider this a minor gripe for now. 6. Not sure about the root cause, but did you know that for each task in a Hadoop cluster it has to spawn a new instance of the JVM because if a task crashes, it can take down an entire node? Even C can spawn/fork processes so that they don't take each other down as well as communicate between them. I have other gripes, but they're more ecosystem/practices related vs. actual language. Needless to say, even though I have to write in Java, I don't like it. The only redeeming quality it has for me right now is that JAR files are very convenient for getting all of my dependencies together for deployment.
RoboGuice makes developing android apps way more fun.
&gt; Everything is so damn strict, plain, boring, you need to have interfaces if you want some extensibility and get things a little more dynamic, which is really verbose. Some people hate dynamic languages (myself included) and are into strict, strongly typed languages (Scala, Haskell, Ocaml). Having to deal with JS without a debugger quickly made me hate dynamic languages for life. &gt; There is still no lambdas. Anonymous classes get near that, but they're not the same thing. I can't use a variable from the outside scope without it being final, which takes out a lot of the purposes of a lambda. This is a pretty bad argument. Lambdas, as they were originally created, do not use mutable variables, and there are multiple examples of functional languages with immutable variables which still find great uses for lambdas. Besides, you can still have mutable variables in your lambdas if you have them access volatile members of a class. The only time you cannot mutate variables is if you try to mutate variables local to a function. &gt; It's a goddamn enterprise and strict programming language that is being used to create mobile apps. I don't understand why we need such a verbose, strict and heavy language such as Java on the mobile. We'd be a lot better using something more dynamic such as Javascript. I can't WAIT for SailFish and Ubuntu Phone to give QML a try. Strictness is good, verbosity less so. Thankfully java is seeing some reductions to how verbose it is in coming updates. Double thankfully we can use Scala instead of Java to code mobile apps. Also, project jigsaw will heavily reduce the heaviness of Java when we get it (god willing) in Java 9. 
Why pdf?
I think one of the biggest mistakes was not building generics properly, and not handling primitives intelligently. If you call a method that has an argument that's a generic type with a primitive argument, you allocate an object. That's stupid, and it's hard on the GC. 
The hate that a PL draws is proportional to its popularity.
The startup of the JVM is still very slow and memory intensive (as is Java overall) I never, *EVER* startup a non-java app thinking -- hrm, "I'd better set aside 2-4 gigs of memory."
Not a full answer, but PDFs can be exploited to run code. That is how any of the iphone/ipod/ipad jailbreaks that were over safari worked.
I specified that **I** don't like this. I didn't say that everybody agrees with me. ;)
Was saying Python has a cult like following supposed to be such and attack? I like Python and have used it for many things since the versiony 1 days. Python look very much liek it isn;t going anywhere... it seem to be psitioned as the scicen and math successor to fortran.
Javascript and DOM api are two completely different things, Javascript is very consistent across browsers (aside from some minor things with IE), and very performant (node.js). But the language does have flaws, quite a few, but with good best-practices its very powerful.
Here's a good reason why I like Java - it gives me a job. I knew C, and got a job because I knew C, but I moved up in the company because I knew Java. 
For a time of O(Collection#max), in ms. And of course, the cost of thread exhaustion in large sets. 
First, exploits. But more generally, HTML is _already_ a (too) complex document formatting language. Delivering PDFs on top of that to me is like putting a car inside your car. (Yo dawg...) I think we should make HTML better if people need that rather than handoff binary files from _anywhere_ to a (usually proprietary) plugin.
Perhaps, but C breaks that rule.
Is it *enough* and *soon enough* though?
I'm guessing what sireWilliam ment by JavaScript was in the context of "browser plugin". As in "do you consider JavaScript as one of the worst ideas ever, since it requires some sort of plugin to the browser"? (No, I'm not saying I agree with the notion that JavaScript is a plugin, but it could be viewed as one from a historical perspective.)
It also depends on the parsing and scheduling of the arguments occurring instantaneously. What if your initial list consists of "2" repeated a million times, followed by 1? If it takes longer than a millisecond to parse and start the first million threads, this is not going to sort correctly.
Symbiotic how? No one is saying that the JVM should die. Scala is an extension of Java in the same sense that any other JVM language is (clojure, groovy, jython, jRuby). That is, it's not an extension of the language. But you can use libraries written in Java from scala code (and vice versa, with caveats). This is true for Clojure to, though (no experience with other JVM langs).
Any API that has a method that returns a `Boolean` to signal "one of three possible values" - e.g. "True, False or FileNotFound" or "Yes, No or Cancel". It's a recipe for disaster when used in `if`s or ternary operators. If you ever do this in an API I use, I will hunt you down and beat you with a collection of printouts of stack traces of `NullPointerException`s from unboxed nulls.
We're not cult-like, we're passionate! Honestly, though some people are a little over the top, I think that really excited and passionate user base makes for a great community. 
It's still funny.
I, for one, think it's totally worth waiting 1073741825 seconds to determine that 2^30 is smaller than 2^30 + 1
(Modern) Pascal is very different than what you describe. A bit off-topic but I'm puzzled by the way you describe it.
C is like a cult in that respect; everyone who dislikes it gets silenced/bashed
http://www.reddit.com/r/dailyprogrammer/comments/yqydh/8242012_challenge_91_easy_sleep_sort/
That aside, I don't like having to open another application for data that could almost always be formatted to look fine in a browser, which I'm already running. If a website links me to a pdf, they'd better have a damn good reason.
I will 100% absolutely agree with you on your 4th point. &gt;Checked exceptions are annoying as hell. Holy fuck, they get under my skin. When I first learned Java I loathed them, and I still hate them to this day. Please, for the love of god, let me just rapidly prototype my code without wrapping every tiny little action in `try/catch` or `throws`blocks. It seems like the core design philosophy of Java was making sure that the dumbest guy in the office couldn't break anything -- which, I mean, noble idea, but man, it's annoying when I just want to get something up and running quickly without have 200 lines of exception handling.. 
You have an *exception*al case and are pondering whether to throw an *exception*? I would say it's definitely better than returning null in any case.
What I mean is that one of Scala's biggest draws (from what I know) is that you can reuse all of the Java libraries and the two can mostly be combined to ease the transition. So for the time being, the better Java and its associated collection of libraries is, the more appealing Scala becomes.
Sounds like it just needs to wait for computer hardware to catch up. 
Have you looked into databases at all? They provide a much cleaner solution to your problem. Your second point is valid, which is why even in commercial games you see some lag on viewing an item's information (especially if that info isn't cached). The lag is due to querying some database (in your case reading from a file).
What sort of databases do you mean when talking about databases (I thought the txt files would count as databases) and could you possibly give me a link to a tutorial on using them? (I'd rather avoid looking this up and reading a long tutorial on something un-related.)
The last time I had to have something read a very large delimited text file at startup, the main bottleneck was the .split() function, which does slow regex matching along with generating a new array on each call (though this was on Android, notoriously slower than the official jdk at some things). I ended up writing my own splitter that searched for a single character delimiter and reused an existing array. For the second thing, you might want make a new class for storing a single item, then look at the generic HashMap or LinkedHashMap classes for storing the items indexed in memory.
I totally agree. This causes no end of problems. If it was up to me the platform default would be UTF-8 everywhere.
Would work fine on a real-time OS. 
You might try asking in /r/iwantout, as well. Just take a look at the "how to ask for help" guide.
HttpURLConnection throws FileNotFoundException instead of reporting a 404. Total bullshit. A URL isn't a file.
Without being familiar with puush, can you provide some context as to what form puush urls take? Are you trying to generate random strings of a certain length and following a certain pattern? What is it you're trying to achieve here? If you want to display random images I'd recommend looking into their APIs.
/agree with the JPA assessment. I find it makes programmers stupid to basic SQL -- even when they're really smart people quite capable of writing quality SQL.
It was touted as being secure from day one. And running on a vm, seeming to lack any sort of dangerous primitives, and supporting sandboxing, that seemed like a plausible claim. Somehow they messed that up. My top issue was with the UI frameworks. They were so sluggish, with all operations being marshaled to a separate UI thread. They never had a native look/feel. Even trying to make a simple notepad-type app with swing I ran into several deal-breaking wontfix bugs in JEditorPane. I got the impression Java was never seriously intended for desktop use, and it was just tacked on as a "nice to have" feature. My other issue was the limited selection of primitive types. No unsigned comparison or division, leading to sluggish workarounds. Though it doesn't affect me often. And I wish is had true generics (not type erasure, causing unnecessary cast overhead), properties, delegates, operator overloading, string comparisons with "==" (or at least warn when I do it accidentally), and basically everything else C# has. All things I could live without I suppose. Though if I wanted easy threading, sockets, and safety, Java was my first choice. And now it's gaining popularity through Android, the main thing pulling me back to it.
I hate java.awt.graphics it just confuses the hell out of me sometimes...
Why are your teachers suggesting that this terrible practise might be OK?
But fine if you're converting strings you're 100% sure are ascii because you created them, which is what I was doing when I ran into the problem, watching it parse a 6000 line text file at 10 lines a second instead of parsing it all in a hundredth of a second. They were practically rebuilding the universe every time you wanted to convert a 20 character string.
Why is http://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html **STILL** not thread safe?!
Thank you! I'll have a look. Edit, got it working using above, thanks!
Yes, the sleep time should definitely be multiplied by args.length * 100.
Invariably wrong of course for numbers that are fairly close.
Java as a product is plagued with security issues. It seems like every other week there's a new 0-day attack. Java as a programming language and runtime is (in my eyes) grossly inefficient. Bounds checking of arrays adds quite a lot of time, especially in tight loops. Objects are, by default, on the heap, which takes extra time to allocate and means there's at least an 8-byte overhead to every object (some runtimes will occasionally allow for objects on the stack, but it's not as common as it needs to be.) Contrast this with, say, C++, where the programmer chan choose whether the object should be on the heap or on the stack. Java is prone to more cumbersome statements. Compare printf() and System.out.printf() - one is long and ugly, the other is concise, and they do the exact same thing. Java is also prone to boilerplate code. Compare quicksort in Haskell to quicksort in Java: qsort :: (Ord x) =&gt; [x] -&gt; [x] qsort [] = [] qsort [x] = [x] qsort (x:xs) = let smaller = qsort [y | y &lt;- xs, y &lt;= x] bigger = qsort [y | y &lt;- xs, y &gt; x] in smaller ++ [x] ++ bigger Then, we can do: qsort [2,3,1,5,4,9,7] which evaluates to: [1,2,3,4,5,7,9] Compare this implementation to Java, found [here](http://www.vogella.com/articles/JavaAlgorithmsQuicksort/article.html#quicksort_algorithm): public class QuickSort { public Queue&lt;Integer&gt; sort(Queue&lt;Integer&gt; list) { return list.size() &lt;= 1 ? list : qsort(list); } private Queue&lt;Integer&gt; qsort(Queue&lt;Integer&gt; list) { if (list.size() &lt;= 1) { return list; } int pivot = list.poll(); Queue&lt;Integer&gt; smaller = Lists.newLinkedList(); Queue&lt;Integer&gt; bigger = Lists.newLinkedList(); for (int i : list) { if (i &lt;= pivot) { smaller.add(i); } else { bigger.add(i); } } return Lists.newLinkedList(Iterables.concat(qsort(smaller), Arrays.asList(pivot), qsort(bigger))); } } The Haskell version is much clearer, much shorter, and much easier to implement. Finally, from a more abstract standpoint, Java forces OOP, even when OOP is not necessarily beneficial to the program. This is in sharp contrast, to, say, C++, where you can embrace a functional, imperative, or object-oriented style, depending on your or your client's needs.
Exception does not mean error. It means an Exception.
This wouldn't exactly work efficiently with a set of large numbers.
But that would make it O(n^2) edit: O(n^3) even depending on how the OS handles threads 
Amen, brother. EDIT: If someone for some reason has not read it, here is the [UTF-8 Everywhere Manifesto](http://www.utf8everywhere.org/)
When I read this comment on alien blue, it appeared to have said: "I, for one, think it's totally worth waiting 1073741825 seconds to determine that 230 is smaller than 230 + 1". I thought you had totally missed the point, heh :)
It is the Cato of programming languages.
The company i work for, hybris, is hiring java devs all around the world. German company but primary language is English... http://www.hybris.com/en/company/careers/jobs
O(no!), actually. 
I've been developing for years. I love to do it. People who are actually passionate at programming languages though? What the hell? I am passionate about my girlfriend and music. Being passionate about a programming language is like being passionate about shoe-horns, or bicycle clips. Perverted.
Yeah I meant the virtual machine, interpretors are fine
Hmm.. never knew passion about languages, ideas, or communities was perverse. Interesting philosophy.. 
&gt; And Android is still stuck with Java 6. Yeah, I'm worried about this. Android should try to keep pace with Java but I wonder if it will at all. &gt; Even then, Java is evolving too slowly compared to other languages, even enterprise languages such as C# (which has proper lambdas, better metaprogramming tools, among other things). It's picking up finally, so hopefully this won't be a problem too much longer.
You're confusing Java and the JVM. You can write code for the JVM that isn't Java. And not every Java code is cross-platform (android apps, for instance).
Lisp also breaks that rule, but on a opposite way. Everybody that doesn't know Lisp hates it.
Yeah I was confusing the two in a way, but I do know the general difference between the two. I did use the wrong words multiple times though.
I'd go the other way. Too many people use UDP and then go to great lengths to re-implement TCP features on top of it. They re-implement congestion control, client disconnection detection and packet resending on top of UDP in the misguided belief UDP has lower latency. TCP with naggle off and multiple streams has the exact same latency as UDP. The only real advantage of UDP is that you can discard packets instead of resending them. You actually have to think long and hard for a situation where this is acceptable. The bandwidth differences are very minor and the idea that TCP has higher latency is a myth. TCP has the same latency as UDP on a per packet basis. Yes there's ACKs but it's not like the receiver can't process the data while the ACKs are being sent to the sender. In fact TCP often gets prioritised by ISPs so you may see TCP have a slightly lower latency if anything. You don't actually have to wait for the ACK before sending another packet with TCP if you don't want to. Just use multiple streams and rotate between them. TCP is also easier to port forward. The server has to allow incoming connections on that port and that's it. You don't need to tell clients to forward any incoming ports. Really you have to think long and hard before you can justify UDP. Stick with TCP until you're absolutely sure UDP is right for your game.
That seems to have fixed it. I wonder why it doesn't accept spaces in-between words though...
Thanks for the explanation!
I'll have to go back and rename them all then, do you know how to edit column names in NetBeans? I can't seem to figure out where to edit it now.
Hilarious. Yes, let's PLEASE have tools that make our jobs *hard*, and our software *unsafe*. God what a genius you are, energydome. However, I have to inform you, that if you worked for me you would be fired by now. 
I used BlueJ in my AP course, and while its not the greatest IDE ever, it displays the class files in a project in a UML diagram which I think helps kids learn OO principles. Otherwise, you can't go wrong with NetBeans or Eclipse, pick the one you like better. 
I would suggest reading up on relational databases (maybe start with nosql) see http://www.javacodegeeks.com/2011/11/what-is-nosql.html
I've used NetBeans and Eclipse. But I've found that, even though I like NetBeans' GUI WYSIWYG editor better, most online tutorials are written with Eclipse in mind. Which makes it easier to follow along.
Ah, thanks anyways though!
I really like using one called [jGrasp](http://www.jgrasp.org/). It's pretty lightweight and has some cool features like structure diagrams, UML diagrams, object viewers, a nice debugger, and it's free.
Probably only need community edition in highschool...
DrJava was recommended for a couple of programming courses that I took. It's easy to use, and should be fine for older machines.
200 lines of exception handling only to have a method silently return an undocumented null to crash your app.
What an incredibly piss poor and unproductive comment to make, you fucking douche. 
Build the binary number by concatenating into a string instead of directly printing to System.out. That way you can control the order.
Append each of your results into a StringBuilder, then print it after calling reverse() on the builder like so System.out.println(builder.reverse().toString());
In my Java 101 class, which is essentially the credit the AP kids will get, we used whatever we wanted, but they had guides for textpad, or eclipse. 
Definitely. I envision it to be the 'sort' of the future. 
Thank you. No wonky algorithm. I get these questions are out there on different tests or school courses or whatever and people want to know how to solve them. Protip: *unless* you have an overriding reason **not** to use the built-in API, use it. I've had an interviewer ask "how would you implement ______ sort in Java?" The answer is, plainly, I wouldn't. I'd use Collections.sort() and have done. Know your API. (Protip #2: If you get a chuckle and move on then the job might be worth your time. If they get serious... walk away.)
If you have problems getting licenses for new versions of Windows, I highly recommend putting a light-weight linux distro on those machines. It's free and also allows your students to have a far better time coding. 
JCreator represent! In all likeliness they will be using a more powerful IDE like eclipse if they actually continue with java development, but I really like JCreator. It is super simple and has just enough tools to make sure that nothing is a hassle, but you are actually learning how to do things yourself and not relying on nicer IDE features and autocompletion. Also it runs smoother on older machines than the heavier eclipse/netbeans (not that those won't run). I think JCreator's the perfect beginner's IDE. Eclipse/Netbeans are a lot to jump into if you have never seen code in your life. Too many bars, menus, and buttons.
This is from 4chan, long long time ago.
Just out of curiosity, was this question for an internship position early-on in your career or a full-time position? Not to derail the thread, but I have an interview for an internship on Monday and I am a freshman in college. Kind of nervous, but they obviously selected me because they think I am capable.
Well, guess my statement was filled with ignorance! The next time someone asks such a question I will tell them this instead! Thank you!
Yeah my first thought on seeing this was "this looks vulnerable to thread peculiarities".
Do you not also run the risk of a race condition screwing your sort?
Am I the only one who thinks people should start out using a text editor and compiling on the command line? I find an ide invaluable now I work with thousands of lines of code. But when learning the basics auto complete stunts the learning process and they will never understand class path issues if they don't understand how Java files are actually organized on the file system. I also second installing Linux because it's better to code in, an intro to Linux can be done in a couple of hours and might give them a valuable life skill.
LadyTeacher is not setting it's variables private. So you can call the teacher "Ms Poopy" and the code would never know her name has been changed. Also it should use getters/setters. So wearABra() should be boolean isWearingABra(). Although technically from the String response it never returns the correct value, so the method is redundant. Also one post from 2 years ago. Not a great site to be learning Java. 
Anyone else bothered by this line: Thread.sleep(Integer.parseInt(arg)); Shouldn't it be Thread.sleep(Long.parseLong(arg));
Yes, that's pretty much what hibernate answered. But in this case, WHY a fetch type EAGER should be a outer join, and not a fetch type Lazy? In summary, why is this not the same query (or at least equivalent ones)? These notions of eager and lazy are more related to Object than to sql (in which they just don't have any sense). So that's why I still consider this as a odd behaviour. But I am open to an explanation...
Yeah, I'm almost done with college and use Eclipse and Visual Studio primarily now, but in high school and the first bit if college I used jGrasp. It's kinda like driving a manual transmission; you learn how and in the process get a great feel inside and out of the car and when you switch over to an auto trans, it's a cakewalk.
BlueJ was used for the intro courses for my college. After that, the professors suggested Eclipse due to the lack of hand-holding that BlueJ has. I think Eclipse is a good choice, the sooner you start the kids down a path of self-reliance, the better.
Keep in mind that eclipse bears numerous plugins for everything you can imagine both free and paid ones, regex validators, xml editors, visual desktop app constructors, you name it. I am learning python now and I didn't even have to switch the IDE: just installed PyDev plugin.
A teacher is a teacher's association? Instead of merely a teacher's association *member*?
Submitted. This is fun!
Good points as well. I actually don't mind the different kinds of maps and lists as there are good reasons to have them, but it can get confusing. However, with respect to date handling...yeah, no arguments here.
As someone who had been taught design patterns as an afterthought at University I finally saw the point in them. It's a thick book but it's a quick read because it's got a lot of pictures in it. I thought it was good to learn about the patterns, I'd probably invest in the GoF book if I wanted a reference book though.
Yeah, but this seems like a nice intro. I too was thought that using observers were good in uni but never why and how. It blew my mind when I read the chapter about decorations! Java io finally makes sense :D
It's a good intro, I'm glad I read it, but I don't think I'd ever read it again. If you are reading it cover to cover it's a great way to learn design patterns, but once you understand them, if you want a reference to jog your memory on how to implement on I'd probably use another book or just look online.
Sometimes I see stuff like this and I'm interested for a bit, but then I think, no, you go pat the fucking unicorns.
Based on the psudocode of Quicksort that Haskell code makes no sense to me. Less is not always more. 
Having only thought about it a minute, the only thing I came up with would be to have Unicorn.pat () check the current stack reference and return false if called from the same line number as previously.
I can confirm this. Jsoup is amazing! 
Why do sockets suck? Never gave me trouble. 
It makes more sense if you know Haskell. qsort :: (Ord x) =&gt; [x] -&gt; [x] is a type declaration for qsort. It says, "this function takes a list of x and returns a list of x, where x is a type which can be ordered (e.g. ints, chars, etc.)" These declarations aren't strictly necessary, but it's considered good practice. qsort [] = [] Haskell allows us to specify edge cases. In this case, we're passed an empty list, so, we return an empty list. qsort [x] = [x] This is the same thing. If we're passed a list with only one element, return the list. qsort (x:xs) = let smaller = qsort [y | y &lt;- xs, y &lt;= x] bigger = qsort [y | y &lt;- xs, y &gt; x] in smaller ++ [x] ++ bigger If we're passed a list with more than one element, call the first element x and the rest of the list xs. Build a list of items in xs smaller than x, and quicksort it. Let that list be called 'smaller'. Do the same, but with elements of xs greater than x. Call that 'bigger'. Finally, splice the lists together and return that. Frankly, I didn't understand Quicksort until I saw it written in Haskell.
Looks like you've got to make a class loader and provide a custom Math. Make `Math.random()` always return 0 and `Unicorn.pat()` always return true. 
2 to the 30th power and 2 to the 30th power plus one - the caret symbol got munched
In that case, wouldn't... for (int i = 0; i &lt; (Math.random() * 500) + 2; i++) ...become... for (int i = 0; i &lt; 2; i++) ...and therefore call each println twice?
It looks to me like the stack pointer will be at the same place though. Why not check the i being used in the for loops? Is that possible? Then you could say Unicorn.pat() is true only if the spot on the stack where i is at is equal to 1. Also, how did you plan to check the stack pointer in the first place? I'm kind of a java noob. XD
You can just create a throwable and have it fill in the stack trace. Makes the rest of the problem trivial. Throwable t = new Throwable(); t.fillInStackTrace(); System.out.println(t.getStackTrace()[1].getLineNumber()); 
Can someone provide real examples for this interface? I don't quite see the use in this. You start some big computation task, do other stuff and by the time that's done you *hope* the first task is finished. Otherwise the program is blocked anyway. The last time I had to do concurrency with Java I used Guava's ListenableFuture interface, as callbacks feel much cleaner than Threads or pure Futures.
Huh? Wasn't Scala the most powerful language on the JVM then? Or was it Ceylon?
Further to my point- I believe if you're subverting the results of Math.random(), you could just return -0.002 to guarantee one iteration of each loop.
This seems like a great interview question. Anyone who got it right, I would immediately know not to hire. This is the kind of "clever" thinking that creates awful, unmaintainable code.
If you want to learn java and have a better understanding, run the code through a debugger, like the graphical one in eclipse.
Two things that helped me learn how to deal with inheritance are trees and tables. Write the parent class (Bird) and circle it. Then, draw a line to a circle below it for each of its children. Repeat until there are no more children. Bird | | SillyBird | | Loony If SillyBird had two children, then you would make a fork in the tree and connect a line to each class. In this case, the inheritance is pretty straightforward. Then you have a defined outline of what your family looks like. From there, draw a table. In this case, there should be four columns (3 classes + an extra column). Each row should be every possible method that you care about. In this case, you'll have one row for each of the Constructor Methods (this() and this(int i)), one for narf(), one for poit(). Put the labels for each of those methods in the extra column. I suck with ASCII art, but this might work: Bird SillyBird Loony this() this(int i) narf() poit() Then simply fill in all of the cells with the output for the methods for each class. If a method is undefined for a certain class, then cross out the cell. This is also exceptionally helpful when dealing with inheritance and casting.
is it too ironic that my browser said "failed to load plug-in" ?
An asynchronous task can be put away in a collection and you can go check if it's done using isDone method on a periodic basis. You don't have to call get() until isDone returns true so it's not blocking. Lot of complexity with this method and I agree ListenableFuture is better, but it's built on top of Future itself. 
Nobody said it was for interviews. Indeed, that would be awfully stupid to ask that to a candidate. However, as a puzzle, it's kinda funny.
&gt; The startup of the JVM is still very slow It's in the order of milliseconds. Relatively slow compared to a native compiled binary executable for sure, but nearly indistinguishable for a human observer.
I... actually did a 2D multiplayer action game in RMI, in college. I was young. Yet surprinsingly the performance did not suck that much, even over internet. You can get very low latency round tripping small byte arrays. However dealing with the RMI registry makes the whole thing awkward to deploy and distribute. And no way it would scale past 10K users.
If you have to do 2 or more tasks at once (e.g enrich from multiple data sources) then you can kick them all off as futures. This makes for neat-ish code.. Not used them for a while though.
I'm curious to know why Closure is "the most powerful language in the JVM". Honest question really, I only know Java and a bit of Scala.
Just think about what .println() does and how that is effecting your output, then think about how you might get the correct newlines when you want them (i.e. at the end of a word.) A lot of times I will be working on a program and just sit there are experiment with different ideas. That is the best way to learn this stuff, trial and error. Good luck!
In your for loop you're using System.out.println(c); This will make it so c will print out on a new line every time. Use the System.out.print(c); similar to how you do at the end, and it should work. If you want it to make a new line at every space you'll have to use a line return or a println for spaces.
grep | awk | sh? 
Not really: http://stackoverflow.com/questions/844143/why-is-the-jvm-slow-to-start It's even worse if you're doing work in JRuby and others: http://blog.headius.com/2010/03/jruby-startup-time-tips.html 
Put the Math class in the same package as MagicLand and it will be selected before java.lang.Math, no need to fiddle with class loading.
my first attempt (if you can just modify Unicorn.java) would be to measure the time between the first and second call of pat(). Any call that comes within that time (maybe plus ~3%) will be ignored, others will return true. But thinking of different scheduling algorithms used for the cpu pipelining, im sure none of the method calls will be homogenously distributed!? Imagine a high priority task started while the forloop is running; it will be handled first and the forloop is paused... What are your thoughts on such timing issues!?
You could look at the String-Method "split" for this. http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String) This might be too straight forward though, depending on how strict the assignment demands that you write the algorithm yourself.
You know that Swing is in Java 7 (and that it got some nice updates, incluing JLayer) ?
I've used sockets in semi-big server applications and I haven't experienced issues. So I try again; what's so bad with sockets?
I have no experience with JavaFX, so I cannot comment on that specifically, I just wanted to add that I have never developed any kind of UI in any kind of framework without getting frustrated. Layout managers never work the way you would expect them to, components never work the way they are supposed to - but even when they do, putting everything together is just a horribly tedious process. All in all, I fucking hate creating user interfaces.
Yes I have, but it took a long time to get used to. AFAIK FXML is static and can not be changed through a running program, this is what I hated most about it. The second thing I don't like about javafx is that it controls input and it isn't very good at it, e.g you can't reference a variable if the input code is in a static method unless it is final, I think. The last thing I don't like about it is that you cant use normal java threading, you have to use its own version. If you want here is some javafx stuff I have done: https://github.com/rmirman/Hakd_CTF/tree/master/src/hakd/fxgui
Hey, you're right! Math.java class Math { static double random() { return -1 / 500.0; } } Unicorn.java class Unicorn { static boolean pat() { return true; } } Output: $ javac MagicalLand.java Unicorn.java Math.java &amp;&amp; java MagicalLand UNICORN #1: PAT THIS UNICORN ONCE UNICORN #2: PAT THIS UNICORN ONCE END OF PROGRAM 
A common way to use it is with a list of Futures and a [CompletionService](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CompletionService.html). You submit all of your jobs to an executor then get the result from the CompletionService as they finish.
So take the input as a string, loop through it and add letters to a new string until you hit a whitespace, print the word, increment the count, and continue. Then print the final count at the end. Any questions? import java.util.Scanner; public class temp{ public static void main(String args[]){ Scanner myscan = new Scanner(System.in); System.out.println("Enter Text"); String curLine = myscan.nextLine(), curLetter="", curWord=""; int count=0; System.out.println(curLine.length()); for(int i=0;i&lt;curLine.length();i++){ curLetter=curLine.substring(i,i+1); if(!curLetter.equals(" ")){ curWord+=curLetter; } else{ System.out.println(curWord+"\n"); count+=curWord.length(); curWord=""; } } myscan.close(); System.out.println("There are "+count+" non-whitespace characters"); } } 
Has anyone developed uis without getting frustrated? FTFY
If you know C++ or Python, you should check out WxWidgets. All of the sizers are really straight forward. Once you get the hang of them, it's pretty intuitive to quickly get things laid out just how you want. Any GUIs I build these days are done so with Python and Wx. Long running processes which need speed greater than Python are done in Java, and then simply called from Python. It's a bit of a strange work flow, to essentially have a Python thin client for your Java business logic, but... it's a solution which makes writing the gui a kajillion times easier -- not to mention you get *actual* native widgets! That said, I'm about to enter the suck. I need to write a gui with an embedded via H.264 player. To date, I've found no way to do that with Python (the Wx Player is a bit of a buggy mess), so it seems like JavaFX will be my only option. 
The JavaFX won't replace Swing. Swing remains part of Java, and even evolves. It's just the Swing Application Framework which is discontinued. I am a GUI programmer for many years now, and I have huge experience with Swing. But I have to admit, I never ever used graphical editors, they just sux. I did try several times in the hope that during those many years they evolved. They didn't. I have tested the scene builder, and don't like it at all. So it's much better to code the GUI by hand. I'm not sure about the advantages of FXML either. They try to legitimate it by saying that the web uses a markup language, and how successful it is. Well, as long as you don't want any fancy stuff, it will work. Somehow. But there must be a reason why we have Javascript and Ajax... I developed a custom graphical component, and wrote a demo for it. There are many parts where Swing is much better today (e.g. popup menu events when caught have no reference to the coordinates where the action has happened, just mentioning one). But it's a well thought architecture, and once you're after your learning curve, it's not that bad. /** * @see javafx.application.Application#start(javafx.stage.Stage) */ @Override public void start(final Stage primaryStage) throws Exception { Scene scene = new Scene(new FxGantt(getModel())); primaryStage.setScene(scene); primaryStage.show(); } My custom component (FxGantt) fills its parent with the code above. My component is a GridPane. There's a non resizable row on top, a resizable one - the main view - in the second row, then I have the scroll bar (non-resizable) in the third row. Here's how I set up the rows: private List&lt;RowConstraints&gt; sizingRows() { // First row - time line and resource headers GanttTimelineModel timModel = model.getTimelineModel(); int timHeight = timModel.getVisibleHeight(); RowConstraints rc1 = new RowConstraints(); rc1.setPrefHeight(timHeight); rc1.setMaxHeight(timHeight); rc1.setMinHeight(timHeight); rc1.setVgrow(Priority.NEVER); // Second row - resource panes and activity pane (plus vertical scroll bar) GanttResourceModel resModel = model.getResourceModel(); GanttResourceRenderer resRenderer = model.getResourceRenderer(); int height = resRenderer.getResourceRowHeight(); int visibleNumber = resRenderer.getVisibleResourceRowCount(); int totalNumber = resModel.getRowCount(); RowConstraints rc2 = new RowConstraints(); rc2.setPrefHeight(height * visibleNumber); rc2.setMaxHeight(height * totalNumber); rc2.setVgrow(Priority.ALWAYS); // Third row - horizontal scroll bars RowConstraints rc3 = new RowConstraints(); rc3.setVgrow(Priority.NEVER); List&lt;RowConstraints&gt; rowList = new ArrayList&lt;RowConstraints&gt;(); rowList.add(rc1); rowList.add(rc2); rowList.add(rc3); return rowList; } And that's how I use it in the constructor (remember, it's a GridPane): List&lt;RowConstraints&gt; rows = sizingRows(); getRowConstraints().addAll(rows); 
Meh: henk$ echo 'public class X{public static void main(String[]args){System.out.println("Hello Java!");}}'&gt;X.java;javac X.java &amp;&amp; time java X Hello Java! real 0m0.084s user 0m0.072s sys 0m0.012s It will vary a bit depending on the exact version of java used and your machine of course, but it will rarely be more than 0.15s real time. On another machine: real 0m0.102s user 0m0.081s sys 0m0.023s Typical is between 80ms and 150ms. Yes, that's ~80x more than e.g. a C++ compiled version of the same code, but for users 1ms vs 80ms is nearly not noticeable. 
First I thought I'll answer to BillTheCommunistCat, but it's better here, I just slightly refer to his post: C'mon, let's KISS, no need to make it that difficult, with that curLetter and curWord. And for the God's sake don't use substring(i, i+1) - why don't you use charAt(i)? So back to your question: In the original code, use print instead of println in the first for cycle, and if the character is a space, use println() without any argument. Please also consider, you might count your non-space letters right in the first cycle, and you don't have to traverse the input string twice. Since for calculating the count you need the same space character as that you're going to use for printing the newline, it might be a neat code. Oh, and please consider, the user won't necessarily types the space in at the end of the line, but he might type two or more spaces between the words, and you might not want to print empty lines, or to eliminate the last word. 
(((((No)))))
In the meantime, [JodaTime](http://joda-time.sourceforge.net/)
There's always [Optional](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Optional.html) to force the situation.
I have a book on JavaFX and I must say it's a lot slicker than swing is with a lot less work. You need to relearn it a bit, but once you have it's not bad.
I've used JavaFX with great success where I work and everyone I've talked to also working with it agree that it is a huge improvement over swing. I didn't like FXML though. The editor support isn't there. Instead we use the builder notation which is very nice. It's more flexible and is supported by standard java tooling. Button btn = ButtonBuilder.create() .tooltip(TooltipBuilder.create().text("Tooltip").build()) .graphic(ImageViewBuilder.create() .image(new Image("image.png")) .build()) .onAction(new EventHandler&lt;ActionEvent&gt;() { @Override public void handle(ActionEvent actionEvent) { System.out.println("Button pressed"); } }) .text("Button Text") .build(); I find the JavaFX layout managers are more intuitive than the swing ones, but if you need to do a complicated layout with something like GridPane I'd use [MigLayout](http://www.miglayout.com/) instead. Go over the layout documentation if you haven't already. Try BorderPane center for a full width and height component. Go over the [layout documentation](http://docs.oracle.com/javafx/2/layout/builtin_layouts.htm) if you haven't already. edit: Code formatting.
Sockets are traditionnally blocking I/Os i.e. you need a thread to read() until some data is available for each socket. Threads don't scale in the tens of thousands, especially for long duration connections. Maybe your experience differ; i'm working on a poker platform with hundreds of thousands of users and this is simply not possible. There are ugly workarounds, ie less threads than sockets, but basically async io libs (netty, grizzly, mina etc) solve the problem much more elegantly and efficiently. 
Best nicest and cleanest API is usually to have the method throw an unchecked exception but have an extra state-checking method. java.util.Iterator is a good example of this. The next() method will throw a NoSuchElementException if invoked when there are no more elements, but since the client should check hasNext() first, the exception will probably never be thrown.
Surprised that something this idiotic would appear on infoq
Java-files go into directories according to their package. If you have thousands of java-files in the same package you should probably fire your developer. Or maybe you already did, because sorting files by their contents is dead simple for any programmer worth his or her salt. Either way, this is not a question for /r/java. 
Sorry that it took me a couple of days to reply back, but i don't log in that often. Having advanced math students is always a good sign, but not all math students can program. I use Jcreator mainly because it has a clean interface and beginners won't get too lost or intimidated. Eclipse has alot of nice features, but remember the whole point is to get them comfortable with Computer Science and to hopefully pass the AP exam. Eclipse is good for an advanced project based class or for programming competitions. Remember the exam has two parts. A multiple choice test and a written free response section. The students need to be confident writing code on paper. You will need to get the students very comfortable with OOP, classes, abstract class, and interfaces. Also, the case study! It can be a big pain but you can find ways to make it interesting. You may want to pick up a Barron's AP Computer Science manual so you can kind of see the major sections that students will need to know. 
Too bad that it is so hard to update Java in Linux. I have JDK as well as plugins for Firefox and Chromium. That's 3 different things to figure out. Why can't I just use apt-get ?!
Try on a Mac. All the same stuff. Plus, you want a legacy version for that legacy app your working on? Oh, go find that OS update from 5 years ago, extract it, find the files, manually override the sym link for that version, and don't update, or else you'll have to do it all over again.
I appreciate that you've gone through this, but it doesn't match my experience at all. It has gotten loads better, and certain containers are better than others during startup (Jetty vs. Tomcat) Certain JVMs are better than others. The size of the app also matters quite a bit. It does also matter that my experience is still with Java6, so, maybe that's the extent of my problem too. Java is fine, even if it is slower than others right now.
I haven't used that library, but aren't you only calling the creator, not findNeaerest or the draw line function? Java will call the function calls in the main program and exit, never calling the other functions. the shared main only calls the creator point(x,y), not the associated functions a.findNearest() and a.drawLine(). If this doesn't make sense, then talk with your TA, your professor, or one of your fellow students. Good luck with your homework. Most mistakes at this level are based on bad assumptions, make one change at a time and test every line... it will save you a lot of debugging.
You'll have to rephrase that, or give a more detailed example of what you want. I'm not sure what you are looking for. I can give hints for a few minutes, but I won't be up for long. (the code above don't call drawLine anywhere, so I can't tell what you are doing).
When i try to use a.drawline outside of the for loop it doesn't recognize a and if I do it inside of the for loop it just draws lines to all of the points. I'm not sure if thats a better explanation.
are you suppose to be assuming that the point is always the origin? If not, your distance formula is wrong. You could also set the min to Double.MAX_VALUE, in case your ranges are higher then expected. I'm guessing you area calling drawline within a loop instead of after it?
I'm trying to find the closest point to the origin so from that I think the distance formula should be right. And I've tried calling it outside of the loop with a.drawline but it doesn't recognize a. Would there be another way to call drawline
If you only want to draw one line for shortest value, you'll have to rearrange things. The ugly method would be to use static values for nearestX and nearestY and minimum. This would make them correct, but it's basically treating them as global variables and should be discouraged. 
The better approach would be make something like a ShortestLine class that is created outside the loop, and took in the point as an argument to a function that can be called form inside the loop. (maybe addPossibleNearestPoint(point or x, y)). Then draw a line outside the loop when completed. Hope this makes sense, as anything more and I've done your homework rather than gave you a rough sketch of the algorithm. I'm done for the night either way.
see my other posts. You're right, the distance formula is fine. 
Unless you need platform integration, I'd stick with a web app. We have high-performance browsers now.
I got it to work thanks for your help.
depends on the application TBH There are some things you just can't do on the web (or you can, but it's retarded to do so)
Well, JavaScript is to HTML what JavaFX code is to FXML. So I think that would actually be an argument *for* FXML. And thanks for the code. It seems to prove that it's not easy to create adaptive UIs. Maybe I can make this work with FXML. Edit: And about JavaFX replacing Swing, [Oracle's JavaFX FAQ says that's exactly the plan](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6).
I love the idea of FXML, even when it appears to not fulfill the promises yet. Creating UIs with code sucks so much. You end up with a huge blob of mangled code and it's very hard to see what's going on, even with the notation you posted. I remember seeing videos some years ago, before Vista came out. Microsoft was working on exactly the same idea, defining the UI in some XML format and just adding callbacks to the code. I was amazed by that. And the parts of JavaFX that are working are already great and show vast improvements over Swing. The only thing that annoys me so far is the inability to create an adaptive UI. Which I think is especially idiotic, considering that JavaFX is supposed to bridge desktop and web applications. That stuff should be *easy*.
Yeah, but I don't like Swing. [And Oracle says JavaFX will replace Swing as Java's UI library](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6).
Oracle's Java isn't open source, so most Linux distributions don't include it by default. If you're using Ubuntu, there's a PPA Repository, which will enable you to use apt-get. See http://www.webupd8.org/2012/01/install-oracle-java-jdk-7-in-ubuntu-via.html 
I wish this would exist for Windows.
OpenJDK
Yeah, if you are not using JavaFX. Hopefully this gets resolved when OpenJDK 8 gets released.
The ones that you'll write yourself.
They already porting it to OpenJDK: http://fxexperience.com/2013/02/february-open-source-update/
I'm going to be a bit more broad and suggest topics that might have a few different ways to do them. * Error Handling * Socket programming * some sort of GUI (awt, swt, swing, etc) * Multi-threading It really comes down to what you want to do with your knowledge. I'm not very well versed in more scientific/mathematical uses, but if you learn the above, you can make a pretty cool chat program which I thought was a good project for one of my classes in school.
What krishnagoth said. There's be no way to get at the value of i in pat() since it isn't passed in. Edit: This works, here's a Unicorn class that solves the problem: public class Unicorn { private static int previousLineNumber = -1; public static boolean pat() { int lineNumber = Thread.currentThread().getStackTrace()[2].getLineNumber(); boolean isNewLineNumber = lineNumber != previousLineNumber; previousLineNumber = lineNumber; return isNewLineNumber; } } 
Actually, I believe, there's a way via Unsafe class, maybe using something low-level like ASM framework. I am sure we can somehow get a reference to caller class MagicalLand and digging down we can get a reference to a memory where i is stored. The other is simple: we monitor those 4 bytes each time pat() is called and see if they store 0. Unfortunatly I'm not so proficient in java, but I would love to see someone doing that.
Note that this will not work if MagicalLand.java is pre-compiled, as the java.lang.Math class will be used in the byte code.
Java is verbose, but I don't like unfair comparisons like this. That example is terrible java code. For example (using google guava library): public class QuickSort { public Queue&lt;Integer&gt; sort(Queue&lt;Integer&gt; list) { return list.size() &lt;= 1 ? list : qsort(list); } private Queue&lt;Integer&gt; qsort(Queue&lt;Integer&gt; list) { if (list.size() &lt;= 1) { return list; } int pivot = list.poll(); Queue&lt;Integer&gt; smaller = Lists.newLinkedList(); Queue&lt;Integer&gt; bigger = Lists.newLinkedList(); for (int i : list) { if (i &lt;= pivot) { smaller.add(i); } else { bigger.add(i); } } return Lists.newLinkedList(Iterables.concat(qsort(smaller), Arrays.asList(pivot), qsort(bigger))); } } It's still more verbose than haskell, but much more readable than the first java example. And Java 8, which will add lambda support, will make this even shorter: public class QuickSort { public Queue&lt;Integer&gt; sort(Queue&lt;Integer&gt; list) { return list.size() &lt;= 1 ? list : qsort(list); } private Queue&lt;Integer&gt; qsort(Queue&lt;Integer&gt; list) { if (list.size() &lt;= 1) { return list; } final int pivot = list.poll(); Queue&lt;Integer&gt; smaller = Lists.newLinkedList(Iterables.filter(list, (input) -&gt; (input &lt;= pivot))); Queue&lt;Integer&gt; bigger = Lists.newLinkedList(Iterables.filter(list, (input) -&gt; (input &gt; pivot))); return Lists.newLinkedList(Iterables.concat(qsort(smaller), Arrays.asList(pivot), qsort(bigger))); } } If they just added some more type inference, Java could be a much more compact language.
Except that the first i wouldn't necessarily be stored at the same memory location as the second. But I agree, there's probably some way using Unsafe. I was thinking it would be cool if you could override Math.random() somehow to always return -1/500, so that the loops would always run only once. But they don't show the import statements and I suspect they couldn't be modified. There still might be some way... Edit: Woops, some others here had the same idea...
You will use [String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html) in almost every program. But you should perhaps follow the [Java Tutorial](http://docs.oracle.com/javase/tutorial/) to get started.
I fully disagree. Solving it requires more than just a cursory knowledge of Java. And being able to solve it doesn't mean the interviewee would actually write code like that. (Then again, as an IOCCC winner, of course I'm going to say that.)
Have you heard any news concerning the Glassfish "run" Maven plugin, the equivalent of jetty:run for Java EE 6/7?
&gt;I appreciate that you've gone through this, but it doesn't match my experience at all. I understand, but the numbers don't lie. I've given the command as a one-liner so you very easily copy/paste it in your terminal and see what it does on your system. &gt; It has gotten loads better, and certain containers are better than others during startup (Jetty vs. Tomcat) A container is of course another thing, but even those are really fast. Without any apps deployed to it, Jetty is nearly instant: 2013-02-20 11:01:20.418:INFO:oejs.Server:jetty-8.1.8.v20121106 2013-02-20 11:01:20.433:INFO:oejdp.ScanningAppProvider:Deployment monitor /users/henk/webapps at interval 1 2013-02-20 11:01:20.436:INFO:oejdp.ScanningAppProvider:Deployment monitor /users/henk/contexts at interval 1 2013-02-20 11:01:20.452:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080 But a full profile Java EE 6 application server is nearly 1.5 seconds: 11:07:45,575 INFO [org.jboss.modules] JBoss Modules version 1.1.3.GA-redhat-1 11:07:45,747 INFO [org.jboss.msc] JBoss MSC version 1.0.2.GA-redhat-2 11:07:45,812 INFO [org.jboss.as] JBAS015899: JBoss EAP 6.0.1.GA (AS 7.1.3.Final-redhat-4) starting 11:07:46,637 INFO [org.jboss.as.mail.extension] (MSC service thread 1-4) JBAS015400: Bound mail session [java:jboss/mail/Default] 11:07:46,678 INFO [org.jboss.as.connector.subsystems.datasources] (ServerService Thread Pool -- 27) JBAS010403: Deploying JDBC-compliant driver class org.h2.Driver (version 1.3) 11:07:47,140 INFO [org.jboss.as.remoting] (MSC service thread 1-2) JBAS017100: Listening on 127.0.0.1:4447 11:07:47,140 INFO [org.jboss.as.remoting] (MSC service thread 1-10) JBAS017100: Listening on 127.0.0.1:9999 11:07:47,194 INFO [org.jboss.as] (Controller Boot Thread) JBAS015961: Http management interface listening on http://127.0.0.1:9990/management 11:07:47,195 INFO [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on http://127.0.0.1:9990 11:07:47,195 INFO [org.jboss.as] (Controller Boot Thread) JBAS015874: JBoss EAP 6.0.1.GA (AS 7.1.3.Final-redhat-4) started in 1871ms - Started 136 of 217 services (80 services are passive or on-demand) TomEE is some 2 seconds: Feb 20, 2013 11:11:16 AM org.apache.catalina.core.AprLifecycleListener init INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path Feb 20, 2013 11:11:16 AM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["http-bio-8080"] Feb 20, 2013 11:11:16 AM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["ajp-bio-8009"] Feb 20, 2013 11:11:18 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler ["http-bio-8080"] Feb 20, 2013 11:11:18 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler ["ajp-bio-8009"] Feb 20, 2013 11:11:18 AM org.apache.catalina.startup.Catalina start INFO: Server startup in 656 ms &gt;The size of the app also matters quite a bit. Of course it does, but this is true for many languages. Try starting up OpenOffice or iTunes. Try starting up a typical game (which is heavily optimized C++). It's rarely *instant*. The point is that for very small apps, the overhead of the JVM startup is in the range of tens of milliseconds to one or two of hundreds of milliseconds on the slowest systems. That's not the overhead "they" want you to believe it has. "They" want to make you think the overhead is seconds, maybe minutes, but that's absolutely ridiculous and not the truth (as you can very easily test yourself, don't take my word for it). But Java is used mostly for server side development. While for production it doesn't matter that much if a server startup takes a few seconds more or less, it matters enormously while developing. As shown, a full Java EE 6 server takes up a little more than 1.5 seconds to do a cold start. Again, that's hardly the many minutes "they" want you to believe it takes. &gt;It does also matter that my experience is still with Java6, so, maybe that's the extent of my problem too. Probably. Things have changed for the better, definitely. Especially the servers (*cough* WebSphere*) were slow to start. But even WebSphere is improving (see AmAA that was posted recently on Reddit). &gt;Java is fine, even if it is slower than others right now. Again, it's a given that natively compiled C or C++ will always start faster. The overhead before starting is a fraction of a millisecond. C/C++ also uses less memory on average and optimized code typically runs a bit faster (but mind you, not a *lot* faster). But compared to say Python, Ruby, PHP, etc Java is *much* faster. Not just a tiny bit, but a lot. Java is definitely not slower than others, in fact it's one of the top performance languages. 
I personally wish Windows would not exist :P
Yes. Just make use of the UI designers instead of trying to do everything in code. C++ Builder, Delphi, NetBeans GUI Designer offer very nice editing experience.
Except not everyone has them installed or can even install them.
&gt; .. retarded to do so If only I could convince some of our customers of it... 
Depends on your objective in learning Java.
It would be great if someone would take it upon themselves to release a canonical static compile of OpenJDK.
What about JavaFX Scene Builder? http://docs.oracle.com/javafx/release-documentation.html 
For me (OSGi and modular development evangelist), Kirk Knoernschild's "Java Application Architecture: Modularity Patterns With Examples Using OSGi" is a MUST READ.
fxml - imho it's for the graphical editors, I wouldn't write xml code to describe my gui by hand. And yes it works as long as one doesn't want to push the borders. As soon as one wants to do something tricky, fxml will rather become just another obstacle than an aid. But it's all your choice; I didn't use fxml and I didn't had problems like a component not occupying the full space of its parent. But it well might be that's not the problem of fxml per se, yet, if that's the case, then IMHO it's just not intuitive enough. It's a good idea to have a platform and technology independent GUI description which just works on any platform - it just doesn't work yet. I'll keep testing it periodically... :) As for the code, I would expect to have something very similar in fxml, but I don't know. I just don't use it, I'm quite content with the java code... :) JavaFX won't replace Swing soon: 6. Is JavaFX replacing Swing as the new client UI library for Java SE? Yes. However, Swing will remain part of the Java SE specification for the foreseeable future, and therefore included in the JRE. While we recommend developers to leverage JavaFX APIs as much as possible when building new applications, it is possible to extend a Swing application with JavaFX, allowing for a smoother transition. So we Swing developers may survive for another couple of years I guess. :) However the outlook of JavaFX GUI is nicer, and the code might be more portable (e.g. the standalone and the webapp gui might be the same, at least the promise says so), so I guess and do hope that JavaFX is the future. But as of today, Swing is more mature, an adult, while JavaFX is just evolving, it's in her awkward age and may change significantly from release to release... Edit: typo (cpde) corrected (code)
I must read **all** of those books?
true.
I see your point, yes. I've not worked on a project on that scale, so I don't have first hand experience. I've checked out netty, and by the looks of it, it looks great. I'll definitely check it out further on my next project! 
I do so much XML, FXML just makes me feel right at home. Maybe it really is a matter of preference. Graphical editors for UIs in general seem to, well, suck. I have read many complaints about the code Netbeans generates, although I really like the editor itself. Scene editor on the other hand is horrible to use and it is much easier to just write some XML yourself. And writing UI code by hand... I know how to do it in theory, I just avoid the practice as much as possible because I really hate doing it. In my opinion XML is much better suited to convey the structure of your UI and the properties that define it than Java code. But as I said, it might be a matter of preference.
It's an ugly tool that does not help much, if at all.
Except even being willing to entertain a problem like this is indication of loose thinking. Thinking about this problem teaches you absolutely nothing useful and might make you think that things like fucking around with the stack pointer and using reflection are good ideas. If this were asked in an interview (which I realize was not the intention) the only acceptable answer is: "Fuck you - this isn't playtime, I'm here to work"
I would start with Clean Code, Effective Java and Growing Object orientated software guided by tests. All great books. 
&gt; Without any apps deployed to it, Jetty is nearly instant: &gt; TomEE is some 2 seconds When we get into "containers", aka, webservers, we get into a whole new realm of hurt. [Things like this](http://mostlywheat.wordpress.com/2012/03/10/speeding-up-slow-jetty-8-startups/) don't happen on LAMP style setups without a lot of effort. Another thing that doesn't happen on LAMP style setups? Apache going down because you screw up a script. (again, it *can* happen, but it's rare, I've managed it locally from time to time, but never managed to do it in production) Every place I've worked where I've used Java containers for servers utilized double or *triple* the same number of servers as used in a LAMP configuration for the same user load. Also, runaway processes on Java containers pretty much destroy your containers. Development is a pain in the ass due to perm gen space (fixed in 8? maybe?), and frankly, the fact that you have to reload if you change a simple template. Bells should ring off if you have to redeploy your entire application to change a single template/css page. Java is just a poor, poor choice for web development, yet I used it *every* *single* *day* for just this purpose for the past two years. &gt; Probably. Things have changed for the better, definitely. Especially the servers (cough WebSphere*) were slow to start. But even WebSphere is improving (see AmAA that was posted recently on Reddit). That developers were apologists for WebSphere at any point in the past should tell you something about the present. &gt; But compared to say Python, Ruby, PHP, etc Java is much faster. Not just a tiny bit, but a lot. Java is definitely not slower than others, in fact it's one of the top performance languages. Everyone talks about Java performance in synthetic benchmarks with warmed up JVMs and non-optimized python and PHP (p-code caches, etc..) PHP and Python have JITs as well now, but nobody compares against those. So, yes, the numbers lie. Java is succeeding because: * It is getting better * Lots of people use it because you can find jobs in it/business paranoia about not being able to find developers for alternative approaches Java for web development is usable today. Gone are the day of multi-minute startup times and Java specific backend communication protocols required to support those webapps. RESTful backend services are starting to finally dominate. It's about time.
The "example run" in the problem description shows it being compiled just before being run. That makes me believe this is the correct answer since it's the simplest -- no reflection needed. 
&gt;When we get into "containers", aka, webservers, we get into a whole new realm of hurt. Things like this don't happen on LAMP style setups without a lot of effort. I agree, and I wanted to mention that in the previous post but I got pretty long already. But basically, you're right. It's a mostly Java specific issue (although I believe it can happen in C#/ASP.NET as well, but I'm not 100% sure). Here we have a tradeoff between more dynamic behavior and performance. As almost always, dynamic behavior costs something. You're letting the runtime do things which otherwise a human programmer would have to do. There are a couple things that mitigate the problem though. 1. Most every annotation in Java is mirrored in XML. You can opt to disable annotations (dynamic discovery) completely and manually put things in XML files. This won't make your developers happy, but it surely does speed up things. 2. Jetty (and Tomcat) are poor examples. They are *the only* two servers that don't have a central annotation scanning system. This means that every sub-system (JPA, JSF, EJB, CDI, you name it), will scan each and every jar and class over and over again. Not only does it do that, since with Jetty and Tomcat it's common practice to bundle systems jars with the application, it will also needlessly scan those jars. This is a tremendous waste. All other servers (TomEE, JBoss, GlassFish, Geronimo, JOnAS, Resin, WebLogic, WebSphere, etc etc) don't scan system jars and scan all application jars and classes only once. 3. There is much ongoing research in improving annotation scanning. It's one of the areas where different servers currently compete with each other. &gt;Java containers for servers utilized double or triple the same number of servers as used in a LAMP configuration for the same user load. This is ***absolutely*** not my experience. In fact, it's absolutely the contrary. Facebook has been replacing PHP servers with Java based ones, for exactly this reason: cut down on amount of servers needed. Twitter has been doing the same thing for Ruby. In the Netherlands, a large Dutch site (part of Ebay) called marktplaats.nl has been transitioning from PHP to Java for again exactly this reason. It's pretty well documented that PHP is MUCH slower, so given the same load you can simply do less (if your bottleneck is in the web layer, which is not always the case, it's mostly the DB). &gt;Also, runaway processes on Java containers pretty much destroy your containers. I think you mean *threads*, not processes. Well, this is true. Since Java nearly always uses the thread model (mostly because it can, and it's much more performant), it is vulnerable for hanging threads (e.g. threads stuck in a loop). It's not as trivial to kill a single thread vs a single process. When going undetected, hanging threads or processes is a problem in every system. If another fault happens during request processing (any kind of error, any kind of exception) then this is rarely if ever a problem. The code in question throws an exception, the top level handler catches and reports it, end of issue. The rest of the server and any subsequent requests are not affected by this. In C/C++ however, after any kind of fault you can't be sure about the state of the rest of the server any more if you had used the thread model. So in C/C++ you pretty much HAVE to use processes, which is overall worse for performance. &gt;Development is a pain in the ass due to perm gen space (fixed in 8? maybe?), and frankly, the fact that you have to reload if you change a simple template. I take it you mean restart and not reload (as-in reload the page). If so, I'm not sure where you got this, but this is NOT true. Templates, pages, views, etc can be changed directly on a running server and NO restart is needed. It's making a change, saving the page, hitting refresh in your browser and the change is there. I've been doing this for the last 11 years with all kinds of Java servers, so it's not a new or recent thing. Some points to be aware of though: To support this workflow, you need to do an *exploded deployment*. For development this is pretty much the default, but if you somehow missed this it might be the issue. If you're using an IDE, you have to make sure that it supports *incremental deployment*. In Eclipse this is not a feature of Eclipse itself, but of the individual server runtime adapters. Some of them are pretty eager to restart the server after every little change in whatever source file. If anything, this is an IDE/server runtime issue and not a Java issue. Java fully supports dynamic changes to templates (there's even a setting for the delay that Java scans for changes) and it partially supports dynamic changes to classes (basically the body of any method can be changed and will be hot reloaded, while the structure of the class can't change and does require a restart). If you want to be independent of the incremental deployment behavior of a particular server runtime adapter and as a bonus gain the ability to make arbitrary changes to class files, there's always JRebel, which let's you hot deploy pretty much anything. &gt;Java is just a poor, poor choice for web development, yet I used it every single day for just this purpose for the past two years. No, it really isn't ;) I just it every single day for the past eleven years. If I had to restart after every change and if I would constantly run into perm gen space problems, I would have ditched it years ago. In practice, you can do modify-save-refresh without any issues and during development you don't run into perm gen space issues. &gt;That developers were apologists for WebSphere at any point in the past should tell you something about the present. Maybe, I remain skeptical. But people can change you know ;) &gt;Everyone talks about Java performance in synthetic benchmarks with warmed up JVMs and non-optimized python and PHP (p-code caches, etc..) PHP and Python have JITs as well now, but nobody compares against those. Let the PHP and Python community provide prove then. E.g. let them submit something to the often quotes Debian language shootout at: http://benchmarksgame.alioth.debian.org/u64q/which-programs-are-fastest.php As you can see, JRuby (running on the same JVM!) is tested as well, but it's still slow. Clojure also uses the same JVM, and it's also slow (but not as slow as PHP, Ruby, Python and Perl are). &gt;RESTful backend services are starting to finally dominate. Well, what can I say ;) Those RESTful backend services are often implemented by JAX-RS, which is Java again. A Java front-end (e.g. JSF) can call into those backend services, but there's also something to say for not separating your servers into UI and Business logic, and just to include the business logic in your UI app. If you mean that the future is in having the UI sit completely within the browser (i.e. no more server side web frameworks) then that's not a done deal either. Among others Twitter have tried this and came back from it. Sending a ready to render HTML document from the server can often be faster, despite the somewhat extra overhead in network bandwidth. ***tl;dr*** Java is really not that bad ;) 
I was hoping to be able to use it Delphi style, better forget about it then.
Since when is using reflection necessarily a bad idea?
I could only hope we would get to that point in the interview quickly, so as not to waste too much of each other's time. I'm sure you feel the same.
Learning OSGi is good regardless of language. You simply get a completely different view on modularity (or at least I did).
Fair enough. I'll change the example.
Well, right now OSGi only works on Java/JVM environments. There's been some initial effort to migrate it to .NET, but given there are some important differences in the way libraries are managed in .NET, it's practically impossible. In any case, as you said, modularity concepts and best-practices apply to most, if not all, programming languages.
&gt;At the moment there is only support for Windows but a OpenGL version for other platforms is being worked on. Shame about this point really. Would be nice to play with it, but it doesn't want to play with my OS of choice! The sooner support comes, the better.
&gt;Clojure also uses the same JVM, and it's also slow [so very slow](http://shenfeng.me/600k-concurrent-connection-http-kit.html) &gt;tl;dr Java is really not that bad ;) If you've already sunk a lot of time in learning it and the infrastructure around it.
Every single word!
[This](http://www.amazon.com/Pro-JavaFX-Definitive-Clients-Technology/dp/1430268727/ref=sr_1_1?ie=UTF8&amp;qid=1361379652&amp;sr=8-1&amp;keywords=pro+javafx+2+a+definitive+guide+to+rich+clients+with+java+technology) book. It's JavaFX 2.0, I believe. However, reading the 2.1 and 2.2 updates [from wikipedia](http://en.wikipedia.org/wiki/JavaFX), It looks like it'll be easy to catch up on the rest if I desire one of those features.
I have JRE installed, you have to opt-out of the toolbar installation (which no one ever does, well not normal people anyway) and every time there's an update you have to uncheck it or it gets installed
make it opt-in and there's no problem
Thanks for the advice. Do german projects tend to have a lot of german language in the source code? Its interesting that all of the key words and such are in english so I've always wondered what its like for an American to code abroad. I'd think that at least the requirements analysis and documentation is usually in the native language and an english-only person could really have their hands tied trying to work on a project abroad...
Most powerful language on the JVM huh........ (awaits flame war) I find statements like this tiresome. I've stopped caring about the language (I actively use Java and Scala FYI) and just be thankful I'm working within a JVM at all. Gosling said it best: https://www.youtube.com/watch?feature=player_embedded&amp;v=JluAg5ylgWE#!
Well, its a bit different world. But if you have strong experience with swing its not so frustrating. Even though, learning of JavaFX seemed more intuitive (at least from my aspect of view) then swing. Also adding features of FXML and CSS was a really nice move. And, YES.. I must agree that layout managers are messed.
Yeah, I know, but it will only be available officially in OpenJDK 8.
I used javafx for a couple of small projects. I like it. It is for desktop apps right now. However, I am sure Oracle is trying to convince Apple to let their jvm ship with ios. Once javafx is opensource, it won't be hard to integrate it into android. If both ios and android ran the same GUI api, it would be huge! I am hoping that in the next two years Apple folds and works with oracle to bundle a jvm. Hell I would even take openjdk 7/8 on a jailbroken device. I want to build apps for work and create an in-house app store that can feed both IOS and android. I would be all over that. I know how to build ios apps and I know how to build android apps but I don't want to build one of each for an in-house application. That is a lot of work for a few hundred clients. So for now, webapps it is. 
Whether it's a servlet container, such as Tomcat or Jetty, or a Web Profile app server, such as Resin, or a Full Profile app server, such as GlassFish or even WebSphere, all "Java servers" support JSF 2.x. That being said, single out the most lightweight server within those 3 categories. Target JEE6 for Web Profile or Full Profile app servers. [List 1 of JEE servers](http://en.wikipedia.org/wiki/Comparison_of_application_servers#Java) [List 2 of JEE servers](http://www.oracle.com/technetwork/java/javaee/overview/compatibility-jsp-136984.html) 
tl;dr !
The heaviness problem of JSF is not due to containers, but its design and architecture.
I have tried a few times but I could not get java to modify the scene or any panes when using fxml.
[Java Precisely](https://www.itu.dk/people/sestoft/javaprecisely/) - especially if a 3rd edition comes out that also covers Java 6, 7 and 8 features. It's like a human-readable Cliff's Notes version of the [JLS](http://docs.oracle.com/javase/specs/).
Any way to actually take a look at the product (or at least read a technical description) without having to sign up to Yet Another Website That Has Never Heard Of OpenID?
It could more accurately be titled, "Unit Testing Legacy Code", as the bulk of it is about modifying the legacy code to be testable. I found it to be a great book, because that's usually what you want anyway. Once you have a good set of tests on it then you can modify it without worrying about breaking it.
Agreed. Screenshots or some kinda of 'tour' as a *bare minimum*....
Since type systems were invented.
Not as yet. However, we've gotten a lot of feedback from people who want screenshots or a tour of some kind of tour. I'll be working with our designer to add a more thorough description of what Codifferous can offer developers.
They can be, but they don't have to be. Often times you'll set some or none of the instance variables when you create a new object.
Since you're just starting out, java.io, and java.util are very common and versatile packages.
Check out [this thread](http://www.reddit.com/r/java/comments/18vniu/my_mustread_book_list_for_java_developers/). I would start with The Pragmatic Programmer and Clean Code to learn all the things that coders should know but no one ever seems to tell you. I would then move onto Design Patterns (or Alan Shalloway's excellent Design Patterns Explained). Once you've got those down, read one of the Java books from the Oracle Press and practice practice practice. Syntax is just syntax. Knowing how to design and program will set you apart from the crowd. 
Hm, yeah. Not signing up for the site without seeing so much as a screenshot. In the meantime, I recommend "[Meld](http://meldmerge.org/)", which works with Git, Mercurial, Bazaar and SVN as well as local diffs. Neat tool.
Disappointing, I hope this doesn't delay the final release date
What EE technologies do you use? And what are your system specs? Consider using SSD drives. What is "a while" for start up times? GlassFish seems really fast to me compared to other servers but try the web profile version http://glassfish.java.net/downloads/3.1.2.2-final.html Or try plain old Tomcat if you aren't using other EE technologies like EJBs. JSF only requires a Servlet container and JSF always runs on the previous Servlet spec.
You should pretty much have all of String memorized.
Yes, your target machines need to have the JRE installed as a minimum. Then you can either look at making JARs with a start class, looking at the webstart option or do something like minecraft does which puts it inside an exe.
Do you have any suggestions in regards to the putting the JRE inside of an EXE? 
Because eveeyone else is just saying make a jar, I present [launch4j]( http://launch4j.sourceforge.net). Reading that page will give you a good idea of what you can do with it. I remember hearing about something similar that let you bundle a JRE, but that turns out to be about 300-500 or more extra megs AND huge performance loss (as it is running off the flash drive totally). Your best option really is launch4j or similar IMO, you could even include the offline JRE installer if needed (but it is still a huge installer). EDIT: Aha! Here we go, [exe4j]( http://www.ej-technologies.com/products/exe4j/overview.html). From their features, it supports bundling a JRE with your app, what you want. The only problem is that it is Window only.
Hmm, okay. I think it's not exactly what I'm looking for. What I need are strategies to extract the business logic from the code while removing any dependencies to a mixture of dated and self-written frameworks. I know unit-testing is a crucial part of such a progress but I think I've read enough about that topic in the last time (including some of the books already on that list).
 &gt; What I need are strategies to extract the business logic from the code while removing any dependencies to a mixture of dated and self-written frameworks. You might find it useful in that regard, as most of what it talks about regarding unit testing is removing those dependencies on untestable code (e.g., external frameworks, network/db calls). But it does very much take the attitude that once it's under test it's no longer legacy code (or rather, that it doesn't have to be treated as legacy code as you will know if you break something in changing it).
How about this one? http://www.oracle.com/technetwork/java/index-jsp-135888.html
And don't blindly assume anything that been printed is somehow absolutely and for all times true. If something just doesn't make sense, like a particular design pattern you read about, maybe it's not the right thing to use. Hell, it even depends on the language you're using and the version if some design patterns can/should be implemented as described in books. I think what I am trying to say is that common sense is one of the most important tools you can have as a coder (and life in general).
Disappointing, yes. But I'd rather wait a few more months, than have them throw half the planned stuff out again.
Ideally, yes, because you most likely want to access the value later. But it's not a requirement. public Card(int num) { } The above example is completely valid, although probably not what you want. And any IDE will warn you about num never being used.
There will be a quiz!
The popular libraries (packages) that are part of the Java SE libraries or 3rd party libraries? For the built-in stuff you use java.lang.* all the time (no import even needed) and the second most common is java.util.*
There's a very good StackOverflow post that outlines a couple of deployment methods, I had it saved in case I ever needed to deploy a Java Desktop Application. http://stackoverflow.com/questions/9330209/whats-the-best-way-to-start-java-applications-on-windows-7 Hopefully you can find some interesting info there!
+1 for SSD - it gives a noticeable better performance, not only faster startup time, but also faster compilation. 
Just to add to what at method said, you can also have instance variables that are set outside of the constructor. public class Card{ private int key = 15; private int num; public Card(int num){ this.num = num; } } In this case key is an instance variable, but is not set in the constructor.
Anything new in there in the graphics department?
We use JSF with Tomcat. No bloat involved. Just drop the the JSF jars. Yes, all two of them in your WEB-INF/lib folder and you are ready to go.
I don't either. I only know that I've seen some 5, 6 different JVM lanuages pass by lately, and everyone of them claims to be the most powerful one.
How are you launching your target executable? In order to connect to it you need to add a library to the classpath and also some system properties to make the profiling/instrumentation code start up. Also, if you are new to Java and JProfiler, you are going to have a hard time to do something useful. JProfiler is a VERY powerful tool, just as a Da Vinci surgical robot system is a great tool for a surgeon, but pretty useless for someone not knoledgeable in surgery.
&gt;JSF is heavyweight by design Why is JSF heavyweight by design??? A JSF app with e.g. JBoss AS 7.x starts up in seconds. The model is really lightweight, and it's performance is great. What part is heavyweight???
JBoss AS 7.1.3/EAP 6.0.1 seems to start up fastest these days. It's a bit bigger to download (some 120MB), but starts in 1.25 seconds on my machine (3.4Ghz i7). TomEE 1.5 is a really small download (25MB) but it starts a bit slower (some 2.5 seconds) and makes a bit more noise in the log when starting up. The one server I would NOT recommend is Apache Geronimo, and of course WebSphere 8.5 (not Liberty, the full thing). Every time I try something on Geronimo, it doesn't work. It's slow to startup, there doesn't seem to be ANY inclination from its devs to do anything about anything, and the Eclipse tooling suck beyond belief.
Not that I see: http://openjdk.java.net/projects/jdk8/features
Clean code is good, but it's a tiny bit extreme though. 
The java.util.Date constructors are/have always been pretty fucked up, also the fact that Date objects are mutable. SimpleDateFormat's thread non-safety is pretty fucked up too. I also hate the fact that the DOM implementation doesn't support collection semantics. No iterators, no enhanced for-loop. It's like working with pre-Java2 collections all over again. Very error prone and cumbersome to write.
Hmm.. So why can't your thumbdrive just include a JRE installation on it? You then create a start.bat file that is a double click with your own custom icon... People click the start.bat,.. it points to the JRE on the thumbdrive to start your jar file... Why doesn't that work for you? 
&gt;JSF only requires a Servlet container and JSF always runs on the previous Servlet spec. You'd best combine it with CDI, instead of using the JSF native managed beans. JSF 2.2 will slowly start requiring CDI, until in some later version the native managed bean facility is totally deprecated. Although adding both JSF and CDI to Tomcat is easy (1 jar for JSF, 1 jar for CDI), you have to start thinking if you aren't better off with TomEE at this point. If you ALSO use JPA, then I should definitely not bother with Tomcat and go straight for TomEE. TomEE -is- Tomcat, but with JSF, CDI, JPA already preconfigured and with integration code added (so e.g. no double scanning is done).
I agree "heavyweight" should be qualified, but I am not here to argue for or against the design of JSF. everything is relative, JSF compared to the servlet API is relatively complex. It's *meant to be* more complex (i.e. managing application state) so as to make development easier, as far as i understand.
Why Spider Solitaire? That seems like such a random game for AI, not really a whole lot to do. But he could probably make one himself pretty fast.. (assuming there aren't copyright problems he has to worry about) On things besides Solitaire, the [aisandbox](http://aisandbox.com) is fairly easy to work with, and a lot of fun.
Thinking goes a long way in this industry. I worked with a guy once who would force patterns into his code and it just made for overly designed and difficult to work with code.
[The Java Tutorials](http://docs.oracle.com/javase/tutorial/)
Eclipse is extremely powerful, which is good and bad for beginners. In my first semester we used JCreator from the beginning because it's lightweight and easy. Then a few weeks in, one of our assignments required adding jar dependencies and the professor started us on Eclipse. I liked starting with the simpler tool and then migrating to the powerful one, but that's personal preference I guess. Now I just use Netbeans. 
but nothing. Stop being lazy! lol
You need to start with the books in the linked thread but also start looking at frameworks. I made a comment about some frameworks a while ago have a look http://www.reddit.com/r/java/comments/11rpux/java_java_spring_and_java_hibernate_for_my/c6p1d2u start reading up on spring/maven/ant etc..
+1 for ant and spring. So many devs know how to code but have no idea how to build what they wrote.
As a quick and dirty way of debugging this, I would try printing the value of retry, maybe input.nextLine() isn't returning what you think it is.
I once came across something similar and asked the guy why he'd done it. He said that he'd tried a == b first and it didn't work. It was then that I noticed that he was passing in Booleans and they were being automatically unboxed on the way in.
I have no idea what you are trying to do here. Evaluate if two boolean statements are the same without using ==? If so, you've done it, but I can't imagine why you would want to do such a thing.
It loops when I comment it out.
This was code from another developer on my team that checkstyle found. I do not condone the use of this method.
http://www.quickmeme.com/meme/3t32jr/
Ok. I suspect the problem is in your scan() method. Put those back in, but remove the throws InterruptedException from your main method. I actually wasn't even aware that main methods could throw exceptions. Instead wrap your call of scan with a try/catch block.
There was only one method that was even using this isSame() method call and they were primitives being passed in. I've run into similarly stupid code from this "lead" developer.
No :( Nice try though I thought it was very promising!
Main must throw exception because of my thread.sleep in scan. Try catch still doesn't work (won't loop). If i take the throw in main my scan() gets red lined. EDIT: ADDED MY THREAD CLASS. The problem is that it doesn't even ask me to loop.
Too bad the private keyword can't hide the shame.
return !(a\^b);
I love how Java is "less complicated" than Scala yet you don't have any of this inane retardedness in Scala. You just do if (a == b), no matter if a and b are boolean, Boolean, String, in fact they can be any Objects at all, it *just works as expected*. 
Man, I am in the same boat. Senior, about to graduate, and kind of worried about all the things that I don't know. I want to be a master programmer, but there is just so much to learn. Good luck to ya!
What would be the problem in simply doing this? return a == b;
I have encountered some really shitty code in my time but this... this requires some major creativity skills!
 catch (Exception e) { } never do this, always do e.printStackTrace() so you can see the errors. catch (Exception e) { e.printStackTrace(); }
My "Foundations of Computer Science I" class I had as a freshman required text editor and command line compiling, and we weren't able to use eclipse until FoundComp II. I'm really glad we did it that way too. 
I'm just confused about having one variable named hits and the other named number of hits. I don't understand how I would use them differently, I feel like I'm declaring the same variable..
ah. the variable is called hits, like this. int hits=6; // 6==number of hits see, by number of hits he's just saying what the ***value*** of `hits` should be. Hes' asking you to declare two variables, `hits` and `atBats` and then take a value from the keyboard to put into those two. Then you do the math to calculate hitting percentage.
haha thank you sir. Now it makes sense. I should have known that..
no worries. if you run into any other problems, let me know.
will do
What IDE are you using? Does your IDE allow for input via the console?
The entire point is to *not* use the == operator.
I decided to implement all the operators one day: https://github.com/zachfogg/BinaryMath/blob/master/boolean/boolean.c#L12
Was there any comments surrounding this code? I would like to hear what he had to say about his reasoning.
/r/shittyprogramming is that way ----&gt;
Ah, thanks for the reply.
~~It's a "higher level" thing. Like writing a tokenizer by hand, despite it being apart of the current libraries.~~ Nope. I take it back. Sorry. [This was code from another developer on my team that checkstyle found. I do not condone the use of this method.](http://www.reddit.com/r/java/comments/18yp2r/trying_to_reinvent_a_b/c8j6i01) 
Could it be that you're comparing a char (retry) to a string ("y" or "yes")?
This is actually faster than `==` in some situations due to the way the JVM autoboxes primitives in 32-bit environments. Ahahah, no it isn't. But you thought I was really smart for a second, right?
I'd guess that this is written by a C programmer that was used to a boolean type where any non-zero value is true.
 return !(a != b) Technically not using the '==' operator :P 
Too close.
 private boolean isSame(boolean a, boolean b) { return((a &amp;&amp; b) || (!a &amp;&amp; !b)); }
 return a ? b : !b; //that is the question. - Hamlet 
I'm confused y so many downvotes, I too don't understand why this is needed.
OP here. I fixed the code to get rid of this method entirely. All uses were changed to a == b. Just pointing out some really derpy code.
The developer no longer works on my team. Probably because he wrote shitty code like this.
This actually works fine on Windows. I haven't been able to figure out how to make it work on OS X. Also, I initially wanted a nice, native looking launcher, but after working at this *all day*, my soul has been crushed, and I'll take whatever works! Are you familiar with including the JRE while distributing to OS X? 
Simplified it..... Boolean.valueOf(a).equals(Boolean.valueOf(b)); I feel dirty.
It's when the compiler automagically transform a Boolean (a wrapped boolean) into a real boolean. Boolean b = Boolean.TRUE; boolean c = unboxMe(b); function boolean unboxMe(boolean bool) { return bool; } On line 2, the compiler get the boolean value from b, which sometimes may leads to a NPE
I think input is not pausing the program. You need to change retry = input.nextLine(); too do{ retry = input.nextLine(); }while(retry.equals("")); This should keep waiting for an input.
Is this going to be free, or for pay. If it's for pay how do you compare with other commercial offerings like Crucible. If it is free how does it compare to free products like ReviewBoard, CodeStriker, etc.? Why should I use this instead of those other tools that already have large user base and lots of documentation. What do you offer that they do not? These are all things you will have to attempt to answer in addition to providing a feature list and some screenshots before I will even consider registering. Until then I wish you good luck!
OS X runs like linux does, so a simple bash .sh script should work fine. You can then /path/right/to/java/ or use $JAVA_HOME type variables. 
Just for the record, you apparently meant static method, don't you? 
yes, yes I did. thank you. Wasn't fucking thinkiing.
The "class" is the blueprint of the objects, or better, the "object factory". The "static" methods belong to the factory, the non-static methods belong to the object the factory made. Therefore, to access the non-static method of a class, you first have to instantiate an object (create a new instance of that class). Then you might access the method with the help of that class instance. class MyClass { private int factoryCounter; private int instanceCounter; public static int getFactoryCounterAndIncreaseIt() { return factoryCounter++; } public int getInstanceCounterAndIncreaseIt() { return instanceCounter++; } } class OtherClass { public static void main(String[] args) { System.out.println("Static: " + MyClass.getFactoryCounterAndIncreaseIt()); MyClass instance1 = new MyClass(); System.out.println("First instance first call: " + instance1.getInstanceCounterAndIncreaseIt()); MyClass instance2 = new MyClass(); System.out.println("Second instance first call: " + instance2.getInstanceCounterAndIncreaseIt()); } } It prints 0 three times; add more println's to see what happens. Note: Java initializes the fields, in case of int the initial value will be zero. Note2: you would be able to access the getFactory... method with the help of an instance, but it's considered to be a bad practice. Note3: only one factoryCounter exists, but each instance object (created by the new MyClass() call) has its own instanceCounter. (Well, just for the record, that "one single factoryCounter" is not absolutely true, but you'll have to worry about it only when you'll start dealing with ClassLoader's, right now it's too early and just take it to be true).
Netbeans.
You need read the rest of the line when you get the int for the range. int range = input.nextInt(); input.nextLine(); // gobble up newline Otherwise when you call retry = input.nextLine(); You just get a single new line character, Entering '5\n' and using readInt() will just read the '5' and leave the '\n' still in the input. 
 return (!a &amp;&amp; !b) || (a &amp;&amp; b);
Oh nvm i misread your code
/r/ProgrammerHumor is that way: ↑↑↓↓←→←→BA
The only startup benchmark I could find where TomEE was included it didn't fair so well (but is was a beta).
Don't forget that a child class constructor ALWAYS calls the constructor in its parent. Given Loony -&gt; SillyBird -&gt; Bird. If someone builds a Loony by saying new Loony() not only will the Loony() constructor run but so will the SillyBird and Bird constructor. If a constructor doesn't use super() to call the parent constructor then it gets added in for you effectively. If you leave out a call to super() (like in the Loony() case) just look at it like super() (with zero args) is added as the first line of the Loony() constructor.
/thread
When did resource utilization come into this discussion? I don't know the install number for JavaFX 2, but I'm going to go out on a limb and assume that modern browsers (IE9 and above, Chrome, FF, Opera) have a much broader install base. While I agree that some companies have very restrictive software policies, I don't think that's a very good reason to choose desktop vs web. Clearly if you have a particular customer that you're building for, then you build to spec, but if I were just targeting the enterprise market in general I'd feel comfortable targeting for modern browsers. (By "high performance browsers" I mean modern, such as those in the list above. Rendering engines and javascript interpreters are far better today than they were in the recent past and the market is filled with highly-interactive web applications that compete fairly well with desktop equivalents.)
Behold! The `Trutherizer`: http://mindprod.com/jgloss/unmainobfuscation.html (see #34). Also, if you're lucky enough to ever write in C, take particular note of 15.
Wasnt there a select start in there too? Or am I on a different code?
Sometimes I consider switching careers, and hesitate because I believe that my proficiency as a programmer is mediocre at best. Then I see code like this, and maybe I wouldn't do too badly...
I think that bit depends on the game. In [KoL](http://kol.coldfront.net/thekolwiki/index.php/Naughty_Sorceress_Quest#References) it's exactly what I put.
The sentence does not make sense. You are making a public method = a method call. public void main (){ System.out.println ("hello world"); } You need to understand what a variable and a method is. :)
K thx. 
[Try like this](http://i.imgur.com/IY80DfH.png) 
You need to read up on scanners, bufferedreaders, and bufferedwriters. Here is a very in-depth article which will teach you exactly what you need to do: http://www.javapractices.com/topic/TopicAction.do?Id=42
It helps to understand what you're looking at. class HelloWorld { You're creating a class and it's called HelloWorld. Everything until the matching brace is part of the class. public static void main(String[] args) { You're creating a method called main. It is public, meaning it is visible to other classes, static (don't worry about that juts yet) and returns nothing (void). It accepts as input an array of Strings which can be referenced using the name args. Everything from the brace to the closing brace is part of the method. System.out.println("Hello World!"); This is the line of code inside the main method that actually prints "Hello World" to the console.
In Eclipse you can type the word "main" (no quotes), hit ctrl+spacebar, and hit enter. It will automatically fill in the main method for you. You can also type "sysout" and hit ctrl+spacebar to fill in System.out.println();
Only when playing with two players.
Shoulda implemented runnable.
Trust your instincts for they serve you well in this case.
Someone's getting paid by the line.
IT'S GLORIOUS. ALL HAIL THE MIGHTY H4X0R
This reminds me of all those times I've seen stuff like: return condition ? true : false; or even worse: if (condition) { return true; } else { return false; }
What have you got so far? What's your specific question?
If you want to use the full power of Eclipse -or pretty much any other IDE-, you need to learn its templates and key bindings... I always make sure my team members at least know the basic keybindings. If you are a programmer, your IDE is your main tool, and as any other tool, you need to learn its inner workings... Can you imagine an airline pilot not knowing half of his plane's controls? To get the list of templates, go to Window &gt; Preferences, and then in the preferences window, navigate to the *Java &gt; Editor &gt; Templates page*. The ones i use the most are syso, syse, main, for, cast, try, if, else, and also several others I created for my team to simplify declaring and using loggers. To get the list of key bindings, go to the preferences window and navigate to *General &gt; Keys*. For me, the most useful keybindings are: * **Alt + Up/Down**: Move current line UP/DOWN * **Ctrl + Alt + Up/Down**: *Copy* current line UP/DOWN * **Shift + Return**: Insert new line below current line and move to that line * **Ctrl + Shift + Return**: Insert new line above the current line and move to that line * **Ctrl + Left/Right**: Move the cursor one word/identifier to the left/right * **Ctrl + Shift + Left/Right**: Select/expand selection with the word/identifier to the left/right * **Ctrl + L**: go to line * **Ctrl + J**: in-place incremental search (type Ctrl+J, start typing the text you are searching, type Ctrl+J to cycle through all the results) * **Ctrl + K** (with selected text): Cycle through all the appearances of the selected text in the current file * **Ctrl + Shift + T**: Open the Open Type window * **Ctrl + Shift + R**: Open the Open Resource window * **Ctrl + Shift + F**: Format full file if no selection, or selected block of text otherwise * **Ctrl + Shift + O**: Organize imports * **Ctrl + Shift + M**: Add missing import * **Alt + Shift + L** (with selected expression): extract variable * **Alt + Shift + R**: In-place identifier rename/replace * **Alt + Shift + S**: Open the Source popup menu * **Alt + Shift + T**: Open the Refactor popup menu * **Alt + Shift + Z** (with a line/block of code selected): Open the surrounding templates popup (templates that go around a selected block of code like try/catch)
dailyWTF material you got there.
http://fahdshariff.blogspot.de/2011/08/useful-eclipse-templates-for-faster.html
/r/learnprogramming /r/javahelp Also, I'm not sure if you're trolling or not. Submitting an image so you'll get stupid karma? This is literally the first step of writing a program. ***ANY*** quick google search for a java hello-world programming would have given you the answer. Or any "learn java" tutorial or java class in school. In like the first lesson. 
&gt; return condition ? true : false; And why would that be bad? It's a perfect ternary statement and way better than the if-else-block below.
Use a [CountDownLatch](http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/CountDownLatch.html) to synchronise the threads. Give it the number of worker threads that will be used (i.e. not the main thread) in the constructor, and then call latch.await() from the main thread when you're done dispatching tasks. In each worker thread, do the expensive calculation and call latch.countDown() to indicate that the thread has finished its work.
lool i was already starting my rant against you :)
The simplest way I can think of to solve this is using a fixed-size thread pool and a BlockingQueue: ExecutorService executors = Executors.newFixedThreadPool(n); final BlockingQueue&lt;Integer&gt; results = new LinkedBlockingQueue&lt;Integer&gt;(lights.size()); for (final Light light: lights) { executors.submit(new Callable&lt;Void&gt;() { @Override public Void call() throws Exception { results.offer(expensiveFunction(light)); return null; } }); } Then, all you have to do is iterate the BlockingQueue: for(int i = 0; i &lt; lights.size(); i++) { // Blocks until a computed value is available, ordered by // whichever of the n threads completes the function first int value = results.take(); ... } And don't forget when you're done: executors.shutdown(); Otherwise the JVM won't exit normally.
I love how nobody agreed with what you said. 
In Contra, the code for 30 lives is ↑↑↓↓←→←→BA. Then, once you've entered the code, you can press start to start a single player game, or you can press select start to start a 2 player game. These last parts are not part of the code, because you would normally press start to start a single player game, and you would normally press select start to start a 2 player game. 
It's bad because you can simplify to return condition;
For a simpler file API you could look at http://commons.apache.org/io/api-release/org/apache/commons/io/FileUtils.html. To convert your variables to text, i would use json or XML, since there are libraries like Xstream and Gson that serialize your data without a lot of boilerplate mapping code. 
**Firstly** public static void printOldParagraph(Object t){ t.createOriginal(); String s = t.getOriginalMadLib(); System.out.println(s); } This will not work. the method "createOriginal()" and "getOriginalMadLib()" are unkown to the passed argument (which is of an Object type). It should take a "MadLib" as parameter like so: public static void printOldParagraph(MadLib t){ t.createOriginal(); String s = t.getOriginalMadLib(); System.out.println(s); } Same goes for every other method signature that you have using "Object" as an argument rather than "MadLib" **Secondly** You have defined the WordLists "noun", "verbs", "adjectives", "adverbs" as a local variable inside of the main Method of the driver. However you attempt to access those WordLists again later in a different method (makeNewParagraph). Seems best to define the WordLists on a classlevel (in case you need them over multiple methods). And them populate them in your main() method. Like so: public class MadLibDriver{ private WordList nouns; private WordList verbs; private WordList adjectives; private WordList adverbs; public static void main(String[] args){ nouns = new WordList("nouns.txt"); verbs = new WordList("verbs.txt"); adjectives = new WordList("adjectives.txt"); adverbs = new WordList("adverbs.txt");
Sounds like a supervillain
Have been reading CODE for a while now...slow introduction but great book!
It's OK, I wasn't really making a point but just a side comment, I don't take it harshly. I think that anyone experienced in an even remotely functional language will agree with my comment (this excludes PHP and JavaScript of course, which are in the same WTF language camp).
An ExecutorService is a great abstraction to coordinate work among threads, and get the results back, with most of the thread safety and plumbing handled for you. sh0rug0ru's example is good. I would add that if you don't need your main thread to get the results back in the order they're completed, and just need the main thread to get all the results back by the time all the results are completed, you can simplify a bit by using the Future returned from the submit() method, and then your callable just needs to return its result rather than worrying about where to stick it: ExecutorService executor = Executors.newFixedThreadPool(10); List&lt;Future&gt; results = new LinkedList&lt;Future&gt;(); for (final String d : data) { results.add(executor.submit(new Callable&lt;Integer&gt;() { @Override public Object call() throws Exception { return myExpensiveFunc(d); } })); } for (Future result : results) { System.out.println("result = " + result.get()); } executor.shutdown(); 
&gt; and using reflection are good ideas Using reflection in Java is a bad idea? Awww. It's cute when the monkeys think they know how to code! /sigh
I like to see more openjdk involvement too, but I don't think flooding this sub is the way to do it. Take it easy! Also, hash tags in titles don't really tell anyone what the post is about, except for those who are already following this stuff on twitter.
[clap clap clap](http://www.filmsavior.com/wp-content/uploads/2009/10/SlowClap.gif)
Thank you. That was my impression of all the comments on proggit that make me feel dumb.
 public boolean isSame(boolean a, boolean b) { return (a?(b?true:false):(b?false:true)); } or, better yet: public boolean isSame(boolean a, boolean b) { boolean retVal = false; if (a) { if(b) { retVal = true; } else { retVal = false; } } else { if(b) { retVal = false; } else { retVal = true; } } return retVal &amp;&amp; !((a?(retVal?true:retVal):(b?retVal:true)) ^ retVal); }
When i load up the program, my array is not restores whatsoever. It is as if it never read from the file. The file is created with a bit of data in it, but I do not know if it is written correctly.
moo for the win
It's exactly equivalent to: return condition; Another version of this I sometimes see: if ((some_expression) == true) { ...
You actually have two different, but sort of related questions. One is, "Can a jar I build on one platform be run on another platform?" And the answer is yes, as long as the version of the java compiler you used matches or is an older version than where you are trying to run. For example, you build a jar on Windows with JDK 6. That jar can then be run on any other Java SE JRE that is at least version 6. This is the "Write once run anywhere" part of java. Now on to the second part, why you can't run a "normal" jar on Android. Notice in the above explanation where I said "*Java SE*" JRE. There are different *kinds* of Java runtimes. On Android, it happens to be a version of the Java Mobile spec, which is not the same thing as the Java SE spec. JME is a more stripped-down version of the "complete" Java SE spec, designed to run on smaller (i.e. mobile phones etc) devices. This specifically is why you can't run a standard jar on Android. If Android implemented the full Java SE spec, then it would work, but Android does not. 
Thank you.
Thank you. One other question... is it *theoretically possible* that one could take an existing JAR (not the source code) and decompile it somehow then recompile it for a different Java runtime? Note: I'm just asking what's possible; not what's legal, permissible or kosher. Not that I have the skills to do that even if it were possible. Just curious. The great Gerry Duprey wrote *DVArchive* many years ago and made his work available to the ReplayTV (an early type of DVR and competitor of Tivo) community of tv-obsessed nerds. He never sold it, but never made his source code available either. It's long been suspected that Gerry thought he had a lot more to lose than to gain by releasing the source code. That was years ago. Since then, he's been like Bobby Fischer. The chances of getting the code from him are zilch. Again, thank you very much.
This is missing 2 important ones IMO: Java Concurrency in Practice by Goetz Java Performance by Hunt 
You don't also need to close the FileOutputStream, do you? If you take a look at the file after serialization, is there anything there? Is there the 'right' amount of stuff there? You can override the default Object serialization and deserialization to make it easier to tell if things are being serialized correctly.
Sorry if I missed it (on mobile) but what is this Cow class and what does the updateNumberOfCows method do? 
This is a very basic question. Why don't you ask your professor? Surely he went over this in class.
I'll give you a hint - the method "equals" is defined in the String object (in fact, all String objects).
Difficult to maddeningly difficult. With the source code it would be easier to get it to run on Android. There would need to be new code for Android apis and changes to existing code. But the bulk of the code would work. 
There are Java decompilers out there. I think the current one to use is called "Java Decompiler". The JD-GUI wrapper is nifty.
Android doesn't run java bytecode, it runs dex bytecode. So while the language is java, the compiled language is no longer JVM bytecode. Assuming it was JVM bytecode, there is different library/language support, so some things might not work. You can use Jars in your android applications, given that they don't use any libraries that aren't in java.
It increases the static numCows value (in the Cow class) by 1. It's besides the point really, it's just to keep track of something for other uses. The Cow class is a Class I created and it represents a Cow Object containing specific variables that need to be saved.
I've fiddled around with it a lot and it doesn't make a different whether I close the FileOutputStream or not. I'm assuming it's to not waste resources so it is better to close it. Right now I am just trying to make this work. The file seems to save the array saved in some manner (maybe not the right one) as there is "Lrobot.Cow" written in between mixed characters and multiple lines of P. I was gonna paste what is in the files but it doesn't let me copy paste it. There are 6 lines of with a bunch of mixed characters and the last 3 1/2 lines are repeated P's. I'm aware that it's not supposed to be readable, but how can I tell if it is saved right? And if it is saved right, why won't it load right?
right, Android has a "DVM" while all our desktop machines (including our development workstations) have the JVM. You need to boot an Android system (real or emulated) to get a DVM. Now if you have your jar, you should be able to run it through the DVM bytecode translator and run it...but you'll have to make sure all the libraries/classes used by the original Jar exists in the Android API or else you'll get run-time errors!
Although I am both amused and glad that you are making progress, your code angers the camel-case gods. http://java.about.com/od/javasyntax/a/nameconventions.htm
Am I the only one who thinks learning a programming language using an IDE is a bad idea. 
Try Ctrl+Shift+F...your eyes will thank you :)
Swing and AWT are really not touch screen optimized, so there isn't a great reason to bring them to a tiny touch screen UI. Not to mention that both are not used much anymore
I sort of agree for your first few programs. You should know how to use javac to compile and build one or more java files in command line. After you've got that (along with some arguments) down, you can switch to an IDE.
this is my example https://gist.github.com/tonetheman/5016416 The only thing I did different really was I wrote the number of cows out first. It works... moo
The closing paren position on the while loop kills me.
Even if Android were to use Sun/Oracle Java instead of Dalvik, Sun created a much different runtime library for mobile devices (J2ME) than for desktops.
It puts you in the habit of relying on the IDE. Don't get me wrong, I'm not one of those text editor programmers. Eclipse plays a dominate part in my daily work. Last year I had an intern who couldn't do anything without using Eclipse. He was clueless on how to solve problems anytime he had a version issue, wrong path, or something that wasn't syntactical. This lead into problem troubleshoot outside of java, such as our build scripts, not to mention our convoluted OSGi implementation. Learning to code via the command prompt forces you to be careful and learn syntax. When errors crop up you have to notice where the error is and what the error means as opposed to relaying on the right-click solutions that are built into Eclipse. It forces you to understand class paths and understand what Eclipse is doing behind the scenes. 
damn it, came here to say both of those
Exactly and, exactly. Some sort of source-code translator could, possibly, "rework" the Swing code into Android UI code but; that's pretty far-fetched. Edit: not to mention this would need source code and not a byte-code filled JAR file (trying to stay on topic)
You should be using a for loop, not a while loop. Edit: Sigh. Ok, I'll explain. Right now you've got int glass = 1; while(glass &lt;= maxglass) glass++. These are spread out, so it takes a couple of seconds to work out what's going on. With a for loop you can collapse that into a single line, like so: for (int glass = 0; glass &lt;= maxglass; glass++) Now, to someone reading the code it's instantly obvious what's going on. It's shorter, and it's much easier to read. I realize this program is not going to see a huge amount of maintenance, but you really should be using the for loop by instinct.
he's got spaces before some semicolons but not before others, and a space before the closing while paren but not after the opening... `twitch()`
List what you should use while statements for then.
Very true, but given that the class is called 'While_test', I'm guessing the idea is to use a while loop. Then again "about halfway" through seems awful late to be learning about while loops. Though I guess that should be for (int glass = 1; glass &lt;= maxglass; glass++) Edit: F#rmatting
&gt; given that the class is called 'While_test', I'm guessing the idea is to use a while loop Call it For_loop, then. :-) Seriously, you should feel uncomfortable writing this as a while loop. If you don't, repeat until you do. &gt; Then again "about halfway" through seems awful late to be learning &gt; about while loops. Originally, I wanted to comment "I hope it's a short book", but I felt it was too unkind, so I didn't. &gt; Though I guess that should be D'oh, yes. Too used to starting with zero. Edit: WTF is with the downvoting?
For fun: for (Iterator i = list.iterator(); i.hasNext();) { int j = (int) i.next(); System.out.println(j); } ~~I think Integer might work for j since i.next() returns an object.~~ EDIT: Derp, still gotta cast.
&gt; one main difference is while loops are best suited when you do not know ahead of the number of iterations that you need to do. when you know this before entering the loop you can go for for loop. The most common example in PHP, applicable to other languages, is database queries: while($row = mysql_fetch_array($result)) Perfect since you don't know how many rows are being returned (and it doesn't really matter in many cases). 
Why do you need a no install method? "BAM" doesn't really convey the reason. Are the computers not yours? No install permissions? For Macs you can do this: http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/packagingAppsForMac.html Edit: You also might want to look at http://portableapps.com/ for Windows machines. Looks like they have some Java stuff.
Weird example. You can use generics, and then you won't need to cast, but really in this case you should use for (int j : list)
All objects have an .equals() method, though you can't call methods on null.
Not when Java itself isn't installed.
there is also the loop close bracket not spaced correctly. Eclipse LPT: ctrl-a, ctrl-i.
I believe it could work at a binary level - given the AWT/Swing/SWT classes aren't present at all on Android (I think) you could drop in a .dex with compiled classes inside that masquerade as the classes your application would expect to access on the desktop, but shims them to Android. I don't know if Dalvik restricts classes from sitting in the java/javax namespace, but it might be more possible with SWT. Having said that, the actual translation from the desktop UIs to what Android expects (its event model for a start) would likely be extremely challenging.
While we're picking nits, I'm also not a big fan of having a space before the assignment operator, but not after. int glass =1;
I'm using 3.8.1 and really like it. Was using 4.2 or 4.3 for awhile but had to switch back due to aforementioned slowness
The input.nextLine() only returns *what you have already typed.* You have to run it in a loop or add a delay if the user has not already typed anything.
Yes, this seems to be a terrible waste of time.
Jeez! This should be in chapter 1 or 2, not halfway through the book. I'm teaching a Java course for beginners and most people have gotten beyond that to arrays. (see http://quarkphysics.ca/ICS4U1) Next week I'll start objects, classes, static, instance ... If anyone wants to join, I'll be happy to mark their work and add comments to say what could be done better and why. PM me and I'll send you my email address. (You (and I) can also track your progress on a Google Docs spreadsheet.)
I remember programming on an early version of Borland C++. That thing couldn't even tell you when you had a missing ";" I've done all sorts of things I now consider "stupid" like write my own physics engine from scratch, as well as a UI from scratch. Sure I learned a lot, built some useful libraries, and maybe I can now brag about how "hardcore I am" but those are months wasted that could have been spent actually FINISHING my project(s). Hell, 90% of my libraries are simply things that make it so I don't have to do that "hardcore shit," and can actually make stuff. I actually consider it irresponsible on my part to reinvent the wheel. I get your point - but consider the artist who spend 5000 hours creating a work of art that is extremely technical and impressive to other artists trained in "art appreciation" but the end result is something no average person would put on their wall even if it was free. Last thing I want to be is "that artist" nor "that programmer."
Please post your drawing code.
Well we don't waste compile time for 'more complicated' features
Boss: How many lines did you write today? Lead Dev: OVER 9000!!!!
Besides the readability thing; it almost doesn't matter. AOT/JIT compilers certainly optimizes this away most of the time.
Quit trying to give them the benefit of the doubt :P
Yeah I just did for loops and wrote a similar for_test program. //Displays multiples of 12 up too 1000 for (int dex = 0; dex &lt;1000; dex++){ if (dex % 12 == 0){ System.out.println("#: "+ dex); } } 
Oh yes. Thank you so much 
Darn, I clicked and thought it was going to be a Javamukti tutorial.
Both your title and that of the article you linked to are misleading. Neither are Lambdas nor the dev-preview are ***indefinitely delayed***. Lambdas were pushed back to a later milestone, that's all. And you can still get [the preview](http://jdk8.java.net/download.html) of the current milestone (albeit without lambda).
Python, from what I've seen, is a great task automation language (in a sense) - however, I can't for the life of me come up with a reason for a language having significant whitespace.
I'm actually quite excited about 1.8 - and all the future release goals are cool, too
When you are done with that, check this video tutorial series out. Helped me when i was learning java. http://www.wibit.net/curriculum/courses/programming_java
&gt; Hold shit No thanks.
pardon my french, but that is retarded. They seem to be teaching to the slowest person in the class. I teach to average-bright people. The slow people have to work harder or drop out. We write code 5 hours a week and only have 1/2 to 1 hour of lessons a week. We could go faster if I could get them to do stuff at home &amp;$;$#@!! I spend the class time going around and helping individuals with their questions. I also try and group the students so that they can help each other. It's a nice class. We've spent 3 weeks doing all of the basic syntax. I should point out that my students have programmed in Basic before, so they know what variables and loops are. Now we're going to figure out what objects are. I rarely draw UML diagrams. I think that in many cases they are simply a fad that overcomplicates things.
I stopped reading when it said Java apps were complicated to deploy. Java webapps are easier to deploy than any other technology I've used. Drop a WAR file into Tomcat, job done. What's so complicated about that?
I would go for maven+spring.
I'm probably missing something, but what's so different between hitting enter for a new line and this one: Shift + Enter Start new line
you can even point to NetBeans or Eclipse the directory of Tomcat and they'll deploy it for you.
Yes but just for deploying into the dev environment, right?
J2EE nonsense under JBoss or Websphere can become unnecessarily complicated. Java deploys don't have to be complicated, but people manage to make it complicated sometimes. 
A for loop is used when you know exactly how many iterations you're performing prior to entering the loop (e.g. in the example. as maxglass is a known value). While statement is for zero or more loops, where the upper limit isn't known prior to entering the loop. Do-while is the same as a While loop, but where the loop is to be executed at least once.
That's a side effect of the container though, not of the application. At work we write some very complicated software, and the production installation process is hellishly complicated because that's how the operations people have it, but in development we deploy it by literally dropping into Tomcat and job done.
http://pastebin.com/AV0rE6ck Thank you for the suggestion!
I don't see why you couldn't point it to the production server... or you could write a simple ant target to move it for you. even a ruby script.
Generally speaking, it's not a good idea to deploy into production straight from the developer's IDE. Then again, I have no knowledge of your application environment. I can only draw from my own experience which, admittedly, might be on a larger scale and greater complexity than yours.
True, but those applications require a J2EE container, so until a less complicated alternative comes along, the application is coupled with the complexity of the container.
I never said it was a good idea, that's why I used an ellipsis. Maybe in English it doesn't have the same effect as in Portuguese, but we also use it to denote sarcasm through an unfinished thought, going into silence. But it doesn't mean it's impossible or hard for the IDE to do it, though. Or the continuous integration server. Or your manager, through a desktop shortcut that launches a script on the remote machine...
Or things like play. you just unzip and run a start script.
Rails people just love bashing Java.
See - I hear people saying things like that a lot, and for developers it is, but from a sysadmins point of view that's actually harder to work with. How do you have many Play applications running on the same server at the same time, without needing to keep track of port number allocations and all that stuff? Dropping a WAR file into Tomcat is much easier from that end of the process... And using Jetty with Gradle or Maven actually makes running a WAR build at least as easy as running Play, if not easier...
I don't understand your comment. Are you saying Rails doesn't require a pre-install of some type of runtime? Serious question as I have never worked with Ruby or Rails so I don't know the environment, but isn't Rails some sort of container that has to be pre-installed as well? To install tomcat, you download a tar.gz file, unzip it and you are done. Then you write your application and create WAR files and drop them into the $CATALINE_HOME/webapps directory and your web application is deployed. Now, if you use JBoss you can go a little higher using an EAR file which combines multiple WAR files that can interact with each other and with common libraries. Tomcat doesn't support the EAR model, but I've only ever used it for one project.
in glassfish, just do *asadmin deploy file_to_deploy.war* and you have a full java ee 6 compliant container
How does glassfish perform in comparison to its competitors? I've never used it before.
http://stackoverflow.com/questions/1836317/which-maven-glassfish-plugin-to-use
I really was referencing Java web-applications only. I've only toyed with Rails for some PoC related work and configured Redmine. 
Any decent sized company here in the states has to abide by [Sarbox](http://en.wikipedia.org/wiki/Sarbanes%E2%80%93Oxley_Act) rules these days, which means there must be a separation of concerns. Developers are not allowed to modify anything in a production environment. Everything has to go through change control and have an audit trail of approvals essentially. 
Thank you so much. It works now,
I totally overlooked that *condition* was supposed to be a boolean expression. In that case you're right =)
I wasn't going to say anything, when I first saw this post, because I figured it'd just get voted to the bottom, but yeah. I guess they wanted to cover all of the technical details before they got into any actual code? But that doesn't seem like the best approach. Or maybe it's just a really short book, and this was chapter 2/5.
huh? I think it's a nice tool, helps with making layouts and stuff, the only thing it lacks is full integration with eg. Netbeans, kinda like swing builder is integrated, as soon as that's done it will be more than enough to create apps.
The thing with Java is that it is a very slow moving language. It evolves very slowly and there are very few new things in the language since Java 5 was released. However, to answer your question...[Effective Java](http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683) is quite good once you've learned the basics of Java.
http://maven.40175.n5.nabble.com/Apache-Maven-3-0-5-released-td5748185.html
True. 8 will be huge though
There are plenty of simple ways to do things. The issue is that developers are usually not very talented.
I've been watching Stanford's Programming Methodology YouTube videos. They seem like a good place to start, even though they are 5 years old.
Use and enjoy eclipse. Have used net beans every now and then (although I guess it has been a while now) and never felt comfortable with it. intelliJ was the other one that I was introduced to and whilst it had some useful shortcuts for building web applications felt that it locked me out from programming too often and required too much mouse action.
IntelliJ.
If you are new: NetBeans or IDEA. Having said that, I've been using Eclipse since it was called WebSphere Studio Application Developer (get off my lawn). I'm just so damned productive with it that it is *very, very, very* hard for me to switch without major losses in productivity.
Eclipse.
Sadly that seems to be an understatement. 
When I first started my current gig we were using IBM RAD 6 w/ Websphere 6, so I know where you're coming from. We're currently using Eclipse 3.7 w/ Tomcat 6.
&gt; Use and enjoy eclipse. How. Is. That. Possible. ? I use both Eclipse and IntelliJ. I have a project that requires Eclipse (they have a custom plugin that is required to edit rules in their rules engine) and use IntelliJ the rest of the time. I find it is possible to use Eclipse. Be productive in Eclipse. But enjoy? Impossible. Every time Eclipse changes perspective it is jarring. 
Do you do application or Web development? App: eclipse. Web: intellij.
And meanwhile Java has gotten a lot easier with Play and JavaFX. Who would have thunk?
Then get on the JavaFX mailing lists.
Because Open Sores losers are LOSERS. Oracle's JDK8 is on-track.
For me netbeans is the most productive ide, eclipse gets in the way way too much. Eclipse used to be good, but has grown into a beast - too many cooks in the kitchen I guess.
Netbeans. I find eclipse to be incredibly clunky; no option/button/feature is *ever* where I expect it to be. The swing gui builder is junk compared to the netbeans one. The C/C++ tools are better in netbeans [although for fortran, eclipse has by *far* the best plugin, photran].
I cannot up vote this enough. Intellij does everything.
After the Juno release, i switched to IntelliJ. 
Did you remember to implement Serializable in your Cow class? There is no need to loop through the array serializing each individual Cow object within. You can just serialize the whole array object itself. However, Cow must implement Serializable for this to work. And if cow has any instance fields that are not Serializable then Cow must contain the following methods: private void writeObject(java.io.ObjectOutputStream out) throws IOException; private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException; In these methods you will need to handle the serialization and deserialization of any non-Serializable instance fields in your Cow class. EDIT: Also, you are not properly closing your streams.Since it looks like you're using Java 7, use a try-with resource block to ensure your streams really get closed. Example: try (FileInputStream cowData = new FileInputStream("CowData.ser"); ObjectInputStream in = new ObjectInputStream(cowData)) { //Do your stuff. } catch (FileNotFoundException ex) { //Log or whatever. } catch (Exception | ClassNotFoundException ex) { //Log or whatever. } The way you have it now, if an exception arises before your close() call is reached, your stream will not get closed.
I've heard it's great... Is there a way to get it as a student for free (or cheap) or something? 
I use Eclipse Juno, and love it. I've tried Netbeans, and could not figure out how to do a few things that make eclipse my favorite. I can say though, that unless it is ABSOLUTELY necessary, never use BlueJ...
Out of just those two options I would go Netbeans, but out of all IDEs I would go with IntelliJ
Eclipse was never called that, Websphere is (was?) just based on Eclipse. 
After the Juno release, I just reverted to Indigo.
Between Netbeans and Eclipse, I prefer Netbeans. Eclipse feels so horrible to use, it's not even a contest. There's of course IntelliJ as well and when it comes to speed IntelliJ beats them all. However, as I just wrote in another thread, JetBrains made some UI decisions that I absolutely loathe. I have been using Netbeans for so many years now, that my attempts to switch to IntelliJ after I bought a cheap license last year failed so far.
I use both. I've always thought it was in my interest to have knowledge of more than one of the popular tools. Might make it easier to drop into a place some day especially since they are both free. It also lends a better perspective to where the tool ends and the language/framework begins. I've met a lot of people who had trouble drawing that line, and I think it is usually that they have never worked outside the one tool. I would say that when netbeans does something, it is *usually* better integrated with the rest of the ide whereas eclipse is much broader in scope, but sometimes not as well done. More complicated, more flexible, and not as intuitive.
IntelliJ feels so damn slick and I really want to use it. But some things are so badly implemented, it's very hard to switch from Netbeans.
If I recall correctly, we were developing on a product called Websphere Studio back in 1999. (Enjoy the RedBook [here](http://www.redbooks.ibm.com/redbooks/pdfs/sg245755.pdf).) In late 2001, IBM open sourced Eclipse, and that product looked an awful lot like Websphere Studio. Edit: Even found a [cite](http://www.infoq.com/news/2011/11/eclipse-10) &gt; With the initial release of IBM WebSphere in June 1998 (at that time, just a Servlet engine), IBM needed a development tool to be able to complement its existing Java development tools. IBM developed WebSphere Studio to provide the HTML editing, released as far back as September 1998 with the combined release of WebSphere Studio 1.0 and WebSphere Application Server 1.1. WebSphere Studio would go on to form the foundation of Eclipse 1.0...
Honestly, vim. I've had way too many problems with eclipse, and as far as I know net beans doesn't have any sort of android tools, which is what I use java for. I gave up on eclipse when it crashed 3 times within 10 minutes on me. I'm probably in the minority though. 
The free download link is on the right hand side http://www.jetbrains.com/idea/download/
Is it a fair comparison though? Free IDEs vs commercial. It should be better. 
At least the performance issues has been delt with. Juno was unusable for a while but they really pulled their shit together and focused on performance.
You create an API in code and me in a RAD designer, with the customer requesting UI changes every few hours, wanna bet who finnishes it first?
Backend stuff, netbeans android stuff, eclipse
It's free and open source, if you don't need the commercial enterprise stuff. If you do, you are probably using it for making money so you might as well pay for it. :) if you aren't, there is a free plan for open source developers. 
Yes, check out the buy options, but the CE version is free.
I work for one if the largest consulting companies in the world. They certainly have the money for it, but I will never get the expense approved. I'm guessing there are many in my boat. I loved IntelliJ when I got to use it back in 04 though. 
To be fair, it's only like $200 or so I think for the personal edition. The only drawback is that it includes only a year of free updates, but I think the upgrade cost is lower. Your company is idiotic though, let's say you are even only 20% more productive with IDEA, it doesn't take a genius to figure out they are getting a much better deal if they buy you a license. 
Well, mind that this is all just my opinion. I hate the Maven integration. Adding dependencies is an annoying process (you start a search, get an error message, wait a few seconds and then you can select the artifact you want from a dropdown box) and they are not added to the POM. IntelliJ also opens one window per project, something that feels awkward to me. And if you have used the nice JavaFX integration in Netbeans you'll be disappointed to see that there's no special support for JavaFX in IntelliJ at all. Those are my main grievances with IntelliJ.
But, I've noticed that when I press TAB, it just makes several Spaces and when I press BACKSPACE it only deletes a space and not the tab. It makes coding soooo frustrating.
IntelliJ or Netbeans? I think you can configure in both whether they should use a tab or spaces. Although they might miss the feature to remove as many spaces as the indent width is set to when you backspace into the indent area.
I've been using Eclipse since... Callisto? and it's still my favourite. So many plugins and extensions, and it handles massive environments (100-300 source projects) and low resources very well. Netbeans feels more bloated and unintuitive somehow.
I would since hand coding swing takes 40% less code to write than what gui designers shite out.
I use Notepad++ and/or vim
Oh I remember when it was WebSphere. :)
Pay attention to how the code LOOKS too please.
I still use Indigo because my favorite extension (Emacs+) is not compatible with Juno, though.
&gt;Every time Eclipse changes perspective it is jarring. I don't understand this. I code, set breakpoint, start in debug, it switches to debug perspective. You maybe think it's supposed to stay in the same perspective?
How do you handle auto-completion, jump to definition and this kind of stuff?
There's plugins for those sorts of things, but I've never felt that I needed them. Vim also has some sort of completion built in that I don't use, and a search feature I use sometimes. So I'm probably not the one to be answering that question. 
I'm asking that because I want to use Emacs as my editor. But these features are too important to me.
I've never personally used emacs, but the people that I know that use it love it. Most switched from vim actually, so maybe it just a matter of time for me. I wish I could be more helpful, sorry. I do know emacs has a ton of commands. 
Auto-completion and jump-to-definition on Emacs are pretty great, if you use something like ctags, or if we're talking about Lisp (Emacs is almost an IDE when doing Lisp). But it's really horrible for Java. If you want to try Emacs out, but are afraid of all the cryptic keybinds, you could give evil-mode a try. It has reached the version 1.0, and it's an implementation of vi inside of Emacs.
netbeans rocks as a java IDE. some of my favorite features are "next occurrence" (which is an in-file find usages on whatever the cursor is on), the visual diff, and efficient macros (i've got an emacs-style scroll macro that's fast - the same thing in jetbrains is as slow as molasses) i'm also very impressed with the c/c++ support. they just did a javascript rewrite and the code understanding stuff is lagging a bit - hopefully this will be improved soon (i've switched to webstorm for javascript as a result)
thanks for this
I learned java with eclipse so I'm kind of stuck in my ways I suppose. I do make a lot of changes to it and agree that it's quite cumbersome to use. This thread makes me want to check out net beans and IntelliJ.
I wasn't referring to the code editor font. I was talking about UI font - that one in package explorer, outline and in the menus.
Just what I needed actually, we've just started working with MongoDB.
wonderful. will never turn down the opportunity to hear what Martin Fowler has to say.
I installed it and immediately all my javafx projects stopped working. Back to 7.2
Wow - that's a ton of awesome content. Does anyone have recommendations for any "must see" sessions?
I've worked on software written by ThoughtWorks. It was massively over-engineered and brittle.
Sche-males? That's pretty kinky. Ohhhhhhh, SCHEMA-LESS. Got it.
Check out our wiki over at /r/javahelp: http://www.reddit.com/r/javahelp/wiki/tutorial_list
I follow this along with my CS Java course. http://programmingbydoing.com/ I am going to tackle Project Euler soon as well, check it out.
One that's "standardized" on Eclipse, STS, Netbeans or some other free ide.
You can follow along with my intro to Java course for high school students at http://quarkphysics.ca/ICS4U1 . I'll mark your work if you email it to me. Doing the orange ones in this spreadsheet will teach you the basics. https://docs.google.com/spreadsheet/ccc?key=0AhQCqGqtPlhGdGU4dFJjMXBNOUxBLUF3XzY1RkFEX1E#gid=0 (and yes, I'm using many of the programs from the two excellent sites "programmingbydoing.com" and "codingbat.com")
I'm not familiar with anything created by ThoughtWorks, so it's definitely quite interesting to hear that their software is overengineered. That said, I think a lot of big (and very successful) software is tremendously under-engineered, which is probably worse than overengineering, right? But in any case, would be good to get a good balance. There's YAGNI, and there's Agile and the whole anti-Waterfall, but man, /sometimes/ you need some up-front design thinking -.-
One thing that is commonly overlooked when developing REST is that updates (POST, PUT) and deletes (DELETE) *must* be performed on the same endpoint as a GET. This helps to invalidate any caching system that automatically clears caches on PUT or POST (Apache Traffic Server). For instance, if you develop an endpoint called "users/someid" then you should only allow an update for this user at "users/someid", not "users/someid/name". The reason is that if you retrieve a profile containing a name from "users/someid" and update it at "users/someid/name" then the caching system won't invalidate the cache for "users/someid" and the next retrieval will return the previous set of information, not the updated set with the new name.
This book is really good. Formatting's not the greatest, but the text is. http://math.hws.edu/javanotes/index.html
Just so you know, this could have been researched easily by messing around in Eclipse :) By defining Superclass s = new Subclass(), you will be able to reference all of the superclass's methods, but none of the subclass's. This goes the same for your first question -- x would not have access to y's methods or fields. This can be avoided by casting. Example: Superclass sup = new Subclass(); Subclass sub = (Subclass)sup; sub will now have access to all the subclass's methods and fields. -aidancbrady
&gt; x would be able to use B-specific and overridden methods, right? correct! since you're assigning a B class to reference A, you'll be calling the overidden B methods. &gt; ob would act as a B-object, right? Since ob is an A reference, you can only call methods on class A. See the following example: https://gist.github.com/phyous/5027857
Hm... I just researched a bit after posting, and a comment on a stackoverflow post says otherwise, the same goes for another website I saw... [Stackoverflow source](http://stackoverflow.com/a/13838312) [Other source](http://www.sitepoint.com/quick-guide-to-polymorphism-in-java/)
I'm sorry, I overlooked the first question. The object 'x' would then be considered an instance of the subclass. My answer remains the same for the second question. EDIT: can't spell EDIT 2: To be clear about casting, here is another example: Superclass obj = (Subclass) new Subclass(); obj would now inherit all the superclass's methods and fields, as well as be considered an instance of Subclass.
I seem to be getting varying answers... The link you showed me says that a.baz returns an error. Does that imply that (in my first example) x would be able to call methods overridden in y, but *not* methods that are only y-specific (meaning that they're not in x)
So x would be able to call any y method that is overrides an x method, but *not* a method that is **only** in y? 
Y would inherit all the methods and fields from the superclass, but you wouldn't be able to call an subclass-specific methods.
&gt; Y would inherit all the methods and fields from the superclass I'm guessing that means that if Y calls a method that is superclass method (x), but is overridden in the subclass (y), it will do the subclass method?
After transitioning from x to y, x's methods that were overwritten by y will yield to y. You will not be able to call y (subclass) specific methods, however.
Yes! :)
[Another obscene abuse of JSON.](http://www.reddit.com/r/node/comments/1953op/stop_writing_rest_api_clients/) Why choose JSON over YML? Honest question.
I have watched only few so far but liked Lambda: A Peek Under the Hood, Do You Really Get Class Loaders? and Introduction to the Play Framework. Lots of awesome content but what i noticed is that there was almost no talk about Android in JavaOne. Looks like politics. I think Android is also part of Java world although they have different VM. Language is Java. 
Its not for a club at school you liar. Check out r/mlprim for why he REALLY wants this info ;)
Not impressed.
I'm fortunate enough to have never been in that situation. Granted I use eclipse anyway...
Schemalessness? It should be Schema-lessness or something so we can understand WTF we're talking about. What else should I expect from a snake oil salesman like Fowler.
Netbeans, because I occasionally found myself stuck with getting Eclipse to work with Maven and SVN when starting a project from scratch, while it just worked in Netbeans.
Me too, Juno is a total mess on a Mac.
It shows up in the output window on the bottom right of the screen.
IDEA
What have you seen that makes you say that?
That output panel handles all standard in (System.in), standard out (System.out), and standard error (System.err) which is why it works for you with a Scanner but command line arguments are not input or output in the I/O sense. See my other [reply](http://www.reddit.com/r/java/comments/194qwj/netbeans_ide_73_released/c8lgtyd) for how to set command line arguments.
It was 5 years ago, so I'm going to have to blame my incomplete memory, not the NDA. Edit: There is one thing I remember clearly - the pain of adding a new field. His "implicit schema" was alive and well all over that code. (It also had an explicit schema in the database, since that was Oracle.) A single field change would trickle out through 6 layers of abstraction and hundreds of lines of code. It was shotgun anti-pattern everywhere.
Hitting [enter] can break the line; [shift] + [enter] isn't. 
problem is millions will just click "next" without noticing it..
I use Netbeans at work for the legacy products which "require" (not really, but it's a business process thing) Netbeans. None of those are JavaFX. I had set up 7.2 to work with JavaFX (which was a pain anyway). I use Intellij for anything I'm allowed to use it on (which includes our JavaFX project(s)). I think the 7.3 thing is simply a configuration thing, but I'm not going to waste my time for an editor I really don't like. Your point is well taken. I probably shouldn't have commented at all, but I was passing along my initial experience. I should note, I upgraded to 7.3 at work today and all my other projects work just fine. JavaFX still broken, but as I said - probably a configuration thing.
It looks like the most up-and-coming game development library for Java right now is libgdx. I've been playing with it for a few months, and I've been very impressed with the speed of development in the nightlies. The API is pretty well thought out, and the multi-platform support works out really well. Last time I looked at Slick2d, it smelled like a dead project. 
Are there any good tutorials for it that you would recommend?
For Slick2d, or LibGDX? LibGDX has some pretty good documentation in the wiki at https://code.google.com/p/libgdx/wiki/TableOfContents?tm=6 There's also a number of video tutorials on youtube that are pretty good. Most of what you're looking for is just a google search away. 
Must I have the Android SDK if I just want to develop for Windows, Linux, and Mac? 
You can have multiple projects in one window, and I consider intellij's maven project integration to be one of its best features... All you need to do is open a pom file and you're good.
Get another job. Seriously... They probably also make you use some piece of crap dell laptop. Life is too short to work for dicks.
It sounds interesting, but I was looking for tutorials for LWJGL since I've dedicated a decent amount of time to learning it
int num = input.nextInt(); int last = (num%10); int mid = ((num/10)%10); int first = ((num/100)); System.out.println(last+mid+first); if i input 123 for example i want 321, but instead i am getting 6(3+2+1). How can i solve this? i tried changing the variable but that doesn't work. Thanks! 
Plus on ints does addition. Plus on Strings does concatenation. Change last, mid and first to strings.
It says i cant change int to string since num is an int
If it's all just an exercise to print to console you could just go: System.out.println(" " + last + mid + first); Maybe not even have a space in the string. It is a bit of a hack though. Edit: threw it together and you can have no space in btw the "". public class NewClass { public static void main(String[] args){ int num = 456; int last = num % 10; int mid = (num / 10) % 10; int first = num / 100; System.out.println("" + last + mid + first); } } 
Sorry I'm on my phone, but this should help. http://docs.oracle.com/javase/tutorial/java/data/converting.html
That totally worked. Thanks You! 
thanks!
thanks!
Got it working flawlessly. Your code is fucked if someone enters in a character or something other than a number. Here's my version... http://pastebin.com/yeGfVfWX Want to also add that an easy way would be to simply loop through each character at the last position and then add that character to a new string. Take the whole input in as a string and manipulate it that way without all the math. This would let your program work flawlessly regardless of size of number.
No prob. Remember that good programming involves realizing potential problems with your code and adjusting for them.
Pseudo code would be awesome
Sort of pseudo-python-code def pascalTriangle(n): if n == 1: return [[1]] if n == 2: return pascalTriangle.append([1, 2, 1]) triangle = pascalTriangle(n - 1) lastRow = triangle[n - 1] newRow = calculate new row based on lastRow return triangle + the new row Given an array with the values of one row.. do you know how to get the next one? each row of the pascal triangle can be calculated adding the numbers from the previous row..
The sun.* and com.sun.* packages should *not* be used, as the conclusion states. These packages are usually unique to the particular JVM implementation and may change from version to version or just not be there at all (for example in another JVM such as OpenJDK). 
This would work, but we're using 2d arrays for the method
I've used Netbeans for a while (after a couple half-hearted attempts to switch to Eclipse) but finally stuck it out and now mostly prefer Eclipse. What forced my hand is that I moved to a different position in my job and everyone in the group uses Eclipse plus the plugins for what we are working with.
What about Java on the server side? I'm a tech writer with limited programming experience (dabbled in C++ waaaay back in high school, a couple of Java courses in college). I need to read and learn about data management (I guess JBoss, JDBC, SQL). Print, online, anything that's useful or a good starting point would help a lot.
This sounds.... unsafe.
This is similar to how many modern system programming languages work. You code in the safe cozy world of strong typing and escape into unsafe/system code when required to do the usual dirty tricks necessary when doing low level operating system work like drivers, low level memory management and so forth. This way it is quite easy to limit the errors that might be caused by doing unsafe coding and even provide an easy way to limit its use in certain contexts.
The Humble Bundle Mojam challenge was a couple of days ago, and the Mojang Studio made a game using Slick 2D. It was streamed and I believe the source code for the game is released along with the game. Check it out! https://www.humblebundle.com/
If you compare the Maven integration with Netbeans, IntelliJ feels very uncomfortable. In Netbeans you don't have to deal with the XML for the dependencies and the search mechanism is so much better. There isn't an error message every time you run a search, for starters.
The sun.misc.Unsafe is behind the most performant libraries. Whenever i see a library which claims that it is significantly faster than others, i suspect that it is using Unsafe. The attitude you are advocating for is long gone. Performance is king, and there really is not much choice besides the SUN JDK. The OpenJDK is the same thing, but the open source version, and it also supports the Unsafe. Don't want to sound like this is personal, but Java purist attitude (like yours) have been holding back Java for years. When you operate a server, a specific server, you don't care about Java purity, you care that you can push out ten times that many data as before, without spending more money on hardware. And the Unsafe is hidden away good enough that a common Java coder would not use it. Besides that, why do you care if a library uses a low level feature that was not meant to be used by the common users? 
I agree, but with one caveat: if you do use Unsafe, then for the love of java.lang.System document that and make sure to fail in a way that points towards the problem being related to the use of Unsafe.
German article, same source: http://www.heise.de/newsticker/meldung/Sicherheitsluecke-in-neuester-Java-Version-entdeckt-1810763.html
That guy was very naive and foolish to point-blank refuse to comply with that company's request to not reveal his source code. While I hate software patents as much as the next sane person, is it really worth spending the rest of your life in debt to some company just to make a point?
Why? What app do you run that requires java in the browser? 
Suprisingly a lot, just when I'm using websites I get lots of things saying, "This requires Java."
My only complaint with libgdx is the assumption you are using an IDE like Eclipse. The libgdx-setup-ui goes a good way towards freeing you from that assumption, but not completely as it still builds the structure to be managed by those tools. I'm the type person that prefers to use a text editor and command line tools like Ant (don't care for Maven either, but I do use Ivy for dependency handling). I have been working through the details of what libgdx-setup-ui does so I can figure out the various dependencies and map it into my standard Ant project structures. Unfortunately it pulls content from the libgdx-setup-ui.jar file itself as part of the project creation that isn't available for independent downloading. There's no reason why a library should be tied to an IDE but that is becoming all too common, and not just in the Java space.
Since the sandbox for Java applets obviously does not work, the proper solution to this would be to require all Java applets to be signed and ask the user before launching then.
My university uses a VLE that asks to run java. No idea why though.
Well as an indie student java game developer I use java a lot. When comparing or looking for inspiration.
*Ask Tuesday*
Applets or desktop applications?
You don't need Java active in your browser to develop android applications.
libgdx-setup-ui is just a tool for quick project setup for the most popular IDE... there was no such a thing some time ago and people hadn't have problems. &gt; Unfortunately it pulls content from the libgdx-setup-ui.jar file itself as part of the project creation that isn't available for independent downloading. What files? In no way LibGDX is tied to Eclipse, I use it with IntelliJ IDEA, I don't even use setup-ui
VPN, and many banking apps are the first things that come to mind.
And Java is from 1995
I do desktop applications, but very occasionally I go into applets and explore work from others in my class who do applets.
I know, I've had to do them for college.
As far as I know, most of the security holes are applet-exclusive so it's advised to disable the browser plugin by default.
The sample project code created by libgdx-setup-ui pulls in various images and icons. If those aren't present, the samples don't run. I'm not sure why you say &gt; In no way LibGDX is tied to Eclipse when the first line of text on the [Project Setup](https://code.google.com/p/libgdx/wiki/ProjectSetupNew) page states &gt;Libgdx is very Eclipse centric due to it's Android and HTML5/GWT backends. My point is related to your first comment: &gt;libgdx-setup-ui is just a tool for quick project setup for the most popular IDE Libgdx should not assume that it is being used within any IDE, it is a library of functionality for application development, it is not an IDE plugin. 
&gt; The sample project code created by libgdx-setup-ui pulls in various images and icons. If those aren't present, the samples don't run. Sample project created by setup-ui requires one image, because it uses it. Android backend project might require at least one icon, because Android probably requires it to have an icon, but it's not about IDE at all. &gt; Libgdx should not assume that it is being used within any IDE, it is a library of functionality for application development, it is not an IDE plugin. From what I remember, libgdx-setup-ui was not created by badlogic games. Some folk from their community created it. &gt; when the first line of text on the Project Setup page states Project setup page is not part of the library, it's just a guide. So again, I use LibGDX with IntelliJ IDEA and I hadn't any problems setting it up myself. 
Java has also gotten a lot easier with JSF 2, CDI, EJB 3 and JPA 2 ;)
Of the major VPN/firewall vendors, I can't think of a single one that doesn't have a standalone version that doesn't require a browser. (None of juniper/f5/big-ip/cisco have a java in browser requirement). I'm not familiar with any banking apps that require java. That certainly doesn't mean there aren't any but none of my banks or credit cards use java on the front end, and that's citi, boa, chase, discover and amex... 
&gt;How do you have many Play applications running on the same server at the same time, without needing to keep track of port number allocations and all that stuff? I don't like Play and hate to stick up for it, but in an agile devops team there is no sysadmin that gets a black box unknown app that must somehow be deployed. Instead, the ones who are deploying the app have been part of the team that developed the app in the first place. There is no "throwing stuff over the wall" there. Also, maybe you shouldn't run different applications on the same server? If you stick to the mantra of one app per *virtual* server, you have much more flexibility anyway.
Tomcat itself is no alternative for WebSphere. You have probably extended Tomcat in every way imaginable, and in the process have most likely created your own frankenstein distribution with dozens of dependencies inside the .war. Now JBoss AS or GlassFish ARE alternatives, and quite good ones. If you only need the web profile, TomEE is an excellent alternative as well (and technically still Tomcat, just in a distro that's maintained by someone else and not by you).
&gt;True, but those applications require a J2EE container Why would today's applications require a nearly 9 years old container? This may occasionally happen, but it's definitely not the norm!
&gt;I'm curious as to what the J2EE stuff gets you that makes it worth using the much more complicated containers. There is no J2EE stuff that's worth using. Now Java EE on the other hand... The advantage of having an integrated product to deploy to, is that your wars remain small and that everything that needs to scan annotations doesn't scan every other class over and over again, and especially doesn't scan the other "system jars". By including say JSF, JPA, CDI and EJB in WEB-INF/lib, JSF scans the JPA, CDI and EJB jars. JPA scans the JSF, CDI and EJB jars. Etc. With an AS, annotation scanning is done *once* and the "system jars" aren't scanned, since only the war is scanned and those jars aren't there.
[SwiXML](http://www.swixml.org/index.html) is another declarative SwingUI library, but uses XML instead of YAML. That's nice because there's an XSD, which means the XML editor in any of the popular IDEs (Eclipse, NetBeans or IntelliJ) will give you intellisense and validation.
Project setup page might just be a guide, but it is where you end up when searching for "libgdx project setup" and when the "Manual Setup" directions are listed as: &gt;1. Create a new Java project in Eclipse: File -&gt; New -&gt; Project -&gt; Java Project. Give it a name and click Finish. &gt;2. Go to the project folder on the file system and create a subfolder named libs. Download the nightly zip and place gdx.jar and gdx-sources.jar in the libs folder. &gt;3. In Eclipse, right click the project -&gt; Refresh. Right click again -&gt; Properties -&gt; Java Build Path -&gt; Libraries -&gt; Add JARs, select gdx.jar and click OK. &gt;4. Under the gdx.jar file, double click "Source attachment", click Workspace, select the gdx-sources.jar and click OK. &gt;5. Click the Order and Export tab, check the gdx.jar and click OK. that doesn't seem very manual and is an issue for anyone that doesn't rely on an IDE. I looked for a tutorial that spelled out how to setup a starter project that wasn't based on an IDE (whether Eclipse or Intellij) and I couldn't find one. Using the setup tool, I figured out what jar files were needed, what native libraries were needed, etc. that I could massage into a format that was easy to manage with Ant. This isn't a libgdx only issue. If you look at Slick2D wiki you see &gt;Setting up Slick2D with Eclipse &gt;Setting up Slick2D with NetbeansIDE What you don't see is any guides for those not using IDEs. The fact that you didn't have any problems setting it up yourself is because you use the Intellij IDE. My complaint is that for too many tools and libraries that are available, all guides and tutorials *assume* the user is using one of these IDEs, just as you do, when not everyone is dependent on an IDE to manage their environment for them. If a developer who uses VI/Emacs/Textpad++ and Ant came to you and asked what is it that is needed to get started using libgdx for writing a desktop game, what would you tell them to do? The libgdx-setup-ui will layout the sample project directories, and create .classpath and .project files in each so they work with Eclipse, with the various sub-projects being linked to each other via these .project files. And these all assume you will be targeting Android so all of the assets are in the android subproject and linked across. The setup tool is nice, but it is premised on the use of Eclipse and the intent to target Android. But if all I want to do is create a desktop application I run the setup tool then take the my-gdx-game-desktop as a basic project structure and use a common Ant file template that uses the libs dir in the classpath and the src dir. With that I can be up and running quickly. But there are no tutorials that don't assume an IDE, that is my issue.
The application was completely rewritten. It never needed to run under WebSphere. A plain servlet container was all that was required. That being said, would it really matter if JPA was included in the war or part of the Application Server's lib for example? The classes still needed to be included one way or the other. I don't particularly believe that functionality belongs in a server anyways.
Is it just me or are all the modules, documentations and examples non-existing? Not a good sign for a library that is already at v1.1.7.
It can be as safe as writing pure c code as long as you wrap it like this: try{ doStuffFastUsingUnsafe(); }catch(...){ doStuffSlowWithoutUnsafe(); } Not sure what exceptions the jvm will throw, thought the list likely includes exceptions pertaining access privileges, missing classes, missing methods, reflection errors, etc. .
Curious if this only applies to applets or jnlp as well. If the latter, I see them as games all the time.
http://www.youtube.com/user/MrJavaHelp?feature=watch This guy uploads videos showing you how to develop games with slick 2d, I havn't had a chance to watch all of them yet so I'm not sure if he goes on to the more advanced aspects you are looking for.
Thanks! I'll look into it
Literally everything you see here is wrong. Yes, even the color scheme.
It's because += handles the type conversion between between int and long. 
Bundle jetty into an uber-jar with maven java -jar &lt;yourjar.jar&gt; and you're done. soooo hard. :)
inferiority complex.
I don't want an "exciting" language. I want a good language. 
[Google Guava Optional](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Optional.html). It's so good that it's built into Scala. 
&gt;int i = 5; &gt;long j = 8; &gt;i = i + j; The answer's 13. Jeez, why does this moron even need a computer? /s
google Scala operators :P
Wow, that sounds painful
I'm trying to introduce a new mark for sarcasm: {} If you could please use that instead of /s that would be greatly appreciated.
Minecraft
I love it when people don't read even the title.
Take a voice recorder to class and record the lecture. Take notes from that at your leisure. If it's boring to you, it's boring, there's no real way around that. Your teacher would have to start teaching in a way to grab and keep your attention. Not your fault, people learn in different ways.
I'll try this next time if I can get a digital one. The Problem with this is that it's not a lecture class, it's a lab so most of the time its him commentating on the work we're doing in class and such. Honestly, if he tried to get the class more involved It'd be a lot easier. 
Its because Java folks are lazy to recompile their stuff. Others have learned the necessity of that, but Java folks tend to keep even a decade old JAR (without the source), because it worked some time. I keep the policy that all my dependencies should be compiled on my machine from their sources. That may not be always possible, but that's the goal. If a vendor distributes a closed source library that talks to their product, then i will rather consider one that has an open-source client, or put my own layer in-between. 
That is called the format string syntax. Here's the documentation... http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html#syntax Edit: wanted to add that \n means a new line (equivalent of hitting enter in console). %d is a decimal and %.2f means a float number and only shows 2 decimal places. In other words, if you have the number 134.342 it'll display 134.34. Also note you can figure pretty much anything out with this beginner stuff through some simple Google searching. Java is a very well-documented language and there are a lot of tutorials and sample code out there.
I have the same problem. And I keep catching myself drifting off and then I'll tell myself that I really've got to focus, and I'll listen for maybe 12 seconds and then I'm at it again. I find video tutorials help a lot. You should check out Bucky Roberts a.k.a. thenewboston on Youtube. He's got some really good tutorials, and lots of them!
thx! i'll go take a look.
Interesting. These are complications I have not run into, possibly by avoiding EE and using Spring. Spring has its issues, but I've never run into an integration problem yet thankfully. 
The remote login used at my employer requires java as well. I wish we'd go back to using the previous vpn.
Like he mentions in the article, not all JSRs have screwed-up tck's. The jsr-107 tck is being developed in the open in parallel with the spec. I hope more jsrs do this going forward for all the reasons he mentions in the article.
Recompiling the source will only give you a compilation error. Also its not just the java guys, ever seen what happens when a linux Kernel dev breaks the puplic API? Unless your application is planed with a very short lifetime depending on undocumented Implementation details is stupid- independent of the language used.
+1, same problem. To compound it, my professor isn't a native English speaker and it's a three hour turbo course. I usually end up doing other homework in class.
I finally got what that /s means..
It's okay, now you've got what {} means.
Did the guy post the source code? Did you read the article...? The only thing I didn't do was remove the blogpost explaining how the algorithm works, I've never published the source code... You can never be sued for explaining how something works. And I don't want to spend the rest of my life in debt, that is why I didn't post the code. RTF next time. kbye.
You mean ctrl+shift+f?
.. Just position your cursor on the symbol (actually just a method name) and press your Go to declaration /implementation IDE key (or use the right click menu if you haven't bound it yet). 
Why is this post the most popular submission in /r/java the past week? C'mon people.
Thanks, I had a sneaking suspicion it was going to be like that. Time to knock up a whole slew of tickets for our developers.
Long gone BEA? That's Oracle now. 
Shemales sness.
And now for the real question: why on earth was it specced that way? Is there some reason having i += j not be equivalent to i = i + j would *ever* make sense? It certainly violates the principle of least surprise in this case.
Yes, I did read your article, perhaps you should go back and read it yourself. According to it, they said: &gt; As we have stated in detail in previous communications, we would like you to refrain from releasing the code and to remove the blogpost explaining the algorithm. And your response, according to you, was: &gt; I’m sorry, but I can’t comply. So while you may have removed the code, they may not be aware of that, and you did in fact refuse to comply with their request (even if you did partially comply). kbye.
Good job providing these kinds of puzzles!
If you use a lightweight distro like TomEE (has everything in only 25MB), then there are no integration issues whatsoever. Nor are there when you use JBoss AS/EAP, GlassFish, Geronimo, Resin, JoNAS, WebLogic, *cough* WebSphere and a whole slew of other servers. The integration issues are *only* there when you build your own stack on top of Tomcat.
That's why you need both set the source and target configuration parameters when cross compiling, and also provide javac with the bootclasspath of that particular JDK version. There are users who genuinely require 1.5 cross-compilation (for example, https://github.com/mikaelhg/urlbuilder/pull/3) and for them I've configured Travis-CI to cross-compile such libraries with OpenJDK 6, OpenJDK 7 and Sun JDK 7 (https://travis-ci.org/mikaelhg/urlbuilder).
Common or popular? There's a major difference.
Dalvik is *not* a JVM.
Wow, reverse engineering the "random" class took some dedication, that's an insane idea, great puzzle
poor SunOS. :( 
And users always know which CAs are trustworthy and which ones aren't? 95% won't even look at it.
It isn't explicitly mentioned in the responses, but I think it's important to point out the numeric promotion for those unfamiliar. The reason `i = i + j` won't compile is because `i` is implicitly promoted to a `long` before the operation so that both operands are of the same type without information loss. In the end, the statement attempts to assign a `long` value to an `int`. See [§5.6.2](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.6.2) of the JLS: &gt; Widening primitive conversion ([§5.1.2](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2)) is applied to convert either or both operands as specified by the following rules: &gt; * ...if either operand is of type `long`, the other is converted to `long`. &gt; * Otherwise, both operands are converted to type `int`.
I'm not too sure what the error is. Do you mean you're getting errors where Java can't find a variable with a given name? I think getLabel() might run into scoping issues depending on how the rest of the program is made. You also don't need to use String.format() since if you do String+int in Java it will automatically cast the int to a string. This should work just fine: southLabel.setText("Lines: " + linesCount + "; Ovals: " + ovalCount + "; Rectangles: " + rectCount);
I'm surprised that so many are running 6 - it has reached EOL, and is no longer being updated.
String.format doesn't do what you're thinking it does. It takes at least 2 arguments, and then each of the variables. Instead just have it: public String getLabel() { return "Lines = " + linesCount + "; Ovals = " + ovalCount + "; Rectangles = "+ rectCount; }//end method getLabel Also, getLabel() isn't a good name for this function, it's generally understood that "getThing()" should return an objects property "thing" in most situations and most people would assume it returns the Label object. Instead, I'd recommend naming it something like "generateLabelText()". Also, check out the syntax for [String.format](http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#format%28java.util.Locale,%20java.lang.String,%20java.lang.Object...%29) If you wanted to use it, it'd look like this: return String.format("Lines = %s Ovals = %s Rectangles = %s", linesCount, ovalCount, rectCount); It fills in string variables for each %s in the order that you list them. Keep in mind there's a different letter after "%" for each variable type, and I'm not entirely sure it can automatically convert them to strings, if you get weird results, wrap them in `String.valueOf(linesCount)` or use %d. It's had to tell since you didn't include the code that declares these variables. As an aside, this question is also poorly asked, you'll get better help if you include what the actual problem *is*. If the compiler is not accepting something, say it's the compiler and the error it's giving. From your problem description, the compiler could be failing to compile, the label could be not changing, an exception could be being thrown at runtime. Giving us that information helps people help you faster.
Thanks. You are right; I am having a scope problem. The setText you recommend is fine with the compiler, but it's having trouble getting the variables. I have updated my question.
Thanks for the advice. I have updated my question. And I've done away with the getLabel method. I just learned a lot about Strings thanks to you. That is great. 
Woops, my bad, I forgot about the {1,1} row and couldn't derive the {1,2,1} from {1} :p (in my defense, it was 4 AM :p)
We're only given a parameter depth. Shouldn't the base case be 1? 1 depth means 1 row and the first row is {1} Depth 2 would produce {1} \n {1,1} I'm just not completely sure the base case should be zero. I may be wrong though.
Thank you. I tried declaring them at the top of the class, not within a method, but still got a compilation error telling me to declare them as local variables. And I have not been able to pass them into the main method. Any advice on how to do that?
Yea. I've been pretty used to counting from zero. Using arrays and strings (i guess arrays too) for a while has already taught me to start with 0. Not to mention many of my math/circuit classes involve a base of zero. Honestly, this starting with 1 is an exception to that rule just in my mind as i can't wrap my mind around coping with a "0" depth base case. But, thats just my mind at work. Different opinions! Thats the beauty of programming too!
Thanks for all the input. I'm sure i'll be back here in r/java seeing as my school is very java based with many of the CS classes offered. 
Well it's hard to know what's happening without seeing all of your code. The access modifiers shouldn't matter if it's in the same class as your setText. If it isn't in the same class, you might want to look into [using getters and setters](http://stackoverflow.com/questions/2036970/tutorial-on-getters-and-setters) or making it public and calling it by doing panel.lineCount and incrementing it with panel.lineCount++.
It will still be updated (just like Java 5 is still updated), but you will need to pay Oracle to get the updates. See the bottom of http://www.oracle.com/technetwork/java/eol-135779.html for more details. That said, I believe most of those workstations running 6 are just companies stuck with whatever old version they initially chose when starting a project, and nobody cares about updates. With a bit of luck, those versions are only used for development and not to run applets, but I would not even bet on that.
Looks like a problem with your jdbc connection string. I'm seeing what looks like a port, but no ip/url (unless you removed it for the example).
I definitely didn't remove any URL, I was following along a derby tutorial on the Apache website. I'm still a beginner at this stuff, so please forgive me. I've also tried using the EmbeddedDriver, but I'm getting the same results.
I think that you have three mistakes. First, you forgot the hostname on the connection string, it should look something like this (assuming localhost): jdbc:derby://localhost:1527/charitydatabase Second: I think that it's a bad idea to catch in a same try clause an Exception and a SQLException. SQLException is kind of special and you should know if you are not connecting because there was a problem with the database (SQLException) or, if there's another problem, which leads me to the third mistake. Third: Are you including the derby libraries in your project? i think thats the problem. Probably getConnection() executes, then it can't find the libraries and throws a ClassNotFound exception and because you are treating them in the same way you are not getting the information that you needed. I executed the code correctly adding the localhost and the library.
If you are using netbeans I'm pretty sure the derby jars are provided as built in modules and I think that you should be able to import them into your project by right-clicking libraries. On my installation the .jars are in netbeans dir/ide/modules/org-netbeans-modules-derby.jar
You are a badass, my friend. I'm not getting that error anymore, but now it says one of my tables doesn't exist, so I have to screw around with that. Thank You so much for the info.
Doodle. It seems to help me.
I'm glad that I've helped; now just toy around with the netbeans built-in DB manager (there's a plugin for that if you don't have it installed already).
I would research jdbc connection string syntax a little deeper. Pretty sure it's something like: "jdbc:dbtype://dbaddress:dbport/dbname"
I've used [linode](http://linode.com) before. I don't particularly like the company, but they're affordable and reliable enough for the price. I've also used [rackspace cloud](http://rackspace.com/cloud) and [Amazon EC2](http://aws.amazon.com/ec2/) - both of which offer comparable prices/services. I tend to slightly favor rackspace just because they don't force SSH keys on you (even though they're a damned good idea).
In my garage
I don't know if it is possible or not, but try openshift.com
Up vote and agree on Rackspace unmanaged cloud. 
I was wondering the same thing. Is [heroku](https://java.heroku.com/) any good?
I'm testing PaaS platforms, and have deployed my springmvc-example (https://github.com/mikaelhg/springmvc-example/) to a bunch (https://github.com/mikaelhg/paas-deploy-example) as a Jetty 9.0.0.RC0 runner standalone application. Only CloudBees support Servlet 3.0 well by default. They also have a really nice setup with your own Jenkins CI installation integrated with their servlet runners, so that you need only push a change to your GitHub repository, Jenkins notices it, builds your application, and automatically pushes it into production. AppFog has overall the best service for execution environments, 2 GB of memory free, stablest pings of all five, with fewest application hibernates/restarts. Heroku has the most polished website and CLI tools, but the smallest free tier. They also require the most custom packaging, outside Google App Engine. Cloud Foundry has, in principle, the best platform, but they're developing it really actively, and it has been pretty unstable for the last few months. They also don't offer custom domains right now. OpenShift don't seem to follow their own rules about passivating / activating applications, so my DIY cartridge application with them has been down almost constantly. You need to stop it and start it (not restart) to get it running again. Google App Engine doesn't accept Servlet 3.0 applications at all right now, and they don't really support Hibernate for their Java 7 platform, with a few critical bugs open for months or years. http://appfog.paas.gueck.com/ http://cloudbees.paas.gueck.com/ http://springmvc-example.cloudfoundry.com/ http://openshift.paas.gueck.com/ http://heroku.paas.gueck.com/ **Edit:** for straight Linux dedicated hosting, you can't beat http://www.hetzner.de/en/hosting/produktmatrix/rootserver-produktmatrix-ex. Or if you can, I'd very much like to hear about it.
Heroku.
Yeah, that was a jaw dropping solution indeed. Of course at the same time shows just how random a pseudorandom generator is.
We still get consultancy requests for 1.4!
This is totally ridiculous. Copyrighting an API? If that were allowed, then Eucalyptus couldn't make their cloud offering interoperable with Amazon's. WINE would be taken down by the DMCA. Mono would disappear. It's so absurd that I will probably stop writing java code if it's ruled that implementing an interface requires permission from oracle. 
What would you use instead? .Net/C# (Microsoft)?
If you're willing to pay a little bit, just pay for a VPS and install Tomcat/DB of choice. Maybe sure you have at least 1024mb on whather plan you choose.
It's been like that for a while, atleast the last 3 times I updated.
 return thequestion ? bb : !bb;
http://www.eapps.com
I use junitbenchmark quite a lot, its nice to have the same infrastructure for unit tests and benchmarks :)
and its super easy to setup and execute as well.
I thought this lawsuit was tossed. What are they suing about now? 
Apparently they found Google had infringed upon the copyright with the routine rangeCheck, but couldn't decide if it could be considered "fair use". Oracle is now stating that they have competed in the mobile industry before, so it should be considered fair use. At least, that's what the article states. EDIT: I think that should be that Oracle is stating it is NOT fair use. [fair use](http://en.wikipedia.org/wiki/Fair_use)
&gt; Mono would disappear. Since Microsoft submit both the language and the CLI to ECMA and ISO as official standards, they cannot shutdown the Mono project. Although they could limit it's usefulness by disallowing them to implement APIs in the .NET framework that are outside of the core class library. 
[Go](http://golang.org/) i know it doesn't have the enterprise support or establishment of .net/javaee but its getting there.
It's a common practice in all sneaky installers. Offtopic: In many popular installers for some reason, even simple check boxes like "Show readme file" are made with two independent controls: actual-checkbox + gap + static-unclickable-text. Looks like a regular check box, but it's a usability hell, because you need to click twice to figure out how to unselect something ;)
I have used it a lot over the years. For example, it makes sense when doing ASCII-only fast upper/lower case conversions with i += 'a'-'A'; If it was designed without the cast we would have the problem of where to add the cast should one want it: "(cast)(a op b)" is not the same as "a op (cast)b". By writing "a += (cast)b" one can only cover the second case.
Man, that takes me back to the old days, where I had a Beowulf cluster in my parents garage. Thanks for bringing that memory back. Good times!
It's saddening to learn that this is a common thing. It might be subtle, but it works. At least one co-worker of mine now has ask.com as his default search engine (he didn't bother to change it back). Practices like this changes the perception of Java which has now resulted in us actively trying to get rid of it!
I can understand Microsoft's involvement in this. They can't compete against Android in the mobile and table spaces and ChromeOS is a growing threat to them. But why is NetApp involved in this? They build storage solutions.
No...Go cannot replace either of those really. Neither are really used as a system language like Go.
ChromeOS is a growing threat to them? Really?
This looks promising. Does it do a good job automatically setting things up to avoid coin pitfalls of micro benchmarks? JUnit has support for conditional test suites, right? Doing this as part of every build would get old fast, but having a suite of these could be nice.
It very much depends on your application, its lifecycle, whether you really need it to run flawlessly for years, or if you're making radical changes. If you have an essentially unchanging pet application which, for example, collects and collates data, I would recommend Google App Engine, if you can customize the application to use its proprietary services. While GAE has its issues, mostly it just runs your app consistently. I had an application there running since 2009, which I forgot all about for quite a while. It just quietly ran as expected. Google isn't about to run out of money, either, which is a concern with some of the other players. If you want a free platform for your pet app, which you update every day, week or month, I'd recommend AppFog. In my experience, they have the most reliable free service, with 2 GB of free memory. They also have PostgreSQL 9.1 available, a big favorite. If you're OK paying their pretty steep prices, and don't have a problem packaging your app using their proprietary system, Heroku is a good choice. They've been around for a while, and seem financially stable. If you're learning about PaaS platforms with the thought that you might possibly eventually use them as a part of your work, you might want to consider Cloud Foundry. Especially if you don't mind waiting a couple of months for them to stabilize their server and client code, and upgrade their infrastructure to their v2 codebase. One view of Cloud Foundry is that it's primarily a product development project for VMWare, not necessarily a PaaS service in the long run, but I haven't been able to find a definite comment on their service roadmap. You can deploy it on your own Amazon EC2 machines using third-party deployment tools such as https://github.com/StarkAndWayne/bosh-cloudfoundry I hope this answered your question somewhat. It all depends on what you're looking for :) Most of the platforms / services have IRC channels of varying activity levels.
Have an upvote, good sir. This answered my question perfectly. :)
sick dude. sick!
Another thing: it being 2013, I was quite suprised to find out that some of the PaaS providers didn't provide default locale/environmental settings for their application servers to run in UTF-8 mode by default. You might want to make sure that you're deploying in a manner that ensures correct UTF-8 settings.
http://arstechnica.com/tech-policy/2013/02/microsoft-foresees-chaos-if-google-v-oracle-result-stands/ (is Microsoft's PR sping as to why they're getting involved). Microsoft: Anything anti Google is good for them. They fight on the OS, Mobile OS/Hardware, Tablet Hardware/Software &amp; Search engine.(Which is funny as MS was sued by Sun at one point for their JRE implementation) EMC: EMC owns VMWare, VMWare manages/supports SpringSource, VMWare probably has money tied up in Oracle Java. NetApp: Oracle has a *lot* of NetApp product in place (pretty sure it is/was their standard) and they've worked together for a while. Graphic Artists Guild: They hate Google because Google is pro "SCAN ALL THE BOOKS" and "artists" weren't included in the settlement with the authors. Picture Archive Council of America probably has strong ties to the Graphic Artists guild and as they deal with licensing of images, I'm sure they weren't thrilled with Google for the same reason the Graphic Artists Guild isn't. These aren't friends of the court, these are Friends of Oracle/Enemies of Google. Odds are the BSA is chiming in because violating of copyrights is related to piracy which is BSA's core function. While it may be conspiracy talk, Apple, Microsoft, and Oracle are all members of the BSA. Google is not. http://www.bsa.org/about-bsa/bsa-membership/bsa-global-members The BSA frequently acts as the piracy enforcement arm of Microsoft.
A couple things: 1) A 2GB PCAP file is HUGE. Like really massive. 2) The only things out there are JPcap and JNetPcap. Why do you need to process captures bigger than 2GB? If you explained your issue a bit more then I might be able to offer some help. You could write some code to split the pcap file into different parts if the 2GB limit is exceeded. Edit: Others have this issue as well. You need to make sure you are releasing the heap memory. This can be done using Semaphore programming. See this for more info: http://jnetpcap.com/node/835
I excluded services which don't provide a free production mode.
No, I'd have to use someting with a free implementation. Python, Haskell, etc. 
NetApp has a history of going after open source projects, maybe they want more tools for their arsenal?
I don't dislike Linode because of the server stuff (EC2 and Rackspace are the same way - aka, you need to run your own JBoss/Tomcat). Their company has done some shady things in the past related to their admin modules getting hacked and then compromising servers hosted with them. Lack of open-ness about the whole issue and the perception (at the time at least) that it was actually an inside job. To your point, I agree - learning a container environment is a good way to learn a lot more about Java.
overpriced and overcomplicated (though, the tell you about how using this or that removes complication...) removing heroku makes things simple IMO.
Create a GitHub project with a Maven configuration first, so that people can actually look at the code using proper tools, and even run it.
By default Git installs to your home folder, so you should just be able to download the source and `make` it.
Yeah, I'm not going to waste my time dicking around with a nonstandard setup.
I personally hate JSF. You should consider using another framework. To elaborate: * Prefer RESTful design over a stateful one. * Behind on current web standards. * I hate the HTML it generates. I prefer working with HTML directly. * Really hard to do asynchronous stuff. * Really hard to do anything outside of the framework.
It's the difference between opening IDEA, clicking VCS -&gt; Checkout from Version Control -&gt; GitHub, pasting your GitHub URL there, and simply autoimporting a Maven-packaged project which is pretty certain to work as expected, as opposed to dicking around with whatever zip file from some download site, and wasting time on a potentially misconfigured non-portably packaged project. And there, that's about as much time as I can spend on any random request from a stranger on the Internet.
They improve bytecode and bytecode loader. New opcodes also allow JVM to better optimize the code. &gt; There were no changes to the language for SE 6 @Override annotation for methods inherited from interface. Try this code on 1.5 and 1.6: public class Something implements Runnable { @Override public void run() {} }
Every framework has its issues, and every framework claims to be the silver bullet. Rails had some interesting ideas for sure, but the problems you run into after a while are well known. If you know Rails *really* well you can overcome them, mostly. It's not really different with JSF. I found it to be a truly excellent framework, but you do need to find the best tools and practices. For me a combination of PrimeFaces, OmniFaces, the BalusC tutorials and the help that's available on StackOverflow provided all of those.
Just a caveat, I am not on latest JSF. So sorry if some of these have been fixed. **Stateful** If you prefer to clog up your HTTP session space, that is your choice. You can store it on the client, but then you more data being sent back and forth between client/server. The stateful aspect also makes it difficult to do client html templates. If you don't have those auto-generated identifiers, then it won't work. **Web Standards** Try doing this is JSF: &lt;div data-url="www.google.com"&gt;&lt;!--JSF doesn't like empty tags --&gt;&lt;/div&gt; or &lt;div data-flag&gt;&lt;!--JSF doesn't like empty tags --&gt;&lt;/div&gt; It will remove your data attributes, which are a common way to send data to client scripts. Also, the fact that I have to insert those stupid comments or an empty output text is lame. I am sure there are more, but this frustrates me to no end. **Generated HTML** The preference is of course an opinion. But when your sending down more data than necessary you slow down page load times. Also, the fact that it uses inline on[event] attributes is crazy. Defeats the whole purpose of script files. Really unnecessary and slows down load times. **Outside the Framework** I guess I didn't clarify this. For me, there are too many steps to get anything special to work. You have to write a lot of code to do something simple in other frameworks. You also have to manage the configuration files, which is so painful to me. I prefer a little more auto-magic in a framework. **AJAX** Don't have that on my JSF version, wish I could use it.
So in theory if you cast one of the values the myInt = myInt +myLong would compile? Or am I incorrect?
Sorry, I don't have any java alternatives for you since I only program in Java at work and we only use JEE/JSF. All that I can say is that it has been painful for me moving from Rails/ASP.NET to JSF. This is difficulty is also multiplied by the fact that I am on an older version. For my personal development I prefer Rails or C# ASP.NET MVC4.
Depends on your desired workflow, but I've found CloudBees really nice for war based java projects. You can host up to 5 free java applications. It gives you a free source repository, Jenkins server, and a variety of other limited services (free 5mb database, 200 emails a day, etc). You can get started by simply uploading a war manually, or push code to your source repo and have Jenkins build and publish it for you. I've also tried Heroku and OpenShift, but I found the CLI tools rather clunky and hard to use by comparison. I actually use a HP ProLiant MicroServer for hosting my personal projects at home. Just use a cheap or free DNS like no-ip. Amazon EC2 is also nice if you want a hosted VM. Edit: typos.
assuming you are talking about one from the most recent Mojam HB where they released some of the source codes... the simple answer would be to download the source code, change the line in it that says "setResizable(false)" to true, repackage and play. The problem is, that really won't help you. It will only make it so that your viewable screen region is in the top left after you resize it. It would essentially leave you "blind" of the right and bottom sections of the screen that you resize it to. Not really much you can do about it but put it in dropbox and play it on another computer.
might be a better use of your time to earn $40 and get a secondhand LCD screen
got another screen :D Just didnt want to have to plug it into my laptop
*In your opinion*, JSF is a complicated and unapproachable technology. I have found JSF fairly simple and approachable, especially as anything on the web stack goes. YMMV. I merely pointed out why *some* people like JSF, no "superiority" intended. Components or controllers, take your pick. Note also the *title* of the post. It is a *Java EE* kickoff project. You don't have to use the Java EE standards for everything, and you can make kickoff projects for those *too*. Standards and design by committee have disadvantages, but there are advantages too. For example, there are a number of JSF component libraries to choose from, and they interoperate because they share a common platform.
Fair point, but I think JEE is great because it is not tied to one technology. So I still think other options could be provided. I think people do themselves a disservice getting separated from pure HTML/CSS/JS. Learning their nuances and quirks really helps when you do web development.
I think it helps to understand *why* people would choose components instead of dealing with HTML/CSS/JS directly. In many ways, HTML/CSS/JS is a giant clusterfuck. Sure, libraries like jQuery make it suck less. But, many people don't want to touch the nuances and quirks that come from that with a 10-foot pole, and that's where components come to the rescue. Somebody figured the common use cases for you and bundled it into components. You can choose from PrimeFaces, RichFaces, IceFaces, etc., etc. Lazy? Perhaps. But, some people have other shit to do.
Yes, it's 2012. JSF is cool again ;) Update yourself and don't stick forever to what you learned in 2004.
&gt; It is a complicated and unapproachable technology. What's so complicated about JSF then?
&gt;Just a caveat, I am not on latest JSF. So sorry if some of these have been fixed. &gt;Stateful Uhm, didn't you read what I wrote then? Mojarra, the JSF RI, has a stateless mode NOW. JSF, as-in the spec, has it in 2.2 which will be released in ~2 months. As rockvilleJD says, your experience is clearly with an older version. Since many years, JSF also has a feature called "partial state saving", which has kept the amount of state saved in the session very small. &gt;You also have to manage the configuration files [Which configuration files are that again?|http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config] &gt;AJAX &gt;Don't have that on my JSF version, wish I could use it. Dude, c'mon! This has been in JSF for years and years. Are you also complaining that Java has no JIT and only interprets code, since you are using Java 1.0 still? As rockvilleJD also mentioned, JSF before 2.0 wasn't really good. JSF before 1.2 even completely and utterly sucked. But times have changed. 
When you compare JSF to something like Rails, it sometimes seems like it is playing catch up to add features. However, as a platform it is much more mature. I just wish there were more cheap hosting provisions.
Try and engage yourself in the content more- ask questions, especially if there are demonstrators or anyone else helping. Talk to colleagues about the work. Unfortunately, some content is less interesting, but it will usually be included for some good reason.
If I'm not mistaken, the very app this article is about is hosted for free ;)
&gt;I am on an older version Don't you think it's a bit hyprocrite or at least naive to start ranting about JSF here when you only have experience with some ancient version, but you rant about it as if that ancient version is still the latest one?
Retention policy of @Override is source, you understand that means it can't manifest in the complied code right? Please name a new opcode added to SE 6. I suppose next you'll tell me how enums and generics changed the JVM...
No, because much of the overall design has not changed. For example, It barely got stateless view support this year. Also, I work in enterprise, so what may seem ancient to you is very common to me. Like I said, it would be nice if other options were provided. It's great that its been improved, but some of my points are still valid. If this project wants more usage, other options should be considered. For now, JSF would not be my first choice in technology.
Interesting read, don't know how applicable it is. I do like the whole concept of being able to hook into a callback for completion. You could use something like Spring Integration to abstract all this away using the Chain of responsibility pattern. Also make it concurrent by attaching multiple messages consumers to the queue if you are using messaging. 
JSF is easy to work with. I find I am able to provide a rich interface for my clients that I would not be able to without considerably more time. I do not think I am exaggerating when I say I am as productive as two developers by using components. I do not see what makes it complicated or unapproachable. It is the opposite. it greatly simplifies Java web development.
Do you use JQuery? The same could be said about that. JQuery certainly separates you from JS.
Dear Google, please save java.
&gt;1) A 2GB PCAP file is HUGE. Like really massive. That is a matter of perspective. The last PCAP I had to process was 325GB is size which I definitely considered massive. As for why I need to, most other off the shelf programs out there cannot even open a PCAP that big and there is data in there I need to pull out and look through. I remember that post you're talking about unfortunately all heap memory is handled within the API itself, when using JnetPcap I don't ever deal directly with its heap implementation. As for writing a piece of code to split the PCAP file, I'm not entirely sure how to go about doing that. If I could have it split off a chunk and then feed it into a method/class that utilizes JnetPcap I'd be fine with it. As for just splitting it and then processing it, Wireshark comes with Editcap which can split Pcap files based on a number of criteria which is what I have been using in order to process the data. 
That is a straw man argument.
Cool, I am glad you like it. I just wanted some options.
&gt;Also, I work in enterprise, so what may seem ancient to you is very common to me. There's a difference between "old" and "ancient". JSF 2.0 is from 2009 and some 4 years old now. That's old. But from your comments it's seems you're using JSF 1.2, and maybe even 1.1. This is ancient. Really ancient. It's 2003/2004 stuff. I agree you're a hypocrite, when you're mentioning C# ASP.NET MVC4, which is not even 1 year old. Are you the kind of guy who says Windows is better than Mac OS, and then put Windows 8 against OS X 10.0???
My initial argument never compared C# to JSF. I never said JSF sucked because it doesn't have x feature from ASP.NET. I just said I prefer a restful framework, stateless views, and not having the html abstracted away. Sorry you don't like my preferences in development. Good luck on your project, I just wanted some options.
This is so stupid. You would never want to do this in production code. If I were interviewed and the interviewer asked this question, it is a sign that I would not want to work for this company. 
Agreed. This is a horrible question for interviews. I can think of some crazy obscure place that something like this might make sense, buy it would be so far from the norm it'd be like a swimming pool asking potential lifeguards how to perform CPR on a martian.
Might have some merit in assemblys (no need to save and restore a register). Have no place in Java. If any developer ever tries it in a production code, the body of that developer should be cut into four more or less equal parts, and the parts must be nailed on the four corners of the office as a warning sign for the others.
When a server goes unresponsive / needs help with an fsck, my datacenter has a Java Applet to connect to the KVM... as if my day wasn't already shitty enough.
Dell?
Correct. The following would work: `i = i + (int) j`. The catch is that casting from `long` to `int` means possible information loss.
Intel's [RMM](http://www.intel.com/content/www/us/en/server-management/intel-remote-management-module.html) boards use(d?) an applet, too.
Do you have a reference to the bug database for this?
Yes, I just tested and it still occurs with jdk1.6.0u41. If you have jdk1.6.0u41 installed, you can try this code snippet yourself.
The snippet you posted does not compile by itself. I wrapped it in a class and a main method (see the code I used in one of my other comments), and it did not occur. Are you sure your computer is in good working order? I suspect your RAM might be defective, if you have a spare USB key you can test it using the [Memtest86+ auto-installer for USB key](http://www.memtest.org/#downiso). There is also a possibility that you might have a virus on your computer, since the most recent Java flaws work by exploiting buffer overflows in the JVM and corrupting the JVM memory. (This most often leads to very visible crashes though, which is why I think a RAM defect is more likely than such a virus.)
I must be the only one. I like Java, it makes my browser do more fun stuff. I guess it's less annoying in Linux without the constant update prompts you get in Windows.
The only applet I use and would miss is [Ephox's EditLive](http://ephox.com/editlive), which is fantastic - I'm sure there'll be an HTML5 alternative which equals it at some point, but until that day it's the most impressive browser-based rich text editor that I've used.
I've duplicated this bug on three different office PCs, so it's definitely not specific to one machine's ram. While it could theoretically be a virus, it would need to be a virus which affected all 3 PCs and which slipped under the radar of the multitude of corporate-mandated anti-virus measures. I'm running 1.6.0_31, on Windows 7 64-bit. Which JDK/OS combination did you test it with?
&gt; I found it (JSF) to be a truly excellent framework You've mentioned it in other comments, but it's worth mentioning again - JSF 2 and later are excellent, JSF 1.2 or earlier and it's about as far away from excellent as you can get. Anyone who used JSF 1.2 or before will most likely have very legitimate grievances, but they'll hopefully approach JSF 2.x with an open mind as it's about as different as night and day.
Java will prevail
Oracle ceo: "hooray, Another chance for oracle to squeeze a nickel out of the ask toolbar plugin"
Perhaps you could create a GitHub project which people could use to reproduce your specific case?
Isn't 6.4.1 the last 6 'non paid for' update? Which is fantastic for me. *sigh*
Yammer metrics is a decent start, but the code is a total mess. We has to fork it at work to do make some very basic changes 
Hmm, that's very strange. 32-bit or 64-bit? Which operating system? I just duplicated this on my home computer as well, using JDK 1.6.0_41. So, that's a fourth machine. Every machine I've tested has been using Windows 7 64-bit. It's possible the bug is specific to Windows 7 64-bit builds of the JDK.
All of the code is in this post, There's no other code needed. If you want to reproduce it, you can just paste the code into a **public void main(String[] args) {}** and run it. I suspect the reason people are unable to duplicate it, is because the bug is specific to 64-bit builds, or specific to Windows 7. Those kinds of problems won't be nailed down by transferring it to Github unfortunately.
Running for an hour on loop on a 64bit Solaris with javac 1.6.0_14 Java(TM) SE Runtime Environment (build 1.6.0_14-b08) and it never failed once.
Since [mordisko](http://www.reddit.com/user/mordisko) [solved the issue](http://www.reddit.com/r/java/comments/19d2pt/unable_to_connect_to_database_if_i_read_that_line/c8mxu0k). Just a small piece of adwise from my side. If you're using JDBC Version later than 4, that is every Java version since Java 5, you don't need to load the class manually like you do in line 17 with the Class.forName() bit. The [DriverManager](http://docs.oracle.com/javase/7/docs/api/java/sql/DriverManager.html) finds the correct jdbc implementation, using the connection string, from you're classpath.
I just tested this on A x64 Windows 7 machine, it does not occur in either JDK 6 version. It is more likely your network is entirely effected with one of the recent Java exploits that is interfering with your JVM then a bug. 
I've tested it on four different workstations, one of which is on an entirely different network.
Can you provide the result of a java -version? Here's mine java version "1.6.0_41" Java(TM) SE Runtime Environment (build 1.6.0_41-b02) Java HotSpot(TM) 64-Bit Server VM (build 20.14-b01, mixed mode)
A month ago I quietly [disabled](http://pastebin.com/YztTxk2k) the java plugin company-wide with group policy. Nobody noticed.
Tried it on a 64bit Windows 7 machine with Java(TM) SE Runtime Environment (build 1.6.0_41-b02) about 40 times and it never failed.
That is the exact build I used. I also tried java version "1.6.0_18" Java(TM) SE Runtime Environment (build 1.6.0_18-b07) Java HotSpot(TM) 64-Bit Server VM (build 16.0-b13, mixed mode) Nothing. It seems you are the commonality of your issues, I would recommend getting a good virus scanner. 
I was curious about how often those loops actually complete. The following works about 60% of the time (measured), and the best answer is 42 (of course?): class Unicorn { static int i=0; static boolean pat() { return (i++ == 42 || i==1); } // Pats both unicorns 60% of the time. } (I use ill-advised increment style, in the spirit of the problem :-)
&gt; Which JDK/OS combination did you test it with? Windows XP Pro SP3, 32-bits.
I feel your pain brother
Nice. In their "favorite" sol'n (where David Narum brute-forces a seed to find what see Math.random started from) -- why is searching 1&lt;&lt;22 enough bits? Doesn't Random's seed use 48 bits? [And it seems we're depending on Random's implementation details; so could we instead start searching from `currentTimeMillis()` and search backwards, since that's how the default seed seems to be created? EDIT: Ah, the language spec codifies the algorithm for `next(int)`, but not for what to use as a default seed.]
Eclipse doesn't need to be installed. Just unpack and use. It doesn't integrate with the operating system in any way, so there's nothing to clean up.
Also read this: [In Windows, where should the eclipse folder be placed?](http://stackoverflow.com/questions/2414181/in-windows-where-should-the-eclipse-folder-be-placed) tl;dr: Don't put the eclipse folder in Program Files (or Program Files (x86) either). Windows doesn't like that. Also, you could "install" it by using [Ninite](http://ninite.com/). Check Java, JDK, and Eclipse, download and run the installer. I believe it puts Eclipse in C:\eclipse.
Every time JavaSE has a security update, so does the OpenJDK package on your Linux system, because they share something like 98% of the code base. Don't think you are immune.
I tried to buy a Go book. But it was statically linked to the rest of the store so it was too heavy to carry to the counter.
If you run Ubuntu, yes. There is no advantage - it's better to just unzip it and use it.
So, what you're saying is that Go isn't portable?
Go produces very large binaries because it doesn't do dynamic linking.
Installers are less useful for Java apps that are self-contained like Eclipse. I actually have separate installs for different projects. I know I can switch work spaces, but they use different sets of plugins and I don't want to bog down one install with all of it.
We have other sites that our users occasionally need to jre to utilize. So until oracle puts out a non scary version of java, we need to protect our users.
Please have a more responsive UI.
Is it still a bloated unstable mess?
There are some really nice performance improvements over RC1. Don't forget that Eclipse is FOSS. http://wiki.eclipse.org/Platform_UI/Juno_Performance_Investigation
No, my coworkers have duplicated the issue on their PCs as well. The only coworker who couldn't duplicate it was accidentally using JDK 1.7, and when I showed him his mistake, it happened for him as well. I guess you're right that it could theoretically be some kind of a virus which infected our entire office network, went undetected by our antivirus, and then also infected my home PC, but it only affects JDK 1.6, not JDK 1.7. It's not impossible, but it's pretty out there.
Well, that's funny comment, I enjoyed reading it :), but No body is asking you to do it in production. I had mentioned that in my post and comments too. IMHO, this is a GOOD question at fresher level as it has that interesting element of how good you are with different operator, whether you know bitwise operator etc. It also test your skill to find alternative solution. So this question does have MERIT in it. Having said that, doing this in production is big NO.
http://www.reddit.com/r/java/search?q=game+tutorial&amp;restrict_sr=on
I agree that being caused by a virus is pretty unlikely. Could it be some kind of software you all have installed on your machines, that somehow alters the way the JVM runs? At least on Linux, the JVM depends on a good number of common C libraries installed on the system, so there could be a bug in one of them. On Windows, I believe the JVM has its own copy of the libraries, but I don't know this subject well. Do you have a way to share your compiled class? This way we could try to run it with our JVMs, and see if it is a bug in the compiler or the runtime (of course, it should be in the runtime).
Codeacademy. It's mostly basics.
Juno has to have been the worse release by far, so I'm happy to finally see SR2. 
While a little harshly put, it's a valid point. People might think you're calling out Eclipse in general and not just Juno. I had to go back to Indigo as I ran into the performance issues that so many others had. Did they identify the cause?
The root cause was making major changes to the entire UI, and not doing a single performance test. Now they're finally running some tests, and tons of issues creep up (duh!). The plan I think is to just address them one by one. Some were addressed for sr1, some for sr2 and some more are planned for 4.3 and beyond. It might take another year before Eclipse will be as snappy as it was (which is a bit problematic, since it was never really snappy to begin with)
I would be very surprised if anyone in the Java world didn't know eclipse was FOSS.
The EWMA math is solid - we might open source our fork of it when it's all done. Most of what we did was extensively refactor it (the existing publishable interface, for instance, was tightly coupled in a weird way with the internals of each metric... there wasn't much of a type hierarchy in the metrics itself...) But - that being said - if what it does out of the box works for you it can work. We've used the normal version of it for a few projects and it's worked ok - it was only when we started to bake our own metrics library for internal use that we needed to tweak some things. It's just got some unfortunate design decisions (or more like accidents - I don't think there was much thought put into some parts of the design) that make it hard to get it to do anything that it does not already do.
I lost count how many Java developers I had to test during the past few years; it must take several dozens. So for me, it's not just theoretical. But I wouldn't ask this question ever, becuase it gives no information about the applicant. I ask them to implement simple algorithms (mathematical problems like solving a quadratic equation); delineate the algorithm of simple problems (traversing a tree, a circular tree, the core of a text editor, and such). Then I'll continue with code analysis (giving them a code with mid-complexity, which contains bugs), requirement analysis (giving them analysis interview summaries) and ask them to identify the domain objects and the use cases), and a lot similar stuff. That gives me a good footprint. I don't really interested to find out how good are they in solving conundrums. Were I on the other side of the table and be given this question, my reaction would be "Why should I do that? Give me a reason not to use a temp variable."
Google or the [javadoc](http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#syntax) should always be your first port of call for this type of question.
[This tutorial](http://www.youtube.com/playlist?list=PL8CAB66181A502179) is similar, but he hasn't added anything in 2+ months
well, that's not a bad reply either :) it shows that you care what you do and you have voice. I respect your process and questions and that's a good way of testing a candidate. Regarding interviews, well, It happens quite often than interview is totally different than work skill required to do your job.
No, I cannot duplicate the bug with JDK 1.5.0_22, it seems specific to 1.6 No, nobody else in this thread has duplicated the bug.
The voodoo options (-XX...) are a terrible attempt to "scale" a java app. If a java app server behaves badly, the code and data flow needs to be analyzed and refactored. These options could possibly buy a little headroom and time to do that. They have precious little documentation, and the combined influence on performance is not very well understood at all. Their behavior and interactions changes between releases.
It means: do your own homework.
Thanks again for your insight. Actually, for now, i only intend to use it out of the box, but i keep in mind the issues you faced when trying to extend it.
Especially if you're using many different development scenarios, e.g. in the extreme C++, Android and J2EE stuff, this is certainly a good idea. 
Very good question indeed but sadly, this answer is no, it only applies to classes that CDI is aware of (ie that are proxied by the CDI container). The workaround is to avoid the new keyword :)
You would need to create a Java agent and use something like asm, javassist, etc to manipulate the class's bytecode as it gets loaded into the class loader.
You can send them to boa13 at free dot fr if you want (in a zip or 7z file). :)
Must be it
This is not java in mobile. This is java generating html well suited for mobile.
I'm about to attend a workshop on this on March 13. I'll see what's up.
&gt; Oracle Brings 0-day exploits to iOS Devices (and Android too)
He doesn't go into specifics, just one or two generalities, then disclaims that he doesn't actually think lambdas or functional programming sucks, then advertises for a talk he's having at a conference. The article's name is clearly engineered to garner clicks, but there's no content to back it up.
Enable click-to-play in a browser, add you site to whitelist. (both firefox and chrome support that)
Android is Java-Like so if you want to target Android phones it makes sense. Java is commonly taught in school because it is useful to know if you want a job. Surprisingly people like to use what they know. Plus a lot of people have both mac and windows boxes, having to deal with portable C/C++ games is a little much for small game development.
Before Macs became popular they needed Java to be viable so Apple worked on getting Java on OS X. Now with the number of developers that have picked up Objective-C because of the popularity of the iPhone, Apple would prefer developers write Mac only apps (Apple likes to lock people into their ecosystem). I have a feeling that someone at Apple decided they could save some money if they started making Oracle handle most of the work in maintaining Java on Mac. Plus the Apple version of Java always lagged behind in updates so it is actually better that Oracle is taking over the responsibility. Chrome does not support Java 7 on the Mac platform. A 64-bit browser (Safari or Firefox, for example) is required to run Java 7 on Mac OS X. 32-bit browsers such as Chrome do not support Java 7 on the Mac platform. Honestly as much as I love Chrome it can be a little buggy on Mac. Both Chrome and Safari are based on WebKit so Safari is going to be the closest to Chrome for most needs.
Is there any downside to Firefox? I have always not liked the interface, but how is it in terms of speed and efficiency? I feel like its plugins and extensions are poorly maintained...
I read the first page and this article is bullshit. It smells an awful lot like the azul Astroturf (they even use an azul image on the first page) I have five instances of an app running in production now with a 72gb heap and they pause for gcs of less than 300ms with an average interval of over 65 seconds between pauses... And they have been holding stable at this for over a month now. The G1 collector in java 7 is really good. If you have access to gobs of memory and you want to let the app use it, it is the only collector that I've used that you can give MORE memory too and have pause times dramatically decrease (mindful of NUMA, of course)
At this point Chrome, FF, and Safari are all pretty much on par with each other. I personally use Chrome for most stuff and Safari if I need to use a java applet.
You know this has nothing to do with applets, right? Heck, the client (ios/android device) will never see java. This is just a mobile html renderer for the ADF framework. 
even if its nested? good to know its possible then, ill keep working at it thanks!
OK, sent!
&gt;The user interface layer of Oracle ADF Mobile is rendered with HTML5 which delivers native user experience on the devices, including animations and gesture support. Ughhhh
figured it out if anyone is interested! public void blueGradient() { //create a pixel objext set to null Pixel pixel=null; //loop though x values of image int x=0; while (x&lt;this.getWidth()) { //loop though y values of image int y=0; while (y&lt;this.getHeight()) { //set RGB intensity depending on y value pixel=this.getPixel(x,y); pixel.setBlue((int)(pixel.getBlue()+y*1.001)); pixel.setRed((int)(pixel.getRed()-y*.1)); pixel.setGreen((int)(pixel.getGreen()-y*.1)); y++; } x++; } }
Line 101, getWidth() returns an int, and then you're calling getHeight() on what that value. Do you mean to chain those calls together? What are you trying to do in that line? Edit- removed spoiler since it just hung out in the open. 
In your first post you indicate that you have to use a while and a for loop. In your solution you are only using while loops. 