This is especially needed for == operator instead of equality. Operator overloading has many more uses related to arithmetics, comparisons etc but == is the fundamental one.
Observable, notify, heck even @synchronize have broken implementation, once you work with multiple threads using socket, etc. This stuff is the dark side of Java. 
After 21 years of Java coding, I'm still delighted that Java does not have operator overloading.
This one drives me nuts. 
Or go the whole way and adapt the Ceylon type system with intersection and union types where Null is in its own type hierarchy. And flow sensitive type narrowing. Those are a godsend!
There are many ways to do operator overloading. Some better than others. No operator overloading at all is probably at one extreme of the whole spectrum. Scala style unbridled operator soup is another extreme. If one would map operators to some mathematically defined interfaces that those operators could be safely overridden by implementing those interfaces. This way we could have kept ability to override some operators while keeping semantics of the operators intact. I’d say the Java today might have been an entirely different language now. 
I agree that it would work if the semantics of the operators were kept intact, I just don't really agree that that's possible, as disparate types have vastly different semantics. If such a system existed, we'd be plagued with whiny-asses who didn't want semantics polluting their programming languages. I've mostly experienced C++ and Scala, and both of those are terrible terrible examples.
All exceptions should be unchecked 
While this is weird, i don't think it affect many programmers in their day to day coding 
Also, show them ceylon 
I would prefer == and ===, it's more consistent
Source?
Yeah! I’d also love comprehensions, a module system, and reified generics. Can we go all the way back to ‘91 and show them the Ceylon language spec?
Ceylon and Rust come to mind as good examples of semantically relevant overloadable operators. Ceylon’s interfaces are a bit more limited occasionally than I’d like to and I don’t have too much experience with Rust yet to comment on these, but they both allow you to extend operator support to your custom classes and it is just so nice! :)
I'd like to go back to 1997 or so and deliver a few messages: 1. Talk to the servlet-spec team about the importance of a single entry point that can be used in the booting of an application. Servlet and Filter (only those two back then) are too unrelated and only instantiated during actual HTTP invocation. We needed a place to fully compose applications before the first request came in. And I mean end users do the instantiation of servlets and filters as part of that and can register those with the web container in Java (not XML). We would have got to the likes of [Jooby](http://jooby.org/) 15 years more quickly if so. 2. Tell Sun leadership to allow Microsoft some extensions to Java for Windows and IE. Because Microsoft insta-froze the JVM right then, Sun had to do massive backflips with JDK 1.1 in order to have JDK 1.1 source be able to target a 1.0 JVM. 3. Tell Sun leadership to work on a web app hosting model as a service, and charge customers for CPU time used per request. Like Appengine/J but ten years earlier. Oh and do what they can to be able to account for time spent on a web-request thread to support charging down to the request level. I'd perhaps also want to speak to the original team in 1995 - while I don't mind the checked and unchecked exception difference the fact that RuntimeException is a subclass of Exception has always irked me. 
I’ve seen couple of good uses of operators that completely ignore semantics of the operator (Boost’s path comes to mind where paths could be combined using division operator), but these are mostly gimmicks that I could very well live without. BigDecimal.add and its ilk on the other hand drives me crazy every time!
If I were to do log auditing for a large scale system, I would probably use a Logstash encoder for Loback to produce Json files which would be consumed by an agent instance of LogstashForwarder which would send the logs to a central server which would place them in some database. This is the same principle behind the famous ELK stack.
What's a better alternative?
Not erasing type information. Known as reified generics.
No primitives, everything is object, no checked exceptions, immutable collections as default, null as object with equals method
Well one is clearly an array of lists while the other is a list of arrays, duh! 😂
I heard a variation of java, called "JavaScript" does just that /s
This enrages me SO MUCH. Apple are a bunch of hypocritical figs. "IPad is for education! IPad is for teaching and exploration and arts!" But, you will NEVER be allowed to use it to LEARN PROGRAMMING. What a load of garbage.
Unchecked integer conversion was a major source of bugs in C. By reducing the number of int types, the language gets safer. That was the idea I guess.
And tell them if they don't make Ceylon, we'll have to fallback on Kotlin or worse... They'll understand.
what do you mean? how do you avoid serialization?
eh no, they've got a pretty good reason, allowing an IDE like environment would effectively allow the execution of arbitrary code so it's actually a pretty hard problem given the situation. Also they DO provide a tool specifically designed to teach programming. 
You don't. The problem is that java baked it deep into the language/jvm. And this has caused a mountain of headaches (it was a prime factor that delayed lambdas). It is slow, specialized, and invasive. And these days everyone avoids it.
make java work on the desktop with a java app store back in 1998
This is exactly what I'm going to do! But I'm looking for the best way to separate the audit log levels from other logging. Right now, I think I'm going to use the same logback logger as the rest of the system, but add a AUDIT marker to them. From what I'm seeing, I can configure the marker to always be logged, regardless of the level settings
http://openjdk.java.net/projects/valhalla/ Looks pretty interesting.
Don’t forget all the security vulnerabilities it has caused over the years! I believe the Equifax hack was based on a serialization RCE bug.
Sounds a bit like type classes. For example, if your class implemented Comparable, or you provided a Comparator, then Java could automatically support all the comparison operators.
I'm not buying that argument. It would be entirely feasible to sandbox apps locally developed. I also highly doubt a single tool can cover the range of possibilities the devices could offer. That limitation is nothing but a heavy handed divisive commercial strategy that is harmful to the development of potential future programmers. Coming from the Apple II company, this is an insult to the history and culture of computing. Shame!
If you don't want people to have to know about adding a special marker and have a choice of logging levels, maybe just create an AuditLogger class that has a single 'log(String, Object...)' method and internally it just delegates to Logback using the right level and marker.
&gt; the fact that RuntimeException is a subclass of Exception has always irked me Although semantically it sounds strange, it's so you can catch Exception and also catch any RuntimeException. Otherwise you'd have to catch Throwable, which is also implemented by Error.
They should reify generics for reference types aswell.
Remove Lambdas and streams from Java 8. That is what I would tell the assholes who put that garbage in.
Funny I've written Java code for years and years and years and have never once worried or thought about or cared about type erasure.
Java needs simplified generics not more generics. It has already grown more complicated than even STL was in C++.
Agree 100,000%.
Mostly people who sometimes need to code closer to the hardware but on those occasions not having unsigned is huge.
Lambdas are what is wrong with Java now. Saw a JVM crash recently having to do with Lambdas gone wild.
Hopefully further out than that, like past my retirement.
This is a great idea! It will keep things clean, simple, and easy to modify if things change. Thank you!
I'd give gold for your idea but it might deanonymize my account. Totally agree. Been saying JS needs to be eradicated for years and replace with a JVM.
You're right, atop their thrones carved from skulls of a thousand puppies , Tim Cook and Johnny Ive over their fresh glasses of babies blood plot these things 
Agree completely.
I’m surprised this is upvoted so much, most of this is not due to type erasure specifically. As Brian Goetz has been saying for years, people are taught to think type erasure is a bad thing, but they don’t know why.
Okay, I understand that serialization is slow, but what about "specialized and invasive"?
There will always be the one person band/startup thinking opposed to Enterprise thinking. The two ways of thought are not compatible at all. Enterprise is scoffed at by those who don't stop to think about how code in the Enterprise has to last often for decades, worked on by numerous (lots) of people, all with different skill levels and views and opinions and passions and perspectives. There's a reason why Java has over 14,000 listings on Dice at this moment and Kotlin or similar "simplified" languages have only dozens. Although, yes many of those languages haven't been around as long too. 
Don't need to travel back in time to try to convince them to flipping add default parameters! 
It doesn't make any sense to declare a method to be both abstract and static, and it's not allowed. An abstract method must be overridden in concrete subclasses but static methods can't be overridden. Do you see the dilemma?
Yeah, that's what i thought as well. Now i just need a good source for it :|
I knew all that, but would propose a fourth: Throwable Error AbstractException (ctor not accessible to subclasses outside package) Exception (checked root) RuntimeException (unchecked root) 
Just keep in mind that this approach requires more maturity in the operational aspect since running a Logstash setup (agents+server) can be tricky if you don't know what you are doing. Familiarize yourself with the costs of this approach before committing to this solution.
does it compile in your ide?
Nope, since abstract can't have a body and static has to have one.
Why do you need any more proof then?
Yup.
aha. try r/psychology? :)
Have you tried all arguments from https://stackoverflow.com/questions/370962/why-cant-static-methods-be-abstract-in-java? The argument that I find most persuasive is this: Docs say you can't override static methods. Abstract means you must. &gt;If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass. &gt;The distinction between hiding a static method and overriding an instance method has important implications: &gt;* The version of the overridden instance method that gets invoked is the one in the subclass. &gt;* The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass. - http://docs.oracle.com/javase/tutorial/java/IandI/override.html
Instead of just == for strings, I wish we had operator overloading
[The Java® Language Specification](https://docs.oracle.com/javase/specs/jls/se8/html/)
Source?
There's no need for speculation, see the [java language specification](https://docs.oracle.com/javase/specs/jls/se9/html/jls-8.html#jls-8.4.3.1): &gt; It is a compile-time error if a method declaration that contains the keyword *abstract* also contains any one of the keywords private, *static*, final, native, strictfp, or synchronized. 
THANK you ! :)
Thanks a lot!
And let's dive into the specification. There's some good quotes at http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html &gt; It is a compile-time error to declare an abstract class type such that it is not possible to create a subclass that implements all of its abstract methods. -- 8.1.1.1. abstract Classes &gt; Newly declared methods can hide, implement, or override methods declared in a superclass or superinterface. -- Chapter 8. Classes &gt; hiding is different from overriding. -- (Somewhere in the comments on that page) &gt; If a non-abstract method mC overrides an abstract method mA from a class C, then mC is said to implement mA from C. -- 8.4.8.1. Overriding (by Instance Methods) &gt;If a class C declares or inherits a static method m, then m is said to hide any method m', where the signature of m is a subsignature (§8.4.2) of the signature of m', in the superclasses and superinterfaces of C that would otherwise be accessible to code in C. -- 8.4.8.2. Hiding (by Class Methods) 
Operator makes at least some sense for "almost" primitives, say a struct for complex numbers.
While Java serialization has had its share of security issues, the Equifax hack vulnerability was unrelated. [Equifax has stated](https://www.equifaxsecurity2017.com/2017/09/15/equifax-releases-details-cybersecurity-incident-announces-personnel-changes/) that Struts2 vulnerability CVE-2017-5638 was exploited. An [analysis of CVE-2017-5638](https://blog.gdssecurity.com/labs/2017/3/27/an-analysis-of-cve-2017-5638.html) shows that tainted data from an incoming request was passed to the OGNL expression evaluator, resulting in RCE. There was an unrelated [Struts2 vulnerability CVE-2017-9805](https://lgtm.com/blog/apache_struts_CVE-2017-9805) disclosed recently, which despite initial reports doesn't seem to have been used in the Equifax hack. The issue here is deserialization of tainted data. However, the specific mechanism in this case was *XStream* deserialization, not Java deserialization, though any deserialization framework can have broadly similar issues.
Serialization was certainly a headache for lambdas, though I'm not sure it was a prime factor. The impasse over the early BGGA vs CICE closures proposals, and Sun's poor finances in the late 2000's, both contributed years of delay.
Extends. Get rid of bloody extends. Composition only. No more inheritance trees.
Yes. Exactly. 
Was the issue with lambdas or with incorrectly implemented lambdas? 
while it doesn't make sense in Java, it is something you can do in Delphi - the class was just another object with all the static methods and variables (called class method/variables rather than static) as its methods/variables - I found it useful for what you'd use factories for in Java.
Specialized because only java does java serialization. Invasive because pretty much every new language feature has to consider how it will interact with serialization.
just **pure** abstract methods have to be overridden in the subclass
Why? This is properly part of the interface in cases where you can actually do something about the exceptions at run time.
It will be here in March.
We now have a module system...
Why do you not want primitives?
Garbage? Ha!
The architects talked about possibly allowing operator overloading for numerical value types, such as `ComplexNumber`.
What are pure abstract methods and how do they differ from other abstract methods in java? 
One of the ArrayList classes is private, so it shouldn't appear in source code. It does appear in some places, like stack traces, which can be confusing. I (and countless others before me) have proposed renaming it, but it can be renamed because of ... serialization compatibility ....
No user overloading, but == should be syntactic sugar for .equals on every object (with check built in for LHS null)
This is the definitive answer. +1. Green checkmark, if this were Stack Overflow.
Of course you’re right. Evidently my brain hasn’t updated to Java 9 yet. 
Understandable, haha!
I’ve had cases where I’ve wished it was a thing. e.g. if a class Bar overrides Foo, it must provide a static method public static Bar generateInstance(Random rng) for generating Bar instances at random.
the absence of the implementation just try this class A { abstract methodA(); } class B { abstract methodB() { //impl } } Now try create class C which extends from A and then try same but extending B and you will see the difference. Extending from A will **force** you to override methodA(). But not in case of extending from B.You don't have to override it.
Make == use .equals and make identity comparison a method in the stdlib.
Goetz said they probably won't open reified generics at the language level, but other languages on the VM can decide to use them.
My inspiration for this question came from [this talk](https://youtu.be/jAL72EhLTXo). They discuss some of your requests.
Overloading is not possible because of lack of generic specialization in the language. Kotlin implements this with type erasure. Vararg heap pollution is due to shitty array variance rules. Lack of primitive generics is not necessarily fixed by no type erasure. Type erasure is really a small issue when you ignore the broken attempt at generics that is arrays, which you should anyway.
Many of the attempts at simpler delegation (lombok, kotlin) share many of the same issues of inheritance. Delegation has to be explicit to be better than inheritance
Replace `Exception` with `CheckedException` and `AbstractException` with just `Exception`. I don't like `AbstractException` as a name.
Less identity on objects. No identHashCode, no intrinsic monitor. Would open the way to some very interesting language and vm features, but might break other uses.
Value types won’t have to worry about identity! No wait(), notify(), etc.
Did you actually try to compile your code snippet?
No
no, it's a pseudo code
You should try compiling it to see whether or not Java abstract methods can have a body or not.
Well the person who should try it and compile it is you because you've got apparently gaps in this area.
If you say so (but I really think you should try it).
Yep, but value types and their compatibility would be much easier if nothing had identity by default.
Arrr.
I have been annoyed by the amount of Java applications and tools that decide to ignore operating system standards and dump files and directories into users' home directories. For instance, on my system there are `.android`, `.eclipse`, `.ivy2`, `.java`, `.m2`, `.minecraft`, `.sbt`, `.scalaide` and `.swt` which were created by Java-based applications. I realized that there doesn't seem to be a decent, small library that helps applications to follow the standards and get this right. That's why I wrote one! Happy to hear comments, thoughts and criticism!
How would you even call that thought? Would you call Foo.generateInstance and get a Bar? If not, you know at compile time that you need a Bar and can just call Bar.generateInstance.
Wow, that is so perfect! Thanks!
More complete data structures (java.util package) with mutable &amp; immutable variants Properties support (I.e. Lombok)
They looked into adding properties, but no one could agree on what properties meant.
Let us know what your professor says about this :-)
If I were you I'd submit as proof a single java file that shows it won't compile. Include the output of a command line invocation of javac on the file.
You're right. I was trying to make it backward compatible (and failed at that too) when there was no such requirement set out in the OP.
Let me backpedal at least a bit - some kind of reduction of type erasure is pretty much required for things like generic arrays or generics over primitives. But as Brian would say, "it was a pragmatic choice at the time," and it's not as though all of these other features you bring up would be trivial now if types were not erased. Brian's JVMLS talk about project Valhalla from last year touches on this a bit: https://www.youtube.com/watch?v=Tc9vs_HFHVo
This is a great idea. Thanks! 
My guess is, its more about creating a contract than actual inheritance, or more like enforcing convention. You would just know that all Foo subtypes have a generateInstance static method and that if you create Bar... you also should (have to) write the generateInstance static method. I gotta say its a thing that has come up before for me too. You create some nice hierarchy and they all have similar static methods that by convention you give the same name. Theres always that OCD part of your brain that wants to make everyone after you follow that pattern. But in the end... it doesnt TRULY make sense to do and doesnt really buy you anything.
Yeah I wouldn't say that removing type erasure is the *only* thing needed for those features, but it is definitely needed.
Primitives are necessary for performance reasons. They could still inherit from object though. They just have to be stack allocated and not reference types.
unsigned types please. it seems so dumb to have to use ints with in/outputstreams.
They are looking into additional pattern matching to the language. Look up Project Amber.
Strange how I get voted down, when even James Gosling said similar: https://www.javaworld.com/article/2073649/core-java/why-extends-is-evil.html "Interfaces versus classes I once attended a Java user group meeting where James Gosling (Java's inventor) was the featured speaker. During the memorable Q&amp;A session, someone asked him: "If you could do Java over again, what would you change?" "I'd leave out classes," he replied. After the laughter died down, he explained that the real problem wasn't classes per se, but rather implementation inheritance (the extends relationship). Interface inheritance (the implements relationship) is preferable. You should avoid implementation inheritance whenever possible."
I think compiler should choose when it is better to allocate on a stack, like it is done in scala（if I remember correctly）
I think compiler should choose when it is better to allocate on a stack, like it is done in scala（if i remember correctly）
I think compiler should choose when it is better to allocate on a stack, like it is done in scala（if i remember correctly）
I think compiler should choose when it is better to allocate on a stack, like it is done in scala（if I remember correctly）
I think compiler should choose when it is better to allocate on a stack, like it is done in scala（if i remember correctly）
I think compiler should choose when it is better to allocate on a stack, like it is done in scala（if I remember correctly）
I think compiler should choose when it is better to allocate on a stack, like it is done in scala（if I remember correctly）
DecimalFormat and it’s ilk not being threadsafe. WTF!
That's an oxymoron. If your "generic" code needs to know the implementation details of the type, it's not actually generic.
Yes, creating a contract/convention, so you know all the subclasses will have that method, whoever writes the subclasses.
This is what I did in my project, where the requirement is to use a separate audit log file. https://github.com/oneops/secrets-proxy/blob/master/src/main/resources/logback-spring.xml#L23-L40 https://github.com/oneops/secrets-proxy/tree/master/src/main/java/com/oneops/proxy/audit change the logback encode pattern depends on your use case.
Looks very nice. I strongly encourage you to adopt semantic versioning though: http://semver.org
I usually prefer semantic versioning. But in this case, considering how the specific values of the path strings returned by the libraries are core part of the interface (a change means that an application using this library might not find its existing cache/config/data directories anymore), I prefer this approach. I believe there is pretty much no "compatible" change I can make to anything, and I want application authors to explicitly upgrade on every version so that they can check whether any change impacts their application.
Sorry, but this falls under the **Do not post tutorials here!** category. **Post removed**
I find applications writing random stuff to the user home make it unusable as a place to store my files. I always store files on a new partition. The user home becomes the place for random files written by application.
&gt; native, strictfp I didn't know these keywords existed
Not sure what you mean by *operating system standards* here, but on unix style systems the home directory is always where applications create user specific files. On those file systems any directory beginning with a dot is hidden in normal directory listings so they don't clutter up your view.
Fair enoug, every version is major. Maybe you could specify this under "Versioning"?
While this is right, it is preferred to put files that are related to preferences etc into the .config directory in your home. I like that better to be honest. I wished there was some standard .appdata or smth similar. 
Cool thing! You got cache/config pathes mixed up in your table from the readme for linux :) 
Looking at the readme, it looks like author agrees with you. Perhaps he means in the comment that he has all this folders on his windows or mac- which would be out of place since those system have system specific folders
Awesome project! You seem to have swapped cache and config in the second column of the first table.
I solved this issue by - [making my home directory read-only](https://soc.github.io/blog/linux/self-defense-against-dotfiles.html) - filing bugs against applications which fail to work correctly - submitting patches to implement the XDG standard in applications This helped to reduce the clutter in my home directory down to one dot file, `.pam_environment` and 25 dot directories. Going forward, the amount can only go down, because no new dot stuff can be added, while I'm actively looking for getting rid of the remaining ones.
Thanks, I fixed it!
Thanks, I fixed it!
Mhh, I thought &gt; The version number of this library consists of a whole number, which is incremented with each release. was sufficiently clear. Do you have an idea for a better wording approach?
I don't think that's really correct anymore. In case of the only popular Unix® OS today, macOS, their documentation specifies that application data needs to go into `~/Applications` and `~/Library`. On Linux the XDG base directory specification mandates that cache, config and app data needs to got to `$XDG_CACHE_HOME`, `$XDG_CONFIG_HOME` and `$XDG_DATA_HOME`.
It doesn't have to know the implementation details, it needs to know what type it's dealing with.
Nice work. I can't count the number of times I have had to write directory-handling code across all of my jobs, clients, and projects. It seems to be something a lot of folks forget about and they just end up dumping their crap in random places in the user directory. As a user, this is really annoying to me. :) 
It was easier to recompile openJDK for 32 bits and use that.. thanks.
The rant could be better summarised as 'Fuck SOLID'.
Add support for Android. This fucking devs always ask for access to read/write media instead of using their cache directory which they can always access. 
There's essentially nothing you can do with "knowing what type it's dealing with" that isn't breaking encapsulation. If you have a method "void foo(SomeClass obj)", proper OO practice is that it uses only the public API of SomeClass. If you use .getClass(), instanceof, etc to dig into the internals of obj, that's breaking encapsulation. Which may be necessary, for example for implementing .equals(), but best practice in general is to avoid it. If you have a class or method that takes a type parameter "&lt;T extends SomeClass&gt;", same thing, you generally should not need to know what T actually is. If you need some extra functionality (e.g. the ability to construct an object of type T) then explicitly inject it (e.g. Supplier&lt;T&gt;). (People who really haven't thought things through often try to do "new T()" and complain that it doesn't work. Who says T has a no-args constructor? T could even be abstract.) The one thing that does suck about type erasure is you can't do "new T[]". But the only reason you can't is because arrays are not themselves erased (X[] and Y[] are different classes). You can do "new ArrayList&lt;T&gt;()" just fine, of course. So that's really a case of not *enough* erasure.
gcj is no longer an active project.
Aren't their more specialized APIs for Android for that?
Spend just 2 more seconds design time on `java.util.Date`, please.
It also keeps IDE from working properly as the IDE thinks the user has to resolve the "ambiguity", e.g. when: - Searching for types - Auto-importing missing types - Other similar tasks At least, this is what happens in Eclipse, prior to listing the type in the type filter dialog
&gt; Overload == for Strings. You're not really wishing for that very specific overload... If it were done this way, it would have ended up on this list several times.
Not that people use, also if I'm writing a library which is pure Java using Android APIs is not meaningful. 
Can you give a code example , I don’t get it :(
Linux too.
To me, that sentence makes it look like you don't use any particular versioning-system. Something like: &gt; Any change to the library means that something might break, so I consider every release a new major version (http://semver.org) &gt; Please check your application before upgrading to a new version
Well we have `java.time.LocalDate` now.
Or just wait until Spring Boot 2.0 GA is released Dec 2017.
I do prefer interface-based inheritance over class-based inheritance. Venkat Subramaniam talks about coupling vs cohesion in systems, and this is what he brings up.
Is there a feature list of 2.0? I only seem to find dot release notes
&gt; While this is weird, i don't think it affect many programmers in their day to day coding No, but it usually affect the programmers who have a need for working with a byte type in the first place.
Seems like a bug in the IDE, if it's offering to auto-import or do other source-level operations on names that aren't accessible in the current source file. I suspect bigger problems are with actual duplicate public names like `java.util.Date` vs `java.sql.Date` (which I'm sure you're familiar with!) or `java.util.List` vs `java.awt.List`.
Knowing what type you're dealing with let's you add constructor constraints, and allows you to reflect public members. These are NOT "implementation details", they are part of the public interface of a type.
Maybe remove checked exceptions from the built-in APIs but otherwise keep the feature because it has uses at the domain level. Fix the Clonable interface misspelling or not have it at all. I would have done something different with Dates - they would all be immutable and semi primitive like String. Date = Simple Calendar Date (no times) Time = Time of day variable DateTime = Combined with timezone Maybe immutable structs, maybe generics. 
Yay the feature that killed SmallTalk. Nope. But I would like a static set of overloaded operators (a la String) for things like BigDecimal. 
Look into `LocalDate`, `LocalTime`, and `LocalDateTime`. Value types are being added to the language, which are kind of like structs, but a lot more advanced. And what do you mean by "maybe generics"? The language has had generics since J2SE 5.0.
I get it - I thought we were talking about a time machine. ;)
Easy enough to just use a ThreadLocal for your formatters.
do you have a link to that list?
In a language that supported it: default &lt;T&gt; void foo() { T.generateInstance().doSomething() } In Kotlin you can do this to an extent using reified type parameters and companion objects. Every time there is a thread like this people say "abstract static methods wouldn't make sense" but they actually make a lot of sense and there are languages that provide "abstract static" support through traits/type classes. The instance-centric nature of polymorphism in Java/OOP is a major shortcoming.
It is easy to work around, it is also wtf
18? What is this? Why can't I find anything about it?
Have you heard about the new time based release cycle? 18 stands for 2018, and 3 stands for March. There will be a new release every 6 months.
Check which Java is configured in your path or containerize your application.
What is the executable of the bot? Is there a .jar file nearby? What's your OS?
This is the news I missed. 18 doesn't bring up anything yet on Google.
Well Google may not have indexed information on the release yet. I suggest joining the JDK mailing list.
Since this is *programming help* it should be, as the various hints on the page indicate, posted in **/r/javahelp**. Please, make sure to **read** and **follow** the [**Posting Guidelines**](https://redd.it/48eykt) there. *Dropbox* is not an accepted *code hoster*. Use *github gist* as is stated in the **Posting Guidelines** linked above. In this link you can also find the *Code posting guide* that tells you how to use the approved code hosters.
http://openjdk.java.net/projects/jdk/
Unfortunately, with most developers the use of the keyword "abstract" will lead to SRP &amp; LSP violations everywhere and further consequences.
Aww... just great. Now I'm gonna have to sort out ANOTHER Y2K problem when I get to 2100.
[removed]
The release notes for 2.0.0 M5 have Java 9 support listed. But since it's built on top of Spring, which supports JDK 8+, then the final release of Spring Boot will likely support Java 9 nearly 100%. By then Java 9 will have been out a few months. Enough time to hammer out quite a few kinks.
It worked! Thanks. It generates a huge archive (160 MB!), but it gets brought down to 20 MB with compression &amp; deleting an unused webkit DLL, which is good enough for me. 
Some of the ideas: 1. Try creating a project that manages geometrical figures. One should be able to create them, get their perimeter legth and square value. This is something to start with. 2. Should be a bit harder. Create a zoo project. Different animals, each requires differnt food type, amount of food, sleep time, etc. Try creating this and write some code to emulate some time in the zoo. To make it more interesting, make some randomization, like feeding time. If the animal is not fed for, let's say 2 days, it dies. Have fun!
Codewars.com is a good place to practice your skills. They have varying level of diffculty and plenty of sample problems.
Maybe make a tick tac toe game with a board object and a single x/o object. Could be a good exercise
Why wouldn't the version released in 2100 just be 100.3? Mind you, it'll be a little confusing in the year 5765 when they are releasing JDK 3765, but, eh...
It was announced about a month ago... here's the [blog post from Mark Reinhold](https://mreinhold.org/blog/forward-faster). I personally kind of like the year-based numbering but think the month-based numbering is idiotic. People have been trained since time immemorial than x.0 is the new hot thing--now there won't be 18.0 or even 18.1 or 18.2... and no follow-up 18.4? Unless the release ships late... then will it be 18.4 and not 18.3? Just call the first one 18.0 and the second one 18.5. Although ... I dunno, I guess [Ubuntu's been doing this a long time](https://en.wikipedia.org/wiki/Ubuntu_version_history)... they release every six months, 17.04 and 17.10, 18.04, 18.10, etc... and they did have one slip-up where it came out in June and was indeed 6.0**6**...
Next time, please post such questions in /r/javahelp or in /r/learnjava as these subreddits are better suited for such questions. ---- Still, some inspiration: /r/ProgrammingPrompts and + [Where can I find practice exercises and project ideas?](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) from the /r/learnprogramming wiki 
Lots of activity in the JVM world with Graal maturing and IBM open sourcing J9 https://www.eclipse.org/openj9/. What is included in the commercial version of Graal that is not in the open source version? From the presentation, it sounds like the perf differences are significant.
I was at JAX London last week and several of the talks were about migration to Java 9. The prevailing opinion there was "don't bother migrating your applications until after the open source libraries have been migrated". 
If you've only (or mostly) ever programmed in Java, you are probably so used to the implications of Type Erasure, that you just ignore them. Passing "clazz" variables? That's just something you do when you need the type parameter of a generic method. Creating in advance an array of the correct type for `List.toArray`? Nothing wrong with that, _someone_ has to do it, why not me? Implementing `Foo&lt;A&gt;` as well as `Foo&lt;B&gt;`? Now that's just crazy talk, you can't do that! Except you could have if it weren't for Erasure - I can't count the times I was frustrated because someone implemented `Foo&lt;Number&gt;` and I had `Bar&lt;Double&gt;`, causing me substantial casting headaches. 
After working on my article, I've the same advice.
More generally - why no unsigned integer types? This is especially a PITA when working with C/C++ libraries or databases. Whenever there is unsigned int you are forced to use long...
There's a wiki page now with some details on how to run Boot apps on Java 9: https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-with-Java-9
You can catch exceptions whether they are checked or not. You can make them "properly part of the interface" whether they are checked or not. All having checked exceptions does is remove the option to ignore the exception and allow it to propagate without also declaring it in your method. FYI "checked" means nothing to the JVM. It's entirely a compile-time thing, and there are tools that allow you to ignore it. So, it really guarantees nothing, except inconvenience.
Java SE 9 added an AOT compiler, which can run on iOS.
There is 2 sides of this problem: 1) Apple has an extremely closed ecosystem 2) Apple users was a [small enough](https://www.codenameone.com/img/blog/old_posts/why-oracle-wont-issue-java-for-ios-anytime-soon-large-2.jpg) percent of overall devices that there really was no point in rushing iOS support.
Codename One is more portable that C# + Xamarin and arguably more portable than JavaScript. We've been around since 2012 so "still" isn't really accurate.
Take a look at Codename One, I've used it in the past, don't know how well it holds up though.
Yes , I mentioned CodeNameOne. I just worried its user base is too few. 
Thank you sorry I’m new here
Thank you
Thank you
Thanks
It's not as big as Xamain etc. but it's big enough and has been going well for a while. It's by far the largest WORA Java solution.
The main problem with iOS is impossibility of any kind of JIT (Just-In-Time) compilation. So the only possible ways to execute any code are * AOT (Ahead-Of-Time) or static compilation into binary code (as with Xamarin); * Interpretation (as with JavaScript); Up until Java 9 the second option was the only way to run Java applications with Oracle HotSpot JVM on iOS however bytecode interpretation is so slow that actually this is not an option. AOT compilation in HotSpot appeared only in Java 9 so it might help. But even in this case they lack of API for working with iOS. Also Oracle itself is not interested much in mobile platforms so there is no reason for them to invest into it. May be if they give up with Java and give it to the community then we'll see more progress in mobile direction. Regarding JetBrains. They are already making their own [Kotlin/Native](https://github.com/JetBrains/kotlin-native) so they don't need Java for iOS :)
&gt; Java SE 9 added an AOT compiler, which can run on iOS Unfortunately it is not. Java 9 AOT compiler works only for 64-bit linux target. Also the compiled code still relies on JVM which means that to make HotSpot AOT work on iOS Oracle still need to port their JVM on iOS. However if they do then with AOT technology it might be possible to run Java application on iOS with Oracle HotSpot. 
Lol, there's more to runtime than language. Apple prohibits JIT runtimes on iOS so you either have to you something like j2objc or fallback to slow interpreters like zero-vm. The reason is that nobody is interested in this. JetBrains are working on LLVM target for Kotlin, so maybe in future you'll have truly cross platform solution.
Brian Goetz said it will be able to run on iOS, so I’m assuming they’re working something out.
&gt; May be if they give up with Java and give it to the community then we'll see more progress in mobile direction. Yeah, maybe they'll open source Java one day, who knows. I'll call it OpenJDK, sounds good, I think.
&gt; Also Oracle itself is not interested much in mobile platforms so there is no reason for them to invest into it. I rechecked some sources and it seems this statement is not true. At least they started [OpenJDK mobile project](http://openjdk.java.net/projects/mobile/)
- Type erasure is a big issue when you are writing complex code for libraries that are dealing with Reflection and Genetic Types in the same time. - Limitations of the @Annotation API. I would kill to have annotations let me define attributes other than Strings, Enums, Classes and primitives. - Not having something like Project Lombok by default in Java and having to write getters and setters. - Not being able to have named parameters in methods like String.format. I had to implement my own code for that. Anyway this is minor. 
Yeah, I've already found that I was a little bit wrong about Oracle's intensions. According to [OpenJDK mobile project](http://openjdk.java.net/projects/mobile/) they are making more steps towards Java on iOS than I thought.
Fan of the six month release cycle, not a fan of the version schema. People are going to see 18 and wonder what happened to Java version 10-17. They are also going to see .3 an wonder how they missed three minor versions as well. Really just wish they incremented a new major version with each release. 
It's not only about sources. The thing is that the "Reference JVM Implementation" (i.e. Oracle HotSpot) is owned by Oracle. And their decisions impact on the evolution of Java. For example anyone can port OpenJDK to aarch64 (aka 64-bit arm) however if this port is not "blessed" by Oracle then this OpenJDK for 64-bit ARM will never be The Official JDK for aarch64. And Oracle is the bussiness oriented corporation so their interests might differ from the community. However if Oracle gives the ownage of Java to the community then it would be easier to develop JDK in our ways.
All I take away from this is don't work at Quantcast. If your VP of Engineering is this lost, it doesn't bode well for the rest of the company. As the great Feyman once said "It's not even wrong". 
Besides the answers already provided, the best path is always to be a software developer skilled in multiple languages, not to be in a Language X Developer silo.
There are no technical limitations that prevent Java running crossplatform. There's CodeNameOne and Multi-OS Engine (libGDX backend) to name a few. It's a question of marketing (see Xamarin that bought and killed RoboVM because it became a competitor).
FYI we support Kotlin with Codeanme One which is more stable and a better way to target iOS
It's an interpreter. AOT compiling the minimal amount of the JDK would at a minimum take 50mb without JavaFX (which will push it to 80mb+) by comparison a Codename One application is 5mb. Oracle and the JCP are incapable of making bold moves in this direction as their hands are tied in bureaucracy. 
I have never used this so have have no opinion on it, but Gluon Mobile claims to be able to create iOS apps in Java: http://gluonhq.com/products/mobile/ 
&gt; You can catch exceptions whether they are checked or not. Correct, but then you need to know what exception is being thrown, which means you need to read the code (which can change), or make a guess. It's not explicitly part of the interface if it's not checked. &gt; You can make them "properly part of the interface" whether they are checked or not. It's an implicit interface, not an explicit interface. Implicit is usually worse than explicit. This is like saying "well, we can get rid of all method arguments and just pass Map&lt;Type, Value&lt;Type&gt;&gt; into each method instead." &gt; All having checked exceptions does is remove the option to ignore the exception and allow it to propagate without also declaring it in your method. You can do that if you want, it's just usually a bad idea. try { doThrowingThing(); } catch (CheckedException e) { throw new RuntimeException(e); } &gt; FYI "checked" means nothing to the JVM. It's entirely a compile-time thing, and there are tools that allow you to ignore it. So, it really guarantees nothing, except inconvenience. Compile-time checking is all you really need. If you use tools that intentionally ignore exceptions, then you're declaring that you're okay with shooting yourself in the foot, and I have little sympathy for that. I suggest that you read Effective Java Item 58: "Use checked exceptions for recoverable conditions and runtime exceptions for programming errors"
Just calling it 2018-03 would have helped.
For the end users this might be interesting. From the http://mail.openjdk.java.net/pipermail/jdbc-spec-discuss/2017-October/000183.html new Async JDBC API should be ready by Java 10/19.x.
Where's part I?
Because Apple is a huge asshole about their phones. They have extremely aggressive policing of alternative runtimes, they have sued people, etc. Seriously, that's the reason. There's no reason they can't have have it except company policy. 
I do not know how to do either of those things. Point me somewhere?
Okay so you launch it with a .bat. And yes there is a .jar. I am on Windows 10
Look in your path variables (Google this for uour OS) where does JAVA_PATH point to?
* Open .bat file with an editor: Right-Click &gt; Edit * Replace the third line which reads something like `java -Dinteractive -Dfile.encoding=UTF-8 -jar PhantomBot.jar %1` with `"C:\Program Files\Java\jdk1.8.0_144\bin\java" -Dinteractive -Dfile.encoding=UTF-8 -jar PhantomBot.jar %1` where you specify the path to your Java 8 installation. Note that they are wrapped in `"`, which is needed when there's a space in the path.
Fwiw, the Deeplearning4j dev support channel is here: https://gitter.im/deeplearning4j/deeplearning4j The whole group of libs is set to come under the Eclipse umbrella: https://projects.eclipse.org/proposals/deeplearning4j Quickstart is here: https://deeplearning4j.org/quickstart
Ehhh, that’s a weird version ID to parse. 18.3 is better in that regard, but 10.x is better than both. 
https://developer.okta.com/blog/2017/09/08/nosql-options-for-java-developers
&gt; I'm just looking for *technical* information to back either or. You should then take a look at the Java Language Specification instead of the tutorial. &gt; 8.4. Method Declarations &gt; &gt; A method declares executable code that can be invoked, passing a fixed number of values as arguments. ---- &gt; 8.8. Constructor Declarations &gt; &gt; A constructor is used in the creation of an object that is an instance of a class (§12.5, §15.9). Further, it states the following: &gt; In all other respects, the constructor declaration looks just like a method declaration that has no result (§8.4.5). &gt; &gt; Constructor declarations are *not members*. They are never inherited and therefore are not subject to hiding or overriding. ---- Constructors are not methods. Once a class has been constructed, it's constructor can not be invoked again, while a method can be invoked infinitely and in case of a static method doesn't even require the construction of the class it's a member of.
It's splitting hairs really. I would argue that a constructor is sort of a special purpose method. Constructors technically do have a return type - the type of object you are creating.
From the JVM's point of view, a constructor is definitely a special method. From the Java language's point of view, a constructor is not a method: in the language specification they are two separate things. The the standard library's point of view they are also separate things: `j.l.r.Method` and `j.l.r.Constructor` are siblings: they are both sub-classes of `j.l.r.Executable`.
Qapla'
What does it mean to invoke? Do you invoke the constructor when you first create the object of the class?
&gt; What does it mean to invoke? What I'm referring to is the notation of code. Date date = new Date(); // invokes a constructor System.out.println(date); // invokes a method &gt; invoke method in the Method class This delves into meta-programming, which seems (at least to me) unrelated to your original question. The (unlike the `Method` class) generic `Constructor` class has a similar method, by the way (`newInstance(Object...)`).
Yeah, got type filters for them all... In fact, you're right. The auto-import feature is not considering `java.util.Arrays.ArrayList`, but the open-type feature certainly is.
&gt; Constructors technically do have a return type No, they don't. Constructors don't produce a result. They ensure that the object adopts a state that is logically safe after the JVM has allocated the necessary memory to hold its state and before other code can interfere with it. &gt; The modifiers are implied as the constructor is only called one way. That's also not true. The only two cases, that come to my mind right away, in which a modifier is implied are enum constructors (always private, making public and protected illegal) and interface members (always public, making protected and private illegal). [Section 8.8.3 of the Java Language Specification](https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.8.3) states the following: &gt; Unlike methods, a constructor cannot be abstract, static, final, native, strictfp, or synchronized: &gt; &gt; * A constructor is not inherited, so there is no need to declare it final. &gt; * An abstract constructor could never be implemented. &gt; * A constructor is always invoked with respect to an object, so it makes no sense for a constructor to be static. &gt; * There is no practical need for a constructor to be synchronized, because it would lock the object under construction, which is normally not made available to other threads until all constructors for the object have completed their work. 
If you do Date date = new Date(); which invokes a constructor. Then wouldn't constructor fall under the definition of a method then? "A method declares executable code that can be invoked, passing a fixed number of values as arguments." That's why I'm asking for the definition of invoked.
Doesn't really answer the question, but slightly relevant. Method References can refer to constructors, e.g. HashSet::new
You're getting way too far off track now. "Invoke" is not a term exclusive to the language and its definition is unrelated to the definitions of constructors and methods. &gt; the definition of invoked Google: "cite or appeal to (someone or something) as an authority for an action or in support of an argument."
I dont mean to go off track but, I guess I only ask this because you stated with the code that you can invoke a Constructor. This contradicts what you stated earlier with the original definition of what a method is.
Could you explain what makes Codename One more portable than C#/Xamarin and JavaScript?
A constructor is a method that returns an object of whichever class it's called from (i.e. the Scanner ctor's return type is Scanner)
Yeah. I just checked what it was all about and I don't see why it is going to be more portable than Xamarin. Sounds like one of those bullshit statements companies make to sell their stuff.
Disclaimer, I've never used Kotlin before. But I have watched Google I/o 17. Kotlin removes much of the verbosity of Java and makes the code cleaner. Kotlin has security features that would reduce the number of NullPointerExceptions tremendously. Moreover, Kotlin is backwards compatible. Of course, there should be more benefits, but these are just the key ones I've seen. Whether Kotlin would grow and outrun Java, like Swift did objective C, who knows. But I don't believe it's very likely, because Java is taught in most schools. Java developers are plentiful, and the language has huge support behind it's back. We might see increase use of Kotlin though, as companies can slowly start incorporating it into their code without risk of breaking their current software.
learn both! it's just mostly syntax and a few language quirks, the programming concepts are the same regardless of the language. it shouldn't be too bad for you since you already have a programming background and know java. just do some kotlin tutorials and get familiar with the syntax. 
I second this! As programmers it's never a bad idea to pick up a new language. 
yeah! my manager at work gives his team 1 day a month as a mini hackathon to explore new technologies. and last month, i did kotlin, and built a chat app with it! 
&gt; Once an instance of a class has been constructed, its constructor can not be invoked again A constructor acts like a static method. It is not associated with any particular instance. And yes, it can be invoked again.
Nope it's explained in the docs and in the developer guide and in the about. Several reasons really: - Lightweight architecture (that's in the front page of the github repo) with heavyweight mixing - Smaller API which makes portability easier including a specific porting hardware abstraction layer - Designed for portability since before the iPhone even existed - Our underlying iOS VM translates to source code which is inherently more portable for iOS https://github.com/codenameone/CodenameOne/tree/master/vm
well it is a decent language, more practical than theoretical for one, easily interops with java, is a first class language on android, and they have kotlin-native and kotlinjs for code reusability. In fact the small bit of kotlin-native I've done is fast and much smaller footprint than even golang and interops with C/C++ fairly easily. I'm not quite sold on kotlinjs yet, large download, but in the right scenario I would use it, but browsers (the ONLY thing I use js for) can be persnickety enough that you are usually better off learning javascript for that, for now. However they are making inroads (i.e. html5canvas) with kotlin-native to llvm/wasm, so there may be some reuse/optimization possibilities there, which is pretty friggin sweet. https://github.com/JetBrains/kotlin-native
See my answer below to the throwaway account for more. But why more than C#/JavaScript? JavaScript is easy. The main portability problem in JavaScript code is that you rely on vendors. E.g. Google needs to fix a problem in the environment and it doesn't because of OS version fragmentation. Codename One is statically linked so we can fix and update all the time. We can still support Android 2.x whereas modern JavaScript code requires newer versions and won't work properly on Edge/IE. Our code runs find on Windows, Mac, iOS, Android and can even be compiled to JavaScript using TeaVM. Historically we used to support further platforms like blackberry etc. but we stopped supporting them due to lack of need. That probably still works despite the fact we haven't touched that in ages. This is just something JavaScript can't do. C# could in theory rebuild what took us 10+ years to build and in theory build a portable VM but they would be at a disadvantage on Android. On Android we just use the underlying VM and they need to spin up their own VM as C# is too different from Java (we have a similar disadvantage on Windows). Unlike Xamarin we can compile to JavaScript code and a lot of other platforms so we are FAR more portable and all of that is done with one code base WORA. Xamarin requires code for each platform even when using Xamarin forms which is based on heavyweight widgets.
okay so i went to that location to check for the java 8 directory. It isn't even there. Did java 8 not install because Java 9 already is? Is there a way to have them both?
All i see relating to Java in that spot is.... C:\ProgramData\Oracle\Java\javapath
&gt;Lightweight architecture (that's in the front page of the github repo) with heavyweight mixing I just checked what you guys meant by "lightweight" and "heavyweight". It seems those are not standard definitions. I've never heard people saying that something like Swing as "lightweight" or SWT as "heavyweight". Seems to me it's a marketing strategy. Ignoring that I think that with Xamarin.Forms the "problem" you guys see is highly reduced. &gt;Smaller API which makes portability easier including a specific porting hardware abstraction layer. Meh. From the point of you of the provider like you or MS I guess it is an advantage when a new platform needs to be supported. From the point of view of the app developers it will not look as "more portable". &gt;Designed for portability since before the iPhone even existed Fair enough. &gt;Our underlying iOS VM translates to source code which is inherently more portable for iOS Why? I checked the link and I'm not convinced. Under that argument basically any VM out there that doesn't compile to C or C++ is less portable. Is that what you guys are trying to say?
Piling on the spec quotes: &gt;**It is a compile-time error for a constructor to directly or indirectly invoke itself through a series of one or more explicit constructor invocations involving this.** Constructors can't be recursive. &gt;Constructors are never invoked by method invocation expressions (§15.12). You can't call them like methods. 
On the bytecode level, yes, it's a method named &lt;init&gt;. 
Ah ok. I meant PATH variable and usually JAVA_HOME is added to point your system towards where to look for the installed Java version. Which Java is currently present in that directory? Could you change the path so it exclusively points to Java 8? I would advise you to use some more Google. 
You probably haven't programmed Java for long, Swing's wikipedia page mentions it at the top and the term has been heavily used since the days of Swing beta: https://en.wikipedia.org/wiki/Swing_(Java) It's not as heavily used now but that's because AWT is no longer relevant and SWT isn't an official API. Both Swing and FX are lightweight. From the point of the user 90% of our code is written in Java which means what you see in the simulator matches what you see in the device more cleanly and that's huge in terms of debugging as things behave more consistently and you can reproduce a problem on your PC. You also don't need a Mac for iOS development or a Windows machine for Windows development both of which aren't really true for the alternative approach. Compiling to C is better because of Apple. They changed the underlying ISA 3 times since we started Codename One and have made numerous changes to the platform. To this day other VM's still don't support bitcode and the RoboVM guys describe it as the hardest thing they ever did but feel free to remain unconvinced. The fact is that we are physically more portable and on more devices despite having a **MUCH** smaller workforce than MS has assigned for Xamain/C#. Another fact is that you are arguing theory about a product you haven't used. I've used all of the above and even though I'm obviously biased I am informed... Notice our product is open source and free for commercial use, we have a paid portion but you don't have to use it if you don't want to. We don't have a marketing department so any "marketing speak" literally doesn't exist.
In System &gt; System Properties &gt; Advanced &gt; Environment Variables, click on **Path** under *System Variables* then click **edit** to see all of the paths in an easy to read manner. For me (I have 8u144 JDK installed) I can see C:\ProgramData\Oracle\Java\javapath ... C:\Program Files\Java\jdk1.8.0_144\bin If it points to the wrong version, you can edit it. To see if Java is installed, you can also go to Control Panel &gt; Uninstall a Program, then check in that list.
Right now it is mostly usable for Android development, given that Android Studio is based on InteliJ, and Google made it an official Android language. For regular Java shops using other Java IDEs for regular Java development (not Android), I wouldn't recommend it, as it requires switching to InteliJ. Yes there are plugins for Netbeans and Eclipse, but they are in a Limbo state, and not all IT departments are open to using InteliJ instead.
One version doesn't block you from the other. The default directory is always either `C:\Program Files\Java` (64-bit) or `C:\Program Files (x86)\Java` (32-bit). In those directories the Java folder starts with either `jre` or `jdk` depending on if you installed Java as a user only (jre) or for developers (jdk). But it doesn't matter which one. Because you could have many Java versions installed, the system decides to use the one specified in the `JAVA_HOME` environment path variable. Please check in *Programs &amp; Features* what versions you have installed and what variable is set.
Sorry for the late reply. The workload is kind of weird I guess. We read a csv file, and convert it to xml. The csv is read into a beans (by some custom reflection-annotation-magic), and that bean is then validated by BV. I built it that way, so that adding validations is easy and so that i can report back the line number/column number where the error occured. The csv is read using opencsv, the xml is created with JaxB. No cross-field validation is done, most of the annotations are @Size, @Pattern, @DecimalMin (on String fields each). Plus we have two custom validators (@ValidDate to check if a String looks like a valid date, @In() to check if a String matches a set of strings). When I run our app with about 400 000 objects (i.e., a csv file with 400000 lines), I get the following result (this is totally nonscientific, i used time &amp; curl and averaged 3 runs): | Bean Validation | Time avg | |-----------------+----------| | No Validation | 11.5s | | HV 6.0.2 | 35s | | HV 5.3.5 | 36s | | HV 5.1.0 | 36s | | BVal 1.1.2 | 20s | The code hast changed quite a bit since I ran that test last time, i distinctly remember that Hibernate Validator 6 was a lot quicker than 5 in my previous tests. Anyway, I added Bean Validation quite late in the project. I was just baffled that things would take three times as long as before, that went a bit against my expectations. I would have expected that building and serializing the xml would be expensive, as well as reading the csv into beans. I also quickly looked at where the time is spent using VisualVM's Sampler, it seems a lot of time is spent doing cache lookups (i.e. ConstraintValidatorManager.CacheKey.equals() and createHashCode() and so on). I've also seen that you have a performance test suite and I'm aware that you've been working on performance.
RoboVM is dead.. however you ware able to create Java apps for iOS since YEARS ... GluonVM should be the new thing... http://gluonhq.com/products/mobile/
I've been a full-time Java Developer for 5 years now and started trying out Kotlin a couple of months ago. I am deeply in love with this language. * Muss less boilerplate than Java: Smart casts, lambda syntax, properties, constructors, type inference, declaration site variance, ... * Fully compatible with Java and any Java framework. I have build an 100% Kotlin REST application on Jersey. * Explicit null-handling makes your code so much easier to read and much more save while still being less verbose than Java. * Declaring variables with val (cannot be reassigned) or var makes it obvious what changes (Java has final, too, but nobody uses it because it requires extra typing) -&gt; Better readibility and maintainability. * The concept of properties instead of having to declare a field, a getter and a setter. * If you're into functional programming with higher-order functions, pure functions and data classes, it's awesome. You can declare any Business Object as an immutable data class in an one-liner. * Many more features... You should definitively check it out.
The OpenJDK Mobile project is the base for Gluon VM. We use all the core classes (Java + native code), and have an own AOT + VM to execute it. When we started Gluon VM more than 1 year ago, I wanted to stay as close as OpenJDK as possible. As for the AOT: we currently have an own AOT, but there are a number of great evolutions inside OpenJDK in particular and the ecosystem in general, and I expect a boost.
We do (disclaimer, I'm a Gluon co-founder). Our current solutions are based on the RoboVM AOT and the harmony classpath (Java 6/7). Works nice, but we are now working on Gluon VM (announced Developer Preview 1 at JavaOne 2 weeks ago), which is Java 9 based, and has its own AOT/VM, heavily aligned with OpenJDK. And we're making it open source. 
[removed]
&gt;You probably haven't programmed Java for long, Swing's wikipedia page mentions it at the top and the term has been heavily used since the days of Swing beta: https://en.wikipedia.org/wiki/Swing_(Java) &gt;It's not as heavily used now but that's because AWT is no longer relevant and SWT isn't an official API. Both Swing and FX are lightweight. I'll give you that they are not terms you guys invented. I disagree they are "heavily used" since those days. I would even dare to say those are unclear terms today. And yes I use Java. &gt;From the point of the user 90% of our code is written in Java which means what you see in the simulator matches what you see in the device more cleanly and that's huge in terms of debugging as things behave more consistently and you can reproduce a problem on your PC. You also don't need a Mac for iOS development or a Windows machine for Windows development both of which aren't really true for the alternative approach. Yeah that's an advantage. It's also a trade-off. Now maybe I'm weird but it's hard for me to see Swing as more portable than SWT for example just because what you mention. Probably the C++ mentality I inherited. &gt;Compiling to C is better because of Apple. They changed the underlying ISA 3 times since we started Codename One and have made numerous changes to the platform. To this day other VM's still don't support bitcode and the RoboVM guys describe it as the hardest thing they ever did but feel free to remain unconvinced. I'm unconvinced in the sense that it's irrelevant from my perspective as app developer. If it takes more resources to the provider to support new architectures I don't care as long as my app can run on it. As long as that happens my code is as portable. &gt; The fact is that we are physically more portable and on more devices despite having a MUCH smaller workforce than MS has assigned for Xamain/C#. Yeah Codename One supports one more target (JS) than Xamarin. &gt;Another fact is that you are arguing theory about a product you haven't used. I've used all of the above and even though I'm obviously biased I am informed... Well other than the difference in how the UI API works and the language used I don't see big differences from the point of view of the app developer for the portability aspect. Considering the fact that using the native UI widgets has its own advantages for mobile development I find the election between one or another to be a matter of taste (unlike let's say Ionic vs Xamarin/Codename One). &gt;Notice our product is open source and free for commercial use, we have a paid portion but you don't have to use it if you don't want to. Nobody stated otherwise. &gt;We don't have a marketing department so any "marketing speak" literally doesn't exist. You don't need a marketing department to do marketing.
&gt; (see Xamarin that bought and killed RoboVM because it became a competitor). Microsoft, it was Microsoft. Xamarin bought RoboVM half a year before being acquired by Microsoft, and Xamarin did *nothing* with it during that timespan. A few months after the acquisition Microsoft axed RoboVM. 
Xamarin and Microsoft negotiated at that time already.
I haven’t delved into Kotlin much, but from what I can tell it’s a very nice language. That being said, if you’re looking to increase your employment prospects, there’s very little reason to learn Kotlin. Plenty of reason to learn Java.
I was going to argue that they have a return type, then I looked at some byte code, and got egg on my face. ALOAD 0 NEW java/util/ArrayList DUP INVOKESPECIAL java/util/ArrayList.&lt;init&gt; ()V 
\*\*[cough](https://www.reddit.com/r/programming/comments/76ho2m/the_case_against_annotations_softwaremill_tech/)\*\*
IMHO there isn't a good reason besides shits and grins. It's just another meme language.
As you said portability is a tradeoff. Swing is inherently more portable than SWT and that is a well documented tradeoff. We made a similar tradeoff. In fact the tradeoff originates from smalltalk &amp; IBM where the original concepts of heavyweight vs. lightweight originate. If you come from C++ think of us as similar to QT whereas Xamarin is more like MFC. I'm not saying our approach is superiror in every regard, but it's objectively more portable. It's also more in line with "the Java way" whereas Xamarin is more in line with C# mentality. &gt; If it takes more resources to the provider to support new architectures I don't care as long as my app can run on it That's all good an well until your provider collapses due to maintenance costs and the open source project is worthless because no one can maintain it. Like it or not, sustainability matters. This is what ex-RoboVM users are finding out, bitcode support is really hard with their architecture. It's not a theoretical debate. &gt; Yeah Codename One supports one more target (JS) than Xamarin. ;-) Codename One runs on RIM, J2ME, Linux etc. We don't support them officially since there is no market value for that. 3rd parties have forked Codename One and it's installed in some luxury cars from Toyota and others. Notice that they never used our services to get Codename One running in their custom car VM... &gt; I don't see big differences from the point of view of the app developer for the portability aspect I disagree and I used both... &gt; Nobody stated otherwise. Here's the thing. You are arguing over our product which you haven't used as if we "made up" a claim in our website. You presented it in a way that reads as if we did something wrong. It might have been unintentional. I'm just clarifying that we are an open source project with a small ragtag team of hackers, we don't make up unverifiable claims of on our website. 
I see - I wish reddit would detect such duplicates...
Thank you for this. New and feel like i don't know much. 
&gt;... but it's objectively more portable. I disagree. As you say the discussion is really old. It never ended in a fact. I still remember when some Java developers said that Qt was not portable nor cross-platform because you had to compile the code for each platform (something about cross-compilable being different than portable or something like that). I will recognize that the discussion is still valid. &gt;That's all good an well until your provider collapses due to maintenance costs and the open source project is worthless because no one can maintain it. Like it or not, sustainability matters. This is what ex-RoboVM users are finding out, bitcode support is really hard with their architecture. It's not a theoretical debate. Fair enough. I will say though until that happens (Xamarin dying) I can't see why should I consider it more portable. &gt;Codename One runs on RIM, J2ME, Linux etc. We don't support them officially since there is no market value for that. 3rd parties have forked Codename One and it's installed in some luxury cars from Toyota and others. Notice that they never used our services to get Codename One running in their custom car VM... Great. &gt;I disagree and I used both... We will have to agree to disagree. &gt;Here's the thing. You are arguing over our product which you haven't used as if we "made up" a claim in our website. You presented it in a way that reads as if we did something wrong. It might have been unintentional. No. I claimed you (not the whole company/community behind it) made a bogus claim for marketing. That's pretty clear. Now I admit that from the debate it doesn't seem to be the case. I still disagree that not using native widgets implies that it is a "fact" it is more portable. Now if it really works easily on RIM, J2ME, etc. then that is another story. &gt;I'm just clarifying that we are an open source project with a small ragtag team of hackers, we don't make up unverifiable claims of on our website. I said and still maintain that being a small team doesn't mean or not having marketing people doesn't imply that the organization doesn't try to market its product.
no mkyong, my faith in humanity went up a little :)
&gt; Now maybe I'm weird but it's hard for me to see Swing as more &gt; portable than SWT for example just because what you mention. Swing is much more portable than SWT. James Gosling [ranted](http://www.techrepublic.com/article/james-gosling-q-a/) about it when asked about SWT. Swing does all of its rendering into a heavyweight component like a `java.awt.Window` (which makes Swing components lightweight). This means that between operating systems, you get the (more or less) the same and consistent behavior of all Swing components. Things like copy and paste, drag-and-drop, etc. The downside is that Swing apps don't feel native. SWT replicates the underlying platform behavior using native widgets, but different operating systems can have radically different semantics for UI operations. This leads to inconsistent behavior between platforms. On top of that, different platforms have platform specific bugs and issues, which require platform-specific knowledge to get correct behavior. SWT has only worked these out for the specific uses cases of Eclipse. All of these things make SWT *less* portable than Swing, but allows SWT to offer a more native experience, which requires much for fine tuning and testing than Swing.
Would lose a few of those and insert https://blog.codefx.org/ in their place.
I use it with eclipse, no problem. Not all the bells and whistles of intellij (they did invent kotlin) but certainly it is a usable state, not limbo. Even the debugger works with kotlin files in eclipse.
Certain parts of Kotlin drive me nuts, but I find it works better in different situations. Right now I'm working on an Intellij Idea plugin, it has been invaluable because of the `couldBeNull?.let { butItIsnt-&gt; ...}`, Plugin development requires some seriously ugly nested code and type casts, method extensions help, returning the entire method in a lambda etc.
I wonder how, the plugin isn't updated since March and has lots of crashes.
Agreed, CodeFX is among the top 2 or 3 Java blogs. If you use JetBrains IntelliJ, their blog contains good tech content and once a month posts a list of the best Java articles/blogs in the past month: https://blog.jetbrains.com/idea/ I find OP's inclusion Miles To Go a bit odd. It's principally a blog about creating and using containers. It's good for that, but no longer a Java blog.
dunno, I haven't challenged it very hard yet in eclipse, but fwiw I'm using ubuntu 16LTS, eclipse neon j2ee 4.6.3, openjdk 8, and just installed it from https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/last and did the usual eclipse restarts.
http://github.com/lithiumtech/flow has a component which manages configuration. I have been using it for last ~6 year and it has always been functionally rich in my experience so far. check out https://github.com/lithiumtech/flow/blob/master/src/main/java/com/lithium/flow/config/Config.java
See: https://www.mkyong.com/spring3/spring-value-default-value
The actual stable Eclipse release.
&gt; As you say the discussion is really old No, it did end with a commonly agreed fact. Lightweight UI's are more portable whereas heavyweight UI's map directly to the underlying platforms functionality with better fidelity. These are well understood and agreed tradeoffs within the industry. The argument wasn't on whether QT or Swing etc. were more portable. That's a fact. The argument was whether this portability is a worthwhile endeavor which is a matter of personal choice. I looked for some of the old articles but a lot of those got shuffled after the Sun/Oracle transition and Google just can't find them anymore if they are even available. The reason lightweight is FAR more portable is subtle but obvious once you try both. With heavyweight widgets you abstract an underlying native widget, this has several problems: - Lowest common denominator - it's really hard to expose platform specific features/behaviors - Leaky abstractions - this can become really hard especially with threads which can fail very painfully. Even subtle things like different orders for event delivery can result in painful user bugs - Hard to customize - e.g. overriding paint/event handling might behave differently across platforms All of these just don't happen in a lightweight framework. Events are normalized via a high level event dispatch thread that hides OS specific native UI threads. You can just paint over anything since everything is really just a painted component and you will get consistent behavior. Platform specific behaviors are just a matter of theme and can be simulated/abstracted in a more uniform way. Now there are drawbacks, this is FAR more work than building a simple heavyweight platform and far more maintenance. The results aren't as smooth in some cases and themes can suffer especially with complex device customization. But increased portability is pretty much a given fact. &gt; I still disagree that not using native widgets implies that it is a "fact" it is more portable. Now if it really works easily on RIM, J2ME, etc. then that is another story. You implied dishonest marketing and still are implying that despite having no real facts to back it up.
Can you post some evidence of this please?
[Spring Cloud Config](https://cloud.spring.io/spring-cloud-config/) is a plug-in for spring apps that gets config data from git repos. Useful if you use git to do deployment or if you have many microservices sharing config information.
&gt;No, it did end with a commonly agreed fact. No it didn't. The rest of the comment about that is the same discussion held at that time. It will be a waste of time to start that again. I will just state I disagree. &gt;You implied dishonest marketing and still are implying that despite having no real facts to back it up. No. Read again. I took back that statement about dishonest marketing in the previous comment. But I still maintain the reason why I took it back is because you presented great arguments, not because you guys are a small team. 
The only sensible way would be to base the years on 1900 and the months on zero like java.util.Date. So 18.3 is actually 118.2.
For someone not familiar with the Java community, why “no mkyong”? At least for some introductory materials like how to setup a pom.xml and stuff, it is somewhat decent. I am asking seriously. Just want to know why.
I though that the system will only read the first integer. But somehow can read through all of them.
sounds like you do not work with JNI and cross-plattform floating point calculations ;-)
Sure. Given a class A: public class A { public A() { } } We can compile it and then "disassemble" it with `javap -verbose`: -&gt; javap -verbose A Classfile /tmp/A.class Last modified Oct 17, 2017; size 180 bytes MD5 checksum c7df011af8504de68d4d9433c274719e Compiled from "A.java" public class A minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPER Constant pool: #1 = Methodref #3.#10 // java/lang/Object."&lt;init&gt;":()V #2 = Class #11 // A #3 = Class #12 // java/lang/Object #4 = Utf8 &lt;init&gt; #5 = Utf8 ()V #6 = Utf8 Code #7 = Utf8 LineNumberTable #8 = Utf8 SourceFile #9 = Utf8 A.java #10 = NameAndType #4:#5 // "&lt;init&gt;":()V #11 = Utf8 A #12 = Utf8 java/lang/Object { public A(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V 4: return LineNumberTable: line 2: 0 line 3: 4 } SourceFile: "A.java" The constructor implicitly calls `super()`, which calls the `Object` constructor, which you can see: 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V Where `#1` references the Methodref in the constant pool: #1 = Methodref #3.#10 // java/lang/Object."&lt;init&gt;":()V and is being called with `INVOKESPECIAL`. Looking at the [Wikipedia page](https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings) for JVM bytecode instructions, we can see that `INVOKESPECIAL` is &gt; invoke instance method on object objectref and puts the result on the stack (might be void); the method is identified by method reference index in constant pool (indexbyte1 &lt;&lt; 8 + indexbyte2) and, at least as far as I know, is only called for invoking class constructors. Further, we can just look at the JVM spec, specifically [§2.9.1](https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-2.html#jvms-2.9.1), which specifically says &gt; A class has zero or more instance initialization methods, each typically corresponding to a constructor written in the Java programming language. &gt; &gt; A method is an instance initialization method if all of the following are true: &gt; &gt; * It is defined in a class (not an interface). &gt; * It has the special name &lt;init&gt;. &gt; * It is void (§4.3.3). &gt; &gt; In a class, other methods named &lt;init&gt; are not instance initialization methods. In an interface, any method named &lt;init&gt; is not an instance initialization method. Such methods cannot be invoked by any Java Virtual Machine instruction (§4.4.2, §4.9.2) and are rejected by format checking (§4.6, §4.8). &gt; &gt; The declaration and use of an instance initialization method is constrained by the Java Virtual Machine. For the declaration, the method's access_flags item and code array are constrained (§4.6, §4.9.2). For a use, an instance initialization method may be invoked only by the invokespecial instruction on an uninitialized class instance (§4.10.1.9). &gt; &gt; Because the name &lt;init&gt; is not a valid identifier in the Java programming language, it cannot be used directly in a program written in the Java programming language. Note that `&lt;init&gt;` is **not** the same as the `&lt;clinit&gt;` listed in §2.9.2. `&lt;clinit&gt;` is the static initializer block in a class source file: static { // do whatever } that gets run once, when the JVM loads the class. Going back to that `class A` above, we can see that the constructor fills the requirements of §2.9.1. The method "prototype" shown by `javap -verbose` is public A(); descriptor: ()V flags: ACC_PUBLIC which shows that it's a `void` method, as required by §2.9.1, and is `public`. The `public` aspect is specified by the `ACC_PUBLIC` flag, which is specified in [§4.6](https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.6). The relevant section of §4.6: Flag name | Value | Interpretation ---------|-----|-------------- `ACC_PUBLIC` | 0x0001 | Declared `public`; may be accessed from outside its package. The access specifier isn't 100% relevant to this, but I thought I'd just include it for completeness. The `void` part can be shown by the `descriptor` in the method "disassembly": descriptor: ()V According to [§4.3.3](https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.3.3), &gt; A *method descriptor* contains zero or more *parameter descriptors*, representing the types of parameters that the method takes, and a *return descriptor*, representing the type of the value (if any) that the method returns. The return descriptor of our method is the part outside the listing of parameter descriptors inside the `()`, which in our case is just `V`. In order to fulfill the requirement of `&lt;init&gt;` being `void`, the `V` must represent `void`, as can be seen by [§4.3.3](https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.3.3), specifically in the [grammar definition](https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-VoidDescriptor) for `MethodDescriptor`. Finally, we can show this at the bytecode level again with `javap -verbose`. Let's alter `class A` to the following: public class A { public A() { } public static void main(String[] args) { new A(); } } When we disassemble this with `javap -verbose A`, we get the following: -&gt; javap -verbose A Classfile /tmp/A.class Last modified Oct 17, 2017; size 268 bytes MD5 checksum d6ef630fec0695e64e560b2edbf2ddc0 Compiled from "A.java" public class A minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPER Constant pool: #1 = Methodref #4.#13 // java/lang/Object."&lt;init&gt;":()V #2 = Class #14 // A #3 = Methodref #2.#13 // A."&lt;init&gt;":()V #4 = Class #15 // java/lang/Object #5 = Utf8 &lt;init&gt; #6 = Utf8 ()V #7 = Utf8 Code #8 = Utf8 LineNumberTable #9 = Utf8 main #10 = Utf8 ([Ljava/lang/String;)V #11 = Utf8 SourceFile #12 = Utf8 A.java #13 = NameAndType #5:#6 // "&lt;init&gt;":()V #14 = Utf8 A #15 = Utf8 java/lang/Object { public A(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V 4: return LineNumberTable: line 2: 0 line 3: 4 public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=1, args_size=1 0: new #2 // class A 3: dup 4: invokespecial #3 // Method "&lt;init&gt;":()V 7: pop 8: return LineNumberTable: line 6: 0 line 7: 8 } SourceFile: "A.java" Specifically, if we look at `public static void main(java.lang.String[]);`, we can see: Code: stack=2, locals=1, args_size=1 0: new #2 // class A 3: dup 4: invokespecial #3 // Method "&lt;init&gt;":()V 7: pop 8: return Most of this is just the typical bytecode instructions for instantiating a new class instance; we're mainly just interested in `4`. `4` is the `INVOKESPECIAL` instruction that was mentioned above, and we can specifically see: 4: invokespecial #3 // Method "&lt;init&gt;":()V that it says to `invoke` the `special` method that's referenced as `#3` in the constant pool. Checking the constant pool, we can see #3 = Methodref #2.#13 // A."&lt;init&gt;":()V `#3` is a `MethodRef` to the `&lt;init&gt;` method of `A`, which we can show by putting it together from the references. `#3` has been defined as `#2.#13`, and we can see that `#2` is a `Class` that references the UTF-8 string at `#14`, which is just `A` in this case. `#13` references the `NameAndType` composed of `#5` and `#6`, which we can see are #5 = Utf8 &lt;init&gt; #6 = Utf8 ()V Therefore, the method reference `#3` **must** be called with `INVOKESPECIAL`, as it fits all the requirements of [§2.9.1](https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-2.html#jvms-2.9.1) and thus must be a constructor. Apologies for any typos, but hopefully this answers your question. 
nope ;)
I think Eclipse Che could work? https://www.eclipse.org/che/
Mkyong is a relatively decent collection of basic howtos, but hardly a relevant blog ti keep you up to date with the latest from the Java ecosystem. It's something you keep stumbling upon when Googeling, not something you have on your weekly reading list. 
Regarding your work on SceneBuilder did you fork that or do your changes make it back into OpenJDK? It was unfortunate to see Microsoft buy RoboVM just so they could discontinue it. 
&gt; why “no mkyong” Just had a look at the site. Articles like [this](https://www.mkyong.com/java/java-how-to-print-a-pyramid/) and [this](http://www.mkyong.com/java8/java-8-how-to-format-localdatetime/) are of dubious merit. Oracle's own Java tutorials already cover beginner stuff like this, and in more detail.
I looked more into the sources you gave me. Under the definition of method: &gt; A method declares executable code that can be invoked, passing a fixed number of values as arguments. Under the definition of constructor: &gt; Constructors are invoked by class instance creation expressions (§15.9), by the conversions and concatenations caused by the string concatenation operator + (§15.18.1), and by explicit constructor invocations from other constructors (§8.8.7). Access to constructors is governed by access modifiers (§6.6), so it is possible to prevent class instantiation by declaring an inaccessible constructor (§8.8.10). This is what I'm referring to. If a Constructor can be invoked and is an executable by heirachy. Then what stops it from being a method? 
I don't recall having a good experience with Oxygen now that you mention it. For some reason getting plugins to work across eclipse releases has always been a real PITA.
Absolutely true, but it's probably worth attacking the issue on both fronts given that fibers would require VM-level changes.
it's not completly terrible but the guy wrote everything for pretty much ee5 some of it even ee4, it's horrifyingly out of date and shouldn't be considered best practice. even when it was up to date it wasn't really best practice. And the guy has absurd seo so he pops up when you google anything spitting terrible solutions.
Interesting, had no idea these existed. Usually I used the guava ones for extra functionality. But remember folks, unless you know for a fact that you need them (they're cool, no question about it, and fast according to the benchmarks), you don't need to bother. For your simple CRUD web application, you're fine with the standard ones or those provided by the ORM.
Ah the echo chamber. Seems like a list of all the narcissists and sociopaths that already spam their content here to maintain their 'web presence.' 
Baeldung is just a slightly more updated mkyong and it's on the list.
Thanks for the link. After reading the first 4 posts I'd argue to remove that whole top 10 list with codefx.org.
I'd say a bit more than slightly I guess if he leaves his articles stale for 5 years it'll be the same. More of a spring focus to his stuff too.
That guy has massive hands.
144 was not a planned release. It was put out specifically to fix a bug (or two) reported in 141. I would imagine their update tool just prompts you for planned released (the ones that come in increments of 10), but just a guess.
I've tried the Codenvy.io implementation of that, which was way beyond the scope of what I needed/understood, but thanks anyways for the recommendation!
Check out https://github.com/Netflix/archaius/wiki : it is used *extensively* at Netflix.
The blog doesn't seem to be frequently updated. 
Seems like it should be called an Executable Reference :-P
This was posted a while week ago. 
Hadn't looked at the XDG spec before. Makes sense but looking at my XFCE4/Debian machine looks like the XDG specification is hit or miss depending on the application. For example, XFCE4 appears to follow it, but X still has files like ~/.Xdefaults with many applications from mutt to openoffice to vnc doing the same.
Saved you stressing your ad-blockers: *Here is what Oracle has said is under consideration for the next and later versions of Java SE:* *The [Amber Project](http://openjdk.java.net/projects/amber/), which has been an incubator for smaller, productivity-oriented language features that include local-variable type inference, to decrease the ceremony associated writing Java code; enhanced enums, to improve expressiveness of the enum construct by allowing type variables in enums and performing sharper type-checking for enum constants; and lambda leftovers, to boost the usability of lambda and method references.* *[Project Panama](http://openjdk.java.net/projects/panama/), to interconnect JVM and native code, featuring native function calling from the JVM and native data access from the JVM.* *[Valhalla](http://openjdk.java.net/projects/valhalla/), an incubator project for advanced Java VM and language feature candidates including value types and generic specialization.* *[Project Loom](http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html), to reduce complexity in writing concurrent applications. The plan calls for adding alternative, user-mode thread implementations, delimited continuations, and other constructs involving call-stack manipulation. The main goal of this proposal is to offer an alternative implementation of threads, managed by schedulers written in Java. The Java programming model of ordinary Java threads would be preserved while performance is improved and the footprint reduced.* *With the new six-month release schedule, features that miss one release may be delayed as few as six months, when the next release comes out. Oracle has not committed to when any of the new proposed features will actually be made available in Java.*
We forked it into bitbucket: https://bitbucket.org/gluon-oss/scenebuilder as this makes it easier for others to create PRs. If you look at activity, you see there are a number of third party contributions already. While I really like OpenJDK, there is a higher barrier preventing users from submitting bugs and patches. In general though (including JavaFXPorts which forks OpenJFX and Gluon VM which uses OpenJDK) we contribute as much as we can back to OpenJDK/OpenJFX. The release cycles made it hard (e.g. only critical bugs could be backported to JavaFX 8 in OpenJFX) to push all changes back to the original repositories. With the new release cadence (6 months) I am optimistic we can improve this. In general, I hear your concern. We really want all our client work to be done in an open and transparant way. Our business model is mainly in the connection to Cloud/Backend, hence we have no problem at all in making client code as accessible as possible. Please let us know if you see areas where we should improve. 
In general the situation looks worse on the first glance than it actually is, because most application that support XDG don't move existing directories. They can safely be moved by hand. Regarding your specific cases: - You can use .Xresources and configure the path to when using xrdb: xrdb -load ... (or even better, move the settings in there to more appropriate places. I don't even have that file anymore.) - Mutt is fixed, you can move your files: https://dev.mutt.org/trac/ticket/3207
[Here, have an interview with the author](https://blog.jooq.org/2017/10/17/jooq-tuesdays-nicolai-parlog-talks-about-java-9/), and what's best, the interview is hosted on one of the mentioned top 10 blogs ;-)
And Xamarin bought RoboVM so it can pretend that it's negotiating with Oracle too and thus get a better price from Microsoft.
That's not even the newest version either lol. The newest Java 8 version is Java 8 Update 152, which is also listed on the Oracle downloads page. I don't know why they push out 151 instead of 152.
&gt; before other code can interfere with it I think that's not guaranteed.
For those of us who don't read byte code on a daily basis, we would appreciate an explanation :-)
Obviously wouldn't want to lose your blog :-)
What great resources do you like to check out regularly?
RoboVM has nothing to do with Oracle.
* 151 is CPU (critical patch update) and contains security fixes * 152 is PSU (patch set update) which contains all of 151 plus enhancements
I know. What I said is that Xamain made a "politically motivated purchase" to make it "seem" like they want to expand into the world of Java. They did this while negotiating with Microsoft so their guys could tell Microsoft: "Well if you don't buy us then Oracle or IBM might be interested...". It's hard to haggle a price when you have only one prospective buyer and RoboVM allowed them to pretend like they had other options (besides Microsoft or IPO).
There's definitely a self referential ring of Java bloggers. It's utterly tedious reading, especially Baeldung, but whether it's attributable to narcissism or psychosis I don't know.
Yea thats true. While that move was logical and beneficial in a economical viewpoint for Xamarin, as developers it sucks. Also Microsoft could have kept or sold RoboVM. Atleast keep it opensource.
&gt; Ah the echo chamber True. I wish these lists would find some blogs. &gt; Seems like a list of all the narcissists and sociopaths that already spam their content here to maintain their 'web presence.' Aww, too bad. You fell for the easy path of cynicism, rather than the constructive but admittedly harder path of creating your own valuable, sharable content. Here's a nice link for you: https://wordpress.com/start. Looking forward to your content soon! Cheers, The sociopath.
That's debatable too. RoboVM had a problematic unsustainable business model. So it probably wouldn't have survived much longer. Their main users were libGDX users who expect something to be free and in that arena they competed with some of the biggest game tools around which are free and have some amazing visual tools. That's why they changed the license, they needed people to start paying like they do for Xamain (this was done before the purchase by Microsoft). I'm guessing the last bunch of code wasn't released because it's either "tainted" or too costly to evaluate properly. Doing open source in a large organization like MS is really hard as there are so many nuances. Microsoft probably didn't want to expose themselves to liability with Oracle especially with the ongoing Google/Oracle trial. For a corporate exec even a risk of 0.1% is considered a risk when there is no benefit. Since the user base for RoboVM was so small they probably judged it as not worth any risk. 
TL;DW: https://www.thoughts-on-java.org/5-things-you-need-to-know-when-using-hibernate-with-mysql/
I think you made his point for him: the content here is "shareable content" Shareable content is either bland or original, and many authors just don't present thought provoking content or original arguments. This means a lot of what you see here is unoffensively bland. For instance, you have the junk marketing from JetBrains on here all the time (disclaimer: IntelliJ user here), and Baeldung is barely an embellishment on the javadoc. Jooq has the occasional gem (the recent post on replaceAll was great) but is often marketing, and then there are certain high exposure bloggers literally bike shedding over the new versioning scheme as if anyone actually cares. Bland. Bland. Bland. So unless this user is going to write informative, technically sound content, for a purpose other than marketing, I hope they stay well away from blogging! 
&gt; You fell for the easy path of cynicism, rather than the constructive but admittedly harder path of creating your own valuable, sharable content I'm going to try to remember this every time I fall into that trap. Your posts about java/JOOQ/whatever are not your only appreciated contribution here.
`NEW java/util/ArrayList` Calling this doesn't actually call the constructor it just allocates the object, You can do this with `sun.misc.Unsafe.allocateInstance(..)` `INVOKESPECIAL java/util/ArrayList.&lt;init&gt; ()V ` This calls the constructor the V is a Void Type
Its a strange top ten list to me. Don't get me wrong there are some good link on there. Why include stuff that focuses on little used niche libraries?
&gt; Jooq has the occasional gem (the recent post on replaceAll was great) but is often marketing I'm the author of that part, and I dare say, "often" is an exaggeration. [Here](https://blog.jooq.org/2017/01/12/a-probably-incomplete-comprehensive-guide-to-the-many-different-ways-to-join-tables-in-sql/) [are](https://blog.jooq.org/2017/01/12/a-probably-incomplete-comprehensive-guide-to-the-many-different-ways-to-join-tables-in-sql/) [some](https://blog.jooq.org/2015/01/06/how-to-emulate-the-median-aggregate-function-using-inverse-distribution-functions/) [recent](https://blog.jooq.org/2017/02/17/should-i-implement-the-arcane-iterator-remove-method-yes-you-probably-should/) [submissions](https://blog.jooq.org/2017/03/08/many-sql-performance-problems-stem-from-unnecessary-mandatory-work/) [to](https://blog.jooq.org/2017/03/16/faster-sql-through-occasionally-choosing-natural-keys-over-surrogate-keys/) [reddit's](https://blog.jooq.org/2017/03/17/a-nice-api-design-gem-strategy-pattern-with-lambdas/) [various](https://blog.jooq.org/2017/03/20/the-open-closed-principle-is-often-not-what-you-think-it-is/) [subreddits](https://blog.jooq.org/2017/09/28/10-cool-sql-optimisations-that-do-not-depend-on-the-cost-model/). The last one had immediate effect on the PostgreSQL database, generating some improvements. Granted, perhaps I hadn't written much Java related content recently that wasn't directly related to jOOQ. But then again, people in /r/java use jOOQ. Why wouldn't they want to read about jOOQ? Likewise, people in /r/java use Hibernate, why not read about it? And if other authors of libraries would write blog posts about their stuff (e.g. I really really wish Rafael Winterhalter, the author of ByteBuddy, would write a blog!) Would that be marketing? I don't know. Perhaps 10%-20%. But the rest would be really deep insight into byte code manipulation and that sort of funky low level stuff. &gt; literally bike shedding over the new versioning scheme as if anyone actually cares ;-) Indeed, bikeshedding unfortunately gets all the upvotes. My most upvoted submission to reddit is still [this](https://blog.jooq.org/2014/07/25/top-10-very-very-very-important-topics-to-discuss/). &gt; Bland. Bland. Bland. You posted 4 really good submissions. Keep doing that. That'll change this subreddit for the better. The bland stuff will still be posted, but if good stuff gets 200 upvotes, bland stuff will move to pages 2 or 3 very quickly. That's the only way to fix this problem.
I am pretty sure Baeldung is the one that was talking to himself on this reddit with multiple accounts about how great an article he was posted was. Then got caught and tried to delete the comments. He stopped posting here for a while but came back.
Baeldung is basically the McDonalds of blogs. I always groan when it matches a search result.
If it genuinely wasn't marketing I think you'd probably use a different URL, no? In any case, there's often something to be gained from reading your blog, and you don't post product updates here.
&gt; If it genuinely wasn't marketing I think you'd probably use a different URL, no? Seriously?? :) Yeah, perhaps I'll do some really well researched blog post that takes 8h off my otherwise billable work time on my future domain secretidentityblogger.com. Or perhaps, not. Btw, 3/4 of your submitted posts were written by a guy called Richard Startin. He seems to be doing an awful lot of self-marketing, given his domain. I start to like this guy. He writes good posts and builds a good brand. I'll look out for him in the future. Anyway... :)
Yea, but how are you handling the turbo encabulator and its side fumbling?
All targeted features will be listed on the Java 018.3 project page: http://openjdk.java.net/projects/jdk/18.3/
Former colleague. Regarding my own submissions I think it's rather damning of reddit to only give "Vectors and Values with Vladimir Ivanov and Ian Graves" 4 up votes. It was a *great* presentation.
Big advertisement for their own product, SGL...
I give you one more, even if it's too late :) Yeah, that's the problem when posting videos.
I downloaded an installer from the official website, and they gave me 151. I am not sure what's up with 152.
When you say nice libraries, I suppose you are not referring to Spring and Hibernate which have millions of users every day, right? 
You do realize that this Reddit post might have got the most upvotes in 2017 on /r/java? Now, if the list were so bad and the blogs were so off topic and not worth reading, then why didn't it get a -245 score?
&gt; CPU &gt; PSU Glad they chose three-letter-acronyms that weren't being used by anything in common or important in technology.
&gt; SourceClear requires browsers that support CSP headers and we cannot determine from your user agent that your browser is compliant. Out of an abundance of caution, you see this message instead. If you believe we should add your browser's user agent, please email us at support@sourcecleaer.com.
Not enough context provided. We've multiple, cause they do belong together. But I can imagine many cases where 1 per server is a good idea. 
Thanks for the explanation, SceneBuilder's status has confused me. I know Oracle stopped releases binaries for it, but I see the source code for it is still in the OpenJDK. So I was curious if that means Oracle has stopped all development on it or still doing development but just stopped releasing binaries? Then I wasn't sure the relationship between Gluon's fork of SceneBuilder and the one in OpenJDK. 
I find it depends on the security, hardware and vendor requirements. Different apps have different needs. We have vendors that require their app on their own server due to classpath conflcits, requirements for dedicated resources and need for single tennancy. For small in house apps well usually bundle on existing servers. There’s a trend towards adopting docker with single app per server.
If they work together, I don't see any problem. Or are related in some way.
As others have said, it really depends. If you are building for containers (like docker) it may be best to stick to 1:1 in most cases. Otherwise it varies widely depending on your need. 
Until you know you need multiple servers, use one. However, also know it's a single point of failure for more apps when you do that. 
I do. 
I do. Its better to use your resources to the max. 
Well, there are some points you may consider. 1) With one server, if you need to change VM arguments, update Java, change server parameters etc. Then you will need to stop the server and everything needs to shutdown. If you deploy one app per application server, then you just need to take down the one server and other apps have no downtime. 2) Memory, if there's accidental memory leak in one of your applications and you share the app server, then all apps on it are running out of memory. 3) Servers may crash due to other unpredictable situations randomly. There might be a bug in your op-system. There might be a bug in the jvm, there might be a bug in the application server. By having one server for all apps you basically put that all eggs in one basket. disclaimer: I have no real world ops experience, I just have taken a lot of application servers apart, because my job requires it.
Define "better". It's really your choice. No problem with housing multiple apps in an app server. I'd reckon start with one app server housing multiple apps and break apart as things progress and necessity dictates. What will dictate? whole range of reqs may influence this as mentioned in other responses.
So what you are saying is when you call the constructor, the constructor itself doesn't return something, its the init method?
[removed]
CSP exists to protect the user, not the server. It is used to allow a site to define whether the user can expect images and frames from other domains and such. This makes clickjacking, where a site is embedded and the user thinks he interacts with the real site, much harder.
A call to a constructor like this `List&lt;Object&gt; list = new ArrayList&lt;&gt;();` happens in 4 parts, it allocates the object, then it pushes a reference copy onto the stack, then the init method is called, then the copy is loaded into the variable from the stack
The concept of an application server was important when computers had much less memory. The idea back in the 00s was that if you wanted to launch 4 apps you needed to pay the price of 4 JVMs. The solution was to have a single application server (one JVM) and deploy all 4 applications there. However, as memory is now much cheaper this argument no longer holds. For management purposes, it is best if you have a one app per server approach. However, I think you are asking the wrong question. The correct question is if you need an application server at all? (See Spring boot, or use an embedded Jetty/Tomcat) 
Application servers are designed to support multiple applications, why would you need one instance per application? Sure, some specific cases you'd need a more sandboxed approach due to technical or security reasons but most application servers will let you do that through configuration too.
Is the new operator calling the init method? Basically I questioning is the init method called from the constructor, something else, or in this case is the init method one of the same with the Constructor?
**Sidebar** -&gt; #NO programming help, NO learning Java related questions! They have other subreddits that are linked in the *sidebar* as well.
We run a few different configurations. Sometimes we do multiple tomcat instances behind a single web server (whether apache or IIS). Those instances sometimes host a group of related apps or sometimes a single app. Our higher profile public facing apps are more likely to get a dedicated tomcat instance or even dedicated virtual server, while internal apps are often thrown all into one together. It's always a judgement based on platform and profile. For example we group Struts apps together so when there's a vulnerability with struts we can turn off one server for them all and not affect our non-struts apps. Because of our hosting contracts, doing a dedicated VM per app isn't cost effective, but if we were hosting everything ourselves I could definitely see a case being made for that kind of setup.
I'm certainly not leaving anything sit for 5 years :)
It is a little of column A and a little of column B, calling the constructor is like syntactic sugar for the multiple instructions. The bytecode verifier looks for the init instruction it will throw a verification error if you try to manipulate it before initialization. But some agent frameworks like JRebel, require the `-noverify` in order to get around that. So if I was building a compiler that outputs bytecode, I wouldn't have to use an init method, as long as the `-noverify` was on.
For some quick coding with colleagues/friends I use coderpad.io - By no means a full IDE, but can be a great tool to work on a concept together. 
From the Amber Project. JEP 286 Local-Variable Type Inference I am unclear on the advantage of this. var foo = new ArrayList&lt;String&gt;(); vs List&lt;String&gt; foo = new ArrayList&lt;&gt;(); Is it really so difficult to expressly state the type? Especially if I have to write the keyword "var"? Or am I missing something? It is still strongly typed. Only inferring the type. If I have to put "var", why not just copy/paste the real type and be explicit about it? 
Not a bit problem for simple classes like ArrayList, but wait until you encounter classes like [SimpleBeanFactoryAwareAspectInstanceFactory](https://docs.spring.io/spring/docs/2.5.x/javadoc-api/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.html). Your code will get verbose quick.
OS isn't realtime and running under a JVM is not deterministic anyway. So unless the devs are shitting bricks on the stack, you can have multiple apps per server. The only cases you NEED horizontal scaling is when you're physically bound by any kind of IO. Think cloud, Think "services".
What's worse is this: `var name = someMethod();`
You would want to have at least two servers for HA anyway which reduces significance of point 1 and 3. But management (i.e. monitoring of resources like CPU and memory) is easier with separate JVMs.
In the past we were deploying multiple apps in a cluster of Weblogics. Now, I never see this practice anymore. There is Docker, there are "clouds", there is Spring, there is RAM, there is CPU, so fat jars are usually the new trend. 
I got the same in the Android embedded webview that Reddit Is Fun uses. Ho hum. Guess I'll open it in chrome then.
And any decent coding standards will tell you not to do that. Some may allow it in cases where the function makes it clear what type to expect. Just because you can does not mean you should. Just like we don't use Optional everywhere. (It's worth pointing out, for people not following the proposal, that the proposal only applies to local variables. Not method parameters and not member variables)
Why did you delete your post this morning? I have some interesting suggestions for you.
What is the advantage of using this instead of GZipOutputStream? 
Commons compress supports multiple different compression formats such as bz2, lz4, lzma, etc... As well as archive formats such as tar and dump, which the default Java libraries do not support. Some applications can afford to trade compression with raw speed, which is where the other formats come into play. I'm not saying that GZIP is a poor format to use, but lz4's implementation(s) are all orders of a magnitude faster on Java compared to GZIP if I recall correctly. This is especially useful if you're writing something that needs to be be in a tar.gz or tar.bz2 or whatever compression+archive format you'd like.
This is 100% homework judging from you using BlueJ and starting in August with Java. Just come out and say it. Are the values of the alphabet letters always a=1, b=2, etc, or can the values for each letter change? If they do not change and are always hard coded as a=1, b=2, etc, then making a String called alphabet and finding indexes would make this problem really easy. String alphabet = "abcdefghijklmnopqrstuvwxyz"; After that, simply use the String class method indexOf to figure out the index location of a letter. Note: String indexes, like arrays start at zero. Example: System.out.print(alphabet.indexOf("a")); // would print 0 System.out.print(alphabet.indexOf("b")); // would print 1 System.out.print(alphabet.indexOf("c")); // would print 2 Finally, all you have to do now is run a for-loop through your input text. Let's say your input text is "hello", which should add up to 8+5+12+12+15 = 52. public static int alphabeticalValue(String word) { int result = 0; for(int i=0; i&lt;word.length(); i++) { result += _____________; } return result; } Fill in the blank and don't forget to add one if you want a=1 rather than a=0! Good luck!
Im a bit confused. When they say multiple apps on the same application server, are they talking about 4 seperate apps all running their own app server (websphere, EE, tomcat etc) and then all running on a cloud server or all 4 apps running on one instance of a tomcat container? I am assuming the first?
SGL is not a product, it is a domain specific language we designed, the reference specification and implementation will be open source and available at https://sgl.org in early 2018.
This should be fixed now, give it a try again. Sorry about it!
Thanks for the info. Haven't had a chance to look back into this yet but I think I might need to go into the x86 directory. I do remember just looking in the 64 bit directory the first time. I'll let you know what I find and if I fix it with your suggestions when I finish my loads (trucker). Side note... Since I am on Windows 10 should I, or can I for that matter, install both version as 64 bit? Thanks for the tips.
We have not learned for-loops yet so I do not follow that part...
&gt; all 4 apps running on one instance of a tomcat container 
It means the second. You deploy 4 war files on a single tomcat process. This is how you save memory. If you run 4 separate instances of an app server you will get 4 separate JVMs. It does not matter if the app server is the same version of something
Dumb question but how do you even configure this? Do you just load 4 jars onto the tomcat instance and then run them on different ports?
A for-loop is just like a while-loop, except it lets you have a variable defined during the loop for you. We can switch it to a while loop like this: public static int alphabeticalValue(String word) { int result = 0; int i = 0; while(i &lt; word.length()) { result += _____________; i++; } return result; } P.S. Btw you aren't supposed to use the Java subreddit for programming questions, this should go in /r/javahelp
Idk if everyone does this but at my work we have somewebsite.com/app1 somewebsite.com/app2 We only have shared environments for small apps relating to the same business area that are styled and branded similarly. 
Each application is packaged as a WAR file and deployed in the one tomcat's webapps subdirectory. Tomcat will explode each war file into a separate directory and provide a base context path of http(s)://hostname:port/warfilename. So if you had mywebapp.war and yourwebapp.war installed this way on your local server you could access them with http://localhost/mywebapp http://localhost/yourwebapp 
**Sidebar** **NO programming help, NO learning Java related questions!** Since this is help with **Java programming** it should be, as the *plenty hints* on the page indicate, posted in **/r/javahelp**. Please **read** and **follow** the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. We are not allowing plain "Do my homework questions". *You* need to show that you have spent effort in trying. As your post here stands, this is lacking. **Post removed** - Programming help
It depends on how your project does stuff. We deploy microservices as docker containers so it's pretty much impossible for us to have multiple distinct applications per app server. It's a really old fashioned way of doing thinks. I don't want to have to worry about where an application is running, my container orchestrator handles that for me. With these kinds of app servers you have to more or less manually figure out where multiple instances of the same application are going to land. If you need 6 instances of application A and only 2 instances of application B you have to sort of mix and match yourself which tomcat instances are going to get which .war files. So I agree with /u/kkapelon: multiple applications per app server only makes sense in the context of having very limited memory on your servers. 
&gt; jOOQ follows the principles that are also in my mind [...] There is one thing I already mentioned above: a library that provides a cross-dialect SQL abstraction is never finished and highly complex. Oh yes, that's absolutely correct. jOOQ will never be finished, and the complexity of ~10 years of abstracting over all SQL dialects clearly shows in the evolved design. I could have never come up with this design up front. But then again, why would a library of this scope want to be finished / feature complete? If you see the software not "just as a library", but as a software product, then it never finishes. Compare this to RDBMS which we're now both binding to. They've evolved over 40 years and were never "complete", even if they never left their original purpose (e.g. an RDBMS won't suddenly become an ERP). [Here's a fitting Dilbert, btw](http://dilbert.com/strip/2017-10-02) For the record, QueryDSL, a competing library, [has been announced "feature complete" more than 3.5 years ago](https://groups.google.com/d/msg/querydsl/fNFXliG8P-k/7dy2aAotVQ0J). That was precisely (and regrettably, in my opinion) when it started losing traction from what I can tell. It had a lot of potential, and it would be even less likely to ever finish (because it doesn't target SQL only), if the author hadn't decided so. &gt; Compared to that, the JDBC standard is relatively fix regarding the database basics. In my opinion, that's just because of the historic JCP's process and the lack of interest / investement by the stewards to add more features to JDBC. In fact, right now, [a new, asynchronous JDBC API is being discussed](http://mail.openjdk.java.net/pipermail/jdbc-spec-discuss/2017-October/thread.html) and it does address some of the annoyances the existing JDBC API has (which aren't related to (a)synchronicity). But not all things are addressed. Some things that should be in the "classic" JDBC include: - Stream support - A record type (ResultSet is such an awful, stateful API). I'd even be happy with fetching a List&lt;Object[]&gt; or Stream&lt;Object[]&gt; - More convenience API, e.g. no one cares about the PreparedStatement, usually. It would be super simple to add methods like `Connection.execute(String sql, Object... bindings)` - Formal support for named parameters - (Ghasp) annotation-based mapping ([which is going to be in the new API](http://mail.openjdk.java.net/pipermail/jdbc-spec-discuss/2017-October/000186.html)) - Asynchronicity (see above), perhaps even reactiveness - Much more So even JDBC isn't finished, although its design is much more narrow and specific, and rightly so, being mostly a network protocol abstraction API, not strictly a SQL API. (and it is an API, not an implementation) &gt; Do we really need complex database operations on the client side? Every library starts as "we don't need complexity", trying to keep it simple. And then, it is reminded of the above Dilbert strip. From my vast experience in doing precisely this kind of library (~10 years now), I can tell you. Your suggestion is not finished. Far from it :) &gt; My current prototype does contain ~500 LOC So did jOOQ 10 years ago!
That's certainly an interesting point of view...
I tried to find the answer to "Why not jOOQ?" but couldn't find it.
I need to see some benchmarks. I love benchmarks.
You can install all 4 if you want. But actually I would go with just Java 8 64-bit. As far as I know there's no Java 9 jre (for users) available yet on the Oracle downloag page. I would wait with Java 9 until the ecosystem stabilized around it.
&gt; coding standards They are like warnings. For the most part ignored. See the current craze around "Optional-everywhere". 
**Sidebar** **Do not post tutorials here! ** **Even worse:** the tutorial is for Java**Script**, not **Java**. **Java** and Java**Script** are two entirely different, unrelated languages. **Post removed**
Spring JDBC Template was a surprising find for me last year or so, because I could use it in a non-Spring web app. It was more-or-less what I was trying to implement myself, any more! jOOQ was a no-go because it's a commercial product with some free licenses for open-source products... 
Big fan of Spring Data JDBC myself. It's hard to beat the expressiveness of SQL and aside from querying the only thing you really need it mapping rows to objects (in most cases). 
Oops .
&gt; jOOQ was a no-go because it's a commercial product with some free licenses for open-source products... Why did that make it a no-go for you?
Uh, did you try restarting the program? Perhaps you ran the code you were working on and there was a memory issue (infinite loops, big data, etc...) and it didn't stop?
What version of Eclipse and which operating system.
All of the spring data projects are really cool. I'm a fan of Spring Data JPA. You can define simple queries using just a method name in an interface. More complicated can be done with an annotation. Need more? You can use the JPA API.
Personally not a fan of JPA. It's nice when your entities map 1:1 to tables but the moment you have stuff like compound keys and need to join tables I found it's much simpler to just write the SQL queries yourself. 
Try restarting eclipse, also try unplugging your mouse and keyboard and plugging them in. Sometimes the USB gets weird in Windows and reinserting the cords can fix it. Otherwise check if the intellisense/autocomplete has been modified in some way, it can cause a lot of problems if it's been screwed up.
You're not really giving us much to go on. What did you do before it started lagging? What version and plugins do you use? Have you tried restarting your computer?
Which JPA let's you do. If you want to write SQL, you can.
Since this is not directly Java related, it should go in the dedicated subreddit /r/eclipse. 
**Sidebar** **NO programming help, NO learning Java related questions!** /r/learnjava is the place to ask such questions.
I know. It's not just the queries. It's the whole mess of entity annotations you end up with. I personally prefer just doing it myself, in my experience I lose productivity when I use JPA. 
I'm of two minds about this myself, having been both a very happy jOOQ user, as well as a developer of a commercial product for developers - in terms of cost, buying the license can well be worth it, but it often doesn't feel that way (NIH? manager imagines the in-house team is better than the rest of the world combined? "cost" fails to account for learning curve time, and project will be short?). On the other hand, having seen the commercial provider for a library fall apart and the product abandoned, with a license that prohibits an external team from picking up the work and continuing to grow it, I do feel a stronger sense of risk in choosing a tool that requires a non-OSS license. If this disaster were to strike jOOQ, the migration process for the projects I've used it on would not be minor, and would cost several orders of magnitude more than the license itself.
I'd like to know why their Windows installer only updates the JRE and blithely ignores the JDK. Why not at least offer to update it?
No they are all available on the same port, all app servers and servlet containers let you deploy multiple applications in the same container. For example, in Tomcat just drop as many war files as you want in the "webapps" directory and they will deploy. * http://example.com:8080/myawesomeapp * http://example.com:8080/shittyappbobwrote * http://example.com:8080/etc Inside webapps you would have the wars (tomcat would create an exploded director for each one too): * myawesomeapp.war * shittyappbobwrote.war * etc.war 
&gt; The correct question is if you need an application server at all? (See Spring boot, or use an embedded Jetty/Tomcat) Just because the app server is embedded in your application doesn't mean you aren't using an app server. 
Thank you very much for your explanations. Really appreciated. &gt; NIH? manager imagines the in-house team is better than the rest of the world combined? "cost" fails to account for learning curve time, and project will be short? I can relate to this. Partially, because doing these infrastructure thingies can be fun, too. But I like to [quote Mark Benioff on this](https://i.imgur.com/bawSWuO.png): &gt; *"All companies benefit when they can afford to focus on innovation rather than infrastructure"* I hardly believe that a Java/SQL language binding API is anyone's innovation out there, otherwise they would compete with jOOQ, not build in-house frameworks. It's infrastructure for most companies. What appears to be saving a bit of learning curve for the in-house author will quickly become a liability for the team. I've seen my share. Maintenance is *much* more costly than any third party license and the tool chain does depend on that original author whose learning curve was lower (although I even doubt that...) &gt; On the other hand, having seen the commercial provider for a library fall apart and the product abandoned, with a license that prohibits an external team from picking up the work and continuing to grow it The commercial jOOQ license grants access to the source and the explicit right to modification ([§6.3](https://www.jooq.org/legal/170517_jOOQ_License_and_Support_Agreement.pdf)), with the limitation of not being able to distribute such modifications in source form. But these license clauses make jOOQ a de-facto in-house framework, which just happens to be maintained by a vendor who does just that, and which is used by a large community. Besides, again, those costs and risks also apply to any in-house framework and to some lesser extent to any 100% OSS-licensed work, should their maintainer decide to stop working on it.
It totally depends on your situation. I have some applications that have tomcat embedded into them, so that is of course single app per app server. On the other hand I also have several apps available to clients over the public internet. Setting up the public resolvable DNS names and the associated load balancing setup (site and server selection), and firewall holes for each application would be a nightmare. So we have all of our apps in a single tomcat instance. You should probably only group related apps in a single tomcat instance, like my tomcat servers are dedicated to my project. Services that are only consumed internally run as a fatjar with embedded tomcat.
All of your points are solved by having redundant servers with a load balancer that does health checks and can stop routing to a server if it stops responding.
Really miss this.When one is working with jboss/ embedded jetty, every app consumes one TCP port, that can change if others also deploy to the same machine (say, dev-server). With tomcat it is possible to run many versions of the same app (just upload the WAR). Very handy for demoing some quick, minor differences during development.
&gt; with the limitation of not being able to distribute such modifications in source form Unless that means "yes, you expressly can continue to distribute binaries" or something, I would to play devil's advocate and point out that if you (heaven forbid) were to stop releasing new jOOQ versions, anyone using it and happy with it would know that the end was near, and future projects they were involved with would not be able to take advantage of it. As such, since we developers always like the shiny new thing, it would be time _now_ to start replacing it and learning an effective tool to use instead. I don't even have simple arguments for these other points though - generally I'm in favor of both buying and selling purpose built tools like jOOQ. Most teams know they are not in the business of building their own operating system, language, IDE, source control, build tools, etc - why are software packages so different? I'm especially jaded right now though, watching a former employer implode and take product goodwill with them - every client I know is looking for a replacement, even though they have the rights to modify their own local copies.
JDBI.... The best thing would be to standardise JDBI and move it into the JavaEE standards. It just feels right.
&gt; As such, since we developers always like the shiny new thing, it would be time *now* to start replacing it and learning an effective tool to use instead. Fair enough. Except, what would you replace it with? And is using that other thing going to be less risky? I'd like to learn about it :) Also: What's the difference between a small vendor potentially stopping a product and a large one? E.g. say... Solaris? Is Solaris a safe bet today? Was it 10 years ago? At what price? &gt; why are software packages so different? I like to employ the hammer/nail analogy. Buying a hammer (OS, language, IDE, source control, build tools) and buying a nail (libraries) are different beasts. The nail is simply a bigger investment. This doesn't have anything to do with the pricing and/or licensing model, or the complexity of the nail as a product, but simply with the fact that the nail will stick around for 10 years and keeps together our own product for the time being, whereas the hammer can be replaced tomorrow with hardly any side effect... It's certainly good to make a well informed, cautious decision when investing in the supply chain. But again, this doesn't depend on the license model. There are many abandoned, yet complex Open Source systems out there. If unmaintained, it doesn't help that much if the occasional patch can be applied easily from a compliance perspective. &gt; every client I know is looking for a replacement, even though they have the rights to modify their own local copies I understand, that's frustrating. I suspect that the feeling of safety is valued higher by some people than the immediate value of being effective with a status quo. And sometimes, rightfully so. Well, it's a trade off. There's no simple answer. In any case, thank you very much for shedding some light on your stance. That has been very insightful.
http://www.oracle.com/technetwork/java/javase/downloads/index.html
Thanks, I realize I can download it there, what I'm asking is when it will be featured on Java.com.
What I'm asking is why does it matter? You can get it.
Let's just say that's a whole other discussion :). I just need to know, for reasons.
Been curious about this aswell.
There is a huge difference between a full blown application server and a lightweight servlet container. I know that several people use the term "application server" for both, but this is wrong. So, you are NOT using an application server, if you just have an embedded servlet container.
for varying definitions of "app server"
I would guess because of the new release cycle. Java 9 won't be supported for more than six months. The average user should probably stick to Java 8 until 18.9 is released.
&gt; jOOQ was a no-go because it's a commercial product with some free licenses for open-source products... jooq actually can be used in a commercial product with the apache 2 license, what's wrong with that? 
Fair enough
Anyone have the idea when java.com won't be looking like a fucking scam site? Just look at .net site, pull your shit together, Oracle.
Its clear from the context of the question that the OP was using "app server" in its generic sense to cover full app servers and servlet containers. Calling Tomcat a "servlet container" is itself a misnomer since servlet is only 1 of the 5 Java EE APIs that Tomcat implements. Using "app server" and "full app server" disambiguates your meaning pretty clearly if needed. In this case there was absolute no need to disambiguate between a full app server and so-called servlet container because the answer applies to both.
Presumably the answer is that management has to approve it and they don't like spending money.
&gt;Absolute times reflect release dates, so they make it clear to all involved -- both developers of the JDK and users of the JDK -- that these are time-based releases. There can be no question of delaying a release in order to add "just one more feature" to it. That's what this ridiculous nonsense is really about: internal Oracle politics, and making the community deal with the idiotic results. The rest is total BS, including the underlying desire for a fixed release schedule. Java 9 was delayed to hell and back, 'tis true, but it was delayed for a *reason.* Had it been released at the original deadline, it would have either been a disappointment (no Jigsaw) or a disaster (bad Jigsaw). By committing to a fixed release schedule, Oracle is committing to shipping said disappointments and disasters henceforth. Bad idea.
They're still going to wait for things to be truly ready until they ship them. It's just that if something is indeed ready, it will be included in the release.
Typing: var foo is a lot faster and easier than typing: List&lt;String&gt; foo and definitely easier and faster than typing: Map&lt;String, List&lt;Integer&gt;&gt; foo
Then we'll get disappointing non-feature releases, like 9 without Jigsaw.
Not necessarily. Take pattern matching for instance. They plan to implement a lot of cool stuff pattern matching, but it will take time. They will release the foundational features first, and add more as time goes on. I'd rather have that, than have to wait for it all.
Sorry if I posted to the wrong subreddit. I looked at all the Java subreddits and decided this one seems to be the best.
well before good pattern matching support they should probably do value types or deconstructor patterns before..
I'm not done with making all my projects Java 9 compatible. When will my end users start getting Java 9 updates? Do I need to work 24/7 or can I take it easy? The question matters very much to some.
Those Java rings look pretty neat to me!
They are working on both.
I agree! It's pretty amazing that these things were made almost 20 years ago, and they are still considered "pretty neat".
Essentially JVM is a translator. Imagine you have a great idea and you want to share it with the world. If you write it in English, people in China won't understand it. If you write it in Chinese, I sure will not understand it and neither the folks in middle east or India. What JVM does is understand your great idea and explain it to the Chinese in their native language, explain it to Indians in their native language. So you don't have to worry about your audience's native language. JVM is the same thing. You compile your code into something JVM understands, the JVM the tells windows, macs, mobile phones what you meant. You don't have to worry about the system in which your program will run. 
Thank you very much. This is very helpful.
What is the function of this stuff? I've never heard of them before.
Your java 8 application should work just fine on java 9.
I still have my Java Ring. It is the Java button mounted on a ring. It has a tiny microprocessor on it loaded with the java crypto stack. It's basically like the chips on modern credit/debit cards. Back in the day, I could use it to unlock my computer. Nowadays, you're likely to spot Java buttons in use in large corporate buildings. They're usually mounted on the end of a stick and a security guard places it into receptacles as he/she walks the beat. That momentary contact indicates to the system the guard has been by.
There was a big push back around 98 to get Java on all these small devices like smart cards. There was JavaME and I think JavaCard both of which were cut down versions of the full runtime. I don't know what happened to it all, I looked into JavaME briefly but it all went quiet so I gave up on it.
Not if you have been a bad boy and used internal APIs no longer accessible.
And not if you've been parsing the java version string, expecting it to retain the same format between versions.
Jesus Christ, just look at that `IMPORTANT INFORMATION REGARDING THE SECURITY OF JAVA SE` banner.
I remember GWT
Have you seen https://en.wikipedia.org/wiki/List_of_Java_virtual_machines? I'd probably say Jikes or Avian, but even they are large efforts. Building a JVM is not as hard as it may initially seem. Also, depending on what you want your tool to do, there may be other ways to extend the JVM (e.g. JVMTI) without needing to hack the JVM itself.
Then you deserve whatever is happening to you. No mercy.
Stuff in my apps got moved to Java EE. 
Great explanation! 
The idea behind the Java Card stuff was the cards themselves acted like Java objects. The card stored the object data and code of the class methods. None of that ever touched the memory of the host machine. The code on the host would interact with the card’s objects like they were normal Java objects. This physical encapsulation would let sensitive code and data run on an untrusted host without a chance of exfiltration. Data could also be signed with private keys that only exist on the cards and are never available to the host. In the simplest implementations they could just store encryption and signing keys like a YubiKey. The JavaRings could be used as hardware login tokens. 
Cool. Looks like a few of these things show up on EBay. Myself, I've got a plush Duke from those early days. 
The only browser that still supports it is IE.
What about all the Runescape players?
That actually sounds kinda cool
Java applets are deprecated. I don’t think any browsers even support applets anymore. Take a look into Java WebStart instead. It makes delivery and updates of Java desktop apps pretty seamless.
Worst part is, the game is almost done and works. Is the best option to have to completely remade in a non-shit language?
I have seen that wikipedia article, the list is just a little unruly. JVMTI is an interesting lead, I'll look into that!
I was there in 98, that was a great session.
Basically they were an idea for authentication in the physical world. The analog is your phone, we now use our phones to pay for shit and validate our existence. Java ring was gambling on ubiquitous computer interfaces everywhere in society with the idea being that people wouldn't have to carry around their own computer, they could use public computers and then use their 'id ring' to authenticate. 
Looks like a desktop app, not an applet. Maybe it was one historically.
What's the major difference there? And how hard is it to make one become the other so it has support nowadays?
It’s still used in a lot of SmartCard implementations and SIM cards. The rings weren’t popular (IME) since they were dependent on specialized hardware and support in OSes. SmartCards require less specialized hardware and software support is more widespread. One interesting (debatable I suppose) were the SunRays. They were networked graphical terminals that used JavaCard for authentication and session control. A user’s X11 session existed on the server and the terminals connected to existing sessions with a VNC-like system. So unlike a traditional X term when you removed your card to “log out” your session on the server remained. You could then move to another terminal, plug in your card, and it would reconnect to your session and you could continue what you were doing. The JavaCards stored the data needed to connect to the right user/session and encryption keys to authenticate and encrypt the connection. I never personally saw it deployed but I’ve heard from former Sun people it was a big thing internally for a while. It looked neat at the time and the SunRay terminals looked pretty cool. 
Applets run via a browser plugin, which are going away. A desktop app is largely the same codebase, but it has to be downloaded and run rather than served from a server. What you're offering right now seems like a perfectly legit way to do it.
oh serious. Well that's good. The only problem is at the moment in beta it isn't signed so Windows throws an error (because it's an exe). So I guess once it's done getting a cert and running it as is would work. I just wanted to make it easier for users by putting it in a browser.
Judging by the screenshots, it could just as well be written in JavaScript and run in the browser, maybe with server-side components for logic.
&gt; because it's an exe A java app could be run on other platforms, too, but not if you wrap it in an exe...
Don't compilers and interpreters fall within your analogy, too?
Yeah true. We just made it an exe during beta so it was easy for anyone to grab 1 icon and start playing.
Would it be a huge job to change it into JavaScript? And could this also eventually be made as an app?
Pattern matching and decomposition are language features. Scala already does both. Value types are actually needed, because that requires VM support.
To answer your question, I think they are pretty rare, but I don't think they are especially valuable.
Yes they are, but I thought we were talking about Java?
I worked at a company that was a Sun shop and we had some of those. Pretty cool technology.
The amount of work would depend how clean the architecture is right now -- is the core logic separate from the UI, so that it could be easily reused if switching the front to JS. If the web (JS) implementation would be properly designed, it would scale to mobile devices also, as an app or just as a web page.
Thanks for this. I'll check with the dev but as far as I can see file-wise it's pretty neat. It's on github but set to private so I can't show rn.
/r/sadcringe
Thanks. Doubt I'd want to sell this stuff anyway. Gives me lots of good memories. Particularly the JavaOne parties...at the Thirsty Bear, etc. Also, I bought a Sharp Zaurus from another JavaOne conference. That was quite the device, back in the day.
Agreed! HUGE crowd. Java was such a hot new thing back in those days!
Good description
+1
690 sold for $28.85 on [ebay](https://www.ebay.com/itm/JAVA-RING-RARE-Sun-Microsystems-JAVA-ONE-Promo-/300495374337) but the auction title says they are rare so there's that.
This analogy is super simplified. If I were to logically make this analogy fit compilers alos, compiler would be google translate doing literal translation. The following Chinese proverb "complies" into 三军可夺帅也，匹夫不可夺志也。-&gt; The armed forces can be handsome also, the husband can not wins Chi also. JVM would be a Chinese-American explaining what that means. 
Thanks. Guess I'll put them back in the box for another 20 years ;) Would have a hard time parting with them anyways. Lots of good memories playing around with these.
&gt; They're still going to wait for things to be truly ready until they ship them. Larger features can be postponed, but there is still possibility that it will ship with known bugs and issues (e.g. like every release of Ubuntu ;)
So, JVM would be more like an interpreter..? :)
the jvm is a compiler and interpreter, so that's good if they do
I downloaded Eclipse and accidentally downloaded Java 9. Eclipse will not start with the Java 9 jdk (as of a week ago at least). Usually a new version of the jdk doesn't make a difference, I feel like they may have done a shitty job this time around.
I don't see anything about that UI that says it's need to be more than a regular website. Just convert it to plain old html/css/javascript and run the backend on Java app server, then you have some chance people will actually try it out.
Yeah I have no idea how to do any of that. Is it a big/expensive job? 
I know that, I'm a Scala users, however for some projects Java would be a reasonable choice if it could provide a easier way to have ADT's/immutable types and maybe better support for Either, Optional (most stuff is way better with decomposition and pattern matching) and if implementing them in Java and actually implement them in a way that they perform better than they do in the compile to jvm languages, than i think it's a bonus for everybody
Yes, it can be quite big job, but definitely worth it if you want your game is played by anyone.
Back in 2007 Bournemouth university had these sun card terminals for software engineering student. I can confirm, it was pretty neat!!
What parts would you see as a standard? And how would you merge it, I'm assuming, with JPA?
I took an undergraduate course in Java programming in 98 or 99 and we had one lab where we had to write some code and run on a Java Button like the ones on those rings. It was a pretty terrible experience as I remember it. You could only use a tiny subset of the Java language and with very limited hardware. Writing in C or assembler would have been just as easy, given how primitive that subset of Java was, and allowed for better performance. But I guess it was fun you could put the button next to some sensor and have whatever happen on the computer screen.
We had SunRays at my uni in the mid-2000s, they worked well.
Possibly related is that debug builds of OpenJDK already have support for exact tracing of bytecodes executed using -XX:+TraceBytecodes, which I've used to write a simple flame graph visualizer for: http://cr.openjdk.java.net/~redestad/bytestacks/bytecode-startup-analysis.html 
(Member of the Hibernate Validator team here) I'm a bit surprised by your results. We made a lot of improvements in HV 6 and we should be far faster than HV 5 and Apache BVal (which, AFAICT, is what you observed previously). We just released HV 6.0.3.Final that should be a bit faster but most of the improvements were already present in 6.0.2.Final. Could you redo your test with 6.0.3.Final (and be sure it's the version used)? That being said, you might be in some corner case. Do you run you app with the security manager enabled by any chance? Do you think you would be able to share your benchmark privately with us (or an editorialized version of it still experiencing these issues) so that we could do some proper profiling and see how we could improve your situation? I don't think we will be able to help without being able to reproduce what you observe.
Firefox 52.x ESR still supports java applets, and a few lesser known webkit browsers do as well. 
No, not to merge it with JPA. Just provide another way of data access. A bit like JSP vs JSF - both are in the standards however one provides a component based architecture, the other provides request based. JDBI provides a RDBMS centric persistance, where JPA provides a ORM persistance. Both are good, but for different tasks.
There is a tool called [Java Packager](http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/self-contained-packaging.html) right in the JDK, which you can use to make installation packages for your Java app for all major desktop platforms. (You'd want to use JDK8 as JDK9 is not available for 32-bit Windows). Or see my curated list of alternative solutions [here](https://www.excelsior-usa.com/articles/best-jar-to-exe-conversion-tools-free-commercial.html).
No, applets are no longer supported and it's not user friendly to make them work. Someone posted this a while ago https://www.leaningtech.com/cheerpj/demos/ but it takes ages to load it (it has to download all the jars). Best would be to convert it to native html5 app (your dev can use something like GWT).
It's both. javac compiles source code into bytecode the jvm interprets. As the jvm is running, it notices what code is being used heavily and compiles it to machine code with something called a just-in-time compiler. as it notices code being used more, it compiles it with greater (but slower to produce) optimizations, while leaving less used or unused code at lower optimization levels or just straight out interpreted. A just-in-time (JIT) compiler provides benefits and drawbacks as compared to the ahead of time compilation for languages like C, C++, Rust, etc. JIT compilation makes your program spend CPU time doing compilation alongside it running, which can slow down your program somewhat, especially at startup. It also allows you to optimize and deoptimize code during runtime though, which means you can perform dangerous optimizations like erasing null checks, and if the erased null check leads to a segmentation fault, reversing the optimization and restarting the program without it.
Latest version of Eclipse has support for java 9. If it's not automatically detected try adding it from 'installed virtual machines' in options/preference s
*I* remember GWT!
I'm starting to doubt my methodology as well. Before I left office I did a quick test with 6.0.3.Final, that one looked better (took about twice as long as with validation off, that would be OK in my book). I suspect I screwed up somewhere when I took the timings. I use Spring Boot with Spring's support (i.e. LocalValidatorFactoryBean), and I verified that it doesn't create multiple factories. I also verified that validators are not instantiated more often than expected (because that was my first guess, that I screwed that up). We shipped the thing already, I'm not entirely sure I'll find the time to properly benchmark it, but I'll try. I guess the best approach would be to check out your performance test suite. Thanks for taking the time to respond, I really appreciate it, and I'm quite aware that this is way too superficial to do anything. 
Yeah there wasn't any getting to options/preferences. Tried to run it, get an error message that it can't find some class, wouldn't start. Uninstalled 9, installed 8, started up fine.
That’s a great link, thank you. 
Java applets are deprecated you don't want to use them anymore. You have a few options: * Deploy your application with Java Web Start. You will need a code signing cert for this and those can be pricey for individual developers. If you shop around you can get them for a couple of hundred bucks but the longest they are valid for is 3 yrs so it is on ongoing expense. If you go this route make sure to include a timestamp authority (jarsigner includes support for this) so the signature is still valid even after cert expiration. * Use [libGDX](https://libgdx.badlogicgames.com) which is a java gaming framework. It can create desktop, iOS, android, and browser versions of your app. For the browser version it uses GWT to compile your Java into javascript * Simply package your application up as a native application. Starting with java 8 the JDK includes a tool called [javapackager](https://docs.oracle.com/javase/9/tools/javapackager.htm#JSWOR719) that will create executables for windows, linux, and mac os. It also includes the runtime. If you use java 9 and wrote modularized code javapackager also uses jlink to only include the parts of the runtime your app actually needs.
Why do you think java is a shit language?
Umm .. well now you can try adding java 9 again i have jdk 8 and 9 installed. If you have an earlier version of Eclipse you can search the market place for java 9 support plug-in. 
Are you using v2 or the v3 beta? What about it "feels right?"
The discussion about the version number is masking the real problem: Doing time based releases every 6 months is a major change and requires a lot of flexibility from enterprises, known for being not so flexible. Especially when adding new language features, such as value types in 18.3, this will mean you have to upgrade every system (developer laptops, build systems, production servers) to 18.3 or else it just won't work. With Java 8 at least we had a good couple of years of stability and peace. Yes, the language was lagging behind, but how big of a nuisance was it really?
Honestly, I too have grown annoyed at their prices. It's not rock solid enough to be worth that kind of money. They do all this fuzzy math around "saving time", but honestly, if I had to tally all the JRebel bug time I've spent it would paint a different picture of the product. It's not like it's useless. And for some customers I'm sure $500 is worth it (like if you have a simple Java application(s) that you are constantly editing). But if you're like me and you work across a number of platforms and have a (probably too) complex project that you work on, it gets sketchy at that price. There's a VERY not zero cost to setting up JRebel and the last time I set it up I had crazy headaches getting some of the stuff to work properly.
My team found jrebel too buggy for day to day use (mostly websphere issues). We use the built in hotswapping. Works great.
The only alternative is HotswapAgent. It works okay-ish, but if you're using Spring-Cloud-Netflix, the REST clients it builds with Feign will make it so your application can't start as long as the Spring plugin is enabled.
My thoughts exactly. I'm in the exact same situation with multiple platforms and complex projectos. And being called by multiple sales people who are trying to haggle on price with me was... strange. I think you're right about them cutting that out though - this is the first year it didn't happen to me.
I think HotswapAgent is what I'm going to try for now. I'm not using Spring-Cloud-Netflix so I'm good there. Thanks.
It's not longer advisable to expect users to maintain their own JRE. 
I don't use anything special, but Idea will hot reload classes I edit as long as I dont change the method signature. Cost aside, does JRebel do much beyond what I'm getting for free? Thanks.
Yeah, it actually does a bit more than that. It handles method signature changes, detects Spring (and non-Spring) config changes and applies them, rewires Spring classes, handles new classes (and adds them to the Spring context if they're annotated). Changes are applied to the debugger instance so you can immediately debug the changes you've just made. It's actually useful, just not worth it for the price and hassle.
At work we use Spring / Hibernate and Tomcat and this week I was tasked with investigating cheaper alternatives to JRebel and ended up stumbling across DCEVM and HotswapAgent (at which point I was annoyed I'd never heard of them before...) It was fairly straightforward and apart from a few Spring things not working (changing annotated controller method signatures for example), it works fairly well, I'm able to get away without restarting the application most of the time. - http://dcevm.github.io/ - http://hotswapagent.org/ I'm not sure how this compares to JRebel as we've never had the budget for such software, but for free, I was very impressed.
Great, thanks. I had looked into those briefly but it seemed like a complicated solution and I couldn't find any reports of it working well. I'm going to try it out.
Thanks
5pm PT happens when this comment is 6 hours and 11 minutes old. You can find the live countdown here: https://countle.com/EXO86568u --- I'm a bot, if you want to send feedback, please comment below or send a PM.
DCEVM. 
To start, no one said value types will be in 18.3 — there is still a lot of work left to be done. And even now, many companies will take a while to upgrade to Java SE 9. That’s just the way it is. I have some friends that are still stuck on 6. So if they wait to upgrade, that is their choice.
We've used DCEVM for several years with great success.
Been using Jrebel in a JPA/JSF environment for about 4 years and I can't go without it. We didn't have a license for our intern this summer so we asked him to setup DCEVM(?) and there were so many pain points that we don't have in Jrebel. Worth it for us, but in an enterprise environment where as long as it's budgeted it's not a problem.
This is true, but I assume OP is hoping for wide availability, in which case it's still a non-starter, especially as we're talking about a future release. I think v52 last only through the first half of next year?
v2 ... i should go check out the beta. It feels right to me because * it leads to concise code * retrieves exactly the information required from the database * individual Database queries are not hidden (like JPA), but each query is shown as an extra line of java, too many lines are a red flag for refactoring into better queries, or change of database design. The last point is probably the most important... if you find lots of similar JDBI calls, questions can be asked if the database schema is actually right for what you want...and changes can be made which will reduce queries, and increase performance. This is not apparent in JPA as the magic just hides it all, and at some point database performance issues start to show up.
+ **No surveys, no job offers!** Such content will be removed without warning Also, **politeness** goes a long way. With the way your post is written, nobody will be willing to do anything. You are more **ordering**, **commanding** than asking nicely.
Sorry! Didn’t know!
**I too**, remember GWT
You realize that JRebel is free for personal use? It's called "My JRebel". You just need to like + share their page.
I literally had no idea. I probably saw the "My JRebel" section somewhere but never thought to investigate it. I'm going to give this a try. Thanks!
In the post, when you reconfigure things to go to Okta instead of Keycloak, does it still go via the latter? In other words, do you keep using Keycloak but it auto-refirects to Okta or does the Java app just do OIDC straight to the other provider? 
Why JHipster instead of Maven archetypes? 
Their marketing practices (which /u/RockMeetHardPlaces says that are no longer happening) is what automatically and completely blacklisted JRebel for me (and for any company that I work for). I don't care if your product lays a golden egg every day, I am not putting up with that shit. And I mention that to anyone that ever asks. And no, just because they seem to have stopped now doesn't mean they won't restart that shit in the future. Fuck JRebel, they should die in a fire.
Spring Security is the one that handles the redirect, so once you override the properties with environment variables, it redirects to the new provider. We decided it was easiest to leverage Spring Security so we don't have to code different behavior on the UI for the different IdPs and UI frameworks.
I've done a lot with Maven archetypes and my AppFuse project. Yeoman seems to work better, and we get waayyyy more contributions than I ever did with AppFuse. Seems easier to test too.
IntelliJ has nothing to do with it. The JVM itself can only hot swap when the method signature doesn't change.
I have been boycotting all of ZeroTurnaround's products because of the awful licensing terms of JRebel for many years. Most products still let you use them after the license period, you just stop getting support and upgrades. However, JRebel disables itself after the license period and that is pure evil. All you get for $500 is the ability to use the software for 1 year. 
Also spring has its own agent called spring loaded, but I've never used it. Problem with such tools is, that the reloading is not enough and you often need special handling (scripts) for various frameworks. Hotswapagent provides them, so imo best choice.
The value proposition of JRebel for me has always been the ease of setup and the fact that they maintain all their framework integrations. I've looked at alternatives, but never been particularly interested in the time investment it seems like it would take to get things just right with the specific frameworks and libraries I use. I see others on here have had technical issues with more complex projects, in which case I'd say the value prop would drop very low compared to the free alternatives. I agree the latest $500 increase is pushing it a bit price wise. It may still be justifiable, but starting to question it. Our app has always worked fine with JRebel and also has a fairly expensive startup, so still worth it for me.
The things JRebel does are too complex to really get an alternative going easily. Everything else will lack in features
Learn modern spring boot using the embedded tomcat runtime have built in support similar to JRebel?
Our company bought everyone on our project a license for it, so I gave it a go. Not for long though. The amount of time I found it saved me wasn't worth the issues I was having when it didn't quite work right. Now, we do a fair bit with AspectJ and proxies, which doesn't help. But in general, a kill/rebuild/restart of the app takes about a minute tops, and URL routing means I can do that, refresh the page and carry on from where I was. And I *know* that it's running the correct code in that case.
You configure Intellij to reload classes when you edit them. I'm not saying its adding new functionality to the JVM.
Azul Zing and Excelsior JET
It doesn't run in anything and is being blocked by most things. 
Thanks! This is really helpful, although I have a bit to learn now. 
Cool thanks for this. We'll look into it. 
Awesome thanks! 
Neither of those statements are true. Embedding Java in the browser has been deemed to not have been a good idea, so support for this deprecated feature of Java is being dropped. Support for flash is on its way of being dropped by most browsers too. Jave still runs just fine every place else.
&gt; but Idea will hot reload classes I edit as long as I dont change the method signature The correct statement would have been "but the JVM will hot reload classes I edit as long as I dont change the method signature". You don't have to configure IntelliJ at all to get this to happen, it is a feature of the JVM. 
Well ideally it will be browser based as people seem to not want to download games. I think something like converting to HTML5 or similar so that it can also run on macs and linux and iOS one day might be better?
"Oracle does not plan to migrate desktops from Java 8 to Java 9 through the auto update feature. Instead of relying on a pre-installed standalone JRE, we will begin encouraging application developers to deliver JREs with their applications. More details will be made available through early 2018." Source: http://www.oracle.com/technetwork/java/eol-135779.html So no auto upgrade is planned. Don't know if / when they'll put it up for manual download on Java.com
I remember doing a POC with springloaded to implement hot reloading java classes but I am not sure how it stacks up against jrebel. If it's just hot reload that's required, springloaded is worth a shot.
Their marketing is soooooo annoying too. I haven’t used JRebel in 2 years and I still get emails from their marketing dept.
Anyone, except those of us that don't run windows.
For now. It's packaged into an exe for ease. 
+1 for HotSwapAgent + DCEVM. It's been a life saver. As others have mentioned, the reloading of annotated spring controllers doesn't seem to work as expected but it's pretty easy to work around that, just put the request handlers' logic in a util class and reload that util class as required. I've been using it all day everyday (SpringMVC/Servlets) for about a year and a half, nothing but love for HotSwapAgent.
I felt pretty much the same way 3ish years ago. I had need of JRebel late last year so I got our company to get me a license. I haven't used it much recently though. Trying to decide if it's worth it to renew. And at $500, yea probably not.
They called me again as recently as three months ago, so unless they suddenly stopped _extremely_ recently I don't believe that.
I would use the word "obnoxious", not "annoying", to describe their salespeople. Never buying JRebel again.
I was at an interview and the interviewer was trying to drive home the importance of final, finally and finalize. And all I could think was it had to be poor poor design if you had to finalize everything, or you didn’t understand the JVM. I declined the job offer.
For Enterprise they have LTS releases which are part of the initial proposal. LTS releases will provide stability, peace, bugfixes and security updates.
One of my favorite notes on finalizers is from Google Java style guide. Tip: Don't do it. If you absolutely must, first read and understand Effective Java Item 7, "Avoid Finalizers," very carefully, and then don't do it. Even funnier when you consider Joshua Bloch almost certainly wrote the style guide in his tenure with Google.
In C# the finalizer is only used by classes that directly hold unmanaged resources (usually memory for C interopt). Is that the same in correctly written Java?
IIRC, a properly conforming jvm is allowed to never call any finalize methods. (it was either a jvm thing or an article on The Old New Thing) 
There's been this stupid list of canned interview questions floating around since java6 basically ripped from the certification test back then that people keep using, even ones who should know better. That's where that comes from.
Because apple decided iOS won't have a jvm. I suppose you could transpire it but that's stupid =/ nothing Java can do about it if you flat out activly don't want a jvm on your platform.
That is effectively true in .NET as well.
You're right! And confirmed where I heard that: &gt;&gt;A correctly-written program cannot assume that finalizers will ever run at any point prior to program termination. &gt;... the above result can be strengthened in the specific case of the .NET Framework: &gt;&gt;A correctly-written program cannot assume that finalizers will ever run. https://blogs.msdn.microsoft.com/oldnewthing/20100809-00/?p=13203
I imagine some of the use cases where people think they want `finalize()` could be achieved with `AutoCloseable` interface and try-with-resources.
So, put it in JDBC, then?
I've been using dcevm but didn't know about hotswapagent. Thanks for that. 
I'm one of the people who use `final` on every instance and local variable, where possible. I don't consider it to be of major importance, some consider it a nuisance, but it saved me from introducing quite a few minor bugs over the years. I consider `finally` to either be necessary or not. Since the introduction of try-with-resources I've only been using it for logging purposes and for ensuring proper state of GUI elements. But `finalize()` needs to go.
That's a problem with employers in general: They know *what* they need but rarely know *how* they need it. Relying on these things gives them a subjectively experienced sense of agency to overshadow their objectively experienced insecurity.
"To use NullAway, you must first add @Nullable annotations in your code wherever a field, method parameter, or return value may be null" K?
The only time I used finalize was when I made a class that allocated memory with the Unsafe class. I wish Java had native long indexed arrays. Thinking back on it, I could have just used an array of an arrays with a wrapper for long indexed arrays.
He's also working on Effective Java 3rd edition: https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997
I remember GWT
Knowing the difference between the three seems like pretty basic Java knowledge, so it's probably a good interview question to weed out the very inexperienced devs. `finally` can be pretty useful when dealing with all kinds locks. I only use `finalize()` in an attempt to clean up application state if the application closes unexpectedly (or uncleanly). It's unpredictable and unreliable, but it usually buys me enough time to write a log entry or to commit a final database transaction or something.
I don't recall having ever used finalize(), in 21 year of Java. Maybe possibly once dealing with unreachable CORBA endpoints?
It wouldn't be invalid to do that. As in, you might do it as a last ditch effort for program stability. But generally, it isn't required. You should never do it at the exclusion of something else, it is strictly done to let bad apps lurch on. (You should probably log errors if your finalizer ever does anything)
You should never make a finalizer on something that isn't closable. If your finalizer isn't freeing resources, it is wrong.
No simple stable/unstable attribute/tag? r/debian/comments/1e4li8/how_stable_is_debian_unstable/
Could be useful.
I'm sad that with the type inference Java proposal they still want to go with final var and not val or let. It clutters the code so much IMO.
&gt;I'm sad [Here's a picture/gif of a cat,](http://random.cat/i/Dvv5t.jpg) hopefully it'll cheer you up :). ___ I am a bot. use !unsubscribetosadcat for me to ignore you.
Pretty interesting
Looks cool 
May it rest in peace.
"var" is only going to be for local variables, and ever since Java 8 you don't need to make local variables final.
Cool, this could be useful.
You should really do your homework on your own... public static void main(String[] args) { int start = 10_000 * 100; // in cents System.out.println("start at $" + (start / 100d)); for (int i = 1; i &lt;= 15; i++) { int money = (int) (start * 1.025); System.out.println("after " + i + " year, have $" + (money / 100d) + ", increased by $" + ((money - start) / 100d)); start = money; } }
Cool. Since nobody has mentioned so far, this can be useful.
If you dont select this option classes are not reloaded.... https://imgur.com/a/q8Lgs
Move to Spring Boot, Dropwizard, SparkJava, etc. As soon as I told JRebel we're on Dropwizard 5 years ago, they put me on their no-call list and stopped calling. They know we'll never need them any more.
You should really refer to /r/javahelp ;)
Great article. We're using launch4j currently and will likely look into this as an alternative! Hopefully, someone will setup a gradle plugin for this soon! 
Looks interesting, could be pretty cool.
Pre-ordered mine a few weeks ago. I'm super excited to step my Java game up.
Cool, this has been some interesting and useful feedback. I was just expecting a random "Spring vs. JEE" argument. :) 
Those are automated emails, I think. Quite a usual marketing technique. Usually, there's a link to unsubscribe in the emails. You could just try that.
&gt; wasn't worth the issues I was having when it didn't quite work right. If in doubts, file the bug report. You are a customer - they should fix stuff if it doesn't work! 
Spring Boot comes with Devtools that will start a temporary classloader and load the application classes into that. Once any of those application classes is changed, Devtools drops the classloader and loads the application classes again, but doesn't have to restart the JVM process and don't have to load the dependencies. So it is faster this way. Works like a charm if appllication initialization phase is fast enough. In the [doc](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-devtools), check out the “Restart vs Reload” section: &gt; If you find that restarts aren’t quick enough for your applications, or you encounter classloading issues, you could consider reloading technologies such as JRebel from ZeroTurnaround. These work by rewriting classes as they are loaded to make them more amenable to reloading. Spring Loaded provides another option, however it doesn’t support as many frameworks and it isn’t commercially supported. 
The thing that can hot update classes is called HotSwap and is built into JVM. All the IDEs do is that they call 'redefine' command via debugger protocol when there's a new version of *.class file. So it is not a feature of an IDE. And yeah, it only can update individual statements. Nothing else.
I didnt say it was a feature of the IDE. But it is something you have to configure your IDE to actually do.
No software is rock solid, IMO. Unless it's a very simple function. If your project is a typical maven or gradle project, then the configuration file can be easily generated. Besides, in the IDE config you'd just click the checkbox for a project/module and that's it. But if your project structure is really complex, then indeed, it might be tricky to configure JRebel correctly. It usually comes down to mapping the locations in file system correctly with *rebel.xml* configuration file. Anyways - JRebel is a commercial product that comes with support. If there are issues with configuration, support team is for that - to help you out, even though there's a doc that most users don't read :)
Currently using UUIDs when exposing something publicly but def. planning to use this on a future project.
I prefer the good old fashioned Emacs vs vi flame wars from the slashdot era!
Nice article! This is definitely progress toward eliminating the Java dependency nightmare. I'm skeptical that Java could unseat go given it still doesn't compile to native. However this could definitely decrease the footprint of things deployed into Hadoop clusters which would be a big win.
Great for generating strings that someone needs to read over the phone. Just do your own char sets, o-O-0
**Never** give out complete solutions.
Since this is help with **Java programming** it should be, as the *plenty hints* on the page indicate, posted in **/r/javahelp**. Please **read** and **follow** the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. We are not allowing plain "Do my homework questions". *You* need to show that you have spent effort in trying. As your post here stands, this is lacking. **Post removed** - Programming help
**Sidebar** -&gt; **NO programming help, NO learning Java related questions!**
https://redd.it/77t08e
Okay so I decided to go a completely different way. Now I am running it on a virtual private server......got it all setup...not can't login to the panel...username and password won't work and can't figure out the right combo...yay me
Can you really call it a hash if it's reversible? I understand the usecase, but still...
For the first time ever I can now see some value in project jigsaw. I was never really clear on exactly what problem it was trying to solve...
Personally, I think the issue with Java's versioning stems from the fact that different groups prioritize different things from the "axes" discussed in the email. As Chief Architect, Reinhold wants the version to respect the platform's release cadence, which he manages and cares about. But I expect the vast majority of developers (and recruiters, lay-people, etc) prioritize Significance and Compatibility. Since Java has always had a good compatibility story (and I hope it continues to do so), the version should reflect the release's significance.
Isn't the biggest issue with finalization still that its implemention causes performance issues? Ideally it could be used when interacting with external services that need clean up, but your abstraction doesn't efficiently allow (Like the requirements of how or what you are interacting with changes, but you can't update all the uses of the class). I still wish more effort was given to make Object.finalize() usable, instead of just telling everyone its bad.
there's also openj9
I'm not really invested in the debate, but what is wrong with year.semver even as an 'unofficial' version if they have to, everyone can easily see the information they want.
Need is a big word, but if the method gets complex and some variable names start getting a little touchy then a few final keywords can save you a bug or two.
Hiring always seems hopelessly archaic to me, the first part of trying to get someone to employ you to write code involves trying to convince a completely non-technical HR person that you can write code. So far I have yet to pass the HR filter on any of my programming applications, despite having written code in Java and other languages for about 15 years. I just don't check any of the boxes they look for.
Microsoft Office or SQL Server have used the release year for a while. It worked well.
Microsoft uses the year in the product names/designations for those, but the version numbers are quite different. For example, SQL Server 2017 RTM is actually `14.0.1000.169`, SQL Server 2016 was `13.00.1601.5`, etc. The same is true with Office -- Office 2016 was `16.0.4229.1024`, Office 2013 was `15.0.4420.1017`, etc.
Even with Windows: Windows Vista was 6.0, Windows 7 was 6.1, Windows 8 was 6.2, Windows 8.1 was 6.3. Only Windows 10 made the Jump to 10.0
Honestly, I've never met anyone who had such a problem with Ubuntu. It sounds like a made up issue.
Can they just stop fucking around with things that are not broken? Java platform has issues that would be nice to solve, but versioning system is not one of them. Mark seems to be dead set on throwing compatibility out of the window, and guess what, that just means enterprise upgrade cycle will be 10 years instead of 5, because of all the additional hassle. 
Actually, breaking backwards compatability just a little bit could move Java forward so much faster. As long as the developers or architects are given enough arguments to drive a migration (then they will argue with the managers: "We need to because security etc."). Removing `_`as a valid variable name doesn't hurt anyone that much. I would go even further.
There is nothing about year.semver that indicates if a compatibility change was made. 
Getting rid of java.util.Date would break almost every piece of existing software I've worked on in Java... 
And it has been broken and deprecated since the beginning. Good riddance I’d say. With the JVM specific binary bits in Jar files, removing deprecated apis becomes feasible. 
... and `java.util.Date` is breaking so many more pieces of software we need to maintain or create in the future.
Sh... Why didn't it tell me it was a duplicate?
How so? If you're creating new stuff, just use Java 8's dates.
It would need at least a couple of cycles as `@Deprecated` followed by several more with `forRemoval=true` for very little payoff. Just setting `@Deprecated` would be enough to discourage its usage in new code. There are some things I'd like to break backwards compatibility for, but `java.util.Date` is not one. (`Collection.contains(Object)` for example)
It's not such a hassle anymore since it's easier to package the runtime with the application through docker or jlink.
If that is the case then libgdx sounds like your best option. It is well documented and has a fairly active sub-reddit (/r/libgdx) and has a tag on stack overflow.
It happens to the best ;) (probably a trailing slash)
&gt; SQL Server 2017 RTM is actually 14.0.1000.169 Great, let's put that number on CVs and third party version requirements.
This is extremely fascinating. Where can I find more information on the topic? Is this usually taught in an undergraduate compilers class?
I noticed afterwards there's a hash in the initial post
my tip would be to stop using hibernate
I had a personal JRebel license when it was $65. I had to move away when it got up over $250. This is surprising to me. I will look into this, but are there any missing / Pro only features? 
You'd change your mind once you start reading [High-Performance Java Persistence](https://vladmihalcea.com/books/high-performance-java-persistence/). Just check [the testimonials](https://vladmihalcea.com/books/high-performance-java-persistence/#testimonials).
Hibernate is a giant anti-pattern.
[Dzone Servery](https://blogs.oracle.com/theaquarium/dzone-survey-shows-jpa-dominates-java-persistence) give Hibernate a 63.9% market share. [ZeroTurnaround](https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-for-2014/10/) gives Hibernate a 67.5% market share. And that was before the [User Guide was rewritten from scratch](http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html). Taking into consideration that, by default, every Spring Boot application uses Hibernate too, no wander that Hibernate market share is even higher nowadays. Meanwhile, enjoy the [High-Performance Hibernate](https://vimeo.com/190275665) presentation from JavaZone. 
yes, as long as you do not actively develop a software and just keep it running. But when a team needs to maintain an older application, they want to migrate it at some point. Additionally for distributed systems the question of security is in the room. Not just of the JDK itselfe but of the framework / library they might be using. If the framework / library only supports a newer JDK version, it also forces the application to move up.
It often creeps in past the review or even if you find it, it was waisted time and forces a change. Also there are still many libraries and frameworks that see no incentive to update to the new LocalDate unfortunately. Java EE 8 or Junit 5 only just recently improved in that regard.
(Article author here.) It's not just the implementation of finalization that has issues, its the semantics. In general, a garbage collector needs to prove that an object is unreachable before freeing it. If the object is finalizable, though, it has to be put on a queue to await finalization instead of being freed immediately. The finalize() method, while convenient, allows the possibility of "resurrection" of the finalized object, meaning that it might still be reachable after the finalize() method returns. Thus, the GC has to prove that the object is unreachable *again* before it can free the object. This is why GC has to do more work, and finalizable objects tend to hang around for a lot longer than non-finalizable ones. This is inherent to the way finalization is defined. The [`Cleaner`](https://docs.oracle.com/javase/9/docs/api/java/lang/ref/Cleaner.html) API introduced in Java 9 is arguably harder to use than finalization, but it does separate the cleanup function from the object being cleaned up (the `Cleanable`), and it supports explicit cleanup, thus avoiding some of the issues with finalization.
It was once a popular notion that the Earth was flat.
That's why we need profs, and I have [more than 150](https://vladmihalcea.com/tutorials/hibernate/) articles to demonstrate that you can run your Hibernate-based data access layer at warp speed. Do you have anything to prove the contrary? 
Or at least stop posting this dross.
Cool. I have adapted the demo from codepen into sequential https://sequential.js.org/live.html#DYewhgJgFA5AFgFwQBwM4C4D0mDGEB2AdAE5gDuA5gJYKE4gC2mcYqcVEqzr7nh1COAFcARoSohMDVggCmxTMlHAqOTACsuKkdzYdUhBlSKaYASgDcAKABuYYgAIWezg4C8D-LLIOAEj30oACJBKlQHMIcGAE8HVDBgBCCAGgcADlSgsBE8WQAzCnZ1AGtgBnwQZABHYlQEIRsyAA9ogC8AQQAhAGEAEQBRADEAcV8ASQApAGkAGQBZADkAeQAFAEUAJQBlABUAVQA1AHUADQBNAC0ARgAmAGYAFgBWADYAdjSATgAGIMtbewRCDuJwBPiyfD0CCyKBXVI3VJ3f70fCoEDAWSEUAUKAcf5AA 
and mysql
Ah warp speed I see. Warp speed that is always guaranteed to be slower than using prepared statements. 
Shouldn't this sort of self promotion be blocked, the comments read like an example of how to get back links to your blog.
gah I was so excited for Java 8 and was very happy to start embracing it. I couldn't feel more opposite about Java 9
How would I make a point without providing any link? And if you check them, you'll see that they are referring to Hibernate docs, a conference Vimeo, Java blog or ZT web site as well. 
Posting links to your own blog where you are trying to sell your own book don't seem right to me.
Just that, unlike JDBC alone, Hibernate uses PreparedStatements exclusively and can apply automatic JDBC batching with one config line. As a data access framework developer, I find it amusing when I hear people pointing out to JDBC alone as dealing with Driver-specofic bugs is a recurring theme. Not to mention 1-based indexing, no named parameters or the verbose API. If you are at it, you can even use Assembly, right? Why use Java or C? Assembly would be faster. It's the same line of argument.
When you say MySQL, you mean like Facebook, Twitter, Instagram, and 25% of all Internet web sites, right?
&gt; I find it amusing when I hear people pointing out to JDBC alone as dealing with Driver-specofic bugs is a recurring theme. No idea what you are trying to say here. &gt; Not to mention 1-based indexing, no named parameters or the verbose API. If you are at it, you can even use Assembly, right? Personally we using springs named parameter template, its great. &gt; Why use Java or C? Assembly would be faster. It's the same line of argument. Its not.
&gt; Are the official Oracle tutorials my best bet? I'm not sure about that, but they're still good enough. I've learned JavaFX exclusively through studying the official docs and doing my own experiments. SceneBuilder is also very useful for getting used to FXML. Configure a UI and then read the code it produces, and vice-versa.
Lighten up. 
Fixed it. Much better, right?
I completely agree but also there's an echo chamber here. When they aren't spamming their own blogs they're posting one another's, like a circle jerk.
[serious] Aside from supporting legacy applications, why would you want to run an application server on top of a container?
You seem like some sort of marketing AI.
If you are developing an ee service you can quickly set up many configurations and switch between them. You can even expose some of the debug and management ports and do things like hot deploy code, debugging etc. 
Tim buchalkas course on udemy has a decent section on javafx and it involves working with scene builder to an extent. You usually can find the course on sale. 
Kotlin is Java 9 for me.
&gt; Run maven &gt; Deal with modules dependecies What the hell. Maven was built to avoid that. 
tbh on any real project you can't rely on some digits for that information, you have to review the changes thoroughly. that said new scheme is very ... end user retail product-y, which is weird for software development tools.
the text after that link is also somewhat wtf level. 
Container ecosystems are much more developed these days - taking advantage of Kubernetes to guarantee a certain number of replicas, for example.
Why Artificial?
&gt; No idea what you are trying to say here. Handling Blobs, stored procedures, returning generated keys, mixing optimistic locking with batching, handling mixing and literals, registering custom types. You get all that for free when using Hibernate or jOOQ. Using plain JDBC, you are just about to find out sooner or later what I'm talking about. There are many JDBC Driver hacks done in data access frameworks to cope with this kind of issues. &gt; There are many reasons to use hibernate, better performance is definitely not one of them That's just an urban myth. There's nothing in Hibernate to prevent you run as fast as JDBC. As long as the generated SQL is the same, you log every SQL query, do the right mapping ad fetch just as much data as you need, it's the same thing. However, dealing with automatic batching, optimistic locking, pessimistic locking, pagination, off-loading the Master node with strong consistent 2nd level caching, materializing MVCC based anomalies (read/write skew) using a parent entity is not that easy with JDBC. With Hibernate, having all that is just a walk in the park. 
I maintain a service for a client. They install it. For me, switching to docker would drastically reduce the complexity in installing updates.
&gt; you are just about to find out sooner or later what I'm talking about. Patronising as well, great. &gt; There's nothing in Hibernate to prevent you run as fast as JDBC. Damned by faint praise. &gt; However, dealing with automatic batching, optimistic locking, pessimistic locking, pagination, off-loading the Master node with strong consistent 2nd level caching, materializing MVCC based anomalies (read/write skew) using a parent entity is not that easy with JDBC. With Hibernate, having all that is just a walk in the park. Right, I will look at just one of these becuase I have no time to argue this, pagination ... wtf are you talking about ? I can just supply an offset and limit to postgres as query parameters.
&gt; Patronising as well, great. Not at all. Patronizing would be to say that you can just use JDBC Prepared Statements instead of jOOQ and Hibernate to the developers of these frameworks. &gt; Damned by faint praise. Now really, do you have some valid reason to think that you can't write high-performance data access with Hibernate, or is just a feeling? Last week, at Voxxed Days Belgrade, I was talking to a PayPal developer and he told me they were using Hibernate for many of their internal applications. &gt; I can just supply an offset and limit to postgres as query parameters. What if you also need to support Oracle 11 and SQL Server as well? There are many CRM, ERP products that don't rely on PostgreSQL on the client side. While end-user applications have a predefined RDBMS, there is also software written to become an end-user application through configuration, not rewriting the whole data access layer.
I think best resource is "JavaFX 9 by Example" book by mostly the pioneers of the JavaFX. It covers almost anything you would want from a JavaFX resource.
Reddit is a vote-based system. If an article or a blogger is bad, it will get downvoted. However, many of the articles or bloggers which you are not personally interested in reading, are still worth reading by the vast majority of the /r/java community. 
Thanks for informing there are other databases than postgres. I'd manage the different queries, the same way I'd manage the hibernate dialect setting.
Is there a data access framework whose only goal is performance? In the end, it boils down to the SQL you execute. Hibernate offers mostly write-based optimizations. For reading data, just run the native SQL query. It will work the same in Hibernate or JDBC. 
agree. doing it once in a while would be ok IMHO, but really these links to that hibernete book seem far too many in this reddit channel 
I disagree on Date and honestly i am amazed by the hate it gets. Sure, it has a bad API and that's why Jodatime and java8 datetime were created, but these guys are just wrappers around Date, after all. There are many libraries out there using exclusively Date in a proper manner: Json or JPA converters, validators, JWT generators... 
Right, but each article has a comment section too. In the comments I am free to agree with other users that I think your content should be banned and that I'm bored of seeing you post it. Maybe wait for someone to think "wow, that's a Reddit worthy article, I think I'll share that."
I really don't understand all those articles. Spring Boot will have Java 9 support out-of-the box starting from version 2.0. Which will be released relatively soon.
Or, you can even ban everyone who posts regularly on /r/java. This way, /r/java will get 4 articles in 3 months, which is exactly what you have provided to this community so far.
Links to my book are the exception to the rule. Most often, I link back to some relevant article on my blog which emphasizes something I'm writing. 
I'm not suggesting every should be banned. I'm simply suggesting your URL should be blacklisted as spam. You would be free to share blogs you find interesting here.
But then, looking at [Reddit statistics](https://www.reddit.com/r/java/search?q=site%3Avladmihalcea.com&amp;sort=top), how do you explain that my blog posts are doing so well? 
Having read a few of your articles, I honestly couldn't say. Do you have a big family?
Yes, I have a huge family. [9,007,346 family members to be precise](https://www.google.ro/search?q=how+many+java+developers+in+the+world&amp;spell=1&amp;sa=X&amp;ved=0ahUKEwi3pPbdn4bXAhUJmrQKHSb6AW0QvwUIJCgA&amp;biw=1536&amp;bih=759). Our surname is Java.
Nice. Not going to convince me that this isn't spam, nor that I shouldn't be able to agree with others about it being spam, so I'll let you conclude on that.
Fair enough. Let's agree to disagree on this one.
That's where you make an error. I bumped to Spring Boot 2 and it still doesn't work because of all those nasty dependencies. My point was to show migrating to Java 9 is not as easy as bumping the Spring Boot version.
This has moved to http://richardstartin.uk/still-true-in-java-9-handwritten-hash-codes-are-faster/ 
This has moved to http://richardstartin.uk/new-methods-in-java-9-math-fma-and-arrays-mismatch/
This has moved to http://richardstartin.uk/how-much-algebra-does-c2-know-part-2-distributivity/
This has moved to http://richardstartin.uk/the-cost-of-modern-code/
I personally love Bucky Roberts and thenewbostons video tutorials. He's got a bunch of videos for a bunch of different languages, and here's a link to the javaFx tutorial series: https://youtu.be/FLkOX4Eez6o
Maybe if Oracle did their own version of maven they'd be able to control that better. Boy Java would be dead if it wasn't for maven but I think it's time we take a step up. Knowing Oracle they might sue Maven instead just because of this comment. Oracle is making Java crumble. If we were just doing enough to support some of the good stuff projects like es6 are coming up with then I'd be super proud, They did that in Java 8 that was the best release we had since java 5. And boy java 5 was a long time ago.
Ending transactions counts as a performance tip? Really ? It's like not closing jdbc ResultSet, you'll know well the first time you did it that you fucked up. 
You'd be surprised how many tests are written like that and work just fine on Oracle, PostgreSQL or H2. However, they happen to run slower. High-Performance is not limited to production only, integration tests should run at warp speed too.
What exactly is it you're trying to point out?
I would say that if you have tests written like tgat then it's not performance that's the issue. In the spirit of this advice we could write not having String x = new String(x + y) inside a loop. It's a bad performance code, but having it in your codebase means somebody is missing some basic java knowledge. 
**Sidebar** **NO programming help, NO learning Java related questions!** Questions regarding the former should be posted in **/r/javahelp**; questions regarding the latter should be posted in **/r/learnjava**. **Post removed**
In the Hibernate ORM code base, we used to have a Transcational Template who, in the catch block, used `RuntimeException` instead of `Throwable`. [This article](https://vladmihalcea.com/2016/02/18/mysql-metadata-locking-and-database-transaction-ending/) explains exactly what happened and why the issue was replicating on MySQL while working just fine on other RDBMS. Now, just ask yourself. On your team, does anyone acknowledge this issue and automatically write the catch block for `Throwable`, even breaking Sonar warnings, instead of catching `RuntimeException`? If the answer is yes, then you are a very lucky software developer. 
why does hotswapagent.org say "Save&amp;Reload during development should be standard and many other languages (including C#) contain this feature." When .net does not support hot reload: https://stackoverflow.com/questions/27718015/hot-swapping-code-like-java-in-c-sharp 
The project I worked with Date was probably source of bugs number 2 after NPE. Especially inproper use of different libraries and the application. Also flaky tests errors: *On a Mac with Localization en_GB at midnight every 4 years.*
I think the whole aim is to better use free resources. 
Yeah, I consider myself lucky that my colleagues prefer to write assertions outside of the transactions.
The default GC changed in Java 9. For small heaps, try to switch back to the old GC (probably `-XX:+UseParallelOldGC`) or play with other GCs.
This is likely due to the use of G1 instead of Parallel as default GC. While G1 has been greatly improved in 9 to use less resources by default, it's not uncommon it allocates a few 10s of Mb more than ParallelGC for the same workload. If you're very constrained for memory you should likely explicitly specify -XX:+UseParallelGC (or even -XX:+UseSerialGC). Other features, like the segmented code cache, can also lead to a quicker perceived growth in resident memory use simply due to allocating code cache at split locations (depending on if the system uses huge pages or not).
Are you sure there is no Spring test in your project annotated with `@Transactional`? If that's true, the assert will be executed inside a transactional context.
perfect summary. I used it on a new project recently and am really digging it
I'm pointing out that Java9 memory consumption makes it less and less suitable for end user desktop applications. And looking for some thoughtful comments on this situation, probably personal experiences on fighting memory issues on desktop, some insight on why that happened or just something useful for me or everyone else :-) 
added some numbers for serial gc
 GUYS I RAN THE MICROEST OF BENCHMARKS AND ITS SETTLED, ITS NOT LOOKING GOOD.
just because a GC has grabbed say 200M it doesn't mean its actually using it all, it can be better to grab few large chunks rather than lots of small chunks from whichever OS you are using.
Interesting. A before and after using NMT summary could shed some light on things: `-XX:NativeMemoryTracking=summary -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics` If it's the segmented code cache (my second guess), then `-XX:-SegmentedCodeCache` could shave off a few more Mbs.
&gt; I guess they just don't care about end-user GUI in Java. &gt; looking for some thoughtful comments on this situation I don't think you're going to get any thoughtful comments by posting a non-representative microbenchmark and then making a mean comment accusing people of not caring.
&gt; Sure, it has a bad API and that's why Jodatime and java8 datetime were created, but these guys are just wrappers around Date, after all. They aren't wrappers around Date. For example, `java.time.LocalDate` internally keeps its value in three fields: year, month, and day of month. `java.util.Date` keeps its value in one field: milliseconds since the epoch. The latter is fundamentally incapable of representing a calendar date; a time zone is required to convert epoch millis to a date (and at that point the "date" is over-specified, with a time zone and time of day that must be ignored/discarded). So it's not that the API is lacking, it's just totally conceptually wrong.
There are no memory issues to "fight" because this is a non-issue. Java 9 uses a new GC strategy; that's where the difference in memory usage is coming from. If (for whatever and however tragic reasons) 160 megabytes are a serious problem to your users, experiment with different GC settings.
I would like to a comparison with an Electron app...those things are dogs.
How exactly do you do your measurements?
If you feel that Java9 is less suitable for desktop applications, what do you feel is a better alternative?
I don't think it's conceptually wrong. You said it right, it is internally linked to Epoch time or Unix time, which is basically making it an objective measure of time. Because it is objective, it has a great application in testing software. Again yes, the problem is its API, I also said it. Part of which is deprecated, which allowed to extract day, month, time of the day, etc... and that's why people started using it wrong and hated it, especially because it doesn't help with summer time and timezone management.
Uff, luckily spring-test catches throwables and ends transactions properly. Lucky me, looks like people working on (one of ?) the biggest Java framework know what they are doing.
I like Spring too. It's a very good framework. However, occasionally, every library has issues. For instance, [Spring Boot enables Open Session in View by default](https://github.com/spring-projects/spring-boot/issues/7107). Now, since Spring is one of the biggest Java framework and the developers always know what they are doing, it means you can trust that having OSIV enabled by default is the best choice, right? What if [it's not](https://vladmihalcea.com/2016/05/30/the-open-session-in-view-anti-pattern/)?
How could you bump to Spring Boot 2.0 if it's not released yet? If you ran into the issue with 2.0.whatever-milestone+java9 did you check issue tracker? Is it known bug? If not did you report?
What do you consider representative benchmark for minimal memory usage?
Steam client uses 160 megabytes for example. Memory is precious resource on desktop, especially on older PCs. Weren't we all spending time trying to free some RAM to make OS go faster? :-)
htop -&gt; "RES" column.
Ha, just mentioned Steam above. AFAIK it uses Electron, takes about 160Mb.
Meanwhile you can just use the Exec task: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html 
I'll comment on that once you stop pushing your blog links to prove your point, cause I'm starting to have enough being part of your SEO campaign. So far the issues you presented seem to stem from your own improper pattern usage.
I'm not sure where to pick up good info on JITC compilers, I learned what i've learned from experience and discussion. Here's a little article about the jvm's jitc: https://dzone.com/articles/java-on-steroids-5-super-useful-jit-optimization-t
http://www.adam-bien.com/roller/abien/entry/java_ee_7_thin_wars
Are the Spring Boot GitHub issue and the StackOverflow question part of some SEO campaign of mine? It's quite a stretch! Otherwise, an article which gives you tips about performance will always show examples of improper software usage as well as fixes to such problems. Sounds reasonable to me. 
I've edited the response with a comment on the github issue. 
If you want to link to a subreddit, use /r/&lt;subredditname&gt; - like /r/java Your link just points back to the reddit homepage.
Sum of printed memory is much less than actual memory usage. Total: reserved=1341945KB, committed=53221KB While htop shows 155M reserved memory. Probably Linux/Ubuntu/X/whatever issue? I think I'll try that on Windows tomorrow.
And yet, people are largely advocating applications like Atom, Visual Studio Code, Discord, Spotify, etc. that are built on the *Electron* platform/framework, which basically is a HTML/CSS/JavaScript application with a Chromium browser engine packed together. Seriously, a PC capable of running Java 9 should have no problems with 160MB memory. From what I see [here](https://docs.oracle.com/javase/9/install/installation-jdk-and-jre-microsoft-windows-platforms.htm#JSJIG-GUID-61460339-5500-40CC-9006-D4FC3FBCFC0D), Java 9 should run only on 64bit platforms which makes 160MB memory even less of an issue. Further: [Can java 9 run on a 32-bit OS?](https://stackoverflow.com/questions/46356345/can-java-9-run-on-a-32-bit-os) &gt; Chief Java Architect Mark Reinhold in Twitter on September 25: &gt; Sorry, but we have no plans to ship 32-bit builds of JDK 9. We’re trying to focus more on the future than the past.
&gt; The defaults are there to suit the majority, the experts will know anyway which settings should be modified. Did you know about this issue before I linked it here?
As a SQL person, I find it quite funky that `JOIN .. ON` took until 2013 to make it into JPA. I mean, I have all these arguments about certain types of outer join not being possible with Oracle's arcane (and deprecated) `(+)` syntax, but JPA seems to have been worse.
There is Electron or Electron-like frameworks. Qt is another alternative for anyone willing get their hands dirty with C++. You can also run local web server and show your app in browser. There are many platform specific options as well. But Java/JVM is in every way superior. Except for memory usage :-( And so-called "native look" but let's call it design.
Even on older systems that's capable of running Java9 that's not much. 1. 160MB is only 7% of a 2GB system which is the low to average amount for machines built in the past 10 years. 2. The 160MB will be reused by the Java application during its lifetime.
Who here wants to go to JS-hell anyways :D
Steam is not built on Electron.
Ah, that makes sense. I’m not really familiar with Electron but I’ve heard horror stories of its footprint. Is Java9 really worse than Electron when it comes to memory use?
When I say "conceptually wrong" I mean that `java.util.Date` is not a "date" in the sense that anyone means when they say that word. If I need to represent a date in my application, `java.util.Date` is not the right class to use. Let's say I have a `User` class with a date of birth property: class User { Date getDateOfBirth() { ... } void setDateOfBirth(Date value) { ... } ... } This API has problems: * I want to know if a user was born on Christmas. What do I do? * I want to know if a user was born within 10 minutes of midnight. Is that information provided by this API or not? * A user tells me he was born on January 1, 1980. What value do I pass to `setDateOfBirth`? Without more information, those questions are all unanswerable. If this API used `java.time.LocalDate` instead, the answers would be clear.
Oh. Wondering where I read that. They use their own gui toolkit https://developer.valvesoftware.com/wiki/VGUI_Documentation
Just tried out electron helloworld. Hard to measure since it spawns 5 processes but seems to be about 100Mb.
Well, it’s built in C++. Electron is such a monstrously shitty solution for a desktop application.
You could still cast to Runnable couldn’t you?
Thanks for sharing!
&gt; There is Electron or Electron-like frameworks. That's definitely not a better alternative. Electron has a huge memory footprint because of the Chromium engine that executes the actual programs. &gt; Qt is another alternative for anyone willing get their hands dirty with C++. Qt is *not limited to C++*. Qt is a multi-language GUI framework. &gt; You can also run local web server and show your app in browser. That's more or less what Electron does - minus the webserver. You obviously have no clue what you're talking about and yet you make assumptions. (Of which quite a lot are plain wrong.) 
&gt; Weren't we all spending time trying to free some RAM to make OS go faster? :-) Not in the last 10+ years.
No because it was never an issue in the first place. Did you encounter an actual prod issue or is it in your head? In whole your blog post there was no concrete real life example. Yes it may cause performance issues. So what? 90% of applications won't see the traffic high enough to cause it as long as they are well architectured. The remaining 10% should be able to afford an architect to design seperate layers anyway. 
**Sidebar**: + **Do not post tutorials here!** These should go in **/r/learnjava**. 
* Jigsaw? Did you create a separate runnable for this project? You can trim down memory pretty substantially by only compiliing in the modules you need (I imagine that is probably where most of your memory usage comes from, all the classes in the JDK that you aren't using.). * Metaspace constraints? Do you have any? * What percentage of memory used is cache vs stack vs metaspace? IIRC, the full JDK uses somewhere around 42MB of memory right out of the box just doing class loading. Finally, if you are so memory constrained that 100mb is too much (Which, to me is crazy anyways, 100mb of ram costs ~$0.40 now-a-days) then perhaps java isn't the right language. You'll have better luck using C++/C/Rust.
Of course I encountered it real life. That was in 2008 when working for a logistics company in Finland. OSIV was causing major memory issues, especially since the application was accessed by a large fleet of vehicles that were updating their route itineraries. Other than that, I worked on: - The Ford North America application used by all Dealers to manage Service parts - Various Nokia applications - The largest real estate platform in Finland Anyway, [my Resume is public](https://www.linkedin.com/in/vladmihalcea/). What about you?
Oh... thanks! **^****^**
I do! I love it! Apart for the fact that it's so hard to make it do bash commands...
Slashdot era? Editor wars have been going on (since 1985)[https://en.wikipedia.org/wiki/Editor_war#cite_note-emacsvsvi-2]! :)
I'm curious. Why do you love it? I haven't found it to be more useful than a good IDE (in fact, particularly less useful because pulling in external dependencies is pretty rough). What do you use it for that makes you love it? I'm probably just missing the point, but I would love a good example usage of what makes it great.
Oh dear! you didn't get the pun at all, did you? JShell -&gt; JS-hell -&gt; JavaScript-hell
How the hell did you, with a *one month old* reddit account with *next to no karma* get to create a subreddit? You don't even understand basic reddit functions and I bet even less about moderating a subreddit.
Thank you
Oh. I don't like javascript- at all... But JShell has nothing to do with JS!
We do understand that JSHell has nothing to do with javaScript, that's why the pun was actually very funny. You still didn't get it.
The Flexibility, simplicity and availability. It is a easily reusable tool. It is very flexible, if i want to do some operation, i don't need to write an app for it, i just use my highly flexible jshell! Of course you can do this with a normal java app; but, I find this much easier, i just type "jshell --startup mytools.jsh", then "someOperation(Some parameter)" And done! I am a very frequent terminal user though, so for me it might seem quite a lot more available than some maybe.
No i don't (*sad-face*)
Thankfully this is done automatically on-the-fly by IntelliJ, or is there some other bell and/or whistle added by NullAway?
That JavaFX HelloWorld uses around 40 MB on my Windows machine.
Thanks! That's much more reasonable.
Why not, then, just straight bash, or perl/python/ruby/javascript for one offs? I guess in my mind, REPLs are most useful for helping you to write the code in the first place, in languages like python/ruby/lisp, they are indispensable. You start your app, set a breakpoint, and then start writing the code when you reach it. You can't really do that with JShell if the solution to external dependencies is to pre-declare them in a warmup script (since you could be bouncing all over the code base).
Did you read the article? The links? The code?
Simply because I love Java! XD
Of course not, its reddit
Does anybody use visual studio code when programming java? What's it like?
I really don't know why you would. VS is actually not very good.
Can you give me a pointer?
[VS](https://en.wikipedia.org/wiki/Microsoft_Visual_Studio) and [VS Code](https://en.wikipedia.org/wiki/Visual_Studio_Code) are different though related products i only tried using it for javascript so i have no comment on the utility for java (happy netbeans user for java) 
No, this is NMT printing the amount of _reserved_ memory (~1300M for this process). RES in htop means _resident_ memory, which is the OS's view on total memory pages in actual use (roughly committed - shared, but often less due to laziness and swap). See for example this StackOverflow answer for a nice rundown: https://stackoverflow.com/questions/31173374/why-does-a-jvm-report-more-committed-memory-than-the-linux-process-resident-set Another thing to try is to relax the very tiny heap sizes somewhat, say add one or two Mb to each. On 9 we allocate a few 100Kb more data on the heap during bootstrap, and it could be that the extra RES memory is down to additional GCs happening in your tests, and that that extra activity is causing more memory to be physically allocated early on. 
I had to use Visual Studio 2015 when I was trying out the C# Xamarin mobile development framework. I was actually pretty impressed at how easy it was to pick up and how well it performed.
I'm not sure about using Java in VS but VS in itself is by far superior to any other IDE I've used. I'm not entirely impartial since I work with MS products and they have great integration but comparing C# + VS with Java + Eclipse/NetBeans/IntelliJ, I would go for the former at any time.
Then I guess you prefer: * Being stuck in 32 bit forever * Having broken intellisence * Having broken merge tools * No decent colorization * Inexplicable crashes * Lousy performance. Seriously you cannot compare performance of IntelliJ to VS. I have a 60000 file project which opens and is ready in IntelliJ in 15 seconds max. My VS .NET project of around 4000 files takes almost a minute before it's responsive. But I guess your opinion is the best M$ money can buy. 
I’m surprised to hear anyone say VS isn’t very good
&gt; myJRebel brings these capabilities to you for free for personal, non-commercial use only. If you intend to make money on your side projects you can't use it since its non commercial.
I have, and it was just to goof around honestly. Autocomplete was surprisingly good, hovering over methods for documentation was kind of inconsistent when using 3rd party maven libraries. I do not think it had intellisense in it like showing me how many references to this method, but thats ok. Honestly it's not as nice as using IntelliJ (obviously) and was a little worse than using eclipse. But I tried this a few months ago, maybe stuff has gotten better!
You can usually tell their sales person it's too much and they will give you a lower rate. It is getting a bit excessive though.
That's because you're a pleb and haven't used anything else. 
Lmao. Okay mate. I’ve used Eclipse, The JetBrains IDE’s, NetBeans, freaking JDeveloper. I’d take VS over any one of those.
Then you're a tard. 
That’s just your opinion, man.
Sorry, paid shill. I stand corrected. 
I've used VS for a number of projects. Personally think its the 2nd worst IDE, only marginally better than eclipse in my opinion. 
I've heard very good things about VS Code, although for C# and typescript. I'm not sure I'd want to give up IntelliJ for it just yet but I'm intrigued.
I thought that war got replaced by the eclipse vs netbeans vs intelij war. Though I do still sneak an edit with emacs from time to time.
I did notice that when my 64-bit JRE9 auto-updated, it installed a 32-bit JRE9, so at least Java 9 will somehow be able to run on 32-bit OSes, even if such systems won't be able to develop with JDK9; it's curious that the download wasn't offered on the Java SE download page.
I see similar mem increase in medium size Swing app: * Java 8: ~100M * Java 9: ~150M * Java 9 with -XX:+UseParallelGC: ~10M less
/facedesk
&gt; Jigsaw? Did you create a separate runnable for this project? You can trim down memory pretty substantially by only compiliing in the modules you need (I imagine that is probably where most of your memory usage comes from, all the classes in the JDK that you aren't using.). Classes that are not used are not loaded. Maybe it has to search through more classes initially, but that shouldn't explain a sustained high memory usage.
Thus, to clarify, jvm reports 53M commited (which includes resident) memory while top reports 155M resident memory. Probably Linux-specific issue, under Windows memory usage is much less. 
&gt; It often creeps in past the review That's a problem with your process. Just banned the class using [checkstyle](http://checkstyle.sourceforge.net/config_imports.html#IllegalImport) and fail the build if anyone imported java.util.Date.
Had some experience to deal with aspose pdf. The main task was to generate complex watermarks and do some headers modification. After some torture with problem pdfs where generation took more than 1min I gave open source projects a try and it worked much faster (pdfbox). So thank you open source!
This is the actively maintained fork of iText with a LGPL and MPL license. If you are still running iText 2.1.7, then this should be an easy upgrade.
Been using VS code instead of Intellij sometimes and it's not to bad (after I setup the Intellij hotkeys). It can't refactor like Intellij can but other than that I think a lot of it is there. Plus I think it looks a lot prettier but that doesn't matter as much :p
ITT: people who do not understand that VS Code is not the same as VS.
Speaking from experience of someone who uses both - VS:C is nowhere near being a competitor for IntelliJ. I use it mostly because I like trying new shiny tools as a developer, also for small projects and simply directories serving as code dumpsters where I couldn't be bothered with creating a project in IntelliJ. When you write some microservice in Python, consisting of 300-500 LoC, it comes really handy, there are also other use cases like that.
For those you need ask C++ people, we can only give references.
Yet another command line parsing library, but a nice one.
Is there a usage example anywhere?
http://www.avajava.com/tutorials/lessons/how-do-i-write-to-a-pdf-file-using-itext.html http://www.adobepress.com/articles/article.asp?p=420686&amp;seqNum=3
Thank you!
I'd like to recommend [Apache PDFBox]( https://pdfbox.apache.org/). We switched over some time back and have had no regrets. 
OpenPDF is targeted against existing users of iText, who want a LGPL and MPL license.
I configured eclipse to automatically inject final keywords where possible on each save. It's easy enough to remove again via quick-fix if you need to and saved me a couple of times already.
For sure. I'm sure there are people who are tied to the library, and this is a great option.
To be fair iText is on like version 5 and looks to be a powerful tool for those who want to use PDFs in a corporate setting where creating large/PDFs is your thing. I also think I remember seeing it had better support for html/css to pdf conversion where openpdf loses a lot of the css design
&gt; we can only give references. And these only *by value*.
XD
We experienced some problems with PDFBox on 1.x, then we migrated to iText, but 2.x has fixed everything for us.
Correct me if I'm wrong, but isn't iText licensed under AGPLv3?
iText had a LGPL/MPL license until iText version 5, when the author changed the license to AGPL in order to sell commercial licenses. OpenPDF is a fork of the last version of iText which still had the original LGPL/MPL license. The license change was motivated by greed.
IMO, if you are relying very heavily on shared mutable memory, you are doing the wrong thing. Volatile by default only makes sense if that is the context of your app, and I can't think of many apps where that is acceptable or desirable. Threading with mutable state is very tricky to get right and volatile is really only a very small portion of that equation. Often times it is a much better idea to rely on a concurrent data structure or to rely on immutable data and design around that instead of shared mutable state.
Ah, got it, thank you.
The IDE auto-formatting has limitations tho. Having used Prettier for javascript and also auto-format in IntelliJ for Java, the latter is nowhere near as powerful or pleasant.
I think another point in the paper, even upon construction `long`'s and `double`'s can be partially initialized
Why do you think this was move motivated by greed? Getting paid for OSS work sounds not too unreasonable. Could you elaborate? (Genuinely curious)
I'd rather have everything final by default.
It is pretty rare and a really bad idea to access an object before construction. The partial construction pretty much only matters if you are mutating the longs and doubles, and in that case you already have problems (even volatile doesn't really save you because you almost ever want to mutate a number long only once).
Is this with content creation? That is where PDFBox was really lacking the last time I looked. No way to create a table for example.
Yeah, we generate 50k+ PDF's a month with it. We use [openhtmltopdf](https://github.com/danfickle/openhtmltopdf) which can render html content into a PDF. We generate the html content via a velocity templating engine. You can use all the css print stuff like page size etc. Super flexibile.
&gt; Why did you bother to check? Because a a new user with a completely new subreddit is always a reason to check. You haven't even appeared on the subreddit and yet you are advertising your own sub. With the time you are on reddit, you cannot possibly have worked out how reddit works. Your failure to post the proper link in the first place is a very strong indication that you don't have much knowledge about reddit and this, in turn disqualifies you as a moderator of a subredit.
Yeah, I can see How you realized i was new! But, I don’t see the problem.
... A month ago
This account is incorrect. iText also sold licenses to the LGPL/MPL library v. 2.x. At the time, the company had two engineers. They invested in their product, added a dozen engineers, and now deliver a product with advanced features missing from most other libraries. They changed to AGPL so that commercial companies that wanted to embed iText into their products would be incentivized to license it. This pays for their engineering. Most internal uses of the product are not affected by the AGPL. If you are worried, you can always put the PDF functionality into a separate plugin that's AGPL licensed and keep the rest of your code under whatever license you want. There are many ways of handling this other than complaining that a small company that wants to invest in its product is being greedy because their OSS license doesn't exactly fit your needs. 
AGPL is a virulent license that prevents companies (and employees of said companies) from using said code because they'd have to open their entire codebase. For independent projects there's nothing wrong with AGPL, but when your product has practically become a monopoly, everyone is forced to use your code, so you can raise the price as much as you want. Which is technically legal, but doesn't stop being a dick move.
Which part is incorrect? 
I use both: VS for C#, and IntelliJ for Java and Scala. Prior to that, I used Eclipse for years. I fully agree with you. VS is alright, but it's quite slow (especially with ReSharper) with more limited refactoring capabilities. The core functionality is not significantly better now than Java IDEs I was using back in 2003 - such as Borland JDeveloper (long dead), or TogetherJ (also dead) - though the feature set is wider now in all IDEs. With respect to VS:Code, I don't really understand why you would use it if there's a full IDE available for the language you're working in. If you're doing web development, why not WebStorm? If you're doing Java, use Netbeans, or Eclipse, or IntelliJ? And if you're doing C# or F#, just use Visual Studio. They're all miles more mature and full-featured.
With LGPL very few users have to buy a closed-source commercial licence. With AGPL almost all of them do.
AGPL is no more virulent than GPL 3 or its predecessors. AGPL and GPL both allow the use of their software inside a company without making that code publicly available. So for the vast majority of internal use, PDF is fine. On OSS projects, you can use A/GPL components as long as they're limited to subsystems. For example, you can create an A/GPL plugin for your system without incurring any problem with licensing. 
&gt;"until iText version 5, when the author changed the license to AGPL in order to sell commercial licenses." They were selling commercial licenses long before version 5. I know because I have one. 
I would argue that my statement is true. iText 2.1.7 had a LGPL/MPL license. iText 5 had a AGPL license. So the license of the software was changed. The AGPL license was different in that it does not allow use in closed-source software, so the change of license does in fact force users to buy a commercial license. 
&gt;AGPL is no more virulent than GPL 3 or its predecessors. It is when you're developing a website.
My rule of thumb: Use inheritance for polymorphism and composition for anything else.
That looks like an awesome alternative to flyingsaucer+itext, that low low low version number gives me concern tho :) 0.0.x?
You can use freemarker and export html output with itext as well
Be sure to run your unit tests many times to ensure code is well tested. /s 
Is why not please? One can put anything in docker... is php server, is spring, is Java EE... But only for Java EE you feel need to ask why put in docket??? Or you also ask why put Spring in docket???
I rolled the dice and it's been awesome. I had been using flyingsaucer+itext for 6 or 7 years, but it had become orphaned. iText was just a mess with their licensing, so I jumped ship and have been happy with the results. pdfbox makes it real easy to populate acrofields as well which was the primary drive for me to switch. We do quite a large volume of PDF's, both generating and also parsing / merging of customer uploaded documents.
Whenever I create a specialized class like this I find it rare to need all of the methods of the abstract classes. In that case I wouldn't extend it at all and just expose the few methods I care about. Who cares if it doesn't conform to the List interface. It could just blow up if used as a List anyway so why pretend.
Nothing gets me hyped up quite as much as app servers and the word enterprise 
We're still using flyingsaucer+itext and man does it generate some bloated as PDFs that are far far FAR larger than they need to be. pdfbox was looking nice but I was missing that nice html-&gt;pdf layer. Might have to check this out when I get some free time!
&gt; Who cares if it doesn't conform to the List interface Barbara Liskov does. The example is a `BoundedPriorityQueue`, so presumably the developer wants it to be substitutable for a `PriorityQueue` (as demonstrated, violating LSP). Next best thing is to make it substitutable for `Queue` by extending `AbstractQueue` and delegating to a `PriorityQueue` (satisfying LSP) . Obviously, you can sidestep the problem of substitutablity by not implementing a standard interface, but that may not always be desirable.
I didn't know this was called composition, glad to know the term for something I've already been doing :)
Interfaces give you polymorphism with composition instead of inheritance, best of both worlds!
Sure if it's needed to be passed into another method / class thats reasonable but not always the case. I'd still say this is the wrong approach for two reasons. 1. The `BoundedPriorityQueue` extending `PriorityQueue` only really needs one method to be override and thats `offer` not `add`. This approach and extending `AbstractQueue` both have possibilities for errors so you need to test all methods so why not just use as much of PriorityQueue as possible and not worry about forgetting to implement the `Collection` methods. I would probably also make this a private or package private class so people don't start using it all over unless it was really needed. Or better yet a simple anonymous class. PriorityQueue&lt;Integer&gt; bounded = new PriorityQueue&lt;Integer&gt;({ @Override public boolean add(Integer e) { if (size() &gt;= 50) { return false; } return super.add(e); } }; 2. If you need a substitute for a `Queue` then you should implement the `Queue` interface then delegate. Pulling in `AbstractQueue` adds all of the `Collection` methods that would also need to be overridden.
Not sure if serious...
Maybe not, but this is a great release. I'm looking forward to playing with it.
Favorite feature / bugfix?
I haven't tried it yet, but I am hoping that Elytron is a big improvement.
Create a new ArrayList, add the items that you want to keep, overwrite the member (reference). The garbage collector will collect the old arrayList and items not needed.
How expensive is this approach? Would it be able to handle larger data sets? Thank you for your help.
Try adding a 'processed' boolean flag to the item. At first, walk the list and clear the flag. Then as groups are processed, set their flags. When you restart, only look at the ones with cleared flags. This technic is often used with a 'deleted' flag on trees where it is expensive to delete an interior node.
*For now* you only need to implement offer. Maybe one day the jdk will add an optimization for addAll for priorityqueue that doesn't delegate to offer, and then you're screwed. The point is that this is a lot more fragile. Just because it's a package-private class doesn't mean it will never escape the package as a queue, even if it's by accident, and it doesn't mean that someone won't use other queue methods two years down the line. You can't prevent that. Queue extends Collection. I'm not sure how extending AbstractQueue is in any way more work than implementing Queue directly - you have to delegate far fewer methods.
You'll find that many "design patterns" are basically just common sense - we name them for communication, but even without the names or other people using them they'd still just be sensible design.
&gt; Queue extends Collection Not sure why I didn't think this was the case. Hmm I think you have convinced me with the first argument. I don't think I have ever really needed to do something like this. Most cases I'm fine with only exposing two methods and hiding everything else. 
[removed]
To be fair, other similar tools (checker-framework, FindBugs, JDT) require the same thing, otherwise they'll have to assume everything is nullable as a starting point which is going to result in a lot of false positive warnings about missing null checks and so on. The good news is that these tools mostly recognize each others' annotations, so if you've already gone through the trouble of annotating for one of them, it's easy to start using another. It would be *really* nice if this were moved into the language so that it would work for the standard library and so on. The closest it's gotten so far was JSR305 which tried to at least come up with a standard set of nullness annotations, but it was never made official.
when i open any of your tutorial, it says page not found...
I love the idea of having this in error-prone (which I already use), *but* I just tried it and the result was 1200+ false positives followed by a compiler crash. The crash appears to be because there's a big switch in `NullAway.java` around line 1083 which is missing a case for an `AND` expression, so it throws a `RuntimeException`. The false positives are pretty clearly because it doesn't recognize the `@Nullable` annotations in my code and so it thinks my nullables are supposed to be non-null. I suspect the reason for that is that the `@Nullable` annotations I use are Java 8 *type* annotations. The NullAway code seems to be using the old JSR305 annotations instead. I think this results in a difference in how the annotation gets attached to things inside the compiler, so it may be that NullAway is looking in the wrong spot for it. For example when I have a field: @Nullable String foo; Under JSR305 I believe that's treated as a "nullable field foo containing a String reference", so the annotation is attached to the field. But with Java 8 type annotations that's a "field foo containing a nullable String reference", so the annotation is attached to the type of the field. Or something like that; it's not the first time I've seen this problem in a nullness checker. Ironically the nullness annotations I'm using are the ones from checker-framework, and NullAway is supposedly using checker-framework's library to do its checking. I don't know why they're using the old JSR annotations instead; maybe type annotations don't work on Android? If anyone from NullAway is reading this, try swapping out `javax.annotation.Nullable` with `org.checkerframework.checker.nullness.qual.Nullable` in some existing code (you'll probably need to add a dependency on checker-qual) and see what happens. I can't really test replacing things the other way because the compiler will throw a fit if it sees that old annotation being used in some of the places where I have `@Nullable`s.
Their page says it does support Java 9. They also replied to Mark Reinholds recent twitter.
Is it really "greed" if you want to build a sustainable business model around a project that you've dedicated 10 years (at the time, now almost 20) of your life to, so that it won't die?
It's very hard to maintain an open source library. It must be even harder if you fork an existing PDF library while you probably know less than half about PDF than its original developer (compare my name with the package names in both OpenPDF and iText). Back in 2007, I read this article: [How To Tell The Open Source Winners From The Losers?](http://www.crn.com/news/applications-os/197003652/how-to-tell-the-open-source-winners-from-the-losers.htm) It listed 9 criteria that I wanted to meet in order to make iText a winner. The most difficult one was "Employed Developers." I just couldn't afford hiring developers. I tried hard: see [How can large open source projects be monetized?](https://opensource.stackexchange.com/a/210/27) In the end, offering a commercial license was the only option that worked. If you don't believe me, please read [The Realities of Being a FOSS Maintainer](https://caddy.community/t/the-realities-of-being-a-foss-maintainer/2728) and [Eat Me](http://zguide.zeromq.org/page:chapter6#Eat-Me). Hopefully you'll have a better, more realistic understanding on the matter. There's certainly a technical component to the discussion: do you prefer using the fork of an old version or do you want to use the latest and finest version? However, there is also a political implication; whatever you choose eventually has an impact on society as a whole. Some will say that I exaggerate, but I've been a developer since the age of 12 (back in 1982), so please bear with me. * If you want to live in a world where a job as a developer becomes a blue collar job and where a developer has no decision power whatsoever, then by all means look for libraries that are free as in free even if they prey on developers like me (the people releasing OpenPDF even had the insolence to use my name). * If you want to live in a world where "being a developer" is something to be proud of, and where the opinion of a developer actually matters (beyond the comments of some online forum), you should be very weary of the continuous race to the bottom with respect to software libraries. I've never understood developers who thought it a good idea to talk their manager into using iText 2.1.7 instead of iText 5 or 7 because iText 2.1.7 is MPL/LGPL and iText 5 or 7 is AGPL. The AGPL is a very honest license. AGPL software components can be distributed free of charge if the software using these components is also distributed free of charge under the same license terms (note that offering the software in a SaaS context also counts as distribution). If you don't want your own work to be AGPL (and AGPL only!), you have to fund the further development of the software by getting a commercial license; at least, that's the model iText is using. iText has a team of paid developers who get a salary for their work on iText. Whoever does not agree with this approach should seriously question his or her own salary, and acknowledge the fact that he or she is interchangeable the moment he or she starts costing too much. Such developers propagate the message to big corporations that developers are *quantité négligeable* and can easily be replaced by much cheaper developers. It doesn't have to be that way. At iText, we have developed something we call the [iText Developer Platform](https://itextpdf.com/itext-developer-platform). It's a program in which developers don't have to pay for their use of iText. On the contrary: *developers get paid for their use of iText.* How does it work? Developers who create an add-on on top of iText usually don't have the resources (sales, marketing,...) for the world-wide distribution of their work; iText is has a world-wide reach with offices in the US, Europe, and Asia. If developers join the iText platform, iText will help selling their products world-wide using iText's sales and marketing team and its own distribution network. For every sale of a third party add-on, iText shares the revenue with the original developers. So who is smarter? * The developer who fools everyone (including himself/herself) by using an outdated version of iText or (even worse) a fork, in the hope to make some money personally (and potentially much money for his employer); or * The developer who chooses to work with iText directly, bypassing the companies in the middle, creating a sustainable business for himself or herself by getting his or her software distributed all over the world? I for one have proven that it's possible for a developer to make a difference. I want more developers to be like me. It hurts when I see how developers make this impossible for themselves by promoting the exact opposite, namely to turn developer into a disposable product. Developers are human too, you know...
The most recent version of iText, is iText 7.
There are plenty of tutorials on the official iText web site: https://developers.itextpdf.com/books
I saw the exclamation mark in the title, and I wondered if OP might have a small case of Stockholm Syndrome :)
Pay is good, lots of paid vacations, health and retirement packages, ability to work remotely across the globe. Downside, better be skillful with office politics. Looks good to me.
Word of advice: never ever use WildFly in production. It's buggy as hell(at least from my experience from WildFly 7 and 8). If you are so unlucky that you've stuck with JEE then you do can use JBoss EAP in production for free. I was in doubt that you can do that but was proven to be wrong - you can't use JBoss EAP binaries provided by RedHat for free, but you can build JBoss EAP from sources yourself. There is a [project on GitHub](https://github.com/hasalex/eap-build) which helps to download and build JBoss EAP.
Your claim "The iText license change was motivated by greed of the original developer to sell commercial licenses" is false. You don't know me. What gives you the right to tell lies about me? Why would anyone believe you? What gives you the right to defame me, and at the same time use my work to copy me? You don't have a problem taking the benefits of my work while at the same time insulting me. What does that make you?
question: is it JEE 8 compliant? or is still targeting the "old" JEE 7?
I've never used JOOQ before but this looks pretty good! Have you ever used Hibernate/Spring Data before in production? Can you compare this two/three technologies? 
Yes I did and still do :) I even use JPA/Hibernate together with jOOQ, very powerful and jOOQ is so much better when doing complex queries. Prefer to use Hibernate for CRUD and entity graph updates, the rest is for jOOQ. You should have a look at jHipster ;)
Who will you turn to when you need support? Are you sure the people who created the fork will have the time and the bandwidth, or will you try to get support from the people OpenPDF *targets against*? How do you think that will work? And why would that be a great option? Have you really thought this through?
Right now I'm using QueryDSL with Spring Data but I'm looking for some alternative. I think QueryDLS will be outdated soon, so I wan to prepare my self. :)
You should definitely have look at jOOQ as it will replace all your QueryDSL in that case. :)
I want to contribute my point of view as an end user, not as a developer. If you write a web application that hides the source code, then you are taking rights away from me, the end user. Dear developer, I like you as a human being, but I don't trust the code you write, because you are a human being. I want to see it for myself. I want the right to see your code. I may not understand your code, but I may take your code to another developer who can help me understand it. Open Source (GPL, AGPL,...) gives me this fundamental right to take a look at your code. MPL does not guarantee that right to me, the end user. There have been court cases where appliance manufacturers (like set top boxes or routers) were ordered to release their source code, because they were using GPL software. This was a victory for the end users, because it allowed them to great things like modding their set top boxes.
This website is really good. Thanks for the share!
This website is *really* good. Thanks for sharing!
Don't.
Yes, I'm sorry.
Work remotely? Seems I'm the only one in the world who can't find this kind of work in the java ee field.
http://www.querydsl.com/
Understood. I'll remove my comment.
On my case is never more than 50% and very much depends on the project setup, including if vpn connections are allowed to cross borders.
I'm assuming from your username that you are the creator of the original iText. What i'm doing is working great for us, and I like the Apache project. I wish you luck with iText.
And what about JSR 308 and Checker Framework? Should not we use org.checkerframework.checker.nullness.* instead of JSR 305?
The problem with the ASL is that it's an [Eat Me](http://zguide.zeromq.org/page:chapter6#Eat-Me) license. It's OK if your project doesn't need to be future-proof, but we're working with companies who need to comply to new standards (e.g. PDF/UA, PDF 2.0, ZUGFeRD,...). Their initial investment in iText now pays off, because we are actively investing in supporting those standards as they are developed. PDFBox doesn't have the means to do this, hence companies using PDFBox are at the mercy of volunteers who have access to the standards and sufficient knowhow about the standards to do the necessary development to meet compliance requirements.
You do realize that Wildfly is Jboss AS, right? Wildfly is the basis for Jboss EAP.
That's not an answer to the question. In the case of iText, the LGPL didn't generate enough revenue to create a sustainable business. Changing to the AGPL, resulting in a company that can invest in further development. E.g. before the AGPL, there was no money to be part of the ISO process, nor to learn more about PDF at the PDF Days or the PDF technical conferences. What do you call making money to support and maintain an open source library? Is that your definition of greed?
Why will querydsl be outdated?
Hm yes you’re right, they are marketing iText 7. Weird that they only just came out with iText 5 in August. [iText release notes](https://itextpdf.com/posts/release-note-and-changelogs) 
Oh boy! AbstractManagedBeanProxyTransactionSynchronizationInterceptors for everyone!
WildFly is NOT JBoss EAP. Yes it's used as a basis. As an analogy you can think about WildFly as an alfa or beta of JBoss EAP. JBoss EAP is a stable production ready AS, WildFly in turn always acts an early version of EAP. Good to play around but bad to use it in prod.
No problem!
I'm pretty sure that I didn't say that Wildfly = JBoss EAP. I said that Wildfly = JBoss AS which was the old name for it. Of course there are differences between Wildfly and JBoss EAP. But Wildfly is still the basis and the newer Wildfly versions will become part of JBoss EAP down the line when they are more mature.
It won't :)
**Sidebar** **NO programming help, NO learning Java related questions!** Questions regarding the former should be posted in **/r/javahelp**; questions regarding the latter should be posted in **/r/learnjava**. **Post removed**
Hi, original nailgun author here. There's an update on the transfer (which just happened a week or so ago) at http://martiansoftware.com/nailgun/ **tldr**: Nailgun scratches an itch I no longer have, but some smart people who rely on it are motivated to keep improving it. This is a Good Thing. Happy to answer any questions or concerns anyone might have.
Thanks for building this API on top of jOOQ. Such APIs show - Nice use-cases of using jOOQ with other libraries, e.g. Spring - Flaws in the existing API (perhaps, some features wouldn't be needed in your tool if jOOQ had them) I've browsed the tests to see what you're really doing there, and I must admit, I'm not 100% sure about the use-case. Am I right in understanding that you want to transform arbitrary `Map&lt;String, Object&gt;` into predicates by applying a [query by example](https://en.wikipedia.org/wiki/Query_by_Example) pattern? If so, were you aware of e.g. [`DSL.condition(Map&lt;Field&lt;?&gt;, ?&gt;)`](https://www.jooq.org/javadoc/latest/org/jooq/impl/DSL.html#condition-java.util.Map-) and [`DSL.condition(Record)`](https://www.jooq.org/javadoc/latest/org/jooq/impl/DSL.html#condition-org.jooq.Record-)? Did you find anything missing in the jOOQ API, e.g. to help you build predicates or sort criteria, which could be moved from your tool to the API?
There have been some interesting discussions on the mailing list, e.g. [here](https://groups.google.com/d/msg/querydsl/fNFXliG8P-k/7dy2aAotVQ0J) and [here](https://groups.google.com/d/msg/querydsl/B5UOzCYbNcE/7s2LG0YMAQAJ)
Only for tomcat run configurations, for desktop and standalone applications hot reload works without doing anything as long as you are running with the debugger. 
Putting the 'EE' to one side. The fact is, Wildfly can handle comet / long poll without filling up the logs with errors due to browser disconnect (When using HTML5 Server Sent Events). Tomcat, cant. So, even if you're happy using Spring, and complete JavaEE hater, Wildfly would be a better option if you want to make use of modern web techniques.
From time to time I have some problems with deployments during development when Netbeans tries to do some hot-reload/hot-deploy stuff, but usually clearing /data, /deployments and /tmp after turning off the server is enough. I find payara more stable though
 Hi, Thank you for commenting to my post. I think you might have misunderstood the API use-case with my tests (I did not use the real API usage for building things like: Filter.of("myAlias2", value1 -&gt; FilterParser.ofInt().parseWithApiException(value1), value -&gt; A_TABLE.as("s").ID.eq(value));), the folder "examples" might represent a better idea even though I put a very simplistic example in it. For filter, key/values can look like that: - key/alias -&gt; no value or anything as the filter activated with that key does not check the value - key/alias -&gt; value (usually use FilterParser) - key/alias -&gt; many values separated by a token (usually use FilterMultipleValueParser) So this is a Map&lt;String, String&gt;, usually comes from request parameters but can build from a POJO/etc. Using key/alias allows to give different name for a pair of key/value so clients can see a different key on the front-end but in back-end it will be mapped to the Filter.of("myAlias2", ...) and sortAliasMapping.put("myAlias",...). For sort, I use the sort from Spring Framework as they provide an easy creation of sort values (outside of web context); for web we get the sort by the pageable.getSort() method, so Spring already extracted sort key/values from request param (even less code). It sorts dynamically based on what is passed and the order in which it is passed in the web request (or at least the order that Spring gives me the iterable). For Sort/Filter, you usually just init once in your repository class like that: sortAliasMapping.put("id", SortValue.of(anyTable.ID)); sortAliasMapping.put("aKeyOrAlias", SortValue.of(LISTING.NAME.as("listingName"))); sortAliasMapping.put("anotherKeyAlias", SortValue.of(anyTable.CODE)); sortAliasMapping.put("myKeyAliasForClientApi", SortValue.of(COMPANY.NAME.as("companyName"))); sortAliasMapping.put("myAlias", SortValue.of(A_TABLE.as("s").NAME.as("lastBlaBlaDone"))); filterValues.add(Filter.of("myAlias2", value1 -&gt; FilterParser.ofInt().parseWithApiException(value1), value -&gt; A_TABLE.as("s").ID.eq(value))); filterValues.add(Filter.of("code", FilterParser.ofIdentity()::parse, value -&gt; anyTable.CODE.likeIgnoreCase("%" + value + "%"))); filterValues.add(Filter.of("id", FilterParser.ofInt()::parseWithApiException, anyTable.ID::eq)); filterValues.add(Filter.of("iWillBeAddedInConditionsJustWithPresenceOfThisKey", ()-&gt; anyTable.ANY_COLUMN.isNotNull())); Then condition and sort are build with just one line of code each: default Condition buildConditions(final Map&lt;String, String&gt; requestParams) {...} default Collection&lt;SortField&lt;?&gt;&gt; buildOrderBy(@Nullable final Sort sortSpecification) {...} I think [DSL.condition(Map&lt;Field&lt;?&gt;, ?&gt;)](https://www.jooq.org/javadoc/latest/org/jooq/impl/DSL.html#condition-java.util.Map-) is not what my API does, with Filter.of(...) we can define any condition. And it seems to me that to get that Map&lt;Field&lt;?&gt;, ?&gt; it requires copy/paste code (if/else etc) to find alias/key from another map (or POJO) to then map it to a field and take the value to then call DSL.condition(Map&lt;Field&lt;?&gt;, ?&gt;) to get only "key1 = value1 and key2 = value2". And [DSL.condition(Record)](https://www.jooq.org/javadoc/latest/org/jooq/impl/DSL.html#condition-org.jooq.Record-) is more or less what I will do with the interface "PojoToMapAdvanced" but I will add more behavior with annotations and be able to define custom strategy (with strategy pattern and context). I am not sure if this clearer now, if not I should try to show a more meaningful example of a Spring repository usage (like ExampleOne.java) The idea behind is that jOOQ allow to have [dynamic-sql](https://www.jooq.org/doc/latest/manual/sql-building/dynamic-sql/) which is perfect to build dynamically filter/sort.
Ah, I did not follow that much QueryDSL as I am using JPA/Hibernate and jOOQ. For me, no reason to follow it as I can do a lot with jOOQ ;)
I'm also a little confused on your use case. Would it be possible to show a side by side of the jOOQ implementation vs your implementation? That might clear it up a bit. I have had no issues generating very dynamic SQL on the fly with jOOQ.
"Local-Variable Type Inference Enhance the Java Language to extend type inference to declarations of local variables with initializers." 
So, we are getting "var" finally?
EE7
Well, it's good to know they don't use roboVm, but Gluon 9 is not yet realised
JEE7
 var&lt;Integer&gt; i = 1; 😂
And to add on, the current version of Jboss EAP corresponds to a slightly older version of widlfly. If you wanted something a little more stable, you could use the "reference" version of wild fly. 
What? No. That's not how it works. Read the JEP
If it works for you, yes. The list of alternatives is not exhaustive.
I see a lot of “keep the same scheme”, and not much “change to time based versioning” :)
Almost like the C++ `auto` examples: `int foo` -&gt; `auto foo`
Did you use the open source version or paid? If OO, how did it work? 
The open source one is free for all open source databases and I'm pretty sure it works exactly the same as the paid version. Paid version just gives access to the non open source SQL dialects.
That makes sense. Thanks!
I also pay for the lowest tier subscription plan I think its $10-12 a month or something just because it's such a great product.
Might as well make your app single threaded, you're going to be paying so much overhead with flushing CPU caches that it will probably perform better. 
I decided to join the mailing list because of this and added my 2 cents. I'm against the new scheme, it doesn't accomplish much and only creates confusion. If we really wanted, we could use a public version number to brand releases with while keeping the internal version number semantic.
I think the semantic versioning is actually better for the public side. It keeps things simple, and is more interesting/exciting than a time based number. But like someone else in the list said, I don't think it's very practical to have an internal and external version, just makes things confusing.
Spring runs on both jetty and undertow, so no need to change to wildfly just for that
While I understand the reasoning behind moving to a time based release schedule, it's not without its drawbacks. Backwards compatibility has always been touted as one of Java's strongest points, but suddenly it becomes a liability. As a developer, I like to use new features earlier, but enterprises, where Java thrives, are not as flexible.
Too much bikeshedding...
I use jOOQ with MySQL so free version
Yeah, org.eclipse.jdt.annotation.* would be another option. The main point is to use the type annotations because they can be put in more places than the old JSR305 ones. It would also be useful to have more of the type annotations out in the wild just to shake out bugs in Java tooling. *Right now* there are static analysis tools which supposedly work with Java 8 but can't entirely deal with type annotations. For example checkstyle has problems parsing some esoteric uses such as `String @NonNull ...`, and pmd I think can't handle them in several other places. To run those checkers I end up having to create a copy of my source tree with all of the nullness annotations removed (and even then pmd has some issues with lambdas). Even tools that are specifically meant to look at nullness annotations aren't always equipped for type annotations. For example the "NullAway" add-on to error-prone that was mentioned the other day doesn't seem to be able to see uses of `@Nullable` when it's a type annotation, and I've seen the same behavior from some of error-prone's built-in rules such as `ReturnMissingNullable`. I think the problem is that even when the source code is identical, a JSR308 `@Nullable` will end up attaching to a different point in the AST than a JSR305 `@Nullable`, and the tools aren't looking in both places for them.
It is good to see concurrent compaction outside zing, with shenandoah and now ZGC. I hope it makes it into non-experimental builds soon :)
No, no final :)
[Here](https://github.com/Blackdread/filter-sort-jooq-api/tree/master/examples/fullOne) I gave a more meaningful example and comparison I modified the [README](https://github.com/Blackdread/filter-sort-jooq-api/blob/master/README.md) to explain more on what API solves (more about being consistent through the app, important in multi-developer projects)
I hope with this [example](https://github.com/Blackdread/filter-sort-jooq-api/tree/master/examples/fullOne) will make the purpose of the purpose more apparent. Don't hesitate to tell me if I missed some parts of jOOQ API.
We just released 6.0.4.Final that should be significantly faster for you, I think, from what I could understand from your report. I have it 30% faster than 6.0.3.Final on some benchmarks here. If you have some time, it would be nice to provide a new comparison table using the latest 6.0.4.Final compared to the other versions so that we have a clearer view of what the situation is now. Thanks!
Oh yes, a lot of bikeshedding. There are also multiple discussions going on: whether the release schedule is a good idea, the difference between (importance of) LTS and non-LTS versions and finally the version numbers themselves. The version number debate just can't be settled properly until the other debates have some consensus. There is some consensus on the version number front: The proposed system (18.3, 18.9 etc...) is definitely the worst one.