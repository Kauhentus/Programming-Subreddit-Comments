I would probably use if ("bob".equals(bob)), it eliminates the need for null checking when working with non-trusted strings.
I've moved back to C++/Qt for portable desktop applications and .NET for Windows only. Sadly outside enterprise world, Sun never managed to make Java applications feel like a first class citzen on the desktop.
I think that's not enough, you can however self-sign (http://www.narendranaidu.com/2007/11/3-easy-steps-to-self-sign-applet-jar.html) the applet and then the user will be prompted to trust that certificate.
I enjoyed the discussion in comments on DZone. I am not really sure what the point of the article is though. It starts out with some name calling and never really makes any valid points or explains "What People Forget About Spring".
Ok, so heres how I understand it: If I host my client applet on a website and its an unsigned applet, it can only connect to a server that is ran on the same IP as that website. Now what I dont understand is how one can run a server on a website?
Yes, seems to the norm, so I might as well fit in. ;)
Thanks a lot! I worked for some years with WPF. The descriptive format of the XAML files made it easy to understand the structure of an UI. From this, I also understood that UI technolgies are not really different from each other. You can always apply the patterns of one to the other. They are all component-centric, and provide the same widgets. The language changes, but what you learnt using one technology is never lost if you swap to another. Swing is always flagged as producing very crappy stuff, even by people who worked with it for years. I understand the beginners, I had the same reaction for many months. However, once you learnt how to craft your own components, it's as powerful as XAML or JavaFX. Actually, it's the whole same thing! To quickly mockup and design styled applications, I built a CSS engine for Swing (http://code.google.com/p/java-universal-css-engine/). With that, I put raw components in layout, and then style them only with a CSS stylesheet. Now, I find Swing even easier to style that WPF! Not everyone likes to craft their own productivity stuff, but that's usually the key :) This tutorial is nothing more than a "craft your own dialog enhancer".
I am using this driver for a similar purpose. Also, android has SQLite support built in. 
I don't understand how this is supposed to work. Your example doesn't have the @RunWith(SpringJUnit4ClassRunner.class) annotation needed for Spring
[UW CSE](http://www.cs.washington.edu/education/courses/cse142/11au/homework.shtml) puts up everything you need for their intro courses online. It uses java but also has some python on the sidebar. If you need any help there's [Stack Exchange](http://stackexchange.com/), this subreddit, or you can pm me directly.
Yeah that's the whole point. The limitation of @RunWith is that you can only use one class designation at a time, but you can get around this easily with the @Before method, which will also do an annotation scan and pick up the locations listed by @ContextConfiguration
This is the one that I'm using. The Zentus one had a whole bunch of problems and performed much slower when I tried it.
Are you looking to use Struts as a client of your Node.JS server? The simplest thing you can do is to open up a regular old HttpUrlConnection and hook up the InputStream to a Struts 1.x DownloadAction which will stream the Node.JS output to an HTTP response through Tomcat. That's if you're just serving up the file over HTTP from Node.JS. 
[See here](https://forums.oracle.com/forums/thread.jspa?threadID=1355346)
Java, that's why this is /r/java
Whatever works, whatever you know the most of and feel the most comfortable with. I would do it in java... because I know java pretty well... because I subscribed to /r/java 
Hahahaha that's really funny
See, I figured I should use Java since it's easy. I was just gonna see if there were any other suggestions but when I post it in /r/java I couldn't really expect much else. 
Very nice, 
thanks for that! that exactly what I want to do. I'll try that
Maybe you should compare the myriad of Java packages that support game making instead of splitting hairs about what language to use. You seem to already know the answer to that question.
I just added an executable demo for the tutorial, with sources, if anyone is interested: http://www.aurelienribon.com/tutorials/data/dialog-enhancer-demo.zip
I think for beginners, this is an excellent tutorial to get the foundation up and running to be able to play with it. 
Don't bother with them, there are weirdos everywhere ;) So we've recently used in an enterprise project. It's not in production, but we'll get there eventually. I can give you a very brief experience on Dropwizard: First of all, Coda actively works on the project and it's going pretty solid. It's already in production on couple big companies like Yammer, BankSimple etc.. The core idea is having RESTful micro services model in a service harness. Dropwizard basically provides you the service harness, you just fill in. However, building heavy-weight things is not the intention therefore you might run into issues if you need so. Framework is very solid, and allows you to do rapid development. However, customization is not easy since you have to figure out some stuff. The change you want to make could already be in the framework, but documentation is not at its best form yet. Let me know if you need more info..
Interesting.. why?
Regarding the comment, the funny thing is that this is EXACTLY what Springsource had been doing for years. Much of Springsource's rise to fame was due to their bad mouthing of Sun, EJB and Java EE in general. Long after Java EE 5 and EJB 3 was released, Rod "conveniently" kept forgetting this and kept attacking Sun as if EJB 2 and J2EE were only released the day before. All the while, Rod and other Springsource employees, created an imago of being individual open source developers. Of course this is a big deception since Springsource is a corporation just like Sun was and now they have been cleverly sold to VMWare they're more corporate. Then the moment Oracle employees give Spring a taste of their own medicine, various Spring fans begin to cry about unethical and desperate behaviour. The word "hypocrite" was invented for this... 
I used it back when I was doing fulltime Swing development. I don't think JavaHelp is all that popular because from my experience Swing tends to be predominantly used in internal applications, and what I've seen is that most places forgo the formality of a real help system.
I've just finished a project which has a MenuBar and MenuItems on it. There is one menu for Help with two entries in it ("General Help", "About"). It's just a regular menu. I didn't want to be bothered to learn JavaHelp - it looks cumbersome and is totally overkill for my application. My main help is formatted in HTML and displayed in a JEditorPane with a vertical scrollbar. It is all I need.
Being 16 and planning on going into Java development as a career, this makes me glad.
What would a better algorithm be? 
As advice from someone already old in this industry, don't focus only on Java, make sure to learn several programming languages and operating systems, even if you plan just to use Java in the end. This will make you a better programmer.
The TIOBE methodology was also described in the referenced article. I think its a fair one, it's still a way (just one way) to rank the programming languages.
Asset management system using a graph database as the backing store. Currently writing mechanism to pull data from SpiceWorks API which adds vertices and edges to existing graphs.
I work for amazon working on the new AmazonLocker project
Unfortunately, I can't talk about it because of corporate BS.
I work for an university as external software developer. Currently working on a project in elderly care. Can't really talk about it :)
I work for [a Norwegian consulting house](http://www.bouvet.no). My team does information integration with RDF and [SDShare](http://www.sdshare.org). Basically, we set up a bunch of SDShare wrappers around data sources (ERP and CRM systems, Active Directory, etc) then pull all the data into one big RDF triple store for slicing and dicing. Works amazingly well. I also got to build [a data deduplication engine](http://code.google.com/p/duke), that's used to find duplicate records, both within data sources, and across data sources. We use it to find duplicate customers, for example. I've spent the last couple of days optimizing the client that pulls data from SDShare servers into the triple store. It can now [run multiple transfers in parallel](http://code.google.com/p/sdshare-client/source/list?name=multithread), and started to use persistent HTTP connection.
He's already said too much. 
I work a for public university lab. We do data fusion from anything to do with transportation data to support communication between state Departments of Transportation. I work on all the backend stuff: software to move data into databases and webservices to extract and distribute it. I swear it's more interesting than it sounds. Also, I'm surprised there are so many university developers here! I thought it would be more uncommon.
Don't answer! It's a trap! Your boss is trying to figure out who's redditing on the clock.
I worked (recently) for a large semiconductor company in a QA department. I developed a system to automatically group, categorize, prioritize and summarize problems detected in automated regression testing. For example, the most recent test run (they take around 24 hours each) had around 12,000 failing tests. Most of those are "cascading" failures caused by failed preconditions. Many of them are simply "recurring", but some of them are "new" in the most recent test run. Some of the problems from the previous test run will be fixed. The previous solution (spreadsheets) got replaced by this system, which could group the failures into logical "problems" and then detect the "history" of each (new, recurring, fixed, etc). Total time to do "first pass" analysis (find, analyze, prioritize) a full test run dropped from "8 people for a week" to "30 minutes on one computer".
I build games for [Sphero](http://gosphero.com), the robotic ball you control with your smartphone! I make games for Android and iOS that control Sphero or that Sphero controls, or that otherwise use Sphero. I use Java in the Dalvik VM for Android development.
I work for the NSA on a Hadoop-powered system meant to catalog overseas communi...
Having written similar IVR apps, I can say that I think this sort of project is VERY fun and challenging.
*PEER PRESSURE*
I'm no expert, but I believe there are dimension limits when uploading textures to OpenGL (and maybe also dependent on the graphics card). In this case, the maximum length/width you can have is 1024. If you want to display a larger image, you'll have to use multiple textures.
I am not sure about remote work but Mountain view is hiring. Relocation package is good and as a (presumably) Canadian, visas shouldn't be a problem.
Thats what I ended up doing actually :). Just wanted to ensure that I wasn't doing anything crazy like spawning an extra thread. Thanks for the quick response!
I work at a hospital, developging the patient management system. It does literally everything, from medical inging, to facturation and medical data gathering.
no texture is smaller proportionately. If I increase the size of box, the texture covers more ground. This ratio is different for every resolution of texture
ok thanks! I'll try it tell you how it goes!
TIL...Something never to do...
Most OpenGL drivers can only create textures which dimensions are a power of 2. Here your image is 1366x768, so the texture loader from Slick will probably put your image inside a 2048x1024 texture. When you put that texture on a quad, it will display the whole texture, which is bigger, and fit it to the desired size. [Have a look at the Slick code here](https://bitbucket.org/kevglass/slick/src/9d7443ec33af/trunk/Slick/src/org/newdawn/slick/opengl/InternalTextureLoader.java) : GL.glTexImage2D(target, 0, dstPixelFormat, get2Fold(width), get2Fold(height), 0, srcPixelFormat, SGL.GL_UNSIGNED_BYTE, textureBuffer); The 'get2Fold' call returns the next power of two. The solution is probably to try to map only the relevant part of the texture when you use 'glTexCoord' : float tx = 1366.0 / 2048.0 ; float ty = 768.0 / 1024.0; GL11.glTexCoord2f(0, tx); GL11.glVertex2i(0, 768); // bottom-right GL11.glTexCoord2f(1, 1); GL11.glVertex2i(tx, ty); // bottom-right GL11.glTexCoord2f(1, 0); GL11.glVertex2i(tx, 0); // Bottom-right GL11.glTexCoord2f(0, 0); GL11.glVertex2i(0,0); // Bottom-left Really not sure about the whole thing, but it may give you the right idea.
Hello from Platforms Networking!
I'm a software architect at a digital media company. Currently I'm working on scaling production systems onto VMs and into the cloud.
In the UK? 
I work for a multinational telescope in Hawaii with programming as a subset of my responsibilities. I write code to help analyze the images we take at night and code to allow remote Astronomers input their observing constraints over the web.
Damn that Y2K bug!
Note that that warning is from Eclipse. Javac can produce a warning for this ("warning: [static] static variable should be qualified by type name") if you use the `-Xlint` option, but unlike Eclipse it doesn't warn by default.
I work for an LIS company, currently working on a project for tracking specimens in a lab.
MyBatis has nothing to do with the choice to use SQL or stored procedures. It can use both happily. What you are asking has to do with the design of the data model, and that is a different ballgame.
Yep. Whyssat?
I think this post is a great use of /r/Java, much better than homework posts -.- *sarcasm*
I work for a consulting firm and sometimes write Java code to help customize Oracle's Identity Manager and Access Manager applications. 
All praise, sorry about the Bezos' thing.
Uhg! SQLServer?! I never touch that stuff. PostgreSQL all of the way!
Excellent! I was thinking your restriction on commenting was based on a company like MS or Oracle... apologies.
Wow, basically the same thing as you. Maybe there's a business venture in this. 
No. You know like: GridBagConstraints c = new GridBagConstraints(); ... c.fill = c.HORIZONTAL; ?
Currently an undergrad majoring in CS and just spent my first year of college learning Java. I'm curious what approaches other schools take to teach their students Java. 
Food service company developing a proof of delivery system.
Do you mean Accumulo? http://www.wired.com/wiredenterprise/2012/07/nsa-accumulo-google-bigtable/
Hi! :)
Before entering an ellipsis.
It was a joke. I don't want the hassle of anything requiring a TS clearance.
I work for a uni as part of an open source academic environment development team.
You mean the questions? I can't really talk about them (NDA) but, they will be in-depth and difficult/different. Whats important is not that you can answer them perfectly, but rather that you demonstrate a clear line of approach to the problem. You have to demonstrate that you can solve problems you might not have drilled into your head perfectly. Still, for the technical stuff; brush up on algorithms and data structures. Google is a place where you hand-craft your code rather than use a library so, imagine that you will not have the tools you might expect and understand that you would have to know and understand how to create those features yourself that you might otherwise pull from some library :)
&gt; Assuming that you already have a set of well defined requirements Oh.. the mythical well-defined requirements. As sad as it is, but those mostly don't happen. All specifications, no matter how thick, will always contain places that were misunderstood, where the client doesn't even know what he wants / needs. If they'd knew, they wouldn't need developers, I guess. This is what in the end makes agile a good idea. Not Agile, the cult -- just an agile methodology that tries to maximize the amount of working stuff you have before you find out what went wrong -- to have less catastrophic failures. &gt; [...] how do you start modeling the system so that other developers can understand and implent your design ? What tools do you use to communicate the system's design? What do you hand-off to your developers so they can start hacking away? Now, even though my job title is something with architect, or maybe because of it, I don't really believe in ivory tower architecture where some well-paid clever architect writes everything down in advance, and the slave-worker minions implement it. Those kind of endeavors usually end up the worst. Because in addition to the architect totally lacking the necessary in-trench perspective, they're implemented by poo-flinging monkeys who lack the insight to make it right and who may also not be able to see when the project is about to run against the wall, so the impact will be even harder. First of all, you need to establish a common development culture in your team. One aspect of that is establishing decent tools that help you as much as any tech can help you. A good IDE, version control system, continuous integration. Then you need to equalize the knowledge of software design, and I guess this can be really hard. It's kind of sad that you can find experienced developers who don't have any idea how to structure anything. In the end, the different abilities may still not result in you all being on the same page, but maybe the same chapter. Establish a common set of design patterns appropriate for your environment. Make everybody understand the need and advantages. Let them get comfortable with it. The more members of your team grow together in terms of shared principles and goals, the easier you can delegate parts of the code to others and be reasonable certain they won't turn it into a pile of poo. Part of the establishment of culture is determining how you document. It certainly depends on what kind of paperwork your organization demands. 
Find a well-known and well-understood framework model and start there. Apply your problem set to it and code out a quick scaffold and show it to the developers. If they don't understand the concept or the framework, get them up to speed (or off the project.) If your requirements don't fit a well-known framework model, you're probably doing it wrong.
Thanks for taking the time to describe your experiences. I agree with everything you said, especially the part about ivory tower architects. I, by no means, ask about something like that. Maybe if I describe what I do with my team you'll understand the reason I asked this question. As you say we've already established a baseline of tools and processes everyone in the team must use. We have standardised on maven as a build system, git for version control, gerrit for code reviews and Spring, JPA, MySQL as the base frameworks that everything is built on. There's not restriction on the IDE of choice as long as you can customize it to meet the style guide (nothing serious, just spaces instead of tabs, braces everywhere etc). We've been working together for 2+ years so some patterns have been established and more or less anyone in the team can create the basic components of a project (maven modules, persistence setup, spring initial setup etc). What I haven't figured out yet is how to communicate to the rest of the team the features we need to develop so that no misunderstandings happen and the delivered code is in the right direction (some features are built on top of other features and it saves time when the code has taken that into consideration from the beginning). If you take the above under consideration you'll see that using UML is a overkill. Nevertheless, there is the need to define a set of HTTP actions/URLs (we build web applications/services) that the feature requires, a set of controllers that implement those HTTP actions, a set of services a DAO must provide and a set of test cases that the developer must write in order to prove that his code is correct and the requirements have been met. Sometimes the features are more complex but the latter is the usual scenario. How do architects deal with this kind of communication ? Is it completely ad hoc and dependent of the team ? 
I'm not interested in the tools per se as much as the process of communicating the intent of the system and the way it must be build. You seem to propose that you hand off a skeleton project with all the classes in place and let other people fill in the blanks. Wouldn't that cause a bottleneck because everyone must wait for the architect to figure out the building blocks AND implementing them up to some point ?
My main problem with UML is that it is usually detached from the course of the project. There's some up front UML design in the specs and then that never gets updated even though the domain model grew to twice the size with lots of changes in the original domain objects / services. A special case of "the documentation is lying". [MDA / MDSD](http://de.wikipedia.org/wiki/Model_Driven_Architecture) seems to work at least for some people. The charm of course being able to use patterns to generate lots of repetitive code.
thanks.. should hurry less while rambling.
I've only just started as an architect (a little over a year in the role now) and I already have enough experience to agree with the other comments, especially about getting your developers setup with a common set of tools and an established project module structure, like maven. I've found that word docs and visio models often go unread by developers, and only really serve to communicate design to people who won't ever look at the code. I generally produce deliverable documentation only after I've created the modules and interfaces, which is the best way I have to communicate the design to other developers. They can start reading javadocs and writing unit tests and building artifacts as soon as I have committed them. Waiting for well-defined requirements is an art. I have definitely been in the situation where I have delivered features that nobody wanted, but I have also been burned by letting business analysts drive the gathering of requirements. Many of the most important system requirements originate in the architect's head, because the architect is one that cares about scalability, dependability, and maintainability of the end product. These requirements will often conflict with business users' "well-defined" requirements, when time and resources are taken into account. My recent experience has inspired me to take the opportunity to design for those architectural requirements whenever I'm waiting for user requirements to be defined, which puts me in a better position to push back on business requirements when appropriate.
I only ended up choosing that one because the publisher is affiliated with the test center. It might have been a bad rationale but I find it explained quite well the topics and has loads of examples and exercises (many of them as you described while some others are to write printouts or just code). I still have a day to go through the one you suggested, it's not enough to study it detailedly but it can't hurt.
It looks like there's a pattern here. Most of the comments agree that the best way to communicate what needs to be done is through code (I tend to agree. My only reservation is that it is a bottleneck in the process when one person needs to setup and code all the interfaces and stubs and that it's likely not very good for morale when the team does not have any creative freedom to solve problems their way). There other common pattern is that there's no such thing as well defined requirements which I find surprising. Is it so bad out there? Maybe I'm lucky because business people in my company do not get involved in the requirements phase and when they do their requirements are mostly visual which means that they can collaborate with a designer and provide us with a wireframe or mockup. The rest are taken care of by a project manager (milestones, handover etc) and myself (propose features, estimate time/cost etc). Anyway, you sound like a cool guy to work with. Got any vacancies in your team :) ?
* Figure out what the system needs to do. (This includes figuring out what you don't know, and it includes figuring out *whether* you'll be able to get the info up front at all or will have to react later.) * Figure out possible ways to do it. * Determine which ones of those possible ways are feasible and not, given available resources (not just schedule but also software licenses and skill sets). * Figure out which of the remaining ways to do it is going to provide the most benefits (reliability/solidity, ease of use, low support costs, easy to understand and work on the code) and the least negatives. * Identify technical decisions that are going to impact a lot of things (for example, choosing between two competing data models) and that are going to be costly decisions to reverse. Get good data/info on the alternatives and their consequences, and make sure you're making the right decision. Then make a decision on those, get buy-in, and get that resolved so you can start making other decisions that depend on them. * Also identify decisions that have to be made based on incomplete information. Think over what you'll do if you have to reverse that decision. You don't want to spend forever contemplating hypotheticals, but if you have some sort of rudimentary backup plan, it will free you to go forward with the decision. Plus it may reduce risk and reduce stress just to know (and for others to know) that you've thought about it. * Delegate the details of the design to qualified people. * Be smart about what needs to be documented, and get that documentation into the right hands, so that you can get feedback from those whose work it will affect. I prefer to use something online (like a wiki) so that everyone can keep up with changes. Use whatever form of documentation is appropriate to the task. If you're writing a network server, you might want a protocol description or typical message sequences. If you're storing stuff in a database, you might want documentation of the schema. If you're designing a GUI, you might want rough mock ups (or at least lists) of the screens that will exist and what each one does.
Thanks so much for the thorough answer. It elates me to hear that java programmers are still relevant. I was starting to get the feeling that we're on our way out. Guava looks really cool, especially the new collections. Multimap, where have you been all my life! I mostly work with graphs so this is really going to make my life easier.
It's more than that. It's helping influence java's language design. Closures are just one aspect slowly making it's way into java.
We just sketch it out together on a couple of whiteboards in pretend-UML component diagrams (think client, authentication, database, background jobs, etc) and start agreeing what "should" happen where. Often these diagrams will show a big "Thing Manager" blob in the middle for everything else, that then needs to be thought more about and broken apart. Edit: what I'm trying to say is that the team work out the architecture together, rather than a single person trying to communicate his plan
&gt;%1==0 ^%1==0 ^^%1==0^%1==0^%1==0^;i--o^.... oh the humanity! Your penis is always erect!
Get off my internets you damn teenagers!
You should probably check for negative length and throw IllegalArgumentException
/r/programmerhumor is =&gt; that way
Any more input here?
Good luck on the exam!
We don't use Oracle Identity Analytics - and I don't think it would be a match for what we are doing. 
Sounds a lot like r/makeMyHomwork ... What have you got so far, what does not work? Any Code that you already have? Just pasting the assignment is probably not enough.
Qt does a fine job of all that. `QDockWidget` makes it easy to do most of what you're describing. I'm not sure what the Java bindings are like, but the Python bindings (PySide) are quite nice. Not exactly a lightweight framework, through.
[JIDE](http://www.jidesoft.com) is pretty good. JIDE core is GPL, the rest of it is commercial. 
Sorry it wont let me fix the formatting :/
Thanks!
I like http://dock.javaforge.com/ It's flexible, customizable, well documented, and actively developed, but it may be "overkill" for you ;)
I actually looked at the new version today, it's looking way better nowadays. Hopefully they'll push it into openjdk soon.
Why do you care about the performance of logging? Who cares if it is slow, just make sure you log on an independent thread so it doesn't slow the application down.
Or you could do this http://docs.oracle.com/javase/tutorial/uiswing/misc/splashscreen.html
This raises a lot of red flags for me. If this is the only place you're storing log files, I'd be worried. You're putting an extra, unnecessary load on your database. It's also non-relational data that is best suited to existing outside of the database. If you have any say in the matter, I would re-evaluate the decision to implement such functionality. I don't have much JMS experience, so I won't comment much on that approach. I'd stay away from SOAP web services and anything where you serialize objects across the network, as they're going to have a fair amount of overhead (especially if you intend to send each log message individually). I'd try to minimize file I/O, network I/O, and prevent the possibility of lost logs. A somewhat generic approach I might take would be: * Continue logging to flat files * Set your logger to write small files, with no rollover limit * Randomly grab a log file, and send it asynchronously. Mark the file as awaiting response (maybe move to a new folder) * On ACK, delete the file * Implement log file parsing logic on the server end prior to insertion into database * Reassemble log files based on timestamp in log files to deal with asynchronicity 
Then you should so be doing active monitoring of the application and server.
jDownloader does that and it sucks, better try to make it load faster.
preferences / java / installed jre
What? Right click the computer in explorer, properties, system settings and then create a new system variable JAVA_HOME with the path as value. Next time google that shit
You're pointing to JRE6, but tomcat needs a JDK, not a JRE, as the error above points out. If you see a directory in that java folder that says JDK (like C:\Program Files\Java\jdk1.6.0_26 ) then put that in java home. If you don't have a folder like that, you need to install a JDK, which you can get here: http://www.oracle.com/technetwork/java/javase/downloads/jdk-7u3-download-1501626.html
Yes, this. I always use a JDK on my system, sorry I missed that.
Thanks for the reply! The JDK is absent from the directory, but since I've got eclipse compiling/running programs I assumed I hadn't needed to download another JDK (I may be wrong). I just can't seem to find where it's located. I'll redownload the JDK and see how I go. 
Probably should have mentioned that the JDK was not where I had expected it to be. I assumed it would have to be stored *somewhere* if eclipse is compiling my programs, and was looking for a way to find it via eclipse. If anyone is curious, or happens to stumble upon this submission by chance, I reinstalled the JDK and set the path to the new location. This fixes the problem. Thanks to redwin for their suggestion. Although, I am genuinely curious about how eclipse had full functionality with the JDK (seemingly) absent. 
You can't have inheritance in enums due to they implicitly extends Enum, thus if you're planning some complex things it's better to use inner classes from the beginning.
Tomcat should be able to run using a JRE. According to this [thread](http://tomcat.10.n6.nabble.com/Running-Tomcat-with-JRE-td2113585.html), in your case, you should set JRE_HOME instead of JAVA_HOME, and the startup script should work fine (not tested myself).
Java's `enum` is an exceptionally well-designed language feature compared to the rest of the language. The functionality just works, with sane defaults and without excessive boilerplate.
Appreciate your help. Like I said, I can set environment variables, I just couldn't find where the JDK was. Problem is fixed now, enjoying the sight of the tomcat welcome page at localhost:8080. 
Eclipse has its own built-in java compiler, it doesn't need an external JDK installed. That's how it can target any java version you want in build options, and incrementally compile, and detect errors inline and turn them red, etc, its built in compiler is parsing as you type. It's pretty cool, actually.
[The actual Java docs are a lot better.](http://docs.oracle.com/javase/1.5.0/docs/guide/language/enums.html)
Enums can implement interfaces. On a more general note, I find the more complex the things I want to do, I avoid inheritance as much as possible. Inheritance in Java is extremely inflexible, and adding options means creating deeper and deeper class hierarchies. Interfaces by composition on the other hand can be mixed and matched and composed together much more easily. Prefer composition to inheritance!
Actually, per my edit, I should have mentioned that I'll need something with LIFO functionality. Is there anything like that out there or will I have to roll my own?
* Use logback. * Configure asyncappender + dbappender * ???? * Profit!
What's with this badly written blogspam?
I don't see 10 ways to use enum. I see 3 limitations for public static constants, 4 "benefits of enums" and 13 "important points about enums". To redress this, here's one way of using an enum in Java: You can use them to implement the singleton pattern http://en.wikipedia.org/wiki/Singleton_pattern#The_Enum_way
Good question. Enum is a very appropriate name. My problem is I think of enums in a programming sense, and I'm actually thinking of bit flags.
I just had a story with enums. I once was making a parser/exporter of column/rows structured data and implemented each column (they were of different type) as a single enum instance. Things were perfect until I realized that there are group of columns with similar but a bit different logic and I couldn't resolve it through inheritance, so I ended up making many wrapping methods, which may have another method inside and many empty methods stubs that was actually filled only in specific cases. As a result, initially very clean code became messy and not the one I'm very proud of. So, after that I'm thinking very carefully of possible enums limitations.
I'd very much like to hear more specifics, because what you are describing sounds an awful lot like an [ISP violation](http://en.wikipedia.org/wiki/Interface_segregation_principle). If you find yourself introducing a ton of empty methods from implementing interfaces you have designed, your design is probably suboptimal.
Here are the tutorials: http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html People really ought to consider whether what they are writing is novel, informative and not significantly outclassed by available first party alternatives. 
good idea. thanks a lot.
I use enums extensively as functional commands. For example, if I have a User class and want a command to get the user ID regardless of which user object I invoke it on I would add the following to my User class. public enum IDAccessor implements Function&lt;User,String&gt; { instance; public String apply(User input) { return input.id; } } The benefit of doing this is that I can take a set of users and transform it into a set of user ids with ease with something like this: Iterable&lt;String&gt; ids = Iterables.transform(getUser(),User.IDAccessor.instance) Caveat; this code is meant to be used with Guava
That's pretty much what I've settled on. I'm thinking I'll create a wrapper for a LinkedBlockingDeque and modify the functionality to only remove from the end of the list. Thanks for the suggestions!
Don't reinvent the wheel http://commons.apache.org/pool/apidocs/org/apache/commons/pool/impl/GenericObjectPool.html create with DEFAULT_LIFO and your choice of WHEN_EXHAUSTED_BLOCK|WHEN_EXHAUSTED_FAIL|WHEN_EXHAUSTED_GROW There's also a "DEFAULT_MAX_WAIT" i.e the time it'll block for before doing the above. 
Ah, read the JavaDoc of stack about LIFO. Apparently Deque is even better. *"A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class"*
I don't see any good reason to implement a toString with a switch like this. It seems to overcomplicate things. Why not store the "Penny" in a String "description" and just do it like: public enum Currency { PENNY(1, "Penny"), NICKLE(5, "Nickle"); private int value; private String description; private Currency(int value, String description) { this.value = value; this.description = description; } @Override public String toString() { description + ": " + value; } }; 
http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html ArrayList &lt;String&gt; fruit = new ArrayList &lt;String&gt;(); fruit.add("orange"); fruit.add("grape"); fruit.add("watermelon"); // fruit = [orange, grape, watermelon] int nums = fruit.size(); // nums = 3 String one = fruit.get(0); // one = "orange" fruit.remove(0); // fruit = [grape, watermelon] 
These problems are transparently solved in NetBeans by using Maven.
Let's say Project B depends on Project A. Project B is a customization of Project A, and in the final product build, all of the classes will be merged together into one product. Project B and Project A exist as separate repositories in Subversion, so I create them as separate projects in the IDE. Project A has a library that Project B needs, say log4j. I followed the instructions to link Project B to Project A (Project B &gt; Properties &gt; Libraries &gt; Add Project), yet project B doesn't compile because it cannot find the Logger class in log4j. This scenario works fine in Eclipse.
Alas, my company does not use Maven for dependency management.
PrimeFaces really is amazing. It handles all the front end stuff so I can spend my time working on business logic. You can build a rich user interface using simple tags.
Netbeans for the win. I used to use eclipse... Then I learned java ee
Upvoting for enums not for the article itself. It could have used some more advanced examples of why enums are so nifty. I find them very useful for being able to set simple "modes" that are set by other classes. (I say modes instead of states as they are user selected and never changed by the class itself. Seems to be a better description in this case.) Available modes can be grabbed from a list within the class so, if done correctly, calling classes never need to change a thing when I add new modes, depending on their use. Another nice thing, you can easily enforce a singleton property and restrict possible workarounds. Others cannot subclass to bypass otherwise private constructors, for example. 
That's exactly it. For some reason it can't find the libraries in the parent (they all go red) and I have to re add them.
The same applies to Eclipse though. If you can't use Maven for whatever reason, Eclipse offers features that Netbeans doesn't in terms of project dependencies.
Well if it can't find the child project itself, you can't expect it to find the libraries.. If you commonly have child projects in different directories, set up path variables in intellij, and use those to tell intellij where to find the project. 
While your opinion is interesting, it's completely irrelevant. A feature that works fine for me in Eclipse does not work in NetBeans. I am asking NetBeans folks how I might fix that. Redesigning my company's build and dependency management architecture is not a solution that will work for me.
if i have to use a java based ide for development, jetbrains tools are my choice. 
Let me give a concrete example to you folks, and someone maybe can tell me how to solve the problem (maybe I should have lead with this). Suppose you have the following directory structure, where project A and project B represent different projects in Subversion and are separately managed. Project A does not depend on Project B, but Project B depends on Project A. | +- projectA | | | +- src | | | | | + test | | | | | - ProjectA.java | +- lib | | | - log4j-1.2.11.jar | +- projectB | +- src | +- test | - ProjectB.java Here's ProjectA.java: package test; import org.apache.log4j.Logger; public class ProjectA { private static Logger logger = Logger.getLogger(ProjectA.class.getName()); public static void main(String[] args) { System.out.println("Project A compiles!"); } } Here's ProjectB.java: package test; import org.apache.log4j.Logger; public class ProjectB { private static Logger logger = Logger.getLogger(ProjectB.class.getName()); public static void main(String[] args) { System.out.println("Project B does not compile!"); } } This is a highly simplified version of the setup we use at my company. We use the common (anti-)pattern of storing our dependencies in Subversion. Bad practice? Besides the point. In Eclipse: 1. I create a New Java Project and point it at `projectA`. It figures out that `src` is a source folder and `lib` is a library folder and sets up the defaults correctly. 2. I check `log4j-1.2.11.jar` in the Order and Export tab to make it available to child projects. 3. I create a New Java Project and point it at `projectB`. I add `projectA` as a dependency in the Projects tab. No problems, everything compiles. Here is what I tried in NetBeans: 1. Go to File &gt; New Project and click Java &gt; Java Project with Existing Sources. 2. Point the Project Folder at projectA and specify "Project A" as the Project Name. 3. Tell NetBeans that the source folder is `src`. 4. Click Finish. 5. Doesn't compile. 6. Click Properties &gt; Libraries &gt; Add JAR/Folder and log4j-1.2.11.jar. 7. Okay, compiles. 8. Go to File &gt; New Project and click Java &gt; Java Project with Existing Sources. 9. Point the Project Folder at projectB and specify "Project B" as the Project Name. 10. Tell NetBeans that the source folder is `src`. 11. Click Finish. 12. Doesn't compile. 13. No problem. Project A has what I need. Click Properties &gt; Libraries &gt; Add Project and pick `projectA`. 14. Click Finish. 15. Still doesn't compile!?! 16. Do a Clean and Build on project B. Hmm, build is successful in the Output window. 17. projectA/dist contains Project_A.jar and projectA/dist/lib contains lib4j-1.2.11.jar. What's going on here? Is this not the NetBeans way? If not, what should I have done?
They're basically (Well, technically, hardly at all, but at a very basic level) like your normal old arrays. String[] args, etc. The difference is that you can't make an array bigger, but you CAN make an ArrayList bigger. So String[] users = new String[]{"Bob","Alice","John"}; Well, if you ever want to add a new user, you can't, unless you go back to that line and edit it. On the other hand, using ArrayLists: ArrayList&lt;String&gt; users = new ArrayList&lt;String&gt;(); users.addAll( Arrays.asList("Bob", "Alice", "John") ); and then if later on you decide you want to add more users, it's as simple as: users.add("Dennis Quaid"); ^For ^a ^handful ^of ^design ^reasons, ^you ^would ^almost ^never ^manage ^a ^list ^of ^users ^like ^this, ^but ^for ^the ^sake ^of ^examples, ^just ^go ^with ^it One of the first things you'll notice about ArrayLists is that they cannot store Primitive types: `boolean`,`byte`, `char`, `short`, `int`, `float`, `long`, `double`. Instead, you have to use the "primitive wrapper" classes: `Boolean`, `Byte`, `Character`, etc. The other methods you asked about: size(), get(), and remove(): .size() is what ArrayLists use instead of .length It's pretty much as simple as that. .get() is how you look at an element. So for example, int[] primes = new int[]{1,2,3,5,7,11,13,17,19}; primes[0] == 1; becomes ArrayList&lt;Integer&gt; primes = new ArrayList&lt;Integer&gt;(); primes.addAll( Arrays.asList( 1, 2, 3, 5, 7, 11, 13, 19) ); primes.get(0) == 1; .set() works to assign a value to an index. String[] foods = new String[4]; foods[0] = (bread); becomes ArrayList&lt;String&gt; foods = new ArrayList&lt;String&gt;(4); foods.set(0, "bread"); As for remove, it removes the element at the given index. Any elements after it "fall down" and get re-numbered (their index decreases by one)
That sounds....pretty weird. If you can't get an answer here maybe you could ask the same question in the netbeans forum. I do not add jar files to a project any more, I set them up as libraries first and then import the library into my project. Things seem to work more smoothly since I've been working that way. The dependent jar files still end up in the lib folder, so it might work for you as well.
Rather than just adding a jar file to my project, I set them up as libraries and then import the library into my project. Since I've been working like that I've had no problems with netbeans resolving dependencies. To set up jar as a library, select Tools==&gt;Ant Libraries (before version 7.2 it just said Libraries), then click the New Library button and then configure the jar as a library. As an added benefit you can add a source jar and java docs at the same time. 
I've done something similar using log4j and JMSAppender. Basically, all inserts/updates/deletes of users and user metadata was logged and those logs were kept on a remote database. We also tracked all logins. AMQ worked much better than file xfer or direct jdbc access. I switched to JMS but kept all the log4j code because it was easier to handle it via a reconfig of the log4j.xml file than rewrite all the logging code. YMMV.
I wholeheartedly agree with architects discussing design with developers but what you describe works because your environment can support it. Only problem is that it can't be advertised as a universal approach. Some workplaces are not so open or have so many products/features/requests that keeping up would affect developer productivity. It's a good thing that you can share decisions in your workplace. Treasure it. 
Hey, isn't this a duplicate of http://www.reddit.com/r/java/comments/wynk0/why_we_need_jta_20 ?
I'd suggest to put the number buttons in an array and add them using a loop. Saves you writing it all by hand.
Swing tip: Wrap all of that stuff in main() in this: SwingUtilities.invokeLater(new Runnable() { public void run() { ... } } All Swing stuff should be done on the [Swing Event Dispatch Thread](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html).
thanks for the tips guys i still got alot to learn, JFrame gui is very tricky to arrange.
You know, you're exactly right. Singletons are pretty great for cross-cutting concerns (for languages which don't allow for any kind of aspect-oriented programming, like Java). `System.out`is a great example, like you say, and `Log4j`. Fundamentally, Singleton classes are fine and useful, but I still believe that they have such a high risk of being abused, that they should be avoided if at all possible. Mind you, I don't mean the carefully crafted singletons found in standard libs, like the one you pointed out, but creating new singletons should be avoided. I'm not sure if I'm getting my point across well. I'm sure if you're very, very careful, they can be great, but they're so easily abused. The first time someone is past their deadline, they'll be frantically jamming code into your singleton, because they know they can access it from anywhere without having to waste time properly passing data through the correct channels. Then after a few hundred iterations, your singleton is now a [god object](http://en.wikipedia.org/wiki/God_object) being molested in different threads and from different packages, and it's over 5,000 lines long.
Are you doing this by hand or with the visual Swing GUI editor in Netbeans? Because if you're doing this by hand, ouch. 
really tough crowd
If you want to up your object oriented programming knowledge work on decoupling the logic from the presentation (MVC) and you can abstract out some components. For instance if you wanted to add a LED display for your calculator, you could have a LED object that draws itself, a Display object that manages LED objects, and that display could be managed by your controller. This was a Java 1 lab assignment I had back in college, it taught me bunches. Have fun!
http://pastebin.com/TRpexvAd I simplified it for you by putting all the numbers in an array, if you'd like to take a look the code is above.
* text.getLineWrap() does nothing (it only returns the current "line wrap" property value) * window.add(BorderLayout.SOUTH,bottom) - check order of your parameters ;) * window.setSize(250,300) - consider window.pack() instead
Also you can write "JButton one, two, three, four, five, six;" to conserve space
Can't believe I'm the first one to notice this, but you're redeclaring static fields as local variables in main public class main { static JFrame window; static JPanel holder; ... public static void main(String[] args) { JFrame window = new JFrame("Calculator"); JPanel holder = new JPanel(); JButton one = new JButton("1"); ... should be public class main { static JFrame window; static JPanel holder; ... public static void main(String[] args) { window = new JFrame("Calculator"); holder = new JPanel(); one = new JButton("1"); ...
huh ok guys... i've got it! Man, i almost lost my mind! For anyone that might be wondering: window&gt;preferences&gt;general&gt;keys i somehow missed that tab :$
I was going to point that out, but you beat me to it:)
A few more tips others haven't touched on: * By Java convention, never have a classname that starts with a lowercase letter. * You shouldn't comment out code. You should delete it, and if you need to view it later you should be able to do a diff to a previous version from your VCS. It's simple to set up and commit with a git init. * Depending on who you ask, importing everything in a package with a * is generally discouraged. If you're using an IDE like Eclipse, it can manage this for you. * I'd probably put all the buttons in a Map&lt;Char, JButton&gt; and reference them by label, or at least put the numbers in an ArrayList&lt;JButton&gt; and index by number value. * I might put all the GUI behavior into a JFrame or some other Swing container object (it's been a while since I've done Swing programming). * You probably don't need package private visibility for your instance variables. I'd suggest using private for the sake of information hiding.
Use an array!
[http://docs.oracle.com/javase/1.4.2/docs/api/java/beans/EventHandler.html](really?)
I'm sorry I'm on baconreader and I couldn't find the edit button. 
You may also want to investigate the Thread.enumerate(Thread[] tarray) method. The getAllStackTraces() method requires greater Security permissions because it accesses threads outside of the current ThreadGroup. In addition, it will give you threads which are a core part of the JVM implementation rather than just your application threads. If you are just looking for one of your own application threads (which you should be), then use enumerate() for safetey and future enterprise scalability. if you really want every thread in the JVM, and are prepared for the consequences, then getAllStackTraces is the way to go. (Both methods are intended for debugging purposes only, of course.)
Yeah, just figured he'd like to know this is possible. Its useful when you have for example. boolean up = false, down = false, left = false, right = false;
A combination of this and interrupt().
is there anything else I should focus on or learn before I move onto C++? and is C# a Microsoft-specific language?
It's so sleak, but at the same time so confusing.
Honestly, I hate the part. It just is visual clutter to me. Now, it if was just on hover, that would be cool.
I started with Eclipse them a friend showed me Intellij and now I'm only using it. Already needed to get back to Eclipse for some specific projects and I missed a lot of features that Intellij gives me. I do not see myself going back to Eclipse if I'm not forced to.
So something like this? Thread[] tList = new Thread[Thread.activeCount()]; int numThreads = Thread.enumerate(tList); for (int i = 0; i &lt; numThreads; i++) { if(tList[i].getName().equals("Whatever")) { /* do stuff */ break; } } Also, if I have a variable *someVariable* in *someClass* within *someThread* how would I go about either reading or changing said variable once I'm at the "do stuff" part?
Use for-each loops, and the first fromCommaSeparatedString will be shorter than Guava (multiple chained method invocations in one line is a LOC cheat ;)
so people do switch from IDEA to eclipse? i guess maybe only short time IDEA users... 
I did, 3yrs of using IDEA, now 3 yrs of using Eclipse. Hint: it's free and not all employers ready to pay for IDEA.
IDEA has a free version now
If you have a single purpose, small application then the abstraction layer is a bit overkill. However, if you are developing a large application/framework that potentially multiple clients will use, having an ORM is absolutely necessary. You want to make sure that if the client is using MySQL, Oracle, HSQLDB, MS SQL, etc then it is simply a small configuration change on their end to use your application/framework. The article is poorly written and gives no evidence to support his opinion.
Assuming you're more comfortable with IntelliJ than Eclipse, why wouldn't the company pay for it? $500 is nothing compared to developer happiness and productivity...
As someone who has never used Intellij, what features do you miss?
ctrl+shift+alt A The most useful hotkey in all of intellij, trust me :)
No, my boss is not a developer.
Python, ruby or lisp. I would recomend finding a copy of the little schemer or the little lisper. Lisp looks nothing like java and will give you headaches for a few days as you try to get it square. Python is the most pleasant language in common use. Its hard to dislike it. Ruby is also pretty nice. It supports all four common programming styles, procedural, class based and prototype based oo and functional. You should learn c if you plan on earning a compsci degree. You should also learn lisp. You will cover them in your coursework. Have fun with python or ruby until then.
any reason why?
looks like the task management is in the free edition, but for bugzilla, you might try: http://plugins.intellij.net/plugin/?&amp;id=142 what does mylin do besides track changes per defect, in your daily work?
most supervisors are clueless about tech and try to save money in silly ways
I don't know how IntelliJ even does this, but I noticed that, for Android dev, if I have a canvas with some simple shapes drawn on it, the IDE will actually preview the canvas with the shapes. Now I don't even bat an eye towards Eclipse for Android dev now.
Factory, decorator, singleton, template, facade, are some of my favourite design patterns. MVC (although technically not a design pattern) is extremely important to know, since you can separate your logic from your user interface. A really good book to read is Head First Design Patterns
They probably won't now. I'm just saddened, but not completely surprised, by the fact that developers don't get the tools they need...
I do run IDEA, and my boss can't tell the difference anyway.
Actually, it's a good opportunity and reason to learn new tools.
this seems like the better implementation
[Original post on Fowler's website](http://martinfowler.com/bliki/SnowflakeServer.html).
It's more like $700 if you want the upgrades for a year (assuming they'll have another major version soon). And if there's a few developers, that may start to add up. Relative to salaries it's probably not much, but many places have 'other' budget limits, and they're often not that high. On the other side of this, I've known devs who just buy a 'personal license' and use it on their own wherever they work. Not quite as nice as a company buying it for you, but if you switch jobs... it's yours to take along to the new gig.
http://nifty.stanford.edu/ has some good interesting projects, also check out /r/DailyProgrammer
I thought you meant this guy. http://primetime.unrealitytv.co.uk/wp-content/uploads/2009/01/martin_fowler_large_1.jpg
interesting - thanks for sharing. I wonder if there is an IDEA equivalent. no amount of awesomeness of mylin would make me stomach Eclipse's inferior UI, but it sounds cool :&gt;
Um, no. `Unsafe` is so called because using it is not safe. Don't do this.
I'm not really looking for a code review. I just figured somebody might find this interesting! [Screenshot](http://i.imgur.com/xhz02.png) [Runnable JAR file](https://dl.dropbox.com/u/1987709/Roulette.jar) (Download and double-click) GitHub link: https://github.com/bananaseepeep/Martingale-Roulette#readme
I am trying to read, modify, and write an integer. And yes, I have tried a RandomAccessFile, but it wouldn't let me read the number, I suppose it was because I couldn't figure it out
I see... I think RandomAccessFile should suit your need. Be aware that you must position RandomAccessFile at the correct byte position in order to read an integer successfully.
Ohhh, so it will work if i establish the PrintStream after I close the Scanner?? I'll try that!
Ohhh okay, I never positioned the byte, I'll try that!
 import java.io.File; import java.io.FileNotFoundException; import java.io.PrintStream; import java.util.ArrayList; import java.util.Scanner; public class Test { public static void main(String[] args) throws FileNotFoundException { Scanner scanner = new Scanner(new File("C:\\hi.txt")); ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); while(scanner.hasNext()){ list.add(scanner.nextLine()); } scanner.close(); PrintStream printStream = new PrintStream(new File("C://hi.txt")); for(int i = 0 ; i&lt;list.size();i++){ printStream.println(list.get(i)); printStream.println(); } printStream.close(); } } Cleaned that up for you.
[Java's Tutorials](http://docs.oracle.com/javase/tutorial/) are quite good.
Ctrl+w Ctrl+n Ctrl+e All day
In the future, post the code that you're working with or similar code. It helps a lot when figuring out what is going wrong.
The trick is in synchronizing the models between the fields. Every JTextField has a Document model associated with it. Suppose you have three text fields: rootDirectoryField = new JTextField(); subDirectory1Field = new JTextField(); subDirectory2Field = new JTextField(); The document model for the root directory field is: rootDirectoryModel = rootDirectoryField.getDocument(); You can create a custom document model which synchronizes with the root directory field: class SubDirectoryDocument extends PlainDocument { private final Document rootDirectoryDocument; boolean rootDirectoryUpdate = false; public SubDirectoryDocument(final Document rootDirectoryDocument) { this.rootDirectoryDocument = rootDirectoryDocument; // Update the root directory in the subdirectory document when it changes this.rootDirectoryDocument.addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent ev) { try { rootDirectoryUpdate = true; insertString(ev.getOffset(), rootDirectoryDocument.getText(ev.getOffset(), ev.getLength()), null); } catch(BadLocationException ex) { throw new IllegalStateException(ex); } finally { rootDirectoryUpdate = false; } } @Override public void removeUpdate(DocumentEvent ev) { try { rootDirectoryUpdate = true; remove(ev.getOffset(), ev.getLength()); } catch(BadLocationException ex) { throw new IllegalStateException(ex); } finally { rootDirectoryUpdate = false; } } @Override public void changedUpdate(DocumentEvent e) { } }); } @Override public void insertString(int offs, String str, AttributeSet a) throws BadLocationException { // Only allow root directory changes when done in the root directory field. // Otherwise allow update of the text field. if(offs &gt;= rootDirectoryDocument.getLength() || offs &lt; rootDirectoryDocument.getLength() &amp;&amp; rootDirectoryUpdate) { super.insertString(offs, str, a); } } @Override public void remove(int offs, int len) throws BadLocationException { // Only allow root directory changes when done in the root directory field. // Otherwise allow update of the text field. if(offs &gt;= rootDirectoryDocument.getLength() || offs &lt; rootDirectoryDocument.getLength() &amp;&amp; rootDirectoryUpdate) { super.remove(offs, len); } } } }); And then configure the subdirectory text fields to use this model: subDirectory1Field.setDocument(new SubDirectoryDocument(rootDirectoryModel)); subDirectory2Field.setDocument(new SubDirectoryDocument(rootDirectoryModel)); 
I'd optimize this a bit and do it in a pipelined fashion, for both time and space savings: * create a new file * open the original file * for each byte/line in the original file write it to the new file * write any new contents you may want to the new file * close both files at the end of the original file stream * delete the original file and rename the new one to the old one's name
Thanks man, That was super helpful. I'll be sure to come back if I have more questions. 
i once pooped in a bucket. O wait. This isn't youtube.
Whilst not intended to be especially offensive to you, you're completely, and entirely wrong. Around 2 years into Java I'm rather proficient with the language itself. Yes, there are small tidbits that I've yet to learn, as is expected in only programming for 2 years. You may be arguing that it takes ~15 years to master Java and its built in libraries, but that's a flawed argument. No because what you're saying isn't true (well, sorta), but because you're addressing a problem that he hasn't raised, nor is relevant. He never asked how to do everything possible with Java's standard libraries, he merely asked how to learn Java quickly, implying not learning every single library Java has to offer. /rant EDIT: Spelling/grammar
SecureRandom seeds itself from sources of entropy, from your local operating system, making it quite safe and hard to predict
never invent your own encryption. always stick to standards (like AES). Standards are scrutinised by experts and mathematically proven to be secure. Don't take this the wrong way but you will get it wrong and expose vectors for attack.
Look for thenewboston's youtube channel. Lots of Java tutorials along with other miscellaneous programming tutorials.
If you truly have expert knowledge of a language, learning another language is will be very easy and the fastest way to get up to speed on a new language is to actually use it in anger on a real project.
Thanks, this was exactly what I was looking for, I had a hard time finding info on this (I may just not know where to look)
Ignoring `fsync()` and journaling issues, this is also safer because some version of the user's data is left on the disk intact. If there's some failure while in the middle of writing the updated content, you don't leave the user with nothing. 
I wouldn't recommend that to someone with "expert knowledge of OOP in PHP." Those tutorials, even the "intermediate" ones, are slow-paced and aimed at beginner programmers. 
&gt;master the language 15 years or more Considering that Java is only 17 years old and that it's changed dramatically within the last 8 years (generics, etc.), are you saying that essentially no one has mastered Java yet? 
From wikipedia: &gt;With a key that is truly random, the result is a one-time pad, which is unbreakable even in theory So, assuming this article is correct (and I can't see why it's not), the message is unbreakable even after the first iteration. The multiple iterations are only in place for practical reasons. For communications between 3 or more parts, I want the messages decipherable only when everyone submits their key. The only weakness I see in this approach is the randomness of the key, which I'm currently in the process of researching. I appreciate your input tho, this project has triggered an interest in cryptography recently. I've bought myeslf a book and I'm planning on reading up on the subject in more detail some time soon. Edit: The wikipedia quote may need some context, it's (obviously) about xor encryption, with the premice that the key is as long as the message
Maybe you can use HAVEGE (https://www.irisa.fr/caps/projects/hipsor/) and set *-Djava.security.egd=file:/dev/urandom* &gt;HAVEGE (HArdware Volatile Entropy Gathering and Expansion) is a user-level software unpredictable random number generator for general-purpose computers that exploits these modifications of the internal volatile hardware states as a source of uncertainty. During an initialization phase, the hardware clock cycle counter of the processor is used to gather part of this entropy: tens of thousands of unpredictable bits can be gathered per operating system call in average. 
I think you're misunderstanding, this isn't a form of encrypted chat program. You're making assumptions of what I'm trying to do, and making up potential problems. If you're curious, I'd be delighted to discuss it in more details in PMs. But if cryptography is your main interest, I believe it might be alittle simplistic for your taste though.
Thanks man, I'll check it out. And thanks for staying on topic :-)
&gt; I have expert knowledge of OOP in PHP r/funny?
No problem, I only know this because of stumbling across it recently, and I agree, it can be hard to find decent info about it
Have you looked into [Shamir's Secret sharing](http://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing)?
Is there any way that method could result in information being lost? Let's say the contents of the file are very important, or just impossible to replace. What is the best way to modify them?
This is a rather broad question, and since I am by no mean an expert in game development, you can take this answer with a grain of salt until somebody more experienced comes along. First of all, online game development has two major component. The client side is the rich gaming part. You'll have to work with a 2D Engine/Framework or "build" your own in order to create map, animations, sprites, etc. The Server Side or BackEnd is where most of the logic is at, you'll want to filter events based on the region of the players, manage the player events, sync all the events across all player... Basically control the flow of the game for everybody. And of course, you'll have to figure out how the whole communication in between the two component works. If I were to approach this project by myself as a learning thing, I'd probably aim a bit lower and start by making a single-player plat-former. That way I'd get to know whatever 2D Framework I'm using and making it nice. Afterward I'd probably try to get it to work in online multiplayer. Then I'd slowly add features such as NPC and Monsters, then Combat. A Quick search for 2D Engine for Java had me realised a lot of people use Java 2D for this kind of stuff, but I have found this framework which could help you get started: [Slick 2D Game Librairy](http://slick.cokeandcode.com/index.php) I also found a nice question on SO which could help you get started and point you to book reference for Java Game Development [Creating a Java platform game as easily as possible](http://stackoverflow.com/questions/2894661/creating-a-java-platform-game-as-easily-as-possible) Hope I answered some of your question!
What's been said so far is good advice. Don't worry about the Java haters ;) write in a language thats comfortable for you. If you're looking for some open source art to use check out what's been created as part of the liberated pixel cup! http://lpc.opengameart.org/ Also the open game art forums are a great place to see others creations and learn from their code (or even hop into an existing project). Don't get too ambitious at first... start with a basic concept and build from there. Check out some of the game compos (and participate!) such as ludum dare too for tips and ideas.
if you decide to listen to this dude, [ check this out!](http://www.youtube.com/watch?v=zj1qTrpuXJ8)
If it's not meant to be played and purely a training exercise, go for it. Otherwise I'd seriously advise you to start with a single player game :)
As the OP seems to favor Java as backend, I'd like to recommend [Webbit](http://webbitserver.org/) as very simple Websocket that I found fun to work with. ([Example of Websocket Server setup](https://github.com/webbit/webbit/blob/master/src/test/java/samples/chatroom/Main.java), [The ChatRoom implementation to go with the first](https://github.com/webbit/webbit/blob/master/src/test/java/samples/chatroom/Main.javaT) )
I found working with oracle databases combined wth java goes especially well. Just make sure your machine the program runs on is protected enough in that case, firewalls up to date etc. good luck, i found working with databases one of the most fun things i have ever done. Apart from networking. Protection is something very critical, i know but don't make it to hard on yourself as well.
Curiosity thing here, but how do you feel about http://neo4j.org/ Neo4j? I'm considering tossing it into a current project as an alternative to HSQLDB, and since you've used it I have a common point of reference to understand your opinion. 
MongoDB is pretty easy to set up, and Morphia makes Object-DB mapping seemless with very little configuration
1) This totally depends on what the data is. How is is structured? How does it relate to itself and to other data? What do you want to do with it? It might be that storing it in a text file is good enough, and that whilst you are using it you can just keep it in memory. It might be that you want to use a RDBMS like Postgres or Mysql. It might be that you want to use a Document Store like MongoDB. Or a Key/Value store like Cassandra. Or ..... There are a lot of possible options, and which ones are Right will depend on the use cases you have for the data itself. As for making it protected/encrypted - if your program can load it from the store then so can somebody else. The way to make it protected is to ensure that nobody else can access the store. You can encrypt it if you want, but your program will need some way to decrypt it or else it's useless. This means that it's possible to decrypt, and if somebody really wants to they can work out how to do so. If they can't access the data store at all then they can't do this. Note that if the program is running client-side then this isn't possible, so you might as well make it Good Enough and not worry about making it totally impossible to access. (Encryption of client data files that contain sensitive information makes sense, because it will put people off trying if it's hard. But if the information is that sensitive then some people will still get into it) As for printing, there are APIs that can be used for this. I've not used them personally but they exist. http://docs.oracle.com/javase/tutorial/2d/printing/index.html is probably not a bad place to start here...
Yep, if you don't want to go the DB route, you can always go with Sqlite. Fast and easy, portable files.
If you fail the rename after deleting the original. You'd still have the data, but not where the user would expect. In most OS's can't you just skip the delete and overwrite by rename?
You could use HSQLDB or Derby. pretty standard.
Seriously, I am not firecat318. I really do find them helpful
It looks like the path for your libraries was disconnected somehow.
Try branching your if-else statement. IE. if (xyz) { //stuff } else if { //stuff } and so on. I'm not sure if this is the solution you're looking for, but its all I can think of.
Boom, else if needed. The else will always be used, unless (dealertotal &gt; 21) &amp;&amp; (total &lt; 21) is true. I presume that is not the intended behaviour.
I've tried reconnecting them. :/
Neo4j is great. But comparing it to a relational DB like HSQL is sort of like comparing apples and oranges. They're both mature, stable, open source projects with large user bases and good docs. So on those few points where they're similar, it's a wash. Unsurprisingly, what's best depends on your data and how you'll access it. Data that's most intuitively accessed as a graph of heterogeneous links and entities (eg network topologies) works best with a graph db, while more traditional data is (eg baseball stats) most easily accessed via a relational db. A lot depends on what sort of questions you need your application to answer most quickly. Shortest path between A and B? graph. Highest batting average / mustache width ratio? relational.
How?
If I understand you correctly, you're just sending over a certificate. This will not result in authentication. For authentication you need to prove that you hold the private key pair of the public key contained in the certificate. What you want to do is something like: 1. Server picks a random nonce and sends it to the client. 2. Client encrypts the nonce with its private key, and sends the encrypted nonce and the certificate to the server. 3. Server decrypts the nonce using the public key from the client's certificate. If the server finds the original nonce, the server has authenticated the client. 4. Server increments the nonce by one, encrypts it with its private key, and sends the encrypted nonce + server certificate to the client. 5. Client decrypts the nonce with the server's public key from the certificate. If it is the original nonce + 1, the client has authenticated the server. In addition the certificate singing chains must be validated to the known CA root by both parties or none of this provides any security.
Thank You! But how do I use all my natives so I can compile it universally?
Honestly? Open source it. I am sure there are plenty in the community that would love to help build it. As far as frameworks, there are many and you will want to make sure you do some up front research. Since this is in /r/java, I am assuming you want to use Java solely (no C++ or Python). Have you considered Android?
What is the context in which you're working? What are you trying to do? Sometimes the solution to a problem isn't what you think, and a good question is often more valuable than a good answer. Instead of asking "how do I disable keys", ask "how do I stop the user from ____?" You may find that disabling certain keyboard inputs is not what you actually need to do. You may find it is.
But even If I set new controls that the user doesn't know they can still use WASD unless I have some way to disable them.
Does this help? boolean condition; ... if(condition == true){ if(input.isKeyDown(Input.KEY_W)){ *desired effect occurs* } if(input.isKeyDown(Input.KEY_A)){ *desired effect occurs* } if(input.isKeyDown(Input.KEY_S)){ *desired effect occurs* } if(input.isKeyDown(Input.KEY_D)){ *desired effect occurs* } } This way, whatever you have as the effect of pushing WASD will not happen if the boolean is false.
The question and NoobiestRedditor are retarded. Your game will suck.
Yeh and you should list links to the personal projects on your resume so people can go and see how well they're done
You thought you had a Java problem. Your actual problem is that you're terrible at constructing answerable questions.
ok this is right up my alley. This may not be the answer you want, but if you are writing a server or middleware application, you definitely want to look into the the ["executors" in Java](http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Executor.html). There are an amazing number of classes in java.util.concurrent that you should use instead of rolling your own. Now, with that said, you are trying to solve the problem of "field sharing between threads". For that I would recommend sharing a data structure (synchronized hashmap) between all of the threads and the server. Each thread has a "key" for the map-created at launch time as an argument?-which it uses to find the variable it needs from the map. (be sure to use synchronized structures.) Doing it that way will save a lot of hassle over the concept of changing a thread's internal object instance fields (which would otherwise involve the - dreaded - reflection). Finally, given your example. I just want to suggest the [Subject Class](http://docs.oracle.com/javase/6/docs/api/javax/security/auth/Subject.html) and its doAs method for your username-related operations.
You're sort of vague, but if you want to do this for a text field, try subclassing the default [DocumentFilter](http://docs.oracle.com/javase/6/docs/api/javax/swing/text/DocumentFilter.html) and override the default insertString method to have it throw away input you don't care for. This is how I made textboxes that only allow you to enter numbers, but will accept a leading - and one . somewhere in the number, allowing the user to enter positive or negative real numbers. (Though they can still be jerks and enter the meaningless "-." as thier number, so it doesn't get you out of validating input.)
I use the one that comes with netbeans. Works great for me. Never found one that integrates with eclipse that worked to my liking
Your problem here is a character is easily defined (just a CHAR) whereas a word is not. It can have any number of CHARs from 1 upwards. However depending on your text, if the words are separated by whitespace you could split the string blocks by using regex. ie something like &gt; String ArrayOfWords [] = theTextToSplit.split(//s) More info: http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/String.html and regex info (this stuff is a must if yo are working with text) http://docs.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html#sum
1. Use one of the many excellent Java databases, for example HSQLDB. Derby is limited, but should be perfectly adequate for what you're doing. Regarding encryption, that will be a waste of effort unless you require the user to enter a password every time the app starts. Otherwise the encrypted data and the key to decrypt it (in this case the key is in the app) will be stored together, on disk. Not safe. 2. Java can print just as well as any other programming language. If you want to use the system printing setup dialogs and so on there are flexible and powerful APIs for that. [Here's a tutorial](http://docs.oracle.com/javase/tutorial/2d/printing/index.html).
A quick look over the server code, and I think I've found a potential issue... the server does not verify that the message it receives from the client represents a valid transition from one game state to the next. For example. If black and white both had 8 checkers each before Client 1 sends it's update, and Client 1 updates to say Black has 16 and White has 2 checkers... this is an invalid move, but your code doesn't guard against this. When you have a Client/Server arrangement, the server should do verification of the states, otherwise the need for a server drastically reduces.
I have gotten a lot of good use out of [JProfiler](http://www.ej-technologies.com/products/jprofiler/overview.html)! It integrates with Eclipse very well.
Thanks, Here's the modification to the example that works now ^_^ Big ups to [radiobadvan](http://www.reddit.com/user/radiobadvan) at [r/photoshop](http://www.reddit.com/r/photoshop/) You can use split() to make an array of the string. This should do it: add: var arrWords = theTextToSplit.split(" "); change for loop: for(a=0; a&lt;arrWords.length; a++){ change output: theTextBox.contents = arrWords[a]; 
Personally - I don't think much of those tools - I would be aiming at a pragmatic approach to just writing the code. if you understand that code then understanding what swig can do for you would be easier.
JNA is interesting - I might want to mention it or bring it in at a side issue. I have been on three projects now where JNA was considered or used and all three canned it in the end. The problems with JNA are three: 1) It has a performance cost. 2) It adds complexity to the delivery. 3) This is the killer - has lagged to the point of just not working on non Sun JVMs like IBMs on AIX. JNI its self works everywhere and so - I would like to concentrate on 'pragmatic JNI' based on real world projects.
BTW - thanks loads for getting back to me :)
From what you've described, I’m almost completely certain this will have non-poly growth. If I'm mistaken, then congratulations on your soon-to-be fame. For solving these NP-hard problems, you might want to look into approximation algorithms if you haven’t already.
Yah you're right. On the same note, do you think the client-client conversation facilitated by the server is a good model? I hadn't worked with the client/server model before, but does it make sense to have the client send messages to the server, which then makes sure it gets sent to the correct place?
This video should help. It uses a JTF Library but the logic applies the same. About 25 Minutes in http://www.youtube.com/watch?v=Iua9Klr0lfo And here is the PDF of the lecture https://docs.google.com/viewer?url=http%3A%2F%2Fsee.stanford.edu%2Fmaterials%2Ficspmcs106a%2F22-graphics-events-examples.pdf And in the most basic form this should give you the start you need. GFace would be your rectangle and you need a mouselistener or keylistener public void mouseClicked(MouseEvent e) { GFace face = new GFace(FACE_DIAM, FACE_DIAM); add(face, e.getX(), e.getY()); }
Sounds good. When do you plan on starting? Also it would be cool if you could do some common and complex libraries written in C/C++ such as FFMPEG/OpenCV or some other ones and use those as examples for wrapping them with JNI. Thanks.
http://codingbat.com/java This, a thousand times this. My teacher gave it to me while I was in high school. I never thought stars could mean so much to me.
&gt; When will we have LINQ in Java? Let's be realistic: Probably never. &gt; one “official” Scala developer against a big Microsoft team Actually, two (or three, depending on whether you count people working on supporting techniques). Still better than "none" in Java. Nonetheless, how big is the C# LINQ team? &gt; Let alone the potential of getting into patent wars with Microsoft, should SLICK ever become popular. Not even taking into account that these are software patents, I don't think they will dare to piss off Oracle. :-) &gt; But when will we be able to catch up with Microsoft’s LINQ? As soon as you can reify your lambdas (or arbitrary code) to get an AST back. You could do it without -- accumulating Strings and trying to parse them into an AST at runtime manually -- but that's means entering a world of pain. And you loose the ability to reject invalid queries at compile time. &gt; Java 9 maybe? We can only hope! I'd say the change for that to happen is well below 0.001%. Considering that the original "Java 7" release is now spread over three different versions (due to having "plans" and "missing trains") with some features 10 years late when they will be finally delivered, I don't think they have any capacities left. The potential roadmap until Java 12 was already presented (without "Java LINQ") and I would rather see those features sooner than later. Additionally, LINQ doesn't fit well with Java's language design, because it is expressive, concise and easy to use. I would prefer it if people could stop messing with Java-the-language and concentrate on the JVM instead. The JVM is top-notch, but there is no chance to get Java-the-language up to speed again.
&gt; Who would be the second "official" developer, according to you? cvogt, with xeno_by and odersky building the code reification. The team page also lists other people: https://www.assembla.com/spaces/typesafe-slick/team &gt; but considering the amount of people involved in decisions, management, documentation, sales, etc. at Microsoft [...] You say that they probably needed more people because of infighting, politics and bureaucracy? I wouldn't consider that a plus for Microsoft. :-) &gt; Why Oracle? SLICK is Scala (Typesafe). It would be quite easy for Microsoft to crush Scala It would be a direct attack on Oracle's ecosystem. Oracle knows as good as everyone else that Java is years behind C#/F# and the gap is rapidly widening (Project Roslyn, Type Providers, ...). If they let Microsoft kill Scala, how would they be able to keep up if they couldn't copy all the stuff Scala figured out for them already? :-) We all saw how it worked out when they tried to be "innovative" on their own (Jigsaw). &gt; That's quite pessimistic I would call it realistic: Stuff removed from Java 8: - Jigsaw slips to Java 9 - Unification of ME/SE slips to Java 9, maybe later - Project Nashorn doesn't seem to make it for Java 8, too Stuff already tentatively "planned" for Java 9: - MOP - Java/Native - Better hypervisor support - Large arrays This is a ton of stuff and we can be grateful Oracle manages to deliver **two** of those for Java 9. This doesn't even include things like a unified typesystem, reified generics structs, tail call optimization or value types yet. As long as Oracle keeps their "if we can't shoe-horn a feature into Java-the-language we won't even consider it for the JVM"-approach, features will slip, will be delayed, will be removed.
Yes, you are missing a lot of things. Microsoft's current offering in this space is just magnitudes better than anything Java can provide. JPA's CriteriaBuilder tries to emulate LINQ a bit, but it is just unbelievably verbose, unreadable, painful and more limited than LINQ. Imagine that you have the same, consistent API for working with collections, XML, SQL and Entities. Java forces you to learn and use different APIs for conceptually equivalent operations.
&gt; The team page also lists other people [...] OK, I didn't know. Thanks for the more official link &gt; If they let Microsoft kill Scala, how would they be able to keep up if they couldn't copy all the stuff Scala figured out for them already? :-) +1 to you for that line of thought! :-) &gt; Jigsaw slips to Java 9 Yes, I've just read that, recently... Probably you're right. I'm following the lambda-dev mailing list. I'm specifically interested in extension methods. Brian Goetz and his folks keep insisting that this is just a means to an end for them to implement lambda itself. They just don't want to go all the way on extension methods because they're so afraid it might be "misused" by some evil multiple-inheritance evangelists that loom behind every C++ corner. That's why they even added that "default" keyword to designate extension methods, to keep people from actually writing this weird syntax - why not just omit that keyword and allow for plain old normal methods with all other keywords supported, such as "final", "synchronized", "static"... Oh well :-)
The ability to enhance "Java-the-language" (as [smcj](http://www.reddit.com/r/java/comments/xfsza/when_will_we_have_linq_in_java/c5lz7ds) puts it) is quite intriguing in a way that jOOQ could actually formally specify tuple and record types within Java, and closely interact with the compiler for type-checks. I had recently blogged about this and its (hypothetical) implications on jOOQ: http://blog.jooq.org/2012/06/01/array-list-set-map-tuple-record-literals-in-java/ However, I'm not sure how simple it is to abstract various query APIs into a single one like LINQ does without giving up on 50% of the target query language's features, though. &gt; Also, object queries are an extra abstraction which makes it more difficult to do load and bench testing. That's true. There's always some overhead in constructing query objects, compared to static SQL strings
&gt; There's always some overhead in constructing query objects, compared to static SQL strings That's why you let the compiler do that for you. :-)
I didn't focus on the C# compiler specifically, but `CompiledQuery.Compile` should do the job. I remember that they started doing something like that by default for EF(?) ... I'm not sure anymore about that. But in general, what prevents the compiler from doing: code | | reify | AST | | transform | Query expression | | generate SQL | String It could even run the query against the database in a transaction (with rollback) to figure out if it is not only syntactically and semantically valid, but also supported by the targeted data base. The only thing you loose compared to generating the String at run time is composability, so you wouldn't be able to dynamically combine queries at runtime. I have seen some interesting examples in Scala where a query could be put into a loop without creating multiple queries. Some old slides on that: https://wiki.scala-lang.org/display/SW/ScalaDays+2011+Resources#ScalaDays2011Resources-ScalaIntegratedQuery-moreexpressivedatabasequeries Looks like the work will be integrated into SLICK, too. It really looks like SLICK could benefit a lot from jOOQ: - jOOQ has a mature, SQL-like API which would be a great alternative to the "collection-like" approach. - It can already generate classes/types directly from the database (right?)
&gt; I should really get in touch with the TypeSafe guys... Yes, absolutely. Let me know if I can help with that! I think both approaches (SQL-like and collection-like) have their merits and potentially having them share parts of the same underlying code base and bug fixes would be a great idea. &gt;&gt; It can already generate classes/types directly from the database (right?) &gt;Yes Maybe Scala type macros are the next step here? They aren't implemented yet, but as far as I understand it, they would allow you to directly inject the data base types and tables into the compiler, without having to go through code generation. Edit: Thinking a bit about it, if the collection-like API and the SQL-like API would be based on the same libraries, it might even be able to offer some refactorings/conversions between those two.
replace the escaped double quotes with single quotes?
Should be " and c.customername like ? "+ and ps.setString(1, "%"+name+"%");
ORA-03115: unsupported network datatype or representation It seems my version of Oracle is out of date for this. Thanks though. 
First hit on Google has solution: https://forums.oracle.com/forums/thread.jspa?threadID=2341381
&gt; Yes, absolutely. Let me know if I can help with that! Sure! How are you affiliated? I have studied at the EPFL from 2001-2006, I've had classes with Martin Odersky in the early Scala days, so maybe I could catch up with them? &gt; [...] without having to go through code generation. That would require an active connection to a development database while coding, right?
Thanks for the info. I'm biased towards AWS as it is. I was more interested in hearing about experiences using it. I'm just getting started and it does seem like a quick and easy place to learn and play in.
Bill Cook was speaking about a very interesting alternative at the [JVMLS](http://openjdk.java.net/projects/mlvm/jvmlangsummit/) today, [Batches](http://www.cs.utexas.edu/~wcook/Drafts/2012/2012-07-JVM-Summit-Batches.pdf). Video of the talk should be online in a couple of weeks.
The class files could be parsed by either reflection or a decompiler. All you'd need to know is the signature and which were part of the interface and which aren't. This is an intriguing problem, I'll be working up some code samples after work today if it hasn't been answered already.
LINQ is more like a core language construct, not a framework. Asking if LINQ is distributed and synchronized is like asking if a do...while loop or a switch statement is distributed and synchronized. The back-end that handles the query expressed by the LINQ statement can do whatever it needs to do (e.g. talk to a native data structure, a database, a cache, a Hadoop cluster, or whatever). LINQ back ends are just classes.
Ok found a partial solution. javap -public &lt;class&gt; &gt;&gt; MySrcFile.java The classpath is already hooked up, so there is no need to go fishing for the .class files in the jars.
So, anyone never tried to launch Netbeans with the option "--laf GTK"? Check this: [http://wiki.netbeans.org/FaqCustomLaf](http://wiki.netbeans.org/FaqCustomLaf)
http://thenewboston.org/list.php?cat=31 This is the best and most complete tutorial I have found and i really like it. This would be my recommendation. And its free!!
Does it need to be repeatable? If not, http://docs.oracle.com/javase/6/docs/api/java/util/UUID.html is your friend. You could of course use this, and store the value in the user.home directory.
mine returned: 111101111119111611111111111
No, that's not what it does. It's not grabbing the name, it's grabbing the display name, so each one should be unique. EDIT: That is to say, unless you have the exact same model of network interfaces. EDIT #2: Thank you, by the way, upvote!
As per request... 77451264922560283284110251396410554685216534481239843020161686882931715291860019456270810472238785516433445245798802734081 But I have to tell you... this is a really bad way to generate a unique identifier for a machine. There are far to many variables to guarantee (a) the stability of the resulting identifier and (b) the uniqueness of the resulting string. First off, *NetworkInterface.getNetworkInterfaces()* relies directly on native code and does not have any contract as to how the returned elements are ordered. Depending on the operating system (and its patches), the JDK/JRE the call could return the elements in different order. Hell, it is not even guaranteed that calls to this method in different VM instances (at the same time on the same machine) yield the same enumeration result. Secondly, the number of *NetworkInterface*s can change any time, thanks to the many virtual interfaces used nowadays - i.e. VMWare/VirtualBox (or any virtualisation software), VNCs, firewalls... and so on. Lastly, a *NetworkInterface*'s *displayName* itself is intended to be human readable and not technical. As such, the name could in theory change quite often - i.e. updating the NIC driver, installing a OS patch, editing the windows registry or linux' */etc/network/interfaces* may all lead to a change in interface names. The only reliable way to obtain a unique identifier for the system you're running on is to use a hardware identifier (CPU or Motherboard serial, for example). Sadly - as there is no way (afaik) to retrieve that information from Java - you will, most likely, have to write your own native code for this purpose.
&gt; That is to say, unless you have the exact same model of network interfaces. Which a lot of people will have. As I pointed out, display names are nearly always the same on Linux boxes. EDIT: On linux the name and display name are the same.
That might work. I don't see why you want to avoid using the MAC? It's been *designed* to be a unique identifier for any network device. Legitimate manufacturers go to great lengths to ensure that their MACs are unique. Any combination of random numbers will be just that, random numbers. There's no guarantee they will be unique, and you have to save them to reproduce them. If you really don't want to use the MAC directly, how about using the MAC or part of the MAC as a seed for your random number generator? That way it's at least reproducible. I recommend looking at the http://docs.oracle.com/javase/6/docs/api/java/util/UUID.html class mentioned by mogrim.
If you are using Unity this is a great plugin.
I meant use both MAC and the random one that's divisible. That way if someone spoofs the MAC address they have another obstacle. Thank you.
You can not trust the client, ever. If you use a saved divisor, the user will find it. I recommend looking into challenge-response algorithms if you want to verify that the client is not faking their identity. 
The "Run Out of the Box" one was a bit ropey... Blu-Ray does have Java Run out of the box, it's part of their standard... I can't speak for Kindle, Android is re-compiled Java (don't shoot me down Androidians, you write in Java, you run in a Java like Virtual Machine)... PC's don't have Java installed out the box, as out of the box is a bare metal drive with no OS at all. Install Windows... you don't get Java, you have to have either install it yourself, or have your system pre-configured by companies such as Dell. Tenuous I know, but PC *IS* the correct answer for this reason.
Thanks, I'll be checking these out.
If you surf along the java websites you WILL fall over duke.
That's what I use. --laf com.sun.java.swing.plaf.gtk.GTKLookAndFeel
the 20th question and answers didn't appear for me so I couldn't select an answer and thus FAIL. waste of time.
This should be called "Java Trivia," not "Java IQ Test."
80% le sigh... The Generics question was incorrect and this &lt;E&gt; had no meaning. The JVM does not run Python or Ruby. It runs Jython and JRuby and they are not 100% compatible with the reference implementation. &gt;.&lt; Also, how is OpenJDK not open-source? It says so right there on the page!
Yeah... but in a 20 question test there are much more interesting and useful questions.
You can go higher than 85% only if you seriously hate java....
Only missed which platform doesn't run Java out of the box. 
http://docs.oracle.com/javaee/6/tutorial/doc/index.html You linked EE5. 
You are doing it wrong and you should feel bad &gt;.&lt;
I'm comfortable describing this quiz as a piece of shit.
it throws a "NoSuchElementException: No line found". what input should I put there for it to run properly? Also, line 4 is MASSIVE. Try splitting it into multiple lines, it'd make it easier for you to read/code.
[The Java Tutorials](http://docs.oracle.com/javase/tutorial/) are a good resource. They also provide trails there for learning java, but I think you should buy yourself a book for that (I would've recommended the one I used, but it's german). But if you want to learn something about Generics/Collections/Swing/2dGraphics the tutorials include excellent trails for that!
BTW - great idea about FFMPEG!
I appreciate the thorough commenting on the private fields. Unfortunately, a user of this class is not going to see those comments unless they dig into the source code, because you haven't documented this in the API. In these cases, I would lean toward placing the documentation in the getter, then using an @see in the documentation of the setter. Upvote for your commentary on data modeling.
If you don't put any more than this into it, I don't think you really need a separate Name class at all. I would merge it into Student.
Canvas is in the awt package, but there is no real Swing counterpart like "JCanvas". You can instead subclass JComponent and override the paint method. Oh, and I think you are right, that you should not mix Swing and AWT stuff.
Component.createImage() "creates an off-screen drawable image to be used for double buffering." See the [apidoc](http://docs.oracle.com/javase/6/docs/api/java/awt/Component.html). This image will be empty if you don't draw something on it.
I suppose you want to take a screenshot of your application? Then you can also use: Robot robot = new Robot(); BufferedImage screenshot = robot.createScreenCapture(rectangle); You can take a screenshot of the whole screen: Toolkit toolkit = Toolkit.getDefaultToolkit(); Dimension screenSize = toolkit.getScreenSize(); Rectangle rectangle = new Rectangle(0, 0, screenSize.width, screenSize.height); Or just of one of your Components: Point loc = component.getLocationOnScreen(); int width = component.getWidth(); int height = component.getHeight(); Rectangle rectangle = new Rectangle(loc.x, loc.y, width, height);
Contrary to what others stated, I see no harm in documenting "the obvious" - as what might be obvious to you may not be for your collegues or other developer working on your code 3+ years in the future. As a rule of thumb I comment every class, field and method of my work. For *@param* and *@return* I normally state if a parameter or return value is **null**able and if other limitations apply (i.e. allowed minumum and maximum value, length, if a collection could be empty or is unmodifiable). For example, a comment might look like this: /** * Sets this user's first name. * [p] * There is no restriction on the charset used for this name. The name may * contain spaces when one (or more) middle names are included. * [p] * Setting a [code]null[/code] value may lead to unexpected results when * persisting the user object. * * @param fName The name to set; nullable. */ public void setfName(String fName) { this.fName = fName; } Note: Replace *[* and *]* with *&lt;* and *&gt;* respectively. But my comments might be a bit of a special case, as I am paid to write code that is later maintained by the client's developers.
In the second style, I've found that the braces are more commonly not indented, so they line up with example(), and that would make the actual method code (foo), not indented over twice. But as long as you're consistent with formatting style, it doesn't matter terribly much. For the record, I prefer the first style.
generally i code as follows example() { foo } my brain is able to process code much more quickly when the opening and closing brackets have the same indent, particularly when there are nested loops
Someone forgot to escape their brackets: &lt;div class="question"&gt; What does the letter "E" do when you create an interface with a generic specification like this: public void interface List &lt;e&gt;(){ } &lt;/e&gt; &lt;/div&gt; 
Thanks for the heads up! The blog is now updated with the correct link to EE6. 
Same thing, mine's an abbreviation suggested by the Netbeans wiki itself.
What aspect of the post is trolling? I'm not trolling and fail to see how the post could even be considered trolling.
Actually, since the class is called Name the fields should be shortened to "first" and "last". I'm assuming this is for a homework assignment, otherwise there would be a lot more to be said about human naming.
Ignoring the private vs getter comments that I'm in the wrong on... &gt; Lines 10-12 // empty comment block obviously not needed. Generated by Eclipse. Oops. &gt; Lines 15-17 // field is well-named, documentation not needed. Context is provided by the comment, as in we're not expecting implementors to provide this value and that it should come from the provider. &gt; Lines 20-23 // User.getId() is an obvious concept. Maybe not the right place for it but just saying "id" and hope they get it right is... optimistic. And this project **doesn't** have any place generating the IDs yet either. That wasn't part of the scope of the exercise, really. &gt; From a style standpoint non-javadoc comments, should just use the shorter '//' commenting. I accept that private fields are the wrong way to comment... but what does /**/ or // matter? Creating a block for important concepts seems the key to me. Saving lines is a bit pointless. &gt; &gt; This is not for storing user profile or configuration data because that data is not relevant in the security realm. &gt; Should be removed. The header should tell you what the class is, not all of the things it isn't. Users of the class will understand naturally that there are no getProfile() or getConfiguration() accessors available. The point is that the header shows the goals and non-goals of the class. If I come back in a year I don't want to see getConfiguration() or getProfile() methods added, either. Insight into the architecture, where no other documentation may exist, is found here.
To be clear, I'm not trying to start a battle or think I have to be right, just taking some time to discuss for kicks. It's kind of fun to critique other people's code without much idea of their project and see what they come back with. &gt; Context is provided by the comment, as in we're not expecting implementors to provide this value and that it should come from the provider. Hmm, still seems like the comment should move to the API with the responsibility for populating User instances. User is a POJO, it shouldn't itself care much about how the data it has got there. &gt; they get it right is I guess it depends on what you mean by they? I'm assuming clients of User.java will have it populated by some OpenId api. Do the clients care how the id was generated or do they just need to understand that it's a unique id? Thinking about it more it seems odd to have two identifiers serving the same purpose. The User class could have an encodeOpenIdUrl() method for convenience if you do need to pass it across the wire. I'm guessing this was thought about though and there are some other reasons for maintaining two ids. &gt; I accept that private fields are the wrong way to comment. They are only the wrong way to javadoc for the API, internal class comments are fine. &gt; Saving lines is a bit pointless. Not really, at least not to everyone. With trimming, as a developer I can, at a glance, understand your User class: private static final long serialVersionUID = 1L; private String openIdUrl = null; // set by openId provider private String systemId = null; // Local identifier private byte[] secret = null; // base secret for generating keys // human-readable alias, so the user can identify themselves as more than just a URL (openId) private String alias = null; private Date registeredTimestamp = null; Of course, you are correct that if this is an important API class then the doc should be moved to the getters/setters (usually just doc the getters unless the setters have an odd side-effect or validation rules). The slahes are great at separating what's javadoc and internal documentation. &gt; Insight into the architecture, where no other documentation may exist, is found here. Hmm, maybe. You know, I guess I didn't consider that you may be a lead developer on a team and just stubbing out classes for your junior developers who may not get what you were going for and do stupid stuff? I was thinking of it as a user of your API so to me, it'd be obvious what the class couldn't do because those fields/methods woud be missing.
&gt; Note: Replace [ and ] or better - use *{@code null}*
Unless the getter/setter has a side-effect such as validation or lazy instancing, do not comment them. You're just cluttering up your code with things everybody knows already.
You only need to comment getters and setters if they do something other than simply getting or immediately setting the field. For example: class Person { String fName, lName; public String getName() { return getFName() + getLName(); } } You should probably comment getName() with /** Returns first name concatenated to last name */, so that there's no confusion as to what a "name" is, specifically. public void setName(String name) { String[] names = name.split("\\s+"); if(names.length &lt; 2) throw new IllegalArgumentException("name "+name+" failed test: name.split(\"\\\s+\".length &lt; 2"); setFName(names[0]); setLName(names[names.length-1]); } should probably be commented with something like /** * Set names from one name. First name and last name must be delimited with whitespace. * The parameter will have .split("\\s+") applied to it. * The first name will become the first string in that result, and the last name will become the last string in that result. * @param name Must consist of at least two words separated by \s+ * @throws IllegalArgumentException if name consists of fewer than two words */
thanks, that's very helpful in my example would it make sense to comment /** Returns first name concatenated to last name */ for toString()? /** Returns first name concatenated to last name */ public String toString() { return firstName + " " + lastName; }
Yeah, you should almost always comment toString, because it's an inherited method that you're overriding, and so you're changing its behavior from the superclass. For things like getters and setters though, just watch out for code/comment pollution weakening your signal/noise ratio. Working with undocked code is only a little more annoying than wading through excessive comments on things that are obvious.
That's not what I said - having already indicated my preference [here](http://www.reddit.com/r/java/comments/xk22f/hi_reddit_could_you_help_me_out_with_my_java/c5n1ufm).
Unless you're a lone coder who never shares code with anyone, do everyone a favor and stick to the official style. I can relate to the feeling though, as I've used my home invented formatting style for quite some time and kept using it when I started programming professionally with a team. But you're simply not making friends by sticking to some awkward style that you defend by using some arbitrary criteria. In the end I gave up and used the style everyone else was using. This was years ago and whenever I see my old code now I shudder.
I wouldn't call this "new-school". Event busses are a well known construct. It's one of those things that looks pleasing architecturally, but once you actually build an application around it you'll quickly realize that debugging and tracing your code becomes very hard very fast. Personally I'd recommend thinking twice (and then trice) before using bus based architectures.
&gt;To be clear, I'm not trying to start a battle or think I have to be right, just taking some time to discuss for kicks. It's kind of fun to critique other people's code without much idea of their project and see what they come back with. This is **exactly** the kind of thing that this reddit needs to be used for. I never get people looking at my code other than "it works" or "you comment a lot". There is way too much ego in coding and constructive feedback is a valuable resource. We're building houses and not painting pictures so a disciplined approach is well warranted. Further: a developer who strives to learn is more valuable than a developer who doesn't; generally speaking. &gt; Hmm, still seems like the comment should move to the API with the responsibility for populating User instances. User is a POJO, it shouldn't itself care much about how the data it has got there. You're right but I think we've reached the limit of using this code as an example. This project doesn't **have** any such part (yet). &gt; I guess it depends on what you mean by they? I'm assuming clients of User.java will have it populated by some OpenId api. Do the clients care how the id was generated or do they just need to understand that it's a unique id? You touch on it later but I don't write a lot of APIs. I seem to end up writing more projects/products and making architectural notes as I go. I guess I've gotten lazy on what I provide to external users. &gt; I guess it depends on what you mean by they? I'm assuming clients of User.java will have it populated by some OpenId api. Do the clients care how the id was generated or do they just need to understand that it's a unique id? &gt;Thinking about it more it seems odd to have two identifiers serving the same purpose. The User class could have an encodeOpenIdUrl() method for convenience if you do need to pass it across the wire. &gt;I'm guessing this was thought about though and there are some other reasons for maintaining two ids. Side note: In this case it's mainly because allowing other services and such to have access to your specific openid url would probably be bad. As such passing it around *externally* for things like URLs, cookies, etc would be a bad idea. I didn't give this a lot of thought and this project will eventually get stripped down to nothing but an idea, anyway. It was more an idea to have a shorthand token for referring to a user, that could be used as a lookup key, that couldn't be reversed into a username/openid. &gt; &gt;I accept that private fields are the wrong way to comment. &gt;They are only the wrong way to javadoc for the API, internal class comments are fine. I agree. I just thought that javadoc was heretofore doing something magical with beans. I don't know why. (Maybe it should?) &gt; Not really, at least not to everyone. With trimming, as a developer I can, at a glance, understand your User class... This is **so cool**. I like big blocks and like to digest everything one piece at a time. I don't like big runs of variables together. I can read what you wrote just fine... I just don't like it as much. I suspect it's a chunking problem but you've put it in two groups so it isn't too bad. &gt; Of course, you are correct that if this is an important API class then the doc should be moved to the getters/setters (usually just doc the getters unless the setters have an odd side-effect or validation rules). Again, method vs field access. I tend to do everything (JAXB, Hibernate, etc) in field access mode. I wasn't taught to do it either way and since the **fields** are what concern me I usually do it that way. Unless we're dealing with an interface. I'm really starting to wish there was a javadoc annotation @bean now... &gt; I guess I didn't consider that you may be a lead developer on a team... Ow! I'm actually not. Not really. I am a consultant and usually work one or two person gigs. &gt; ...and just stubbing out classes for your junior developers who may not get what you were going for and do stupid stuff? They're usually for myself, sometimes for co-workers. I like to keep up a running dialog of what is going on, almost like a journal. I'm really good at comment maintenance and removing cruft. I've worked hard to develop that skill. It has paid dividends because my consulting company focuses on teaching over selling and fixing. We'd rather teach the client to be more effective with our products because a better developer is a better customer and a better client. (They're more comfortable with our products at any rate.) I never want to walk out with them feeling like I did "voodoo" to make things work. &gt; I was thinking of it as a user of your API so to me, it'd be obvious what the class couldn't do because those fields/methods woud be missing. I'm getting better at enforcing this by coding to an interface and documenting that well. I feel like we wandered away from the given example but that was the point. I think we can sum it up like this: 1. Internally things like intent, justification, methodology, algorithmic choices. 2. Externally how it should be used, *sometimes* ignoring the obvious I wonder if the OP is still reading... Anyway, this is an interesting project that came to mind: http://code.google.com/p/gag/ @AhaMoment @BossMadeMeDoIt @HandsOff @IAmAwesome @LegacySucks And, oh man, it's in **maven central** now. Awesome. And there's a code agent for enforcement... wow.
Lol. Those annotations are hilarious. Will have to check that project out. 
I almost like the way C# has done it... for shame. The implied getters and setters are a bit of "magic" but it allows the properties/fields to stand alone as the important part of the class.
You hava a couple mistakes in your program. I'm not going to do the work for you, but I wrote something similar that should help clear up a few things. [Link](http://ideone.com/5gKWD)
I totally agree. JSF 2.1 felt very... heavy-handed for what I was trying to accomplish. Trying to wrestle with the component tree and trying to do ajax without directly writing javascript felt more like a desktop framework like Swing, except way more disjointed and confusing. All in all I wasn't impressed. This might have been specific for what I was trying to build, though, dunno.
Thanks for the reply, dyseca, I'll be sure to check that out! Would you be able to point me in the direction to where I could start making some simple games to see what it's like? Or should I look into C++ if I want to do that?
This method is the first method the Java compiler sees in order to start running a program. There is a reason why those keywords are there. Here's why: &gt; public public is an accessibility modifier in Java. It means that the method can be accessed by entities outside the scope of the defining class. Since this method needs to be accessed by something outside the class (the compiler) it needs to be public &gt; static Having a method *static*, means that it can be called without needing to make an instance of the class first. The compiler can therefore run the main() method without making an instance of the class it contains it. &gt; void Void means that the method doesn't return anything. Since it's the first method run, it doesn't need to return anything to the compiler, and therefore it has been set to void. &gt; main The name of the method &gt; String[] args This is an array of arguments. These are used when you're running your application on command prompt. I'm sorry this is not *ELI5*, but I hope this helps
Is there supposed to be a link to a tutorial somewhere?
Find a small program that you want to use, and create it. The main key, is it would be something you would actually use, so that while you are using it, you are thinking about how it works, and what can make it better. Yes, it's all probably been made before, but not by you. That's where it gets fun. Some examples * games * * Text-based, like zork * * A solitare card game * productivity apps * * An inventory system (good for insurance to track what you own) * * A simple twitter app (post, read) I'm sure there are thousands more
So, move it?
I guess it is a little different if you are not used to it. I do not understand why you had trouble. Ajax is simple with JSF 2.0. All you have to do is use the f:ajax tag in your html page and give the event, method name, and the portion of screen to update. I am not sure how it could be made simpler. Much cleaner and less error prone than writing JavaScript. Here is a simple save button with Ajax command. &lt;h:button value="Save" &gt; &lt;f:ajax event="click" listener="#{report.saveReport}" render="report" /&gt; &lt;/h:button&gt;
Well, we'd need to know what the other interfaces specify. Also, indent everything by another 4 spaces so it'll be properly formatted for reddit.
wh... what am I reading? This article is nearly incomprehensible, and what I *can* understand is nearly useless. If you edit a .java file without recompiling it may cause errors when you run?
 public interface CustomerReader { public void getCustomer(String email); ArrayList&lt;Customer&gt; getCustomers(); } public interface CustomerWriter{ boolean addCustomer(Customer c); boolean updatecustomer(Customer c); boolean deleteCustomer(Customer c); } public interface CustomerConstants{ public static final double EMAIL_ADDRESS_SIZE = 30; public static final double FIRST_NAME = 15; public static final double LAST_NAME = 15; } public interface CustomerDAO extends CustomerReader, CustomerWriter, CustomerConstants { } The class that implements CustomerDAO interface again, with 4 space indentation: import CustomerMaintApp.CustomerDAO; public class DAOFactory implements CustomerDAO { public static CustomerDAO getCustomerDAO(String cDAO) { CustomerDAO cDAO = new CustomerTextFile(); return cDAO; } }
Ok, so DAOFactory has to implement each of addCustomer, updatecustomer (You may want to correct the capitalization there), deleteCustomer, getCustomer, and getCustomers. Right now it doesn't implement any of those. As an orthogonal concern, something called "getCustomer" is generally expected to return something, so either you should change its name or its return type.
Sorry I can't link but I think codingbat may be better if you don't like math as much. EDIT: can't link because I'm on my phone
Project Jigsaw is delayed *again*?
Man, forget lambdas and just get me better collections handling even List&lt;A&gt; filteredList = Collections.filter(List&lt;A&gt;, FilterHandler&lt;A&gt;); List&lt;B&gt; mappedList = Collections.map(List&lt;A&gt;, MapperHandler&lt;A,B&gt;); would be better than what we have now... Also higher on my list than lambdas: * typed nulls. * Implement more Guava style splitters and joiners * Functions as objects (Though I guess we would get lambdas as part of this...) 
I figured out what I was doing wrong - I got my program to run. I've run into another issue but I'm going to work with it for while before I go running for help. Thank you!
Just like directly passing parameters 15 and "fred" is like an inline variable without a name.
[PlayFramework](http://www.playframework.org/) is really neat. I never had so much fun developing a web app.
Hotswap is also still awesome.
JavaServer Faces with PrimeFaces. They have prebuilt front end components that can be created with a simple tag. http://www.primefaces.org/showcase/ui/home.jsf 
Anyone knows how well it supports GWT and appengine?
It is pretty damn fun, and as a bonus it works well.
Start playing around with some of the simpler of the popular frameworks: * Vaadin, a web framework that makes it possible to create modern HTML5/CSS/JS and AJAX-driven active web sites while only coding in Java (the rest is automatically generated). WYSIWYG editor included. * Swing, the built-in desktop app GUI framework. While putting together interfaces by hand coding isn't exactly trivial, Google has aqui-hired a company making an excellent WYSIWYG editor for Swing called WindowBuilder, which makes it trivial. * Android, the mobile OS. If you know Java, why not take the opportunity to delve into the wonderful world of mobile apps? The platform takes some getting used to, but mobile apps are fun to develop and incredibly easy to share with colleagues and friends. * Slick for game development. Not sure if you're into game development, but I've always found it a fun and rewarding way to learn and use languages. Slick is a game development framework that provides a mid-level wrapper for OpenGL, OpenAL, input, fonts, etc.
Use Java EE (specifically JSF, JPA, EJB, CDI, Bean Validation) and a few add-ons like PrimeFaces and OmniFaces. Guave will probably speed up your development as well. Start with some good tutorial and example project. The JBoss Maven Archetype for a Java EE 6 app isn't bad. Another nice example is this one: http://jdevelopment.nl/sample-crud-app-with-jsf-and-richfaces and my own http://henk53.wordpress.com/2012/04/15/jsf2-primefaces3-ejb3-jpa2-integration-project As far as pure tooling goes, you really don't want to work without an IDE (Eclipse, NetBeans, IntelliJ), but I hope you're already passed that stage. Thereafter a major productivity gain is using JRebel. Keep in mind it's not *perfect*, but it's very good.
Before buying a book, try a free online tutorial, like [this one](http://docs.oracle.com/javase/tutorial/). Because, you know, it's free. If you haven't done any programming at all, you might want to start out with a different language. Java is a really powerful language, but it can be complicated and intimidating if you're just starting out. I'd recommend [Python](http://docs.python.org/tutorial/) as a starter language. If your target is just to make Android apps, check out [AppInventor](http://appinventor.mit.edu/). It lets you build apps for your phone using a visual drag-n-drop interface, with little or no actual Java code.
Caffeine.
You're better off learning things the right way than the quick way. Unless, of course, you enjoy repeating the same thing four times over in which case by all means rush rush rush. Your hands down best resource is the Java SE tutorials on Oracle's site. They get linked often because they are the best. Use them. If that's not enough try learning Python or Lisp or Ruby. They're amazing and very powerful languages in their own right and ignoring them because they can't help you on arbitrary task you've assigned for yourself is silly. 
It's a silly thing to try to explain to a five-year-old.
Always the thenewboston http://thenewboston.org/list.php?cat=6
`nextInt()` will always blow up if the next token is not an integer. You can make sure that the next token is an integer, and that nextInt() won't blow up, by using `hasNextInt()`. e.g.: if (scanner.hasNextInt()) { // should be safe, since nextInt() assured us that the next token is an int int n = scanner.nextInt(); } Alternatively, you can just use `next()` to get the next token as a String, then convert it to an `int` yourself. String str = scanner.next(); try { int n = Integer.parseInt(str); } catch (NumberFormatException ex) { System.out.println("That's not an integer!: "+str); } 
Android Apps are not really written in Java. The [Dalvik VM](http://en.wikipedia.org/wiki/Dalvik_%28software%29) uses the same general language syntax, but a totally different standard library. So, apart from learning the base language and how to program in general, if your goal is only to write software for Dalvik, you don't need to learn a lot of the actual Java Class Library (Java SE/ME).
Rails on JRuby or using JAX-RS.
Could you show the class code and give an explanation of the program architecture? It's easier to help someone when you know how their code is being implemented.
I googled a bit myself and I found [this](http://ww0.java4.datastructures.net/). Maybe check it out? I don't know if this is what you're looking for but I hope it'll give you a good hand!
While Minecraft uses LWJGL, I'd suggest you also look at JMonkeyEngine - it's really impressively good, and easy to work with.
Thank you for your help, however when I try this, I get the error " type java.awt.List does not take parameters" . What does this error mean?
you imported java.awt.List instead of java.util.List
Please help, i have spend 20 minutes googling and using trial and error but i still can figure out this error: "Exception in thread "main" java.lang.NullPointerException" at JavaGame.&lt;init&gt;(JavaGame.java:115) at JavaGame.main(JavaGame.java:413) my line 115 is gameLbl1.setForeground(Color.red); while line 413 is Game frame = new Game(); 
NullPointerException means even though "gameLbl1" exists, it's not initialized to anything. In other words, gameLbl1 == null. Figure out why gameLbl1 is null and fix it, or get rid of that line of code.
All jsheets told you to do was to create an ArrayList of labels, and use a loop to create 10 label objects and add them to the list. You seemed to have deleted other code that initialized your gamelbls. I recommend you read the [Java tutorials](http://docs.oracle.com/javase/tutorial/) completely before you work continue working. Do the "Trials covering the basics" up to and including Swing, then do "Creating a GUI with Swing" under "Creating Graphical User Interfaces"
What I would do : Use a [timer](http://docs.oracle.com/javase/tutorial/uiswing/misc/timer.html) that will call a method on your time interval. In that method, use a SwingWorker to download your weather picture in the background, and then update your label/frame with it in the done() method. You might even be able to skip the file/disk part and use memory streams to download that picture (I never had to do this, but this should be doable). I don't see where you would need to create new instance of anything (except for your SwingWorker).
He's using ArrayLists, not arrays, so to reference the labels he would need to use the get() method from the List interface http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#get(int) 
If you did then you would probably be creating an instance of Boo inside the setter so you could use the constructor. Which would work but you would likely need to save that off to another placeholder. Once you are done in the setter the instance would die right?
sure, I assume you mean something like this: public class Foo { private Boo boo = new Boo(); public Foo (Bar bar){ this.boo.setBar(bar); } } public class Boo { private Bar bar; public Bar getBar(){ return this.bar; } public void setBar(Bar bar){ this.bar = bar; } }
 int nrOfLabels = 10; JLabel[] labels = new JLabel[nrOfLabels]; for (int i=0; i &lt; nrOfLabels; i++) { labels[i] = new JLabel(String.valueOf(i), JLabel.CENTER); }
You're welcome ;)
A little Off Topic but still relevant: When you're dealing with creating a lot of entities (like your examples) and would have to create a lot of Getters, Setters, equals(), hashCode(), toString() and so on, I would highly recommend using [project lombok](http://projectlombok.org/) E.g. the source code for the *Student* class as described in your comments would look something like this: @Getter @AllArgsConstructor public class Student { private Name name; // This is calling from the Name class, giving it the name 'name' private Address address; // This calls from Address, giving it the name 'address' private char gender; private String course, college; private int gradePointAverage, id, age, level; } You can also use.. * **@Setter** to create Setters for every attribute. * **@ToString** to create an appropriate toString() method. * **@EqualsAndHashCode** to automatically generate the equals() and hashCode() methods. Plus if you only want them to consider the id attribute, you just type: **@EqualsAndHashCode(of={"id"})** * **@Data** as a shortcut for **@Getter**, **@Setter**, **@RequiredArgsConstructor**. Lombok also has some other nice features and I would really recommend checking it out. It really helps to enhance the readability of your code.
Why is this any better than antlr?
gameLbl3 in this case corresponds to labels[2]. So use labels[2].setForeground() instead. labels[i] = setForeground(Colour MAGENTA); This code assigns the return value of setForeground() to the variable labels[i], which is NOT what you want to do.
Thanks. Both of those explanations make sense. So is this one possible solution? public Name (){ this.firstName = ""; this.lastName = ""; } where I set the first name and last name = the empty string this.name.setFirstName(firstName); this.name.setLastName(lastName); and pass the parameters into the setters?
Hey , thanks you so much for your help! I seriously appreciate it ! I should have come on to reddit instead of trial and error-ing this out for 4 days
Damn. That will teach me not to comment on /r/js after a long night of gaming.
Probably. Without knowing a lot more about your project, I can't say more than that.
I could use an eclipse version of this...
did anyone see these slides presented ? they appear to be talking about 2 separate topics, ie DCE *and* coroutines. if so, the reddit title is misleading. i don't know much about DCE, but am hoping that it might eventually lead to a high-quality java REPL. the best we have right now is beanshell (which is almost-java) to implement coroutines, lukas is hacking the jvm. while this might eventually be included in oracle java, it's probably years off at best. in the mean time, kilim is a library that provides a similar capacity with any jvm (including oracle java 6 and 7) by "weaving" the code either at compile time or when loaded by the classloader. the woven code is approximately 20% slower than lukas' solution (ie native speed) but both should support millions of fibers. kilim provides an actor framework, but the fiber/coroutine can be accessed directly as well https://github.com/kilim/kilim http://www.malhar.net/sriram/kilim/
with the GTK laf, highlighting is messed up. eg, in the Project window, Ctrl+Arrow (either up or down) should leave the previous entry highlighted and move the cursor to the next entry. once you've selected the next item that you want, use Ctrl+Space to add to the selection. i use this metaphor for comparing files, ie Tools &gt;&gt; Diff with the GTK laf, the cursor isn't highlighted until you make the selection, so you have to guess (or count) where you're at. so i'm forced to use "--laf Nimbus"
Voila: http://docs.oracle.com/javase/tutorial/java/generics/
If I were to do that, i.e. public Name(){} I would have assumed that this would mean the instance variables would not be initialised when the object is created? Which would be wrong? 
indeed, and I would like to see them "in action" as well.
They are automatically initialized and set to null when the object is created. If you call the getter before using the setter null will be returned. edit: Also, when you do this: public Name (){ this.firstName = firstName; this.lastName = lastName; } both sides of the equals operator are referring to the same variable. So nothing useful is happening here.
As /u/Lortimus said, the first example uses generics, specifying a *type* parameter, ensuring that only `Student` objects are added to the list. The second example uses no type parameter (the "raw type"), so any type of object can be added to the list, and objects taken from the list will need to be cast to the proper type. You should never use use the raw type. Using type parameters can give you a compile-time guarantee that your code is type safe. There is an excellent chapter on generics in the book "Effective Java," which happens be available as a [free sample chapter](http://java.sun.com/docs/books/effective/). 
What do you mean a player clicks in the game state?
"It’s not just ‘yet another compiler compiler’. It aims to help building DSLs in java Dynamically"; 'Dynamic' means one could use the new language just after definition of the language.No command-line tool need to use to 'compile' the grammar. And this is all done in pure java, no other grammar needed to learn. (In antlr, you must get familiar with the antlr grammar first. And after written down your grammar, you would use a comman-line tool to compile the grammar, it will give you some generated source files which is nearly unreadable and tells you to put them into somewhere of your project directory. In dropincc.java, those trouble would never troubles...)
Cheers!
Well I put it pretty simplified before, in a bigger game i'd do it like so: MainClass contains gameloop and a screen variable, screen can be set to a Screen object GameScreen/TitleScreen etc extend Screen object gameloop sends down a line of update() render() commands with screen.update(), screen.render() the gamescreen contains a level object which loads all the startup objects and contains all the instantiated objects. the gamescreen contains an input object which listens to mouse input. the gamescreen passes an update command down through its own update() method like so: public void update(){ level.update(input); } the level update function will then do: public void update(){ player.update(); otherobjects.update(); }
[Agile Principles, Patterns and Practices in C#](http://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258). The online version is from the older Java book. This book is hands down the best book I've read on how to do Object Oriented Programming.
Cyclic dependencies are bad *in general* because they introduce tight coupling. Tight coupling may be okay if the objects in question will always be released together - Common Closure Principle. In which case you want to always package the classes together. However, *if* you see a need to allow components to be released separately or allow third-party integration, you can break the cyclic dependency by decoupling the concrete instances by inserting an abstract interface. This is also known as Dependency Inversion. So, in this case, you decouple the player from the map by introducing an interface `Collideable` (for instance) which the map needs for collision detection between objects and a way for the map to tell the object that a collision has occurred. The player implements the interface, but the map only deals with the interface not the player. Similarly, you can decouple the map from the player by introducing an interface `TileProvider` which provides tile information at specified coordinates. The map doesn't know about the player directly and the player doesn't know about the map directly. They are hands off from one another except through very specific conduits. Note, you add complexity to the system through indirection, but it promotes decoupling and maximizes code reuse. You have to decide based upon your requirements whether the effort to maximize code reuse is worth it or actually even needed. Implementation simplicity at the expense of tighter coupling is okay until *proven* otherwise. [See here](http://www.objectmentor.com/resources/articles/dip.pdf) for examples from the even older C++ version of the book I referenced.
You can introduce an abstract interface, call it 'MouseListener'. Then, do something like this: init() { controller = new controller(); level = new level(controller); } class GameLevel { public GameLevel(Controller controller) { player = new player(); // implements MouseListener controller.addMouseListener(player); } } class Controller { public addMouseListener(MouseListener l) { mouseListeners.add(l); } } passEvents(event e) { if(e.action = Input.LeftMouseClick) { for(MouseListener listener : controller.getMouseListeners()) { listener.leftMouseClick(e); } } } class Player implements MouseListener { public void leftMouseClick(MouseEvent e) { shoot(); } }
Was going to click, but then saw the subreddit.
There's nothing wrong with Charmander, and in the late game it's pretty kickass, but the first couple gyms are killer. So with C++. C++ is described in *[A Brief, Incomplete, and Mostly Wrong History of Programming Languages](http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html)* as &gt;1983 - Bjarne Stroustrup bolts everything he's ever heard of onto C to create C++. The resulting language is so complex that programs must be sent to the future to be compiled by the Skynet artificial intelligence. Build times suffer. Skynet's motives for performing the service remain unclear but spokespeople from the future say "there is nothing to be concerned about, baby," in an Austrian accented monotones. There is some speculation that Skynet is nothing more than a pretentious buffer overrun. Java's more like Bulbasaur. It's easy to pick up, but as you use it more, you notice it become fat (in terms of syntax verbosity) and slow (Not in terms of code execution but in terms of how long it takes you to write all the boilerplate). I don't know who Squirtle is.
Get 5-10 more years of development experience, learn a few more languages, read a few enterprise architecture books and then you might have become one. It's one of those things where the title is retroactive. You start being an architect by pointing out problems and solutions that others missed. Eventually you'll become a de facto architect and the official title will come after that.
Today the defacto way to design something is though tests. Some people might disagree with me here but I believe that Test Driven Development can help. You may want to do a small top level design but before you write any code you must always write the unit test for that code first. This way you can see how it is going to be used before you spend time coding it. Each of your tests should represent a piece of functionality in the code base. As you write each test you implment just enough code to get it to pass before you move on to the next one. Never regressing by letting old tests fail. I usually start with a top level class and work out it's relationship to other objects in the design through interfaces. Then I'll write tests for each of the dependent objects and work top down like this. This is known as the London style TDD. There are other ways as well. I reccommend this book: [Growing object orientated design through tests](http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1344244032&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests) Also this one, (but it's a bit long winded and it's a different style of TDD) [Test Driven - Kent Beck](http://www.amazon.com/exec/obidos/ASIN/0321146530/javaworld) 
The best one that I've tried is [Marathon](http://marathontesting.com/). This was a year ago last I tried and it worked very well. Although, I can't remember if works when components are named differently. Sorry I can't help you there.
I am not sure if the components are being renamed or if it is just the way QF-test seems to pick them up. During different runs I will randomly add a number or for example "menu.action.button" "menu.command.button".
Free Job Posting &amp; CV Access @ www.river2c.com Hi Employer / Consultant, www.river2c.com is a free Job Portal for Job Posting and CV Access. Please post your job requirements and we will forward your Job requirement to social net working site and other Job seekers contacts that we have. Surely you will get good response. Also, frequently we are getting new CV updates from Job Seekers. We provide absolutely free CV access and you can view the Candidate CV for your requirements. Please support us to serve you better Thanks River2c 
Looks really interesting! How do you compare it to [Parboiled](https://github.com/sirthias/parboiled/wiki/parboiled-for-Java)?
Interfaces can help here, not alleviating the problem completely, but decoupling from concrete classes.
Selinium is another option.
 Core Java Developer
DCEVM has 0 framework integration and I've looked at the code. They don't meet their claims. No way they properly handle hierarchy and interface changes the way they claim without performance hit. Also not appserver agnostic. 
I've installed this and gone, yeah I'll definitely try this over the weekend and then it's just sat there lol. It's hard to motivate when you code every day 9-5 but this definitely looks like the best option. 
Java, reddit hates it. But pretty much the software industry lives by it.
It's not a Java application... They used Java to download and launch the application, but the application itself was written in Unity3d. Because of Unity, it will not work on Linux or mobile devices.
Finally supporting annotations and limited parametric testing has made the case for JUnit stronger, but I think it's still not advanced enough for anything but the simplest of tests without a lot of modifications. TestNG has much better support for data-driven tests and has way better control over which tests execute and how they should react to failures. In TestNG, you can easily group related tests together and have explicit dependencies. That way, if a known pre-requisite test fails, the rest of the tests can be skipped instead of being marked as failed. I'm all for JUnit to just copy all the great features of TestNG, but it's not there yet.
If you're already in a developer role try getting on a project where you will be dev lead working with existing SA's (they will have done the POC probably). Do this x times, improving your knowledge etc as you go along and apply for the SA role on a project when you think you're ready.
I couldn't recommend JRebel more strongly. It's amazing.
Compared with what other language? And what JVM in particular?
Selenium is very good, we have connected them to automation using Jenkins/Hudson to make life of QA a lot nicer.
Holy indentation, batman! And I thought a single tab was excessive. 
Funny, because I see it another way: Java is one of the FEW options for high-performance enterprise development with large teams, for several reasons. First, there is an enterprise tool set around the development. Static analysis, complexity analysis, finding bug patterns. Second, there is a huge library of well-tested code. You don't need to be writing your own database connection pools or object pools, or defining a new encryption algorithm. Third, is the analysis tools. I can hook a profiler up to the JVM, in production, and see exactly what is being called, how long it takes, how many objects are created (and what type they are). I can look at memory thrash, garbage collection, cpu usage, and even detect deadlocks automatically. Fourth, is the monitoring. Same as the profiler, Java EE has the idea of monitoring via JMX. You can expose all kinds of amazing metrics and have the app itself determine how healthy it is. You bubble that health up to a big IP balancer, and hook that up to monitoring systems, and you tie that all into an elastic scaling system, and you have scalability. Fifth, the ecosystem is rich for performance. Between multiple garbage collectors, distributed caching, distributed application locks, distributed management, there are a lot of options for doing great code. The difference between a dual core 2.2ghz box with 8gb ram and a 4xdual-core 2.2ghz box with 96 gigs of ram is a few thousand dollars. You'll pay a decent java contractor at LEAST 75/hr, likely a lot more if a contracting company is involved. It's just not worth it to have somebody reinvent the wheel when it comes to some of this stuff, instead of throwing money at the problem. It's the very definition of pound wise and penny foolish. Also, java is plenty fast to develop in if you're good at it. Java is an ecosystem, not just a language. You learn the libraries and the tools that make you efficient. And since most non-java people's opinions of java were formed at 1.2, it's no wonder they don't know why people are loving java 7. 
Do those even exist?
Well I asked for comparison to other languages and one that would not have the issues you are talking about. So I just picked one.
Great! An Eclipse version would be nice indeed ;)
No, Java is only used to download and launch the program.
Just took a look at Spock. Looks pretty great and I look forward to playing around with it. I use Groovy with TestNG right now and it looks like Spock has some pretty good ideas. As to your second point on saying that "If it isn't easy and straightforward to test then you need to refactor or rewrite until it is." is not applicable in many real-world scenarios. If you have complete flexibility and freedom to redesign and refactor at will, then sure, it's probably a good idea to clean house if some design flaw is making testing a pain. But, there are many instances where that level of freedom is not available and one must figure out a way to test with the design they've been given. These are the scenarios where testing is most difficult and ignoring these scenarios, I think, does a disservice to the discussion. Thanks for the heads up on Spock though, it does look pretty awesome. 
This is exactly what I was going for. Thanks for the help.
I just started using logback because of how long log4j went silent. Why should I worry about log4j2? The API would require a switch from SLF4J unless someone writes a wrapper. The thing that scares me most, though, is how the governance on the 1.x series was mismanaged.
Perhaps there are rigid places where you aren't given the ability to stay current with modern design and programming. Find a new job. If you inherit legacy code which has existing functionality that is difficult to test and needs some crazy features of your test framework, your first order of business should be to begin refactoring this code to be more maintainable and testable. That way you can stop incurring technical debt and move the project to a more flexible and better designed system. If you have to use partial mocks, you're doing it wrong (even the Mockito developers say this). I am not ignoring them, I'm flat out stating if you have them you need to refactor before you continue to incur massive technical debt on a project which is doomed to be unstable or difficult to maintain.
Think of it this way, if I hire a plumber to do a job and then tell him to install a shower head underneath the sink and put the toilet on the wall, do you really expect him to do this? No, because his professional reputation is at stake. Allowing managers to tell you you cannot refactor to improve the project is like putting a toilet on the wall. It's probably functional, but you really don't have a great way of testing that.
How do you steer this thing? ;) On a more serious note, this app causes flickering when going into full-screen view. I am running on a dual-monitor setup.
To test the toilet on the wall, I'll just mock out gravity and change it's direction. Thus allowing complete testing of the toilet's functionality ;)
That's my point, though. When you have to do crazy shit to mock something, you really should be saying "Wait, this is a lot of technical debt I need to pay for later maybe I can fix it now." If you aren't arguing this to "the powers that be" then you really are selling your career short. :/
Oops, well NASA does have some other Java apps out there.
Given how popular SLF4J is, I imagine a wrapper will be written pretty quickly.
JUL, despite it's flaws, is at least baked in. Call it logging facade fatigue, but I'm sticking with JUL until a *very* good reason to change presents itself.
Why can't you use bone cp or c3p0 and just combine your apps into a single app using the command line to select which to execute. This way they could all share a connection pool. Otherwise you'll need a container such as tomcat as dakboy suggested. 
Monitoring JAVA using Log4J,Logstash, StatsD and Monitis
It was meant as a tongue-in-cheek reference to how even though mocking might allow me to do something analogous to testing, it does nothing to resolve the major problem of the toilet being placed on the wall.
It is totally worth it, especially right now. The engine's in a good place with good documentation, good tutorials and a really helpful community, and it's pretty bug-free. Even something simple like making boxes rotate in 3D... blew my mind.
It constantly amazes me that Oracle has not bought out MongoDB in order to destroy it, like they are in the process of doing to MySQL. 
There are also some rather serious problems with using JSON as a database record format: 1. It can't handle circular references. 2. Parsing and serializing JSON, over and over, is slow. A database should have a very efficient binary protocol for communicating with applications. Having symbolic names for items is well and good, but compact binary representations for them should be agreed upon exactly once during the database connection and used thereafter.
I agree with dakboy and DeliveryNinja. The easiest way to use connection pooling is by using a java web container. I personally prefer to load them up in JNDI. Jetty is a very lightweight container that can be fired up in the background. I set it up like this: &lt;?xml version="1.0"?&gt; &lt;!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://jetty.mortbay.org/configure.dtd"&gt; &lt;Configure class="org.mortbay.jetty.webapp.WebAppContext"&gt; &lt;New id="someid" class="org.mortbay.jetty.plus.naming.Resource"&gt; &lt;Arg&gt;jdbc/jndiname&lt;/Arg&gt; &lt;Arg&gt; &lt;New class="org.apache.commons.dbcp.BasicDataSource"&gt; &lt;Set name="driverClassName"&gt;org.postgresql.Driver&lt;/Set&gt; &lt;Set name="url"&gt; jdbc:postgresql://postgressrv:5432/dbname?logUnclosedConnections=true &lt;/Set&gt; &lt;Set name="username"&gt;XXXXX&lt;/Set&gt; &lt;Set name="password"&gt;XXXXX&lt;/Set&gt; &lt;Set name="maxActive"&gt;15&lt;/Set&gt; &lt;Set name="maxIdle"&gt;10&lt;/Set&gt; &lt;Set name="maxWait"&gt;5000&lt;/Set&gt; &lt;Set name="defaultAutoCommit"&gt;true&lt;/Set&gt; &lt;/New&gt; &lt;/Arg&gt; &lt;/New&gt; &lt;/Configure&gt; &gt; Note: I'm using dbcp. You can use any one you choose... Your web app would then grab connections from the pool to do your executions. Then you can use Hessian (my favorite), SOAP, RMI, Rest, etc.... to do your execution. The web container buys you so much right off the bat. Then you can just configure your scripts to connect via your chosen communication method. This will allow you to distribute the scripts to many different machines. I prefer the JNDI route for one main reason: I can configure each environment (dev, qa, production) with the same jndi registry names. This way my war is the same for each environment.. This is what it looks like in tomcat: &lt;Resource name="jdbc/jndiname" auth="Container" type="javax.sql.DataSource" maxActive="20" maxIdle="5" maxWait="5000" username="XXXXX" password="XXXX" driverClassName="org.postgresql.Driver" url="jdbc:postgresql://postgressrv/somedatabase"/&gt; Tomcat may be more manageable since there's probably a standard install for your OS. You'll find full documentation [here](http://people.apache.org/~fhanik/jdbc-pool/jdbc-pool.html).
Also, there is no silver bullet.
No, they're noisy as hell, but not wildly popular.
I recommend JavaServer Faces. To see some examples of what is possible check out http://www.primefaces.org/showcase-labs/ui/home.jsf. It is very easy to create a rich front end very quickly. Hibernate ORM is also a good skill set to have.
Java is just the implementation language. The neural network is the important part. Just like the cancer is the noteworty part, not the boobs in which the cancer grows.
This is the exact correct answer. Jax-RS is lightning fast and super easy to set up. Leave your REST app running on Tomcat and fire up your individual process which calls the webservice for data whenever you need it.
Yep, we leverage it heavily, however I have found that the new Webdriver2 stuff needs quite a bit of customization to run effective tests across a grid. I would probably use it with TestNG next go-around instead of Junit.
I suppose one could make that argument. As a Java developer I am interested in hearing what others are doing with the language.
in php, redbean gets me close, and in grails/groovy, gorm gives me that. I create my domain/model/objects only, identifying the relationships between them (php lacks here because you can't specify other object types in a class definition, only visibility modifiers), and the framework manages creating/altering the SQL for me as I go along. I may want/need to tweak it by hand later, but for prototyping, just creating objects and populating them, without ever having to touch SQL (but still having the benefits of schemafied data stored in a relational database) is really really useful/fun/great/awesome.
MongoDB doesn't store database records using JSON, that is an external representation of the underlying [BSON] (http://www.mongodb.org/display/DOCS/BSON) objects that are used in data storage and interchange. BSON is designed to be lightweight, traversable, and efficient.
Spring MVC 3.1 and Jersey are "modern Java web frameworks" that I would recommend to try. Where Jersey is more of a REST backend framework, and Spring MVC more full-fledged MVC framework. Spring Roo is an effort to appeal to Rails developers, but in my opinion it hide too many details for "new to Java" developers (can be hard to debug &amp; understand when something goes wrong).
Plus, there are tons of high school students (well, not tons, but more than a few) doing the *exact* same thing; that is, using neural networks to analyze tissue samples for cancer. It is a fairly common project at top-level science fairs. At the most recent Intel ISEF, there were at least two or three projects that did this exact thing, with different kinds of cancer.
Well, yeah, but if we're going to find a new baseline to abuse to death other than relational databases, then it had better be freaking close to perfect. For most people, RDBMS technology is close enough to a silver bullet; that's why it gets (ab)used so much.
Grails deserves an investigation. Beyond the similarity in name-spelling, Grails was originally inspired by the 'convention over configuration' of Rails years ago, and I think has (to the extent possible) stayed fairly true to those root. That said, I'm a bit biased as a I publish groovymag.com (shameless plug) an have been working with Grails for 5 years now. If you're coming from Ruby you may appreciate using Groovy as a primary language - it can be as dynamic as you want, or as static as you want (interops seamlessly with 'pure' Java too). To the extent Struts (1 or 2) is still a player, it's on already established/running apps - I don't know anyone who's *started* an app in Struts in the past few years, only people who've joined projects which were already based on Struts. EDIT: "widely used" (saw that now). struts1 might fit that bill, but you probably *really* don't want to be using it. not because of its enjoyability factor, but because it's legacy - nothing new is being developed in it, the community is moving on. I think I understand the motivation behind your caveat, but you probably do want to take in to account something beyond 'wide use'. As others have said, Spring MVC *is* widely used, and is what's under the hood in Grails. So, while Grails itself isn't used as widely as I'd like personally, it's built on the stuff that is, just with nicer wrapping to make my life easier :) 
Link to the application: [Cloud 4 Cancer](http://cloud4cancer.appspot.com/) Project summary: [link](https://sites.google.com/a/googlesciencefair.com/science-fair-2012-project-64a91af142a459cfb486ed5cb05f803b2eb41354-1333130785-87/home)
Please rain more, I need to know a 17 year old isn't exponentially smarter then me. 
The problem with that is you can't start the while loop without having the input from the scanner. And if you already have the input from the scanner, what will go in the while loop? In that type of setup an if statement would work better, which is mentioned in other places on this post. There must be ways to do it in a loop, though. There *are* ways. In this particular case where we're looking for an int, it'd be much simpler to use an infinite loop rather than a while loop. That gets rid of the problem where you need the input to start the while loop... etc.: Scanner scanner = new Scanner(System.in); int input; for(;;){ System.out.println("Enter a number: "); if(scanner.hasNextInt()){ input = scanner.nextInt(); break; } System.out.println("Please try again"); scanner.next(); } Or you could create a conversation delegate, and make a method like this: package lib.acuddlyheadcrab.conversation //an example of what you might want to call a library import java.io.PrintStream; import java.util.Scanner; public class Prompter { public static int promtInt(Scanner scanner, PrintStream sys_out, String prompt, String invalid){ for(;;){ sys_out.println(prompt); if(scanner.hasNextInt()) return scanner.nextInt(); sys_out.println(invalid); scanner.next(); } } } And then use it like this: public static void main(String[] args){ int input = promtInt(new Scanner(System.in), System.out, "Enter a valid number: ", "Please try again"); System.out.println(input+" was your number"); } EDIT: I hope someone can correct me on the while loop thing! I would like to see if there's a more efficient way of doing it in java (I think there are different ways in other languages)
Java compared to learning C/C++ as a first language is a cakewalk. sorry to hear that.
yeah sorry I didnt fully explain that's exactly what I meant. great explanation though.
Well, this whole story reminds me of a science faire where a 13 years old boy claimed that by studying leaves orientation and fibonacci sequence (that in some plants are actually related) he found a way to improve the performance of solar panels. Needless to say, that is a very well known problem, and engineers have already found the optimal angle to harvest the maximum amount of energy from the Sun: the boy's technique was vastly suboptimal. This leaded a science blogger to have the very sad job to debunk it ([here's a mirror of the original article](http://www.eco-scams.com/archives/746)). The problem of course is not in the boy's science fair project, nor in the gal's research. It is in the sloppy journalists that happily sensationalize whatever they do not understand, without referring to experts. Edit: I accidentally solar panels. 
Thank you :)
I was hoping for more sugar in the method header as well as at the callsite :/ something like static T aggregate( T initialValue, Collection&lt;T&gt; target, T(T runningT, T newT) aggregator ) { T result = initialValue; for( T t : target ) { result = aggregator(result, t); } return result; }
It is entirely possible to do that if you include a library that defines functor interfaces, such as [Functional Java](http://functionaljava.org/). The functional JVM languages already have a class of functor interfaces included in their respective class libraries. static T aggregate(T initialValue, Collection&lt;T&gt; target, F2&lt;T, T, T&gt; aggregator) { T result = initialValue; for( T t : target ) { result = aggregator(result, t); } return result; }
This kind of thing: public static void destroy(Object obj){ obj = null; } I've seen this in both academic code and production code. 
Hm. The way I always approached it was with a Two&lt;A,B&gt; class that wrapped two objects of different types into a single object, and made callsites and the wrapped functions into a right mess. And forget about closures.
They should rename it to "destroyReference()".
I'm embarrassed because I don't see the issue with the third example. I've seen things like: for(int x = 0; x &lt; 5; x++) { if(x == 3) { doSomething(); } }
If that was the only reference to that object, will the garbage collector erase it? I am not saying this is good code by *any* means. I know that you should not expect anything out of the garbage collector, but is that what it would do?
Elementary mistakes I see every day: - failure to follow naming conventions (naming classes with verbs, naming methods with nouns, failing at CamelCase / camelCase, etc) - inability to understand basic arithmetic, numeric data types (e.g. not knowing how to write a method to determine whether two numbers are approximately equal -- any kind of approximately equal!) - failure to understand exceptions, despite explanation - inability to type "throw new Exception(args);" despite literally saying "write that" - unwillingness to use libraries - failure to understand variable scope - failure to understand "static" - ArrayList foo = new ArrayList(); - thinking Java is interpreted - thinking it's Java's fault their code is slow Those are just the ones I have seen frequently.
Great! And the circular references?
By passing the object to the destroy function you actually create a new reference to it. You can expect the garbage collector to free an object some time after there is no more reference to it. If you have a local variable referencing an object, that will expire after the scope is left: public void foo() { Bar myBar = new Bar(); if(myBar.whatever()) { Baz theBaz = new Baz(); theBaz.doStuff(); } // theBaz is gone now. myBar.someOtherStuff(); // after this method exits, myBar will also be freed. }
&gt; Line 1 - This is the class name and class header. yes &gt; Line 2 to Line 7 - Everything in here is the class body? yeap &gt; Line 3 - This is the method? That is the main method yes &gt; Line 4 to Line 6 - This is the method body? yeap &gt; Line 5 - System is a class and Println is a method? What's the deal here? We can have classes within classes? and the same for methods? Why is that? OK. allow me to explain System.out.println(""). *System* is a class that contains many static methods, which means that you don't have to initialise System (with the new keyword) in order to use *out*. *out* is a method in System which returns a PrintStream instance. PrintStream is a class made to give output to a certain medium, in this case, the console. it contains a method called println(), which prints the string you give it to the console and adds a line. So, to sum up, System calls a static method *out* which has a method called *println()* which prints your string to the console. &gt; Oh also, what is "String[] args" This is an array of String objects. These are used by your command prompt to run your Java application So say you have this simple application: public class Hello { public static void main(String[] args) { String firstName = args[0]; String lastName = args[1]; System.out.println("Hello " + firstName + " " + lastName); } } as you can see, it takes the first two elements of the *args* array and uses them as first name and last name to print "Hello &lt;first&gt; &lt;lastname&gt;". Normally when you run an application using your command prompt you run it like this: &gt; java HelloApp but because it uses the two arguments of your String array, you need to add your first name and last name like this: &gt; java HelloApp Ben Dover now, when you run your application like this it will print out this: *Hello Ben Dover*. Does this make it clearer?
More like "createNewReferenceAndThenDestroyItImmediately(Object)"...
if(result%2==0)return true; else return false;
ArrayList is generic, so it's something like ArrayList&lt;Type&gt; blabla = new ArrayList&lt;Type&gt;(); or since java 1.7, you can just do ArrayList&lt;Type&gt; blabla = new ArrayList&lt;&gt;();
public boolean productIsEven(int a, int b) { int i = a*b; if (i%2 == 0) { return true; } else { return false; } }
Thank you! 
It is not there to destroy the object, only to do other cleanup stuff when the object is "destroyed" but I am positive you know this 
should be: List foo = new ArrayList(SIZE ESTIMATE); or List&lt;Class&gt; foo = new ArrayList&lt;Class&gt;(SIZE ESTIMATE);
If you are going to "work" in a Oracle-centric place, take a look at ADF 11g - it really simplifies your life, once you master it. 
ADF 11g.
re: the first example: 1 - no curly braces - that bugs me. 2 - I often originally write like this during dev because I often find myself wanting to go back in to the true/false blocks and put logging in. it's easier to do that with that style vs rewriting a one-liner in to multiple lines again. I may refactor it down to one after that section is done and tested, but have assumed that the compiler and hotspot would optimize it out anyway. Example #2 - I don't see the issue. if(cond) do stuff (then return) else do other stuff. ????
This is Java, you want /r/javascript
I should have made a throwaway account, because I bet this is going to get back to me somehow. Oh well. But that first one hit the nail on the head. English is the second language for 75% of my other coworkers, so I've seen boolean methods named something along the lines of "isSomethingExists()" and variables named "coOrdinationSomething". However, naming methods with nouns in some instances I might not have a problem with, especially if they're static utility methods... but I suppose those same methods could be rephrased to be verbs. Wanna cringe? All of our package names start with a capital letter.
What's the rational behind the size estimate? Is there any credible source that demonstrates a significant performance improvement by specifying the size of the list? I only see heartache and trouble when the list grows beyond expectations. On the other hand, I suppose it at least documents what the expectations were at some given time. And I'm assuming here that the size estimate doesn't limit you in some way. Doesn't this take something that should be very basic -- creating a list, and making it potentially dangerous?
Play! should be somewhat familiar.
Yet another logging API for the Java platform is *not* what we need.
I voted for: void foo() default {..} because you are providing default implementation, so it feels natural to me to specify the default implementation right after the default keyword. It reads void foo() with default implementation ... 
default void foo() made the most sense to me but I certainly understand the other argument. I just liked how default, in this case, replaces the scope modifier.
But the scope is no different.. it does not modify the method in anyway like protected private or static. You can call it exactly like before. The difference is the implementation. (Which is why I went for void foo default). The argument stands, this is just an abstract class labelled as an interface. 
Why does it even need a keyword?
If you don't specify an initial size, you only get a capacity of 10. If you exceed this, a new internal array will be created to a larger size and the original contents will be *copied* to the new array. This process will be repeated *each time* you exceed the capacity. This can make the add method potentially run in O(n) time which otherwise runs in O(1) time. By providing an appropriate initial capacity, you ensure O(1) performance of add.
Your second example is really just a matter of preference. The else clause does no harm and may make the program flow clearer - you don't have to notice the return statement to know that this code will not always be called. It depends on the situation though.
You are correct, in many cases readability of code is more important than shortness. The examples here are oversimplified and I don't think one can say that either form of the second example is "wrong". I was just pointing out what the OP probably meant by that example.
What I'd like to know is how this is going to compile. Scala already has this, more or less: Scala traits compile to Java interfaces, but Scala traits' methods can have implementations. So, a trait `T` compiles to Java interface `T.class`, plus Java class `T$class` containing static methods corresponding to the implementations of `T`'s methods. Then, whenever a class extends `T`, the compiler fills in implementations of `T`'s methods, which call the actual implementations on `T$class`. It's a clever and very useful workaround for the JVM's lack of built-in support for multiple inheritance. (Curse whoever thought it was a good idea to not allow straight-up multiple inheritance like C++, but that's another matter.) But there's a very sticky problem here. If, at some later point, another concrete method is added to `T`, classes extending it won't receive their generated implementations of the new method unless they are recompiled, because that happens at compile time! So. Is Java 8 going to have the same problem, or do Oracle's people have some kind of trick up their sleeve? More importantly, will Scala be able to use it to solve the aforementioned problem with traits?
banuday17 has the right answer. Often you know what the list size will be or at least you can make a better guess than the default. Sizing improves the performance. Using List instead of ArrayList is always preferred. You should always code to the interfaces. When you do that you don't have to change other code if you - for example - changed ArrayList into LinkedList.
Keywords like that usually go before the method name, like scope and return type. To me, it's more intuitive for the default to go there as well.
I've never seen a while loop written like that, only `for (Object o : list)`. Then again, I rarely see while loops at all. Java's for-each construct really needs to make an implicit index available. That's the reason, 90% of the time, when I write a for loop with index.
I remember that Odersky mentioned that Oracle's design was really close to supporting Scala's use case, but fell short of it. With Oracle being in control of the JVM, I expect that the VM would resolve those additional methods at classloading. Classes implementing an interface with default methods won't need to put those methods into their own class, right? So it shouldn't matter if another method gets added. Or do they use some bridge-method-like design were the bridge-method's target is resolved at compile-time?
I'll probably stylize it as void foo() default { ... } which looks good to me.
Isn't MongoDB open source under the AGPL license? Its my understanding that if someone bought them out, the community could always just fork the code and continue using/maintaining the Free version.
Beautiful! I love the Robot class. This must have taken so much tinkering to get it just right though. :O
MySQL is dual licensed under the GPL, yet Oracle is doing well at killing it. Hudson was under the GPL, and Oracle made a stab at killing it (luckily that one was saved).
it took about 10 minutes to experiment with different rates :-)
In addition if default is first it looks like it is a modifier for the method. Imagine explaining in an Intro to Java class that you can have a method have "default" access, but you don't use the word "default" to do so. Edit: I know that all methods in an interface are always pubic, but it is still could be confusing to someone new to the language.
I think having the keyword fits more with the Java ideology of being especially verbose about the semantics where possible. This proposal significantly changes the semantics of method polymorphism and exposing that to the user by having them explicitly declare the keyword is much less implicit behavior. The other, less philosophical argument is that it allows the semantics of default implementations to exist outside the context of an interface. I'm not sure that this would be useful in java *right now*, per se, but it might be useful in the future. There are plenty of ways the language could evolve so that having multiple implementations attached to a particular method handle that are chosen based on calling context would be a possibility. Something like this: void foo() default { } exceptWhen(System.getProperty("threadsafe.bitches")) { } 
I have completely given up on Oracle to get anything substantial done. The issue is that language feature support is not decoupled from Java: Java's compatibility needs just drag the whole ecosystem down regardless of the other languages' stance on compatibility.
&gt;pubic
Can anyone prove that this is significant speedwise? In all of my synthetic tests, it mattered more what order items were added than whether or not it was generic or you specified the size. While I do believe the underlying implementation matters, if there is a larger truth makes all of this moot -- then it is NOT significant (speedwise) whether you specify the size or whether or not it is generic. (I always specify the types for readability and saftey, that's not my concern here)
Does someone have usefull links to read up on this? I mean Java's argument passing model...
The problem is that they don't even consider adding features to the VM where it is not immediately clear how Java uses them. First it has to be shoe-horned into Java, otherwise the feature is dead. The work on `invokedynamic` started because Microsoft's DLR was a marketing nightmare for Sun, not because they took any other language except Java seriously. Today, guess who will be the main user of InDy/MethodHandles? Right, Java.
Hmmm, my tests show that it is actually faster not to specify! This goes completely against expectations. Anybody know why this would happen. java version "1.7.0_04" Java(TM) SE Runtime Environment (build 1.7.0_04-b20) Java HotSpot(TM) Server VM (build 23.0-b21, mixed mode) on CentOS release 5.8 (Final) (32bit) Linux 2.6.18-308.11.1.el5 #1 SMP Tue Jul 10 08:49:28 EDT 2012 i686 i686 i386 GNU/Linux package test; import java.util.*; public class Simple{ public static void main(String[] args){ int n = 1000000; if(args[0].equals("no")){ System.out.println("no"); test(n,new ArrayList&lt;Integer&gt;()); } else{ System.out.println("yes"); test(n,new ArrayList&lt;Integer&gt;(n)); } } private static void test(int n, ArrayList&lt;Integer&gt; list){ Random r = new Random(n); for(int i=0;i&lt;n;i++) list.add(r.nextInt()); } } \***Edit**: setting Xms larger makes the preallocation version faster. But there should be no difference in the amount of memory being allocated to each version. So what is the VM doing?
This one was a big problem for me. The doPost method for a web app that I inherited was ~5,000 lines long. It was a big, long, nasty if statement. Another code smell I run into frequently is copy and paste code. I often find methods and sometimes whole classes that only differ by a line or two. The worst example of copy and paste coding was in a class that has about 30 properties, the person that wrote it did the telescoping constructor thing where each constructor built a SQL statement, created a connection, ran a query and (sometimes) closed the connection. The whole class was almost 10k lines long.
Saying that add can be O(n) is misleading and/or wrong. A single call to add might take n-cycles, or it might take 1... This does not make it sometimes O(1) and sometimes O(n). Regardless of initial size, ArrayList.add runs in "amortized constant time" (n adds take O(n) time), see its javadocs. add would be O(n) only if the list's capacity were increased by a constant # when resized. (In the implementation I am looking at, it is actually increased by 150% + 1)
except for annotations which provide the same type of "defaulting" semantics public @interface UnderConstruction { String owner() default "Patrick Naughton"; String value() default "Object is Under Construction."; String createdBy() default "Mike Sheridan"; String lastChanged() default "08/07/2011"; } I think the default keyword is fundamentally different from the others applied to a method; the others, like static, public, and final, change the way client code interacts with it. And I too would think it especially confusing for new developers to see the keyword "default" preceding methods, and later learn that there is a "default" access scope / qualifier, and they are not the same thing....
I don't know of any links but I will try my best to explain it briefly: In Java, you are not, as a programmer, allowed to directly specify or access a location in memory. The concept just doesn't exist in the Java language. In a language like C and C++, you can do things like this: int some_value = 0; int* p = &amp;some_value; //the &amp; operator yields the memory location of some_value As a C programmer, you can directly specify exactly what memory address you would like to use through the pointer 'p' and the reference operator '&amp;'. You know the memory location of 'some_value' and can do as you wish with it. This is a very powerful feature of these languages. You can also do this: void setValToTen(int&amp; val){ val = 10; } //elsewhere in the program setValToTen(some_value);//some_value now hold the value of 10 The above code will set the value at the memory location specified by &amp;val in the function's arguments, to 10. This is called "passing-by-reference". However, if you tried to do the same thing without the '&amp;' operator, the result would be different: void setValToTen(int val){ val = 10; } //elsewhere in the program setValToTen(some_value);//some_value did not change In this case the function declares a new int variable 'val', which copies the value of the variable that was passed in, into a new memory location. The function assigns 'val' to 10, and returns. 'val' was declared in the scope of this function and with its own memory location, which is now out of scope and irrelevant to the rest of the program. This is called "passing-by-value". Basically, the function created a new variable that was a copy of what is being passed in, but has nothing to do with the original variable outside of being of the same type and holding the same value. They are two different variables stored in two different memory locations, even though the data stored is identical. The first two code examples do not have an equivalent in Java. Specifying and accessing memory locations directly is not a component of the Java language. Therefor, there is no pass-by-reference in Java. So, this Java code: public static void destroy(Object obj){ obj = null; } //elsewhere in the program destroy(someObject); is useless, because it is the equivalent to what happened in the previous example. The method is creating an object reference of type Object, 'obj' and copying the data from the variable passed in, which in this case is object reference data, to 'obj'. 'obj' is set to null and the method returns, having accomplished nothing. The other confusing part is that even though Java does not utilize pass-by-reference, object variables in Java are called "references" (which are themselves a special type of pointer to a pointer). So, you pass object references by value..... 
&gt;April 12, 2010 by Eric Caspole How timely of you. 
So you are looking for a proxy connection to the database? I'm wondering, what are you planning on getting for the effort?
&gt; For most people, RDBMS technology is close enough to a silver bullet; True. But your not factoring in that hipsters don't do mainstream.
Well yeah, that's just the definitions of pass-by-value and pass-by-reference (sorry for not saying I wanted a more "in-depth" explination). Like, List in Java get passed-by-reference, right? Why?
Psh, try telling all this to somebody well-versed in λ-calculus.
All parameters in Java are passed-by-value. There are no exceptions to this. Primitive types and object references are both passed-by-value. As for List, using a variable of type List as a method argument would indicate that the method is accepting as a parameter any object that implements the List interface. The same rules stated above apply to this scenario as well. There is no pass-by-reference in Java. Again, do not confuse pass-by-reference with object "references. See my above statement: &gt;The other confusing part is that even though Java does not utilize pass-by-reference, object variables in Java are called "references" (which are themselves a special type of pointer to a pointer). So, you pass object references by value.....
Right.... they use ROT13'ed EBCDIC and flat files just to show us all how it's REALLY done. Oh... and processors made of jello shots with memory units made out of hash brownies. That's just how they roll, amirite?
&gt; your compiler won't even allow you to make an instance of System, because it's declared as a final class. &amp;#3232;\_&amp;#3232;
Maps in general aren't too complex, IMO. Java `HashMap`, on the other hand, might be the exception to this rule, because their use often requires you to implement `hashCode()` for the classes you use as keys, and that's definitely not beginner friendly. I'd go for `TreeMap` in a tutorial like this.
Instead of discussing syntax, I'd like to open up [another discussion](http://codecrafter.blogspot.ca/2012/06/java-8-virtual-extension-methods-are.html).
I just got promoted to Software Architect and the best advice I can give is to just try to be involved at every level of software development and try to understand everything thats going on. In your downtime study other people's designs, read books and read blogs online. Stay on top of new technologies. I can't tell you the number of times I read about something that within a few months just happened to be the perfect solution to an upcoming problem. Finally, the architect generally has to be a social person dealing with all kinds people inside and outside of IT. Its always helpful to be nice and a bit chatty with people in your company to prove that you can handle that aspect as well. Good luck. 
I second rockvilleJD. JSF in combination with PrimeFaces. Since your coming from a full stack framework, you'll probably feel right at home with Java EE 6. By itself it contains all basic things a web app needs: basic MVC framework, ORM, Transaction Manager, Dependency Injection, Managed Beans You can use some external libraries, e.g. you'll probably want PrimeFaces for its rich set of components, and maybe something like OmniFaces or Guave for their handy utilities.
How do I get this to work with the website?
Cool. I've done most of my programming in dynamic languages that are very good at not making you type things that the compiler can figure out easily. Sometimes Java just seems so incredibly braindead. It's nice to hear there are plans to fix this, but shouldn't they have been made about 10 years ago?
There's also some nice shortcuts for your second problem if you use Google's [Guava](http://code.google.com/p/guava-libraries/) library, like this: List&lt;RidiculouslyLongClassname&gt; list = Lists.newArrayList(); Map&lt;SuperLongKeyName, SuperLongValueName&gt; map = Maps.newHashMap();
It would definitely be nice (as would a lot of things in Java). Groovy does this, and it was proposed to be part of Java 7 but got rejected. There's a similar question on StackOverflow here: http://stackoverflow.com/questions/4390141/java-operator-for-checking-null-what-is-it-not-ternary
I gotta say this doesn't help google's image when something like this comes up.
Yeah the syntax is identical to groovy and is particularly nice for nested method calls where any one might be null. e.g. Example d = a?.getB()?.getC()?.getD()
 List&lt;String&gt; strings = new ArrayList&lt;&gt;(); It's good to specify both the List and the ArrayList just like that in this declaration, because that's a documentation to the maintainer that it's being used in the role of a standard list - the algorithm doesn't necessarily completely crumble if it's given a LinkedList, for example.
Except that this will not test if foo is null. You have to test that explicitly in Java. foo != null ? foo.bar() : DEFAULT_STUFF; Which is a lot more verbose than some shorthand version like OP proposed.
Struts uses to be the de facto web framework in Java. In a way it's the ancestor of every other Java web framework out there, and the direct ancestor of Struts 2 (obviously) and JSF. Like it or not, but Struts 1 is still a big player. Not for new projects mind you, but there's still more Struts 1 code in the wild for legacy projects than there probably ever will be say Wicket code. For new projects I'd definitely choose JSF 2. Stay away though from everything that mentions JSF 1.x. Some of my favorite links to get you started: * http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config * http://henk53.wordpress.com/2012/04/15/jsf2-primefaces3-ejb3-jpa2-integration-project (my own blog) * http://balusc.blogspot.nl/2011/01/jsf-20-tutorial-with-eclipse-and.html
Yup, you don't need the curly brackets if it's only a one-liner. Same with if, else, while, etc
Many languages have a default conversion from other types to boolean, so that you could write if (foo) { ... } and have it interpreted as a boolean condition even though foo is not a boolean. The typical interpretation for objects is "not null =&gt; true, null =&gt; false", and for numbers "not 0 =&gt; true, 0 =&gt; false". I wouldn't mind having that in Java, but it's OK the way it is. At least the way it is you get strict type checking, instead of Java trying to second-guess your stupid mistakes and confusing everyone.
honest mistake. I'm updating it now
&gt;I'm interested in the most widely used frameworks Then definitely JSF (JavaServer Faces). In nearly every survey it's in the top 3. It also happens to be one of the most enjoyable frameworks as well, and the one for which you can find the most third party support.
Java does not do some of these things by design. It is meant to have readable code that can be easily understood. I prefer code to be a little more verbose to improve readability.
Google is just another company, even with their "do no evil" motto.
The best way is to make use of a native code compiler. With this translator is not possible to convert libraries. Still, good work.
Just curious. This is written by someone who has missed the builder pattern or does the author really think that his contraption is better?
How is having the same information repeated easier to read? To me, it's just *more* to read, and it's a lot more work to maintain, and re-use.
came in here to say this. The Option pattern is used quite a bit in Scala, ever since I discovered it I've been using it like crazy. it's a great pattern. It also gives you a really view into if a method might return an Empty or not if your return type is Optional. With nulls you never know.
Builder is the way to go. For cases where it just isn't worth it to put together a full builder, I've always resorted to comments. someObject.doSomething( userId, true, /* is enabled */ false, /* don't update record */); For that matter, I add comments for any argument which is a literal. Extracting a constant is probably even a better idea, and takes just a few seconds using a modern IDE.
Well I'm perfectly happy with using Eclipse (or Netbeans, or any other IDE) to popup the names of the variables that I gave them. This is just rubbish. Why are some Java developers so keen on writing as much code as possible? 
Thats what they say in the article, some other programming languages have it but Java doesn't.
Because it still doesn't tell you if you put the parameters in the right order.
Apparently naming the fields of an object, using the builder pattern, or using a Map&lt;String, String&gt; or Map&lt;String, Object&gt; isn't good enough for these folks?
There are several complex automated refactorings. I also have used "Replace inheritance with delegation" a few times. 
Netbeans just added this feature in 7.2
Your servlets are not likely to be located in the document root. They probably live in an apache tomcat or other servlet container, which is a separate piece from the web server. 
This is related to deeper stuff like the Maybe monad in haskell, but imagine a ?. operator, implemented on Object and null, so that you could evaluate: thisPerson?.birthDetails?.document?.storageDetails?.lastChange?.year If any of these calls return null, then the whole expression returns null.
A quick question, are you looking for the Servlet's compiled code, or actually the source code? Just keep in mind the source code for the Servlet (which you need if you want to change its behavior) will likely not be on the server that it is hosted from. If you're using something like Tomcat to host then the Servlet should be located somewhere in your webapp/[yourapp] directory. You should look for the web.xml file which contains a mapping of the path to the Servlet 'DSFCentralServlet' to the actual name of the Servlet in Java land. I notice you just said you can't find the web.xml, it should be in the WEB-INF directory of your webapp. If you don't see the WEB-INF directory I suspect that you're not looking in the right place. 
Typically the servlet's source code would be found in a project directory on a version control (Subversion, Git, etc.) server. From that project, the servlet's project is likely compiled into a zip file with the extension ``.war``. That WAR file is then copied to your service provider's Java application server's applications folder, the name of which depends on the application server vendor and version. http://en.wikipedia.org/wiki/JAR_%28file_format%29
You might need to talk to your hosting company about this. If that servlet was provided by them, they might not let you change it. But if you're just looking to change the HTML that the servlet outputs, you probably won't need to modify the servlet itself at all - you would just be changing a template file that it uses. 
Yes I just noticed some of the things you highlighted, correted a few mistakes. Thanks :) But now outputText field is bothering me a bit :S
Groovy and Fantom have constructs with nearly that exact syntax. Your last example would be different, though: // This is the same in both Fantom and Groovy baz = foo?.bar()?: Thing.DEFAULT
 List&lt;String&gt; s = new ArrayList&lt;&gt;(); is available in Java 7. When it comes to "auto-cast" super.long.type.name.because.there.are.naming.conflicts x = (super.long.type.name.because.there.are.naming.conflicts) y; There is no good way around it. In general, if you find yourself casting alot, you're probably having some design issues, especially since Java 5 and generics. Most of the time when casting, you're either implementing an equals-method or doing stuff in Java APIs that are really old (like Swing). If you're writing your own types and need a downcast, it is likely that you should use a generics instead. The wiki article on [downcasting](http://en.wikipedia.org/wiki/Downcasting) even mentions Java as a bad example because of its use of Object (top type) in the old Collections-API. One way around it, that isn't too good looking, is to create a helper method: private SuperLongTypeNameBecauseThereAreNamingConflicts autoCast(Object o) { if(o instanceof SuperLongTypeNameBecauseThereAreNamingConflicts) { return (SuperLongTypeNameBecauseThereAreNamingConflicts)o; } else { throw new ClassCastException(o.getClass().getName() + " could not be cast to " + SuperLongTypeNameBecauseThereAreNamingConflicts.class.getName()); } } And use it as SuperLongTypeNameBecauseThereAreNamingConflicts myObject = autoCast(otherObject); If you know you're never going to misuse it and trust yourself (which you shouldn't), this can be put in a more general helper class as public static &lt;T&gt; T autoCast(Object anObject) { return (T)anObject; } and used as JButton button = new JButton("Click me"); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { JButton b = autoCast(e.getSource()); //&lt;-- here we use our "auto-cast". System.out.println(b.getText()); } }); Notice that this will **never** lead to a compiler error, so you're in effect removing the type checking help that the compiler provides. It is thus possible to do JButton b = autoCast("a string"); You will of course get a class cast exception for this at runtime, but if you had done an "explicit" down cast as in JButton b = (JButton)"a string"; the compiler would have complained. However, as I said. This is highly indicative of design issues. See if you can change your method's parameter list to use a more specific type. If you cannot, you're likely implementing a swing listener or something similarly archaic. Anyway, don't create new classes with this kind of problem.
That link is nuts. A class that holds both the 'Name' and the 'FirstName' is crazy. I can't think of any reason to do that except so that you don't violate some CTO's stupid 'never use an unwrapped String' rule.
Map&lt;String, Object&gt; defeats most of the purposes of using a strong type system. Please don't ever use that. 
Look up Scanner and PrintWriter if you want to store it as a text file. Edit: Or if you want to store Java Objects in their entirety, look up java serialization and Object Streams.
If the database is small and pertaining only to your application, then you might consider serialization of Java objects - this is not a permanent solution though. You could also consider writing the information to a JSON file, which could easily be converted to a Mongo database in the future (if you need it). If this information is supposed to be contributed by the public, as in anybody in the world can enter their personal information given some sort of registration process, then you need to be concerned with security. It would be better to integrate with a real database (in whatever form) if this were the case.
awesome thanks!
Perfect! thanks.
This is deep in code messing with multiple entrenched, heavily used data structures where there are lots of similarities but small differences that makes for having to write lots of similar functions for different data types that do ever so slightly different stuff. It'd be nice to be able to specify super.long.fully.qualified.type.name only once and have the rest of the code copy and paste and pick it up from the one place I change it, but alas this sounds impossible. Simply making the change in the 25 or so places it'll be needed is far less work than any other option. This code would be 100x simpler in a dynamic language, but we are in the code base we are in, and there are about 400 types that are all similar but slightly different and there's not much I can do about it, other than start to bring dynamic language type functionality into java, which at this point I wish I had tried. I just really dislike being held back by my language like this. I'm not a native to java and have never been a fan of the language. My experience recently is that there are a few things that it does really well, but it has a tendency to make a tangled web out of things that should be simple. Its a shame that all languages have huge flaws right now, so java looks fine by comparison. I do wish something would come along capable of replacing all the crap languages we have now with something truly modern and flexible. 
I'm well aware of the consequences. I'm not the one crying about a lack of named parameters. 
A specific exception is an entirely different beast. I have no problems with throwing an exception, but throwing an `Exception()` is a cardinal sin.
Sorry pal, that's Javascript, different then Java. Try the guys at /r/javascript.
will do thanks. 
You need a '}' on the line 7. 
Thank you so much. 
Yeah there is a lot to learn, but fortunately you can learn it in little bits here and there. I did my first app the same way, and just learned as I went.
You can run JavaScript in Java via [javax.script](http://java.sun.com/developer/technicalArticles/J2SE/Desktop/scripting/) or bin/jrunscript ;)
For eclipse there's [bpep](http://code.google.com/p/bpep/). &gt; This project is a Eclipse plugin that automates the writing of these builders. With just two clicks you can generate all the builder code you need.
Well I agree with you that programmers do not always give the best answer, but what else can you expect when you post to /r/java? :-) For the rest, great reply.
Well, thanks for that. Appreciated.
&gt; Wouldn't it be System.out().println()? good point! turns out *out* is not a method but a [declaration of a new instance of PrintStream](http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/System.html#out), defined like this: public static final PrintStream out
also: http://www.reddit.com/r/SQL has some cool guides on the side bar to the right.
http://tapestry.apache.org/ + http://www.highcharts.com/
&gt; This is deep in code messing with multiple entrenched, heavily used data structures where there are lots of similarities but small differences that makes for having to write lots of similar functions for different data types that do ever so slightly different stuff. So, bad design then. Don't blame the language. You are likely having a hurting inheritance tree, possibly involving methods taking Object-typed parameters. Not saying it's your fault and not trying to sit on some high horse. I do this myself, but when I do, I don't blame the language - I blame my (or my colleagues') design.
I agree. But to be fair, checked exceptions is a cardinal sin to begin with. They always end up in try-catch-throw-new-runtime-exception-blocks. 
I .... errrr...... I'll admit it's my failing. I don't see any connection between the quote from me, and the quote from you. I don't see it. Educate me - outline the linkage in your mind.
&gt; Never ask a Java programmer an architecture question. That's very polarizing. On top of being judgemental, you also manage to recommend two database managers entirely written in Java, running on the Java platform. Everything you said up to that point is good and sound advice though.
Well, the obvious answer is that data storage is best done with a database... Here you have a number of options.. Oracle, Postgres, MySql, etc... Ultimately up to you and your project's requirements. These can all function similarly by the integration of database adapters, which will be utilized by your data access layer. The other half of the pie is some method of object-relational mapping (ORM). The concept is simple -&gt; All class structures you are looking to persist are represented by tables and columns in a database, and there's a link (mapping) between your class definitions and your table definitions, while holding relationships (1-1, n-1, 1-n). In my current project we are using EclipseLink.. I haven't much experience with other technologies, but this is what I use. You'll want to consider your class definitions that you will be persisting as entities. Entities can be created, updated, and deleted as they reflect the same information between your application's memory and the database when persisted. They're usually simple POJO's (plain old java object) -- a bunch of setters and getters for the attributes that make up your entity. Your business logic should be separate than that of your data access layer. A robust system should have isolated modules and components that can interact seamlessly without mixing into each others code bases. Source: +5 years of professional software engineering working with Java EE technologies.
Damn, I feel like this is a great answer, but I am still way to green to actually understand what is going on. I will look up all the information presented thanks.
Are they? I've only used them with EE so I cannot confirm this
I highly suggest against Oracle for a first time learner.. Try something much more noob friendly like MySQL.. There's java adapters for any database environment.. Plus Oracle is a bitch to set up for a non familiar user, you know that.. MySQL is a simple download and command to run, or even a package such as WAMP/MAMP 
Don't do this. Take the slightly more complicated route and learn how to develop in a data driven environment using databases. You will work with it for the rest of your life if you continue programming, no reason not to start now. It's very easy when you grasp an understanding.
Yes I point out that these databases are written in Java. I agree that it's polarised. The polarising agency, however, are the Java programmers. At least, those that have had formal class-room training in the language. They (generalisation, true in the majority of cases, by a wide margin) see only Java. Want to send messages? JMS! (They have no knowledge of real messaging systems that are available). Look at the replies to the OP. Every one (at the time I first replied was..) Oh, so you want to persist data? Serialisation! (Which is only useful in specific instances, not in the general case). Java programmers, as they leave their formal Java programming are wholly ignorant of complementary or competing technologies. As they gain experience, they gain knowledge of the other technologies - but still exhibit a strong tendency to play to ignore them and suggest Java solves all. A legendary number of times, when I have investigated slow response times to a user, it's because the Java code imports the total rows resulting from a basic query (Select * from Table) - and then the Java code discards unwanted fields, sorts the objects representing the data, then filters them. Not so bad with 10 rows. I have seen it done on queries returning tens of thousands of rows. Queries that each user would be running 20 times an hour, as they wait impatiently to get the data they need tom answer a telephone enquiry. "Fred", my manager would say, "The servers are running very slow, and crash at busy periods. Seems to be if there are 5 or more simultaneous users, it gets all wonkspittle. Can you investigate?" Still. As I say, that's only my experience. But for 10 years or so, it was constantly a problem, consistently the same root cause. Made the trouble-shooting portion of my job real easy, 50-60% of the time. You got a problem with X? Well, why aren't you using the tool specifically to solve problems with X? Of course, YMMV. I'm not portraying this as every programmer, everywhere, for all time. Just that it's a very significantly strong tendency.
Sure brother, if you do these things, you'll be up and running in to no time: Download the appropriate local server environment. Regardless of what you're going to use it for, it'll suffice all those needs (web dev, desktop dev, mobile dev, what have you). The M/WAMP application (widely used) will run the local LAMP server environment (Linux, Apache, MySql, Php/Python/Perl). Don't worry about most of these things not applying, doesn't make a difference. - Mac: http://www.mamp.info - Windows: http://www.wampserver.com After the download is complete, starting up the local server will boot up the database server along with the apache server. Apache is an HTTP server, so if you want to create an API endpoint for your application to work even better as more of a cloud service, well you have that ready to go too! (offtopic: If you do want to do this, you will be able to use any language you want - php/python as my suggestions, way easier on a server than running a java environment, large open source community as well to take advantage of. You can, and this is as easy as learning this stuff, have your application make some simple http requests passing just couple parameters and receive data exactly like how you are here - it'll be returning you serialized objects and your server-side application will be requesting from the database just like how we are about to see). Anyway - you can shut Apache off if you don't need it - doesn't matter, keep MySQL running though! You'll probably have some setup prompts to go through, stick with any defaults for the most part. Okay, now when that's done navigate in your browser to (if /MAMP doesn't work, try without it): - Mac: http://localhost:8080/MAMP - Windows: http://localhost:80/MAMP Once you're on the welcome screen, navigate to MySQL and there will be a section to create a database. Create a database, give it your app name. Don't use the same databases for multiple apps, you can create plenty of databases, every app gets its own (obviously). When that's created, navigate into the database and click on the SQL tab. Run this query: CREATE TABLE IF NOT EXISTS Person ( ID int(11) NOT NULL AUTO_INCREMENT, first_name text, last_name text, dob date, PRIMARY KEY (ID) ); INSERT INTO Person (ID, first_name, last_name, dob) VALUES (1, 'John', 'Doe', '2012-08-01'), (2, 'Levski', '123', '1999-08-01'); At this point you will have the Person table and some of the test data from the example. Check the browse tab, this is what it really looks like, and this is how you should see it when you think about it. Similar to the excel doc, and keep in mind that ID column will always be unique - you have direct access to any of that data when you want and need it. Try some of the following queries, mix them up, play around with them. Also, it's much easier to add and manipulate data from the GUI you're using. When you want to add more data, the Insert tab uses an easy to use GUI. This program is called PhpMyAdmin. For real work its not preferred, but for any side project it's nbd. SELECT * FROM Person; SELECT first_name FROM Person; SELECT * FROM Person WHERE first_name = 'John'; SELECT * FROM Person WHERE ID = '1'; SELECT * FROM Person WHERE dob &gt; '2001-01-01'; By now you've probably caught on and see that it really is this simple. The MySQL library has plenty of query operations that will later be of use, such as operands to compare precise differences between two dates. That should keep you busy for the night, feel free to ask more questions. Next you should start to look into how multiple tables work together. This is crucial to keep yourself from going down bad roads. I can show you some examples with that Person class with multiple family member relationships and how that works. This is the concept of **Join**ing tables. You should read this brief demonstration later: http://phpweby.com/tutorials/mysql/32 
Dude, you just don't know what you're talking about.. Alright, so Hibernate is an ORM, there are similar ones - JPA, JDO, and Spring (spring is a lot more than just an ORM though) Hibernate, and other ORMs, consist of a data access layer and introduces new rules you can add to your classes so that they can be bound to the database. It basically splits things up into these new items: - Java Entities (pojo's) are **directly** mapped to their definition in the database. - Java Entities can be annotated to define n-n relationships - Hibernate controls the binding between your objects and their reference in the database. By building a data access side of your application that uses this, this will create the the binding between the object and database. Now with ejb's and similar approaches, you can now do something like: Person person = new Person(); person.setName("Fred Trellis"); PersonDataLayer.save(person); Similarly List&lt;Person&gt; persons = PersonDataLayer.getAll(); and so on.. Hibernate and other ORMs allow you to mask **ALL** data access into one component, and treat objects the same between serialized requests or already existing in memory.. 
How did they mess that up within the architecture? Before any business logic is even going to be written, why wasn't the architecture at bare minimum capable of handling persistence models for any given object's storage, along with the web framework with the bare system requirements - user accounts &amp; auth? From what you're saying, it sounds like they set poor priorities as they were building this out. I mean nothing within the business code should cause problems within data access and working with the given framework. Seems like the "Design pattern A" pieces were built pretty closely coupled with the underlying architecture.. 
Essentially, in layman terms (the only way I understood it) they built a reference architecture as recommended in the enterprise architecture book du jour. DAOs, EJBs, all nicely MVC and all the rest. They coded the architecture assuming they would plug in data objects - which would then get passed around the system objects they had created. (There was several weeks of hard argument before they started - and times I left the office in tears. I was pushing for the slimmest, most lightweight Java middle bit - the majority of data verification and manipulation performed in the Oracle database. Business logic (as in data modifications) done there. Presentation logic Javascript in HTML. We started in 2000 - so XML was just gaining traction - and I evangelised in the company. We would eventually, I said, have a web front end generated by XSLT stylesheets on data provided and XML'd by the Java middle. I mean - that was so simple an architecture.) And they had built an architecture for a standard, in house, monolithic enterprise application. Accounts, permission grant/deny, scalable EJB processing modules, replaceable Data Access Objects. Best practice. Standards-compliant. And we fought against the rigidity of the design for years, trying to make it more flexible to accommodate the different business practices and rules from different business units. We were tasked with combining data from several legacy backend processing systems - mainframes, AS400s, even some hand-maintained Excel sheets - and delivering information to a web app based on this harmonised and collated data. I would characterise it as a reporting and query tool with a web interface. All the data collection would be done by various messaging systems we had, delivering importable files or EDI messages to the database - data grooming done offline at the import stage, thus the user side was no more than lift the data from the db, display it on a nice web screen. (Obviously, there were user accounts, navigation, some workflow elements - but essentially, 95% of the execution cycles were: Query db, squirt data on screen. Next screen - next query - squirt data on to screen. Next screen - next query - squirt data onto screen.) The morning I got to discuss the business data with them (when they considered the architecture 'ready'), the initial discussion was about an hour, and at that point, the programming team disappeared into a huddle over coffee, came back to the meeting and literally said "We can't do that.". As I recall, the issue was invoices. The question was something along the lines of: "What is the relation between Invoice and Orders? Is it one to one, one to many or many to one?", and my reply was "It is one to one, 0 and above to many, and many to 0 and above - depending on business unit, country it is in, processing system it is using, and individual agreements with individual customers." I have the impression that the architecture could only handle one clean and explicit relationship type, and something was preventing it from from handling all the eventual possibilities. The deets? Don't have them. There was similar problems with the architects decision to store everything as strings. Eg, tax amount "123.99", price "299.000", tax point "02/04/2004". Many of the formats were specified in EDI specifications - much of our data was passed around in one form of EDI or another. In effect, the architect was saying that in the import file, or the EDI message, everything is represented as a string. Everything presented on a webpage must be a string written out into the HTML source. We have no processing or calculating responsibilities between the database and the webpage. Why have conversions between types on the way to and from the db? Data in to the db is a string. Data presented on the web is a string. We rarely (not never, but very rarely) do any calculation between the two. It makes sense to keep everything string, and on the rare occasion, convert it. Otherwise 3000 users X 45 queries X 80 data points represent significant clock cycles of redundant conversions per hour. Oh boy. Try and get a Java programmer interested in that scenario, and you'll need to put your therapist on danger money. Essentially, they had selected an inappropriate, tightly integrated and inflexible architecture, and over-engineered it before asking for details beyond that it was going to be a web i/f, sometimes for in-house staff, sometimes for customers. And we sell bicycles. Essentially, I think they were a bit blinded by the fact that we were huge global multinational - in excess of 50 000 employees, hundreds of different systems, in gobs of languages, in 27 different legal systems - and they some how did not get the message that we had very simple requirements of this new system. They over-engineered for an enterprise. The unspoken assumption in that is that an enterprise level business is globally consistent in business practices. And that is a clear minority of cases. Yes, I know, we were paying them. But we were partly paying for expert advice. We had to acknowledge their supposed technical superiority. And the team were mainly newly Java trained, with battle-hardened veterans in the team who were weak in Java, strong in other techs, like RDBMS, or messaging. This is where I started to pick up the "Java programmer = pig headedness" prejudice. It continued for the rest of my career in the field. I'll admit to confirmation bias later making me aware of the issue, but I don't believe I exaggerate the impact. Very long, this. Apologies. Still find it an interesting scenario to discuss, think about, analyse, learn from. TLDR: They thought a big program was needed for a big standardised company. We wanted lots of small, simple programs, each targeted at a small part of the whole company. Because each little part operated like a unique business. (PS: As often the case, IT pick up problems not dealt with elsewhere. If stronger management had forced through stronger unification and harmonisation standards across the different units, then IT would have had a much less difficult task to tie it all together in a neat bundle. But again - the day a business leader adjusts his strategy based on expert input from the IT function, is the day we have an Iranian female atheist in The White House.) 
I am trying, I really am. I read through this a couple of times. I understand the principle. I understand the code you presented. I am very appreciate of you efforts and time. But again, I'm struggling to get to a point of accepting the benefits of Hibernate over a basic prepared statement. Do not despair, you have given me much to think over. Give me a few hours to digest and mull. I promise a reply before 48 of your earth hours have passed. Best regards, F. 
Dude.. there are so many red flags in what you just told me, this architect sounds like a complete idiot. Sorry, but everything you have told me about his approach is completely incorrect. I am a lead developer on a large scale supply chain management cloud application with a small team, much smaller than yours. We are working with the similar technologies as you (and many more since you guys are against using Enterprise Technologies..), and we are dealing with very similar events and tasks. We too have incoming EDI, and we absolutely process it.. Any I/O, whether its a form submission or an EDI, it is always a piece of a defined object with proper data types.. This is a model of the real world, every detail counts, and every piece of processing is crucial before it even reaches the database. I'm just shocked your *architect* is just treating this as just a front end attached to a database, WHERE IS THE MIDDLE TIER?!!??! We are well over 100k lines of in just our business code.. This middle tier is just as important as the other layers of your application, and it should be separate. Any enterprise application like the ones we are working with should have very isolated packages - Entities (java objects) - Business logic (controllers, helper classes, routines, etc..) - Data access As you see in my other comment, the Data Access should be in complete isolation from the rest of the system. It does tie into Entities since they are the data being stored. I'm also surprised that your engineers couldn't figure out the relationship between Invoice and Orders, as this too is something I work with.. Unless you guys gave them a shitty spec or dealing with some complex order objects.. I mean its good that they didn't just make an assumption and instead asked.. If they can picture a simple order and an invoice in the real world, as an engineer, that should immediately be understood in the engineers head what that relationship looks like.. Not something they need to struggle to reach.. Man it sounds like you guys need to trim the fat EDIT
That's true, oracle can be a bitch but i think it's worth the effort to maintain those skills, knowing you'll end up making enterprise projects some day. I never actually used mysql. I completely lost that train. 
If foo was a complex expression or has side-effects, then you wouldn't be using your shorthand would you.. You already have a shorthand expression as Matthew has pointed out.. that's why the ternary operator exists, to handle tiny boolean checks like this... 
This is barely different than a ternary operator, it just takes a second more of thought than just thinking what keys you need to press. Example d = (a == null ? null : a.getB() == null ? null : a.getC() == null ? null : getD();
Yes. You need to define this servlet within the site configuration. so it's recognized by the system. Your servlet will extend the HttpServlet, and it will be able to access your session. I only know how to do this with JSF, but here you go Example servlet: public class CustomServlet extends HttpServlet { private String basePath; @Override public void init() throws ServletException{ this.basePath = getServletContext().getRealPath(getInitParameter("basePath")); if (this.basePath == null){ //throw new ServletException("FileServlet init param 'basePath' is required."); } } @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException{ // The HttpServletRequest/Response holds the context to the session it belongs to. You can use it like so: FacesContext context = getFacesContext(request, response); HttpSession session = (HttpSession) context.getCurrentInstance().getExternalContext().getSession(false); SomeManagedBean bean = getBean("theNameOfBean", SomeManagedBean.class); bean.doSomething(); // now you're in! } public static FacesContext getFacesContext(HttpServletRequest request, HttpServletResponse response){ FacesContext facesContext = FacesContext.getCurrentInstance(); if (facesContext == null){ LifecycleFactory lifecycleFactory = (LifecycleFactory) FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY); Lifecycle lifecycle = lifecycleFactory.getLifecycle(LifecycleFactory.DEFAULT_LIFECYCLE); FacesContextFactory contextFactory = (FacesContextFactory) FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY); facesContext = contextFactory.getFacesContext( request.getSession().getServletContext(), request, response, lifecycle); UIViewRoot view = facesContext.getApplication().getViewHandler().createView(facesContext, ""); facesContext.setViewRoot(view); } return facesContext; } public static &lt;T&gt; T getBean(String beanName, Class&lt;T&gt; t){ return (T) getFacesContext().getCurrentInstance().getApplication().evaluateExpressionGet(FacesContext.getCurrentInstance(), "#{" + beanName + "}", t); } } 
Based off our exchange, it sounds like they gave you the axe bro.. The guy at the top takes the hit when your team can't deliver What's your new field?
OK. I wasn't clear. That simple scope was initial scope. What we (technical leads from the business side) envisaged was that we would build a small web app to report for this BU. However, because of the differences between them, it would not suit the next BU - so, a different small app. For each Business Unit, a different application, in effect. But they would be harmonised as to appearance. We would reuse components from one small app in all the other little apps where it was applicable. In that way, bottom-up - we would create a middle. It would arise from spotting opportunities to re-use existing components. A small scope which would grow by small app increments. The programming team wished to work top-down. Solve every problem, create every solution, design the middle tier at the beginning. Make a big app that would deploy across business units. And from a pure development perspective, sure. Makes a deal of sense. But did I indicate how big the company? Did I indicate how diverse? There was NO WAY to proactively gather the business requirement from so disparate and varied a group of companies. Just discovery and analysis of the processes would have consumed more man-years than we could possibly hope to supply. So, do it step by step. App by app. Discover the business processes of the new app, and take on the responsibility of finding the synergistic reuse opportunities. We developed a repuation, and landed a couple of biggish projects (consuming 15-25 peeps depending on phase/activity), and we continued to receive increasing numbers of small apps - that's how it grew to 60 peeps. And about 120 very part-time liaisons with and from the business units. And that's about where, of course, my technical abilities started to atrophy. I would quibble (uselessly and unnecessarily) with the way you define BL. Navigation, or display logic is the term we would use - although a motivator for that was political. As the new tech kid on the block, this java web tech was too untried and untested to entrust business logic to it. BL must always and ever only reside in the legacy systems, where it has reliably functioned for the last 372 years, without a single glitch or bug. Politically, even if we ran BL, we couldn't call it that, in the beginning. Still. Thanks for the verbal run around the block. I enjoyed it. Hope you did too, have a nice day! Best regards, Fred.
Apologies, to feel closure, I really want to pick up where this discussion started, on Java programmers being pig-headed, as a last word. If we had started with the scope we eventually reached - OK, they had a good approach. But it was so difficult to sell them on the small scope beginning. In the same way as you expressed your disbelief (I swear I had already told you it was small scope....), imagine that resistance multiplied by the original team, whose jobs and livelihood depended on them providing a 'good' solution. And hence my original statement about Java programmers being stubbornly short-sighted, seeing only the Java code, and the Java-recommended solutions, right in front of them. Getting them to accept something more appropriate, but not Java-sanctioned, was more difficult than I would like it to be. Stick a fork in me. I'm done. Best regards, F.
I ain't done with you lol. I'm just going to preface this with that I too am working in a similar dynamic. You, and like myself, cannot work in an agile development because we don't know what's ahead of us. My application is being molded by the board of advisers and investors involved with the project as they use each incremental build on a newly introduced spec each round. That being said, I still find this all a ridiculous way to approach your piece of software. &gt;However, because of the differences between them, it would not suit the next BU - so, a different small app. For each Business Unit, a different application, in effect. So you will be dealing with many different forms, many of which will be unknown until you face them.. And you built this with a poor architecture and you are passing on the technologies Java EE is supposed to be coupled with.. ok.. &gt;There was NO WAY to proactively gather the business requirement from so disparate and varied a group of companies. &gt; &gt;So, do it step by step. App by app. Discover the business processes of the new app, and take on the responsibility of finding the synergistic reuse opportunities. Okay, I understand that. Similar boat once again. But you are leaving yourself walking in the dark with no flashlight.. Your application is clearly an evolving process, and you are leaving out crucial pieces in order to step through this process without bumping into walls! I'm sorry if I'm being pushy, but you are going to face some serious hurdles! You have already started cutting corners, do you know how many paths you're going to blaze? All I'm saying is if you had much more generic, abstract, and flexible structure that your team could have **easily** built if they had been experienced with EE and built the system-requirements (data access again..) before diving too early into business code, then you would be dealing with a great, easy to manage, and flexible codebase! It's a very important step to have an underlying and properly established back end before you actually start building out the consumer facing layers of the application, especially for such a growing and unforeseen project like this. And one last thing &gt;and take on the responsibility of finding the synergistic reuse opportunities. Doing this you're just going to couple your bits even closer. This is always a bad strategy and clearly not thought out. When that starts to happen, there number of ways to do it better just increases n-fold.
There's no way there were 60 people on that bro, maybe 6.. Even that's steep. Maybe you're in the intern department. But hey, you make me feel like a champ though knowing the size of my dev team and what we have built.. Now you have my fork.
Alright, look last thing, regarding your hubris when it comes to 'typical java programmers'. Don't mistake me as some random kid who took their Java classes and feel suddenly ingenious because they got an internship.. I know a lot about this, it's what I do every day and know it inside out.. My past and current work provides solutions to the needs of many large profile vendors and my project's complexity isn't even comparable to this. I'm noticing many naive points you are trying to make that just make you fall under that classification. From one professional to another, the project you have explained sounds messy and not well put together. Any approach to some company facing software needs to be built properly, and this was not. It's very apparent from the getko to me that you do not have the most basic components that a fundamental piece of software should have (albiet a enterprise application or a front end on a database), which leads to situations like these where you don't have the luxury of flexibility and proper coding practices. I don't care if you have a spec or not, software is software. It all uses data-level transactions the same. This is why EE technologies like Hibernate and design patterns exist - regardless of what your applications doing, the pattern provides a logical template to provide proper structure and flexibly and the technologies provide your overhead functionality to prevent reinventing the wheel (less dev time). This is **not** extra unnecessary work, it's simply developing structured solutions properly and smartly. If you don't care about quality code, then there's no point in this argument. You're struggling to see that utilizing these technologies and developing in a smart way CUTS development time. You don't waste time reusing and modifying code, you have inheritance and polymorphism that lets you continue your code and make it grow, not replicate. Since you're not a developer, or not a very good one, you aren't seeing that this makes development easier if you understand how to code with a professional paradigm.. You wouldn't have had to do anything crazy, all you would have to do is have started the project with good practices and first develop the fundamentals. I can't believe I'm sitting here explaining this to someone of age to be my father. Also, when choosing a technology, it should really be understood. As the technical lead you should have a full understandings of what you are using. You don't even understand object relational mapping man or even how Hibernate, Spring, any of how those frameworks even work! You said yourseld you were out of the game before they were even in production.. Had you actually understood these, you would see that 90% of what you have done is already done by these EE technologies (you did tell me that the entire app is just database stuff, you failed to learn that EE libraries have all of this covered, along with default added integrity to the application you currently lack). When you mock me for suggesting the missing pieces saying they're way too fancy for this.. Why are you using java ee, go back to the lamp stack.. Simple php framework would have been easier for your team. Either you're lying or unfit for what you do. Seriously. We got rid of someone last year for doing this kind of shit.
I'm a Software Engineer for 11 years now - depending on whom you ask that is not even considered senior level. To be honest... for me, what matters in the end is ease of use. I'm not willing to use a library or design pattern if it makes writing code harder for me as a developer. An example is the whole JEE thing... I still do not see much of a benefit in using most of the Enterprise Java stack. It limits the developer in so many ways that I try to convince clients to go for a Spring-approach most of the time. Regarding JPA, it's another story... Your typical business case when it comes to databases is usually some kind of CRUD (Create Read Update Delete). With JPA2, regardless of how many entities I have to work with, it's always the same thing I have to do to persist, lookup or delete objects. Even if I have *n:m* (or *1:n*, *1:1*) relations in my objects, I (for the most part) don't have to care about how to persist or read those related objects in my code. Also, the entity mapping is pretty much self documented, since all mapping is done within the entity class itself. Those things make the code more approachable for the client's developers that usually do the maintenance work on the project after it goes live. Yes, it comes with some tradeoffs. As mentioned, working with legacy databases is definitely not one of JPAs strengths (entity modelling might be difficult and the default query generation may not be optimal), so are batch operations (Hibernate has *StatelessSession*s for bach operations, which the JPA specification is missing), detaching and merging objects in a distributed environment can be a hassle sometimes. In the end, I'm willing to take those tradeoffs (which don't come into play in most projects anyways) to gain the benfits JPA offers, mainly a smaller and less error-prone code base, which is easier to maintain. But there are other developers with other preferences (i.e. DTO, iBatis, even plain old JDBC) out there, I understand and respect that. I'm not trying to impose JPA on any developer (or any of our clients), but in my experience JPA is the best possible choice for ~80% of Java projects that involve some kind of persistence. And it's pretty easy to learn, imo... that's why I suggested it in this thread, guessing that OP hasn't much experience with databases and SQL.
IIRC JPA is part of Java5 EE and it was added to the Java6 SE spec. I couldn't find references to this so I may be wrong. anyway, I've found a pure-java SQLite implementation. http://sqljet.com/ (Edit: it is a WIP, no queries)
So you've had bad luck meeting bad programmers. I didn't argue about that. My point is that they are not bad because they program in Java. Every technology has its strenghts and weaknesses. This is of course true for both the platform and the language Java. It is also true for all the technologies built using Java, such as JMS, EJB, OSGi, Swing, JMX or [this place](http://projects.apache.org/indexes/language.html#Java). But that doesn't mean that the programmers building those technologies are any worse at architecture than your average C-programmer, or C#-programmer or OCaml-programmer or Haskell-programmer or... &gt; The polarising agency, however, are the Java programmers. What? You are saying that one should never ask a Java programmer about architecture. You provide no real support for that argument except for bad advice given on reddit and then you're telling me that in reallity, the polarising people are really the Java programmers themselves? "Why are you throwing rocks at the people over there?" "Four of them said stuff that was incorrect." "Yes, but they're not all incorrect, right?" "Yes they are!" "Isn't that a bit judgemental and as such, polarising?" "According to my experience, no." "So, judgmental then?" "They are also very polarising!!!!" "*They* are? Ok, I'm walking away now." Also, slow response times due to bad SQL queries translates to bad SQL programmers, not "Java programmers are bad at architecture".
Apologies. Hubris to quote the maximum figure we reached after a few years. We started with - thinking back, I remember 6? 4 real java programmers, one RDBMS guy who had previously been a C developer, and one project manger/administrator/co-ordinator Mr Fixit. There was a girl too - but she came later? (poor sexist joke opportunity refused). Thanks for the fork!
This is quite amazing !
Thanks for giving an example on how to JPA! (You're missing an id on your entity, btw ;)) I just wanted to add: JPA really shines when it starts to get a bit more complex... @Entity public class Address implements Serializable { @ManyToOne(fetch=FetchType.LAZY) @JoinColumn(name="OwnerId") private Person owner; /* [...] */ } Just imagine the additional code that is neccessary to handle a *1:n* with object mapping in plain old JDBC - especially with lazy loading relations.
Interesting post and comments, thanks.
Okay, okay. I exaggerated for effect. There may be one or two Java programmers (somewhere in the world-wide population) worth asking about architecture. I had the misfortune to never run into any of them. JPs (massive generalisation) tend to (not always, it's just a statistically, significant predilection) to select a J-based solution without adequately assessing alternatives. It can be couched as a positive thing - they are playing to their strengths, and selecting within what they know. J training focusses on J, how could it not? JPs exit training fired up with the unbelievable potential power granted to them through their knowledge of this language. These will be very likely to proffer J-based solutions inappropriately. As they gain experience, their focussed J training will be set in place amongst a landscape of other, useful technologies. The JP is then less likely to propose an inappropriate J-solution. If a developer finds work as an architect within an enterprise, he is still likely to favour J-solutions, but less likely to suggest them inappropriately. JPs will suggest J solutions appropriately lts of times, compared to the few times they get it horribly wrong. That represents my view pretty accurately, and my experience precisely. &gt;You provide no real support for that argument except for bad advice given on reddit Plus my experiences IRL. &gt;the polarising people are really the Java programmers themselves? Yes. It takes them a while to get the J-only blinkers off. I don't force them into suggesting bad solutions - I just observe them do it. &gt;"Four of them said stuff that was incorrect." Thats right baby, 100% of the sample. &gt;"Isn't that a bit judgemental and as such, polarising?" "According to my experience, no." It's very judgemental. I wanted the most appropriate solution, and I would despise anyone who came up with a badly flawed one. "Hey, we're running out of cornflakes!". "Well, hey, we better pray then, brah". This person is an idiot. "I'll go to shop and get some.". This person is more sensible. Being judgemental and discriminating are skills that people are paid big bucks for. If a group of people continually, severally and individually make the same error - then as a group, I will accord them less respect. "How about them Packers, Bill? Lost 49 straight games. They are definitely the people to advise the Dallas Cowboys on strategy and tactics.". Ha! &gt;Also, slow response times due to bad SQL queries translates to bad SQL programmers, Wow - how long did you analyse the situation to realise that? &gt;Also, slow response times due to bad SQL queries translates to bad SQL programmers, not "Java programmers are bad at architecture". Not what I said at all. The examples I quoted are where a Java programmer has mastered fast sort algorithms, has a great filtering system using comparators and everything! And uses them. Whereas, if the JP used the functionality of the database correctly, he would be handed the few rows he's really interested in, already filtered and sorted. I was making the point that I had seen, over and over, occasions where the issued query returned the entire contents of the table. Huge numbers of rows transferred between processes, or physical servers. There exist then a huge population of entities that fall outside the interesting range. Which are then filtered and sorted in the Java process. It happens and is bad. That is an architecture issue, it represents the JP not using the database correctly (because it's not J). It has happened lots of times. It's indicative of the J-myopia. &gt;But that doesn't mean that the programmers building those technologies are any worse at architecture than your average C-programmer, or C#-programmer or OCaml-programmer or Haskell-programmer or... I don't know. Haven't worked closely or long enough with any of these to judge. But with JPs - yes, I have had sufficient experience to state this is a recurring issue with them. I didn't say JPs were worse, or better, than any other breed of code-producer. &gt;So you've had bad luck meeting bad programmers. I didn't argue about that. My point is that they are not bad because they program in Java. It may well be that I had worserer luck on this score than the average Joe or Jane. No data. But I suspect it is something in the training or the personality that is attracted towards programming. Again, I have data only for JPs. I like to quote this thread as an example, only because it's immediately visible and obvious. Question: Store data? Answer (the only 4 answers at the time I jumped in) serialisation. There you go - 4 examples of myopia. Not one was concerned with environment, requirements, constraints.... Just- BANG! - this is Java's way of storing data. Actually, as later posts from the OP came out, he provided more information making my original suggestion of databases an inappropriate solution. I put the rider into my answer that I don't know enough to be didactic about my solution, but as an alternative to the overwhelming consensus of serialisation, it was a necessary balancing suggestion. I would not suggest it now, with the additional requirements and constraints the OP subsequently laid out before us. So there you go. 
Hmm. Interesting reply. The first one to mention trade-offs (which suggests to me the first one that has truly done an evaluation). It's rarely what something CAN do that is the deciding factor for it's selection. There are many alternatives for almost any set of functionality that would be necessary. It's the negatives, the things it CANNOT do that disbar it from selection. I find nothing worth quibbling over in your post. I don't agree fully with 100% of what you say, but nothing we should stop car-pooling over. Have a good one, and thanks for the thoughtful input to the discussion.
This kind of chaining violates the Law of Demeter, so they probably avoid it to reduce coupling
What's "thePOWER"? Does it work if valid input is supplied? If so, you'll probably just need to set "readDifficulty = false" in the InputMismatchException catch block. If that doesn't work, look into using an IDE's debugger to step through your code - it'll be far more insightful and almost definitely quicker than asking for help online. Side note: if(readDifficulty == false) { Is pointless, just have: if (!readDifficulty) { Same goes for your errorFormat checks.
If the methods don't belong to an instance of a class, then you could declare them as static (and set the class's constructor to be private if you want to stop instances of it being created). Think along the lines of the Math class - e.g. there's the Math.floor, Math.round, Math.sqrt static methods etc, which are used without creating an instance of a Math object.
I'l just build off this to add how this would look in the person object (You're missing an id on your address entity, btw ;)). public class Person{ //.. previous attrs @OneToMany(fetch=FetchType.Eager, cascade=CascadeType.ALL, orphanRemoval=true) @JoinColumn(name="address, referencedColumnId="ID") private List&lt;Address&gt; addresses; //.. }
Java comes with linux. So you dont need to install JDK. Regarding an IDE, eclipse is pretty good. But when I started learning java I just used a simple text editor with java syntax. Like gedit. So for instace let me say you are going to create a java file with a class called "Reddit". I the terminal you can write: $ gedit Reddit.java &amp; (this will open a file called Reddit.java in gedit). When you have written your code correctly. What ever it is. You are set to compile your file. Which is done like this: $ javac Reddit.java Compiling will hopefully be done succesfully. Then you can run your program with this command: $ java Reddit (where Reddit is the name of the class your "main" is located in) (I write "$" so you know this is a command, what I write in the parantheses is not a part of the command). I'm a new computer science student, so there are probably some other guy that can explain this better.
What's the exception? And only Satan himself capitalizes the first word of variable names.
I haven't actually had any formal education in Java, and this is why I make some mistakes that actual developers find to be cringe worthy (variable capitalization, etc.) The exception is [Ljava.lang.StackTraceElement;@4a2318e9 if anything at all - occasionally, the program just continues normally, without reading the second file. 
&gt; The exception is [Ljava.lang.StackTraceElement;@4a2318e9 i To see the actual error you need to change E.getStackTrace(); to [E.printStackTrace();](http://docs.oracle.com/javase/6/docs/api/java/lang/Throwable.html#printStackTrace%28%29) small note Java's standard is to start variables with lower case and use [camelCase](http://en.wikipedia.org/wiki/CamelCase) - so it should be } catch (IOException e){ e.printStackTrace(); }
Thanks, I changed the variable to a lower case 'e' to reduce the retard look and feel of my program. The full Output is: /Users/chris/Desktop/get java.io.FileNotFoundException: /Users/chris/Desktop/get/Pipeline_Specs.txt (No such file or directory) at java.io.FileInputStream.open(Native Method) /Users/chris/Desktop/get/RSeqs /Users/chris/Desktop/get/RMEME /Users/chris/Desktop/get/FP /Users/chris/Desktop/get/MotifTree [Ljava.lang.StackTraceElement;@404a6ddc null at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:138) at java.io.FileReader.&lt;init&gt;(FileReader.java:72) at motifcatcher.UI.PipelineUI.retrieveConfigFile(PipelineUI.java:81) at motifcatcher.UI.PipelineUI.&lt;init&gt;(PipelineUI.java:181) at motifcatcher.UI.PipelineSpecifics.jToggleButton1ActionPerformed(PipelineSpecifics.java:226) at motifcatcher.UI.PipelineSpecifics.access$000(PipelineSpecifics.java:12) at motifcatcher.UI.PipelineSpecifics$1.actionPerformed(PipelineSpecifics.java:192) at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2018) at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2341) at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402) at javax.swing.JToggleButton$ToggleButtonModel.setPressed(JToggleButton.java:308) at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252) at java.awt.Component.processMouseEvent(Component.java:6505) at javax.swing.JComponent.processMouseEvent(JComponent.java:3321) at java.awt.Component.processEvent(Component.java:6270) at java.awt.Container.processEvent(Container.java:2229) at java.awt.Component.dispatchEventImpl(Component.java:4861) at java.awt.Container.dispatchEventImpl(Container.java:2287) at java.awt.Component.dispatchEvent(Component.java:4687) at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4832) at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4492) at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4422) at java.awt.Container.dispatchEventImpl(Container.java:2273) at java.awt.Window.dispatchEventImpl(Window.java:2719) at java.awt.Component.dispatchEvent(Component.java:4687) at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:703) at java.awt.EventQueue.access$000(EventQueue.java:102) at java.awt.EventQueue$3.run(EventQueue.java:662) at java.awt.EventQueue$3.run(EventQueue.java:660) at java.security.AccessController.doPrivileged(Native Method) at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76) at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:87) at java.awt.EventQueue$4.run(EventQueue.java:676) at java.awt.EventQueue$4.run(EventQueue.java:674) at java.security.AccessController.doPrivileged(Native Method) at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76) at java.awt.EventQueue.dispatchEvent(EventQueue.java:673) at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:244) at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:163) at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:151) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:147) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:139) at java.awt.EventDispatchThread.run(EventDispatchThread.java:97) Meaning that it couldn't find the file. The problem is that terminal finds the file with the same path. Why isn't it recognizing the file? 
Java comes with Linux? 
Is /Users/chris/Desktop/get/Pipeline_Specs.txt static? Or is it being created somewhere else?
You miiiight want to at least use a [LineNumberReader](http://docs.oracle.com/javase/7/docs/api/java/io/LineNumberReader.html) here. Use of [Properties](http://docs.oracle.com/javase/6/docs/api/java/util/Properties.html) (or [commons-configuration](http://commons.apache.org/configuration/)) would be a user/maintainer's wet dream. ;) Regarding your exception: *java.io.FileNotFoundException* is pretty self-explanatory.
No extra spaces in path/filename? I assume Windows, you are running from the right drive? You could try something like to try finding where it can't find it File file = new File("/users"); if (!file.exists()) { System.out.println("Doesn't exist"); } else { for(File fileInfolder: file.listFiles()){ System.out.println(fileInfolder.getAbsolutePath().toString()); } } [File](http://docs.oracle.com/javase/6/docs/api/java/io/File.html#equals%28java.lang.Object%29)
it is being created and passed to this panel by the previous panel. What is really pissing me off is that sometimes it finds the file and sometimes it does not! The User names a root directory path -- in this case its mine: /Users/chris/Desktop/something_arbitrary Then, the panel fills out some fields and makes the whole directory, saving the information for all of the directories into Configinfo.txt, which is placed into the root directory. This is the first file that the third panel reads without fail each time. The second panel has some further information that will be used by the third panel, so this is written to root + "/Pipeline_Spects.txt", and placed into the root directory (/Users/chris/Desktop/something_arbitrary), which is found by terminal and finder with no problem. The location of this file is simply passed to the next panel and stored as the String specfile, which is then 'made into' the file SpecFile by the buffered reader method- using the same procedure as the reading of Configinfo, with the only difference being that the configinfo read works while the specinfo read only occasionally works. 
I'm trying to get a little above the normal standard of academic bioinformatics program architecture, but this all being said, I will be the only one to ever look at the source code again. 
Are you closing the stream after writing in this previous panel?
That was a concern of mine, and so I made sure that every stream in any panel that could possibly be run by the UI was closed after its purpose was done. The problem persists. 
In which case it might be either: 1. Judging from how you have multiple read attempts in a single try/catch, I suspect the writing is the same. In which case, an exception is probably occurring before it gets to "Pipeline_Specs.txt" and so it never gets written. 2. I see swing, so you might be doing write on the event dispatch thread and read on the current thread. Or vice versa.
I think you are over optimizing. If you think you need to pool them like database connections, you are misunderstanding the messaging pattern. Blocking on sending a message does not make much sense, the whole point is to decouple work from the requester. Just start up a producer once and continue to use it, even across threads. Also, you can trivially create producers that use asynchronous sending (wrt the broker), so blocking is not really an issue.
Broadly speaking you can split methods into methods and functions. Methods provide some interaction with the object that declares them, functions are deterministic and operate on only parameters they are passed. it is good practise to split the two as it makes testing easier. For an example see java.utilities.Collections (which is a daft name for a Util class as it's often confused with the Collection interface.
I don't think this discussion will take us much further. All I took issue with was the generalization that all Java programmers are bad at architecture. You seem to, somewhat unwillingly, retract that statement. I'm happy. &gt; This entire paragraph is made up shit pulled from your ass and based on bad assumptions. For future reference, such statements sidetracks the discussion. Proper tone helps in communication. Also, when I ask you questions, you can't construe them as straw-men. I never said "this is your argument". I explicitly asked if this was what you implied, and I'm happy to hear that it was not. Regarding your advice, I've stated several times that I took no issue with them.
It's to fresh IMHO. No tutorial's. And not easy to get it for people not famillar with GPU programming. Will see. 
java is easy to install on linux. Here [simple example](http://alexander.holbreich.org/2011/11/java-7-on-debian/) 
To use eclipse, you simply install it from the repositories (on Ubuntu: sudo apt-get install eclipse) JDK and JRE should already be installed.
Gotta do something about that name.
Oh... sis tit...
Don't use a Scanner to get input from System.in, use: BufferedReader thePower = new BufferedReader(new InputStreamReader(System.in)); And write your own getInt() method: public int getInt(String prompt, BufferedReader in) { //BufferedReader thePower = new BufferedReader(new InputStreamReader(System.in)); //you can also just put the Readers in the getInt() method and get rid of the BufferedReader parameter int temp; while(true) { try { System.out.print(prompt); temp = Integer.parseInt(in.readLine()); if(temp &lt; 1 || temp &gt; 5) continue; else break; } catch(NumberFormatException e) { System.out.println("Not a valid input: "); } catch(IOException e) {} } This guarantees that you get a valid input. IOException, BufferedReader, and InputStreamReader are all in java.io.*;
java does not know functions only methods. Method is a "function" on an object. However you can't do that.
Android is special case of java. First it's only subsed and restricted to android platfrom. It is preferable if you by you some popular java book and work it through. Please do attentuon to OO concepts, try to understand why they are good. Then you maybe can start directly with android: http://developer.android.com/index.html 
I would also be interested in this
Just learn to use the reddit API, and send POST and GET from java. It's really not difficult in any language. except for brainfuck. fuck brainfuck
That's part of the problem. Never used an api and interested in learning how. Thought this would be a fun project to learn from.
Using an API is like finding out that everything that would normally be really hard for you to implement is as easy as calling a function.
Also, http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/remoting.html#rest-resttemplate
Way to go, Netbeans team, way to go! :)
It's not accidental. There are strict, easily understood inheritance rules that prevent the diamond problem.
Ooh, this looks handy. I always just did this sort of thing manually.
It's not a student assignment :), it's just me, trying to figure things out :) I will try to look into H2 and SQL-Lite
Download Netbeans and look at their tutorial. The IDE comes complete with JDK application server and database so configuration is minimal. It also comes with some sample applications you can run and play with out of the box. Even if you choose to use a different IDE long term it is great for the tutorials and learning. http://netbeans.org/kb/docs/web/jsf20-crud.html http://netbeans.org/index.html 
I second this advice and also I think Sun's/Oracle's JDK already comes with a database called JavaDB which I believe is based on Derby.
awesome :) almost forgot about CVS, I will look into it :)
Netbeans seems like a good idea, I will be going throught the tutorials :) Thank's
Just donwloaded NetBeans Thank's
While working, I found that documentation on JavaDB is scarce (or at least not easy to find), while Apache Derby's is readily available on their site.. that's why I recommended it, either way, they are both very similar.
All completely true. However, whilst the experience from trying the approaches I suggested may not be directly useful in a real situation, I think they help you progress towards understanding *why* a DBMS is quite so valuable. They are likely useful as general programming exercises too, in my opinion, especially given the problem of trying to incorporate each in a 'plug and play' fashion such that you can easily change approach. At the end of the day, you're right- they are poor approaches in many cases, but it's nice to learn that rather than just being told!
Command line, gui, servlet, or service?
JavaDB is Derby
right?? i didnt want to sound like a dumbass in case i was wrong, but i had the idea they were the same thing.
GUI :)
Step 1: Choose an arbitrary URL, e.g. http://www.google.com/, and write a Java program that issues an HTTP GET request to that URL. Print out the HTML that you received to the console.
What you are looking for is called CRUD (Create Read Update Delete). Thats the most wanted feature on a business application at all. For you not to install a "real" database you should use the included JavaDB (Apache Derby). Here is a nice source code to start with: http://www.visualbuilder.com/java/jdbc/tutorial/basic-crud-functionality-using-statements/ Here are some code examples on JavaDB: http://scherer-it.ch/java/javadb_beispiele.html
Hibernate is overkill for someone who barely knows about database programming.
http://www.playframework.org/ Web app. But pretty easy, includes CRUD module that works pretty well. Hooks up to most DBs, including mongrel. In the simplist case, like the use case you described, you just define the model classes and play handles everything else, creating a usable CRUD application. The learning curve is pretty easy, run through the tutorial apps.
this is the funniest most unexpected order to ever to come out of one of these little courts cases, google will fucking hate this lol.
awesome :) thank's .... this is what I was looking for, I had no idea what to google for :) now CRUD is the keyword :D
will research MongoDB
Hey, Thanks for the info. I will look into it. I have learned how to do what I am after in using MySQL (and JDBC to connect to the database). I have just figured out how to do it, but I think I can make it work for me. Is this acceptable.
Ah ok, well at least it autoupdates through java now. Thanks!
Does it need to be Java? Or just run on the JVM? If not, look at Grails. It's basically Ruby on Rails ported to the JVM, and for simple apps like this I believe it does a lot of the work for you... (Note - I've never actually used it, just know people who have)
Only on Lion. Sigh.
http://prevayler.org/old_wiki/Welcome.html
So upgrade? It's only 30 bucks.
OMFG, they actually released JavaFX for Linux!?!
What's the point exactly? It is a hello world demo of Spark?
&gt;In accordance with the OpenJDK guidelines [1], we would like to start the discussion of a new project to explore implementing GPU support in Java with a native JVM. This project intends to enable Java applications to seamlessly take advantage of a GPU--whether it is a discrete device or integrated with a CPU--with the objective to improve the application performance.
I may be mistaken but I don't think you have demonstrated multiple class inheritance. Instead, your code snippet is multiple implementations of interfaces, which is perfectly valid, and has been for some time. Have I misunderstood you?
Has anyone tried just dropping the files in a folder and set the environment variable? I don't see how Java 7 can't run on an older Mac OS. As long as it's 64 bit I guess.
http://mail.openjdk.java.net/pipermail/discuss/2012-August/002717.html Please post the actual document rather than a reposter. 
1. Choose your own IDE. Who honestly takes recommendations on IDEs? It's a matter of preference entirely -- I've gone between Eclipse, NetBeans and IntelliJ IDEA and I've landed on Eclipse, personally. 2. I used Oracle's JDK while I had Ubuntu installed. [&gt;random google search comparison&lt;](http://explodingjava.blogspot.com/2010/05/oracle-sun-jdk-vs-openjdk-and-jsf.html) 3. I don't see why Java-related things wouldn't be in your path, so I doubt you'll need to know where the core files are stored. 4. "Setting up" Java isn't hard. You can just as easily grab the JDK from Oracle's website like you would for Windows -- just get your appropriate dowload for Linux.
How can you render a template with this framework like Flask's render_template function in Python? I've been trying to make a small site but I've gotten frustrated trying to show an html page, I don't want to write the html in the same file as the code.
I'm usually pretty laid back about things but that capitalised package name description just made me physically wince.
Why don't you just make a simple web interface to do this? It sounds like your sites are static when they should probably be database backed anyway, that would allow for much much easier editing of content, you definitely should not be pulling and re-uploading files to change something like this on a *live* site. Or have I made a mistake in the context here?
Interesting point! However, I don't really see the issue in re-uploading a file.
The problem with reuploading is what if they accidentally upload a blank document? They don't have a copy of the page, only you do. And since the site it on the FTP and was written over, now their coupon page doesn't work. Something like Wordpress or Drupal would be ideal, because users can login and edit a page from the comfort of the Admin page. There are plugins/modules to do simple stuff like this for you. Static HTML does the job fine. Editing is just more of a pain in the neck. I agree with fagcraft that PHP would be the best for something like this.
I literally had this happen to me yesterday. Open up Local\Temp\ and then delete the folder called java. After that open control panel, add or remove programs, then remove java, and all updates to it. After this, reinstall! :) I know very little about java, or computers to be honest, so this is most definitely not the most efficient fix, but it worked for me. Hope this helps
I just came across this, but have not tried it out yet. Basically a Groovy solution for Groovy code for what you want to do with Java (code generation for interfaces). http://groovy.codehaus.org/gapi/groovy/util/ProxyGenerator.html Classes to generate 'Proxy' objects which implement interfaces, maps of closures and/or extend classes/delegates. The interesting method is the setDebug one. setDebug(boolean debug) Instructs ProxyGenerator to dump generated Groovy source code to standard output during construction. 
I love how you took a simple problem and solved it with a difficult solution. Although, if you want to make it much easier for yourself, then simply install a CMS.
You could separate the code from the data and let the code parse the data. That way you only need to upload a simple text/xml or whatever file rather than the whole code?
That's the plan - custom programs.
Interesting concept, how does it react to inheritance?
It ist not that bad as it seemes to be. And such default (or guard) methods are needed for implemetation of JSR-335 (Project Lambda) means closure support. However indeed this itroduces multiple inheritance, which rase new kind of complexity. Here some [details] (http://cr.openjdk.java.net/~briangoetz/lambda/Defender%20Methods%20v4.pdf) how the future java would resolve the problems. E.g. in case of diamond inheritance it would be: interface A { void m() default X.a; } interface B extends A { void m() default X.b; } interface C extends A { void m() default X.b; } class D implements B, C { } &gt;In this case, the inheritance of m() in D would be ambiguous (because the set of mostspecific default-providing interfaces contains both B and C). At compile time D would be rejected unless D implements a body for m(). 
Do you use reflection, cache the reflected structures, or generate reader classes to be JITted?
10 Reasons to use Javolution (as taken from their website) 1. Javolution classes are simple to use, even simpler than most JDK classes. You don't need to guess the capacity of a TextBuilder, FastTable or a FastMap, their size expand gently without ever incurring expensive resize/copy or rehash operations (unlike StringBuilder, ArrayList or HashMap). 2. Developers may achieve true separation of concerns (e.g. logging, configuration) through Context Programming or by using classes such as Configurable. 3. Javolution classes are fast, very fast (e.g. Text insertion/deletion in O[Log(n)] instead of O[n] for standard StringBuffer/StringBuilder). 4. All Javolution classes are hard real-time compliant and have highly deterministic behavior (in the microsecond range). Furthermore (unlike the standard library), Javolution is RTSJ safe (no memory clash or memory leak when used with Java Real-Time extension). 5. Javolution makes it easy for concurrent algorithms to take advantage of multi-processors systems. 6. Javolution's real-time collection classes (map, list, table and set) can be used in place of most standard collection classes and provide numerous additional capabilities. 7. Any Java class can be serialized/deserialized in XML format in any form you may want, also no need to implement Serializable or for the platform to support serialization 8. Javolution provides Struct and Union classes for direct interoperability with C/C++ applications. 9. Javolution runs on most platforms from the simplest J2ME CLDC 1.1 to the latest J2EE 5.0 with parameterized types. 10. Javolution is a pure Java Solution (no native code), small (less than 300 KBytes jar file) and free; permission to use, copy, modify, and distribute this software is freely granted, provided that copyright notices are preserved (BSD License).
&gt;Default methods are a horrible idea. Yes it's not a kind of brilliant solutions. ;) It's maybe a choosin' of most harmless one ;) But seemd to be not that bad as other alternatives that java need to have for **closures support**. Like Intoducing new interfaces an loose backward compability to every existing java sources and libs.
This +1! This was the first thing that came to my mind - what happens if some pissed off customer decides to upload a PHP file that does something nasty? NEVER allow a client to upload executable code!
This tool came out of some software analysis R&amp;D work we've been doing. We've been trying it out on some of our projects and think we're on to something. But we want to get some feedback from varied users. So if you get a chance, please try it out and do tell us what you think. We'd consider this beta quality software, so please understand that there is likely to be some bugs that we haven't found yet as well as some rough edges. Thanks for your time Reddit!
I've used this library and I have say I like it pretty well. I like how the API documentation includes benchmarks for comparison along with the methods and implementation details. The container classes worked well for me, although beware that FastList is implemented as a linked list and so FastList.get(i) will be much slower than ArrayList.get(i). Again, though, their documentation explains this fact and gives example code of how to iterate through the list in a much faster way. I got a big speedup using their Cursor class to parse text, although the code ends up being more complicated that doing naive string splits, etc. 
.
I think it's safe, provided you tell you clients that there is a security change there. The security responsibility has changed from the system program to the users. Provided their machine is physically safe, and the program you are delivering is not copied around, they'll be safe enough. A no-logon system does not equate no security. It means a change in the type of security, and the procedures to maintain security. If the FTP logon and the transfer are performed in the same running program, that would be more secure. You don't say what language the ftp client is. It might need an obfuscator, to prevent readable logon credentials being extracted from the launchable app. You should get the program to confirm the php file it is uploading is the same as the file it just created. Don't upload a php file containing runnable code from these multiple, client-specific ftp clients. Upload a text file which is read and used by the php running on your server. Executive briefing: Make the users aware that they now have a burden of responsibility for security. Keep their laptops safe. Obfuscation and upload check. You'll be fine. (NB: Not totally secure, but nicely balanced between effort and usability, and security enough in relation to the likelihood of an exploit, and the size of the potential risk.) 
Recent jdk's have addressed java slowness so I'm not sure javolution is still warranted. I know that java designers have had back and forth discussions challenging the need for javolution. Just a heads up. I personally don't use it as I found it sort of pidgeonholed me.
Both Trove and Guava appear to be faster (http://code.google.com/p/jacobe/wiki/BenchmarksResults)
Are you sure that you are passing "Start" from the command line and does the case match? Since you are using Eclipse, you should run the program in debug mode and step through the code line by line. This will allow you to see exactly what is going on. The first thing that I would check is to make sure your command line parameters are being parsed correctly. 
I may have read this wrong, but does it not mean, if cs IS null AND the parsedcommand inputted is "Start" THEN do this stuff or ELSE error out.
Set append mode to true in the constructor. [Javadoc](http://docs.oracle.com/javase/7/docs/api/java/io/FileWriter.html#FileWriter\(java.io.File,%20boolean\))
Just tried out the groovy.util.ProxyGenerator class with the Groovy Console. I'm glad you posted your Java question because it led to my discovery of the groovy.util.ProxyGenerator class. def pgi = groovy.util.ProxyGenerator.INSTANCE pgi.debug = true pgi.instantiateAggregate( [java.lang.Runnable] ); println "" pgi.instantiateAggregateFromBaseClass( [javax.swing.table.AbstractTableModel] ); Ouput: proxy source: ------------------ class GroovyObjectSupport_groovyProxy implements java.lang.Runnable { private closureMap GroovyObjectSupport_groovyProxy(map) { super() this.closureMap = map } void run() { throw new UnsupportedOperationException() } } new GroovyObjectSupport_groovyProxy(map) ------------------ proxy source: ------------------ class AbstractTableModel_groovyProxy extends javax.swing.table.AbstractTableModel { private closureMap AbstractTableModel_groovyProxy(map) { super() this.closureMap = map } int getRowCount() { throw new UnsupportedOperationException() } int getColumnCount() { throw new UnsupportedOperationException() } java.lang.Object getValueAt(int p0, int p1) { throw new UnsupportedOperationException() } } new AbstractTableModel_groovyProxy(map) ------------------ Result: AbstractTableModel_groovyProxy@79095fd7
What does dependency injection have to do with anything?
I am talking about @Stateless beans, are you not?
The @Stateless EJBs do not make the underlying persistence stateless - it still uses an entity cache (and session), transaction management and is not capable of doing bulk inserts and/or updates. See the javadoc for [org.hibernate.StatelessSession](http://docs.jboss.org/hibernate/orm/4.1/javadocs/): "A stateless session does not implement a first-level cache nor interact with any second-level cache, nor does it implement transactional write-behind or automatic dirty checking, nor do operations cascade to associated instances. Collections are ignored by a stateless session. Operations performed via a stateless session bypass Hibernate's event model and interceptors. Stateless sessions are vulnerable to data aliasing effects, due to the lack of a first-level cache." This eliminates some of the features of JPA, but enables you to work with huge record sets - given you don't need synchronisation of entities in concurrent sessions.
While some of the content was useful, the poor quality of the writing and general inability of the auhor to follow basic grammar, captalization and syntax rules made reading it a trial. I suggest the author should strongly consider either neatening up their prose or refraining from future efforts.
Yeah thats true, it does still use the same entity management as stateful beans. I've had a number of issues with dirty checking actually now that you bring this up and have had to implement my own with entity descriptor classes.. I'm assuming the same thing could be done within a container for a managed bean to check if items in the stateless bean have changed.. but I agree, this should not be something required as a work around, it should be caked in... Does Spring offer capabilities like the ones we are describing?
The current failsafe is to move the file to be edited into a "backup" folder. If the transfer is a success, it gets removed. If it's a failure, the original file is moved back to the mobile directory.
Well, obviously. I just don't know how many saboteurs are going to be attacking a mom and pop, single store restaurant. 
I like this! Thanks for the tips.
The program generates the php file itself. No nasty executable code ;) 
That's a reasonable start - at least you don't lose any data - although you still have the possibility of the file transfer aborting *after* the move and *before* the new file transfer is completed.
I was just looking around my project for an example.. You can explicitly invalidate cache via //(em is a JPA @Resource for the given session) em.getEntityManagerFactory().getCache().evictAll(); There are multiple levels of use for this -- you can do this at a class-specific level, or by a specific object and it's ID, or all like above. Our goal, in this stateless approach, is to have this stateless bean dirty all the other instances, which is definitely possible -- however the point of all of this is that the cache is not automatically invalidated between instances -- which is a good thing by default. In the special case you may prefer to manually handle dirtying other caches. 
Well, they can't upload a blank document :P The program itself generates everything BUT the coupon document. If they hit "upload" without filling anything in, the web page will still pull up, including header and footer, there just won't be any coupons there.
If it really worked, it would be an amazing thing.
&gt; I would say that the point of interfaces is to work around the complexities of multiple inheritance. Why would you say that? What are the complexities of MI that interfaces work around? (The dreaded diamond is easy to deal with, if that's what you have in mind. Just take the implementations in the order they appear in the "extends..." clause.) &gt; Default methods are for interface definers and implementors, and they're completely transparent for an interface consumer. So again, what does this have to do with DI? Completely transparent? As long as they could potentially execute, they are not transparent to the caller. I write class X, deployed in x.jar. Class X depends upon interface Y and implementation class Yolo, deployed y.jar. Every time I change anything in the implementation, even changes that don't affect the API presented to x.jar, I have to redeploy y.jar and all dependencies (x.jar). (Jar files are designed to list dependencies in the manifest file under the Class-Path header - http://goo.gl/cOfYN) Instead, I change it so that implementation class Yolo is moved to yolo.jar, which depends on y.jar. Now if implementation code changes, I deploy yolo.jar and all dependencies: none. Only if I change the API do I need to redeploy x.jar and y.jar...which makes total sense, since that's the point of agreement between the caller and implementation, if I change it I'd better be updating the others! This is dependency inversion. Notice I didn't say anything about spring or guice or any other DI tool. Inverting dependency is a *design* choice that has nothing to do with tools, and it's a design choice that is fundamental to good design. It's good because if you're working on Y and I'm working on X, I no longer have to redeploy my code whenever code in your part of the project changes. Our implementations are isolated from each other. DI is only possible if the language makes it possible to *guarantee* certain invariants. By allowing code to be optionally wrapped up with interfaces, the guarantee that interfaces will be free of implementation bugs can no longer be made. (APIs can always have design bugs. Nothing we can do about that.) Now you start clubbing code into your interface in a way that it can't be physically separated in the deployment. Great, we've taken a huge step backwards now, and whenever you fix a bug in that code, I'm forced to create a new deployment bundle with your new y.jar. No thank you.
&gt; The question is what stability is and how this is granted in detail. I don't know what you mean by "how [stability] is granted"? &gt; Cause we can thing of stability as volatility of a component during his life. Therefore stablity is detemined by many things and not only by capabilities of java language. Stability (as I mean it) is defined in the paper I linked. I don't see any ambiguity in what is meant according to the definition in there. Do you? (Maybe you can help me understand what you mean.) &gt; Stability is not determined by packaging. Exactly right. Packaging is determined by stability, though. And if you reduce the stability of interfaces by adding implementation to them, then you remove the ability to package things the way you might want. &gt; So the introduction of default method just makes borders between class and interface smoother, which introduces another level of complexity. No, it doesn't make them smoother. The problem is it makes the distinction between class and interface *vague*. But the thing that makes an interface different from a class that is useful is what's being done away with by default methods. :-(
DI is a user tool. Library writers need tools too. This is such a tool. DI simply does not solve the problem of how to evolve an interface in a source compatible way. Look at the mess they (Sun) created when they had to create the Collections-class with the sort , binarySearch and fill methods and what have you. If default methods had been available, you would have seen "myList.sort()" instead of "Collections.sort(myList)". Who cares? Well, try and replace the Collections.sort in your code with some other implementation, and then compare that with injecting another implementation for myList instead, and you should be able to see how default methods... is something good. But this is a somewhat moot point. The real point is for API writers, not the API users.
&gt; ...having code in the interface will only mean that you still have no idea where the implemenation comes from. Am I missing something here? The example I read was as follows: interface List { List reverse() default Collections.reverse; } In this case List is packaged with Collections. What if it's not? What if it refers to some other code in some other deployment unit completely? Aren't we saying now that this deployment unit depends on this other deployment unit that contains the default implementation? Any way you slice it, we now have a dependency arrow pointing from an interface to some kind of code container. Is it really a good idea to have this dependency go in this direction? I assume I must be wrong here because Goetz is a seriously smart dude, and he seems to have buy-in for the idea from fellers like Neal Gafter - http://goo.gl/YbVyy ... maybe the missing bit here is that the usage I'm worried about they're considering abuse?
Are they fast AND time deterministic? I know for an older project I worked on, as soon as the map size grew quite large (and no I couldn't provide an estimate ahead of how big the map would need to be), put's were taking an order of many magnitudes slower as the map had to be re-sized and rehashed. Javolution gives a fast (maybe not the fastest) version of collections utils, but a near concrete guarantee that all writes to it take the same length of time to execute (or at least not magnitudes between the fastest and slowest writes).
Hell yeah! Wonderful news. As it stands Java bindings for OpenCL aren't terribly difficult to use but it forces the use of C-style programming and isn't very elegant. Being able to do the same thing with objects and garbage collection will really take GPU programming to another level; I think it's a great idea for all parties involved.
It's not an ideal solution I grant. For my projects, I didn't need to do random access to the FastList, was happy enough to iterate through it. Coding for it can be a little extra laboursome, but if you understand the gains you are going to achieve using it (and these gains apply to your problem domain), then I've found it worth the effort.
What does this mean for Java gaming? 
Ok, for java gaming it means a shit ton of sin/cos operations and matrix math and all calculations can be faster. This means you can render faster. My one concern is how oracle is going to use the GPU memory. I think they should not do GCing and leave the choice to hotspot. They should be able to annotate a method for a code. They should let the programmer deal with objects that deal with buffers and all the numbers but also provide the abstract methods that do more. I don't want to many GPU out of memory errors. Then again my screen would be black before I get that error ;)
Oracle? Aw, crap... now it's going to be as difficult to use as possible.
Trove and Guava look interesting, I'll have to check them out. Each of the three seem to have their own philosophical focus and associated tradeoffs: * Trove - focuses on working with arrays of primitives * Guava - tries to fill in what's "missing" in the standard library or what is commonly useful * Javalution - realtime/guaranteed response time for operations
have you ever thought about someone sniffing the network transfer and grab your FTP username/password?
You don't have a JVM running on the GPU, moreso the JVM handles the compilation of targetted java code and loads it to the GPU, and handles the marshalling and unmarshalling of the data to connect the GPU tasks to the java program on the outer system. I doubt you will be able to call Java Methods, unless those methods themselves are within the targetted code as well. If I understand correctly, code that pushes data over to a method, and that method can be self contained in a class or collection of classes targetted specifically for the GPU, and wait for that method to return... will run. Any methods that too and fro out of the sandbox method will likely never run on the GPU, even though you will be able to suggest to the JVM you want it to.
I am curious. How well is it implemented on OS X?
See also ``fastutil``.
&gt; Recent jdk's have addressed java slowness so I'm not sure javolution is still warranted. Speed isn't necessarily the only reason to use Javolution. Actually, I wouldn't make a blanket recommendation of Javolution for performance reasons; people should benchmark before just picking something because they think it's "fast". IMHO the best reason to use Javolution -- something which *has not* been addressed by the standard class lib -- is that it can provide deterministic behavior for many of its data structures.
I am working on more example and will describe these issues. I am trying to create step by step technical notes, but you are totally right...
&gt;Why would you say that? [On interfaces in Java, James Gosling, in 1999.](http://www.artima.com/intv/gosling13.html) Oh, and when I say that interfaces is about avoiding programmer headaches, I'm not saying I agree with that rationale. Gosling didn't seem to be entirely happy with the interface concept, fwiw. [Here's another one](http://www.javaworld.com/javaqa/2002-07/02-qa-0719-multinheritance.html), though not from Gosling. &gt;[...] This is dependency inversion. Notice I didn't say anything about spring or guice or any other DI tool. But you did here: &gt;&gt;With a DI tool like guice there's no need for default methods, it's just another thing that complicates the language and makes it hard to control dependencies in large projects. Forgive me if I'm being an idiot, but how does Guice solve the problems default methods solve again? &gt;By allowing code to be optionally wrapped up with interfaces, the guarantee that interfaces will be free of implementation bugs can no longer be made. *That's* your concern? First of all, the implementation has to be somewhere. If there's a bug in yolo.jar, you have to redeploy it, just like you would with y.jar. Well, you could override the faulty method in Yolo instead, though I wouldn't condone such things. Java (without OSGi) doesn't really have a concept of jar versioning, and the rules for when you break binary compatibility are [a bit more complex than what you stated]( http://wiki.eclipse.org/Evolving_Java-based_APIs_2). Long story short, you won't have to redeploy x.jar if you make a binary compatible change in y.jar. (I'm not arguing against dependency inversion by the way, and I know very well how it works. It's the bee's knees.)
I got it solved. Thanks though! I'll head on over there.
TL;DR summary: Author dislikes having to pass the "this" reference to the delegate and therefore everyone is doing it wrong.
Not sure why this is in the Java sub-reddit - the article doesn't even mention Java.
OK, for and while loops are interchangeable . Here's the sameloop in while : int i = this.score.length; while (i --&gt; 0) this.score [i] = -1;
So the GoF didn't explicitly define delegation but they have "misled" us? Does not compute.
repost from programming if my brain serves me correctly
as far as I understand the instructions these methods should take a value (the double) and a project / quiz where the value (or score in your case) should be set. Otherwise I really don't get the instructions and your code doesn't help either as I can't recognise the intention behind these (I know your code isn't complete) But for the return-value I have 2 ideas. You can check if the integer (the number of the project / quiz) is a valid index for an entry yourself or you can let java do that for you. If you want to check it yourself you need the size of the array. *myArrayVariable.size()* should be the methodcall. With this you can check how many entries the array has. If the (project/quiznumber - 1) is greater than the size of the array, then you return false, otherwise you insert the values and return true. The -1 is because array indexes begin at 0. for example: if you have 20 entries, the last entry has the index 19. The second approach would be Exceptions. If you access an array out of it's bounds, Java will throw an ArrayIndexOutBoundsException. with the following you don't have to check it yourself boolean setProjectScore(projectNumber, scoreValue) { try { myArray[projectNumber] = scorevalue; } catch (Exception e) { return false; } return true; } hope this helps
 Thanks! I have to make 10 quiz scores so will it look something like this? [code](https://gist.github.com/3396517)
Dang! sorry but I forgot include this part in the instructions: You may only use while(){ } or do{ }while() loops for any loops in this project. sorry 'bout that :\ 
Well I don't think a loop is necessary. I edited my post with a better description of the method I gave you.
 Cool but how do I put the grades into the method if I'm dealing with 10 grades? 
Well, it looks like that's something you should be doing in your Main class: &gt;Fill the projects and quizzes for this student. Use the getNextProjectIndex() and getNextQuizIndex() methods to find the indexes in which to add the scores. Given the way it is worded, it seems like you will be entering the quiz scores individually by hand through the console using your setQuizScore() method. Find the next quiz index that needs to be filled in with the getNextQuizIndex() and then use that index as the quizID parameter in your setQuizScore() method.
 i have the rest of those methods set up but am a little confused on how t do this. Can u show me what u mean by using an example with my code? [code](https://gist.github.com/3397038) fyi it's a lil messy :P
 You're amazing! :D thank you so much for doing that! Just one more question: How will I display this information to the console using the main() method? 
 Is there an easier way? If not, will I have to make a: quizScoreOutput = sampleStudent.setQuizScore(95.7, getNextQuizIndex()); for each project and quiz grade?
 I hate to ask but could u provide an example? I'm still confused on how the main() method will handle all this :p but at least I'm nearly done! I really appreciate all the help :)
If you're getting a "No Class Found Exception", then Java is working fine, but there is an error in whatever code you are running, or (more likely) you should google "Java Classpaths".
This should be taken to r/techsupport. This subreddit is dedicated to development in Java, not troubleshooting desktop issues. Your best bet would be to completely remove any semblance of Java from your system and reinstall, here is a direct link to download Java: http://www.java.com/en/download/index.jsp If you can I'd also get away from Vista it's a horrible OS, I'd get a Windows 7 upgrade key and never look back. 
When you create a new JTextField you can supply it a length integer like so: JTextField field = new JTextField(4); I created a short example which works just fine: public class Test extends JFrame{ JTextField field = new JTextField(4); public Test(){ setSize(400, 400); setVisible(true); setLayout(new FlowLayout()); add(field); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); field.setText("Hi there everybody"); } public static void main(String args[]){ new Test(); } }
Trust me, the machine code just makes eyes bleed, I have to do most of this through the UI editor Properties panel. However, this is what I am doing and where the problem occurs: public ConfigureUI(String hi) { initComponents(); //The machine generated construction code that builds all of the components. ConfigFile = hi; //ConfigFile is the String of the path name of the file that is written and read each time the configure panel is opened. jTextField13.setText(ConfigFile); //jTextField13 is the appropriate field for the path name retrieveConfigFile(); //reads the configure file using a buffered reader, does nothing if no file is present. } This results in the text field being resized to the length of the string, which as a path name, is quite long. 
No really, [check the layout managers](http://bit.ly/MGCyDu). Understanding how the layout works takes you 80% out of the frustation when trying to create an UI in AWT/Swing. Also, [MiGLayout](http://www.miglayout.com/) is awesome. 
Looks great. Really impressed with the first iteration. Thanks for the content!
Hmmm...but method parameter names are in the class files: They are in LocalVariableTable (Spec 4.7.13), all with startPc = 0. No synthetic arguments are included in this case and this new proposal wouldn't include them too. OK, 2 Drawbacks: - if i compile without Debug info, then we don't have this information. on the other side they propose, you could opt-out of this feature and many class files will not contain this info - like with LocalVar - only methods with code have this info (no abstract) So I wonder if they want to make class files even more redundant or if there would be a way to use LocalVariableTable in a standardized way also for methods without code and debug info (the spec doesn't say anything against having more info in such cases) This repeating annotation stuff looks far to complicated for me for the expected benefit. Why putting energy in this? It would be far better to have things like Annotation Constants ... after copying @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL) through the whole system (only one example) I desparately want something like that. But repeating annotations of same type? hmmm...not for this complexity.
Sorry, I was getting frustrated at Java not working on anything so I searched and found this and thought that since my problem was with Java then this place would be were to post it. Anyway, I'm pretty sure I removed everything to do with Java on my computer when I was un/reinstalling it which is one of the reasons its so frustrating. Anyway, as I found out from trying minecraft it says "Could not create virtual machine" so maybe that's more. I guess I should also post this on techsupport.
I tried using Heroku for java as soon as they announced it. Absolute nightmare with maven. Nope, no thanks.
memcached is one option
We're using ehcache with spring. http://ehcache.org/
Is it possible to move the DB to the same box as the app? At 100 rows I don't get the impression there's a lot of DB load to worry about. Anyway, if you're using Hibernate for ORM you could check out the [Hibernate level-2 cache] (http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/performance.html). Hibernate provides a pluggable caching architecture and you can supply your own caching framework for it to use. [Ehcache](http://ehcache.org/) is a popular choice for that and I have personally worked with several "enterprise" apps that use it.
This. EhCache seems like a good solution for your case. Another possible solution is replication... what DBMS are we talking about? Also... what kind of persistence layer are you using? Plain JDBC?
If you want something simple that you manually interact with check out Guava's cache classes: http://code.google.com/p/guava-libraries/wiki/CachesExplained
Pull the table into an in-memory [H2 database](http://www.h2database.com/html/main.html) at startup, and inject the H2 data source into your DAO. (If you do the queries right, and don't use any non-standard SQL, then you'll be able to use the same DAO with both data sources.)
Thanks! 
NICE! Thanks a ton! 
What makes you sure you can cache the data better than the db and the page cache? If it fits in ram, you're already there.
Take a look at infinispan or the commercial version java gata grid.
In my opinion... *Java* * Gets you paid employment. This is my primary motivation. * Run on Linux and Macs. * Has IDEs. They all suck, but they suck less than not having one. * Is reasonably fast. * Has a good library, is well documented, has a good community. * The language itself sucks. Basic data types are not actually objects, and a hundred other annoyances. * Deployment sucks. There's no standard way to deploy or start a Java application, unless you count WebStart which I've had big problems with. You can get caught in jar versioning hell. * Java is just the beginning. Then you need to learn all the frameworks around it. * Minecraft is written in Java. *C#* * Doesn't run on Linux. Well, there's Mono, I guess. * Gets you paid employment. * Otherwise I try to avoid it as best I can. *Python* * The language itself is okay. * Runs slowly. * I still haven't found a good IDE for it. * Has a good community. * Is good for glueing bits of C code together. * [Eve Online](http://www.eveonline.com/) is written in Python. *C* * Runs very, very fast. * Runs on almost every architecture known to man. * Difficult to program in. It's not far from assembly. * Bugs can be hard to find. You need to deallocate every bit of memory you allocate, and a bit of faulty pointer arithmetic can take ages to find. *Smalltalk* * Once you get good at Smalltalk, every other programming language will suck in comparison. * Everything is an object. Even integers. Even "null". You can, for example, call "printString"* on absolutely everything. (*) differs by dialect. * IDE is integrated. It also contains the worlds best debugger (IMHO). * Good luck finding libraries you need. * Sadly, never became popular. There is a small community. * Dialects tend to be different from each other. VisualWorks is pretty good. Squeak has really crappy graphics. Pharo is a slower version of Squeak. 
Java is good at: * Having lots of programmers working on projects at once * Creating programs that are about as fast as they can be while using garbage collection * Very popular (good for employment, IDE/library availability, etc) Java is bad at: * Sharing memory (unless you're on android) * Startup times (unless you're on android) * Memory and cache efficiency * Speed (vs non-GC languages) * Code compactness You can do games java. Minecraft is a great example. Huge rich 3d environment, first person, high refresh rate, fully interactive, etc. Don't let the deliberately throwback graphics style fool you either. It pushes some high polygon counts and can work a graphics card pretty hard. That game sells about 10k copies a day at $25 a piece and it worked it's way up to that point mostly being coded by one guy in java. You could do it in C/C++ instead, but it would be a very different animal. Java can handle it, but it does it in it's own way. I think a lot of Java code could learn from Minecraft's example. The ability to play it in a browser, and have an executable launcher that runs the same program, the same actual .jar file, outside of a browser. The way both the launcher and the browser versions use the machine's built in java install. The auto-update system that downloads new versions on the fly transparently without needing a new launcher or to re-launch. There are a lot of cool things that everyone should copy in there that really use the potential of java well.
Not my choice where the database resides, and I'm afraid there is a lot of db io. I probably exaggerated when saying only 100 rows, there are several tables which it looks against each for processing multiplying it up to 50k queries a second during batch and certain report pages. I could annotate them as cacheable, but as mentioned before (unless I misunderstand how it works) there are several ways of looking up the data, and cacheable would cache the method meaning multiple calls to the db when one would suffice.
An instance variable that is associated with an instance of a class. So for example if you have: public class Test { public int x = 1; // instance variable public Test() {} public int getX() { return this.x; } public static void main(String[] args) { Test t = new Test(); int xa = t.x; // xa = 1 int xb = t.getX() // xb = 1 } } In this case, x is an instance variable, accessible through an instance, or object, of class Test. In the main function, we are getting the value of the instance variable x through two different ways. Hope this helps!
[Base64 Encoding and Decoding](http://openjdk.java.net/projects/jdk8/features#135) - this will close [13 years old bug report](http://bugs.sun.com/view_bug.do?bug_id=4235519) ;)
Thanks that really helped me understand.
Glad I could help :)
Upgrade your JRE to version 7 or later.
Ok I solved that problem, now I'm getting a different error of 'Exception in thread "main" java.lang.NoClassDefFoundError: HelloWorldApp/class Sorry about all the errors, once I get them once I'll know how to go past them. I believe its because of my paths but can someone explain what I have to set?
Thanks, I'll check it out!
Then I assume that you are running the program from the wrong directory. I see that you don't have any package declaration i.e. you are using the default package. Could you verify that your are running your app from the directory where the HelloWorldApp.class file has been compiled? If on the other hand your class with the main method was in the package foo.bar, then your directory structure would look similar to the package declaration as well, like so: foo/bar/HelloWorldApp.class In that case, you would need to launch your app from the parent directory of foo: $ java foo.bar.HelloWorldApp Note that the path separators are replaced with dots here, which is also the reason why you get the error if you add the .class extension in your command because java then tries to look for the main method in the Class 'class' in the HelloWorldApp directory.
Spring looks interesting, but might be more than I need to deal with. (What's an enterprise application anyway)
I have developped a pretty big application with lots of tables using SmartGWT which is another layer of widgets on top of GWT. [Link to demo with code, very impressive stuff.](http://www.smartclient.com/smartgwt/showcase/#main) It's very rich, complete and very fast to develop complex applications. Obviously it might be overkill if you have simple requirements and pure GWT might suit you more.
The UI elements look perfect for what I'm trying to do, thanks! I'm going to check it out. Is this a plug-in for GWT? I guess I'll try to learn GWT first then check out these addons. Thanks again, getting started in this field is quite daunting, even for a seasoned programmer.
Try these: http://stackoverflow.com/questions/8463747/hql-select-range-of-results http://stackoverflow.com/questions/2826319/using-hibernates-scrollableresults-to-slowly-read-90-million-records
upvote for user name 
Technically, JSF is the *official* standard for web-based applications. It has been included in the official Java EE spec since at least version 5. There are plenty of other frameworks which have popular usage, and some are even *de facto* standards like Struts and Spring MVC.
Yup, this is a shitty error message. It could say something more useful about needing a newer version of JRE but instead it gives this error message that's cryptic to 99% of its users. I see people get caught up on this error all the time. 
I'm working on learning CCS, so hopefully I can learn both in tandem. Thanks!
Which proves that the folks responsible for JSF work for employers that do not perform pre-employment drug screening. I mean, a 6-step lifecycle which can cause a getter or setter to be called 2 or 3 times? What kind of garbage is that?
Think of Java SE (Standard Edition) as the common set of tools needed to write Java programs. If your software runs on one machine, you won't need much else. If your application is split across many machines, provides services to other applications, needs high availability in terms of scalability and fail over - the much bigger needs of enterprise - that's when Java EE becomes more relevant. 
JSF is a framework. It is common for JSF components to use JQuery.
This isn't just a batch type application, but there is batch loading of data, and batch processing of data. The rest of the work is user driven UI, but the slowness of the user means that the database doesn't get overwhelmed by the volume of requests. When batching it was built to reuse the existing functionality, which means a lot of looping and lookups. As for the several ways of looking up the data, some of the tables have multiple foreign keys against other tables. So to use a simplified idea of Students, Classes and Buildings, some of the lookups for classes would be on a per building basis and sometimes the lookup would be for a student. If you had a lot of classes how could you reuse the cache of classes that was built during the lookups via buildings so that the students batch wouldn't have to reload the data.
&gt; then to only DO it once That's exactly what JSF is doing. The value is calculated once and stored once *in the bean*. Why should JSF store the value twice? Especially when the value of an EL expression can change as events are processed in other layers? &gt; I spent an entire month trying to make JSF fit my needs, &gt; unsuccessfully. Clearly others have gotten JSF to meet their needs, successfully. &gt; An entire month wasted. The world's saddest song on the world's smallest violin. &gt; You aren't going to change my opinion of JSF. I don't really care about your opinion about JSF. What bothers me is that instead of providing respectful disagreement, you respond with childish trolling.
I disagree that in your evaluation of the java cache not being great. Some test examples show java being faster that C/C++ because of how the java cache handles recursion.
Childish trolling my ass. JSF did not work for me, as I explained, and I don't care for the overall design. And yes, I'm rather ticked off that an entire month was lost on a project with a set time limit.
If you have a Lynda.com subscription, or have $25 to spend for one month of access, there are several interactive video tutorials (classes, really) available there. I am also new to programming and want to learn Java, so I am doing these three courses in order: * Foundations of Programming: Fundamentals * Foundations of Programming: Object-Oriented Design * Java Essential Training I have also been working through Sam's "Teach Yourself Java in 24 Hours," and it has been a pretty good hands-on introduction. But I would learn the programming fundamentals FIRST before you step into this.
I am sorry you had so much difficulty. I find JSF to be very easy to work with. For my project it cut development time dramatically. All the front end stuff is easy when you can use a components. I am curious if you could explain why JSF failed for you?
Cool. let me know what your thoughts are on that book once you finish.
I love vaadin. 
I'm exactly the person you're talking about, and I'm still trying to figure out how to move from standalone java apps to web apps. I'd certainly like to avoid learning js, so google web toolkit is looking quite appealing. However I'd love to learn things the "right" way....I'm going to look into this Jersey thing.
What is the target platform for your application? Tomcat? Full-featured Application Server? Any idea where to store user information? Database? LDAP? I'm guessing it's not going to be an enterprise application... take a look at [Spring Security](http://static.springsource.org/spring-security/site/) if you only want something to integrate security. If you want to use a complete product for your needs, maybe [JBoss Portal](http://www.jboss.org/jbossportal/) (or even [Liferay](http://www.liferay.com/documentation/liferay-portal/6.1/user-guide/-/ai/lp-6-1-ugen01-what-is-liferay-ndash-0)) may be worth a look. And regarding Django's contrib.auth... you get very basic user objects with the most simplistic permissions and group-based security approach one could imagine. You have to put a lot of work into integrating it with your actual application - so, you really get nothing 'instantly'.
[so is eclipse!](http://www.eclipse.org/downloads/)
Take a look at JSF and PrimeFaces. That will get you up and running with a web application without learning JavaScript. I would still recommend adding JavaScript to your skillset eventually. www.primefaces.org
This, but beware [the shadow](http://en.wikipedia.org/wiki/Variable_shadowing)! Try to avoid naming method local variables with the same names as instance level variables as it can lead to ambiguity and confusing code at best and runtime bugs/errors at worst. If you insist on naming a method local scoped variable the same as an instance level variable, always prefix the instance level variable with the 'this.' keyword when you are intending to reference it otherwise you will be referencing the method local variable.
Vaadin is quickest way to pump out a complex rich web application that I've seen so far. Uses GWT for rendering and all you need to get started is the vaadin jar
just so you know, if (x) in java is not legal.
To cut this off 'fore you get downvoted to oblivion: (x &gt; 1 &amp;&amp; x &lt; 100) || x &lt; 0
 will this work with negative numbers? from the instructions: the number x is between 1 and 100 (both exclusive) or the number is negative."
Breaking it down, we have: x is greater than 1 and x is less than one hundred or x is less than zero So yes, good for negatives.
Interesting enough article, but extremely wordy - the cynic in me hates articles spread across multiple web pages at the best of time, and this one seems verbose to the point where I'm thinking it's a deliberate ploy to spread the content onto as many pages as possible.
This is probably too late, but here is what I came up with. public class Student { // We declare three fields to hold some information about the student. // We assume that this information does not change. // For good measure, we mark these fields final, which means they // cannot be changed, once they have had a value assigned. // If a final field is only declared, which is the case here, // a value must be assigned to it in the constructor(s). private final int studentID; private final String firstName; private final String lastName; // We also need to store some scores for projects and quizzes, // so we declare AND initialize two double-array variables. // It's a bit more tricky when marking arrays as final. // We can change the values stored in the array, as often // as we like, but we cannot assign, say the quizScores variable, // to reference (point to) a different array. We can of course // wipe the arrays clean by putting in zeros at each position, // but that's beside the point. projectScores and quizScores // will not suddenly be pointing to a different array, because // we accidently re-assigned them. If we try to re-assign final // variables, the compiler will complain. We could initialize // them in the constructor(s), but since their sizes are constant // we initialize them immediately. private final double[] projectScores = new double[15]; private final double[] quizScores = new double[10]; // Constructor. // We initialize the three fields that were only declared. public Student(int studentID, String firstName, String lastName) { this.studentID = studentID; this.firstName = firstName; this.lastName = lastName; } // Set a score for a specified project. // Returns true if successful and otherwise false. public boolean setProjectScore(double score, int projectIndex) { return setScore(score, projectIndex, projectScores); } // Set a score for a specified quiz. // Returns true if successful and otherwise false. public boolean setQuizScore(double score, int quizIndex) { return setScore(score, quizIndex, quizScores); } // Inserts score at a specified index in the scores array. // Returns true if successful and otherwise false. private boolean setScore(double score, int index, double[] scores) { if (index &gt;= 0 &amp;&amp; index &lt; (scores.length - 1)) { scores[index] = score; return true; } return false; } }
This project needs more love. Upvote sir.
&gt; In future articles we'll explore the details of both traditional and more novel approaches to garbage collection for JVM performance optimization. It took 6 pages to say fuck all and then finally said that at the end. Worthless for anyone with more than the vaguest idea of how the JVM works.
I looked at the page and I don't think this framework is very useful. At least for me. Mainly because I had to look up what a tensor is.
Cheers thanks for this. Luckily I work as part of the site maintenance for the website. We already have some tools for testing the pages but they involve a lot of user interaction. I want to take out all user input with the tool. They are quite happy for me to test the site more than the usual user. I'd still like to leave as little foot print behind me as possible. After doing some more reading I have come across "MultiThreadedHttpConnectionManager", currently I have been using the "DefaultHttpClient". By switching I presume I should see a good change in performance?
Cool, I'm still going to stick to the guidelines you set forth wherever possible. Thanks for your input!
Why don't you use a proper testing framework such as JMeter for load testing or Shinken/Nagios for day to day monitoring?
This looks pretty cool, I like it!
The default HTTP limitations are 2 connections per route and HttpClient defaults to this limitation as well. It can be changed via connection manager's setDefaultMaxPerRoute(...) method.
Any good guides/tutorials on dependancy injection out there? Read a bit about it saying it's the way to go, but my books don't cover it. 
The link below will get you started. http://netbeans.org/kb/docs/javaee/cdi-intro.html 
Here's another example, using [Google Guice](http://code.google.com/p/google-guice/wiki/Motivation). This goes into more of the *why* of doing Dependency Injection with a simpler DI container.
I'm sure it's been mentioned when you've posted links to your blogs before, but _please_ consider getting someone with English as a first language to proof read your articles; the broken English (of which there are plenty of examples in the first paragraph alone) really detracts from whatever it is you're writing about.
he means the classes "Arrays" and "Collections", not the concept of arrays or the subclasses of "Collection" 
I don't understand that bit with the enum. Are they saying that you should use an enum instead of a class when you want to do a singleton?
I think the explanation regarding StringBuffer/StringBuilder in the article is confusing. I'm still not entirely clear what his point is.
Read up on [unit testing.](http://en.wikipedia.org/wiki/Unit_testing)
To me it seems like some sort of data structure implementation. Also, this looks like a snippet of code, try getting the full class. Finally, I don't mean to by "that guy", but /r/javahelp might be of better use; this subreddit is mainly for articles relating to Java, rather then questions. Do a cross post and someone will most likely be able to help you. Good luck
It is preferable to the double-sync lazy initialization of singletons. For eager singletons this is a matter of preferences, I think.
Double-sync lazy initialization? What are you talking about? I'm talking about public final class MySingleton { private MySingleton() {} public static final &lt;type&gt; THE_ACTUAL_SINGLETON = &lt;initializer&gt;; } This is lazily initialized as a consequence of class loading being inherently lazy. As far as I can see, this is roughly equivalent to using an `enum` as described, only with less misuse of language features.
The enum handles serialisation/deserialisation and still maintains a single instance. 
I was expecting the whole Java is so slow, thats why I use Python meme.
Is this homework? This better not be homework. You know that coworker who writes shitty code? Remember, helping people with their programming assignments online only helps make more coworkers like that.
Nope it is not homework, it is a past year question, that my university had on database without the answers.. and I have a resit tomorrow for my exam and am trying to know all the possible patterns of questions and answers.. :(
i know...still worth a try, am just trying to find a pattern with the past years and work from there... some help??
&gt; I have inserted my answers next to the /** ..**/ but am unsure if they are correct. Have you tried *running* it?
The main thing you need to understand in this case that incrementing a counter is usually not thread safe. For example, if two threads increment a counter at the same time in perfect world the value changes from 0 to 2. However, if their operations overlap it could change from 0 to 1. To avoid this happening you need to perform the increment within a lock. You can either implement this yourself or use a class such as http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/AtomicInteger.html which handles it for you.
Thanks but I don't think I am allowed to use that... 
Thanks! this is helpful... I am just trying to struggle through java for now and my CS degree... a job. That's a dream I don't dare to dream right now..
it ain't homework..it's for an exam, got this off a previous year question paper.
When someone enters the garden through either gate, you'll need to increase the counter by one - like "numPeople++" Keep in mind that an increment operation is actually three operations: 1) read the variable 2) add one to the value 3) write the variable. You'll need a lock or a monitor to make sure that no thread can read or write to the variable while the increment is being done. You'll also need a method to return the current value of the counter. Many people miss the fact that you need a lock or monitor to protect the read operation as well. According to the Java specification, if you don't protect a read operation with the same lock that protected a write operation to the same variable, the read operation may not ever see the changes made by the write operation.
You'd also have to make the individual counters volatile otherwise only the gate1 threads is guaranteed to read the correct value of the gate1 count (same thing for gate2).
you don't need volatile if you use synchronized code blocks.
Verbose, error-prone and pehaps somewhat unintuitive. And the fact that there rarely is reason not to use the cleaner enum solution.
Maven helps you keep your software unstable, and let you know instantly whenever a dependency breaks its written (or unwritten) contract/API. Honestly, the only people who truly need Maven are massive system architects and companies who can employ 2-3 people just for release management. If you use Maven, you will _need_ continuous integration, along with a rich feedback cycle. If you just want dependency management in a system, I recommend using the Eclipse ecosystem/OSGi. If you just want a build script, use Ant. Maven is really, really frustrating. It imposes a file system layout, dependency definitions and software development lifecycle. Once you use Maven, you can never take it out. (Whereas at least in Ant, you can still build something manually if you wish.) Sorry. I have a lot of pent-up Maven rage.
thanks!
I did this on purpose. My intention was that the methods would communicate with the variable. Should I instead specify something like (using python syntax, it's what I know) the following? detection = radar() shoot(detection) What I do instead, since I'm not so good on returning in java yet, is just make a variable global, and pass the message through that. 
I did. My intention was for the variables to be visible outside the function. I was trying to override this behavior with the modifier. One of my bad habits in python is to use global variables.
Nice! A balanced article discussing the benefits and challenges of using JSF and Spring Web MVC without descending into a fight between Java EE and Spring.
This will help to get started if you use Eclipse: [http://obscuredclarity.blogspot.com/2012/04/hello-world-maven-m2eclipse-and-eclipse.html](http://obscuredclarity.blogspot.com/2012/04/hello-world-maven-m2eclipse-and-eclipse.html) The idea is easy. Instead of manually downloading jars from all over the place, putting them in a folder, and manually adding them to your classpath, you define what dependencies your project depends on in a file called pom.xml. Maven then reads this file and goes and gets the jars for you from Maven Central and puts them in a local repository (just a special folder on your computer). Now one or all of your projects can share these jars, by just referencing them in their pom.xml files. I recently switched all my projects, both OSS and proprietary to Maven, and I absolutely love it. I'd be lying if I said the learning curve wasn't steep though. ;)
Haha no problem :)
No. That would be equal to ... (x &gt;= 3 &amp;&amp; x &lt;= 98). You can use either (x &gt;= 2 &amp;&amp; x &lt;= 99) meaning x is greater than or equal to 2 and less than or equal to 99 or (x &gt; 1 &amp;&amp; x &lt; 100) meaning x is greater than 1 and less than 100.
It is not "the" correct answer; It is one of many possible correct answers.
Others have covered the "why it is useful" part. With hopes that this won't start a holy war, let me just say that Gradle does everything Maven can do, and is a lot friendlier to use. 
Numbers with a leading zero followed by digits 0-7 are interpreted as octal numbers, where 020 is 16 in decimal.
i think you mean octal there
*shrug* I just code in Scala, which has direct support for singletons (`object`) including serializable singletons (`case object`).
Not everything, it doesn't. But it does cover 95% of the use cases in a much easier to use way than Maven. And it can be made to do the other 5%, but with a lot of effort in some cases...
I have read a lot of rants against Maven in years, but it must say it's the first time I see it compared to "Eclipse ecosystem/OSGi". Do actually know what is OSGi ?
&gt; I might as well try my best Asking people to give you the answer is your best?
Oh, well isn't that special...Now if only we were discussing Scala here instead of Java I suppose maybe I'd give a shit.
020 in octal is 16 in decimal.
Others already commented most of what I could mention myself. IMO Maven is just slightly harder to grasp than Ant but once you get it it can be hard to move back. I still remember how amazing I thought it was when I got a fully operational instance of [AppFuse](http://appfuse.org/display/APF/AppFuse+QuickStart) with just a single command in the cmd prompt. And this included not just downloading JARs, but also completely setting up a local database (HSQLDB instead of MySQL) and servlet engines (Jetty and Tomcat). This makes it very easy to setup your projects in a continuous integration tool like [Jenkins](http://jenkins-ci.org/). One thing I didn't see mentioned here yet is that it is common for teams to depend on Maven's quasi-magical dependency management and official online repositories. It works great 99.9% of the time - until it doesn't! That is why you may want to consider setting up a [local repository proxy](http://thoughtsforbeans.blogspot.com/2009/11/setting-up-intranet-maven-repository.html) to keep your builds more under your control.
&gt;It imposes a file system layout False. All of the paths can be redefined in the POM as needed. &gt;dependency definitions Dependencies can be made optional, excluded, etc, as needed. &gt;and software development lifecycle. False. If you *really* need to customize it (you probably don't), you can write a plugin to make it happen. The real problem here is that the documentation on how to do so is damn near nonexistent. *That* is frustrating. &gt;Once you use Maven, you can never take it out. (Whereas at least in Ant, you can still build something manually if you wish.) False. `mvn dependency:build-classpath` to give you your classpath, then you can `javac` by hand all you please. Not that you should ever need to. `mvn compiler:compile` does the same thing. If you do find yourself needing to build by hand, you are probably doing something wrong.
Maven could be compared to OSGi in that both have their own module system (Maven artifacts vs OSGi bundles), including dependencies among modules. It would be interesting if we had a *build system* that uses OSGi for its packaging format, dependency tracking, bundle repository, etc. Basically what Maven does as a build system, but using OSGi bundles in place of Maven artifacts. This would have the rather awesome upside that the build-time module system and the run-time module system are one and the same, without the ([admittedly rather minor](http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html)) impedance mismatch of using Maven to build OSGi bundles. Never heard of such a thing, though. :(
That's been my experience, too&amp;mdash;steep learning curve, particularly due to lack of documentation, but well worth the trouble.
&gt;Maven is just slightly harder to grasp than Ant but once you get it it can be hard to *want to* move back. FTFY
&gt; can be &gt; can be &gt; you can &gt; you can Yes, I know Maven technically lets you do these things. But the hoops you have to jump through are pretty tough. And yes, the documentation is awful (I still don't know half of Maven's commands). And you will always be at-odds with other projects that use the expected project structure.
&gt; I still don't know half of Maven's commands Ah, you lack experience with maven. I think that explains why you don't like it, TBH. It can seem really goofy and confusing if you don't understand the [build lifecycle](https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html). Once you get that, goals, and configuration, the rest makes a lot more sense. Chalk that up to bad docs. &gt; And you will always be at-odds with other projects that use the expected project structure. Well, projects built in eclipse. Maven projects are the default in Netbeans. Edit: Added a link to the maven build cycle.
Good post. I would like to add, in your comparison to Ant, the two different workflow paradigms. Maven's blessing and curse is that all the simple stuff has already been decided. A significant majority of common tasks are already mapped out and packaged into plugins that you can optionally include at your discretion whenever the hell you feel like it. Adding a new feature to your build (in many cases) is just plopping the relevant plugin reference down into your project build descriptor (pom.xml) and configuring to taste. Notice that I avoided the stronger words like "almost always" or "most". Because there is still a significant number of not-too-uncommon build features or workflows that have not been thoroughly explored. And that's where Maven's blessing becomes a curse. As soon as you step off the beaten path by a little bit too far, Maven becomes real painful, real fast. Now you are fighting the carefully thought out architecture so you can fit it into your workflow. I won't get into extending Maven via plugins, because creating and using a one-off plugin is a non-trivial task. Also, combining several common Maven build steps to create a "macro" is (as far as I can tell) impossible. My suggestion is to use Maven where it is designed, and use something else for the other things. That is, Maven is intentionally focused on just the building, packaging, and to some extend the distribution of your project (provided you limit "distribution" to mean "publish to a Maven repository"). There are plugins to handle some parts of extra tasks, such as deployment to a web container, but that gets into the off-the-beaten-path territory real fast. At my shop I use a separate python script to handle the deployment. Yes, I have to kick it off manually, and yes, there is the Cargo plugin, but it could not handle everything I needed it to handle. And deployment is not really a build concern, so Maven is the wrong tool for that. With Ant, on the other hand, you can do anything. Ant's blessing and curse is that your build feature or workflow, be it common, uncommon, rare, and even new or experimental, is all the same to Ant. With Ant you are limited only by your imagination and time to craft the perfect build process of your dreams. Ant is nearly as versatile as a shell or scripting language, but without the portability problems of Bash/Batch. Ant can, and often does, handle non-build related tasks with the same ease as it handles build related tasks. With Ant, you can create anything for your build system. And that blessing is also it's curse. With Ant, you must create *everything* for your build system. You have primitives like "compile" "jar" and "junit", but the process of coordinating inputs and outputs between them is entirely your responsibility. And you may not want all those items in the pipeline for every build, so you have to manually provide contingencies for when certain steps are skipped. That brings us to Ant's primary architectural flaw. It seems like it was envisioned as a declarative build specification, but it is definitely implemented as a procedural scripting framework. In XML. With write-once "variables" and a very very crude branching mechanism. Three of them, actually. You can smooth that over with ant-contrib, but the main docs won't talk about it. (Now if you think about your build process before hand, you can work wonders with it. But if you just slap it together to get a build going and then want to come back and add bits here and there.... that''s another story.) And so, by definition, or rather, by lack of definition, every Ant build system is non-standard. So getting simple help with Ant means you have to really understand what's going on with those primitives, and also understand how those primitives are working together in your particular build system. *jeez, i talk too damn much*
I know it's not quite what you are asking, but if you do decide to take a look at it, I highly *highly* recommend the [Sonatype books](http://www.sonatype.com/Support/Books); specifically [Maven by Example](http://www.sonatype.com/Support/Books/Maven-By-Example) and [Maven: The Complete Reference](http://www.sonatype.com/Support/Books/Maven-The-Complete-Reference). I haven't read the others yet but these two are gold.
As pointed out elsewhere, 020 is octal for decimal 16. If you're looking to print leading zeros for an arbitrary number, you can use [System.out.format](http://docs.oracle.com/javase/tutorial/java/data/numberformat.html) like so: System.out.format("%03d",20); // prints 020
Now I'm curious, how do you do it ? Let's say I want to build a simple Java SE app that has a compile-time dependency on SLF4J + a runtime one on Logback, how do I setup my project your way ?
&gt;But the hoops you have to jump through are pretty tough. That's because you usually *shouldn't* do those things. If you think you need to, you're probably doing it wrong. &gt;I still don't know half of Maven's commands That's easy. Maven's commands fall into two categories: lifecycle phases and plugin goals. Lifecycle phases (like `compile`, `install`, or `clean`) are defined by [the build lifecycle](http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html). When running Maven from the command line, you'll usually be telling it to run the build lifecycle up to the given phase (e.g. `mvn compile`). Plugin goals (like `jar:jar` or `org.apache.maven.plugins:maven-jar-plugin:2.4:jar`, referring to the `jar` goal in the official `maven-jar-plugin`) are provided by plugins. These are usually configured in `pom.xml` to run as part of the build lifecycle, but can be invoked directly from the command line if needed, and some (like `archetype:create`) are designed to be used from the command line. You can tell at a glance if a command is a lifecycle phase or plugin goal: plugin goals always contain at least one colon; lifecycle phases never do. &gt;And you will always be at-odds with other projects that use the expected project structure. Define "expected project structure". Folder structure? Most post-Maven build systems I've seen use the same folder structure as Maven. If you aren't using that folder structure, well, you probably should.
1) Maven will download dependency libraries for you so you don't have to surf around to find them 2) Maven knows version numbers, so if there's a new release of the library, all you have to do is change the version number 3) Maven compiles your stuff for you and copies your resources and can generate code for you with the right plugins 4) Maven has a bunch of reporting plugins for software engineering analysis, such as code statistics, test coverage, etc 5) Maven knows how to build your project regardless of your IDE, so your colleagues could even use different editors 6) Maven integrates quite well with IDE's such as Eclipse and IntelliJ 
Yep. I think that was around 6.5. I haven't had a chance to play with Scala much yet, but I recall looking for a plugin, and I don't think they'd done much with it. They're still putting versions out. I think Netbeans is one of the things Oracle wanted to keep around. I hope so, I really like it as an IDE.
I was once very firmly in the "maven sucks, ant ftw!" camp for a long time, until I actually started using maven. Now, even for small projects at home I'll use maven... even if my only dependency is junit, I'd much rather write an 10 line pom.xml to get maven to do everything for me than handcrafting an ant script (and having to download junit again). I'm not sure what you mean about *need*ing CI if you use maven - if you have more than two developers you should be using CI regardless of your build tool, otherwise you're burning cycles integrating each other's code when a machine could be doing that for you. A lot of the power of maven comes from the file system layout it imposes (which is entirely configurable, by the way) - put your sources in one directory, the tests for that code in another, run "mvn test" and bam: your code has been compiled and tested and you didn't have to tell your build tool where it should put the class files (or any of the other details that don't matter). If you've ever pulled down the source for a project and had to figure out how the project is structured, you'll appreciate maven's convention over configuration. As for never being able to take maven out, you're just a much stuck with it as you are with an ant setup. As soon as you put logic into your ant script you've tied your build process to it.
The Maven integration in IntelliJ is well below acceptable when you have to use a custom packaging type for your build process. In a multi-module project, built with a custom plugin with its own packaging type, we can instruct m2e to correctly read the dependencies and build the code with Eclipse. IntelliJ on the other hand only recognizes the dependencies on jar files, we have to manually set the dependencies between the modules each time we reimport the Maven project.
I agree with your evaluation except with the " it's supposed to be a pain to extend" point. I've worked in some projects with weird build requirements (e.g.: a bunch of xml files that needed some kind of processing and concatenation) and it was trivial to write a maven plugin to handle those, no big deal. The only pain point with maven in my experience was with managing libraries (things shared among many projects). You either have to install and maintain a local repository or (in our case) do weird stuff to get a github project to act as a maven repository. Having said that I believe Maven is your only option if you want to standardize project structure, build management, IDE integration etc. We've had people come and go in the team, each with his own preferences of OS, IDE, way of programming and we've never had problems getting them up and running within minutes.
Yes, if I check out a project from Github and it uses Maven (the Maven way); great, I already know how to build this, I don't need to download lots of other stuff, and I understand the folder layout. However, there are a few developers that have not tested building their code straight from source on a clean machine.
Could it be a firewall that gets in the way? Check your firewall settings. I've had Java 7 working fine on Win 7 x64 ever since it came out.
Alternatively, setting en empty border to the Button should also work. As seen [here](http://docs.oracle.com/javase/tutorial/uiswing/components/border.html).
I think this series of articles should be called "Bad advice no one wants for how to increase the size of your codebase unnecessarily by several orders of magnitude." Did no one tell the author that there's a cost - in performance, in maintenance time, in complexity - for doing all this inane bullshit? Named parameters aren't necessary if things are properly designed - and there are plenty of patterns that call for a configuration object to be passed to an object constructor if you DO need that many parameters. If I saw a programmer using any of this guys' named parameter methods, I'd probably fire them.
I'd love to read more about this.