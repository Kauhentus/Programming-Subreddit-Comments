https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-
I know this isn't going to help you (for that, there are other suggestions), but boy this reminds me of the "scatter assignment" expression. Only one language I know implements it, and that's probably for the best, but there are times it was really cool to have
Thanks for the responses! What I really wanted to create is a synonym tool that will reword strings that you enter, however it only rewords one word and then it stops, I want it to reword the entire sentence that is typed. Any suggestions?
r/javahelp
In case of success- acknowledge all 10k requests with success. In case of failure- split batch into two smaller batches and retry. Keep doing it until you isolate specific individual records that causes the failure. This is fairly complex, and takes a while. Failures in batch processing are expensive. But no matter if it's a database or something else. If you can request multiple things to be done in a single network round trip, that's more efficient than doing each item individually. Performance wise batching always helps.
If you are not new to programming, I would suggest Heads first Java edition 2. He will explain Java in a funny and memorable way.
I know if, while, functions and pointers from c.
[Cargo Cult Programming](https://en.wikipedia.org/wiki/Cargo_cult_programming) is also bad.
First book: Thinking in Java by Eckel Second book: Effective Java by Bloch
This goes off the rails pretty early for me, at this: &gt; Not a single null ([why NULL is bad?](https://www.yegor256.com/2014/05/13/why-null-is-bad.html))
I like annotations, personally: I think they promote programming by convention, with just the odd tweak annotated as needed. Fluent type-checked APIs are nice and all, but code you don't have to write is even nicer.
i agree any static method with static state is bad however i use static method if they can be inlined. According to your logic, you should have a class Plus, a class Minus etc. No mutable classes... how can you achieve that with Swing? No more array list? That's extreme.
If you have 0 experience in Java programming yeah maybe you could read a book. But what really brings out the best in you is trying to understand others code from github and modifying it. Also try to Google as much questions as you can because most of the time the answer is on stack overflow and you can adapt it to your specific problem.
Me too. Especially those from Spring like @Autowired, @Service and @RequestMapping and those from Junit like @Before and @Test
That linked article seems like a good parody. Every time he tries to point out why `null` is bad, he only shows it's better than the alternatives.
&gt; you should have a class Plus This is from another one of his projects https://github.com/yegor256/cactoos/blob/master/src/main/java/org/cactoos/scalar/And.java Wouldn’t surprise me if he had a project in the works that included a plus class The guys a nutjob
Use previously mentioned split-method to get an array of the words. Map through this with way of your choice and concatenate the result back together by looping through the array. Probably not the most sophisticated implementation but just a quick tip before going to bed.
Why do you avoid annotations and tatic methods because they are bad programming style while simultaneously using a whole bunch of confusing abbreviations in nearly every class name? That's also considered bad practice...
Using annotations so magic things are getting done that you can't really control or change is bad. They might work fine, but the moment they don't, you will spend hours trying to understand why. Don't rely on magic.
&gt; Not too much else has changed. The world still actually runs Java 8, even though there have been a lot of versions since then. I mean, AWS doesn't even go above Java 8. If there's a sign no one is moving past Java 8 that's it.
This. Sometimes these frameworks work well Day 1, but once you start Day 2 (start to need something more complicated) you have to rely on their documentation pretty heavily. And those usually are portly written, stale, or impossible to find what you’re looking for. More time spent on finding an answer than what I could have done myself. Maybe the problem is the framework is going too much where instead it should just do a single task. Whenever I have a choice I keep annotations to a minimum.
This is basically a cliche /r/programming programmer repeating nonsense that everyone else is screaming at the top of their lungs.
I would strongly advice everyone who reads any of yegor's code or blog posts to reflect about what he is saying. More often than not his arguments fall apart when compared to more classic / procedural implementations. Take a look at his [Dont create objects that end with -er post](https://www.yegor256.com/2015/03/09/objects-end-with-er.html): he suggests implementing a `Sorter` object as a `List&lt;T&gt;` which when called with `get(0)` traverses the contents linearly in O(n) instead of sorting on construction time. At first glance this might seem beneficial but it also breaks any intuition about what is happening. And now you also have to cache those calls as multiple `get(0)` calls should not do a linear traversal again as you would lose any benefit then. Now do this, thread-safe - its a mutable mess of nonsense when compared to a single call that outputs a new sorted list. Don't get me wrong, his approach helps you to reflect on the default approaches to solve a given problem which might indeed result in something better, that's what I like about him.
I've never seen annotations as magic. AOP is just meta programming. There's no dark wizardry or black magic; no incantations to recite when you run into a problem. It's just simpler classes like ```AnnotationMethodHandlerAdapter``` and ```DefaultAnnotationHandlerMapping```. Their names make them look worse than they are.
Some people just can't let go of Apps Hungarian, but at least it's better than Systems Hungarian.
You can use tools like Error Prone to catch mistakes like this. [http://errorprone.info/bugpattern/EqualsIncompatibleType](http://errorprone.info/bugpattern/EqualsIncompatibleType) [http://errorprone.info/bugpattern/CollectionIncompatibleType](http://errorprone.info/bugpattern/CollectionIncompatibleType)
&gt; https://blog.codefx.org/cat/java/ Yes, I have seen that blog earlier. Anyway thanks for course link.
&gt; No more array list? That's right, linked lists, linked lists everywhere. Linked lists are an example of a [persistent data structure](https://en.m.wikipedia.org/wiki/Persistent_data_structure). &gt; how can you achieve that with Swing? [Functional Reactive Programming](https://wiki.haskell.org/Reactive-banana/Examples)! Observers, observers everywhere. Actually, JavaFX is somewhat based on this principle, of wiring together observable properties. Libraries like RxJava are the new hotness for the new breed of interactive apps.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I understand that perfectly. But would this enable you to understand @Autowired ? Maybe. After hours of looking through Spring code. *That* is meant by magic. There's a code transformation happening you have no control over. Having to use AOP for certain things is a weakness in Java, not a strength. Consider this example @Scheduled(fixedRate = "5m") @Retry(attempts='5') void everyFiveMinutes() { messageService.sendMessage("Hello World"); } vs. #Clojure: (every! (* 5 60) (with-retry {:max-retries 5} (.sendMessage messageService "Hello World"))) What gives you more control and flexibility?
Exactly. Frameworks like Spring, Ruby on Rails, Grails etc. give you a massive head-start productivity-wise. But once you run into problems, a framework will give you many interesting headaches and the time you saved initially might quickly be eaten up by trying to understand the underlying functionality. If you can't even use the debugger in a meaningful way anymore, you are in trouble. Prefer the library approach: Compose your app by choosing libraries that do one thing and do it well.
Thanks for sharing! Links: [Homepage](https://line.github.io/armeria/) [GitHub](https://github.com/line/armeria) [Slides](https://speakerdeck.com/trustin/armeria-the-only-thrift-grpc-rest-microservice-framework-youll-need) [Video](https://youtu.be/hLlctum1pIA)
Couldn't agree more.
He is asking for book advice. Even if one were familiar with Java, there is a ton to still benefit from reading books. Effective Java and Java Concurrency in Practice, for instance.
Third book: Java Concurrency in Practice by (String... authors)
I guess you would say this framework is filled with bad takes.
You're going to need more than just a good textbook. Check out [https://hyperskill.org](https://hyperskill.org/) It's free, developed by the folks over at IntelliJ IDEA. They give you theory to read, then practice problems, then programming challenges. So you are actively learning. I recommend picking up one book reading a chapter then spending all the other time on Hyperskill. Again, totally free. Try it and see if it's for you. If not bookmark it, come back to it later.
this is a broad question, I'm not sure if I have a favourite library.. maybe a very useful framework yes and is without doubt spring framework.
Yes! Spring is definitely there.
The annotations is of course better. They are less error prone, much easier to read and the intention very clear. The Java version won't even compile. (Hint: that's not how method references work.) But see this why I'm so good at hiring, because I can quickly detect and filter out bad programmers like you. You think "control" and "flexibility" are good things. They're not. They never will be. What you call control and flexibility are essentially anti-patterns. The vast majority of people don't need it, don't want it, and will only harm themselves if given it. Here's the funny thing: it's a false choice. Whatever is acting on those annotations almost certainly has a nice Scheduler API behind it. (Unless they're doing code-gen. Code gen is of course the primordial evil, the original sin.) And in the very rare case that you come up with something that an annotation DSL can't express then fine, you can put on your big-boy pants and work with the underlying API.
Yegor is wrong for all the right reasons. I think the only thing worse than his nonsense is all the people criticizing him who understand OOAD even less than he does. His blog posts and comments are always a kind of trainwreck. To me the interesting question is why so many programmers are so bad at OO. I do think it's because they don't understand the underlying metaphysics of OOAD... that is they don't understand that it is a philosophy.
/r/learnjava is for such questions. **Removed**
/r/javahelp is for programming help. **Removed**
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Great !
It's used with git and comes with IntelliJ, it's part of their git support and we use git. So disabling is not really an option.
Sure it is. You can’t use a terminal? It’s not like git only works via IDE plugin.
Oh my dear god. This is a joke, right?
All hail.
Can't u do it through Control panel?
Granted. Had the non-reference first and didn't remove the (). That is not the point here. (Java doesn't have support for higher-order functions and thus lambda expressions have to be used) The annotations are of course not better. Do you see any order imposed on them? Do you have the code that does the re-tries? Do you have the code that schedules the calls? What you call anti-patterns I call experience. If you've been burned by unnecessary and dangerous magic often enough, you tend to become much more aware of the complexities you are adding to your code with a innocent-looking annotation. (Here's a good example of the BS you tend to get with annotations: https://stackoverflow.com/questions/14318438/how-to-ensure-annotations-execution-order-in-java ) There are good use-cases for annotations, if they truly are meta-data. But they are constantly misused for imaginary gains that will quickly turn into traps once things are not working correctly. Traps that are hard to debug, harder to fix and will remove any advantage you think you had. BTW, If you are hiring people that will 'only harm themselves', I seriously doubt you are a good hiring manager. Let me add some bragging myself: I've done Java starting with v1.0. I've done Lisp and Z80 assembler before that. In my current position as a CTO, I wouldn't hire you either. You are apparently not experienced enough and haven't seen enough shit gone south because of framework-magic. I wish you good luck in your future endeavors.
I think it is common knowledge that immutability is solving important problems in computing. One of them is thread-safety of course. Objects that can't be changed can freely be exchanged between threads without surprises. Also, it makes it super easy to write pure functions. Pure functions are free of side-effects and have Referential Transparency. Basically akin to mathematical functions where you can replace a call to `f(x)` with its value in all cases. I.e. calling `f` with concrete values `a,b,c` will always yield the same return value and can be tested trivially.. A code base consisting of lots of pure functions is significantly easier to test and maintain.
Do you know any SQL? Regardless, you could probably jump right in. I’m going through “Spring Framework 5: Beginner to Guru” on Udemy. I would recommend it, although I’m sure there are other goods ways to learn.
Yes I know SQL need to brush up on it though. Thanks!
While Spring will always remain the most widely used framework, the trend of using simpler alternatives is still ongoing. VertX appears to be one of the hottest alternatives right now. There is also an ongoing trend of Kotlin adoption for regular backend services, either using regular Java frameworks or the newish dedicated Kotlin native ones.
No the spring ecosystem is pretty massive and I can’t think of any prerequisites. Can I ask why spring though? Just because it’s popular? Needed for a job? I personally haven’t used a lot of spring in recent years as there alternatives but I’m not trying to start any kind of flame war here
What would you recommend for backend development if not spring?
The team I'm in moved from Spring to DropWizard and been very happy with it, but we are looking at VertX or other frameworks for new services.
I'm learning at the moment. Probably just read the wikipedia article on dependency inversion until you're 100% on it (if you aren't already). There isn't anything you can't look up along the way that I can think of.
For dependency injection at least, Google Guice is a good alternative
Yeah I think the problem today is that resources are usually just all about how to get the REST controller up as fast as humanly possible which I've found creates a void of knowledge when it comes learning the nitty gritty of Spring. I got the 5th edition of Spring in Action which was a mistake, it is very poorly edited and the code examples will not run. I've just gotten the 4th edition instead, and although I haven't gotten very far, it starts off with dependency injection and bean creation straight off the bat, two concepts surprisingly foreign to me even though I've worked on a Boot project professionally for 6 months now.
I’m a fan of cdi personally. Happy to discuss either here or via dm. Choices of tech is probably dependent on your use case
FWIW, Spring does support the CDI annotations.
Yes. You can directly start learning spring. Spring In Action might be your best companion. It will be good to know the servlet lifecycle.
Learn Java 8, Android doesn't quite touch on that
You can but some programs leave instances behind so it's not fully uninstalled.
Yeah I guess I'd say dependency inversion as well as injection. A stack overflow post explaining them alongside each other was invaluable to me.
It looked pretty good until I saw the test: MatcherAssert.assertThat( new RsPrint( new App().act(new RqFake("GET", "/")) ).printBody(), Matchers.equalsTo("hello, world!") ); Disgusting. Testing using static methods. A true proponent of object orient programming would find a better assertion library.
I'll try it https://github.com/tbroyer/gradle-errorprone-plugin The problem is that it require Java 9 and enterprise is currently at Java 8 ((
I agree with most of the posts above. I do have some advice to share with you; - Look at some Java 8+ code. If you've been coding for Android, some of the newer language features might have gone past unnoticed. Not so for back-end development. - When you don't understand something the framework does, try to look through the source. The Spring source, some of the Spring Cloud projects notwithstanding, generally is excellent code. Looking at the source gives you a deep level of understanding, and it has helped me learn so much. - Test. Test often. Test everything. Spring is pretty good for testing. It provides a lot of facilities. - Most the time, use Spring Boot rather than setting up your own Spring app. It's way more efficient. Good luck! If you have any questions, my DMs are open.
What about WildFly / Micronaut? Guice is so small brick to complete dev-stack, why not tell about Apache Commons then or SLF4J?
Care to share a link to a good starting point / overview for OOAD? I sometimes struggle with it so it would help me a great deal to have it finally \`click\` for me :)
&gt; Google Guice is a good alternative .. for a small subset of Spring.
Well... annotations can't be that bad because loads of the classes uses Lombok annotations such as @ToString(of = "origin") @EqualsAndHashCode
If you want the nitty-gritty of Spring, I found the official documentation useful when I was starting out. I loaded a bunch of PDFs on the Kindle https://docs.spring.io/spring/docs/current/spring-framework-reference/pdf/
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is such a great talk.
I would also recommend this course, it's on sale right now.
The first example already includes a static method: public final class App { public static void main(final String... args) throws Exception { new FtBasic( new TkFork(new FkRegex("/", "hello, world!")), 8080 ).start(Exit.NEVER); } }
What are you learning Spring for? I’ve made Spring apps without any sort of database attached, I’ve made Spring apps without any API (i.e. no requests being served) so your starting point would vary wildly depending on what you’re going to use it for. If just for the sake of learning I still recommend coming up with a project for yourself to make it clear to yourself what you need to learn. And as far as the other advice is concerned, Java8+ and its functional features are super useful but not required for Spring.
Everything is on sale on Udemy, all the time :)
Immutability isn’t solving anything and is, in fact, introducing problems and requirements that previously didn’t exist. Pure functions is another cargo cult programming practice.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If you want to feel conflicted about Udemy, feel free to watch [Why Udemy is Bad](https://www.youtube.com/watch?v=X7jf70dNrUo).
thx for your comment. nicely put. linked list and observers.. nice summary :) it is interesting. I have a Swing app that handles millions of rows of data. Its pretty fast. I am on the fence whether immutable structures would work as fast.
the logic is sound though.
And if you want to dive into the Spring source code (let's be honest, stepping through Spring code in a debugger because the magic doesn't work is not that uncommon), get familiar with class loading, thread locals, reflection and annotations.
Thanks for the suggestion. I have [implemented](https://github.com/Muddz/UndoRedoList/blob/master/src/main/java/UndoRedoList.java#L51) and it made the code much cleaner.
Thanks for the suggestion! I have now cleaned the `add()` method and [it looks much better now](https://github.com/Muddz/UndoRedoList/blob/master/src/main/java/UndoRedoList.java#L40)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
nothing is just as 100 years ago. total shit
[Dropwizard](https://www.dropwizard.io) is a good alternative. Simpler than Spring and will run as a server on its own w/o a separate Tomcat app server.
Knowing SQL is good, knowing principles of good database design is even better.
I can, but supporting 20+ developers of various skill levels, many of whom only know the IDE version is a challenge. The real problem is that the build process of the IDE is tied to the scanning and generation of the index for the git commits. Removing the plug in logistically speaking is difficult. Anyhow, with latest release there is a way to disable the git index using a startup flag, so I was not the only person having that issue. Our plans to go to JDK11, are on again despite the bug.
Rent a cheap web instance, DigitalOcean, Linode, AWS Lightsail, Vultr, etc. then get a domain, Google Domains gives a free privacy service for the domain. &amp;#x200B; Install any DB (it's free in your own instance), MySQL, Postgres, etc. or just use in memory H2, the coding concepts will be the same at a basic level and you'll learn a lot. &amp;#x200B; Then build a greeting web service that allows the user to save some preference, favorite fruit. &amp;#x200B; Then build a front end. Fortunately or unfortunately due to today's expectations for what a web app is (HTML+CS+JS all vanilla which does the same as Angular or React isn't considered a modern web app); you'll probably want to do it in Angular or React, though a mobile frontend would let you do the same backend things. &amp;#x200B; Now you lean Spring, JDBC if you want or use Spring Data, Servlets by default when you create your controller, etc.
There aren't really any prereqs, Spring Boot will stand up a servlet container for you and put your web services inside it. It can also handle through JPA your database connections, dealers choice again. Documentation will give you the esoterics of AOP but that's just about understanding the magic (spoiler, it's not magic). There are a lot of Spring projects to play with. Start with Spring Boot for autoconfiguration and make couple of REST services or a couple of message producers/consumer services. Look at Spring Data and maybe Lombok (not Spring but helpful) later.
For those of us who might not want to sit through a whole video, could you please summarize?
Of course they are thread-safe. Maybe you have a different understanding of what immutable means? That could explain your other outrageous statements about 'no benefit ever demonstrated', which is so wrong, it is quite funny. But, yeah, Java's OOP does not favor immutable objects by default as state mutation is the most common operation, so it feels clumsy to use without libraries. Eventually you will be able to make up your mind about pure functions which according to you are 'cargo cult' and 'common sense'. It is self-evident, that functions free of side-effects are easier to test, reason about, optimize and change. Also curious what you think the problems are that immutable objects are bringing? You can't change them? Yeah, that is kinda the point. And no, you don't have to copy everything, you'd use structural sharing which gives you comparable performance in most cases.
This [chapter](https://files.meetup.com/10912822/CoffeeMaker.pdf) of the excellent book [Patterns, Practices and Principles of Agile Software Development in C#](https://www.amazon.com/Agile-Principles-Patterns-Practices-PRACTS-ebook/dp/B0051TM4GI) (the book has very little to do with Agile). Another excellent book is [Growing Object Oriented Software Guided By Tests](https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627), which has the added virtue of demonstrating how to correctly use mocks, by the people who were among those who invented mock testing. Uncle Bob, the author of the first book, basically says what ruined OOP was the classification paradigm of the 80s and 90s (objects should reflect the real world), and returns to the messaging paradigm of the 60s and 70s in Smalltalk (without the dynamic typing).
Dunno about literally all the time, his courses were $200 all this month until yesterday.
- Their [homepage](https://about.udemy.com/?locale=en-us) reads: "[Udemy instructors] are experts who stay active in their fields in order to deliver the most up-to-date content." Udemy does not do any background checks to verify this claim, anybody can upload anything. - Their [Terms of Use](https://www.udemy.com/terms/#section6) read: "Our platform model means we do not review or edit the courses for legal issues, and we are not in a position to determine the legality of course content." This leads to people stealing content from other sources, putting it up on Udemy for free at first to gain exposure, then paywall it. The original creators can't DMCA their content on Udemy without paying for it, because they can't view it otherwise. When Udemy is forced to remove those courses, they will claim the uploader did not make any money from it, so Udemy also didn't. So why do people do it, then? - Their business model entices instructors to do their own marketing, leading to "instructor code" spam on youtube, reddit, quora and other platforms. - Udemy provides expected earnings figures to prospective instructors to lure them onto the platform, which is unprofessional. - This is not from the video but a common criticism from instructors: Udemy disallows instructors to build an audience or have any relationship to the viewers in an effort to bind them to the platform.
No `main` method needed. This works: public enum Main { Void; Main() { System.out.println("Hello World"); } }
Post it to /r/javahelp Can also find tutorials in /r/learnjava Sub's about text: &gt; News, Technical discussions, research papers and assorted things of interest related to the Java programming language &gt; NO programming help, NO learning Java related questions, NO JVM languages - Exclusively Java
My bad, appreciate it :)
A thread safe object is a single shared object that can safely be shared across multiple threads. As no immutable object can safely change state in one thread and see it in another, they are not thread safe. Immutability grants you working with threads “safely” by virtue of the fact that you must code specifically around the limitations of immutability. This may or may not be viable for your application. This also adds necessarily layers of temporal coupling before, during and after your objects are in concurrent states of your application (which immutability fanboys hilariously regularly claim is eliminated by immutability). As for Structural Sharing and CoW. These represent major added complexity with absolutely no gain. Nobody has ever demonstrated their **claims** toward immutability, but there sure are drawbacks. Immutability adds code and algorithmic complexity purely on the back of claims which range from demonstrably bullshit to never demonstrated. Literally not a single claim toward immutability has ever actually been demonstrated to be true.
Thank you.
yeah for sure!
Do you know what the banned numbers are? If you do you could make a list of the banned numbers. Import random banned_nums = [1, 3] random_num = random.randint(0, 1000) x = 0 While x &lt; 10: random_num() If random_num in banned_nums: Print(random_num, 'is banned') Else: Print(random_num) x += 1
Let me provide a better example for why people like the AOP version makes sense, with some real code: @Transactional public someBusinessOperation() { ... } vs. public someBusinessOperation() { txTemplate.execute(() -&gt; { ... }); } In both cases, the business operation is interacting within a global context, in this case the transaction manager that has been configured for the application and the active transaction (we want to join any active transaction bound to the thread or create a new transaction). With the annotation, the AOP version hands the responsibility to the container, and the business logic itself isn't dependent on Spring. Otherwise, you have to inject the context into the object, in this case a Spring `TransactionTemplate` instance, making the business logic physically dependent on Spring.
The key concepts that make Spring work are “Reflection” and “Annotation Processor”. If you understand these two core Java concepts then a lot of the Spring magic will start making sense. Highly recommend understanding hose two concepts. I also recommend understanding the core philosophy of dependency injection and how the construct is supposed to shape your applications.
JCP refers to immutable objects as thread safe, and suggests that you should default to using them over mutable objects. They're considered so appealing that future versions of Java plan to have them actually included into the language through record classes. Given that, why should I trust you over Brian Goetz?
Can you share what you have done so far?
I would argue that your clojure comparison is slightly disingenuous. I agree that your Clojure and Java static method example are comparable, but AOP would be more akin to macros. Something like core async would be a better comparison. example from the clojure docs: ``` (doseq [n (range 10) :let [i (-&gt; n inc range rand-nth)]] (go (&lt;! (timeout (* i 1000))) (println n))) ``` The ```go``` macro translates your "blocking code" into non-blocking (which is badass, btw). Personally, I find the annotation approach easier to read. That's personal bias though, because I spend all day reading Java code.
I used sharedpreferences to detect if a number is banned, i also used a variable to select a number between 1-24 and if the variable = 1,2,3 etc. An action is called. It's not only numbers, i'm trying to build a system that if variable = x then show image and text. It's a really tricky situation :D
What about a while() loop? Then inside the loop, generate your random number and compare it against your banned list. Once you find one, store it in a variable outside of the loop, break out of the loop via either a boolean in the while() statement or by using break; and return the generated random number. On mobile or I'd write an example
What are you using this for? Is it some kind of [card shufling?](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)
Thanks for confirming immutable objects are thread-safe. What you described are mutable objects "As no immutable object can safely change state in one thread and see it in another, they are not thread safe" The whole point is: **They don't change state!** There is no 'temporal coupling' as time doesn't pass for immutable objects. They are **immutable**.... Even better, there is actually a clear arrow of time when using pure functions and immutable objects, as v' = f(v) will have v before an 'update' and v' after. Glad we figured out you got the whole idea wrong. As for the benefits: They are painfully clear if you are writing multi-threaded code. If your framework of choice shields you from multi-threaded code, yes, the benefits are less pronounced. It's likely you are then just using fresh instances of objects for each transactions and push the issue of concurrency to the data store.
If the set of numbers your are choosing between is relatively small, then choosing the next sequential number when a banned number is selected will have a not-insignificant effect on the fairness of selection. E.g. if you are choosing between 1-10 and ban number 5, then there is a 20% chance that you end up with number 6 vs a 10% chance for every other number. So for a small set of numbers, to support banning numbers the easiest option is to probably put all of the allowed numbers into an array and then randomly choose an index into that array. For larger sets of numbers you could achieve a similar result by putting all the banned numbers into an ordered list, selecting a random number from your desired range minus the number of banned items, and then correcting the selected number by adding 1 to it for every banned number that is smaller than it. I **think** this would work, but I'm not really 100% sure it is uniformly random.
can you explain the \`@Component\` to me? I've read through the source and it makes the class a singleton. but why does it make it a singleton?
Homework?
I'm mostly doing Java code archeology these days and I do prefer following along a call chain. Annotations + AOP make that more difficult IMHO and when it comes to troubleshooting, you'll be in for major pain if those aren't your own annotations. I see the value of annotations in providing actual metadata to your data, that doesn't lead to code transformations but is actually metadata. Certainly more convenient to attach to a method or field than providing it through some other means. About the Clojure example: Yes, macros are a core feature that has its own pitfalls, but there's a major difference: There's `macroexpand`. I can always expand a macro and see behind the curtain. Macros also play in a different league. You can actually extend the syntax of your language with macros. You really can't with Java AOP.
If you're using at least Java 8: Random rnd = new Random(); List&lt;Integer&gt; banned = ... Predicate&lt;Integer&gt; contains = banned::contains; Stream.of(rnd::nextInt).filter(contains.negate()).findFirst().get() The `Stream.of(rnd::nextInt)` part creates a stream of random numbers. You can run a filter on the stream to move to the next element in the stream
Spring beans are by default singletons. You can change this behaviour but I've rarely seen that in the wild. `@Component` is a so-called stereotype. You'll have come across a couple; `@Controller`, `@Service` and `@Repository` are all examples of stereotypes. In practice, it doesn't matter too much what stereotype a class is, it's more of a conceptual idea. The implementation is no different, and Spring treats them identically - Spring Boot testing does have a twist. I'll get back to that. When you annotate a class with a stereotype annotation, you are effectively telling Spring to manage the lifecycle of this object, and to provide it with its dependencies from the Spring context (the collection of all the beans in the application, among other things). In Spring Boot tests, one can construct a context containing the desired beans. This means you can test your class using the Spring context (and dependency injection, mainly), without having to load all of the beans in the application. An extension of this idea is test slices. You may have used `@WebMvcTest` before. This is an example of a test slice, which defines what beans to load from the application, and constructs a context with those beans, in this case only loading in classes annotated with `@Controller` and various other web-related classes. `@DataJpaTest` and its brethren do the same, but for different types of beans (`@Repository` instead of `@Controller`). Hope that shines some light on it! DM me if you need more.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Dropwizard Spring Boot supports embedded servers of various flavors as well. Nothing wrong with Dropwizard, but you don't need a separate app server for Spring either.
Yeah. I have specifically addressed everything in this post multiple times and stated why you are incorrect. This conversation is over as you cannot argue with any degree of honesty. One note, your idea of temporal coupling is utterly wrong. That is not what temporal coupling is. Temporal coupling occurs when your code requires behaviours to take place in specific orders to run properly, often with a side effect that the compiler is unable to detect it. A rudimentary example would be constructing a basic object and then injecting state with another initialize method rather than using constructor injection. It has absolutely nothing to do with the real passage of time for objects. The removal of temporal coupling often lets the compiler detect issues for you.
I mean, if you gave devs who can’t work a command line, they’re shit devs, even more so if they can’t learn. Command line is essential. How else are you running and building apps?
I'm guessing this is the SO answer you're referring to? https://stackoverflow.com/a/6551303
Dude: https://blog.ploeh.dk/2011/05/24/DesignSmellTemporalCoupling/ I get why you don't understand how that relates to pure functions and immutability, as you don't seem to understand what immutability means in the first place since you keep claiming immutable objects aren't thread-safe, which they are of course.
I'm curious why one would want to ban certain numbers.
Okay. The "algorithm" or feature I'm trying to build has a simple idea. Choose a random operator (from a video game) and if you don't have that operator it will choose a one you have (not banned) so if you have 12/24 operators it will set pick random from 1 to 12 instead of 1 to 24. I'm struggling to make it so the action shows correct pictures, text and that there's no "ghost clicks" (you click and nothing happens)
I 100% agree that cargo cult immutability programmers have hijacked the term thread safe to suit their needs. In any case, you shouldn’t trust me over Brian Goetz. You should research this yourself and not take arguments as fact unless they can be demonstrated to be so. In my opinion, not a single claim that the immutability crowd makes stands up to actual scrutiny and the only thing that changes between an immutable code base vs a mutable one is that the mutable one has less code and doesn’t require massive complexity to accommodate basic behaviours while throwing all semblance of performance out the window.
This is gonna get really slow since you need to iterate through the entire banned list each time. You're better off using a TreeSet.
Yes, a different collection for `banned` would be better. But, I wouldn't use a `TreeSet` for this, since order doesn't matter, only set membership. A`TreeSet` has O(log n) lookup time while `HashSet` has O(1).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Your own post literally proves yourself wrong re temporal coupling and, in fact, gave EXACTLY the same example I gave for why you don’t know what temporal coupling is. Fine, demonstrate it: Let’s take an extremely common situation. Build me a thread safe queue that multiple threads are pushing to and popping from. This queue must be immutable. I can build a thread safe mutable queue in about 10 minutes in java, so how about 5 hours for you?
Go straight to the spring website, everything you need is there. I’ve found tutorials on sites like Pluralsight (although admittedly I haven’t tried Udemy) are out of date.
You mean my job title shouldn't be "Dark Wizard" when I work on my group's auto-configured custom spring "starters"? It's basically black magic ;)
Spring will create one instance of that Component as a Bean, and then inject that Bean wherever it's been auto-wired (either by field annotation or as a constructor parameter on another Bean). That's what makes it a singleton. You don't need to create new versions of it manually or build your own factory (or whatever) around it to build an old-school, "classical" Java Singleton.
If you have such a small number of valid states, wouldn't it be easier to limit the total possible random numbers to just those states instead of creating a blacklist? If you want to do it for the sake of doing it that's fine too... Just wondering if that's the best way.
you can be productive with spring right now without learning anything else first. but spring does a lot of magic on startup, so there are a couple things (that i don't think are common on android) that might give you more of an appreciation of what's happening. so for a purely academic exercise, you might be interested in looking into: - classloaders, including definitive ones (as opposed to delegating) - reflection - bytecode weaving (eg ASM or bytebuddy) - annotation processing
JPA and Hibernate if you are planning to use a relational database. [These 230 tutorials](https://vladmihalcea.com/tutorials/hibernate/) will surely help you get the most out of JPA and Hibernate whether you are using Spring Data JPA or not.
&gt;[Baeldung](https://www.baeldung.com/) \- Highly recognized blog with lots of tutorials ranging from basic hello-world type stuff to more advanced topics (including extending Spring functionality with custom behavior). Usually at the top of any "how to do &lt;task&gt; in Spring" Google searches. &gt; &gt;[Learn Microservices with Spring Boot: A Practical Approach to RESTful Services using RabbitMQ, Eureka, Ribbon, Zuul and Cucumber](https://www.amazon.com/Learn-Microservices-Spring-Boot-Practical-ebook/dp/B0782L1GDR/) \- Excellent book that covers a ground up approach to learning about microservices with Spring Boot. Being an actual book, it's slightly out of date (uses Spring Boot 1.5.X which is now EOL'd) but it's a good introduction to Spring Boot, TDD/BDD, and Microservices. Also includes a few other useful Java libraries like Lombok that make already trivial tasks (building model classes) even more trivial. Copy and pasted a comment of mine from another recent post from someone new to Spring.
Inversion of Control and Convention over Configuration are important if you're doing anything with Spring Boot.
Programming help goes in /r/javahelp as is clearly pointed out in the *sidebar*. **Removed**
You can use the Oracle JDK on non-production computers for development and testing. They don't have any particular way of knowing who is using it. But if you get audited by someone, you'll get in quite a lot of trouble. It's mostly an honour system, but with some pretty bad consequences if you're ever discovered.
Lawyers. If you're the sort of company that requires Oracle support for the JDK, you have a contract with them and they audit you to make sure you're in compliance with the terms. If you're a lone developer fiddling around with it, it doesn't matter. The software itself doesn't have licensing built in.
It's more about avoiding lock-in with an external git provider. From [https://wiki.openjdk.java.net/display/skara](https://wiki.openjdk.java.net/display/skara) : A significant risk when using an external source code hosting provider is to become dependent on the external source code hosting provider. The version control data itself will always be independent of source code hosting provider due to distributed architecture of Git itself. However there is a large risk in metadata such as code review comments becoming "locked in" on a particular external source code hosting provider
Simplicity and consistency are key. This book is not directly about APIs but is relevant for any software designer - A Philosophy of Software Design by John Ousterhout.
Perhaps an equally stupid question as a follow up: For what reason would a company have Oracle support for the JDK they use? I mean, Oracle would not publish something that is broken and if my company's code isn't working, it would definitely not be Oracle's problem right? Maybe this is something I've just never been exposed to and it falls into the category of 'stuff bigger companies have to deal with'.
How does it hold when it comes to topics like custom configuration and DI?
Neat, didn't realize that Azul published a build of mission control! I'll have to send others there, it is literally the only thing that's held me back from recommending others pick it up.
Here's an unbounded thread-safe queue. Took me maybe 5 minutes. At any point in time `queue` is an immutable list of elements. `swap!` atomically updates the `queue` reference. (def queue (atom ())) (defn push! [item] (swap! queue conj item) ) (defn pop-it! [] (let [item (first @queue)] (swap! queue pop) item )) Now show yours?
We use an inhouse ORM. Debugging is trivial.
I do not know clojure at all. But after 30 seconds, it appears that your solution is “just wrap a static in a public static API and access from the threads” which utterly defeats the point of the contest and effectively ever single claim immutability fanboys make...
Baeldung has some excellent posts on both. Don’t remember how deep the book gets on DI or auto-configuration (custom starters). I point it out as a good practical exercise in a lot of good practices.
I'd say go for quality over quantity, meaning make sure that the current code is well structured, well formatted, tested, modular, follow SOLID principles, etc.
Feel free to look at the generated class files. (There's no 'static' in Clojure, btw) Not sure how that defeats anything. This is typical code dealing with atoms. Almost idiomatic clojure code. It is very simple, robust and uses immutable datastructures as requested. You can also call this from Java code. So think of it as a library? I've yet to see your code. It better be a razor thin wrapper around some class in `java.util.concurrent`. Show da code, man.
Well, I think it's well structured and follows SOLID principles more or less, I made an overall refactoring to raise the code quality. However, it doesn't contain unit testing yet.
Make sure that you cover the code with Unit and Integration tests.
I'm not familiar with clojure, but doesn't the fact that the queue is an "atom" imply it's mutable?
I have no idea why that guy gets more upvotes than you. I agree that he is obviously confusing immutable with mutable objects.
Of course not. Senior Software Engineer pays way better than Dark Wizard.
Did you try to increase the heap space in eclipse.ini? I am using 4GB max heap since years and never had the issue you mentioned.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c5ezcj/openjfx_licensing/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've come to the opinion that I like OSIV for read only items (along with a warning so you can add prefetch later). 9/10 there's no performance impact (aka, it would have been a separate query anyway) and you have less customer-facing bugs. That said, for the purists out there, OSIV is terrifying for that 1/10 time where you're listing something in a .ftl file and you are baffled why you can't render 100 rows of data in under 2 minutes. I don't deny the purists their correctness, but I'll take 1/10 bugs where I can fix the problem instead of 10/10 bugs where I still have to fix the 1/10 real problem.
It doesn’t matter though, because this person is utterly incapable of intellectual honesty of any kind. Them and I both know that the problem is not easily solved in idiomatic java, which is why they jumped ship to clojure where what is tantamount to “public static” apparently is idiomatic (I don’t know if that’s true or not). Of course, if we’re just declaring everything in our application public static to get around the issues that immutability poses, were in a lot of other trouble.
&gt; Not from the video: Use of dark patterns: Everything is on sale, for a limited time only, so better not think twice and buy. "limited time only" Sure... if you don't know how to google "Udemy Coupon" that brings literally everything down to $10-$15 from $100+
I did the Clojure code, because it was faster. If someone challenges me to a code challenge, I chose the deadliest tool. I've yet to see his code. There's nothing 'static' about this. If you want to use many queues, you could use this: (defn push! [q item]...) i.e. you pass in the 'queue' into the function.
To be fair, your definition of "thread safe objects" also leaves something to be desired. And let's be honest you set a trap for them with your "immutable queue that can be mutated with pushes and pops". I saw an article somewhere a long time ago from one of the pioneers of OO and he made the argument that original ideas behind OO were very much in harmony with immutable state. The idea being you can model state using objects at a given time. So at t1 your state is X. Followed by a new state at t2 and so on. I thought it was interesting, but now I can't find where I read it or who wrote it.
Interesting. However, the class naming convention is atrocious. Lots of two letter abbreviations. What does "Tk", "Bk", "Ft", and "Xe" stand for? Couldn't they have just been typed out fully? Is the author scared of letters?
&gt; AOP is just meta programming. AOP is just shit programming. Why not just use gotos with labels if you are going to use AOP?
thank you a millions -Xmx4048 did the trick i must have forgot to set it from migrating from Eclipse 2016 (fast) to 2018(super slow) and then 2019-03(slow) no its fast again like 2016
do you happen to know a few plug ins that provide confort similar to IDEA.. i already have postfix and auto complete.
An atom manages a reference and `swap!` coordinates changes to it. That is about the only mutable place, since without state changes no meaningful work is done, i.e. making a growing/shrinking queue available. All other datatypes used (i.e. the list holding the queue elements) consist of immutable data-structures. At any point in time, I can de-reference the atom (with `@queue`) and get the current value of the queue. Since the list is immutable, I'm guaranteed a consistent view of it (there is no possibility that another thread could change that list) For example, it is very simple to snapshot the current queue contents to disk, or build another queue with the same content. The only thing another thread can do is read the very same list. So thread A and B can hold onto the same list object without any issue. No extra synchronization effort is required. If you make your objects immutable by default, you are getting these worry-free benefits immediately. Picture this: class Person { String name; Set&lt;Person&gt; friends = new HashSet&lt;Person&gt;(); Person(.....) {} Set&lt;Person&gt; getFriends() { return friends; } } What would it take to make this class thread-safe and to enforce how client code can use or not use `friends`? Should I make a defensive copy in `getFriends`? What if someone adds a Person from some other thread? etc. etc. In is surprisingly difficult to build non-trivial classes that are well-behaved under concurrent use and retain the correct structure. I.e. enforcing the shape of an object graph
I'm familiar with the arguments for preferring immutability, my point is that your queue implementation is not immutable. You can't reason about it's state like you can about immutable types. Popping from it two times will generate different results. That's a dead giveaway it's mutable. You can make the argument that an stm approach is safer than locking, but in either case you're pretty far from the simplicity of immutable state. Here is an example of an actually immutable queue: https://blogs.msdn.microsoft.com/ericlippert/2007/12/10/immutability-in-c-part-four-an-immutable-queue/ It is unusable in a multi-threaded environment (based on the requirements of the comment you were replying to). Here is what the author has to say in the comments: &gt; You are defining ‘reliable’ to mean ‘two threads can enqueue "the same" queue and both enqueued items are present in the resulting queue. This is a very "procedural programming" way to think about thread safety — thread safety is PRESERVATION OF ALL SIDE EFFECTS. &gt;**If that’s the kind of reliability you want then you should probably be using a mutable threadsafe queue!** If you try to use an immutable queue for this purpose then essentially you will have to synchronize access not to the queue — the queue is threadsafe — but to the variable which contains the "canonical" version of the queue. This is what you've provided with your code "a mutable threadsafe queue!"
Two things 1. Java Reflection API 2. Dynamic Proxies. Having an understanding of these two concepts will help you get an idea of how Spring works under the hood.
I'm a senior programmer who regularly interviews people for jobs, in an interview situation, I'd be very impressed with this. I would ask you a few questions to see if you really know what you're talking about (and to see if you really did everything you said). Off the top of my head ... "Why did you choose Angular? Did you consider other tools? What is the difference between Angular and those other tools?" "You used a lot of Spring components. Did you consider using Spring MVC?" "Why did you use Spring Boot instead of just Spring?" "What was the version number of Spring that you used? Why that version?" "How did you build the Rest services?" "What kind of database did you use? Why did you use Hibernate instead of writing SQL queries and just using JDBC?" All of this not to say you were wrong about any of your choices, just to see if you can talk intelligently about your tools. Pretty much I just want to make sure you're not full of B.S. and trying to pass someone else's work off as your own. Good luck!
Run the java program from a terminal, and specify the java you want to run it with
I am also not finding the article. But it still doesn’t matter, because not a single claim that the immutable object crowd makes stands up to any level of real scrutiny anyway. The arguments stand or fall on their own merit regardless of who said it and the arguments for immutability that I’ve ever been presented range from bad to (more frequently) demonstrable lies. If we want to just say that a thread safe **object** is anything in the language that can conceivably be used in a thread with various guarantees, then I will concede under this definition of thread safe objects that they are. I’d consider immutable objects as more like thread secure, I guess? I understand why people say immutability gives you thread safety on objects, but I think that more correct and specific wording needs to be applied because while immutable objects are “thread safe” in one very specific sense, they are also not thread safe in entire categories of completely valid usages of threads.
Set JAVA_HOME to your Java version?
I wish you would understand the meaning of mutable and immutable. I truly wish. You wanted an 'immutable queue' (which in itself is a bad description). In order for a program to do work data needs to be changed and side-effects generated. In my implementation the change happens atomically: queue's binding is changed from value A to a new value B. Both A and B are *immutable and thread-safe* data structures. Regarding visibility and reliability: Threads X and Y both pushing and popping into the queue *always* have a consistent view of the data. When the swap! call in push! replaces the binding of `queue` in a CAS operation, it 'adds' the new item in front of A, creating B. Both are immutable data-structures. Concurrent writes to queue are resolved according to CAS semantic. That is as simple as it gets really. The example link you posted is not showing a 'persistent' immutable data structure that supports structural sharing, thus it is not usable in MT scenarios. Please read this: https://en.wikipedia.org/wiki/Persistent_data_structure It might help you understand what immutability actually is. BTW, I *still* haven't seen your code that you can hack in 10 minutes...
Unfortunately not all programs you can do this with and I am not entire sure why. I've had to download the Oracle 8 jre to get some Java apps to work correctly. 🤷‍♂️
&gt;In my implementation the change happens atomically: queue's binding is changed from value A to a new value B. This is a mutation. The fact that it happens atomically (and based on my limited understanding you get consistency from STM with the !) means it's safe. But just because it's safe doesn't make it immutable. lt's an observable change. Again, a client will see different results by popping twice. I wish you would understand. I truly wish. &gt;The example link you posted is not showing a 'persistent' immutable data structure That's exactly what it is. Just look at the declarations (if you don't want to read the code) of enqueue and dequeue. IQueue&lt;T&gt; Enqueue(T value); IQueue&lt;T&gt; Dequeue(); Look at the quote from your link: "their operations do not (visibly) update the structure in-place, but instead always yield a new updated structure" You can invoke Dequeue any number of times on a reference to a queue and it will always yield the same result (a *new* queue with a single element missing from the original). Because it's not updating the queue in-place. It's yielding a new one. Your code updates the reference to the queue *in-place*. The fact that this in-place update happens to swap two immutable queues is immaterial. It's a visible update to the structure in-place. &gt;BTW, I still haven't seen your code that you can hack in 10 minutes... That wasn't me.
https://www.quora.com/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it/answer/Alan-Kay-11?share=a52bda70&amp;srid=s4tO
Oh right, that was the other guy. Maybe you missed that part of the problem description: "Build me a thread safe queue that multiple threads are pushing to and popping from. This queue must be immutable. " Yes, that implies mutability as things are being removed from the queue. Doesn't it? Not sure what you think you wanted this code to be i.e. we are talking about very different things here. A pub/sub with multiple consumers? And yes, the update to the binding happens in place, but every time a thread de-references the atom, it gets a consistent, immutable view of the queue. A thread *never* sees a structural change happening in the queue. This is a subtle but very important difference. I think we are done here for now.
The OS determines what program opens what. In your case, the OS determines what Java version your program is executed with. There is no direct way to force the OS to open one specific program with one specific JRE. Still, there is a way: you need to pack the JRE together with the program (pretty similar to the way Minecraft does) and then have a launcher (that can be as simple as a batch file) that executes the program with the correct JRE.
&gt;Maybe you missed that part of the problem description: "Build me a thread safe queue that multiple threads are pushing to and popping from. This queue **must be immutable**. " &gt;Yes, **that implies mutability** as things are being removed from the queue. Doesn't it? No, it implies impossibility. &gt;Not sure what you think you wanted this code to be i.e. we are talking about very different things here. A pub/sub with multiple consumers? There is no code that can satisfy that requirement. It's like a paradox "an immutable queue that mutates". It was a trap and you fell for it. &gt;And yes, the update to the binding happens in place, but every time a thread de-references the atom, it gets a consistent, immutable view of the queue. A thread never sees a structural change happening in the queue. The fact that the you get different values when you pop twice means it's a mutable data type. Period. &gt;This is a subtle but very important difference. It's an implementation detail. It doesn't change the fact that it's a mutable type.
fdd
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
what program is this
The author is scared of many things. Null, mutability,...
&gt; I've come to the opinion that I like OSIV for read-only items For read-only data, you should not even select entities. Entities are useful for writing data back to the database as you benefit from dirty checking, automatic JDBC batching, optimistic locking. However, for read-only data, [DTO projections](https://vladmihalcea.com/the-best-way-to-map-a-projection-query-to-a-dto-with-jpa-and-hibernate/) are way more efficient and they will never throw a `LazyInitializationException`. &gt; 9/10 there's no performance impact (aka, it would have been a separate query anyway) and you have less customer-facing bugs. If you disable OSIV, you won't face more bugs. On, the contrary. You will face fewer performance bugs. To prevent bugs, you just need a good test coverage which has nothing to do with OSIV. In fact, you should employ a [statement count assert mechanism](https://vladmihalcea.com/how-to-detect-the-n-plus-one-query-problem-during-testing/) as well to make sure you don't bump into N+1 query issues. &gt; I don't deny the purists their correctness, but I'll take 1/10 bugs where I can fix the problem instead of 10/10 bugs where I still have to fix the 1/10 real problem. Again, this is not about bugs. This is about using OSIV by default at the beginning and develop your application without enforcing the entity fetching to happen inside the transactional boundaries. By the time performance becomes an issue, you are going to spend a lot of time on fixing your application. To conclude, if OSIV were so great, all application frameworks would employ it. But, that's not the case. [Micronaut explicitly states they don't think OSIV is a good idea](https://twitter.com/vlad_mihalcea/status/1142706716418674688) and it's the developer responsibility to provide a proper fetching strategy on a per-use-case basis.
Run it inside a docker container that has only this java version
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/c5ng6m/what_differences_between_defined_variables/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Java EE and Spring are 2 different things and the biggest competitors on the market. Some developers are using Java EE, others Spring and the less fortunate are using both to create monstrousities of applications. &amp;#x200B; By Java Web Developer, the company probably wants to say that you will also have to deal with the Frontend (e.g. write JSF code or Spring MVC) and not only deal with backend services.
Writing middle-ware
But it seems that Java Developers are doing more than what Spring framework and Java EE are capable of. Since I don’t have an opportunity to lend a job in this field, I just can’t fanthom on my own what else does a backend java developer job do that is not within the realm of web....(minus the front-end) part. Hope people who are backend engineer can share with me more. Tks.
May I know what are the technologies I need to learn to do middle-ware?
Some people just write Java code. They don't use some massive framework or named technology to do that. Just a \`main\` method and their own code.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
But, using main method how you make the ‘App’ work cos usually they will hardcode the data...I wonder what sort of code do people write to make them backend developer?
&gt; But, using main method how you make the ‘App’ work You run it as `java MyMainClass`. &gt; cos usually they will hardcode the data You can read data from files, or from a network, or synthesise it. &gt; I wonder what sort of code do people write to make them backend developer? A back-end just means it's some kind of service. Writing a database, a compiler, a renderer, a simulator, etc, all are 'backend' things.
May I know what does a simulator do which uses java code ? N it must be hard to write a compiler. Where can I pick up knowledge how to write a simulator?
I'm developing an application that has a react front-end and Java backends that use s3 and postgresql or dynamodb as persistence. I spend most of my time implementing use cases, that are related to creating mini data centers in aws(subjects, security groups, s3 buckets, permissions /policies, Enis, and ec2 instances) and install /maintain nuclear power plant simulations within based on windows. The backend services are running on ecs/dockers and are installed /updated using CloudFormation.
I'd ask you to analyze how your implementation makes sure, that it's not vulnerable to any of the OWASP top 10 risks. That would get us talking about how things work and give me an understanding of your understanding of the frameworks underlying principles.
No, not bad design in of itself. However, I’m not sure using a builder pattern for literally everything is a good idea, either. And using setters means your objects are not immutable which is largely becoming a preferred pattern. Declaring constructors can also improve readability for other developers and allow the IDE to reference the constructor when you click into the file from an instantiation. It can be confusing when you click into the class from a constructor and the the IDE brings you to the class declaration.
I've never heard anyone say that it's bad design to not have constructors. It's fine not to have one, in my opinion. Maybe you're talking about dependency injection, where taking dependencies via the constructor means you can make the dependencies contractual.
Programming help should go in /r/javahelp Use a *proper* IDE and writing constructors and getters and setters is a breeze. **Removed**
pick something you want to simulate and start designing and coding. That's it. package it as a runnable jar file.
&gt;\&gt; immutable objects are simpler to construct, test, and use &gt; &gt;Prove it. Not my experience at all. &amp;#x200B; I'm not going to attempt to prove it, especially since from your post it seems you've already made up your mind anyway. However since *experience* counts too I'll add mine: In my experience immutability does simplify things. This is the one thing I miss most from playing around with Clojure (or any functional language that enforces immutability) and coming back to Java. It is simpler to reason about a program when you can assume immutability. In particular, it reduces the cognitive burden on the programmer, and therefore leads to less possible mistakes. I think the argument for immutability is a sound one.
If that is the case, I'd like to know what you consider lightweight. Because according to mine it's heavy weight.
It should be pretty quick to test: if you strip out the GUI parts, only take the main data structure and the most common operation you perform on the data structure, and do a side-by-side performance comparison on both mutable and immutable structures. Look at the diff and decide whether it's significant enough for the user to notice?
i would have to make a lot of changes. I use a SwingWorker that populates a huge table over 5 minutes,, every seconds it loads like 100s of rows.. with an immutable structure, it would need to copy the whole thing every updates 200 ms. Here with a JTable, its a simple append on the table model. the GUI is smooth and the user gets constant 200ms feedback the worker is doing its work fetching more and more data. I don't have time to test this.
You add it to your environment variables. If it's a hardcoded path in the app that's a different problem (solved by chucking the program in the bin).
I obviously don't know your code like you do so I'm making guesses here, but just assuming you think the work is in creating the immutable data structure by yourself, you can find most common data structures already implemented in Java libraries that support immutable style, just one example (of many): [https://github.com/martincooper/java-datatable](https://github.com/martincooper/java-datatable) In any case, I wish you luck with your app! And I encourage you to continue to be curious about functional/immutable paradigm. It's challenging but also rewarding.
*spring.jmx.enabled=false* &amp;#x200B; That's one way to do it I guess. If you do want to keep some of the actuators as metrics, you can configure the JMX exporter with whitelist/blacklist object names.
Effective java by Joshua Bloch Thinking in java by Bruce Eckel They are a must for all java beginners
I'm well aware the need to add it to the environmental variables. The app, whose name I currently can't remember, will say that no JRE is found even though you have the JDK on the system path. I want to say that Netbeans 8.2, for instance, will do this with JDK 9. It's the reason why Netbeans had to be rewritten because it was looking explicitly for the JRE.
If they need a OOD lesson to be Java-specific, they'll never understand OOD.
They aren't a separate "JDK" like Oracle Java or OpenJDK or Amazon Corretto, all they are doing is taking the source of OpenJDK and creating builds for windows, which probably you can do too without being TCK certified. If you still have reservations about using it, you can perhaps use Amazon Corretto as a replacement. The difference between the various JDKs shouldn't really matter to you unless you are doing any heavy and enterprisey stuff!
I can only think of a traffic monitoring system. Is this a good backend code example?
I definitely think so. The monthly price is fairly cheap for what you get.
I use the Ultimate edition for web development in React. Our backend is Java and the frontend is React + TypeScript and with Ultimate I just use one IDE for both. I know I could use VSCode for the frontend, but everyone in the team is using either Ultimate or WebStorm.
Pretty sure spring kills your spring performance
Yeah, I know that each build of OpenJDK is usually made from the same original upstream source repository. The use case is pretty much just simple web services without any heavy crypto algorithm, so I'm not really affraid of such differences. The question is specifically about the lack of TCK.
I know that the Community edition would be enough but I also know that it is the Ultimate edition that keeps this software alive. So I'm really happy to pay it. It's actually the only software for which I pay something.
This article provides the details of the implementation of garbage collection in java. It also covers the Daemon thread and how a user thread can be converted into a daemon thread.
To be honest, Android's implementation of Java lacks TCK too, yet people are falling over each other to write apps on that platform!
It's 4.99 a year?! You can use Netbeans or eclipse with the same features for 0.
That’s the organizational license. You can use a personal one at work for about $149
Out of curiosity, what particular difficulties have you encountered when keeping up with the current JDK version? Keeping up with the current JDK is designed to be the cheapest, easiest upgrade path (LTS is intended for companies that can deal with a costlier, more complex upgrade process).
I agree for the most part, but POODR also spends a bunch of time on ruby-specific things like modules/mixins. Which IMO (as someone who's been doing ruby for a couple years now) are probably a mistake... I think composition is much more maintainable over the long run. Maybe it's possible to cherry-pick the chapters on inheritance and composition? I don't remember how well-separated they are from mixins. Probably not separated at all. Or maybe reading about mixins in ruby can be really instructional for OOD anyway. I don't know how OP feels about them, but maybe OP can market it as "hey ruby does its OO in a slightly different way, and learning it and critiquing it can make us better java devs!" Or "hey let's learn how ruby gets it wrong!"
Oracle Java is an OpenJDK build. OpenJDK is the name of the JDK developed (mostly) by Oracle.
&gt; You can use Netbeans or eclipse with the same features for 0. I don't know much about Eclipse, but from personal experience I can say that IntelliJ's refactoring tools are significantly better than those in Netbeans.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My IntelliJ student license ran out. I almost installed the community edition but I've been lazy and have been using Visual Studio Code lately. I'm starting to like this way more than IntelliJ because it's somewhat more intuitive for a lot of things. Can't hurt to give it a shot.
And in his case it's down to $89/year (after 2 years) https://www.jetbrains.com/idea/buy/#personal?billing=yearly If you are a developer this doesn't seem that much, and IMHO the value you get for it is well worth it...
I'd say depends on your use case. For me it just works well, it's well integrated and it's not _that_ expensive…
So far I did not face with any difficulties. I was just checking the possibilities and that's when I saw this difference. Keeping up with the new release model is also an option. In case of one of the components we may want to stick to version 8, possibly with LTS. So you either pay or you will use something like Coretto or AdoptOpenJDK as far as I understood. I'm just not sure if the lack of TCK is because of some legal conflict between Adopt contributors and Oracle or it is a "technical" difference.
True true, thanks for your input! :)
Wouldn't they have enough profit from their enterprise licenses and funding from Google?
&gt; we may want to stick to version 8, possibly with LTS Ah, but because JDK 8 was before Oracle open sourced the entire JDK, there are quite significant differences between Oracle JDK 8 and OpenJDK 8. This may (or may not) be a bigger concern than the TCK, depending on your use case. &gt; I'm just not sure if the lack of TCK is because of some legal conflict between Adopt contributors and Oracle or it is a "technical" difference. I would not call it a conflict, but it is a legal matter. The fact remains, however, that Adopt does not currently have access to the TCK, and therefore cannot run the tests and ensure their binaries are conformant. I hope the matter will be resolved soon. (I work on OpenJDK at Oracle, but speak only for myself)
GitHub link not working
I'm a lifelong pirate and just recently started self-employed contract work and I say emphatically that Yes, IntelliJ Ultimate is well worth paying for. It really isn't that much money, they are continually improving it, and the Spring Boot, DB tools, etc that Ultimate has are very useful to me.
&gt; we may want to stick to version 8, possibly with LTS Ah, but because JDK 8 was before Oracle open sourced the entire JDK, there are quite significant differences between Oracle JDK 8 and OpenJDK 8. This may (or may not) be a bigger concern than the TCK, depending on your use case. &gt; I'm just not sure if the lack of TCK is because of some legal conflict between Adopt contributors and Oracle or it is a "technical" difference. I would not call it a conflict, but it is a legal matter. The fact remains, however, that Adopt does not currently have access to the TCK, and therefore cannot run the tests and ensure their binaries are conformant. I hope the matter will be resolved soon. However, note that Red Hat provides "official" 8u and 11u JDK's [here](https://adoptopenjdk.net/upstream) (while it's hosted on the Adopt website, these are Red Hat builds, and I believe they do pass the TCK). I call those builds "official" because while the OpenJDK project does not produce binaries, some builds are blessed by the OpenJDK contributors because those are the ones that they use, and those are the ones you can report OpenJDK bugs against (if you find a bug in an Adopt or Corretto build you'll have to report it to them, and then they will reproduce the problem on an "official" build and file the issue with OpenJDK). For 8u and 11u those are the upstream Red Hat builds I linked to, and for the current JDK those are the [Oracle OpenJDK builds](http://jdk.java.net/). (I work on OpenJDK at Oracle, but speak only for myself)
LTS is also suitable for those users who are happy with the current stable Java technology (swing, swt, tomcat, apache commons, etc.) and aren't too keen on trying the latest features (javafx, anon classes, module system, etc.).
Hey thanks for reading :) which link are you referring to?... [https://github.com/envimate/simple-java-http-docker](https://github.com/envimate/simple-java-http-docker) ?...
More than probably. But I **want** to give them money because it feels like I'm contributing to something that I really care about (and which I use every single day).
\&gt; Our backend is Java and the frontend is React + TypeScript and with Ultimate I just use one IDE for both. I've been trying to justify using the same reason too. However, with the recent Java support from VSCode, same thing can be said with 0 cost. I rarely use the refactoring capabilities of Intellij beyond variable renaming, getter setter, toString, hashCode, and override generation (all of which are supported by VsCode too).
If you are a freelancer or solo dev, you don't even have to worry about licensing because you aren't *distributing* the JDK. You just distribute your packaged jar (or even host it on maven maybe) but its your client who runs that jar in her own environment. On the other hand, if you are an enterprise user, I'd recommend you to shift towards .NET or Python technologies as both of them hold a much brighter future because of Oracle's legal issues. You may even consider Google's go which is both better in performance and comes without any legal strings unlike Java.
IntelliJ IDEA Ultimate is still superior in Java development vs VSC - I don't know about the community edition. However I am getting more and more disappointed by IntelliJ in general because it is really slow and bloated, the time you win by smart refactorings you lose with waiting. Release after release they are packing it with more and more features with no word about performance. Imho it's a bad choice for a dual core notebooks, even modern ones with ssds, no matter if Linux, Windows or Mac.
how does the student licence ends? im currently using it for the third year
IntelliJ autocomplete and hints are also light years better than eclipse and NetBeans. IntelliJ just knows what I want to type while eclipse and netbeans simply do not and actually frequently actively get in your way. IntelliJ saves me hundreds of keystrokes a day over netbeans or eclipse.
Their Spring Boot support is great but it's something that you don't use all the time. If you're familiar enough with Spring and Spring Boot in general I would say that it's a borderline gimmick.
&gt; since there was no decent Java EE, JavaScript, and Python IDE around. For python you were right. Intellij was better for that if you needed it. But Java and JS ... you had both Eclipse and Netbeans that were at least equal if not superior. One would have had to wear blindfolds to not notice that. Well, that or basically not looking at all. So no, for Java (EE) and JS you never needed IntelliJ.
No, those users should prefer the current JDK, too, as that is the easiest, cheapest upgrade path. The problem with LTS is that it's costly (costlier than the old model): on the one hand, the risk of a breaking change in a patch is [no lower than in a feature release](https://www.reddit.com/r/java/comments/ba79hh/beware_of_computation_in_static_initializer_much/ekb4s3s/), and on the other hand, the patches no longer contain many gradual implementation features (that you use without knowing). In addition the OpenJDK development process revolves around feature releases without regard for LTS, so features can be *removed without notice* in an LTS release. This makes an LTS-&gt;LTS upgrade more costly than in the old model. Even if you've carefully considered the options and decided that LTS is the right approach for you, you are *strongly* advised to test your app against the current JDK release to reduce the cost of an LTS-&gt;LTS upgrade.
Not sure, but they figured out I'm not a student somehow 😮
True especially if your project is in Java &gt;8. It's damn sluggish even on my 16GB 4 cores laptop.
How sad, i will try to extend it as much as i can, i even have 2 edu mails since i move between universities.
\&gt; For python you were right. Intellij was better for that if you needed it. But Java and JS &amp;#x200B; Oh cmon, JS support in Netbeans and Eclipse was damn awful that I feel more productive doing it in Vim + plugin. Even coding Java last time was way better in Intellij (may not the case anymore).
There's various email validation service out there that enterprise company can subscribe to verify the validity of the client email beyond DNS name checkingl.
How long do you need for a cold start? It takes about 2minutes on my Core i5-6200U with 20GB RAM and SSD. Reformatting windows, disabling plugins or switching between JRE8 and 11 32 or 64bit didn't make a difference. Welcome to 2019 :D!
\&gt; How long do you need for a cold start? Usually enough time for me to get a fresh cup of cappuccino or go for a quick poop.
Elegant Objects by Yegor Bugayenko.
IMHO Intellij still has it's points (even in 2019) - although I use VSCode more all of my project now a day. Esp. for older projects or simply if your used to the workflow a switch of IDE might not worth the effort. The justification I heard from a lot of guys, is that they can run the IDE blind and if their company does pay the subscription it's simply not a matter do deal with.
I pay $89/year for my IntelliJ Ultimate license. $499 is if your company buys it. Personal license is cheap.
&gt; Maybe it's possible to cherry-pick the chapters on inheritance and composition? I don't remember how well-separated they are from mixins. In fact, let's skip inheritance as well ;-)
Android may be a popular platform, but it does not attempt nor claim to be a Java implementation. Many/most Java programs cannot run on Android.
I use VsCode for my Arduino stuff (platform io) and my 3d modeling with OpenSCAD and I find its performance to be abysmal. I can't imagine using it for a big java project. For example, if I rename a variable the multiple cursors get out of sync if I type too fast and then it types in the wrong place. Annoying as hell. HTML/CSS/JS just aren't intended for performant rich desktop apps and using them for that just doesn't work good. CE doesn't have the database tool does it? That alone is worth it right there.
&gt; a much brighter future Microsoft just discontinued .NET Framework. They do a huge breaking change every few years. &gt; because of Oracle related legal hassles with Java What legal hassles? You mean open sourcing the entire JDK? &gt; which is both better in performance It's certainly much faster than Python but not as fast as Java. &gt; without any legal strings unlike Java. What legal strings?
lol. while it's true that nowadays i prefer vscode for my js+html needs, there was nothing that intellij had (even 5 years ago) that was better than eclipse.
Made my day thanks ;)
&gt; What legal hassles? You mean open sourcing the entire JDK and so removing the field-of-use restrictions that existed since Java's beginning? &gt; &gt; Look at the difference between JDK 11 and earlier versions' licensing and you'll know! There was never a paid tier licensing for Java in its entire history ever since Sun open sourced the GPL but Oracle is taking us back to those earlier times with JDK 11 paid licensing. What legal strings? Look at Oracle vs Google which is still ongoing, this is exactly why everyone in the IT industry is terrified of touching Java right now! Google is a global MNC who can look after themselves but what if Oracle came after some plebeian little known startup for using Java on their computers? This is the exact worry people are facing that's why they are looking at other options like Python, .NET, PHP, Ruby, etc. whatever the technical costs may be.
&gt;CE doesn't have the database tool does it? That alone is worth it right there. I rarely use SQL these days, not because I hate it or belong to the category of `MongoDB is a webscale`-hipster , but the requirement doesn't need transactional capabilities. Even when I do, I'm pretty comfortable with `psql` (Postgres command line tools).
tl; dr They were pulling all Spring Actuator endpoints every 10 seconds, one of which generates a thread dump. Thread dumps are slow.
The fact that builds are not officially passed with the TCK does not automatically mean they're not compliant. It's just that they didn't jump through the hoops of doing it or paid the money to do it. I'm using Adopt OpenJDK versions in production without any issues. Imho, paid support for the JDK is a bit of an unnecessary money dump.
&gt; Look at the difference between JDK 11 and earlier versions' licensing and you'll know! You mean that as of JDK 11, the JDK is, [for the first time ever](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later), 100% free and open source? &gt; There was never a paid tier licensing for Java in its entire history This is not true. Until Oracle open sourced the JDK recently, it had field-of-use restrictions that required payment, and it had paid features. &gt; but Oracle is taking us back to those earlier times with JDK 11 paid licensing. What are you talking about? Oracle open sourced the entire JDK. It is *also* offering a support service for those who want it, in order to fund the development of OpenJDK, now that the paid features and the field-of-use restrictions are gone. &gt; Look at Oracle vs Google which is still ongoing But that's an extraordinary case of a company copying an API, *not* using its license even though it is open source, *and* [not using it for the sake of compatibility](https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.#Appeals_Court_and_finding_of_non-fair-use). &gt; this is exactly why everyone in the IT industry is terrified of touching Java right now! What are you talking about? Java is doing extremely well. Even Google is not afraid of using (and forking) Java ([here they are talking about their extensive use of OpenJDK *at Oracle* in 2014](https://video.oracle.com/detail/videos/featured-videos/video/3731062156001), the height of the trial). The Android case has nothing to do with threats to using Java. &gt; Oracle came after some plebeian little known startup for using Java on their computers? Have they ever done it? BTW, Microsoft has extracted more money from Android via litigation and threats of litigation than Oracle even sued for.
&gt; Ah, but because JDK 8 was before Oracle open sourced the entire JDK, there are quite significant differences between Oracle JDK 8 and OpenJDK 8. This may (or may not) be a bigger concern than the TCK, depending on your use case. Basically Oracle JDK=OpenJDK builds by Oracle (in terms of builds) only from version 11, right ?
Yes (for those versions for which Oracle builds OpenJDK).
It could be a problem, but most likely will not. So it's a matter of how big your risk appetite is. Not being tested against the TCK means that if the build was accidentally done in a way that introduced a JVM incompatibility or defect, well, it is more likely to not be caught beforehand. So it could manifest itself in your production environment. Where this is most likely to occur is in backported patches, which is also the entire point of these JVM vendors. If you take the latest commit of the OpenJDK source, and that is the commit tagged as vX.Y.Z, you pretty much get exactly that. But if you were okay with just always upgrading to the latest version, you wouldn't mind using the Oracle OpenJDK. If you've chosen not to use the Oracle OpenJDK builds, it is because you do not want to always upgrade your JVM. But you also don't want to be on an old JVM which isn't getting security and bug fixes. In that case, you need someone to take the old commit of the release you are on. Say you are in JDK 8 and that's commit 1234. But you want the patches that were committed after which addressed security and bug issues to be cherry picked and applied over 1234, without bringing in the feature changes. This work requires manual cherry picking, could create merge conflicts that have to be resolved, etc. This process could in theory introduce bugs or cause some things to not behave as it should, since it is very much a change to the source code. It is like a micro fork, where selective patches are applied. This is where the TCK comes in handy. It's a big test suite, to make sure that when you're done applying all patches, nothing broke. So as I said, it is up to you to decide if you care about the small risk these cherry picked patches could introduce bugs or not.
It honestly reminds me of Microsoft Word or Excel at this points. There are features in all sorts of menus, gutters, and sidebars that it feels bloated. I frequently have to use Google on how to do certain things.
&gt; recently I've never touched Java EE at all. Spring Boot or Vert.X is good enough for major enterprise Java project and they're just plain Java without the need to integrate with massive application server. Spring Boot is Java EE compatible, you just don't need something like Websphere to run your application server, it's baked into the app. Really, you don't need an app server to run anything EE, that's just what you see in the wild. Java EE's biggest feature is CDI (contexts and dependency injection) which is what Spring provides. That being said, the Spring integration for IntelliJ Ultimate is unmatched. As is it's refactoring capability, intellisense and language support beyond Java. I use VSCode as a text editor, but when I want to do work, I fire up IntelliJ.
Just FYI . . . &amp;#x200B; The Zulu builds from Azul are TCK: [https://www.azul.com/downloads/zulu/](https://www.azul.com/downloads/zulu/)
Did you try to add intellij to windows defender exclusions? For me it reduce a minute to seconds.
My top two: 1. [Agile Patterns, Principles &amp; Practices](https://www.amazon.com/Agile-Principles-Patterns-Practices-PRACTS-ebook/dp/B0051TM4GI). Technically C#, but the concepts are generic OOP in statically typed languages, and the examples can be translated 1-1 with Java. 2. [Growing Object Oriented Software Guided By Tests](https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627). Extremely practical book, going through a single worked example.
Oh.... I miss the days when I could take a quick poop.
in the blog you run the docker locally. what are you using for production deployment ? &amp;#x200B; i'm working in a similar space and am disappointed with the options that i've found. it muddies the waters in conveying the usefulness of simpler systems if it means people need the complexity of k8s (and a \~$10 per month host) to try them out &amp;#x200B; seems like there should be some dead-simple way to deploy a jar like this to a low-end openvz or kvm host
For their OpenJDK builds (adopt offers another JDK, too) Adopt aren't applying backports, but building the 8u/11u projects. Red Hat puts their clean, "official" upstream builds [here](https://adoptopenjdk.net/upstream) (hosted by Adopt but not built by them), and those builds do pass the TCK. The problem with binaries not passing the TCK is that, e.g., using particular C++ compiler versions may introduce incompatibilities/bugs.
True, it does not mean they are not compliant. In fact, if you consider that the TCK is a conformance test that ensures that all methods performed as specified, then, if AdoptOpenJDK are building from an identical source tree to one that has been TCK tested by another vendor, it seems highly unlikely that the same code would produce a build that fails, when run in the same environment (another important aspect of TCK testing). &amp;#x200B; The TCK is essentially a big black box that gives you a tick if you pass all its tests. AdoptOpenJDK argue that they pass many other tests, which, unlike the TCK, can be examined to determine their veracity \[0\]. Different tests also test different aspects of the JDK. The TCK can only work to the Java specification, so it can't test optional components or particular features of the VM. For example, if the specification requires crypto algorithms x and y to be implemented, and the JDK you're using implements x, y and z, then the implementation of z will not have been tested by the TCK at all, because it can't assume it exists, as another JDK that doesn't implement z also has to be able to pass the TCK. &amp;#x200B; All this is quite separate from the usefulness of paid support though. The OpenJDK project provides binaries for download \[1\] \[2\] that are TCK tested and can be downloaded without payment. Paid support is about having someone to call upon when you hit a bug in the JDK and it keeps crashing, for example. It means being able to get an engineer to look into that, rather than crossing your fingers and hoping someone will fix it some time. &amp;#x200B; \[0\] [https://twitter.com/karianna/status/1131591098579738628](https://twitter.com/karianna/status/1131591098579738628) \[1\] [https://adoptopenjdk.net/upstream.html](https://adoptopenjdk.net/upstream.html) \[2\] [https://jdk.java.net/12/](https://jdk.java.net/12/)
As far as I can tell, typical reasons for using Rust over JVM languages are memory usage, speed, smaller programs, no GC, and easier deployment as libraries or single binaries with no KVM version maintenance. Prisma wrote up their own reasons with a blog post about v2's in-progress transition from Scala to Rust
I understand and share your frustration! Add to that the need of a simple CI/CD ! Personally, I've dealt with AWS - both ElasticBeanstalk (java and docker based) and ECS(that'll be docker). Wouldn't call them significantly "easy" compared to k8s, but its definitely easy to start with and "try out" using the console and I think you can get away with "free-tier" for simple tryouts. Haven't been following K8s lately, but surely there are some "hosted kubernetes" solutions out there?...
VSCode just falls short once your project grows in size and complexity.
I think it is. With the ultimate edition you can download plugins for Ruby, Python, JS, Web, Rust and a bunch of others and you have support for all your languages in one IDE with shared shortcuts and behavior. As a freelance software dev I spend 10 hours a day inside IntelliJ and I use it for Java, Kotlin, Rust, Ruby, Bash, Markdown and probably some others. Spring Boot integration is top notch, the database/datasource integration is also killer. Some of the non-official plugins are also very good. Recently I had to do some Terraform and the IntelliJ plugin was way better than the VSCode plugin that some co-workers were using. But those might also be available in the community edition.
Lately I've been struggling with Git in IntelliJ, often I just want to "checkout master and pull", but these commands have to be done separately causing IntelliJ to first rescan the project on and old master, then rescanning again after you pulled. This is really annoying if you just merged an up to date branch.
Sorry, but by current JDK do you mean Oracle OpenJDK which will have the 6 months release schedule? Then the update to 11 is mandatory, isn't it? The only thing I am afraid of is that, as far as I read the update between version 8 and 9 was/is not so trivial, (but maybe I'm wrong) and then the update can be bit more painful than staying on 8.
duh.
&gt; Sorry, but by current JDK do you mean Oracle OpenJDK which will have the 6 months release schedule? I mean the current OpenJDK version (currently 12). Oracle provides binaries for those. &gt; as far as I read the update between version 8 and 9 was/is not so trivial, (but maybe I'm wrong) and then the update can be bit more painful than staying on 8. Yes, to enjoy no more major upgrades, you must do one last major upgrade from 8 to post-9, which is non-trivial. But while it *could* be more painful than "just" staying on 8, it can also be less painful, and the pain is constantly decreasing with more and more tools and libraries having made the jump.
Yes, they are separate things, but still related though. A paid implementation is more likely to have passed the TCK since this could be something that people / businesses care about. Personally, the amount of times I have needed an engineer to look at a JDK bug is exactly 0. For me, the free JDK builds have always worked fine, both for personal and commercial use.
Does not match with my experience. It is not by any means faster than Eclipse or other full-fledged IDEs. This will never compare to a "normal" text editor like VSC. I assume they make much more in the background than load up your recent files.
Rarely use Intellij for anything related to Git except when I want to see the modified files and diff it directly.
Don't forget your vegetable and drink more water.
Same can be said with recent version of Intellij. Try that with huge Java (&gt;8), Kotlin, or Scala projects.
I'm not sure I agree with that attitude. Of course static methods have some good uses. Annotations also do. But they're 99% bad in mainstream Java programming these days. Not because of what they are, but how they're misused. And when every framework has become utterly infested by annotation magic, saying "we got none of that" is an effective way to get me engaged and drive the message across.
It's a web framework, not a math framework. The domain permits some restrictions.
If you have a performance problem, then report it. https://intellij-support.jetbrains.com/hc/en-us/articles/207241235-Reporting-performance-problems
Many/most Java *libraries* run just fine on Android. A program as in a GUI application implemented in Swing, won't run indeed without heavy plumbing (e.g. convert the Swing app into Android native; try AjaxSwing by Creamtec). A program as in a GUI application implemented in JavaFX will run with some enhancements (e.g. GluonHQ.com).
This is my reasoning too. I look at my purchasing of an ultimate license as a way to support continued development for my favorite IDE out there- to which I use professionally at work, and for hobby at home.
Prometheus is fun. It uses CPU cache busting to improve its metrics performance. If you have enough metrics, this will evict the actual business-related data out of cache and will certainly kill your performance. Only use Prometheus with small amounts of data, it is not a suitable solution for anything else. A single metric in Prometheus is fast, no matter how many times you touch it. If you have 10k of them, you are destroying your application.
reminds me that while I did buy the ultimate version, I'm still running the community edition (and I don't miss any features)
Y
[removed]
How big is huge? My team has people using either eclipse or intellij and we have a huge monster legacy project on java 8 that both handle just fine. We also have tons of smaller projects we open at the same time and no problems there either. My experience with vs code for java on the other hand could be described as... finicky.
I'm trying to understand your intention on asking these questions. Even if they have enough profit, this is your main tool that you use to generate income for yourself. The question is "why not?"
have you increased the memory size that intellij uses in your settings?
[removed]
I've worked around this by treating a project as a working set and adding maven modules into the project. Granted I only have 3 distinct sets (mostly due to different code formatting requirements, ugh) so it's not too difficult to manage. Working sets and better per-module preferences are really the only features I miss from eclipse.
yes
You won't have problem in Java 8. Try anything above that.
Yes
Some programs like Spring Tools Suite and DBeaver look for a `jre` subdirectory next to the executable. You don't need to copy the JDK thoug, just use a softlink (use `mklink` on Windows).
Is iBatis still around? &amp;#x200B; You know, I was introduced to iBatis when I was doing a lot of work with [Hiberante and JPA](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Set-the-record-straight-on-the-JPA-and-Hibernate-debate), and I learned to really love it. A nice happy medium between an ORM tool and [JDBC](https://www.theserverside.com/video/JDBC-vs-ODBC-Whats-the-difference-between-these-APIs). It made sense, mapped nicely to my Java objects and allowed me to have fine grain control over database interactions. &amp;#x200B; I find on big databases ORM tools like Hibernate can be abused with eager loading and abusive mapping, and the whole thing grinds to a crawl. Of course, bad SQL programmers can make similar mistakes with [JDBC](https://www.theserverside.com/definition/Java-Database-Connectivity-JDBC). Programmers that know the database tends to be key.
I'd use straight [JDBC](https://www.theserverside.com/video/JDBC-in-Java-5-facts-to-know-before-you-begin)over [Hibernate and JPA](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Set-the-record-straight-on-the-JPA-and-Hibernate-debate), or at least, the Spring JDBC template if you're working with [Spring Boot](https://www.theserverside.com/video/Step-by-step-Spring-Boot-RESTful-web-services-example-in-Java). It gives you lots of fine grained control, and when things go wrong, it's easier to identify the problem.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You saved 10 min of my life, thanks ))
&gt;You mean that as of JDK 11, the JDK is, **for the first time ever**, 100% free and open source? I know you like to make this claim in just about every post on the subject but the fact is Java was open sourced by [Sun](https://en.wikipedia.org/wiki/OpenJDK). By 2008 less than 1% of the code was encumbered and by 2010 it was all replaced. What you are not saying when you post that "Oracle fully opensourced Java" is that what Oracle finally released were add-ons such as Flight Recorder and Mission Control. So while it is great that Oracle open sourced those, please stop denying the fact that the JDK was fully opensourced in 2010 by Sun before Oracle ever even purchased it.
James Gosling (inventor of Java) wrote some robotic boat control software using java -- [https://jrebel.com/rebellabs/vjug-write-up-wave-gliders-and-java-with-james-gosling/](https://jrebel.com/rebellabs/vjug-write-up-wave-gliders-and-java-with-james-gosling/) .
You are wrong on several important counts. First, some client-side components were not open sourced, and it is a fact that OpenJDK and Oracle/Sun's JDK were not interchangeable prior to JDK 11 (and some components that were crucial to Java at the time have still not been open sourced -- like the plugin and WebStart -- but they have been recently removed from the JDK). But perhaps most importantly, Sun didn't publish OpenJDK builds, and certainly did not encourage Java users to use OpenJDK, as Oracle does now; the JDK used by 99.99% of Java users was simply not free. JFR and Application CDS were not add-ons, but integral parts of the JDK (true, they came in through the merge with JRockit), and ZGC isn't an add-on either (although it was developed at Oracle). JDK 11 was the first JDK in history where the entire JDK became free, and Oracle published OpenJDK binaries, and encouraged use of OpenJDK builds as the default JDK.
Yeah Spring In Action is hot garbage... which is a shame, because if the examples were properly done, it would be a decent book.
Android is not Java, nor does it attempt or claim to be Java, period. It does not conform, even remotely, with any Java specification. I don't know how to gather statistics about plurality, but we can agree that while many Java libraries run on Android, a great many don't.
I wont say annotations are as bad as some developers claim them to be, they have their use cases. The issue with annotations is the overabuse of them, but doesnt mean its absolutely necessary to get rid of them per se. Static methods on the other hand, are code smells that we should just get rid of(with the exception of static main method). When you write static properties/methods, you are not using OOP. Its something that professional developers should avoid except for rate cases like prototyping.
IntelliJ has excellent Spring integration, so yeah, it's still useful.
&gt; Netbeans Eww... I've had bad experiences dealing with Netbeans projects... It's turned me off of their IDE entirely.
eww, ive had bad experience with jetbrains crap. turned me off their shit entirely.
I have a job where we have IntelliJ license available to any employee, just ask. I truly prefer VS Code, IntelliJ seems too overloaded with features I never use. Even from purely visual standpoint...
Even then, that $499 price is just for the first year, it goes down for renewals.
&gt;Sun didn't publish OpenJDK builds Correct, Sun did not publish OpenJDK builds and never intended to. Sun's philosophy was agree to the API compete on the implementation, that is where the use of passing the TCK to be able to call your implementation Java came from. But Sun made the TCK available at no charge to the Apache Harmony project, something Oracle wouldn't do, which is why Apache removed themselves from the Java EE/SE Executive Committee. &gt;still not been open sourced -- like the plugin and WebStart -- but they have been recently removed from the JDK Well, they still are not opensourced so that means by definition Oracle did not 100% open source Java. But instead you're claiming because they were simply removed from the JDK that counts. &gt;true, they came in through the merge of HotSpot and JRockit Correct, the components you are referring to as being 100% opensourced *for the first time* were not Java components that Sun developed so claiming that Sun didn't fully open source something that was not a part of the JDK at the time is a bit mis-leading. &gt;JDK 11 was the first JDK in history where the entire JDK was free So what you are doing is changing the definition of what the JDK is/was to include components that were not part of what Sun called the JDK and then claiming the JDK wasn't ever fully open sourced. What was fully open sourced by 2010 was a complete Java environment capable of being reproduced to the extent that it passed the TCK and other companies could compete on the builds. There was no test for Flight Recorder, there was no test for class data sharing and there was no test for WebStart either. So as of 2010 the JDK, as defined by the creators of Java, was fully open sourced. The pieces and parts added on by Oracle after the acquisition are now also open sourced
[Hyperskill.org](https://Hyperskill.org) might be one good solution for your team--theory, practice, and gamification elements.
I was in the same boat as you some months ago and the wsdl client from the ultimate edition saved my ass one day SoapUI was refusing to connect to a service because of some internal (soapui) error, while intellij didn't have any problems at all... so I decided to stick the to ultimate ed. I mean the community edition is more than capable even for full enterprise development, but the guys put up a good product and I think they deserve the money, they pay their devs and we get a better product, and lets be honest 80 dollars a year for a professional java developer is just beer money, even for someone like me living in a third worldish country.
I have been paying monthly subscription for all of their products for many years now and it’s totally worth it. It drops to £14/mo after the second year.
&gt; But Sun made the TCK available at no charge to the Apache Harmony project, something Oracle wouldn't do What changed wasn't just Sun's acquisition but also the nature of Apache Harmony, but I don't see what any of that has to do with this. I am not trying to claim Oracle is more or less "open" about Java. But it is a fact that JDK 11 was the first "default" JDK (i.e. the one made by Sun/Oracle and used by the vast majority of Java users) that was open source, and that fact has had *huge* implications on the ecosystem. &gt; Well, they still are not opensourced so that means by definition Oracle did not 100% open source Java. They're not part of the JDK or any Java spec. &gt; But instead you're claiming because they were simply removed from the JDK that counts. As far as I know, they were *never* part of the Java spec, but yeah, of course it counts. The entire JDK, including the recommended client-deployment solution (jlink and the upcoming [jpackage](https://jdk.java.net/jpackage/) are open source). &gt; so claiming that Sun didn't fully open source something that was not a part of the JDK at the time is a bit mis-leading. No, because they didn't even fully open source the rest. &gt; claiming the JDK wasn't ever fully open sourced. No. It just wasn't. &gt; What was fully open sourced by 2010 was a complete Java environment capable of being reproduced to the extent that it passed the TCK and other companies could compete on the builds. That's true, but what matters is that the resulting JDK -- if anyone was able to build it -- provided a different experience from the JDK everyone was using. &gt; The pieces and parts added on by Oracle after the acquisition are now also open sourced What matters to Java users is that for the first time ever, the default JDK is fully open sourced. What I said is accurate both in letter and in spirit, and what you're saying now is accurate as well. Both the creation of OpenJDK and the full open sourcing of JDK 11 were watershed moments -- perhaps in different ways -- in the history of open source Java.
Thanks for the link, but because 5 other colleagues with different operating systems and hardware have the same problem I think it is broken by design. I don't need a fancy progress bar but it needs over aminute to even show the loading screen, that is definately a design flaw. And it's not just the latest version, it has been like this for years.
What is the spec of your machine and how long does a cold start take?
I manage big projects with Java 11 without problems on Eclipse.
Have you discovered the REST Client in Intellij? I haven't used POSTMAN since finding it.
Yes, it's still worth. It's just best JVM IDE out there, have many tools for fullstacks and makes painfull tasks easy-peasy. I usually upgrade just when new GA is available and every single time for like 4 years straight JetBrains delivers functionalities i would never wish for, that changes my day-to-day work into pure development pleasure.
I think so. It does pretty much any language you want, not just Java.
I haven't compared Ultimate to Community in a while, but I will say that IntelliJ has some really, really nice features if your project is set up correctly to handle it. A personal favorite of mine is the persistence tools that are built in that allow the IntelliJ to warn you about errors in Hibernate query strings and allows autocompleting queries. That alone is worth the $50-$100 / year or whatever it is that IntelliJ costs. What really sucks if is the project isn't correctly set up for IntelliJ, because then fighting the IDE will quickly outweigh the benefits.
A better idea would be for the docker file to actually compile the code on its own using multi-stage builds. This means that anybody would be able to create the docker image without actually the need for a JDK installed locally.
I'm not sure why you're being downvoted. IntelliJ has pretty terrible performance at times. In large projects with a lot of JS/Typescript and Kotlin it gets really laggy. Even when no code is being edited so there shouldn't be any major indexing being done. I love IntelliJ but the performance really sucks IMO.
&gt;Microsoft just discontinued .NET Framework. Do you have any reference on that?
And thousands of people do not have it...
You can use Git Bash in place of the standard CMD terminal on Windows, too, which makes it a doddle
How much disabling of plugins for stuff that you don’t use have you done?
I use IntelliJ IDEA Ultimate because I have an academic subscription (ie free). I'm not sure if I would want to pay for it. I guess Eclipse would do the job as well :\\
Upvoted for saving me a click.
20s with one project before I can write. i7-6700k, Win 10, with a shitload of plugins. 6200U is not really a CPU for developers.
We use IntelliJ at Google.
Gradle, Jenkins, IDE based deployment. Devs is a broad term that includes UI people, artists, help builders, translators, business modelers, etc. Don't go calling people shit if they can't use console commands, it's short sighted.
The community edition is still better than eclipse IMO.
I'm able to work with multiple &gt;1 million LOC projects at a time in intellij without issue. Not sure what your definition of large is but I've truly never had an issue.
&gt; Ultimate edition that keeps this software alive. Jetbrains isn't really hurting for cash...
&gt; windows defender &amp;#x200B; Folks, check this out if you're having slow start-up times. Especially if nothing's changed in your environment lately but you feel like IDEA is loading slowly compared to your previous experience. I never used to have any problems with IDEA start-up time. I used to wonder what people were complaining about, but I always boot to the welcome screen and it was plenty fast (a few seconds). I just assumed people were auto-starting huge projects or running in corporate environments where their hardware was under-spec'ed or their anti-virus was over-aggressive. A few months ago, my IDEA boot times went to about 30 seconds... to get to the welcome screen. This thread reminded me of the recent Blog Jetbrains made about adding a feature to detect this problem: [https://blog.jetbrains.com/idea/2019/06/intellij-idea-2019-2-eap5-commit-from-local-changes-and-more/](https://blog.jetbrains.com/idea/2019/06/intellij-idea-2019-2-eap5-commit-from-local-changes-and-more/) Luckily, I stumbled across this thread this morning \*before\* I'd started IDEA for the day. So, I decided to go check. Yup - turning off Windows Defender "real time protection" took my boot-to-welcome screen from 30-ish seconds to 5-ish seconds. I haven't changed anything on my dev machine in a long time (it's a Windows 8.1 machine). I don't know if this is a change by Microsoft or a change by Jetbrains - but I'm positive it's not a change I made. Maybe all Jetbrains' fancy new embedded JVMs are triggering Defender to scan them when it didn't before? One of the reasons I never reported this was because it wasn't easily reproducible - if I restarted IDEA it would start up in &lt; 5 seconds. Turns out you can repro this by just frobbing Windows Defender real-time scan between re-starts of IDEA.
I used it the other day (forgot about it for quite a while) and got a message on the top bar that it's deprecated and to use the curl commands in the console. Or am I just high?
It looks like in your [submission](https://www.reddit.com/r/java/comments/c5yc8k/psa_intellij_idea_users_check_your_windows/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is why I really despise that all engineers have blogs now. You get this. Similar situation, I just ran across a spring Boot app that had their maximum header size set to 67mb. Problem with that is all Apache threads will have a preallocated 67mb array reserved for a large http header that never comes. And with those threads as "keep alive" connections so they are technically recyclable, the heap space was always 95% utilize with most objects getting promoted to old gen so they never got garbage collected. One of my junior engineers thought it would make a great blog post. It would've if he captured the story of the illusion of a memory leak, how the engineers traced it back to this simple property value and maybe an explanation of the Apache tomcat nd Apache coyote projects. Instead, it was 1000 words of don't ever ever ever use this property value which was not the lesson I wanted him to take away from this experience.
You know, as much as I love Java I don't think it is going to mature well for simple reasons like this.
&gt; Android is not Java, nor does it attempt or claim to be Java No need to rewrite history. Before the [lawsuit](https://en.m.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.), Android indeed wanted to be Java - they even tried to license the JDK from Sun and eventually built on Apache Harmony, a project that very explicitly *did* want to be Java. They only moved away from that objective once Oracle bought Sun and started doing what Oracle does.
Can you explain why? I have it but just use vscode anyway.
I only support open source software.
I've pretty much got only plugins I actively need. Enabling/disabling things makes a pretty minimal difference in my experience.
And gradle is ran via command line. It’s fine to develop in an IDE, I’m not expecting VIM, but if your devs don’t understand a command line, they aren’t very good. Knowing your way around a command line is essential. How are you going to ssh into a remote? Use docker? Pull a git repo into a server? It’s not shortsighted, it’s the truth.
https://betanews.com/2019/05/07/future-of-dotnet/
&gt; They only moved away from that objective once Oracle bought Sun and started doing what Oracle does. Now *that's* a rewriting of history. Google decided to do what Google does and not to license Java (or use the open source license) *well before* the acquisition. Google expected Sun to sue, but Sun just couldn't because by then it was already on its last legs.
Any Android phone will run Java applications. I don't even know if j2me is still being maintained.
This is stuff and nonsense. Use the best tool for the job. If you need to distribute your app with a Java implementation, choose one of the openjdk distributions hosed on Adopt.
I used to work on a project that was a few hundred MB of source on its own, plus some pretty hefty dependencies like Spring and Hibernate. The only thing I ever saw IntelliJ struggle with was large Groovy scripts (by large I mean in the 2k+ line range.) I'm not aware of any IDE that handles that very well though. I will note though that IntelliJ benefits hugely from a fast SSD and as much RAM as you can spare.
Also a personal license for their entire tool suite is only $250, and less if you find it on sale. If you're in it every day it pays for itself pretty quickly.
If that's all that's bugging you note that you can let your subscription lapse and your license for whatever the latest version at the time will be valid indefinitely. They got a lot of blowback about the subscription thing so they walked it back almost immediately.
no. it never did.
i'm kind of an old fashion guy and i guess touchscreens just aren't really my thing. i tried a smartphone before, believe me, but my fingers kept missing the virtual button on the screen, its very difficult for me to use. i don't understand why Oracle won't give me a list of mobile devices that are currently licensing java technology.
The REST client is deprecated but it's been replaced by [HTTP scratch documents](https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html). They're kind of like IPython notebooks if you're familiar with that.
I think it is worth it. There are so many optimizations and warnings that it provides that teach engineers how to improve their code and remove potential errors. The teaching comes from warnings showing less up to date engineers see when there are new language features that accomplish what they previously wrote, hopefully not just barely wrote. There are also a ton of shortcuts and code generation features that save tons of time. The increased productivity saves way more than the cost of the product but I’ve been using it since 2003 or 2004.
Hibernate too. You can set it up so you can run HQL queries as easily as regular SQL queries. And since you get regular Java objects back all the visualization stuff that you can use in the debugger also works.
They may not have that info and if they did it may very well be proprietary. Any Android phone can run Java if you are looking to build your own apps. Their may be some non touchscreen Android phones around. It's unlikely that you will find a newish phone that supports j2me. Since Android provides support for JavaSE.
I've got bad news: eventually you're going to miss the days when you could take a not-quick poop too. :B
I don't know if the student license is different, but the regular personal license never expires--you can keep using whatever was the latest version released at the the time your subscription ran out for as long as you like.
It also goes on sale about this time every year, so anyone on the fence should keep an eye out for that.
Yes.
I’m gonna try to give a very straight answer here. Putting @Component(“foo”) on top of Foo class (name in quotes is arbitrary but will be used to to find the bean) will allow spring to identify this class as a bean. This means that if you run a spring component scan that covers the package that this class is in, Spring will instantiate a single object of this class type. Whenever you Autowire some instance variable of class Foo that is named foo, Spring will populate foo with this single object that it instantiated (hence Singleton). Subsequent autowires (or other requests) will get a reference to the exact same Singleton object. Singleton is just default Spring behavior, you can change the bean’s scope for different behavior. Prototype scope will give you a newly instantiated object every time the bean is requested (usually by autowire, but beans can be requested by context.getBean(“foo”) as well or ref in app context xml). Hope this helps.
Switched from eclipse in 2015 and haven't looked back. Me and only one other person at my office use idea, and we pay for it ourselves because it's vastly superior thanks to its static code analysis alone. Only downside is our project structure is non standard, and I had to kludge together a run configuration that would work with the existing eclipse setup. And I have to always keep eclipse compatibility in mind when changing the class path.
I typically just don't check in IDE-specific project files. IntelliJ's Gradle import works really well, and if Eclipse's isn't as good... well, sucks to be an Eclipse user. :B
This is why, when I had a Dell Laptop for work, I did most of my tasks out of an Ubuntu VM. I'd rather take the VM performance hit (really not THAT big) than deal with the productivity hit on CMD over Bash. It also kept my Windows environment "clean" from any random crap I might have installed in the VM.
&gt; but not as fast as Java I know most people point to [TechEmpower](https://www.techempower.com/benchmarks/) or [The computer language benchmarks game](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/csharp.html) for microbenchmarks, but both of those have their issues. I'm really curious if you have more real-world like benchmarks to look at -- I know that the JVM has better GCs and does more optimizations than the .NET CLR, but it's still nice to see how this translates to in actual deployments.
And feels faster than eclipse or any other IDE and a has a bunch of stuff that makes developer's live easier.
Google Cloud Platform, Azure and AWS all provide managed Kubernetes services.
&gt; They got a lot of blowback about the subscription thing so they walked it back almost immediately. It used to be that software was released, and supported for more than just a year. Subscription software ruined that.
How long if you boot to welcome screen instead of auto-starting your project? "One project" could mean anything between a hello world application and the entire codebase for an application spanning millions of LoC across eleventy-seven different technology platforms.
&gt; Any Android phone will run Java applications. huh? android doesn't run java. it has no jvm.
JetBrain supports open source too. If you are a regular open source contributor then you might qualify for a free license: [https://www.jetbrains.com/community/opensource/](https://www.jetbrains.com/community/opensource/)
They replaced that one with a one that works off of any file you create named *.http. I would have never know about it if I hadn't read some change log. The deprecation message now reads: "This REST Client is depercated Try our new HTTP Client in the editor. Convert request to the new format."
Or in my case I’m really happy to have my employer pay for it.
I would look at ebay for those old phones. Nokia 3720 for example.
Wow. Thanks for sharing. I have always wanted to get into IOT but I do not have electrical and electronic background. I wonder how Long it will take for me to accumulate enough knowledge and then combine with some java programming knowledge to do some interesting and useful project that is good for human kind?
Oh, are we measuring that? About 6s. Those 20s are for a small project, but for intellij-community with millions of LoC too.
Yes. Period.
You may want to consider the all products ultimate edition to get WebStorm
I never ceased to use IDEA Ultimate since years ago... Why? \- Amazing Spring Support (also Grails!) - you can pretty much ⌘+Click (or Ctrl+Click) everything to trace their definition and usages. My experience with grails back then is IntelliJ flags some spring-related packages as "missing" even if they are not. \- It helps to detect AOP usages in a java file, this helped me discover an undocumented flow in our project \- Built-in DataGrip - this is personal.. i dont really want to switch between apps to do stuffs, switching between tabs is better, for me. \- HTTP client! This enabled me to document my REST endpoint's usages within the same proejct - no need to 3rd party apps like postman \- Generate test command creates a test file in its correct directory (available in community edition, iirc) \- (Configurable) duplicate code detection \- Paying for something i use everyday is worth it.
If you have a referentially transparent function, what would you say is the benefit of making it an virtual method instead of static?
Do they force you to use a particular development environment? That's usually up to the dev as to what tools they use.
I’ve been using https://jsoup.org/ for my projects
Jsoup for scraping. Selenium for automation.
I love it for Angular development. VS Code is the faster editor, but not a good IDE. Every time I use go to symbol it shows a loading indicator for a few seconds. Refactoring options are minimal. Duplicate code detection and the DB tools are also nice. Don't have to touch Oracle SQL Developer ever again.
/r/javahelp
If what you state were even remotely true, why would the ***native language*** for Android apps be **Java**? There are exactly two native languages for Android apps: Java and Kotlin. Both are JVM languages.
Where do I learn to use those programs?
Paging /u/JavanotJAVA ...
I believe there is a conversion process the ADK is doing (someone correct me if I'm wrong). I was able to decompile an APK I made with java back then, to smali.
In addition to other suggestions, (on ms windows os) I've used a (dos) batch file to point at a known java.exe and the jar I intend to run. I put the below text in a file with extension bat, mark it executable, and put a shortcut to the bat file in a convenient location. `C:` `cd where\the\jar\is` `C:\where\the\jre\is\bin\java.exe -jar desiredProgram.jar`
My open project results, on the project outlined here - probably about 70K lines of code all-told: [https://www.reddit.com/r/java/comments/by2ow0/do\_you\_use\_your\_java\_ide\_for\_other\_languages/eqc70gu?utm\_source=share&amp;utm\_medium=web2x](https://www.reddit.com/r/java/comments/by2ow0/do_you_use_your_java_ide_for_other_languages/eqc70gu?utm_source=share&amp;utm_medium=web2x) It takes about 10 seconds from welcome screen to being able to edit an open file. For another 10 seconds after that IDEA will be doing some scanning in the background, but that won't affect much. Desktop is a fairly old rig Win 8.1, i7 4770K, Samsung 840 PRO SSD.
https://en.m.wikipedia.org/wiki/Android_software_development
Bad bot.
Yeah, that is exactly my point: it sucks for thin notebooks which till 2years ago mostly came with two physical cores, even in 2000dollar Lenovos. But still: Visual Studio Code needs 2 seconds to boot (60 times faster); disabling AV is a security issue.
It's worth it for the database integration alone.
I don't remember it ever not having all the menus and gutters and sidebars. But I think under the help or the window menu you can basically search for any of the commands or features that are available easily. In fact there's some kind of shortcut that pops up a little surf thing you type in whatever you want to do and if your action is found just hitting enter either enable some IDE setting or disables it etc
What do people see in VSCode? It doesn’t compare to any of the major IDEs.
Eclipse is very fast these days, much faster than IntelliJ.
Wut? Of course Google released before the acquisition, but when they released they very much talked about “developing with Java”. They wanted people to think they could use Java on it, whether or not they had a license. They only started emphasizing differences years later, when Oracle started acting litigious. The fact that they wanted to be Java without paying for the privilege is why they lost the case, after all.
Gona say yes... for me... i just want on IDE
While Android apps are often written in Java language and then converted to a proprietary format, the Android platform does not *run* Java as defined by the Java specification which consists of far more than the language itself. Quite a few libraries written in Java intended for running on the JVM don't run on Android either.
Micronaut if you are doing web services, then skip Spring Boot :)
thank you! you're right there are indeed android phones that comes with keypad, like the blackberry KEY phones and i just found out that they can run JAVA games with a JAVA loader and the keypad on the phone will work with JAVA games, i'm super happy right now! &amp;#x200B; thanks for all your help!
I use it in the intelliJ 'terminal' tab and it nearly makes windows tolerable for development. People go on about powershell, but it's just not for me
Wait. HQL has always seemed more difficult for me than native SQL. How do you do it in IntelliJ?
Ratpack?
Only gets laggy when it runs out of memory in my experience and the initial memory settings are pretty low
There's a Nyan cat progress bar plugin, need I say more?
I never used beyond some experiements and reaching up the conclusion that its shortcuts require more fingers than either Eclipse or Netbeans, and on the same machine it performs worse with it continuous integration and lack of incremental compilation. So it never impressed me to actually buy it.
I don't know why. Maybe because it's meant as an editor for scripting projects. As performance quickly degrades the larger the projects, I also suspect the Electron crap just unable to keep up. But thats my bias.
My big projects work fine in IntelliJ and its manageable in Eclipse. VSCode just doesn't handle it well.
On Linux , the theme works brilliantly. I have the default dark theme on Ubuntu and set Eclipse to it's default dark theme and it's excellent.
5M source code files. Indexing takes ages, switching branch is painful.
Intellij is only as goods as it is sue to Eclipse always snapping at its heals. Competition is good for all of us.
Interestng. How do you imagine the "funding from Google" works exactly?
Craig Larman - Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development
I can recall plenty of instances long ago of buying a software license that was only good for that current major release - once a new major release comes out you’d have to pay again (though sometimes not the full price). This is not a new concept that started with subscription pricing.
How do you use it?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Nice try, Microsoft.
But the extract method of IntelliJ is much more capable. I code mostly by refactoring - avoids most typing, and is a great experience.
It’s worth it every penny, but unfortunately it’s also quite sluggish. JDK is partly to blame, but I guess their code is not optimized enough. They have their custom runtime, and hopefully one day they can tweak it to use Mantle and Metal to improve the performance of their rendering pipeline. When Fibers are added to Java, it might allow them to make it even less sluggish. Graal’s Native Image might help too. TL;DR: other than jittery performance and sluggishness it’s a masterpiece.
What are your PC specs?
Okay, thanks for your answers, those were really helpful in understanding the possibilities in regards of the distributions and versions.
This is partially due to anti virus and employee surveillance software installed on corporate PCs. At one of my previous jobs, our company already had Sophos installed on our machines and that was already bad enough. Then they installed something called Forcepoint that monitored drag and drop, https, every disk activity, key logging, random screen captures, etc. That turned a relatively pleasant job into a nightmare where writing one line of code could freeze your computer multiple times. I think there was a mule inside the company that was sharing confidential information about customers to competitors. Anyway, Java is relatively slow in general, but these security monitoring software turn a supercomputer into something that mimics the performance of 16Ghz 386 Pentium with 512KB of RAM.
Thank you and also u/pron98, this is exactly what I wanted to know about the risk of missing TCK.
Thanks! This is also very useful!
I run arch linux at work. nvme disk, 32Gb DDR4, dedicated nvidia gpu, i7 CPU, no antivirus or anything like that. We have to use sophos on windows machines, but I don't for the reason you mentioned, and because it's from MS.
No, because Jsoup is useless on any modern website. It’s an HTML parser, and won’t handle the API calls of the modern webpage. Selenium is the better choice here.
Have you tweaked the VM settings? https://intellij-support.jetbrains.com/hc/en-us/articles/206544869-Configuring-JVM-options-and-platform-properties That could help. Also make sure that you use the JetBrains runtime. But I’m not surprised at all that it’s slow for such a big project. IDEA definitely needs some serious optimization. To quote Linus: &gt; The second major issue hardware issue looms a little further over the horizon, Torvalds said. Moore’s Law has guaranteed a doubling of hardware performance every 18 months for decades. But as processor vendors approach the limits of Moore’s Law, many developers will need to reoptimize their code to continue achieving increased performance. In many cases, that requirement will be a shock to many development teams that have counted on those performance improvements to make up for inefficient coding processes, he said.
* spring support * other framework and libs support :) (jpa, web, jsp etc) * java refactoring * code analysis * integrated tools (git, database, uml, task tracker integration) * hotkey usage and more and more ...
I have mine set fairly high, makes very little difference except for the indexing.
Yup, I think so. To me, it's one solution to all my development requirements. I code in Java, JavaScript, typescript, python, sometimes PHP (for various clients) and use a variety of databases.. idea handles all my needs satisfactorily. Otherwise I would have to look for specific and different solutions to each of the technologies.
Sorry, I guess I should have added `/s`. I have nothing against static methods, I think the author has taken his love of OO way too far.
They wanted to enjoy the Java ecosystem of developers and tools without actually being Java. Java has a specification (or, rather, several); to be Java you must conform to one of those. Not only does Android not conform with any Java specification and is therefore not Java, it never *wanted* to; just to be similar enough to gain developers and enough of the ecosystem to drastically reduce costs. That it never even attempted to be compatible is [one of the reasons the court ruled against fair use](https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.#Appeals_Court_and_finding_of_non-fair-use).
I did read your comment with the implied "/s" (but now I see way I said it is ambiguous as well). My point is, don't shame the guy for trying to deliver a static/annotation-free framework. Yes, we do understand extremism is harmful, but from a messaging standpoint, it helps drive a point across "hey what if I couldn't use any statics or annotations?" You may find it crazy, and maybe it is, but we need the crazy ones to show us new ways of doing old things. It's how we progress.
Language and platform are two entirely different things. Can Android run software written in Java? Absolutely. Can it run Java SE or Java ME apps? Not at all. Using Java for development is just a way to reuse existing Java libraries and tools, but that doesn't apply to applications and midlets.
5 year old macbook pro, 16gb i5 with ssd.
That's a good point. I wasn't really trying to shame him though, just poking some fun at him for using a static method when he says they're evil. I guess the guy isn't hurting anyone, just doing his thing.
I don't have that luxury. If I start harming the eclipse compatability, I'll be forced to go back to eclipse. Plus, we're not using gradle or maven anyhow.
&gt;What matters to Java users is that for the first time ever, the default JDK is fully open sourced. Let's make this simple, how about you list out, of the JDK as it was defined in 2010 by Sun, which components of that JDK were not open sourced by Sun that were subsequently open sourced by Oracle.
It's not *components*; the JDK was *different*. I don't remember all the pieces that were different (I could find out, but it seems like a waste of time), except that many of them were in client technologies (graphics pipelines and such). *The* JDK that almost everyone was using and the JDK you got from building OpenJDK were not functionally the same.
The *components* that were part of the JDK at the time and were not open sourced were the plugin and Webstart. But it's not about *components*; the JDK was *different*. I don't remember all the pieces that were different (I could find out, but it seems like a waste of time), except that many of them were in client technologies (graphics pipelines and such). *The* JDK that almost everyone was using and the JDK you got from building OpenJDK were not functionally the same. Of course, perhaps the biggest source of the issue was that there wasn't even a JDK at all. JDK 7, the one that started OpenJDK, was only released in 2011. From the time OpenJDK was announced (based on the JDK 7 codebase) to the time Sun was acquired, there were no public releases of JDK 7. For JDK 6, OpenJDK was quite different. [Here is a relevant blog post from that time.](https://web.archive.org/web/20110820044416/http://weblogs.java.net/blog/robogeek/archive/2009/01/it_will_be_open.html)
i think intellij platform need some serious lifting, and maybe a rewrite, for the platform and UI part only just and example: writting plugins for intellij is a fucking huge mess, bloated and slow piece of shit, compared to writing plugins for vscode, it is night and day And the forced use of the piece of bloated shit software that is gradle is a huge pain in the ass
I demand my employer to pay for it. And also for decent hardware.
And as you pointed out Oracle also did not open source the plugins or WebStart, you simply dropped them. For the plugins, by 2010 there were open source alternatives to them so there was no need for Sun to worry about that. The graphics pipeline and SNMP were the last pieces to be open sourced but were by 2010 So we're back to my original complaint that you regularly state that the JDK was not open sourced until Oracle did it, which I believe I have shown just is not true. Sun had completed open sourcing what it defined as Java/JDK by 2010. Now if you want to make the statement that for the first time the builds between the open source code and non-open source code are the same (because they are using the same code base), there is validity to that claim. &gt;the one that started OpenJDK, was only released in 2011 In 2007 RedHat started the IcedTea project that began as the OpenJDK/GNU Classpath hybrid that bootstrapped OpenJDK. In the same year, RedHat signed the Sun Contributor Agreement and OpenJDK Community TCK license. IcedTea 6 was directly based on the OpenJDK6 sources from Sun, not the OpenJDK7. In 2008 OpenJDK on Fedora built using IcedTea 6 passed all Java 6 compatibility tests and in 2009 Ubuntu annoced the same. So OpenJDK was around prior to 7, it was only at release 7 that it started to move into the role of the reference implementation.
In my opinion, the Jetbrains project indexing is way better. I feel like refactoring and navigating code is better on large java projects. &amp;#x200B; At the same time, I've been using Jetbrains for far longer than I've been using VS Code so some of that might just be that I'm better at using IDEA.
I recently ran into an issue in IDEA Ultimate and was super impressed with how quickly Jetbrains had a workaround for me. I run a small software company (3 people, running for 2 years) so their transparent startup discount alongside good support has made it really worthwhile for me. This strikes me as the main reason to favour IDEA Ultimate over IDEA Community. &amp;#x200B; In terms of strict development, I normally work in projects with around 10-20 kloc and have found that I'm much faster at exploring the codebase, refactoring and generally debugging with IDEA than I am with VS Code. I suspect the indexing offered is much more sophisticated than VS Code but don't have hard evidence here.
&gt; So we're back to my original complaint that you regularly state that the JDK was not open sourced until Oracle did it, which I believe I have shown just is not true. No, it is very much true. JDK 11 was the first "the" JDK in history to be fully open source. &gt; So OpenJDK was around prior to 7, it was only at release 7 that it started to move into the role of the reference implementation. JDK 7 started in 2006. Anyway, whatever OpenJDK was prior to JDK 11, it wasn't the same as the JDK nearly everyone was using.
- ctrl+f j2me - no results - ctrl+f jvm - development tools only lol. you're confusing the language you write code in (java or kotlin) with what's actually running in there. on Android, when you're writing apps, the java code that you write gets transformed into Dalvik bytecode. It used to be that a Dalvik VM was running said code, but in newer Android versions (since 4.4) they use Android Runtime (ART). At no point in this process you have Java, the JVM or anything Oracle related running on the phone, as we know from the lawsuit. TLDR: You write code in java language, gets transformed into Dalvik bytecode that runs on ART on the actual phone. No j2me, no JVM, no Oracle.
YMMV but I had this same problem (takes forever to even show the splash screen and very long startups), and custom themes were the problem. Uninstalling the material theme fixed it.
&gt;Except there was no JDK in 2010. Sorry but this is completely garbage, there has been a JDK since Java 1.0 release in 1996. The JDK and JRE were separate installs but it most absolutely existed. To even make the claim you just made is beyond laughable. Let's be absolutely clear - Oracle did not invent the JDK with Java 11 and Oracle was not the company that first fully open sourced what the entire Java community recognizes as the JDK. All Oracle did was drop the JRE as a separate download with Java 11. &gt;By the time JDK 7 was released in late 2011 it had diverged again (due to JavaFX). JavaFX was not a divergence in any shape, manner or form. JavaFX was an internal project to create a replacement for Swing, much as Swing started out as an internal project to replace the AWT. Swing was initially a separate download that was later bundled with the JRE and JDK installers, and was one of the first extension introduced as the javax. packaging scheme. JavaFX was another addition to the tool suite, not a divergence. &gt;JDK 7 started development in 2006 and OpenJDK was first based on that codebase. As I pointed out, Sun provided OpenJDK6 source which RedHat based their build on. OpenJDK7 was not the first, 6 was, OpenJDK7 was just more polished. But IcedTea6 proved that 6 was open sourced completely enough to be able to pass the TCK. &gt;In the entire history of Java, the first time the JDK everyone was using -- the one distributed by Sun and then Oracle -- was fully open source was JDK 11. You're again changing the topic, the issue wasn't when did the rest of the world catch up with who were already using OpenJDK such as users of Fedora or Ubuntu running OpenJDK/IcedTea6 or Debian Lenny (that accepted OpenJDK 6 in 2008) to all now be using OpenJDK, the issue is you claiming this is the first time it was 100% open sourced. And that is just not true.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This, and yaml linter are the only Ultimate features I use. I'd like to explore more on the ultimate features at some point.
So setting this up is a little bit specific to your project, but here is the official way: https://www.jetbrains.com/help/idea/enabling-hibernate-support.html Once you get it working there will be a "Persistence" tab on the same side of the window your "Project" tab is. From there you can open a console that will let you run arbitrary HQL commands.
Yes. I used CE and upgraded. It’s great and they deserve the money. Productivity and better code is what I am after. Some like to prove the they can do it the hard way. I don’t hire them.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;WebStorm Why would you want Webstorm when you're already subscribed to IntelliJ IDEA Ultimate? Isn't IntelliJ IDEA Ultimate inclusive of all Webstorm features?
Ah, you should give it a look. Gradle is maybe one of the best build tools I've ever used. You don't even necessarily need to write any build scripts, since by default it will assume sensible things like that your code is in ./src/main/{language}, your tests are in ./src/test, and so on. Naturally you can change that if you need to but it's usually easier on everyone to just stick to the normal project structure.
&gt; Sorry but this is completely garbage, there has been a JDK since Java 1.0 release in 1996. Come on. I meant there was no JDK *released* in 2010. In particular, the JDK 7 which *maybe* would have been fully open (modulo deployment technologies) was never released. &gt; JavaFX was not a divergence in any shape, manner or form. The JDK 7 which was eventually released contained JavaFX, and again was substantially different from OpenJDK. &gt; penJDK7 was not the first, 6 was, OpenJDK7 was just more polished. No, OpenJDK 7 came first; OpenJDK 6, later. &gt; But IcedTea6 proved that 6 was open sourced completely enough to be able to pass the TCK. Again, there were *other* open source JDKs, but *the* JDK was never fully open until 11. &gt; the issue wasn't when did the rest of the world catch up with who You're right, it isn't. What happened in JDK 11 wasn't that the world caught up with the different OpenJDK, but that *the* JDK was, for the first time ever, fully open, and so OpenJDK caught up with the JDK. &gt; the issue is you claiming this is the first time it was 100% open sourced. And that is just not true. It is absolutely, 100%, true. Unless you can point me to an earlier version of *the* JDK that was entirely open.
Oh, indeed. That said this stuff used to be *way* more expensive. I recall paying hundreds of dollars just for a C/C++ compiler.
You can set Hibernate to show you in the logs the HQL queries that is about to run. One does not simply write advanced HQL scripts from scratch.
I think we are needlessly arguing on what "wanting to be java" means. You have a narrow definition of it (must pass TCK etc), I have an expansive one (uses certain syntax and conventions so that developers believe they are working with Java). I think we both agree that Google definitely wanted the latter at all times, whereas on the former they flipped for commercial reasons.
Well, JavaDocs are supposed to be helpful in your IDE, while coding (hover your mouse over a method or a class and immediately see it). It's not so helpful as a generated website, indeed...
Android doesn't and cannot claim to be Java because Java is a name with a very specific definition (in the context of software; not talking about the island), and because it is a trademark, that definition is enforceable. Android developers may be using the Java *language* to program Android, but that doesn't make Android into a Java platform. I don't know what most of them believe because I haven't conducted a survey, but there is just one definition of what Java (the software platform, not the island) means.
To be fair, there is a Java version of Getting Started on that site: [https://avro.apache.org/docs/current/gettingstartedjava.html](https://avro.apache.org/docs/current/gettingstartedjava.html)
Avro does have documentation other than just the Java API: https://avro.apache.org/docs/current/ and specifically https://avro.apache.org/docs/current/gettingstartedjava.html Having test classes in the public API documentation is plain wrong of course. They likely need to change the excluded packages (https://github.com/apache/avro/blob/master/lang/java/pom.xml#L212) or something else in their Maven configuration.
Yes, package in archlinux already does it
Any advice on setting up TypeScript with React? Plugins/settings or articles?
&gt; JavaDocs are supposed to be helpful in your IDE That's what they ended up being, not what they were meant for. Originally, they were supposed to be a faster way to generate nice-looking documentation from sources. If a Javadoc is well-formatted (including detailed intros etc etc), they work perfectly fine as single source of documentation.
It does provide some snippets, but not general info how to use library, as C docs do.
Tell that to Apache Kafka, where one release version documented consumers and a different release version documented producers
I'm very aware of gradle and have used it before, but I don't have discression about just up ending the way our project is built. It's a very large legacy application using ant, and in the best case, I'd have to get all the eclipse users to install and learn gradle just because. There are many higher priority things that should be done before rewriting our build scripts.
Funny how this strikes a note with me as well... JavaDoc fucking worthless. The syntax is horrible, outdated, and it completely misses the point. I would rather download the source, load it up in my IDE and explore the source code rather than looking at another JavaDoc website. Give me some *EXAMPLES*. Maybe if the website generator made something that looks newer than 1992 I might be willing to look through that pile of shit, but ugh. It's just not worth it, and has never been. If you don't have access to the source, well --- something is better than nothing I guess...
At least Kafka docs give you [decent entrypoint for documentation](https://kafka.apache.org/22/documentation.html#producerapi). What's really fucked in Kafka documentation is the [fixed-width configuration docs.](https://kafka.apache.org/22/documentation.html#configuration) You have one column where there are 700 characters, and another where there is one. And there's shitton Kafka articles on internet.
&gt;Maybe if the website generator made something that looks newer than 1992 I might be willing to look through that pile of shit, but ugh. It's just not worth it, and has never been. Moreso, the extremely outdated iframe format, where if you middle click one link you get rid of the class index.
&gt; Moreso, the extremely outdated iframe format, where if you middle click one link you get rid of the class index. UGH. yes.
Shipilev is a real expert on Java.
Another gripe with this site and javadocs: googling class from this article [links to outdated lib version.](https://imgur.com/Lg2IBJQ)
&gt; I think there is confusion around what OpenJDK is. There is OpenJDK “the project” and there is OpenJDK “the distribution”. The confusing part about the distribution is that there is no golden binary for OpenJDK. OpenJDK site is deliberately free of binaries. This is absolutely true. However, some distributions are more "equal" than others in the following sense: they are the "vanilla" distributions used by the OpenJDK project developers, and those are the distributions you can report bugs against (you can't download, say, Adopt or Coretto, find a bug and file it against OpenJDK at [bugs.java.com](https://bugs.java.com/) (or [bugs.openjdk.java.net](https://bugs.openjdk.java.net/), if you're an author) -- they have to first be reported to the distribution maker who will then reproduce them against the semi-official builds. Those distributions are the ones provided by the respective OpenJDK project leads, and they are: * For the current JDK version: the OpenJDK builds by Oracle at [jdk.java.net](http://jdk.java.net) (also the Oracle JDK builds, as they're used by the OpenJDK developers, too). * For 8u and 11u: the "upstream" OpenJDK 8/11u by Red Hat hosted at [adoptopenjdk.net/upstream](https://adoptopenjdk.net/upstream) (and probably the other Red Hat builds as well).
Are you guys using IntelliJ community and not using thymeleaf? The only reason I'm on Eclipse is because it supports Thymeleaf for free. Thymeleaf is only supported by IntelliJ ultimate, and it's way too expensive for me for personal projects.
With VSCode, Java is not a first class citizen (relying on nothing but plugins for support). With IntelliJ IDEA, Java is a first class citizen and the plugins have more to do with other aspects such as Scala support. While it's great that VSCode is free, works on all three major OSes, and generally runs well, it requires so much setup to get \_just right\_ with respect to Java development, especially for any kind of large project, and especially when those large projects run on Spring. On-boarding developers in that kind of environment just isn't practical. VSCode is fine for javascript-based projects since that is their target audience it seems. IntelliJ IDEA (and especially Ultimate) is almost turn-key at this point. Also, because we need Spring support, we need Ultimate (as compared to Community): [https://www.jetbrains.com/idea/features/editions\_comparison\_matrix.html](https://www.jetbrains.com/idea/features/editions_comparison_matrix.html) That, to me, is my justification.
&gt;unless you can point out which earlier version of the JDK was entirely open Well, considering you weren't able to give a valid answer to the simple question &gt;what didn't Sun open source back in 2008-2010 that Oracle subsequently did open source I'd say that Java 6 &amp; Java 7 fit the bill.
&gt; Well, considering you weren't able to give a valid answer to the simple question What question? &gt; I'd say that Java 6 &amp; Java 7 fit the bill. Neither *the* JDK 7 nor JDK 6 were fully open source. Both JDK 6 and 7 were different in their code from OpenJDK 6 and 7, and, most importantly, they were different functionally (and were missing some of the JDK's components). The first "the" JDK in history to be fully open was 11. That is a simple fact.
Same here. I've been on big projects that used Hibernate / JPA and it always caused more problems than it solved as the project got more complex. Too many inexperienced devs just don't have the knowledge to avoid pulling in huge graphs of tables when they only need a single id. Updating is a pain in the ass trying to figure out which parts of the object graph will be saved. Old school JDBC is obviously awful to use, but Spring JdbcTemplate and RowMappers and declarative @Transactions are the sweet spot, IMO.
&gt; Sat 27 July 2019 Wow, a time traveller!
Can you give me an example of what you're doing? Renaming classes or vars or something else?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What exactly is so good about the Spring integration? Usually on my Spring projects it will just keep warning me that I have unmapped contexts. OK so then I go into the Spring dialog and add my contexts and property files. And then.. all it does is give me a little graph of my beans which isn't really helpful. Am I missing something?
It looks like in your [submission](https://www.reddit.com/r/java/comments/c668ig/a_good_performance_monitoring_tool_that_allows/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You don't have to use gradle. Noone is forcing you. You can make a working plugin through the project wizard in a few clicks.
No Java lib author would consider a Javadoc as sufficient documentation. A Javadoc is API documentation, which is for *reference*, not for *introduction* or *usage*. The Avro documentation includes a [Getting Started](http://avro.apache.org/docs/current/gettingstartedjava.html) guide which tells you how to use the API. Any Java library worth its salt would provide at least this kind of documentation, especially those hosted on Github which has a README page for this purpose, such as the documentation for [Jackson](https://github.com/FasterXML/jackson).
Thanks ! This one working.
Jetbrains doesn't make compilers though.
Avro is open source. If you aren't satisfied with the docs, work to fix the problem. Is a library with more/better docs more likely to be used? Sure, but unless the goal is a large user base which will undoubtedly view themselves entitled to support (see this thread), the incentive might not be there to improve the situation.
Bash that comes with the Git installer is not good enough?
It’s OK, but I use the terminal in the IDE a lot... It’s just easier in Linux. Also, as I said, there’s the benefit of sand-boxing my dev environment off from everything else (e-mail and whatnot). If I need a new dev environment, it’s easy to start over from a fresh image.
Is avro opensource?
I don't think auto generated API documentation from source comments and documents written by a publications writer are comparable. So you're comparing apples and oranges. A well done project will have both.
You can probably setup bash as a terminal in the IDE, but sure.
OpenJDK6, based on source provided by Sun, passed the TCK, was available in the Debian repositories. By Debian definition that requires no proprietary code otherwise it is hosted in the non-free repos. So yes OpenJDK6 was compatible with Java 6 and fully open sourced. That meant that those who insist only on open source systems were fully able to run Java 6 applications because Sun made it possible.
That's true. There were some open source JDKs that were substantially different from *the* JDK. *The* JDK was first fully open sourced in JDK 11.
That is very interesting and I was unaware of this. The place where I used to download my JDK from, only offers a maintained JDK 12, not 11 - which is the lts release. Now I begin to understand why Amazon is working on Coretto. Very interesting...
Besides being able to graph your dependencies, you can navigate from your component to where it's defined (in either java or xml config). If you have typesafe configuration properties, you can navigate between your properties files and their respective configuration classes. The integration is so seamless that it's really easy to take it for granted, until you don't have it. If you've ever had to find where a bean is defined when you have 12 xml contexts that get read in to your app inside 12 different jar files... man that's sucks. Being able to just click the bean gutter icon, and navigate directly to the place in the context file is amazing.
The current subscription system is way better than the original one. Before that, you would buy it, the next week a new major version was released and you could not use it.
Better tasting shit is still shit.
Just a couple of things: 1. Note that the Adopt website contains both Adopt builds and the Red Hat "upstream" builds. Only the latter have the same semi-official status as the Oracle builds on jdk.java.net 2. Unless you have a good reason not to, you should follow the default update path and use the current JDK version (12). This is designed as the easier, cheaper update path than LTS. If you're unclear about what LTS means, or if you assume you know what it means because you think it's similar to LTS in other projects or that it's similar to the old release models (neither of those is true) -- make sure you learn about the two new release models, and that you choose the nondefault path consciously.
Oh, forgive me, I didn't mean to imply they did, I was just using that as a frame of reference.
&gt; No Java lib author would consider a Javadoc as sufficient documentation. [Some devs do though](https://www.reddit.com/r/java/comments/auczwq/_/ehdtqgh)...
[Yes](https://github.com/apache/avro)
I'm sorry, but I'm gonna have to agree with u/p_pistol on this one. Well written javadocs are a complete documentation for a project. And I would prefer them over others, as they do not lie since it is generated from the source, whereas other written documentation become out of date and can lie.
Um. \&gt; You can't download, say, Adopt or Coretto, find a bug and file it against OpenJDK -- you have to first report the bug to the distribution Who would prevent me from submitting the bug against OpenJDK right away? In fact, Corretto's FAQ explicitly says: "If you have an issue related to OpenJDK, please open an issue with the upstream OpenJDK project". It is pretty much the same as in Linux ecosystem: you can submit the bug to \*either\* your distro bugtracker or to upstream project bugtracker, mentioning the distribution you are running. Sure, maintainers may then figure out it is downstream/upstream bug and (ask to) re-route accordingly. \&gt; They are the "vanilla" distributions used by the OpenJDK project developers Okay, but then later: \&gt; For the current JDK version: the OpenJDK builds by Oracle at jdk.java.net (also the Oracle JDK builds, as they're used by the OpenJDK developers, too). I guess we have different definitions of "vanilla" here. In my definition, "vanilla" is something that is built from the unmodified source with default configuration. Upstream OpenJDK 8u/11u builds at [adoptopenjdk.net/upstream](https://adoptopenjdk.net/upstream) are true "vanilla": they are built by Red Hat, but are carefully free of any downstream additions, patches, build config changes. Here is the counter-example for Oracle-provided OpenJDK builds: they do not include Shenandoah, [explicitly disabling it during build](https://bugs.openjdk.java.net/browse/JDK-8215030), and that alas disqualifies them from being "vanilla".
I don't know if OpenJDK contributors will outright refuse to look at any bug reported against a downstream build, but downstream maintainers [are encouraged](https://mail.openjdk.java.net/pipermail/adoption-discuss/2018-December/001858.html) *not* to tell their users to report OpenJDK bugs, and that it is the downstream maintainers responsibility to reproduce the bug against one of those builds and only then submit it.
That's the thing, there is no "official" build of OpenJDK, so if you cannot really enforce the policy that only bugs in "official" builds are eligible for OpenJDK bugtracker. Oracle JDK is no more "official" OpenJDK build than any other downstream OpenJDK build here. Yes, I can get that [bugreport.java.com](https://bugreport.java.com) is the site for submitting the bugs against Oracle JDK. But [bugs.openjdk.java.net](https://bugs.openjdk.java.net) is not Oracle JDK -only, and sure you can submit the bugs reproducible on OpenJDK builds there (heck, people submit bugs they find on their own fastdebug builds!).
Most devs find writing documentation to be boring work so it just doesn’t happen. Also it stales quickly sometimes so it’s a never ending chore. Mostly all i want is a high level purpose for the project and some cookbook samples. Cracking open the project in a modern ide and clicking around is far better than reading the flat javadoc.
That's why I speak of "semi-official." This status stems from a simple reason: some of the downstream maintainers contribute little if at all to OpenJDK, and the people who contribute bug fixes use certain builds. As David Says, if you submit a bug against some other build, the contributors are likely to first ask you to reproduce against a build they know and use.
Good Java APIs will also have package-info.java files with javadocs that give information on the purpose and use of a package and its classes. For example, [java.lang](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/package-summary.html). So even if an API doesn't have a separate overview page for the whole API, that may be because it is organized on a module/package/class basis.
Interesting read. 4 of the 5 main issues are based on the JVM optimizing away things, it always amazes me how much the JVM is able to optimize away.
Javadocs are by no means a *complete* documentation for a project. By their very nature, being tied to the code, Javadocs are highly contextual. You have to know what you are looking for. Other forms of documentation are at a higher level, from a basic getting started and tour of the API to higher level architectural discussions which put the API usage in context. For example, the Spring Integration reference manual spends an entire chapter talking about [message aggregation](https://docs.spring.io/spring-integration/docs/current/reference/html/#aggregator), which involves a lot of different classes working together to implement message aggregation behavior. The Javadoc for the [base class of message aggregators ](https://docs.spring.io/spring-integration/api/index.html) spends a paragraph about it, but you would have to know what the base class was in order to find that documentation. Furthermore, Javadocs aren't generated from source but from comments, which drift as much as other documentation, and must be maintained to prevent it from becoming out of date. The larger the document, the less likely people are going to bother keeping it up to date. Can you imagine keeping [the Javadoc package summary for streams](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html) up to date?
"Semi-official" is a weird misnomer. The build is either official, or it is not. I frankly believe that even suggesting that upstream maintainers would summarily reject or de-prioritize bugs reported against "not theirs" distribution is the community-limiting idea. Ditto for bugs from users who end up running builds from those vendors who "contribute little if at all". Tell you what, as the OpenJDK developer, I would reproduce the bug in my local environment anyway, regardless of what downstream distro it was found in. Because the bug is usually reported against *OpenJDK*, and it was just *found* on a particular build -- either it is local self-build with/without patches, or any other downstream build, etc. That is just the part of the environment, and yes, it might not be the same build as developers run, but this does not change much.
You are a true gentleman! :) BTW, this is not the only "community limiting" problem -- we have ways to go -- but some cool stuff on that front is getting done, e.g. Project Skara.
Nice, shipilev vs pron98. Grabs proverbial popcorn.
Isn't it nice? Oracle is playing RedHat with Oracle Linux and RedHat is playing Oracle with free LTS for 8u and 11u.
It is certainly reasonable to *ask* downstreams to wrangle the bugs, or even redo/resubmit the higher quality ones upstream. At the same time, it would be awkward to *require* that submitted bugs are reproduced on whatever the particular maintainer believes is the "official" build. Again, it is certainly reasonable for maintainers to *ask* submitters to reproduce on some commonly used builds as the part of producing a high-quality bug report.
I don't think there is such a strong requirement. However, downstream build maintainers (who are not fixing the bugs reported against their builds) are encouraged to ask their users to report bugs *to them*.
But isn't this a typical case where Oracle wants to have its cake and eat it too? It's like with Graal and project Metropolis. Open source, OpenJDK and the other usual blah blah what nots. You absolutely must embrace and switch to Graal but only to the less optimizing version... WTF?
Mockito javadoc also has a good starting point right there: https://static.javadoc.io/org.mockito/mockito-core/2.28.2/org/mockito/Mockito.html I always like this when I have to jump back into unit tests which use this library. I don't think there has to be a README, but when you're on GitHub it's good habit to provide one. If the project has a good first javadoc page I'm perfectly fine if the README just links to it.
I don't understand what you're referring to. I didn't just mention Oracle builds. If Amazon wants to hire 20 OpenJDK contributors, everyone will be happy. As to Metropolis, I think you're responding out of uninformed speculation, and getting angry over something that hasn't happened and isn't planned to happen. Have you seen any indication by anyone that OpenJDK is about to accept a performance regression in the compiler?
OK, I probably misread your original comment: \[emphasis mine\] "You **can't** download, say, Adopt or Corretto, find a bug and file it against OpenJDK -- you **have to** first report the bug to the distribution maker". It seems to be a long way from encouraging to summary deferral to downstream vendors. And it would be rather hostile to downstream builders too. It feels like saying: "No, the fact you provide users with (tested) builds is not enough, you should also wrangle bugs, otherwise we would ignore the (real upstream) bugs found in your builds, and that would be your fault". For example, people use bleeding edge OpenJDK builds from [builds.shipilev.net](https://builds.shipilev.net), and nobody feels that me myself should wrangle the bugs found in them. It is a common understanding this is yet another downstream build, and 99.9% of issues found with them would be legit OpenJDK bugs, not just some downstream issue.
&gt; [Javadocs] do not lie since it is generated from the source In my experience, this is consistently untrue. A regular problem is finding code that does not match the Javadocs.
&gt; It seems to be a long way from encouraging to summary deferral to downstream vendors. I said I should have written "should not" rather than "can't". &gt; And it would be rather hostile to downstream builders too. I disagree. Becoming a downstream builder means assuming some responsibility. &gt; and nobody feels that me myself should wrangle the bugs found in them I don't think the situation is at all the same.
&gt;I disagree. Becoming a downstream builder means assuming some responsibility. Yes. For *the builder* the responsibility is providing reliable, verified, tested builds. Accepting bug reports, or in fact any support is optional, and makes it more than just a builder. I guess the disconnect is here: you seem to want other OpenJDK builders be more active beyond their current role, and I sympathize. I do note, however, that telling the community players that they actually have *more responsibility* than they have openly signed up for is an odd way to encourage them to step up.
I don't think we want to encourage anyone to step up to become (wide-distribution, production) downstream distributor, only those that can assume more responsibility and/or help the project in other ways.
Again, I sympathize. And again, I don't want to diminish the role of builders, even if they do not provide support. Providing the builds is still a lot of work, and it is helping the project. Without current builders, some {OS, architecture}-specific OpenJDK builds would not even exist. Doing that is work, and I would not dare to say it does not help the project.
How does it help?
Yup. And if you wanted to gold plate it further, you could use jLink to make the image tiny and CDS to make to bootup fast.
The javadoc is for whiners. The code is all the documentation you need.
With the interesting caveat that Oracle disables the Shenandoah GC in their builds (for JDK 12 up).
Multiple distributions provide coverage (and vendor lock-in safety) for many different groups of users, with or without support. Production readiness feels orthogonal to having support: as the user, I can take a particular JDK, read vendor claims and testing certificates, run and pass all the tests I can think of, certify that build for my production use, done. Honestly, I don't think *everyone* who runs Java in their production environments have any official support agreements, and they instead piggy-back on shared involvement of the proverbial community. You might not like it, I might not like it (after all, my salary comes from paid support), but that's how ecosystem is. It is enough for us that *someone* have the official support agreements for their mission critical stacks where the downtime is really expensive. The only problem I see with multiple distributions right now is the decision fatigue. However, I attribute that to the transitional period from effectively mono-vendor ecosystem to the multi-vendor one. From the hundreds of Linux distributions, only a few "major" emerge. It would happen with OpenJDK distributions too, no matter how many of them there are.
If they pull off Loom, that would be a major major enhancement that would give Go a run for its money. No more code weaving a method into a state machine, native support for continuation stacks. This is the major win: "Fibers are user-mode lightweight threads that allow synchronous (blocking) code to be efficiently scheduled, so that it performs as well as asynchronous code, but is simpler to read and write, debug, monitor and profile."
That seems like a Google problem, not something within the ASF's direct control, short of taking down Javadoc for older versions, which would be a bad idea.
I don't think they help against vendor lock-in. If Oracle decides to stop funding OpenJDK tomorrow and no one else steps up then OpenJDK is done for, regardless of how many builds there are out there, and if someone does step up, then it's not thanks to all the builds. On the other hand, I think a project's reputation is also very important, and unsupported builds can harm it, not just through decision fatigue. Now, by "some sort of support" I don't mean official support contract, but things including contributors who fix bugs and even help with looking at and triaging bugs.
Came here to basically say this. A thread safe queue (ok), which is being pushed to and popped from multiple threads (ok), and is immutable (what?). It is an impossibility/contradiction. You can't have an immutable queue which mutates. The closest I can think of is making a queue which produces new queues on pop/push. Either way. /u/qhxslyflarhc clearly does not understand "immutability" to claim it isn't "threadsafe". A key requirement for something to be thread unsafe is mutation.
This may or may not change once Shenandoah is no longer experimental -- I am really not at the level that makes such decisions, and I must emphasize that I speak only for myself. However, Oracle has a relatively high bar with respect to publishing binaries. As a rule, Oracle publishes software (as opposed to source-code) that can be supported by *Oracle engineers*. So, for example, Oracle currently doesn't publish OpenJDK binaries for AArch64, even though that port is supported by non-Oracle OpenJDK contributors.
&gt;The closest I can think of is making a queue which produces new queues on pop/push.
When is an immutable object not thread safe? You asked for an immutable queue which is mutated (not a thing). Do you have any other example where something is both immutable and thread unsafe?
As for the cake, if you haven't noticed a pattern in the discussion between you and shipilev that matches that proverb, then nevermind. I found it ammusing, that you do not need 20 Amazon contributors, if you cannot even agree with a single shipilev. The case of Shenandoah being stripped off 'proper' Oracle OpenJDK builds used by Oracle contributors is telling, isn't it? Don't you see the pattern there? As for the Graal, let me see: You write a dual licensed compiler which has an open source and proprietary closed source version. You don't ship all snippets with the open source version so that the proprietary version can always perform better. The open source version of the compiler cannot beat C2 at the established bechmarks, but you say C2 is unmaintainable and should be replaced. You come up with new benchmarks that favour your new compiler. Shipilev calls you out https://mobile.twitter.com/shipilev/status/1126551356985237504?lang=en but the hype is still abundant. You come up with mind boggling marketing naming Graal compiler vs GraalVM vs GraalVM compiler. Do you think this kind of treatment will help Java community in the long run? Do you call such communication transparent? Nobody at IBM complained that Testarossa compiler is unmaintainable even if it's written in C plus plus and is quite old. Did it just age better?
So, is the nitpick then that "immutability doesn't guarantee an algorithm is thread safe?" Because I can get behind that statement. For example, strings are immutable in java, but an algorithm where multiple threads grab a string, concatenate something to it (making a new string) and then store that new string in a shared memory location is not thread safe. But still, the part of that the makes things not thread safe is the mutating of shared state.
I think we are sliding straight into hypotheticals. I believe that at this juncture, having many serious companies producing their OpenJDK distributions only helps to mitigate the entire "Oh God. Oracle requires to pay for Java!" narrative, and that is the cornerstone issue in current times. There are plenty of non-Oracle contributors to feel safe in the unlikely scenario Oracle bails. Not to mention that if (!) Oracle is done with Java, I would not expect Java people to suddenly switch to developing other Oracle products. Knowing many of them, I would rather expect their Java expertise to be absorbed across other companies. This does not mean everyone has to be the contributor. It would be very nice, sure. We can help them to feel their way into it, first with just providing builds, then participating in OpenJDK bug triaging, then doing more, more and more. I don't believe there are downstream vendors who are deliberately isolating themselves from the OpenJDK. Being extra demanding towards them does not feel like a good community-building strategy.
I hate to speak for others but i think the argument is more like "You can't take an immutable queue and have one thread pop messages another thread is pushing." And if you did you would not observe correct behavior. Something like that.
They can be added, and if you are using community edition then that is the way you have to do it, but if you are buying a product then WebStorm would be more directly suited to web development.
&gt; if you cannot even agree with a single shipilev. I agree with him on a great many things (he's also the one that indirectly led to me working at Oracle), but I don't see any issue with us disagreeing about some things. Also, I don't represent Oracle and I don't think he represents Red Hat. We are two people having the rare civil argument on Reddit. &gt; The case of Shenandoah being stripped off 'proper' Oracle OpenJDK builds used by Oracle contributors is telling, isn't it? Don't you see the pattern there? No, I don't. I've addressed that [here](https://www.reddit.com/r/java/comments/c5pl1q/adoptopenjdk_is_not_tck_compliant_at_the_moment/es77bvn/). Do you, however, not see the pattern that Oracle funds over 90% of OpenJDK's development, and it's easier for others to say they should give more? &gt; As for the Graal, let me see: You write Don't say "you." I really do speak only for myself. Not only am I not at the level that makes those decisions, I don't work on the Graal team. &gt; Do you think this kind of treatment will help Java community in the long run? What kind of treatment? You are speculating based on work in progress. You will not find any hint about any plan of accepting regressions in the default OpenJDK compiler because there are none. Oracle has been leading OpenJDK for a decade now, and I think the vast majority of people are very happy with their investment, recent open sourcing of the entire JDK, and overall "treatment." &gt; Do you call such communication transparent? You are confusing various personal statements, work in progress and different official product communications. &gt; Did it just age better? I have no idea, but your entitled tone does not encourage transparency. If you or your company would like to contribute to OpenJDK in general and C2 in particular, it would be greatly appreciated. If you want to aggressively second-guess the resource allocation of companies and projects you don't fully understand, then go ahead, but I may feel less inclined to engage.
&gt; and that is the cornerstone issue in current times. Sadly. Leave it to Oracle to open source a non-free piece of software and for it to be perceived as if it's become less free, although that's far from being entirely Oracle's fault. &gt; Knowing many of them, I would rather expect their Java expertise to be absorbed across other companies. Yes, but that still requires those other companies to foot the bill. &gt; first with just providing builds Yeah, that's the part I disagree with. I don't think it's a good first step at all.
I don't mean to sound rude but too many posts about JMH and it's pitfalls focus on the "obvious" problems of using JMH. Yes, it's of course necessary to know these kind of things, but noone talks about the more advanced pitfalls that even JMH itself warns you about: "Performance may differ significantly in real world scenarios". That's where we need more enlightment instead of talking about dead code elimination :) Why does `Collection.sort()` perform so good in my JMH benchmark but so poorly in my application? Oh you only passed `ArrayList` in your JMH test? So it inlined arraylists functions ? But you use `Collections.singletonList`, `LinkedList` and `Arrays.asList` in your application - too bad, no more inlining (at least in HotSpot) and a gigantic performance hit (in some scenarios). This especially holds for libraries that take `Collection&lt;T&gt;` and only JMH with one implementation. I always wonder if there are more of these pitfalls but there is no collection of these more advanced topics about JMH (at least to my knowledge, please proof me wrong :D )
Awesome, thanks for including the link!
Yes, very much so.
I am not aware of any binary available on AdoptOpenJDK that is TCK-certified. As far as I know, AdoptOpenJDK has no license nor access to the JCK (TCK for Java SE).
By 'you' I did not mean you personally. I meant you in a sense of some abstract entity (not even Oracle). I should have phrased my argument differently. English is not my mother tongue, I apologize. I do see the pattern that Oracle finances 90 percent of OpenJDK and I haven't disputed that at all. You can call me confused and entitled - I did not expect you (personaly) would agree with my argument. I've read some of your past Oracle vs Google/Oracle and OpenJDK related discussions and I knew I won't win this one. I just felt like I needed to write it down, so I did. I hope everything will turn out well for Java eventually and that my speculation was simply my confused speculation.
The website [also hosts Red Hat's "upstream" builds](https://adoptopenjdk.net/upstream).
Very well :)
Gimme gimme please! No "if"! "When"!
psvm *(ctrl-J)* -&gt; public static void main(){} psfs *(ctrl-J)* -&gt; public static final String bar.getFoo() *(ctrl-alt-v)* -&gt; Foo foo = bar.getFoo() eventHandler.handleEvent(new (ctrl-shift-space, select, ctrl-alt-v) -&gt; FooEvent foo = new FooEvent(); foo.prepareFoo(); eventHandler.handleEvent(foo); I could go on and on.....: change signature extract method extract parameter extract field extract constant extract variable Generify pull members up move surround with .... to enclose some lines in an if, or to enclose some html or xml with a tag I basically use most of the refactor menu to avoid typing, searching and replacing and jumping around between different lines in a class or between files. If I'm in a good flow, I don't write much code myself, just use all the features.
I'm responsible for a major Java library and definitely don't consider Javadoc sufficient. In fact, I assume most won't read it unless they need quick doc for a method or class.
Guys, I know it's nobody's fault and the topic is complicated. But seriously? You are talking in acronyms that a 15 year Java veteran is not able to follow. I can't begin to imagine, how crazy complicated that must sound for someone who is developing in go, ruby or node. I like Java, it's my preferred language and ecosystem. And I'd like to spread the love by putting out some open source frameworks that are easy to get started with, natural to understand and in that regard, offer an alternative to alternatives like rails and nodejs stuff. I use the latest JDK 12 for my personal stuff, but shipping an open source, I have to keep in mind what other people use. I'm not aware of a way to compile Java 12 code down to JDK 11 compatible artifacts. Coding and compiling with the current lts seems like the way of least costs, in order to deliver something compatible with a lot of systems out there (even though the latest jetbrains report suggests that the majority is still running on Java 8...) - I don't want to support Java 8, it sends the wrong signals and would require a lot of changes in the code base to get rid of all the places using Java 9+ features. So what would you recommend? Shipping the artifacts only compatible with JDK 12? Or coding and shipping based on LTS?
Sophos? Forcepoint? Also probably have difference perceptions about what is fast and what is slow. For some, Atom maybe fast Enough. But compare it to Sublime and it is a snail.
Depends on your market. If you're in one of the tech hubs, this is inexcusable. Most recruiters would have some tech familiarity. But if you're somewhere the tech isn't as solid or as prevalent, you might just have a bunch of crap employers near you. i work in consulting, and we're brought in *all the time* to companies because they can't find local talent. Maybe ask some firms in the area that you'd like to work for, if they'd share some of the consulting firms they use. That might be a better play short-term, to build your network.
&gt; I'm not aware of a way to compile Java 12 code down to JDK 11 compatible artifacts. See [`javac --release`](https://docs.oracle.com/en/java/javase/12/tools/javac.html#GUID-AEEC9F07-CB49-4E96-8BC7-BCC2C7F725C9). &gt; So what would you recommend? Shipping the artifacts only compatible with JDK 12? Or coding and shipping based on LTS? I don't think LTS is what matters here. Unless your library becomes hugely popular it won't quickly be relied on by large enterprises. But you may want to support a few versions back, if it's not too much pain, just to increase your target audience. If supporting 8 is too much trouble -- don't do it. These are really things you can worry about later, once you've gained some adoption. Your users will let you know what they want.
Make sure you add these to your vmoptions file: ``` -Xms2048m -Xmx8192m ```
I pay for it mostly because I really like JetBrains, and want them to have some money. They make great tools and are quite responsive. I have a feeling, like you have, that IJ CE + VSC is likely enough for the modern java dev. However, I like that my ultimate subscription lets me have goland, pycharm, webstorm, etc, all in one tool. I only have to manage one IDE, one set of key bindings, and only really master one tool.
It was a San Diego recruiter =/ I think this place has a pretty dense tech community. He also asked me HTML questions he thought were javascript questions. All i've done is apply online on various job boards. Should I just walk into a local agency?
I usually ask people in my network for recommendations. I also keep a list of the ones that I think are good when I'm not looking. Most of the time you can filter the really bad ones out by looking at their linkedin profiles and postings. &amp;#x200B; I also suggest bypassing external recruiters and applying directly to the companies you want to interview with or try to discover who recruits for those companies.
Most devs get these annoying calls. I get these and I end up blocking their numbers. I've been called about entry level positions and I have 17 years of experience.
How much OOD are you really expecting from the team? Are they legit "never seen java before" kind of devs? do they know the fundamentals? A lot of java programs these days are like a weird mish-mash of functional, oop, and procedural elements. Mastering OOP, for example, won't give them a great grasp of lambda functions, folding, stream aggregates, or other concepts. I'm not expecting Java devs to be busting out UML diagrams with perfect notation at a moment's notice. I found the Head First book to be really good back in the day for a crash/refresher course: https://www.amazon.com/Head-First-Object-Oriented-Analysis-Design/dp/0596008678 I'm not sure how it's aged in the last 12 or whatever years, and I remember the writing style to be a bit annoying, but it got the message through. after that I'd probably send them to Clean Code first (https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/). For just a practical-purpose OOD book, you might look at the seminal DDD
Just to be clear, the compiler option mentioned will enable me to compile sources using Java version N down to binaries compatible with Java version N-1? Cause I've read somewhere that this is not possible.
Ayyy. I stand by this, lol. There is nothing else in a Java library to describe besides what each class &amp; variable represents, and what the methods do. All of these are contained in the javadocs. If there are paragraphs of additional information, they pertain to how the API might be used, but in theory the javadocs should more strictly adhere to and define the API. I.e. there is nothing else to document besides the API.
You are right, the bad practices shown in the paper are the simplest and better-documented ones (I am one of the authors). The main goal of our investigation was to show that even the most obvious problems ended-up occurring on real open-source software and distorting their benchmark results... Although I have to personally say, aside from dead code elimination and zero forks, I was not expecting other to impact the results as much.. As for the more advanced topics, I could definitely recommend the JVM Anatomy Quarks series from Aleksey Shipilёv (JMH Creator), which has several interesting cases - not all related to benchmarks though.
When modules become more widespread, `module-info.java` could be a good place for this kind of high level overview. Code examples are painful (everything moderately complex seems to require a mix of `&lt;pre&gt;`, `&lt;code&gt;`, `{@code` and HTML escapes for closing braces and @-signs), so let's hope [JDK-8196204](https://bugs.openjdk.java.net/browse/JDK-8196204) is implemented soon. The JDK doesn't use this documentation space however, I'm not sure if that's on purpose or just lack of time. The [`java.sql` module](https://docs.oracle.com/en/java/javase/12/docs/api/java.sql/module-summary.html) for example describes itself with **Defines the JDBC API** without even spelling out the acronym.
I know, paying for something is shit.
Paying for something that used to be included and now isn’t, is shit.
Except it is still included + as a bonus a year trial of new versions.
Are you answering a comment I didn’t make?
You just don't get it.
This is why I said *well written* badly written documentation is no help no matter if it is javadocs or not. Well written javadocs are all you need.
No, you'll only be able to use language/library features in N-1 (or N-k).
 &gt; Sadly. Leave it to Oracle to free a non-free piece of software and for it to be perceived as if they've done the opposite, although that's far from being entirely Oracle's fault. Wat. Are you for real? You surely are just trolling at this point, are you? I mean, you must be aware it was Sun, and not Oracle, who freed the JDK in early 2007, right? Ever since it took over, all Oracle did was aimed at cutting the losses from that initial move. Thank god, it was pretty much irreversible...
I was surprised too that someone who knows about JMH does not get the basics right as e.g. BlackHole is in every article / blog post I have found about JMH. And sure, JVM Anatomy Quarks is really good but sometimes too low level, specific or wide to be easily applied to JMH or writing JMH tests. There is no guideline as to e.g. write mega-morphic JMH tests out there, which is a shame. Greater paper btw, loving anything citable when it comes to performance as I have done a bachelors thesis about an optimizing compiler and oh boy are there no citable sources for performance optimizations :)
Probably because the point you're making is stupid. *Sweet! The airline gave me free soft drinks, how kind of them!* *Who cares that they now charge me for luggage, food, aisle seats, leg room, etc, when they didn't in the past*
Previously, the Oracle JDK contained features that were not part of OpenJDK ([here](https://blog.gilliard.lol/2018/05/25/Opening-Oracle-JDK-Features.html) is a good overview of those features). Oracle open sourced and integrated them all into OpenJDK.
Your point is stupid. They charged you in the past for all that too.
What are you 10 years old?
I did learn a lot tonight, thank you very much for investing so much time - it is highly appreciated.
&gt; who freed the JDK in early 2007 Some of it. The JDK was finally fully made open source last year. &gt; all Oracle did was aimed at cutting the losses from that initial move Oracle significantly increased the investment in OpenJDK and contributed huge advancements in the ecosystem. &gt; You surely are just trolling at this point, are you? What do you mean? I am just actually familiar with the facts.
That would assume that OP knew how the API was supposed to work, which obviously they don't, or they wouldn't have been searching for better documentation.
What makes you think they would have the code? I mean in the general case, not Avro in particular. Lots of APIs don't provide source.
OP seems like a smart person, I assume they'll figure it out. The way that they want to obtain information isn't present, but there are always other ways (pointed out elsewhere; getting started guides, other projects using the library, etc). When they do get it going, they can contribute back documentation containing what they learned in a way that they would find useful to have had it presented.
A good recruiter is a ... no, I'm not going to say it. Suffice to say recruiters are below estate agents in my estimation
How light is a fiber's overhead? Kotlin coroutine is a few dozen bytes, Go goroutine a few hundred. It would be great if it could keep it competitive with Kotlin since both are JVM based.
Kotlin supports coroutines in Kotlin/Native and Kotlin/JS code also.
I definitely use Ultimate in 2019. The built in code duplicate detection is nice for refactoring, and I also enjoy the built in support for EE Spring and Database stuff. Really nice to have all of that stuff in 1 place working together beautifully.
yeah, native continuations are definitely a win. if all that ends up getting exposed is fibers, it will depend on the implementation - they're much higher level and there's no one-size-fits-all solution &amp;#x200B; &gt;BTW, does Kilim support "continuation serialization" which was mentioned briefly in the talk? That is a killer feature to have IMHO. &amp;#x200B; i haven't done it personally (and most of our users are very secretive about how they're using kilim), but it should work. that said, it might be messy - any variable on the stack that was tied to a local resource would need to be swapped out &amp;#x200B; and as always, java serialization is brittle, so ymmv
this is similar to green threads isn't it? They had it in the initial versions of Java but decided to forego it for kernel threads.
In practice I've found the few kb limit that Go has to be usable for anything I've needed to do.
Title is a bit misleading. I honestly thought this was a talk about async programming updates in Java. There is loom so I guess its not totally off.
Is this green threads again? [The same question is asked in the conference about project loom](https://youtu.be/vbGbXUjlRyQ?t=2585). The answer is no.
thank you. Continuation vs Multiplexing.
Firstly, Kotlin's coroutines are different from Fibers in crucial aspects. One article [highlights](https://dev.to/martinhaeusler/why-i-stopped-using-coroutines-in-kotlin-kg0) few of the issues with coroutines: \- It is hard to use debug with Kotlin's coroutines, because of the way it works; \- Coroutines don't have context as fiber will (like ThreadLocal); \- Synchronization has to be solved as with Kotlin's coroutines do not work as expected solved and brings nasty bugs. Now regarding the question. According to the latest [talk](https://www.infoq.com/presentations/continuations-java/) (29:56 minute mark), **it will be around 200-300b**. Very important to note that this will depend on the stack fiber has "accumulated". The beauty of fiber's as oppose to Kotlin's coroutines that it will preserve the stack in its fullest. That means you can traverse back and forth, you can copy it and create multiple fibers from the point in stack and so on. All in all fibers are "multi-prompt delimited continuations". More on this [here](https://www.infoq.com/presentations/continuations-java/) (around 21:00 minute mark).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I can see where this actually might be helpful if you're on a big project and you're importing other teams' dependencies which include their own beans. I guess I've never been on a project where importing already instantiated beans made sense, but I could see how it would work, if this is what you mean.
Cylance and other things. The impression I was getting from the thread was more like "literally can't do work while waiting for my IDE to do things for 10s of minutes at a time" and not "atom vs sublime" stuff.
I've had reasonable success with Linkedin. Tell them what you're looking for, and not to bother getting in touch without your must have criteria, which for me is minimum salary level, the ability to work from home, 30 days holidays and flexi-time. That works for the most part. if they offer me crap then it's bye bye time.
Well you can simulate anything you want. Try Conways game of life: https://gamedevelopment.tutsplus.com/tutorials/creating-life-conways-game-of-life--gamedev-558
You don‘t. If people have the level knowledge about tech that would make them a good recruiter, why would they be a recruiter?
Kotlin/Native coroutine support is unfortunately highly limited to the point where it's almost useless: https://github.com/Kotlin/kotlinx.coroutines/issues/462
Yes, this is an issue with the extension (kotlinx) library. The low level, i. e. unspecialized, features from the stdlib are fully supported though: [https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/)
Coroutines are different but these points from that article have been discussed and are either wrong, out of date or being worked on. See this reddit thread: https://reddit.com/r/androiddev/comments/c4cl41/why_i_stopped_using_coroutines_in_kotlin/erwdisl?context=3 So the picture is by far not as bad as the article you link to paints it. I've had good success with coroutines so far. The only real limitation is that they're not fully supported on Kotlin/Native. Fibers as proposed by loom would be an improvement due to legacy code becoming schedulable without modification due to the changes to the JVM and Java Stdlib code. But coroutines can be used right now ;-)
You can use these classes, yes, but freezing them to use them on another thread makes them useless as they rely on mutation to work. So this is not a high vs low level problem. It's an underlying design limitation (I would say flaw - others say feature) of KN's multithreading runtime implementation (not allowing mutable state to be shared between threads)
According to the issue you posted, it sounds like they are working on the kotlinx library to support communication between coroutines that run on different threads, doesn't it?
You have to read the discussion as well, especially Eliearov's comments: https://github.com/Kotlin/kotlinx.coroutines/issues/462#issuecomment-473194289
Yes, you are right, this sounds like a serious Kotlin/Native problem and the mentioned solution (*"Alternatively, we can do massive copy-paste and have two parallel hierarchies of all coroutine classes -- atomic for cross-thread and regular for single-thread usage."*) seems really awkward.
Fair enough. Do you know how Kotlin's coroutines are implemented under the hood? I always believed it is still Java's Thread. That would explain in article outlined limitations (now it seems they were rebutted or being addressed). You cannot have "async" in JVM, because everytime it *can be* new a new Thread. Thus lossing stack, ThreadLocal, objects assiotaed with that Thread like monitors etc etc.
There is also the red/black methods issue. Basically Kotlin forces you to add the suspend keyword to the methods that are asynchronous or the method that calls other suspend methods. The only way to escape it is to use the coroutine scheduling methods (launch a coroutine, wait for its execution.. this kind of thing). The issue with this is that it divides your code in "two worlds": the synchronous/scheduling part and all the rest, with the suspend keyword leaking in synchronous methods that are in between. Project loom has a different design which means you wont have this issue.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c6hczu/nonpublic_class_with_public_constructor/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
CS is a 'hot' industry where it's easy to make money as a recruiter. It attracts a certain type of person who mostly just cares about making money with very little effort. So that's what most of them do; just mindlessly spam as many developers with barely relevant shit in the hope someone bites. Even recruiters complain about recruiters. It's a pretty fucked up industry.
The compiler translates suspend functions into state machines I think. There are scheduled on threads via Dispatchers. Yes, threadlocals don't work anymore, but there are other ways to tie state to a coroutine. Look at the CoroutineContext or https://stackoverflow.com/a/46227463
PS. even a good a good blog/guide would be appreciated!
I learned on treehouse. Do the free trial for 2 weeks and take their spring course. The cancel before they bill you. Spring is kind of hard to understand at first, but when it clicks for you the spring.o tutorials are great
I ignore most recruiter contact messages, unless he mentions a position that seems like a really good fit. If I do answer, they usually want to talk on the phone; I'm fine with that. Those calls usually take an hour or so which is time I'm willing to invest if my overall impression of them is okay during the call; if not, you can say "just present me for the position you mentioned and then we'll see". Then they usually send a list of positions they think might be a fit. Again, I'm willing to invest a good amount of time checking those and giving feedback why or why not they might be a good fit, to give him a chance of getting a good picture of my expectations. After that, you might end up with something like 3 positions you're a candidate for, and you can tell him to be on the lookout for similar positions. If he still sends you non-fitting ones, he's not worth your time anymore and you can a) tell him you've stopped looking for positions and b) start looking for a better recruiter. &amp;#x200B; TL;DR Do invest some time and give them a good profile so they're at least in the position to filter for you. If they fail regardless, move on.
Check out Spring boot in action by Craig walls. I have just started it and it’s good.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[removed]
You need a shared resource to handle it. I once evaluated Redisson for distributed locks but never got a chance to implement. Please search redisson distributes locking
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Do your 30 days holidays include paid public holidays (or unpaid but with right to take it)? As I read it takes extra 6 days off for USA: https://en.wikipedia.org/wiki/Public_holidays_in_the_United_States Do you seek for 40h 5 days week or 48h 6 days week?
Whilst I have the utmost respect for Aleksey, I think this part of the interview needs some clarification: "When you hear the news that Red Hat takes over the ownership of the 8u and 11u releases -- that one is the formal leadership in those OpenJDK update projects. Red Hat is responsible for those source trees and the processes around it." Andrew Haley, who does indeed work for Red Hat, has taken over as the project lead for both these projects (in addition to being project lead for the OpenJDK 7 updates). However, that does not mean that Red Hat has taken over leadership or ownership. Andrew recently posted a blog about this and he said, "It’s important to clarify Red Hat’s role in all of this. We are one of the largest contributors to OpenJDK, we have been for many years, and we will continue to be. However, we have not “taken over” OpenJDK updates projects, and neither would we want to. Our role in OpenJDK, as in many other projects, is to be a catalyst in communities of customers, contributors, and partners. This means that we work with others, some of whom are our competitors, in the best interests of the project." and, "My role in this as Project Lead is to supervise, encourage, and occasionally make decisions about how best to protect these precious jewels, the OpenJDK updates. I have to do so without favoring any vendor. Not only must I be impartial, but I must also be seen by everyone to be so. This way of behaving is in Red Hat’s best interests: a better OpenJDK for everyone encourages more users and more contributors. In the end, the best outcome for Red Hat is the best outcome for everyone." ([https://developers.redhat.com/blog/2019/05/22/openjdk-8-and-11-still-in-safe-hands/](https://developers.redhat.com/blog/2019/05/22/openjdk-8-and-11-still-in-safe-hands/))
I'm in the EU if that has any baring for you. 30 days holidays excluding paid public holidays. 40 hour 5 day weeks, but flexi-time is very important. So I can work an extra hour every day and take a half day on friday (if there are no meetings) or I can work from home, start working an hour early and finish working an hour early; or I can build up time off by working a few hours extra every week so it adds up to whole days off.
Trash "tutorial". You're not explaining concepts, but rather show some introductory code samples and explain what lines of code which are self explanatory.
What kind of concepts would u like me to explain?
Thankfully almost no one is using Rational IDEs anymore.
I can’t speak for u/ichunddu9 but my biggest hurdle when learning JavaFX was Reflection. Maybe that’s too advanced of a topic to start off a tutorial with but it’s definitely important to cover. Also, variable names like “l1” or “txt” are fine for something super small but it makes your code nearly impossible to read, especially so for new programmers or people who are easily overwhelmed by learning new technologies.
Thanks! i'll definately change the variable names and make them more specific. and keep it in mind as i'll recreate more complex UI in the future. Also would cover more stuff like Reflection in the future! I wanted to keep the first one the most basic and easy to understand for new programmers.
Cool but I don't know why but when I refresh I don't see this post in r/java.
Unfortunately hardly anything new. But it's nice to hear that valhalla is making major progress. It seems the majority of its work has been done by now?
Valhalla is being split up into stages, with the first release coming in LW (LWorld) 10. They are currently drafting the LW2 spec, so we still have a bit to go. You can download the [EAB](http://jdk.java.net/valhalla/) if you want to play around with it now, though.
Zookeeper
I am curious what number of public holidays you have? In my case I work remotely and expected to attend morning meeting and need to collect 40 hours a week. But I agreed to only 2 paid holidays weeks (10 days without Fri/Sat) and there are 11 paid public holidays in Ukraine. So public holidays is a half of days off I have. But in general everything should be accounted as even small piece may be dealbreaker.
Spring is well documented. Read the spring core documentation first: https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#spring-core Then read spring boot docs: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/
Modules aren't going to become more widespread. They are only handy for breaking up the java runtime. They have no other use case.
You can't document what you don't know.
Well documented != well explained for learning process otherwise, we all study from encyclopedia and not from books :)
You care what the doc website looks like even if it has good information? You are really saying you won't look at a doc website if the web design isn't up to your standards? Ridiculous. https://motherfuckingwebsite.com
Just click the no frames link.
The spring docs explain things quite well. What do you think it is missing? I went the first 15 yrs of my Java career being able to largely ignore Spring. Switched jobs a couple of years ago to a job that heavily used Spring so read the spring core doc and was up and and going after reading the spring core doc (almost in its entirety) and then reading enough of the spring boot docs to get going and then use it as a reference now.
Same here. The docs are excellent.
Maybe they like recruiting more than coding? That's been the case for the best recruiters I've worked with over the years. Solid technical knowledge – more than enough to screen candidates and match them with positions – but generally enjoy building careers over building programs.
I’ve never encountered such a recruiter. But that might have been just bad luck of course.
kilim (i'm a maintainer) and quasar have the same red/black methods "issue" and kilim is stricter than quasar (and afaik kotlin, but my kotlin-foo is very limited) &amp;#x200B; and in my use of kilim at the application level, the red/black-ness has actually been a feature, not a limitation - it makes reasoning about performance much simpler. quasar's ability to handle "red" implementations of "black" interfaces is definitely useful, and i've been tempted to add it to kilim, but every time i've seriously thought about it, i've decided that the purity of the red/black metaphor is too valuable to give up &amp;#x200B; beyond all that, i'd love a red/black way to tell if a java method was capable of blocking (though maybe with an IDE indication instead of a keyword or exception - there are limits to my madness ;)
I read that EU gets much more vacation on average than the US. Is it normal for people to get months vacations?
you've got at least two options right now &amp;#x200B; kilim (i'm a maintainer) gives you both continuations and fibers (at the expense of the red/black methods "issue" mentioned below). it allows for: \- massive levels of concurrency, eg 1M fibers \- simple reasoning about concurrency, eg you can resume an actor on a single threaded scheduler instead of locking &amp;#x200B; quasar doesn't give you continuations but can weave a larger subset of the java language
The point is that they are going to add facilities in the JVM directly to support continuation stacks, which should mean: Less overhead in both memory and cycles. The challenges current solutions - including Kotlin's - are facing is re-instating the correct call stack when 'continuing' after a fiber yielded. All existing solutions use a well-known transformation strategy to turn sequential code into a state automaton (that's where the 'few dozen bytes' come from, holding onto that state), so you can actually return from a method when yielding and later return to the right spot in that same method.
I think that is an example of using JMH for the wrong thing. It is a Microbenchmark framework, after all, but the problem you are listing is a macro problem. I view JMH more as a tool to show that "Hey, LocalDate is faster than java.util.Date" and less as a tool to show that "Hey, when you add dynamic dispatch into the mix, things go to crap". That isn't an invalid problem to find, it is just one that, IMO, is better suited to be found by Flight recorder/VisualVM. In other words, JMH is more to win battles with your coworkers on "Which is faster a linked list or an array list". Not that it generally matters, but instead that some people want to be able to say "Well, all things equal, might as well default to the faster thing". It isn't well suited for "why is my application running slow" (hint: it is pretty much always IO).
It seems they drove the numbers up a bit by including benchmarks bugs fixed prior to their work. In the case I investigated, they didn't find any issues in the main repository and instead added results from an old fork. However, that issue had been fixed in early 2015 which greatly preceded their work. It's easy to tell because they checked in their analysis files to debug. Unfortunately, their detector doesn't work with the current version of Spotbugs. It seems like a great addition to contribute, and maybe we'll get lucky and someone from Spotbugs takes it over.
And this is an important thing to keep in mind. There is a reason why there are a bunch of libraries out there which have "Not supported on android" methods or even separate android distributables (see, guava as a popular example). The android VM isn't a JVM. It isn't fully compatible with the spec.
I mean, you could always also use an experimental build of the loom jdk. If you want loom sooner, they'd appreciate more eyes on it and more people using it.
They've been making some pretty rapid progress, though. And parts of Valhalla are starting to leak out into JDK releases (such as the Const api). At this point, it seems like they have the route they are going to take pretty much agreed on.
Most definitely!
Spring publishes a ton of guides [on their web page](https://spring.io/guides). Also, [Spring Petclinic](https://github.com/spring-projects/spring-petclinic) is a small demo app that shows how to use Spring Boot in a "real" app. There are ton of [variations](https://github.com/spring-petclinic) of Spring Petclinic, demonstrating a bunch of different technologies.
PostgreSQL supports a little-knows feature called [advisory locks](https://www.postgresql.org/docs/11/explicit-locking.html#ADVISORY-LOCKS). It makes it possible to define lock objects on the DB server. The client libraries can then be used to acquire and wait for these locks. But if the items you lock on are already represented in the DB, use row-level locks by all means.
To be frank I did not use coroutines enough to make a proper opinion. I think that for an application if it is well designed the red/black issue is manageable and it might be desired. But the issue would be when you are designing a framework. The design goal for loom (if I am not mistaken) is to be able to use coroutines as a drop in replacement for threads (for the end user of frameworks at least). If the interfaces to implement requires red methods or the framework provides red methods this would break compatibility.
Go is only interesting to those that miss Java 1.3.
there's really no point till the loom team commits to an api, and at this point they haven't even committed to releasing continuations as a public api - it may be fiber-only that said, i am using a build of loom for tracking performance
yeah, loom aspires to mostly eliminate the red/black methods. currently, that's at the expense of performance - for shallow call stacks loom is 17x slower than kilim and the break-even stack depth is 80 (for xorshift, a non-trivial but simple computation). but that's improved significantly in the last 6 months there shouldn't be any compatibility issues between a weave-based framework (kilim or quasar) and an eventual loom release since you can provide a trivial bridge between them from what i've seen so far, i expect loom and kilim to be complementary since the use-cases are different. but depending on the ultimate performance, kilim may just wrap loom continuations (which would be ideal from my POV)
We have Ultimate paid for at work, and I also "won" it in a raffle at my local JUG. I've been bouncing around between VS Code, Eclipse, and IntelliJ over the last few weeks. The main thing that keeps me on IntelliJ is the Glassfish tooling. With a click of a button, IntelliJ will just build the java part of our war and undeploy/deploy it.
LOL, go home, you are 10 years too late
If I know backend/microservices in node and php, and I only know Java to the extent of making programs on command prompt but good command on syntax and java packages, can I jump directly to Spring Boot?
We analyzed 1000+ projects automatically after searching for projects that use JMH. While we tried to remove forked versions from our dataset (the final dataset contains only 123 projects), it could happen that some passed through our filters :( It is really hard to prune all corner-cases here. The current version of SpotJMHBugs is a bit experimental, but we will at the very least make it work with the current version of SpotBugs so you can all try running the analysis yourselves. Hopefully, if it raises enough interest, we could move it also to Spotbugs, as one of the internally distributed plugins :)
If I want to waste my life then what's it to you?
&gt; such as the Const api What is the Const API? Do you mean constructor?
[https://openjdk.java.net/jeps/334](https://openjdk.java.net/jeps/334)
I do agree with what you are saying but if you make use of a library that makes heavy use of (deeply) nested lamdas etc. a simple JMH benchmark will only show the perfect scenario: one call site, one usage of the library - a perfect inlining scenario. There aren't many libraries out there that fit this description though. My example was just showing something that I had in my head as I didn't just want to claim anything without backing it up at all. I do wonder if there are other pitfalls of JMH that compared to my example are more significant for the benchmark results (excluding the already show DCE).
&gt; The beauty of fiber as oppose to Kotlin's coroutine that it will preserve the stack in its fullest. Does C# do the same thing with it's coroutines since they're stackless? (I haven't used them). Meaning does debugging become more difficult there as well?
I think it is really good work, so very much please do submit it to Spotbugs to maintain. It is so trivially easy to make a mistake that invalidates a benchmark, even with JMH handling most of the hard cases. It definitely helps to have a static analyzer catch our slipups.
Check out their post history. I have never seen so many downvotes for one person.
Avoid as much as possible.
Spring boot is a configuration framework for the Spring framework. You need to know spring core and spring mvc first.
Guess I got some learning to do.
You should check out one of the US political subreddits, then... Lol
I'm not really sure what's going on with this project. Are they trying to leverage Graal to AOT binaries for Android and iOS apps? Don't get me wrong, if I could write anything jvm related and have it compiled to something runnable on any mobile device, that would be cool, but if hate to lose all of the VM features with having. The number of performance enhancements you get from jit is amazing
Nobody likes to face reality, truth hurts, people over are not used to that, but data is here to prove i'm right, and as long as you deny the reality, stuff won't change, for you, and for Oracle
The fuck does that have to do with your post history consisting of 90% downvotes?
for the same reason you became mad and you had to check my post history :), you refused to face reality and instead of entering in "debate mode", you just speak non sense
It all makes sense now.
Which data? Can you provide sources?
Apple won't allow dynamically generated native code, so the JIT is a non-starter on iOS. The AOT compilation that Graal provides is the best way of getting any performance from Java on iOS.
The whole Manning Press "... In Action" series of books are great for the Java ecosystem. They're consistently good like O'Reilly were 15-20 years ago.
The lack of generics and the awful error handling is what puts me off Go. It's Java 1.3 without exceptions.
That is true. At the time the interview was taken, the hottest article was about "Red Hat taking over leadership in 8u and 11u", and my answer was trying to reference that. It should have been clearer. I asked to correct my reply a little :)
I'd rather suggest to learn Spring first as opposite to just going into full "magic" Spring Boot mode. And for learning just Spring, [Spring 5 Design Patterns](https://www.amazon.com/Spring-Design-Patterns-application-development-ebook/dp/B075F67NWP), as well as Spring in Action, 4th and 5th editions.
C# does some magic and make it appear like the stack is preserved, but it actually isn't. Also, in older versions of C# not even that was the case.
while setting up tomcat, i need to add the jre\_home variable. how can i do this while i have jdk 12
TIL. Thank you.
I have Effective Java. I totally forgot about the Thinking in Java. Thansk for the reminder.
The second one might also help me in my second project. Get them to understand the benefit of test for productivity.
I like Ms. Metz rule on inheritance. "It is OK to use it only if the children always use 100% of the code of the parent."
I toyed around with this earlier, even though I don't really use C#. I had several `async` methods call each other, with the last one throwing an exception. The resulting exception stack trace, even though I could see the stack of calls where the exception came from, looked more verbose than a regular stack trace with non-`async` calls. How does this translate into practice though? Is it more expensive to throw from `async` calls? Does it make things harder to debug? etc.
They provide compile time checked documentation for your architecture. If you have a huge app consisting of many subprojects and documentation sucks (so the typical enterprise project), having a `module-info.java` define the supported API of each subproject is valuable (right now you can only guess at package and class names, and IDEs wil suggest unrelated internal types). They also give developers another tool to contain technical debt creeping into other parts of the system, allowing gradual clean up. That's all "soft" benefits that can be achieved by more discipline, but same as with static typing, why not automate that discipline when possible?
I supose you are better off asking in a C# reddit. I recently watched some conference videos about Loom, which is where I got that piece of info from. I haven't programmed in C# for about 2 years now.
What is the way they handle errors? Old school C where every single call to a function is followed by a check `if result == 0, else if result == 1, etc`? That really got tiresome and was one of the reasons, along with dealing with your own memory, I jumped on Java early in my career and have never had any interest in touching C, even though I'm fascinated by understanding the Linux kernel and drivers.
I like Manning too - they're expensive without a discount, but you are usually going to get a decent book that will be plenty enough to get you started on any subject. Their Hibernate 1st edition book is still classic. Unfortunately I don't have time to read much anymore, but O'Reilly was very solid years ago, especially with Linux / Unix books. Have they gone downhill? I avoid Packt books - while they have more than any other publisher, you are often getting something hardly better than some guy's blog postings.
Honestly I couldn't tell you about O'Reilly, but for diversion I stopped buying them. I had around 20-30 of their books over the years but I haven't bought one in probably 10-15 years. Maybe it was just a change in interests away from their typical topics.
Yeah it seems that Go allows multiple return values with one of them being an error code. So you have to check the return value of every method.
This is good info, I will look into them again (had started to use java 9 couple years back but then switched jobs shortly after and they are using 8)
[removed]
I've been using Spring for years so don't need much more than the docs and API references. But having recently been reading the Spring 5 docs to see what's new, I could not imagine a junior dev to get much out of the official reference. The first few sections, at least, where they describe the core context, beans, DI, was just a blur of Spring-type classes (the ol' AbstractFactoryCreatorConverter) that would confuse a newb by the second page. The transaction chapter of the reference is still confusing as hell to me and I've been using it for years. 15 years ago, there was one way to do things using XML configuration. Then came the scanning and `component` annotations, and with Spring 4 (I think) Java configurations and @Bean classes were the way to wire things up. Learning the new way of doing things over 15 years was tolerable, but when you start mixing the different options to a new dev, it is overwhelming. The few code examples in the official reference are constantly switching from one way to another. When I learned Spring years ago, the Spring in Action books used a whole chapter with some simple examples of a `car` class or something - it was much more helpful than the docs. And of I were a web dev, I'd then get one the Apress (I think) books on advanced MVC.
IntelliJ doesn’t force the use of Gradle. What are you talking about? Also, Gradle is the current best build tool for java, the ease of configuration by convention like Maven with the flexibility of ant if you need it.
Agreed. People love that you can write two lines of code from a project template, execute a jar, and have their `hello world` page up and running. But good luck the minute your project deviates from the tutorials, and you discover that Spring Boot has wired up 30 beans because you dumped a bunch of dependencies from the Initializer app, for everything under the sun, *just in case* you'd need it. The best way to learn is to begin with the awful servlet API and Tomcat. After you realize it sucks, then you add the basic bit of old school spring dispatcher servlet manually to `web.xml`, along with explicit Jackson converters and view revolvers. Finally, go wild with auto-scanning controllers and other magic once you realize why they're helpful. Same idea when learning databases. Start with the official JDBC and transaction API. Realize how bad it sucks. Then add a JDBCtemplate and some mappers. Finally, learn Spring data to reduce all the bloat.
Yep Zookeeper was explicitly made for this type of job, among other things like service location. Basically you just create a lock that all the nodes will try and grab at the same time. Whoever gets it first, does the work. The rest don't.
Just a warning: In my opinion it's still a bit too early to use modules for projects with many third party dependencies, because most aren't named modules yet. So you would be fighting with tools like [moditect](https://github.com/moditect/moditect) or automatic modules a lot, not worth it in my opinion when adding a new dependency becomes a time sink. Better wait until Java 11 becomes more widespread in OSS.
I stopped buying books too. First of all they're way to expensive. Why does a bestseller cost $10, but some random book on the latest Java fad that may be dead in 3 years go for $50 (or $40 on Amazon)? Can't justify it, especially when as a senior dev it's rare that I need half the book to waste time explaining basic concepts that I already know.
I recently flipped through Thinking in Java which I had read years ago. I think the latest edition is from 2004 or so. Honestly I don't know how helpful it'd be in modern Java. A lot of the book deals with the ins and outs of inheritance and all the edge cases of polymorphism. Or how private vs public vs protected work with all the edge cases. TBH, in most of my projects, I just don't use OO much. It's just a huge mix of Spring and other libs they hide this from me, while I'm more concerned with wiring up the right beans, avoiding state in singletons, making sure transactions and concurrency are used appropriately with all the microservices. The most complex OO stuff we wrote ourselves is a basic service or Dao interfaces and subclasses that use a specific db, then add caching, etc.
If you’re sorting a `LinkedList`, you get what you deserve. :-)
Yes, employment law guarantees around 20-30 days in the EU.
this is going to be pretty hard to get right. if it was me, i'd move the processing that needs to be synchronous to a single machine - either a rest call or a database query. that eliminates 99% of the complexity
Well if you are a library you just can't help it. And `Collections.sort` ist optimized for both list variants (though through a hacky marker interface, go look it up) Though just don't use linkedlists (in 99,999999% of the times), I agree
&gt; but data is here to prove i'm right, And yet you don't show it
show what, just google when iOS was first released asking that kind of stuff shows how much this community is lost in the past
I'd start with [Zig](https://ziglang.org/).
Some decent ones have approached me on Linkedin. Avoid putting your resume on Dice, that's been nothing but spam.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Untill module system is not giving answer to module versioning issues it worth very little.
The best book to learn about composition vs OO is the Gang of 4 Book in my opinion. The code fragments are in C++, but it is the text that explains the concepts that is more important than the code. Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Grady Booch https://en.wikipedia.org/wiki/Design_Patterns If insist on code samples in java, there is: Patterns in Java vol 1 by Mark Grand, but I wouldn't consider it a replacement to the Gang of Four book, only a companion for the code samples. I have read both books years ago.
**Design Patterns** Design Patterns: Elements of Reusable Object-Oriented Software (1994) is a software engineering book describing software design patterns. The book was written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (the "Gang of Four"), with a foreword by Grady Booch. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic software design patterns. The book includes examples in C++ and Smalltalk. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Informative share, thanks for sharing the article...
Could you elaborate which parts you found the most informative? ... I'm asking because you're posting history shows you're * mainly commenting real comments in * /r/SEO * /r/SocialMediaMarketing * /r/DigitalMarketing * etc. * seemingly randomly leave comments like this one here in various low-upvoted, low-commented posts that all are low quality/traffic blog-posts * [Take advantage of trending Video sharing business from Video sharing script ](/r/webdevelopment/comments/c57sqq/take_advantage_of_trending_video_sharing_business/_ (since removed) &gt; Useful share, thanks for the article... * [Top digital marketing trends 2019](/u/abidly/comments/bxw3da/top_digital_marketing_trends_2019/) &gt; Informative share, thanks for the post... * [10 Digital marketing trends](/user/ramyasri123/comments/bsdkfg/10_digital_marketing_trends/) &gt; Nice Infographic...thanks for the post ... * [What are the differences between "Big Data" and Data Analytics?](/user/EdureLearning/comments/c1ms0f/what_are_the_differences_between_big_data_and/) &gt; Thanks for sharing the useful article... * [8 Technical tips for PHP Web Development every developer should follow](/r/remotejs/comments/bzbjy3/8_technical_tips_for_php_web_development_every/) &gt; Informative Share, thanks for the article... * [Cool Popup Animations in Adobe Xd + Export as HTML/CSS](/r/WebdevTutorials/comments/c1z2wo/cool_popup_animations_in_adobe_xd_export_as/) &gt; Very well explained in the video, thanks for sharing the needful post... * [Top Cyber Security Trends for the Year Ahead.](/r/netsecstudents/comments/batqn3/top_cyber_security_trends_for_the_year_ahead/) &gt; Informative share, thanks for the article... * [10 cyber security trends to watch in 2019](/r/SAtechnews/comments/a7nle8/10_cyber_security_trends_to_watch_in_2019/) &gt; Great Share, thanks for the informative article... * etc. etc. So the question is: do you actually have an opinion about the technical topic, or are you just trying to shill low-quality spam posts? It would fit OP's modus operandi, which I once saw commenting about selling "Monthly packages of digital marketing".
The Go Plugin is also excellent, and unfortunately, also only available on IntelliJ Ultimate edition.
1) TestNG is not "better" than Java, is different. But if I had to recommend someone to learn a testing framework, it would be JUnit as there're more people using it. 2) Selenium, as a backend Java developer is completely optional depending the size of your team. If you have testers, you can completely forget about it. 3) If you want to learn something useful for java &amp; testing, learn TDD (Test-Driver Development) instead. You're going to use it a lot more than those.
multiple typos in your comment
And?
No, but it's got support for our tooling etc.
Great read
I believe that anyone who has worked in a live environment has experienced this. As a developer who started my first job about a year ago, I can say that I've never made such big bowl of spaghetti in my life before until that day. There isn't an easy way to untangle all this code, the right way to do it is to sit down, and work through it from the start to the end. This will take time, but you'll definitely learn something new :)
I'm defenitly guilty of fiddling with ternary operators too much!
Very good article but I’m not sure I agree with this &gt; In general, don’t use the ternary operator.
And all the apps for iOS were delivered on launch and people don't have to make them any more? If you don't see the value in being able to retarget Java/JVM-based products to iOS then I don't think you understand the wider-ecosystem of mobile development very well...
English is not my main language, and I fail to see what this has to do with its content. Or is everything wrong just because I wrote some typos?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/c7cs8b/liskov_substitution_principle_should_be_taught/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes I think the key issue is what you use them for. They are useful for assignment based on condition, but using them for logical processing (like the given 'print' example) is bad.
I think the only real point I disagree with is when they state "Write concise code". Concise is the enemy of clarity. It's better to slightly more verbose being explicit about what the code is doing.
Agreed, particularly as the example can easily be simplified : print (b &lt; 3 ? "4" : (b &lt; 5 ? "2" : "6")) The main advantage of the ternary operator is that it's an expression, i.e. it yields a value, whereas if-then-else is a statement (at least in non-FP languages). The main disadvantage is the ternary-ness can be difficult to read.
I find ternary beautiful if it is not nested as above. I would write it something like this: `msg = (b &lt; 3) ? "4" :` `(b &lt; 5) ? "2" :` `"6"` `print msg`
You can be concise within a given context. For example if you just slap a huge method in a class and have nothing else, it is hard to be concise. If you have a well named method in a well named class that gives context to what you are doing, then the code inside can be concise without mile long variable names because there is good context.
From my experience it is a muscle that you train. I agree starting off with this, you must just go through this and work through these things but over time you will find that you tend to lead your software development with abstractions and proper boundaries as you develop. I find that I'm constantly pulling concepts out as I go along etc. But it is not something I did from the start. I highly recommend to people to read clean code from Robert Martin. It captures all of this so well
Agreed. I do find however the more proud I am over the conciseness of my code, the more comments it needs. It is good to remember that code is usually written once by one person and read multiple times by many. Emphasized readiblity over line count.
To anyone attempting to learn or get up to speed with Java ecosystem, I'd take any article that claims "frameworks you **must** know" with a heavy grain of salt. What you must know about testing is the importance of automated testing, how to write high quality tests, and additionally some details with regards to trade-offs with test coverage analysis and optionally code complexity analysis. Those are the real must-knows. The frameworks and tools you end up using depends on the job. With knowledge you're able to adapt to different tools as necessary. Some of the tools may be the ones highlighted in the article.
I see a lot of devs more senior than I catching \`Throwable\` in web service controller code, then setting the response to a status 500 internal server error. This seems like a reasonable case to limp on, if you are able, and get an indicative response out. Is there a better way to handle this?
Writing concise code doesn’t mean using one or two character variable and function names, etc that ultimately only serves to obfuscate the code. Writing concise code , to me, means writing your fizz buzz solver like [this](https://gist.github.com/kings13y/2818299] and [not like this](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition).
Might be that a free openshift account at red hat cloud might be enough for your application.
singleton as a static variable. any static state = pure cancer.
this is java so it will only be done in 2050
this (deployment) is a huge missing link in the java ecosystem get a VPS, either kvm or openvz will work (i found mine via lowendbox). front it with nginx. no experience running a webmail but a quick search of github shows several options. i use a shell script to provision it's unfortunate that there's no standard for deployment (something similar to a dockerfile) that will target a VPS, but it's easy enough to do ad-hoc
Lots to agree with in the article. One caveat: “ Use dependency injection wherever possible.” Better: “Use DI when the alternatives lead to complex code” Nowadays DI is often used recklessly. Simple object graphs that could be constructed by actually using the perfectly fine ‘new‘ operator are magically stitched together using annotations or XML. This handily makes seeing a call hierarchy impossible or slow and doesn’t add anything useful to your code. „But I can change the dependency via config“ yeah, but do you really need that and have you ever done that on production? Like any other tool DI has its uses, often in places higher up in your stack but certainly not as a replacement to build objects.
How so? Just get the docker image of an application server, run it on a host and deploy the jar / war (Or use the embedded serve of Spring Boot)
I just checked out this option. Apparently the free plan will now expire after 60 days.
Exactly. If you ever see something like def butts = buttCollection.size() &gt;4 ? "Neat." : " " it's time to git blame some motherfuckers.
I did state. &gt; slightly more verbose The second one is the 'I Just read design patterns' way of doing it.
Exactly in Scala this would have been: print(if(b &lt; 3) "4" else if(b &lt; 5) "2" else "6") another likely alternative would have been a pattern match: print(b match { case b if b &lt; 3 =&gt; "4" case b if b &lt; 5 =&gt; "2" case _ =&gt; "6" }) with the advantage of being able to vertically align conditions.
Dang, sorry about that. Haven't used it in a while and it used to stay free.
Nearly free speech dot net is a nice barbones service that lets you set everything up yourself and you pay for exactly what you use.
Don’t forget about unit testing. Even if you only ever use a single implementation in prod, it’s sometimes useful to mock it during testing. It comes down to whether the dependency is part of the unit or not.
The default implementation is now in `List.sort` but I wouldn't say it's optimized. It manages to avoid the egregious overhead of shuffling around linked nodes of `LinkedList` though. I'd say `ArrayList.sort` is optimized.
with openvz you can't run docker. kvm can, at higher cost. but you're still left with provisioning the host (ssh, docker, etc) at which point it's as easy to just run the webapp directly if you don't need much memory then some of the free cloud tiers will work, and if you don't need a filesystem serverless is an option. but i need both and spent the last week unsuccessfully looking for options that aren't 10x more expensive than the manual VPS approach (i have a quickstart for a framework that i'd like to publish, but without a very cheap deployment story there's not much point). i was expecting to find the equivalent of terraform or serverless for the low end VPS let me know if i've missed something
If your framework allows it, register a global default exception handler that handles all unhandled exceptions. That way you can remove the code from the controllers. Obviously only works if you don't need additional context for your error response. You can also go a step further and use custom exceptions for non-500-errors like validation errors and also handle them inside your global exception handler, leaving your controllers and services to be mostly happy paths.
Couldn't this need be filled by something like ansible, puppet, or chef to configure the vps? Ansible is probably easier to start with in this case because it's agent-less and only needs working ssh.
You don't need docker, its just more convenient.
TLDR Jakarta EE specs can't use acronyms like JMS or JPA
Are you the guy that put nested ternary operators in our code base... If so stop it... ;-) Two levels is confusing but double nested you are just asking to get punched in the face.
If it's purely a frontend, I would suggest just using a CDN provider. I use firebase, which is free for my usage. If you actually need a backend, checkout heroku. It's free for development, and when you're ready to go live it's only 7 dollars per month. The free developer version shuts off after 30 minutes of activity, but could potentially be used in a low use case. It takes about 20-30 seconds to startup for me, but I'm using the nodejs instance, so YMMV.
Having worked on a large project that’s still allergic to inversion of control and another that’s slowly adopted the paradigm over time, the codebase of the former is *much* harder to maintain and change. Something as simple as introducing caching of data from a particular class becomes a nightmare of finding all the call sites and manually updating them to use the cache instead of the user details service. The same limitations apply wherever you wish to apply any cross-cutting concerns. There is a limit, of course, to how much inversion of control is useful, though, until you end up with [enterprise FizzBuzz](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition).
yeah, the conclusion of my research was that ansible was the closest i could come. at the least it's much less ad-hoc than my scripts, and that's a win. and it's possible that it's more robust to hosts with screwy initial configs and bad security
Don't overlook heroku, their Hobby instance is $7/month and you get all the great deployment and management tools. It's also their problem to keep the instance up. Their weakness is low memory per instance, which can be a bit tight for Java, but overall it's workable.
Honestly I think if it’s only you working on it, as long as you have a system to keep track of the versions that works, you’re good. It is good to get familiar with git and other source control options, but as far as using it to maintain your “branches” or versions, whatever works for you.
Your formatting appears to have been wrecked. I assume you meant this: msg = (b &lt; 3) ? "4" : (b &lt; 5) ? "2" : "6" print msg
Some statements are detrimental to the purpose \&gt; In general, don’t use the ternary operator. For simple print statements it may be useful, but NEVER nest them. \&gt; bit manipulation. There is rarely needed in most regular code. So don’t do it. \&gt; Avoid static methods and public static fields. \&gt; Get familiar with the best IDE everyone has… the terminal. \&gt; Null (IMHO) is broken in almost all languages \&gt; Don't modify input parameters \&gt; you should NEVER use System.out. \&gt; Don’t use inheritance as a way to avoid code duplication. Cor the last one: java lib is full of XXXImpl deriving from XXX :-)
git is just so easy and buys you so much
Git is so easy and cheap, it almost seems like more work to _not_ use version control.
Why don't you want to use version control? If you feel like it gets in the way and that you move faster without it, I think that could be indicative of a gap in understanding or poor workflow. If that is the case, it might be worth it to spend some time improving those things. In my opinion, using git adds very little overhead but a lot of upside. On the other hand, it's your free time, use it how you want.
This has got absolutely nothing Java specific, and even then, /r/javahelp would be the place. The real place is a more generic subreddit, like /r/learnprogramming and probably it won't even there be well received. **Removed** as off-topic
People really just need to step back and remember that most features have appropriate and inappropriate use cases.
Excellent read. The one about currency always seems odd to me. Why not just convert dollars to cents and save everything as an integer. It just seems far simpler than working with floating point Arithmetic or am I missing something. Most currencies Use 2 decimal points, and any exchange rate could be adjust to work with cents.
Excellent read. The one about currency always seems odd to me. Why not just convert dollars to cents and save everything as an integer. It just seems far simpler than working with floating point Arithmetic or am I missing something. Most currencies Use 2 decimal points, and any exchange rate could be adjust to work with cents.
Ah, yes, that's the way I wrote it, don't know what happened. Thanks.
Who doesn’t like the ternary operator? For a basic if/else assignment op it’s arguably more readable than an if/else block
Interesting, so this is a product which adds some features only typically seen in IDEs (argument names, code jump) to browser code views on GitHub. It might be useful for certain workflows. I typically stick to my IDE for "deep analysis", but I never tried another way.
&gt; I see a lot of devs more senior than I catching Throwable in web service controller code, then setting the response to a status 500 internal server error. No that's fine. Especially if: - You rethrow after serving that 500 response. - You log the exception via some alternate log mechanism. At the (near) top level, it's normal to have a "catch all" that does something with the exception. It's more suspicious within the middle layers, where some code eats the error and proceeds as if nothing happened.
Yes. Lilit offers IDE features on your browser. I want to bring all the awesome features that we have on our IDEs to our browsers. While we can load the code into our IDEs, reviewing a pull request has no substitute. We have to review a pull request without intelligent features. Also, it's more convenient to have "intelligent" features right there on our browsers. Please do let me know if you want to try Lilit with your own repo. I'm looking for private-beta users right now.
&gt; Nowadays DI is often used recklessly. Simple object graphs that could be constructed by actually using the perfectly fine ‘new‘ operator are magically stitched together using annotations or XML. Pet peeve: injecting via `new` is still DI. In fact, it's the only way of DI I practice, unless I have to deal with the sadness of someone's existing codebase that's dependent on a "container".
Arguably \*any\* framework that doesn't automatically convert generic exceptions into 500s is broken (from an usability POV). That said, Throwables are also OutOfMemoryErrors, and others in that vein, should these be also converted to plain 500s with no other action?
Most people wouldn't share the opinion ternaries are bad.
I don't like this "anti-static extremism" I see around. Sure, we shouldn't have observable static state, but static methods have their uses. As for inheritance, it's basically always a code duplication removal, more or less. As long as its kept *within* a library, it's manageable. But it's harmful across libraries as a customization/extension mechanism.
I want to hear from the community. How do you normally avoid misplaced arguments in Java? From what I've heard, using a value class seems to be a decent idea: class Thresholds { double abuse; double quality; } Thresholds thresholds = new Thresholds(); thresholds.abuse = 0.7; thresholds.quality = 0.3; new Filter(thresholds); It's a bit verbose but better than having an obscure bug.
&gt;\&gt; Avoid static methods and public static fields. WTF, these are overgeneralizations.
&gt;Most currencies Use 2 decimal points Japan doesn't have minor units. India has 3 decimal digits.
Well I hope so as I personally find them easier to read then stretched out if else blocks. I dislike ugly if/else blocks that only assign a value as I deem them to verbose. If one formats the ternaries well they're not hard to read at all.
Because just storing naked cents introduces two possible errors: 1. Accidentally assuming somewhere it's dollars, so overcharging (or overpaying) by a factor of 100x. Yes it has happened in real apps. 2. Accidentally assigning one currency to another without computing the suitable exchange rate. Once again... hilarious shenanigans ensue. When working with numbers of specific units, it's best to use libraries for dealing with those units. It's not because it's complex to write a couple of expressions and conversions as-is in cents. It's not. It's because in an app dealing with finances you'll be dealing with money a lot more than you think, and one fuck up will cost you more than the overhead of the library you will use. Even if you don't want to use a library, the article suggest BigDecimal, which is still better than cents as integer. I mean, BigDecimal is internally integers already. But they helps you avoid integer overflows, and the 100x factor error I mentioned earlier.
&gt;Avoid static methods and public static fields. Use dependency injection wherever possible. Even for "util" classes that are places to throw static methods, those should be injected or even instantiated with a default constructor before attempting to access that functionality. You do this so that if the behavior ever needs to be extended you'll be able to without having to rewrite the functionality to not be static.
Don't equate dependency inversion and DI frameworks.
Also, though it's not necessarily important in many situations, most cryptocurrencies have way more decimal places
Concise doesnt mean short, but adequately short. or as Long as it has to be to express all intended things. If your code needs comments, the question should be why can't your code express what the comment can, and should the code really give the same amount of info a comment does.
Made my day, I love your comment thank you stranger
I'm not sure about always catching [`Throwable`](https://Throwable.is) is the right thing to do. `Error` is also a subclass of `Throwable` and those are thrown by the JVM for serious problems with usually no possibility of recovery. Why shouldn't such a case crash your server when the application won't continue to work correctly anyway?
You also wrote that concise is the enemy of clarity, which is far from the truth. Well written concise code is more clear than well written verbose code, simply because there is less to read. Concise code that is not more clear is not well written (unless you are intentionally trying to obfuscate the meaning of your code.)
I'd suggest Heroku as well. There are a bunch of operations that you don't need to think about (e.g. roll logs, does your backup actually work?, no-downtime deployment, credentials management).
That's a damn pretty fizzbuzz. But your eyes have to dart back and forth between the case statements and the patterns defined a few lines above. I don't see it scaling well beyond this toy example. But the pattern of 0's and \_'s make it really obvious you've covered all the cases, and just looks really appealing to me. I'm torn.
That's the dumbest shit I have ever seen. Go damn I wish Oracle didn't control Java.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c7l4bz/the_abyss_of_apache_batik/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This goes back to Sun's days. The use of JCP specification names -- and the ability to change JCP specifications and namespaces -- is available to anyone using the JCP. When Oracle, and Sun before it, led Java EE, they also worked within the JCP. Jakarta is free to choose not to go through the JCP, but in that case it cannot present itself as if it does by using JCP specification names.
[removed]
But the interesting property is that any halfway capable IDE can show you all the call-sites, making refactoring feasible. The same is true for cross-cutting concerns. Wrapping those calls instead of using code-weaving might not be super pleasant, but it gives you optimal control. If you have cases, where your cache logic is a bit different, or where you need to do something slightly different, having that logic in the call hierarchy is very useful. Concerns that magically appear in your stack trace later in production can be very scary.
That's where I often see its usefulness: Mocking a system component by injecting a different version of it is nice. But that can also be achieved differently. One would assume that something mockable is also an `interface`. If not, there might be an opportunity for abstraction hiding.
Intellij has parameter hints. But overall, I can't say I have ever considered it to be a risk. Minor inconvenience at most, which happens extremely rarely and most likely is captured by testing.
Ternaries are not bad, because it forces all conditions to return the same type of data in statically types languages, and this is a good thing. Ternary operators are not a flow control structure like an “if”. “If” branches will or won’t return or modify a variable depending what happen in each scope. Ternaries are guaranteed to return a value.
&gt; While we can load the code into our IDEs, reviewing a pull request has no substitute. We have to review a pull request without intelligent features. I typically clone the branch of the pull request that I’m reviewing so that I can use this (among other) IDE feature if the code changes are remotely complex. Though it might have been easy to overlook this bug in an IDE if there’s a lot to review.
When it comes to constructors with several parameters the builder pattern can be quite useful. For standard methods it comes down to readability. Too many arguments can make the code messy, difficult to read, and easy for mistakes, in that case consider creating a class to carry the information the method needs,
AWS ElasticBeanstalk?
Yes, I was talking to my friend about the builder pattern. It does reduce the risk, though we essentially move the constructor call into build(). It's still better though, because only one place has the risk of misplace arguments.
Though most IDE has Intellisense to aid this problem, if there are too many parameters in a method, I usually use a DTO class instead.
I use a cheap old computer to host things for fun. I buy the domain on go daddy then just point that to my ip address. then I open a port on the router to point to the hist machine on my network. its a great way to host a tiny app that doesnt get much trafic or one that you dont expect to grow.
You may want to look at DigitalOcean. They are the beat and cheapest VM hosting around. Alternatively, look at Linode.
Could you give an example of DTO that solves this problem? I'm not sure I know it properly
instead of method(String var1, String var2) call method (var1, var2) I use class dto{var1, var2.... } new Dto() dto. setVar1(value)..... call method1(dto) Sorry for the formatting.
Ah, yes, I call it the value class pattern. Thank you for elaborating it!
Linode / digital ocean. You get a blank server with your choice of OS. You can add whatever you want
The project in question here is Jenkins, and being split among 1500 plugins, it’s not feasible to use an IDE to refactor everyone’s project for them.
1 jerk made this comment.
Risk of humans being programmers. :P This seems like a silly worry as most real IDEs can tell you when there is a type mismatch. And I somehow doubt this will help if there are two double values and one is supposed to be between 0.0 and 1.0 and you swap say 2.2 and 0.64... Also wouldn't using value classes nust be adding unnecessary overhead from object creation, etc most of the time?
Well, that's why I love Kotlin. Kotlin has named parameter, so when it's paired with a good IDE like IntelliJ Idea (which shows the parameter names) it obliterates that whole problem.
Agreed. When I first learned about Spring’s autowire magic, I fell in love. Until Unit Tests would break when I add/remove instance variables to classes or the code would compile fine but fail at runtime due to unsatisfied dependencies. I now despise autowire and other magical dependency injection in favor of good ol’ fashion constructor dependency injection. About the only place I tolerate the magical loading for loading property files at the very most entry part of the configuration process that bootstraps everything.
Very good article. As a Java a developer myself, I liked most, of not all the points in the post. I think most concepts are also generally applicable to other programming languages. One thing I’ve noticed when dabbling in web dev is their love to use latest versions for dependencies which just constantly causes all sorts of havoc. I’ve actually never seen this done in java/maven land. Is this a common practice? Nothing quite like going to check out and build a repo that hasn’t been touched in 6 months only to discover it not longer builds!
[removed]
[removed]
&gt;Concise: giving a lot of information clearly and in a few words; brief but comprehensive. By definition, conciseness is anything but unclear. To be concise, something must be clear, comprehensive and brief.
The minimum by law in the EU is 20 days, but most people I know have at least 25, but many have 30.
Also known as the [builder pattern](https://dzone.com/articles/design-patterns-the-builder-pattern) if I'm understanding this right.
I can speak for Ireland and Sweden here. Sweden has 15, but if they fall on a Saturday or Sunday then tough luck. Ireland has 11, known as 'bank holidays', but if one of those falls on a Saturday or Sunday then you get the following Monday off.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No, not really. A smart compiler can inline the values so it will not affect runtime but bring type safety during compilation. See 'inline classes' in Kotlin
Azure App Service just released free tier support on Linux. You can deploy your Java code or a Docker container [https://azure.microsoft.com/en-us/pricing/details/app-service/windows/](https://azure.microsoft.com/en-us/pricing/details/app-service/windows/)
Most IDEs can autogenerate builders which eliminates the rest risk and is pretty convenient on top.
Can be a bit risky if you don’t know what you’re doing, as that is potentially your home network fully open to outside traffic. I’ve done it too, but can’t recommend it. Lot of danger if you don’t close everything off right.
Not sure what your point is. Backwards-compatibility? What you describe sounds more like a general architectural problem, not necessarily something DI-related. The Hollywood principle existed before DI became popular ;)
I try to avoid such constructor methods. Your suggestion is fine too, but the temptation is to create a "shortcut" Thresholds(double, double) constructor, and then you're back at square one. Testing helps too
Or just write every new class of your Java Project in Kotlin and use named parameters.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
And nothing!
The builder pattern allows filling the DTO / value class using a method chain like new DtoBuilder().setWidth(100).setLength(200).setColor(Red); and while these two are often used together they don't have to.
Others have already given the same reply I would: ask other devs for recommendations. As a side note, while most devs can probably relate to being asked about and even having interviews set up for positions that aren't suitable to interests and experience, we should remind ourselves that the individual recruiter is often under bizarre KPIs to contact a certain amount of people, set up a certain number of interviews etc per week. Counterproductive and time wasting? Yes! But the individual recruiters are just trying to get by as best as they can under the conditions they're subjected to by their superiors, just like us devs sometimes find ourselves implementing less than well thought out features in less than optimal ways that we know will come back to bite us later.
As /u/Gwaptiva said, I consider these kinds of constructors a code smell. It's something that's made much worse by Lombok's autogenerated constructors which depend on the order in which the fields are declared - I do love Lombok, IMO it's the amount of fields that's the issue. My favorite way around this is using the \`@Builder\` instead. That does require setters though, so no immutables.
I’ll support both of these too (since I do have at least one VPS at each). Obviously you’re doing your own sysadmin, but it’s not really that bad.
I use builder pattern for this. If you're worried about boiler plate code, you can consider Lombok's builder annotation: https://projectlombok.org/features/Builder
This style is very common in Java UserService { void updateUser() //throws undeclared exceptions, who knows which are caught where if at all } UserResource { @Get updateUser(){ userService.updateUser() Response.200 } } GlobalExceptionHandler { handle(Exception e ){ if (e == DbException){ Response.500 } Response.500 } } The code is imperative and stateful: "first call updateUser, then, if nothing went wrong, return 200" Despite the method declaring it is void ("I don't return anything"), it does have results- it can be successful or result in different exceptions. In order to find out which exceptions can be thrown by calling updateUser, the developer has to read through each and every line of every method potentially called as a result of calling it. In order to find out which exceptions map to which responses, the developer has to go look at yet again some completely different part of the codebase. It makes it easy to forget to add the UserNotFound exception to the GlobalExceptionHandler, because that's in some completely different part of the codebase. A different style of doing it, which is unfamiliar to Java devs but ubiquitous in MANY other languages is UserService { Either&lt;Error, User&gt; updateUser() } enum Error { ErrorCallingDB UserNotFound } UserResource { @Get updateUser(){ return userService .updateUser(error -&gt; { switch(error){ case ErrorCallingDb: Response.500 case UserNotFound: Response.404 default: { LOG.error(non exhaustive switch) Response.500 } } }, { user -&gt; Response.200 }) } } The code is more declarative: we're mapping the outcome to a response. It makes it easy to see what each endpoint will return, in context. No need to go through every single potential failure in every single lower level. It makes it easier to remember to exhaustively map each outcome to a response. Eg, Kotlin would in fact not compile if the response wasn't exhaustively mapped. A lot of people hate this style, each to their own.
I'd like to respectfully disagree. There's no reason why each resource shouldn't describe, in context, how it will behave.
I feel like a lot of spring tutorials quickly overwhelm beginners when they immediately start throwing in springboot and annotations without really explaining the concepts behind it. If you want a really good bottom up approach, i recommend the udemy course from chad darby. He starts at complete zero, beginning with setting up a pure spring app by hand without any autogenerated stuff and explaining every concept step by step.
i agree
Woah... 2009? I'm surprised the source hasn't surfaced on github by now.
I completely agree with you. I went through this process last year, when I was learning Spring. I had some experience with JavaEE, but I had never touched Spring until then. The official docs are not helpful at all to someone who is just starting out.
Eclipse can now also do this: https://www.eclipse.org/eclipse/news/4.12/jdt.php#JavaEditor
Wow, that's awesome! I'm really happy to see this feature spread. This way I don't have to envy Swift developers as much as I do right now. I wonder if over time this will also results in longer method signatures, when IDEs help make them comprehensible (and obviously browser plugins are also starting to do it).
So you suggest not even returning a response? Maybe it fails only for some particular call, or data in the request, letting the server die is just wrong.
I would suggest a builder pattern may be your friend here: Filter f = Filter .builder() .withQualityThreshold(0.7) .withAbuseThreshold(0.3) .withRelationshioThreashold(0.2) .withFavoriteThreshold(0.1) .build() ;
Yeah. But it's often sensible to customize the framework's default 500 response body to look more uniform with other errors, e.g. `{"status":500, "message":"my bad"}` instead of plain text. So the only value the framework provides in that case is to make space available to easily plug in your own logic. I don't know if there is a way to figure out if a given `Error` is unrecoverable (putting the JVM into undefined state) or if it's ephemeral (some request tried to allocate a giant byte[] but failed, might have affected other concurrent requests but it's cleaned up now though and we can continue). So the best thing in my opinion is to inform the client of the failure, log the error (add to monitoring if available so somebody looks at it later). If the `Throwable` was not an `Error` but some other unexpected benign exception, it should be wrapped into a known custom exception at the layer it gets thrown in.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
And so can NetBeans (soon): [https://cwiki.apache.org/confluence/display/NETBEANS/Apache+NetBeans+11.1#ApacheNetBeans11.1-Java](https://cwiki.apache.org/confluence/display/NETBEANS/Apache+NetBeans+11.1#ApacheNetBeans11.1-Java)
&gt;The builder pattern allows filling the DTO / value class using a method chain like I discovered a few days ago that Lombok had a [@Builder](https://projectlombok.org/features/Builder) annotation to do just that :)
That works nicely in languages where return values are the only way errors can flow through the program. In Java, every library (and even the JVM) might throw exceptions at any time, so to be sure, you have to additionally catch `Throwable` at the top level anyway. It's the only bulletproof error fence we have. It might be cleaner to propagate errors explicitly upwards so upper layers can choose to handle them, but in most cases (at least in my experience), they just pass them through. Java has no syntax for this, so every layer in between pays the verbosity price. To make the switch in the global handler less error prone one could define a single custom exception like this, leaning on compiler warnings (soon errors) for non-exhaustive switches over enums: public enum ErrorCode { USER_NOT_FOUND, COUPON_EXPIRED, UNKNOWN; } public class CustomException extends RuntimeException { private final ErrorCode errorCode; public CustomException(ErrorCode errorCode) { this.errorCode = Objects.requireNonNull(errorCode); } } Or soon even: public sealed abstract class CustomException extends RuntimeException { } public UserNotFoundException extends CustomException { } public CouponExpiredException extends CustomException { } ...
This was my first thought.
And JUnit 5 is a decent upgrade to JUnit 4, if only because you can use multiple runners. Also the lambda asserts allowing you to report multiple assert failures in a single test is useful. Oh and decent parameterised tests.
I'd suggest that Java developers should probably know of most of the items in the list, but the only framework I'd suggest they should know is JUnit, due to its ubiquity.
I created this meme when I was watching Josh Long trying to be funny in Spring Conference :D
With that difference that Sun weren't dicks
Of course they were (or, at least, that's what people said; e.g. Apache Harmony, which was a similar issue). All large companies are. The difference is that people forgot.
Intellij has been doing this for years. It'll warn you when it detects the usual error scenarios like height / width swap, etc..
I had the same thought but ended up using vultr.com.
Start with a base image which is very lightweight and already has docker set up in it? Like Docker's Mobylinux, but there are others. By default Moby will start sshd in a container, which I'm not entirely sure about, but it is very easy setup.
What about DRY? You would rather copy-paste boilerplate all over the place?
Informative callout, thanks for the investigation...
Refactor Constructor Args as Parameter Object with Builder patterns solves this so, and in the code instead of ... a Chrome extension for Github? No offense to the Lilit guys intended, but their platform isn't one we all use.
Builder design pattern can also mitigate this.
Using micros for a price is a pretty standard thing. Using floating point sucks and is just as dangerous. I integrated systems that used EUR, and another used cents, one used negative for charging, another used negative for refunding, total mess. Of course, we were once giving people money instead of charging.
Micros?
micro currency units (micros), which means that $2 would be represented with the digit 2 followed by six digits 0, resulting in 2000000. (https://developers.google.com/standard-payments/payment-processor-service-api/rest/v1/TopLevel/generateReferenceNumber)
It looks like in your [submission](https://www.reddit.com/r/java/comments/c7scc1/declarition_array/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It depends on your interpretation of concise. To me it means something like: 'to the point without any superfluous decoration', i.e. the bare essentials. Concise is not the same as compact. Your code can be concise without being compact and your code can be compact without being concise. Compact code is harmful, such as hungarian, single letter variable names, etc. It's just brevity for brevity's sake. Concise code is good, because it cuts away the fluff, increasing the "business logic to technical details" ratio.
This exactly - being able to speak for reasons behind your decisions, speaking with ownership and excitement, and making it obvious that you didn't just clone a repo and tweak some variables is important when I review someones github activity. If you want to be next level, use the task / ticket tracker feature, setup your own backlog of tasks, and move them through your process. =)
It looks like in your [submission](https://www.reddit.com/r/java/comments/c7t7pv/do_you_know_any_free_server_host_sites/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
When I was listening to the Bob Dylan: One more cup of coffee this poem came to my mind immediately. I wrote it down and a couple of years ago for the first time I posted it on my Twitter. I am suggesting listening to the song while reading my Poem.
&gt; A different style of doing it, which is unfamiliar to Java devs but ubiquitous in MANY other languages is This is actually a *very* familiar pattern to Java developers, only implemented a different way: try { return ResponseEntity.ok(userService.updateUser()); } catch (UserNotFound ex) { return ResponseEntity.notFound(); } catch (Exception ex) { return ResponseEntity.status(500); } Checked exceptions advertise the possible error responses in the type signature, and require the caller to handle them, in a similar way that an `Either` type does. Checked exceptions are long out of fashion, but the `Either` type seems to fit the functional fashion now in vogue in Java. BTW - it is generally bad practice to expose low level errors like `ErrorCallingDb` or `SQLException` to higher level code. It is better just to turn these into runtime exceptions and handle them generically (like returning a 500 response).
Isn't this very similar to what is implemented in Android Studio?
Oh, I see for micro transactions. I’m not much of a fan of this approach. Although, over JSON its understandable. You don’t have much of a choice there for number presentation. But in an application? We can easily do better
If you mean the parameter hints, yes, it's available on Android Studio, IntelliJ, and Eclipse. And right now it's available on browsers as well (through Lilit).
Ooh, this is cool. I feel that, for the builder pattern, we merely move the constructor into the builder. The risk remains, though is reduced. But with the generator, it'll be entirely eliminated
Yes, and Lilit brings those features to our browsers. Hopefully, I can make it as good/complete as IntelliJ soon, especially the warning when the arguments don't look quite right.
None taken! Refactoring code is definitely a way to go. But better tooling is still better, no matter how disciplined we are with the code quality. Please do let me know if you have a repo that you want to try Lilit on :)
That's good to know. I was wondering about that.
I don't think Java lib authors assume anything. It simply requires an effort to write documentation. As an author (of another unrelated library), there are 2 feelings: (1) I'm just writing something that I already know very well. It seems time is better spent elsewhere, and (2) it's like a blind spot. I feel a rich documentation isn't needed because I feel you can just read the code, and that's because I know the code too well. Anyway, shameless plug: Lilit (code navigation/intelligence) is working well with Avro. You can install the browser extension here: [https://lilit.dev/try](https://lilit.dev/try) and try reading the code here: [https://github.com/apache/avro/blob/master/lang/java/ipc/src/main/java/org/apache/avro/ipc/DatagramTransceiver.java](https://github.com/apache/avro/blob/master/lang/java/ipc/src/main/java/org/apache/avro/ipc/DatagramTransceiver.java) \-- I hope it helps speed up the learning process!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That's basically because it's the (paid only) GoLang IDE as an Intellij plugin
Yes, the easiest shortcut to remember is "shift shift". You'll get a nifty search window that finds your files, classes, functions settings, tables etc
I'm curious, what do you find to be more intuitive?
Java support in Intellij is also a plugin, basically, even if you don't notice it. Not that it matters though.
Maybe you've modified your vmoptions for 2018 but not for 2019? By default, Intellij has a very low memory limit which really hampers performance.
Agree about a lot of this, but I'd still say returning outcomes as regular types is fundamentally different and much preferable to using exceptions, https://arrow-kt.io/docs/patterns/error_handling covers why pretty well.
Similar subject but focused on avoiding NPE. [https://better-coding.com/nullpointerexception-what-is-it-and-how-to-avoid-it/](https://better-coding.com/nullpointerexception-what-is-it-and-how-to-avoid-it/)
that's a good idea - i don't remember seeing mobylinux listed as an option for any of the kvm hosts i've looked at (obv won't work with openvz), but i wasn't actively looking for it. know any other distributions that come with docker and ssh preconfigured ?
openvz hosts are so cheap (eg $20 per year for 3GB/50GB) that you might as well just buy one
i just like to play with hardware and os setups from time to time.
I don't see how Either is verbose. Callers aren't forced to call map or fold, they can just pass an Either on without doing anything if desired. It's just another object. Tweaking exceptions and global error handlers aside, the problems still remain: calls result in undeclared outcomes, developers can't tell what the outcomes are or what responses they map to in context- in order to find out, they have to go through all the lower levels, any global exception handlers etc. It becomes more difficult to reason about the code.
To me, the IntelliJ application is cluttered and has a bunch of functionality in gutters, menus, and sidebars. Right click menus will do things based on different contexts. I feel that in VSC there are fewer of those things and they flow more logically from a few onscreen widgets and menus. I guess what I'm saying is that by poking around minimally in VSC I can get stuff done without resorting to Google like I have to with IntelliJ sometimes.
See https://old.reddit.com/r/java/comments/c7bkyo/antipatterns_and_code_smells/esgtadp To avoid repetitive mapping of errors to responses, the errors could have, or be wrapped in another class that has, a toResponse method that returns the appropriate response for each error.
Well, I use "shift shift" in IntelliJ for finding most things, I use the right click menu very very rarely. OTOH, IntelliJ has more functionality, so I guess it makes some amount of sense that the functionality is distributed among the gutters, sidebars etc. As you probably know, the right click menu is also called the "context menu", so it doing different things depending on where you right click is sort of the point of the right click menu :) Not sure about the clutter you mentioned, but personally I always disable the toolbar, this gets rid of most of the clutter. Then, Intellij and VSCode have very similar amounts of "clutter" on screen in my experience.
i feel that
It’s more so a logistical problem in that I can’t go and make releases of plugins that I’m not a committer, and some of those plugins have their repositories in an unreleasable state. Applying refactoring to all my company’s proprietary plugins might be simpler since we have control over all of them, but it’d still be a monumental effort. This isn’t to say that DI isn’t supported. We do use Guice for that, but most classes still rely on static methods to obtain references to components rather than using @Inject or similar. Backward compatibility is also an issue, but less so.
The problem as I see it, is that some developers conflate compact with concise. That leads to code that might as well have been written in Assembler.
Assume the following code, each method might throw: Comment addComment(Long parentId, String content) { User parent = userRepo.findById(parentId); Comment comment = commentRepo.save(parentId, content); mailer.sendCommentNotification(parent, comment); return comment; } If I'm understanding correctly, a version using Either might look like this: Either&lt;Error, Comment&gt; addComment(Long parentId, String content) { Either&lt;Error, User&gt; parent = userRepo.findById(parentId); Either&lt;Error, Comment&gt; comment = commentRepo.save(parentId, content); // TODO: insert clever unpacking of parent and comment Either&lt;Error, Mail&gt; mail = mailer.sendCommentNotification(parent, comment); // TODO: insert clever combination of comment and mail return comment; } It can be improved with a fluent API, but Java does not offer syntax to make this nice. The explicitness is a benefit, but the price is not worth it, IMO.
We use Moby on AWS because they provide an AMI. Vultr offer CoreOS: https://www.vultr.com/servers/coreos Digital Ocean make some noise about Docker so I assume they have something similar.
In short, pretty much any feature phone you can find. iirc, most of the phones areound in 2019 run some incarnation of either Nokia S40 or S60. It's a shame since SonyEricsson *had* by far the most developer friendly platform at the time. Other than that, J2ME Loader is the only MIDP emulator I know of.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c7zy8v/a_problem_from_an_amateur/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Funny, I don’t install it as a plugin or see a way to uninstall it as a plugin, maybe I’m missing it.
I meant the mechanisms the Java part of IntelliJ uses is essentially the same that other plugins use. Coincidentally, the Java part was actually extracted into a "proper" plugin earlier this month, but you still don't get the ability to disable it: https://blog.jetbrains.com/platform/2019/06/java-functionality-extracted-as-a-plugin/
this was also the rise and fall of Perl
As Einstein already said: Try to make it as simple as possible, but not any simpler.
In Android Studio, using Java, if you send literal parameters, the Editor shows each parameter name to avoid confusion.
&gt;People should choose the IDE they would be the most productive in. Well said. Since I switched to IntelliJ, I never had a single urge to switch back to Eclipse. It's good but I have become more productive in Intellij now.
&gt;Ya'll young edgelords... throwing around the term "capitalism" like it's a dirty word, and failing to understand that nearly EVERY major open source project is funded by companies. I wonder some of the young aspiring developers know who backed Java or better who're investing in Linux - the current open-source behemoth.
IMO, the example points out that they did a poor job [documenting the package](https://docs.spring.io/spring-integration/api/index.html?org/springframework/integration/aggregator/AbstractCorrelatingMessageHandler.html), not that javadoc is any more or less sufficient than pdf, word docs, paper books, etc. I prefer javadoc, as it provides context sensitive docs in the IDE. A manual is not tied to the code, and therefore, I need to worry about whether or not I'm reading the right manual for the right version of the library I'm working with. I'm also able to retrieve all the generated javadocs for any particular library version easily with Maven.
Concise does not mean that we squeeze our entire functionality into 79 characters at any and all costs. That's terse. Single character variable names are terse. They are not concise. Concise means that the code is short enough to be obviously correct, but long enough to be obvious about what it does.
Look, I love writing abuses of the language to write Fizzbuzz. But that...that's way more than I'd have ever thought to drag in. That said, I tend to prefer the abuse of functional tools over the abuse of dependency injection. For example: #/usr/bin/env python3 def fizzbuzz(number): FIZZBUZZ = {3: "Fizz", 5: "Buzz"}; KEYS = list(FIZZBUZZ.keys()); KEYS.sort() replacement = ''.join([FIZZBUZZ[i] if not number % i else '' for i in KEYS]) return replacement if replacement else str(number) if __name__=="__main__": print('\n'.join(list(map(fizzbuzz, range(1,101)))))
No, they're not. Every time I hear someone say that there's no reason to avoid static methods, I find someone who wrote code that is untestable and has hidden dependencies on system state. I keep telling people that if the method's return value does not depend entirely on the arguments, then it absolutely should not ever be a static. And if it has no return value, it *really* should not be a static. Those of us who have been around long enough have been burned *hard* by our own static methods. There's a reason for our extreme skepticism of the utility of such methods.
Currency is hard. And what's more, we often apply non-integer values to monetary values. Interest? Taxes? Bonus rates? Discounts? Exchange rates? It has to be applied right. And floating point decimals are really inaccurate. They're *terrible*, in fact.
He's dead, Jim. Java EE dying the long, slow death.
[removed]
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Username checks out.... That being said, I agree.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Linode or Digital Ocean would be better choice.
I don't agree. There has been stalling on the spec side while the transfer went on, but it gave the vendors time to just fix bugs and work on stability.
Why do post it here? Provided article is of: `Last Updated On: January 22, 2019`. There is nothing new (and probably most of us subscribed to Vlad's blog).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
you got downvoted but I am 100% with you. i have burned so hard by that.. my code now is only static constants and to be inlined static methods.
i don't understand what your code is doing.
Better late than never!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Could someone please explain what is meant where it says &gt;security work that cannot be made public until the embargo lifts
Many security bugs aren't made public until vendors have had a chance to incorporate patches into their products/distributions.
Say I'm a security researcher and I find a vulnerability. If I disclose it publicly, any hacker can now know about it and will have an easy time targeting it before a patch is available. The standard path would be for me to approach the organization, tell them about the vulnerability, and wait for a specific period of time _e.g._ for them to provide a patch. After that time: either they provide a patch, and normally customers should have had the patch applied, or they didn't, and that means they don't give a damn. In both cases, I could then comfortably make the discovery public.
How often do you do this, realistically?
I believe the embargo here refers to actually postponing the release of patches to the vulnerability, until everyone has the patch applied -- so that the patch would not reveal potential attackers details on the vulnerability too early.
It basically means that if Oracle would release their patch instantly, without waiting for others, all other JDK vendors would have their solutions exposed with a 0-day vulnerability (as the vulnerability can be deduced from the patch) -- without a fair chance to apply that patch. With the embargo, all vendors release their newly patched JDKs at the same time.
Off the top of my head, I don't think there's even there's a standard function in java to concatenate arrays. If there isn't a function in the standard library to do something, why do you think it is need often enough to need custom operator for it? Java is very much against the idea of special operators like that. Also how would define it's behavior in terms of types. For arrays of a:t1 and b:t2, what would be the type of a+b? Combining an array of primitives and an array of objects wouldn't be legal, but any other combination should be. The result would might have to pun to making an Object[]. Which will lead to a new potential typing hazard, something that people don't want more of in a language generally. Think through the basic sections of a JEP. What are the goals, the exact description of the operator, and what would the concrete implementation be?
I can see why you might want such a feature, but we're straying into operator overload territory with a language feature like this. More importantly, using arrays for concatenation probably isn't wise. Java's collections are superb and designed for all sorts of mutation operations, including appending. It's better to use a higher level collection (like a List or a Set) until you know your final element count, then convert to an array. Or alternatively, learn to use System::arrayCopy. It's an intrinsic method (the JVM may replace it with hand-rolled, optimised assembly) which means performance is about as good as it gets.
Good idea. but "+" operator is should be like prepend or add?
I wouldn't even waste my time thinking about it. The chance of this passing any kind of effort/effect test is as close to zero as possible.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you for suggesting this. The boiler plate code is verbose, but not a huge issue. The main issue with the builder pattern is that we merely move the constructor call inside the builder. The risk will continue to exist. But using a generator like lombok helps eliminate that risk.
Yes, but (I mentioned it elsewhere) the risk would continue to exist because the constructor call is merely moved into the builder. However, there are many suggestions around using Lombok to generate the builder, which will essentially eliminate the risk.