&gt; Give it a try! Geez, is there some sort of multi-level-marketing thing that I don't know about? Eclipse has it too, but like the other poster said, it's about getting it into a CI/CD pipeline and making it beneficial by the TEAM.
2.x is pretty disappointing. RestEasy + Guice is surprisingly easy to get working, even easier than Jersey 1.x was. It takes a little more work to get Swagger and replace extensions like Dropwizard's though. Since Jersey 2.x is not backwards compatible its probably less effort to switch and not accidentally have 1.x dependencies.
If your ide doesn't already do this you should switch to IntelliJ. Just sayin 
FindBugz: Finds things that really are bugs. Memory leaks, etc. PMD: Finds things that might be bugs: bad coding practices, code smells CheckStyle: Finds stuff that is most definitely not bugs. Too many tabs, etc. http://www.sw-engineering-candies.com/blog-1/comparison-of-findbugs-pmd-and-checkstyle
I've always tried to follow the advice you mention. As a more practical matter you can use a DI framework (CDI/Weld, Spring, ~~Guava~~ Guice) and that will help overcome some of the shortcomings of singletons and provide the simplicity you're looking for with something like the @Singleton notation. With this method you could potentially override or mock your singleton for testing purposes and for production scenarios.
As I've said in another answer, yes, you can. TeamCity has the inspections build in and they can be used with Jenkins via IntelliJ headless mode.
Better a slow compile than a slow runtime. It's a pity the installation procedure is stuck in 2003 (download this file, set this environment variable, edit this file to reference the variable you created, etc,).
I completely agree. Especially with today's ability to roll out updates frequently and easily, we can let the crashes happen, receive the crash notifications, fix the problem, and roll out the fix in the next regular update. A problem that is concealed in generous error handling becomes difficult to track down.
There actually an increasing number of Java or IT conferences with significant Java content which are free (NetBeans Days and DevFest as 2 examples)
You're right. But then again, I think that we can agree that the checker framework hasn't been marketed *at all* by the "vendor" yet
Just install sonar and integrate it into your CI build.
Hi, Yes, the video is going to be 1080p, but it will not be downloadable, for a few reasons. First, because it's youtube, so you can't (easily at least) download it. But second, I like the keep webinars as a live, engaged event. I found that it encourages a lot better engagement and putting it up on youtube. You can't really get your questions answered or talk to other people live if you're not in the event. So, what I decided to do is to simply host it multiple times. I'm going to try to change the hours as well, so that different timezones can tune into the event live more easily. Cheers, Eugen. 
1 email is ok. 2 is understandable. But if someone hasn't responded by those two, that is a no. Move on. Same with phone calls. Maybes for most people are nos. 1 phone call, ok. 2 phone calls, understandable, any more and you are an annoying pest that everyone hates. The other issue with zero turnaround, at least in my coworkers position, was that even when he said no, they basically just kept calling. When he told them he wasn't the head of the department they reached out to the head of development for the company. I know you really, REALLY, want that sale. But by being so damn aggressive you end up burning bridges. Where we may have considered JRebel, the software is now blacklisted in our company.
We strive to have clean, readable and unit tested code, only to hide portions of application code in the archaic, unportable, unmaintable mess that are stored procedures? No thanks.
I think the example is over-simplified to make a broad statement about programming. I think it needs more meat for it to be a viable explanation of a point. I'm just saying that a method that returns the size of a file is a very generic example with zero context. The author then uses this no-context example to push a philosophy as unequivocally better without any other supporting examples.
Re-goldening the image after changes was not fun. A 1 pixel difference would break the test. You would have to have a golden image for each browser type/version, just was not maintainable. We ended up leaving visual presentation to exploratory testing. Also, I suggest looking into Sahi instead of webdrivers for web application testing. Really helps when you have automatic wait functionality built in during Ajax calls. We plan on using the Sahi plugin with the Thoughtworks Gauge product due to be out at the end of the year. 
Hmm, I'm not familiar with that... link? 
Oh, that sounds awesome, thanks, I'm checking it out now. 
I absolutely hate clickbait titles like that. I wish people would stop making them, at least for tech articles. 
Would you give a quick example of a code contract (or link to one you like)?
Makes me wonder if the whole blog is one gigantic troll. I mean the one on making all exceptions rethrow as just Exception, and using ONLY checked exceptions? Come on.
Yes, of course! I normally program in C#, and there code contracts look something like this: public int size(File file) { Contract.Requires(file != null); Contract.Requires(file.exists()); Contract.Ensures(Contract.Result&lt;int&gt;() &gt;= 0); return file.length(); } (A nice mix between C# and Java there) So you require that `file` is not null and exists, and in case that is true, you promise that the result is going to be a non-negative integer. The thing is that these checks are done each time you call the method. The result is always check, even if the method had had multiple return points. Contracts give you greater faith in your code, as you know that the contracts are always fulfilled – otherwise they will throw an "uncatchable" exceptions failing your tests instantly. You can make the contracts on interfaces, so all classes implementing them have the checks done automatically. You can turn the contracts off in production in various ways. You can have invariants check, so you'll know as soon as the invariant is broken, and not when you start experiencing problems from the side effects. But as said, this is for C#, and I have yet to find a good solution for Java, though [JML](http://openjml.org/) is probably the best bet for now.
You might want to adjust the rules however. Sonar comes with a set of predefined rules for PMD, FB and CS. Most of the rules are fine and reasonable. But occasionally you'll discover that you violate some weird rule that doesn't really make sense. Also in general you should keep the number of rule violations 0. Once you allow violations in your codebase to stay you'll never get back to 0 again. This is a nice example of broken-window-phenomenon. If you start using Sonar for a legacy project with existing code then the number of violations will most likely not be 0. This of course doesn't mean that you should not try to get it to 0 in the long run. All violations are classified by severity - blocker, critical, major, minor, info. Naturally you should fix the most important first. Again most of the default Sonar severity settings are fine but occasionally you'll find some stupid rule which is market as critical (or vice versa). In that case you might want to adjust the settings. Remember that sonar offers just another metric. Don't try to game the metric just to get nice numbers. Your goal is not to have 0 violations, your goal is to have clean code! 
Seems nice, but really, ensuring the file exists is out of scope of the size method. This should be validated before even reaching this method. Contract.* seems similar to [Spring's Assert API](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/Assert.html). Again, this should be done in a controller method before this service layer stuff is ran to check the actual size, assuring proper error handling.
Thanks for the detailed response! It seems like these would be useful in static analysis as well, and act like assertions, etc. It makes sense that failed contracts can't be recovered from, but then doesn't this potentially cause bugs that reach the release version from being more difficult to debug? For example, if people who run the release version have a contract fail, it won't fail with a meaningful message, even though the version of the program with contracts could have provided one.
Thanks for sharing your thoughts. I'll factor it in as I move forward with my own product. Cheers.
This was a very constructed example – I used the one from the article. Check out [my interval collection library in C#](https://github.com/lundmikkel/C5Intervals/blob/master/C5.Intervals/Interfaces/IIntervalCollection.cs) for a real-life example. Regarding the Assert API: code contracts are similar to that, but can do much more. A nice thing is that you can do static analysis on them, generate automated tests (with Pex) and do a fine control of the deployment of the contracts into the actual code. Code contracts in C# use a rewriter that adds the tests after compilation. You can for instance only add `Contract.Requires` to public methods, ignore all quantifiers and `Contract.Ensures` and so on. This ensures that code contracts really aren't an overhead in production, even if you do elaborate tests in debug (like checking after each public call that a sorted collection is sorted). (Also see [my other comment](https://www.reddit.com/r/java/comments/3ib0aq/need_robust_software_make_it_fragile/cuf4b0q) for more on the subject)
I completely agree. This is a much better philosophy than "fail fast makes higher stability". A system is stable if it fails when it can't move forward without something.
There are situation though, where you can just return from a void function, if you can't deal with a parameter (especially if it's null). In these situations I prefer to throw (assuming I control the parameters) because not doing so would hide bugs. Again, it's a matter of contract though, because I can annotate the parameter as @NotNull.
Gosh, this looks beautiful
Sikuli tho?
You're right. That was a pretty naive statement on my part. I like the dependency injection idea, and as you stated, I also like the idea of keeping that as more of a last resort if your necessary complexity otherwise becomes too great. The settings thing is also interesting, although I'd like to avoid passing such a generalized context around. In my experience, at least in long term projects, that leaves too much freedom and eventually everyone start throwing everything into the context since it's so easy to do. Breaking it down seems straight forward enough though (e.g. handing only the EmailSettings object from a caller to something that needs to email, rather than the entire GlobalSettings object). Embarrassingly, it seems pretty common sense after you brought it up. I'll probably go about remodelling a few things for that reason ;) However, regarding this: &gt; Also, enums are not even really required. Whats wrong with a final class with a private constructor? I would say it's in favour of being explicit and how "defensive" you want your code to be against reflection. As we know, enums can't be broken by reflection and are inherently thread safe. In reality, even though that "Effective Java" book acts like it's a real threat, I can't see anyone going to that length to make a new object without understanding why there is only one in the first place. For me, it's being explicit where I'd like the singleton thing I mentioned. For example, at my job we have multiple people working on a project where we need to add stateless implementations of a "Parser" interface. New ones are frequently added, so the parsers are picked up reflectively at the start of the application by an annotation with an ID. A separate config DSL that references the parsers by their IDs is processed at runtime . For example: @ParserId("MY_PARSER) public enum MyParser implements Parser { INSTANCE; @Override ... } The provider/factory class that does the reflection picks them up and stores them referenced by ID. With that you can get them as the config DSL is processed into its own model: Parser p = ParserProvider.getParserById("MY_PARSER"); In this situation, the enum for each parser is awkward and kind of seems like overkill, but the parsers are also in their own subpackages, meaning making a package protected constructor isn't possible for each one. It would be cool if Java let you be more specific as to what packages can access what, for example: @AccessibleBy("com.myapplication.package1.*") @AccessibleBy("com.myapplication.package2.subpackage.*") void MyMethod(){ ... } Though, I'm sure there are a million reasons why that doesn't exist. Anyway, this is the kind of situation that I feel a singleton type would be useful for explicitly defining how my class is supposed to be used. It wouldn't hurt testing because these singletons (at least in my example) hold no state and implement mockable interfaces for describing their entire functionality.
The developer is the most important user of the application. Period. Without designing the application around the developer, releases become harder to do, meaning they happen less often. Bugs get harder to track down meaning a more unstable app. If you make your customers the most important user of your application, the chances are they will go elsewhere because it'll be slow and buggy as hell, because you haven't given your developers the tools and ability to fix , test and deploy because they weren't important enough. 
Saved me. Had a series of interpretations for (internal) message types, with an assertion error at the end (rather uncharacteristic for the project, but personal preference is to throw error on confirmed bug). Turns out, when I passed in an empty file, it failed to recognize it as a file to overwrite the old, and I had a error in my face. TL;DR: Forgot groovy truthiness coerced empty string to false. I fixed the logic, but the assertion stays because something tells me if anyone ever touches it to add another message type or change the format, it'll scream nice and loud about it.
Off by one, should be &gt;= maxOccurence, and maxOccurence should be initialized to 0. Otherwise, it's already linear time. Not sure why you posted this thread though...
That's the whole point : the caller should ensure the file exists, so the method should signal an error if that doesn't hold.
Hmm, sounds like that may cut down on some of the headache we're experiencing. I'll check it out and try to convince my superiors to allow me to add some more dependencies to the project if it's a good fit ;) Thanks!
Why would you need a double check?
Way, way too slow paced.
the trends in the java world are probably more toward moving to other jvm languages rather than spring whatever trash
lets not
Why and how, what prompted the move to those technologies?
why not?
Totes mcgotes. 
Side note: Netflix dumped REST, moved to RPC, then [created Async REST named FalcorJS](https://www.youtube.com/watch?t=602&amp;v=hOE6nVVr14c) (uses RxJS under the covers). Coincidentally, Facebook created something similar independently, called Relay/GraphQL. So it looks like the trend now is to move to Async REST.
Or just use CAS which is far better
AAAAA (american association against acronym abuse) would like to know what does CAS mean in this contest
I don't think you "move to big data"; it moves to you. The data has always been there. But now you have enough knowledge, resources and tools to collect and analyze it.
Async is definitely an interesting path to explore for REST. I won't cover it in this webinar (since I haven't done it yet), but I might explore it for the course, as a bonus module. Cheers, Eugen. 
I find it more effective when there is less on the slide, and you speak the words. It's can be pretty boring watching someone just read their slides. 
You just said the caller should check if the file exists, and the method should signal error of that doesn't hold. That implies two methods, does it not? My point is you've validated it existing once at a different level, why would you need to do it again? That introduces technical debt if you need to refactor.
Totally agree. Some of the slides are a bit information dense but I was planning on spending more time on each point than what is written. For example, When I point out that G1 doesn't handle large objects as well I was planning on taking the time to talk about humongous space and how it works and then the next point about it being better in future jvms was going to lead into me talking about when collection of these objects happens.
Java the language: It's rather dull, lacking in some features for convenience. It was never intended to push the envelope on programming language sophistication, and it shows. Having said that, its very dullness makes it easy to pick up because there are no surprises. Java the platform: In its early days it was terrible. Java applets were soooo slow, and it made an impression that still lives on. Thankfully applets are no longer widely used. Performance and the garbage collector have improved and should no longer pose an issue for well written programs. It is very popular on servers, and the foundation upon which Android is built.
Ah! That explains it! Thanks a ton for the feedback, when I questioned my teacher he was unable to give a detailed explanation, almost like he didn't know how to explain it (or the more likely, not understand how someone doesn't understand something so simple). 
You must know Java to write Android apps. Is that what you were asking?
It's just not fashionable to say you like it. Java, and to a further extent Python, allow novice users to create functional, albeit sloppy, programs. Experienced programmers often run into these applications and either a) have to fix/modify them or b) have to defend why doing things "the right way" is important if Joe Blow can spin something up in Python. Therefore such languages get a negative reputation, regardless of technical arguments, because of the environment they create. Just keep in mind that unless you can immediately identify the technical argument someone is using against Java or Python or whatever -- they are likely just running their mouths and you should ignore the comments. Their anecdotes aren't going to help you be a better programmer. 
i've been working almost exclusively in java for the last 15 years. java is big. its wordy. until recently (with Java 8 AFAIK), its difficult to get anything done in a concise amount of code. 
I..I think we're saying the same thing. =)
Wouldn't you throw an exception at the system-level as you put it, and let it bubble to the user interface, though? Best of both worlds.
Isn't Dalvik obsolete since ART entered the game? That is eliminate the need for Dalvik to run apps?
Thanks a lot for taking the time to reply with such informative response! You answered every question I could have though of and quite a lot more too. 
Its bytecode is still used. ART compiles it to binary at install time.
I'm on the fence if this guy is a troll. He seems like smart dude, but definitely has some polarizing views. His rant on how getters and setters are evil, and the opposition to DI containers were particularly face palm worthy.
This looks like it will be an absolute nightmare for them to maintain as the language continues to evolve in the future. Don't get me wrong, I think it will be a huge improvement for the language, and could be the last nail in the "Java is slow" coffin; I just see this coming up in 5-10 years as the major roadblock to the next big language feature.
Ah! Thanks a lot!
I've seen similar regressions with event listeners before, in my opinion the logical solution is not to scan bridge and synthetics in the first place. 
Like, a month ago. 
Just remember that teachers usually don't have years and years of coding experience outside the academic environment. You'll find the most helpful info at places like stackoverflow.com, javaranch.com, and oracle. I've also found that Professors tend to use outdated development tools and practices. Use Eclipse or Netbeans. Use Subversion or Git when developing to save your code, and commit often (You'll tank me later when you break everything and are able to revert). Learn how to debug in your IDE and make your life 100 times easier when tracking down why your program is failing. USE JUNIT TO TEST YOUR CODE! Finally, if you're coding something that seems repetitive and hard, and you think to yourself "there has to be an easier way to do this", there probably is. Just google for it! Hope this info helps you out. I was hooked on programming after my first Java course, so I hope you enjoy it.
Your proffessor may be right, Java is one of the most used programming languages today. The Stack Overflow developer survey placed it behind Javascript as the most used programming language, and it appears to be the second most used language on Github. Java isn't perfect, no language is. And because it is used so often and by so many people, a lot of its detractors have seen a lot of poorly written stuff by other developers. Its a pretty verbose language, but its not that terrible. It isn't as effecient as say C, but unless you need to squeeze every ounce of speed out of a program its not a huge deal. Its one of the better server-side programming languages. It has a ton of libraries and frameworks to draw from. Don't try to think of languages as good and bad. Think of them as tools. You'll probably spend a lot of time learning new languages and finding out what they are good at. Almost all of them are perfect to perform a specific task, and not so great at performing others.
Early versions of JavaEE really fucked the perception of the language, to the point where Spring was considered lightweight. I've seen a definite trend over the last ten years to make the language and frameworks simpler and simpler. For example, JPA over JDBC and EJB. And then things like Spring-Data-JPA takes that ten steps further. Replacing pages and pages of XML with annotations. Finally things like spring boot come along and get all opinionated and cut your setup and configuration to nearly nothing. The language has gotten much less verbose over the years too, with generic type inference and lambdas/functional interfaces. C# style properties would be a nice addition. 
&gt; Learn how to debug in your IDE and make your life 100 times easier when tracking down why your program is failing. USE JUNIT TO TEST YOUR CODE! My C++ teacher banned us from using debugger, effectively making a simple task a difficult one. I'll check out JUNIT. Regarding outdated tools, he prefers to use Notepad++ (which I know isn't outdated) while I was considering to use somewhat more advanced tools like Sublime or IntelliJ, any though?
Aiui, dalvik was a just in time compiler, compiling dalvik bytecode to native code when the program was being run, when the VM thought it would be beneficial. This is still how the JVM works. ART is an ahead of time compiler, translating the bytecode to native code when it's installed. This allows android developers to not worry about what architecture your phone is running, while still having the code run natively. I'm about 75% certain that's correct. 
~~Blog~~ Corporate spam. Yet again.
Notepad++ can be pretty powerful if you take a few minutes to explore the plugins, I actually prefer it for little stuff that doesn't require a full IDE
That was written 18 months ago, but in that time, I'd definitely say yes if you already know and use Spring. I recently started a new project using Spring Boot and so much stuff just works out of the box without writing my own config.
Any specific plugins you'd recommend I'd take a look at?
*"Spring is now so complex that it has it’s own framework, Spring Boot. A framework for a framework"*
Spring Boot is nice, no XML at all!
&gt;All of this being said, I think that Spring Boot is the real deal. Doesn't really apply on this article. 
Java is slowly transitioning from bad to pretty reasonable, but there's a lot of legacy; Java calls this "stewardship". What this means is that the Java lead developers realize that there are a lot of code bases out there (remember, 3 billion devices run Java!) that would horribly break if they suddenly decided to fix their old mistakes. Java is a lot less innovative than C# for instance. I love C#'s auto-properties, but doubt we will ever see something like that in Java. Something like "Optional" which is introduced in Java 8 is just a patch job for something they can't go back on. That's not to say the Java world is at a standstill. Java 8 also introduced lamba's, something really nifty from functional languages which allow you to work with sets in a more fluent way. With Java 9 project Jigsaw is coming, allowing Java to be more modular. The future of Java actually looks quite promising, so now's as good a time as any to join the fray. Java itself is neither good, nor bad, it's just a language. Is English good or bad? It's certainly not perfect, but pretty straightforward to learn and offers a lot if you want to dive deeper.
I've built production systems in spring and spring boot but vert.x is really growing on me now.
What has been the big advantages to vert.x over Spring Boot? Any good places to get started?
First off, remember that programming isn't just about the language. It's about the ecosystem, tooling, and community around it as well. Java the language is fairly mundane, almost boring even, especially before Java 8. Plus there's a lot of historical baggage, and a lot of non-programmers who associate Java with Java *applets* (most Java code is server-side - in fact, you'd probably be surprised how widespread Java really is. Huge portions of the backends for Google, Netflix, and Twitter run on Java (or JVM languages like Scala) for starters). Java the ecosystem is very mature with lots of excellent tooling and a wide array of various libraries and support. Some examples: **Polyglot**: the JVM isn't just Java - there's other languages that run on the JVM, most of them can interop with Java code fairly easily, and some of those languages are pretty interesting, such as Clojure and Scala, or useful for things that Java isn't great at (e.g. scripting with Groovy). You can even run things like Ruby and Python on the JVM (JRuby/Jython). The only other ecosystem I know of with this level of integration across multiple languages is .NET/CLR, which is still pretty Windows-focused despite the recent moves by Microsoft to open source it. **Excellent IDE support**: Java's verbosity can be annoying at times (especially before Java 8), but it led to some very good IDE support, which is important to have for any language. I strongly recommend checking out IntelliJ (community version is free). Seriously, I can't stress how important good IDEs are, and not just for Java. They make it easy to explore APIs by showing what is allowed or expected where as you type, make it easy to refactor code (find/replace breaks down pretty fast), integrated debugging and testing, plus all the usual editor niceties like syntax highlighting and checking. **Strong conventions**: some people get frustrated by this, because you have to learn the conventions to even get started. The advantage though is that most projects follow similar conventions, and the tooling discourages breaking those conventions without good reason, which means a lot less mental overhead when switching between projects. **Mature tooling**: excellent debuggers, static analyzers (findbugs/checkstyle), testing frameworks (JUnit/Spock/Scalatest), build tools (Gradle/Maven), etc. **Strong open source community and libraries**: there's a huge host of open source libraries and frameworks available for Java that are stable and well-maintained.
Mostly agree, though I would strongly recommend IntelliJ over Eclipse.
I tend to make a distinction between "allowed" exceptions (i.e IOException during reading of content over the network, XmlException when parsing...) and "programming error" exceptions such as NullPointerException. The first category means something went wrong that's supposed to sometimes go wrong, whereas the latter means I screwed up my code.
fully asynchronous and scalable applcations you can embed vert.x in a spring application if you want or use spring libraries in vert.x but don't block the main event loop 
Finished the presentation, if anyone is interested I can post it onto youtube (depending on company security policies/etc). I fubbed up a few things at the end (I had an incorrect understanding of object size) and I know I talked fast, I was getting out of breath.
Kamon can be used for monitoring Akka applications. One can also send Akka metrics collected with Kamon to services like NewRelic and SPM from Sematext. c.f. http://blog.sematext.com/2015/08/26/akka-monitoring/ for an example.
Actually the most *likely* scenario is probably that your teacher is an *awful* programmer and doesn't *have* a reason. There are *books* published by professors so clueless they actually argue that Java is pass-by-reference. If what someone is telling you doesn't make sense or sounds like bullshit it probably is. There is *a lot* of it in this industry so be sure to think for yourself.
Fits with the SomethingWithAReallyLongClassNameFactoryFactoryFactory style embraced by spring 
We use Spring boot in prod. Slowly purging Websphere.
Oh man, I just googled the java code configuration because I didn't realize there was such a thing. That looks horrible.
Not at all! Your configuration code is kept isolated and there is less annotation magic left to baffle your support team. Plus you can debug into the startup, configuration mistakes can be found at compile time and you get all the benefits from your IDE without a plugin like Spring IDE. We use Java config as the default now and it's been very clean and understandable.
Really nice work. Thank you for starting this project. The printout of the test code with debug info is very nice!
Actually, yea I have been bit in the ass a few times recently because of config issues, and trying to debug into that was just a nightmare. I can see how having a clear point to step into would be helpful. Nice idea dude.
At the end of the day, this is the right answer. The right tool is the one your developers enjoy and write good code with. 
Looks good. Thank you.
Variation on 2. Perhaps the user should sign up via a website hosted in the cloud where by a unique key is generated per user. When the user supplies their credentials they are authenticated and the key is retrieved over TLS and then used to decrypt the data. I think the only issue would be how to read an appropriate amount of data which you can operate on. If you decrypt the whole file it *will* need to be stored somewhere and as you said it is Gb in size, and the user will have access to it then
I like this. You could even watermark the data in some non-obvious way
Well, the first logical step might be to admit defeat. I don't remember the source, and I could not find it on mobile, but there was a quote: &gt; Trying to prevent digital information from getting copied is like trying to get the water itself dry. So, the actual decision lies in your answer to the question: How valuable is your data? If it is valuable enough, you can be sure that someone will out the necessary effort to steal it. Even if you keep all the data encrypted someone will find a way to extract the keys. Someone will decompile your code or attach a debugger to see what's going on inside. So I think you should make an effort only relative to the value of the data you are trying to protect. The only realistic way to prevent your data from being copied is to prevent it from being transferred in the first place, which requires either a cloud based or black box based solution.
http://java.metagno.me/ :D
You would need to look at a code obfuscater to produce your final artifact. They will still be able to decompile the bytecode but the job is alot harder to figure out the program as Class names, member fields, local variables get mangled.
Do you mean update 60?
What OS do you use?
I would implement option 1 if people getting hold of this data was a significant financial/legal risk, and option 2 otherwise.
You could start a war with that kind of talk!
Maybe put sane restrictions on the amount of data a user can access to prevent scraping? I'm assuming each user isn't interested in *all* the data. In most applications users are given out small amounts of data by request (or by requests of the platform that the user is using, e.g. the google maps app). Encrypt your data, by all means. Putting up that fence **will** prevent many people from getting the data. In the end, you need some way to restrict access to the whole dataset and prevent scraping. Even this can be bypassed in most cases, but it's another, bigger, fence.
http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html
perhaps a mix of 1 and 3. what percentage of the data needs to be missing in order for it to be unusable. If you can give the user 99.85% of the data and have it be totally unusable to them then they need the server to access the full data-set to be able to do anything with it.
If the data exists unencrypted at any point in time in the user's desktop's memory, it will be impossible for you to prevent the user from getting hold of it. So if you want 100% tight protection, do it in the could.
But that simple way which apparently really impresses you is the same way it works with all of them... Edit: lol, you people are pathetic. How does (correctly) pointing out that other IDEs support the same functionality deserve so many downvotes? You're just proving my point about your blind and unsubstantiated fanaticism...
That's correct. You could use timings to make sure nobody is debugging, but that is not easy to implement because they will get the key, the only difference is how long it takes for them
I need to know more about the use-case to suggest something appropriate, but key things first. If SOFTWARE has access to data, you must assume USER has access to data. There is no way arround it. If your software can fetch the data, sophisticated enough user will be capable of doing the same. Whether you use crypto, obfuscation, cloud- all of these can be simulated/reverse-engineered/intercepted etc given enough motivation &amp; time. Java apps, even obfuscated ones, are relatively easy to decompile. but skilled people will do the same even for obfuscated Windows/Linux binary executables. Worst case- user can take screenshots or photos and run OCR on them. The most difficult thing to crack is probably hardware dongles. But depending on how they are implemented, you can work around them a lot of the time or emulate them.
IMHO, the fundamental principle of Optional is "Optional object itself cannot be null". Never make it null, and stop worrying about it. Yes it can but whoever giving it or producing needed to be burnt at a stake. Or else the Optional class solves nothing, and even worse you have to null check the Optional also. Now since we can't really burn the one gives you a null Optional since he/she maybe far far away, just don't make Optional a parameter type. Don't give me Optional, I don't want to null check it. And make Optional is returns just to be sure we won't return any null Optionals. And there derives the rules.
&gt; Why should I use Spring Boot, over using the standard JEE / tomee? Try implement test code you want to run standalone that depends on JavaEE CDI as opposed to to a standalone test that depends on Spring IoC / Guice. Getting it to work outside something like Glassfish (uuuurgh) is a pain in the ass. The whole point of IoC is to make it easy to swap out shit for testing and then they make actually testing it a pain in the butt.
No OpenJDK 8 in Ubuntu LTS...
Avoid Optional.get where possible. For example, the comparePostcode method can be written as follows: public int comparePostcode(Address other) { return this.postcode.map(myPostcode -&gt; other.postcode.map(myPostcode::compareTo).orElse(1)) .orElseGet(() -&gt; other.postcode.isPresent() ? -1 : 0); }
Yeah, but if all he's gonna show to the user is the result of some processing on the data, it's not necessarily possible to derive the original input based on that.
I think the the argument that 'the performance might be ok, we don't know without profiling' fails when you are arguing for a purist, universally-applicable approach. The correct logic is 'without profiling a full range of cases, we don't know for sure if this is ok, so we shouldn't do it'. Certainly bad performance is a costlier problem than null pointer exceptions. And anyone who adds extra distribution to a system to resolve performance problems caused by an attempt to gain reliability has left the path of wisdom. An approach which is _both_ more strict and more pragmatic is never use optional, instead use @Nullable. Coincidentally it is faster, but don't let that put you off.
If the user's eyeballs can see it, the user can record it. If it ever exists in unencrypted form on the user's computer, the user can capture it in a memory dump. Option 1 is therefore the only way to guarantee that no one is ever able to grab it. Option 3 may be acceptable if the risk is just a lost sale here and there (as opposed to getting sued or something). Option 2 is ineffective and option 4 is infeasible, so those are right out.
 sudo add-apt-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java8-installer
Then it won't be water any more. It will be some oxygen and some hydrogen fiddling around and making new bonds with each other.
Err, but that's my point. It works exactly like that for my Eclipse setup. Navigate to a class it doesn't have source for and it automatically decompiles and shows the generated source.
Hmm. What about freezing it? Does ice qualify as wet?
&gt; I think the the argument that 'the performance might be ok, we don't know without profiling' fails when you are arguing for a purist, universally-applicable approach. My claim is: The performance will definitely suffer ever so slightly but unless it is significant, I prefer maintainability. Consider advice like "use `ArrayList` instead of arrays", "use streams instead of collections (for typical filter, map, collect)", "adhere to the Single Responsibility Principle" (which causes more objects to be created and more methods to be called). I think these are all valid recommendations. Their negative performance implications are negligible in the vast majority of cases so unless one of the special cases is proven by profiling we stick to them as a default.
&gt; Avoid Optional.get where possible. I'd say "where feasible". In this scenario I think the version in the post is much more readable and only slightly less save. Somebody would have to rip apart the `if` condition and the first branch to introduce a bug.
What we used to do with data is either service only the data that was required and do the queries on your own service backend. E.g solution 1 but charge per request. Give them the data and then make sure you add random seed data that only you know. This way if you see that your data has been copied you can take someone to court over it. The seed data must be a highly guarded secret as you do not want someone to remove the seeds. E.g Google Maps uses fake roads.
You prefer security holes? I sure don't.
Wahhh.
There is still the hope that with value types, the problem will go away. But they are currently targeted for Java 10.
&gt; It didn't used to do that before The Jadclipse plugin has been available and well known for about a decade... It's a become outdated recently of course, but there are now plugins for newer decompilers, for example, JD-Core (Java 7) and CFR (Java 8). Or maybe installing a plugin is too difficult, idk... Edit: unfortunately I think the Java decompiler scene *in general* is a little in flux atm; it's difficult to know which are going to be the best current options, and which are likely to remain the best options into the future... So many choices, such little objective comparison.
One last alternative implementation: return maybeLeft.flatMap(left -&gt; maybeRight.map(right -&gt; comparator.compare(left, right))) .orElseGet(() -&gt; maybeLeft.isPresent() ? 1 : maybeRight.isPresent() ? -1 : 0);
I've generally used 1 &amp; 2. Proguard makes obfuscation pretty straight forward (proguard still sucks, but it's free and it works). 4 really is no different than 3 as someone could heap dump (aka, equivalent tech skills to someone knowing how to decompile.) (FYI, I always build a proguard jar and a non-proguard jar to make debugging easier. In the rare cases where it's been a customer specific thing, I get them the "debug jar", get a stacktrace and then overwrite it. Not a perfect solution, but it's something.) One could provide a rotating/distributed key strategy where the data is encrypted differently for each customer. You keep key info in the cloud and pass it to users on a need to know basis. Use some sort of login information to safeguard that. Rotate keys regularly so that if someone steals the data/key their free reign is limited so that they'd need to steal a new key. The problem with that solution is that if someone figures out how to get your key, they just need to steal someone's password to get it. The positive is, if they stole their password already, they could have just gotten the unencrypted data from your application (aka, they had credentials to log in) so it's really nothing lost, nothing gained. The key here is making sure no single user uses a key used for anyone else. tl;dr - nothing works 100%
lol
I ain't saying it's a bad product, just that peoples fanaticism can be a little beyond what is actually reasonable and justified. I think some people's reactions to this thread have demonstrated that quite well tbh. :)
?
You could implement your 'protection' routines in native code (C/C++, Go, etc.), and bridge it with JNI. Of course, it'll greatly impact the number of platforms you would/could support, but it'll introduce a level up of complexity that may be beyond the skill-set of your average data-pirate. :)
The catch being that these cases typically *can't* be proven by profiling: it's the kind of stuff that does not stand out. It becomes death by a thousand paper cuts.
I have to pay for some expensive data, and I am building a tool on top of it. I'm not allowed to resell/distribute the payed data in raw form, but I am allowed to build tools on top of it. I actually change the data, compress and store it in binary form - so its not the full set of paid data, and its not easily accessible. But it really is a question whether the effort of locking it down is worth it. As you said, I am opting for #3 until there is a reason not to. Worst case is someone steals all the data and starts as competition with lower startup costs. But I *think* that is highly unlikely.
&gt; My claim is: The performance will definitely suffer ever so slightly but unless it is significant, I prefer maintainability. The fallacy is slower performance does not logically imply higher maintainability. Partly because performance is a maintenance problem; someone either has to fix it, or spend time proving it is ok. But the real kicker is that cost is worthless: Optional has methods that can't be either used safely or universally avoided without the use of something like @Nullable annotations. And if you have those, you don't need Optional. 
The naming of Dalvik and ART was very unfortunate and causes confusion. Android executes applications which are Dalvik bytecode. It did, and still does. When ART came along, the naming distinguished the previous runtime from the new. The previous runtime was now called "Dalvik" and the new runtime called "ART". The old (poorly named) 'Dalvik' runtime compiled an application's Dalvik bytecode into native processor instructions as the application was run. The new (confusingly named) 'ART' runtime compiles an application's Dalvik bytecode into native processor instructions when the application is first installed. When an OS update occurs, all of that ahead-of-time compilation to native code is thrown away, and every application is re-compiled from Dalvik code into native code. Please note that the new ART runtime is still totally Dalvik bytecode, and is compiled to native code (just compiled at a different time). The advantage of the new runtime: applications are compiled to native code only once. (Or whenever the OS is reinstalled.) No re-re-re-compiling of the same Dalvik code to native code. Since the compile is not done as the application starts running, the ART compiler can spend a bit more time compiling to better faster code. The advantages of the old runtime is that you don't have this lengthy re-compile the world step as part of an OS upgrade. An application takes up less of your storage space (eg, SSD or SD card) because the native binary code is not permanently stored. Rather, it is recreated in memory as it is needed to execute the application. I hope that helps. 
&gt; You know, maybe some people just don't agree with the premise of your argument. My argument was that other IDEs do the same thing that person mentioned originally and have done for many years. Which is a fact. It doesn't matter if people "agree" with it. &gt; Here's the part where you ask me to quantify and list specific examples, so that you can bat them down. Because you know of an Eclipse plugin which can approximate the feature, in combination with some other plugin. Or something along those lines. Not really... Please don't try to pre-empt what I will say like this... I *agree* that IntelliJ is great, and better than the competition at a lot of things. Some of the things you listed are good examples, to varying extents. I just think people get ridiculously tribal about it, to the point they slam the alternatives without actually having a good understanding of them. For the record though, since you brought it up, no matter what you say about "approximations" I have seen people lament the lack of IntelliJ features in Eclipse a number of times when there is OOTB keyboard shortcut to do the *exact* same thing they just didn't bother to look up... (That's not to say many of the comparisons and criticisms of Eclipse aren't valid...) Regardless, and this is the important part: **none of my criticisms before this comment have been of IntelliJ IDEA**. I have only criticised the fandom (and it *is* a fandom). Honestly I'd probably use it more myself if I didn't do so much OSGi development, for which bndtools for Eclipse is still better than anything else I've used.
&gt; Java started slow, but is gaining momentum I'm not sure I'd call 7th place "slow". This is the _top_ 10 after all. It's been generally popular for quite some time now. How many languages is it truly competing with?
&gt; That horse looks a bit tall for you from here Yes, I did edit out that bit about being confrontational before you replied, since I accept I was being too... I was still right though. &gt; &gt; they slam the alternatives without actually having a good understanding of them. &gt; That didn't happen in this thread, so I'm not sure why you would start this discussion here in the first place. lol sure, when I correctly pointed out that other IDEs could do the same thing everybody just took it at face value and accepted it :) &gt; by more backpedaling. All my comments are consistent with one another. It is only the assumptions you made during the course of the thread which have caused you to get confused about this. **Edit:** Literally my first comment in response to you started: &gt; I ain't saying it's a bad product So to say I back-pedalled on that point during our conversation is pretty silly...
More like "Java Users Started Using Github."
I honestly don't understand the point of Optional. It solves nothing because of the way Java references work.
bay area. that's about it. 
Everything is better than that God damned Websphere! Good for you for removing that crud. 
Ugh, debugging is in my mind one of the most essential things a developer has to know. I know a few people that can't debug efficiently, which immediately leads to them ignoring the bug until somebody else solves it. 
If you just use isPresent and get, its indeed just a more explicit way to say null, but Optional also has a bunch of methods letting you easier work with potentially present values without having to ever manually ask if it's there.
Seems to be now in decline.
This may not be exactly what you are looking for, but the way I learned JPA was through practice. I used a generator built into IntelliJ (apparently there is one in Eclipse as well) to generate entities from a db schema. This generator was not that great at doing relations between entities, and the generated hashcode and equals methods were wierd. So I went from there with just googling sutff like 'how to do many-many relations JPA' to fill in the gaps that the generator left. Within a day, I had mapped out all the tables which I needed for the project I was working on. I understand that doing this is not a tutorial at all, but this is how I learned JPA in a day! Well actually this is how I learned enough to do the project I was working on, but then again isn't that all that you actually need?
Use yeoman and generate a jhipster skeleton app. Create some entities and various relationships. Make a few services, rest controllers, repositories, and dtos. If you're not familiar with Angular, use curl (or a rest client) for validation or you can write tests. Edit: There are sample entities, services, controllers, etc already in the generated app src to look at.
Man that is ugly
PHP staying steady! 
&gt; It solves nothing because of the way Java references work. Care to elaborate?
&gt; The fallacy is slower performance does not logically imply higher maintainability. Classic strawman. So I guess you're just trying to be right not to discuss? &gt; Partly because performance is a maintenance problem In the overwhelmingly large majority of cases it is not. A typical Java program is full of performance impeding indirections, object headers, instantiations and more. &gt; "Fix everything which makes this program slow." Said nobody competent, ever (and, just to clarify, neither did you). In most cases nobody will give a damn about loosing a fraction of a percent of performance if the upside of that change is more maintainability. Which makes sense because in most Java-specific circumstances better hardware can replace programmer time at a much cheaper price. Hell, you might even get that fraction of a percent back in a minor update! In the very few other cases where it matters, somebody will profile and improve the code. And in my experience it is likely that they will find a much better improvement than the constant overhead of one additional instance. &gt; Optional has methods that can't be either used safely or universally avoided without the use of something like @Nullable annotations. Why is that? (I assume because the `Optional` itself might be `null`?)
I'd guess the rise of Android might play significant part here as well.
&gt; The author misses the point entirely. Nice application of a quantifier in the first sentence :-) &gt; translating between them can be clumsy If it was easy, we wouldn't have been discussing this topic for the last decades. &gt; A simple example that the author missed entirely is inheritance. Inheritance isn't necessarily foreign to extensions of the relational model. It wasn't a part of the original model, but if you allow yourself to think out of the purist's box (and people have heavily, in the 90s), then an ORDBMS like Oracle, PostgreSQL, CUBRID, Informix is certainly an answer to that point. &gt; with different concrete classes. There are plenty of other cases, such as storing an object containing a LinkedHashSet These are implementation details, which can be neglected if discussing on a high level. &gt; Row order is undefined in relational algebra Again, in the original form: Yes. But this has always been heavily debated and just because E.F. Codd and C.J. Date (and others) have always been such strong proponents of the original pure model and that model only doesn't mean they were absolutely right. SQL has always embraced multisets / bags, which are much more useful than sets. If you allow SQL to be a *superior* implementation of relational algebra, then - in a way - relational algebra *is* capable of row order. &gt; SQL is what we're stuck with. It can be improved or replaced, but that just means that the problem is solvable, not that it doesn't exist. That's the conclusion of the article indeed. And: The problem is an implementation problem, not a conceptual one. 
Netbeans has one too, for those that prefer that IDE
Also, what about all of the legacy APIs that were not retroactively changed to support this feature? 
I would say this is good example of "black and white" thinking - "This does not resolve all problems 100% so it's terrible". &gt; The whole point of this feature is to avoid mistakes I don't agree with this at all. The problem with null is that its not only mistakes, I would argue that mistakes are just a tiny fraction of problems. Main problem with null, is that often you choose to use it because there is no alternative. Now the alternative exists - when you need empty value, you use'll use Optional. 
Pretty cool programming exercise, although the wallpapers turn out pretty ugly. Maybe this interests you: http://codegolf.stackexchange.com/questions/22144/images-with-all-colors
Option [1] is by far the safest, if it does not work for you for some reason, I encourage you to read my article *[Protect Your Java Code — Through Obfuscators And Beyond](http://www.excelsior-usa.com/articles/java-obfuscators.html)*
I never use a debugger. I deduce &amp; read the code and write some tests. 
Heh. I remember doing this back in '93 or so, but in QuickBasic, 256 colors, 320x200 :D
That's good to know. I've been having to setup puppet, foreman, and all that jazz and I just can't stand Ruby.
What a load of crap. I'm not against companies publishing articles with useful/interesting/novel information, but this is simply marketing (and bad marketing by the way) and no one here is going to learn anything from this piece of advertisement. I'm appalled that this post has 8 upvotes by the time I'm writing this. Seriously? I'm betting on fake accounts to game the voting system. That's how you get mods banning corporate posts. Don't ruin it for the other companies at at least put some effort in producing actual content (jooq, rebel labs, etc). Edit: Instead of blocking users and deleting posts, can the moderators block spam links to specific websites that are known to violate the rules?
Can you explain this line of code to me? I understand the (fileName.endsWith(".png") but I have no idea what is happening after that. 
I disagree - jooq, rebel labs as you say is everywhere and guys shared their achievement. What's wrong? Envy? What if I want to develop something similar? How can academic knowledge (that you pitch) help me? My opinion that content must be promiscuous!
I'm not a fake and upvoted
Lol, I would've not upvoted the link, if hadn't post your comment!
That was a well written article. But I didn't see any mention of trade offs. if you encounter a bug in production, resolving issues is often tougher. The stacktraces were garbage. At least that was my experience in the past. What I would really like to see is something that says whether obfuscators are really worth it. Sure the casual hacker might be dissuaded, but someone who really wants your logic can still get it. You seem to indicate just as much in the article (i.e. they are flawed). The AOT compiler might be interesting albeit expensive.
I am not really arguing that the verbosity of the language makes it hard to maintain. Actually I have noticed that less verbose programs (because you can make any program verbose if you just make method and variable names long enough) are harder to understand. One could make the argument that having a standard convention of naming variables and methods such that they describe what they are doing in a natural way would work quite well with Java. But that's not what I am talking about. And honestly, I don't have time to list everything that I am talking about. I think it's the sum total of all of the little bad decisions, from File I/O to String not being treated as char[] and char[] not being treated as String. And just the little quirks found in the helper classes. For example, to continue with intentionally being verbose, the BufferedReader.readLine() method will trim all preceding and trailing white space on the line being returned. Why? In many situations, that white space matters. Why not let me decide to trim the white space? Why not let me describe what is happening rather than hiding it?
What is the language/tool you are talking about? .NET?
AssertJ and scalar eat do great jobs 
Is there a problem that you can't solve with Interfaces? As my replies above suggest, a simple "Sortable" interface would provide a uniform isolation between all sort algorithms and all users of those algorithms no matter what they are trying to sort. Java added other interfaces such as Collection, List, Comparable, etc. to solve problems and improve things generally. So why not some kind of Sortable interface? 
&gt; If you're making a simple app they aren't too bad. They are an easy way to develop a single app for multiple platforms. More of a tool for boring business apps than anything cool. I think that's a fair statement. I was more general than I probably should have been.
Ah. I've been away from doing anything with Java for a while and since then it was updated. 
No.
It's a static virtual procedural language with rtti, single dynamic dispatch, mixed inheritance
First rule of Java is you don't talk about Java. But since you broke that rule, here: https://en.wikipedia.org/wiki/Java_(programming_language) And in case you are trolling: http://i.imgur.com/YG9xrJN.png
Because it's not smalltalk. 
ha, thankfully so!
Thanks!
There are/were some valid reasons for it. * Startup time. * High memory usage * Back in year ~2000, when java attempted to get popular on desktop, it was noticably slower compared to C/C++ software. It left a sour taste and people are slow to change their minds... * Swing has its own distinct look &amp; feel. But I feel these consistency in look &amp; feel arguments are overblown, Microsoft has 10 different looks &amp; feels in different parts of Windows, and people seem to be fine with that... * Applets sucked and people equated that with Java desktop experience. I think in 2015, it's no better or no worse than the competition. Maybe except QT, I've only heard good things about QT, although I've never used it. I have yet to use JavaFX though. Swing has got much better around Java v1.5.
I'd love to meet that sexy sexy wizard.
Ah. I see. So it really does exactly what it says on the tin. :)
Are Google and Wikipedia down again?
Those were the days, my friend.
I only understood that last part because I'm part Danish. That's why I'm so happy all the time. :D
jokes aside, yes it is OO. Kinda. It's the canonical example of an OO language, although Smalltalk is definitely more OO.
Ok *why* do you want an object-oriented language? Don't just pick it for buzzwords. Do you know OO concepts? Is this your first programming language? Even if the answers to that are "No, yes", I still recommend Java, but depending on what you want to program you might want something else, like Scheme/Racket or perl.
hmm.. i'll have to look into this. and why i would prefer it over typesafe config or archaius. 
&gt; you can't add that functionality after the fact like with a mixin trait a la scala But you can, by using default methods. The only difference is that Scala's traits also allow you to add new state, whereas Java's interfaces only allow adding behavior (without adding new state). https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html
BufferedReader does only trim line terminator characters (\n, \r), not whitespace.
AssertJ is a great library, but Scott's goal is to save developers from using specialized assertion libraries in tests. I think it's more natural to express assertions with the same API that used in production.
Luckily we covered the Fork-Join framework. Thank you pal for this book! Gonna buy it and read it whenever i got time!
People need to stop thinking about optional as a null-replacer. Optional is a container. It can store 0 or 1 element. With that, you can do stuff with it, like map, flatMap and orElse. An optional is more like a list than anything. If you ever find yourself writing a method like /** * @return null if there are no foos, otherwise all the foos */ List&lt;Integer&gt; getFoos(); You should be shot. Everyone agrees. But when the method look like Integer getFoo(); People suddenly think that it's a good idea to return null as an indicator of presence. It isn't. You still return a container because containers can give you information about presence *and* you can send messages to containers - as opposed to null. getFoo().orElse(getBar())
The biggest problem with concurrency and how it is *taught* with Java is that people get the impression that it is a good thing. Using locks to share mutable data between threads is a terrible way of building a system. Locks are very hard to get right and the worst part is that a lock based system may look right and operate fine while still harboring a problem which only shows up in production under very special, hard to define conditions. This gets exponentially worst the bigger a system grows because locks don't compose (See https://en.wikipedia.org/wiki/Lock_(computer_science)#Lack_of_composability ). With that said, there are times when you can't avoid locks. But more attention needs to be given to the alternatives. I would recommend some of Rich Hickey's talks about values and state. It should really get you thinking. Also learning some Clojure is a good idea too. It has an interesting take on concurrency and mutation. 
It's a matter of perspective. Like, yesterday i dreamnt that i was selling dolphings for my cat. I hope i could help.
extremely so.
I'm pretty sure that Goetz also architected the changes to concurrency that came in Java 6 or 7. He **might** know a little about it. It is a great book and I came to recommend it. 
Whoever wrote that fork-join article sure does love the letter m. Why start almost every variable with m?
The concept of presence, or rather the lack thereof, is what null represents. In fact, VB even goes so far as to use `Nothing` as it's keyword in order to make it 100% clear.
Tech books are great but a heavy load for an introductory student! I'd start with producing some code that exercises the consequences of non-thread-safe code.
This is actually quite handy! I'll totally use this in v2 of my REST api
Awesome!
If anyone can explain what the disadvantage of prefixing member variables is, please do so. This is just like at work. No-one can say it's a bad idea, except it's no longer in fashion.
That's true, and that's the same argument I've heard at work. To me it just doesn't make sense, I see conflicts quite often in classes that don't adhere to the prefix standard. Sure, the IDE notifies you, but why rely on the IDE for the sake of one character per member variable? It's logical to use a prefix, and if any group of people should choose the logical choice it's software engineers. 
This is very similar to JHipsters XAuth option. Very good for having quick security. 
Here's the implementation: http://www.docjar.com/html/api/java/io/BufferedReader.java.html Tell me where it ignores whitespace. Alternatively, write a sample that reproduces the issue. You'd be the hero Java needs, not necessarily deserves...
&gt; Good gawd, that brings back horrible memories of writing Windows apps using C++. Hungarian notation for the loss. The hungarian notiation used in Windows programs was to store TYPE information as early C/C++ and visual studio was pretty poor at typing. The m, _, m_ prefix denotes SCOPE information which is actually useful if you've got some particularly hairy objects and routines. It's saying "Hey if you mess with this state you better be on your toes" This is the rallying cry of the immutable by default languages and the pure functional languages which is all the rage on HN and /r/. So I still think it's very useful.
Oh, I understand. But the idea of prefixing variables gives me the shivers. 
I can't understand the Actor model. Every time I look at one of those projects I have no clue.
Serious question. Where can I learn about all of this stuff. I see it all the time but know very little about it. 
I'm currently in the middle of refactoring a database where the smart dude who wrote it used Hungarian notation on the columns :( It gets worse, the person after him didn't understand the prefixes, so some columns have random f / v / i since guy #2 thought it was just how things were named. 
What stuff specifically?
pretty slick
Restful APIs and what not. I get the overall concept but struggle when I look at the code to how it is executed 
Is this using oauth2 or anything?
For the love of all that is good stop capitalizing Java as JAVA. It's Java. If you get out of school and keep referring to it as JAVA then people will think you're an idiot.
Funny, I wrote pretty much the same code 2 weeks ago. I struggled with HTTP Auth filter included by default by @EnableWebSecurity. I know there is a way to bypass it via fake auth filter, but I do not see anything like that in Cerberus. How did you do that? Also, when I was debugging Spring JWT generation process I discovered that it called UserDetailsService.loadUserByUsername() 7 times during the process. Of course it is not an issue with a small in-memory registry (like the two sample users here), but was a big problem for me, as this call actually making an expensive over-the-network call in my case. Did you notice the same behavior with Cerberus?
Thank you. I will review my code on Monday - I think there is a room for improvement - yours is more concise. Unfortunately I can not share the code, but just as an idea: it may be good to add refresh token support. This is just a couple of lines of code, but may be good for the demonstration of the principle. I had this as a requirement :) Great job! I wish I've seen your code before I wrote mine. Took me quite some time to make Spring Security to do what I wanted it to.
Thanks, that's a good idea! Currently the JWT tokens that are being issued don't expire, but when I add that in I will definitely look into supporting refresh tokens.
Quasar is an excellent, lightweight alterative to Akka.
Simply put. any half decent editor will color a member variable different from a locally scoped variable and from a parameter. So unless you are fully color blind, you ought to be able to tell the difference without changing the name.
Actually better in some way because it use fibers instead of threads so there is less OS-level context switching going on.
JWTs aren't necessarily an "alternative " to oauth, they are a way of passing data with a signature. You can actually use a JWT bearer in oauth. 
These days your IDE can easily inform you of a member being a member so it's not as useful anymore as it used to be. In my previous project it still was a rule and I personally don't care either way: it's just something you get used to and then have to 'unlearn' on the next project ;)
Disagree. Event driven model with immutable data structures have proven themselves as both simpler and more extensible frameworks for performing GUI work than any concurrent parallel execution model that I have run into in practice. Especially for servlet container work. If you keep your data structures immutable and handle persistent state changes within transactional models, you will never need to worry about thread-safety. See points 1-4 here. http://tutorials.jenkov.com/java-servlets/servlet-concurrency.html People fuck themselves when trying to make servlet contexts which are multi-threaded by default (a mistake imo) work with clever concurrency tricks, than just keeping things simple.
I had the impression you care for your craft. You also seem to care about others improving their craft. You are in a public forum, where devs of all skill levels meet. By claiming things like the above, you are spreading falsehoods that may stick with less experienced devs. Imagine the atrocities less experienced devs may come up with in production code to read lines from some source, because they now think BufferedReader doesn't do it's job as per the specs. You aren't only harming them, but also the product the work on, as well as anyone else who has to deal with this kind of code.
Okay but this means there must be a thread per actor? Isn't that inefficient? And what are the use cases of actors? Is everything an actor in such a system?
OO is not about inheritance, inheritance is a shortcut that can cause more problems than it solves if used recklessly, so don't start there. Start with GoF's Design Patterns book, for example. Notice nothing in there requires inheritance, but it's all about OO. Also check out what SOLID means and read about every rule in that acronym.
Piece of advice - one has to dig a lot in those articles to figure out what your definition of "immutable infrastructure" is. It's best to start with a synopsis where in 2-3 sentences you describe both problem and solution. When it comes to strict terminology, people can usually check Wikipedia or something like this, but the problem with buzzwords like "immutable infrastructure" is that everyone defines it differently. To me immutable infrastructure is something very different than what you seem to describe. So define *your* meaning and get people on the same page as yourself. Diving from the deep end by immediately starting with details means many people who see this solution for the first time will tune out and not identify their issues with your solution.
&gt; For an API to be truly RESTful, no application state can be stored on the server itself. Tokens aren't application state, authentication happens against the server, it can't possibly happen in isolation on the client. So a better way to frame the benefits is to talk about how stateless tokens mean easier horizontal scalability across nodes that need to process authenticated requests, which is a fact, and not use the "R" word. Of course bearer tokens also bring their own risks, such as someone discovering a weakness in the crypto, and the inability to, say, blacklist specific tokens, apply rate limiting against a token etc.
If I see this on a CV, I assume that the applicant is not actually a Java programmer. No one does this for a living and writes it like that.
Damn guys I never paid attention about how I wrote the name, I probably saw it capitalized and just kept writing like that. Thanks, I'll stop writing incorrectly 
I was actually thinking in terms of sessions vs tokens, but I guess I could make that a bit clearer.
Absolutely, I'll add that today.
It might also be including projects moving from google code to github since that is being shutdown.
Thanks, I'll read up on this. I see a lot of mixed messages on whether it should be required or not. For example in this series from Spring they say the general rule of thumb is if the API is accessed by a browser it needs CSRF protection. https://spring.io/guides/tutorials/spring-security-and-angular-js/
Interesting. I thought it was. I'll check out that material and learn some things. Thank you for the references!
More than that - the fact that if you get your config wrong then, to some extent, it's a Compile Time check and not a Runtime Check is awesome. Add a new constructor arg to a bean, and your config class won't even compile now, rather than giving potentially confusing errors at startup.
this was quite interesting, thanks!
The point is that when you start, you are a chep developer. So people will be happy to give you a job, because you will cost them very little. When I started, I didn't have a portfolio. Also because, I wanted to be, and I am a backend programmer. I learned on the job many things about servers, frameworks and databases. I used my free time to study deeply the things that I was learning.
and Tomcat 7.0.64 released https://mail-archives.apache.org/mod_mbox/tomcat-announce/201508.mbox/%3CCAFmzfTULecgoJorfRS8MtNnrogyUCv296yckMJa4vq0ySBAyLQ%40mail.gmail.com%3E
&gt; Last year we developed an application for the insurance industry in Dart . . . &gt; Now, how long is the Dart language going to last? I do not know. Maybe not. 
Doesn't everyone at some point..?
As a software engineer who does lots of hiring, I certainly wouldn't expect a junior dev to know all the frameworks, especially something as massive as Spring. As a matter of fact, if I interviewed a candidate for a junior dev position and said candidate could succinctly explain the benefits of dependency injection, I'd be fairly impressed (even more so if s/he knew the difference between @Inject and @Resource). I mean, look at this link and tell me that _any_ dev would know all of Spring: http://spring.io/docs/reference
I was in the same position last year, but of course location and previous work experience may vary. I studied CS in school with main focus on Java, but ended up working in the BI/Database Developer field for a couple of years. Anyway, you should definitely learn about the basic Java syntax because some companies will grill you on that stuff if you apply for a junior position (e.g. difference between overriding and overloading, different between equals() and ==, etc.). Some of this stuff is obvious but some companies may give you a technical interview and ask about the details. Then just look into Web frameworks as this is what you will most likely need. Look around on local job sites and see what is most popular. Where I live it's definitely Spring, so get some small projects up and running with Spring and understand what it has to offer. Also learn HTML, CSS and Javascript if you have the time. At least for Javascript, again assuming you'll be working on Web Applications, learn jQuery so that you can use it to build some interactive UIs. If you're really motivated you can look into some front-end frameworks such as AngularJS as well since it's pretty popular right now.
Lambdas look so nice even when you're just iterating through a list.
Unsafe is getting deleted. Really people should stop using it.
I wrote a blog post on something quite similar a while ago: http://niels.nu/blog/2015/json-web-tokens.html It also has a link to a repo with an example. JWT's are pretty neat and also quite easy to implement.
As someone who interviews juniors and mediors, I look at competence more so than knowledge of particular frameworks. And I won't let you do silly FizzBuzz-stuff, you just have to hold your own in a conversation about Java to convince me you're knowledgeable and also willing to admit you don't know everything. I'd rather hire a competent C#-developer than a Java developer with the wrong mindset.
can i change it afterwards?
&gt; Java devs rejoice as private APIs stay in -- **for now** It will be removed in Java 10. Relevant presentations from [JVM Language Summit 2015](http://www.oracle.com/technetwork/java/javase/community/jlssessions-2015-2633029.html). [The Secret History and Tragic Fate of sun.misc.Unsafe](https://www.youtube.com/watch?v=4HG0YQVy8UM&amp;list=PLX8CzqL3ArzUo2dtMurvpUTAaujPMeuuU&amp;index=1) [Safety First](https://www.youtube.com/watch?v=ycKn18LtNtk&amp;index=2&amp;list=PLX8CzqL3ArzUo2dtMurvpUTAaujPMeuuU)
&gt; Microsoft .Net also has a huge following in the enterprise, but adopting .Net would require picking a specific .Net language like C#, and that would mean alienating the large swath of Java developers. Odd reasoning there. For all intents and purposes, .NET is C#. VB.NET isn't a professional development platform and F# is non-viable due to the difficulty in finding developers. That's like saying a downside to the JVM is that you have to pick a language. &gt;Node.js is a politically neutral language That's not even true in the Javascript world, where it's already been forked due to disagreements in Node.js community between contributors and Joyent. Of course I guess they mean that they have mostly Java devs in house that refuse to work on .NET, and since they've made the decision not to work with Java the situation is *any port in a storm*. &gt;Node.js offers speed and a nonblocking I/O API. So do Java and .NET. &gt;Node.js is ready for enterprise deployment... scaling well, being secure, and being easy to learn Scales well, but I wouldn't go so far as to claim secure. Node is still Javascript and the "added benefit" of running client side libraries on server side means you are vulnerable to a whole new class of vulnerabilities that would normally be sandboxed in the browser. I'd also argue that while it's simple to learn the basics, it's not so simple to learn how to structure a significantly sized application so that it's not a maintenance nightmare. In that vein.. if you're declaring something "Enterprise Ready" and aren't having a serious conversation about maintenance and product lifetime in the context of how long the platform and key frameworks are going to be around and how often it has breaking changes... you're probably making a big mistake. Sounds very much like they should have stuck with Java. 
it doesn't
If you submit new post in /r/javahelp or somewhere else give link here, please. I will be happy to see questions.
This article seems very bias, and i'll informed. 
No i am not. It is a simple piece of code. Do you suggest to use any.
I think Guice is considered more lightweight than Spring, as the latter is far more than DI, but I've never used it. I only use Spring at the moment. There is meant to be a standard for DI, which I think is @Inject so you might be able to change later (with a little less headache) if you out grow one of them.
I would ask the following; *) How their development process work, scrum, kanban or something else? *) Do they do dev-ops or have a separate operations team. *) How are architectural decisions made? Adhoc, just one person or by the team? As i have mostly worked in smaller (10 - 20 developers) organisations, those are the things that have been most important for me.
Excellent point. Piece of advice truly appreciated. Thanks!
Using Unsafe or not, this article is talking about the interesting performance properties of having objects stored in contiguous memory. A similar approach could be achieved with ByteBuffers.
I think it's mostly a matter of preference (and how accustomed you are but that point is moot here). You can do pretty advanced stuff with Guice, too. If you only use DI you only need one or two jars for Spring. I'm a fan of autowiring so I tend to prefer Spring.
Why do you want to replace your singletons?
Regarding number one. Don't just take their word for it. In my experience there are *many* places that _think_ they are doing some form of agile development but actually aren't. They are either delusional or deceptive, some places have convinced themselves that using Trello/Pivotal Tracker/AgileZen/etc auto-magically means they are "agile". They are not and they do something far worse than non-agile, they do Homeopathic Agile. It's just like agile but only watered down to 1 part per million and it's not really anything and they'll probably die of cancer before it actually has any beneficial effect, matter of fact it probably will give them cancer. Oh, now my head is throbbing... Anyway, ask for definitions, how long they've done the process, what *is* the process. How are bugs evaluated? How priorities for work are set? What happens when there's an outage or a critical error? What is "done"? How does stuff get into production (or staging)? Do they do pull requests on GitHub or use some kind of peer review? Does everyone pair? Who can you turn to for help in understanding the system when things go toes up (or ideally before then)? Those things can help you get a picture of their process versus just asking if they' agile. Even then they might lie or be deluded into thinking they're doing anything even remotely approaching "sane" but eventually you'll be able to tell the pretenders from the real deal. I'm hoping to be able to achieve that some day.
Dependency injection systems actually create singletons themselves and then injection a reference to the instance into whatever code needs that functionality. DI systems can also have OTHER lifecycles for objects, but this is a more advanced bit of DI. So you're asking "Why should I replace my simple Singletons with a fancy DI framework, if all they do is give me singleton functionality ?" Great question. I would say that the primary reason is that you want to be able to easily substitute the implementation AT A SINGLE POINT IN THE CODE. A traditional singleton pattern implements the singleton WITHIN the implementation, so you want to swap the implementation you need to do it in many places. You could use something like a factory pattern to provide an instance (of which there is only one which is held by the factory instance ). But now you're already drifting into DI framework land. I agree with the other posters. starting using a framework.
Guice has @Inject. This is the standard form of @Autowired (which Spring also supports). I've forgotten the slight semantic difference between the two though.
&gt; You really don't want a job where you'll spend 80% of your time debugging legacy code. Actually, some people do want that. It's a great way to learn for people who are inexperienced. Some people enjoy solving lots of small problems rather than a few large ones. I am not one of those people, but I've known many. 
Seconded, the market is too good right now to not be picky and choosy particularly around "culture". As a software developer you should consider yourself a professional like an accountant or a doctor or lawyer. Any kind of shenanigans around work-life balance, death march dev drives, and poor processes shouldn't be tolerated and you can catch a lot of the warning signs in the interview. Oftentimes they'll hint "sometimes we have to work a few extra hours", or if you ask "how's work-life balance" and they reply something along the lines of "oh well we're a ____ so we expect everyone on the team to pull in a lot of hours so we can be successful" are warning signs that can be super helpful to weeding these toxic work environments out (unless you can use these as negotiation points to get a higher salary you find commensurate with all the work you'll be doing). Ask to speak to one or two of the other developers/project managers/QA/devops people you'll be integrating with, one-on-one (no recruiter present) to ask them these same questions. source: just got out of 3 years at a terrible toxic environment that I could have prevented by following these steps.
I find that maintenance can be pretty fun, as long as you are allowed to upgrade dependencies and refactor bad code. Cleaning up stuff and writing unit tests for it gives me a feeling of having a well oiled machine that does what it should. As long as that part of the job isn't more than 50% I'm perfectly happy with it.
1\. Hours expected. While I'm occasionally willing to work overtime to meet a deadline, I start off with a 40 hour workweek by default. I'm not willing to do 40-60, some people are, if it's over 60 - I don't recommend anyone take it at all ever. Your brain gets fried after 60 hours and you make negative progressing, causing more mistakes than the extra hours get you in work. You're dealing with some sort of "I enjoy seeing people being ground to a pulp/burnout" kind of people. 2\. The tech being used on the actual project. Basically I try to avoid working on any tech that's to old and ungainly, or to new and "flavor of the year" stuff. For example on old tech I don't care if they're using Git or Svn, either is fine, but I won't go back to using Clearcase. I don't care if they're using Spring Mvc or Jee, but I won't work on a project that uses old school j2ee before they adopted the spring approach - unless the project is converting the old style to a new style. At the other end of the spectrum, I don't like to work on bleeding edge tech either. It's stressful, a lot of times irritates the management above you as you "can't get anything done on a timeline", and a few years later the skills you earned learning it are worthless in the job market as everyone has moved onto new tech. I probably rambled on a bit with that one, short version - make sure the tech you're going to be using is going to be useful for your career moving forwards. Try not to get trapped with something to old to be useful on the resume, or so new that it's extremely stressful to pick up while also not being a useful skill in the future. 3\. This is really the most important for me but it's not a question - I want to meet the people I'll be working with. I'd prefer people I like. Can live with people who are boring. Avoid people I actively dislike. There are a few personality types that make my project hell that I avoid like the plague. 4\. I know you asked for 3, but this is important - on-call time. Some places put you on a 24/7 on call schedule. I'm not willing to do that. How much is any on call you're willing to do is a matter of personal preference and opinion. I'm more willing to support my own apps, where if something goes wrong I can make changes to make sure it doesn't happen again, then to "support" other apps where I have no control over fixing middle of the night issues that come up again and again. Oh yeah, and I ask to see some of their code while I'm there. Whatever they're working on now, or is convenient. It gives me a fair idea if their dev environment is a total disaster or not. While I often ask about how their development processes work, how architectural decisions are made, I've found I don't usually get very meaningful answers back. The answer they give is usually only lightly correlated with how it actually works after I start working there. So I don't invest to much time into it.
what to know before taking on a dev job: - know how to manage expectations - renegotiate requirements when they seem unreasonably hard, dont try to be a superhero coder that takes endless time just because it seems challenging. people need their shit done. - prefer fundmental knowledge over current technologies; OS/DB knowledge will prevail, the latest Angular module will soon be gone.
In general I agree. Unfortunatelly if the code is already deployed then many organizations will prefer fixing the bug with smallest possible change in order to minize risk of unwanted side effects.
You can learn a lot if the code is exceptionally good or exceptionally bad :-)
I don't think Oracle ever bothered to answer that question about PPAPI. I think you should forget about Applets, and move to html5 or webstart...
I don't put much stock into asking about number 1 exactly because I found the answers I get are only vaguely correlated to what they actually do. They answer with "how I like to think about what we're doing" rather than "what we're actually doing". Agile also has the potential to be nice, or to be god awful, and it's hard to figure out from the interview. Agile at my current job has been good. There's a morning meeting, it's short, I regularly get helpful suggestions from other team members. If you're going over your time they ask for an explanation but it's real relaxed and any reasonable explanation is accepted. Agile at my last job was a frieking nightmare, despite having the same superficial structure. The morning meeting either went on forever, or there was some fanatic acting like the extra 20 seconds you spent thinking on the call was some sort of crime. It just become an opportunity for the non-technical scrum master to assert some sort of dominance or aggression on team members by assigning them difficult tasks with fairly unpredictable timeframes (add brand new javascript component to page for example, or try to solve tough buggy code issues that's hard to figure out) then rediculing them for not completing a task in strict 6 hour blocks of time. 
thanks /u/simple2fast for having patience towards my confusion. I am going to try both #2 and a). You as well as the user /u/nutrecht in /r/javahelp has been so helpful with my questions. One final suggestion required- My application is a web based application where i am making Rest calls to another application based on queries present in a DB and after getting the results i am trying to present it in an UI. The UI part has still not started. What kind of framework would you suggest for it. Also just like dependency injection what are the other semantics rule you would suggest me to follow. I have been learning java since some time. Completed algorithms, class designing, threads, design patterns etc and started to implement in some projects. I am using gradle, junit, mockito, Git, Logger but not any framework like Spring, Guice.
this is a nice thread
My question is not pertaining to me developing any java applets or html5. It is about how to access java applets in some websites while using google chrome, without a ppapi plugin.
I am not disputing the contents of the JavaDocs.
Hard to say without knowing your requirements. Sounds like you're just trying to do something like constructor injection (e.g. just pushing the dependencies in through the constructor). Why not do something like this? e.g.: final Dependency dependency = Dependency.getInstance() final Foo foo = new Foo(dependency) final Bar bar = new Bar(dependency) If you've got something a little more advanced than that, for example, a home rolled framework then you just need to write your code so that you have a way to track dependency scopes (singleton is just one instance created once vs. on demand)
&gt; they do Homeopathic Agile Ironic statement, considering "Agile" is not in any way related to Computer Science, is wildly open to interpretation and has no widely accepted definition other than the useless "whatever works for you", and was generally touted as a superior project management methodology despite no supporting evidence whatsoever. I.e., "Agile" is itself more analogous to Homeopathy than anything else going on in software development right now.
Again it's personal preference on the IDE - I personally don't mind them dictating one as long as it's a decent one. Eclipse, Intellij are fine. I won't go back to using Ibm Rational Application Developer though. 
You know Java so you're thinking in Java's concepts. But if we're thinking in real world terms (we usually map real world to programming language, not the other way round), then there's no "nullability" - what we usually want to express is that something may not be present (its presence is optional). In Java/C#, this is usually expressed as null. Problem with null in Java/C# is their lax attitude to it. String name; Name may contain two types of values (actual string or null) with vastly different behavior when trying to use it (correct functioning or NPE). Take for example Ceylon which has null, but works correctly with it: String | Null name; What we say here is that name can contain two types of values - either instance of String or instance of Null (which is singleton). Null has its own class/type so you can't ever run a method on a null reference. Whenever you try to use variable with type String | Null you need to first find out what type is it. This is a special case of Ceylon's union types and there's a syntatic sugar for it - this could be also written as String? name;
How's it compare to Swagger?
You can measure both memory and runtime footprint of individual classes/methods quite easily - that's like the basic diagnostics.
I wish I had asked this before taking my current job. I'm modifying a legacy ERP system's code using ridiculously outdated tools (they look like windows 98), while not developing any marketable technical skills in the meantime.
http://gifrific.com/wp-content/uploads/2012/09/Jennifer-Lawrence-ok-thumbs-up.gif
In that case "(A|a)gile" was not actually in practice, it's "(C|c)haos". ;)
Agile does have a definition. It's called iterative development, you have standups to specify your work for the day. You have a backlog of things to do, and you have sprints which you do it. You avoid changing scope and embrace flexibility in the process. It's not about "doing whatever you want", there is a retrospective where you adapt to your teams needs, and it encourages process flexibility. The problem is most companies don't embrace the flexibility and decide that the process should be rigidly followed, that burndowns are more important then progress, that story points are the new hour estimates, and that we should know what is going to happen 10 sprints down the road with no room for change. 
/r/askprogramming 
I don't see why that would be.
Hi, I have a perm opportunity for an entry level role. Fantastic company and day 1 benefits. PM me. Dave
Our listings say: &gt; BA or BS in computer science meeting a minimum GPA of 3.4 / 4.0. Internship in related field preferred. &gt; Familiarity with [insert long list of random technologies here] But this is mainly to please the HR overlords. We don't care about your GPA. Internships are nice, but an internship won't automatically move your name to the top of the applicant pile. Your experience and knowledge are less important than your ability to learn quickly and communicate effectively. You need to demonstrate your communication and learning abilities on your application and in your interview. Your resume, while small, should be flawless. In your interview, you need to convey your thoughts and though process clearly. You need to prove that you will be a valuable asset to the team based on your potential to grow rather than your current knowledge. We are fully prepared to spend a lot of time and money in training entry-level hires, so your technical knowledge doesn't really matter. As long as you have a CS degree, you have enough knowledge to do the job. 3 years commercial experience in a relevant field is usually considered in lieu of a degree.
Not a hiring manager, but have been involved in the recruitment process often. Pretty much a bachelors degree, can answer questions about the language/oo concepts, can write some code, and can have a discussion on what you did and why. Maybe some architectural questions, but they are usually a bonus. The point of hiring entry level is that you are getting someone who has the foundation knowledge, and you can invest in. They want to know that you are intelligent and are willing to put in the work if they are. 
What has Google revealed regarding this question? ;) Developers write code. Engineers produce software. From there, they are endlessly muddled and confused.
What qualifies as a "decent one" differs from person to person. When I go into surgery I am not going to dictate which scalpel the surgeon is required to use. Likewise, I don't expect anyone to dictate to me which IDE I use.
Variables don't exist at all in the "real world", so there's no benefit in going down that line of reasoning.
Like I said it's personal preference. A hospital does often dictate a surgeon's hours, operating room, supporting staff, and tools available in the operating room. They also provide the scalpel(s) as I understand it, the surgeon does not provide their own. I'd personally rather just use one of any number of decent ide's, than deal with configuration problems with different people using different ide's. If I was a cab driver, it's like whether I'm driving a Honda or a Toyota - I don't really care as long as it's a decent model.
Variable per-se don't really "exist", but they are useful to represent things from the real world. &gt; I'm going to get a cup of coffee from our office coffee machine - if there is coffee, I'll get a cup, if it's not there I'll go to our office manager to get a new bag of coffee. This is an example of some real world process. There is no null, no variable, just "maybe existing coffee". If you try to map this process to programming language, you're probably gonna use variable and null/Optional/Maybe.
Ahh, I get it. You haven't figured out that null means "doesn't exist" yet. Pretty sad really, but not uncommon.
Critical mind, desire to learn, able to demonstrate trouble shooting skills, knowledge of at least one programming language.
"We work hard and we play hard" is another telltale warning sign for "you'll have awful work-life balance".
What issues do you have with RAD? It's just an extension of Eclipse isn't it? 
From what do you infer this? I mentioned in the previous comment that non existence of coffee can be expressed in Java as null. BTW, meaning of null is hardly as clear as you make it to be. What null means is not really discussed in JLS. It can be used as: * requested value does not exist * not initialized state - null is a default value of all reference types. You might have forgot to initialize it and it's null. Or it's a field which will be initialized later (lazy loading) * Map.get("key") can return null - what does null mean in this context? It can mean two totally different things (either entry with given key doesn't exist or there's a value null for given key). There are other examples of strange null usage in the standard library. * flag or unknown value
I am curious: with the new improve additions to j.u.concurrent such as this CompletableFuture how relevant is RxJava at this point?
I'm happy with optimizing and maintaining legacy code 100% of the time myself **as long as I'm allowed to do it the correct way**. If I could get a job purely maintaining legacy code, where I'm allowed to work slowly, write tests to a magical future 100% coverage, and not expected to move too quickly, optimizing and developing on legacy code can be quite nice, relaxing, and not too stressful like maintaining an old engine (particularly if it was well designed in the first place or you can bring it to some semblance of order pretty quickly) However, many times legacy code maintenance is "Client A needs feature Y, you've got one hour!" in which case you get in there and hack some bullshit in, it kinda works, and over time slowly lose your sanity or get a new job.
Fair enough. Would it not be easier to replace the static objects?
So far I didn't play with RxJava. But soon I will have to try. It (RxJava) may be good alternative for wrapping everything with CompletableFuture.
Well that's your opinion. I don't have the same viewpoint.
 * Do you allow flex time / 4x10hrs and casual dress (cargo shorts &amp; Ts) * Do you have an architect level code ninja overseeing all aspects of each project * Are there clear delineations in responsibility between QA, Dev, DeOps, and Project Management? I'd have many more questions, but that is where I start.
Quit it.
So if you are doing it alone why do you need our help? I sincerely hope you fail and take a second look to reconsider wtf you think you're doing asking us to solve your exam. 
At least you have a choice, I don't have much of a choice of IDE or OS with Visual Studio.
There is some talk that being a tester is a roadblock on the path to becoming a developer-- although now with automated testing, the lines, I would think, have blurred since the tests are likely to be coded in the same language being tested. (jasmine &amp; groovy are the ones I am most familiar with.) Here is the most important part: YMMV, it obviously worked out for /u/paperhat.
Awww... Dave you missed many parts out of three required chunks of information: what, where, and how much. 70% is passing and you got like a 15%... What: ${languages[]} ${workLoad} ${qualifications[]} set experience = "entry-level" Where: ${location} ${WFH} ${travel} How much: ${compensationArrangement} ${compensationRate} &lt;%-- benefits = true --%&gt; ${benefits[]} Lotsa variables... Dave, three things. It is very simple. You won't have to wade through people insulted by your compensation offer, or don't like the area, and fewer people that just plain won't work out for the job. (A salary range is best, it should be kind of linked to how much the candidate meets the requirements...)
No. They're just titles. You can call yourself a programmer, a coder, a software engineer, a developer. It's all the same job. If an employer makes a difference between these, it's probably a lousy place to work.
It's not about the compensation. It's how the executives think of their employees, how confident they can retain their employees without creating handcuffs. From the several companies I've worked at, and the ones I'm familiar with but not worked at, companies that have matching/vesting periods that seem to shaft the employees, will shaft you in your work life balance. They will work you till you quit, and you do not get vested in the 401k they offered (so you better hope you negotiated a large salary up front). It's like saying there's no difference between a company that offers work from home days vs a company that doesn't. The gas money spent is small - but having work from home days means the employer understands employees need flexibility, and trusts them to not screw around when at home. 
I'd also say for #1, I assume it's not in the US either! 2, I learned that in India you need to provide a long notice (months also), because the company writes you a letter of reference, and future companies require it before letting you start work. 
The one I see thrown around the most is "fast paced environment". They make it seem like if you don't like fast paced environment then you're a bad developer. In my opinion the reason things are fast paced is because of poor project management, requirements gathering, over promising, and crap that requires developers spending half the release working on something and then for someone to come and say it's all wrong, it has to be another way and the deadline is still the same.
Perfectly said. In that vein, I've seen many instances of non-technical managers really loving the "hustle" of certain employees because they seem so busy all the time, when in reality they just don't know how to properly manage their time. You don't want to work for an organization that values working harder over working smarter.
and vice versa in a big way
i should start with a framework. Then solve each of these questions one by one.
Thanks /u/meddlepal. I am doing the same but the getInstance() method calls the static object of Dependency class. Which i want to avoid using. Avoid using a static object in the program.
Perhaps because they are both trying to portray eclipses.
yeah, my thoughts too. While the purple is similar, it's in the background on that logo. Eclipse has a smaller sliver, lines in the middle and different color scheme. I think prior art fails on this one =) 
I am not super familiar with e(fx)clipse, but there's a [project page](https://projects.eclipse.org/projects/technology.efxclipse) for it on eclipse.org. The issue tracker and wiki is also hosted there, and the page says "This project is part of Mars." Beyond that, I am not sure what support you are missing, that is available for other eclipse projects.
Since this is a Java subreddit. 1.) Do you use Java 8? If so, how many of your developers are actually comfortable using streams instead of for loops? 2.) Are you still using Hibernate and/or Spring? 3.) Do I as a developer need to do more than push a commit/press a button for my application to get deployed to a testing environment. These questions are basically thinly veiled versions of "Are you keeping up with modern development practices?" and "Do your employees care about their career enough to keep learning new things?".
&gt; after the fact like with a mixin trait a la scala I thought you were talking about Scala trait composition... since in the literature composing traits is referred to as [mixin composition](http://docs.scala-lang.org/tutorials/tour/mixin-class-composition.html). Do you mean something else by "mixin trait"? Of course default methods / interfaces are very limited compared to traits, but they can take over some of their use cases: interface AbsIterator&lt;T&gt; { boolean hasNext(); T next(); } interface RichIterator&lt;T&gt; extends AbsIterator&lt;T&gt; { default void foreach(Consumer&lt;T&gt; f) { while (hasNext()) { f.accept(next()); } } } class StringIterator implements AbsIterator&lt;Character&gt; { private String s; private int i = 0; StringIterator(String s) { this.s = s ; } public boolean hasNext() { return i &lt; s.length(); } public Character next() { Character ch = s.charAt(i); i++; return ch; } } public class Test { public static void main(String[] args) { class Iter extends StringIterator implements RichIterator&lt;Character&gt; { Iter() { super(args[0]); } } Iter iter = new Iter(); iter.foreach(System.out::println); } } Sure, without abstract types (`type T`) it's more verbose (and not everything can be expressed, I am aware of that), and we need to define the default constructor, and we are out of luck if `AbsIterator` wants to define state, but it's still possible to get close to the example I linked to above. I misunderstood you I guess, because to me mixin composition is what I described above. Of course, there you only add functionality via the new type (e.g. `Iter`) that mixes traits, and not like in type classes. # &gt; I.e adding another interface onto an existing type and applying the interface constructs in your own code a la mixins/type classes Mixins and type classes are not really the same thing. But yes, type classes allow you to "add" an interface to an existing type by defining an implicit object in scope that implements a given interface (or in Haskell by declaring a type class instance). Yes, Java does not have support for that. The crucial point here is that Scala has implicits (higher kinded types help, too) and Java does not. After all, all such direct or ad-hoc extension in Scala, is tacked on using implicit conversions/classes/objects/parameters.
Another user also suggested me JEE CDI for this scenario. I will try it today.
We did hire someone any qualifications. They were alright, but it was clear that there were holes in their knowledge which would have been filled by them getting formal education. I would be hesitant to do it again. It's worth doing at least a little bit of study, there is so much which you just never learn, or even know about unless you have someone teaching you. They are the things which you think will never come in handy, but end up contributing to your decisions as you progress 
I mostly agree to what capitol_ and others said. I don't think you will be able to ask these questions directly and get an honest answer, but try asking around for details. If they try to bullshit, the details won't make sense. Instead of asking "do you do unit tests", ask "HOW do you do automatic testing". Instead of asking "do you do agile", ask how do task priorities get assigned, how estimates are made, how do they get customer feedback. My examples are much harder to answer with "Yes of course we do very much unit tests/agile". Thinks I would try to figure out before joining are: * How is your performance evaluated? When are salary reviews? How are your goals set? What are the oportunities for advancement? Bonus pay? * Are you expected to do overtime? Paid? Be on-call? How much? * How are the decisions made, both technical and non-techical. How is the feedback from developers taken into account? How are new technologies adopted? How are new projects taken on? Without asking it directly, you are trying to figure out if there is there some ivory tower architect pushing idiotic technical decisions onto everyone. Or is there some idiot management process taking on projects with unrealistic expectations and pushing everyone into deathmarches to meet them. * How shit is the current state of affairs? Are you expected to maintain existing systems, or work on greenfield? How much % of your time on what? Is there a process to update/refactor/improve existing systems, or are you supposed to add a new feature after a new feature, and pile on technical debt? * What is the development process? Are they agile? Really? What do they do for automated testing? Automated deployment? Configuration/release management? Can you steer project after kick-off? * Quality assurance- how is it handled. Is there a separate QA team? This is quite important and it will tell you lots about the culture. If they will struggle to answer this, managers don't care about quality, so quality WILL be shit. Avoid these places, or make sure you can effect some change, or at least they pay you enough to deal with this shit. --Coder
I guess it's time for yet another yet another report generator.
what happens if you don't give notice?
&gt; How does this compare to BIRT? BIRT employs another approach - it uses its own templates designer based on Eclipse, when one of the main requirements for YARG was to avoid specific tooling. As far as I know BIRT supports same output formats and even same data load mechanisms. I’m not sure how extendable BIRT is and how easy it can be integrated into IoC. &gt; Does it require an OpenOffice instance for DOC(X), XLS(X) or PDF generation? YARG uses OpenOffice instance only for DOC/ODT templates and PDF generation from office formats. If you just need XLS/XLSX/DOCX/HTML or 'HTML to PDF' outputs - there is no need to install OpenOffice. &gt; Can you use a single template in whatever format and export to all formats (DOC, HTML, PDF)? Generally, you can have any office format as is or convert it to PDF (using OpenOffice). &gt; Does it support format specific features such as pages and metadata for PDFs which are obviously not needed for HTML output? Both, pages and metadata are supported. &gt; Does it have provisions for integration into Web applications? We use the library in the CUBA platform and the platform interface provides ability to create report structure and even has a user-friendly step by step report wizard. You can integrate YARG into your Java application like any other Java library. If your application is not Java stack application, you can still use YARG as a command line application. &gt; Office templates are nice but a wholly integrated solution for easy modification of templates by the customer would be great. We don’t plan to implement online template editors, because we think that specialized soft (MS Office, Open office, Libre Office) does the job better.
Thanks /u/simple2fast and /u/nutrecht I tried the Guice Di with singleton scope today. I will try Spring DI with singleton scope and then implement one of them in my program. Yeah for the front end i am planning to go for AngularJS. Or NodeJS
&gt; The free version (of JasperReports) could not generate DOC reports It can generate DOCX just fine. Isn't that enough? &gt; There is no clear separation between data and presentation layers JasperReports seems to me like it had a very clear separation. When you call the report engine's API, you give it two things: 1. A JasperReport (template) 2. A JRData object (data) Item 1, the template, is often produced by using iReport (NetBeans), or now JasperStudio (in Eclipse). But since it is XML, you can produce the report 'template' from some other template specification of your own. Item 2, the data, can be anything that implements JRData. Years ago, I once used this to build a frankenstein monster that could produce a PDF or DOCX report from a Rube Goldberg contraption of plumbing which got its data out of DBF files. :-) BTW, none of what I am saying here is a criticism of your report tool. Now the API has convenience methods, where you give it a JDBC ResultSet. It also will allow you to embed SQL into the report template, and then JasperReports will produce the JDBC ResultSet, and then use the ResultSet to JRData adapter -- all internally and invisible to you. That convenience may give the illusion that there is not a clear separation of template from data. But you don't have to use it that way. I prefer to execute the query myself, and then take the JDBC ResultSet and the template, and hand those two things to the report engine. There is a convenient adapter from a JDBC ResultSet to a JRData source. But you could implement your own JRData source that the designers of JasperReports have not even conceived of -- or that has not been invented yet. 
It was a she, but either way, that person did not have the opportunity or feel compelled to do that before agile. Agile provided both the opportunity and the need to appear to be in charge that led to that. You cannot actually estimate new frameworks and patterns into convenient 6 hour chunks, but they needed to look like it was possible.
 BTW, none of what I am saying here is a criticism of your report tool.
nodejs is not a frontend ( browser) framework. Rather it is a system for building javascript application which run on command line. Most commonly these are build tools and actual servers (equivalent of java ). There are plenty of other front end frameworks besides angular. I don't know what your are trying to achieve so didn't want to recommend beyond angular. But I'm sure there are plenty of cases where a different framework would be more appropriate.
I have not started with the front end yet. Well the UI is going to have controls using which Rest calls to the application will be made and results will be displayed based on response.
&gt; Agile provided both the opportunity and the need to appear to be in charge that led to that. That is actuall anti-agile. Agile means you let your developers be more in charge of a project, not less. &gt; You cannot actually estimate new frameworks and patterns into convenient 6 hour chunks, but they needed to look like it was possible. That also isn't what agile is about. Again; what they're doing, micromanagement, is as anti-agile as it can be.
Isn't this just an ad? I don't get the upvotes.
Here are the details: Introduction to Java 8 Presented by Ben Evans and Martijn Verburg 5 hours 9 minutes Learning Eclipse Presented by Brian Gorman 4 hours 5 minutes Java 8 - Beyond the Basics Presented by Brian Gorman 9 hours 20 minutes Advanced Java Programming Presented by Mike McMillan 7 hours 53 minutes After 20 years of development, the Java programming language stands tall as the most reliable language of choice within enterprises. Get started on the path to coding bliss with the best tools and techniques for learning the fundamentals the right way—and become your own Java Rock Star!
3 years experience is entry level. A degree and three years experience is borderline mid level. We don't put a particularly strong value on a degree but it helps. After all at the very least you probably spent those years working on various coding projects which is experience in itself. The top qualities of *any* candidate are attitude, personality and technical ability. However the single biggest thing we look at is code. We won't hire *anyone* without seeing their code. That may mean in person with some silly examples in an IDE or projects you can show on some place like GitHub. We're not looking for *good* code, we're looking for code that shows us how you think and learn. Nobody has time to write perfect code anyway, we want to see how you cope. Attitude and personality are always subjective. The bottom line is if the people in our organization don't get along it doesn't really matter how technically adept they are. We're looking for sense of humor, quick learning, passion about the subject and generally how well you fit in. The more inexperienced the developer the more important these aspects become. We'll overlook almost any experience deficit if we believe you'll pick it up quickly and deliver.
I have bought this, and am working my way through 'Introduction to Java 8'. So far I am very happy and would recommend to all beginners. 4/5 Stars. Quality of recording is very good. Content is informative. I feel that I am learning from it, which is a big plus. Loses a star as could be more concise, like Java the tutorials can be somewhat Verbose.
Just like you'd keep the referral bonus to yourself, copy that. "Go around your HR department." You crack me up Dave. Location. Well kept secret of all places of employment... I may be making the mistake that you are in the IT sector and are just tired of seeing the weakest draws of attention. Even when I was super green I would have wondered what clown put together some job opening posts. But, thanks to me, you are a little smarter now.
Since I was using it from within a program, the 'write extra code' was not something that occurred to me as a disadvantage. But I see your point. End users cannot do the 'write extra code' thing to directly use the API. If I were to build an end user tool around JasperReports, I would of course separate the end user's view of presentation and data source. 
Word of warning about Heroku it does not allow for any kind of ACLs or permissions on the free tier on the database level. Pretty annoying.
That's pretty amazing! I can see on your examples that your templates use keyword replacement in docx files. Can this process word's merge fields and content controls as well?
Bootstrap is popular among Java developers, too :). But you're right, it may be interesting to JavaScript developers. I added the link over there. THX for the hint!
IntelliJ can do this: https://www.jetbrains.com/idea/features/jpa_hibernate.html
Sometimes it helps to think of a project and learn whatever it takes to build it. For example, start with a simple dice game or card game. When you finish, think of a project that's a bit more complex and build that. Keep doing this over many years and you'll become a very good programmer. This is how people self-teach. 
Well, with practice and study hopefully you'll become better. Good luck. Not everyone is good right out the gate, but its oftentimes the people that take to tasks they'd like to accomplish the slowest that end up making the biggest gains. The 10,000 hour argument, although flawed in many ways is correct in its core I think and I believe anyone can persevere in this brand new discipline (computing, even if you add in the mathematical foundations is still easily less than 100 years old). Plenty of ground to cover for everyone I think.
Cool! What about remote listeners?
It's weird. I understand very easily. I know how the pieces fit together. It's when it comes to actually coding that I get a little jumbled. 
Guess I will continue to struggle on. 
I alway thought JSF viewstate had some inspiration from the ASP.NET viewstate(or it's the other way around). Either way, this doesn't seem to be worth a lot security-wise.
Now impress me with up to date documentation and tutorials.
Ganbatte
Since the School of Technology is closing, no, nothing from us, unfortunately. 
Thanks so much for the feedback, I will make sure the editorial team sees this. (And thanks for buying, too ;-)
All right, the Cook / Chef dichotomy in coders profile makes sense. I'd say everyone starts a cook as soon as they can write code and some become chef with experience. This has little to do with the official title you get though. It is rarely advertised that way on the career marketplace. In my experience, large traditional organization will tend to use a mix of both, with lots of cooks doing the menial programming tasks and some chefs in special units, driving ALM, architecture, R&amp;D and platform development. This is good for the institution because knowledge is easily retained by the mass, but the system as a whole moves slow and can be frustrating for talented individuals. On the other end, startups have limited resources and only want chefs, doing both the coding and the imagining. Things move fast, but you get lots of ego fighting and when someone leaves, they may take a large chunk of knowledge with them, hurting the company. In these places, you don't get a title - everybody knows you by name and that's it. So there you have three different roles, but still no clear title. This question could be answered in the context of a specific organization but I'd say were missing a parameter to the function for now :)
Memory is waaaaay cheaper than CPU and time, converting from a slow build to a memory hog seems worth it.
A lot of the specific complaints listed here seem weird to me - I posted my thoughts in the [other thread](https://www.reddit.com/r/programming/comments/3j9egr/migrating_from_gradle_to_bazel/cunrejt). If you have a monorepo setup with tightly coupled projects, and you don't mind being locked into using *nix with limited build flexibility, then yes, Bazel is probably a better choice, but it's a somewhat niche case I feel. What lets Bazel be fast is the strict knowledge of all dependencies - which is exactly what Gradle is attempting to achieve with their new model stuff in Gradle 3.0. If they can manage it, then Gradle should have most of the performance with a lot less of the drawbacks. Don't get me wrong, I think Bazel is an interesting project, and there are definitely setups where it's a better option, especially today, but I think Gradle is still a better choice for general purpose use right now. In the future, as Bazel evolves more flexibility and Gradle evolves more performance, well, we'll just have to see. Either project is leaps ahead of other build systems in any case IMO.
Python has GUI frameworks as well. Java is a completely different language than Python, but has very good GUI capabilities with the Swing (older, soon to be outdated) and JavaFX 8 libraries. If you want simple GUIs and are working on Windows, go for C#. [Visual Studio Community Edition](http://www.visualstudio.com/products/visual-studio-community-vs) is an excellent, free IDE (market standard) and C# makes it very easy to create great GUIs. 
Can anyone tell me what's coming after Bazel so I can try to keep up? :P
Mostly opinion based article based on "You're Experience " . You should use real life examples of projects that have evolved over 5 to 10 years with 20 or so major revisions. Only then can you make assertions about cost decreasing benefits of a framework architecture. Im working with an oo architecture that was initially developed in 2002. I took it over in 2006 and have at least 6 different teams work on it since 2002. Significant enhancements have been added but no major changes to the overall structure. Its now about 4mm lines of code and speed to market on new features is extremely lubricated. 
Wait a couple of years for 'why I picked maven over bazel'
Take a look at ninja, a non-human-friendly build system designed to have build files generated by other tools: https://martine.github.io/ninja/
[removed]
Does it also change my intelliJ theme to blue and white?
The last time I tried to install a development environment for Java on my mac , it completely screwed up my capability to run other java apps on the machine. Is this something I should give up on, and just do java development in ubuntu?
That's what I thought. As long as it is sent the correct parameters, it will always return the default values. 
They're obviously asking you to implement the sum, intersect and union functions.
I can't even imagine how horrible it would be to type out code with an OSD keyboard on a phone.
Sorry for being late, but this cannot go uncorrected for anyone searching for answers: RickiMaru is simply wrong. This a classical static vs dynamic type question. Since static type is the Person for both objects, p2.toString() will yield null because the field name was overwritten by the subclass. Guess what the value for the name in the statically typed object is? Exactly, null. Copying this into a java class and making both classes static shows this.
I see, I didn't mean to deride the identifying of unavoidable components, e.g. two processes in a distributed system, or also two silos in separated service teams. FD is actually closely related to FSD. My focus is on showing its tangible benefits to the side closer to implementation right now. Thanks for the perspective.
That looks pretty cool. I'm already pretty familiar with Java but I think I'll play with it any way and see how well they did with the concept.
[Submitted a day ago](https://www.reddit.com/r/programming/comments/3j4pyd/the_worst_mistake_of_computer_science/)
If it wasn't for Android I would never care about Gradle.
And Google Chrome x64 in Windows 10 has been updated to version 45 which completely removes NPAPI support
Trust me, they weren't lying. I'm sure they could figure it out but the fact that they don't know it off the top of their head says everything. How do you get by day-to-day and not know for loop structure by heart? In most languages you can practically guess and have it compile. Sure they can't pass an exam but they haven't needed to in 30 years. It's amazing how many companies out there are running on truly antiquated and horrible trash. It's also amazing how many developers they employ whose daily lives are composed of making a few changes, compiling, transferring to USB, transferring USB to black box, testing the code and hoping it works. Debugging requires all of this and print lines. Then there's the companies where you can get by doing nothing. I replaced a team of ***seven*** at one job and was ***bored*** with their work load. I don't know what they did all day but it was clear from their code and comments most of them didn't even know Java. Product manager saying "I wish we could do X" and me saying "we can, that's easy" followed by him tellling me "XYZ said it was impossible" were a daily occurrence. When these people apply *here* they can usually muster enough bullshit to pass a phone screen. Soon as it hits code they don't know for loops, they can't tell you the difference between List and Set, they used Spring annotations on a daily basis but can't remember how to inject a bean. It's truly a shit show.
Yep, you can do single line or multiline evaluations. Also the code is autocompleted (something missing in eclipse, AFAIK) and classes not present in the debugging class are autoimported. Somedays, I write more code in the evaluator (that is pasted in the editor when works correctly) than in the editor. Edit: talkin about debuggin... Can't say in eclipse, but now Idea decompiles classes that you don't have source for. While debugging. So, you can debug ANY class, even without sources. It's awesome.
Great explanation, thanks! I've corrected my article. Of course, I've also mentioned you in the kudos section.
It took me some time to understand the attack, but thanks to your explanation, I've got it now. This time I've got it right, I hope :). I've corrected my article, mentioning you in the kudos section. Thank you very much!
Very .. that's why Javvy involves very little typing!
LOL
My ssh use on my phone is limited to emergencies. Trying to use it like a real terminal is just too infuriating. I've seen people use bluetooth keyboards though and I guess that would be ok. One of the people I work with has a little collapsible one he keeps in his car for when he's out and on call. I've been meaning to pick one up.
Should have used Vim then. 
I'll copy/paste the comment I made when this was posted to /r/functionalprogramming: The issue seems to be that mapping a function over an Optional should be straightforward (in that empty always gets mapped to empty, and non-empty always gets mapped to non-empty), but isn't because non-empty values may get mapped to empty if the mapping function returns null. I agree that the implementation of Optional.map seems wrong - an exception would be more appropriate, but the workaround is simply to not map functions which return nulls, given that we're already using Optional to avoid nulls. Instead, use a function which returns an Optional and then flatMap it over the Optional. I think the article is saying the same thing, though it took a few reads to get it. If required you can write simple utility functions to wrap a function which might return nulls with one that either throws or returns an Optional. Edit: As an aside, flamebait "XYZ is broken" titles are irritating, particularly when they actually mean "one feature of XYZ doesn't work as expected".
I had no idea that the delay between hitting a key and seeing it on the screen was such a huge pain point with some people. I guess I'm just not that discerning.
It's something I notice whenever I go to vim and see how fast it is there, but it's never bugged my in IntelliJ
Looking forward to playing with this!
Well - it depends. Today I've learned that CSRF is not what I thought. My original article was - partially - wrong. The ViewState does prevent CSRF attacks. It just doesn't prevent man-in-the-middle attacks. But this type of attacks is much more difficult, I suppose, so we can consider the ViewState as a valuable protection.
Where did you find info on their plans for Gradle 3.0?
Considering my IntelliJ process is pretty much just mashing the smart-autocomplete button I probably wouldn't tell the difference.
My hopes are raised! (Checks license) LGPL. Hopes shattered.
Spring Boot looks cool, reminds me of Grail's idea of convention over configuration.
Recently I've been searching for a way to do just what this library does and I'm excited to try this out. What does the LGPL license mean for commercial projects? I suspect something bad considering your comment. 
Not a lawyer, etc... You can link it dynamically and distribute it with your product, but end users must be able to remove and replace it. In my shop, it makes packaging a real pain in the ass, as we generally bundle libs together and fingerprint a monolithic distributable. While this does make for larger distributables, it also ensures that nobody does anything stupid during installation.
I'm sure it's less noticeable on higher-end machines, so that might be why you and I haven't been bothered by it.
Exactly this, I wasn't sure what was actually being asked. The first one you could just write up a simple for loop to add the integers. The second, you would just create a new list and add both lists to it. Seems simple if you know what is actually being asked. 
Coding should be done on a fast machine with at least 2 large monitors...
Thanks, those docs are great!
I'm a big Gradle fan. I agree that it's too slow, but it has been getting faster. In my case it's definitely been worth sacrificing some speed for the flexibility. Because you can code up new tasks right in the buildscript, we started automating things that were a little bit of a nuisance, but not worth writing a whole new Maven plugin for. When they get big we do refactor them out into separate plugins, but we never would have started automating these things in the pre-Gradle days.
What do people need multiple monitors for? I never had more than one. 
Just checked the site but there is not really an explanation of what it does under the hood. How exactly is this "artificial intelligence"? 
I'm having a hard time understanding the article, are you saying that the argument is that Optional.map shouldn't be able to return null?
&gt; The function passed to map shouldn't ever return a null, as it breaks the contact of map When you say the "contract of map", are you referring to [this](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#map-java.util.function.Function-), or something else?
You still have to switch keyboard focus though, that's still at least one key stroke
Depends on what you're doing. I usually have my IDE in one monitor and my notes, a browser, and an output window in a second monitor. Makes it easy to glance back and forth. I also think developers should be using at least 24-inch monitors. 
You are right, thank's for the comment. This would be a good starting point: http://tech.co/ruxit-enterprise-ai-tech-2015-07. You can also use the live chat on https://ruxit.com if you have more in depth questions.
Try the Javvy app. It's an interactive app that teaches you java. First few lessons free. Then you have to pay to unlock further lessons. They also have a Swiffy app for learning iOS swift.
1 for coding and 1 for distractions. 
Ah, my apologies! I had misread the sync portion of the site saying that android was unavailable. My bad!
This is getting down voted and I know it's about Javascript not Java but it is interesting to think about Protocols with respect to Java. Could they be implemented? How might they look? What are trade offs with more traditional approaches.
Depending on pricing, I might finally be able to get my boss to spring for IntelliJ IDEA!
Something else. I should have said "doesn't work as expected". Optional is Java's equivalent of the Maybe type, which is a functor, meaning it has a map operation which has to observe certain rules. This operation maps functions over Maybe values in a specific way - empty maps to empty, and non-empty values map to a non-empty containing the result of applying the function. Since Haskell doesn't allow nulls, you never have the issue of a non-empty value getting mapped to an empty value. This isn't just some arbitrary Haskell convention - functors, monads and applicatives are all derived from category theory. Because they adhere to certain rules they acquire some useful properties which correspond to intuitive notions like associativity. The Java Optional map operation breaks this convention. It means that map works in a counter-intuitive way. If you're chaining optionals by mapping functions over them, then you have an edge case to worry about. In short, it's wrong, and for no good reason.
Fun fact: People like different things than you (and are willing to pay for them), and that's okay.
Better for one year, then it's worse and you can't even use the software anymore.
Good point. I might do just that.
Don't the special offers apply for the 3 year subscriptions?
What is the incompatibility between 2 and 3? Source?
http://nmav.gnutls.org/2013/03/the-perils-of-lgplv3.html?m=1
thanks, but never again
The linked article describes the outcomes of adopting the v3 anywhere in your codebase, but not the reasons why... I see some mention of requiring appliances to enable user-driven library replacement (!) and oblique mentions of DRM... but the thing reads like someone disembowelled a lawyer at a preschool on fingerpainting day.
this. eclipse was such a train wreck to figure out. I went to IntelliJ and NetBeans.
Maybe the best source of information regarding this is the FSF itself. Send an email to them: licensing@fsf.org There's just one thing you should know first: They charge 300 dollars/hour to give you a response. It also takes a couple of weeks until you hear this from them.
so after 30 days of no ET phone home, the software will nag you, then it will just shut down. Call me old fashioned, but I do kind of like that if I purchase software I GET the software till I'm done with it. on the other hand, that purchase price is usually pretty steep. $500 in the case of IntelliJ, which equals 25 months of month to month access (2.08 yrs) or 2.5yrs on yearly pricing. The "for companies" says $400 / yr vs $200 / yr for individuals. What is different between the licenses for companies and for individuals? It looks like both say the provide all desktop products.
&gt; Fun fact: People like different things than you (and are willing to pay for them), and that's okay. Negative news about a product and somebody promotes an alternative. What a stretch!
Dudes and Dudettes, the downvote is not a disagree button. Maybe the pricing doesn't work for you but for people like myself who are not in IntelliJ all day the cost savings (especially the upfront cost savings) is tremendous. 
Eclipse was very sluggish everytime I tried it. I didn't use any plugins.
Companies need to follow CD Projekt Red (Witcher 3) route with no drm. People who planned to pirate are unlikely to pay you to begin with. Pirates are still word of mouths, but now they've only moved on to something else.
Not OP, but I used to just install eclipse from the repos. It'd be extremely sluggish and buggy. I'm never using eclipse again because of how poorly it performs. I'd rather just use a text editor and not have all of the features of an IDE if it meant not using eclipse.
It's actually $100/yr once you have a subscription. The $200 is for the initial product but it's $100/yr after the first year for updates/version upgrades included. Technically they already are on a subscription model of $100/yr on the same license. You could pay $200 for each license for a particular version (and get updates for a year) but then you are stuck with that version without the $100/yr afterwards. Maybe that's what you want. I don't think that is a large demographic and apparently neither does Jetbrains. I think the additions that they make over the course of the year are worth it. So my $100 upgrade is due in a couple weeks, idea keeps nagging me. It's in my best interest to lay down $100 again because the next year I pay, it states I only have to pay $89 (a reward for already being a loyal customer I suppose.) And that will be before January 2017. If I don't and let it expire, I'm paying $120 or something a year. So if you already are on the updates subscription then it's a good deal. I don't think it's a very good deal to buy new now though, with only a couple months left. Maybe if you've suddenly become a diehard intellij fan. 
Do the plugins of idea work with android studio? If so, this gives me an idea...
&gt; Do the plugins of idea work with android studio? If so, this gives me an idea... report back if you try it :)
I loaded up android studio and there are plenty of plugins. However, I also have IDEA and I'm not sure if those plugins are there because I have IDEA installed. I have a student license so I'm not going to uninstall it to see if it still works. However, if someone wants to try the intellij IDEA, it's pretty close to the android studio since they are made from the same platform. 
[From the JetBrains blog comments:](http://blog.jetbrains.com/blog/2015/09/03/introducing-jetbrains-toolbox/#li-comment-225064) &gt;On the other hand, we think we’ll be able to concentrate on quality more than trying to impress users with new features so they buy upgrades. Our products are more than feature-full and we believe the quality is something that can always be improved. And by that I do believe he means “now we don't have to actually improve our products any more, because you suckers are forced to pay us anyway.” God fucking damn it. JetBrains just went full sleazebag. Now what the hell am I going to do my Scala development in?!
&gt; Eclipse isn't an IDE. It's a steaming pile of dog shit. we agree to disagree...
I wouldn't actually try to work around them getting paid what they ask for and I would imagine it would get resolved quickly if it did.
[The problem?](http://www.kodyaz.com/images/pics/pebkac-problem-exists-between-keyboard-and-chair.jpg)
Personally I was /okay/ with Eclipse, but I would have to reinstall it every few months or so 'cos I'd fuck up the configuration some way that I couldn't figure out and it was simpler to take an hour to start from scratch. IntelliJ has been an almost completely batteries-included experience (and it has an Eclipse-key bindings mode so it was a mostly painless transition).
I actually prefer IntelliJ, but this is going to drive me back to Netbeans or Eclipse. I was one of those "every other year upgraders" which prompted IntelliJ to move to the yearly upgrade option. Now, they're bumping the price even more!? (cheaper with the promo price, sure... but when that's out :/ ) I might as well bail now.
&gt; The "for companies" says $400 / yr vs $200 / yr for individuals. What is different between the licenses for companies and for individuals? It looks like both say the provide all desktop products. The person buying. That's it.
Corporations aren't going to pirate software, it's not even an option. JetBrains' main customer are developers and corps will pay if devs want it, these subscriptions are basically nothing compared to every other expense.
Fucking dammit. *Edit: I'm doubly pissed because I bought a license just two weeks ago. Had I known they were going to a subscription-only model I never would have given them my money.*
&gt;There are only two kinds of languages: the ones people complain about and the ones nobody uses. ~Bjarne Stroustrup
Security flaws, perpetual updates, a huge install, poor browser app implementation, questionable future under Oracle, inconsistent API, questionable language design decisions, and it's getting more bloated and trying to be all-things-to-all-people in every new version... https://wiki.theory.org/YourLanguageSucks#Java_sucks_because I was great with Java as a hobby for 10+ years until I started trying to get a certification for it, and then realized just how awkward it is once I really started digging deep into it. Even so, it's still my go-to language, although I'm learning Python now and it's a lot cleaner.
Java is not 'bad', it is just the syntax is very verbose and easy to understand. The rules are simple and easy to learn. It has both compiler and runtime checks and can be deployed on different targets without recompile. To some people this is the opposite of what they want in a programming language.
Just factor in good tools and hardware for your developers. Don't think of it as a large cost. Think of it as a cost per developer and be happy you are giving your developers the tools they need. You save more money in the long run with efficient and proper software. I had an old manager at a previous company that didn't want to buy larger screens for his developers. It took a lot of convincing and pulling case studies out to get him to upgrade. He actually didn't believe that a developer could be more productive with a larger screen. Meanwhile, downstairs where my friend worked, his company purchased huge monitors large enough for them to put 6x the content on their screen. He had his IDE and several editors open for working with different parts of the code and a screen for the output, a screen for the internet so he could reference, and a screen for his office suite so he could write documentation.
Might as well try that with IntelliJ IDEA Community edition. It's FOSS.
Wouldn't that make it more important to have at least one monitor then? I think in order to get a beginner who is just testing the waters interested in something, it has to be somewhat fun. I can't see how this experience would make it fun for them.
Have you tried the Eclipse based Scala IDE lately? It's come a long way since I first used it 2 years ago, it may not be quite as good as IntelliJ but at least it won't expire on you.
You own the software forever. You just don't get updates when your subscription expires. EDIT: My error. If you have a license *now*, then you own it forever (upgrades require a subscription). But for purchasers of future versions, it appears you can use the software only as long as you're subscribed. (Ugh!)
I hope it's good for their business. 
How about making a subscription model AND a regular perpetual pricing scheme along it? They could please both crowds.
And reward them for this misbehavior? I don't think so.
Vote with you feet and use free alternatives.
When did you last use it? Maven integration has been solid for the last 2-3 years and the plugin manager has been largely replaced by the Eclipse Marketplace.
I actually agree with that quote somewhat. At least for last few releases I cannot help but feel, that many of those new features are actually somewhat useless or at least not very useful. However at the end of the year Jetbrains had to publish list of new exciting stuff just to lure developers to upgrade. In my opinion, there are a lot of more important things to take care of - like overly too complicated settings management could be simplified. Which is actually a lot of work, but is not "sexy" on the paper. So I'd rather Jetbrains would concentrate on such things than new features I was happy without.
Well as a poor student, I'll stick with my 15,6" laptop screen. 
Have you heard of Kotlin? Take a look :)
I absolutely love the way Allegorithmic set up Substance Live in a rent to own model that you can pause and restart any time without losing what you already paid or even pay it off whenever you want without any interest traps or anything. Add on some free content every month and beta access and it's a good value. A indie friendly model like that made me want to support them, never mind that it's great software for texturing. 
Luckily, that's exactly what the book does, step by step, in a very digestible manner, I'd say.
I don't have a problem with it. Try https://spring.io/tools/sts
What about the IntelliJ community edition? Does that one stay free? I really love IntelliJ and wouldn't want to move back to Eclipse or similar IDE's. I am not using it for paid work anyway. 
3 years? I don't think so, my colleague had to manually fix his project file after pom updates every other week, and that was 2 years ago. More recently is possible since 2 years ago is when when I switched jobs, though given that Eclipse has scarcely improved in a measurable way in the 10+ years since I first used it I remain highly sceptical (and I give it another try ever year or so). See [here](https://www.reddit.com/r/java/comments/23tiia/best_ide/ch0p283) for a more in depth comment where I compare the different editors in some detail.
I hear Java hate mostly from PHP developers. do you know why that is?
Judging from the PHP students around who now have to learn Java; it's because Java is entirely OOP with classes and methods and things that make peoples heads spin. You can make an entire site in non OOP PHP in one file. Maintaining will be a bitch but it will work and the customer wont care because the customer doesn't even know what 'peehaytspee' is. But in Java, while the customer still doesnt care, the compiler and program does. So while in PHP you can just write some lines of code that will work as long as it's valid methods and the semicolon is at the end of the line, Java will kill you for it in your sleep.
yes it does, so does EAP.
When company trades its customers hearts to bucks – it’s well known sign of company sunset, meanwhile the managers try their best to convince that everything is under control. It’s the customers hearts what brought company to success, it’s the underestimated customers personal efforts to spread the IDEA. But some managers just don’t get it, because $ is the only measure for them, and hearts and volunteer efforts are not in their spreadsheets. They've just traded their future for quick profit today. Looks like the decision to terminate Jetbrains is already made, and owner is monetizing everything before departure.
100k is very low for a dev with some experience
That's what everyone said about Adobe Creative Cloud. And then, Adobe got even richer, customers settled down, and eventually got happy, and life went on.
Spring is not better. The biggest advantage of Java over scripting languages is that it's type safe at compile time. Spring does away with that. Instead of a chain of method calls that you can trace through with your eyes or a tool, you assign a name on one end and lookup that name on the other end and hope everything meets up in the middle at runtime. 
I don't recall saying spring was better. It's simpler than older versions of JavaEE. Spring isn't just an IoC container, which is what I think you're referring to, but their IoC container is perfectly type safe. And no one wires by name any more. Are you basing your opinions on five-ten year old experience?
As a company I would rather give my employees 400 dollars per year. Then they could buy the IDE they want. This is probably more popular to do among the employees rather than force or suggest your employees to use a specific IDE.
Thanks for the help.
Controller return a string and then uses complicated background logic to lookup the view. Validations requires all methods and classes be looked up by name. MessaseSource must be named "messageSource" or things with silently fail. That's poor design, in my opinion. There's all kinds of stuff like that. There is too much logic going on in the background that requires becoming a spring expert rather than just looking at the API and getting a compiler error if things doing match up. 
The thing is even in the old model, updating every 2 years was the same cost as upgrading every year because of the initial cost. Example 1: * Buy license for $400 * 1 Year later upgrade for $200 * 1 Year later upgrade for $200 Total of 800 spent for 3 years of license. ALternative: * year 1 buy license for $400 * Year 2 nothing * Year 3 buy new license for $400 Total: 800 spent for 3 years The got you because when you upgrade an expired license, they backdated your purchase back to when it expired. So skipping a year wouldn't save you money. If you skipped 2 or 3 years, then yes you could save a few bones.
I believe the terms of the individual license preclude using money from your employer given specifically for the purpose buying personal IntelliJ licence. Plus, the individual who buys the software licence owns it, not the company.
I was right: I showed him the blog link, and he agreed to start a subscription for me when it becomes available.
JetBrains is far from the first company to switch their professional software line to a subscription model. Adobe Creative Cloud is widely popular and Microsoft Office 360 has been extremely successful, too, at least from the perspective of businesses paying for their employees' software. For solo devs, it might seem annoying, but to both JetBrains and businesses paying for multiple licenses, there are enormous benefits. In no order... Businesses like it because... * As staff size shrinks and balloons, they can easily add and remove seats without spending a ton of money for licenses that might just sit around. * Have a contract for a language that isn't your primary focus and want to use the tool that is familiar? Subscribe to the licenses for the applications you need, then remove the licenses when you're done. * New version coming out? You don't have to worry about a new license, different license versions, how many upgrades you need to purchase. The answer to, "Can we upgrade?" is always "yes." I can't stress enough how much time, how many resources go into managing licenses once you have a group of computers. Many smal businesses love the simplicity of subscription models. From JetBrains perspective, it makes it easier for them to get their software in front of more people because the barrier to entry is lower. The easy upgrades and simplified licensing structure are a huge boon, too, because it's in their best interest to have everyone using the latest version of software. Source: I worked in the SMB Managed Service Provider industry for many years, basically the IT department for small businesses without dedicated IT departments. License management and convincing companies to shell out cash for expensive pro software whenever new employees started or needed upgrades was a constant struggle.
That wouldn't be possible or legal. 
Glad it's coming. Manipulating collections is one of the most fundamental day to day tasks of a developer. It's been a pity that creating populated collections has been much more verbose than creating arrays. This should close the gap, and is long overdue. I like how they propose super short method names for this.
Sometimes paying for solid professional tools is less expensive than gimping along with free tools for the sake of saving a few pennies. Also, Jetbrains IntelliJ Community Edition is great and I use it for my work and it's already free.
You made a mistake. It's OK. It happens to the best ;)
Didn't http://devrates.com do the same thing, but more elaborate?
I'm happy with Eclipse. I guess I have been programming long enough to know that every IDE has its shortcomings. Eclipse has the advantage of being a defacto industry standard. By knowing Eclipse other people can help me with my IDE, I can help others with theirs, and I can feel at home in new jobs very quickly. Many online tutorials also use Eclipse in their examples. Did I mention that it is free on top of all of that too?
I don't care which IDE as long as I can install a Wrapper for Vim keys. 
What is wrong with eclipse people?
Agreed, analysis is the difficult part. Is there a way to multi-select tags on DR?
The list actually contains 5 (**FIVE**) entries. Wasted time &amp; linkspam.
Yes. A positively mind blowing number of experienced Java developers can't solve even that. I've seen this: return start + 4 + end; He didn't understand the question, we tried a few more times. One guy built an infinite loop: int sum = start; for (int i = 0; i &lt; start; sum++) { etc. } So I pointed out his expression and his increment were on two different variables after about 60 seconds of the unit test spinning. So he changed it like so: int sum = start; for (int i = 0; i &lt; sum; start++) { etc. } Another had a weird do-while loop I don't remember that was *wrong* but at the time actually happened to accidentally work for the exact set of numbers I use in the unit test they run. Which is all why we insist on seeing code. Every single one of them was either employed or very recently employed. They all had nice resumes, they all passed the recruiter, and our written questions, and our phone screen. Yet they couldn't write a friggin' for loop for a trivial problem that should be solvable in your first day of Java. 
Kotlin doesn't have anything that is extremely enticing right now, in my opinion...
As a backend developer I am using IntelliJ Community edition. I guess that, for me, nothing will change. When I need something that IntelliJ Community does not have, I open Eclipse.
I am in the same boat. I use a mix of .net/jvm stuff so Resharper/Idea was a painful choice as separate licenses both for my company and my hobby. My company has a mix of .net/jvm stuff as well and I work in primarily .net so I got them to get me resharper, but explaining the money process was confusing and getting them to shell out extra for Ultimate Editions, Idea for java guys or websharper for web devs, was a tough sell on the old model. Now it will be easier for me to convince them to just buy the whole suite (Idea, R#, dotCover, everything) Even as a hobbyist, I have no problem paying for upgrades. Most hobbies cost money to keep up so I do not have a problem paying for the things useful to my programming hobby like I do not mind paying $50 for a model airplane.
BBbbbut the Waaahmbulance is already on it's way?! I meant for the Jetbrains license changing crybabies. But that's probably who was downvoting anyway. :..)
I like NetBeans, too. It's easy enough to use Maven and Git with it. It's easier on the eyes than Eclipse, if you ask me; and to me, if I'm going to have to be looking at the thing hour after hour, that's important.
Amazing :) Thanks for making it clear! :D
I like how this comment proves your stupidity in multiple ways.
Do you have any experience with GWT or SPARK? If so, the whole site is crowdsourced where anyone can add content or edit. Would be great to see someone familiar with those add some information in on them.
Maybe.
Why would I switch? I get paid a LOT of money for doing what I do. $200 / year is really cheap to be able to keep doing it. Hell, for a time I was paying over $1200/year to Microsoft for Visual Studio with an MSDN subscription. To me, this is a steal.
It depends on whether I'll be able to afford the price when my actual license expires. I'm downloading Eclipse right now though to see if I like it.
Good question. I've been using Eclipse for a decade. It did have some rough spots during upgrades in the first few years I used it. I've had pretty good luck with it in recent years. It does what I need. Lots of plug ins. (Yea for Counterclockwise.) Very usable Window Designer tools contributed from Google a few years back. It's not perfect. But I use it every day. It is a huge and powerful lever. But also, no OS is perfect. No desktop environment is perfect. No programming language is perfect (or everyone would already be using it).
All good reasons to simply exclude GPL code from our products...
Sidesteppable by simply giving the employee the money and not specifying it is for reimbursement. It's a stupid clause meant to frighten small buisnesses
I hope you understand that GPL and LGPL are different things. You are not making that clear. I definitely exclude all GPL code. No questions asked. The first thing I check when looking at a potential library to include is the license. If GPL, I look no further. I can't use it. LGPL, I look for alternatives, but if I need this library, I will jump through the hoops to meet the LGPL obligations. I will include LGPL libraries (JARs), but only reluctantly. That is because of the additional obligations that come with it. As for all non-GPL open source libraries, I still list them all in my Open Source Licenses and Notices page, with links to where I got them from. (That is because some other licenses DO REQUIRE that you 'include this notice within your product'.) But I don't have the obligation to provide my own download to the LGPL source. So while I find the LGPL is more of a pain, it is acceptable. GPL obligations on the other hand are not acceptable. So I avoid it. Your reply confuses the matter because you mention GPL while what it replies to is discussing LGPL exclusively.
Or use something like SourceTree, which provides a decent GUI that is quite powerful.
Sticking. 8 a month isn't exactly ankle twisting for me, plus I still like JetBrains.
It's not as good as intellij. The devil is in the details: https://www.jetbrains.com/idea/whatsnew/ https://www.jetbrains.com/idea/features/ 
Plus eclipse is ugly in comparison to intellij.
- Workspace concept, instead of projects - Broken workspace whenever it feels like it borking it - Worse support for UI development (UI and Web) from all Java IDEs - Broken Maven and Ant support when compared with Netbeans and InteliJ. Why do I need M2E plugins at all!?! - Java profilers lacking when compared with Netbeans - Lack of live static analysis for JavaScript - Unstable plugins Need I keep updating the list?
wtf are you trying to say? there's going to be people on either side of that number, but my point was that you're spending lots of money on the person's time, spend a fraction of that to make their time more useful. instead, you're bringing up fair compensation depending on experience? wtf is point are you trying to make /u/tunaboo?
1. All sophisticated concepts are built on top of a myriad of simpler concepts. The simple things you're learning don't seem important now, but as you build more and more complex software, you will learn the roles they play in implementing more sophisticated things. 2. In my experience, games are the most complex things to make. They require many different disciplines. There's hardly anything *simple* about them. 3. You'd be amazed at how complicated Minecraft is :) There's no easy way to get it done. Programming is hard, and requires study and discipline to do well. My only recommendation is to stick to it and write lots and lots of code.
The best way to get rid of deployment variability is to only offer the product hosted at a data center by subscription. Then you don't have installed copies of your server product in the field running on customers' own equipment. We have customers installing the product, as well as offering it by subscription from a data center. But so far, we don't have anyone who has ever wanted to replace some JARs in the installation. :-) If we did, I'm not sure how we would handle that. Should we support such a configuration, or not? But I am aware of that issue with LGPL, and pointed it out to my management years ago. Just because we have to make it possible for the customer to use newer LGPL JARs, doesn't mean we have to support it. 
I certainly follow; in my situation, it's often less expensive to redevelop or work around the LGPL bits we need than to do what's needed to comply (in the long run).
I wish that was an option. My product has a mixed deployment model, but includes an on-premise component that I simply can't gloss over.
On the fence at the moment, will see what the situation is in November next year when my current upgrade subscription expires. Going back to Eclipse isn't worth the headaches it comes with (Maven, Glassfish, and Git integration) so Netbeans would be the only alternative for me, which I don't *really* mind.
Talking about load times? /s
Thanks for the insight guys. I guess my drive to learning to code is high, but I guess I'm not seeing how the stuff I'm learning now will be useful later or what I can do with it now to build something even if its small. I think I just want to start coding and building something while learning. It just seems endless with the tutorials I'm watching. I just want to know at which point I can start building something and referring to libraries for help. Rather than rewatching the same math and array functions and what I can do with them. I'm sure at this point you can tell I've gotten frustrated learning things that I feel like I've already understood and can do, but not sure what to do with the tools I've learnt. Thanks again 
Being a student has it's good sides - I can continue to use the community edition. I am not charging money for my applications - most of them are even open source on my github. Also, I prefer the design of IntelliJ over the one from eclipse - I just got *soooo* used to it after I switched over to it a few years back when a friend of mine was telling me about it. Haven't considered changing back to Eclipse. He however... Moved back to it - mostly due to the fact that they were forced to use it in school :P
Check out [Processing](https://processing.org/). It's basically a framework for visual arts. It's targeted towards artists with little to no programming experience and is very easy to get up and running. The basic framework uses a [small set of commands](https://processing.org/reference/) to make it easily accessible, but processing is based on Java and thus you can write full-fledged java code at any point. If you're looking for a way to quickly create interesting things with your java knowledge, i think processing is a great way to go. If you're interested, check out a few [projects of other people](http://www.openprocessing.org/browse/?viewBy=most&amp;filter=favorited) for some inspiration.
&gt; And what ANTLR does is already done at that point. I don't think you understand what antlr does. It doesn't parse any text itself. It generates a parser for you. Your 'parser' is horrible complex while the grammar really isn't. How would you ever parse a programming language?
&gt; other people can help me with my IDE As in, they tell you to do a fresh install for like every issue. I love Eclipse, but it's so fragile I can never update anything due to fear of having to reinstall. It took nearly a week of fiddling to get it to work with my current project!
I'm an Eclipse whisperer. If m2Eclipse becomes aggressive with you, you must assert dominance by deleting .classpath, .settings, and .project and re-import it as a Maven project. From what I've seen with IntelliJ, its pretty good, but the open source version doesn't support WARs, so Eclipse it is.
I love SourceTree too, but man does it have some gnarly memory leaks. Have to restart it every couple days so it doesn't take down my entire computer.
As you said, the devil is in the details. IntelliJ didn't have Javadoc-on-hover for a *very* long time. I am sure that if I actually had a reason to use IntelliJ IDEA for some time, I would find a lot of details that make Eclipse look better than IntelliJ.
I use IDEA all the time and I'm happy with it. I will stick to it even when it costs some bucks more. It will pay other developers and make this product even better. The price raise is nothing compared to how much I use their products.
Yes I do, just here, it is not question of a parser or any language. These are just two "filters": derivate and simplify, that generates a new expression from the tree of a mathematical expression entered as a record. What my own parser does, that doesn't appear here, is generating the records like "assignment(identifier(A) times(int(42) int(38)))" but from the input text, directly. And the purpose of what I'm talking about here, it to operate on this tree directly. It is no question about any language here, but if you want to have a concrete example of what I would like to do, here is: I have some Oz code "A = {MyFunction B}", I would like to be able to check if I know anything about MyFunction and B, and also make it equivalent to "{MyFunction B A}", because that's how Oz work. So for both tasks, I have to go through the tree, where the nodes are records, and for instance, convert every "assignment(identifier(A) invocation(...))" to a "invocation(... A)". Going through it would be possible using the Visitor Pattern, but matching the types, ... is a bit too much if...else than I would like my code to contain. I find it more readable to write patterns and make different methods. Of course, here, the simplifier is just awful. But take a look at the derivator, it's quite pretty, and for a compiler, things should be readable enough. It's just because maths simplifcations are awful to mimic ;)
For me, Intellij starts up in 6s on a ssd and an i5, and I keep it open for a long time. Is this an issue for some people? I also think the gradle integration in intellij is great, can you debug gradle JavaExec tasks in eclipse? 
Cross post comment: I wanted to congrats the JetBrains MBA team for making their IDEs irrelevant soon. Any graybeard professionals here would probably agree with me if this event in anyway reminds them of the great Borland IDE suites. Borland C-suite decided to abandon their "small" individual customers to go after the enterprises by doing somewhat similar pricing scheme. They got burnt. I'm hoping to see this history repeating itself.
My company has a group license, so, yes. But even if I'm paying for a perosnal license, it's worth paying for the new features. 
The comments on that blog are hilarious. Some of them are true, but still hilarious.
It's ugly and slow and confusing.
To be fair MSDN subscriptions give you a hell of a lot more than Jetbrains does. My work pays for MSDN for me and I have access to everything Microsoft makes.
Just that it sucks.
&gt; Simple changes in IntelliJ cause the project to re-compile for a minute or more where the sames changes in Eclipse aren't even noticeable You can use ECJ in IntelliJ too
Depends on what your exact constraints are. How many vectors is a large set? What sort of time and memory do you have?
For some reason, it doesn't work nearly as well. 
You're looking for a [quadtree](https://en.wikipedia.org/wiki/Quadtree). Actually, you want an n-dimensional version of a quadtree (I've seen a generalized quadtree code for n-dimensions before). Quadtrees are good at determining vectors/points/rectangles that are near other vectors/points/rectangles. As /u/zeringus suggests, you need to decide if this is going to be in memory or on disk, but either way, a quadtree will work on disk or in memory.
Using `ProcessBuilder.environment().get()` only makes sense for creating new processes. You should probably use [`System.getenv()`](https://docs.oracle.com/javase/tutorial/essential/environment/env.html) instead.
That's wrong with eclipse: * many actions (wizards) are more complicated than needed. It is for example much easier to import an Eclipse project in IntelliJ as vice versa. * The concept with perspectives is annoying. * Plug-ins for similar purposes can look very different * the UI is really ugly * the menus are partly organized in a strange way * instable dependencies between plug-ins * the project structure looks confusing in the default setting (all folders on the same level) Eclipse needs major usability improvements, maybe a complete new UX. 
I'll stick to IntelliJ, though I get my license from my work
+1 for STS. "Broken" Git and Maven support are my main issues (I miss merging files easily in Eclipse...) Still postponing Intellij for an online/cloud IDE like Orion, looking forward to the day it becomes useful for enterprise Java devs...
Holy crap, if you're measuring startup time for anything in minutes it's time to upgrade _something_. I highly recommend an SSD.
Sounds like a problem on your end lol. Intellij starts in like 5 seconds on my 3 year old laptop...
&gt; Why do I need M2E plugins at all!?! I'm an IntelliJ fan after many years of using Eclipse and _to be fair_, the idea behind M2E connectors is a good one; it's so Eclipse knows how to support incremental running of Maven plugins. E.g., if you have a Maven plugin that minifies CSS the connector would be used to let Eclipse know that the plugin needs to be executed whenever a CSS file changes. Good idea, terrible execution though since they opted to make you insert a big fat pluginMangement block for anything that doesn't have a connector, which is 99% of Maven plugins. Also, as far as I can tell, the documentation for how to actually _write_ a connector is some closely-guarded secret.
I don't see the problem either. I buy the upgrade every year anyway, and it's not that much money. 
You won't. Sorry. I know that's pessimistic but it's free for a reason. It's clunky and slow in my opinion.
How about this? https://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#Java_2
&gt;" but so far they've only shown that they don't respect their customers" That's completely off-base. I've been a customer of theirs since v.3 of IntelliJ. My experience is that they deeply care about their customers' needs and are one of the most responsive companies when you need help. When I've contacted them for help, I often correspond with an engineer on the development team. I get straight, no BS answers. If they have to stare at your code, they do so and work to get you the answer. If the problem reveals that they need a new feature, it often shows up in the next release. At lot more companies need to care for their customers as well as JetBrains does. 
I think the question people should ask themselves is would you pay for Eclipse? What about NetBeans? From my small subset of developers that I have talked to about it, they would not pay for those tools. 
Ha! Spring users think JEE is 2002? Pot, kettle, black. Anyway, okay, I'll give Eclipse another try some time. Maybe they've finally fixed their shit...
This makes me glad I switched to Netbeans when I did. I made that switch to match what we were using at my other job, and I wanted to be consistent. This is one of the big problems with proprietary software. At least my IDE will never just stop working because I forgot to renew the license. I wouldn't even mind paying for upgrades as long as it were still libre software.
Don't quadtrees do poorly with very high numbers of dimensions? Most examples of their use that I can find only have 2 dimensions.
That conflict with each other and crash. IntelliJ &gt; NetBeans &gt; Emacs &gt; NotePad &gt; granite &amp; chisel &gt; Eclispe
How many plugins do you have in Eclipse?
[My current installation](https://www.dropbox.com/s/i1e4blfxuaox2c2/Screenshot%202015-09-04%2022.02.26.png?dl=0). Is that relevant?
Use the Darcula theme :)
Because occasionally it locks up and decides that gobbling all of my RAM is a cool thing to do.
[Weka](http://www.cs.waikato.ac.nz/ml/weka/) has a [k-d tree](https://en.wikipedia.org/wiki/K-d_tree) implementation. http://weka.sourceforge.net/doc.dev/weka/core/neighboursearch/KDTree.html http://weka.sourceforge.net/doc.dev/weka/core/neighboursearch/KDTree.html#nearestNeighbour(weka.core.Instance) You also might want to check out [this section](http://scikit-learn.org/stable/modules/neighbors.html) from the scikit-learn (python library) documentation.
After more than a decade of using Eclipse and multitudes of plugins, I've somehow never managed to get "the issues to mount". Do you know what plugins made Eclipse unusable for you or did you just install "a dozen or so big ones" :). RES doesn't seem to render images from Dropbox. Here's the link again as plain text: https://www.dropbox.com/s/i1e4blfxuaox2c2/Screenshot%202015-09-04%2022.02.26.png?dl=0
It's not the same thing. Modules are a cumbersome workaround for a limitation and even JetBrains acknowledges that. They call it a "workaround" in their own documentation. Although their marketspeak calls "related" projects "unrelated". And then add that their inability to handle multiple projects is actually an intentional design that "helps you stay focused on one project at a time". Riiiight. https://www.jetbrains.com/idea/help/user-interface.html &gt; If you have several unrelated projects, you can open them in separate windows. At first you may find this an inconvenience, but, in fact, it works to your advantage helping you stay more productive as you're always focused on one project at a time. &gt; If you still want to have several unrelated projects opened in one window, as a workaround you can configure them all in IntelliJ IDEA as modules. "
If they go ahead with this annoying plan, I'll stop paying for IntelliJ and just pirate it instead. If that doesn't work out, I'll use Eclipse.
Yeah, I'll stick with it. I used Eclipse for a long, long time - but I can't go back. I do a lot of database work, and IntelliJ's database stuff is really pretty good, and the git integration is excellent. I've seen a lot of co-workers struggle with the Eclipse git plugin, so much so that most of them don't even use it. Eclipse's database tools were terrible, as if designed by committee in somewhere in Eastern Europe circa 1988.
+1 for antlr used it before love it for languages
Downloaded inteliJ just to see whst all the fuss was. Then this announcement. I guess I'll stick with netbeans.
I love the new subscription based system. I am gonna stay with JetBrains.
That, or you know, the company makes us use Eclipse. 
I'd like to one more comparison, https://github.com/vsonnier/hppcrt. Would it be possible? Otherwise, thank you for this - even in the case that I wouldn't ever used it, it's great study material!
I tried that! That was actually the worst for me - between the dark background and white/grey text, everything felt fuzzy. I know plenty of others who love the dark themes in IntelliJ and Eclipse, though.
What is "live static analysis"? I've never heard that particular combination.
&gt; That conflict with each other and crash. IntelliJ &gt; NetBeans &gt; Emacs &gt; NotePad &gt; granite &amp; chisel &gt; Eclispe Delusional, IMO. But you're also entitled to your opinion.
&gt; Ha! Spring users think JEE is 2002? Let me clarify, I'm saying some people don't download the right version because they have the impression that JEE is bad based off of 2002 information. 
a company that won't let a programmer choose his tools is not a company I would work at. those companies don't value developers
Personally I'd rather have them in different windows so for me that's a feature. I'm not sure how stuffing multiple unrelated projects into one window would make things easier for me.
You need to get your computer sorted out, those are some bs numbers. 
In terms of spatial indexing, look into R trees. They are self balancing unlike k-d trees and bsp trees. I've read that they are faster than quad trees for nearest neighbor. Also if you were to try and generalize quad tree to D dimensions, you wind up with 2^D children per node, most of which would be null, so you'd have to come up with your own sparse representation which would probably slow everything down by something like O(log D). 
Indeed. I have been collecting my personal favorite plugins here: [awesome-eclipse](https://github.com/hrj/awesome-eclipse). Please add any I have missed.
IDEA CE is also free...
You know, I'm thinking of shifting to Eclipse not so much because of the licensing change but because IDEA, once a magnificently performant beauty, is now kind of a slowpoke. I know they have the zero latency typing stuff in v15 coming, but who knows if that'll really make the difference real-world. Eclipse isn't exactly svelte, but if they perform even just similarly now, but one is free, that's not too tough a decision. 
I use the free edition of IntelliJ anyway.
It is fairly common to separate medium to large projects into discreet packages/artifacts/modules/assemblies/etc.
It would be great if Vincent Sonnier could contribute an objective section about hppcrt to the comparison list.
I hate subscription-based software without options for normal offerings, although to be honest, the thought didn't cross my mind when I first saw Jetbrains' announcement about Toolbox. My first thought was "oh hey, I can get WebStorm, RubyMine and PyCharm by just adding $50. That's a steal compared to buying each of these every year since I occasionally do Ruby and Python and a bit of the web.". I'm one of those people who actually buy IntelliJ and upgrade it every year because I'm grateful of Jetbrains in its efforts to improving its IDEs, and I'd do the same to the rest if I could afford it. I wish Jetbrains retained its old approach, while having Jetbrains Toolbox as a separate, subscription based offering, just like how Microsoft treated Office 365. I'm still going to stick with IntelliJ
The whole team is made up of students, but I have the most or second most programming experience out of us. What I need is and IDE suggestion and a tutorial to go along with it. Right now I've been thinking Android Studio with [this](http://www.raywenderlich.com/78574/android-tutorial-for-beginners-part-1) tutorial, but I was asking if anyone knows any platform or tutorial faster/easier to learn. The reason I brought up Visual Basic (in Visual Studio) is that I want something that would be similar so I would pick it up faster. We haven't built anything yet. We've only just gotten our projects the other day and had a speaker today, so we are only as far as throwing around functionality requirements. What I need is something that I can learn and be able to build an app when the time comes, and it will come quickly. I know I want to work with Java, and like I explained, I already have *some* degree of competence with it.
Don't know why people are downvoting you for giving a legitimate, honest answer. Just use a cracked key instead of changing to worse software.
Is Eclipse new Idea?
What do you do?
Close. Raspberry Pi.
Open source != free. IntelliJ CE is also open source.
So, you need an IDE that accommodates your insanity.
My "projects" are usually never standalone entities but involve a number of frameworks and libraries, some owned by myself, some of them open source. I always want full access to all of the code within the "universe" I'm working on at any given moment and I want to be able to refactor, modify and move code across multiple projects as easily as I move code within a single project. I understand why some people like the "just one project at a time"-approach, but I find it very limiting and it slows my development pace hugely. My way of working is something IntelliJ simply isn't designed to handle.
I used to use NetBeans before IDEA a year ago, I'm considering switch back to NetBeans now for on my PC. Recently I was thinking about using IDEA at work, my boss agreed to install it... Now, I'm happy staying with Eclipse at work.
NetBeans is great, I did not jump on the IntelliJ bandwagon because I don't miss any features from NetBeans. In fact I cannot imagine that IntelliJ is better at anything I currently do with NetBeans, the tooling for JavaSE and JavaEE is close to perfect. Maven and Git support is much better than Eclipse. Seriously what more do I need that would be worth paying for?
I was happy to pay my IDEA licence every year and I'm now even happier that I can get pycharm, phpstorm and soon 0xDbe at a global price. 
My tip is to make an object oriented blackjack game. (it's okay to do it in the console). Don't look att the various examples out there. Think for yourself. Try to figure out what kind of datatypes you need to create. Don't just code it procedural fashion where you have a single class that goes from top to bottom. Then you have to think about game logic and flow. This way you'll make a game, and learn lots while doing it. Try to implement a high score system that persists data in a text file or something. 
With SVN, the terminal is a handsaw and a GUI is a slightly less rusty handsaw, this because SVN's model is extremely simplistic (but not *simple*). With Git, the terminal is the chainsaw. There are decent GUIs -- SourceTree, and I hear Tower -- but even the best are inferior; and especially IDE integrations are all *lousy*, as if by some law of nature (Eclipse, NetBeans, IntelliJ, VS, you name it -- they all suck) -- I won't even put up with Magit (Emacs) or Fugitive (Vim), both of which are exceedingly well made. The only helper I tolerate is [Tig](https://github.com/jonas/tig), and primarily for exploring history interactively, which is the one problem the GUI front-ends solve really well (I just use Tig because I'm already in the terminal).
Same here, I've no idea what all the eclipse hate is about. Initial configuration can be a bit of a pain if you're not used to it. I've been using eclipse for 3 years now for Android and Java EE development without any problems. 
Thanks for all your replies! it really has wrapped my head around things and given me a different view on programming in general. I'm glad I decided to post, usually a lurker , God I love the internet. :D 
I never use git integration beyond looking at the branch name. Command line all the way for git. 
3m vectors, ideally with millisecond retrieval time, 16GB RAM.
GWT is pretty close to vaadin but has no server communication restrictions. (I think vaadin is built on top of gwt not sure though) 
For many of us, Workspace is far superior to IntelliJ "project-with-modules". Some plugins can bork your workspace - this is an inevitable function of allowing third-party plugins. Choose your plugins well. Freedom is a double-edged sword. The last thing I've ever wanted for UI development is "support". Can't stand visual designers. Ant support works really well, as does gradle. Maven has always been broken all on it's own. 
I'm sticking with JetBrains, mainly because I'm a corporate user, and ultimate' features are the bee's knees. If I can use mor than one of their IDEs for about the same price, then I'm all for it. I'm starting to use Cursive and support for go is improving on their platform. Multi language support gets my support, especially for non-JVM languages.
Haha you kidding right?
Just gave it another try. Nope nope nope. Problems encountered within five minutes: * [The download page for my platform](https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/R/eclipse-jee-mars-R-linux-gtk-x86_64.tar.gz) has two big, bright, orange “download” buttons. One of them takes me back to the downloads index page. The other tells me I'm not allowed to download the file. The *actual* download link is hidden in the sidebar. Epic web design fail. * Uses GTK 2, which is *hideous* on Gnome 3. Not the fault of Eclipse itself, but… * They *still* haven't abandoned that ridiculous “workspace” concept. People work with *projects,* not some arbitrary semi-IDE-defined workspace! * I had to dig around in the menu and bring up a bunch of unrelated crap just to get a file browser. * I then had to dig around in the menu *again* to actually open my project, even though I chose my main projects folder as the workspace folder. * The Maven integration wants to map Maven plugin goals to internal Eclipse actions. Bitch, I want you to run the actual Maven plugins in an actual Maven build, not some brain-damaged approximation! * The Maven integration craps its configuration stuff all over my POM. * I get completely bogus warnings for using JavaFX classes. Apparently, Eclipse is trying to decide which packages are or are not part of the official Java API. Poorly. * Pointing at the warning messages gives me a couple of options for what to do, none of which are “this package *is* a public API, dumbass.” * Attempting to point at the pop-up window with the aforementioned options must be done very carefully, or the pop-up window disappears before the mouse reaches it. Somewhere a UX designer is crying… * Looking in the project library settings at jfxrt.jar reveals that the access permissions for the JavaFX packages *are not modifiable!* * Miscellaneous graphical glitches that may or may not be Eclipse/SWT's fault. What a shit show. Looks like the Eclipse developers' heads are still lodged firmly in their rectums. Even NetBeans is leagues better.
Welp, I just gave Eclipse another try. Nope nope nope. Problems encountered within five minutes: * [The download page for my platform](https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/R/eclipse-jee-mars-R-linux-gtk-x86_64.tar.gz) has two big, bright, orange “download” buttons. One of them takes me back to the downloads index page. The other tells me I'm not allowed to download the file. The *actual* download link is hidden in the sidebar. Epic web design fail. * Uses GTK 2, which is *hideous* on Gnome 3. Not the fault of Eclipse itself, but… * They *still* haven't abandoned that ridiculous “workspace” concept. People work with *projects,* not some arbitrary semi-IDE-defined workspace! * I had to dig around in the menu and bring up a bunch of unrelated crap just to get a file browser. * I then had to dig around in the menu *again* to actually open my project, even though I chose my main projects folder as the workspace folder. * The Maven integration wants to map Maven plugin goals to internal Eclipse actions. Bitch, I want you to run the actual Maven plugins in an actual Maven build, not some brain-damaged approximation! * The Maven integration craps its configuration stuff all over my POM. * I get completely bogus warnings for using JavaFX classes. Apparently, Eclipse is trying to decide which packages are or are not part of the official Java API. Poorly. * Pointing at the warning messages gives me a couple of options for what to do, none of which are “this package *is* a public API, dumbass.” * Attempting to point at the pop-up window with the aforementioned options must be done very carefully, or the pop-up window disappears before the mouse reaches it. Somewhere a UX designer is crying… * Looking in the project library settings at jfxrt.jar reveals that the access permissions for the JavaFX packages *are not modifiable!* * Miscellaneous graphical glitches that may or may not be Eclipse/SWT's fault. What a shit show. Looks like the Eclipse developers' heads are still lodged firmly in their rectums. Even NetBeans is leagues better.
Don't get me wrong, I'm not looking for "the one weird trick that will get you developing for Android in no time" and I'm certainly not trying to get out of learning things the right way. I am just trying to find a way to build *something* quickly enough that my team doesn't have to present to the client empty-handed. 
&gt; I hear Java hate mostly from PHP developers. do you know why that is? Considering the PHP ecosystem has turned into a Java clone (look at PHP frameworks and community practices in the last few years), that's quite ironic. But anyway, you'll always find a person using X hating Y. Let's not focus on the haters. I use Java for back-end services and PHP + JS for front-end dev, and I don't hate anything. It's possible.
Well then, I'd picm Android Studio or Eclipse. Eclipse was the main IDE to use for Android before Google decided to make their own. I never got super into android, but I do remember that the best tutorial I saw on it was the ones Google made.
I still use netbeans. It's worlds better than it used to be, and tends to handle the 'important stuff' more correctly.
The map initializer API could use a builder pattern to eliminate the paired arguments and give a cleaner look. e.g. Map.of(k1, v1) .of(k2, v2) ... .build();
Have a look at https://github.com/puniverse/capsule it may be what you're looking for.
Looks great, thanks!
I will definitely give this a shot.
It's not like I didn't go look at the app and I'm just forming an opinion based off of this one post. I agree with /u/markee174. In order to get the most out of learning, you should be sitting down in front of a keyboard with a monitor in your face so that you can concentrate on practicing code. I might be a bit biased though, I've only been developing for a little over 10 years. Perhaps when I get to 15 years, I might change my mind, who knows.
There's a good chance I'll move *to* IntelliJ, from Netbeans. 
I really don't understand why 'owning' the software is so important. Developing IDEA (for example) costs JetBrains X amount of dollars. The market is willing to bear Y price for an IDE. This produces a profit Z for JB. The problem is that in a fixed pricing scheme, Y is an average over what all consumers are willing to pay. If you plan to use IDEA for 10 minutes a year, you are probably willing to pay a lot less than someone who uses it everyday to generate a six figure income. In any kind of fixed pricing scheme someone is always getting a subsidy (relative to a fixed profit margin for JB). Either JB is 'overcharging' enterprise customers to make their products cheaper for light users or they are 'overcharging' light users to make their products cheaper for heavy users. My guess is that it's probably the former which is why everyone on reddit is pissed. This change takes a step towards removing that subsidy. I guess that sucks if you were getting the subsidy, but it doesn't make it evil or unfair.
Take a look at osgi containers and apache Felix. Sounds exactly what are describing.
It is also very similar to Jerseys MVC support: https://jersey.java.net/documentation/latest/mvc.html
I do fat jar. For me this is important because a single file represents the ENTIRE app. So there is no question of what needs to be deployed when rolling out a release, or when rolling back a release. When testing there is no question as to which version was tested vs deployed. The file sizes are larger, but compared to the peace of mind, there is zero question for me that it's the right way to go. FWIW, I keep multiple versions on my production server and use a symlink to keep the "correct" version as the version that is running. I like to use either upstart or systemd to ensure that process is always running. So a release (BTW I'm pretty much only using dropwizard these days, got sick of tomcat ) is 1) copy new jar to server 2) update symlink. 3) kill &lt;pid&gt; ( of current process). 4) wait for reboot and health check. The only downside I've had in this process is that if there is code which the class loader has not already loaded, but which is needed for the shutdown ( after the kill), then the update symlink can generate class loader problems. I've never found this to be a big deal. I suppose I could change he process to be shutdown, swap symlink, restart. 
IntelliJ still has a .idea and .iml file for Maven projects for project configuration, but you always sync changes to the pom into the IntelliJ model. I don't know if that's what you mean by eclipse specific project folder. I gave up with Eclipse in 2010 when there still wasn't svn, git or maven support in the base distribution. 
I've been using atom for a while now (swing based apps look like ass on linux). Since it's worse than pulling teeth to get our company to rent software that drops dead at a date certain the rest of the code monkeys will probably be moving to Atom as well.
Because there's a large class of people for whom this change makes no practice different, as they would upgrade annually anyway. And then there's those people who are like "fair enough, I save more than that from not wasting time with my IDE. I'll happily pay $89 a year to keep using it". There seems something off about professional developers saying they have no problem with denying other professional developers a revenue stream while continuing to use their software.
with poor documentation and lagging behind a thousand other libs
Try Processing. It's all Java based and you can configure it to program Android apps. I've made many apps using this in as little as a few hours even. It's extremely simple, way to learn, and very very rapid prototyping.
Ahem. http://www.songlyrics.com/anonymous/write-in-c-lyrics/ ?
I believe all decent obfuscators come with stack trace demanglers (but you need to have the respective data saved for each build). Other tradeoffs, such as possible latent JNI/reflection issues, I do mention. As far as the worthiness of obfuscators and other means of code protection is considered, it all boils down to cost/benefit. Can reverse engineering your software unlock access to data worth millions of dollars to someone, or would it just give someone bragging rights?
or four, customers who have been burned in the past with dev tools that stop working when they can't phone home and reauthenticate. Having to explain to a client that I can't release ontime because of some dame licensing shit (and risk losing that client) has me thinking twice on any software that deactivates itself if you stop paying.
Fat-jar is probably the easiest solution. Storage is cheap. Extremely cheap. So are SSDs for faster build. The time it takes you to set up and maintain some more complex solution (because you want to save a few GB of space) is much more expensive.
I'll try out readlink. thanks
On my new i7, it takes IntelliJ about twenty minutes to show the first autocomplete after loading. I don't understand why you say you wouldn't notice the difference.
Except SourceTree isn't available for most dev systems. Yes, you can get it on Windows and OSX, but how many people run those systems on servers?
 &gt;For me this is important because a single file represents the ENTIRE app. So there is no question of what needs to be deployed when rolling out a release, or when rolling back a release. When testing there is no question as to which version was tested vs deployed. The file sizes are larger, but compared to the peace of mind, there is zero question for me that it's the right way to go. It seems like keeping a list of maven repo entries in the one jar is just as good as keeping the actual jars. I suppose there is some risk of the jars no longer being served, but this seems like a low risk if you are using well known packages. Or if you are really worried you can keep your own Ivy repo. &gt;The only downside I've had in this process is that if there is code which the class loader has not already loaded, but which is needed for the shutdown ( after the kill), then the update symlink can generate class loader problems. I've never found this to be a big deal. I suppose I could change he process to be shutdown, swap symlink, restart. I'm pretty sure this is not a problem on any non-Windows OS (Windows symlinks are goofy and broken so I don't know about them). When the JVM loads a jar the symlink is resolved to an inode and as long as that inode is not changed you are fine 
[Spring Boot](http://docs.spring.io/spring-boot/docs/1.2.5.RELEASE/maven-plugin/usage.html) does it somehow... You end up with a single jar with all dependencies placed under /lib in the jar. 
JDK 1.0 was barely ever used as I recall. By the time Java started to gain traction, it was already on 1.2. That's the version that introduced Swing which was what Sun was banking on being their big attraction.
Change it to "new Dependency()" ? I don't really understand what's your problem...
My first real coding job was writing servlets before there was a 1.0 for the spec. Lo these many years later, I'm still doing it.
He is a little busy arguing against those who think garbage collectors have no future.
I would second that. OSGi is exactly what you are looking for. Felix and Equinox are the prime implementations but if you want to have easy and quick container out of the box, give Karaf a go!
At least 1.1 was really big. I remember we avoided using 1.2-features for some time in applets we made at work because we wanted to support as many browsers as possible. I took a course in Java programming in 1999 (1.2 was released in December 1998) and I remember many of us used 1.1 for labs because we didn't have computers that could run 1.2 fast enough. The fact that my university introduced a course in Java at around the same time 1.2 was released (they must have made the decision much earlier) indicates how successful it already was. 
See also: - https://twitter.com/MkHeck/status/639261417061810176 - https://twitter.com/kcpeppe/status/639787715563769856 - https://twitter.com/JavaFXpert - https://twitter.com/speakjava - https://twitter.com/cpurdy 
Cameron Purdy was a bit more than an evangelist! As [I said](https://www.reddit.com/r/programming/comments/3jmf1n/all_of_the_java_evangelists_have_been_let_go_by/cusdgxm) in the /r/programming thread, here's what I've picked up: &amp;nbsp; &gt; I wouldn't call them just evangelists - here's some I know about: &gt; &gt; * [Arun Gupta](https://twitter.com/arungupta) (ex GlassFish evangelist) jumped ship to RedHat when Oracle killed GlassFish support * [John Clingan](https://twitter.com/jclingan) (ex GlassFish PM) "jumped ship" to RedHat in the past week or so (Pushed? Or maybe just didn't like what was happening around him?) * [Cameron Purdy](https://twitter.com/cpurdy) was CEO of Tangosol and was acquired by Oracle for the Coherence product, which has been very profitable for Oracle. He's very technical and it's a shame to see him treated so poorly. * [Simon Ritter](https://twitter.com/speakjava), [Mark Heckler](https://twitter.com/MkHeck) and [James Weaver](https://twitter.com/JavaFXpert) were all evangelists and have been fired * [Reza Rahman](https://twitter.com/reza_rahman) is current GlassFish evangelist and seems to still be at Oracle &gt; There's something very strange going on that doesn't look good in terms of Oracle's community focus.
In finance it remains head and shoulders #1 for new developments. Now with HFT trading etc, C++ is a great compromise for this kind of thing (and so is Java). I think we are moving towards a more multilingual stage with 5-6 languages sharing near equal popularity at the top, just with strong differences in focus.
Try Udacity's free Android Development course by Google. I went from zero knowledge to building a weather app that fetches JSON data from a open API in less than 2 weeks.
Nah, unless there's a viable alternative it's not that time yet... what takes its place? I doubt everyone jumps ships to .Net and if not that then what? And, I'd bet that's Oracle's thinking too.
I don't know of a single enterprise system that is built on Python. I'm not saying that they don't exist, but I am saying that Java has absolutely nothing to worry about being replaced in the Enterprise. And, frankly, that's all that really matters.
I found a tutorial on JavaFX on Android. I posted the link here in /r/java 
lading ?
Leading 
fading i thought. ( I am java dev btw)
Reddit thread of article sourced to Reddit thread. Awesome.
As a fellow java dev that hates boiler plate and xml, I share your pain. 
hasnt this been done almost a decade ago?
the same way it is to learn anything (language, libraries, techniques): **by doing**. pick something you want to do, and do it. ask questions when you're stuck and just go on. when you're done you will throw that thing away as it will be garbage, but you would have learned a lot.
In some cases, I suspect it's the blind leading the blind; they do it because they saw other people doing it and assumed that was the correct way.
Have you seen spring boot lately? Not a piece of XML to be seen.
huh? I think you replied to the wrong comment.
Many of which run on the JVM. Python, ruby, groovy, Scala, all using the libraries and infrastructure we know and tolerate.
Yep the inertia of the JVM itself is also considerable. I cannot imagine Java becoming irrelevant so quickly one would not even have the time to recycle, given all of the stuff going for Java in current infrastructure. Java will be around and going on strong for many years to come.
FUSE has been around since early 2000's at least. 2002-2004 or so. and there was a java binding to fuse (that is it allowed a java program to provide the filesystem and be mounted via FUSE). as being the only new Filesystem API being provided via FUSE, sure, I can totally accept that since the API itself is relatively new.
C++ replaced by Python? That's comical, sorry to be so blunt. What's next, apples replaced by oranges? What a cruel world.
Right. The nice thing is 1. this is written entirely in Java (through JNR), and 2. because the API is simply the standard `FileSystem`, you can mount the JDK's ZipFS or Google's Jimfs. That can also be used to make code using the old `File` API work with a `FileSystem`.
Do you seriously think that ranting without reasoning is the appropriate way to introduce yourself here? Think again. Also: NO SHOUTING!
For a very short period, Sun changed their trading name to JAVA, in an effort to... I don't know, branding? Of course, they were soon bought by Oracle, but at least for some time Sun would show in tickers and the financial press as JAVA, so that can be a tentative explanation.
It's an acronym for "Just Another Vague Acronym"
Well, Java is sometimes called the new COBOL*, so I guess proponents of that idea tend to write JAVA in honor of the venerable COBOL. *I'm not taking a stance either way
I have a good tutorial I'm working with already. I'm just not done with it. 
"releases"? What kind of new-speak is this, call it "fires". They are not wild animals that they send out from their cages.
I know the difference. Doesn't change the fact that this is a half assed add on rather than a real mvc solution.
edlin If you haven't used it, give it a try. Miminal. A different paradigm. But definitely not on a subscription plan.
MAC would not be an acronym for Macintosh. It would be an abbreviation. 
Seems like someone posts this same thread every 2 weeks, and that's always the top voted (and still most correct) answer.
&gt; I hear Java hate mostly from PHP developers. do you know why that is? Not sure it's actually more complicated than "they're the other team competing against us so they're bad".
Now we have a new problem. Annotations, annotations everywhere. Spring is great when your team designed the system themselves and maintain it. Then one day as your senior devs get bored and move on you get thrown a junior to maintain it and you start to realize you have made a system that isn't at all self explanatory or easy to train on.
Scala is a fun alternative to Java, it is unfortunate that even if it matures to the point where its a major contender we'll still be chained to Oracle for the VM. 
If someone can point me to libc5-based, ELF-compatible binaries, sure!
Students can even get the full versions for free - https://www.jetbrains.com/student/
The [X-Tree](https://en.wikipedia.org/wiki/X-tree) is probably the most efficient index for high-dimension vectors.
It must've been the worst prison!
&gt; Now we have a new problem. Annotations, annotations everywhere. [Which is great!](http://www.annotatiomania.com)
Quite the contrary. The most innovative with Java core in the last several years was Android. Other than that, Java has been rather stagnant. 
The poster above you made a joke. Nobody in the right mind is saying that Google is causing the demise of Java :)
Should x-post to r/scala.
Can you post the code so I can give it a go? It's possible for strings to include escape sequences that can move the cursor back to the start of the line and other things like that, so it depends what's in `imgData`.
My only hope is that it will become: * First valid mainstream Action-based-MVC choice for majority of projects (Java EE, Spring, Other). * It will become GO TO web framework and maybe Spring finally be forced to implement CDI. As a result we would have common MVC and common DI API's for majority of projects. Currently we don't have any valid Action-based-MVC choice that fits majority of projects. Spring MVC is tied to Spring and cannot be used in isolation without Spring DI. Other alternatives are not mainstream and not without issues. 
&gt; In all seriousness, why would anyone ever use this over spring or asp.net mvc? Not all projects are Spring based - Java project landscape can be summarized like this: Java EE, Spring, lightweight stack projects. Spring MVC are OK only for one type of projects. My hope is that in the future we would have something like ASP.NET MVC - one main choice that is good enough for majority of projects.
You should have considered the fact that there's the free Community Edition, too, which can be sufficient for many needs, e.g. general Java development. The answer here would be: Stay, of course. In case that was clear to you while making this: It's still insufficient communication towards the poll participants.
Java has been stagnant? Java8 was released with Lambdas and stuff! How do you call that stagnant? Not to mention the ever evolving stream of technologies coming out in Java ecosystem in general.
Please, have somebody proofread and correct spelling and grammar before putting up such posts.
Sticking with Intellij. Have been paying the for the personal license for two years now. "Owning" the software is a non-issue for me; I like to use the latest-and-greatest, so I would never have let my upgrade license lapse.
That sounds insane to me. I get a 5-8 second startup time on a 2.5 year old laptop. What are you running IntelliJ on?
Just-in-time All-purpose Volatile Access
Would be great if Spring DI finally managed the jump, in comparisons to CDI Spring DI seems rather bloated and lacking simplicity especially when working with proxies in different contexts.
Is it a bold claim ? Have you seen the oracle website, hardly a user experience masterpiece is it ? Its not one in design awards has it, its ugly. The linked site just links to javadoc ... thats it. Ah here we go https://docs.oracle.com/javaee/5/tutorial/doc/bnbmt.html#bnbmw some of the text is barely legible and you can't search, its also nearly ten years out of date but was the first official oracle link for my search term. Also, the actual frameworks themselves are confusing ... I want to inject a singleton... how many different ways are there to do it ? An awful lot is the answer. Shall I use @Stateless or @Singleton, which version of @Singleton shall I use. How do I inject, with @EJB or @Inject ? Whats the point of a @Stateless if it is the same as a @Singleton ? And if it is not the same and it contains some state information useful to clustering, why call it @Stateless ? I like the micro frameworks and I like constructor injection. I don't like annotations and massive exception stack traces.
General layoffs throughout. Profits were down, and evangelism is not what you'd call a profit center.
why not jersey ?
&gt; why not jersey ? Its REST, not true MVC with templates and so on, which despite of allowing "bleeding edge" way to do things - HTML + REST is not enough for a huge amount of projects.
Hello! I wrote this &gt; So how do I run a command with an argument of ENV_ARG=12? val res0 = %%bash("-c", "echo \"Hello$ENV_ARG\"", "ENV_ARG=12") You need to quote it. Remember, this isn't Bash, we don't get an funky "look it's a variable! Look now it's a string!" problems &gt; because it has no functionality beyond a simple file list It's aiming for "Do one thing and do it well". If you want to sort, map or filter the output... then use sort, map and filter. 
&gt; Why not keep them compatible? Compatibility with Bash/POSIX ties your hands, and forces you to make decisions in a lot of places. I'm not saying they are bad, but there are already plenty of "modern shells" like Zsh or Fish which take the "keep some compatibility while improving things" route. Adding a new, similar, slightly-worse version of Fish doesn't interested me: if I wanted that I'd just use Fish! Thus I shot for something totally different to see how it will pan out.
Please do explain how to get the same effect as ls -l in Ammonite. While you're doing that, I'll get some work done.
Are seriously complaining about the fact that the documentation of a 10 year old framework is as old as the framework (yes that's how old JEE 5 is)? Oracles standard documentation may not be pretty but its still legible. Also if you are seriously interested in the Java EE stack you should be looking at Jave EE 6 or 7. I am not sure how you can get @Stateless confused with @Singleton. The only issue I see is the confusing caused by CDI @Singleton from JSR-330 and an EJB @Singleton, which is rather unfortunate. Any developer worth his salt should be able to grasp the concept of singleton and stateless, no matter if a container manages these for you or you do the heavy lifting yourself. Its still the same concept.
Very useful and elegant. If you want to have your functions compose or chain using async threads, also look into Completable Future's.
`ls! wd | stat.full` Done.
@Stateless is not instantiated once per client or even request. The idea of Stateless EJB is to pool "expensive" beans, so that they can be shared across multiple clients and requests. As opposed to @Stateful beans which are bound to one client. JSR-330 is to blame for the double @Singleton. 
It cant be, I just got it repaired the other day. I just decided to end the thread on a more serious note. 
Well, Oracle is saying it, but your point still stands that nobody "in the right mind" is :)
"There seems something off about professional developers saying they have no problem with denying other professional developers a revenue stream while continuing to use their software." I own my computer. I use my computer for my profession. I make a good living in my profession. I do not continue to send money to the manufacturer to use my computer. If the manufacturer makes a newer model that has more features and I had a good experience with the model I own, I will most likely spend money to get the newer model. If I have to spend money to make sure the current computer still works correctly then I would quickly look for a different manufacturer. I don't mind paying for a good product. I don't mind subscribing for updates for the product that I own or have a perpetual license. I will not rent a IDE and I will not spend money on a IDE that needs to call home every 30 days. Especially when I'm able to get the same functionality from other products that doesn't require me to pay for continued use. 
Can unit test? Can document code? Can explain a new feature to a newcomer? Can work in a team? Almost everything else is optional. (Yes, there are four ;)
Quick to learn new things. Ask questions if they dont understand. That they try to finish what they started and doesnt leave (too many) loose strings (code-wise and social/communication-wise).
Hi lihaoyi, you seem to make a lot of interesting stuff (I like your rx scala lib for example). This seems like a neat project, and something I was thinking about doing myself at one point. I tried your shell out, and I have one gripe so far. It feels like the facilities for relative paths is just a bit weaker than bash. For example, I can do ```cd! ".."``` but not ```cd! '..```. Also, the Path type does not have a getParent function on it to return the directory containing the file object the path is pointing to (if it exists). edit: one other thing comes to mind. Can this shell be used on non-linux systems, like windows? It could be a nice tool for windows users if it outstrips powershell in usefulness. In any case, a completely cross platform shell would be pretty cool.
Isn't parallel best to keep cpu low? 
Ok, so one issue related to up then, is that if you have enough ..s to go out of the root directory, you just return the root directory like in shell. kinda like how tail on nil returns nil. I might try to help develop a windows compatiblity in a week or two, need to finish up my masters first.
&gt; Ok, so one issue related to up then, is that if you have enough ..s to go out of the root directory, you just return the root directory like in shell. That's possible; not sure if we'll do it, but it's what bash does &gt; kinda like how tail on nil returns nil. Not in Scala =P haoyi-Ammonite@ Nil.tail java.lang.UnsupportedOperationException: tail of empty list scala.collection.immutable.Nil$.tail(List.scala:422) cmd9$$anonfun$1.apply(Main.scala:133) cmd9$$anonfun$1.apply(Main.scala:132) cmd9$.&lt;init&gt;(Main.scala:134) cmd9$.&lt;clinit&gt;(Main.scala:-1) haoyi-Ammonite@ (new Array[Int](0)).tail java.lang.UnsupportedOperationException: empty.tail scala.collection.TraversableLike$class.tail(TraversableLike.scala:449) scala.collection.mutable.ArrayOps$ofInt.scala$collection$IndexedSeqOptimized$$super$tail(ArrayOps.scala:234) scala.collection.IndexedSeqOptimized$class.tail(IndexedSeqOptimized.scala:129) scala.collection.mutable.ArrayOps$ofInt.tail(ArrayOps.scala:234) cmd10$$anonfun$1.apply(Main.scala:133) cmd10$$anonfun$1.apply(Main.scala:132) cmd10$.&lt;init&gt;(Main.scala:134) cmd10$.&lt;clinit&gt;(Main.scala:-1) &gt; I might try to help develop a windows compatiblity in a week or two, need to finish up my masters first. That would be great! =D
I am fairly new to this. I planned to do some more tests anyway. Thanks for the tip
https://gist.github.com/ssebs/4149ac54b2d87a1e121f
Odd I could've sworn tail worked on Nil. Oh well.
Then don't use it. But don't decide you don't like the model so are going to pirate it instead as others have said they will.
This is actually a really cool way to do abstraction in cases where you really want to avoid allocations: use MyObject::method instead of object::method and pass around the object. It's also a plus side of the computeIfAbsent syntax: because it takes a function, not a supplier, you do not need to capture the parameter and can reduce allocations. 
Because it's illegal?
 &gt;doesn't the community edition lack some features compared to the community one? -- community edition lack some features compared to the community ^ ^ | | +----------------------------------------------------+ ?
Alright, that's pretty sweet. 
Me derping as usual - I meant the paid version, the ultimate one.
thank you. Any recommendations on where to start with servlets/servers? 
I think any modern Java developer should at least have some exposure to Spring, even if they decide that it's not for them. But knowing what it does and what it can do for you is important. I'm not sure if Spring Boot is the best entry into Spring, or where you should end up after knowing what's going on in the back ground. It could either be a simplified Spring introduction or "OMG what is all this magic crack that's going on?" confusing; I know too much about it to know what's good for a beginner. JPA is worth investigating for database access. Hibernate is the most common jpa provider. Spring Data JPA makes JPA really fun. And I'd really get up to speed on maven (and play with gradle) to see how modern Java projects are built. Guava is full of really handy utilities, and the Apache Commons libraries are handy too.
Yes, I have three developers under my roof including me, so I need three licenses of the pro version, around $1200/year. I'm not sure I'd get $1200/year of value out of it. Maybe $400 I could justify in time savings, but not triple that. It's a nice product, don't get me wrong, but I don't find jdbc to be THAT hard or error prone.
Spring Boot is love. Super easy to learn but with no upper limit to sophistication.
I suspect this is one of those instances where there isn't a perfect GC for all workloads and you really need to experiment and measure which gives you the best results.
It's a bit magical but the documentation is outstanding.
I guess I'll need `sampleImage.image` as well?
Its just a text file with a different extension. [here](https://gist.github.com/ssebs/71faa6e7e791170c12c1)
Okay thanks so much
Guava, Jackson, Typesafe config.
What ever stack overflow suggests i use :3
Jersey, Spring JDBCTemplate, Guava, Gson, Jackson, HazelCast, Play, various Apache Commons libs.
Then I obviously wasn't talking about you. People have said they will. 
Better formatting: &gt;Right tool for the job... items in my tool belt include: &gt;* Jsoup &gt;* RestEasy &gt;* PrimeFaces &gt;* Hibernate &gt;* Commons Lang &gt;* Commons IO &gt;* Jackson &gt;* AWS &gt;* SerialIO &gt;* Netty &gt;* Jetty &gt;My jury is still out on Jooq, primarily because of the licensing. Right now, I'm using sql resources instead, but it does seem like the jdbc interface could be easier.
Spring Boot: the framework for a framework. 
Perhaps more of a framework than library, but Dropwizard has been a pleasure to use. Guava I more or less consider part of the standard lib - i'd be lost without it. 
I've worked in banking, life sciences, and retail ecommerce. It has been mostly Spring MVC, JDBC, JSPs, and bolting on whatever JavaScript lib I need to accomplish something. 
I've not seen Boot used much in the enterprise in my career. Besides demos / proof-of-concept. Have you used it in a production app?
1. Organization No matter what code or task you're working on, there are going to be a lot of balls in the air that you have to keep track of. There are going to be new things that pop up and that you have to keep in mind for later. Whether you can keep it in your head or you use some sort of tool to remind yourself of things (like I do), you've got to make sure you cover all your bases. This goes hand in hand with diligence, completeness, test coverage, good communication, etc. 2. Not a dick 3. Owns their mistakes, learns from them, and can move on
thank you. maven's quick start has been real simple, and everything generated is very straightforward in meaning so far.
I do backend e-commerce stuff. The new apps we're building use Java 8, Spring Web MVC, Spring Data JDBC/JPA/etc., Spring Boot, Lombok, Jackson, etc. We also use some Netflix OSS stuff to take care of cloud considerations, JUnit and Mockito for testing, Gradle for building and dependency management, and Docker containers for deployment. We deploy most of these new apps into AWS, and we also use some AWS services like Kinesis or SQS/SNS for messaging. Of course, that's the new stuff that's been built over the past year or two. We also still own a lot of legacy code. :\
Not being able to reference static strings is the tip of the iceberg example for me. Annotations take away all the cool stuff I can do with general java code like remove duplication, loop, if branch, leverage awesome ide tools like goto definition and call other services. If I have to do anything the annotation library designer didn't think of it becomes an ugly hack to make it work.
My company has been using them in production. No issues at all. It's wonderful. We deploy the apps into Docker containers though, so maybe that shields us from some nasty bits of configuration.
 ---Must know--- Maven: Build/dep management Guava: Elegant solutions to object-level problems Apache commons: Pragmatic solutions to a lot of basic problems ---Should know--- Spring: Dependency injection Hibernate: ORM Jersey: REST Tomcat: Web server/servlet container Log4J: Logging Junit: Testing ---Nice to know--- Amazon EC2: Cloud computing ---Cool to know--- Docker: Programatic cloud computing 
Yup. We've done a few. Spring Boot is the same as Spring just with a lot of default configuration.
Absolutely fantastic documentation. 
Surprised this hasn't been mentioned yet....Apache Camel
https://github.com/akullpp/awesome-java
Used it on a few production business critical projects, highly recommend.
I'm like 99% certain you have no idea what the fuck you're talking about.
+1 for Camel. Couple it with Active MQ and Fabric8, and you've got yourself a solid integration platform. 
I hadn't heard of Typesafe Config, so when you mentioned it I got excited because I thought it was going to be a typesafe configuration library. I was disappointed.
I used to work in the oil sector and I know there is a lot of quirky/outdated technology in use that you often have to integrate with but the nice thing in the Clojure ecosystem is their emphasis on small libraries as opposed to monolithic overarching frameworks so it's easier to craft a solution that works just for your needs. And Java interop is very simple so if you have to call out to your OpenSpirit library you just do it, no hassle, no fuss. You're running in a JVM after all.
thank you very much.
Not yet mentioned here and not really a library, but still an essential part of the environment : Jenkins. There are commercial, more sophisticated alternatives, but because continuous integration &amp; deployment is now a requirement, you at least need to have a few jobs running in the background and Jenkins is free, very flexible and fits the bill 95% of the time.
Upvote for Guava.
I would move JUnit to the top of must know.
Well, certainly wasn't expecting to see that here. Have you had a chance to play with SpongeAPI yet?
But when you hit that 5% (or when you have more than a few teams using the same servers), then you want to throw Jenkins and everyone who has ever written a plugin for it into the sun. (Pun sortof intended)
There's testng which people seem to prefer over junit from what I've seen. Your should-know section also seems to be focused mostly on api implementations - you should probably learn jpa over hibernate, jax-rs over Jersey, servlets over tomcat, slf4j/commons-logging over log4j. 
Yah thats true. cuubez it working on adding these missing features very near future. 
Framework Re*boot*ed.
Guava comes baked into GlassFish...I think Jersey might have a dependency? It's an old version, though, 13 I think. 
So, correct me if I am wrong but, this is 'hot deployment', and remote debug over a tunneled JMX connection. Yes, all pretty impressive, I guess.......However.... I have hated spring boot because they took they ability to do this away from me. When working on a spring boot project, a small change required me to stop/restart the app, taking 10 seconds, or so... very annoying....but apparently, spring boot was what the trendy developers were using, so put up and shut up. For my own projects, I have been hot deploying tomcat / tomee apps for quite literally years. I just this second changed some server code in eclipse, and this was hot deployed to the running tomee server in 2 seconds. So, pardon me if this does not impress me.... But, credit where credit is due, these things are good and so needed for efficient development, but there should not have been a fanfare of 'look what we can do', but instead it should have done this from day one. 
I'm so glad OP posted this question. I'm also into the higher/standardized java development. So many valuable tips here thanks fellow developers
I agree, unfortunately a lot of people reject CV's on the back of which API's the candidate has used. I've worked with someone who would reject candidates if they couldn't rattle off the "SOLID" design principals. A lot of people seem to have very arbitrary reasons to chose one candidate over another. 
I'd not come across it but looks like they made a lot of sensible library decisions in their bundle. Glad they didn't go down the hibernate route, it's good to know but for 95% of projects it's massive overkill. 
Didn't 1.8 implement a lot of what guava did? I know it has a lot of nice collections libraries though that 1.8 doesn't have to my knowledge. 
Yes at any one time only one thread is aloud to access one instance. Making them thread-safe, after the thread is done the instance is made available again to other threads (hence a pool of beans). If no beans are available either a new one gets created or the thread has to wait until an instance in freed. Its kind of similar to a connection pool. A @Singelton can be made configured to allow concurrent access, however this approach is limited, as it only works as long as you only use thread-safe resources. As soon as you use anything else you will either have to deal with concurrency your self or you could just go ahead and use @Stateless. Since @Stateless is not limited to one instance you can serve multiple requests concurrently without having to worry about thread-safety. 
Me too. There's a lot of information here. Too much really, but a fun challenge nonetheless!
&gt; you aren't allowed to split up the work Yes and no, you can split the work load quite easily by triggering an @Asynchronous method. However this approach is limited since a new transaction is started with each @Asynchronous call. I can think of fairly simple setup that would allow multi-threaded processing of large data-sets. So sorry to burst your bubble. Fanboy - probably borderline - if you don't get it fine by me, I look at other frameworks and know the limitations of Java EE as well as others. Instead of wasting you energy ranting, you shoud use it to learn something useful...
Not really. You said they were *not* limited to one per request, and that a singleton and an slsb are the same concept. You also attacked me, rather passively aggressively, by implying I was not a developer worth his salt.
Idea seems good, but I have tried to run it for the last 10 minutes and I was unable to. In the docs, it just says download the .scala file and run it. Well, I have never done Scala before, so I'm stuck. Searched all the docs, searched on the github page nothing... You should improve the docs on how to run your project for people that are not familiar with Scala.
Immutable collections. https://github.com/google/guava/wiki/ImmutableCollectionsExplained
My group uses spring, guava, jetty, junit, mockito, ignite, and various other libraries. But for what it's worth, when I'm making hiring decisions, I'm much more interested in a candidate's ability to write clean, simple, maintainable, well-factored code, and their knowledge of core Java, than whether they know any particular libraries or technologies. 
Let's not act like we give a single shit
CacheBuilder! It's really excellent. You can use computeIfAbsent with JDK8, but it doesn't have all the sexy expiration options.
No idea. ®
Well ini4j increasingly... I like config files 
Slf4j is just an API on top of other logging frameworks. I use logback these days but there's also log4j2.
I noticed at least one typo that was quite confusing, &gt; Langer reports a runtime of 5.35 ms for this, which compared to the loop’s 0.36 ms yields the reported slowdown by x15. I consistently measured about 560 ms, so I end up with a slowdown of “only” x4.5. I think that should be .560ms! It would also be nice to see the Integer[] implementation, to confirm the suspicion about boxing.
Many people think that, when it's hosted on code.google.com, it's owned by Google. I've seen a few presentations of people claiming that a certain framework was written by Google, while it actually wasn't.
Depends on the project. The ones I have in flight are mobile, not web so REST was a given. For views I've done JSP and freemarker and both work fine. Testing is no different than any other front end testing.
Indeed, but you should still learn it :P containers like spring will come with implementations of it so it's good to know it. 
What frontend do you use? How does it simplify development? I always thought (and from all my attempts at trying it) that JS frontends were great for many things e.g. reusing the backend across web and mobile, but they would not also simplify existing server side applications. You are introducing a whole other framework and language (and build tools?). Sorry, I can't help but feel sceptical! I can understand that this is simpler if you need a mobile app as well or you need a web app that feels more like a local application. If you just want to write CRUD, but still have complex data access and auth layers, then the view is mostly very trivial in JSP (but does grow in boilerplate with Thymeleaf).
There's a bunch of UI testing frameworks. Selenium is the grand daddy. PhantomJS works too.
Ah, that sounds handy. Thanks. 
My bad, guess I got out of bed on the wrong foot. Didn't finish the sentence, that's why it doesn't make any sense. What I meant to say is: The concepts of stateless class and singleton class are the same in Java SE as in Java EE. I will have my morning coffee in future before I write anything ^^ 
Unfortunately most of my clients have heavy investments in the Oracle/IBM java worlds that need to be justified. Developing monolithic webapps gives them the support they need to continue feeling good about the gigantic check they write every year.
Okay, that's a first. /r/programming up votes Java being at #1, and /r/java downvotes it. Peculiar :P
This post belongs into /r/javahelp as is mentioned in *many* places in the sub: + in the sidebar (2 times) + in the big red banner + in the submit text box Also, nobody will do the work for you. You need to come up with something you have tried already and ask specific questions. You should also take the time to prepare a proper post. What you have now is just disrespectful to anybody potentially willing to help you. If you just want your homework done for you, /r/domyhomework is the place to go. **Post removed:** Is code help / does belong in /r/javahelp provided it's not the "do my homework" type post as indicated by the original wording of the question.
Read the documentation for the [sort](http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#sort%28java.util.List%29) method. The API documentation for Java is extremely comprehensive.
I would honesty move Guava into 'Should Know.' It's cool and useful, but not necessary.
Maybe you don't, but every commercial software developer should care about piracy 
I'd take a look at the 'wishlist' of skills you see on job postings for jobs you're interested in and try to match up with those. The skillsets desired can vary wildly from industry to industry, and there simply is no such thing as "The Official Java Stack". Ask 50 developers and you'll get 50 answers. 
I've lived the last year and a half of my life in Fuse/Camel/ActiveMQ. I didn't know much about the platform (especially OSGi) before I started, but I honestly can say now that it is very pleasant to work in.
I guess I had misunderstood the developer license to be a "named" developer, not an "unnamed" developer. You're right, the current license model should work for us. You've got a sale. :)
100% agree. OSGI isn't necessarily difficult. It's just different. Once people wrap their heads around that, then life becomes a lot simpler. That said, tools like Fabric8 abstract so much away from the underlying container that you rarely need to get your hands dirty these days anyway, at least in my experience. Disclaimer: Red Hatter. So a tiny bit biased :)
For a Senior Dev: * Approachable / Not too aloof * Ability to explain complex ideas primed for the audience * Doesn't take self too seriously For a Junior Dev: * Accepts criticism with an open mid * Tenacity / Tries before asks * Doesn't take self too seriously 
Yeah, this is what I would say as well. - Spring Mvc - Jdbc / Sql - Jsp's / Html - Maven (in including external libraries, not in hand writing build scripts which I haven't seen people doing outside of forum talk). I personally kinda hate Maven, because it often has issues running and not working right and causing problems that are easily solved by simply putting the jar files in source control like normal, but Maven is used a lot, and it doesn't take that long to learn how to add dependencies to the pom file) That's where I would start. After that: - JQuery - Some other javascript and html helper libraries - bootstrap and font-awesome come to mind - Hibernate - I really don't like Hibernate, it takes tasks that it's easier to just write by hand wit sql and makes them longer and more complicated. But I did see a lot of requests for it as a skill when job hunting. - JUnit for unit testing, and perhaps Selenium for web app testing. I see a lot of requests for this, I know it, then I get the to job and it's rarely used. But it helps a lot in the interview. (These are good frameworks, it's just that a lot of times they don't want to put the time into the schedule for unit testing, they think they do but when it comes down to to deadlines they don't find time.) - Jdk logging or apache commons logging - Apache utils - I use StringUtil all the time. I'll also add a note - a lot of responses you'll get on a forum are basically people pushing their flavor-of-the-week/month/year framework. Every year there's a new slew of frameworks all claiming they're a "have to have" and going to revolutionize development, a couple years later like 5% of them are actually being used and the other 95% have been dropped or are mostly used on legacy projects. There's a heck of a lot of reinventing the wheel going on.
Wonderful! Thank you, and thank you reddit! :) (I suspect this should be made much clearer, though)
I wish we were running Fabric8, we just didn't have a use case for it. Our deployment footprint is small at this point, and we only have a support agreement in place for 16 cores. So we ended up with 8 cores of prod and 8 cores of QA. I'm hoping we can grow in the future and I can start using some of those features like the distributed service registry, that sounds very nice. Also, I would just like to say that your professional services group is one of the most competent I have ever engaged with. I absolutely love working with Red Hat and I hope to be doing lots more of it in the future.
That is only partly correct. OpenSource Jenkins is not HA. Correct. CloudBees has an HA plugin available to their paying enterprise customers.
I was going to ask if it had mock support for testing. It seems that it does. Having had to write a bunch of client REST code recently to support testing, there's no way I'm going to use a http library that doesn't make it very easy to fake requests. In my case, I migrated to Spring's RestTemplate and used MockRestServiceServer's really nice, fluent request matching API.
But it uses a shared filesystem, which is not especially fun to deal with either. 
&gt; This is the breeding ground for bugs Can you give an example of such a bug? The idea that this could lead to a bug seems to have more to do with a poor choice of data structure (Set) than anything to do with lambdas specifically. (Edit: e.g., you can get the same behavior with Strings.) For example, if you wanted to build a collection of lambdas to execute later and see their results, and you don't want duplicates to be lost, then why would you choose a set? Choose a collection type that saves each value without discarding duplicates. The whole point of a set is to eliminate duplicates. The article is basically acting surprised that a set implements its contract. 
I see you wanted to help honestly, but by this way he/she is going to ruin future, for himself and play store too
I watched the video. The 'hot reload button', quits the app, and loads everything. Just like restarting tomcat, by pressing stop, and start. Except I didn't have to restart tomcat. I just make code changes, and when tomcat sees those changes, it hot-reloads that webapp, without reloading all the classes that make up tomcat. &gt;&gt;"Live reload restarts the app in the same classloader, updating only those classes that have changed. This makes app restart significantly faster, almost instant. Hence, "live" reload." from the video, the application starts to restart at 22:24:25.5 and completes restart at 22:24:27.6 This is 2 seconds...... to reload a single class?...... Are you sure? And, if it was reloading a single class, why does it show the 'Spring Boot' ascii text shooting up the console? To my mind, it has done a hot-redeploy.. Anyhow, regardless. I did the same on my own mac laptop, a getting long in the tooth 2011 macbook pro, on the application I am currently creating. Here is the video - https://www.youtube.com/watch?v=fQOqzjtteDE The server starts up in 3.6 seconds, but hot-deploying code changes happens in just over a second. See for yourself !- this is about twice as fast as the new spring boot 'Live Reload' Now, please tell me why I should even consider moving my app to spring boot, when I can do this already? &gt;&gt;This is faster than an app server restart, **but is much slower than "live reload"** &gt;&gt;Live reload restarts the app in the same classloader, updating only those classes that have changed. &gt;&gt;This makes app restart significantly faster, almost instant. Hence, "live" reload. You know what the worst thing about you putting this here is that some nubee developers are going to read what you say, and believe that spring boot is much faster to develop in than crappy old Java EE, and not even bother checking out what modern app servers like Tomee can offer. Hot deploy I have shown to be much quicker than live reload, at least on my laptop. But, maybe spring might improve its live reload performance to compete, until then please stop spreading this myth. 
I think you might not have read the same article the rest of us read: sure, the performance can be somewhat surprising if the body of your loop is free/cheap, but with even a mildly interesting body to your loop (or lambda in your stream()), this drops to near-meaningless overhead. &gt; We have seen that palpable differences between loops and streams exist _only_ with the simplest operations. (Emphasis mine) And from the original article: &gt; You will find that there is no measurable difference any more between for-loop and sequential stream if the functionality is heavily cpu bound. If even string concatenation is a big deal for you, then there are other overheads you are bumping into - stream may be inappropriate, but then again, so is string! Copy on each change? --- As the article notes, for i loops can be cheaper than for-each (from java 5): &gt; // I do not use a "for each" loop (unlike the Langer's article); &gt; // measurements show that this makes things a little faster If you've been extremely performance sensitive, probably were already aware of this, and likely you've been avoiding not only streams, but unneccessary GC, dynamic dispatch, etc. If not, you shouldn't be very concerned about these new figures - they tell us that the overhead is minimal, but present.
yep. finished finally. # Run complete. Total time: 02:30:39 Benchmark Mode Cnt Score Error Units ComplexOperationsBenchmark.array_for avgt 3 81.195 ± 20.769 ms/op ComplexOperationsBenchmark.array_forEach avgt 3 85.720 ± 91.754 ms/op ComplexOperationsBenchmark.array_stream avgt 3 82.214 ± 30.276 ms/op ComplexOperationsBenchmark.array_stream_parallel avgt 3 43.491 ± 42.562 ms/op ComplexOperationsBenchmark.list_for avgt 3 82.892 ± 36.908 ms/op ComplexOperationsBenchmark.list_forEach avgt 3 91.805 ± 69.682 ms/op ComplexOperationsBenchmark.list_stream avgt 3 98.136 ± 78.000 ms/op ComplexOperationsBenchmark.list_stream_parallel avgt 3 48.462 ± 16.451 ms/op ControlStructuresBenchmark.array_for avgt 3 1.647 ± 0.338 ms/op ControlStructuresBenchmark.array_forEach avgt 3 1.346 ± 0.417 ms/op ControlStructuresBenchmark.array_stream avgt 3 1.589 ± 2.298 ms/op ControlStructuresBenchmark.array_stream_boxed avgt 3 5.256 ± 6.908 ms/op ControlStructuresBenchmark.array_stream_parallel avgt 3 1.017 ± 1.452 ms/op ControlStructuresBenchmark.array_stream_parallel_boxed avgt 3 7.280 ± 0.987 ms/op ControlStructuresBenchmark.list_for avgt 3 1.831 ± 0.594 ms/op ControlStructuresBenchmark.list_forEach avgt 3 2.695 ± 2.217 ms/op ControlStructuresBenchmark.list_stream avgt 3 2.503 ± 1.893 ms/op ControlStructuresBenchmark.list_stream_parallel avgt 3 7.215 ± 1.213 ms/op ControlStructuresBenchmark.list_stream_parallel_unbox avgt 3 2.317 ± 2.076 ms/op ControlStructuresBenchmark.list_stream_unbox avgt 3 3.223 ± 1.173 ms/op MediumOperationsBenchmark.array_for avgt 3 4.298 ± 2.610 ms/op MediumOperationsBenchmark.array_forEach avgt 3 4.387 ± 0.734 ms/op MediumOperationsBenchmark.array_stream avgt 3 4.006 ± 0.800 ms/op MediumOperationsBenchmark.array_stream_boxed avgt 3 7.655 ± 1.541 ms/op MediumOperationsBenchmark.array_stream_parallel avgt 3 1.591 ± 0.742 ms/op MediumOperationsBenchmark.array_stream_parallel_boxed avgt 3 4.195 ± 1.288 ms/op MediumOperationsBenchmark.list_for avgt 3 4.001 ± 0.801 ms/op MediumOperationsBenchmark.list_forEach avgt 3 4.456 ± 1.465 ms/op MediumOperationsBenchmark.list_stream avgt 3 6.221 ± 1.302 ms/op MediumOperationsBenchmark.list_stream_parallel avgt 3 2.185 ± 0.394 ms/op MediumOperationsBenchmark.list_stream_parallel_unbox avgt 3 2.294 ± 1.723 ms/op MediumOperationsBenchmark.list_stream_unbox avgt 3 4.177 ± 1.117 ms/op SimpleOperationsBenchmark.array_averageDouble_for avgt 3 0.532 ± 0.006 ms/op SimpleOperationsBenchmark.array_averageLong_for avgt 3 0.178 ± 0.004 ms/op SimpleOperationsBenchmark.array_average_stream avgt 3 1.015 ± 14.961 ms/op SimpleOperationsBenchmark.array_blackHole_for avgt 3 1.544 ± 0.534 ms/op SimpleOperationsBenchmark.array_blackHole_stream avgt 3 1.465 ± 0.858 ms/op SimpleOperationsBenchmark.array_max_for avgt 3 0.150 ± 0.119 ms/op SimpleOperationsBenchmark.array_max_stream avgt 3 2.457 ± 3.707 ms/op SimpleOperationsBenchmark.array_sum_for avgt 3 0.194 ± 0.023 ms/op SimpleOperationsBenchmark.array_sum_stream avgt 3 1.291 ± 3.430 ms/op SimpleOperationsBenchmark.list_averageDouble_for avgt 3 1.073 ± 0.265 ms/op SimpleOperationsBenchmark.list_averageLong_for avgt 3 0.794 ± 0.180 ms/op SimpleOperationsBenchmark.list_average_stream avgt 3 3.559 ± 0.425 ms/op SimpleOperationsBenchmark.list_blackHole_for avgt 3 1.965 ± 1.610 ms/op SimpleOperationsBenchmark.list_blackHole_stream avgt 3 2.670 ± 4.949 ms/op SimpleOperationsBenchmark.list_max_for avgt 3 0.852 ± 0.463 ms/op SimpleOperationsBenchmark.list_max_stream avgt 3 3.405 ± 1.858 ms/op SimpleOperationsBenchmark.list_sum_for avgt 3 0.895 ± 0.767 ms/op SimpleOperationsBenchmark.list_sum_stream avgt 3 3.535 ± 0.434 ms/op
I didn't stop using my system for these 2.5hrs either. I had HP ALM open, SourceTree, Outlook, Chrome tabs, etc. but I did give Java.exe highest priority possible).
Any reason for posting this here rather than in /r/programming? There's nothing Java specific in the article.
The title doesn't match the content. Since when are 'evangelists' the same thing as 'executives?'
one of them was a VP and an evangelist. so ... that's why. but yea the title got me more worried than the content. click-bait for sure.
&gt; The 'hot reload button', quits the app, and loads everything. Just &gt; like restarting tomcat, by pressing stop, and start. Are you sure you watched the video? The narrator *demonstrated* that a hot start is slower than a cold start. That not everything is reloaded. &gt; This is 2 seconds...... to reload a single class?...... Are you sure? So, maybe you watched the video, but didn't understand what the narrator was saying. No. To restart the application context, not to reload a single class. Reloading a single class is instant. &gt; And, if it was reloading a single class, why does it show the &gt; 'Spring Boot' ascii text shooting up the console? If you actually listened and comprehended what the narrator was saying, the "Spring Boot" logo appears because the application context was reloaded. &gt; To my mind, it has done a hot-redeploy No, a hot redeploy (as in Tomcat or Wildfly) is undeploying and redeploying the app. What Spring is doing is only reloading the changed classes and then restarting the context. Automatic Restart (the real name of what we are talking about) is actually the slower approach, but the simpler one. But you don't actually have to restart the app. Because the application is running out of the IDE, you can use hot reload, which is a button press on the IDE. Or, use Spring Reloaded. In case you can't wait a whole two seconds. Actually, Live Reload refers to the browser plugin which automatically reloads the page for you when the application context is reloaded. This whole point was to demonstrate that what Spring Boot is doing is not hot redeploy in the traditional Java EE sense. I'm not making any claims against Java EE. &gt; this is about twice as fast as the new spring boot 'Live Reload' "twice as fast", really? You're equating a time difference which is within an error margin apart to an order of magnitude difference? Biased much? &gt; Now, please tell me why I should even consider moving my app &gt; to spring boot Because you want to run your application from a single-executable fat JAR. In this case, Spring Boot is an alternative to DropBox, not Java EE containers like Wildfly. Or you already have a Spring app and you want to move to more modern configuration. If your app is already built using full stack Java EE, why on earth would you consider moving to Spring Boot? &gt; spring boot is much faster to develop in than crappy old Java EE I never said anything about speed of development. You're grasping at one metric, which is app restart. &gt; Hot deploy I have shown to be much quicker than live reload, No, you have shown it to be similar within a margin of error. &gt; not even bother checking out what modern app servers like &gt; Tomee can offer I'm very well aware of what modern app servers can offer. I develop Java EE apps on Wildfly too. I'm not making *any* claims about Java EE. I am responding to your hysterical and biased claims against Spring Boot. &gt; until then please stop spreading this myth. The only "myth" I'm spreading has been fully constructed in your own head.
To wit: &gt;Implementation note: This implementation is a stable, adaptive, iterative **mergesort**
Mock requests or mock responses?
And since when is an 'evangelist' anything more than a euphemism for 'fanboy' or 'advocate'? Is that some kind of official position now? 
I don't quite understand how your comment addresses my previous comment.
Ugh, you're talking about node-locking. Please god, don't node lock your software. As a former sysadmin, please believe me when I say there are a million ways that can blow up. That said, the basic principal involved in node-locking is as follows: 1. Set up your own private signing key (RSA, GPG, X-509, etc) 2. Generate a machine fingerprint (usually this includes things like CPU serial number, network MAC addresses, etc) 3. Take the customer's fingerprint and sign it with your private key 4. Give the customer the signed fingerprint, tell them it's a license file 5. Modify your software to read in this license file. The software will first calculate the fingerprint (as described above). It will then read the license file, verify the signature, and compare the contents to the calculated fingerprint. 6. If they match, then you're running legit software. If not, then exit. Now that you know what it is, also please realize (a) it's a pain in the ass for users, because they do pesky things like swap out their CPU or network cards from time to time, and (b) bypassing these kinds of restrictions in Java is trivial, all I need is a decompiler and a few free hours. 
PrimeFaces 1.0 exist from 2010. Which "Primefaces" you talking about? 
Evangelism is a form of marketing -- not through ads but through talks and articles. You prefer calling it "advocate"? Fine, but it's very much an official marketing position and a very important one. Like sales or presales but unlike ads, evangelists give important feedback back to the product team, and actively help shape the product.
Two open source installer generators: http://izpack.org/ http://nsis.sourceforge.net/Main_Page As for copy protection, you are on your own (an OS copy-protection/DRM/lock-in system would be somewhat contradictory, wouldn't it?) or you look for a commercial packaging tool. 
Yes. http://techblog.bozho.net/i-am-not-allowed-to-post-on-reddit/ :-( 
Immutables, Multimap, Multiset, Preconditions, EventBus, collection utilities, and a few misc areas are still pretty useful. Sometimes the Guava version is simpler than the stream alternative. For example Iterables.partition() is much cleaner than a stream-based approach to creating batches.
I am not an admin :( Link : https://spring.io/blog/2015/09/04/what-s-new-in-spring-data-release-gosling
&gt; log4j is EOL FYI: log4j 1.x is EOL, log4j 2.x is live and kicking (and amazing fast) Anyway, I agree with using slf4j API with log4j 2.x backedn
It is if those tweets come from the accounts of well known people.
Yea, I just usually see log4j2 being used to describe log4j 2, while log4j is log4j 1.
I think you still linked to the wrong story again based on your title... https://spring.io/blog/2015/09/04/what-s-new-in-spring-data-release-gosling
here's a pdf you might like then: [Erlang Runtime vs. JVM](http://ds.cs.ut.ee/courses/course-files/To303nis%20Pool%20.pdf)
I gotcha. No worries. Thanks for explaining that to me. I've heard the term in religious contexts, what was confusing to me was seeing it in an article used as a proper title. I had no idea that it really is something distinct from a marketing perspective.
I do a mix of controls that are code only or FXML with code. For some controls, FXML doesn't make sense. They are code only because they deal heavily with user or data interaction in order to draw correctly. For some controls, FXML is a life-saver because they are made of several other controls and it is easy to visually build them in Scene Builder. I would say, go with whatever makes sense. Edit: For GUIs, FXML using SceneBuilder all the way!
[removed]
One thread at a time means thread safe to you? Of course it's thread safe. There isn't more than one thread. That makes no sense. Thread safe means: 'Thread safety is a computer programming concept applicable in the context of multi-threaded programs. A piece of code is thread-safe if it only manipulates shared data structures in a manner that guarantees safe execution by multiple threads at the same time.' Only using one thread is a limitation of the software, not thread safe. 
Not a fan of Spring Integration? 
I've started with Java last week. I'm at the point where I may be able to make a calculator (which is our current school project). But I am rather good with PHP. I think I'm going to ask /r/webdev or /r/php for some advice. 
Well, Oracle doesn't make money off of Java do they?
Gotcha. Retrofit has nothing like that, and at this time there's no plans to bake something exactly like that in. However, service declarations are just interfaces. You can implement that interface on an arbitrary class and return whatever data you want directly. Inject that fake class instead of the Retrofit-created instance and you have testable/deterministic API consumption. The "mock" module in Retrofit wraps these fake implementations and creates artificial delay to simulate a network. You can even force a percentage of calls to fail with a transport exception (`IOException`) of some kind. This is the approach we take in our use in Android apps. Another nice advantage of this approach is that these classes can be stateful like a server to allow the data it returns to change over time and based on other API method calls. If that's not your fancy, you can use a proper HTTP server that runs locally and offers scripting-based responses. We use [MockWebServer][1] from OkHttp for testing Retrofit itself, for example. Here's [an example][2]. There's no reason you couldn't hook that up for any other Retrofit use. [1]: https://github.com/square/okhttp/tree/master/mockwebserver#readme [2]: https://github.com/square/retrofit/blob/848f330230e827475baea5bfeadd0f16f8feb476/retrofit/src/test/java/retrofit/CallTest.java#L59-L71
I followed the news about this but I don't get the magnitude. 3-5 people have been let go from some Java department at Oracle and at least half of them were evangelists? Doesn't sound like a big deal...
Why Erlang when we have vertx now?
Honestly, I've not used it in anger on a project, so my view on this is only surface-deep. What I did find was that whilst they recreate the EIPs equally as well as Camel, my impression was that Camel is far less verbose. For me, that means cleaner, more readable, code and configuration. Spring has improved this in the last 18 months (?) or so with the addition of a proper DSL, so I'm hoping that'll help - it might even convince me to take a closer look at it. Personally, I think Spring overall is one of those projects, where if you're fully bought into the ecosystem, you're comfortable with the wiring, then you're good to go, and Spring Integration will be no trouble for you. That's just not me. I'm way more comfortable with Camel. That said, if you're doing an integration project, no reason why you shouldn't PoC both solutions and see what works best for you. Most appropriate tool for the job and all that jazz. What really irritates me is the view that Spring is the solution, but we're not sure what the problem is yet.
Nice read but shouldnt the JIT do loop unrolling when necassary? Nevermind didnt read the conclusion... 
Agreed. I definitely can see the argument of "well, dependency resolution get substantially more complicated with version numbers involved"....but at the same time, version numbers *are* a consideration, so this just shunts that part of the problem outside of the JDK and means that we will continue to have to rely on external tools for dependency resolution rather than built-in module formats.
sorry, meant EARLY ACCESS BUILDs!
No Problem, mate. And App Inventor is the best way to get started in android. Kudos to the MIT team responsible for it.
Some more: a method that accepts varargs will create a new array on each invocation if you don't pass in an existing array. values() from enums returns a new array each time.
While I agree that it could theoretically provide a lot of value to include versions into the module system, my guess is that, in practice, it would be a nightmare. Imagine trying to enforce a visioning scheme across a wide ecosystem of libraries, and getting everyone to follow the same rules around which types of changes represent a change to the patch, minor, or major version numbers. We have [semantic versioning](http://semver.org/), and most people agree that it is the *right way* to do versioning, yes not all that many projects actually attempt to follow it, and far fewer really to follow it correctly.
Every single one of these articles: 1. Copy of a tweet. 2. Reference to Reddit. 3. Unsubstantiated and nonsensical claims about how Java is dead. Only thing I've learned is journalism is dead and all of these publications are a joke.
Sorry, should have done more research. Will do next time.
They should have at least added support for applications / modules to query the version of a loaded module so they can at least check it themselves. I think this will cause problems down the road when there are many versions of the same module.
Where did you hear that? The [quick start document](http://openjdk.java.net/projects/jigsaw/quick-start) says modules *are* versioned.
You cannot specify that you require a certain version of a module.
Oh. Why not?
But without checking the versions, that validation is incomplete.
It was a huge performance issue for my application but if they don't reside in very hot portions of code you probably won't have problems.
Awesome, good luck :-)
Probably you could give a look to an open-source JVM([list of JVM](https://en.wikipedia.org/wiki/List_of_Java_virtual_machines)). If you want something that implements JDK8, the [Azul Zulu](http://www.azulsystems.com/products/zulu) project did look promising to me, yet I didn't really dig this very deep. In any case, I guess if you can compile your own JVM your on the good track.
I don't "rail against shade". Capsule itself uses it for capsule code (well, not Maven Shade but Gradle Shadow, but it's the same thing). Still: 1. Shade doesn't always work. Some libraries or library-combinations are resistant to shading. It most certainly doesn't work if you have native libraries. Capsule always works. 2. Even when shade works, you still need a startup script. Capsule takes care of JVM-version selection, setting flags, setting classpath and agents etc. Also, Capsule has *many* other features, like caplets that give you Linux containers, auto updates, running as a daemon etc. OTOH, the advantage shade has is that it works for libraries, too, whereas Capsule works only for applications. They both have a place and neither can replace the other.
Yeah, you're not going to get anyone to bite. Your question is so incredibly vague as to be unanswerable. We have no idea what your application is like. What I will suggest to you is to actually *measure* your software to see how many users it can handle, and then make your decisions based on concrete numbers. JMeter might be able to help you there. 
Sure. Take a look at [modes](http://www.capsule.io/user-guide/#modes-platform--and-version-specific-configuration)
Calculator done. Now to add animations to it. If I want to display a random array of messages in a random order for some time when hitting a JButtom, how would I do this?
What do you develop? Web, Desktop, Backend, Mobile?
I'd disagree with the not wasting time becoming an expert. Given how prevalent Java is in the corporate world, you'll always be able to get a job with your skills. When you see how many times Java is compared to COBOL, I don't think it will be going away till long after we're all retired. 
Its not totally related but i still want to share something that wasnt obvious to me for a long time. A char is 2 bytes long! Yes it makes sense, utf-16 and all that, but i did not know it for a long time! I figured it out one day when i needed a 3 GB big char array with only basic ascii characters... now its a byte array :)
I did, and I was told automoderator deleted this thread or else I would have. I apologise
[Dagger2](https://google.github.io/dagger/) would be my suggestion and manually do the resource binding in the app filter. Something along the lines of this public class MyApplication extends ResourceConfig { @Singleton @Component(modules = {MyModule.class}) public interface MyResourceComponent { FirstResource getFirstResource(); SecondResource getSecondResource(); } public MyApplication() { MyComponent component = DaggerMyApplication .builder() .build(); register(component.getFirstResource()); register(component.getSecondResource()); } } We used Guice on an application and while it works great, most of the time, when it fails it can waste a day of development effort trying to track down exactly what went wrong. Dagger (and especially Dagger 2) is MUCH easier to debug and discover issues. It fails at compile time which is awesome and then runtime failures (exceptions in a constructor) result in really easy to read and diagnose stacktraces. The main downside to dagger is you can't really do the serverlet resource auto discovery stuff. You either need to do the injection at each individual resource or do what I did above and inject the resources individually. That generally isn't too big of an issue IMO and benefits outweigh the annoyance of having one file somewhere with a lot of registers in it. Dagger restrictions that I'm generally ok with. * No assisted injection * No private field/method injection * No cyclic dependencies * Every class needs either a provider or an @Inject annotated constructor * No dynamic injection (You can't say, `Injector.getInstance(myClass.class)`). Benefits * Compile time injection errors (huge!) with readable error information. * Very fast! Basically as fast as writing hand written injection * Dead simple to debug. Guice is more feature rich, but we didn't use most of those features. As for spring, I've never used it.
Replacing your DI container just for the sake of doing something new seems a bit contrived. If you are already using spring MVC, I don't see why you don't stick with that stack. &gt; I was asked to do some fact finding and research on alternate technologies and frameworks the company could use. I would suggest looking into spring boot, grails, dropwizard and/or play as alternate technologies that could drastically improve your ability to prototype webapps (if that is what you typically do). 
Why does Guice normally fail for you? It seems that if the object constructors/factories report error conditions and you set up the classpath properly, that there isn't much else to go wrong. I've not seen Guice swallow any exceptions or hide anything from me.
I found the primary difference, just at the DI level, is that Spring supports wiring things up from a configuration file, and Guice doesn't. If you're just doing things like providing different configurations at test time and trying to leave your software more flexible, Guice is fine. But if you find yourself rolling your own configuration files to standup Guice Modules a lot, then Spring likely will save you some time.
Can CDI be used inside a normal servlet container, like jetty and tomcat?
Yes. I use it on standard tomcat. It is simple to do. Below are the instructions froma link. http://balusc.omnifaces.org/2013/10/how-to-install-cdi-in-tomcat.html 
I had a big post at home ready to respond and left for work without hitting "save". /u/BadMoonRosin makes most of the points I was going to make. One other alternative if you're looking for "lightweight" DI containers/injection is [Jodd: Petite](http://jodd.org/doc/petite/). Someone made a similar post to yours about a year ago and someone else listed Jodd. I ended up using it in a small side project and it worked just as described. If you're used to Spring, Jodd will feel similar but with a MUCH lighter footprint. downside is that Jodd is tightly coupling the DI container to your app which a purist would argue isn't "true" DI, but is more or less true in any application that uses a DI container (note: you don't need any application to do DI, you can homegrow something quite easily with "setter injection".)
Another example, but using Apache Tomee rather than Spring Boot... @Path("/") public class ThisAlsoWillRun { @GET public String home(){ return "Hello World"; } } This is a fully functional JavaEE app, ready to be dropped into an app server of your choice.... 
I have plenty of experience with Spring and zero with Guice, so I'd say Guice ;) On a more serious note: no one really does Spring DI with XML anymore. And what I've seen from Guice it's rather similar so I doubt there's very strong cases to make for either of them. 
I think it was mostly because we had a really nasty object graph (not so much a guice issue). The problem was that we had so many cyclic dependencies that on exception the error message guice would produce would often cut off before it actually got to the thing that caused the exception. That isn't to blame guice, I think we did a lot of bad things with our app. But it has definitely made me appreciate not running into that issue at runtime.
Have a look at Apache Tomee - It is bog standard Tomcat you already know, except it has been modified to work with CDI by default. You don't need to add any more libraries to your app for it to just work. 
Guess it's just me then, fighting against the notion of even having to 'do' any XML. 
That's not true. The company I work for has a *lot* of code and experience with Spring using XML based configuration, and makes a lot of use of custom XML namespaces for configuration so we're not likely to more away from it any time soon.
:P quite rightly said. BTW, even as I post this, I am working on learning to use the Android Studio.
You know that Spring has native support for JSR-330, right?
Both Guice and Spring support the JSR-330 annotations, so if you stick to those annotations, switching one for the other in the future might not be the horrendous task it might have been if you used the project specific annotations.
Also check out [Ratpack](http://ratpack.io) as an alternate. I've only seen a little bit of Ratpack and Dropwizard, but from what I saw, I liked Ratpack better. And actually, if you like Guice, Ratpack can use Guice for DI too.
This is right. And use the weld implementation, it's WAS compliant.
IMO, the only java code you should physically write is code that can be covered by tests. Dependancy injection are a configuration, and to me they are more appropriate for a configuration language, like XML, or YAML. That's the main reason I don't like Guice or Dagger. 
If you're looking for alternatives, you need to be aware of what pain points your existing solution has and whether a potential one solves them. Don't just go off with putting feature lists side by side. I haven't done any Spring, but my experience with Guice and others is that "assisted injection" (some fields are injected and others are supplied at runtime) is an uncommon feature. Does
/r/StartledCats
One of the nicest technologies I'm using right now is spring data jpa &amp; querydsl. So for me spring is a no brainer. Anyway for productivity gains, checkout lombok and/or groovy.
Spring is much much more than a DI container. The Spring DI container is only what glues everything together, but it comes with a lot more. 
Haha yeah the error messages are great, until the annotation processor just crashes in eclipse with no error message. I love dagger2 but it doesn't quite work with my old-ass build setup.
Have you went to 2.0.1? I read that they fixed some issues with the eclipses compiler annotation processor in that version (I've been using netbeans)
Funny how everybody responds about DI, while the question is about guice-*servlet* vs Spring *MVC*. That's probably because nobody ever heard of Guice-servlet. I'd say in general once you use some Spring, you are better off using more spring libraries than others, because Spring libraries will continue improving together, so you can more easily migrate to newer versions. Also support will be better. Using a mix of Spring stuff and spring alternatives just gives you unusual setups nobody tried before, so you will be the one discovering bugs. If you go with an a--Spring setup, your setup will likely be similar to that of hundreds of other companies, so bugs will mostly have been discovered and fixed.
I mean being fast doing something technically *unusual* that has not been done before. The kind of thing that cannot be done by plugging together existing libraries and hence has sufficient business value to justify a startup. Note there are also startups with innovative business ideas that do not require special coding, and those won't need that kind of gurus, and may as well use Java. I am talking about github as an example, written in ruby. It could have been done in Java of course, but wasn't. And github was a lot about rewriting git, so that requires some seriously smart people. I am not talking about Groupon.
[Yes.](http://weld.cdi-spec.org/)
If you have a meaningful argument against the technique detailed in the post, and those that choose to apply it as an alternative to object speculation, then please use your 30 years of experience to demonstrate it.
When I ask a Java EE question at SO, I've got an answer in minutes really. Java EE has a really nice community.
And CDI the emperor.
I'll definitely take a look. In the meantime, https://github.com/rholder/guava-retrying and https://github.com/nurkiewicz/async-retry.
I have also used spring-retry for this.
What is a "JEE compliant servlet container"???
Well, it depends on your perspective what is an app I guess. But from my perspective, what you say is a lie. You need: * pom.xml - with some dependencies and probbably at least a compiler plugin. * Manually create folder structure. e.g. I always forget which one goes where exactly even though I work with Java for some years now. * The file you pasted. * Download Server. * Integrate Server with IDE or compile everything in terminal and copy WAR to the server directory. * 99% chance that you still missed something - on server startup will see some errors. So troubleshooting phase. To me this is not even close to Golang, .NET, Python, even Scala by how much time it takes to be ready and working. 
Ratpack is a *very* non-standard solution. Dropwizard uses Java standards (JAX-RS), Spring Boot does, too, or uses it's own API, but it's widespread and supported enough.
not really. - pom.xml - you can use maven archetypes instead of writing it manually. you can also use a 'wizard' at https://start.spring.io/ - folder structure - see above - the file he posted - yes, you need at least one source file :) - server - not needed. spring boot/dropwizard use embedded servers - integrate server with ide - also not needed as there is no separate server - and you can miss something in any language.... So if all you want is a hello world or any other toy app - that's pretty much everything you need.
[One-line recursive function](http://stackoverflow.com/a/32532049/84538) :-)
First of all I was commenting to Java EE application, not dropwizard/boot types of solutions. Secondly - I find archetypes (apart from simple webbapp) to actually require more work than they save time since usually you want to change a lot. To generallize, I'll repeat myself - it's strictly perspective thing - how you look at it. * You view is probably along the lines - "there technically exists short(est) road(s), so it's not far". * My view is more like - "there is huge road-mess and things are not straight forward - there is no 90%-acceptable universal short-enough road".
Well having a JVM certainly helps -_^ But seriously, a few jobs ago we ran all our traffic off of 3 spring/tomcat servers for much more than 100 concurrent users. We could typically see 850,000 users in 15 minutes.
I've been using Guice for a few years, and the only times it has really frustrated me was exactly that. When I made a minor change, and suddenly all the magic it did to resolve cyclic dependencies wasn't quite magic enough. The resulting exceptions are what nightmares are made of. I eventually bit the bullet and added this to my top level module: binder().disableCircularProxies(); There were a few things to fix right away (far less than I expected), and my quality of life has been much better since.
My experience is with Guice and really old, poorly used, XML based Spring. Of those two I would certainly pick Guice. The reality is that they are two different things. If you are simply looking for Dependency Injection, go with Guice. If you want the plethora of other things Spring can do, go with Spring.
That's easy, do Minecraft mods.
I felt like I had just leveled up the first time I started reading and writing bytecode.
I've been toying with a "build your own text adventure" as the first thing. Building on it during a later event. 
Maybe then build a calculator I feel like a lot of ppl think programming would be fun but they don't think it's doable show them it's doable 
Those are good ideas, probably better to "cheat" a little since I only have 5 hours. 
Minecraft mods would be an awful place to start. It's such a complicated system, everything line they'd write would be a line they couldn't understand without a ton of prior knowledge.
Oh, I haven't done it myself, that's just what I found on Google search when I googled Java for kids.
The GUI builder in eclipse beats netbeans by a mile.
If Java isn't a requirement, get them to make a simple web page.
If you have to write shitty XML files outside of the required arquillian.xml file, then something doesn't sound right. If you're using a Java EE 6 spec-compliant version of CDI, then typically you need an empty beans.xml or a beans.xml with a few interceptors or alternatives for example. If you're using a Java EE 7-compliant version of CDI, you don't need a beans.xml.
I get what you mean, but technically Tomcat's implementations of JSP and JSTL do correspond to a particular version of Java EE. That might be what the person meant.
Eclipse is the good quality hamburger right? 
If it doesn't absolutely have to be Java (and it probably doesn't, in only 5 hours), then [Scratch](https://scratch.mit.edu) could be a nice alternative to get young people excited about programming. Be sure to check out also what [Devoxx 4 Kids](http://www.devoxx4kids.org) is doing, for additional inspiration.
I would take a look at arduino's. You get some programming in C and get to make an object you can take with you. Java can be super boring and still. There are tons of fun python projects to do like scraping twitter and etc.
&gt;First of all I was commenting to Java EE application, not dropwizard/boot types of solutions. Zeffas. Regarding The spring boot / dropwizard types of solutions. Do they require Java to be installed before they work? Do they require Maven to pull down additional resources before they work? Do they download an imbedded server as part of the Maven resolution? Then the Spring Boot solution also is Lying. Ok. I will do a walkthrough from scratch, I will assume Java JDK is already installed.....BUT *Nothing* else! 1) Download / unpack Tomee. wget http://mirror.catn.com/pub/apache/tomee/tomee-1.7.2/apache-tomee-1.7.2-jaxrs.tar.gz tar -xvf apache-tomee-1.7.2-jaxrs.tar.gz 2) Create folders to store your app. mkdir -p apache-tomee-jaxrs-1.7.2/webapps/helloworld/WEB-INF/classes cd apache-tomee-jaxrs-1.7.2/webapps/helloworld/WEB-INF/classes 3) Create the HelloWorld.java vi HelloWorld.java import javax.ws.rs.*; @Path("/") public class HelloWorld { @GET public String home(){ return "Hello World"; } } 4) Compile it. javac -classpath "../../../../lib/*" *.java 5) Start the server. sh ../../../../bin/startup.sh 6) Navigate to page http://localhost:8080/helloworld Please detail the steps required to get spring boot going from scratch..... (including the installation of Maven, etc). Also, I had a look at the GoLang installation, here. https://golang.org/doc/install This has steps to: 1) Download / extract the tar 2) Configure environment variables to point to the installation (not needed in the TomEE walkthrough) 3) creating a workspace directorys and configuring environmental variables. 4) Createing a test hello world source file. 5) compiling 6) running. These steps have near equivalent to the Java TomEE walkthrough, but they require adding of environmental variables. But, the Tomee version needs Java JDK installed. The point I am making is that Java is not anymore more complex, than other solutions out there...... Its just different. 
I didn't like two facts about guava-retrying. I can't specify a default value and it throws two checked exceptions. But if you don't mind those, it's a good library.
When I was starting out with Java I started with [gpdraw](http://pavao.org/compsci/gpdraw/html/gpdraw/package-summary.html). It was really nice because I could see all the changes I made every time I compiled. I would have them try to draw a star with loops. It is great to start learning OOP as well because of how the objects and methods were named. 
That and I don't have $400 for a teaching version of it. :( 
you've posted this twice. sort your life out.
I posted it here first - I had a message telling me to post it to JavaHelp. Sort your own life out!
Yikes, I didn't realize that's how that worked...
Yeah, you have to pay for it now, unless you run a cracked version. 
&gt; I put classes into my app servers deployment directory, because thats where &gt; you put classes you want to be deployed. Yes, obviously. But messing around with a deployed app in your app server's deployment directory is not the stuff that you should be teaching beginners, because there are a lot of pitfalls to that approach. Especially once you move past JSPs. No person in the modern world should be writing apps hosted in JSPs. That practice ended in the 1990s. &gt; A beginner will not be blinded by the complexities of installing Maven etc. Yes, as I demonstrated, Maven is very difficult to install. I'm still working on getting my eyesight back. &gt; But it was the way I first got going with Tomcat many years back. and &gt; using this way I was able to find out more about how servlets / jsp's work I also learned JSP this way. Not Servlets. Servlets are real classes that require you to recompile your classes yourself, using a tool. To understand packaging. That's when I learned about Ant and frameworks like Struts. &gt; What you are telling me is that it is so difficult to get a spring boot app &gt; working, you need a complex build tool like Maven to get , and this takes &gt; care of downloading the (imbedded) server, and setting up the complex &gt; directory structure, and you even need Maven to run it! Yes, I use tools. I'm not making fire by rubbing two sticks together, either. &gt; I proved you need none of this to get a simple JavaEE up and running &gt; from scratch. Just download the server, add a class in the right place to &gt; process the request, and that is it. Easy No, you proved that you have to download a tool. And run that tool. And then you get a web app running in a web browser. Your tool is Tomcat, my tool is Maven. The significance of the difference is only in your own mind.
Why.... Because I have to use spring.... To pay the bills, as you say. And I hate it with a passion as every spring program I have worked on, even the spring-boot ones, end up as a huge spaghetti mess, with property files containing many database connection strings for live or dev, etc. Its complexity hell. I want to shout out from the treetops this is crap - LOOK OVER THERE AT JAVAEE- The grass is greener!!, and hopefully if I can get one other developer in the world to see what Java EE has to offer, rather than going to Spring Boot, or Golang, or Python, or PHP, etc, then it is worth it. 
Then you've defeated your own point. It's only with JSPs that you can drop source files into the deployment directory and have the app container do the work for you. That's where the "easy" ends. Otherwise, you have to build things first in order to even get the classes to drop into the deployment directory. So in your silly example, you're exposing beginners to the complexity of running the java compiler manually from the command line.
"It's only with JSPs that you can drop source files into the deployment directory and have the app container do the work for you." Really.... Sorry, I wasn't aware of that. I should get rid of this example as it cant possibly work then.
The example will work as presented. As long as the compiled classes are in WEB-INF/classes when you start the server.
You're entitled to your opinion, of course, but I think you're selling Ratpack short if your argument is just that it doesn't conform to as many standards. I'm certainly not saying it's the best choice for every project, but their project goals align heavily with many of the things I find important in application development. &gt; &gt;Ratpack’s goals are: &gt; &gt;To be fast, scalable, and efficient &gt;To allow applications to evolve in complexity without compromise &gt;To leverage the benefits of non-blocking programming and reduce the costs &gt;To be flexible and unopinionated when it comes to integrating other tools and libraries &gt;To allow applications to be easily and thoroughly tested &gt;Ratpacks’s goals are not: &gt; &gt;To be a fully integrated, “full stack” solution &gt;Provide every feature you might need in a neat box &gt;To provide an architecture or framework for “business logic” http://ratpack.io/manual/current/intro.html#goals
No, and in fact near the end of the document host applications are described that can load different guest applications with different module versions. Keep in mind that even when there are two versions of a module on a given module path, only one will be active (as two modules can't claim/export the same package).
Teenagers relate to things that interest them. They like games, chat, texting, social networking.
I think this is not the kind of post people expect coming into this subreddit. If you made a reasonably detailed comparison between java ee and spring maybe people would enjoy having a discussion around it.
You can check out Karel j robot I have students start with this and they thought it was pretty fun. Plus it's visual http://csis.pace.edu/~bergin/KarelJava2ed/Karel++JavaEdition.html 
I'll repeat again (third time) - you are basically saying this "there technically exists short(est) road(s), so it's not far". My answer is "well, so what, if majority of cars cannot even fit that road?". The provided example for TomeEE is perfect example of this. Yes there are many ways to do things rather quickly. However my main point is this - who works on projects like that? - 1% maybe? This is not real-life example, sorry but this is trash. To contrast, "Visual Studio's - new project" creates a real-life project with all the goodies and that's the way majority of real projects were created. So sorry, it's not comparable. Please try to understand where I am coming from, because I feel that we are talking about two different things here.
&gt; Why so much hostility? Mainly, your attitude. I'm all for the sharing of knowledge, and I the premise of your post is genuine, as I think Java EE *is* worth a shot (although, I personally don't feel the need in what I do), but you just seem really confrontational in both threads.
So don't work with Spring then and specialize in Java EE. Nobody is holding a gun to your head I'd hope :) I specialized in Java EE before because I liked it better and tend to work projects that fit my strengths, rather than showing up, hating it and probably not doing the best job I could. Besides, a lot of the recent good stuff in Java EE was made possible by innovation done by Spring and others :) 
I would suggest picking up [Java Performance: The Definitive Guide](http://shop.oreilly.com/product/0636920028499.do) By Scott Oaks. It does an excellent job of talking about, in pretty good detail, how everything works under the hood. You pretty much need to know what goes on under the hood in order to write fast java, so looking for books/guide which talk about performance would probably lead you the learning about how the jvm works. I would also suggest looking at [Java Concurrency in Practice](http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601) by Brian Goetz and pretty much the whole JVM team. It does a pretty good job of explaining the ins and outs of concurrency, important to know if you want to take full advantage of your hardware.
There are ways around it, It came up once or twice. How we got around it was basically something like this public class AlmostDynamic&lt;T&gt; { public static final AlmostDynamic&lt;Integer&gt; A = new AlmostDynamic&lt;&gt;(MyComponent::getA); public static final AlmostDynamic&lt;Double&gt; B = new AlmostDynamic&lt;&gt;(MyComponent::getB); private final ComponentReader&lt;T&gt; reader; private AlmostDynamic(ComponentReader&lt;T&gt; r) { this.reader = r; } public T inject(MyComponent component) { return reader.inject(component); } @FunctionalInterface public interface ComponentReader&lt;T&gt; { T inject(MyComponent component); } } With usage that looks something like this public class Thinger { &lt;T&gt; T almostInject(MyComponent component, AlmostDynamic&lt;T&gt; thingy) { return thingy.inject(component); } } Definitely a little verbose and more cumbersome, but if you aren't doing it too often then it isn't so bad to maintain. It does, however, really REALLY benefit from java 8 features. This gets ugly fast with Java 7 and below. You can do it with an enum and save some writing, but you lose the type safety since you have to cast (Wouldn't generics on enums be nice? I think they would.).
I was in the audience for this talk and can highly recommend it. Good insight in Spring boot and its configuration, and Long clearly loves what he does and it shows. 
Don't use Mongo.
anything Josh Long is solid stuff. He knows his Java in and out especially Spring libraries.
I can speak to Spring's ease to create a REST API. It is a fantastically easy framework to get a REST API going. I'm not sure about the rest of it. I just haven't used much more, and I'm probably missing out. The video isn't a tutorial per se but at least the first part is a good example of how quick and painless it is get the backend going.
I'm curious why
What do you think you need Mongo for?
I'm looking to store data. I could use a MySQL but I thought Mongo may be an easier alternative. I liked the idea of having dynamic data schemas. Do you have an alternative that may be a better? 
If that's what you care about then use PostgreSQL instead. Hstore and json data types will give you no/dynamic schema.
Much easier than configuring Mongo properly.
Reddit looks more or less fine on it. No surprise there :D Edit: Scrolling in comments is horribly slow, though.
Indeed, we have been testing with Reddit and HackerNews since day one. Thanks for checking it out. Scrolling is slow because it changes hover states of the elements underneath the mouse, and the hover handler is not yet smart enough to know when to trigger a re-layout. Hence, it takes a pessimistic approach and triggers a re-layout when any non-trivial hover effect is encountered. The browser is still in very early stages of development. There is a lot of ground for optimization. Any help is welcome.
I've tested it for few minutes now, it works pretty good! Like it that it actually blocks Ads (does it? or maybe it's my hosts file? I don't know). Felt awkward hat Google doesn't show normally (not English, RTL version), though.
There are very few use cases where Mongo has any advantage at all.... and has many disadvantages. Postgresql is already benchmarking faster than Mongo for JSON searches. A relational database, like postgres or mysql, should be your first thoughts when storing data - only if you have huge data storage needs (many terrabytes) should you even begin to consider using something like Mongo.... 
The article does not cover the main issue in using JAX-RS in spring: dependency injection. How do you wire up your services? You can find how to do it online but it's a glaring omission from this article. 
No, it doesn't block ads specifically. It blocks javascript, cookies and frames by default. The ads getting blocked might be a side-effect or it could be your hosts file. The request policy can be changed per-site or globally via the [Request Manager](https://github.com/UprootLabs/gngr/wiki/RequestManager). Edit: Oh, RTL is not yet supported, sorry.
May I ask why?
Sure :) This badly formatted [article](https://gngr.info/doc/introduction.html) covers it.
Spring Boot is a good example of removing some of the barriers into writing Java applications, whether it be web or command line apps. It takes an opinionated view of the (Spring) ecosystem and provides you with a sane set of dependencies to get something up and running. With modern Spring you shouldn't even need to write a lick of XML, outside of your maven POM anyway. The Java ecosystem is as diverse as it is daunting, but you can make it simpler by asking what it is you are actually wanting to do, then you can whittle down to the tools required. 