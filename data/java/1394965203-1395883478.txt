I work for the public sector and we heavily use JSP. We have huge systems that were built in early 2000's and of course noone wants to hear about rewritting (and they are correct). So someone needs to maintain/add stuff to them. In 2035 maybe you are highly paid if you know how to mess with JSP.
"Tell me about your recent projects, what was your role in them, what you learned in that role, what made you excited about your job." "Tell me about your views regarding integrations and integration testing. What kinds of challenges are common, and how you've learned to overcome them." And more on that vein. Gotcha questions and whiteboard code are to interviewing what spaghetti code is to software development. Finally: "Now it's time to pull out your laptop and connect it to the projector. Please design a web service with these parameters. We'll discuss your design either while you're working on it, or when you're ready to take a break, depending on what is more convenient to your style of working."
As soon as I read JavaDate, I understood why something was wrong.
i would go with a do while loop do { boolean again = true; // put your code you already have here // here you can ask the user if he wants to enter more values. if not set again = false } while (again)
When you add a new html file or other text file to the project its encoding is set to Cp1250. But you not sure why, You want to change the default encoding to UTF-8? In this article I will guide you to do that!
[I really like the event triggering/handling feature of CDI.](http://docs.oracle.com/javaee/6/tutorial/doc/gkhic.html)
We use [Cargo] (http://cargo.codehaus.org/) to deploy to a container during our builds, which maven then kicks off our integration tests against.
Why are you counting up? Can't you just go finalValue - initialValue ?
Been trying to figure out how to do that since I read your comment. It's been like 50 minutes now and I'm feeling very discouraged lol. I just can't get it to work without getting errors. :/ Going to take a break now and get something to eat.
What was your answer? I'm not sure how you would do that in anything but linear time but I'm pretty newb
Play is not so great for the backend. For the frontend I would not go with AngularJS.
The best way to complete your objective would be to wrap your entire code in a do-while loop as others have suggested. The best advice anyone can give a new programmer is to never get discouraged :) jumping into object oriented programming without any programming background can be a difficult task. If you have any miscellaneous questions about the language in general I'd be happy to answer them. Never be afraid to ask the "stupid questions".
If you want to literally start over from main, you can just write `main(new String[0])`, or if you change `public static void main(String[] args)` to `public static void main(String... args)`, you can just write `main()`
Lemme hop in the shower then I'll look over how you've done it (on mobile atm) and leave plenty of comments in the code so you know what's going on at each step.
Thanks, it would be greatly appriciated, but don't feel forced to if you got other things to do. :) I didn't leave many comments since I was originally following a tutorial located here: http://www.kilobolt.com/day-8-looping.html. I then decided to add user input (which I accomplished), but the problematic thing started when I wanted to make the user determine new values after their first try failed.
Given an unsorted array, I can't think of a single thing that would take less than linear time... How would you do it in linear time?
Let me fix that for you. The variable "again" has to be defined outside of the scope of the do/while boolean again = true; do { // put your code you already have here // here you can ask the user if he wants to enter more values. if not set again = false } while (again)
there should also be a semicolon after the while (again)
The domain is too specific for you to find something relevant, I'd imagine. Instead, what I think you want is a graph visualisation library. There are plenty, one of the ones I hear most is about is [JUNG](http://jung.sourceforge.net/index.html).
Thank you. I have not done much with booleans so far, heck I havn't done much at all of anything except printing text messages yet. :P Anyways, it works great. I'm wondering one thing though. Eclipse is warning me for a resource leak since 'scanner' is never closed. Is that something I should be worried about? I get that it is closed when you enter "-1".
Ahh I forgot to make a note of that. Before I fiddled with it, you had the scanner in a try block - this is a feature of Java 7, which I'm assuming you're using, which will automatically close connections. At the company I work for, Java 7 has yet to be approved, and therefore I have to work in a Java 6 environment, where that feature doesn't exist, so I had to remove it from the code for my purposes. In this environment it's not important, however in a corporate setting it's best practice to close any open connections when you're through with them. If you stick Java 7 you won't have to worry about that though. 
Being that the array is unsorted, a binary search will yield results in, at best, linear time. So a binary search won't work here. **Linear Time:** To do this in linear time, you'll need a way to keep track of each unique integer over the domain. A **hashmap**. Use each integer in the unsorted array as a key in the hash map. Why? Because each integer is unique in nature. The occurrences of that integer, however, are not. This gives us key-value pairs of the form **&lt;number, occurrences&gt;**. At each index in the array, shove that integer in the hash map. If it already exists, increase the occurrence value by 1. Otherwise, it becomes added to the map with an occurrence of 1. After the entire array has been mapped, search the map for the integer that has only 1 occurrence.
Both time and space O(N) where N is length of array: iterate over array, store number of occurences of current value into hashmap (key - value of array, value - number of occurences). When you finish iterating, look at your hashmap and find entry with 1 occurence.
http://tapestry.apache.org/ - Component oriented framework for creating dynamic, robust, highly scalable web applications in Java. 
You're assuming a perfect hash function is available. I don't think that's reasonable when "You are given an arbitrary length array of integers over a very large domain."
Anytime, happy to help. Feel free to shoot me an inbox message if you have any issues and I'll help however I can
&gt; How will the hashmap be initialized? Assume that the hashmap has ample enough space for the domain specified. &gt; Are there any factors that would make choosing something other than a hashmap more efficient? Hashmaps are built for efficiency. Hashing a key with insertion takes O(1) time. Given that your keys will always be unique and that the hashmap is large enough to accept any integer over the domain, keys will map to the same hash position, thereby only resulting in collisions when a specific integer has already occurred. I cannot imagine why another kind of map would be required here. 
It's an easier way to do it, but he's probably trying to learn how to loop.
&gt;Assume that the hashmap has ample enough space for the domain specified. That's not efficient with respect to space given the fact that the domain is "very large". 
Wait, so are we agreeing then that it'll take linear time? Haha, Um, well I'd probably have a variable that keeps track of whether there are any "duplicates", then a for loop that will traverse through the entire array. So yeah, you'll have to do it in O(n) then without a doubt right?
I'm a bit confused about this hashmap though, because wouldn't it take O(n) to build the hashmap to begin with, since you have to traverse through the entire array first? It would be O(1) efficient if you were looking for the key again a second time, but the first time would have to be O(n) right? Or maybe I'm confused about the question haha.
Ah, thank you for clarifying that. I'll keep that in mind if I ever get a question like that!
We are agreeing that this is a O(n) time/space algorithm.
I introduced the UTF8 default in my company. We have a few colleagues (and the main server) on Linux (where eclipse has a latin1 default), the rest on Windows (cp1252) and the charset mismatches were going on our nerves. No longer.
I don't need perfect hash function, I just need hash function which won't produce so many collisions that hashmap operations won't deteriorate to worse than O(1). Let's say hashmap will be initialized with size of N. We know that each number (apart from the one we are looking for) has occurence of at least 2, so that hashmap will have number of entires less or equal to (N-1)/2 + 1, i.e. approx. half full. I think that we can assume that this domain of integers is actually continuous - which means that any reasonable hash function should have low-enough number of collisions (given N-sized hashmap) so that algorithm stays O(N).
I got all I need to know about this program from the first paragraph. Java is CLEARLY the wrong tool for the job here. Purchasing a decent etl package would eliminate all of their customized etl jobs, plus it would be more efficient. Any processing that needs to be accomplished can either be accomplished with plugins, post processing of a temp table, or any other number of ways that doesn't suck.
You need a perfect hash function to get O(1) performance. You need space proportional to the domain to get a perfect hash function. The words "very large domain", to me, scream assume worst possible distribution (not continuous). In reality, I would try and get more information about the distribution of values in the array.
You are probably talking about worst case while I talk about average. In the context of hashmaps, I'm used to talk in average complexity because there's little point in talking about worst-case (if we only care about worst-case, we can just use ArrayList which has the same worst case complexity O(N)). &gt; In reality, I would try and get more information about the distribution of values in the array. Sometimes, that's all you get as a specification, you must deduce the rest from the context. IMHO unless you are programming NASA robot or NASDAQ exchange, worrying about hashmap worst case performance is over-engineering.
Each time you call nothing() it creates a new RemindTask thread and then waits waits on java.util.Scanner.next() . As part of it's execution RemindTask also calls nothing(). Scanner is not multithread safe so I think that having &gt;1 threads concurrently calling java.util.Scanner.next() on the same instance of Scanner is going to cause problems. 
If you're talking about average case, you shouldn't be using Big-O notation. An ArrayList solution will require enough space to include the entire domain (which is "very large"). An ArrayList solution is actually an example of a perfect hash function.
You're about the notation. I've always used it to describe worst case, but now realize that's wrong.
Is there a way to cancel the other threads? Or do you have a suggestion as to how I can make it work using other methods? Thanks!
I'm new to web development in java, but I've been using Jersey for my controllers, freemarker for my views, and hibernate/jpa for persistence. There are a few rough edges since it's not full stack framework and I have integrate things myself. This stack is actually pretty similar to Spring.
If you want a single line of images a horizontal Box inside a JScrollPane should do the trick. If you want to place this under your main image then you could place the JScrollPane in the SOUTH of the border layout or put both the main image and the JScrollPane strip in a vertical Box.
Sorry for the late reply. I'm taking a graduate course in UI design and implementation on an android OS in the fall and they recommend a strong background in java. Sorry about the vaugeness. Let me know if you need more clarification?
Make a couple of basic Android apps and make sure you look at XML resource. I can't really recommend a textbook that only focuses on UI design. The Android standard docs and tutorial has really good pages on how to design for Android (or touch screens in general) 
Have you looked at the documentation for Map? values() will give you a Collection. If you really need a List, you can create on from the Collection.
You could always use JTextPane and set it to HTML enabled for formatting
I did not see that, thank you very much!
What is the correct way to use printf in this situation?
Thanks for the help!
I think the printf usage might not be correct. However, I think it should be printing out only one line as you have while(n &gt;= 360) // You meant &lt;= right? Also you might consider - making n an int - changing the do-while in a while
Where?
Catching the C# train.
Or an in-between; property references!
Check the /r/javahelp wiki for a list of tutorials BTW: it's codecademy, not code**a**cademy
Maybe, however this train also stops at commercial UNIX, mainframe and embedded stations.
The problem I see is that fields and methods both could share the same name: class Person { String text; String text() { return text; } } So person::text would be ambiguous if both method and field references would be allowed.
It actually also stops at [commercial UNIX, mainframe](http://www.mono-project.com/Main_Page) and [embedded stations](http://netduino.com/).
What embedded stations are supporting jdk 1.8 ?
add Windows CE to the embedded list
 http://en.opensuse.org/Mono - comercial enough? see Windows CE for embedded
I have been using Think Java to get started with the syntax and get familiar with programming terms, it's been an easy and interesting read. The questions at the end of each chapter help with practicing what you learned. It's also free. I am now moving on to Head First Java(got this from a friend but I am sure you can find it for free) which is a longer book but covers much of what needs to be known and it's a highly recommended book everywhere I looked. Also, the Java Learning Paths found online is a great reference to go to.
That's great thanks! It says its tailored for people studying for the AP Comp Sci exam and I will be taking that next year. 
Awesome thanks, I'll use this for all my java help needs from now on!
I really like Java 8 support in Intellij IDEA. Since I'm using alot of Guava stuff I hope they come along with Intentions to convert e.g. usage of com.google.common.base.Predicate to java.util.function.Predicate. That would make migration from Guava to native Java 8 much easier.
Where is Solaris, HP-UX, Aix, QNX, VxWorks, i/OS, z/OS support on that link? Netduino is a full blown computer when compared with most embedded boards.
Why does it need to be the very latest version of Java? There are lots of embedded deployments using Java Card, J2ME.
What about Solaris, HP-UX, Aix, QNX, VxWorks, i/OS, z/OS support? And smart devices like the ones from Gemalto? http://m2m.gemalto.com/products/industrial/lga/ehs5.html 
Mono works on Solaris and Linux on System z so it works on mainframes. &gt; Netduino is a full blown computer when compared with most embedded boards. Well, .NET Micro Framework work on devices with at least 64K of RAM. Of course, you could argue that Java supports more tighly constraints but then I could mention applications where the only option is ASM. The point is that you can use C# for embedded development.
I will definitely be trying out Scala for my next project.
Because the argument is c# vs java and you get first class c# features (LINQ, events, first class functions etc) in .net micro. With java you get some old version that doesn't even have try with resources 
[http://freemind.sourceforge.net/wiki](http://freemind.sourceforge.net/wiki/index.php/Main_Page)
I like both environments, so this isn't me trolling against .NET. The point I am trying to make, which may have been understood as a Java zealot attacking .NET, is that there are more vendors supporting Java across more deployment targets than Mono does.
try using JoGL. It can do 2D and 3D art in a java enviroment. It will not be easy, but it will be a hell of a lot less tedious and you will get much better results. 
I get that point and is pretty clear to me that it is a big (probably the biggest) advantage over .NET. I'm just saying that there are viable options to use C#/.NET in commercial UNIX, mainframe and embedded environments. And not only that but there's people out there picking those options to solve real world problems.
Yeah but things like lambda expressions were already in Net 3.5 and that's like 7 years ago so if you're using say windows CE .net thats the profile youre compiling against. 
You can create a buffered image in your Program, it has a method which lets you color a Pixel with a given rgb value. You could use two loops to iterate over the length and height of your buffered Image and then pass the X and y coordinate and the three rgb values into the fillRGB() method. Im Not entirely shure It's called fillRGB() (im on Mobile atm) but youll find it if you google a Bit for shure. Hope that helps! Edit: after creating the buffered image you can save it to a file or just Display it in a gui, depending on if you wanna keep it or not
I really wish you could declare interface methods as protected. It didn't matter in the past because interfaces were only used for contract typing; but now they would be incredible useful given that mixins (ie. method extensions) can only use methods declared in the interface.
The NetBeans RCP has a very nice Actions framework, which you may be able to use without the RCP. Maybe look into that? 
I'll try to take a look, thanks!
I think I've heard of Processing before because if I recall Marius Watz came to my University and did a talk on the program. Sadly I missed it so I'm not exactly sure how to use it for what I want. I'll look into it more for sure!
Well, obviously it’s gone now but somebody tried to assign an array to an `ArrayList`, and that won’t work.
I have to agree with this. Yes, I turn down a lot of recruiters on linkedin. That's because I'm not looking for a job right now, which I imagine is the status of *most* developers out there. But if I was looking, I'd respond to an inmail over any other form of communication. 
[http://www.processing.org/tutorials/pixels/](http://www.processing.org/tutorials/pixels/) Processing is a dialect of Java.
This is awesome! I'll start looking into this now. Thanks man!
Honestly, before you format your post properly so that all is readable, you won't receive much help. It's simply too tiresome to read it the way it currently is formatted. Code always starts with a blank line above and 4 spaces before each and every code line.
almost there.. Try: "^[\\d:\\w+]$" edit: formatting edit2: still formatting.. second time posting on reddit.. heh
try ^\d:\w*$ 
My bad, I totally didn't see the plus-symbol in your solution. (I used the * in mine...)
oh , this worked! thanks man !
You need to clarify. Is the first number a single digit or multiple? Also note that \w (word character) is the same as [a-zA-Z0-9_] ie includes underscore. Is that what you want? I prefer long version to be explicit: ^[0-9]:[a-zA-Z0-9]+$ Single digit, colon, at least one lower or upper case ASCII character or digit. 
I think it will be forked. We all love Guava but I don't think Google is willing to lose support for jdk6, let alone jdk7.
single digit will suffice, then a colon , then either a sequence of characters OR sequence of numbers. thanks man!
Aha, in that case: [0-9]:([a-zA-Z]+|[0-9]+)
Try: \d{1}:[\w\W]*
you're a fucking idiot Have you never heard of this? http://www.red-gate.com/products/dotnet-development/reflector/ Also Java does not give you access to the sources either for their code, but their are tools and certain IDE's that will decompile it for you. To address your allegation that Microsoft is a dying platform, please tell me, where did you get that from FOX?
Two suggestions, use the call that uses an array of String arguments - http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#exec(java.lang.String[]) Figure out why it isn't currently working by reading the error stream - http://docs.oracle.com/javase/7/docs/api/java/lang/Process.html#getErrorStream()
https://koding.com/ is a new social media site designed for coders in all different types of languages ~ It's really cool and might help you out.
That won't work as there's no native regex type, so you need to escape the slash, I.e. \\\\d
Go pickup the book "Head First Java" and dive into that sucker. It's not your average java textbook. It tries to teach you the concepts and features of the language in a very different and fun way! It's also has really funny writing. I still turn to head first books when I need a refresher on something and I have 9 years experience!
How did your school catch you breaking the no-help rule? That's the important question here. My school had a similar policy for Java I. The people who were caught breaking it either: a) posted their code online somewhere b) turned in something suspiciously similar to another student's work, or c) did something that was way beyond what a Java I student should be able to do. So, what happened?
I don't know if this will be as helpful for you as it was for me, but the first time I approached computer science was an AP CS class in high school. At the time, I also was getting in to programming for the purpose of video game development. I had a difficult time understanding how such fundamental building blocks like data types and collections amounted to such advanced orchestrations of code as is seen in a completed video game. Then I moved on to other things, moved across the country, met new people, gained new interests and came full-circle back to programming...the difference was that this time I felt understanding how to code was no longer just desirable, but essential. It was and still is the only thing I feel I can get a degree for that empowers me creatively and offers security. This time, I didn't try to see how newly learned elements of programming would fit into something as specific as game development...I instead focused on how each element is a tool/component for building larger and more customized tools that help you build larger and even more customized tools etc. etc. These beginning concepts weren't steps to building games, but steps to build whatever I wanted. In short, maybe what you need is to view programming from a different perspective or with a different motivation. For a beginner, game development is pretty high level stuff. To become a good programmer, you must understand the fundementals and as /u/elizacakes said, there will be a threshold of understanding, that once you cross, connecting the dots will be a no-brainer. 
While Strings are objects, the object you want to tune would be specifically a "Guitar" object. By calling your tuneGuitar() method on a String, your calling a method that doesn't exist there. Without seeing your assignment or code, my intuition is that you have a collection of Guitar objects and one of those objects (or perhaps more than one, iteratively) is in need of tuning, hence stored in a String variable called guitarToTune. Is this correct?
Well it depends on what you do at the event. At the ones at Purdue (Boiler Up!) they sometimes just let you do whatever you want. So Java/C++ are fine to know and you can make something fun in the time given. Other hackatons that I've heard about are about a few hours you might wanna learn a scripting language such as Python or Ruby. Both of them are super powerful and extremely useful to learn in the long run. Last thing HAVE FUN! :) 
That's it exactly - I don't have the code at hand but it's equivalent to String guitarToTune = "Fender"; And while I can do Fender.tuneGuitar(); I get errors on guitarToTune.tuneGuitar(); From what I understand it's because the compiler can't resolve the variable as that can only happen at runtime. Which seems to make sense to me.
I'd put the list of Guitars in a list, then loop through the list to show the user the options, and loop through the list to check which option they selected. The switch would work too though. How you'd use reflection isn't obvious to me.
I completely understand the policy. Many homework help questions are asking for a solution instead of insight. In theory if you understand the learning/lecture material you should be able to the projects right? Some courses have a disconnect between what the teacher asks you to perform and what they teach but I'm going to assume your course isn't one or if it is then it is intentional to promote some self-discovery. You should be asking for help on understanding the lecture material and not the graded project. If you can't ask for assistance with even the learning material then go for some additional learning material like the Head First Java book that was already recommended in this thread. Oh and btw, you have no idea if you want to be a game programmer. Game programming is extremely different than playing video games and if you've never programmed before....well then you don't know if you'll like it. By all means try but just understand that you don't know yet. Game programming actually involves more math than regular business/enterprise programming.
I'm not sure what the constraints are for your assignment, but my first approach to this problem would be to have tuneGuitar() take a String as an argument... tuneGuitar(guitarToTune); then have the tuneGuitar() method declare a new Guitar object, iterate through your collection (or switch/if-elseIf, but that would be bulky and ugly) and then initialize said Guitar object to the appropriate element of your collection. If you can't have your tuneGuitar() method take any arguments, then my second approach to this problem would be to declare a new method... findGuitar(guitarToTune); and have findGuitar() do pretty much the same thing as detailed in the first method above...this way you can still use the Object.tuneGuitar() format and have the Object part of that call initialized to the appropriate Guitar object as specified by your variable guitarToTune. What's important to understand about your issue is that Object.tuneGuitar() is a call for a method tuneGuitar() inside of Object. For example, Fender.tuneGuitar() looks for an object variable called Fender and then looks for a method called tuneGuitar() inside of that object. A variable, such as guitarToTune, cannot have an "inside" in which the program can look for anything...in other words, calling guitarToTune.tuneGuitar() is equivalent to trying to call a method inside of a variable (which is impossible to do.) Does this make sense? edit: grammar 
no. Unless you use Java to call other native exes or libraries. There have been Java user interfaces for tools like this but they often ship with native code that the Java code calls/invokes.
The easiest way to get the behavior you describe is probably with a [Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)&lt;String, Guitar&gt;. With a map you would associate each string with a guitar object (by calling `mapName.add(stringName, guitarObject);`) and then call `mapName.get(stringName).turnGuitar();` 
That does make sense. I'm starting to think maybe a design flaw. Thanks for the input and especially for the object vs. variable point. 
I agree that the policy is stupid. As long as people aren't literally doing your hw for you, I don't see why they shouldn't be able to help you on things conceptually. That being said, I think your best bet is to use your TA's when possible. I also recommend the "Heads Up Java" book if you're looking for a good book to learn on. Also, my last word of advice is to not give up! Learning to program from scratch is difficult for everyone. What separates the people who can hack it and those who can't is honestly just persistence. You'll get better as you go along.
Consider this, using a [Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html). A Map is a data structure where a key object relates to a value object. Map&lt;String, Guitar&gt; guitars = new HashMap&lt;String, Guitar&gt;(); guitars.put("Gibson", new Guitar()); guitars.put("Fender", new Guitar()); Now, you have a Map object, containing instances of Guitar that you can reference by the Key, in this case, a String. You can access the individual instances directly: String guitarToTune = "Fender"; guitars.get(guitarToTune).tuneGuitar(); guitars.get("Gibson").tuneGuitar(); You can also obtain a [Set](http://docs.oracle.com/javase/7/docs/api/java/util/Set.html) of the keys of the Map or a [Collection](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html) of the values and iterate through them. You need to be careful. A non-existent key returns null so if you did something like this: guitars.get("Yahama").tuneGuitar(); you'll be rewarded with a nice NullPointerException. 
I wouldn't have imagined such a thing was possible. I used Map a little in the code already but it was just a list of key/value pairs. I wouldn't have thought you could incorporate objects. Really appreciate the insight. 
I'm going to do that, makes a lot of sense, thanks a lot.
Thanks for laying this out. Exactly what i wanted to do all along with the object creation but couldn't figure out how. And solves my problem with calling the method very nicely. 
Cast it.
psst. Reddit has special meaning for backslashes in comments. Your \\\\d was interpreted as \\d. (Yes, I had to type that as \\\\\\\\d in order to show \\\\d)
&gt; I don't think Google is willing to lose support for jdk6, let alone jdk7 Hah! Their [jdk5-backport](https://code.google.com/p/guava-libraries/source/browse?name=jdk5-backport-master#git%2Fguava%2Fsrc%2Fcom%2Fgoogle%2Fcommon%2Fbase) branches are still seeing regular updates.
I think the no help rule is complete bullshit since a huge majority of programming is google-fu for information and critical thinking and problem solving to use that information. That said, if you're getting caught in an intro level class for code similarity where most projects are going to look very similar I think you, and your friends, are helping you beyond just giving you the tools you need to succeed and letting you go about solving the problem on your own. While I think your right to some extent I think you do need to re-examine the boundaries you should set for yourself when you accept help to the absolute minimum you need to actually complete the task. And sucks to hear about your TAs. I TA'd a lot of comp sci classes (and head TA'd) and unfortunately a lot of TAs are too lazy to actually be a good TA (we try to kick them out, but unfortunately it's very hard to know who they are based on only a resume if we don't know them personally) or don't actually know what they're talking about but have their code from last semester so they just tell you how to do it cause that's all they know. Try to figure out which TAs are the useful ones that actually know what they're talking about, they'll be the ones that will challenge you to solve the problems yourself while providing as little help as they can while still pushing you over the hurdle.
I hate your school. A lot. It's fostering exactly the wrong kind of environment for junior software developers (very few CS grads go on to research). &gt; I completely understand the rationale behind this rule What? I'd wager &gt; 80% of CS grad students and software developers would fail out because they googled for an answer to something stupid like help on a Spring XML configuration file. This kind of policy is saying: We expect you to learn everything just as those who built this field did: by trial and error. In fact there is a much better way to learn, and it's by looking at what your ancestors did and understanding why they did it or what led them down that path. When you've mastered the conclusion they arrived at you are much better prepared to delve in to the how they got there (which should be left for the junior/senior level classes). Your first two years should really be about beating up your brain thought wise and getting some basic language grammar down, using any resource you can aside from directly copying someones work. I learned calculus by first learning the formulas and rules, and then I really learned calculus by redoing the theorems and proving it all myself. I hate modern academic programs for this very reason, but I'm probably the odd one here. That being said, the Java tutorials should count and they are a pretty fantastic resource for learning Java on your own. But this is not programming, it's learning syntax, APIs and libraries. I've learned things so quickly by being the typist when someone is dictating their thoughts (and sometimes code). This is called pair programming (ish). Two people sit down to solve a problem and the solution is born. So if you have a friend who really wants to help, and they really do know their stuff, then maybe some exercises to help you get in to the programming mindset: Exercise 1: Take homework #1 and sit down at a keyboard. Have one of your fluent Java friends dictate to you the code they would write character by character but be assertive and tell them to stop when you don't understand what you are typing (this will be frequent from the sounds of it, it takes patience and being assertive) and explain what it means. This will take a very long time but eventually you will write a working program and that will build some confidence. Exercise 2: Take one of your friends who already knows Java and is able to talk a lot and express their thought process (maybe someone else since you just burned out your first friend for a bit); then have them sit next to you. They cannot touch the keyboard, they cannot tell you directly what to type (this is law). They can only talk about what you should do and point out syntax errors (like i == 1 + j;). Now go back and redo homework number 1 with them only reading the problem and explaining how they think or what steps they take to solve the problem. Your job is to translate their brain in to code. They will tell you when you miss a semicolon or need a brace, but they won't tell you to write System.out.println. They can suggest topics to google or an API to look at or use. This should help you being to start translating the logical idea in to the physical construct which is Java the language. Exercise 3: Reverse the roles! Now you hopefully have a better grasp on syntax of Java, your big challenge now is to figure out how to break a problem down in to smaller pieces and tell someone what to code. It will be *really* hard for the Java-fluent but inexperienced programmer to not just start writing the code for you, but you need to be assertive here as well. They shouldn't type unless it's taking what you said and putting it on screen literally. Start very small, don't start on homework #1 but start on an exercise in the book. You're going to be the thinker here, and you need to be able to keep all the concepts in your brain at once (this gets easier with practice). Start with something small like printing the numbers from 1 to 10, and then add to that by printing the numbers from 1 to a user input number (this is a big leap!). Keep at it, though. Look for someone who can help you learn and don't work directly on your homework. Reworking old homework you submitted is a great way to solidify what you did, help you understand what you did wrong, and get you more familiar with the syntax.
[JavaNotes](http://math.hws.edu/javanotes/) it's a free, on-line textbook on introductory programming, which uses Java as the language of instruction. This book is directed mainly towards beginning programmers, although it might also be useful for experienced programmers who want to learn something about Java. It is certainly not meant to provide complete coverage of the Java language.
It's available: https://jdk8.java.net/download.html Ubuntu installation guide: http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html
That's just early access.
It should be [today](http://openjdk.java.net/projects/jdk8/) although I don't know exactly what time.
It sounds like you could use some alternate source material. It helps to here explanations from different people. Your professor is just one. Try to have at least 3. Someone mentioned the book "Head First Java". That's a good one. Also, spend plenty of time coming up with solutions on your own. Here's a web site for some basic practice with Java: www.codingbat.com. Keep the java API documentation handy, and make sure you know how to use it. Keep in mind, almost all CS students have had previous programming experience, either in high school or on their own, so you are at a decided disadvantage. You will have to work harder than them in order to catch up.
VLC has good Java binding with vlcj library (there are also for Android). Since the dirty job would be made by native code the answer would be probably be 'Yes, it is' since your job would be to use standard Swing / JavaFX code to allow GUI and decent UX. http://www.capricasoftware.co.uk/projects/vlcj/index.html https://bitbucket.org/edwardcw/libvlc-android-sample
Play developers jumped at the height of Scala's hype. That hype is fading away now (AngularJS and thus JavaScript being the new hype). Scala is not a less painful language, it was a more hyped language. With that hype going away it's just a language again. Some things are better in Java some things are better in Scala. Overall Scala is not the better language. It HAS to claim this in order to get some more than the 0.3% of developers interested, but there's not any proof at all that Scala is better. There was some scientific research into this vs Java and the conclusions were that for both beginning and advanced developers Scala was NOT easier to learn, NOT faster to program in (for both beginners and advanced Scala programmers) and when things were wrong were NOT easier to debug. They were also NOT performing better. When it came to writing parallel code the same things we're true. At the end of the day Scala did do well but it did not outperform Java.
Oh, dang, forgot about that! Thanks for the heads up.
I guess they will release it when the working shift starts in the US. Oracle's Headquarters is in California, US. They are UTC-7.
GA Release is scheduled for today: 2014/03/18 GA General Availability http://openjdk.java.net/projects/jdk8/ Currently it's 2:45 in SF, so we probably have to wait a little bit longer. ;)
With Java8 being released today, we will probably see lots more people using JavaFX
That's true, I'm in Asia.
Definately. Especially with all the new 3D support.
Fixes and forks are very welcome. I don't know if this is a bug in GlassFish or what but the socket connections stay open in some cases. 
Well the opening sentance describes it as pseudorandom so there is probably no need to go to the source code.
Awesome I will be sure to give it a try!
&gt; I think the no help rule is complete bullshit since a huge majority of programming is google-fu for information and critical thinking and problem solving to use that information. The thing is that there's a difference between the point of programming in a commercial setting and programming in an academic setting. When an employer gives a programming assignment, the primary goal is the the new feature and the employee-learning is (usually) incidental. When a professor gives a programming assignment, the primary goal is to educate the student and the end-result is (usually) incidental. It's because of this difference that educators have the need to impose restrictions on educational programming that might be different than the restrictions that we face in commercial programming. If every assignment could be reduced to 'ask your neighbor', 'google it', or 'use a library', then it would defeat much of the primary purpose of doing the assignment in the first place. (Despite that fact that any of those three solutions are preferable to doing it yourself in a commercial setting.) Look at it like lifting weights in the gym. If the point of lifting weights was solely to lift the weights, then we'd be dumb to do it all by hand. We should be using some kind of machinery. The reason we actually to the work is that we're interested in the personal improvement that comes about from the act of lifting. Programming is the same way. Sometimes we do the work for the purpose of having done the work and getting that experience first hand. Academic assignments are usually one of those times.
The Java 8 improvements to Javascript are impressive, but slightly overstated in the article. In most cases, the Javascript performance lacks. node.js is likely to be anywhere from 10-&gt;20% faster depending on what your workload looks like. (the places where it is as fast or faster are the places where frankly it doesn't matter, things like asm.js performance). Don't get me wrong, it is a huge boost over the aging rhino, and that is nice. But I don't see a lot of people leaping to abandon their node.js implementations for a Java solution. Also, lets not forget that when rhino was first released, it was state of the art and easily on par with what firefox currently had in their javascript engine. Unless there are plans to rewrite and reinvent nashorn again in the future, I can see the same fate for it. (assuming JS interpreters will continue to increase in speed). However, for current rhino users (my company) this is good news. Faster Javascript evaluation in Java is a welcome improvement.
The biggest problem I have is the restriction on googling *any* information beyond the official docs. I think a lot of things on the java tutorial official site happen to be pretty shit, especially for new programmers. I agree that for academic purposes you shouldn't google for solutions but googling for things like syntax or a different, simpler explanation on the differences between interfaces/abstract classes cause you don't understand your book/slides/prof/ta's explanations cause you're a visual learner or w/e is absolutely fine. I concede that it's slightly harder to write such a rule than no internet resources at all but that doesn't make no internet a good rule.
Agreed. Hopefully, the instructor will do a decent job instructing, so this shouldn't be an issue. (But that isn't always the case.)
&gt; Hmm... I've had programming explained to me as a threshold concept, once you're above the threshold you get it, and until you reach that point it's really hard to understand what is going on. Have you seen this article on how mathematicians learn math? http://j2kun.svbtle.com/mathematicians-are-chronically-lost-and-confused I think the same is true for software developers. The only thing I'd add to your first sentence is that there isn't just one threshold: there are many. It never stops. This is both the beauty and the horror of this profession.
Wait for it...
Yeah, I got it to work when I included it in the same servlet but in a different package but I couldn't get it to work in a netbeans enterprise project. As soon as it trys to load it via @Remote in the remote file through the servlet, it just gives me a blank page. Any idea why that might be? (using Hello-ebj and Hello-war, loading from ebj to display via the war)
That's one small step for programmer, one giant leap for java community.
You can always just work with an EA build in the meantime....
Which can be accessed via [java.security.SecureRandom](http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html). 
If you used the Netbeans wizard to create an Enterprise Application, you don't need the @Remote annotation (It's considered local to the project. Just add @LocalBean under the @Stateless in the EJB itself if it's not already there). You'd just put the servlet and web config in the war package, the EJB in the ejb package, then deploy the Enterprise Application (not the individual war/ejb projects).
oh my god, i'm so dumb. That didn't even cross my mind. I didn't know that the remote app wasn't required though. I never even tried running it from the enterprise app. I friggen knew it was something super simple and dumb that I was missing. Thanks shrapnull!
Remember in EE-world Local versus Remote means the JVM. Same JVM = Local, separate JVM (even on the same server) = Remote plus Interface and Lookup to use.
From a RedHat employee on this topic: "Unfortunately, only external HTTP requests that hit our proxy which then routes to your gear is counted as activity. You would need to set up a pinger cron job on your local client that hits the app at least once per 2 days to keep the application from idling." Honestly you can't blame them for this. They are paying for amazon EC2 instances for you to run your stuff on for free. I don't think 1 request every 2 days is that hard of a requirement. [Source for above quote](https://www.openshift.com/faq/what-happens-if-my-application-is-not-used-for-a-long-time)
Thanks man, very interesting 
It's Java, so... it's likely a timezone issue.
I think releasing 1.8 on the 18th is the goal.
Now. http://www.oracle.com/technetwork/java/javase/downloads/index.html
[JDK8](http://www.oracle.com/technetwork/java/javase/downloads/index.html) download is up.
Ha, I was 38 seconds behind you.
ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn !
Btw which version of eclipse support 8?
Damn!
See https://wiki.eclipse.org/JDT_Core/Java8 for details.
The best release of Java in a long time
Java 8 is released and everybody within a 100 mile radius has to make a saving throw against insanity. 
This will be an important one.
Yeah!
Fuuuck yeah. It's going to be awesome in 2017 when we can use this in corporate environments ;) 
But no Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files for JDK/JRE 8 ??? If you scroll down on the Download page http://www.oracle.com/technetwork/java/javase/downloads/index.html until you find the cryptography extensions, the link for them is... http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html Then I click (*) Accept License Agreement, then click the download link, and the link is broked, borked, skroooed. 
Tomcat is one of the *many* options there are for deploying servlets, and there are also a lot of options for deploying Java server applications outside of servlets.
It was race condition, noone can tell the result.
am i missing something crucial? where is my javac? without ide support and without a javac-binary, how am i supposed to compile stuff? :O
https://github.com/orfjackal/retrolambda
You have to download and install the package for your operating system. That's a fairly crucial step. Another crucial step for you (based on the question and your username) might be to lay off of the drinks for a few hours.
I've been a full time java developer for ~15 years and this is the first release I've actually looked forward to. Kind of sad, really… But the future looks bright :).
2020 for Android!
[Just read this](http://javarevisited.blogspot.fi/2014/02/10-example-of-lambda-expressions-in-java8.html)
I would not use this. It will break with future JDK 8 optimizations, which appears to coming.
The future does look bright, Java 9 should fix generics by removing type erasure, making JNI simpler and more :).
I have high hopes for Project Jigsaw. Really, really, really important. I was quite sad it didn't make it into 8.
Oracle's Chief Architect Mark Reinhold made a big deal about this during JavaOne 2013, source here https://blogs.oracle.com/java/entry/the_javaone_2013_technical_keynote
Android supports Java 7.
If you're a student, don't think. Update today. No seriously, update today. Learn how the new features work. That's what's being a student is all about. You'll be happy you did when demand for this puppy increases rapidly in about a year.
&gt; I was quite sad it didn't make it into 8. I was also sad it didn't make it into 7. Before that I was sad it didn't make it into 5, and I vaguely remember being said that something like it wasn't in Java 1.3 or 1.4 (forgot the exact version, but there was talk of Java getting something like this since C# 1.0 came out or so). 
One of the advantages would be that lambdas make it possible/easier for the compiler to execute things in parallel, which can make code run much faster.
Looks like they fixed it (it works for me at least).
Perhaps a dumb question, but if we're only using Eclipse, that means I'll either have to wait for 4.4 release in June before updating to 8, or use NetBeans/IntelliJ in the meantime? Or is there some way to get Java 8 support in 4.3.2?
I highly doubt demand for JDK 8 will increase much at all. It's just java with some new features. I would not want to work for a company that really thought it was necessary to specifically hire JDK 8 programmers, just because someone without JDK 8 experience might need to take a couple days to learn the new features.
Thanks for the ELI5 answer!
Standardized JNA would greatly improve the ecosystem for java, I hope this sees the light of day.
I just installed JDK8-win64, and this is what i got: C:\jdk1.8.0\bin&gt;javac -version javac 1.8.0 C:\jdk1.8.0\bin&gt;java -version java version "1.8.0" Java(TM) SE Runtime Environment (build 1.8.0-b132) Java HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode) C:\jdk1.8.0\bin&gt;jjs -version nashorn 1.8.0 jjs&gt;
Stop using Eclipse. Get the student version of IntelliJ - it's a far better tool. It's had java 8 support or a long time now.
Unfortunately its a requirement in my program. They get really uncooperative if you use anything else. I've got the community version of IntelliJ which I'll use with Java 8 for the time being on side projects, and keep using Eclipse/7 for school.
you are lucky .. we are still using jdk 1.5
Yep. That was causing the trouble. I've set my jdk installation path to d:/Java/java8. When the installer prompted for the path to the jre i supplied the same path. Resulting in my jdk being overwritten with the jre. Therefor no javac could be found after the installation.
Indeed. The link was wrong before, it's now pointed at the right file.
Also, * Method references * Repeated annotations * Default methods * Static methods on interfaces * Doclint (Note: this is a negative change in how you code)
&gt; unless we buy new licenses Ah, there it is. That sucks :( Thankfully you at least have generics. I don't think I could go back to j4.
Your claim that there will be a high demand for JDK 8 developers does not follow from this hypothetical situation. Most likely, this slight difference will be overshadowed by experience in general and other much more important factors. The fact that, all else being equal, they will prefer this does not in any way imply there will be considerable demand for JDK 8 specific skills in a year or so. For instance, all else being equal, wouldn't you rather hire someone who is funny over someone who is not? Probably. Is there a statistically significant demand for funny software engineers, though? Of course not. EDIT: For a more relevant comparison... The demand for datalog programmers is virtually non-existent, but if I were hiring for a company using JDK 8 and had two candidates who were absolutely identical other than the fact that one of them was a competent datalog programmer, I would absolutely choose him over the other candidate. Furthermore, if the datalog programmer had zero knowledge of JDK 8, I would still hire him over the other candidate, because the ability to competently do logic programming is much more impressive than being able to learn JDK 8 features and it would be an indication that the candidate has a great ability to grok entirely different paradigms of computation. 
I must preface this to say that computer science is not necessarily programming/software development. Software development is merely a subset of computer science. I assume that you've receive the what computer science is/is not lecture so I won't go further into it. First, I understand why the CS department has the rules it does. Cheating is unfortunately widespread in CS programs. When I was in college 10 years ago (yikes!), the amount of cheating going on was staggering and in some cases pretty blatant. Heck, one could hire someone to do their assignments for them for as little as $5 each. Your program's rules might be a little strict and there isn't always a black/white separation when it comes to cheating. However, it is what you have to work with so no use complaining about it. Second, the first level CS course is designed to weed folks out of the major. Based on the amount of material students have to learn, especially if starting from zero, the initial course or two are often the hardest. They're also the most important because they are the foundation for everything else. You might not think that it is fair that you cannot seek outside help but the secondary reason for that (other than to prevent cheating) is to force you to learn things on your own. In a professional environment, you'll be handed a stack of documentation (if you're lucky) and a deadline. The challenge isn't necessarily learning the material itself but learning how to learn on your own. It isn't entrapment but it isn't sugar-coating or hand-holding either. So what are some of the things you do to improve? * Don't try to tackle an entire project at once. Break things down. Start simple and iteratively add additional functionality. * Sketch out your logic and execution flow before you ever write code. The most important tools that a software developer has isn't an IDE, compiler, or even a computer; it is a whiteboard and markers. * After each assignment/project, look back at your previous ones. You should be able to identify different, better ways to accomplish the same result. This is actually a very good checkpoint to determine whether or not you are improving. * Even though you might not think you're getting anything out of your professor's office hours, keep going. Set a goal to got at least every other week, even better to go every week. The one-on-one face time with the professor is important. I cannot stress this enough. Bring previous assignments and discuss how you could have done them better. * Remember that there isn't always a single right way to do things. In fact, there usually isn't (actually a way to identify possible cheating is if two students do things the exact same way). 
Wait, what? Removing type erasure? Are you serious?? That is awesome!
Guess we should just keep using OSGi, then. That sucks. :(
&gt;Reinhold spoke of the need for reification. Java’s generics, added in 2004, are based on the notion of erasure for good technical reasons as a sound way to create a type system that supports migration compatibility. But this creates programming problems in which the erasure approach severely limits what can be expressed. Reinhold suggested that introducing some reification and eliminating the “annoying dichotomy between primitive and reference types” would be of value. I am going to enjoy the *fuck* out of that. Granted, Scala already smooths over the rough edges of primitive types, and provides a somewhat hacky workaround for erasure, but with sometimes-severe performance implications that this would make unnecessary. So I won't enjoy it as much as a Java programmer would, but I'll still be very, very grateful for it.
So only use it when you have to run on pre-8 platforms.
I thought the Java 7 support was experimental and had to be enabled by the user.
How about just use NetBeans/IntelliJ, period. Eclipse is garbage.
If they are web apps, then they should only be presenting HTML to the users, and it won't matter what java version users are running. If you using Java Applets then you will need to conduct testing/upgrades as deemed appropriate, but for the most part anything that runs in Java 7 will work without modification in Java 8.
I don't even annotate and I'm not too happy about those &lt;foobar&gt; thingies either.
Select some text and hit tab? Or what about ~~ctrl+L? Or maybe it's~~ ctrl+alt+L. That should do you right up! 
I installed the 64 bit version earlier just fine, I just reinstalled it just now fine as well. [Try this link](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) also check to make sure you aren't using any kind of addons which block scripts.
Wait, really!? Awesome!
FizzBuzz does not look like a best example to show new Java 8 features. I would suggest some other example that would show advantages compared to Java 7. The code is simple and interesting so I am voting up :)
I've been debating taking a serious look at Scala...operator overloading and the like is making that even more tempting...
You can install Java 8 support for Eclipse 4.3.2, see [Eclipse Java 8 Support For Kepler](https://wiki.eclipse.org/JDT/Eclipse_Java_8_Support_For_Kepler).
Start hiring actual competent programmers, instead of H-1B indentured servants, and maybe you won't have that problem.
Ok, what would be better?
As I wrote earlier, im trying to find out a new way. LinkedIn became mainstream for recruiting. But if you have an idea how to approach them via LinkedIn in a different way, please let me know ;)
Thank you!! :)
The short story: Because of the Oracle takeover of Sun. (Edit. Business and politics stuff.)
&gt; I'm not too happy about those &lt;foobar&gt; thingies either This made me laugh :-)
Ah, makes sense. Thanks.
Some would say this is well traveled ground, but until I get a 100% show of hands at a conference session of OO language devs that follow it, it's still worth repeating!
Sun didn't have the resources for it, Oracle bought them out and things have now finally picked up some steam.
What the other comments here miss is that the Java 7 release was initially slated to include a lot of the changes we now see in Java 8 (and even some that have been pushed out further). So there was some feature creep going on. When 1.7 was finally released, it had a lot of bugs. It took a while to stabilize and though recent updates * threw most popular logging frameworks into an infinite loop * broke peoples' unsigned applets * mixed up Guava's TypeToken trick 1.7 is now generally deemed stable enough for production use.
What has this got to do with Java?
Since I've updated to the newest version (with Java 8 jdk included) it seems compiling code takes much longer for me strangely. I wonder why...
Someone just using the latest tech because of an accident of birth isn't the same as someone demonstrating that they actually keep up with new things as well as having a grounding in tech generally. Specifically in this case, if I've got a long term project that requires someone using only JDK7 and can't upgrade to use the newer features, and one candidate *only* knows JDK8 and doesn't know how to achieve the desired outcome using JDK7, the employer would hire the person with demonstrated JDK7 experience. In general, yes, I agree with "learn new stuff", but the ramifications aren't always 100% black and white.
I'm a student using eclipse to learn as well. Is there any other reason to not use it besides the Java 8 support?
Xenophobic much?
It's not _horrible_ but it's not _great_ - you'd be well served as a student to not get too tied down to a single IDE. NetBeans &amp; Intellij would be helpful to use as you are learning. 
Same here, for the most part. A few apps run on 1.5, and like one or two things run 1.3.
"supports"
First things first... I hear that we can expect java 7 soon in the newer versions of android. THEN we can talk about java 8
Android does support Java 7. However, you need API Level 19 before you can use try resources. [Source](http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Using-sourceCompatibility-1.7) 
[Source for claim of support](http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Using-sourceCompatibility-1.7)
I've been wondering, can't newer jvms run older code just fine? Like, as long as you compile against 1.5 can't you run it on 1.6/1.7/1.8 and it should still act the same?
Lambdas are not that uncommon, and in c# they are the greatest thing ever, I feel any programmer worth their salt, new or not can pick up on them easily.
so... where's the link?
So... am I reading the default methods thing right? You can basically get multiple implementation inheritance using these?
This book (and it's predecessors) is definitely one of the best books to have around. Even the first one, dealing with algorithms in a language-agnostic way was fantastic. BTW: the whole book can be read online here: http://algs4.cs.princeton.edu/home/
Hard to say if it's a bot or an actual person hired to spam, but it's spam any which way you look at it.
Well, I am not hugith but I've been coding in Java since early 2000.
I started in 1997. I'm not sure why any of this is relevant to the discussion, though...
[This article](http://www.javacodegeeks.com/2014/01/compiling-lambda-expressions-scala-vs-java-8.html) discusses how lambdas were implemented on the JVM for Java 8 and how that implementation compares to the implementation that is used by Scala.
Ohh. I just realized I made my first java program in 2004.
Google needs more time to work with java 8. Android developers are happy with have java 7 and KitKat. We will use java 8 with android in near future.
Sigh, yet another blog post with lots of posturing about MongoDB with very little facts. Naturally CouchBase is better - says a blog post on couchbase.com :-/ Edit: and why is this posted to /r/java ?
I've seen it, but I am more interested in less obvious changes.
Ah, I see. Yes, it's believable that *some* people have been doing Java for ~15 years, I just have trouble believing *this guy* has.
well the problem isn't just with our code .. we can change our code in 1 month of a release. The problem is with other softwares/libraries/servers etc whose license we have. We can't just jump up to a higher version because we don't have license for those version. We have to wait till those license expires so that when we are in position to renew the licenses, we can get newer versions of those libraries/servers/apps
So, I tried to run it this way and the results are the same... Even worse: the error stream doesn't return any value, it's never available. Any more ideas? Why isn't the program being summoned?
When I figured out I wrote my first Java program in 1997, it kind of blew my mind when I checked the release history and saw that was Java 1.1. Also, I was pretty young at the time and was only doing this as a hobby, so I really wasn't trying to do complex stuff. As a result, it's kind of funny to see all the things the language didn't have back then that I just didn't notice because I wasn't doing serious work. 
I agree that it isn't exactly a good use of functional programming. I just wanted to write something easy to follow.
It's not that simple. Let's say you are writing web apps that run on some App Server X and you want to move to JDK8. The following steps may have to occur at many companies: 1) The team responsible for infrastructure in general has to do testing to certify the JDK 8 will run on their systems without problems. 2) Whoever is in charge of security will have to test and certify that JDK 8 is sufficiently secure and meets all of the internal requirements of the company. 3) The producer of App Server X has to certify that App Server X runs on JDK 8 and has to agree to support such installations (this, too, could trigger additional tests and such within *that* company as well). 4) Even though you have guaranteed support for App Server X on JDK 8, it may still be necessary to certify that App Server X on JDK 8 on your infrastructure works. 5) JDK 8 and App Server X must be installed. This alone could involve several steps of requesting the installation, reviewing the request, someone certifying that the change will not impact other systems, scheduling of the change, performing the change in a test environment, performing change in production environment. 6) Since the rest of the stack has changed, the web app developers must now certify that the product works properly on this new stack. 7) Now you can use JDK 8 in development. The actual process will vary, but that gives you an idea. Also, note this is for a single, simple application. Various third party libraries may require additional steps, etc. Also note that at large companies, this list can take a long time and *cost a lot of money*. Additionally, even with the above certifications, if the code interacts with clients who are paying a lot of money for up time, then the company may still be hesitant to switch. Sure, if something breaks Oracle and whoever makes App Server X *will* get things fixed (because they certified it and are contractually obligated), but you still don't want to be the company that discovers the issue and breaks the system for your clients (which also costs a lot of money), even if it gets fixed. So, it tends to be (or is at least perceived to be) much easier to just keep on using JDK 1.3. EDIT: Oh, yeah. That also assume the application development is internal. If you create code that you provide to clients on premise, then not only do you have to go through this, you have to go through this for every client. If half your clients stay on 1.3, then you have to create a separate code base and force those clients to accept that the product will be maintenance only for them, or you have to tie your entire development process to 1.3 (or drop half of your clients, perhaps).
After dabbling with java 1.1 a bit, I spent a little time with Visual Basic 4. That was a hoot.
I really like this explanation as a quick, 1-sentence summary. The other posts with more details are great too. 
If you're talking about the diamond of death, the answer is "sort of". If there are conflicting implementations of a method then you're required to specify which one you want to use (or implement a new one). In addition, you can do this with members or constructors and those are the two things that really cause issues in the diamond of death. 
Doesn't that make it more difficult to use the JVM for other languages? This is over my head, but I've heard a few language implementers say this. 
They want to be Scala soooo bad.
Typical of Oracle-owned Java - the installer failed. I'll probably wait until 8u10+ before trying to use it.
A framework is pretty much what the name suggests, a collection of utilities put together for a purpose. [Wikipedia offers more insight](http://en.wikipedia.org/wiki/Software_framework) Now, I'd question how you got 3 interviews to begin with, and even more so how you managed to not correct this after failing the *first* time.
Spreading malware.
Enterprise web applications. Not necessarily old-fashioned either. REST services are ridiculously easy in Java.
I have a friend working at a new startup in NYC, they're using Java for their entire web service (built to handle enormous scale). If you take a look at web framework benchmarks, Java frameworks are VERY competitive. Take a look at this: http://www.techempower.com/benchmarks/#section=data-r8 and notice how many high-performing Java solutions there are.
afaik, it's not just old companies that use java as a backend for webservers. Java is relatively fast (it's improved a lot since it first got its reputation as being horribly slow) compared to newer interpreted languages like python, and it's pretty stable/safe, compared to low level languages like c/c++. I don't know what else companies use it for these days though.
Short answer. Almost everything.
How about Android for starters?
Haha. I just reinstalled it and it worked. Previously the installer was installing the wrong version for me. I tested it again with a new download and it now works!
Your post history tells different.
Did you read the whole documentation that came with the course / assignment? Your method calls seem to be wrong.
Not one of those posts again. Had them by the dozen in this subreddit. Just go through a few weeks' posts and you'll find plenty of answers. Java is common as enterprise back-end, for games (think MineCraft for example), as settings console on network equipment (Hirschmann / Belden), plenty of embedded devices, and last but not least: Android!
There are no shortcuts. RTFM: http://developer.android.com/training/basics/firstapp/index.html
That's not all of Java 7. It'd be nice to have some of that NIO2 [Path](http://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html) stuff.
Brilliant! Thanks! I think that this book is a must-have for any (aspiring) programmer. Had the first edition (only pseudocode, no direct programming language) in print and loved it already back then.
agreed! wholeheartedly. I am looking forward to digging into this tonight! :)
- It's terrific for anything service- based, like a backend for a GUI or a part in a larger system (eg. order processing). The learning curve - especially for the necessary frameworks - is steep, but once one understands it, it's child's play. You end up with something like this: @GET @Path ("/getPerson/{name}") public Person getPerson (@PathParam String name) { Person p = db.lookup(name); return p; } .. and this will set up a web service that returns a neat XML rendering of a Person object. Not only is it *look ma, no hands*, it'll also perform well with just a couple more tricks, like plugging in a caching module. We run a sole instance of a web backend, and it doesn't even hiccup with close to a thousand concurrent (same second) requests. - I also find it suitable for heavy- duty calculations. A good C/C++ crack can probably run circles around me, but I made a trading bot that simulates 40,000 yearly timeseries *per second*, each with multiple indicators (MACD, EMA crossover, etc.). The concurrency libraries are really sweet. The downside (I know you didn't ask, but...) is that for anything GUI- related, Java has a historical stigma. I recently suggested looking into JavaFX for a small project, but got nothing but quiet stares back, which were somewhere between anger and oh-god-he's-lost-it pity.
We are a startup and in addition to Java for our API platform we distribute a Java client to our users. "Java on the client?!", I hear you cry. Well it ticks all the boxes for us. And we wrapped it in native installers for each platform, that helps make everything much more sane.
I get downvoted everytime I say it, but web serving HTML is probably one of its weaker uses. Java is Very good at almost everything else. Elastic search/Lucene. Hell, jpython, natural language processing, web crawling (so so), report generation, etl, map query. Java delivers well on its promise to write once, run anywhere in addition to having some of the most mature and well supported libraries (with the exception of C maybe) The language has managed to evolve into an agile one. Three or four years ago java was fairly stagnant. Now the turn around on new versions is better than most and it is getting faster. 
It supports Java 7, the language, not the Java 7 standard library. But to be fair, Android didn't support the full Java 6 standard library either. 
If you're thinking about writing a tool that uses JVMTI, check out my jdiscript project (https://github.com/jfager/jdiscript). It's a scripting layer around the Java Debugger Interface; you can use it for prototyping these kinds of tools in Java before dropping down into C++. Just updated for Java 8.
Is there a nice easy code-along REST tutorial anywhere?
Unless you're doing something crazy with direct bytcode/jvm manipulation, it should just work. If it doesn't tho, check out the [java 7 adoption guide]( http://docs.oracle.com/javase/7/docs/webnotes/adoptionGuide/index.html).
Your .class file needs to be in the package directory relative to your classpath that matches its package name. i.e. if you are in directory 'foo', as the root of your classpath, your .class file needs to be in the foo/asset subfolder, since you define MyScript.java as being in package asset You can do several things. One is to compile then move the .class file to the appropriate subfolder structure. Another, cleaner one is to pass parameters to the compiler to tell it to generate the .class files in a proper package structure beneath the current directory as follows (assuming the Oracle 'javac' compiler, using it's "-d" switch): public class Entry { public static void main(String[] args) throws MalformedURLException { JavaCompiler compiler = ToolProvider.getSystemJavaCompiler(); System.out.println(compiler.run(null, null, null, "-d",".", "MyScript.java")); URL[] urls = new URL[]{ new File(".").toURI().toURL() }; . . . That will create an 'asset' folder beneath the current directory, putting the .class file there, where it is then in the correct spot relative to "." being the root of the classpath. 
where do you work, oracle? :)
You shouldn't have any problem unless there are external environments you have no control of running this code. In my case, I am developing an API and it is meant to be used by other people. If I "bump" my codebase to java 7 a lot of potential users out there won't be able to use it.
Name anything done on a computer and you've just listed one of the things Java is used for. 
before i had the MyScript.java in the default package ( because i knew about that problem ) and it also didn't work. But i will now give it another shot because maybe i did something wrong the last time. Edit: ok, that worked. I have the file now in an "assets" folder ( not a source folder and not the package name ) and the " "-d","." " thing did the trick by moving the file into the right package structure. Thanks alot!
One thing you should check is the Collections.sort() change. The JDK implementation has adapted the TimSort algorithm which will throw an IllegalArgumentException if your Comparator or compareTo implementation does not 100% comply with the compareTo contract as specified &gt; The implementor must ensure sgn(x.compareTo(y)) == -sgn y.compareTo(x)) for all x and y. (This implies that x.compareTo(y) must throw an exception iff y.compareTo(x) throws an exception.) &gt; &gt; The implementor must also ensure that the relation is transitive: (x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0) implies x.compareTo(z)&gt;0. &gt; &gt; Finally, the implementor must ensure that x.compareTo(y)==0 implies that sgn(x.compareTo(z)) == sgn(y.compareTo(z)), for all z. You can specify a JVM parameter though to use the legacy algorithm.
MAAAAH BAD!!! Hold on, Lemme Update 
Heroku is an option.
1GB ram and 30GB storage is $10 at digital ocean. https://www.digitalocean.com/pricing/ . I have 4 machines there, no problems.
Game servers too. As others have said, anything being ran on a server has a good chance at being in Java. Data processing jobs, [hadoop](http://hadoop.apache.org/). Graph databases, [neo4j](http://www.neo4j.org/). One of Facebook's databases, [cassandra](http://cassandra.apache.org/)
The problem Google has is that Android's class library is based on Apache Harmony, which has been discontinued and wasn't developed past Java SE 6. The other open source options, OpenJDK in particular, are GPL licensed instead of Apache licensed, which is probably the main reason why Google is unwilling to use them. This means that Google would have to implement all the class library changes in Java SE 7 and 8 themselves, and they seem unwilling to put in the resources required to do that. They don't seem to be putting much effort into the language either, dragging their feet with Java 7 language features which were very minor (only one bytecode change that was only used by the non-Java JVM languages). One can only hope that this stagnation is due to Google negotiating behind the scenes a deal with Oracle to use Oracle Java. Maybe even buying Java outright.
Your tests may not run in the same order anymore, which would be fine if they were coded properly not to be order-dependent, but many inexperienced developers mess this up.
And most of it is invisible. Except Android apps.
Take a look at dropwizzards' getting started http://dropwizard.codahale.com/ or if you like spring spring boot is very simple to get started with http://projects.spring.io/spring-boot/
Aws is not cheap. Its good for bursting but NOT 24x7 stuff
Do you have a specific aversion against providing obvious details about the application requirements, which would let us help you?
It depends on your application needs. I'd look into platform-as-a-service offerings, for example, [Jelastic](http://docs.jelastic.com/getting-started), supports Tomcat, Glassfish 3 (don't know about 4). 
Well, just think of a GUI you want to create. I have recently started with JavaFX as well and I love it. You should definitely work with FXML which enables you to separate the look of your program from the logic. The official documentation is quite thorough. As you might have guessed a lot of problems are explained at stackoverflow. Here's the Oracle Tutorial: http://docs.oracle.com/javafx/2/get_started/fxml_tutorial.htm Feel free to message me when you're hitting brick walls - I might be able to help at the beginning. I wouldn't call myself a pro obviously since I began a few weeks back. Have fun with it - it's awesome!
I'm not sure if it's only in Netbeans (I'm a beginner too), but there's a whole bunch of JavaFX templates included, one of them is a Xylophone for example. Try opening them up, see how they work, and try adding whatever you want to them. Using the xylophone example, I added keyboard support, some drop shadow effects, made the notes light up when played...that kind of thing. 
Also you can fondle around with the Scene Builder and see what kind of FXML-Output it generates. That way you get results much faster.
Writing HTML is a waste of time and money for good Java developers. I've worked with very good front end developers that are able to crank out prototypes in "regular" HTML in days, not weeks or months. Just let them work in their native tools. Using JSF just prevents developers from understanding how HTTP and HTML works, meanwhile wasting time learning arcane framework tricks for doing basic things. I mean cmon: &gt; Arguably one of the biggest problems that has been plaguing web application development since its inception is the inability to distinguish requests originating from different windows of a single browser. Not only has an actual solution been long overdue, it has taken a long time to realize this even was a problem. ... &gt; Logging in as a different user in a different window for the same website is thus not normally possible, and having workflows (involving post-backs, navigation) in different windows can also be troublesome because of this. http://jdevelopment.nl/jsf-22/#949 Oh, without a doubt, I can't think of a problem bigger than needing to be able to support simultaneous logins from the same browser. From the land of poorly written requirements. And the solution is awesome of course. Plop a directive in an XML file that automatically modifies links. How does this URL parameter make it in? Magic. 
FX Experience is a great resource http://fxexperience.com/ 
I really need to try JavaFX in Java 8. When I last tried to use FXML I was unable to have components resize with their parent (ultimately the window). It just didn't work for me, so I moved to create the UI using the builders, which I believe have been deprecated.
This is an area where Java really shines. It is so simple to make a good web front end with JSF and PrimeFaces.
If you are ready to handle the sysadmin work yourself, and that you are really counting every pennies, you could consider this: http://www.kimsufi.com It is really hard to find cheaper, even in shared hosting
This is especially true with Netbeans 8.0 with Primefaces crud tooling
It is not a matter of performance but of presentation/clarity.
http://photos.zoochat.com/large/pic_018_-94766.jpg
Why does it hit the channel?
There are a bunch of simple REST tutorials here. It is geared towards Netbeans but you can install everything you need with a simple executable. https://netbeans.org/kb/trails/web.html
Thank you!
Thanks, NetBeans is my primary IDE so that won't be a problem.
There was a simple site set up recently, something like java8.net that had various JDK7 vs JDK8 examples. Any remember the link?
Tons of trading software is written in Java, including stuff that's written for retail traders (thinkorswim as an example)
http://www.java8.org/
Adhering to the OPs layout style, [**this**](https://gist.github.com/anonymous/52c9fc117aa89d3b9086) is better IMO. To my own style, I prefer it like [**this**](https://gist.github.com/anonymous/a680dafe46275e5fd4cc). Either OP needs to over haul his design.
This answer is even worse than the original IMO: public int fightMath(int one,int two) { return (int)(0xF9F66090L &gt;&gt; (2*(one*4 + two)))%4; } I hate it when people do this 'clever' shit that makes maintenance a huge chore. At least the original could be followed if you were debugging it. The matrix answer is clever *and* can be easily followed - it's evident from the code what's going on. Coming across the above function in code that needed to be debugged is a definite "OH FUCK ME" moment.
If you are just playing around then Red Hat's [Openshift](https://www.openshift.com/developers/java) has a free tier that would be more than enough for you.
`int five = 6;` 
That's definitely a bug in your code. According to that error, you have an ArrayList with two items in it (index 0, and index 1), and you're accessing the item at index 2 in that array (where the third item would be, if you had a third item.) It appears to be a bug in LongTrader.equals(). I suspect that you will find the out of bounds error there. *(I cannot read your code. I ___will not___ fix your code for you. I am merely reading the error message back to you.)*
I know it's beyond the original question, but I agree with the C# guy - the asker ~~should~~ **could** definitely be using enums here.
Interesting. As someone who has done a lot of jee work I never set containers up to be managed via Eclipse. I typically use Java project and then a build script will push it to my container. The svn plugin battle is unfortunate. I typically forget which one I use (maybe both!) but after its setup I forget which one it is since I don't have to mess with it, it works fine.
Kotlin looks cool, but is anybody at all actually using it yet?
I stand up for it. I use it for ScalaIDE, Counterclockwise, Android and day work such as JDT, webservices, html, javascript/JSDT etc. Personally I think works great, the "thinking for you" selling points of IDEA refactoring are items I typically never need in practice, not sure what they're doing that people end up there. For example, awesome sql highlighting in my Java code - no way Jose, you shouldn't have to need that! I wish Eclipse had better support for newer languages and technologies, way better Javascript tooling, CoffeeScript support, SASS or LESS come to mind as well, but I think thats the fault of it being so Java centric. In the end, I find it the best for my personal projects and I'm productive. I find it codes as fast I as think about stuff.
You should not have gotten downvoted. As of my reading there was a Java answer that used enum constants. It was perfectly readable and made the game logic easy to understand. It may be slightly slower than shifting bits, but I bet not of significance.
The matrix answer was superb and suitable, but for posterity I prefer the Java answer that used enum constants. It was perfectly readable and made the game logic easy to understand. It may be slightly slower than shifting bits, but I bet not of significance. 
Good examples, but who makes that kind of website in our day and age? Tiny text, cramped and loads of irrelevant cruft around it.
&gt; Edit: Ok, webservers and Android in general, is that it? Yes, but I get the feeling that's &gt; 50% of the job market. http://www.wired.co.uk/news/archive/2013-09/26/the-second-coming-of-java &gt; But over the past few years, Java has evolved into something very different. It has quietly become the primary foundation for most the net's largest and most ambitious operations, including Google, LinkedIn, Tumblr, and Square, as well as Twitter. If you want to write high performance games - java is not a good choice. Do C or C++. But there's also a lot more jobs for web developers than there are for high performance game developers. P.S. Wait, what am I saying? Why would I want to encourage competition to enter my field? I mean - you should give up java! It's old and archaic! Yeah...learn something different and niche that you won't be able to find a job with. Woooo! lol
Best comment: http://stackoverflow.com/questions/22501230/too-many-if-statements#comment34248695_22501430
In my intro to programming, you could never have too many if statements.
Sure, their code changed. But your code still has a bug in it in Java 7, you just never hit the code that caused the crash. Remember, just because your code didn't crash doesn't mean it doesn't have an error. I am 70% confident that: 1. The bug is in your code 2. The bug is in your .equals() method 3. The bug is in a for loop or similar construct 4. (Despite it being required by the code contract in .equals()) You didn't implement .hashCode(). This is probably unrelated to your bug, but it's also a bug. Unless you post your code, I cannot *know* any of these things. I am not psychic. 
Eh. I'll take the hits because the suggestion is off-topic and was maybe a little harsh with [should](http://tools.ietf.org/html/rfc2119). Besides, at least I wasn't the asshole who just linked [Pounding A Nail: Old Shoe or Glass Bottle?](http://weblogs.asp.net/alex_papadimoulis/archive/2005/05/25/408925.aspx) without comment.
&gt; Coming across the above function in code that needed to be debugged is a definite "OH FUCK ME" moment. Completely agree. I would then rewrite it myself. There is absolutely no need for unreadable code like that in the current context.
Ja lekker, als iedereen in z'n eigen taaltje gaat lopen te lullen begrijpen we er natuurlijk allemaal niets meer van he!?
If performance mattered enough, I would use that solution, but I would include write unit tests for all 16 cases AND put the matrix solution in as a comment. This is one of the few cases where I consider it ok to check in code that's commented out.
I think if you need performance on the degree of obfuscation by bitshifting then you are using the wrong language. Yes there are rare exceptions but in this particular case this 'optimisation' is completely unwarranted. Would definitely would write a unit test first because this is the kind of thing that is easy to make a mistake on.
Thanks for posting the examples. The more I read, the less I'm a fan of lambda's though. It's syntactic sugar over just creating an anonymous inner class. Now that's not a problem - I love good syntactic sugar - the problem is you end up with stuff like this - double bill = costBeforeTax.stream().map((cost) -&gt; cost + .12*cost).reduce((sum, cost) -&gt; sum + cost).get(); Or this - List&lt;Integer&gt; distinct = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList()); Seems like it takes less lines, but readability gets worse as it tries to cram to many concepts into to small of a space.
&gt; This answer is even worse than the original IMO: Hahahaha, I totally agree. I mean it's a very amusing "solution" - props to the commenter for coming up with it - but if they actually put it into their code it's terrible.
That guy he's responding to was saying that junior devs wouldn't be able to comprehend a small 2D look up table... I really doubt that.
Also some desktop applications - like Jitsi - https://jitsi.org/
Well checking for sanity would take the same time in both examples. 
&gt; choice of variable names as a,b or x, y is better than even and odd. DO NOT follow this advice! Variable names are the simplest way to document a complex closure.
I've detected a hexadecimal color code in your comment. Please allow me to provide visual representation. [#181743](http://color.re/181743.png) *** [^^Learn ^^more ^^about ^^me](http://color.re) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' 
Yet I'd say that's perfectly readable code. Certainly I've committed worse crimes with lambdas. But I've worked with them, I recognise the method names, I've become efficient at modeling the stream of functions in my head. I find them more descriptive and readable (when used appropriately). Programming takes practise, we all know this, and this is true of language features and libraries. People will come to love lambdas; you'll never have to write a foreach loop again! Totally worth it for that reason alone. Certainly some of it is not too pretty, the functions like .stream(), .get(), .collect(Collecters.toList()) don't much help readability. Why can I not call .map(x-&gt;y) on a collection and for the map function to get the stream for me? Why isn't Predicate&lt;T&gt; a subinterface of Function&lt;T,Boolean&gt;? That's fucking incomprehensible! Learn to love the lambda, despite flaws! I don't know why you have down votes.
In a complex closure, yes. But most closures should be hopefully quite small, just transforming some data in a variable. As long as that variable is well named then describing the transformation as succinctly as possible is good.
Colorcodebot leave me alone
Be sure to check out [Spring Boot](http://projects.spring.io/spring-boot/)
get a vps, eg using openvz or kvm. checkout lowendbox.com for prices and i'm sure there are other similar places to find them. i'm using iniz. the advertised resources are peak usage - you can only use a fraction of that long term. but if you keep your load low they can work fine. there's currently [one](http://lowendbox.com/blog/chicagovps-12year-128mb-3-50month-1gb-and-30year-2gb-in-six-us-locations/) listed for $30 per year for 2GB
The table example uses the logic of a multiplexor. 
It does make a difference, on mobile at the moment. I'll post a link when I can.
Because it runs code it doesn't need to. If only one condition will match then you can stop the moment you find it, there's no need to execute any of the other comparisons. What the OP *should* be doing is returning it from a function. I hate this crap: String dummy(int input) { String ret; switch(input) { case 0: ret = "zero"; case 1: ret = "one"; ..... } return ret; } When you could be doing: String dummy(int input) { switch(input) { case 0: return "zero"; case 1: return "one"; ..... } return "null"; } It's easier to read as it's far more concise, the semantics of the default value are clearer and the control flow is also much more obvious. 
Yep, that's right! You can try to think of "else if" as extending your question to the computer. If you already know that the first thing you asked (does X equal 0?) is true, you don't need to keep asking if X equals 1 or 2. You'll get the hang of it with time and practice. Keep coding and asking questions!
Oh so you mean that if each if statement had a return statement in it, then the program would stop checking all of the other ifs?
The matrix answer is the only one I like. The other answers are really fun but just irresponsible to use in all but the most special cases.
A method stops executing once it hits a return statement. Technically a finally clause might still run, but in general that will end the execution.
&gt; readability gets worse as it tries to cram to many concepts into to small of a space I spend a lot of time working in languages where closures have been around for more than a decade (Perl and Javascript), and for me lambdas make code far *more* readable. I have a feeling most Java programmers will eventually adapt and conclude that lambdas are a lot easier to mentally parse than anonymous classes if for no other reason than you don't have to pair half a dozen nested {} and ()'s. One thing I *don't* like about the Java syntax is that curly braces aren't required for simple expressions. THAT makes them hard to read. If you care about your fellow human beings you'll use curly braces even if you don't need to.
Ok, would it be better to have return statements for each if statement, or a series of else ifs, or else ifs with return statements? Just curious which would be the best to use.
Personal preference. A lot of colleges preach one return per method. I like multiple returns because you don't have to declare a return variable and you can tell immediately nothing else is going to happen.
Gradle multi-project builds are going to require you run gradle from the directory of the root project, otherwise it won't include all of the child projects. My advice: Have a SINGLE build.gradle file at the root of your project, looking like this: project(':Program1') { apply plugin: 'java' dependencies { complie project(':CommonCode') } } project(':CommonCode') { apply plugin: 'java' } And settings.gradle would remain the same. This will remove the misconception that your projects can be built separately, and keep your build configuration centralized in a single file. Regardless of how you structure the build itself, you still need to do `gradle Program1:build` to build only project1 while in the directory of the root project.
I *think* the amount of math the CPU has to do to calculate the address for the matrix lookup is extremely similar to the bit manipulation solution. That's optimistically assuming it can correctly optimize the math to bit operations and doesn't have to use multiply. The biggest difference between the two will be the bounds checking for the matrix. IndexOutOfBounds exceptions aren't free.
Or the Shannon expansion theorem which I interpret as the same thing. 
This misses an important point of properties (C# or otherwise): That the caller can just say object.prop and have it call the propGet method.
I did, which was how it went from dismal (metal) to sad (gtk+).
Personally I consider public getters/setters/properties a bad design. They expose the internal state of the object and make it practically impossible to make the class correctly thread safe and performant. Instead I advocate making as much of the state immutable as possible (preferably all of it) by taking the state as parameters to the constructor and then assigning to final instance vars. If you need a slightly differently configured instance, you create a new one instead of mutating an existing one through a setter (creating more objects typically ends up being significantly cheaper than the synchronization overhead that you otherwise have to pay for a correct implementation). Any mutable state that the class must have should be minimal and under no circumstances directly exposed through getters/setters/properties. Instead the class should define an API for the actual functionality that it's implementing instead of access to its internal state.
Could try nimbus? That's what I'm using.
I would like to know more about the technical details on the differences between OpenJDK and the Oracle JDK. They are supposed to be nearly identical but still seems there are subtle bugs that only occur in OpenJDK. As a followup more on the political side who are the top contributers to the project? Mainly want to know if Oracle contributing bug fixes back to project and treating it like an upstream project or focusing on Oracle JDK after the reference implementation is complete.
Multiple meanings? What do you mean?
Do you have the checkerboard as an independent class? If so, just create an outer panel with GridBagLayout (5 cols, 5 rows), add JLabels to the first row and first column, and embed the checkerboard with a colspan/rowspan of 4 each.
As nice as the information in the article is, the grammar throws me completely off. Missing articles all over the place forces me to mostly re-read every other sentence.
Tried with default methods but dalvik complained about abstract interfaces that contained methods
Eclipse doesn't support JDK 8 yet, you need a beta plugin to get it to work. Try using a java 7 JDK instead.
Doesn't look that bad on Windows. You can change the LnF in Options but only the Windows look really looks ok on Windows. 
Sorry, but that hasn't been true for a while now. There's a stable JDK8 patch for Kepler, and Luna prereleases have it baked in. [Download page](http://download.eclipse.org/eclipse/downloads/) | [Kepler patch](https://wiki.eclipse.org/JDT/Eclipse_Java_8_Support_For_Kepler)
Wow. I must be the only one on the planet that prefers Metal (Ocean actually replaced the original Sun-purple Metal, IIRC, but whatever). GTK looks worse to me, and Nimbus has sizing issues, at least on Linux (e.g., profile combobox with small toolbar ivons). Metal just works. It's not super exciting, but I like that. I don't want my apps' UI to attract attention. I want it to stay out of my way so I can do work, while still providing necessary and desirable affordances.
So for the memory math operation, it is 2 instructions, lea and a mov (on an x86 machine, however most architectures have something similar). The out of bounds check is a bugger that might make things slower (stinkin' java). The math thing uses a minimum of 5 instructions (all be it, very fast instructions, like single cycle instructions). hmmm.... I guess I would need to profile this thing out and see what hotspot can optimize away. But rethinking about it, you are right. The IndexOutOfBounds exception detection would probably cause the matrix solution to be slower. If this were C or C++, the matrix method might be faster or on par.
I don't understand the code. So I really don't know O:) I'd like to create something similar to this, but with different code. But as I said, I don't know the code, so I'm asking you guys. http://www.positivt.dk/images27/0401.jpg
I've been testing out code with Java 8 recently and came across a couple of things. First, the Java compilers have allowed you to specify the source version and the target version. I tried compiling Java 8 source to Java 7 target and the compiler won't support that. The Java 8 JVM has no issues with code compiled with the older compiler, but the Java 8 javac will not allow you to back compile Java 8 code. The second thing I hit was with Nashorn and some JavaScript code I was using in one of my projects. In the older Rhino engine that is in Java 7 I was able to write a line of JavaScript that looked like: var a = inputstring.replace("\\","/"); If input string was something like inputstring="c:\\Windows\\Program Files\\" then **a** would become c:/Windows/Program Files/ The data type for the **inputstring** variable was actually a **java.lang.String** object and String's **replace** function will replace all occurrences. However, with Nashorn the results are different. Using Nashorn the variable **a** now has the value c:/Windows\Program Files\ it only replaces the first occurrence which is actually correct for JavaScript's string replace function. To replace them all you need to use var a = inputstring.replace(/\\/g,"/"); What is interesting here though is that if you use the **jjs** command line tool which and create the **inputstring** variable then do jjs&gt; inputstring.getClass(); the return type is class java.lang.String So it appears Nashorn is a "more correct" JavaScript implementation, at least when dealing with JavaScript types even if the variable type is mapped to a Java object type with other capabilities. I also played with the new **default** methods in interfaces, and that has some intriguing possibilities.
Thanks for correcting me. Last I had checked, JDK 8 support was still in beta and didn't work.
Well, if you work on server-side code running in any of the major containers (WebLogic, WildFly, WebSphere), you've got at least a few months to get up to speed. :)
So you look for something like private Part s; or double entendre; or bra =new DoubleHolder(); Right?
Yes sounds good to me! ;) Could you explain to me, what it does as a code pls? And it doesn't have to be about female body parts ;) I can be about anything you can think of ;) 
No problem, they did a terrible job of making the patches public knowledge.
Can someone help me to understand the usecases around why we need Javascript engine to be integrated with Java?
Just joined a new project using Websphere with Java 6 :(
Sorry, couldn't resist [this](https://www.youtube.com/watch?v=1ytCEuuW2_A). The WebSphere part is far worse than the Java 6 part.
JavaScript is distributed as part of the Java JDK since version 6. This allows the engineering efforts invested into the JVM as alternative to nodejs while leveraging the huge offer of existing Java libraries.
So I tried what you suggested, but in one of my projects I have apply plugin 'spring-boot' as well as other lines to include a bunch of stuff for spring, and when I run `gradle Program1:build` it returns an error saying `Plugin with id 'spring-boot' not found.` and I can't figure out why. Also if for now I just ignore the project that has the spring dependencies I still end up with the same problem as before. where the Jar file does not include the required code from Common.
This must be one of those articles autogenerated by a Markov chain bot. I don't see the JCache API really changing anything at this post-JSR juncture. Perhaps if Cameron Purdy hadn't sat on it for decades, but we're past all that now. Hazelcast, InfiniSpan, EHCache and the Spring Cache frontend are where it's at now. 
Gradle doesn't build fat jars, when you include compile dependencies it puts the JAR on the compileClasspath and copies said JAR to the output directory. In your ${PROJECTNAME}/build/libs you should see your compiled JAR along with all the JAR's it depends on. If you want to build a fat jar you will need to manually write your JAR task or use a 3rd-party fatjar plugin (like https://github.com/musketyr/gradle-fatjar-plugin).
The first just declares a field s of type Part (and just to keep with the entendre, as a private member). The second also defined a field (or variable, if within a method) named "entendre" of default visibility and type double (with a small d - that's a primitive type). The third instantiates a DoubleHolder and stores it in a variable or field named "bra". That's a class used by CORBA to hold values of the primitive double type. Other things I can think of: throw new Rock(); (given a suitable Rock implementation) try { beachBall(); } catch (Ball s) { throw s; } more a pun than a useful program. if (youCanReadThis) youNeedNoGlasses(); Just a normal sentence converted to something Java-ish.
strange thing is that I don't see the dependency showing up in the build/libs folder, and two of my projects that use the common code do get compiled as a fat jar, so I have no clue what is going on there
The other thing I always like about metal is that it's pretty tiny by standard. The tabs are tiny, the buttons are tiny... it leaves much more screen real estate for code and the like, compared to nimbus or gtk. [I say this having only switched to metal by accident: ubuntu moved to unity, so I moved to LXDE, then netbeans got confused about themes and defaulted to metal]
You know what, I'm always building web applications so the behavior I typically see is different (since libs are copied into the libs/ directory in a .WAR). Gradle won't copy inter-project dependencies, instead preferring to just link the various jars on the classpath. Use the application plugin to create a package for distribution, this will create startup scripts and bundle your lib jars for you.
Give IDEA community a shot, set both appearance settings to Darcula.
Thanks for the link. Tried it but I`m still getting the same error. I too checked that everything's up to date.
Ah, thank you. It now appears to work properly.
What’s wrong with [Polygon.intersect()](http://docs.oracle.com/javase/7/docs/api/java/awt/Polygon.html#intersects(java.awt.geom.Rectangle2D%29)?
Well, I took a look at it, and I figured out what the problem is for now. The Java EE tools are part of the WTP, not the JDT, which that patch is for. My guess is that the WTP builds for the Luna release will have Java 8 compatibility. If you just want to make the warning go away for now, set your JDK8 as a Java 7 execution environment in the java settings, and it'll just conform to java 7. So no new features, but also no irritating warnings. Once that's done, you can manually switch the project compiler level back to 1.8, which will generate a project warning but not a compiler-blocking error. Hopefully that fixes it.
So one needs to wait for Luna for full support while Netbeans and InteliJ already offer it?!
That worked fine for me. Thanks a lot :)
One thing wrong with using this method is that it is in the AWT toolkit package. If the program you are writing is GUI related then that is fine but if you are just using it for the calculations then it won't run on 'headless' jvm installations such as app container servers. It's better to just look at the source code and pick the parts you need. 
No, they said in the article theres a patch for 4.3 coming with support.
It is available already.
Unfortunately, it is not fashion. This is common to people from languages other than English which normally don't use articles. Have encountered it with people from Arabic origin who learned English as a second language, and also it's quite common with people coming from the Indian area. I'd expect a "professional" blogger who maintains quite a high standard in his entries to at least try for proper grammar. I really like the contents of his articles, but since I have to cringe about the grammar every time, the joy of reading the articles is spoiled. Also, somehow my retention turns off when I stumble over grammar (or spelling mistakes as well).
Please read the full post: &gt; Note that PDE API Tools has not yet adopted the new language constructs. This will be completed in the final Luna release. Not everything is supported, even with the patch applied.
There has been the ability to use the system menu bar on OS X since JavaFX 2.1: http://docs.oracle.com/javafx/2/api/javafx/scene/control/MenuBar.html#useSystemMenuBarProperty
Yes, you can have a menu attach to the menu bar, but you cannot add any items to the APPLICATION menu (the entry in the menubar with the application's name bolded). This means you cannot put preferences/about entries in the menubar where OS X users except them.
So I have this nested closure that I wrote to group and reduce probabilities in a powerset. I used this for my reduce... so I see your point. (l, r) -&gt; l * r It's not exactly clear why that is the correct operation I should be using for a reduce, but I can deal with it. The outer closure I really did need to make everything more verbose. If instead I do this its certainly more expressive: (chanceLeft, chanceRight) -&gt; chanceLeft * chanceRight) What I wish java 8 had was something like Groovy's "it" it[0] * it[1] But probably the most expressive short version would be something like: Math::product
Interesting. I wasn't aware of that. Thanks!
Hey thank a ton! I actually did some digging around and figured out how to do it in processing. A lot of it is copy pasta but here's the code I came up with! [Link](http://pastebin.com/FqhMJWga) Tell me what you think?
I would start by implementing a custom table model. You wouldn't necessarily need to write one from scratch, as I'm sure there are suitable base classes available. Perhaps make it something you can serialize to an InputStream.
Terrible names. I think that means player two.
In the next 4-6 years, mobile is going to take over. It alone will account for billions of new worldwide dollars to earn.
I've tried Intellij a few times, I even bought a license at their "end of the world sale" a year and a half ago. I never really liked it enough to warrant switching. It's definitely better than eclipse, and I can see how people would like it more than netbeans... I just really like netbeans
It's not 1.0 yet, but I'll be using it my next mobile game project.
Don't you mean "Java 8 support for Eclipse"?
I use JS as the scripting engine for my Java programs. Since Java 6, it's been possible to pass variables to the scripting engine and get those values back from the script, so it's an ideal way of giving your users a means to do scripting of your app. 
A constructor without a visibility modifier is package scope and must not have been what the marker was looking for. In other words your class could only be created by a class in the same package. 
Enterprise web development (JBoss, Websphere, Glassfish). Web templating with JSF Android Google App Engine is used by Java quite a bit I mean Java can be used for almost anything (see the other comments). I just listed what I thought was used most widely by Java.
Yeah they have been there since some time ago, NetBeans ftw! 
http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html
A constructor without a visibility modifier is "default scope" which means, as /u/NarsilNZ said, package private. Package private means that only classes that are in the same package can call that particular constructor. As long as only a single package is used, this has not much impact on the program, but once multiple packages are used, limiting the constructor to package private can cause serious problems. Once one starts with Design Patterns, which are extremely common in Java, the scope plays a major role. One of the most common Design Patterns is the "Model-View-Controller" (MVC) pattern used to split the "User Interface" (View), "Data" (Model), and the "Program Logic" (Controller) into completely segregated units (read packages). Changing any one of these parts does not affect any of the other parts. Here, visibility is crucial for correct functioning. In another Design Pattern the Singleton Pattern, the constructors are even more restricted, usually they are private. Singletons are Objects that allow only a single instance and that can not be created in the "conventional" way by calling a constructor. Instead they use a "getInstance" method to retrieve the Singleton. The Factory pattern also uses constructors with limited visibility as the Objects are commonly created by the factory rather than directly. Understanding visibility is crucial in Java. I'd say that the deduction was justified.
Im Not sure what your loadpixels does, but the rest of the Code looks really similar to mine (plus you save the picture in a tiff File, which is pretty neat). Are you using any external libraries? 
Can confirm the 4.3.2 patch works just dandy. Only thing I had to fix in my code was sort() with a comparator. This must be done with lambdas now, or else Eclipse will suggest adding two dozen overrides to your anonymous class - quite funny actually.
Yep, there are other ways to do it, I just found it interesting that changed. Also saw that there is no longer built in an **importClass** *function*. If you want to use Java classes you either have to import a compatibility file to get back the import or fully qualify the class names.
Doesn't yet seem to play nice with a faceted web project. Java8 isn't available as an option there.
Your **for** loop where you are building the output string is only ever fetching column 0 of the table model. If the data update is not in column 0 then based on the default data that fetch will always be an empty string so your **fileContent** will only append empty strings, thus being empty. You might want to make sure you are actually building an output string by simply adding a System.out.println("Content: " + fileContent); just before you write the string to the file. On a side note, you may want to switch from using **StringBuffer** to **StringBuilder**. **StringBuffer** is thread safe by making all append methods synchronized so it is a bit slower but since your **fileContent** variable is never accessed by multiple threads there's no reason to need synchronization. In this case it would be solely for performance, both work.
The trick is to set the version directly in the project's config file.
There are some habits you should develop and one is declaring proper access modifiers for classes and fields within classes. 
The first tutorial or reading material on Java 8 that captures the motivation behind the new features in the language, all in 15 mins! Thx for the share
I am not Andrew Dinn but I can take a shot at answering these questions too. If you have any more questions related to OpenJDK (especially if you did not get a chance to ask Andrew Dinn), I can try and answer those too. I am going to call "Oracle JDK" the proprietary Oracle JDK here. You will see the reason why by the end :) &gt; the differences between OpenJDK and the Oracle JDK It's hard to give a comprehensive answer to this without having any knowledge about the proprietary code. Most sources say that the code bases are mostly identical. One piece of evidence that agrees with this is that the build system in OpenJDK has conditionals like "if not building openjdk, link against this", "if not building openjdk, also run commands in this secret makefile" and "if building openjdk use these compiler flags". The proprietary Oracle JDK is basically OpenJDK that is linked against a few different libraries (like `t2k` instead of `freetype`), and some additional features (SNMP support, Plugin, Webstart, VisualVM and Mission Control) that are not part of OpenJDK. &gt; subtle bugs that only occur in OpenJDK This should mostly happen in areas that are different between OpenJDK and the proprietary Oracle JDK. These areas include (or have included) the audio engine, the font renderer, and a few other things like that. These bugs should be much less common in 8 than they were in 6. &gt; who are the top contributers to the project? That's an easy one. Oracle, by far. They probably have the most number of people developing, contributing, reviewing and testing OpenJDK. You can take a look at the project history and correlate the commit author names with http://db.openjdk.java.net/people (which shows the organiation each author is associated with). It's entirely fair to call OpenJDK "Oracle JDK" if you are just going by who contributes the most (not all, but most) code. Other companies including Red Hat, SAP and IBM make contributions too, as do lots of universities, individuals and certain Java User Groups. &gt; Mainly want to know if Oracle contributing bug fixes back to project and treating it like an upstream project or focusing on Oracle JDK after the reference implementation is complete. To understand the answer to this, it's important to undertsand that the proprietary Oracle JDK is OpenJDK built with additional repositories/different build settings. So, for Oracle to ship the proprietary 8u20, they need an OpenJDK 8u20, and a secret-internal-and-proprietary 8u20 branch which contains closed source bits (like the installer, plugin, webstart, VisualVM and Mission Control). They already have a branch for 8u20 as part of the OpenJDK project where they (mostly Oracle, but others too) are collecting fixes that need to go out. And OpenJDK 8u20 will be tagged and released such that it corresponds to whatever Oracle uses to build the proprietary Oracle JDK. I think Oracle is doing a very "interesting" (and delicate) job balancing "the core" (upstream OpenJDK) and what they probably see as "add ons" (everything not OpenJDK). I personally don't agree with how they have been doing this. It would have been much nicer to have everything in OpenJDK and/or Open Source. That said, from what I have seen, they are working hard to keep everything that is already in OpenJDK (things that they can not make non-Open and ship through the proprietary Oracle JDK) in good shape.
Weird, I'm going to stick with scala fir home projects and my trusty Java 6 at work. 
The program is ran in Processing which I'm sure links external libraries but I'm not exactly sure which or how. The loadpixels is another thing Processing needs me to include.
Ah, alright. :) Will definitely look into Processing too, sounds quite interesting.
No, because it's unnecessary when using the array. You may *choose* to check and raise a custom exception (IllegalMoveException for example), which is good form. But even if you don't, it fails fast- which is preferable.
Did anyone ever use third party libraries to join strings? I've done it thousands of times without them. Maybe I was doing it wrong. Edit... Missed a word
It seems to me that the Eclipse development community has kind of driven itself into a corner by allowing the unrestricted growth in complexity. It's as if technical debt doesn't matter, as long as features are hit on deadlines.
Scala: listOfString.mkString(", ");
*Technically* you did do it wrong, but only because your example won't compile due to a missing paren.
You don't use an error-correcting compiler? That's old-school, man.
I wonder why JDK devs decided to use CharSequence as parameters instead of Object..
And here is where I roll my eyes at silly Java programmers... I really feel like I am about to tell a story about how I used to walk to school in the snow or something.
Thanks. It runs instantly.
Java gray-beards like me have usually used the Apache commons utils for this. I suppose one day I'll find time to look at guava. 
Agreed, seems like an odd choice to me.
Lol, oh yeah, java 6 is not so bad. WebSphere though? **shudder** I have to work with websphere - we've found it more productive to use Tomcat for development, even though it's deployed on websphere (despite a general desire to develop with the same tools it will be deployed with, it's just so much better). I imagine you'll have to use RAD to...
&gt; And here is where I roll my eyes at silly tonetheman... I really feel like I am about to tell a story about how I used to eat my own excrement or something. 
Probably
I tried, but it was just too much typing to enter all the parity bits.
If you write your apps like that, you're going to be in for a big shock when you find out that **no one** writes their apps that way. Every web framework available, Spring (the non-web part), etc assumes that your objects have getters and setters and are mutable. Thread safety is easy - don't share data amongst multiple threads. It works a lot better to create a new copy of the data for a new thread than it does to pointlessly try to get your objects to be thread safe.
Yes, StringBuilder just appends strings. StringJoiner appends strings with a token in between and add supports for adding prefix and suffix. Lets say, you wanted to write this array: String[] fruits = { "apple", "orange", banana" }; to a string a like this "apple,orange,banana". With StringBuilder you would write this: StringBuilder sb = new StringBuilder(); for (String fruit : fruits) { if (sb.length != 0) sb.append(","); sb.append(fruit); } return sb.toString(); with StringJoiner you can write: StringJoiner sj = new StringJoiner(","); for (String fruit : fruits) { sj.add(fruit); } return sj.toString(); The above is a little bit nicer and you could change it use new StringJoiner("[", ",", "]"), which changes the string to look like "[apple,orange,banana]". FYI, the code above is to show the difference between the classes. In general, you wouldn't use StringJoiner; but some of the utility methods like Collectors.joiner or String.join that uses it internally.
 return fruits.stream().collect(Collectors.joining(", "));
Internally StringJoiner just uses StringBuilder btw.
Wow all the downvote hate... how odd. I find it sad that someone should need a third party library to join a string.
So this is more about prefixes and suffixes when working with strings? Or is it about a performance-inrease compared to StringBuilders or StringBuffers? Because even if it might require less coding for the same job, I would only rewrite preexisting code if it really does make a difference for the user.
That's probably one of the most useless bots I have seen on Reddit.
&gt; Why isn't Predicate&lt;T&gt; a subinterface of Function&lt;T,Boolean&gt;? That's a easy one: to avoid unnecessary boxing and unboxing.
I'll still be using this in projects that already have guava as a dependency. For collections of things that aren't strings: Joiner.on(",").join(nonCharSequenceCollection) Is much nicer than nonCharSequenceCollection.stream() .map(Object::toString) .collect(joining(","))
[udp](http://docs.oracle.com/javase/tutorial/networking/datagrams/index.html) [tcp](http://docs.oracle.com/javase/tutorial/networking/sockets/)
I find it sad that for other languages you need a third party library to handle a transaction, or to add basic concurrency primitives.
I'm so ridiculously tired of these buzzword neophyte programmers making a big deal out of ridiculously inane items. As if importing Guava is such a big freaking deal.
Right, things not going catastrophically wrong occasionally depends on something not taking more than *n* us (artificial heart motor, airplane rudder, etc...). The first rule of optimization is still generally, don't.
thank the Lord Jesus Christ
I'm new to Java programming and decided to use Eclipse, since most tutorials I found used it. How come that Eclipse appears to be slower at implementing this Java update compared to other IDEs?
I agree with you about your point about distinguishing requests from different windows of a browser. As far as cranking out HTML prototypes, I'm a front-end developer as well (and an iOS &amp; Android dev and a database designer - I have to design complete solutions on my own or in a small team). With JSF 2.2, I can crank out designs in days. The only hurdles that I encountered were getting PrimeFaces working with my HTML 5 Boilerplate/Twitter Bootstrap Initializr-generated templates. However, that integration was a one-time, up-front cost of a day or two's work. Front-end dev used to be a pain. I did learn how to use many such arcane tricks. Now, I'm off to the races for each project.
Stream doesn't work on an array.
&gt; add basic concurrency primitives. if it's even a choice. 
I've occasionally found the CharSequence abstraction useful for plugging in alternative string implementations, e.g. Ropes: http://en.wikipedia.org/wiki/Rope_(data_structure)
You can call Arrays.stream to do it... Although it should just let you call stream on them. 
Possible use cases? Like building SQL statements with IN operator? SELECT foo FROM bars WHERE id IN (1, 3, 5, 7, 9); But shouldn't we use PreparedStatement to bind values to the SQL statement instead of building the whole thing using String concatenation?
I know that stuff, I've written a small p2p game with a central server using sockets before. I'm having trouble with calculating bandwidth and Turing a file into a byte stream
Thats a good talk!
&gt; You always had to remove the trailing separator. StringBuilder sb = new StringBuilder(); for (int i = 0; i &lt; collection.length(); i++) { if (i != 0) sb.append(","); sb.append(collection.get(i)); }
It's more about API than performance-increase.
Agreed. Micro optimization results in new bugs more often than improving performance.
&gt; But shouldn't we use PreparedStatement to bind values to the SQL statement instead of building the whole thing using String concatenation? Yes. If you are using string concatenation to build SQL statements, you're opening yourself up to SQL injection.
I get that having this built-in functionality is great to have but it isn't like it is really doing anything that would necessarily be *hard* or even long/complex to write one's self. 
And here is where a longtime Perl programmer rolls his eyes at the Java haters.
I just feel bad for the haters. They are so insanely jealous. Don't worry, one day one of your buzz word languages will actually make some level of penetration.
It is if you are writing a library. Forcing all your users to depend on guava is pretty crapping, especially if they are using some other utility library like Apache. Having these types of classes in standard library avoids code bloat.
I don't feel bad for them. They're idiots who think programming is some sort of dick-waving contest, and therefore you have to choose sides when it comes to things like "strict vs. loose typing" and then battle to death for them.
Seconded. Of all the things one would bring up about JDK 8, this is decidedly beneath the radar and really not worth mentioning ompared to lambdas, GC changes, etc.
I've been looking for a list that shows me the smaller additions like String.join. Thanks for this post!
Wow... I have no idea. I thought Java 8 was all about adding features, not raw speed.
Given Java's history, there are piles and piles of legacy code full of practices from the 90's. However, look at modern, high quality codebases and it's a different story. For example, you won't find the getter/setter mess in Guava. Any framework that forces you to expose your internal state through getters and setters is fundamentally broken and banned from our codebases. These are practices that come from our use case, which is building infrastructure components that must run reliably for years in environments where software updates are expensive to make. If you're just throwing together some web service or whatever that you can update all the time, then your requirements are obviously different. Although I would argue that following my method will still lead to a more robust, easily testable, and easy to maintain and extend codebase &gt;Thread safety is easy - don't share data amongst multiple threads. Back in reality, however, software must be multithreaded since the underlying hardware is getting more and more parallel. Confining data to a thread is one approach to concurrency, but it does not solve every case. Creating new copies every time when passing an object between threads is not feasible or even possible in every case, and it's often preferable to pass immutable objects, or objects that are otherwise thread safe.
Measuring bandwidth with UDP is not a simple issue since it does not have congestion control. With TCP you can just send a fixed amount of data as fast as possible and measure how long it took since TCP congestion control will throttle the bandwidth. With UDP you need to send at some constant speed and then calculate the throughput based on how many packets get through over time. Figuring out what that constant speed should be is not trivial and you probably need to do some kind of iterative process. Further, TCP flows will throttle back at the bottleneck while UDP won't, causing UDP to grab more than its fair share of the resources.
Nice post. Thanks!
As someone who did benchmarks for a high perf java app.. His tests are crap, and his methodology is suspect.
Thanks.
Then don't mess with it.
I wrote class ReadLabelContentsInBracketedText to read text files like this: Video Data: { Name: { Video "A Funny Thing Happened on the Way to the Forum (1966)" } Container: { mkv } Format: { avc1 } Encoding: { ffh264 } Frames per Second: { 25.000 } Width: { 1024 } Height: { 576 } Aspect: { 1.7795 } Running time (hh:mm:ss): { 01:33:00.80 } } Audio Data: { Number of Tracks: { 2 } Track 1: { Name: { Audio English } Language: { eng } Encoding: { ac3, 48000 Hz, stereo, s16 } } Track 2: { Name: { Audio Spanish } Language: { spa } Encoding: { ac3, 48000 Hz, stereo, s16 } } } Subtitle Data: { Number of Tracks: { 2 } Track 1: { Name: { Subtitles English } Language: { eng } Encoding: { S_TEXT/UTF8 } } Track 2: { Name: { Subtitles Spanish } Language: { spa } Encoding: { S_TEXT/UTF8 } } } File Data: { File Name: { 'A_Funny_Thing_Happened_on_the_Way_to_the_Forum__1966.mkv' } File Size: { 3.6G } }
&gt; the code would blow up at runtime javac will warn you if -bootclasspath option is missing: warning: [options] bootstrap class path not set in conjunction with -source 1.7
Its giving a raise for a department passed in on startup of the program. There's a world of difference between getting the gist of what the code is doing, and understanding how the program works. 
Also if you would post your java 8 benches that would be great! I'm real interested in the performance of java 8 wrt java 7 or 6.
You aren't going to have much luck in learning how to program if you can't even search google =P
I think it might be because of the IBM legacy. IBM is an extremely formal company, and it could well be that there is or was a rule that no product based on unreleased specifications could be released. I vaguely remember something like that being the case with JDK 5 support.
A lot of people have really good success with Head First Java. I've used the book once and thought it was a decent starter book. I ended up going through it in a few weekends but it is in no way a comprehensive book. It does provide a good foundation. Learn Java in 21 days is also pretty good. I'm not really a fan of tutorials for learning a language for the first time because most tutorials are about teaching you specific things about a language with specific end goals. What you really should learn is how the language works at the basic level and use tutorials to figure out what the language has to offer.
You can use [Properties](http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html) class, which offers two methods to load/store data - .properties or XML. However it's better to either use built-in XML tools (like JAX-B, which provide object-XML mapping) or third party libraries, like gson.
https://www.udemy.com/java-tutorial/?sl=E0UaeFw9RBMALEwzBwZX
nuff said
&gt; However, look at modern, high quality codebases and it's a different story. For example, you won't find the getter/setter mess in Guava. &gt; Any framework that forces you to expose your internal state through getters and setters is fundamentally broken and banned from our codebases. This is your opinion, and your opinion is the exact opposite of almost every modern web framework - J2EE assumes you can set getters and setters, as does Spring MVC. As does Struts, Struts 2, etc etc etc. J2EE (now that it seems to have copied spring) and Spring MVC are the two main ones, though. You can do things however you want on your project. I'm not arguing here whether it's a good or bad idea - but you're completely and totally off base to try to claim "legacy" etc about it. Getters and setters are how the majority of modern and the most popular and widely used java web frameworks work. It's your opinion that they shouldn't work that way - and whether it's right or wrong, it's not widely how things are done right now in java land. &gt; Back in reality, however, software must be multithreaded since the underlying hardware is getting more and more parallel...Creating new copies every time when passing an object between threads is not feasible or even possible in every case, and it's often preferable to pass immutable objects, or objects that are otherwise thread safe. Web applications are massively multithreaded, and handle this as I described - by giving each request it's own thread, but it's own copy of the data. The database handles concurrent requests using transactions, it's handled somewhere, but not on the object level. Debugging multithreaded problems is a **nightmare** when something goes wrong. It is far, far better to avoid using multiple threads that share data or objects to begin with. As I said, for web apps where there's no choice, but they handle it by not sharing data between threads. Dealing with multithreaded issues is orders of magnitude more difficult to write, track down the source of errors with, and test than single threaded code. It's far better to use patterns that avoid it, which is what pretty much all modern frameworks and libraries do.
Optaplanner is a "real app". It's doing a lot more than adding things to a hashmap. What do you think it's missing to make it a worthwhile benchmark?
 http://stackoverflow.com/questions/19060036/in-jdk-8-is-there-any-planned-interoperability-between-nashorn-and-the-new-json -- http://msgpack.org/ http://en.wikipedia.org/wiki/Serialization 
Really, just pick any format you like and find some third library handling them. Here's some examples of formats and libraries, the example libraries are just those who from a quick google seem to be liked by people. Json [library](https://code.google.com/p/google-gson/) XML [library](http://www.xom.nu/) or the one already in the JDK YAML [library](https://code.google.com/p/snakeyaml/)
1. codecademy does not offer **Java** courses, they offer **JavaScript** - two different things. 2. for a list of resources, look at the /r/javahelp wiki. Most IDEs for Java are free or have a free version. The /r/javahelp wiki lists quite a few of these.
Agreed, but don't forget the Oracle Javadocs and the Oracle tutorials!
[The JSON standard API in Java is JSON-P, A.K.A. Jackson](http://wiki.fasterxml.com/JacksonHome) [The XML stardard API in Java is JAXB](https://jaxb.java.net)
&gt; What do you think it's missing to make it a worthwhile benchmark? * Relative time spent in GC and top percentile pause times * Multiple runs to measure standard deviation and error * A benchmark that runs each test from a new VM instance, otherwise later jobs using the same code get a free advantage on pre-done optimization passes * More than one library * Java 7 and 8 VM performance should be tested by building agains their respective javac's. This could be particularly important for Java 8 performance since it uses invokedynamic a lot more now * Performance cases specifically on the performance difference between Anonymous classes vs new lambda style * Info about the hardware the test was run on I think those would be some good starting points. 
~~Only question I don't see answered:~~ the standard plain text delimited format on java is the "properties file" Missed /u/Angry_Chimp with this answer somehow This isn't official doc but it's correct AFAICT: http://docs.oracle.com/cd/E23095_01/Platform.93/ATGProgGuide/html/s0204propertiesfileformat01.html
&gt;almost every modern web framework - J2EE assumes you can set getters and setters, as does Spring MVC. As does Struts, Struts 2, etc etc etc. J2EE (now that it seems to have copied spring) and Spring MVC are the two main ones, though. These are examples of what I consider badly designed frameworks, and I'm hardly the only one with that opinion. It's not really fair to call them "modern" since their designs and implementations carry the baggage of 90's practices that you wouldn't need with a clean slate design and implementation with modern best practices. And all of this is besides the point anyway. I gave reasons *why* I believe this is a bad practice, pointing to a variety of frameworks and saying "look, they do it differently" is not an interesting counter argument. &gt;Web applications are massively multithreaded, and handle this as I described - by giving each request it's own thread, but it's own copy of the data. It's not as simple as that, and generic, vague statements like that are pointless. We're already way past the point where a server can dedicate a thread per client and expect to scale. You need to service multiple clients per thread, which means you can't block that thread, which means you end up having to use asynchronous tasks, which means concurrency. Like I said, thread confinement is a valid strategy to concurrency, but it's not applicable everywhere. And even when you use it, shared immutable objects will perform better than copying while being exactly as safe. So I don't see what your point is here. &gt;Debugging multithreaded problems is a nightmare when something goes wrong. Of course it is, which is the whole point why I'm advocating the practices I described. They eliminate whole classes of concurrency bugs. A world where everything could be written as single threaded would be great, but in real systems that need to be performant, maintainable and scalable you don't really have an option now and you definitely won't have an option five years from now when everything else besides single core performance has more than doubled. We *need* to solve concurrency, it's not good enough to pretend like it doesn't exist and continue to design architectures based on 90's (and much earlier) practices like getters/setters/properties that are practically impossible to use safely in a concurrent system.
France will be tough, fluent french is a requirement in most workplaces. I've worked with dev teams in Belgium which had people who only spoke english though.
I know that switzerland and netherlands has lots of multilingual work places. But you can indeed rule out France (source: i'm french), unless you can find an US company willing to hire you.
I would be surprised if you find anyone with a great overview of all that stuff for the whole of europe - for that, you might have better luck on a more general sub like [/r/programming]. But if I were you I would narrow your search area first. Depending on your education/skill level, of course, you shouldn't have much problem getting a job. So you should consider some other things: * Do you want english as a company language, or can you cope with muddling along? * Are you prepared to learn the local language? Or would you prefer a country/city where many/most speak english. Do you speak any spanish? * Where are you from (or which US area do you identify most with, culturally)? What kind of weather can you deal with? Although most of Europe is further North than US, we have relatively warm winters, but the summer is likely to be shorter/cooler than you are used to. * Do you have outdoors hobbies like hiking, mountaineering and so on, that require a particular landscape? By the way, you mention Western Europe: Switzerland, France, Spain, Belgium, the Netherlands and even Austria are all part of Western Europe.... do you mean the British Isles? Focussing your search and getting motivated for a particular place will help you with your job search and any interviews.
&gt; Now thankfully, if you have two interfaces that have a default implementation for a single method signature, and you try to have a class implement both interfaces, Java will refuse to compile that class. Is this also being checked at runtime?
JSON is by definition a native format to JavaScript and coincidentally to Python as well. Java doesn't have object literals at all. You can still parse files from a 100 different formats pretty easily. JSON, XML, whatever. Java is also strongly typed so you can't create arbitrary objects at run time. You can approximate with data structures or use JAXB annotations if the structure can be defined upfront. 
It's valid java. I wouldn't have taken off a point. You don't need to set a visibility modifier, and in many cases people put public when they shouldn't.
Sorry, i meant i am less interested in Eastern Europe.
&gt; It's not sad, it's just a good use of their time. Guava and Apache had libraries that also turned the three lines into one line. Not a big freaking deal.
&gt; I don't feel bad for them. They're idiots who think programming is some sort of dick-waving contest, and therefore you have to choose sides when it comes to things like "strict vs. loose typing" and then battle to death for them. It's even funnier when they point to unreadable sh*t like coffeescript and talk about how much of a productivity booster it is. Good thing they never have more than their self-glorifying/soapbox blog to worry about.
When you're continiously expanding a string like that, isn't it more proper to use StringBuilder?
Ah! Thank you for telling me. Yeah using a string builder will be faster.
You can't make this kind of comment with no argument to justify it, or worse with only an argument of authority. His benchmark tests the performance of his application and seems straightforward. As far as benchmarks go it does not seem less or more useful than synthetic benchmarks which tests individual features without a direct implication of real world results.
Here's my write-up on a [Java Swing Hangman](http://java-articles.info/articles/?p=349).
I'm kinda wondering what the target user for this is. If you're moving to a new platform or framework, why stay with php?
Write your own article! I'd be interested in the results. 
Not entirely true, you can find a job in a big company, check Sophia Antipolis in the south of France
Even more, considering that PHP is stupid baffles me why it still exist today: http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/
It is a compile time check. To fix the error, you need to write your own implementation int your class. Your implementation could be a simple a proxy to one of the conflicting interfaces methods like so: public class Test implements A,B { @Override public void foo() { A.super.foo(); // or B.super.foo() if you prefer } }
Are there any search engines for European software engineering positions such as Indeed.com?
Introducing Guava in your library, just for a few helper classes like Precondition and Joiner is a bad design choice. You are now requiring people to either manage the guava dependency themselves or force them to use maven/gradle to handle it for them. Maven/Grade does help with transitive dependency; but that still has corner case when you have two incompatible version of the same library (ie. Guava @Beta classes). The code bloat, I was talking about is not the transitive dependency; but that libraries tend to write their own versions of the same code to prevent introducing another dependency. Proguard won't help here. This is why it is nice when the SDK can recognize useful patterns and include it in the SDK for everyone to use.
This is a bytecode compiler and Quercus is a source code translator.
Why?
&gt; Quercus creates .java source files, and then uses the java compiler to compile the source to .class files. The intermediate java files are stored in WEB-INF/_work/_quercus. Quercus is a PHP -&gt; Java compiler, not a PHP -&gt; JVM bytecode compiler.
I'm a Java Developer I'm located in jersey city. If you cannot find anything or want something more personalized I would be more than happy to do private lessons/tutoring. For the price you'd pay a bootcamp I can teach you java using tried and true books as well as things that I use on a daily basis as a Java Developer. 
i would also be interested on doing that! But I live in Washington DC
I know it's not Europe. But have you considered Australia &amp; New Zealand? They are English-speaking and have a strong Java job market. New Zealand in particular has an amazing outdoors lifestyle and lots to explore.
&gt; which I believe have been deprecated Scene Builder 2 has an [Early Access Release](http://docs.oracle.com/javafx/scenebuilder/2/release_notes_2-0/jsbpub-release_notes_2-0.htm) right now (announced in December), which supports JavaFX 8.
&gt; 3 lines isn't a big deal, but 3 lines for N methods used by M projects who each add X unit tests can quickly become a problem. If you aren't in that situation then by all means write your own utilities if that's what you want to do. Two points: * Put those three lines in your own utility method, so now it becomes 5 lines. Write the unit tests, done. * Since when I started off by my next point, it didn't get through, I'll try ending with it. I mentioned two *extremely popular* libraries earlier, Guava and Apache's. Use them and benefit from their unit tests, done. 
Cool. Didn’t know that, however, so far I never needed to. :)
It is nice that you write blog posts in order to learn stuff, but if you really want to get attention to your blog, you need to do something different. There are dozens of Swing tutorials, so how is yours different? If you want attraction, you should rewrite your application in JavaFX since it is a relatively new technology and there are not as many tutorials out there.
It is also mandatory to learn French if you're non-European, afaik. The French administration will also go out of its way to make things difficult. I don't really know but sponsoring does not work the same as in the US. The gist of it is that you need to already have a job to obtain a visa, however it is illegal to work if you don't have one. It will be difficult to convince a company to make this bet especially considering the job situation in France right now.
It will be fine in almost any big city in Europe, even France. All of them have jobs in companies with English as the company language. However, outside of the big cities will be more difficult if you don't speak the local language.
Because reasons!
I don't think that the "misuse" of default methods would lead to more complex designs. I see it as a chance to reduce complexity, because you can avoid some workarounds now. Traits in Scala (ok, they are much more powerful) a great thing to reduce complexity.
True, but then you need someone to repair your wash machine and you need to ask for help, as most likely those guys won't speak English. Or going shopping for example. Or getting the Amazon package at the post office. There are lots of little things that knowing the local language will be a huge help, otherwise one needs to rely on local friends all the time. Portuguese living in Germany, with work experience in many other European countries. Already went through this process a few times and having the will to learn the local languages has helped me a lot.
First of all, you better have a look at what kind of paperwork/requirements each country you are interested in might ask you (or your employer). For that, you can have a look at the EURES portal ( https://ec.europa.eu/eures/ ) for specific details. Regarding the language, the more you look in the north, the easier it will be for an english-only speaker (thought it is always better to learn the local language), but the weather won't be as nice as in the south, obviously. About the global job board, there is not a global one that I know of (except the one of EURES, but it is not well known by most of the companies), but most of them which target IT jobs will likely have an english interface. And finally, the balance between being an employee or a contractor really depends on the country. I would personally recommend starting as an employee as you will benefit in most case from all the social security aspects and investigate if you are willing to start a freelance career later on.
&gt; good place to start would be some real apps. Course scheduling, exam scheduling and nurse rostering use real-world data, real-world constraints and compete in international research competitions. They are anything but trivial. (See docs &amp; video's for more info). http://docs.jboss.org/drools/release/6.0.1.Final/optaplanner-docs/html_single/index.html#examplesOverview Machine Reassignment was generated by google, but it's very realistic, including constraint such as "The processes of a service depending on another service must run on a machine in the neighborhood of a process of the other service". &gt;Relative time spent in GC and top percentile pause times This is indeed one of the dozen metrics that are interesting to research and report on. Since my time was limited, I only focused on the end result "what is the free lunch". &gt; Multiple runs to measure standard deviation and error Agreed. But I actually ran the java 8 run twice and saw no difference. If I had more time (= no real job to do), I 'd had run the benchmark 30 times for each JDK and done standard deviation etc, to rule out effects as specified in Josh Bloch's talk "performance anxiety". &gt; A benchmark that runs each test from a new VM instance, otherwise later jobs using the same code get a free advantage on pre-done optimization passes The benchmark starts with a 30 second warmup that runs every benchmark for a few seconds. That warmup didn't count towards the benchmark results. In hindsight, a longer warmup time would have been more accurate. &gt; More than one library The OptaPlanner examples use optaplanner-core, drools, mvel, commons-lang. &gt; Java 7 and 8 VM performance should be tested by building agains their respective javac's. This includes building all dependencies (especially drools) against their own JDK and language level. That's a non trivial thing to do. It's clearly noted that I didn't do this, but it's one of the things that's on my todo list as specified in the comments already. &gt; Performance cases specifically on the performance difference between Anonymous classes vs new lambda style The purpose of my article was measuring the "free lunch" (= no code changes), not the effect of using new features in Java 8. Note that code changes (refactoring) imply design decisions. &gt; Info about the hardware the test was run on I 'll add that. Intel® Xeon(R) CPU W3550 @ 3.07GHz × 4. Kernel Linux 3.2.0-59-generic-pae. Summary: Your mileage may vary. And I 'd be interested in an article about your mileage. But that doesn't mean my mileage is crap :) 
Does Europe still have *truly* separate countries? If I'm not mistaken lots of the laws concerning employment and housing are defined at the European level. 
Something you need to be prepared for is that the government will meddle with your personal affairs much more than in the US. For example, home schooling is not usually an option. And school is mandatory from a certain age on. That means your kids will be confronted with a foreign language when going to school, if you can't or won't afford an international school. Also, international schools are not exactly common, so if that's the kind of education you want for your kids, it will severely limit the areas where you can live.
Preconditions check for null can be replaced with `java.util.Objects`: Preconditions.checkNotNull(obj); Objects.requireNonNull(obj); Objects.requireNonNull(obj, str);
I'm also in NYC and would be very interested in something like this. Please PM me if you find anything or wind up starting a group. 
For Java 8 * http://www.coreservlets.com/java-8-tutorial/ 
[`java.util.Objects`](http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html) is in JDK since 1.7 actually. Also there's quite handy [`Preconditions.checkNotNull(T, String msg, Object... args)`](http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Preconditions.html#checkNotNull(T, java.lang.String, java.lang.Object...)) which is missing in JDK.
While I agree that PHP has some flaws and some rather annoying parts, I have yet to see a language that makes it so stupendously easy to publish dynamic stuff over HTTP. I have finished small apps in PHP in the time it would have taken to just setup the environment in another language. Would I use it for anything beyond a single page app? No. Do I sometimes wish that Pythong or Java would make my life as easy as PHP does? Yes.
I wish they integrated a more generic Preconditions.checkArgument as throwing an NPE implies bug or code spell as opposed to an IllegalArgumentException which is more correct in the majority of cases.
Maybe, some of your suggestion should be used for banners offering free java devs job positions in Czech Republic ;) 
FluentIterable is pretty much a Stream in JDK8. With the added easy paralellization you get for free I would like to see some examples where Guava is so much more expressive. It's not a diss against guava which was my favourite framework. But they are competing against physicial changes in the underlying language. It's not a fair game anymore ;) How can: .filter(new Predicate&lt;String&gt;() { @Override public boolean apply(String s) { return s.length() &gt; 10 } }); ever compete with: filter(x -&gt; x.length() &gt; 10); The only thing I might keep using is some of their data structures like the great MultiMap or the cache builders.
You can use lambdas with Guava, because many of the Interfaces have only a single method. Your two examples would actually look exactly alike in Java 8.
&gt; Maybe we're saying the same thing. I thought you were arguing against using 3rd party utility libraries in your first reply. We are saying the same thing, sorry I wasn't clear. 
You could host a ckeditor instance (http://ckeditor.com/) which allows you to store text in HTML format and maybe convert it if you need to.
How about OpenOffice's writer? It can be embedded into a Java application as detailed [HERE](http://stackoverflow.com/questions/853071/wysiwyg-text-editor-in-java#853153).
Interesting. But the underlying argument would remain. Why wrap it in a FluentIterable, when a stream gives you the same. Note I'm still relying on Lists.newArrayList(...) though :) ArrayList&lt;Integer&gt; integers = Lists.newArrayList(1, 2, 3, 4, 5); // guava FluentIterable.from(integers) .filter(x-&gt; x&gt;2) .filter(x -&gt; x%2 == 0) .toList(); // jdk8 integers.stream() .filter(x-&gt; x&gt;2) .filter(x -&gt; x%2 == 0) .collect(Collectors.toList()); changing stream() to parralelStream() also gives you immediate parralelization at no cost. I also (personally) find the Collectors implementation more generic in JDK8. It might look verbose for the toList() but given you can quickly do something like this integers.stream() .filter(x-&gt; x&gt;2) .filter(x -&gt; x%2 == 0) .map(x-&gt;x.toString()) .collect(Collectors.joining(",")); is kind of cool
Sorry, I will never reply to your comments again.
OOoBean can be a PITA. I've had frustrations with it in the past and at least previously it wasn't very well supported.
Well for example I worked and perf tested a java system that did millions of messages per second with 99.9% of them responded to in .0002 seconds or less. We would see a HUGE difference in jdks. JDK7 was a 35% performance boost over JDK6. That was interesting to see. The stuff he benchmarked with was pretty zzz.. I am sure his code and lock contention masks any perf difference the JDK makes..
What you are observing is called *polymorphism*. Try reading [this article](http://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html) on the subject in the Java tutorials.
Without the static imports: import java.nio.file.Files; import java.nio.file.Paths; public class Test { public static void main(String[] args) throws Exception { System.out.println(new String(Files.readAllBytes(Paths.get("test.txt")))); } }
Or without any imports: public class Test { public static void main(String[] args) throws Exception { System.out.println(new String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get("test.txt")))); } }
Any practical value of this? In a modern language this operation does not take more than 3 words. Java is an assembly language for other JVM languages like Scala, Clojure or JRuby and shouldn't be used except some corner cases.
This is very amateurish. Never ever write code which assumes a default encoding.
&lt;humor&gt; An assembly language you can actually read after three months. &lt;/humor&gt;
It's more about failing fast than throwing the 'correct' exception, which depends on your use case. 
I think it's mentioned in the text: &gt; if we want to pay attention to the character set (it’s the platform default) we need a little more code, but for quick and dirty file reading this should do the trick. I think Java should have UTF-8 as its default encoding, not the platform default. Same for Eclipse (there's even a bug on a bugtracker for that). 
Good find! That's real progress, a true hidden gem!
These one-liners are for the kinds of people who'd just copy-paste it. If you know about the whys and hows of UTF-8, you already know how to look at the Files JavaDoc, and probably have.
One reason could be the license. Quercus is GPL. jphp is Apache 2. 
I don't see a point in a further back and forth - as I said originally, my point was that if someone writes their apps the way you're suggesting, they're going to be in for a big shock when you find out that no one else writes their apps that way (particularly in the web world, which is where most of the jobs are right now). In fact they write it the opposite way, with the assumption that your objects do have getters and setters. I don't believe you can "solve" concurrency by any approach other than writing concurrent apps so that they have to deal with concurrency directly as little as possible (as I mentioned, most current approaches involve running multiple threads but keeping them as separate as possible from each other). We could debate, but - honestly, I imagine neither of us would really change the others mind.
I just use java.util.ArrayList Most people are used to using this, and although you don't care about order or direct access, it gives you these things with little overhead.
&gt; (Parrot)bird.talk() If you just say "bird.talk()", the compiler says "I can't see that this bird can talk - I'm not gonna let you do that. If you then say (I added extra brackets to correct it): ((Parrot)bird).talk() then you are saying to the compiler: "this bird... I promise it is a Parrot, please make it talk". The compiler will say "Ok, but I'll add a check that it's a Parrot before the bird tries to talk - you'll get a ClassCastException if you lied to me".
But still, "Europe" does exist and I think I read something that a European citizen can appeal to a European court. There are also no internal borders (except for the UK of course). For *truly* separate countries this would not be the case. They'd probably have borders and there wouldn't be a higher court to appeal to. And only repeating what I've heard, but supposedly in some cases there are even more differences between the states of the US than there are between states of Europe.
Wrong day, dude.
The consensus is that it's expensive, in particular generating the stack trace. Do you have evidence to support your viewpoint?
As I said, I see little point in a continued back and forth. I have no interest in getting into an internet ego/adjective war. People reading the thread (if anyone actually is at this point) should just know that your opinion is the exact opposite of how the vast and overwhelming majority of apps are written. Personally, I think with good reason, and couldn't disagree more with your attempts to call them "legacy", "leaking", etc. But I've been part of enough of these arguments to know that I could invest hours in writing responses, and at the end you wouldn't have changed my mind and I wouldn't have changed your mind. Good luck. 
Arrays.asList()
[Guava Multiset](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Multiset.html): "A multiset is also sometimes called a *bag*." See also [the "bag" entry in the Dictionary of Data Structures and Algorithms](http://xlinux.nist.gov/dads//HTML/bag.html).
&gt;People reading the thread (if anyone actually is at this point) should just know that your opinion is the exact opposite of how the vast and overwhelming majority of apps are written. That is not an accurate statement. Web apps written with frameworks require you to use getters/setters. Such applications require getters/setters. I'm sure anyone reading this is well aware of that and doesn't need to be told that. There is a wealth of Java out there that has nothing to do with web apps and does not use such frameworks (e.g., Android, and gazillion backend servers for non-web services), perhaps your field is JavaEE web apps but it is not the whole world of Java. &gt;Personally, I think with good reason Why won't you share those reasons then? What is the benefit of having getters/setter that 1) expose your internal state globally, 2) make everything mutable, and 3) make it impossible to make the object thread safe and performant? What is wrong with making your object immutable and offering an interface that lets external callers to tell your object to execute the task that it is responsible for (takeSomeAction()) rather than asking it for some information and taking the action yourself (getSomeVar())? I've already listed benefits of immutability (and quick googling will give you a mountain more), such as the ability to safely share between threads so that you can get concurrency without thread confinement and without bugs.
You are misinformed. There are true internal borders. What you refer to is the [Schengen Borders Code](http://europa.eu/legislation_summaries/justice_freedom_security/free_movement_of_persons_asylum_immigration/l14514_en.htm) which does not apply to Europe but only to countries that have ratified the treaty. And it does not allow you to freely move from one country to the other and hope for the same rights. Yes there is an European court, but its is quite limited in terms of subject it can handle and have in fact a limited power to apply its decision. E.g.: In my country, some political party went to this court to rule against some discrimination for people who did not speak a particular language. They won, the region just said "fuck you" to the EU court, and things were left as is. Also, regarding differences across countries, (traditions, languages and culture set apart), I can guarantee that differences are huge, way more that what I've been able to see in the US when I travelled often there for work.
It all comes down to how you want to access it.
Multiset is a complete waste unless you need counts for each object.
My preference: bool someMethod() { bool checkWhatever = false; if ( whatever ) { ... checkWhatever = true; } return checkWhatever; } The idea is that you can clearly see what the default path is, and what the "signal" is. Your method adds more "noise" and obfuscates what is happening if that truly is a return. It's much easier to see one exit point out of a method unless it's a trivial "short circuit"
They both do the same thing so either would be acceptable but in terms of form I think your professor is correct because when you have methods with many cases/else if's separating the unconditional code from the conditional makes the code easier to read. It's especially helpful to me when I'm utilizing recursion. That being said, the difference is mainly stylistic and outside of that class using your method shouldn't cause you any real qualms. 
How about none of the above? If whatever is true, return true and otherwise if whatever is false return false can be simplified to just return whatever. bool someMethod() { return whatever; } Functions do not always simplify so easily. I prefer your professor's standard as I agree with him that it is more readable. The else condition is redundant so I wouldn't include it.
I have to be honest I've never heard someone say that the else block is a waste. Honestly having the else block there adds to readability and also makes sure you don't run into situations where the code inside the if is run and the code after it is run as well (when not intended). This might happen if you weren't returning a value in your original if block. In any event keep doing what you're doing. 
You can disable the stack trace in the Throwable/Exception/etc. constructor. Also the Hotspot compiler omits the stack trace in some circumstances (Build in exception + execution hotspot with lots of throwing). 
If it gets you the extra marks, do it his way. I personally prefer his method in your given example.
Yes! Yes! And another Yes! That's my preferred way, too. One entry, one exit. Clear to see where the path goes. I know, in Java it is possible to have multiple returns, but I really don't like that style as it makes it more difficult to follow the program flow.
If you override the `fillInStackTrace` method to do nothing, this overhead is avoided, and you can use such exceptions for flow control without such a huge performance penalty. The Scala library has a trait that encapsulates this (I think it's called `NoStackTrace`), and has several flow-control exceptions that extend it (like `NonLocalReturn`, which the compiler uses to implement `return`ing from inside a lambda expression).
I don't have a problem with this approach if the declaration and the usage are kept tight like this. However, this increases the scope of `checkWhatever` and large scopes with mutation can cause a lot confusion as to where the mutation(s) actually happened that caused the state to be whatever it is at the `return`. As cyclomatic complexity increases, the number of alternate paths increases with it, leading to more state to keep track of at any given point in the function. I've been bitten by this more times than I can count. A quick return with variables having tight scope reduces the chance of error. Bailing out of a function early decreases the chance of side effects.
I never quite understood that reasoning. When you have a single return statement, you have to read the entire method to know what the method is going to return. But if you return immediately, you know right away what the method is going to return under certain conditions (without reading any further in the code).
It strongly depends what the code is supposed to do. If it's just a simple boolean check both ways are identical in my opinion. In one case the professor's way is the best (or even the only readable way): imagine you have multiple nested if...else statements (which is quite common) - so, instead of having to write multiple returns (and possibly missing a branch) it's best to have the final return.
Ignore the section on catching unchecked exceptions. Checked exceptions are basically an experiment that didn't work, a piece of legacy baggage that Oracle for some reason refuses to bury. Modern JVM languages generally treat all exceptions as unchecked. If you're writing straight Java, you should pretend that checked exceptions do not exist (as far as the compiler will let you), and any new exception classes you introduce should be unchecked. Tl;dr: Checked exceptions are bad.
Thing is, that the multiple return statements are limited to modern programming languages. (If i am not completely wrong, C++ is the first language that supports that style.) The other way comes from the ancient paradigm "Single entry, single exit" - there should be only one way to enter a program (or part of) and also only one way to exit the program (or part of). In older programming languages (Basic, Pascal, Delphi, C), there is no other way to achieve that functionality. I still find that style easier readable. For me, the other way is lazy code evaluation (not meant offensive) and I am always afraid to miss something (or the return altogether)
1. A Bag doesn't have ordering. 2. A Bag doesn't have uniqueness. 3. A Bag isn't a Map. 4. There is no Bag implementation in the Java Standard API. 5. OP asked for a capital-B "Bag". So i don't see what the problem is with me suggesting something that exactly matches the criteria in the OP? And maybe some people who didn't already know what a Bag is learned something interesting in the process?
Indeed… It's a matter of personal preference I guess. If you've worked a lot with languages that don't allow multiple return statements I can see how it might make you uncomfortable.
Your professor might have a point if it's a simple one-liner like that, but when it's multiple lines it's much more readable with the "else". It more explicitly calls out the "branch" rather than having to make you first search for a "return" in the "if" block, which depending on its presence, drastically changes the behavior of the method (there are 2 things to check to know if it's executed, instead of 1 in the case of using "else".
I think it's easier to adapt to the multiple returns (from single returns) than the other way round. One that is used to the single return strategy has little problem porting his logic (with the additional boolean) to other languages (regardless of the specifications), versus one that is used to having multiple returns (which are extremely convenient - I agree to that) having to adapt to that pattern with the extra boolean. But in general, it boils down to what one prefers and is used to. It's like so many things in programming nearly a philosophical problem. One group favors this way, one group favors that way and neither is superior...
Well, use maths to your advantage: We are using the decimal system, so every number can be expressed by some multiplication and a 10 to the power of x for the digit position. 1 digit (ones) = a * 10^0 2 digits = b * 10^1 + a * 10^0 3 digits = c * 10^2 + b * 10^1 + a*10^0 So, you can say that the maximum number with a certain number **n** of digits is 10^n - 1 If you use .nextInt(math.pow(10,numDigits)) you have a number from 0 to the maximum range of the digits entered (e.g. numDigits = 5 digits then the range is from 0 to 99999 - which is 10^5 - 1)
TIL what is a Bag. Thank you
Imagine you have to convert a string to an int. So you wrap every call with an if statement that does a regex validation before converting. No exceptions are thrown, your else clause handles faulty input. Assuming 99.9% of your strings are valid, you're wasting a ton of cycles checking a case that almost never happens. If you just NumberFormatException as your else clause, you'll get faster performance in the average case. In fact,.if you benchmark the percentage of failures you need for the if statement to be faster will probably be pretty high.
I agree, but you can't ignore libraries that throw checked exceptions. My rule of thumb is to never introduce a throws modifier to any method.
&gt; How about none of the above? If whatever is true, return true and otherwise if whatever is false return false can be simplified to just return whatever. My assumption was that the logic is a little more complicated and the pseudo code was simply to communicate the pathing issue. But yes, I agree with you if it is truly that simple. 
&gt; However, this increases the scope of checkWhatever and large scopes with mutation can cause a lot confusion as to where the mutation(s) actually happened that caused the state to be whatever it is at the return. As cyclomatic complexity increases, the number of alternate paths increases with it, leading to more state to keep track of at any given point in the function. I've been bitten by this more times than I can count. If you don't take a method in it's entirety, the problem is somebody could make a change farther down the line but an earlier return is making the newly added code non-reachable. &gt;A quick return Short circuits in lines 1-4 of the method are fine. Unfortunately methods are sometimes longer and multiple exists make a much harder to identify logic. The idea is that you're forced to scope if you use the above method with braces and indentation.
&gt; Thank you, it makes sense to me when explained that way. Glad I was able to help. You're on the right track asking good questions and thinking about these kinds of details. One of the quotes that has been used many times that resonates with me is: &gt; Write Code for your future self. 
This is really nitpicking and should not lead to a markdown. They're equivalent. I personally use the first form when I want to handle special cases (null values, etc) because it doesn't clutter the rest of the method. Two more things: you don't need the {} if it's one liners! So: if (whatever) return true; else return false; since "whatever" already *is* a boolean, return that: return whatever; // now that's short!
Yeah, ArrayList or LinkedList are the standard go-to. If you want indexing performance, use ArrayList, if you want insert performance, use LinkedList.
I always feel betrayed by *un*checked exceptions, as if either the language or the library let me down. There's a reason we have this fancy language which lets you know bad things can happen. I missed some letters. I dislike it when my programs blow up on me unexpectedly.
Your professor's code is good for recursive code, which usually takes the following form: bool recursiveFunction(argArray){ if (argArray.isEmpty()){ return false; } if(/*another base case is true*/){ return true; } //Do some recursive processing bool acculator = true; for(elem : argArray){ //do something with the sub-lists of the array accumulator ^= recursiveFunction(elem); } return accumulator; } So the if()'s at the beginning declare some sort of opt-out on the rest of the code.
I've seen so much code from offshore developers with the pattern above - that is, evaluating the boolean in an "if" to return a boolean literal. We get the true : false ternary a lot too: return booleanValue ? true : false; Ugh. EDIT: We should come up with names for these patterns...
Checked exceptions are a great idea in principle. They let you know, in advance, if and how an operation may fail. It just doesn't work so well in practice...
The "single entry, single exit" concept is a leftover from the early days of structured programming. Some of the very smart folks who worked to define structured programming have stated that it was never intended to be a hard rule even then, and some have argued it is a flawed idea entirely (for instance Martin Fowler in his classic Refactoring text). It is essentially just an iteration of the often misunderstood "goto considered harmful" theme. In languages where you must implement fundamental elements of structure yourself such design may have some value. In modern programming you will find short routines with multiple, clear exit points are much preferred to the added housekeeping and extraneous, manually implemented structure required to provide a single exit point. Returns that enhance readability are encouraged. 
So first of all, your code isn't valid (curly braces and `bool`). Here is the code I tested: public class Test { boolean whatever = true; boolean someMethod1(){ if(whatever){ return true; } return false; } boolean someMethod2(){ if(whatever){ return true; } else{ return false; } } } After compiling I then used `javap` to look at the generated bytecode: D:\&gt;javap -c Test.class Which results in: Compiled from "Test.java" public class Test { boolean whatever; public Test(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V 4: aload_0 5: iconst_1 6: putfield #2 // Field whatever:Z 9: return boolean someMethod1(); Code: 0: aload_0 1: getfield #2 // Field whatever:Z 4: ifeq 9 7: iconst_1 8: ireturn 9: iconst_0 10: ireturn boolean someMethod2(); Code: 0: aload_0 1: getfield #2 // Field whatever:Z 4: ifeq 9 7: iconst_1 8: ireturn 9: iconst_0 10: ireturn } You'll notice that `someMethod1` and `someMethod2` have the exact same sequence of bytecode. Lines 7 &amp; 8 are the `return true;` and lines 9 &amp; 10 are the `return false;` in both cases.
I love the idea. I have thought about doing something similar, but never had the time to figure out how to really do it great. We have many many production servers at work and I would love to have a tool like this to help track exceptions. Your screenshots are pretty and informative but they don't tell me anything useful. I would want to see how to integrate a tool like this into our application. Like you have the "affected user" part. I would want to configure that to different important business objects like server node, user, organization, etc. I would also like to see how we could integrate this into our current tools to track the status and health everything. Your UI is probably something we wouldn't care about unless it was all we could have access to.
Since your here and I don't want to have to make a whole new post; Can I ask is it ever appropriate to copy and paste repeat code like my professor insisted on, rather than inherit it from a class or interface; As I said I was marked down for doing the latter. But I've always been told that if your writing the same exact code in over and over, your probably doing something wrong.
Scala does this, FWIW. In Scala, a `return` inside a lambda is translated into a `throw` and `catch` by the compiler. The exception class overrides `fillInStackTrace`, avoiding the overhead. Good stuff. Scala also provides a trait (I think called `NoStackTrace`) that encapsulates this behavior, so you can conveniently make more flow-control exceptions yourself.
Conceptually, I can imagine a difference between if/else and if/&lt;fall-thru&gt; being one of value vs control. If/else should be used in situations similar to the ternary form (variable = condition ? trueValue : falseValue), where an expression can be evaluated in different ways, but where each path eventually results in the same type or similar side-effects. I imagine this use of the "if" statement to be more of a functional expression than a control structure. (This is more evident in Scala, where an if/else block actually evaluates to a typed expression) You may get my drift by imagining the following, which requires the use of if/else: final String msg; if (input &gt; 5) { msg = "input is greater than five"; } else { msg = "input is less than or equal to five"; } System.out.println(msg); To eliminate the else block would be illegal, as msg is marked final: final String msg; if (input &gt; 5) { msg = "input is greater than five"; } msg = "input is less than or equal to five"; // compile error System.out.println(msg); Removing the second assignment altogether is also illegal: final String msg; if (input &gt; 5) { msg = "input is greater than five"; } System.out.println(msg); // compile error When you are concerned about finite states and addressing all possible side-effects, the explicit "else" block will be preferable, if not mandatory. On the other hand, when dealing with multiple method return statements, the "if" block is used more as an imperative control statement... more like a conditional jump in assembly. In this case, I likely imagine a method returning a default value if no special conditions are met. In fact, I'll probably write the method by first adding the line which returns such a default value: public boolean validateInput(String input) { return true; } And then I will start adding the non-default conditions as needed: public boolean validateInput(String input) { if (input == null) { return false; } if (input.trim().length() == 0) { return false; } for (String invalidPattern : INVALID_PATTERNS) { if (input.matches(invalidPattern)) { return false; } } return true; } To write the above using explicit if/else and no short-circuit returns: public boolean validateInput(String input) { if (input == null || input.trim().length() == 0) { return false; } else { boolean stillValid = true; for (String invalidPattern : INVALID_PATTERNS) { if (input.matches(invalidPattern)) { stillValid = false; break; } else { continue; // Redundant, but I'm making a point here. } } return stillValid; } } Ask yourself this question: If I were maintaining this code 6 months from now, and had to satisfy a new requirement that added another condition for input validity, which style would I rather be faced with? 
Yes its a project that is due friday, Generating a number is once part. I have use the generated number and make the user guess. Generating the number is the only part i cant figure out, so if you could help with that code it would be great. Also you were not late to delete it, haha i was doing other work :D Thanks for answering. Let me know if you would like it help me, would really appreciate it
Thank you for replying, and like dryelbowsteam said, i need my generated number to be exact number of digits. I know how to generate max range of inputed number of digits they want, but i cant have less digits. thanks for replying
Wow, i am sorry but i cant understand much lol. Thanks for trying to help. I get that you are saying that i need to generate certain number first than add that with 10^n, n is the number of digits user wants.. Am i any close? 
would it be .nextInt(Math.pow(Math.pow(10,numDigits-1),(Math.pow(10,numDigits))-1; 
What is meant by "interface type"? Any class that implements an interface must override all methods of that interface.
I am trying to figure out how to do this, but i cant sorry.
yes but what if min is 1000 and max is 10000; i need 1 code to adjust by itself. that is what throws me off.
I never said the interval is [100,1000) that was you haha. ok .nextInt(1000-100)+100; 1000 is exclusive and 100 is inclusive is that right?
because the last endpoint is not inclusive, 999 is supposed to be a inclusive. So its should be (1000-100)-1) + 100;
I have to disagree with the example used in the first point. There are certainly cases in which you would handle an IO exception thrown when opening the file differently than one that is thrown when writing to it. I understand the point they're trying to make, I just disagree with the particular example.
.nextInt((1000-100)-1) +100;
should it be .nextInt((Math.pow(10,n) - Math.pow(10,n-1))-1) + Math.pow(10,n-1); ?
would that code not let me get 10; If n = 2; and random number = 10, i would add 10 again and make it 20; 
Let's get this straight: public class Bird { public void move() {//fly} } public class Penguin extends Bird { public void move() {//swim} //overrides superclass Bird public void swim() {} //unique } Alright, now that we have the class declarations, we can examine your statements: Bird bird = new Penguin(); bird.move(); //The Penguin class has overridden the default superclass (Bird) method, and hence the bird actually swims here! If you want the bird to fly, you will have to call super.move() in the move() method of the Penguin class. I'm not sure if bird.super.move() is legit (I don't think so).
[0,1000) by putting. nextInt(1000)
nextInt(Math.random((1000-100) + 1)+100)
.nextInt(1000-100)+100;
this is what i have written in my code int randomInt = (int) (random.nextInt((int) (Math.pow(10,n)-Math.pow(10,n-1)))+Math.pow(10,n-1)); there is casting because eclipse was giving error and told me I had to do that.
Why don't you just log 'x', 'y', and 'size' and see what they are?
The only time I would prefer copy/paste vs an abstract class is a situation where the code is extremely simple and I know the number of copies will never grow past two or three. I would be interested to hear the professor's reasoning. Edit: I just thought of another reason. Is he trying to limit the class to concepts he has already covered? This could be like making kids do division long-hand first. 
i ran the code, it seems to work.
People just need to remember that even though they are unchecked, doesn't mean they shouldn't be documented. It's nice to know when a method might go bang.
What do you mean exactly?
Don't forget to come back and let us know what grade we got!
Look up logging libraries - or just use print statements if you are lazy. This is also a great opportunity to learn to use the debugger. Check out some tutorials online and it will be a valuable skill as long as you program.
Thank you I appreciate it.
&gt; return booleanValue ? true : false; I've never seen the ? true : false; How does that work? What does the ? and : signify?
It's the ternary operator. if (A) { B } else { C } is equivalent to A ? B : C; 
I only ever store stuff and then read it back out with an enhanced for loop, so I opt for a LinkedList most of the time.
I have my preference, but I wouldn't ding you for using yours. The only strong feelings I have in this area is if you had a huge if or else block. Those I find hard to read.
if an interface specifies it then the inheriting class must at least implement the signature. 
It's very worthwhile if you have your own overloaded exceptions that get translated to HTTP codes. Using this is basically a long jump right to user output that allows your server to handle the rest of the execution internally and stops you from creating and over thinking error handling frameworks, which will eventually just come from exceptions most of the time anyway. 
Usually because people are lazy, or they throw too many different ones. Checked exceptions allow you to remind idiot API users about conditions that they may forget in their agilefall management pressured enterprise level data entry utility.
I don't see what the huge deal is about rethrowing a checked exception, or letting it bubble up (by declaration) if you want to deal with it in the middle layer of abstraction rather than the lowest layer.
Or be declared abstract
This is actually a pretty good list of guidelines for exception handling, certainly better than I usually expect to see on the topic. Obviously, there are situations where you might deviate a little from what is said here. But that's why you should treat such principles as guidelines, not set-in-stone rules. Judgement / common sense is essential.
As above, but more explicitly: public static int findFeature(String feature, String cmd){ int position = 0; if(cmd.indexOf("x ") &gt; -1){ int x = Project2.getValue(cmd, position + feature.length()); return x; } else if(cmd.indexOf("y") &gt; -1) { int y = Project2.getValue(cmd, position + feature.length()); return y; } else if(cmd.indexOf("size") &gt; -1) { int size = Project2.getValue(cmd, position + feature.length()); return size; } else { return -1; } } you're not hitting any of your 'if' statements before the 'else', right? So just find out what values 'feature' and 'cmd' have: System.out.println("feature: " + feature + ", cmd: " + cmd); Debugging code is problem solving - narrow the problem down to where it's occurring and get any data you need. A debugger can really help (you can pause the program in the middle and inspect variables) but it's not necessary here. As as thought, it might be because you have 'cmd.indexOf("x ")' instead of 'cmd.indexOf("x")'. Is the extra space intentional?
When you have a workable exception hierarchy (like your method is doing IO and you can declare that you will throw IOException (which can in fact be a FileNotFoundException or an IllegalAccessException or whatever exception you can come up with that derives from IOException)), checked exceptions can work to some extent. Also please note the distinction between programmers being inattentive at times (I know I have been now and then) and incompetent (I may be sometimes, too, depending on subject matter, but I'm at least competent enough to know when I am not).
 boolean someMethod() { // You *are* writing Java, right? return whatever; // just return the damn thing } If your whatever is a method, just return whatever(...). If it's a multiline boolean-and/or-short-circuited logic statement, just return it. In short, don't if (x) return true; else return false; or even return x ? true : false; Just return x;
I think it's considered bad style in intro classes because not having that else statement shows that the student is familiar with how the method will execute (the statement after the if will only be accessed if the conditional is not met). Personally I find the no else version easier to read. However, considering this is an advanced java class, I don't see how any of this would make a difference or even matter. TLDR your teacher cray 
In that particular example the else block is useless. But since 'whatever' is a boolean expression you can just do return whatever;
Or a debugger might come in handy as well.
That's...awesome. I'm definitely excited for my online Scala course next month.
My coworker didn't like early exits until I pointed out that it results in smaller code. 
I agree that checked exceptions work best when you can plan the error conditions of your code in advance...for all eternity. Which is usually not the case.
So if the main cost is creating it, would it be (very) beneficial to build and have available some exceptions as static fields? From his description and use case, the stacktrace is not important here at all.
That's not awesome. That's a minor convenience. Wait'll you see what's *really* awesome about Scala.
But even then the professor's way has multiple returns. If that was the professor's aim, surely he'd be advocating for writing: boolean someMethod() { return whatever; } 
Yes, but this is not about having multiple returns or not. This is about having Else or not. As I said, with nested if..else (or just if) statements, having a final return outside the nested conditionals one makes sure that something gets returned from the method in any case. By "having to write multiple returns" I meant the returns that would be necessary inside the "else" branches, not the ones in the "if" branches. The final return which your professor advocated is a sure-fire way to return something that makes sense from a method. Any IDE would complain if you had a code branch that wouldn't return anything, but if you are programming with just a text editor, you wouldn't get direct feedback and debugging could be quite painful later.
Here's a list of things that I've been looking to replace. You (the OP) already know about some of them, but I figure it's more useful for others if the list is as complete as I can make it. FluentIterable Stream {Listenable,Settable}Future CompletableFuture Sets.newConcurrentHashSet() ConcurrentHashMap.newKeySet() Joiner.on(separator).join(...) String.join(separator, ...) ...or new StringJoiner(separator).add(...) ...or stream.collect(Collectors.joining(separator)) com.google.common.base.{Predicate,Function,Supplier,Optional} java.util.function.{Predicate,Function,Supplier}, java.util.Optional (and Optional{Int,Long,Double}) Ordering.natural() Comparator.naturalOrder() ordering.reverse() comparator.reversed() Ordering.compound(comparator1, comparator2) comparator1.thenComparing(comparator2) Ordering.from(comparator).onResultOf(function) Comparator.comparing(function, comparator) Ordering.from(comparator).nulls{First,Last}() Comparator.nulls{First,Last}(comparator) ComparisonChain comparator.thenComparing(...) Some uses of BaseEncoding java.util.Base64 ----------------- Some places where there are now similar JDK solutions but I've stuck with Guava's are: Lists.transform(list, function) list.stream().map(function).collect(Collectors.toList()) - More verbose, less efficient. Maps.uniqueIndex(collection, function) collection.stream().collect(Collectors.toMap(Function.identity(), function)) - More verbose, not immutable. Multimaps.index(collection, function) collection.stream().collect(Collectors.groupingBy(function)) - More verbose, not immutable, not a Multimap. ----------------- Semi-related, I have one gripe about either Java 8 or Guava and immutable collections. I'm not sure which one I'm complaining about. Maybe it's neither -- just the combination of the two. ImmutableFoo.Builder does not play nice with stream.collect. Collectors require a way to combine two intermediate result containers, but Builders don't have builder.addAll(otherBuilder) or any other mechanism for exposing their elements. You can write a Collector that violates the spec and just throws on that operation, but that's a bad idea. See the answer to my question #3 in this discussion - http://mail.openjdk.java.net/pipermail/lambda-dev/2013-August/010845.html Workarounds include (and I'm sure there are others): ImmutableFoo.Builder&lt;Bar&gt; builder = ImmutableFoo.builder(); stream.forEach(builder::add); ImmutableFoo&lt;Bar&gt; built = builder.build(); ImmutableFoo&lt;Bar&gt; built = ImmutableFoo.copyOf(stream.iterator()); ImmutableFoo&lt;Bar&gt; built = ImmutableFoo.copyOf(stream.collect(Collectors.toList())); I've mostly been using the last one, for some reasoning that I don't care to explain right now because I'll probably change my mind tomorrow. Anyway, if ImmutableFoo.Builder did have the combiner method, then I could make well-behaved Collectors for all the ImmutableFoos. Usage would be like this: ImmutableFoo&lt;Bar&gt; built = stream.collect(GuavaCollectors.toImmutableList());
If OP needs n digits and not up to n digits, how about Math.round(Math.pow(10, numDigits) * Math.random())
As Math.random() delivers a number between 0 (inclusive) and 1 (exclusive) this approach would be identical to Java.util.Random.nextInt(Math.pow(10, numDigits)) The problem here is the offset that one needs to ensure that the range starts at 10^numDigits-1 Say, the user wants 4 digits, so the random range is from 1000 to 9999. Without using any added offset, the range that random (any random in that case) returns will always start at 0. Sure, it is possible to use **Math.random()**, but again, the range needs to be adjusted and the offset added after getting the random number. So, it would be something like: Math.round((Math.pow(10, numDigits) - Math.pow(10, (numDigits - 1))) * Math.random()) + Math.pow(10, (numDigits - 1)); I've added extra brackets here to show where the "-" would come in effect.
Josh Bloch would, to an extent, disagree with you: (Effective Java item 60) "Arguably, all erroneous method invocations boil down to an illegal argument or illegal state, but other exceptions are standardly used for certain kinds of illegal arguments and states. If a caller passes null in some parameter for which null values are prohibited, **convention dictates that NullPointerException be thrown rather than IllegalArgumentException**." (emphasis mine of course) Though I would certainly appreciate it if the type of error being thrown was configurable somehow.
My favorite application of this (and from a quick glance at the API Objects supports this) is of the form: MyObject myObj = Preconditions.checkNotNull(obj); I don't know why something as simple as returning the passed in value if it passes the conditional makes me happy, but it does.
Well, I am Andrew DInn :-)Thanks to Omair for this very clear reply. My talk did provide much the same answers, albeit in less detail, but then I covered quite a few other topics relating to OpenJDK and open source. Most of the CompSci department were indeed attending -- it was a good audience and we had some interesting questions. I hope loganekz was also able to be present.
In an actual system you would need to deal with the fact that the file isn't there e.g. displaying an error for the user, posting metrics, logging the error etc.
If your preconditions above is for the purpose of fast fail-over, IMHO you better wrap your API using `Optional&lt;T&gt;`. // Basic Guava: com.google.common.base.Optional&lt;T&gt; // or Java 8: java.util.Optional&lt;T&gt; usage Optional&lt;String&gt; missingPlane = Optional.of("MH370"); String myPlane = missingPlane.get(); // OK missingPlane = Optional.absent(); myPlane = missingPlane.get() // throw exception // java 8 (java.util.Optional&lt;T&gt;) support default value // which currently absent in Guava myPlane = missingPlane.orElse("HELIOS"); // you can even use custom exception or supplier myPlane = missingPlane.orElse(missingPlaneSupplier); myPlane = missingPlane.orElseThrow(exceptionSupplier);
Right, but do you need this in a quick throw-away app? All the feedback you need in these kinds of apps is the exception being printed on the console, and that happens automatically when you just let it propogate ;)
I haven't seen that before.. (Ah, introduced in 1.8) Interesting, of course our production servers are still running 1.6, so not sure when I'll get a chance to use that. :D edit: noticed this was also in Guava. my bad
I misread your initial comment as suggesting that avoiding the else was a way of avoiding multiple returns. That's what I get for commenting on reddit between busy patches at work...
I second the request for more information on integration. How can I use this?
What's so bad about checked exceptions? They are self documenting, they let you know what could go wrong without digging in the documentation. They provide compile-time safety. Like the strong vs weak type system debate, I think it's good to have this type of constraints enforced by the language as much as possible. I like maven too, I'm that kind of guy. Seriously though many people seem against it but I'd like to have a better reason than just "they are bad".
Just a wild stab in the dark here; but maybe because of conflicting PATH's between the different versions of jdk installed your "other program" is using the jdk7 version java.exe to run the jdk8 compiled source?
I thought something like that, so removed all references to java from there and then left my `PATH` System variable as C:\Program Files (x86)\AMD APP\bin\x86_64;C:\Program Files (x86)\AMD APP\bin\x86;C:\Program Files\Common Files\Microsoft Shared\Microsoft Online Services;C:\Program Files (x86)\Common Files\Microsoft Shared\Microsoft Online Services;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\Python27;C:\Program Files\MySQL\MySQL Server 5.5\bin;C:\Users\username\Documents\mysql\bin;I:\mysql\bin;C:\Program Files (x86)\MySQL\MySQL Server 5.1\bin;C:\cURL;C:\Program Files (x86)\GnuWin32\bin;C:\Program Files (x86)\QuickTime\QTSystem\;C:\Program Files (x86)\gs\gs9.07\bin;C:\Program Files (x86)\gs\gs9.07\lib;C:\Program Files\TortoiseSVN\bin;C:\Program Files (x86)\Common Files\HP\Digital Imaging\bin;C:\Program Files (x86)\HP\Digital Imaging\bin\;C:\Program Files (x86)\HP\Digital Imaging\bin\Qt\Qt 4.3.3;C:\Program Files (x86)\Heroku\bin;C:\Program Files (x86)\git\cmd;C:\Program Files\Java\jdk1.8.0\bin
Maybe your other program doesn't call the java.exe from PATH but from the full URI?
It sounds like he is a lazy teacher or doesn't really understand the subject matter. What you describe an ideal candidate for inheritance. You seem to be on the right track to learning programming despite your professor. 
And not if the methods in the interface are default.
Looks like the site is down
An interface specifies the minimum signature that the implementing class must implement. There is nothing stopping you from adding more methods to the implementing class that aren't specified in the interface. For example, public interface TestInterface { public void Foo(int arg1); public int Bar(int arg1, int arg2); } public class FooBar implements TestInterface{ public FooBar() { } //zero arg constructor @Override public void foo(int arg1){ //implement foo functionality for this class } @Override public int bar(int arg1, arg2){ //implement bar functionality specific for this class } public int calculateDistance(int x1, int y1, int x2, int y2){ //this method is not defined in the interface, but is still perfectly //valid } } These methods can be called like FooBar fb = new FooBar(); fb.foo(23); int barVal = fb.bar(45, 98); int dist = fb.calculateDistance(3, 6, 9, 0); 
Obviously you can't know about all exceptions that might be thrown, but you know about some of the likely ones. I'm currently using a C# library that used the "it's hard to always know" excuse to not even document the exceptions they explicitly throw.
I think he's talking crap
Be careful http://www.java7developer.com/blog/?p=256
You might want to try asking on their early access forum. https://www.java.net/forums/jdk/java-se-snapshots-project-feedback I'm curious too. I'm not sure what they planned on supporting for Linux. 
You can also use it to set variables in a more concise way, like so: int a = (b ? 1 : 2); If you have little one line things, I find the ternary operator more readable than a 4 line if statement. of course, if the then or else parts get complex, definitely use an if statement. 
Implementation inheritance is inherently error prone. See the Fragile Base Class problem. If you want to re-use code, prefer Composition over Inheritance.
I learned bitwise by writing an open source CLI program in C to play around with them. It might useful for people learning other languages too: https://www.youtube.com/watch?v=LHHyAsdPLZo https://github.com/jrenner/renbits
Another consensus is, that premature optimization is bad. I never saw a project where performance was so important, that exceptions had to be thrown off the table. I heard from those projects - in high frequency trading. But do we all write such applications?
If it does not work well in practice, you should educate your peers. Then it should work better in practice.
If checked exceptions are too general, someone made it general. Checked exceptions can be as specific as you like them to be. It is just a case of good and bad API / interface design.
Might want to give this a try: http://tess4j.sourceforge.net/
For me, the take away from the article is that 99% of the time, the conventional wisdom about Java exceptions is true. That is: they are a heavy-weight construct and should be exclusively used to report exceptional circumstances. However... there's also a 1% case where what you really want to do is abort a deeply nested series of calls for a non-Exceptional reason. Consider a recursive-descent parser that detects a parse error in a deeply nested function. You may be 20 or 30 levels deep in the call stack when you encounter a parse error that essentially renders the entire parse invalid. Somehow, that deeply nested function needs to tell the top level of the parser that the parse is invalid (which probably also includes information on the nature of the error). There are at least two ways to do this: * Write explicit control flow that attempts to return all the way back to the top-level of the parser. * Throw a non-exceptional Exception that 1) tears down the stack that was allocated during the parse and 2) sends a meaningful object (the Throwable) back to the top level of the parser. In cases like this, it's useful to think of Exceptions as control flow constructs. (But be sure to disable `fillInStackTrace` and give the Exception a name that indicates its unusual use case.)
I am not aware of any open source or free OCR libraries for Java. Although a quick search yielded http://roncemer.com/software-development/java-ocr/. There exist Java bindings for open source tools like tesseract, but I have never tried these bindings. Also, my experiences with free OCR libraries aren't very good. In the end we bought an Abbyy license. If you just need to recognize black text on a white background and the images are aligned properly you might have some success with tesseract. Be prepared to train a model specifically for your content. And don't expect 100% success.
Because a Tomcat that has suffered an OOM is no longer to be trusted, and restarting it the old fashioned way might not work because it's no longer listening on the shutdown port? Not that killing every java process was a good idea, but sometimes you have to kill -9 Tomcat to get it back. This XX:OnOutOfMemoryError hook is actually recommended by the Apache Solr people.
https://www.youtube.com/watch?v=uiJycy6dFSQ
For this kind of generic use case, I'd use a `List` implementation from the standard JDK collection library. But this 'generic unordered group of of objects' scenario doesn't usually happen all that often to me. 9 times out of 10, there's some aspect of the use case that makes the choice easier.
Glad you like the idea, hopefully I'll get the implementation right :-) Couple questions: 1. Which tools are you using to track the status and health everything? 2. What type of integration would you find easiest? The easiest way to integrate Stack Hunter with your Java web apps today is via a **servlet filter**. There's also a **Java client API** and a **REST service** behind the scenes if you need more control. Plug-ins for several **logging libraries** are also in the works. JMX beans are being kicked around, but not yet planned. If you're looking to add arbitrary data (business objects, organization, etc.) to each exception, the client API is the place to do it. Those values appear in the **Properties** section at the bottom of the Details screen. I really like your server node idea. The node's IP address is currently buried as the 16th row in the details screen (Server Address), but it might make sense to promote it to a leader board on the dashboard. I'm trying to keep Stack Hunter out of the monitoring and performance management areas and just focus on exceptions, but I'd love to hear your thoughts. Thanks for your feedback. 
&gt; -XX:OnOutOfMemoryError='pkill java;/opt/app/tomcat/start.sh' but pkill should be sending SIGTERMs here, not SIGKILLs. Still, very good to know, I'm going to try this on our big shared dev box at work! 
Pretty cool. Is there any alerting? Eg, something like PagerDuty?
Sure... you shouldn't perform this kind code transformation for the purpose of optimization, unless you can demonstrate a need. Having said that, there are also times that non-exceptional Exceptions can improve the readability of code by eliminating error cases. It's not a common case, but if you can improve the readability of the code through the use of Exceptions as non-local exits, then that's an independent justification of the technique.
&gt; It's very worthwhile if you have your own overloaded exceptions that get translated to HTTP codes. Good idea. How do you typically do this? Do you have an exception class for each HTTP code you want to return, or a generic HttpError and a status code field?
hmm...servlet filter. That won't work in our environment. I think we have a servlet somewhere in our stack, but we have a lot of non-web traffic coming from native clients that don't touch the servlets. A REST API would be great for us with something that hooked into logging. But, don't let our non-standard environment lead your features.
IMHO any good-behaving java application, Tomcat including, on encountering OOM should throw hands up and quit. If Tomcat hangs in some unresponsive state after OOM, this is Tomcat's bug that should be reported and fixed. In any case, find out your real PID and kill only yourself, not everybody around :)
Multiple returns are often considered bad form. Some people would state that you should have a single return statement per method, others say no more than two. (Ignoring the fact that you are using an if to return the boolean you are selecting on, as that's just for the example), the following code is what we would write at work: bool someMethod() { final bool result; if (whatever) { result = true; } else { result = false; } return result; } Single return statement at the end of the method means that there are no surprises when you come to trace through the method, because it's very easy to overlook the one return statement in the middle of other lines and think code is accessible when it's not. It also gives a single place to write log statements or similar if you so desire. Given that, NOT using else blocks makes some code very messy to write. Given that the whole point of an else block is to execute iff none of the if statements in the same sequence have come to be true, then there is no good argument that can be made against using them. The above would have to be done by making *result* non-final, assigning false to it initially then assigning true to it only if the conditional holds true. That's not too bad, but there are conditions where it would be a lot worse...
True, will fix the article
Imagine reading a method, accidentally skipping over the return statement in the middle of an if block that is itself in the middle of a switch statement etc etc, and so thinking that code will continue further than it actually will. As for having to read the method to know what it will return - IDEs will highlight the returned value easily enough, and then let you trivially trace through where it gets assigned to. 
ArrayList has better amortized insert performance than LinkedList. If you know the size of data, you can get super fast and consistent insert performance.
Nice list, +1! Speaking of collectors, see [this Guava issue](https://code.google.com/p/guava-libraries/issues/detail?id=1582), in which there's another workaround: `Collectors.collectingAndThen(Collectors.toList(), ImmutableList::copyOf)` which is quite nice actually.
Why does this abstraction matter to you? Lambdas in c# do the same thing and it hasn't been an issue for anyone. In fact, all it's done is make Apis and code significantly cleaner and less bug prone. If you want what you write to match what is compiled, write in assembly. Otherwise use the tools that are there to make your life easier. 
http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc If you don't use Spring you can implement your own Http exception base class and catch it at your http-translation point. I generally use a base class with 500, and then extend that with other errors, 400 etc.
An application that has hit an OOM can't really be relied on for any other behavior to work as intended or be correct
Cool post! But, you can do *much* better. Here: https://github.com/joshlong/sparklr-boot/blob/master/src/main/java/demo/Application.java That is: a complete working application and REST endpoint, secured using OAuth 2. If you run it, it will start an embedded Tomcat instance, Spring 4 and Spring Boot, etc. The only XML is the pom.xml, and even that is optional (use Gradle!). See the Javadocs for examples on requesting an access token and then transmitting it using `curl`. 
I'm curious of real-world use case of StringJoiner.
The problem with this is, that you need one more iteration (more runtime) to filter the values and you create another list with the filtered subset (more memory).
No, you don't understand how Java 8 streams work. This is only one iteration and only the one result list created.
I've had lousy luck with all the free/open OCR libraries out there. For paid libraries, the ABBYY stuff seems to be the best in my personal testing. They have a [cloud edition](http://ocrsdk.com) for low volume OCR that you can get into for a free and pay as you go, as well as a full on-premise SDK (way more than a few bucks) for higher volume work. 
I think this article is a little over selling the issue. Usually when you say something like "The Dark Side" you mean an additional cost that everyone must pay. The cost that he's referring to, more byte code complexity and call stack complexity, is limited entirely to when you are using the new features. Ok, so there's an additional cost when you use these new features, and as already pointed out there are ways to avoid / minimize them in many cases. Any time a complex new feature is added to a language you either learn to use it well or don't use it at all.
Anyone who can't parse those Scala and Java stack traces probably aren't experienced programmers. All you need to pay attention to is where the stack trace pertains to your code -- the first and last lines of the trace. If it's off in La-La Land, there's not much you can do to debug that.
Tesseract is amazingly accurate. I have used it numerous times. The downside is that it can be difficult to configure properly.
I think /r/javahelp is a better place for such questions. anyway here is a solution https://ideone.com/QjMvVT
None of these solutions have been nearly granular enough for me. Is anyone aware of a security framework I can use to secure ReSTful services down to the field level? EX: User A, as a member of group X, is allowed to open Endpoint 1 and get all fields. User B, as a member of group Y, is allowed to open Endpoint 1, but B can only see a subset of the fields???
Yes. "Dark side" doesn't mean "the stack trace is longer than I would like" in my mind.
This guy should do an article on the "Dark Side of Swing" so we can see how evil the longer and confusing stack traces are in swing as well.
What I like better about the spring config option though is that you have no code at all that is related to security. So your java code is just there to do its job and then later you can setup the security in an external file by an external group or whatever.
The best part of the survey was discovering Typeform. It was so pretty.
You need something that flies (a bird). You only seem to have a parrot available. A parrot is a bird, so you use that. 
5,000,000x faster, depending on the benchmark.
With the EU, can't you cherrypick a country for easier entry and then work almost anywhere?
Well what I meant is that there is a little bit more going on than just a bunch of completely individual countries that just happen to be in the same region. So there's this Schengen treaty, there's the single currency, there are European political parties and there are European elections of some sort. So by far this is not the same as a single country, but it's way more than e.g. China, Japan and Korea share.
&gt; Since your here and I don't want to have to make a whole new post; Can I ask is it ever appropriate to copy and paste repeat code like my professor insisted on, rather than inherit it from a class or interface; As I said I was marked down for doing the latter. But I've always been told that if your writing the same exact code in over and over, your probably doing something wrong. Don't use inheritance to share code. Inheritance is to signify a "is a" relationship. If you want to share code, it's generally better to create a static utility method (and associated unit tests) in a package private constructor class than share it. In this scenario you don't copy code and you don't create a situation where somebody could instantiate an instance that doesn't truly fullfill a class Foo's requirements. Good question
&gt; you don't need the {} if it's one liners! I really wish this wasn't the case in any language. All conditionals should be grouped with delimiters (braces for Java) It's been the source of so many bugs.
Java dev here. I love new language features. What makes you think we don't?
Absolutely love this. Can't wait to try it out.
What an useless article. If the resulting bytecode ever mattered, we'd be programming directly in assembly for ages. All that complaining is just a matter of tooling.
The exception handling is poorly executed. If something went wrong it quietly returns the original String value. Also, was 'effectiveDateString' checked earlier to ensure it is not null?
Why the hell do you care what he programs in? Grow up. He wants to program in Java, *boom*, he's gonna program in Java. Some fuckwit calling the language and its developers 'retrograde' isn't going to change his mind.
A quote from your post: &gt;People will much probably stop saying that java sucks when they see java implement: &gt;- Real properties as opposed to the ridiculous useless "getXXX()" / "setXXX()" crap. - Real Generics as opposed to the ridiculous useless "type erasure" crap. - Delegates and Events as opposed to the ridiculous useless "Listener" crap. - Real querying/functional constructs as opposed to the ridiculous useless "streams" crap. - Real Type Inference as opposed to the ridiculous useless limited one seen in java. - Language level support for Async as opposed to the ridiculous useless "Annotation" based crap. - Real Extension Methods as opposed to the ridiculous useless "defender methods" crap. - And pretty much any other feature currently present in modern languages such as C#. I'm not going to pretend to be an expert. I'm still working on my degree, but I have had a job in the field for a few years now and I've developed many applications. So, I have a question: Aren't the items from your list subject to opinion and individual philosophy? What makes them provably *better* than Java's implementation? 
What the hell does that have to do with what I said?
Right, because you can pre-allocate the array and then it's just array accesses, which are faster than LinkedList inserts. But otherwise, LinkedList is faster because the ArrayList has to keep resizing. I haven't read the source for it in a while, however I don't think it has to resize every insert. It creates several new spaces. I prefer ArrayList because of the O(1) index access and simpler implementation. I usually have little use for high nonamortized insert performance. LinkedList also uses O(n) extra space, because each node is a separate object that has to be created and stored on the heap.
You act like you're arguing a fact and yet you're only using subjective adjectives.
I think your professors "standard" is horrible. What you're doing is fine. There's another philosophy that you should only have 1 return statement in the method, that's fine as well. I have no problem with multiple return statements when it makes sense personally, but I can see the argument. Imo, his style is hard to read than yours. When you're in someone's class, you have to code however they want, but no one is going to care when you get into the real world (between those two styles). In my opinion, people are more likely to find your professors way of doing it ugly and uneccessary than they are your way.
But you haven't said *why* real generics or value types are important. What makes them better? Do you see *any* advantages to Java? If not then you probably don't know as much about the language as you think you do. &gt;It's not subject to opinion when you compare any code snippet in C# and then realize it takes 10x the amount of code to do the same in java. Can you show me some examples? I'll bet I can show you just as many examples where Java code is neater/shorter than C#.
You surround code that you're "testing" with a try-block, you react to any failures from within the try-block in the catch-block. 
Thanks, they both seem like good points. :) I still need to focus on my code quality and make sure I keep mines right.
Evidently they don't, or you wouldn't be holding that opinion.
&gt;Regarding generics and value types, see the [XobotOS](http://blog.xamarin.com/android-in-c-sharp/) benchmarks. It's 400% faster than crappy "dalvik" or whatever java-based stuff, where you can't even create a `List&lt;int&gt;` without the boxing / unboxing stuff. After reading a bit about this, I agree with you that the C# method is faster. Something that might be worth noting about the Java generics implementation: &gt;The benefit of this approach is that old code which doesn't understand generics doesn't have to care. It's still dealing with the same old ArrayList as it always has. This is more important in the java world because they wanted to support compiling code using Java 5 with generics, and having it run on old 1.4 or previous JVM's, which microsoft deliberately decided not to bother with. [Source](https://stackoverflow.com/questions/31693/what-are-the-differences-between-generics-in-c-sharp-and-java-and-templates-i) &gt;regarding Delegates, for example, see [this code snippet](http://stackoverflow.com/a/16364022/643085) where you pass a Delegate to third party code, so that third party might marshal parts of their own code to the UI thread, without taking any dependencies on any UI framework. &gt;now try to do the same in java, which does not have delegates and forces you to crappy useless "single method interface" stuff or "anonymous inner class" boilerplate. I do not know enough about this to form an opinion. So, I'll have to beg the question: Why is the anonymous inner class not sufficient or equal to C#'s delegates? Also, there are some [proposed solutions](https://stackoverflow.com/questions/44912/java-delegates) to mimicking C#'s delegates. I do not know enough about this to gauge their viability.
Simplest way to explain event driven model (in my opinion) is to look at it like a keyboard, your keyboard waits until you press a key, it checks which key you pressed and then tells the operating system i pressed this key. Even Driven Model is essentially you have a set of legal events (key presses, mouse movements, or business logic transitions) and you wait for one to happen and you fire a action when it happens. 
Just to point out to others, in case anyone takes your trolling seriously: since Java 7 it would be: List&lt;MyClass&gt; myList = new ArrayList&lt;&gt;(); 
yes, Typeform rocks! we're doing surveys like this every year and typeform does look the best of all the survey creation kits I've seen. 
I was expecting anything but that answer. &gt;Aren't the items from your list subject to opinion and individual philosophy? Abso-fucking-lutely not. These things have been shown time and time again to be productivity helpers, which is why anyone ever bothers to pick up C# when most people already know Java from university. You simply have far fewer options to solve any given design problem without those features.
Yeah, you are right. But I will stay positive on this topic. Yes, there are a lot developers, who are just bad and don't care. :(
The main problem with checked exceptions is that you can't extend the `throws` set for a method that overrides/implements another. So you end up wrapping it in another exception instead, and whoever was expecting to catch it now has to catch *every* exception and search through its cause chain. It's slow, a waste of memory, and completely unrelated to programmer competence.
&gt;After reading a bit about this, I agree with you that the C# method is faster. Something that might be worth noting about the Java generics implementation: &gt;&gt;The benefit of this approach is that old code which doesn't understand generics doesn't have to care. It's still dealing with the same old ArrayList as it always has. This is more important in the java world because they wanted to support compiling code using Java 5 with generics, and having it run on old 1.4 or previous JVM's, which microsoft deliberately decided not to bother with. *There has to be a better way to do this.* &gt;I do not know enough about this to form an opinion. So, I'll have to beg the question: Why is the anonymous inner class not sufficient or equal to C#'s delegates? Because an anonymous inner class has a HUUUUGE amount of code overhead, and so is inconvenient in most cases.
* "user" seems to be a reserved table name ifor Derby. http://openjpa.208410.n2.nabble.com/OpenJPA-has-issues-with-table-name-quot-user-quot-and-Apache-Derby-database-td7582754.html * Your SQL statements are wrong, it's missing spaces in some places. stmt.execute("create table user(" + "id int, " + "firstName varchar(20), " + "lastName varchar(20)" + "userName varchar(20))"); will evaluate to create table user(id int, firstName varchar(20), lastName varchar(20)userName varchar(20)) Notice the missing space right before "userName"
Can you elaborate this? Why should I add more types to the trows set than defined in the interface? If you have to throw another type than defined by the interface, the interface is either wrong or your implementation does something that is not asked by the interface. In short: you have a design problem and you suffer from the symptom.
As grunlog already said, this was changed in Java7.
i was missing a comma but i still get an error (links updated with new code).
Well, with Lambdas in Java 8, this code would be as short as yours. Also, who cares if it's a few lines longer? It's not really *double*, it's plus a few lines. The code sample happens to be so small that it looks twice as big. What makes swing a dinosaur? Why does it matter? As for returning to the "original" thread, the original thread will continue processing when my above code is forked. You could also use invokeAndWait() if you want.
IMO, it has _never_ been about maintaining a 1:1 ratio with the source code and the compiled code. The problem here is that the IDE\debugger is flawed in how it is rendering the stack trace. It's showing you details that do not exist at your level of abstraction. Hopefully, as Java 8 (and Scala matures) so can the debuggers. Anyways, this is am minor problem, and not really Java's problem at that.
 if (message.equals("take machete")|| message.equals(("get machete"))){ System.out.println("You get a machete."); int machete = 1; farmhouse(); here you are declaring a new local var called machete and setting its value to 1; also as a side note, a boolean would be more suitable i think, unless machete will have a value different to 0 or 1 :)
He threw an IllegalArgumentException - yeah that is an error you'd want thrown up, not swallowed by poor code. IllegalArgumentException means you're using the API incorrectly. Your solution is valid if the empty string's existence had no effect\no function, but in this case it is an invalid input as per specification of the function.
how do i make it so the variable isn't local, and changes the other variable for the whole class?
well... instead of DECLARING a new local variable and SETTING its value, just set the value of the top level machete variable.. If you need further explanation, without being rude you should read up a little bit on the scope and access of variables :)
Thanks man!
I see what you mean about it throwing the actual error now, I'm going to try and rewrite it, simplify it and make it more readable. Thanks for replying
Exactly what I was hinting at, giving the answer to a problem this simple teaches nothing imo.
On my phone, so no code, but that's a pretty straight forward of futures in Java.
How many nested calls are done during single iteration? What scares me is that we could get L1 cache misses within single cycle. This was main reason for introducing list comprehensions instead of maps, filters, etc in Python from what I remember. I 'll look into it tomorrow if find some spare time and post results.
&gt; remember you're talking to java devs. They'll go to lengths to explain how evolution is wrong and a language should really stay the same it was 20 years ago. Besides being a Troll what are you doing here?
Which is, of course, a rather new feature. Not everyone is familiar with it, not everyone is allowed to actually use it in a production environment yet, and in some ways it clouds the original intent of interfaces in the first place.
Of course, the real power is in writing something more like: TestInterface ti = Factory.createTestInterfaceClass("reddit.example.FooBar"); ti.foo(23); int barVal = ti.bar(45, 98); I'll leave 'dist' up to the reader, but if it was an important factor behind creating the interface in the first place it probably would have been specified there.
Throw out the parseexcepion, or wrap it in illegalargumentexception. If the function fails, no one knows unless you throw that exception.
I understand what they were thinking, but the truth is that I don't have the patience to use checked unless I'm being paid or I'm working on very critical code. The idea is that you shouldn't ever not catch a checked exception because they occur nondeterministically, no matter how you write your code they can still occur (file not found...) Then for unchecked exceptions, that's for things you can prevent and can avoid with proper coding. Is you shouldnt have to catch an illegal argument exception because proper code doesn't interface with APIs incorrectly. The reason people hate checked exceptions is because they're apart of the function signature and have ramifications on the caller, and the caller's caller, etc. Which makes refactoring a bitch.
ArrayList unless I have a good reason to use something else.
Try calling it with the jar as argument. Whay are you messing with applets in 2014?
I disagree. One of the benefits of keeping these structures as design patterns in Java rather than language features in C# is maintaining the syntactic simplicity of Java. The consequence of which is that you can have, as an example, complex refactoring tools. When you introduce language complexity, you're ability to automate tools that modify the code directly is reduced significantly. There's a reason, you never see the kind if refactoring tools you see in Eclipse in any other language development environment. The languages are too complex and even in some cases, non-deterministic like C++ (with pre-processor directives: How do you correctly rename a variable deterministicly when it only conditionally exists as a product of a pre-processor directive). 
&gt; It's not subject to opinion when you compare any code snippet in C# and then realize it takes 10x the amount of code to do the same in java. A pattern is recognizable as its structure. As such, it's parsed in the same way as the syntax of the language. You see an event structure in C# and you see a Listener in Java. Same thing. (One might take up more visual text than another but the pattern of the structures are both equally recognizable) The only question, is the amount of typing you do... and any IDE worth its salt helps you minimize the amount of typing you need to do to lay out a Listener. So, in C#, you've added language complexity for the sake of a feature that is otherwise easily accommodated. When you add language complexity, you reduce language analysis. The example of the above post, recognizes that the callstack associated with a Lambda expression is less readable than its explicit counterpart. 
You can throw and exception then print out the associated stacktrace.
I believe that was unintentional, but I changed it and I believe the same problem occurred. The reason I'm having trouble wrapping my head around this is because the 'Project2.getValue(cmd, postition+feature.length())' is a method not written by me. I think it would be easier for me to know what exactly feature is. Also, I a few of the issues in the code I initially added were I left out a closing bracket and I didn't initialize the variable 'position' to anything.
It doesn't sound like you're applying a lot of rationality to the problem you're having. There's not room in programming for "I believe"s - you should know exactly how your code is behaving. You should set up log lines or breakpoints in the part you suspect isn't behaving correctly. You should understand exactly how the inputs you're putting in are leading to the outputs, and as soon as you see something that doesn't match what you expect (like -1s) you should backtrack until the first time it was wrong. You can use the debugger to step into Project2's code, usually, and read it too. This is extremely common. You can also use it to open up the feature object and inspect its insides. if you're not, you should use the Eclipse IDE + Debugger - makes life so easy. See http://agile.csc.ncsu.edu/SEMaterials/tutorials/eclipse-debugger/ , say.
So how do I ask if "input is alpha instead of numeric, do this:"?
It's sugar with hardly any magic. nothing to see here.
dat javascript stacktrace tho
I'd like escape analysis in c#.
This is something the jit/compiler should be able to fix
I'm saying "I believe" because I submitted this post last night, continued working on it and correcting parts of the code and have since submitted it. So, I'm saying I believe at the time that I posted this that the space after the x was unintentional. I do remember changing it but the same problem occurred. I was trying to backtrack to see where the problems were, but I was getting confused because the Project2.getValue method was one that was written by the instructor. I ended up having to submit the assignment without it being fully completed. I appreciate your help though.
&gt; Should I implement a sort of destructor to clean up and set all the pointers to null? All objects have a finalize method. But don't override it. It's basically for use by the garbage collector. The modern garbage collector is good enough that you shouldn't try to out do it. But, there's always a chance of a PermGen error.
Ah, okay, sorry. I just see a lot of people who use the 'guessing' approach to debugging when they're fairly new, and I try to set them right early. I, uh, misread you though.
That's kinda irrelevant given the reqs.
http://docs.oracle.com/javase/7/docs/api/java/lang/NumberFormatException.html
The "dark side" of any java web framework: complex stacktraces. THE HORROR!
Actually the portion that I am taking care of is created by one vendor and it is but it is seperated in about 3 different applications. I have full source for everything. I can walk through the code debugging but sometimes that is really hard to do and if I had a stack trace for a particular process maybe I could just throw a break point where I needed one. I will read up on logstash. I just want to know the easiest way to dig into the portions I need to at the moment. Is there any good direction you could point me in?
&gt; Thread.dumpStack() Cool, ill check it out tonight/tomorrow and see what I can do with it. Do you have any direction to point me in for setting this up or just start altavista'ing it? 
Well that's the trick, isn't it? It's hard to offer generic advice in terms of where to begin diagnosing a large system which I've never seen. Perhaps you can start by searching out Strings, specifically those reflected in the error messages you're seeing. If you can track down just where those get spit out, that's where you'd want to insert a stack trace output for diagnostic purposes. It shouldn't be very much more complicated than creating a new Throwable() or new Exception() and then executing printStackTrace() on it. If you need to use a logging framework or some such instead of straightforward console output, then you can invoke 'getStackTrace()' to get an array of StackTraceElement objects that you can process in any way you want. Was that clear at all? 
You missed the article point's: it's not really about distance to the runtime, it's about leaky abstractions. No one wants to give up abstractions, but we don't want it to leak badly, such as unreadable stacktraces. It hampers adoption of higher-level languages, which I've seen as a criticism for Clojure, for example. Newcomers from Haskell and Scheme are greeted with a multipage stacktrace when they miss a quote, which forces them to abandon their abstractions and get to understand Java nuisances. Of course, Java developers are more or less used to this, as we mostly use frameworks that already do a load of things behind our backs. Maybe we've already internalized the need to scroll pages of stacktrace looking for the line snippet called from your package... 
Right, where is a better tool to deal with stacktraces? Debugging is not something to be handwaved.
Please do.
If you want to get acquainted with the dark side of swing, check out [Kurt Weill](https://www.youtube.com/results?search_query=kurt%20weill%20alabama%20song&amp;sm=1) (pronounced "Vile") some time.
I have had good results with Tesseract via JNA
&gt; Is there a way to set the memory to null so that everything pointing to an object now points to null? Use a WeakReference. This is unfortunately a little heavy weight: you have to plan for it and implement with the extra indirection. 
Every time you override `finalize`, Ellison murders a puppy. 
I understand that, and it's a valid concern. But the gain you get is well above and beyond this issue. Lambdas are meant to be small, if they are going to grow and need helpful stacks then you should use a function reference or change your abstraction. This is common practice and helps avoid strange stack errors. Edit: my initial reaction was mostly against fear mongering in the java community against an extremely useful (and late) addition to the language. Lots of java devs don't have experience in languages that use lambdas and are looking for excuses to not use them. This makes my job more difficult trying to convince the team to do "modern" stuff :)
If you're sure that you aren't maintaining any references to the game, then the most likely answer is that the garbage collector simply hasn't seen the need to reclaim the resources occupied by the game's objects. Try severely restricting the memory on your jvm and see if it behaves any differently. Also, try turning on the garbage collector's verbose output to see what its doing.
And buys another island.
The only qualifier that could be objectively measured is "concise". Every other qualifier is *subjective*. And personally, I find the java syntax to be concise as it is not bloated with unnecessary features which makes its code more readable, IMHO. If you think Java is verbose, you've never worked in environments that requires absolute control over memory and performance. C and C++ is the only way to go. The strength of Java is in its focus of performance given its garbage collection by being able to analyze the resulting byte code and optimizing its performance. You can only do this by having consistent and simple language syntax. 
Use weak or soft references for things you don't want in memory for very long. If you have groups of objects, keep them in a pool and recycle them.
My best advice is not to start aimlessly stepping through code until you have some idea of what or where the problem is. Some good diagnostic tools: * Grep for error message text if there are no line numbers. * Add `new Exception().printStackTrace()` to print stack traces in the code. * Use an IDE that can show you call and type hierarchies. * If you can't figure out what a method does just by looking at it, try looking at the methods that call it and see if that makes it's use clearer. * If there are tests, those can be really useful for figuring out what stuff is supposed to do.
Is it really a stack trace that you are looking for? If you use a profiler on the program you'll get the details of where (which methods) it spent its time, probably in a tree-like browseable structure.
This post reads like a joke. And the three question marks aren't helping. Save us from those "third-party" JSON parsers, Java EE 7!
Thanks a lot this was my major question, very helpful.
A colleague showed me one just today. When I get to work tomorrow I'll link it to you. 
Make sure to null your references when you're done with them or java won't know to clear those memory spaces.
It doesn’t *matter* if it’s mentioned in the text. People *will* copy &amp; paste your code *without* reading the text. So, thank you for perpetuating bad code!
Your last point is the main argument against the article. If you've ever used Spring or Swing or CXF you are already quite familiar with very long stack traces. The examples in the article are laughably short compared to the stack traces I have to deal with on Java 6, because we are using Spring together with Swing.
These are my two go-to articles on the topic, highly recommended reading for anyone who works with Java at reasonable scale: http://www.kdgregory.com/index.php?page=java.outOfMemory http://www.kdgregory.com/index.php?page=java.byteBuffer Of course slightly out of date with Java 8 announcements but you probably don't have that deployed anyway :-)
Take away the int, you are declaring machete twice
&gt; This is something the jit/compiler should be able to fix True, completely forgot jit does inlining too.
You can insert it into the code at appropriate locations. It will dump the stack to stdout. Note that this will synchronize everything on the stdout handle and probably slow down your application measurably (or even miserably). But since the application already uses a lot of frameworks, they probably have a logging framework in place. So you may want to use that.
Really ? I've used tesseract to solve some magazine puzzles (black on white text), it was 100% accurate with ZERO training. Litterally just downloaded the package and ran the client.
Errors and exceptions are two different things. It is perfectly reasonable to use exceptions to change program flow. That's pretty much why they exist. Don't miss out on a powerful feature of the language.
make sure all methods &amp; classes that can be declared protected or private, are. you may need to reorganize your code to do this. then, (if necessary), use native and get dirty with C/C++
That sounds promising indeed. I had some scanned documents and tesseract failed when there were many numbers and not much text, rendering it unusable for us at the time. But this was a few years ago and it's completely possible that things have changed for the better since then. In short, everyone needs to try for themselves.
I agree that the 3 questions marks look somewhat childish, but I think the content isn't half bad.
I really like all the community stuff the JRebel guys do besides working on their main product JRebel.
if (condition) { ....... } 'condition' must evaluate to a boolean value (true or false). A compound condition uses '&amp;&amp;', '||', '!' and several 'sub-conditions'. I.E.: if ((isBlue || isRed) &amp;&amp; isGreen) { ....... } 
The java process will not return memory to the OS once claimed but no longer in use, but it will re-use the memory it has already claimed after a GC run frees it up. If you keep allocating more memory, your java process will eventually grow to the maximum you have specified with the -Xmx option. Once that is used up, and GC can't clear anything up, and you still ask for more, your JVM will crash with an out of memory error. Don't look at the memory usage the operating system tells you. A modern operating system will try to use all the RAM it has, and will generally not free up memory unless it is needed for something else. Unused memory is a waste. I recommend you inspect your running JVM with jvisualvm, which comes free with the JDK. With that tool you can monitor pretty much anything your JVM does, including memory allocation and GC runs. It allows you to see exactly how much memory your program is using. 
Actually, doesn't G1 slowly return unused memory to the OS?
Is this the system reported memory usage, or are you actually looking at jconsole. Once the jvm has allocated memory it will hang on to it essentially indefinitely and look like in the OS memory usage that memory has been freed. Stsrt up jvisualvm and attach to it to see the real jvms usage vs just what the OS has allocated.
&gt; use native and get dirty with C/C++ Using JNI just for performance gives you the worst of both worlds. You get the raw performance and efficiency of a java program, combined with the simplicity and memory protection of C. A nullpointer exception (seg fault) in your JNI method will unceremoniously crash your JVM and any application running under it. Sometimes there is a need to speak directly to the hardware, but it's rarely for performance reasons. Classes in the java.util.concurrent package use JNI methods to access the atomic compare-and-exchange instruction for lock-less updates for example, because there is no way to do this from Java natively. 
The definition of a compound is in the first line of the assignment: &gt;Using if statements with **compound conditions (like &amp;&amp;)**, make a program that displays a single message depending on the age given. See the [Oracle docs for Conditional Operators](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html) Basically, compound operators join two or more conditions together. There are 2 types of compound operators: AND (in Java &amp;&amp;) and OR (in Java ||). + **AND &amp;&amp;** requires that **both boolean expressions** evaluate to **true** to result in **true**. + **OR ||** requires that **at least one boolean expression** evaluates to **true** to result in **true**. A little table of truth (A and B are boolean expressions): | Expressions | AND | OR | | A | B | A &amp;&amp; B | A || B | |-------|-------|--------|--------| | false | false | false | false | | false | true | false | true | | true | false | false | true | | true | true | true | true | So, for your example: + Age &lt; 16 - should be clear + Age 16 to 17 - means greater than or equal to 16 **and** less than or equal to 17 + Age 18 to 24 - means greater than or equal to 18 **and** less than or equal to 24 + Age 25 and over - should also be clear (just be careful as the statement means that you should use greater than or equal to 25) 
&gt; or don't use it at all. Try telling that to half the people on Reddit. At least in /r/programming .
Yes it does.
&gt; I recommend you inspect your running JVM with jvisualvm (...) Also try Java Mission Control included in the Java 8 JDK. It is quite impressive (and quite expensive to use in production; no problem for development though).
You are right of course, but in practice the OP will probably not see the java process get smaller again, as reported by the OS. 
Whenever there's a chance your code might spit out an error or something unexpected
Multiple returns are supported in the machine language of nearly every microcomputer CPU dating back to the 70s and can be done in most BASICs, C, pascal etc. They are usually discouraged in the old higher level languages because they make the code harder to maintain. This hasn't been the case in a modern language since the 80s. Learn new tricks. It doesn't hurt.
It was an intentional design decision. It was not technically a leak. However it was reversed with the release of JDK7. String.subString() now creates sub-array copy of the char buffer.
Ah, I didn't use the bindings sorry. I simply got the binary from here https://code.google.com/p/tesseract-ocr/ and scripted it with bash (it was a one shot thing), and then fed the output to a java program.
In order to find all newly added stuff in the JDK 1.8 API, I wrote a tool to extract all classes, fields and methods annotated with `since 1.8` in the official Javadoc. I put together all those infos in a single site. Class and method descriptions are not included but each class is linked to the official Javadoc. I would like to read about your most interesting findings. :)
It seems unlikely use of Weak/SoftReferences is a good idea. It sounds like this program either needs the data or it doesn’t, it is not a "nice if its there" situation like a cache. If you do need it then using References is dangerous as the data could disappear, if you don’t need it then cut it and allow it to be GC'ed don’t keep it hanging around via a Reference.
Just a picture to help visualize how simple the alliances between countries in EU are: https://twitter.com/EduLorenGarcia/status/448471723155783680/photo/1
&gt;If you do need it then Then you will hold a single real reference to it somewhere. I hope OP Googles the term. There's many tutorials.
[Press Ctrl+Backslash](http://spicemind.com/java-thread-dump-in-linux-or-windows/)
Oh. My opinion is "kinda irrelevant". Alright, thanks for the input, pal. Have a good one.
Hint: look at the documentation for Scanner.nextFloat(). Does it throw any exceptions? If so, can you catch them with a try block?
The possibility of breaking things when modifying an interface has been present since Java 1.0 - just add a method to the API and see what happens. However, this article does make a good point: default implementations have the ability to avoid some of this breakage, but they introduce some of their own issues - they're not a panacea. Still, they will definitely make our lives easier.
It might be a bad idea to replace abstract methods with default ones, but what harm could arise by migrating adapter methods into an interface?
The nicest example I can think of is from the java.util.concurrent package The class [java.util.concurrent.AtomicLong](http://fuseyism.com/classpath/doc/java/util/concurrent/atomic/AtomicLong-source.html) just wraps a call to [unsafe.compareAndSwapLong] (http://hg.openjdk.java.net/jdk6/jdk6/hotspot/file/tip/src/share/vm/prims/unsafe.cpp) which ultimately (on an intel x86-64 platform at least, wraps a single machine code instruction: cmpxchg This allows the AtomicLong to guarantee an atomic, thread-safe change without the use of locks. Is this a performance hack? Yes in a way, lock free concurrency is often dramatically faster than synchronized concurrency, but it's not a performance hack in the sense that native code runs faster or more efficiently than Java code. It is a wrapper around a wrapper around a wrapper around a single Intel/AMD instruction. (On other architectures it may be more than one instruction. I don't know of a supported architecture that doesn't support hardware compare &amp; swap at all). Another nice example is [JNA](https://en.wikipedia.org/wiki/Java_Native_Access), which uses JNI to access your hardware or OS (such as serial ports etc) directly, but wraps these calls for every supported architecture in a nice standard Java format. 
And they make Java interfaces into traits/mixins, which might open the door to some clever tricks. :)
It's the system, "system monitor" on Linux in my case
When I said "high memory usage" I really meant "higher" I'm talking hundreds of MB, so a drop in to ocean of my 8GB.
Do you know the difference between a good internet argument and a bad internet argument? Evidence. You're making claims that you aren't backing up with references to the evidence that you're pulling these opinions from. More over what's "real Generics" even mean? "real" is a subjective term? Do you mean faster? More fully featured? What? The performance I'm talking about comes from internal compilation analysis like [Escape Analysis](http://en.wikipedia.org/wiki/Escape_analysis) which analyses code and determines if an object can be allocated on the stack vs the heap if the object exists within a certain scope. This reduces memory fragmentation. It also increases performance because it reduces the need to apply heap management. Java's domain is also web service not mobile device. As for Java on Mobile devices, you're telling me that Google hasn't optimized Java for battery performance in Android? (Which is the only mobile domain for that's relevant for Java anymore) 
Why would you use a SimpleDateFormat across threads?
As a ZeroTurnaround employee, one aspect of my job is working within the community, and I can positively say, they're awesome at allowing us to work with the community and provide awesome content on RebelLabs and also give me the time to work with the www.virtualJUG.com - The fact that JRebel rocks and is an awesome product is a great bonus! ;o)
compounds are when you check more than one boolean w/ one if statement. It returns a boolean. &amp;&amp; means and; || means or For example: int i = 1; if ( i == 1 || i == 3) { //runs code } if ( i == 1 &amp;&amp; i == 3) { //does not run } 
Use LinkedList if you are doing lots of random insertions and removals and otherwise use ArrayList. The ordering constraint comes for free and you can ignore it if it is not important for your usage.
https://www.google.com/search?q=removing+red-eye+java
Software developers are not savants, some may be, but the vast majority are not. Living in the age of the internet, there's a wealth of resources we use to improve our productivity in day to day, from open source libraries we use in our products to avoid re-inventing the wheel, to Stack Overflow when we are hitting a snag on a problem we just can't quite find the solution to. If a company expects you to come up with a solution to everything on your own with no assistance from other developers (both in your company and the developer community at large) then I wouldn't want to work from them. In this situation, you said you found an answer to a problem you couldn't solve yourself online, if you were working for me this is exactly what I would expect. That doesn't mean you should copy-paste the code in, unless it's super-trivial, but you should look at the solution and then apply it to the problem at hand.
Your code actually almost works, there's just a problem with the output String. primeFactors = (number + ", "); just replaces the output string with the number and a comma continuously. Also you don't want to add the number itself to the output string but rather the factor you're dividing with. So it should be: primeFactors = primeFactors + (factor + ", "); or even better, use a StringBuilder to do this: public String hasMoreFactors() { StringBuilder factors = new StringBuilder("Prime Factors are: "); ...... if (number % factor == 0) { factors.append(factor).append(", "); } ..... And that should get your program to work.
As a professional developer for more years than I care to admit, and a manager for a bunch of those, I back this answer 100%. Developers do not know everything, but they should have a good idea of how to find everything.
I've been developing in Java (mostly) for 5 years. My biggest complaint is the obsession with verbs. That and the inability to properly emulate WPF's look and feel.
With your changes the program may work, but it does not meet the assignment that OP posted. From OPs post, one can derive that the **hasMoreFactors** method must return a boolean (not a string) and that the factors are to be returned by a method called **nextFactor** with a return type of int. The final factorial print out should be assembled in the main program, not in the FactorGenerator class. ---- **Edit:** To be not only the one criticizing, I'll show you some code: ##FactorGeneratorTest:## package primeFactorization; import javax.swing.JOptionPane; public class FactorGeneratorTest { public static void main(String[] args) { FactorGenerator factGen; String input; StringBuilder output; int num; do { input = JOptionPane.showInputDialog("Enter a number: "); if (input != null) { num = Integer.parseInt(input); factGen = new FactorGenerator(num); output = new StringBuilder(); output.append("Prime factorization of " + num + ": "); while (factGen.hasMoreFactors()) { output.append(factGen.nextFactor() + " "); } System.out.println(output.toString()); } } while (input != null); } } ---- ##FactorGenerator:## package primeFactorization; public class FactorGenerator { private int number; private int factor; public FactorGenerator(int number) { this.number = number; } public boolean hasMoreFactors() { factor = 2; do { if ((number % factor) == 0) { number = number / factor; return true; } else { factor++; } } while (factor &lt;= number); return false; } public int nextFactor() { return factor; } } This code is exactly according to the assignment requirements of the original post.
I agree. I've been a programmer willing to do whatever it takes to learn how to program, it's served me well.
If it'll never actually return anything, then just make it return void. Otherwise, put a return null; at the end
What were the math problems? In general, you would normally try to solve each problem, and then explain what you tried even if you couldn't find the solution. 
You should have submitted the correct answer and added a comment to indicate where you got the solution from.
This. I'd have been happy with that as someone who has given tests to candidates before.
You might be confusing **Javascript** with **Java**. Even though they bear a similar name, they are completely different languages for different purposes. Maybe better post this inquiry in /r/javascript 
As a soon-to-be-college-grad, I really appreciate all of these answers.
Followup question! Should the applicant strive to understand the solution too, so that they can apply the principles of the solution to similar problems, perhaps algorithmically, or technically, or on a different language / library? I can see pros and cons -- pro: Applicant has become a better programmer, and has spent time to better their profession / con: Applicant would in future do the same thing, using company time, rather than working on quickly applying a solution, and moving onward with the project -- What balance should one strike?
You should never inject code into your source that you do not understand. You should take some time to understand what it's doing, of course, and never blindly copy/paste a solution that may or may not be what you think it is. Know it well enough to explain it to someone in a code review, but if you want to research it beyond the scope of the job, do it outside the scope of the job, IMHO. You're not trying to impress the employer as much as be the best engineer you can be. That is always more important.
Unless you live in a town with one grocery store, don't focus on one application/interview. You are applying for an software development opportunity, and in reality nothing short of a 2 week long internship will weed out the great from bad. Its all pretty much arbitrary. I have worked closely with hundreds of developers, and seen two of the best I have ever worked with overlooked because of ridiculously arbitrary application requirements or interviews. The trick is that you need to spam that resume, eventually the odds fall in your favor and all the arbitrary bs happens to be things you are deeply familiar with or have experience with. Also since you are applying for java development start contributing to an open source project. Active ones are always looking for help and you will get more out of the experience than you give when you are young and starting out. It also impresses people in interviews if you have significant contributions to a well known project. Good luck and remember getting shot down is not only about you, its largely about how arbitrary much of the selection process is. Good luck.
private int number wants to return an int, but you have no return statement. If you want it to return something, put a return statement, otherwise replace 'int' with 'void'
ok, that would follow the same comments i said here, once the JVM acquired memory from the OS for the high memory usage period, it wont let go of it, it'll stay at the same level according to the OS, you'll need to drill into the actual jvm to see what usage is actually being used by your app
Haha. I knew my lacking knowledge would be apparent, but damn! haha! Thank you! I'll just move along, then. :)
Working with Java for some 11 years. The usual criticism levied against Java is that it's so verbose. Which is entirely true. Also there are some poor engineering choices that hinder the language, like type erasure, everything-is-a-class (though this is at last getting alleviated a bit with lambdas), null, mutable-by-default, etc. It hasn't stopped the java community from coming up with a lot of cool stuff though.
Honestly, I think you did the right thing. Hopefully you at least put down what you had for the second? Or explained your thought process somewhat? 
It might have been a trap. Back when I was hiring developers, I'd ask how to find the number of days between two dates. At the time, none of the answers on the first page of Google results was correct. We had another Google trap question where we would ask about programming patterns. We came up with a bogus but plausible-sounding pattern name that happened to give a lot of Google search results for sewing patterns. We just wanted the candidate to admit their ignorance rather than making up some bullshit. We were testing for honesty with that one.
I've heard that Java is so verbose because it's meant to be used for large systems developed by many people, where being as explicit as possible leads to less complications.
 private int number(int num) throws MyException{ throw throwMethod(); } private MyException throwMethod() throws MyException{ throw new MethodFailureException(""); } 
When I'm interviewing somebody, if their answer to a question about sorting a list of values involves `Collections.sort()`, they immediately move to the top of my list. I'd feel largely the same way about someone answering "Google it." I'm usually looking to hire software engineers, not a bunch of wheel-reinventors.
There are a bunch: 1. Java is too slow 2. Java is a memory hog 3. Java is too verbose 4. It's too hard to write Java 5. Java isn't fun to use 6. All the problems are already solved in Java, there's nothing for me there. 7. I don't understand Java, but I understand a REPL 8. Java is dying 9. Java is dead Java is just the current fashionable language to hate. VB, Perl, Cobol, C++, and others have all had their turns. Soon enough we'll be arguing about which features of Python suck more. 
A lot of the things that Java makes you repeat don't really help anyone. I'll give an example of a decently complicated line (though probably not something used EXACTLY, a good example of what I'm talking about). HashMap&lt;Node&lt;EightPuzzle&gt;, Integer&gt; hashMap = new HashMap&lt;Node&lt;EightPuzzle&gt;, Integer&gt;(). It's repeating the same thing. Why do you need to do that? There's an argument to be made for having an option for it to be repeated, but there's no reason why you shouldn't be able to only say it once. It encourages copy-pasting, which is bad. Some of the verbosity has been fixed in Java 8 (e.g. lambda expressions), but if you read through the Java 8 improvements and have a shot for everything that should've been there already, you'll probably be dead... Java isn't verbose where it should be, either, if you ask me - Java isn't explicit with pointers or references (and mystifies the whole process), and makes something easier to learn when, in a complex program, it's better to have it explicit. A lot of Java-only programmers get very confused with pointers and references (and sometimes (wrongly) consider them the same thing) due to this. Being clear is cool, being verbose when you don't need to be isn't. An excellent article on Java's obsession with "nouns", as the article suggests, and why it makes Java so verbose here - http://steve-yegge.blogspot.co.uk/2006/03/execution-in-kingdom-of-nouns.html
My biggest complaint working with java and web development is constantly having to restart the server every time you change code. The solutions people have that are supposed to mean you don't have to do that don't seem to be very reliable. Other than that I think it's a great language. My biggest fear is they'll keep adding in features like lambdas which I don't find useful or easy to read, and it will make the language pointlessly complication. 
Exactly, you should say you couldn't figure it out but found the answer online in one minute. Much of a programmer's job is finding out if there is already a working solution to a problem you face
I hope you're aware that your example hasn't been true of java since some time now, it's just this: HashMap&lt;Node&lt;EightPuzzle&gt;, Integer&gt; hashMap = new HashMap&lt;&gt;();
Cannot stress this enough. c6h12o6free and snuxoll are completely right. To put it in perspective- its now impossible to know everything in certain domains of knowledge, because the domain is too large for a single individual to memorize. 
In order to satisfy the method signature and the compiler, a method declared as 'int' MUST include a return statement returning an int value. There really isn't any getting around that. It will not actually return, because it will wind up throwing an exception, and whatever value you return will never be assigned/used by the caller.
I recently submitted a code snippet involving this for an interview. I asked during a follow-up phone interview if they were expecting me to write out quicksort and the guy laughed and said "no you did the right thing"
It has been said that while running time is around that of C/C++, it is not even close when you consider the startup time.
Start at the top of the stack trace to see where the nullpointerexception was raised. In this case, it looks like this is the top: at myHRPKG.myRosterGUI$6.actionPerformed(myRosterGUI.java:165) This tells you almost everything you need to know. In your myRosterGUI.java file, at line 165, something null was references. Now all you have to do is figure out what's going on at that line. 
table.setValueAt(Patient[0].getName(), 1, 0); This is the line. I have no idea what's wrong with it though.
You're referencing two objects in this line. At least one of them is null.
How would I fix it without ruining the code? If I try to change something from that line, it would give me an error saying it's not applicable for the arguments.
Yeah. Lots of people do stupid crap to try to prove they are clever. Those developers are never any good. The good ones write clean, simple, obvious code and don't rewrite the JDK.
Why would you throw an exception when you can just print it directly? StackTraceElement[] elements = new Throwable().getStackTrace(); for (int i = 0; i &lt; elements.length; i++) System.out.println(elements[i]); 
If the Patient array is non-null, then table.setValueAt((Patient[0] == null ? "" : Patient[0].getName()), 1, 0); 
You need to figure out what's null first. If you're comfortable with a debugger, set a breakpoint on that line to see what is being referenced at that line. If not, add (before line 165) System.out.println("table = " + table); System.out.println("Patient = " + Patient); System.out.println("Patient[0] = " + Patient[0]); One of these is going to be null. Once you know what's null, you'll need to figure out why it's not initialized and either initialize or not reference it (depending on what you're trying to do).
So much this. I feel like these interview 'tests' are pretty shitty; especially when they are presenting obscure edge cases or exotic 'gotchas' of a particular language. A much better option would be to pick something from the applicant's portfolio, and ask the applicant to explain how/why they used that method. Let the applicant walk the person through a process of thought. This would help the interviewer understand the applicant at a much deeper level than some CORRECT/INCORRECT monotonous pop quiz. 
I got it to work. It was supposed to be a button but I didn't know I was using a toggle.