I think it varies considerably based on where you're located. One thing you may consider is the rates you would charge for those levels of expertise in php, ruby, python, etc. And then perhaps take them and bump them up a tad, to reflect the rates for a Java developer.
Here in Omaha, NE, depending on the project of course, a nominal fee would be $50 - $75 / hr for an intermediate programmer.
I wish I lived in the US. I'm not free lance but salaried in Canada and it works out to 33 / hr, intermediate EE experience (6 yrs). 
That's about right in my experience. Keep in mind that freelance developers charge more because of the following factors: * They have to pay their own healthcare (not-applicable in some cases), life insurance, disability, vacation, facilities, security, and equipment costs. * They have to find their own work and do self-advertising so they have to pad for the lean times as well. Combine with the fact that a typical company charges 3-3.5x what they pay you for your services. (At least they do this in U.S. contracting companies.) I also know, for a fact... I've seen the accounting data, that my company (a fairly expensive consulting firm specializing in Java) charges around 6-6.5x what they pay me. And I feel like I get paid pretty well for almost 6 years of experience in the field. (And a Master's Degree as well.) I wish I could make the full rate working on my own but I could never: * Find the work. * Provide the needed assurances that the work would, well, work. * Provide the needed level of support, especially after-hours. * Provide the long term stability required of many clients. Essentially you give up a lot of pay for consistency, support, benefits, and equipment.
My equipment is nicer at home :-) Just built the new rig. I'm feeling you on what you're saying though. I wouldn't completely mind the inconsistencies of being out of work for a period of time so much as I wouldn't know where to start finding work. I've tried in the past to look into part-time contracting but never found a good place that posts people looking for work for part time contractors.
&gt;My equipment is nicer at home. I totally feel you on that. I have a decent Lenovo T510 for work but it can't even hold a candle to my HP Envy 17. But still, that was $1600 out of my own pocket and the Lenovo was free. Very few public sector firms (that I've seen) spend decent money on developer hardware. I'm not asking for Alienware or anything (ok: yes I am) but something that the president likes because it plays solitaire and can do Excel won't cut it for enterprise multi-service Java, multiple VMs, or a bunch of the other stuff they ask us to do. This is part of why my company charges so much overhead. If I need a server I can get it, software licenses: yes, equipment: go for it. I can have almost anything I need to get my job done (within reason) in a very short time frame.
It's probably slightly different in Canada as well because of public health care.
An intermediate Java web developer in Ohio working 1099 through a placement firm will have plenty of work at $55-60/hr. A high end Java lead would be lucky to make more than $95/hr as a 1099 contractor. I never see people doing true 'freelance' Java work; most of the demand is with large enterprise customers, but Android development might be an exception. 
Just curious, but what makes you a "high end" Java lead? Just experience, at that point?
curious on this question as well. I'm an up and coming java developer. about to deliver my first project this week =)
I got a w510 with 8 gigs of ram from work recently. It's great mutually as I have a very decent laptop and I can take the work home with me which is great in the company's eyes :) Software licences, kind of stingy. I'd love to get Aqua data studio or some other very well rounded generic database query tool, but at 400 per seat I really have to justify why i won't just install pgadmin or the equivalent for other DB vendors for example.
Experience and reputation. Once you've led one or two multi-million dollar projects to successful completion you're in a fairly select candidate pool. I live in a fairly large city, but there are not that many companies who have projects on that scale; maybe a couple dozen. And usually if you're involved in the Java User Groups or similar you get to know at least a couple people at all the big employers. So when someone says 'I led the huge project ABC for local insurance company' and describes grandiose contributions and results it's pretty easy to find out if the project was really a disaster or if it was led by someone else or if it really was a success. 
The guys I know who are billing around there generally work on a team, and are expected to teach/coach the other members of the team in addition to contributing their fair share to the project.
Well - I tried answering, but I never redeploy in production and most of the questions assumed that I did. The dev team creates DB scripts, config updates, etc. that are used during an install - so we take the app servers down for an hour and do everything at the same time. 
I vote properties, or xml if any. never use ini in java in my project, a nice short name? you can name any if you want isn't it?
Yea, I didn't even bother finishing the survey... we have defined down time for batch jobs on our mainframe and we stop the servers every night during that time (automated). When we need to deploy something, we do it then. We have 7 production WebSphere servers, insurance industry (only agents can access our applications which is why we can have downtime every night) Also, ekabanov you wouldn't happen to work for ZeroTurnaround do you?
Just answering to the original question from a different perspective. I'm a J2EE consultant (lead/architect 11 years experience in large scale J2EE development) and a android app developer too (just getting familiar, developing games for fun) I charge about $25 per hour in here (which is Colombo, Sri Lanka). Also, I also run a small company where we have all types of developers from lead to novice, who are available to work as consultants/freelance. Rates for a Software engineer with about 1 year experience is $10 while it is $15 for someone who has 2 years, $20 for a senior engineer with about 4 years industry experience. However, these do not reflect the general market rates in here, which would be much higher than these if you are talking to a large firm with an army of consultants. In which case, multiply above rates by 2. I know these figures may seem ridiculously low when you compare with rates in U.S and you might think that the quality will suffer as a result, however that's not the case, not necessarily. In our case at least it's the low cost of living, which is about 0.2 of that of US. Therefore professionals are happy with those rates which allow them to lead a good life in here. I have to be honest here, One problem with getting freelancers from these parts is communication. Not all are good in it in the sense that you need some one to understand the customer need/vision from a high level perspective. Other problem is to find a really good developer from the crowd. This is why outsourcing in general is having some issues as I see it. 
Same here, survey wasn't really constructed to accept the wide variety of models I'm sure exist out there.
We're in the middle of our first Java EE project and I've been responsible for most of the deployment decisions. It's nice to see I'm not too far off of what some other people are doing.
During deployment, my app is down for about 5 minutes. You only accept whole numbers in response to question 8 (or, at least, you don't accept ".1" or "0.1"). Either 0 or 1 would be pretty misleading, so I gave up.
This field is not meant to mean downtime. That said, I've updated it to accept floating points.
There's an option for that, just say you're restarting with downtime.
Sorry about that, I tried my best. This is a result of a lot of conversations.
Sorry. I am the founder of ZeroTurnaround, but I'm also doing a PhD thesis on this topic.
No worries, just to give a quick example of how my situation didn't fit the mold: We don't redeploy, but it's actually an issue with the app and not the container. Also we do take prod down for deploys, but the reasons and duration extend beyond the ear deploys to DB and business rules updates as well as file system modifications. My app is a closed production system where downtime is built in as we operate during US business hours.
Hmm, I don't feel that this doesn't fit the model, only the first couple of questions were about redeploys. And it's perfectly OK to answer we don't redeploy and choose the alternatives.
Yes, this. I was a little worried by the options presented that we were somehow way behind the curve -- was reassuring to see how many of the rest of you use similar techniques/processes/software.
Fuck everything about that form editor. Stay away from it if you value your sanity, OP!
Congrats on your success, we use WebSphere 6, and the future company direction is .NET (makes me sad) so we have not invested in your products. That being said, I do have my own license for JRebel ;)
Unfortunately not well-formed.
Consider using the `javax.activation` package for this.
From what I remember, your syntax is implying that you have a data structure (object) called "Cards". If you want to initialize an array of "Cards", make sure you define the object properly. Otherwise, your IDE's going to find a polite way of saying "WTF is Card"?
Have you declared the cards array? Card[] cards; cards = new Card[52]; should work
Look at variable initialization in your book. What always comes before the variable name when you initialize?
The type!!! Now, back to CUDA-C.
This [link](http://www.dreamincode.net/forums/topic/110380-deck-of-cards-using-various-methods/) sounds like what you are trying to do. grandson39 seems to have answered the question though.
We need to stop giving the homework members the answer straight away if its this easy. We should give hints if its an obscure 'gotcha', but they should be looking this stuff up on their own.
... a `tailcall` JVM bytecode prefix.
Okay, that answers that. Followup stupid question: why does the "new" command not do that? I understand that it doesn't, but it seems like all of the required information is in the "cards = new Card[52]".
At this point in it's life, I believe it's time to clean out all the legacy code and make a clean start. Instead of Java 8, it should be Java 2.0 (the read Java 2, not that 1.2 BS that we'll call Java 2). Using the Date object as an example, code was deprecated as of Java 1.1. Why is there still backward support for code deprecated the day after inception? Java 1.6 had quite a bit performance improvements of 1.5. Now there is Java 1.7. For those stuck with legacy applications, the code is adequate for your needs. Java 2.0 would be a clean start for new applications without all the bloat.
... first class function support.
Java is ugly. Java 7 is only going to make it uglier, and for 8 it should just be declared obsolete. 
Not gonna happen. You have Runnables and stuff…
That's not even close. I want anonymous functions taking other functions as parameters and allowing functional return types. 
I don't like a lot of the syntax changes coming in 7, but Java is far from obsolete.
TIL Java 7 is ready for use :P
&gt; Why is there still backward support for code deprecated the day after inception? For the same reason you can't create a file named "aux" in Windows. &gt; Java 2.0 would be a clean start for new applications without all the bloat. Which bloat? What would you remove? Would it be worth the trouble?
I wish I could give you more than one upvote. I can't understand why so many people thing it would be worth dropping the Date class. Proper generics support on the other hand, without type erasure might be something.. 
What the hell are you doing on /r/java, then?
OS X 10.6 was essentially 10.5, but with all the backwards compatibility ripped out. Apple thought it was worthwhile. Anytime you have to add extra code to make something backwards compatible, it adds bloat. I brought up the Date object, because it was mentioned in the article and has constructors and methods that have been deprecated before Java really took off. The Date class itself isn't deprecated. Although it would be nice to have a better Date object, java.util.Date is still my preferred class for storing date information. Runtime generics support would be awesome. Too bad "[[t]ype erasure enables Java applications that use generics to maintain binary compatibility with Java libraries and applications that were created before generics.](http://download.oracle.com/javase/tutorial/java/generics/erasure.html)" If we took out backwards compatibility, proper generics support could be a reality!
 final Callable&lt;Boolean&gt; myParam = new Callable&lt;Boolean&gt;() { // argument function: public Boolean get() { return new Boolean(true); } }; Callable&lt;Runnable&gt; c = new Callable&lt;Runnable&gt; (myParam) { public void call() { // call the argument function: Boolean result = myParam.call(); // returns function (could also be a Callable): return new Runnable() { public void run() { /* do something... */ } } }; didn't check if this compiles, but I hope you see that this can be done - if a little verbose…
Cool, we get rid of the nice advantage of Java, automatic garbage collection...
I don't think this tactic is going to be useful in many situations, but this kind of effect is very important in applications that need to be near-deterministic. Sure one could just say "use c++" but java has advantages that make getting the application to market quicker and cheaper.
There are plans for syntax sugar for Runnables, I believe.
www.stackoverflow.com
Your formatting is broken, indent each line with four spaces. Deck.cards is a static reference in non-static method swapCards(int, int), but that doesn't seem to be what's causing the second error. You should provide all code involved, not the part you think is the problem. I suggest you use enums instead of ints for the ranks and suits. And i think you'll find that a class Deck is redundant when the class Card can define everything a Card is, and you can have a List&lt;Card&gt;. Use Collections.shuffle(List) to shuffle. If for convenience you'd really like your own class to represent a bunch of cards, may i suggest a [Shoe](http://en.wikipedia.org/wiki/Shoe_%28cards%29), containing a List&lt;Card&gt; and whatever convenience methods you'd like, to differentiate it from the concept "deck", meaning a collection of 52 cards, one of each kind. Edit: Something like this: import java.util.ArrayList; import java.util.List; public class Card { private Suite suite; private Rank rank; private Card(Suite suite, Rank rank) { this.suite = suite; this.rank = rank; } public Suite getSuite() { return suite; } public Rank getRank() { return rank; } public enum Suite { CLUBS, DIAMONDS, HEARTS, SPADES } public enum Rank { ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING } public static List&lt;Card&gt; createStandardUnshuffledDeck() { List&lt;Card&gt; deck = new ArrayList&lt;Card&gt;(Suite.values().length * Rank.values().length); for (Suite suite : Suite.values()) { for (Rank rank : Rank.values()) { deck.add(new Card(suite, rank)); } } return deck; } } 
Firstly, please give us your code in a more easily digestible format... A pastebin of some sort would probably work better than pasting it into Reddit. Now as for the main problem... I'm not sure where to begin, but it's pretty clear you don't understand Java's object-oriented model. You might want to read [the Java documentation on classes and objects](http://download.oracle.com/javase/tutorial/java/javaOO/) before proceeding further.
In the swapCards method you are trying to statically access Deck.cards. I would guess that this causes your error.
If your card class is non static, you need to create a reference to card in main before you can use it. Something like: Card card = new Card(1,8); 
The only thing I want is tail call support. Sun's/Oracle's lack of action in front of a working implementation and dozens of languages needing it is just a shame. Reified generics are stupid at this point. There is no working implementation of it anywhere and the theoretical background isn't stable enough yet. Just look how .NETs generics killed third-party languages after MS baked the C# type system into the CLR.
It would help to see more of the code (Deck class), but I'll give it a stab. I see "Deck.cards" on each of the three lines of the swapCards method. Deck is a class and so it's looking for a cards static member of Deck -- you don't have an instance of Deck, you're referring to the class itself. I believe that swapCards is in your Card class from the way you have it listed (bit confusing, sorry), but you may actually want it in your Deck class (dropping the Deck. on all four cases there).
Thank you. I felt like a douche asking on here again.
It could, in theory, help with profiling - if you're trying to measure, say, CPU usage while your service handles x,000 requests, you could see a spike in the CPU usage because of the garbage collection, which would definitely impact your statistics - mean, median, mode, standard deviation, etc.
Why would you design Address to take User as a constructor parameter? Why should an Address know about Users? :| IMHO that dependency should be removed.
This seems more like a design problem rather than a coding problem. Personally, I would completely redesign this system, probably coding a User class and an Address class. Each in my opinion would be a String wrapper essentially. The linking of the users and the addresses would be done in some sort of Map, assuming a user can only have 1 address but multiple people can be at the same address.
I think it's OK for Users to have Addresses, but agree that an Address shouldn't know anything about Users. It really depends on the goal of the design.
I think that Users have addresses, not that Addresses have Users. For instance, you could have more than one User living at the same Address. I honestly wouldn't worry about having the Address point back to its User. That doesn't really make much sense to me because if you can access the Address from the User, you already know what User you are accessing. Providing more info on what you need this to do would be nice though.
Perhaps this example could be better expressed as public call Teammate { @notnull Teammate partner; ... } So far it's just a number of samantic arguments, avoiding the problem. A solution (which is as dirty as the design): o = new Object(); tPartner1 = new Teammate((Teammate)o); tPartner2 = new Teammate(tPartner1); tPartner1-&gt;setPartner(tPartner2); // correcting instantiation hack
If this is JSR-303 style bean validation then the constraints are only checked by the validation mechanism and not at construction time. Also: to be a true java bean they need to have zero-arg constrictors. Those two things should clear it up. At validation time you'll still get the ConstraintViolations from the Validator.
SeriousWorm, replace User and Address with Foo and Bar. My intention was to show a scenario in which an instance of Foo must have a bar and an instance of Bar must also have a foo. Also let's pretend that an Address doesn't need to know about its User. But an Address with no user is also meaningless. An Address must belong to a user. It must have a User. An Address on its own does not have any meaning. How would you go ahead an implement this requirement?
Please read the updated post.
If a User {or Foo) and an Address (or Bar) can not exist separately, make then one class, not two.
 (Teammate)o This should throw a ClassCastException as o is not an instance of Teammate (Or maybe you're using a language other than Java?).
How about something like this: class Address { User user; String street; public Address(User u, String street) { this.user = u; this.street = street; } } class User { Address address; String name; public User(String name, String street) { this.address = new Address(this, street); this.name = name; } } 
I think the solution of this Problem could be that you extract the interface of these classses and create proxy classes that can be created without Addresses or Persons respectively. Then you could say: Address proxyAdd = new AddressProxy(); User user = new User(proxyAdd); Address realAddress = new Address(user)); // if user has Setter for address user.setAddress(realAddress); // if user doesn't have setters addressProxy.setRealThing(realAddress);
I learned about this library on the JBoss blog, with the announcement of the [1.3.0 final release candidate](http://in.relation.to/Bloggers/JBossMarshalling130FinalReleaseCandidate). This looks really neat. It's used, among others, by [Infinispan](http://www.jboss.org/infinispan) (JBoss's caching / data grid library, which might be an interesting alternative to EHCache) and JBoss AS 7.
&gt; announcement of the 1.3.0 final release ... **candidate**
Woops... you are right! Updating my comment. Thanks!
OO has no consideration for how typing is implemented outside of polymorphism. Java's strict typing makes for nice static debugging but hell for lots of real-world problems like this. There are 4 or 5 solutions I can think of off the top of my head, most of which are uglier than: Teammate tPartner1 = new Teammate(null); // havent done java in awhile Teammate tPartner2 = new Teammate(tPartner1); tPartner1.setPartner(tPartner2); // correcting instantiation hack 
This won't work as in the constructor I am explicitly throwing an exception when null is passed.
Remove that guard. Java is procedural. You've just asked "How do I solve this OO problem?" public class Test { public static void main(String[] args) { throw new IllegalArgumentException(); } } i.e. This is not an OO problem. You've created a situation where you exploit the static type checking to prevent the instantiation of an object.
Why don't you add a second constructor?
This is the way java syntax works: // Create a pointer to an array of Card objects, call this pointer "cards" Card[] cards; // Now tell this cards pointer that you want the array to have 52 new Card objects cards = new Card[52] // The final step would be to cycle the array and create the cards for (int i = 0; i &lt; cards.length; i++) { cards[i] = new Card(i); } 
The premise is that, a TeamMate (or Foo) must have a Partner (or Bar). So that a TeamMate with a null Partner is in an invalid state and I want to prevent it.
Oh! Alright. I was thinking the first step did something entirely different, that explains it. Thanks, and sorry for the stupid questions.
Stop reinventing the damn wheel and use [Scala](http://scala-lang.org/).
Don't worry, happy learning. If you are just beginning it might be more fun for you to start with an easier "dialect" of java called Processing (www.processing.org) 
Here's [Gavin King's take on Ceylon vs Scala](http://in.relation.to/Bloggers/Ceylon#comment19175): &gt;Scala is an interesting language and it's one of several languages that influenced Ceylon. We looked closely at Scala, but we collectively concluded that it wasn't the right thing for us. Personally, I find that Scala's type system is simply more complex than I want or need, with several features I think actually harm understandability/readability, and I find its syntax a bit of a dog's breakfast. (Oh and I guess there's way too much use of cryptic punctuation where words would be clearer and more readable.) &gt; &gt;We're trying to live with a lot less language features than Scala. Leaving stuff out is, in and of itself, often a Good Thing. And we think it's important to have a very regular, visually pleasing, readable syntax. &gt; &gt;Interestingly, Scala takes much more from ML/Haskell than Ceylon does, but whereas I think I can imagine myself getting into writing code in Haskell or even ML, I just don't feel the same way about Scala. I guess I just really don't feel that the whole language really hangs together the way Smalltalk or Haskell hang together. &gt; &gt;But look, that's just a very personal view, and I simply don't want to get into criticizing Scala or arguing back and forth about specific language features. Ceylon is a quite different language and stands or falls on its own. And clearly Scala has one incredible selling feature that we simply can't match right now: an actual working compiler ;-) I agree with him, and, while I'm not yet sure which language I will prefer, I think language competition can only be a good thing (TM).
The problem I see with more language competition is spreading the mindshare too thin, leaving the best option for enterprises yet again to be java. Thats why I'll stick behind scala, is it the perfect language ? No, but it offers the good in both worlds and it still needs plenty of developer support before it enters mainstream. I never actually figured redhat to spend money on this type of research....looks like they are getting bored with all that revenue they are finally making.
This is all political BS. RedHat wants a language it can control. Also it's disgusting to watch Gavin channelling Sarah Palin. He very deliberately takes a poke at Scala, then when somebody hits back he's all boo-hooing about how he's been wronged and the unfairness of it all. 
You can't have 2 dependent properties set simultaneously in Java. So this is not a reasonable problem. Certainly not an OO problem.
That's a good point. Too many languages might be a bad thing, if it splits the community... But the same time, competition brings cross-pollination: language designers take the features they like from other languages and build upon them. For example, Ceylon seems to have taken some features from Scala. I agree that it does not solve the mindshare problem. Scala looks like an awesome language, with a lot of cutting edge features and a very robust type-system. Ceylon seems less extreme (less advanced concepts) and "simpler", which might be an advantage in the entreprise world, since enterprises like languages were any code monkey can code in... I think Ceylon could fit Stephen Colebourne's definition of "the next big JVM language": http://www.jroller.com/scolebourne/entry/the_next_big_jvm_language1
Thanks, it looks interesting! Previous discussion on reddit: http://www.reddit.com/r/programming/comments/dd7wx/hazelcast_simple_distributed_caching_in_java/
A multipart tutorial on a non-existent language? 
Language proliferation is not a good thing. Different, incompatible languages raise barriers between communities. Leaving stuff out is exactly the problem. That's what created the necessity of a replacement for Java. Less is *not* more and I am *sick* of that horrible argument. Give me my type aliases and my `implicit`s and my operator overloading and my symbol renaming. Complexity is only bad for idiots; for competent programmers, it is a powerful, indispensable tool.
Ceylon left out all the things which would be necessary to solve problems. But at least they had fun renaming keywords millions of developers had _no_ problem with. The problem is: Either you support first-class-functions, type parameters, generics (then you will have to do the same hard work Scala does) or you don't (and end up with Java 1.4). There is not really much in between.
Unfortunately, idiots constitute a significant segment of the market. Idiots like tools with gentle learning curves that let them do damage with minimal preparation. Managers like to hire idiots because there is a plentiful supply of them, you don't have to pay them much, and they have fewer career options so they tend to stick around longer. Idiot-infested companies need to buy training and support from companies like Redhat. 
Pass the Address an implementation of UserFactory. It can call createUser(this) in it's constructor.
Why don't you use Calendar?
Calendar works well for date manipulation, but as a piece of data, Date is a better object. Retrieving / persisting dates to a database is made to work with Date objects. The DateFormat and &lt;fmt:formatDate /&gt; work with Date. It's just a simplistic object to store data and that's what it has been reduced to through deprecation.
Here's the most up to date list of objectives: http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=41&amp;p_org_id=1080544&amp;lang=US&amp;p_exam_id=1Z0_851#3 If there's anything there that wasn't in the book (I'm assuming Sierra/Bates, which is what I used) it will be on that page. I found that a week or so before the test I knew the concepts and memorized as much of the API as I was going to memorize and just sharpened distinctions through practice questions. Sounds like that's what you are doing and that is probably the way to go. Good luck!
Is the exam going to ask me to code things or will it be multiple choice? So far all of the practice exams I have taken were multiple choice.
But you *use* Calendar. Calling calendar.getTime() is just something you do now and then to print or send to a database, but you don't *work* with that Date object. It's like a toString() method.
So, Ceylon is yet another language for morons and smart people like us should ignore it. Gotcha.
For the most part it was multiple choice but there was an exception. There were a few questions where I had to drag blocks of code to where they went in a class. There isn't anywhere that you need to type things out as far as I remember.
There is a gotcha with the 'drag &amp; drop' questions. When you're reviewing your answers you can't see what your answer for those questions was, and if you open the question up it resets all the blocks to their original position. After it happened a couple times to me I started writing down what my answer was so that I could review things without worrying about redoing the question again.
Might start by calling it 'Java SE 6' instead of 'Java 6 SE'. The latter is technically incorrect.
&gt;there was an exception Better try-catch that.
Do you use StringBuilder for all your text properties? I don't typically have to *work* with dates, I just need to store / display date information (i.e. birthdate, modified date, etc). The most I typically have to do is determine which is greater, which Date implements Comparable. Calendar is 100 times bigger than Date. No really, based on a quick test, Calendar objects took up 100 times more space than a Date object. If we're going to continue a Date vs. Calendar debate, we should start a new post. As for the current post, java.util.Date class has not been deprecated and still has its purpose.
&gt;...if I get the certification I will get an instant A in the class... Is your class about programming or just Java because these certificates do not test your programming ability but only that you understand Javas syntax, tool chain and API basics. In other words this is not a 'you're now a programmer' certificate, it's a 'i'm a programmer and can apply my knowledge to Java' certificate. Then again it seams like a good deal if you get 58.33% (passing mark) in this certificate you can an A in your course! You would be stupid not to try but it makes me wonder what the hell they are teaching you.
I saying this from the heart (hehe). I don't like the distributed HTML based web applications. I have been working on them for 10 years. They are difficult to write, they have so many moving parts that use fragile technologies (like CSS), all wrapped around sometimes non-compliant browsers ... and servers. If you described what it takes to build a web application, they may lose their mind. ... ... So what about desktop applications? Normally, you just need a GUI library. And a lot of them have similar APIs. You have widgets for common desktop UI components. It is pretty basic on the desktop front. So with Java applets, they allow you to write Java based apps that kind of embed within the browser. I don't mind them. I write them when I need something complex and I don't want to revert to the cluster fuck that is HTML development. ... What I see as an issue. It doesn't seem like Java applets buy you much. You are just talking about an easier way for users to download Java desktop apps. I wish Java applets were streamlined and responsive like Flash apps. I wish there was graphic oriented API. JavaFX seems like a good idea, but they didn't work on a responsive technology like Flash. If I go to youtube which is based on Flash technology. Video watching is seamless. If I go to a JavaFX based site, maybe in 2 minutes my JavaFX applet will download and eventually I will see some graphics. That responsiveness is a killer for any Java technology. If they fix that, people will start using applets. 
No, Sun had its chance but blew it a long time ago. Instead we have the abomination that is HTML 5 to try to mimic the functionality that "fat clients" gave us 20 years ago (but with a step back towards browser-specific "gotcha's"). There is no technical reason why Java applets couldn't have been the de-facto web plugin over Flash. It's just that Sun had no real vision or push for a "front end" Java so no effort was put in to make startup time and upgrades as seamless.
Here is my idea: The JVM should replace the different JavaScript engines. This way client-side functionality can be implemented with any JVM language. You could even combine different languages. Also it would benefit from 20 years of optimization. I am thinking about starting such a project because in all honesty, JavaScript need to go. 
Yeah I didn't reveal the whole story... I'm a bit behind on homework so this is kind of a scapegoat... though last night I took a practice test and got a 7 out of 72 which was really odd because I was sure at least 80% of it was correct. Hence I am going to ask the teacher for extra credit instead and bank my $300, not worth the risk.
&gt;Do you use StringBuilder for all your text properties? For anything that takes several statements to put together, particularly in a loop. &gt;Calendar objects took up 100 times more space than a Date object. I don't know why you'd care. Anyway, it's not a debate. You seemed to genuinely dislike the Date object, so I pointed out the existence of Calendar. Seems you dislike that even more. Maybe I should point out Python?
A few standards for a Java graphics libraries and A) client browsers can have the JVM already running and B) the large graphic libraries can be already present on the client like they are for flash. But Microsoft still wouldn't play along and so the most popular browser will never do this.
you also cannot instantiate an Interface, only implementations of the Interface. so "List foo = new List()" is incorrect (List is an interface) while "List foo = new ArrayList();" works (ArrayList implements List).
I'd much rather write a java applet than a html5/js/css/etcetcetc webapp. But I'd also much rather use the webapp than the applet. So I can't really blame anyone for putting the money for projects there. 
What library is hashCode in? :/
Just to revive this. What is your advice for someone looking to start contracting maybe even on the side to start. I am intermediate to senior and have already led at least one project (lead developer) to multi million in sales. 
Talk to people who are already doing 1099 work in your market. They will know which recruiters are going to be worth it to work with and which ones to avoid. Getting started 'on the side' is really hard. I know a couple people who work full time for an employer and have a side contracting business, but nearly all their work comes as a result of full time engagements they had with those companies. 
One idea would be to create a website and run it in a Java web container like Tomcat. Here's a [link](http://obscuredclarity.blogspot.com/2009/11/hello-world-java-web-application-in.html) to get you started.
A simple web spider, perhaps? That would get you into contact with network programming and regular expressions. Another great way to learn programming and have fun is to write a game - remember to start simple. Pong, snake, a shoot-em-up, or a tetris clone, for example. If you're more mathematically inclined a physics engine is great fun. This will bring you into contact with the vecmath library, which is useful. In any case, good luck and remember to have fun! 
You could take a look at e.g. the [light-weight-java-game-library](http://lwjgl.org/), play around with their examples and maybe try to make a little, simple game like Pong.
Have they taught you Swing and the Java2D APIs so far or not? If yes, you might want to build a client for delicious.com, an RSS reader, or something like that --- just for fun IMHO. Otherwise you can build a small tool for document clustering. You give it a list of textual files, it parses them, and according to their contents, it places them in different groups. For example if your files are about computer, biology, and chemistry subjects, ideally the computer files will be put in one group, the biology ones in the other, and the chemistry ones in the third.
Try making a program that calculates prime numbers within a user selected interval.
Try learning Processing (www.processsing.org) to visualize data
My "go to" program when learning ANY new language has always been "Lunar Lander". You have to code an instrument panel and the physics engine. Play starts at a random altitude, descending at a random speed. (with some constraints to make a safe landing achievable) The physics is relatively easy, the form + timer + instruments is the challenge.
 Why you don't try to make a simple application that saves data on a database using Hibernate? Is interesting and is a useful ability to have if you decide to work with java. Start with this [tutorial](http://docs.jboss.org/hibernate/core/3.6/quickstart/en-US/html/). 
Try looking for something at http://www.rubyquiz.com/
Yeah, whether to deploy is a situational question. And on whether to learn, I'll defend that it's worth learning, but whether it's the best place to start for anyone in particular is another situation question. Thanks for your note!
Do you have an Android phone? Java is the primary language for apps on those devices. Bonus: easy to show off.
PS: it's fun, too. To date I have written LL in Fortran, Basic, C, C++, C#, COBOL (yes, I said COBOL), Pascal, and Modula2. I'm finally learning java. Guess how?
Do this. Single most useful thing if you want to pursue Java or a JVM language later on.
Nobody in their right mind should ever recommend that abomination that is the servlets/XML/JSP approach to building web sites. It's cumbersome, slow and inflexible. I would highly, highly, highly recommend **Play**: http://playframework.org.
Agreed. Do this if you want to work for a company spending months coding boilerplate code and hating your life. Great money though.
Problem is no one really uses client side Java in the real world. It's pretty much all dead end technology.
Try making a game that you think you won't be able to make. This will allow you learn more than you ever could have hoped in a short amount of time. It seemed to work for me. This is my first year with Java as well, and I was able to make a decent game. Check it out if you want: [Microminer](http://www.indiedb.com/games/microminer)
A card game. Depending how ambitious you want to be, you could choose anything from War to Bridge. Possible steps: 1. Start with a simple text-based console UI, where you expect each player to be human and type in the next move. You'll need to make data structures for the cards (an enum) the state of the deck, and the player's hands, and learn enough I/O for the console UI interaction. 2. Write a computer player. Make sure the computer and human player descend from the same Player type (an abstract class using the Template design pattern may be appropriate). You can get as crazy as you want with the AI here. 3. Make a graphical UI. Learn some Swing and its event model. Find some graphics of cards that you can render in the UI.
Along learning how to deploy a war to an application server you learn build management, IOC frameworks, lifecycle whether it be maven or ant and it may not always have to be a webpage. Same theme minus the JSP could be a web app with great domain specific problems to solve for.
True. Which again if you looking at Java for a career is well worth learning. However if it's for a mini-project or startup then something like Play is much preferable. Java is ridiculously over-engineered and can be far too complex for someone new.
I do it by hand, using TableLayout.
Would you mind elaborating a little bit on your learning process? Books, tutorials, etc? Game looks great.
I know I'm belabor this, but I think you're missing my point. I'm suggesting that Java is at a point now that they way to make progress is to remove backwards compatibility up to this point. This would enable things like runtime generic support. I never said I don't like the Date object, I just don't see why it still has support for constructors and methods that have been deprecated since Java 1.1. Yes, you should use StringBuilder to construct a string, but properties in a bean / model object should not be a StringBuilder. Same with dates. Once the string / date is constructed, it's more efficient to store and pass around a lighter weight object for reference. If Calendar was a complete replacement for Date, the whole Date object would have been deprecated.
I've worked with Matrix Map based games for the ti-84+ when I got really bored in highschool. With that knowledge, I was able to move on to Java in college. One day, this year, I decided to make some sort of 2D based game and it just happened to be Minecraft based. The first version looked horrible, but I posted it anyway. The people of reddit had ridiculously hard concepts to apply to the game, and it was those ideas that really improved my program design. If you're having trouble going about your game design, take a look at this pic: http://i.imgur.com/hBJVB.png On the left you can see a normal looking game. On the right, you can see what the computer is reading. In general, you may notice a bunch of zeros and other numbers. If there is a zero, move the player. If there is not a zero, let the player do something to it. Playing with code always helps too. Take a look at some Java4k.com games, these are usually great examples of optimized games.
Minesweeper! You can make it the console so no gui experience is necessary,well i mean you'd have to make a gui but it would just be text graphics in the console :)
Android development is a bit more difficult than a standard java project though
Have you tried visualizing teh data using Processing www.processing.org
I think what you need for displaying the data is a website, not a webservice. You can create a small webapp, and render the tree as HTML. [Here is a link](http://obscuredclarity.blogspot.com/2009/11/hello-world-java-web-application-in.html) you could use to get started. It's demonstrated in Eclipse however. If you don't want to delve into Servlets and JSPs, you could try out a framework such as GWT, ZK or Vaadin - they even have tree widgets you could use to visualize your data.
Thanks, I will look into it. My brain had kind of frozen as the submission date was nearing. I also tried Graphviz, which I believe will be more appropriate for my tree. Thanks anyways :)
Thanks for your advice, I think you're right, I don't need a service for visualization. Some one told me to serve a JSON and render it using JavaScript libraries. I will look into this solution too. Thanks again. :)
Maybe you can hack gephi (http://gephi.org/) for your needs?
I'm curious what graphics library you used with C/C++ to develop your LL clone and which one you are planning on using for your Java version? I've written 2D games in C++ before using SDL and I'm now learning Java. Are the standard Java2D libraries pretty easy to work with?
Then, for extra credit, modify the program to prove that non-trivial zeros of the Reimann Zeta function have a real component of 1/2. Go!
As somebody learning Java this was interesting to me and so I took a look at it. Correct me if I'm wrong, but it seems like this makes audio and key input real simple, but as far as graphics it still hinges on you understanding OpenGL. There doesn't seem to be any streamlined 2D support with simple blitting or other simple transforms. From what I saw it just gives you OpenGL hooks.
The [space invaders demo](http://lwjgl.org/demos.php) shows how to use OpenGL hooks for simple 2D blitting.
Thank you very much! This looks like a really good way for somebody experienced with programming to challenge themselves with Java. I think I look forward to solving all of the exercises the most.
Cool, thank you. :)
I understand the logical benefits of final, but there seems to be [performance issues for this type of thinking.](http://www.javaperformancetuning.com/tips/final.shtml)
this article isn't about marking classes and methods final it is about marking variables final, and your link espouses the exact same thing. "On the other hand, final variables, especially static final variables, are well worth using as standard."
I disagree. The two articles come to somewhat different conclusions. &gt;"SO THE FINAL WORD ON FINAL IS &gt; **Try to apply the final modifier everywhere you can**, the more you do it the more you will appreciate the entire c&gt;lass of bugs and logic complications it allows you to eliminate through the single assignment variable idiom." and &gt;"Generally, I wouldn't go out of my way to declare a method or class final purely for performance reasons. &gt;Only after you've definitely identified a performance problem is this even worth considering. &gt;On the other hand, final variables, especially static final variables, are well worth using as standard." The first says do it everywhere you can, the second is saying generally stick to variables (perhaps related to performance reasons for doing so). Obviously, the more you know about how final can help or hurt, the better decisions you can make, but blindly using (or over using) final does not help. My impression is the article might be leaning towards over use (that's my opinion) I think applying FP principles to Java is a good thing, but it can become non-idiomatic when overdone.
Even if there is, why not make one to make one? That's your goal right?
I try to define as many variables as possible as final, and I usually try to make my business objects immutable. But that's usually impossible to do if I want to implement clone(). I generally resent clone for that reason.
Balls of steel!
C/C++ I pretty much grew my own. (I was in a situation that gave me the time and patience) In Java I'm using Swing for the forms, hand crafting for now, but there's a google GUI designer that plugs into eclipse I plan to look at. The Vector3f classes (not built in but plenty of places to d/l) are awesome for the physics engine.
Well actually I have in mind something I would use it for, so if it already exists I would like to implement it :)
do not release it when you finish. lest you enable a horde of bots.
other people have released other ones, I saw a python one, it seems to me that it's nice to open source things, but I hear you
Take a look at the Reddit is Fun! app for android, it is open source and on github. I'm guessing it contains a lot of the code you are looking for.
I'm not sure reddit could handle the traffic of an api. Just sayin
Let me know if you do and I'll be happy to test it and give you some feedback.
There already is [an official one](http://code.reddit.com/wiki/API), and I found one in Python as well. How else do you think all those Reddit apps work? 
making all instance variables final does not make an object immutable
If you're interested, I just started writing a text adventure game tonight to learn Java. I've created a public repo for it so if you'd like to pull it down and commit stuff, it could a be some great fun :) https://github.com/josephbleau/An-Uninspired-Text-Adventure-Game/
There are two major frameworks in use: Struts and Spring MVC. While frameworks like Play sound interesting, it's all about adoption rates. To make yourself as marketable as possible, stick with the frameworks that a majority of companies use when developing Java based web application. http://struts.apache.org/2.0.14/docs/struts-2-spring-2-jpa-ajax.html You learn how to develop with this stack and you'll have no problem finding work. You show up to interview with Play on your resume, and it will make you look like an amateur.
Sounds like a fun afternoon/weekend project. 
Step 1: Aquire Open Source property Step 2: Alienate project base and cause a community fork Step 3: Dump Open Source property Laugh.
You forgot to mention: Step 1a: Use acquired patents to sue also: Step 5: profit
touche'
What is Hudson? Ive seen it mentioned a ton since the Oracle buyout, but dont really have an idea what it is or does?
You should take a look at Guice, which is a minimal approach to DI in Java. It makes "final" worth using. http://code.google.com/p/google-guice/
It's a continuous integration engine. For example, let's say you have three projects: A, B, and C. B is dependent on A, and C is dependent upon B. You could configure Hudson such that, if a new version of A is built, it automatically builds B and C. Presuming that you good integration tests in B and C, this allows you to automate the validation of passivity of changes in A on B and C.
Depends on your definition of minimal, I think. Guice requires you to reference its code (or so it demonstrates in its wiki[1] - perhaps there are more advanced techniques I'm not aware of). I'm a fan of Spring because, although you can argue that Spring's requirement of an IoC environment is "heavier", my *code* is lighter because, with a very few exceptions, it's all completely unaware of the method of dependency injection. 1. http://code.google.com/p/google-guice/wiki/Motivation?tm=6
Perhaps I just write too small of methods, but I think putting "final" on your method arguments just makes for overly verbose code - as a convention, I never modify the arguments (hooray, functional programming!), and my methods are sufficiently short that I haven't ever really encountered a time where I mistakenly overwrote some incoming value. That said, the value of using final on local variables - be they class-level or method-level - is invaluable. Putting the final modifier on a class or method, however, makes me want to shoot the person who wrote that code when I am consuming their code.
Since you are already using VLC check out the [http and telnet interfaces](http://wiki.videolan.org/VLM).
I think it's time for CloudBees to turn Jenkins into an Apache project.
I did that for an Uni project, the telnet one can be implemented in a few hours
i'm slightly confused as to how the telnet interface works... i am running vlc by using "vlc -I telnet" and it starts streaming. how do i access that stream via telnet though? i haven't even figured out how to simply pause the stream yet
http://paste.opensuse.org/42394603 That's from a project 4 years ago, back when I did not knew how to program :P Also, play with it using &gt; telnet localhost 6666 substitute 6666 for the VLC port
Spring or Guice, if you use constructor-based DI you can mark the instance variables as final and gain clarity about mutations.
I have just the project that I am going to use this on.... I can't wait to refactor my code using this.
Have a look at [Jajuk](http://www.jajuk.info/index.php/Main_Page), it is a complete Java media player that delegates most of the decoding to MPlayer.
Shouldn't the method **getLastUpdate** be returning a **Date** object and not an int?
Check out http://thejit.org/, if you haven't. 
I guess that, as long as you don't expect your software to live much beyond ~2.14 billion ms past January 1, 1970, you should be fine.
I think in the past I have used Open ESB to play with it, although I didn't particularly like it, it was useful for exposing different sets of services with different method signatures to sets of clients. http://en.wikipedia.org/wiki/Open_ESB Now, to the real question, why don't you write a single web service that does this, and just re-think the logic. @WebMethod public void plotPoints(HttpServletResponse response, Object ... params) { String data = churnData(); foo(data); // foo can plot the points and write to the stream } 
I'm curious as to why you wouldn't off-load this to the database as is the traditional approach with Optimistic Concurrency. I'm wondering whether having whatever code is weaving these methods worth the overhead on every operation, versus having to rollback on the few cases where you do hit race conditions. Or are you planning to use this purely to ensure atomic operations within the business logic? To which my question is, shouldn't that layer be stateless?
The Sierra/Bates SCJP guide is literally the only thing you'll need to pass the test. Take good notes, work through the quizzes at the end of each chapter, and take the time to understand your incorrect answers, and you'll do fine. Otherwise, there's a good resource guide at [JavaRanch.com](http://www.coderanch.com/how-to/java/SCJP-FAQ#preparation).
They are the same thing...The only difference is the second tempStr can be used outside of the while loop. At compile time, it will still allocate the same amount of memory.
Look up some of the MIT lectures. They are great for pretty much any comp sci, math, or engineering. 
This is exactly the kind of info I need. Thanks.
How many companies out there actually look for certification? I've never seen it listed as a requirement for a Java-related position.
It's a sweet addition to a resume.
Programmers laugh at certifications a lot, and with good reason, but the SCJP is one of the better certs out there. And the cert does give you a slight edge when interviewing. I gave a run-down on the pros and cons of the SCJP on SO once. Here's the [link](http://stackoverflow.com/questions/1298438/scjp-advantages/1322788#1322788). There are other discussions [here](http://stackoverflow.com/questions/281100/is-it-worth-becoming-sun-certified) and [here](http://stackoverflow.com/questions/81543/does-scjp-help).
Hi-five for getting my back.
I am able to achieve my results using a single web service. But, when I wrote the abstract, I mentioned that I would be using two services so as to distribute the processes of mining and visualization. But while building this, I figured that it would be even better if I just serve the data as a JSON via HTTP and then plot it using a client side library in JavaScript. But now, I have to build it as I described it in the abstract. Kind of sucks.
Why would you restrict yourself to an original shity design. That is what refactoring is for.
When I'm reviewing resumes, I'm actually slightly biased against people with Sun Java certs. My experience with interviewing cert'ed Java devs is that they are usually too "enterprisey", and are usually trying to compensate for lack of experience and/or raw coding ability. If you are looking to enhance your resume, spend your time instead learning JRuby, Clojure or Scala, write some code in it, and mention that in the skills section. Alternatively, volunteer for an open source project, and mention that.
I'm not biased against certifications... mostly because I just skip over any part where a candidate mentions certifications. Seriously, OP, certification doesn't mean squat. You'd be better off find a good open-source project and doing good work on that. I've interviewed candidates simply because I wanted to talk to them about some OSS project they had worked on.
Not if a programmer is going to interview you.
Couldn't agree more. Hope OP just saves the money; seems to have a hole in his wallet to burn.
Back in the day, I found Dan Chisholm's exam here: http://www.danchisholm.net/latest.html pretty helpful, and his questions are a little bit trickier than some of the actual Sun questions. While some of the material is dated (and targeted at the 1.4 version of the exam) most of the questions will still be relevant.
One of the benefits someone else here posted is that having a certification means interviewers are less likely to ask you low-level "Fizz Buzz" type problems. 
In the case of my application, persisting state to a database is just too slow. I need to keep the data completely memory resident, otherwise our customers would just jump ship to another provider.
There are options such as Cassandra which are very promising for extremely fast reads. What volumes of data are you dealing with that reading from persistence is too slow. So how do you guarantee availability of your data? Do you have some kind of geographic replication with something like memcached? Or does it have such a low expiry you don't care about it's state past a period of time?
Loading the string with the wrong character set? Make sure to always explicitly specify the character set when displaying strings.
What? This is Java; all strings are Unicode.
UTF-16
By default all strings are encoded UTF-16. Its usually a bad idea to use the default encoding and make sure to explicitly specify across the board. Check out: http://download.oracle.com/javase/6/docs/api/java/lang/String.html and http://www.joelonsoftware.com/articles/Unicode.html
Um, no. In Java, all `String` instances and `char` values are *always* UTF-16. Period. It is not merely default; it is mandatory. Character data from external sources (e.g. reading text from a file) might not be, of course. In that case yes, when reading them the character encoding should be explicitly specified if possible. If it isn't possible, for text files on the local filesystem, the platform default encoding is usually a good guess. If the file specifies its own encoding somehow (e.g. an XML declaration) or if the format itself is defined to always use a particular encoding (e.g. Java `properties` files), then that should be used. Character encoding issues do not occur when *displaying* strings. By the time you're passing a `String` to a Swing component or such, it's already unquestionably UTF-16.
A String is a set of characters in memory. Its of no concern what character set the underlying implementation uses. The point is that when creating String objects in java from bytes, you should always explicitly specify the character set. Period. I'm not quite sure what point you were trying to make.
Okay, fair enough. I may have misunderstood you at first—sorry.
This could be a corrupt font on windows.
Yeah, I've seen this before. See, what you do to fix this is leave a live chicken in a wire cage and a decent bottle of tequila on your porch just after sunset. They, and we'll just call them that for now because I needed to grow a new pair of eyebrows after the last time I called them the "little green cowboys", always appreciate the protein and high energy health drink; which is how they regard tequila. Obviously, they're reaching out to you as an ambassador of our planet. You can do a better job than I did, may Japan forgive me. Good luck with that!
Are you graphing the endpoints of random walks?
lol
Yes
lol
Or UCS-2, depends on JRE version. Surrogate pairs weren't introduced until 1.4 (IIRC).
Sorry, I'm not quite sure how to do this. I don't have the option to specify a character set when starting the application.
I've already tried reinstalling java and clearing the cache. I'm using version 6, update 25 on Windows 7 Ultimate, 64-bit.
Using BPEL may be overkill. You could write a console app that composes the two services. If you insist on a large framework for a small task, check out Apache Tuscany. 
do it in haskell!
:)
you are by "convention" doing what you can enforce with the **final** keyword and make it self documenting your intention as well. In multiple developer scenarios, not everyone will "know" your "convention", argument references should never change.
Very true. I may try applying the style again to my code and see if it flows a bit better this time around.
sounds like he also got hired because of those certs (sorry for necromancy)
I know a lot of components have a Focusable property. However, the way JTables work, it might be difficult to get at the cell components themselves. You may have to create custom CellEditors and CellRenderers which set the component focusable to false before returning it. If that doesn't work, you could try something with FocusListeners. Use the Table's SelectionModel to select a new cell.
Actually, this was not a question on how to solve it. It's already a solution. It works as it is ;) Many thanks for your input though.
What about: Address addr = null ; User user = new User(addr) ; addr = new Address(user) ; /* Manipulate Address settings */ user.setAddress(addr) ;
You can definitely name it whatever you want. I name my Properties files ".conf" because that's how I use them.
Here's the spec: http://java.sun.com/docs/books/jls/third_edition/html/arrays.html#11358 Here are the relevant portions: &gt; An array initializer is written as a comma-separated list of expressions, enclosed by braces "{" and "}". &gt; The length of the constructed array will equal the number of expressions. (...) &gt; A trailing comma may appear after the last expression in an array initializer and is ignored. So, you've constructed 0-length arrays, which is perfectly legal (and might be better than returning null when you have "nothing" to return).
Guess I just find it odd that they allow the trailing comma, considering it serves no purpose.
I'm not so sure: String[] blah = new String[] { "foo", "bar", "baz", "red", "dit", } Now you can reorder the lines any time you want, add new items, copy/paste lines, without any comma issue.
The reason for the trailing comma is to make version control change logs easier to read. If you always have the trailing comma on the last item, then when you have to add another item, the before/after difference will just be "added one line", and not "removed one line and added two lines" from having modified the now second-last item to add the comma.
Here's a real life example for some code I wrote recently. This structure is fed into Apache Commons CLI, String[][] str = { {"help", "print command line option information"}, {"version", "print program version"}, {"debug", "turn on extra debugging options"}, {"nosplash", "do not show the splash screen"}, {"keep", "keep data in memory for further use"}, }; As I add more command line switches to the end I don't need to worry about that last comma. It gets committed into source control as a single clean change. 
Where I work it's considered rude *not* to leave a trailing comma for the very reasons you just gave.
Interesting. I still find it odd that they would include something like that just for these kinds of minor conveniences.
It's been rather common in languages for the past 10-15 years. As with some of the other examples in this post, a lot of the time it's used for arrays of constants or whatnot. int [] MY_CONSTANTS = { CONSTANT_ONE, CONSTANT_TWO, CONSTANT_THREE, CONSTANT_FOUR, }; If you have a complicated program where the constants in this list may be added or removed in different branches, it's always much easier to have commas at the end of all of them. The last company I worked at had code dating back to 1998 that did this (part of our client/server API). You can also find this same behavior in many other languages such as C, C++, and Perl.
It's a really nice convenience. Not having to re-position the commas has probably saved many a programmer the occasional cycle of compile, wait ten seconds, tiny syntax error, move the comma, recompile, wait ten more seconds. Languages that *don't* support the trailing comma in initializers are the odd ones!
It's optional. It's convenient. A lot of mainstream languages do that. I don't see what's odd...
"free"
Other languages also support it. Python for example.
I guess he means it's just interesting that programming languages are fundamentally pretty strict (especially to a non-programmer), but in this case Java says, "Whatever man, that's cool."
They serve two very different goals. As far as the UI is concerned converting one to another is a pretty trivial task. Both JFrame and Applets use Swing, so learning how to do graphics with one will help with learning the other. You're fine. :)
Is anyone else a little scared by the line "...we have also been working on convergence from a licensing perspective"?
JApplet is used with Applets. You can use the regular static method 'main' method to design an application that launches from the main program. Both the standalone main program and the JApplet can invoke JFrame.
Nice move..shows Oracle's heart isn't completely black!
To make a *web application* as the goal, and you suggest learning build management, IOC frameworks, lifecycle and maven? Who in their right mind would consider that a good idea? The only reason maven and IOC frameworks exists is due to the very sucky nature of servlets &amp; jsp and "deployment". Instead of making a web application you end up programming within a framework an application container while trying to suit its preferred way of doing things, and curse descriptor hell while you are at it. WTF is up with that? 
what did I just read? Please make an educated post, especially if you're going to revive a 2 week old thread with a response as poorly formulated as that. Maven existing has nothing to do with your subjective view of servlets &amp; jsp being 'sucky'. Maven is a build manager. IOC frameworks are used in many places, in any architecture of a java project, but have nothing to directly deal with servlets, jsp, or 'deployment'. Can Spring deploy for you? How about Tapestry? Do you understand that essentially under the hood an IOC framework is a glorified Factory design pattern right? 
I personally like using a JFrame instead of dealing with applets. It is problem due to my inexperience as I'm still learning myself, but it is just easier for me to work with in Eclipse. 
Struts? Are you fucking serious? Spring MVC is understandable but strufs... do you want the poor guy to suffer? 
A JApplet is for when you want to run your application inside the Java plugin in a web browser. A JFrame is for desktop applications. Other than that they are comparable in functionality, so this really is about what environment your code is going to run in, and not about how you build the UI.
They give it to you under a heavy license. But yes, it's not the same free that Free Software Foundation lines. Also, it's a bit confusing because you can use it except for the "commercial features". ([source](http://www.oracle.com/technetwork/java/javase/terms/license/index.html)) Anything listed in [table 1-1 of this page](http://www.oracle.com/technetwork/java/javase/terms/products/index.html) is considered a commercial feature.
I like JFrames because of the poor user experience that applets tend to bring. Java WebStart or just having the user download and run your application is my favorite way to do it.
&gt;I don't really like applets/don't think that they're very practical? Why do you think this? They both serve a different purpose. 
I am dead serious. Notice I did not make any arguments that they were superior in any way, but adoption rates for these frameworks far exceed any other. Struts2 annotations with Spring integration and sitemesh can be a pretty elegant and robust solution, especially when you integrate the jquery plugins.
I don't really think that I'll use java plugins, because they don't seem very popular. I will probably be using it for desktop applications 
You can use JFrame with JApplet.
I advise learning the Java platform, first. I am not really understanding what you are talking about.
&gt; I will probably be using it for desktop applications In this case, don't bother with applets, they'll only get in the way. Applets have a bunch of security restrictions that a normal Swing application doesn't have (can't access local files, etc. - I haven't used applets in YEARS so I'm a bit rusty on what they can and can't do.) Source: I write very large Java applications for a living.
I prefer JFrame+Java Web Start. You can use both JApplet and JFrame in the same code without extra coding.
They are both just containers. They do nothing but hold your program, and if you use a proper abstraction there is literally no difference but the intended target environment.
&gt; I haven't used applets in YEARS so I'm a bit rusty on what they can &gt; and can't do You're spot-on. You can relax some of the restrictions by signing the applet, but if you're writing a desktop app there's no reason to get into all that.
Hardly. Take a look at GWT and EJB3. 
JavaWebStart, use JFrame and can launch it from desktop or browser.
LOLOLOLOLOLOL!!!!!!
Very cool! Personally, I switched to scala and would like for them to concentrate more on the Scala plugin :) but this is very nice too.
I had no idea IDEA was free for personal and open-source use! I'll have to check it out, Eclipse is getting a little erratic.
I dunno if it's $200 cool.
It depends on what your looking for. IntelliJ IDEA is pretty amazing; it's most definitely a [type 1](http://lists.wikimedia.org/pipermail/wikitech-l/2011-May/053271.html) IDE. The increase of productivity alone is worth the cost of entry if you require features that are not available in the community edition.
200$? You mean 0$ (for Java and Scala development)? If you need the extra features, then I guess you're making enough that 200$ is a few days work.
Totally worth the cost. I switched from Eclispe (used for years) to the community edition about a year ago. Loved it right away. About two months ago I got work to spring for a copy (after saying that since they're paying $150/license for SecureCRT for Cisco engineers that they should be able to pay for something that is integral to my job too). It's totally worth it. All the little tweaks that are different from the community edition make it worth it (Spring integration, HTML/JSP/JavaScript editor). Seriously, if you make a living coding, it's worth a couple hours of time. Any company shouldn't have any issue buying it, it's cheaper than a lot of other "normal" software that they'd buy for you. Otherwise use the community edition. They've included Android support in that now too. The CE is very, very capable and I find it much faster than Eclipse.
Hear that mr Anderson? That is the sound of inevitability....
Some light googling ("blurry java" find some similar screenshots) suggests it's a problem with using Java with Direct 3D, apparently turning anti-alias off fixed it for someone. Otherwise something like [this](http://www.java.com/en/download/help/blurry_fonts.xml), but you should have enough to go on now anyway. Weird problem! Thanks for sharing.
I mean "w/o external servlet containers"
Have you considered posing this out to Maven central using Sonatype OSS hosting (assuming you use Maven to build your project)? I hate having to manually manage my dependencies.
Looks pretty interesting. Is this your project or did you just link to it? If yours, what kind of concurrency/load testing have you done against it?
try using a constructor that accepts a font argument so it's loaded immediately?
It's not my project, I just discovered it. 
I would love to give it a go, but it just looks sooo ugly in linux :'( (I know I know, but I'm a bit OCD when it comes to a consistent look and feel in my OS)
What kind of hosting would I need to run this? I've never touched Java web development.
The web browser sandbox is also quite small so as an application will be able to access significantly more memory. Last time I checked it was a measly 64meg for (cr)Applets. Java applications can access 1.5g on 32bit jvms and allot more on the 64bit jvms varying on different platforms.
I'm planing to take SCJP (now OCJP) as well. I think Sierra/Bates SCJP guide is enough if you just want to have the certification. But if you really want to write good code then you should read Effective Java.
http://java.sun.com/products/java-media/speech/
I actually have a small amount of experience with exactly what you are talking about. I was writing a "butler" [(githup project)](https://github.com/TyOverby/Butler), of which you could ask (in voice commands) various things, and it would respond. I used a speech recognition library called [sphinx](http://cmusphinx.sourceforge.net/), and it seemed to work well enough for what I was doing. Basically what you do is you make a ["gram"](https://github.com/TyOverby/Butler/blob/master/src/com/prealpha/butler/voice/commands.gram) that contains all of the commands that you want to be able to enter. Then in a [readloop](https://github.com/TyOverby/Butler/blob/master/src/com/prealpha/butler/voice/ReadLoop.java), you can check to see if any of these things are being said. Ideally, you would have this readloop in a thread separate from your main application, and have it fire events if it detected you saying anything. I dropped my project in favor of a game that my friends and I are working on, but I would be happy to help you if you get stuck. If you want a jumping off point, I'm pretty sure that you could just clone my github project and open it up in eclipse and run. The library is included.
get a supercomputer.
Immediate impression: "Finally!"
this is text-to-speech (TTS) not speech-to-text (STT)
If you want to make yourself *marketable*, then learn .NET/C#. And you are right about not looking like an amateur by having something like "Play" on your resume. Or a username like *MartyMcButterpants.* ;-)
I hate the whole "hello world" cliche. I want my first program to friggin **DO** something useful. So, my first Java application was a Swing app that loaded multi-page TIFF files, extracted each "page", searched for barcodes and decoded them if it found them (Google's ZXING barcode API is really pretty cool). Separated the pages into multiple documents, routed and archived them in the filesystem, and stored the barcode extracted data in a SQL Server database along with the file location. And while it ran, it displayed each page image in a UI window, with a red or green box drawn around each detected barcode (red if it could not find specific data in the code, green if it did). Processing at about three pages per second, it was pretty cool just to watch it go. Then I wrote a JSP/Servlet website for browsing the archive. All done using Netbeans. That was my first experience with Java. Lesson learned? Google is **definately** your friend. 
I agree. You want to be super-marketable, know how to develop decently in Java and C#. Also, I don't put my reddit name on a resume. Perhaps I am missing a chance to locate a fellow redditor during the interview and get some job karma.
Thanks, started looking into Sphinx4 yesterday; I'll check out your project today.
Ah, maybe that explains why a few weeks ago the download of the Quartz 2.0.1 jar doesn't work on quartz-scheduler.org. BTW, if anyone is interested, I recently forked Quartz and made "Sundial" which can be [found on GitHub](https://github.com/timmolter/Sundial). I was getting sick of the bloat, the unneeded dependencies (for my situation), and steep learning curve that comes with Quartz, and decided to make my own non-clustered job framework, which borrows a lot from Quartz, and tosses out the bloat. 
&gt; I'm now using Voce, which has its backend in Sphinx4, because I had fewer problems getting it set up than I did with Sphinx by itself. How are you finding Voce so far? I'm also looking to do some voice recognition in Java, and have only gotten so far as browsing some of the Sphinx documentation.
Voce is easy to use for what it does (you basically give it a list of words, and it'll try to recognize those words), but it's very simple--the API is &lt;10 functions. Using Sphinx by itself would be more versatile, but more complicated to use. It depends on your application.
That's pretty good. The thing with programming is that there are usually an infinite amount of ways a program can be written and still do the same thing. Here are some useful Java Escape sequences http://ehis.ebscohost.com.mms02.cerritos.edu/jwilson/java_language_resources/Java_Escape_Sequences.htm
You may declare method signatures in the class and also provide method implementations. You can have state as well. You can declare static blocks, etc. Also you can only directly subclass one class. An interface only defines method signatures. But you can implement more than one given interface.
An interface is essentially a purely abstract class. You're not allowed to implement anything. An abstract class can have some implementations but it's not fully implemented. You can only extend one class (abstract or not), but you can implement as many interfaces you want. 
A classic example of the benefit of OSS! Good going!
Interfaces have a "can-be-used-as-a" relationship with the implementing class. Abstract classes have a "is-a" relationship with the inheriting class. That's the difference. It exists. Don't confuse people by saying it doesn't.
FYI you don't need to use a different loop counter variable in each loop, stick with i unless you have a reason to use something else. As for the output you could use modulo (%) to print numbers in the range 0-9 for (int i = 1; i&lt;=20; i++) { int outNumber = i % 10; String outString = outNumber + "" + outNumber; System.out.print(outString); }
you should... do your own homework....
"compared to 4chan" as a programming site? Sounds like you're trolling. Try http://stackoverflow.com instead.
This whole is-a, has-a stuff is annoying... This guy's explanation is probably the most accurate I've ever read (It's also how I think of it in my head.) Saying is-a or has-a means nothing when making a real world distinction like the article makes. Yes, I do understand (and can repeat for my future interviews) the difference between the is-a and has-a crap.
Me too. I can't speak for JDBC, but most of the Java API uses them quite sanely. There are a couple of annoying cases like a StringReader can't throw an IOException, but has to have it declared because everything else implementing the Reader interface can, but for the most part I like them. I think part of the hatred is a) from people who shouldn't be using Java. I don't mean this in a snobbish way, just that if you aren't trying to make something that is performant and rigourously correct, Java isn't your best choice. In particular if people complain about the "bloat" they add to the code itself... if you care about code verbosity, Java probably wasn't the best choice. b) People who don't program with exceptions *well*. It'd be a bit out of scope (not to mention lengthy) to go into it, but Exceptions like any other language feature can be used well, or horribly mis-used and abused, and a *lot* of code I read falls into the latter camp.
I think he is complaining more about people misusing check exceptions rather then their proper usage. 
As the article says, it's at least semi okay in certain cases. I hate things like that on close methods! What the hell am I supposed to do with that? Open a new connection and close that one instead? Edit: Spelling
http://stackoverflow.com/questions/613954/the-case-against-checked-exceptions
I have four hates in Java and checked Exceptions aren't one of them. They are: Static initializer blocks Variable initializer blocks labelled breaks labelled continues I can see cases where labelled control flow is reasonable, but initializer blocks don't seem to offer anyone anything. edit: I forgot *anonymous* inner classes.
I will use initializer blocks with classes that have copy constructors, or ones which implement clonable where my implementation of clone() is to return the result of the copy constructor. The copy constructor can accept the object's instance, then copy a few values, while the initializer block will ensure that common values are always initialized the way that they should be. for instance: public class MyClass implements Clonable { this.required = "Some required literal"; } //Default constructor public MyClass(){ this.cloned_value = new InitialValue() } //Copy constructor. Deep copy cloned_value. public MyClass(MyClass m){ this.cloned_value = m.cloned_value.clone(); } @Override public MyClass clone(){ return new MyClass(this); } It's a pretty edge case, though. The value of it is that I don't want this.cloned_value to be the initial value, so I want it to skip the default constructor, and the copy constructor will not invoke the default constructor, but I do want this.required to be the initial value, so I don't want it to skip the initializer block. It's kind of a way to have my cake and eat it too. I get the value of a default constructor to set some common values, but I get to also skip the default constructor in order to not set some initial values.
What would you rather than labeled breaks or continues? Numbered breaks and continues like PHP (specifying the number of levels to jump out of)? Full goto? Fudging loop counters to cause them to terminate? Static initializers: they're used for initializing static class data, e.g. in a static array. They're not needed often but they're the best way to do it when you do need it. Otherwise you have to burden code elsewhere with explicitly calling a method like SomeClass.init(); or put checks in all relevant routines to make sure the data was initialized. Instance initializers: They're more or less syntactic sugar for constructors, but you can have more than one block. They're kind of neat: return new HashMap&lt;Integer, String&gt;() {{ put(123, "data1"); put(456, "data2"); }}; I don't understand why you'd hate any of those things, especially as you don't actually need to bother about them if you don't want (unlike checked exceptions). But they're all useful; learn them.
Mainly with stream I/O and other potentially unreliable actions, checked exceptions do what they're supposed to do and make you think properly about handling error situations. But sometimes they're purely annoying, and can even make error handling worse if programmers just add dummy try/catches around methods to make the compiler shut up. Then the exception is lost entirely! If I were designing a new language I'd not bother with them.
+1 on close() methods. If I'm doing a lot of I/O I add a method like this to shush the compiler up. public static void close(java.io.Closeable x) { try { x.close(); } catch (Throwable t) { throw new RuntimeException(t); } } Then I can do just like "`close(out);`". Removing the re-throw would perhaps be warranted since there's nothing useful you can do with it anyway, and the error means the connection has probably already gone away.
One thing: PLEASE do not throw a generic RuntimeException. If I have a legitimate need to catch your exceptional case and handle it, catching RuntimeException is terrible because so many exceptions extend it.
I don't know what to do about the labeled break problem, the nice thing about PHP is it's syntactically clearer, the worse thing is it's fragile. The thing I hate about static blocks is you can have a bunch of them and sneak them into the class in weird ways, as well as their execution orders having the potential for weirdness. I'd be more okay with it if you were allowed one block and required to actually specify the order. This carries over pretty much directly to the variable initializer blocks, where the constructor *is* that big block of code, and shared code can be combined into functions. The rules of the block ordering can be complicated and forward referencing is weird. Even if you want one block of code "implicitly" rather than explicitly at the head of every constructor, it seems like arbitrarily many that can be executed in strange orders are just a bad idea. I can avoid them in the code *I* write, but I can't necessarily avoid them in code I maintain. 
99% of the time I'll catch and throw an unchecked IllegalStateException or IllegalArgumentException as low-level as possible (in DAO's or in the rare cases I want to insulate around 3rd party classes) to not pollute high-level api's with checked exceptions. For most cases you just want to bubble up the exception and have it dealt with by a "fault barrier", which again, for most cases, ends up just being a log statement and possibly an alert to the user (if there is one). This policy has lead to cleaner api code and after 10 years of Java I've never once been bitten by it or found a superior pattern. Checked exceptions were an attempt to force novice programmers to not forget about things that could go wrong. They are unwelcome sneeze guards in an already cluttered language, which is why most JVM scripting languages tend to auto-convert exceptions to unchecked.
I can agree with this, there are some standard unchecked exception types which work much better: IllegalArgumentException/IllegalStateException/UnsupportedOperationException.
I dunno, I kind of like it. It's like a way of introducing a very clear variation of duck typing into Java, which obviously supports no such thing. Maybe I want this object to be Serializable, but I don't want to inherit anything from a Serializable superclass (what would I even inherit?), but I still want to be able to pass it in as an argument to functions requiring a Serializable object. I dunno, I just think it's cool. Maybe I'm mistaken.
It works for explaining the concept, but i cringe when people (especially interviewers) get hung up on the distinction.
Unfortunately he's complaining about the mere *existence* of checked exceptions. Personally I like them, they're just annoying when they're overused.
I can't think of a time where I've ever cared about throwing an exception if a close() failed. In other languages I don't even bother to check the result. In 10+ years of programming it's never bitten me, although *forgetting* to call close() has. Thus: SomeCloseableThing sct = null; try { // do stuff with sct } finally { try { sct.close(); } catch (Throwable t) { } } The beauty of this is that even if sct was never opened (and is therefore null) you STILL won't throw an exception :)
I'm confused. What do you need a 2D array for? You have one string and you want to create a matrix of n^2 strings? Are the columns words and the rows lines or something?
the columns are rows and characters. it's a seating chart.
You need to give more info on what you want in each dimension of the array - it's certainly not obvious.
so, the important tokens in the file are just characters? You can just iterate through the bytes in the input stream and cast the bytes to chars (assuming they are straight ASCII) and do whatever manipulation you want inline (such as creating a 2D array representation of the filestream). If you need more complex parsing (and the input is reasonably small) you can just create a String out of the byte array : new String(Byte[]) and do regex or tokenization or whatever you want on the string as a whole. For large data sets, you'd have to figure out a way to process the data directly from the stream, which can be a challenge. But that doesn't sound like your situation.
Yes, but you still get the cost overhead of a thrown exception, whereas a nullcheck is very fast. And if people copy your code and put it in other, more frequently-occurring locations, you'll see performance problems. 
The overhead of opening and closing things is HUGE compared to throwing an exception, so I've never really considered it an issue. If I was trying to squeeze every last ounce of performance out of a tight loop I might throw in a null check, but I'd probably try and figure out a way to move opening and closing things out of the loop first. As for people copying and pasting my code... I don't take responsibility for that.
What tragedy? Java supports checked and unchecked exceptions. I love that the compiler can tell me what exceptions I need to worry about, because it instantly tells me several errors that can occur without me even having to think about anything or perform any testing.
I have love for BufferedReader, which might make your job easier. Assuming that your data in the file is organised by line, you call readLine() to get the whole row as a String and then use String's split method to separate out the values into a String[] depending on what your delimiters are. From there you should be able to convert each individual String into a int or double or whatever and put that nicely into a 2nd array if you still need to.
Word!
Thank you. This is helpful. I've been trying to make BufferedReader work - so far without success. I'll try some more. If I arrive at Wit's End, I'll post some code and/or err messages perhaps. 
Dude you suck... I was expecting a joke here! :) Anyway, to answer your question here are some questions 1) What's the example input? Please post. 2) What code do you have so far? You can use http://snipt.org/ to share code with pretty formatting. There are other tools. 
The bartender says "I can't serve you, your out of bounds"
Willing to make an exception?
If you've got tokenized input (tab/pipe/space/comma-delimited), you can use the split() method to produce a String array: String s = "a|b"; //your input line... can be read from a BufferedInputReader, FileReader, etc. String[] s2 = s.split("|"); //produces String["a","b"] But if you're having trouble reading the contents of the file in, try a lil something like-a this: BufferedReader br = new BufferedReader(new FileReader("/path/to/le/file")); String in = ""; List&lt;String[]&gt; toParse = new ArrayList&lt;String[]&gt;(); while((in = br.readLine()) != null) { toParse.add(in.split("your-delimiter")); } If you could post a line or two of the contents of the file you're trying to read, it'd only help us help you :) Happy java'ing!
Pretty neat. The map is too open right now, but the chase and follow is great. You could probably change pacman, the ghost and background into image maps and even animate the ghost and pacman. I haven't looked at the source, so I can't say much, but instantiating the other three ghosts with different colors may be as trivial as creating them at different points on the map, or at different times similar to how they come out of the ghost box in the regular game. EDIT: Oh, before I forget. The original ghosts had different modes of chase, one was relentless in chasing you, another wandered randomly, etc. No idea how that might help though.
;-) 
I don't understand how the author can complain: &gt; Checked exception's also encourage another terrible pattern: exception swallowing. and then assert: &gt; a simple boolean, indicating success or failure, would be much better than an exception Wouldn't an easily-ignored value be much easier to ignore than an exception which must be caught or rethrown?
Only if you catch me and don't throw me out. 
This seems to do the trick for me when I work with level design: http://i.imgur.com/MdEob.png I think I used this method in Microminer recently (check that out too: http://www.indiedb.com/games/microminer).
Getting Voce up and running is a task of minutes. Tried yesterday the "number" example with my laptop micro. Was slower than expected but fast enough. Recognition was ok, only some false-positives, should be better with headset. Voce is a thin-wrapper for Sphinx and it myards configurations. The "reference voice" used for recognition is "Kevin16" ;)
Code review everything *before* committing. This can be hard with SVN, but dead easy with git/mercurial. If you're saying people are committing *in order to run tests* then you need to provide everyone with a test environment on their local machine that they can run before committing. Or, a few spare CI machines that can be switched onto that dev's code branch to run tests before integration. In order to bring in things like this, though, you have to ensure that you have buy-in from your team. If I were you, I would hold a meeting with at least someone from each team to discuss the situation, propose solutions, debate them and then agree on them. Then decide who is going to own the process of rolling out the new changes and when it'll be done by. In a month, have another meeting to see if there's anything else that can be done; you really ought to be doing a different CI (continuous improvement) if you're really Agile :)
I had the same experience playing with Voce and it worked rather well. The main problem I am having is that I can't get it to find where my gram file is. I've tried both absolute and relative paths but nothing is working so I am stuck with the default digits example until I figure it out. I thought the recognition was pretty good, although I had false positives as well. Although there was a delay between me speaking and the text being outputted, I was able to say sets of numbers pretty quickly and it would recognize them.
I'm not converting integers. It's just a text file of characters that I'm leaving as characters. Also, there are no delimiters. Still playing with BufferedReader... Thanks!
First, build machines are meant to be broken. If you're not occasionally breaking the build, you're not working quickly enough, IMO :). Second, get your data fixed. This caused so many problems for us in the test environments. Make sure all your tests are transactional, and roll back at the end (unless you're testing transactional boundaries). At a previous job, we ended up dropping all tables in the database and recreating them through a schema.sql script (which was checked into svn as well), and then we loaded some of the core data in a data.sql script. It's pretty easy to manage in the end, and it helps a ton. Third, have your big build, but start having each team putting their tests into different test groups (I think this started being available in junit 4.4 or 4.5). This way, you have 5 builds: the overall build, and 1 build for each team. If your team's build is green, but the overall build is red, just look for the other team with the red build. If there are no other red builds, then you look at it. But it's a good gauge to see if you fucked up or not If your tolerance for breaking the build is low, ditch Hudson and move to TeamCity. With that, you can send a patch file to the server, it will run a build, and if it fails, it will simply email you. If it succeeds, then it commits that patch to the codeline. With this model, you never actually commit code, you just send patches to the build machine. It's super cool once you're up and running on it. Finally, this is a team thing. If the tolerance for breaking the build is low (and it sounds like it might be, or you wouldn't be asking), then just make it a policy that people need to run the test suite before committing. Get the dev manager involved, and then if somebody is chronically breaking that rule, get some disciplinary action going. Also get some public shaming going. Whenever the build breaks, send an email to the entire team -- and the management layer -- clearly identifying a newly broken build and WHO broke it. Most CI environments can do this, but most are configured to only notify the breaker. Send it to everybody, non-developers included. Make them accountable to the whole company. 
You mentioned that the chapter covers class constants but you dont seam to be using any. Here is my take on it using a array constant to deal with the numbers: public class PatternGenerator { private static final int[] NUMBERS= {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}; PatternGenerator(){ } public void draw(){ this.drawLine(); this.printPattern("_-^-", 10); this.printPattern(generateNumberPattern(2), 2); this.drawLine(); } public static void main(String[] args) { new PatternGenerator().draw(); } private String generateNumberPattern(int number) { StringBuffer buffer = new StringBuffer(); for(int numberFromArray : NUMBERS){ //This is the java 1.5 for loop notation in case you are not familiar with it for(int i = 0; i &lt; number; i++){ buffer.append(numberFromArray); } } return buffer.toString(); } private void printPattern(String pattern, int number) { StringBuffer buffer = new StringBuffer(); for(int i = 0; i &lt; number; i++) { buffer.append(pattern); } System.out.println(buffer.toString()); } public void drawLine() { printPattern("-", 40); } } A few pointers: #1 Java naming conventions dictate that folders/package names start with lowercase letters and class names should start with an upper case. Will save you some headaches if you get into this habit now. #2 Don't be afraid to break code into more manageable chunks. Gould code should be human readable without comments. If you step through my example you can clearly tell what the code does just by reading it. In the main we crate a new generator and tell it to draw something. In the draw method we can see that it will draw a line, then print a pattern 10 times, then print a generated number pattern 2 times then print a line again. Class, method and variable names should be through and descriptive. Learn this early will make life easier. #3 By separating the printing into its own method and passing in what you want to print the code becomes far easier to expand. You also limit the points of failure making it easier to debug should a problem arise. All in all, a very good start though. All of the right ideas were in the right place for the most part.
Thanks, but without a specific suggestion of an alternative I'm left empty handed.
What are your requirements? There are lots of alternatives, but the optimal choice depends on you.
If I had a specific problem then I would be researching it instead of hanging out on reddit :-p. I hang out on reddit to learn things that I didn't know that I need to know.
We use Mercurial and branching to great effect for CI: We have a large number of database and browser integration tests that take upward of 20 minutes to run, so we can't reasonably expect developers to run the entire suite (although they're expected to run the unit test suite) before each push. So we have two CI jobs setup: * CI for the main branch, which is expected to be stable at all times * CI for each push, indepdent of branch, that's not particularly stable So developers push feature branches, which get tested, and then merged in.
I've heard this sentiment echoed a few times. A lot of people are moving away from amq and going to rabbitmq or even a non-jms solution like mongo or redis or terracotta. 
You can't just start emailing blame around; if you're going to do that, then the dev teams themselves need to agree to it in advance (preferably with a mild fun punishment like failcakes rather than informing the CEO). Also, there needs to be someone whose job is ensuring the build gets fixed that can chase up wayward devs, otherwise without an owner things may not get fixed.
via: http://blogs.oracle.com/theaquarium/entry/jersey_1_7_oauth_and
Last year I fell for the hype ( I had only been programming for 1 year, and only knew Java...we had some Java Surf Roadshow or whatever stop at our campus with talks on different Java technologies) I ended up designing a few games, with built-in learning cases, in JavaFX for an undergraduate research assignment. What I found out was that deploying these JavaFX web apps was a lot harder than it should have been. They only properly work in IE, too. It was a neat idea, at the time, but unless they've improved in these areas, no thanks!
Do your own homework. 
a) Only for 32-bit Windows b) Proprietary license c) No source code available d) Requires an account at Oracle's website
Read one character at a time and run it through a loop so it gets put into the array. http://www.seas.upenn.edu/~cis1xx/resources/java/fileIO/introToFileIO.html
I disagree, asking for help with homework is valid. Asking someone to do it for you isn't. This falls into the former category for me.
Checked Exceptions are a huge failure and one of the reasons why Java won't have closures in the near future (if it will ever get closures at all). I have no pity for those who think baking a shadow-typesystem in addition to the "real" typesystem into a language was a good idea.
So you have something like: xx00xx 0x00xx where x is a full seat and 0 an empty seat? The array idea is fine (although you will need a 2d array). To populate your array I would use a FileReader and a BufferedReader. Look at [this](http://www.java-samples.com/showtutorial.php?tutorialid=392) example. As you can see the buffered reader allows you to read 1 line at a time from the file and store it in a string. A string is actually an array of characters which you can access with the toCharArray() method. You could look at these characters and use them to populate your array.
Liking checked excptions ... because it is really great having signatures like public static &lt;T, throws E extends Exception&gt; T withLock(Lock lock, #T()throws E block) throws E or method calls like Locks.&lt;throws IOException|NumberFormatException&gt;withLock(lock, #(){ System.out.println("hello"); });
&gt;I would use a FileReader and a BufferedReader [Scanner](http://download.oracle.com/javase/6/docs/api/java/util/Scanner.html) would probably be easier.
If you post a sample of your data that you're trying to work with, this would've probably been solved for you yesterday. If you aren't willing to do this, then have fun with your homework.
I don't want anyone to do my homework. That's the point. I'm just trying to figure out the best way I should do it. What methods should I employ to get the job done? If I post my actual code (or more likely - lack thereof) then I feel I open the door to actual lines of code suggestions. As awesome as that would be... I don't want that. I'm really just looking for the proper tool. Perhaps if I were near completion of my program, and I had debugging issues, that would be different. But I'm not at that point yet.
Yeah, it sucks :) I downloaded it using login from bugmenot.com. It's possible to compile JavaFX app under Linux (add jfxrt.jar to the classpath), but requires Wine to test...
I think people just want a sample of how the text file actually looks. It's not 100% clear from your description 
JMF instead then? :-P
Wrong subreddit - you are looking for: http://www.reddit.com/r/javascript
&gt;b) Proprietary license &gt;c) No source code available These points make JavaFX extremely dangerous to adopt. I don't trust Oracle not to abandon FX or screw ISVs over with insidious licensing/patent requirements, and only open source (complete with an irrevocable patent license, if applicable) can protect against that. Until and unless that happens, I won't touch FX with a ten-foot pole.
What's wrong with anonymous inner classes? They work just like closures in other languages. Granted, I wish Java had nice syntactic sugar for "new Runnable() { public void run() {…} }" and was smart enough to autocreate *final* copies of things my Runnable needed, but it's not like that couldn't be easily added.
Win32 only? Don't think so then even JMF is multi platform.
Only the beta is win32 only, the full release will be cross-platform.
Don't know why you are being downvoted. It is absolutely time to re-evaluate JavaFX, as 2.0 is completely different to their previous efforts (thank god).
I didn't think that JavaFX was that bad. The industry seems to have opinions on stuff like this. Flash is really competitive. JavaFX doesn't necessarily compete with Flash but it is still an interesting, usable technology.
I'm currently using JavaFX 1.3 to deploy an application in Windows Mobile 6.5, and I'm quite happy with it so far. Still learning, though. It's not easy getting used to the new structure (or a just can't find a proper tutorial, not even those in the JavaFX site)
Looking a little ragged there.
Thanks for the update, will have a peek at it and get back about it. The main issue I have discovered with Video playback is its all 32bit JVM only and doesn't work with 64bit JVMs. JMF, VLCj, FMJ, Xuggler, Gstreamer all currently have that limitation of not working in 64bit JVM's.
Video playback support is the last of my worries when it comes to 64-bit JVMs on Windows, the primary worry being that bloody no-one has a 64-bit JVM installed on Windows (and the secondary worry being that *nothing* bloody works if you *do* have a 64-bit JVM installed on Windows).
ha, a horde of bots already exist. There is no way to have reddit both be open and closed. I'd be interested to use the reddit api if you ever get round to creating it. Or I could just use the reddit is fun one of course. 
I'll try not to.
I have been considering hornetq as a replacement for a activeMQ installation. JBoss seems to have solid products. I have not run any performance tests yet, so I am not sure it is the best alternative.
I know this is old (sorry for the late reply!) but this happened to me in EXACTLY the same way a few weeks ago - my problem was that I had morphological anti-aliasing enabled on my Radeon HD card - if that is applicable, check your settings.
when you refresh it, it goes all sorts of crazy. Just saying
pretty fuckin cool
No.
Do you know whether RabbitMQ can be used in the Blueprint Container?
As in "*I wish I didn't know that now...*" 
Hi, We're trying to use the Fusesource platform (FuseESB) so if there is a good replacement for ActiveMQ in the Blueprint Container it would be good to know before we start down the path. 
I don't.. but I haven't spent any time with Blueprint Container, though (I've spent all of about 10 minutes with OSGI stuff...) 
I've NEVER had a problem with checked exceptions
Not to be confused with the java based Spark XMPP client by Ignite Realtime.
Everything up to chapter 16 and 17 looks valid. The Servlet API has changed since then, probably not a whole lot, and chapter 16 is about code deployment. Not sure what they recommend but I like Maven as a build tool, or you can use ant alternatively. 
Thanks for the info. I'm pretty new to programming, and I'm just curious about one thing. What exactly is Maven? Is it an IDE like NetBeans?
I'd recommend it as a good book to start with.
No, its for dependency management. Maven has a central repository, sort of like apt-get or ruby gems. Most large open source java projects submit their latest jars to the central repository. Some people, like NetBeans opt to host their libraries in their own maven repository instead of using the central one. When you install Maven, it creates a local repository on your machine. You add a pom.xml file to your project, and it has the all of the names of your dependencies and their versions which your project uses. You can also specify other repositories to use. Maven will read the pom.xml and download all the required jars/javadocs/srcs to your local repository. NetBeans comes bundled with maven and a nice set of plugins. It has a special maven project type and has guis for everything. It lets you browse and search the central repository to quickly find what you need, and knows where to look in your local repository for the libraries to link with.
Maven is pain. It's a useful tool if your projects all follow a consistent structure and generate a single artifact each. Real projects don't work that way for very long and it becomes a major pain in the butt. We routinely need to generate a collection of artifacts from each project, like a war file plus a tar ball for the statics to be served from apache. And a jar file, for deploying as a library. And a separate collection of context.xml fragments for updating the database connections without updating the whole app. Maven is a very nice idea, but its limitations may make you lose your mind. Kind of like hibernate.
While I personally agree that Maven doesn't work well in the real world, I'll also caveat this by saying that there are many web sites on the web debating the merits of the two, and we're delving into the religious world, similar to emacs vs. vi :)
Yep. Let's keep religious wars off reddit. :-)
misleading title
Not really, it goes right to the tutorial, written by me, and supported by the [/r/learnandroid](http://learnandroid.reddit.com) community. I figure you can find the subreddit on your own, but just in case, I've provided the link. Cheers!
Update: I seem to be getting a memory leak in Voce's code (crashes after running for about 20 minutes or so, even with destroying/restarting the recognizer in the meantime). Any clues?
That's true. Just read the link, clicked on it, didn't see anything specific to android.
Ah. In that case, you're exactly right. I took a survey at the beginning of the project, and 40% of the people didn't know Java, and 75% wanted a "Java crash course", so I started there. My posts are fairly longwinded, so unless you got to the first post, it would be hard to see how this relates to Android. My apologies. 
Ignore the parts about the J2EE stack. JSP and EJB have changed dramatically since 2005. Skip anything related to ANT and Servlets are they aren't used as much these days. After learning Java, follow up by looking at Spring, JPA and Maven.
Maven doesn't work the way you're trying to use it. This is common. For the easiest 10% of projects Maven is overkill. For the hardest 10% Maven is like handcuffs. While no one *likes* maven, the people who really hate it are in the 20% on the ends. The middle 80% is at best enthusiastically *meh* For the most part, you can't create more than one artifact per project, but you can nest projects via modules pretty deep. We have builds that spit out a pair of EARs (qa and prod) made from a collection of 20+ jars, ejbs and war files. We then use an assembly to make a tarball for deployment. We also set the project space to look like and Eclipse workspace with module refs as &lt;module&gt;../jar1 &lt;/module&gt; People do get maven to work. We have a build server, our own maven artifact server and custom settings and parent poms all tuned to our environment. Our developers have maven, cygwin and eclipse installed by a common script. Project set up is * svn co path/to/project . * cp ./buildconf/template.properties ./buildconf/local.properties * vim ./buildconf/local.properties * ./buildconf/sanity-test.sh local.properties * ./buildconf/make-eclipse-workspace.sh 
On at least one occasion, we've had a talented engineer (who has since moved to Google) spend a few weeks trying to get nested projects to work for us. If you can get Eclipse WTP deployment of Maven projects to work in our environment, I'd give you a cookie.
define an int variable total and when you read the line add the following: String [] numbers = strLine.split(" "); for(String num: numbers){ total += Integer.parseInt(num); } then print total out at the end. That's what I can remember off hand of how to do it.
So I would end up with this? import java.io.*; class TestReader { int sumTotal; public static void main(String args[]) { try{ FileInputStream fstream = new FileInputStream("outSaved.txt"); DataInputStream in = new DataInputStream(fstream); BufferedReader br = new BufferedReader(new InputStreamReader(in)); String strLine; while ((strLine = br.readLine()) != null) { String [] numbers = strLine.split(" "); for(String num: numbers){ sumTotal += Integer.parseInt(num); } System.out.println (strLine); } in.close(); }catch (Exception e){ System.err.println("Error: " + e.getMessage()); } } } I named the int sumTotal and changed it within the code you posted. I get an error though stating non-static variable sumTotal cannot be referenced from a static context
either declare sumTotal as static or put it in main.
Ok Declared the int sumTotal as static code runs without issue now but its just outputting what is in the txt file created by my write code.
*sigh* replace System.out.println (strLine); with System.out.println (sumTotal); and take it out and put it after the while loop
Don't catch Throwable, catch Exception. Error (which is extended by OutOfMemoryError and the like) will be caught in your block, and, honestly, if you're running out of memory, the last thing you want to try to do is to get the JVM to create new objects.
The compiler won't catch a failure to properly handle an unchecked exception.
I don't know about Head First Java, but if Java isn't your first language I can highly recommend "Thinking in Java" by Bruce Eckel. He assumes basic experience in a C-like language (still, there is a review of how the data types and control structures work in Java) but introduces OOP from the ground up. I really like how he points out gotchas and illustrates important points using short code examples. In addition, the book emphasizes good software engineering principles and you'll learn some basic Design Patterns as well.
Ahhh Ok That seemed to get the ultimate output. What I did notice is that when it prints the output its printing the output of each line it adds. So lets say my outSaved.txt has 43 43 43 43 in it. When TestReader runs it outputs 86 172 Is it possible to have it just output the final sumTotal?
Yeah, just take the print statement out of the loop and put it after it's done everything.
Yea I've got basic experience with assembly and C, but zero OO experience. Thanks for the recommendation, I'll check that book out as well.
Good article, except the trend dates back far beyond 2010. It's been cool to hate Java for at least as long as I've known about it, back to 2004 or so.
Why does it always seem that the most confusing thing in my head ends up being the simplist thing in the code. Thanks for all the help!! It runs just like it should now!!
package test; /** * * @author Marty_Lavender */ /** * Read file called out.txt. Print the total sum of numbers in the file */ import java.io.*; // Imports basic JAVA input - output class TestReader { static int sumTotal; // Declares int for sumTotal public static void main(String args[]) { // Trys to read the file outSaved.txt for values try{ FileInputStream fstream = new FileInputStream("outSaved.txt"); DataInputStream in = new DataInputStream(fstream); BufferedReader br = new BufferedReader(new InputStreamReader(in)); String strLine; while ((strLine = br.readLine()) != null) { // Parses each line and adds the totals String [] numbers = strLine.split(" "); for(String num: numbers){ sumTotal += Integer.parseInt(num); } } System.out.println (sumTotal); // Prints the sumTotal of all numbers in the list in.close(); }catch (Exception e){//Catch exception if any //System.err.println("I received a file writing error: " + e.getMessage()); e.printStackTrace(System.out); } } } 
Can I still throw the baby out with the bathwater?
It costs money to convert an entire codebase from one language to another. It's cheaper to just hire a developer and have him patch the system for some new functionality. Someone needs to gather enough evidence in order to convince management that a rewrite is cheaper. That only happens when and if a major roadblock appears that is insurmountable (due to either the language or by code design). In business you use a new language because it will save you money not because it has a shiny new feature or is more "secure" (this is debatable in and of itself). tl;dr The blogger is way off base.
I think most sane people know this. There are some on reddit (as an example) that don't write business applications. So, it is fine to use Haskell to write any application for any NEW type of tasks. It is funny that the bloggers are bashing Java for technology and strategies that Java is targeted for. Those bloggers will look foolish if they recommend use of a language/technology that Java has already had a long history with. For example, I wouldn't recommend that you build a typical online banking front-end site in Haskell (balance history, adding new accounts). But for business applications, there are a wide variety of stable libraries and architectures that you can use with Java .... or now .NET/C#. There are issues with the Java language, but no one is going to spend tens of millions of dollars to rewrite their business applications in Haskell. If you do, you still don't know what you will end up with. Will it be stable? Will it be secure? I love the new popular languages, Haskell, Scala, Clojure. They are all interesting. And to a degree, I would push for NEW code to be written with these tools. But right now, for THOSE TYPES of business applications, Java and .NET are at the top. Depending on the architect at X company, it is possible to call Java a legacy language/platform. And that person could set up a new strategy using new programming language technology. But I still wouldn't feel 100% comfortable reinventing the Enterprise wheel using a language that wasn't designed for the Enterprise. ... One thing that I am starting to step back and thing about. Java and .NET are good for those type of boring web back end business apps. I wonder if maybe the world doesn't necessarily need these types of business apps. I wonder if Haskell or Scala or Clojure or Go or X language could be used with a new business strategies. Maybe not even web based. Or maybe utilizing WebSockets HTML5.
You are right. But I don't think the "new language" will ever make it into the Enterprise the way that Java has. When I think of Java, I think of Enterprise. They two kind of go together. Sun made an effort to push their Enterprise technology on the Enterprise. Now, if something completely new comes out, a new language like Haskell or Scala or whatever might fit in nicely with that new technology. Google is real good about this, creating completely brand new technology. Maybe this new idea isn't even the HTML4 web we know and love (maybe even HTML5).
I wanted to make one more comment. Java might not have the most advanced language features. And Haskell (as an example) might have languages features that make the developer more productive. But there is still some basic functionality lacking that are required in Enterprise. If I am using Haskell, are native Oracle and DB2 drivers available? If not and they aren't mature, then you cut off major databases that companies have spent decades building up. So, I guess the developer will fall back on Java/.NET. Sure the developer could use a ODBC driver and hope stuff works. Or maybe create some web service interface. But already, the developer has to re-architect their app because the programming language can't handle basic database connectivity. Why would he do that?
on the jvm you dont' have to do a rewrite to switch to a new language. 
None of the huge industries mentioned in the post are on the JVM, though.
Hate Java? Then don't use it. 
I think you're very close to the point, but just barely missing it. I missed it for a long time too. People recognize the types of programs that Java and C# or well suited (or at least heavily used) for. A lot of the criticism of those languages is really people criticizing the domain that those languages are used for. Java and C# might be really practical languages for implementing business logic, but at the end of the day business logic is *boring*. There's no glory, and not much money for the individual developer, in implementing a medical claims application or processing banking transactions. There aren't a lot of interesting algorithms to be developed, and the teams are so large that really no one developer can make much of a meaningful impact on the project overall. People talking about how awesome languages like Haskell and Scala and Lisp are really are talking about how much better it is to write novel applications, to develop algorithms or write small projects that can get them attention or help them make money. This is also what causes people to speak ill of programmers who only know Java or C#. People aren't really saying that nobody who specializes in java can be a good programmer, they are saying that someone who only does business applications isn't as good of a programmer as someone who has spent time working on more innovative software. I don't really know why, but it seems a lot of people don't realize what they mean when they talk about how much Java sucks- possibly they do realize it but don't want to say it. I know that I was in the "java sucks" camp for a long time, until I had a discussion with a greybeard who overheard me saying that java sucks and explained the above to me. These days I still think that Java has some deep flaws as far as a language goes, but I also realize that a lot of my distaste for programming Java isn't so much because of the language as it is because of the domains where it's popular.
I don't *hate* Java. I just like Scala better. [](/troll)
We are saying the same thing. And I work in the bank industry and I work with COBOL developers. People don't realize that a lot of financial systems depend on COBOL development. I developer getting his first COBOL programming job in 2005 could still see work well into 2025. Or at least I know COBOL developers that have 20-30 years of COBOL experience, easily. Why? Because financial companies aren't going to rewrite their apps just because some new technology has come out. Not that hard to make some money with COBOL. With that said, COBOL really sucks as language. It is mostly tied to the mainframe or the database backend. Simple stuff like creating variables is difficult and it just looks ugly. File IO, network IO, things we think are simple in something like Java are ugly in COBOL. Java doesn't have closures but it at least it isn't COBOL. But most people consider like COBOL. Java is reaching that level of COBOL stagnation but it hasn't gotten in there yet. I wish some functional programming company (galois?) could really develop Haskell for the Enterprise, then you will see more proliferation of something like Haskell. And scala has a lot of interesting language features but I kind of wish our next popular language moves away from the Java platform. 
&gt; But there is still some basic functionality lacking that are required in Enterprise. If you're using Scala, you can use all the existing Java code, including 3rd party libraries.
Found this post a bit late. I've been trying to get a project off the ground with karaf, using activemq. RabbitMQ isn't java-based (uses erlang). Safe to assume no Blueprint Container support?
Found this post a bit late. I've been trying to get a project off the ground with karaf, using activemq. RabbitMQ isn't java-based (uses erlang). Safe to assume no Blueprint Container support?
Why not just Eclipse + Spring plugin?
via: http://guidewiredevelopment.wordpress.com/2011/06/05/feature-literals-enhancements-blocks-win/
via: http://guidewiredevelopment.wordpress.com/2011/06/05/feature-literals-enhancements-blocks-win/
Thanks. Apparently David Pollack [followed up](http://goodstuff.im/activemq-not-ready-for-prime-time-a-follow-up) with slightly more explanation. I would hope they manage to straighten this out, eventually. 
Thanks. Apparently David Pollack [followed up](http://goodstuff.im/activemq-not-ready-for-prime-time-a-follow-up) with slightly more explanation. I would hope they manage to straighten this out eventually. 
It's also available as a plugin. [Marketplace](http://marketplace.eclipse.org/content/spring-ide) [Update URL](http://dist.springframework.org/release/IDE)
When you say you've visited the java tutorials, I assume you mean [this](http://download.oracle.com/javase/tutorial/)? Personally, I learned Java during my first year of uni, but most of the lectures were just about Object-Oriented Programming. The rest I've learnt by reading through the Java Tutorials, which are actually pretty good. If you take a look at [the Java Tutorial Table of Contents](http://download.oracle.com/javase/tutorial/java/TOC.html), the first thing they introduce are OOP concepts. By doing just the 'OOP Concepts' and the 'Language Basics' parts, you should be able to write a simple command line program which takes input from the user, processes it, perhaps makes a decision on it, and maybe loops until the user exits. This program would be very much against the concepts of OOP though, as it would basically flow from start to finish. If you read the next two parts ('Classes and Objects' and 'Interfaces and Inheritance'), you should be able to make a much more object-oriented program (an exercise we had to do an university was to make an Address Book program, loads of classes there: Person, Address, Email, Phone Number, some sort of IM account maybe). The 'Numbers and Strings' is probably useful in the long run, but most of those are things that you'll Google if you come across the need to do something. 'Generics' is very powerful, but a bit difficult to get your head around at first. I'd suggest only trying that once you feel you've got a solid grip on the rest. 'Packages' should be pretty easy to understand, but unless you're releasing any of your code, or working at a company, then you don't need to worry about it while you're learning. 
A *really really* good book if your just staring out with java or programming in particular is [this book](http://www.amazon.co.uk/Head-First-Java-Kathy-Sierra/dp/0596009208/ref=sr_1_1?ie=UTF8&amp;qid=1307395007&amp;sr=8-1). It's informative, memorable, funny and will get you to grips with most of the fundamentals of java. It's truly awesome.
I feel like most people who are saying this have some previous serious programming experience. As a first-timer with some experience in the concepts of OOP and html-like scripting languages, I feel like I understand everything in the chapter, but at the end-of-chapter exercises I feel a little lost.Eventually I can figure them out but it's usually by hammering them out for real or just exhausting any other possibility.
If your really interested in GUIs then start looking at doing stuff with an MVC framework. These will get you started writing web apps and are the standard way of developing java applications these days. [Google Web Toolkit](http://code.google.com/webtoolkit/) Try this to get going it has good plugin support for eclipse and will let you upload up to ten java applications to Google's cloud. Also there are lots of good tutorials on Google's site. Check out the features here [GWT showcase](http://gwt.google.com/samples/Showcase/Showcase.html#!CwCheckBox)
Did you just suggest someone who doesn't know anything about Java should start with GWT?! *chortle*
You beat me too it. Yes, Head First Java.
Well it was that or repeat something that was already said. Its not that hard you get good tutorials! :-)
Fair enough. I just think GWT is a bit daunting to someone who's never even done OOP.
Check out [this](http://see.stanford.edu/see/lecturelist.aspx?coll=824a47e1-135f-4508-a5aa-866adcae1111). It's 28 lectures from Stanford's Engineering Everywhere program on Java. It includes all handouts and assignments. It assumes you have no knowledge, but advances quickly enough so that if you were to have some basic understanding you wouldn't get bored.
Its a ridiculous suggestion, OP should do a first SWING app using the netbeans GUI builder.
Are there any good tutorials out there for GUI development with Java. Ive been a programmer for 10 years but none of it has been in the GUI realm, so things like data binding are completely foreign to me. I spent last weekend installing the Google Web Toolkit and didnt find many good ones There are plenty Hello World's, but I'm looking for a longer and more indepth, similar to the Sun/Oracle tutorial on Java. ::beer::
Check out this guy on youtube. He helped me to get started. http://www.youtube.com/user/thenewboston?blend=1&amp;ob=5
Came here to post this. I'm about two lectures from the end, and this has succeeded for me where many, many other modes of instruction have failed. The key is to download their Eclipse package and the individual assignments and code along.
Try www.processing.org for a fun introduction to the language
I learned java from the Thinking in Java book (2nd edition back then). It's a good book, on the 4th edition now, but I don't know how it compares to books that have come out in the past 5+ years.
I assume you're being facetious, but that might not be clear to the OP. 
You say you are a chemical engineer. Have you looked at Python? Many engineers and scientists prefer using it for programming, and some build quite interesting GUIs with it. What makes you think "I need to learn Java?" (Genuine question.)
Is Oracle really this jaded to the wishes of their customers and the community? What are they thinking?
They are thinking : "Me like dollar $$$"
By killing java? Treating Java like Oracle DB will just result in more devs wanting to avoid it. And frankly even as a Linux guy if I were to pick a proprietary static typed interpreted language, C# looks a lot more attractive. Of course I'd just move to Python.
You assume incorrectly.
Care to summarize the current issues? Anyone? I understand Apache left the JCP. And I see a few companies bitching about licensing. Anyone want to clear it up for those of us that are unfamiliar with the issue?
I hope they'll introduce a new api high-quality api for working with images. Calling imagemagick from Java is a bit cumbersome. 
That's a fairly interesting question! You should be looking at the [JLS on inner/anonymous classes](http://java.sun.com/docs/books/jls/third_edition/html/classes.html#247496) rather than for final variables. The way inner classes access surrounding fields or variables is as follows: * An inner class can always see static fields of lexically enclosing classes. This is often implemented by the compiler injecting public accessor methods with mangled names ("get$MyPrivateStaticField$1()") for accesses to fields that wouldn't ordinarily be visible, and compiling the inner class to use those. * An inner class defined in a non-static context (i.e. without the 'static' keyword and not in a static method) can freely access instance fields of lexically enclosing classes. This is often implemented by injecting a field to hold each enclosing instance (passed into every constructor implicitly -- that's how you could do "Foo.this.methodA(null)" in methodB() of your example), and, if necessary, injecting accessors for private fields that are accessed much like for the static case. * Finally, an inner class can use final local variables (I use that term to include parameters and exception handler parameters). The most common way of doing this is to create a field on the inner class for each accessed local variable, and initialise it appropriately -- that's why the local variable has to be declared final; it prevents you from changing it after constructing the inner class and observing the divergence of the copied value from the "real" variable's. Armed with this information, it becomes fairly simple to answer your questions. &gt; Does oTwo (and theirby o) ever get GCed? Why? (As in, how does the GC determine when oTwo is not longer being referred to) oTwo is a local variable in methodA; it stops contributing to the GC's calculations of reachability as soon as it goes out of scope. However, because Bar.methodB() used it, it has an implicit final field val$oTwo, to which the value of oTwo was written at construction time. Thus, the object that was originally passed into methodA will remain reachable for the GC ("live") for as long as the instance of Bar lives. &gt; How does methodB resolve oTwo.whatever()? methodA will go out of scope and oTwo are a local (albeit final) variable - so where "is" the reference to oTwo from within methodB? This was sort of covered above -- it becomes a reference to an implicitly declared final field that was initialised by the compiler. Thus, there's no danger of the referenced object being GCd while the instance of Bar is still alive (which means someone might still call methodB()). Hope this helps clear things up.
Just because it's fun to poke about in the compiler's internals, I've re-written your example to be compilable on its own -- now it looks like this: class Foo { public void methodA(Object o) { final Object oTwo = o; methodA(new Runnable() { public void run() { oTwo.toString(); } }); } } We can now use 'javap' to look at the members of the anonymous class as compiled by javac (note that the anonymous inner class became a normal top-level class with the name "Foo$1"): $ javac Foo.java $ javap Foo\$1 Compiled from "Foo.java" class Foo$1 extends java.lang.Object implements java.lang.Runnable{ final java.lang.Object val$oTwo; final Foo this$0; Foo$1(Foo, java.lang.Object); public void run(); } You can see the field "final Foo this$0;" which holds the pointer to the enclosing instance of Foo (accessed in source by doing "Foo.this" in a method of the inner class), and the field "final Object val$oTwo;", which will be initialised to the value of the local variable. If you use "javap -c Foo\$1", you can also see that "oTwo.toString()" has become "val$oTwo.toString()".
Following your reply that this is a serious suggestion, I have to disagree. Netbeans GUI editor, while handy, adds a lot of bloat and its not a good way to learn the language. 
1) the object referenced by oTwo will get GCd eventually. It will not get GC'd until framework will hold reference to the new Bar() instance and that instance is holding reference to the object referenced by oTwo. oTwo itself will disappear after popping the methodA stack. 2) The instance of Bar will get a field referencing the object and the method is invoked on that field. The easiest way to figure this out is to write the class files and to go over the Foo class and the Foo$1 class with javap. Also open http://www.ibm.com/developerworks/ibm/library/it-haggar_bytecode/ in a different tab to understand the opcodes.
Considering Oracles yearly increasing profits..I don't think too many paying customers avoid the DB. And for a business the paying customers are the ones that matter.
Manually writing that layout code is insanity and quite frankly a complete waste of time for someone learning, considering all the other stuff they need to read up on. The netbeans GUI builder allows a newcomer to get quick positive feedback which encourages further learning.
To be honest, I don't exactly remember why I picked Java. I thought I remembered reading some sites a while ago that recommended Java as a first programming language compared to others, but I can't seem to find them anymore. I may have just found The Java Tutorials and thought that they were pretty straightforward and dove right in. If you don't mind me asking, how do you know Python is used by many engineers? Do you work with some who do use it?
&gt;Manually writing that layout code is insanity and quite frankly a complete waste of time for someone learning I really disagree with that. Personally, I hate for stuff to happen without me knowing how. I'd much rather learn about all the different layout methods and such, so that I know what any restrictions are. However, I do agree that a beginner shouldn't be wasting his time on complicated stuff when he's just starting out, which is why I don't think starting with GUIs (especially Swing) is a good idea.
As skills progress then its time to start looking under the hood so to speak.I agree with wanting to know whats going on behind the scenes, but there is a time and place for that. What do you think would be better than SWING? I've seen first year undergrads get to grips with it quickly. Simple stuff like double clicking on a button you have placed creates the method that will be fired when clicked, thats pretty good hand holding. In addition the SWING concepts of containers and widgets spreads across a lot of other systems/frameworks/whatever.
You misunderstand me. Oracle's business is the DB. The DB sales and its a model that works for it. Java is not a DB, it is not even the best language of its kind. Its draw has always been its availability, portability, and commonality. Commonality is already dropping away as client-side Java is mostly dead. By trying to productize Java, Oracle is diminishing its availibility and by driving away Harmony and attacking Android it is attempting diminish its portability. Java is not the sort of thing that really can be a product when you have Python for those willing to go dynamic and C# for those willing to pay. What Oracle should do is give Java to the community and use its position to make their products - Oracle DB, Solaris, and SPARC servers be the best fucking solution for enterprise Java. 
Oracle is trying to kill third-party implementations of the JDK. It is a continuation of Sun policy. Honestly, I don't know why. The only suspicion I have is they are really looking at Android (which has got their panties in a twist for a while).
So what benefit does Oracle gain from the Java ecosystem if they don't "productize" it? At that point they might as well sell it to someone else for the amount they paid for Sun and let that company deal with the community politics and managing it..(or maybe thats a potential end in the google case?). Dump all that responsibility, get paid for it and get all the benefits from truly free Java? Now that sounds more like a business; and they can still make the "best fucking solution for enterprise java". Basically: Free meal ticket did not work for Sun... If you're core product is software..you need to "productize" it IMO, or at least sell it so someone else does the charity work. 
&gt;So what benefit does Oracle gain from the Java ecosystem if they don't "productize" it? Well Oracle's goal at the end of the day is to sell DB (and DB stacks). Java was not the point of the Sun purchase, the point was to build a vertical stack from hardware, OS, DB, and up that they could sell. The gain they see from owning Java is purely on the ability to increase horizontal integration. But this assumes people want to use Java which I'd argue Java's success is largely a factor of it having been free (as in beer). I think it will be hard to convince people to fork out money for Java when Python is free and C# is in many ways a better language. What I think Oracle should do (and what Sun should have) is relinquish control to the community, it really can't be sold (except maybe to Google or IBM) as it is not something that you can make money off of. &gt; Free meal ticket did not work for Sun... Sun was supporting Java always with the hope that people would want an all-Sun web application stack. A lot like Oracle is doing now. &gt; If you're core product is software.. I'd argue that Java isn't software in the strictest sense, it's a language specification, a virtual machine, an ecosystem of software (alot of it open source) but it isn't software in itself and anyone treating it as such be that Oracle, Sun, or some potential buyer is making a mistake.
I've tough a course based on this book before. Some of the content is over-explained, but the format of the book and the order they introduce things is very good. My recommendations: * Skip Chapters on Generics (which covers how to create them before how to use them, which is very much backwards). * Skip chapters on Concurrency, RegEx, Java WebStart, and Applets. Come back to them when needed. You can also order a hardcopy of this book on amazon ([link])(http://www.amazon.com/Java-Tutorial-Short-Course-Basics/dp/0321334205) if you prefer reading from paper.
The companies voting yes but expressing concerns do nothing to advance their cause as they have signaled clearly to Oracle that they will play along in spite of said concerns.
Thank you for a good detailed answer!
And thanks for the bonus info :-)
Oracle itself heavily uses Java. When Sun went downwards Oracle must have considered the risk of them *not* owning such an important piece of software ecosystem. Other members of the JCP board (for example SAP) follow the same logic. They want to sell their own software, and Java is a necessary component, which they cannot allow to fail. The real money in Java is not in selling the JVM per copy, it never will be, the real money comes from those big companies which *have to* pay, in order someone keeps Java alive (and hopefully moving forward).
This. Solves. So. Much. Rage.
Well frickin' done. I'm guilty as all hell of 'far-too-ambitious' one-liners.
Do we really need this same info referencing the blog link that you posted yesterday? 
As a bytecode instrumentation agent, it really wouldn't be too hard to get over the conflicting line number problems. Since you have all the lines available to modify it should be easy to avoid conflicts. It would seem that this would be something easily (and better) handled in the compiler though. Since it doesn't have to deal with the implicit and "secret" bytecodes for things like the StringBuffer in his example, it could make it easy to identify which operation in a list was failing... at least statement-number-wise. The decompiling at Strack-trace time to get variable and function names seems like a nice feature, but it doesn't seem to be something that is absolutely necessary. As long as it said something like "line 13, operation 4" you should really have enough data to fix the problem. (Presuming of course the operation number/order were what you really coded and not the crazy after-the-fact compiler generated bytecode)
You've written 5 sentence fragments on one line. One of them is wrong, but I can't figure out which one. :-)
Download link for developers :) http://www.oracle.com/technetwork/java/javase/downloads/index.html
I share this all the time, but it's always relevant: [Click](http://see.stanford.edu/see/lecturelist.aspx?coll=824a47e1-135f-4508-a5aa-866adcae1111) It's Stanford's Engineering Everywhere Course #1. It assumes you have no prior knowledge, but is fairly fast-paced. 28 nearly hour long lectures are available there along with all assignments and handouts.
This has already been posted: http://www.reddit.com/r/programming/comments/hsf14/adding_meaningful_line_numbers_to_java_stack
I recommend Head First Java. It's a little quirky and weird, but it comes highly recommended. http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208 
Shit now I have to upgrade all my servers again.
Thinking in Java by Bruce Eckel /thread
It is well known in the Python community that many engineers and scientist enjoy using it. Reasons include easier syntax, quick-n-dirty (and efficient) ways to get a simple GUI working, and once you've spent some time setting everything up, really nice library support, to the point some have seriously reduced their Matlab usage. I've been to a Python conference, expecting mostly computing geeks and web developers, and was surprised to see a majority of scientists there. This included a guy who was using Python during Antarctic missions to store metadata related to his measurements. There was also a guy who worked in some kind of absolute-zero lab (with lasers and stuff) and who praised Python for being one technology he could use without becoming an expert on it, and that worked very well in the high-turnaround environment that his lab was (regularly changing graduates, who had not much problem getting up to speed on the Python codebase and making significant contributions). We also saw dental clinic software developed in Python, complete with visualization of some kind of 3D teeth scan. I'm not saying that Java cannot do any of that, of course, but I use both, and I feel Python is certainly easier to approach if you are a single developer or on a small team. I wouldn't use it for offshore development of a big enterprise portal with an Indian team, though. To each his own. Here are some resources I found with a quick Google search: * http://pyinsci.blogspot.com/ * http://www.engineeringwithpython.com/ * https://www.cfa.harvard.edu/~ebresser/python/ As far as keywords go, you should know that numpy and [scipy](http://www.scipy.org/) are the major libraries for numerical and scientific computing in Python (offering the nice Python syntax with the high-speed of optimized C algorithms), several scientists have enjoyed Traits and Traits UI for quick ('n dirty) UI development (when you just need to input a form and display some kind of result). [Python(x,y)](http://www.pythonxy.com/) is a super-installer to quickly set-up a working scientific Python environment on a desktop (including Eclipse with Python plugin, Numpy, etc.)
What's wrong with the Java platform?
Programming in Scala
[Link to release notes](http://www.oracle.com/technetwork/java/javase/6u26releasenotes-401875.html) Not the most exciting release! I was going to post a summary here but there isn't anything worthy of note! Edit - actually looks like there are 17 security bugs that: &gt; could, in theory, be used by hackers to take control of an unpatched computer [From here](http://www.infoworld.com/d/application-development/oracle-fixes-17-bugs-in-java-security-update-488?source=rss_)
A lot of it is geared towards "Enterprise" application development. That includes XML processing, database connectivity, server environments, blah, blah. There is a certain niche for the Java platform. ... If I don't want apps for the Enterprise and I say... want some of the same memory protections but I also want raw speed, better UI system, then maybe I want something else.
Absolutely. Thinking in Java is extraordinarily good.
Finally some good news out of Oracle.
Doesn't harmony continue to get the shaft? Commercial or GPL, two choices still seems pretty closed off to me. Or did I read that wrong? Whats the win here?
This is a pleasant surprise, coming from Oracle, but it's piss in the bucket compared to how much they've been fucking us over. I can *hope* that this is a new direction for them, but I'll need a lot more evidence than this before I'll actually believe that.
I'm not looking to do anything, but from my point of view the ecosystem doesn't seem very much open... JCP members forced to make a vote that wouldn't carry any weight anyway, and very few options for derived implementation. 
Sounds too good to be true.
&gt;**They did asked** JRebel users to provide data based on it being before the purchase of JRebel. &amp;#3232;\_&amp;#3232; 
What can be done about this, other than hotswapping which of course only works in certain cases?
This still does not open up the testing suite required to be able to make proper alternate implementations. So as far as I understand this changes nothing.
In other words, survey done by company selling product X finds that coders do indeed need product X.
It's a worse: company selling product X finds that customers who are about to buy their product actually think the product is useful.
thank you very much
Nice review. Too bad he didn't also include WebSphere, WebLogic, Geronimo, etc (some of the other large AppServers).
There are several assignments that I think requires the classroom book but since I don't have access to that, would I still be able to effectively take in the lesson and know what they are talking about?
Jeez. Yet another way to do the same thing, minus the configuration. Spring MVC (+ heavy heavy annotations) makes me almost able to forget Ruby.
I'm on lesson 16 or so without having done any of the assignments so far. It's very informative, but I feel that I might forget things if I don't start practicing the lessons taught soon. The lectures are independent of the book (although once or twice the instructor will say "If you want to learn more on this topic check out page *blank*) but it's other for extraneous info. It's worth the watch regardless.
What do you feel about JSPs with Spring MVC? I just can't stand JSPs but, with Spring MVC, it beats the alternative I've worked with (JSF 1.1 without spring). Also, I'll plug [spring-data-jpa](http://www.brucephillips.name/blog/index.cfm/2011/3/25/Using-Spring-Data-JPA-To-Reduced-Data-Access-Coding) if you haven't heard of it, because I find it an even better argument for Java/Spring over Ruby/Rails and Python/Django. 
I think JSPs are just fine, provided that I've got Spring form validation backing them (which normally drives me insane, but after having built apps for state and federal governments, I'm loving tightly defined and reusable validation rules). I used some badass decorator lib recently that made JSP dev immensely tolerable (it wasn't sitemesh, but it used decorators.xml). I've bookmarked the spring-data-jpa link. For the most part, recently, I've been using a GenericDaoHibernate pattern, which does the trick remarkably well (despite a pretty considerable ramp-up-time). Edit: So I read that. Well, damn. There's my GenericDaoHibernate. Son of a....
&gt; apps for state and federal governments Small world -_- Nothing much else to add. thanks for the follow-up. What is this badass decorator lib? I've used sitemesh, I'm still on-the-fence about it.
This is super helpful, thank you! So much in fact that I actually emailed the professor and also told him thanks! 
They really need to 'advertise' this more. I had no idea there was a survey...
I always have to bounce my tomcat6 servers to avoid permgen crashes a day later. To combat this I've just setup parallel load balanced tomcats in separate JVMs. Not pretty but okay. This /looks/ nice but will it be the same deal? After 5-10 deploys will I have to force-kill the VM?
Sounds good, I'll give this a try on Monday. Now all we have to do is get rid of the cold fusion :X 
In the article &gt; Your apps must be able to undeploy So if you experience permgen issues right now then you will have the same problems. This *must be able to undeploy* means that you cannot leak memory which is the cause of the permgen issue.
Have you tried to diagnose your perm gen leak? It sounds like you have a classloader leak. 
Thanks for the input. I thought the memory leaks in an application filled up a completely different section of JVM memory? I'll take than I misunderstood, check out our memory leaks (there are some, I know), and see if I can get it to undeploy. Thanks ^_^
We are using hibernate/cglib so I assumed it was related to class generation within that library (I think I've just heard that somewhere online). I've got my code writing abilities down but I don't know much about diagnosing memory leaks in the JVM yet.
Hibernate/cglib shouldn't cause that. You need to get a heap dump and take a look using the Eclipse Memory Analysis tool to work out why you are leaking memory. The most common way to leak a classloader is to have a thread such as a Timer which you don't terminate when you stop your webapp. 
Don't feed the scalatroll. 
that formatter should work for what you are doing.. are you sure the input date matches that format?
When you are a using the letter 'Z' to parse the timezone the expected format is -0700 not -07:00. If you want to use -07:00 you need to add GMT as the prefix so your date would read "2010-10-06T19:44:26.000GMT-07:00" and you can parse this using the letter 'z'.
If the format is always this way you could split the String with a regex expression like "\\\D+". Take a look at [this](http://download.oracle.com/javase/6/docs/api/java/lang/String.html#split) and [this](http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html). After splitting the String you will have an array which should always hold the same type at the same index, e.g. year at index 0, month at index 1 etc.
In a way they do, class definitions, constant pool go into the permgen in Java HotSpot (objects go to the heap). The problem is that these might be large (especially the constants). Another problem is that you need to leak only a single object to actually leak the whole classloader(s) and the static caches they refer to. More information at http://www.zeroturnaround.com/blog/rjc201/
You've got an ISO 8601 formatted date string. SimpeDateFormat doesn't handle them very well. This [stackoverflow](http://stackoverflow.com/questions/2201925/converting-iso8601-compliant-string-to-java-util-date/2202300#2202300) answer is what you're looking for.
Thank you.
Minecraft totally counts.
Java is very rarely running on end user machines. Where java is huge is in the server world. A huge number of websites are running on java. Also, java is big in financial services. Finally, keep in mind that android apps are java based as well. With all that said, I'm not sure that java really is "The World's Most Popular Language", but it does have a large demand. It's also not that innovative and is becoming a bit behind the times. Java is the new cobol: stable, profitable, and boring. Edit: Less suck spelling.
&gt; Java is the new cobalt... Didn't you mean *COBOL*?
No, TCP/IP is not 'programmed'. It's a protocol and not the same thing.
IMHO, Java's strength doesn't really come from running client apps, although Opera is one app I can think of. Java's strength is in enterprise web applications, where it's stability and portability makes it a very appealing platform to write web apps. I think Java's also pretty competitive in the mobile apps market as well. 
OpenOffice is much more in C++ than Java. Java is probably most popular in enterprise, server side applications.
Wait wait wait... Java 7 *isn't* going to have lambdas? What a pain.
It may be worth noting that "popular" means "used a lot" not "well liked"
Azureus (apparently now called Vuze) is a popular bit torrent client written in Java...one of the few Java implementations of BT out there. Eclipse is also written in Java and is probably one of the most popular IDE's available. Come to think of it, many IDE's out there that are Java-centric are written in Java.
Blort... I suck at spelling.
In addition to analysis with tools, you could also setup performance tests. After creating as many requests as possible over a long period of time, it may become obvious where the leak is.
Yeah—Oracle wanted to get Java 7 out the door *now*, not in three years. I just use Scala, where all this good stuff already exists. ♥
I've found joda-time[1] to be extremely useful for parsing dates and times. It has an extremely useful syntax assembler. 1. http://joda-time.sourceforge.net/
Thank you, this looks very handy.
Do you have any programming experience? 
just some really basic bash and python scripting; stuff like "hello $USER" and the Fibonacci sequence.
Browse stack overflow. You will learn more than you wanted to know.
look here: http://www.reddit.com/r/java/comments/fet7w/starting_out_in_java_no_previous_coding/
bookmarked that like a baus. thanks
ah cool, good to know i'm not the only one in this situation. looks like there are lots of useful links in that post. :) thank you
But how is that relevant? No one is dismissing the prevalence of TCP/IP in today's world. However, how it relates to "[r]ead[ing] more about Java and enterprise" is completely lost on us.
Why do you mention Opera?
I was in almost the exact same situation a couple months ago. Granted, I am a computer science major, but I didn't know any java when I started. I can recommend some books. Head first Java is great for getting that introduction to Java and programming in general: http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208 Everything else I've learned from The Complete Reference - Java Seventh addition: http://www.amazon.com/Java-Complete-Reference-Seventh-Osborne/dp/0072263857 Also here are some handy links to keep around. The Java API is very handy to have around. It is basically a dictionary of Java: http://download.oracle.com/javase/1.5.0/docs/api/ Oracle also has some great tutorials to get yourself going: http://download.oracle.com/javase/tutorial/ Start by going through the basics and then head out from there. Good luck with your programming, and remember have fun! It's great fun to take control of the computer and make it do what you want it to. 
Yeah, so why didn't you say all that other stuff first? TCP/IP is just about the worst example you could ever have come up with. It's hardly something that's specific to Java, and I'm pretty sure any implementation you make will be outshone and outclassed by something that already exists.
Should add another that I've been using this past week: Silvertunnel - Tor routing, allows some or all of the JVM traffic to be routed through TOR. https://silvertunnel.org/netlib.html 
thank you
And as mentioned earlier in this thread, Android apps.
Joda-Time is great. xmlunit: indispensable if you need to unit test code that does xml processing. Works like a charm. Honestly I've been able to throw out a bunch of 3rd party libs simply by having groovy (not on the Scala bandwagon yet). Templating, xml parsing, smaller unit tests, etc. 
Selenium.
Apache Commons is almost always in my projects, so that is one I think we can all agree on. As for other things I use regularly? * Hibernate - I use JPA 2.0 with Hibernate as my provider * Log4J - Self explanitory * EHCache - For high performance caching * dnsjava - For anything to do with DNS * Quartz - For excellent scheduling capabilities * ZK - The best way to make Rich Internet Applications IMHO - http://www.zkoss.org/
Besides apache commons, joda time, etc. derby - Embedded SQL database for unit tests or just embedded data storage. Just replaced HSQL with this in my toolbox. [http://db.apache.org/derby/](http://db.apache.org/derby/) Camel - Integration pattern stuff - [http://camel.apache.org/](http://camel.apache.org/). Very nice for describable logic, IMHO. spring-data-jpa - awesome JPA-based data access library [url too long](http://blog.springsource.com/2011/02/10/getting-started-with-spring-data-jpa/) [Mockito](http://mockito.org/) - I don't get to use this one as often, but only cause I sadly put off unit testing. 
upvote for groovy, especially on the xml parsing.
Spring 3 does scheduling quite nice with annotations as well.
[Powermock](http://code.google.com/p/powermock/) - mock those pesky static methods and constructors away! [fest-assert](http://code.google.com/p/fest/) - FEST is usually for Swing testing, but fest-assert can be used separately and is a fantastic fluent interface to assert cases in testing
I cannot upvote hard enough for Mockito. It's a life-saver, especially when combined with [powermock](http://code.google.com/p/powermock/).
Mockito is great! Being able to stub method calls makes unit testing a pretty easy affair. 
[Google-gson](http://code.google.com/p/google-gson/) is nice for interacting with hip RESTful JSON web services.
I'd like to add XStream &amp; Jersey to the list :)
I generally use big chunks of components, such as from the Eclipse ecosystem (EMF, GMF, PDE, SWT); Drools; and JWebUnit. Basically components that involve a number of OSGi packages each.
Java is used a lot for enterprise software. So companies use it develop internal applications used by employees for various purposes. For example when you go into a bank the software the credit advisor is using is likely a java web application running off of the companies intranet.
Thanks for that, might be very useful at work :) 
Have you tried [SLF4J](http://www.slf4j.org/). It allows you to abstract your logging provider (log4j) away behind a common interface (similar to JPA/hibernate). It also provides helpful signatures for getting around the performance implications of writing log statements e.g. avoid if (debugging) {} or similar.
[SnakeYAML](http://code.google.com/p/snakeyaml/) - Makes serializing (saving/loading/sending) native objects quick and easy. Disclaimer: I volunteer for SnakeYAML too.
&gt; When writing your own API that uses type identification, remember that int and Integer are completely different beasts and both need to be included. I disagree. Having a method take an `Object` and then behave differently depending on what type the input has, seems like a Bad Idea and should be avoided at all costs, making it a moot point. Someone prove me wrong, please!
Once you get more familiar with Java you should read "Effective Java". It has some very good pointers how to do things but you need to know all the basics before taking this on.
[GWT](http://code.google.com/webtoolkit/) I find that this makes cross-browser development a lot easier and way more productive. No more JavaScript. Ever. (if you want, anyway) You can also do a lot of very powerful things with it. In browser verification and validation of objects, easy ajax, and with newer versions it understands some JPA concepts and can update the state of those objects server side with very little hastle.
Thou Art Forgiven.
I have, but I have not been pushed to go for SLF4J because Log4J meets my needs so far. I have to use SLF4J as a dependency in my Hibernate/JPA2 stuff, so perhaps I'll begin experimenting there.
GWT is overly complex IMHO. I always try to get started using it, and never make it very far. ZK, on the other hand, is pretty simple to use and integrates well with Eclipse.
I have never used Spring at all...
All kinds of reflection-based frameworks. Generate CRUD for a class? ORM? Default renderer? Another idea: generic mapper/converter, something like Joda's LocalDate(Object). You can pass in LocalDate, String, or java.util.Date, and it just works. And you can register your own converters.
* Spring - Core, MVC, etc. * Hibernate * Struts2 - and tons of the plugins * Hazelcast - Distributed Caching * SLF4J * Dom4j * Joda Time 
So you join the long and distinguished tradition of IT professionals who say "Sure, no problem." during the interview - and plan to google like an Olympian on the job. Just be confident - you can do it.
ZK marshals every event to the server to be processed? That sounds completely unscalable. What has been your performance experience with it? Are you writing apps that are really desktop-like in their interactivity?
There are plugins for eclipse now from google and a GWT designed. I Only looked at ZK briefly. I'll look at it some more today too but it seemed a little too magic. 
* Spring * Log4j * Hibernate * Ehcache * Hazelcast * Netty * Jackson (JSON) * pretty much everything apache commons * Easymock * Junit 
If the person wrote the app using SWT (ie. Eclipse RCP) you are unlikely to ever know it is written in Java unless you see a Java related error. Some to add: * Symphony * Lotus Notes 8.x (7 and lower are primarily written in C). 
Clojure for me!
There are not that many Java applications running on personal computers. It never really took off. In addition to the already mentioned Azureus, Eclipse, Minecraft, I can also add Astah (currently the best UML modeler in my opinion), yEd (an excellent free diagramming tool), Moneydance (a nice personal finance app), Jajuk (a big music library player). There are however many Java applications running on the server side, which is where Java really settled. These are web applications, interacting with users using good-old HTML pages and forms. As someone said, most applications used in the financial sector are done this way. Also, many high-traffic, high-value professional web sites are implemented this way, such as eBay, the back-end of GMail, many retail and travel web sites, tax agencies web sites, etc.
Okay since there is a lot of stuff on here already that is pretty standard I'm going to mix it up a bit * [Geb](http://geb.codehaus.org/latest/index.html) - Great tool for web testing that uses a jQuery like syntax. Built on Groovy and Selenium 2. In my opinion its miles better than selenium and much more intuitive. * [Cucumber BDD tool](http://cuke4ninja.com/) - We have just started writing scenario's using cucumber for java, really good way of working. * [Spring Integration](http://www.springsource.org/spring-integration) - Great for working with enterprise design patterns. Works very well with ActiveMQ * [Spring AMPQ](http://www.springsource.org/spring-amqp) - Great for working with the AMPQ protocol which is required for RabbitMQ for example. * [MyBatis](http://www.mybatis.org/) - A decent ORM for working with db. Best for stored procedures. This works well when Hibernate is a bit too heavy weight. Nice and easy to pick up!
groovy is an awful, awful, awful language. we wrote an entire application in it (~10k lines) and ended up rewriting the whole damn thing in Java because Groovy sucks. in theory, the language is brilliant, however the implementation is shit. I will never, ever, ever use anything from Codehaus in my life.
Not a very helpful or informative comment. Seeing as many folks use Groovy every day in production environments I'd have to say the fault, given no further information, lies with your development group not understanding the strengths and limitations of a JVM-based scripting language.
Meh, I could live without OSGi (probably because I've only needed it once, and we ended up writing our own classloader that was more flexible). The main part I like about Project Jigsaw is that the module system would be applied to the JDK itself. This is supposed to stop the AWT classes from being loaded when you just create a String and print it to the console (which should shrink the memory footprint of the JVM).
I use [Google Guava](http://code.google.com/p/guava-libraries/) **a lot**.
Whatever gets us past the OSGi impasse is good by me. For too long every modularity proposal has been greeted with "This proposal isn't OSGi. We invented modularity. Bow down before OSGi if you wish to pass." and regardless of the shortcomings of OSGi it's been sufficient to prevent anything else from making progress. The wrangling has gone on far too long and is more about corporate politics and control of Java than it is about solving problems.
Well, there are both `add(Component comp, Object constraints)` and `add(Component comp, int index)`... what do you expect?
* Always implement .equals() and .hashCode() when you expect your object to be used in hashmaps and have equality semantics. * Explicitly document when null values are allowed for parameters and possible for return values. * Don't use == for string (and other object) comparison unless you don't mean .equals() (watch out for nulls there too!) * Eclipse (or similar IDE) is your friend, but learn how classpath &amp; such works.
i'll keep that on my future reading list
thanks, i hope so
thank you so much!!
where to start... First, you need to pass the n limiting variable to the answer function. inside answer() you are reassigning the value of the double ~~int~~ x at every loop essentially throwing away the previous results. This means that you need to hold the results of each addition in a separate variable; and not an int. Also the x incrementer should start at 2 if you want the first fraction added to 1 to be equal to 1/2 (1/x). And you are missing brackets in some places and have unnecessary ones in others. As for the message regard "x" cannot be found, the message should point you to : System.out.print(x); in the main function which doesn't contain a declaration of x anywhere. [This](http://pastebin.com/y1DG95Xe) is what I think you were trying to do.
* In Java, all variables have scope. This means that they are usually only visible to the block of code that they are declared in. This means that `x` is only visible to your `answer` method. Also, Java does something called Garbage Collection. This would likely free the memory used by `x`. * Another issue is that I can't see where `y` comes from. I assume that it should be that value of `n`. You need to pass the value of `n` to answer in the form of a parameter/argument. * One final issue is that your for loop is using `x` for several different things at once. You're trying to use `x` as the iterator *and* as the total. A fixed version of your code would be: public static void main(String[] args) { System.out.print("How far should the series go?"); Scanner console = new Scanner(System.in); int n = console.nextInt(); double result = answer(n); // Provided variable for the return value to be caught in. // Also passed the limit to answer so it knows when to stop. System.out.println(result); } public static double answer(int limit) { double total = 0.0; // Use a variable to keep track of the total so far. for (int i = 1; i &lt;= limit; i++) { // 'i' is our iterator. total = total + (1.0 / i); } return total; // Return the *value* of total. } **Important:** You clearly do not understand the concepts behind basic Java programming. I fully recommend that you take the time to properly learn how to code in Java before attempting to write programs. It's like trying to run before you can walk. Once you have gone through a fairly comprehensive tutorial, come back to this and try to understand why I made the changes that I did. Doing so is important. I shall leave you with a final tip that can prove very useful: *use more descriptive and informative variable names!*
god help him..
You're right. I didn't even notice that. Yet another reason why I would call it a poor API. Demanding an Integer while there is a completely different overload for int?
Most programming isn't personal computer based, that's just how the general public think of it. I know Ericsson in Sweden is using a Mix of Java and C++ to run the huge mobile phone pre-pay systems around the world. They are currently undergoing a huge port from the legacy C++ to Java. Likewise the local Swedish Telecoms use a lot of Java to run the backend portals. Also there is Android app developement. (How I'm currently paying the rent) 
Some tips It's kind of shocking just how much googling goes on when professionally programming. Get used to it. Buy a copy of "Effective Java", just having it on your desk at work will make you seem professional. Bonus points if you actually have read it :) You are probably better to spend time learning how to use the IDE than learning the arcane bits of Java. (Auto complete is your friend). Knowing the keyboard short cuts for build and compile will also make you seems much more professional. I have both "core Java 1 and 2" Horstmann &amp; Cornell and "Thinking in Java" Bruce Eckel. Core Java is good for referencing on how to do something, "Thinking in Java" is good for why to do something. Head first books tend to be very good also. 
Why do you want to run three JVMs sharing memory in different VMs on the same physical machine instead of skipping the virutalization and run just one JVM directly on the physical machine?
The java tutorials are really helpful, it includes short descriptions and examples of basically all the basics you need to know.
good coverage
More stuff: * Familiarize yourself with the contents of java.lang, java.util, java.net, and java.io. Then read through the method listing of classes that look interesting. This will help pre-load your knowledge of the standard libraries. * Write against interfaces when you can. Prefer them to abstract classes. * Strings contain *characters*. InputStream reads *bytes*. Readers read *characters*. When in doubt, use UTF-8 encoding of characters to bytes (and vice versa). Oh yeah, and read up on Unicode. * switch/case uses ==, so don't use Strings, etc. there. * Use immutability whenever possible! This will vastly help reduce threading issues.
It's definitely asking for trouble.
&gt; Thus there is a variable named "x" somewhere in the vast emptiness of my computers memory waiting to be called on. Not as soon as control passes out of the block in which x was declared.
I have a feeling both of your replys will so valueable that I put them together, printed them out, and tacked them to the inside wall of my cube. :)
hey that ain't bad at all. needs sound. couldn't shoot http://sourceforge.net/projects/mochadoom/
I think this choice makes sense to programmers who are deciding between which market they want to pursue a career in. Java is good for Client - Server development, web development, and mobile development on the Android. C# and .NET is the king in Microsoft Windows. Objective-C is a must for any kind of Apple development (iOS, iPhone, iPad) 
Robot probably isnt going to be very good for anything practical. But I had a lot of fun with it as a teenager by writing tools to automate the playing of games like runescape, and getting high scores in flash based arcade games. 
A lot of backend enterprise business applications and platforms run in Java, mainly because of their portability you can run them on any platform where as lower level languages require much more competence to avoid common bugs and the code and libraries are platform specific. On the other side of the coin it is slightly faster then scripting/web-based languages that can run on multi-platforms but has the same advantages with its built in memory management and security features make it possible for even the most clueless developer to write a fairly stable multi-user application (well, more likely to anyway). That web site you connect to to pay your bills or check your account status on is likely running on a Java application server that can easily plugin into the data base and mainframes that the companies' operations are built on since there is a lot of middle ware available for Java to allow it. I like the earlier comment, its basically the new COBOL of the business world, but without the headaches or restrictions that make COBOL so hated and limited.
looks like it might be okay for screen scraping or writing macro's.
Why isn't it going to be practical? I see lots of possibilities, what is the problem? Forgive me, I'm still a noob on Java.
You might have better luck with AutoIT if your goal is to automate other applications.
I've used it to automate interaction with a website form when it was too complex to [mechanize](http://search.cpan.org/dist/WWW-Mechanize/lib/WWW/Mechanize.pm) (too much JavaScript). About a decade ago I used something very similar to Robot to automatically play a Flash game, because the reward for making progress in the game was pictures of a woman in fewer and fewer clothes. Notch, Minecraft creator, [used it to clean out his Gmail account](http://twitter.com/#!/notch/status/57595966802493441). Despite being a really cool idea, there's really not too much use for it. It also doesn't help that it's crippled by the annoying way KeyEvent is implemented -- you'll see why as soon as you try to use Robot for keyboard stuff. 
I guess what I meant is that for any given task there usually much better ways of accomplishing it then scraping the screen and simulating input. 
From the thread: &gt; The version in the CVS actually has sound (music, sfx) but it's still WIP and has several problems (no positioning, sfx volume is not always set, buggy channel reuse/chainsaw and other sounds handling etc.), since David's "driver" was just good enough to plug in and work, but missed all those features As for "couldn't shoot", do you mean that mouse buttons did not work, or shooting did not work period (no matter if done via the keyboard or mouse)?
Start [here](http://download.oracle.com/javase/tutorial/) it's straight forward and youll like it. Onec you have this down you probably wont need a cert
I like http://www.javapassion.com/ 
Really sorry for you. A lot of people seem to get caught up in the for-profit education schemes, no fault of their own. Unless you are getting Java certification [directly from Sun](http://www.sun.com/training/certification/java/index.xml?intecmp=1395) you are probably going to be wasting your time and money on Java certification. Also, have you seen if there are any Java courses offered at local community colleges?
[Java Black Belt](http://www.javablackbelt) has tests, courses and coaches if you need them.
writing marco's what?
I'd suggest you get [the SCJP book](http://www.amazon.com/SCJP-Certified-Programmer-Java-310-065/dp/0071591060) and try working through it yourself. Some Java user groups have study groups you can join if you really need help, check out if there is a group near you. 
bluhhhh I'm on drugs. ok ya the shooting with the mouse works just fine now. It wasn't the game, it was me. Will mess with sound if possible.
I am planning to take a class in about half a year during Winter quarter. I want to get used to how to write it. Although how to think Java will be handled by the class. Thanks for the help. :)
I've asked this question before, but... which jobs out there actually require Java certification? I've never seen one, never worked for one, and never met anyone who did.
ASAIK if you got federal financial aid then the college was accredited. This means that if you have a BA or BS you can enroll in a graduate certification course (or go for a M.S.) at a real university (and go deeper in debt if you want to). This could take as little as a year and a half. 
Why do you need that course? Better buy "Thinking in Java" by Eckel and "Effective Java" by Bloch. I personally don't prefer certified specialists to non-certified when interviewing.
As simple as that---------you are getting error because the variable 'x' is declared inside the answer() method and you are trying to print the value of variable 'x' in the main() method.........The main() has no idea about variable 'x'.............so it is better that you declare 'x' above main() inside class fractionsum i.e. as an instance variable.....
`HTMLTree`? The myriad XML APIs weren't good enough?
I once wrote a WoW fishing bot with Robot. A poker bot would be a more complicated and fun project. The easiest way to read the number would be to get a BufferedImage from a robot screen capture, then check specific pixels for their colors
I've been writing my own engine using just AWT, it's pretty straight forward. AWT now even includes a really good implementation of double buffering, and I don't have any performance issues whatsoever. I'm sure there's a billion existing engines for 2D Java games, but I prefer working on the backend :)
You aren't going to get used to writing Java without knowing how to think Java. I'd recommend either being more proactive and going through a Java book or waiting until your class starts. Guessing can lead to some very nasty habits that will come back to bite you in the future. Incidentally, I've noticed a bug in my code. `double total = 1.0;` should be `double total = 0.0;`.
Swing is enough but it's clearly not designed to do games. I think [Slick2D](http://slick.cokeandcode.com/) is pretty much what you want. 
This is very true. I've done this as well and couldn't believe the performance, I'm talking full screen HD sprites with sweet masking and transparency effects everywhere. I've even gone as far as adding a 3D layer using 2d elements (think super scaling effects found in old sega arcade games). Now I'm actually developing a full game using nothing but this. 
Check out [Java Gaming](http://www.java-gaming.org/index.php) which is an active forum dedicated to developing games in Java.
Also look into Launch4J. It lets you make a nice clean launcher for the Windows platform with icon support and run time arguments for when your are done your game (Use Xcode to do this on the mac).
Swing is OK, but like others in this thread have mentioned, it's not really that great for making games. Still, I managed.
Swing is widgets. 2D games are not widgets, in the main. However, they do have widgets (menus, buttons, etc), and for all that part of it, Swing is much better than AWT.
Don't fall for this. I'm sorry to say, that while AWT may not have any performance issues on YOUR computer, it doesn't mean it won't on others. I've made complete full featured games using Java, so let me warn you... AWT is not cross platform. It uses native things, so when you go to test your finished product out on other computer operating systems, you'll be shocked to find performance hits and differences you don't want. With AWT, you are basically sacrificing the best thing Java has going for it, cross platform ability. ... Swing has all the same capabilities, perhaps harder to understand and use, but it is truly cross platform and it performs just as well on any OS.
Just stick with Swing, which will give you double buffering automatically. It has great performance by default. Read about the Java 2D API. Understand these classes/interfaces and you'll go far, * java.awt.Shape (and the implementing classes in java.awt.geom.*) * java.awt.Graphics2D (make Graphics2D operate in your model's coordinates, not vice-versa) * java.awt.geom.AffineTransform * java.awt.image.BufferedImage (and read about compatible images) * javax.imageio.ImageIO But before getting too involved with Swing, though, make sure you understand [Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller). That is, make sure you understand what's going on when `repaint()` is called. Sadly, sound is nowhere near as nice to work with in Java, and is a bit of a mess. So if you want sound you'll have to invest time in working out your own solution. Edit: Oh, and one last piece of advice. OpenJDK's Java 2D performance is usually crappy until `sun.java2d.pmoffscreen` is set to `false`. With that fix, except for some minor quality differences, it gets pretty close to Sun's JRE. 
Isn't swing *built* on AWT? I would think if one had the cross-platform issues you describe, both would. 
Yup. Swing is built on AWT.
Thanks for the heads up, but I expected as much. (I wouldn't expect any different on any other platform, too.) Unless the slow down is many orders of magnitude, it should be OK. And yes, AFAIK Swing is built on AWT, so Swing would have the same problems. And to clarify: I'm only really using AWT for a Canvas. All the other UI stuff is just handy and can be replaced (for free) if necessary. (See: SWT, which is faster than both AWT or Swing on all supported platforms.)
I remember when I first tried a Java game engine (5-7 years ago), performance was miserable. It was a toss-up between 24-bit sprites and alpha transparency. Things are much better now :D Yay another Java game developer :D
Note that while the steps might be correct, the sentence "Version 1.6_22 is the most recent update with security fixes." is outdated. The most recent version is 6r26, and you *should* update to that, considering it's a security release.
But an `Element` can contain an `Element`, whereas a `HTMLBody` can't contain a `HTMLBody`. At least, that's what I hope they meant.
Same here. I found a flash game where the win/loss ratio was &gt; 100%, and I just left Robot running all night. Came back the next day to a lot of free credits :DD
I found this looking to silent install 26 on my systems
I'm developing a game currently using Slick and is is actually extremely nice. It is backed by LWJGL ( Lightweight Java Game Library) so it has support for OpenGL and OpenAL if you need it. 
Neat, I will script this for deployment in Altiris and see how it goes.
If you really want a job that interests you, call or email them back and chat with them about what you're really interested in. You'll get some pushy ones who absolutely don't get it, but you'll also build relationships with a few good ones, one of whom will eventually pay off and find a good job for you. You'll also eventually learn which emails you can make a filter for and the phone numbers to ignore.
I would take the time to talk to them, take down notes, find out who they are and who they represent. A lot of company's now rely on recruiters exclusively to find talent. Eventually it will get to where you can tell from the first 5 minutes or so to see if they are wasting your time. The other thing you could do, is start picking companies headquartered where you work, visit there HR page, and see if they have anything, or submit a application anyways. You never know what you may turn up.
Monster has had many issues with granting full read access to it's DB. I think I've received 3 notifications in the past year, and I haven't updated my resume there in 3 years.
I'll give another positive vote for Slick. It's a fairly minimalistic api, but easy to work with. 
IIRC, you can remove your resume from public view in your personal settings. Until you do that, it will show up in all applicable search results.
Seriously, manage this and make the most of it. Give the most priority to direct customer/client/employer contacts though, because in the end, they're who the recruiter hopes to place you with anyway. Work with a select group of recruiters after that, like 2 or 3. Establish a relationship with them, meet them in person, tell them what you're looking for, and contact them periodically after that. If you get any bad vibes, terminate that relationship and move on. Be a little ruthless; it's your career. Good luck and if you would care to post some more details about where you're looking for work geographically and your specialties, you might find some solid leads come out of here.
I hate to break this to you, but no one is getting anything directly from Sun again. Ever.
You can't delete it, and when they repeatedly lose full database dumps of everyone's information on a site there isn't much you can do.
As my recent boss said: "When something goes wrong, I want one neck to choke"
Not sure why folks continue to use it. It diverged a long time ago for something meant to simplify the build process and became an end to itself. Still waiting for someone to come out with a tool to simplify maven :)
yet another +1 for Slick. It's really fun to work with and nice all in all. Libgdx is a bit off-topic, but that's quite nice too, though aimed for Android stuff.
Negatory, Swing is not built on AWT... that is the point. Swing uses completely Java code. Also, you'll still be surprised to find that even if you only use the components as canvases, they'll still look and perform differently on different platforms.
Negatory, Swing is not built on AWT... that is the point. Swing uses completely Java code.
Swing is built entirely in Java, based upon the 1.1 JDK Lightweight UI Framework. So yes, those of you who downvoted me haven't a bloody clue. Grab a book sometime people and actually learn something. Better yet, how about you make two versions one using swing and the other AWT, test them out on different operating systems, and find out exactly what I told you.
Hmm... I just tried it. Yes, you can. Furthermore, there are privacy settings on each resume. Those seem to work too. It's been a while since I've used it, but it's pretty much the way I remember it.
What should the method actually do? What parameters should it have? What is the expected return value?
it should be like this rotateMatrix (int[][] m, double degrees) then you put in a 2d square matrix, number of degrees (lets say 45) and you get your answer so, if its like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 rotating it 45 degrees clockwise should give X 5 2 X 9 10 6 3 14 11 7 8 X 15 12 X Where X is the corner pieces that were lost .. 
So do you know what the expected input would look like? How would you declare the multi dimensional array? For when you will eventually test it.
What happened?
All I know is that the input matrix will be square. I'm not entirely sure what you mean by 'How would you declare the multi dimensional array' But I should say where I put the X, they would actually have a value of 0. So the size of the resulting array will be the same as the input array. 
Weird, there is only one subscriber to http://www.reddit.com/r/domyhomework . I imagine he doesn't get a lot of takers. 
Sun is Oracle owned. In order to get the equivalent of Sun certification, I believe you should google "Oracle University". They might be the place to go. Edit: [This link should be the place to go](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=3&amp;p_org_id=1001&amp;lang=US)
Alright so it looks like the multidimentional array should be coordinates. Taking into account this is how you declare a multidimentional array: int[][] m = new int[4][4]; m[0][0] = &lt;a number&gt; what would that declaration look like 
Well I guess int[][] returnArray = new int[m.length][m[0].length]; is that what you mean?
Are you aware if one of them has more industry weight than the other?
So what would the rest of this declaration be: int[][] m = new int[4][4]; m[0][0] = 13; m[0][1] = 9; m[0][2] = 5; m[0][3] = 1
You mean between Sun and Oracle? I can't imagine people would differentiate since it's all Sun, subsidiary of Oracle now anyway.
Ok, you're right; Swing is an extension of AWT but the core rendering code is Java 2D.
check out http://www.copypastecode.com/72952/ There is at least one bug in there for you to find if you want it to work properly. The main steps are: * Create the matrix that needs to be rotated; * Create a matrix to hold the result; * Iterate through each spot in the new matrix and populate its value, using the math function that you were provided 
If by "delete" you mean "remove links too but is still in their DB" then yeah. You can delete it. :) 
this is amazing, thank you so much
Actually, I'm talking about the quite literal and very plain looking 'Delete' link that you can click in the Actions menu for each resume. Do they keep it in their database after that? Maybe, I don't know. But if you'd stop being difficult on purpose, I think you'll see that it does what I said it does.
I've been using the NetBeans Maven plugin, and haven't had any big problems. I think Maven is great.
Oh, they made a *type-safe* object model for HTML? I guess that makes sense then.
:)
I'm sorry, but this sounds like a homework question.
http://lmgtfy.com/?q=java+applets
parse them like a champ 
I found the answer yes it is. example [Java Collections](http://www.docjar.net/html/api/java/util/Collections.java.html)
Not only is it alright, it's also recommended. Actually, since most of the Javadoc is inserted as-is in the HTML output, you *should* have a valid HTML snippet there (I'm thinking especially of characters such as `&lt;` which should be written as `&amp;lt;` unless they are part of some markup).
... are you just telling me that you used spring roo or were you planning on sharing some of the code or something.
Can I confess total ignorance of 'Lock' here? I've been writing Java professionally since 1999, and I've never actually seen it in code. Maybe we're all in the habit of using synchronized() anyway, and, as such, Lock has pretty limited uses.
The root of the Swing widget hierarchy, the JComponent, is a subclass of the java.awt.Container which is a subclass of java.awt.Component which is what grants the AWT access to a native window handle for the OS it is running on (the peer object). The Swing frame hierarchy, JFrame, is also a descendant of the java.awt.Component class. So yes, Swing is built atop AWT, in so much as that is how Swing gains access to the underlying OS window drawing handle. But Swing does not use native peers for widgets, it draws them all directly using Java code. So it is a hybrid model much like the current HTML5 Canvas, where all widgets are rendered by direct line drawing routines.
Apache. Commons.
It's new to Java 6, I haven't played much with it either.
This is *especially* important if your @author is formatted: @author John Smith &lt;jsmith@example.com&gt; because if that goes to the webpage without `&amp;lt;` and `&amp;gt;`, the whole e-mail including the angle brackets will be interpreted as a tag and become invisible.
I do it all the time, all the time. Using `&lt;code&gt;true&lt;/code&gt;` instead of just `true` just makes my code feel cleaner, you know? Also, things like lists are almost impossible to do without HTML, and it's not like HTML isn't human readable.
Locks have a bunch of extra functionality that you normally won't need. You should probably read the API spec but chances are you'll be fine with good ol' synchronized blocks most of the time.
Good for you.
In most situations where you really just want to limit access to a section of code to one thread at a time, synchronized will do fine. In situations where you want more control over the locking, Lock may help you. I've used Lock before in a situation where I wanted to dole out locks fairly (at a performance cost). It's also got a way to non-blockingly (yay, made up words!) acquire the lock, or wait for a specific amount of time for the lock. Because it gives you more control (you manually have to unlock), be sure to read the JDK docs thoroughly and put your unlock() calls in finally blocks.
According to "Concurrency in Practice" by Goetz, section 13.2, ReentrantLock is faster on jdk1.5 than synchronized and but it's not that much faster in jdk1.6. On a more important note I am not sure the author understands what he is testing when he is comparing a mutex to a ReadWriteLock. The point of a ReadWriteLock is so that there can be multiple readers but only one writer, which is different than a mutex. Edit: I stand corrected I should've been more careful reading the code. However if there are a lot of threads involved ReentrantLock is actually faster. $ java LockVsSync 10000 50 sync: 188 lock: 31 sync: 109 lock: 31 sync: 125 lock: 15 sync: 125 lock: 15 sync: 125 lock: 31 
words to live by!
Did you have a link to throw us? A YouTube video, or screen cast, or presentation or something like that? 
I think he accidentally [this link](http://blog.mgm-tp.com/2011/06/rapid-prototyping-with-spring-roo/) Also, I'm not sure why he discounts Grails for having to learn Groovy. As an experienced java developer, it only took me a couple hours to get comfortable with Groovy itself. From my experience, learning the Roo CLI commands and hidden AOP features was a bigger learning curve than learning the Groovy/Grails conventions.
Java... Android... not going to die 
Java, maybe. The JVM? Doubtful.
Java and .Net really depend on Oracle and MS. Oracle could start charging for the JVM on webservers and you'd probably see developers flee quickly. MS may kill .Net support with Windows 8 and you'll see developers flee from it. Established languages of a place in the world as long as their corporate entities keep supporting them. 
Nope, not yet. So long as code is being actively written and maintained in these languages/platforms then they're not legacy. I don't see any reduction in the amount of new code for these two platforms in the industry and I think java especially will be heavily used in 'the enterprise' for decades to come. 
I had a teacher who was loosely porting C++ code to Java, which featured locks. This was the first and last time I have ever seen a Java programmer using locks over synchronized.
I know plenty of companies moving FROM php/python/ruby/etc TO java/.net. It's easier to find developers, the software is often more predictable, and the tooling is top notch. plus, managers and architects find it's an easier sell to the executives, and if you set things up right, there is a very robust ecosystem at your disposal. 
This is a very sad argument. Component and Container are not considered AWT components themselves. Simply because they have the same event model does not mean swing is built upon AWT. Lastly, what definition do you guys think your using for "built upon"? The way you guys are using it, makes everything built upon an integer. "That class uses an integer, so it must be built upon it!" The point is, it doesn't use any native code for it's components. None of it is built upon awt. And I hate how this "built upon" argument is parroted so often without any purpose besides trying to confuse the above people as it just as. Tell me, what was their reaction to hearing the words "built upon"? Wondered immediately how could Swing not have the same problems as AWT, since the term built upon doesn't freakin mean use the same base class. And the last time I checked inheritance enables one, for the most part, to completely rewrite the underlying code. The reason why it was extended, was because they use the same event model, which in no way makes it "built upon". So while they have a lot of common behavior, they are not implemented at all the same.
Let's answer the question with another question that has the same answer as the question they posed: Does InfoWorld take the higher ground and refrain from posting articles with inflammatory titles?
Yeah, no kidding. RoR is particular seems to be a great way to break into a market with a functional prototype, and when it finally tips over, they just rewrite in C# or Java/Grails (I've seen both) in order to get the platform support benefits. Actually, when you think about it, it's a great way to go. I believe Paul Graham advocated for a similar use for Lisp as well given his experiences.
About frickin' time. Color me innerested.
It's like gay sex. It's completely fine to do, I'm just not really into it myself.
Yeah. I actually took part in a PHP-&gt;Java transition, and we GAINED a ton of performance, a ton of reliability, and the tooling made the extra cruft far less painful. Additionally, the pay is commensurate with those ideas. I almost never see ruby/python developers in the 100k range, but it's fairly frequent for java and .net developers. 
"If I'm right, and application development is heading toward a model based on clients plus the cloud, then neither the status quo of today's enterprise platforms nor their lumbering pace will serve enterprise developers for long." Excuse me? Would you like to back that up? Because to me, if you are right, them Java and down the line C# are closest to that model. The answer is, no, they are not. Until there is a decent widespread alternative, they will not. And there isn't.
&gt; MS may kill .Net support with Windows 8 Huh? Why are you saying that?
It's worth getting to know java.util.concurrent and subpackages if you do multi-threaded stuff. I have been asked questions around it and the Java memory model at my last few interviews for server-side work. Lock and Condition are handy for performance critical stuff; the [Condition Javadoc](http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/locks/Condition.html) giving an example of how it can help. Things like the Executor framework and atomic variables are just really helpful.
They're not. They're just not going to move forward with Silverlight and some related technologies.
Yeah, I know startup guys can rightly say that RoR, PHP, etc. can scale as far as .NET and Java, and they're correct to say that, but only in the right environment. From what I've seen, a solid operational environment is just a lot harder to build without all that "enterprisey" stuff they like to put down. Say what you want about the enterprise, but it puts operational concerns very high on the list, and many other things (e.g. a productive programming environment) take a backseat.
No
equally scala (at least version 2.7) runs on the CLR
&gt; Oracle could start charging for the JVM on webservers and you'd probably see developers flee quickly. What are you basing this on? If you are referring to the charge that Oracle put on the premium JVM, that is basically paying for support. 
Netbeans does this straight away, Eclipse does it with the [window builder plugin](http://code.google.com/javadevtools/wbpro/index.html). You will not find a java dev. environment as straight foreward as Visual Studio though.
Probably not what you're looking for, but I do all my Java coding, professional and hobby, in Emacs ([tweaked](https://github.com/skeeto/emacs-java) to [be](https://github.com/chuwb/yasnippet-java-topcoder) efficient [with Java](http://code.google.com/p/yasnippet/)). It won't get you started in anything right away because you'd have to learn Emacs, nor is there a visual GUI builder (not a fan of them), then you have to learn how to use any extensions that were added to make Java manageable. But I'd recommend it as a long-term skill investment. 
Jetbrains IDEA. You're welcome.
If you're asking this question then you probably shouldn't be making a site like mint.com. You shouldn't ever be writing your own libraries for encryption/decryption. Read up on encryption. Keep your private keys private...
Props for Window Builder, it's really drag &amp; drop for the design &amp; hookup.
I think the previous statement needs to qualified. I haven't used Visual Studio for Visual Basic, so I am not able to comment on it. Visual Studio is absolutely horrible for C++. Eclipse for C/C++ (on linux) is much better.
I understand encryption quite well thanks having worked on a top 5 e-commerce store. Difference for them is that they dedicated security teams and constantly monitored production servers. I don't. Point still remains. If my production servers are compromised. Someone could write a Java app which calls the methods in the decryption JARs to decrypt the password stored in the DB. No ? I was looking for a solution that didn't involve me encrypting and storing the details in the DB myself. 
It all depends on what you're used to. Visual Studio seems far less straight forward to me than Eclipse.
I'm prepared for the downvotes, and although the majority of my experience is with Eclipse, and I absolutely stick with Eclipse no matter what, I've come to believe that both NetBeans and IntelliJ IDEA are better development environments, and particularly for GUI dev. The only reason I don't convert fully is because the the effort vs. reward ratio is too high.
Wow. Emacs. Just wow. After having taught myself proficiency in vi back in, 1994-1995, I swore that I'd teach myself Emacs. I poured about a month and a half into it, and, honestly, I hit a point where I recognized the power, but wasn't willing to put any more effort into it (at the time, I was simply doing sysadmin work, and I could get most of what I needed through vi, and writing custom perl). I've got a handful of friends who are die-hard Emacs devotees, and I understand why they prefer it (after a certain threshold of being 'invested in' Emacs, they can make magic happen). I commend you for it, but would recommend learning it to the weak of heart/spirit/bowels.
The decryption libraries *plus the private key* will allow access to the data. So as long as you keep your private key secure then you have nothing to worry about with people who have access to the encryption libraries/algorithm.
&gt; Someone could write a Java app which calls the methods in the decryption JARs to decrypt the password stored in the DB. No ? Yeah I'm pretty sure you shouldn't have your job.
If you're using AWT, Swing or SWT, I would highly recommend learning how the layout managers work by doing everything in code first, and then use a visual designer - the typical Java approaches are pretty different to Visual Basic.
&gt;I understand encryption quite well thanks having worked on a top 5 e-commerce store. Difference for them is that they dedicated security teams and constantly monitored production servers. I don't. Right, that means sweet fuck all. Just 'cause you've fixed a few bugs for a "top 5 e-commerce store", doesn't mean you understand encryption. In fact, the two don't necessarily go hand-in-hand; you're just trying to be arrogant. The fact that you have to ask this question means you either haven't bothered to look properly, or don't possess the skills to work out what knowledge you need to answer the question - or, put bluntly: you don't know what you're doing. Anyone with half an ounce of experience here would know that they'd have to start with public/private keys. Secondly, if you've got half a god damn clue (which you don't) you'd probably already be aware of initiatives like [PCIDSS](https://www.pcisecuritystandards.org/security_standards/index.php) which the industry is moving towards (and which says you can't store the details you're talking about unless you know what you're doing, which you don't). Last and not least: please don't do what you're going to do. You'll save consumers, the legal system, the media and anyone else who gives a shit, a hell of a lot of time. Leave it to the professionals.
Plus a lot of our fun new languages compile for the JVM: Groovy, Clojure, Scala, JRuby...even without Java, the JVMs would live on.
You don't need anything else than Eclipse. **Ever.** Don't do the visual editing (I assume you're writing some UI stuff?). You should learn it yourself, and get good with the language not a tool. Otherwise you'll spend much, much longer getting comfortable with the language and with Swing, and you'll end up abandoning the visual editing anyway.
You shouldn't be using their financial data for anything except making it easier for them to checkout during subsequent transactions anyway right? In that case, why is this information even on the app server? The app server certainly isn't executing the transaction. It's just a front-end. The only thing you need to store there is the fact that you have the cc# on file and its last four digits (for identification of the card and/or card selection by the user). The app server should be in a DMZ and should communicate with the middle tier through a very strict and minimal interface (e.g. http/xml-rpc or similar). The middle tier would treat the application server as "untrusted", establishing a trust boundary between them. Obviously you should have a firewall there with only port 80 open. Use the STRIDE method to evaluate the security threat model of the cluster.
I dig eclipse deeply. just recently started using "window builder" for my gui stuff. plugs right into eclipse. works great. I recommend it. http://www.eclipse.org/windowbuilder/ also, beyond one or 2 buttons, screw "doing gui by code". Visual editing is where it's at. 
The staement is more about the whole thing (which is more than just an IDE). From my experience, setting up Eclipse/Java, producing a workable GUI application you can ship to a user for installation is a far more daunting task than VS/.NET. So far I've not encountered any major nuencances with C++ in VS vs Eclipse C/C++ though, just from the IDE perspective, bar the project/workspace model of Eclipse, I've not yet mt anyone that finds it intuitive. 
Apparently, it emerged in Java 5. But, still, apparently it's slow to be adopted.
NOTE: Starting June 22 with Eclipse Indigo (Eclipse 3.7), Window Builder will be built into Eclipse. http://www.eclipse.org/indigo/
skeeto!!!!! Im getting into emacs in a big way for various editing tasks including python and lisp with swank / slime. I'm a java dev by day and I've yet to get jdee working. I'm using emacs 23.3 with built-in cedet and this seems to be a jdee disaster. I read through your setup for java-mode-plus on git. I can see emacs has lots of potential. Trouble is I never get past the initial productivity speed-bump of not having package name completion. I know most of the jdk pkgs in my head but java has so many extraneous libraries it's not feasible to rely on my memory alone! I see you use dabbrev-expand - I'm using autocomplete which does help for variable names but not for importing a class for the first time. *Any* advice much appreciated.
oo I was wondering when Indigo was gonna come out. I will definitely be checking that out, thanks.
Bite the bullet and learn to do swing in pure code; it's well worth the effort. I recommend learning the Grid Bag layout. It's not the easiest but it allows for tons of flexibility.
Just started using IntelliJ at work and completely love it. I used eclipse all through college and IntelliJ blows it out of the water. Incredible auto generation of code
By that logic, if those "top 5 e-commerce stores" had be compromised, what would have stopped someone from writing "a Java app which calls the methods in the decryption" library (via JNI if necessary) to "decrypt the password stored in the DB"? There's no real difference between your previous 5 scenarios and this one. So if you had an effective security design for those 5 scenarios, why can't you apply the same security design for this one? Honestly, the question doesn't even have anything to do with Java per se.
You can try jGrasp. It's pretty useful when you're doing lists, trees, etc
Dr. Java is you want simple.
Agree totally. IntelliJ really *is* something different.
I work in a very large code base (in millions of lines of code) and I just switched to IDEA from Eclipse. Quite honestly, its amazing. Things like code completion that would take 45 seconds in Eclipse take 2-3 seconds in IDEA. I would definitely recommend trying it. 
This has nothing to do with the IDE, why don't you just learn how to program!
As far as IDEs go, I've not yet come across anything that comes close to Visual Studio, especially for Linux. You're just going to have to either get comfortable with the switch, or stick with Visual Studio.
It is seriously amazing. I switched a few months ago from Eclipse, and it's really just a lot better all around in terms of performance and features. It's so nice that they have a free version now.
I think IntelliJ IDEA is nearly as good as Visual Studio is. The autocomplete is amazing.
How much is it? I've never tried it.
Package name completion is provided by java-docs. Just point that at the root of any Javadoc hierarchy and it will learn all its classes. Then you can use `add-java-import` -- anywhere, since it will try to put it at the right place at the top of the file -- and it will give you a nice ido prompt (assuming you load ido-mode first) to select a class to import. With that in place, dabbrev will have a new item to refer to when completing. There are also a couple of YASnippets in there that use java-docs for completion, and definitely room for more. If you get more into extending Emacs, I'm sure there are other neat uses for the java-docs database, too. 
I've used Netbeans for the last few years since the Matisse editor became built in and it works straight away. I've recently been using Eclipse due to changing jobs and do switch between the two regularly and have looked into the WindowBuilder plugin. The major advantage of the WindowBuilder plugin is that it will work with 99% of existing java code either hand cranked or from other visual editors. I've tested this with older projects and this feature is amazing. Saying all that I've only ever used both on Windows.
The free version is nice, but if you're doing professional development, it's worth the $200 to get a personal license. 
They have a community edition that's free, but it's missing some features that might be more useful for some types of development -- i.e., it's missing J2EE support as well as support for some other languages (e.g., Ruby, Python, etc). 
&gt;I really want to like Java but it's prohibitively hard to do things that I could do really simply in other languages. Welcome to Java &lt;/snark&gt; 
AFAIK PCIDSS has nothing to do with this. I am not storing credit card details but rather online banking details. And again you haven't actually provided any help at all. The private key must exist on the server in order to decrypt the database field, right ? So how do I secure the private key ?
How do I secure the private key ? It needs to exist on the app server right ? If the app server is compromised how can I ensure that some hacker can't decrypt my DB.
Thank you so much for the help. Really appreciate it. Will definitely take it on board. The issue in my case is that the app server needs to interact with remote servers so will be exposed to the wild. I guess I will just have to look at this situation as more of a hardware issue rather than something the J2EE platform can help out with.
The difference between them and me is that they have dedicated staff for investigating intrusion attacks and hardware security devices. I won't have that luxury. It has to do with Java in that I remember their being Java solutions that would manage confidential data that wasn't a DB and would provide OTP security between itself and the app server. 
Pretty sure for drag and drop widget placement, visual studio is objectively better: windows can decree a fixed look and feel, and so has a much simplified layout manager system, whereas with swing, the same code has to adhere to multiple l&amp;f requiring a much more difficult to automate layout manager. 
Try using maven build you an example project and then turn it into an eclipse one with mvn eclipse:eclipse. I'm afraid though coming from VB you will find it very hard to get familiar with the Java environment and how things work. Eclipse is the best stick with it!!!
In a plain text file.
Similar to how Twitter switched from RoR to Java?
There are educational licenses too I think
NetBeans has always done everything I've wanted it to do and more.
Great example. I hadn't been following that. Anyway, RoR still has it's place, but I don't think it's going rock the web development world any more than it has at this point. It's nice that it spurred Java web development forward though so we can finally get some progress on programmer productivity through complexity reduction there.
The others are telling you the truth and it sounds very much like you lack the experience to be tackling this alone. For what it's worth, as a non-expert, if I were tackling this problem, I'd not actually store the private key, but store the XOR of the private key with the user's plain-text password, (or other login credentials.) That would be the password that you never, ever ever store in the database as plain text, right? So without the user logging in, you couldn't even access the confidential data. You still wouldn't be secure if the system were compromised at the root level, because there are several other ways they could get access to the data in a running process of an active user-session. But it's a start.
IntelliJ IDEA is what you need. it's wonderful.
Try processing! www.processing.org
Please stop what you are doing. You haven't got a clue. 
The free version has a lot of features that should be enough for most people, but to get everything (languages besides the major JVM languages and other plugins) you have to pay. The free version came out within the past year I think, it used to be pay only and at the time I wondered why anyone would pay for a Java IDE when eclipse exists. Now I know why.
Mhm, I'm just a student hacking around so I don't need to pay, but I seriously would if I were to do it professionally. Not because I need the features, but just because it's so good that I feel like I should pay for it.
I'm using Eclipse and also I've tried Netbeans or Intellij several times but I always come back to Eclipse. One reason is that it's the only one that looks good on Linux (it's much better integrated with gtk) but the main reason is that being the most popular IDE, it always gets more love than the others from the various frameworks and languages. The last example was Scala: intellij is developping their own Scala support, while Typesafe (the company behind Scala) is developping an Eclipse plugin with at least a full time employee.
Hmmm. Interesting. I guess the best thing would be some kind of tight integration with maven. With intellij they have their own plugin (as eclipse does) which produces a file the ide can read in order to comprehend the pom. Would be great to do: $ mvn emacs:emacs Then have java-mode parse the resulting TAG-like file and auto-complete based on the jars found in the local mvn repos. Plus the ability to jump to the source tag.
Well that does depend how much AWT you are using. You can just use AWT to draw your own bitmap and do the rest yourself via hooking into the application frame. Yeah its a pain and yeah you are own your own. I didn't like swing either from a game coding perspective, I ended up writing my own. Well into double digits with writing gui's now (started on the C64).
AFAIK Swing is not dead. The quotes you might have seen probably related to the 'Swing Application Framework'. The benefit of Swing for cross platform development become pretty substantial during deployment where you don't have to ship native libraries along with your app.
I've used Swing and SWT from time to time, and they seem to do most of what I need.
First of all, the fixed look and feel for windows in Visual Studio is only because WPF is only supported on Windows operating systems... so yes, of course the language and its layouts have an inherent simplicity because they only support one system. That's hardly a feature of the IDE. The Android WYSIWYG editor in Eclipse, for example, is far superior to anything I've seen in Visual Studio for editing mobile UIs... but I'd hardly use that in comparing the two IDEs because it's apples to oranges. Secondly, many if not most Swing applications only really need to care about the default L&amp;F. Unless you're doing really non-standard things (which is probably a bad user experience most of the time anyway), you really won't bump into too many limitations. Thirdly, this comment wasn't necessarily directed solely at the IDE's capabilities as a WYSIWYG GUI editor. It was about whether or not it's generally straightforward to use for application development. Personally I've found Eclipse, IntelliJ, NetBeans, and JDeveloper all much more straightforward than Visual Studio. Fourthly, there are plenty of plugins that can do WYSIWYG GUI generation for Eclipse. If you want to get snarky about "well you need a plugin so that's not really part of the IDE" then that's fair, but it's almost criminal that Visual Studio has such broken unit testing tools that you need plugins out of the box (at least, such has been my experience). In my opinion, you have to take the whole IDE ecosystem as part of your evaluation. The whole line of reasoning, frankly, it a bit out of whack because it's scoped at a widget editing system to evaluate the entire IDE. I think it says a lot about the simplicity of Eclipse that there are efforts to port many other languages (Scala, Ruby, Python, etc.) for use in the environment. There may, of course, be similar efforts for Visual Studio that I'm unaware of... but again, that brings us back to the fact that it's pretty subjective which one you prefer in the first place. There are clearly people that prefer both.
I'd switch tomorrow if I didn't find the Ivy and Mercurial parts of it to be pretty broken. :(
Java/JEE/Swing programmer here. If your target consumer base are home users, ignore Swing because the UX Swing provides is very poor. However if yo must use Java, then Swing, SWT, and JavaFX are probably the only popular options you have. Qt Jambi is another possibility. But if you Java is not a must, I would either use Qt or Real Basic. I haven't used either one :D but Qt apps are famous for running very smooth and looking very native.
Have a look at the "[Netbeans Platform][1]". It has a steep learning curve (I'm currently studying it myself...). But it's really worth it. From my short experience I can say though: learn, and understand [all of the basic APIs][2]! The platform offers you a rock-solid framework for desktop applications. I find working with it is really fun. As it's based on Swing, you may also want to look at [SwingX][3] which contains a couple of useful components (JXTable is really useful). [1]: http://netbeans.org/kb/trails/platform.html [2]: http://platform.netbeans.org/tutorials/nbm-10-top-apis.html [3]: http://java.net/projects/swingx
Most complaints about Swing stem from the improper use of it... generally caused by the lack of research (I don't blame anybody, it is a mess to use right). How well have you tested your code on other platforms? The simple act of painting a box using the awt container instead of the swing container has problems on a different OS. Although you might get around that by only using the bitmap function. While I love reinventing the wheel as much as any other programmer, writing my own gui with a proper event model is a bit extreme for myself. Although it sounds like it would be kind of fun now that you mention it...
Let me just state a couple of things, to set the tone for the rest of my message: 1. Eclipse is my favorite IDE. I use it in my day to day development by choice. 2. For six years, I wrote Eclipse plugins for a living. I don't have the snarky "Oh, you have to use a plugin, so it doesn't count" attitude. 3. I participate (lightly) in the development in Eclipse. I've sent in bug reports, and a couple of patches that have been integrated into the main trunk. 4. I turned down a job when I found out that I would be required to use Visual Studio essentially for my entire career there. I told the guy interviewing me that I'd really prefer to work in Eclipse instead. &gt; First of all, the fixed look and feel for windows in Visual Studio is only because WPF is only supported on Windows operating systems... so yes, of course the language and its layouts have an inherent simplicity because they only support one system. That's hardly a feature of the IDE. [...] In my opinion, you have to take the whole IDE ecosystem as part of your evaluation. I think I *am* taking into account the "whole ecosystem" of the IDE, and in fact, the wider implications of the language itself when I made that assessment. Specifically, Java GUI work will probably always be harder than Windows GUI work because of the multi-platform nature of Java (which naturally entails multiple look and feels). Given the OP's self text, that he is basically a "VB" guy, and what he wants is drag-and-drop widget placement like he's used to in Visual Studio, the main message I wanna tell the guy is: Eclipse isn't gonna be as easy to use as VS in that regard. I agree with ratatask's conclusion "You will not find a java dev. environment as straight foreward as Visual Studio though.", where I interpret "you" to refer to the OP. I find Eclipse easier to use than VS. You do too. But the OP probably won't.
Depends on what you mean. There's millions of lines of Java code out there that is "legacy". But Java development continues to be the most popular platform, close tie with C. 
You can also use {@code true}. Not as redundant and is faster to type.
I would absolutely recommend SWT to get a good native experience. WindowBuilder is included with Eclipse Indigo which comes out in a couple of days. That will provide a visual UI builder. SWT does require native libraries but you can package these into your app: http://stackoverflow.com/questions/2706222/create-cross-platform-java-swt-application/5784073#5784073 P.S. MigLayout works well with either Swing or SWT to control the layout. 
I was under the impression that swing was going to be phased out in favour of JavaFX without the FXScript although they haven't got round to making it cross-platform yet...
Yeah, Swing not looking native at all is pretty frustrating to me. Part of the reason I was thinking of using Java is just cause I'm more comfortable with it from the cross platform perspective. I mostly use C/Java type languages (syntax wise) and currently don't have a linux box I can run/compile code on, so I figured I would try out Java.
You have just made my life.
http://www.thenewboston.com Simple, quick, distilled java wisdom. Among other things.
Yes, the NetBeans RCP is great. It does have a steep learning curve, but once it all clicks you can do some damn fine things with it.
To get a native look on any platform with Swing, put this line of code in your main() before your first Frame is created: UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); Read more about the Swing LookAndFeel systen [here](http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html).
you mean 1.0 / i ...
Ah, of course. That would have been a fun bug to find. This shows I should probably pay more attention to the code I write.
These are a good start: [http://www.thenewboston.com/?cat=36&amp;pOpen=tutorial]() 
Looks like you're trying to create a Swing app. [This](http://download.oracle.com/javase/tutorial/uiswing/) should be pretty helpful.
Came here to say this. Bucky is brilliant and explains stuff so well even I understand it!
In Order * Head First Java * Thinking in Java * The Java Tutorials online * Essential Java * Java Generics * Java Concurrency in Practice Not Java centric (once you get your sea legs) * Code Complete * The Pragmatic Programmer * Design Patterns * Introduction to algorithms (Cormen, Leiserson, Rivest, Stein) aka CLRS * Refactoring: Improving the Design of Existing Code. * Gödel, Escher, Bach. * Zen and the Art of Motorcycle Maintenance
Also, * Learn a SCM (Git, Svn, Bzr, Hg). * Learn Junit and Log4J * Learn Maven * Learn Spring.
That's awesome, had never heard of that.
That's how it goes with Swing. You can always do what you need to, it's just a matter of reading through the tomes to find just the right way to chant while throwing the chicken bones. Really, it's no different from any other UI framework.
Thanks, Clippy. 
I didn't even realise you could use that, I guess because it's not used in any of the Java APIs. Awesome, thanks!
I know SVN integrates very well with Eclipse; not sure about the other things but I use git manually and it's fine.
I just got a chill hitting :w in eclipse...this is amazing.
The Bitmap only method works just fine on Windows 95, 98, XP, Vista, W7 and iOS. Writing the gui wasn't too bad. I have written it to be easily back portable to C so getting it into Objective-C for iPhone won't be to hard. I like the idea of initial cut and etc as a Java application then optimize to C if the speed is needed or part of a platform port.
Brilliant—a crappy add-on to a crappy IDE that emulates a crappy editor.
Let me guess. Emacs user ?
The mercurial plugin [MercurialEclipse](http://www.javaforge.com/project/HGE) works pretty well. I'd assume there is a git version that is equally as good.
I do Java development on a Mac using IntelliJ and the usual tools like maven etc. I have never had any real problems. The Java ecosystem seems to be geared towards development in unix like environments, so I think you will actually find things are easier then on Windows. I haven't personally run into any JDK issues.
Once you know Swing (or whatever toolkit you want to use) you'd be daft to not use a visual editor, especially the one in Netbeans is very very nice if used correctly.
Coming from both Windows and Linux, I've been developing Java web apps on my mac for 4 years now. It's by far my favorite setup. I use the Eclipse IDE. For Java 6, Apple provides a JDK, which is automatically installed on a Mac. In the future, Apple will not be providing a jdk. OpenJDK will fill the gap. I've blogged a lot of my tips and tricks developing with Java on a Mac over the years if you want to check it out: http://obscuredclarity.blogspot.com/
I highly doubt that's going to happen, not anytime soon anyway, though Swing has been receiving somewhat less attention due to JavaFX lately.
I thought Apple were still going to be helping OpenJDK (or whoever organizes that) to provide a JDK for OS X, they just weren't going to bundle it in?
Up to this point Apple has been providing (and bundling) java for OS X (it's preinstalled on Mac now, but won't be in OS X 10.7 Lion). Going forward however, Oracle will be the provider of Java for OS X (Open JDK project will be the reference implementation and will probably be the official Java for OS X). Apple has donated most of their code to the Open JDK project (except some GUI stuff), but there is still a LOT of work left to do there. I would not expect to see Java 7 available for OS X at least 1-2 years after it is available for all other supported platforms (just like when Apple were providing the JDK. They were notoriously slow to make the current version available). After a couple of JDK releases (perhaps JDK 8 or 9) OS X JDK release might be in sync with other platforms. 
From what I understand, Oracle is going to organize/coordinate OpenJDK for Windows, Linux, and Mac. OpenJDK will be the official Java SE 7 Reference Implementation. Apple is going to donate their Java 6 JDK to the Mac-OpenJDK project and the open source community is going to port it to the Java 7 specification. Here's the official project page: http://openjdk.java.net/projects/macosx-port/
I've been doing Java development with both Eclipse and IntelliJ on Macs for the past 3-4 years. It's a great setup, that I'd highly recommend over Windows. You get your POSIX terminal (which I couldn't, personally, live without), and you can also run all those Microsoft enterprise-y apps you need day-to-day like Outlook and Word.
Seems like a lot of opinion and little fact in your statements on the time table. 
Why don't you take a look at the project status and give a better opinion? http://wikis.sun.com/display/OpenJDK/Mac+OS+X+Port+Project+Status 
Looks like it's coming along just nicely. I guess you can determine the time frame from your intimate knowledge of the number of team members and hours committed. So, what's it like being a member of the OpenJDK team? Oh wait, you're probably not even a java developer, just a Winblows troll.
Sure pal. I work on OS X as my primary OS, and most of my work is Java. But anyway, I don't know why I'm wasting so much time on morons on Monday morning. 
OH no, name calling! You've certainly won this one!
That's not really an option if you can't run the full gamut of web browsers.
I don't need to thankfully. We don't support IE at the moment because it's not capable of executing the application, and because it's a pure back-office app we can mandate that we only support Firefox/Chrome/Safari quite easily - and our customers have been perfectly happy with this to date. Going forward we're going to need to support IE - obviously - but by then we can easily say IE8+ and have a decent enough testing department to cover that - including access to VMs that run IE for developers to test their developments on...
I've been developing web apps for the past 8 years on a Mac. I have not found this to be a problem. I build very rich web applications and build to the spec. Once I get it working well in FF/Chrome, I boot up a Windows VM or use a test laptop to workout any IE bugs. It usually doesn't take me long to get them worked out. Even if 10% of my time is working out IE bugs using a non-native environment, I'm so much more productive the other 90% of the time for pure development that it's worth it.
Trolling eh? I'd think his assessment based on that project status and history seems pretty reasonable to think 1-2 years...it would be very surprising to see a release in under a year considering the magnitude of the code.. If you look at what Oracle posted...osx is not one of their 3 primary target OS's and the speed at which enterprises migrate from java versions that doesn't seem unreasonable. Developers that really need 7 can use http://code.google.com/p/openjdk-osx-build/ until an official release or build it themselves.... 
The status page is rather telling on when it may be released: http://wikis.sun.com/display/OpenJDK/Mac+OS+X+Port+Project+Status Apple has already donated their Java 6 implementation to the OpenJDK project, but it'll be a while until its officially ready. I was talking with some colleges last week about this as we are worried if we will even have a JDK on the mac with Lion coming out in July. Oracle has a quote on their website about when it'll be released: &gt; Q: What about Mac OS X? &gt; &gt; A: Oracle and Apple have previously communicated that we intend to work together on an OpenJDK port to OS X. Based on the OpenJDK port, Oracle will release JDK binaries. This will be done some time after JDK 7 GA. We aren't ready to share any date yet.
This question seems to come up weekly, with the same answers. **IDEA:** A moderator needs to side-bar one of the many "Getting Started With Java" posts, so when this topic comes up again it can just be referenced.
No operating system can run the full gamut of web browsers so it's a moot point. Windows can't run the Mac versions of Safari, Chrome, Firefox or the Linux versions... If you're serious about cross browser/cross platform testing the only good answer is having test boxes set up. VM is also a decent option. Besides, Java development itself tends to be back-end services to support a UI.
The best advantage that mac has over Windows is pure unix at the command line. Both Eclipse and Intellij mac versions work great. In the past Mac's have been a bit behind in Java versions since Apple was responsible for putting them out. For example, Java 6 on the Mac lagged maybe up to a year behind the Windows version. That hasn't bothered my shop at all since the Linux Java version also lags and we use Linux for production. Will be interesting to see if there's any speed up in delivery of new JVM versions now that Apple is out of the JVM game. RE Java 6: Snow Leopard comes with Java 6, we've been on it for some time now. Apple has said that JDK 6 will be the last JDK they'll support and that Java 7 on will be supplied by another party. This doesn't mean that macs won't be viable Java development machines, just that Apple itself wants to get out of the responsibility for developing and maintaining JDKs.
That's true, but there are bigger differences between browsers than there are between the same browser on different operating systems. IE is still very much a nightmare for develop for.
Just got messaged this, check it out (the yellow lightbulb section): http://www.google.com/support/a/bin/answer.py?hl=en&amp;answer=33864 Good for Google to be putting their mighty weight behind this sensible policy.
In theory it's a great ecosystem. Lovely desktop GUI, powerful terminal, great Java support. In practice, not so great. Macs are an afterthought for a lot of Java software, and in particular SWT's flakiness on Mac hurts badly. There are a few screens that I can make mess up in Eclipse every time, in some very strange and annoying ways. I've also observed some seriously weird SWT bugs as a coder, and it *is* a lot harder to find support for specific issues on a Mac than on Linux or Windows, purely due to market share. My experience with having to use a Mac at my job for the last six months has completely changed my outlook on developing desktop applications. I was previously using Java + SWT as my target audience is on a mix of pcs and macs (not so many on linux), but I've realised I just can't give the Mac users a good enough user experience. So, I'm probably going to be switching to .net - without Macs, I'm only targeting Windows, and C# does fix some of Java's headaches.
I would recommend finding an open source project that interests you and helping with that. This will give you more relevant real-world experience in several ways. 
I'm using eclipse Helios and it is working great. It took me a little while to get used to the shortcut keys vs windows. 
Thanks for the suggestion, I have never gotten involved in an open source project before? What would you recommend as the best way to get involved in one?
Get a vm like parallels/vmware for testing. 
To be honest, I'm too busy with my own pet project to contribute to any OS efforts so I can't tell you the specifics of the process for getting involved. I'm sure it will vary from project to project. Since you're just getting started, I would try to find one that encourages some form of tutelage between the developers so someone can show you the ropes. You might want to try a self post in /r/opensource, or just search the archives as I'm sure there have been similar posts on there in the past.
Of course if you are an IBM WebSphere developer you might be a little disadvantaged
Port to or port from? I assume to.
I would _love_ to reimplement LaTeX in Java. But that's a significant 2-year project with no commercial value whatsoever. _sigh_
gedit, jEdit, Nano, IntelliJ IDEA, NetBeans IDE. To hell with both Emacs and vi.
You could easily port wget / curl but I don't know if you would gain much from having a port of those. E.g. what would you do a Java version of wget? Same with graphviz/dot. But then again, I am sure there could be uses for such things. I wouldn't mind a Java version of grep. I want to be able to covert the grep-java to a swing based tool. I want tools ported to Java for two things, interface through Swing or SWT. Also, I want to be able to integrate Java based code into my Enterprise webapps. I wish there was a Jython based version of numpy. If it isn't available already, I wouldn't mind the xpcom and mozilla apis converted to java so I could easily embed a robust web rendering engine into a swing based app. I wish... Java hotspot was written in Java at least an experimental version. 
A browser. Oh why oh why isn't there a mainstream open source web browser written in Java? I mean seriously, if the browser was running the JVM already, then a zillion other things could also run in that JVM, with proper JVM sandboxing and security. Not just javascript, but python (jpython), ruby (jruby), nice, scala, java itself, of course. All this dynamic web stuff would be dead simple. Hell, for "web apps" we wouldn't even still have the stupid "web" part of it, it'd just be remote apps, written in powerful programming languages, as god intended. Two objections: 1) it would be a memory hog. Yes, somewhat, but this would be offset by allowing all these different apps to run in the same JVM. So much of JVM memory bloat is that each java app runs in it's own, with it's own heap and all. In this case, the browser would be running the one JVM that's needed 2) it'd be slow. Well, except not really. Google and Mozilla put shit-loads of effort into making their browsers fast. Do the same with a Java app and you'll be plenty fast. All the effort you save in not having to worry about so many cross-platform issues can be spent improving performance as well. 
I was the same as you, liked linux best, but my boss at my new job got me a mac without even asking me. I don't like macs, but it's vastly superior to windows. A million little things annoy me compared to running Linux, but it's all forgiven because there's bash and unix underneath it all. The only real problem I have, and it's highly specific, is that when I use JFreeChart on the Mac to graph hundreds and thousands of plots, it can take 10 *minutes* to render the plots. On old windows machines lying around that no one uses it takes 2-3 *seconds*. WTF? It's annoying as hell because I have to do a lot of graphing.
Gah. The one I'm working on right now. PHP makes me weep.
*so far all I've come up with is to make an invoice tracking system.* Oh you poor thing. Please don't do that. I've done that before. Please no. The deal with home grown projects is, you need to ACTUALLY ENJOY doing them. Otherwise, you'll stub out some code, make a moderate amount of progress, decide 'that's good' and move on. For instance, I wanted to teach myself scala, so I wrote an algorithm to calculate the amount of inbreeding in the Spanish Royal Family, based on any two persons, and the maximum number of common ancestors/siblings/descendents. I'm a sucker for family tree problems, like, I was once asked how many (and which) ancestors would it take to be 2% of one ethnic origin (woohoo, go write a program!). Alternatively, write a damned good tool (at my last job, I wrote a git-to-clearcase merge tool in Python), that actually makes some other part of your life 'objectively better'. That way, each time you use it, you'll see new things in it that you'll want to, and eventually improve. If you're mathematically inclined, you've got lots of fun stuff to try (even just programmatically implementing known formulae). Or, you can think of new ways to illustrate things (a la proce55ing), and use that as a springboard. Can you visually trace all planes in the air at one time? Or all packages in the FedEx network? Or, if you're into GIS, you could start teaching yourself ways to overlay data, and perform queries on underlying data sets (to, say, dunno, determine the number of Vietnamese-speaking personnel you'd need to assist the elderly after a hailstorm in Metro Kansas City). Or, hell, build an app to demonstrate actual values of businesses based on cashflow (if you're into accounting). Solve some problems. 
libpcap; for the love of all that is bacon, finish the good bits of jnetpcap!
I did not know about this. Very neat!
Why not just make a self executing jar instead? 
Depends. There are some legal problems concerning java, mainly thanks to Oracle and there are rumors of Javascript API for Android which would be quite quite swell indeed. JVM as a technology instead is most likely here to stay. With stuff like Groovy, Scala and Clojure it's getting more suitable for programming paradigms in '10s.
that does not work... a shell-script stub with a jar-file contained inside the script does work however, makeself uses that apporoach. but it needs to pipe the exact jar-file (bytes of the shell-script) into a file (tmp_whatever.jar for instance) and then run `java -jar tmp_whatever.jar $@` on that file.
Maybe you'd like to try 3D? [www.env3d.org](http://env3d.org/beta/)
Why do you link to java 1.4 api?
Nowadays I use Groovy for my command line needs. It can even pull dependencies automatically from a Maven repository using the @Grab annotation. No need to do a java -jar ./waffles.1.2.3.jar -foo=bar A simple groovy Foo (or, if you shebang the script and make it executable it is even simpler, ./Foo.groovy).
&gt; chomd That's a chomp that turned wrong at the end, right?
For those who tried and figured that it doesn't work, there are some problems in the linked post. Apparently author fixed those but for some reason the edits does not appear on the permanent link to the post. You can see the fixed version in the [homepage](http://skife.org ) (currently its the top post). The shell script should be #!/bin/sh exec java -jar $0 "$@" 
It does, [see my comment](http://www.reddit.com/r/java/comments/i4zpj/making_really_executable_jars/c20zqyn).
On Linux a jar file executable without any modifications, just use chmod +x. This works via [Binfmt_misc](http://en.wikipedia.org/wiki/Binfmt_misc).
&gt;The exec functions of Unix-like operating systems are a collection of functions that causes the running process to be completely replaced by the program passed as an argument to the function. As a new process is not created, the process ID (PID) does not change across an execute, but the data, heap and stack of the calling process are replaced by those of the new process. http://en.wikipedia.org/wiki/Exec_%28operating_system%29
You can skip the shell part, though this makes assumptions about the location of `java`. $ cat prepend #!/usr/bin/java -jar $ cat prepend example.jar &gt; example $ chmod +x example $ ./example Hello, World My system lets me run jar files directly anyway. I don't know what part of my system is allowing this to work correctly, though. $ chmod +x example.jar $ ./example.jar Hello, World 
i stand corrected :-)
No clue. It happened to be first on the Google search...
I have no clue what he is talking about. But I got a similar problem related to *.jar's. I have [this software](http://sourceforge.net/projects/mionchrom/) that I am developing, and some users have complained they can't execute the *.jar file by double clicking the file, even though it works perfectly well on windows computers. A user suggested making a script, like this post. I guess there will be two executables then, one for the specific operative system that got a problem with *.jars and one for windows computers. Isn't there a easier way of doing this that involves only one file? Edit: And btw I'm a total noob. I have no clue how to make such a script file anyway so...
Jar files are only runnable on windows thanks to a file association setup when the JVM is installed. If a user installs another program which handles jars this will break the ability to double click a jar to run it. For example I used to have a Nokia phone and the windows software for it registered to handle jars so that it could try and install them on my phone. 
How committed are you to maintaining the example code? It will take MORE time than actually maintaining your API. Inaccurate documentation is worse than none.
Oh crap. I want a user-friendly program. What should I do?
For wget/curl, in some places where development is done in java, it's far easier to put a jar than install an executable binary on the system. For graphviz/dot, it will be easier to use it in a java application by embedding it for example. And no more recompiling sources for your special AIX system ;-)
Eclipse is the best example of a cross platform java program used by lots of people. I would take a look at what they do. I suspect you will need a per platform launcher script/program. There are various java packaging tools which can help you with this but I don't have any specific suggestions. 
Thanks, will take into consideration.
Also useful thanks.
I rarely see it in other people's documentation. But if I made a really weird method (for example maybe it has some output parameters rather than returning a value) I might make 1 example in the javadoc comment so when I go back to that method I can quickly pick up on it's weirdness. Making several examples in the javadoc for every method probably isn't a great idea though, just save it for the weird ones. Most people are just quickly looking for explanations of parameters.
The Javadoc for Java has examples in it, so I see no reason not to do it. 
Yup, it's actually [pretty common](http://download.oracle.com/javase/6/docs/api/java/lang/Thread.html) there. 
Was going to say the same thing. Converting your example code into actual tests is a great idea because you are forced to update/trim/create new tests as your production code changes (or 3rd party libs change, or as your language of choice changes). If your example code doesn't fit well into a unit-test format (say it's a GUI or something) then I'd still suggest having it in another source tree that gets compiled every time you compile your main code. 
The code the average programmer writes tends not to have as stable an API as the JDK; we tend to be more consumers of APIs than creators. When you put examples into the javadoc there is nothing ensuring that they get updated when the api changes; making the javadoc quickly obsolete unless your team is extremely vigilant about reviewing javadoc before each commit (yeah, right). There's even a chance that your example code will not be correct on the first try; if it's not being compiled, who's to say? We don't tend to deliver our libraries/documentation to a world-wide user base so we don't have as many eyes who'll catch documentation bugs. Unless the examples are trivial, I'd suggest just writing a unit-test that demonstrates how to best use your method/interface.
Any sample code I include in java doc comments I also put a copy in the class . That way if I change an interface or a method without updating the sample code I will get compilation errors. When I update the code I update the javadoc copy.
Don't know if you saw this, but it was posted in /r/programming today! http://drdobbs.com/open-source/231000080
That code should be in a unit test.
ffmpeg
view github files in your browser [kelroy github](https://github.com/kelroy/cashier.java) I have looked at the code and it has very detailed javadoc. Feels like overkill for some of the methods. Self documenting code is the way forward. This is a bit debatable because different people have different styles. I've noticed that you've not implemented any of the tests, I would think that would have been the first thing you did and then implemented the classes. TDD! Also where you doing try catch blocks you are then proceeding to print the stackTrace. You want to pass this to a logger, I'd use either log4j or apache commons. Haven't noticed anything else but I've only had a quick glance. 
Thanks, I am going to write unit tests there just have been a time crunch and I needed the code. I am going have to go back and do that. The problem I am running into is the Cashier ruby RESTful server has to be running for any of the code to make sense. How do you wright meaningful unit tests for a program that requires a server? The tests should run and be useful even if there is no server running. Also thanks for the tip on the logger I will look into that. 
I have been meaning to implement unit tests but due to time constraints and the needing the code asap they will have to come next. I have been struggling with this for any of this code to make sense there has to be a Cashier ruby RESTful server running. I would think the tests should run even if the target server is not running, my question being how do you write meaningful tests like this. In order to use the code you should not have to have a server running which gives rise to the fact that the unit tests should also run with no server.
[Mockito](http://mockito.org/) Try Mockito it will allow you to mock any classes you need. So you can mock the response coming from the server. Also the package structure is not what I'd usually expect to see. Have a look at Maven's default package structure. It's a very popular tool but you don't have to use it to follow the structure. [Maven Project Structure](http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html) 
reddit is acting screwy
I don't know the answer to your question, but I can tell you something that may save you hours of headaches while trying to learn Java: * When a Java person says "Pass by value" or "Pass by reference", they don't always mean the same thing that a C++ person means.
Maybe its just me, but I didn't see any actual solutions. He mentions re-writing in a dynamic language, but then says that's not a great solution (for obvious reasons). He also mentions printing out the code or generating some UML diagrams. Umm, how does that solve the problem? I was expecting this article to talk about SOA architectures.
Personally I would say Head first Java. You'll be able to skip a lot of the basic stuff like whats a variable but it will give you a good understanding of OOP and what its uses are.
The best advice I can give is just write code. Try to forget all of the C++ lore that you've picked up over the years as it will only work against the JIT compiler. Write the easiest to understand code you can. Read [Effective Java](http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;qid=1308702344&amp;sr=8-1) But really, just practice, practice, practice.
personally i use this approach for every new language i learn, i implement **getopt**, it gives me the basics in an evenings worth of programming * variable declarations * loop syntax * arrays * maps * type conversion * string operations * object orientation the huge standard library does not have a getopt package so it could prove useful as a bonus ☺ i would advice you not to use an IDE (Eclipse, Netbeans, IntelliJ...) they tend to be very cumbersome for Java projects with more administration than coding, at least for trying stuff out. many programmers end up hating Java for the wrong reasons.. use [maven](http://maven.apache.org), and the default way of organizing a Java project. src/main/com/your/name/space/Hello.java src/test/com/your/name/space/HelloTest.java this makes organization simple. 
Well...objects always BEHAVE like they're on the heap. There's this wonderful thing called "escape analysis" that determines where to actually allocate objects -- heap, stack, or registers. See: http://www.ibm.com/developerworks/java/library/j-jtp09275/index.html
I only read the first 50% of the page, but I agreed with everything that I had read, and that author seems to know exactly what they are talking about, so I too vouch for that link. Thanks.
Wait, wait, you say don't use an IDE because it's cumbersome and then you advise him to use *maven*?? Sir, I applaud. This troll nearly exploded my head.
Seriously, with that C++ sized brain you're sporting, learning Java won't be all that hard or even interesting really. You'll mostly learn it by trying to do things in Java that are allowed in C++, figure out it doesn't allow you to do that, then just opt for the more natural Java option. That said, the bigger problem with Java is in using the various frameworks you'll need to get anything done. Like C++, you can do virtually anything you like with it, but it doesn't go out of its way to make that easy. So, with that in mind, for what are you going to use Java? 
Small code snippets are sometimes better than actual documentation.
I miss SUN.
thanks for the applause :) yes i seriously think the worst way to start your programming experience with Java is this one: * create new project * web project or gui project? * which application server would you like to use? * do you have existing sources? * do you have an existing ant file for this project? throw in Spring and a bit of dependency injection and JSF just to show off this great language. the guy said he was an **experienced** C++ programmer, so i figured he would be able to read the maven in 5 minutes tutorial, anyone who has had anything to do with gcc will surely be able to do that. one thing most C++ guys tend to like about Java is the easy build process. i.e. i figured this guy was a bit further along than class Hallo{ public static void main(String[] args){ System.out.println("hello world"); } } javac Hallo.java and so on, but i could be mistaken, your head almost exploded :-) 
That is pretty. I like the zebra striping of rows. I hate that it's harder to tell which links are clickable when looking at class definitions. JDK7 on Oracle's website is still the standard look: http://download.oracle.com/javase/7/docs/api/ 
Mockito will help you here. The easiest way to make this testable is if you create an interface with an object oriented representation of all the server calls. Then in unit testing you can provide a mockito mock of that server interface to your class under test. The nice thing about using mocks is it allows you to easily simulate classes, stub out method responses, and verify that the class under test calls the methods you expect it to. Mocks really are a godsend for isolated testing.
While I agree that SOA can help simplify some things in large code bases, it is not the silver bullet that some people make it out to be. The UML diagram solution that the OP recommended can help as well, but what it really comes down to is good planning, and good documentation, IMHO.
Did they drastically shrink the font size? I don't really care for it at first glance, but maybe it will grow on me.
I'm not sure I can handle that right now, but it has been bookmarked ;)
Sorry for the late reply. My experience has been in smaller organizations, so I really cannot speak as to the scalability. What I can say is that a Sales Lead tracker application I wrote could handle several hundred concurrent users on a dual P4 processor and 2GB of RAM.
Thank god it's not #ff0000 with [MMN](http://www.webpagesthatsuck.com/mysterymeatnavigation.html) black links (like all other Oracle pages)
Not bad, but I still prefer [Kiwidoc](http://www.kiwidoc.com/)
*control-plus-plus-plus-plus-plus* Much better.
It's a lot shinier for sure, I feel the old version is a lot more functional though, making better use of the available space. The decreased font size and the badly styled links are definitely a no-no and I personally don't feel the nested tables really add any useful information but just reduce the amount of available space for the actual information I care about. But I think we can just keep a copy of the old CSS around if we want to (I know I will).
[This](http://abstrusegoose.com/249) is probably the fastest way ;-)
With wine, you can install IE (don't need Windows VM, or dual boots).... all the other browsers have the installs for mac... 
But it seems like it would depend on how you wrote it. If your app did drag and drop stuff and other highly interactive type gui stuff, and every piece of info for those things had to go back to the server, it seems the server would get swamped easily. If, however, you made an interactive app that was careful to keep the interaction in coarser chunks, then I could see it working. Does that make sense?
But the IDE has nothing to do with 90% of that. Start Eclipse, choose File-&gt;New Project-&gt; Java Project. Choose a name, go. Right click on source folder -&gt; New Class. Choose name. In the class, type "main" and ctrl-space, and there you go. To run, right click anywhere in the file and choose Run -&gt; Java Application. Bringing Maven into the picture is just a heaping of external dependencies and structure no one needs when starting out. My example above used the IDE to get them to running hello world in a way that was probably easier than doing it all on the command line with vi and javac and java.
My main objection is that the method descriptions are not indented in the table. It makes harder to scan down the table looking for the method I want (right side of the image). [Demonstration image](http://i.imgur.com/B0ZY3.png) I also marked (left side of the image) that I prefer the old right-aligned method types. I lose my place moving my eye to look at the type and back. Other than those two problems the rest is fine with me right now. I do like that the table headings have better visual separation in the new one (the orange stands out). For quick reference: [Old](http://download.oracle.com/javase/7/docs/api/java/lang/Thread.html), [New](http://download.java.net/jdk7/docs/api/java/lang/Thread.html) 
But the bike shed should be painted *red*! Only morons want it painted *blue*! 
I agree with InfoSec that good planning and documentation is the key to handle large code bases. But the issue is that with large distributed geographically distant teams and with developers joining/leaving team frequently it is hard to plan and document efficiently. In my opinion these tools help provide quick insight in the codebases and cut down the time it takes to actually understand the code giving me more time to do something I like 'CODE' :) (keeps my manager happy too)
Good idea using `getopt` as an involved "Hello, World" program. I plan on doing that in the future. It really is confusing that the standard library doesn't have an argument parser. My go to for that is [Apache Commons CLI](http://commons.apache.org/cli/). I wouldn't want to use my own dinky `getopt` when an easily-available, full-featured library does it for me. 