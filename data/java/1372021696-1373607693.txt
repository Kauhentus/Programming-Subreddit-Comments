I am ClickerMonkey on JGO, dreamwagon is a joint account between myself and jjhavoc. Haxel is the most recent serious game I've been working on, I've done most of the development. If you do more stalking you also find out Haxel uses a game engine Ive been working on for years called Axe... its a 2d/3d game engine for java, c++, and c#. You can now complete your stalker profile on me :-P Also, it's not stalking if it's online... That's what I tell myself everyday.
you must sell HDDs ;)
Ah, I've seen you in quite a few threads but didn't make the connection, well, great to find you on Reddit as well! 
I creep a little everywhere, what's your JGO username?
In response to this complaint in the article: &gt; There was however one peculiar thing to be done here. For some reason Liberty is by default statically configured to support JSP only and it wants you to explicitly say that its a Web Profile implementation. I can only imagine that this was done as an optimization so that Liberty starts the fastest it can, since the quick startup time is a key selling point.
Of course there are many ways to do an API. You can write good code in Java, or you can write bad code in Java. Just like you can write good code in C++, or bad code in C++. TLDR;C++ isn't better than Java, your coworker is stupid. Learn Java well and teach him the error of his ways.
As someone who is strong in C++ you don't sound knowledgeable at all. Have you ever worked on a project that actually allows plugins or extensibility to the API? Factory methods, interfaces and function pointers are everywhere in such projects regardless of language. These design patterns as not a language specific thing. It's to do with functionality. Plugins aren't that common on C++ and if you're a beginner (which lets be honest here, you obviously are) you might not have seen this. Libraries in C++ whether static or dynamic are always platform specific and plugins are a pain in C++. Usually we C++ programmers have to drop into a scripting language such as Lua in order to allow some sort of user added functionality. Java on the other hand makes plugins and accessing the API trivial. The user replaces the jar file in question with their own. This is where the design patterns you see comes from. If you allow users to create plugins or to extend the API you've got to design the API to work with that. That's why you see these design patterns. There's nothing at all specific to Java that requires factory methods. These methods are required by the project in question and would appear in C++ if you were designing a C++ project with the same functionality.
Based on the projects I have worked in, there is no comparison. Writing less lines of code IS easier to read, and DOES lead to more maintainable code. As an added bonus - Scala does act as a sort of filtering mechanism. Most of the dinosaurs I knew who learned Java to replace Cobol (but not really that much Java, just enough to make some apps compile) do not know scala. Most of the young hipsters who love to code and do Java, also know Scala. So even if the LANUAGE of Scala vs Java is the same, the degree of programmer you can get are very different.
Good point, but JBoss 7.x is a full profile server which doesn't need this, and yet it's still faster than liberty when starting up.
TIME_WAIT means a connection has been closed. It's being held in this state for a while to make sure no other connection reuses that port for a certain period of time. While http connection can be used for multiple requests, they don't have to be. Generally, http will often reopen new connections. Whether that is a bug or normal in your situation is hard to tell since we know nothing about the details of what you are trying to run.
/r/javahelp or /r/learnprogramming are generally better for this type of question. /r/learnprogramming has a nice [FAQ](http://www.reddit.com/r/learnprogramming/wiki/faq)
&gt; he explained that he is designing an API and does not want the implementation code and all the dependancies shipped with the API itself, so he has to use factories and extension points to give the user the possibility to instanciate an object without having the actual implementation and it's dependancies. That's nonsense, your coworker doesn't know what he is talking about. The client will need the java or class files of any class they are instantiating, whether they being instantiated with a Factory or with a simple new. As a side note, I feel your perception might be slightly skewed. While there are definitely some libraries where the creators went overboard when they were building abstraction layers, that's not how most java code is written (in my experience). I've worked a lot with Java, and most of the code I've seen didn't have FloatFactoryFactories.
I think that the scala java comparison by LOC is very often misinterpreted. Of course it is bad and not really readable to write code like if you want to enter a 1k coding competition. In scala you can write the same code, without any tricks in fewer shorter lines which makes things better to understand. As a little example take the collection stuff. In java you always have to write a foreach loop and transform and copy the elements around. In scala on the other hand you just apply a transform function to your collection. Lambda expressions will help Java a lot in the future of course, but there are so much more things in scala which enables you to express logic in shorter code. 
I think what your coworker means is, that he **hides** implementation details from the user of the API with DI and Factories. Instead of having to pass Objects, the class needs, through the constructor it is getting injected to the class. The real problem is that API-Design is an art and a lot of people mimic other API's and go overboard with patterns, just because they have seen it somewhere else being used. Nonetheless you still have to ship the dependencies and implementations with your class, as long as it is not provided by a container or other means.
The comparison by JRebel's company (ZeroTurnaround) puts Liberty faster than JBoss - faster than any other application server, actually: http://zeroturnaround.com/rebellabs/the-great-java-application-server-debate-with-tomcat-jboss-glassfish-jetty-and-liberty-profile/6/ (I think they are using Liberty 8.5 and JBoss 7.1.1) Honestly though, all these comparisons depend on what's important to you. Liberty starts faster but I think it has a higher memory footprint versus something like Tomcat, at least by default - maybe that can be tuned.
Not quite as low level, but for anyone wanting to play with Java byte codes and try loading them into the JVM you might want to look at [Jasmin](http://jasmin.sourceforge.net/). The feedback when you get it wrong isn't exactly useful, but it's quite fun to play with.
It was actually a compulsory part of my undergraduate course, as it gives a very easy way to play around with programming at an instruction set level, across any different platform (that has a JVM, of course). Interesting to learn how to handle a stack machine.
Thanks for input! I just ran it from NetBeans and the only printout in console is: ant -f Y:\\NetBeansProjects\\JavaHelp run init: Deleting: Y:\NetBeansProjects\JavaHelp\build\built-jar.properties deps-jar: Updating property file: Y:\NetBeansProjects\JavaHelp\build\built-jar.properties compile: run: And the application looks like this: http://i.imgur.com/NbJJXWV.png That giant blank shouldn't be there and it tends to happen about every 3-4 tries. I tried posting on NetBeans forums, Stackoverflow, Dreamincode, but all to no avail :/ What's that JavaHelp mailing list you speak of?
&gt; but there are so much more things in scala which enables you to express logic in shorter code. As there is in Java. `@Asynchronous` makes a method well, asynchronous. `@Stateless` gives a bean pooling capabilities and makes it transactional. That's a lot of power expressed by a single word. 
Not exactly like codeacademy, but there are some resources listed in the /r/javahelp wiki: http://www.reddit.com/r/javahelp/wiki/tutorial_list
Try codingbat.com. It's got a ton of exercises you can do online (without having to compile, etc). It was very helpful to me while learning Java in school. It doesn't have lessons like codecademy, per se, but there is a lot of helpful information.
*Java Courses* http://ureddit.com/category/23442/computer-science http://www.class-central.com/search?q=java *Online Tests* search("java online {test, quiz, exercise}") 
http://www.caveofprogramming.com/
I've used programming by doing as well as http://codingbat.com Both are good.
Ah yeah I remember x-x The reason I didn't go there is because it seems completely dead.
You refering to some JEE annotations if I'm correct. These are some library features, which can only be used in a very specific way and place. Letting aside that those Annotations have to relay on runtime reflection trickery. In scala you can do something like this to do async stuff everywhere val futureData = future { val data = callSomeService() modify(data) }
What's wrong with reading a book?
www.thenewboston.com That's the main site you'll check whenever you want to learn a new language. 
Do the exercises in the book then. 
so reading a book about programming gives one the ability to program and reading a book about swimming gives one the ability to swim? o.k.
yes, definitely. what I was basically saying was the suggestions given besides a book i.e. xyz-learn-to-code.com, are normally much more interactive. I say it would be best to combine those with a book.
Yep. Excellent tutorials! When I finally find a job, I will definitely be making some donations to TheNewBoston. 
Yeah but we know OP isn't going to do that.
SWT But then I'd wonder why you'd make a GUI with Java. Java in 2013, uses of Java: 45% web applications 45% android apps 5% console apps 5% "other"
Interesting to see someone elses results. At my workplace, we're considering upgrading to this GC as we have some servers that have a +10Gb heap, and some of our CMS GC pauses cause problem, not in total time, but in the compression of old generation when there isn't enough contiguous blocks.
That's not what I said. I'm simply saying you can learn a lot more about coding from reading than you can about swimming from reading. Anyway, this is a stupid debate with a troll on the internet. I've got code to write.
I know I'm late to the game, but you forgot to declare `originalList` as final in the Java version. The `doubledList` is trickier...
&gt; You refering to some JEE annotations if I'm correct. What's JEE? 
BlueJ is a lightweight IDE that generates class dependency models in the program's main view. Check it out. 
Annoyingly, the baseline for being a Java web dev these days probably looks like this: * Spring * Hibernate * JDBC * Maven or Ant * JUnit * The Servlet API * JSP * How to deploy to Tomcat or Jetty * Familiarity with continuous integration * Basic Unix shell scripting skills Without all of the above, you're not really competitive in a very saturated market. Note that actually being any good at your actual job isn't on the above list. If you want to give yourself a bit of an edge, brush up on your front-end skills. I got a supposed Java web job pretty much solely based on me asking the interviewer if they were using 320-and-Up, or just writing their own media queries. Turns out, a lot of Java devs either shy away from, or downright snub, front-end coding, but a lot of Java shops still need all-round devs that can play with the front end.
Is there a library for it's dependency models? I'm mainly trying to get some sort of handle on how to map class dependencies, either with a library or doing it myself.
When I download that JDT zip, where should I extract the files? just in the eclipse folder? In the zip file I see, 3 folders: binary, features and plugins. And 2 files: artifacts.jar and content.jar. But I'm not sure where to put these.
You can do it from within Eclipse by going to Help -&gt; Install new software -&gt; Add -&gt; Archive.
I would guess that the biggest difference between the bare platform with JDT added and the Java edition is Mylyn which is worth the extra overhead to me at least. Running Juno SR2 on a decent spec machine I don't seem to have many performance issues. One quick tip that many people don't seem to know about is [Google Workspace Mechanic](https://code.google.com/a/eclipselabs.org/p/workspacemechanic/) - it's a plugin that lets you configure preferences to be applied across all your workspaces. It pops up and offers to fix any that don't match your presets and I find it invaluable for things like file extension associations, key bindings, autocomplete templates and all sorts of other stuff.
1 step to make Eclipse better: 1) Use Intellij
I use the online tools as well - specifically bugzilla, which it integrates with really well (like offline working, commit templates etc) but I find the biggest benefit is the context stuff. I switch between branches/bugfixes/feature implementations a lot so it's really useful to have the context associated with tasks to give reminders that get me up and running again quickly after switching.
Some people may find this useful.
The thing about it is that's teaching relativelly difficult topics in a very easy to understand manner.
Isn't simply disabling all the available plugins from the standard distribution a sufficient boost suggestion I can give to a novice programmer?
Is it just me, or are the charges of Java code being filled with factories, proxies, abstractabstractabstract classes and loads and loads of XML do not apply to 99% of Java code in the wild? Most Java code I've worked creates instances with regular old `new` or define classes the framework according to how the framework wants it. Most of the code I've seen use stuff like this are frameworks, which in the quest of trying to be generic are forced to work around Java's lack of any useful metaprogramming capability. At least we're replacing the XML with annotations. That's an improvement, right?
Unless you are a Linux user and actually want to read your code withouth getting sore eyes. Intellij Idea fontrendering suck on Linux.
Java is awesome but each new feature, library option, server option, JPA implementation, build approach, and JVM based language added makes development that much harder. EclipseLink or Hibernate? Tomcat or Grizzly or Jetty? Redis, memcache, or maybe even RabbitMQ? Oh setting up multi-module support in Maven, this should be easy. Ugh. But wait, the compile time weaving in AspectJ got messed up. I spend so much time wiring and choosing and so little time actually developing the features I need.
So are you complaining about Java itself or its ecosystem?
If I had to guess, we'll be getting some Java EE 7 container sales spam in the subreddit shortly. These are the made-up problems the salespeople of these companies try to sell to the uninformed.
Calendar cal = new java.util.GregorianCalendar(1200, 6, 15) ?
Are you sure about that? Have you ever read a book about swimming? My guess is you haven't read a book about swimming or programming. And I'm quite sure you don't have any "code to write" and you have no clue what a troll is. Go sit down now.
don't be fooled iends has no code to write
This isn't what you're looking for, but if you're going to learn Java, I think it's a great tool to have: [beanshell.](http://www.beanshell.org/) It's a Java interpreter that enables you to try out little snippets of code to see what they do, similar to the interpreter that comes with Python. I used it years ago when I was learning Java, and remember liking it very much and getting a lot out of it.
well, you may have drunk too much of the third-party library/framework cool-aid. You don't have to use them all. I would definitely drop Maven and AspectJ, for starters. Standardize on Tomcat. Don't use an ORM like Hibernate. Use your own DAOs or iBatis. I don't know anything about EclipseLink, so can't say what pain that is bringing. Anything else I can solve for you?
Just use it on a ssd, works a treat.
plus the price for eclipse is much cheaper i.e. $0
I think you guys are seeing things through rose covered glasses. All I'm saying is that Java development is hard with MANY decisions to make. Each think you mentioned is research and a decision. It's hard. Its still the best going but it is getting long in the tooth and traditionally you can tell when an environment has gotten long in the tooth by how many ways there are to do the same thing. Clojure isn't baked enough for me but it is definitely pointed in the right direction. I still make my living writing java code but it isn't the simplest. I wasn't trying to put anyone on the defensive. Just saying that you have to make a LOT of choices when writing a big distributed system with java. More choices sometimes than writing features. 
Both. It's pretty simple. The more flexible something is the more complex it is. Don't try to read into it too much. I'm just saying that big java development is hard. It used to be easy, way easier than C++ but the bigger and bigger the language and ecosystem gets the more complex it becomes. 
yes but working for a corporation they frown on using the free version since you are technically not supposed to use it for actual production. 
Remember that this post is from 2006, when things were a lot worse.
&gt; since you are technically not supposed to use it for actual production. Where does it say that? I didn't realize there was any such restriction on the Community Edition 
http://www.jetbrains.org/display/IJOS/FAQ#FAQ-CommunityEdition it seems his manager was wrong. According to the above link the community edition uses the Apache 2.0 license which allows you to use it for commercial products. I'll have to let him know =)
That seems to be a common misconception. You can use it for whatever you want. You cannot use an _open source license_ for Ultimate Edition for commercial purposes. You can use the open source Community Edition for anything.
My choice is not to use them :-)
I must say, I was skeptical, but I d/led the 3.8.2 platform and installed JDT, and it starts up and switches workspaces noticeably faster than my Juno installation and is definitely using less memory (though some of that may be VM parameters). Think I will stick with it for a while! It's too bad the "platform binaries" for 4.2.2 seem to be missing some of the necessary ingredients (notably eclipse.exe)
Yep I second this, run Eclipse with the bare minimum plugins you need and it will treat you well
What's the link for platform binaries? I can' seem to find it here. 
I have not, but if its that horrible then thanks for the heads up. Last thing I need is yet another piece of garbage to use lol
I have tried that and everything else I have found. Still crappy unreadable fonts.
Have you tried fontconfig-infinality? 
netbeans user largely because of the consistent shortcuts. i've tried eclipse a couple of times and i could never get them right ... will try mechanic next time i need to fire it up
[Heres an option](https://developers.google.com/java-dev-tools/codepro/doc/features/dependencies/dependencies)
Which font? I'm guessing a bitmap based one? IIRC the linux JVM badly sucks at using bitmap fonts -- I use Terminus normally, and it's completely unusable in IntelliJ :(.
That still doesn't fix the Eclipse sucking problem!
It's a workaround. :)
There are none that I can think of. It would probably be a 'marker interface' like `Serializable` or `Cloneable`(shudder); but there is no point in making it abstract other than to prevent it from extending other classes.
What? There is nothing in that repo.
1. Uninstall eclipse 2. Install IntelljIDea
Hi, wanted to know if anyone will be interested so I upload
Unm, just use CDI and @Inject ;)
Seriously. I can't think of a reason to *not* use an SSD in this day and age.
While I don't agree with all the criticism of Eclipse, his point about Mylyn is spot on.
Fair point. If you're building a file server or a server farm for your cloud service, you can't beat spinning magnetic disks for price. But on a desktop? 
I have an SSD in my laptop, my desktop came with an HDD which has space I couldn't sacrifice for speed.
Just tested.. using a SSD. My main work consists of 40K files, about 39k+ are java + loads of other crap. With all these in the workspace (in plugins) it takes about 2 seconds from icon click to get to the WS selector, and then 6-7 seconds to load up and be fully usable. I know it goes against the grain, but Eclipse (IMHO) is a fantastic product, it does so many things very very well. I have tried the others and they are just not as productive at all. Then I go and use x-code and swear all day. /edit for clarity, using a 32gb i7 8core latptop.
I've got an SSD for my boot/app. Everything too large to comfortably fit in there (films, music) is on a NAS in my closet. That way I don't have to listen to the clickety-click of a mechanical disk, and I can use quieter fans.
Interested in what, is the question, as you haven't provided any kind of description of what is involved.
Does it implement any interfaces? If so, any subclasses will be forced to implement those interface methods that aren't implemented by the base class. Abstract subclasses of abstract classes? Yeh, there are uses for them. Not sure what you're struggling with, so it's hard to answer with anything other than contrived examples that demonstrate nothing. Erm, look at spring-test, and see how they subclass org.junit.TestCase multiple times with abstract classes.
Download link seems to be dead :( Was https://bitbucket.org/procyon/com.strobel/downloads but is now https://bitbucket.org/mstrobel/procyon/downloads 
Soz, I should be clear.. That is on my work laptop. However at home the server/NAS is in the office.
Ah ah. :) The Gregorian calendar was created in 1582, and adopted in 1582 in most of Catholic countries in Europe (but only in 1583 in some of them). Protestant countries resisted the change, and only started switching around 1700. It was only adopted in 1752 in the British Empire, and in 1918 in USSR. Japan switched in 1872 from their traditional calendar, and many other countries have a complicated history related to the switch, which occurred at varied times.
Yes, I've implemented it a couple times. Do you have a library, a SMSC simulator, some kind of an application, or what?
I have an entire application to carry out binds to the Smsc, sending SMS, handling subscriptions. Will upload it today
You mean, you implement SMPP in your application, instead of using libraries like https://github.com/twitter/cloudhopper-smpp ?
"final EditText myEditText ..." Why are you making EditText final. Does this mean that it can't be changed? Yet you are changing it when you enter text and clear it.
Nice....didnt see this
When you make an object declaration final, the reference to the object can't be changed. For example, you can't do final Object object = new Object(), and then later do it again. The object itself can have mutable variables. 
After reading this post I'm left with one question: What does String.intern() do? I guess I could Google it but...
ok. So the fields inside the object can be changed. What is the point of making an object final? Thanks.
So you can be sure that you have the same object. Also, as a general rule, anything that can be final (in your use case) should be explicitly declared so. 
Strings are immutable, so every string is its own object. As such, if you do the following: String s1 = "Hello" ; String s2 = "Hello" ; There are 2 different objects, so s1==s2 will return false. Intern checks to see if there is an equivalent string in the common pool, and if so, returns that one. So if you intern s1 and s2, they will be 2 references to the same object, so s1==s2 will return true. 
Indeed, it's just a stupid meme the other guys use to make fun of us. Just like Python and Ruby users (of all people!) still makes jokes about Java being slow. Meanwhile Java runs circles around crappy slow languages like Python &amp; Ruby.
That said you have to be VERY careful with this. Intern'd strings are NEVER GC'd. For the life of the JVM they will have a strong reference from the intern'd string pool. So while String.intern() can be useful it is really only useful for strings that are ALWAYS going to be used in your JVM.
But please, still don't compare strings using `==` unless it's *super*critical; `String.equals` already includes a `==` check so it will run quickly on *any* `String`, whether intern'd or not. Use `intern` when you have a lot of repeated strings, and want to share the space (e.g. the strings for the 50 state names -- could be repeated 100s of millions of times; if you always intern them then `Connecticut` occurs just once and all the millions of references use it). 
If you believe this, you have some serious misunderstandings of what Guice and Spring are for. The `new` keyword was never "banned" or even discouraged, and while loose coupling is often desired, strong coupling makes more sense in 90% of the cases where abstractions are not shared in your own code. Following YAGNI, shared abstractions should be avoided until absolutely necessary. Stick with `new` until the need for sharing proves itself. The problem comes when you have to deal with shared abstractions, in particular like Java EE, which lead to the birth of Spring and now CDI. You have to somehow get dependencies discriminated by subtype and deal with differing lifecycles, and given that Java doesn't have very good metaprogramming (you can't override `new` to return different subtypes or reuse existing instances - as in Smalltalk and Ruby), before Spring you needed either `getInstance()` or factories, which required code that used a dependency to be involved in the lifecycle management of that dependency. Spring and Dependency Injection allow externalization of the lifecycle management part, simplifying the dependent class. Yes, in the bad old days, this meant reams of XML. TL;DR - Stop exaggerating things just to ride the hate bandwagon.
Giving it a shot. Test 1: Check out a project from GitHub, make a change, commit and push. ``git clone`` with the UI worked fine, but Eclipse didn't recognize the ``pom.xml`` file, and import the Maven project. Let's see which plugins I'll need to install... Help, Eclipse Marketplace, wait quite a while for something, get the window. Find Maven, Go, I'll pick "Maven Integration for Eclipse", "Maven Integration for Eclipse WTP", Install, Confirm. Now it seems to take forever... Accept the licenses, and now it's installing, apparently at 0B/s? My Internet connection is 200Mbps, so it really must be downloading something huge for this to take this long. Restarting, let's try this again. Apparently the last attempt to import a project left an extra directory, so it won't let me import using the same workflow. Let's try to just import the previously fetched Git directory instead. OK, import of Maven project seems to have succeeded. Eclipse was able to run the project's unit tests by selecting the test directory and the correct package from Project Explorer, right click, Run as Junit Test. Unfortunately the ANSI color codes produced by Cucumber didn't work very well with Eclipse's Console. When I hide the console and rerun the unit tests, it pops up very inconveniently on top of the Junit sub-window, which I moved on the right side. The Cucumber ``feature`` file was opened successfully as an ordinary text file. I prefer editing the feature files as ordinary text files over IDEA's colorization. Eclipse doesn't show the project's ``.gitignore`` file in either the Project nor the Package Explorer, making it hard to add .project, .classpath etc. Eclipse's static analyzer doesn't pick up any additional problems, after I've fixed what IDEA found. This version still has the excellent Call Hierarchy and Type Hierarchy functionalities, which are superior to its competitoris' in my workflow.
&gt; Eclipse doesn't show the project's .gitignore file in either the Project nor the Package Explorer, making it hard to add .project, .classpath etc. These files are usually committed so that others can just reuse the project setup. To ignore or commit files, open the *Git Staging* view by typing this into the search box at the top right (you can also press Ctrl+3 or Cmd+3 if you don't like to use the mouse). Then right click on the file in *Unstaged Changes* and select *Ignore* or *Add to Git Index* (or drag it to the bottom). If you'd like to see hidden files in the *Package Explorer*, click on the view menu (the triangle thing), select *Filters...* and uncheck the corresponding entry.
If anyone upgrades, please let me know if the performance is better than Juno.
Oh, sorry about that. Interning is something i've never actually had to use (as many applications are)
Sounds like what happens every time I try to give eclipse a chance- wind up in weird vcs/mvn plugin purgatory and ragequit/delete after a few minutes If they can't make their plugin system better they should release a build that prebundles support for common plugins...
&gt;Accept the licenses, and now it's installing, apparently at **0B/s**? My Internet connection is 200Mbps, so it really must be downloading something huge for this to take this long. It is a well known fact in the Eclipse community that, on launch days, the mirrors are usually saturated. &gt; Eclipse doesn't show the project's .gitignore file in either the Project nor the Package Explorer, making it hard to add .project, .classpath etc. Make sure you haven't configured the Package Explorer to filter/hide .* files.
I've switched to IntelliJ months ago, but I will tottally give it a try, just for nostalgia.
I don't accept IDE configuration files in my repositories. That road always ends up with having to help people with configuring the IDE, and debugging incompatibility problems.
Still bundles Mylyn. So I don't care so much.
/r/java is for news stories and the like. /r/javahelp is what youre looking for.
Is there any benchmarking that you know of? I've always gone off of feel with eclipse but that's really not very good. 
Can anyone confirm that 4.3 doesn't fuck up (again) the Android plugin? I stopped updating stuff long ago without solid feedback.
Since Java 7 the interned String are no longer in PermGen: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6962931 At least not in HotSpot. **Update**: I couldn't resists and checked the [HotSpot sources](http://hg.openjdk.java.net/jdk7u/jdk7u40-dev/hotspot/file/7217cb314c66/src/share/vm/gc_implementation/concurrentMarkSweep/concurrentMarkSweepGeneration.cpp). The interned Strings indeed are GCd, but it still can have an impact on GC-introduced latencies - it seems me the CMS unload the interned string during a final remark - that is the Stop-The-World phase. Anyway, it's a very interesting topic and thanks for the article!
I tried to switch. Installed comminity edition, wondered why it didn't support EE (or GWT) without buying the ultimate, sighed, and that was that.
ECLIPSE SUPPORTS MONGODB BECAUSE MONGODB IS AWESOMES
&gt;I tried to switch. Installed comminity edition, wondered why it didn't support EE (or GWT) without buying the ultimate, sighed, and that was that. Next time try the Commercial Edition, you'll express a sigh of relief :-) 
I've been using Intellij for years now. Yes for the extra goodies you need a commercial license but when I'm asked why I'm willing to the pay for the ultimate edition I remember an old saying. "Invest in a good bed and a good pair of shoes, for if you're not on one you're on the other" Given how much time I spend using an IDE, I'd rather it be a good one :)
Eclipse IDE for Java Developers has maven integration by default. This is the better edition for things like developing bukkit plugins...
I did basically the same thing, different book though. 91% correct, got three questions wrong. 
I guess you could extract the frequency domain information from the raw frame data, but that doesn't seem to be easy or practical. The Obuffer the decoding routine returns seems to contain PCM (== time domain) data according to the documentation. Apply the Fourier transform to this data to convert it to frequency domain.
Congrats! Were you a CompSci major or...?
If you download the Platform Runtime Binary from [here](http://download.eclipse.org/eclipse/downloads/drops4/R-4.3-201306052000/), you can decide what exactly you want in your eclipse. 
... You've obviously never programmed in any other languages...
Can confirm it worked for me, though I have a relatively simple installation of juno. Thanks for posting this, I couldn't find info on google.
Yes, but I'd been programming java for a few years before that and other languages before that. If you don't have a CS degree, I'm not sure if this cert helps much. The cert game is a game mostly although the SCJP was one of the tougher ones, many are of the formula "read a book that teaches to the test, take the test." Oracle has broken up the cert into multiple tests I think now. Some people collect certs like boy scout badges. I have no idea what is going through their head. I think if your company is paying for it and you want to do it then that is the ideal scenario. Imagine if you will... BigCompany: Hey lazy hiring manager, how would you like to insure you only get qualified applicants? LHM: Sounds great. What's the cost? BC: No cost to you my friend. We have a cert program now so you can weed out resumes that aren't official bonafide developer in X. LHM: Finally, I can go home at a decent hour, I love you. ....time passes.... BC: Hey developer, how would you like to be able to get jobs easier? D: I'm listening, what's the cost? BC: It's a couple hundred bucks but you get a cert. Can't get a job without being certified right? All the hiring managers we have talked to only hire certified developers. D: ok, well, I guess. Amazon.com: HEY! You wanna buy a study book for that cert test? It makes it stupid easy to take the test. D: wow, that was easy, now to get that sweet job. LHM: Hey D, welcome to our dysfunctional company. non-LHM: HR, please round file all resumes with those worthless X cert on them. Somewhere between LHM and Non-LHM lies the truth, about who you'll work for, and where your work ethic stands. You'll find that many people are certified in X or Y but they explicitly don't put that information on their resume. 
Agreed. IDE configuration files were never allowed in repos in any company or project i worked at.
You're missing out then. It's really nice because not every single developer has to configure settings for newlines, encoding, formatter on their own. We even have save actions to format Java files automatically on save. We never have arguments about formatting and the code style is as consistent as it gets. Of course, in case of Maven, one can argue that `.project` and `.classpath` should be generated by it, but I don't see why the rest should not be in the repository.
You know what's finally fucking fixed? Indentation after downshifts. Man that was the most annoying dumb bug ever. Type x &gt;&gt;= 1; then for whatever reason any changes to indents you make under that line are screwed up. Finally fixed!
No, but see [Juno Performance Investigation](http://wiki.eclipse.org/Platform_UI/Juno_Performance_Investigation) and [bug 374441](https://bugs.eclipse.org/bugs/show_bug.cgi?id=374441).
If a developer hasn't configured their IDE for Sun-Style, and either can't or won't mostly follow it after being told once or twice, they will be on their way towards the worst of legacy maintenance projects until they learn.
Java is probably a difficult language to accomplish this in because of its isolated nature. Perhaps lesten for a minimization, and manually maximize?
I've contributed to flyway and advocated our s&amp;p500 enterprise to use it across the board (hint: we use it even in production now across our very large application portfolio.) I would highly recommend switching to flyway..
Direct link to video http://youtu.be/W0NOUFA9b10
can someone summarize? I am guessing it has to do with performance metrics and platform comparability but i can't watch videos at work. 
The short summary: Old people like it. Enterprise likes it. The rest of the world gives it a kind of "meh," but it's still one of the most popular languages out there, and it's numbers show that its usage is steady. As a side rant, is every Java conference *required* to have one of these "Hey! We're still relevant!" sessions? 
r/Learnprogramming would be a better place for this. Introduction to Java is what I used in Uni. It'll take you not only through the language, but also into advanced data structures as well. Great book. 
youtube transcript (auto transcribed so garbled) http://pastebin.com/4bJHuHXZ
Stephen O'Grady from RedMonk uses fairly strange criteria, like Ohloh language commit staticstics over a period of time of major measurement errors, where GitHub and BitBucket were taking off and project-private version control systems _for trivial and throwaway projects_ were much easier to measure than established "professional" projects. Also during the same period GitHub made the systematic error of assessing every project which had copies of standard JavaScript libraries, such as jquery, to be "JavaScript projects" with high probability. He goes over another fundamental mistake in great detail a little later, using StackOverflow question patterns as data without taking into consideration the effect of the systematic culture good documentation around certain projects. TL;DR Speaker is bullshitting to sell RedMonk analysis services. Bad analyst, bad! Take a few years off and do some business development projects for a change, to get back in touch with reality.
Well, it's even a bit more convoluted than that: at *compile-time* any strings in the source code are intern'd, as well as the results of any "+" that happen at compile-time: ("cat"+"hay") == "cathay" // true; this "+" is optimized at compile-time "cat" == "cathay".substring(0,3) // false; `substring` happens at run-time. ("cat".concat("hay")) == "cathay" // false; unlike "+" the `concat` is not optimized at run-time.
I'd say the easiest way is to use what you already know. If you're looking for a technology to learn, I'd play with Java EE. I was able to hack together some simple apps in a few hours, though my interest is currently the Batch stuff in EE 7, not doing any CRUD operations (yet). The Oracle Java EE 7 tutorial is here: http://docs.oracle.com/javaee/7/tutorial/doc/home.htm
Use Grails.
[MyBatis](http://mybatis.github.io/mybatis-3/) for database access. [Spring MVC](http://static.springsource.org/spring/docs/4.0.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping) for a simple REST JSON API to your data. [AngularJS](http://angularjs.org/) for a client-side UI for your app. Alternatively, instead of a JavaScript HTML5 application you can strap the [PrimeFaces](http://primefaces.org/) components to any simple Java web app using only a servlet runner, which is way to do it with the most value and least amount of useless lock-in.
Thanks.
As I've once read before starting my career based on Java: 'Java is dead, long live Java' :-P 
Java has it's ups and downs, but it didn't take me long to learn the common noise of "Java is dying" or "Java sucks" has little substance to it.
The only time I've used String#intern() was to do some concurrency management using synchronize. I don't remember specifics, but I'm willing to bet it was in response to new-found requirements during a deployment.
Thanks for the reply. Unfortunately I've already had a look at this tutorial and it doesn't cover anything about keeping the widget on the desktop. :/
I second grails for this!
Exactly what one of my coworkers says about COBOL. He started his programming career years ago being told that COBOL was on it's way out the door. 20+ years later, he still writes COBOL on occasion.
"a web app to search/create/update/delete these things" is called CRUD, which stands for Create Retrieve Update Delete. If you *must* use Java, the quickest CRUD framework for Java that I know of is the Play framework. http://www.playframework.com/documentation/2.1.1/JavaTodoList
Spring roo will have you up and running in minutes. 
Expect headaches. Months of headaches. 
I was gonna say Spring MVC + Mybatis + Twitter Bootstrap. I'm done with JPA.
* Symfony for PHP: http://symfony.com/ * Rails for Ruby: http://rubyonrails.org/
Learn socket programming. Python makes it pretty easy. C makes it very detailed and a little tedious. Not sure how it will be in Java. Create an echo client and server.
Java isn't dead. It just smells funny. (with apologies to the late, great Frank Zappa) 
I learned off of Blue Pelican Java and Starting out with Java: From Control Structures through objects
I just got back from an IBM conference. There were 4 or 5 sessions on deploying/maintaining COBOL applications. The stuff doesn't just vanish. People will be supporting Java code for *years* to come now. 
I'll second Spring Roo for getting you up and running quickly assuming you're familiar with JEE and/or Spring.
[Django](https://www.djangoproject.com/) seems popular in the Python world. 
You have a typo in the subtitle of your blog. Otherwise, good work. Hyvää työtä.
If I was you, I'd start by learning a bit about TCP, UDP, ICMP and IP. Just the very basics. Then set up a machine, virtual or otherwise, with a HTTP server, a command line client such as ``curl`` or ``wget`` and a simple network sniffer such as ``tcpdump``, learn how to sniff the traffic, and take a look what actually happens when computers and programs speak to another over modern networks. When you're familiar with ``tcpdump`` basics, take a look at http://www.wireshark.org/ After this, you're ready to learn how programs actually send packets, through the socket primitives which are fairly similar on all plaforms. Take a look at http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html#syscalls and read the "System Calls or Bust" chapter. When you're familiar with the operating system level system calls, you're ready for the Java equivalents, see http://docs.oracle.com/javase/tutorial/networking/sockets/ After this, you can read up on how you should actually go about with creating a network server in 2013, through the standard Java NIO.2 library, or higher level Netty, Grizzly or MINA libraries.
I'm surprised nobody has mentioned SmartGWT. Awesome UI layer, built-in data source to UI mapping. Heavily customizable. Check it out.
Don't write your own CSV generating code. You're almost guaranteed to do it wrong. There are several existing Java CSV implementations that cover numerous (and common) edge cases. However, personally, I'd use http://commons.apache.org/proper/commons-csv/ and contribute any bug fixes I had to make. Another crazy option would be to grab [H2](http://h2database.com/) and use its CSV function along with its ability to query out to any JDBC URL as a subquery and feel cool for wiring two databases together just to produce a CSV :) This method might actually be the shortest code in terms of what you actually write hehe
This is a straight product advertisment.
Redirect your output. for linux an example would be "javac ./myprog &gt; /dev/null" on windows it is "javac ./myprog &gt; NUL" this windows version is a guess because i don't have a windows box right now. the &gt; redirects your standard output. I am not sure where you are getting these messages, but &gt; redirects standard output to a file. /dev/null is like a trash can. 
Google "Picked up JAVA_TOOL_OPTIONS" -&gt; https://forums.oracle.com/message/5205487#5205487 https://forums.oracle.com/thread/1239778
I've been using Play 2 for over a year. It's a joy to build with. It doesn't have the quick scaffolding that Roo offers, but it's still a good option for both rapid prototyping and production quality apps. 
If you want to do Scala, Play is for you - if you're interested in Java support, skip play and pick something else.
If you're going to use Spring MVC, might as well skip MyBatis for [Spring JDBC](http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html). I dislike JPA (aka, Hibernate) with a passion; however, it's so widely used I end up using it all the time. note: Spring JDBC has some nice Object to db result set mappers (and the reverse) which allows you to skip all the silly JDBC stuff and just map data to POJOs. It's not as automagical as Hibernate, but damned if I don't think it's better most of the time. My experience with xxBatis is limited so I can't really compare there.
Interfaces vs Abstract classes. Know everything you can about that.
Read up on each of these technologies, figure out what their role is, and where you would want to use them, and where not: http://forgerock.com/what-we-offer/open-identity-stack/ http://aws.amazon.com/opsworks/ http://www.docker.io/ http://www.linux-kvm.org/ http://www.vagrantup.com/ http://www.openstack.org/ http://cloudstack.apache.org/ http://openshift.github.io/ http://www.cloudfoundry.com/run http://www.opscode.com/chef/ https://puppetlabs.com/ http://kibana.org/ http://www.cobblerd.org/ http://www.jetbrains.com/idea/ http://zeroturnaround.com/software/jrebel/ http://joda-time.sourceforge.net/ http://static.springsource.org/spring/docs/4.0.x/spring-framework-reference/html/ https://code.google.com/p/guava-libraries/ http://projectlombok.org/ http://jackson.codehaus.org/ http://docs.oracle.com/javase/tutorial/essential/concurrency/ 
Have a play with [apache wicket.](http://wicket.apache.org/) (Look at their examples)
But isn't that what the "Show Desktop" button is supposed to do? It really sounds like you're working against how the OS thinks windows should work... Maybe look into running your application from the [System Tray](http://docs.oracle.com/javase/tutorial/uiswing/misc/systemtray.html) - changing the icon or showing popups to notify of things when needed. Or look into desktop widget/gadget frameworks provided by the OS you're targeting and see if there's a project supplying a Java binding to them - these are different across all OSes, so you probably aren't going to find a pure Java solution to this.
A junior java programmer is going to be doing a lot of on the job learning anyway. Instead of trying to pass yourself off as a knowledgeable java dev, show them that you're a damn good programmer who can 1.) learn quickly, 2.) be thorough, and 3.) work well with others or as a part of a team. Tell them stories about specific problems that you've faced and how you approached them or solved them. If you find yourself having difficulty answering their questions regarding java, simply turn it around and make it clear that although you don't have tons of java experience, you are confident that you can quickly learn the necessary skills and perform the tasks given to you in a reasonable amount of time, and with a high degree of quality.
You should brush up on the Java collection classes and understand when you would use one versus another.
Very helpful. Thanks!
I just tried in PowerShell and Command Prompt, it should be "NULL" instead of "NUL".
Someone recommend that I use Beginning Java: Java 7 edition so I'm going through that. I think I'll get Head First Design Patterns after I've read that book. Thanks for all your suggestions guys :)
This list is old... Instead of "always use latest eclipse" #1 advice I can give is use eclipse 3.7 and not anything 4.X as Juno is very slow and is prone to hanging.
Step 1: Install IDEA Wow! Eclipse is infinitely faster! (sorry, somebody had to :) ) 
Yes, List, Map, and Set are probably the most used. Here's the main tutorial: http://docs.oracle.com/javase/tutorial/collections/ Probably focus on the different interfaces and different implementation of those interfaces. If you understand those you might want to also look into the java.util.concurrent package which has concurrent implementations of the collections and other useful concurrent utilities.
I listen quite persistently. It is an online class and I do all the readings/take notes/ watch the lectures/ assignments. I am just having an incredibly hard time with the content and pace of the course. I am an English major and am not used to classes or problems in this format. It has been extremely hard for me to grasp the concept of the Java language. As far as time goes, I am running out of it. I am going to be a senior this upcoming year and am trying to graduate with a major, specialization, and 2 minors, so retaking this course would set me back quite a bit. I was just hoping for some hints in what direction to go in. I am determined to get an A in this class believe it or not.
I just want to tell you that spending hours on a programming problem is fairly normal. Don't feel that you're dumb just because you don't get it immediately. Try to have fun doing it and good luck!
Juno still isn't fixed either. It is nice and fast for the first hour or so, but then if you keep it open and are editing many XML files it starts to crawl. Literally taking 20 seconds to open a small simple XML file.
This is quite possibly the best thing anyone has told me so far. Thank you! That is exactly how I feel when doing this.
Is powershell different from cmd? Either way nice catch, im not much of a windows scripter.
Break each part down into small steps, solve each step at a time. For example, #1, *Write a static method named calculateAverageWeight, to be added to the Bowl class, which is passed an array of Bowl objects, and returns the average weight of the Bowls in the array.* Step 1: *Write a static method named calculateAverageWeight* You know how to create a method, right? Leaving out the return type for now, it'd be: public static calculateAverageWeight() { } Step 2: *returns ... weight*. Ok so we know it needs to return a weight - what type is the weight? double! So: public static double calculateAverageWeight() { } Step 3: Now, what parameters does it need to take? *which is passed an array of Bowl objects*. You know how to specify parameters to a method? And what an array is? public static double calculateAverageWeight(Bowl bowls[]) { } So that's the outline done, we just need to fill in the details. Step 4: *returns the average weight of the Bowls in the array*. So we need to calculate the average weight of the bowls in the array. How would you calculate an average of something? This is basic maths; sum of all the weights, divided by the number of bowls. Step 4a: write it out in pseudo-code (that just means use something halfway between Java and English to express the steps involved): set total weight to zero for each bowl in the array add this bowl's weight to the total weight the average weight is the total weight divided by the number of bowls return the average weight Step 4b: convert that to Java: So we know we need a variable for the total weight (what type should it be? Well each bowl's weight is a double, so it makes sense to use the same type here) and it needs to be set to 0, so: double total_weight = 0; Now we need to iterate over all the bowls that were passed in. How do you loop over a collection in Java? with a for() loop: for (Bowl b : bowls ) { } Inside that loop we need code for "add this bowl's weight to the total weight". How do we find the weight of a bowl? Check the methods of the Bowl class and we see getWeight(). So: for (Bowl b : bowls ) { total_weight = total_weight + b.getWeight(); } I don't want to give you the entire solution, so I'll leave the remaining few lines as an exercise. **TL;DR**: Whenever you don't know how to write any particular code, break it down into smaller pieces, and keep doing that until you can convert each piece to code. 
How much do you bench press?
Try Kepler - I've been using it as my main IDE since RC3 and it's running better than 3.7 for me. The official release came out a few days ago. 
Thank you so very much. This is the kind of guidance I was hoping for. When presented with programming problems I often get overwhelmed and need to be reminded to take a step back. This is what you did for me. Thanks again.
Eclipse? Has to be. 
You don't actually need that length check. :)
E-crips
I can get you started with this, it actually isn't too hard. You're going to want to look up the Swing toolkit. There are other GUI toolkits in java, but Swing comes with Java and is pretty simple. There are a few things you have to do: Create a frame; in Swing they're called JFrames. There are a number of ways to do this, my favourite is to create a new class and have it extend the JFrame class. Then just create an instantiation of it in main Make sure you call setVisible(true) in the constructor to make it show up. Another option is just to instantiate a new JFrame and start adding stuff to it. This might be preferable if you just need a quick and dirty GUI. Add controls to the frame. Creating a few instances of JTextLabels (I think they're called) and adding them to the JFrame are all you need to do. Make your code call appropriately when you interact with the frame. Now it's been a while since I've done this in Java because I've been doing a lot of C++ QT and C# WinForms, but you're going to want to call functions when certain events on certain controls get called. It's not too much code when you get down to it, but getting started can be tricky. Stuff I Found: http://docs.oracle.com/javase/tutorial/uiswing/components/frame.html http://www.coderanch.com/t/378809/java/java/adding-controls-JFrame http://www.javabeginner.com/java-swing/java-jtextfield-class-example http://www.java2s.com/Code/Java/Swing-JFC/TextfieldsandJavaevents.htm I'm going to go play dota, but if there's something you have a question on don't be afraid to ask!
300 GB
The biggest performance increase I've seen in Eclipse was when I installed a Solid State Drive. Eclipse hits hard disk quite a bit, lots of small files, and having an SSD helps it a lot. Of course the projects I am working on are quite large as well.
I'm not sure where you're getting that from - Scala is used in the views, but all of the application logic I've written so far has been Java, and normal Java libraries like JPA are baked in...
Eclipse can do some magical things at times... other times it makes you want to hold it under the water until the bubbles stop
A great book that covers this, and other useful topics, is Killer Game Programming In Java. It covers Java game design, Java3D, networking in Java, and other topics that are great to learn. Go here for excerpts from the book: http://fivedots.coe.psu.ac.th/~ad/jg/
thanks, I'll give that a shot
From the Java6 Java docs &gt;By default many of the Math methods simply call the equivalent method in StrictMath for their implementation. Code generators are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of Math methods. This suggests that the JVM could be using a native function to calculate Math.sin rather than StrictMath.sin 
You seem to be in need of help, so here's an easy, step-by-step guide to making Eclipse not suck: 1. Use something else.
JVM generates native platform specific code in Math. Modern processors have separate instructions for many trigonometry functions, those are much faster. JVM makes use of them if possible. StrictMath is the "default" if those native don't exist. And it does the math in software. (hence the slower runtime)
Eclipse seem to consider their OSGi container / plugin system as their primary product, and their IDE as something secondary built on top of the thing. JetBrains and the NetBeans community seem to put their users' ability to actually produce software first. It's a question of different values and valuations.
Thanks. So the code that checks whether or not there exists the hardware instructions would be in the JVM then? If so, that means there is also special-case code to determine if the method being called should follow the compiled bytecode or the JVM-specific version (though I guess that would have to exist anyway because of JIT).
http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/tip/src/share/vm/classfile/vmSymbols.hpp line 637 http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/tip/src/share/vm/opto/library_call.cpp line 1494 (inline_trig) http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/native/java/lang/fdlibm/src/s_sin.c You can easily compile your own OpenJDK which notifies you every time such a library call is optimized in such a way. No need to rely on second-hand information, you can verify it yourself. For that, take a look at http://hg.openjdk.java.net/jdk8/build/raw-file/tip/README-builds.html
I have used eclipse every day for the past 8 years, and I have rarely experienced anything like what you describe. The only time I recall a problem was when I upgraded eclipse and reused a workspace with a bunch of old stuff in the .metadata directory. When you try the new versions do you reuse the same workspace? Also, which eclipse package do you use Base, for Java, for JavaEE, or some other. Which plugins do you have installed? Have you tried disabling some validators? How many projects do you keep open, and have you tried working sets? I would recommend downloading kepler base launch with a new workspace then slowly add individual plugins to see if/when the performace declines.
http://blog.scramcode.com/post/4/6-tips-to-make-eclipse-lighter-prettier-and-more-efficient/
Did you try installing more RAM? I'm new to Eclipse, had performance problems, did that and things run fairly smoothly.
I know, but it saves triggering the for loop, just something I've done for years. I also didn't put in a particular null check in either. Left that for the reader.
&gt; Current version of Eclipse (Juno, Kepler) runs awfully slow. Those are two different versions. Which one are you talking about? You provide specific figures, but do not tell which version you were using. You also do not provide the specs of the computer you were using.
English is not my native language. Could you point out what exactly is wrong?
You should ignore him, your english is perfectly fine.
There's a couple of places you missed out a "the" or a "there" and similar, but nothing to particularly quibble about. Your meaning comes across perfectly clearly and that's all that really matters. I'm finding Eclipse performance is noticeably slower with each release, though not to the same levels you are.
I know. I also know that Juno SR2 and Kepler contain significant performance improvements, which is why it is important the OP is clear about which version has "poor performance".
On a related note, could someone explain to me how StrictMath.sin() works? All I see in the StrictMath source is public static native double sin(double a); 
This is very very true, eclipse shouldn't be slow out of the box but it doesn't take much screwing around to slow it down
"Why does my car use so much gas? I have to refuel every 10 kilometers!" - "Maybe you should install a bigger tank!"
the `native` keyword denotes a native method a.k.a. implemented in the platforms jvm. further reading: [java native interface](http://en.wikipedia.org/wiki/Java_Native_Interface), [relevant Stack Overflow post](http://stackoverflow.com/questions/6101311/what-is-the-native-keyword-in-java-for)
Or buy a car instead of accepting clunkers for free and complaining about them.
You don't say how much ram you give eclipse, or what plugins you're using. Don't have much to say until you give us at least basic info about your setup.
**Math** - Can use CPU optimisations where possible (faster), but the trade-off is that results may vary slightly from architecture to architecture as there are small differences between FP handling on different architectures. Where such optimisations aren't available, uses StrictMath anyway. Use when trying to calculate angle Mario jumps at. **StrictMath** - software only, so may be slower (since where a hardware instruction is available it may well be ignored), but guaranteed to produce exactly the same results on any given hardware architecture. Use when trying to calculate angle at which to insert nuclear reactor control rods. This is the same difference as using the 'strictfp' keyword on floats and doubles.
This is probably because of all the plugins. Even the base editions of Eclipse come with too many plugins to be practical.
Yes, the code substitution/optimization takes place in the JVM, specifically the JIT compiler. Such functions, where the compiler may insert hardware-specific implementations, are called _[intrinsics](http://en.wikipedia.org/wiki/Intrinsic_function)_.
It's true that it's a bit old, but as I was upgrading to Kepler yesterday, I found that most of the voted up tips were still true and definitely made a difference. It was also the most up-to-date that I could find.
It would help if we knew what kind of hardware you are using.
Could you recommend which plugins to disable/remove?
I hope my nuclear reactor control rods control system is not running in Java...
I'm afraid not. It depends on what you need. And there's never a guarantee that plugins work together properly.
Have a `Game` object. The game object controls the flow of the game and meshes all the other resources to work cohesively. Create a `Board` object, that holds an array of the `Ships` a player has. It also has a 2D array (Or similar container, I haven't thought deep enough to see if you'd need something more flexible than the regular kind of array). This array holds... `Entity` objects. These objects contain ship data. Several `Entity` objects together form a ship. They're given a unique ID such as, `Battleship-1`. These objects can also contain no data, which would be empty squares. The `Entity` objects are also stored as... `Ship` objects. These objects are stored in an array, in the `Board` class. The `Ship` itself contains an array of all the pieces that make up a ship. When an `Entity` is hit, and it is a real part of a `Ship`, a boolean, such as `is_destroyed` toggles from `false` to `true`. When all the `Entity` objects that make up a ship are destroyed, the `Ship` is marked as destroyed overall. The `Game` object will initialize the game, initialize two `Board` objects for the players, and the `Board` objects will allocate the correct number and type of `Ship` objects in each board. Entering the setup phase, players place their ships on the board. These modifications are made to the 2D array `Board` has. Ending the setup phase and beginning the game phase, players take turns choosing a square, and the chosen square responds based on what type of `Entity` is in that square. Empty `Entity` objects will report `MISS`. Ship `Entity` objects will report `HIT`. Control passes to the next player, and the same thing will happen. Loop. Once the game detects a player has lost every ship they own, display a Victory message.
So... something like [this](http://i.imgur.com/XkKyHOA.png)? What kind of advice are you looking for?
Wow you got downvoted for that. I completely agree after using Eclipse for 5 years and developing plug-ins for it. It is an utter mess. I would recommend JetBrains IntelliJ for productivity.
I made battleships in one of my CS lab courses. The logic was almost identical to this. As was already said, there's no need for any fancier data structures than plain arrays containing entity-objects. I would also add that if you want to make a simple AI, it would be easy to make the computer hit at random places on the sea, but if certain odds are met, keep trying randomly until a ship-square is found. That way you can implement different difficulty levels by adjusting the odds of trying finding a ship-square. 
so the GUI will create a Game object each Game object will have 2 Board objects 1 for each player. The Board object will contain a 2d array with the spots where the Entity objects are. Depending on how big the the Ship object is it will have so many Entity objects as part of it.
Would you rather prefer if it [runs PDP11](http://developers.slashdot.org/story/13/06/19/1227244/pdp-11-still-working-in-nuclear-plants---for-37-more-years) ?
That is one way of doing it. From what I can think theres a few ways 
&gt; The Eclipse code is anything but spaghetti. &gt; I suspect the code is above your level of expertise and knowledge. http://www.jroller.com/andyl/entry/something_is_really_broken_with I am sure you don't know what you're talking about on both counts. 
Pretty much, yeah.
So a string that says "Submarine" or something along those lines 
If you'd think it'd work, sure.
Indigo works fine for me, not sure which version it is, quite fast, and im on a laptop.
I've done it two different ways: main app --&gt; two boards each board contains the information for the rest of the game (no other objects needed except for event listeners). Just use numbers for the info on the board: 2 = length 2 ship, -2 means it's hit, 10 = empty ocean, -10 means shot and miss.. You only display the squares with - numbers. Method 2: two boards: each board only paints itself (blue with a grid). each board has 5 ship objects which contain length, position, orientation, where they're hit, if they're sunk. Each ship paints itself. Go through the list of ships each turn and let them paint them selves.
here is a MVC battleships Class Diagram I did for uni http://i.imgur.com/cRZ9Vb6.png?1 Here is the code, BlueJ project and accompanying report https://www.dropbox.com/s/zavucwrav61htwc/Battleships%20Project.7z I over complicated the project on purpose to understand how to use Swing and MVC together, as I was coming from a C# WPF and MVVM background when I made the game.
&gt;&gt; I was working on a hobby project and I had to use sin() a lot (it could be several billions of calls). So I was looking at ways to speed it up Lookup tables. Unless you need perfect accuracy, usually you can get away with a arra of elements, and then truncate the input to retrieve the appropriate array index: [code] private static float[] SineTable = new float[65536]; static { for (int lookup = 0; lookup &lt; 65536; ++angle) { SineTable[lookup] = (float)Math.sin((double)lookup * Math.PI * 2.0D / 65536.0D); } } public static final float sin(float param) { return SineTable[(int)(param * 10430.378F) &amp; 65535]; } [/code] I guess this doesn't actually answer your question but it seemed like you might have been looking in the wrong places to optimize.
There's a "Code" button above the textarea to format a selection as code...
Nope, plugins are loaded lazily anyway. Won't help.
It doesn't exist.
Only applicable if OP was referring to Java the platform...
Have you heard of Weka? http://en.wikipedia.org/wiki/Weka_(machine_learning) http://www.cs.waikato.ac.nz/ml/weka/ (seems to be down at the moment)
not 'the Ubuntu Eclipse Font' but the font used in eclipse in Ubuntu
Good luck with your search.
I don't do much anything about games, but here's my input. First off, when you say list, you are actually using an array. A list is a dynamically expanding list of objects. If all of the objects have a refresh method, define an interface with refresh() in it, call it something like "GameObject". Then, any object can implement GameObject, and define the refresh method. That way, in the main loop, you can generalize the code: public interface GameObject{ public void refresh(); } public class Player implements GameObject{ //blah blah public void refresh(){ //blach } } public class Enemy implements GameObject{ //blah blah public void refresh(){ //blach } } Then, in you main loop, you can keep a List (expanding array essentialy to answer your question of infinite arrays, which is what you were using) of GameObjects. List&lt;GameObject&gt; objects = new LinkedList&lt;GameObject&gt;(); //You may want to change LinkedList into something else, like ArrayList objects.add(new Player()); for(int i = 0; i &lt; NUM_ENEMIES; i++){ objects.add(new Enemy()); } for(GameObject o : objects){ o.refresh(); }
Also, for checking conditionals, consider doing an event-based design, instead of checking every loop. Should be quicker/easier to expand. Have each object capable of adding listeners for different events (like footDown, etc). 
Thanks for the response. I'm a complete beginner at Java though, so I have a few questions about what you've said. I didn't know what an "interface" was until I looked it up just now. An interface seems like a useful way to reuse code in numerous classes. However, I have one problem with it. Most of my refresh() functions are very different from one another. Class Player might be reading keyboard input where class Enemy is checking if its ready to fire another bullet or something. I couldn't just "implement" one refresh() in the place of many very different refresh() methods. I found your for loop to be very interesting. for(GameObject o : objects){ o.refresh(); } As I've said, I'm a beginner to Java. I have always seen a for loop as for(initialization;conditional;step) I'm not sure what this (interface:list) thing would do. List&lt;GameObject&gt; objects = new LinkedList&lt;GameObject&gt;(); I don't know what &lt;&gt; do in Java. I've always used [] for lists (this is a list, right?)
An interface is not for reusing code, it is more of a template. If the GameObject interface has the method refresh() (there is no implementation), then any object implementing GameObject MUST implement the refresh method. Each object still has its own refresh implementation. In my example, you can see that the Player class and Enemy class can have different implementations of refresh. &gt;I've always used [] for lists Nope, brackets are for arrays. Arrays have fixed dimensions. A List is a completely different object. &lt;&gt; is for Generics (good resources if you google this), which is a bit of a more advanced topic. Essentially, you can replace GameObject with any other class name for a List of that object. for(GameObject o : objects){ o.refresh(); } This is called a for-each loop. For every object in the list "objects", the code will run. Every iteration of the loop will have the next GameObject in a variable named o. Here's a simple explanation: http://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work
I would absolutely love to talk about the optimizations I've done and looked at for this project (I've spent quite a bit of time as I'm quite interested in optimizations). To be fair, looking at the Math.sin vs StrictMath.sin was just the first step - I was attempting to look at the Math.sin implementation to see if there were anything I could do to speed it up. I've heard of lookup tables before but wasn't quite sure how to make them fast for parsing the parameter (I see your &gt; [(int)(param * 10430.378F) &amp; 65535] and think that might be the missing piece - I will give this a shot! Thanks!). But first, I have to describe the project and what I'm looking for in terms of optimzations. I am using the Sandell Harmonic Archive (http://www.timbre.ws/sharc/) in order to get timbre information about different instruments and their harmonics. The user can click to, for example, add a note of a violin for the pitch A4. Then, they can "synthesize" it, which goes through each harmonic of the violin's A4 and generates the audio data using the formula: audio value[currentSample] = amplitude * sin(2 * pi * frequency * currentTime + phase); This needs to be done for the length of the note for each harmonic (the number of harmonics depends heavily on the instrument and pitch - e.g. a tuba on the low pitches can have 150+ harmonics, whereas a violin's A4 (at 440Hz) has 22). So for a note that is only 1 second long at 44,100 samples per second with 22 harmonics, sin() is called nearly 1 million times (and that's with a short note with a low number of harmonics - if you make this a whole song with multiple instruments, this number increases dramatically). I did a lot of searching around the internet and testing out others' optimizations with sin/cos (as I could make a sin from a cos by just adding a specific amount to the phase [though I forget that value at the moment]), and I've come up with 2 versions which are good approximations (as the accuracy depends on whether or not their is an audible difference between Math.sin() and the approximation). The first is just an approximation of sin, adapted from http://lab.polygonal.de/?p=205 public static float sine(float x) { //set the range between -pi to pi. //equivalent to: x = x % pi2 x = (x - (float)((int)(x * inversePi2)) * pi2) - floatPI; float x2 = x * x; if (x &lt; 0) { float sin = 1.27323954f * x + .405284735f * x2; if (sin &lt; 0) return .225f * (sin *-sin - sin) + sin; else return .225f * (sin * sin - sin) + sin; } else { float sin = 1.27323954f * x - 0.405284735f * x2; if (sin &lt; 0) return .225f * (sin *-sin - sin) + sin; else return .225f * (sin * sin - sin) + sin; } } The best optimization I've come up with takes advantage of what it is I'm using sin for. I know that when I call sin(), the only change will be to the time value. Since I'm using it to generate tones at different frequencies, I know there's a cycle that repeats every X samples (where the X depends upon the frequency - for example, at 440Hz the cycle is repeated every 100 samples). This is still an approximation though, because it's not *exactly* 100 samples, but that doesn't seem to make an audible difference. So I effectively have a static lookup table for each frequency I'm synthesizing which is stored in memory and if that note is synthesized again, all of it's harmonics will already be in memory (I use Math.sin to generate the values, there was barely any time difference between using the approximation above and Math.sin so I'd prefer the more accurate). So the calling code just states what frequency it needs, and the code will either pull the table from the static hashmap or generate it and put it in the hashmap. Then it calls getNextValue(). Each note is synthesized on a different thread (well, it uses a pool) so it has to handle multithreaded access. Here's a listing on pastebin so I don't take up the whole vertical space of everyone's browser: http://pastebin.com/bN6tR2VZ I will give your version a shot and see how it compares! By the way, where did your (param*10430.378f) come from? And if you want to talk more about optimizations, I'd welcome it. I actually don't have much experience with it! Edit: I have tested the lookup table you mentioned. The test song I was using (single-threaded to ignore the extra complexities of the thread pool and thread allocations/etc) with sine() method above (not the pastebin'd one) took ~6.4 seconds to synthesize. Your lookup table took ~5.7 seconds and my FastSine (the pastebin'd one) took ~5.3 seconds. I need to note that this wasn't a sine test - this was a regular run of the app, with many more floating-point calculations that must be done for every audio sample (the ADSR envelope, the 2*pi*freq*time + phase value that goes as the sine parameter, etc...). So your improvement over the sine() above is pretty significant (as it sped the whole app up by a noticeable amount). While I'll still be using my version as the main sine function, I can't use it in all circumstances. The main limitation is that it only works if the time value is the only variable during the course of the harmonic synthesis - if I'm calculating something like pitchbend in which the frequency and phase are changing as well as time, I will be resorting to your lookup method instead of the sine() above which I was using. Thanks!
Oh, that's an interesting idea that could possibly help with organization. Would it make sense, then, to have two methods inside of each class? Instead of a single `refresh()` inside of each class, it could be broken into `refreshConditionals` and `refreshValues()`. You could even keep `refresh()` and put the other two inside of it, in order to be able to use the interface you mentioned without any complications. void refresh() { refreshConditionals(); refreshValues(); } I will definitely do that next time. Now, back to trying to wrap my head around your other comment...
Also this guy: http://mahout.apache.org/
You can also define refreshConditionals() and refreshValues() in the interface, and have the main loop call those two methods. I'm pretty terrible at explaining things, so it might help to just google Generics, Interfaces, Abstract Classes (might be helpful), and for-each loops.
Yep, that's what I had in mind! Put all common methods into the interface. 
Thanks guys. anything else?
Instead of using a regular array, you might want to use something like an ArrayList. There are other kinds, but ArrayLists are simple enough. It will automatically adjust in length as new ones are added. Second, you should probably use either some sort of interface like rp181 said, or use abstract classes. For example, you could have an "Entity" with all of the methods a normal game entity would use, like getting positions, adjusting positions, drawing, refreshing, etc. Then, any new entity you make, such as players, enemies, boxes, or anything else will extend or implement the entity.
&gt; PATH%/$PATH environment variable sorry to ask but how would I check this?
You can include it as a jar in your project and easily access all of its data structures and algorithms. Just did a random google search and came up with this - http://weka.wikispaces.com/Use+WEKA+in+your+Java+code . Maybe it'll help? Or just google around some
&gt;Instead of using a regular array, you might want to use something like an ArrayList. I wasn't aware that there was a dynamically expanding array called a list that was so simple to use. I always thought I would need to learn how to use "containers" for some reason. I assume that dynamic lists are the ones that use &lt;&gt; instead of [], like rp181 has been saying? I will definitely learn how to use those. Lists are probably the most straightforward and obvious improvement to my code in this thread. &gt;For example, you could have an "Entity" with all of the methods a normal game entity would use, like getting positions, adjusting positions, drawing, refreshing, etc. Then, any new entity you make, such as players, enemies, boxes, or anything else will extend or implement the entity. You're talking about inheritance, right? I guess it would be helpful to have a base class for all of my "entities." However, I always thought that drawing, repositioning, and condition checking were supposed to be separated. What you're describing seems to merge all of those together. I don't know if it's a good idea to give each entity the capability to draw to the screen.
I've used Mallet for school projects before.
Yes. You create lists using &lt;&gt;. Inside &lt;&gt;, you put what you want to store. For example, if I wanted to store Integers (the class, not to be confused with int), I would put ArrayList&lt;Integer&gt; asdf = new ArrayList&lt;Integer&gt;(16); . The (16) is the starting size, not the maximum size. Now, there are two options being suggested here: Using an interface, and using an extended classed. For this example, I am going to be using an extended class. It may be abstract. Now, when using the base for your entities, lets call it the Entity class, all the methods are required to be included in the other classes which extend it. However, you can write new methods with the same name in these extended classes, and you can also write multiple methods. An example class might look like: public abstract class Entity { int x; int y; public void refresh() { } public void draw() { //Drawing code goes here } public int[] getPosition() { return new int[] {x, y}; } } Now, a player class which extends this will automatically have the methods in entity. However, in the player class, we can rewrite this method to be different from the basic entity class. The methods are separated, but automatically included until they are rewritten in each class that extends it. This means that if we have an invisible entity, we can have the draw() method in that entity be public void draw() { } and it will replace the draw method in the entity class for that invisible entity. Now, doing this also offers a huge advantage. Before, you might have had to have a seperate list/array for each type of entity. Now, due to each class having the same base, the Entity class, we can create an Arraylist of Entities by having ArrayList&lt;Entity&gt;. This means we can store all of our entities in one list. This simplifies repetitive actions by allowing us to loop through to each one and calling the refresh and/or draw methods, or any other methods that the original Entity class contained, but which now may be changed. 
Cab you integrate this with Spring? + any examples? 
Looks like I used JavaML for a project in school once, might not be applicable but you can check the site and even my github repo where I used even though I don't remember much about it now. http://java-ml.sourceforge.net/ https://github.com/melink14/6.867-Final-Project/tree/master/src/project6867
Thank you for explaining inheritance like that. I have always been slightly confused on how to override parent methods in the child. Do you by any chance have an easy way of explaining the keyword `super`? I know that it has something to do with overriding methods and attributes in the parent... Are `ArrayList&lt;&gt;`, `List&lt;&gt;` and `LinkedList&lt;&gt;` examples of Generic classes? The "&lt;&gt;" makes it seem so. If that's the case, I guess it would make sense for a type to be placed in the angle braces--which is why you wrote `ArrayList&lt;Entity&gt;` (and `Entity` is a type.) Since `Entity` would presumably be the base type of all other entities, could any child of `Entity` also be put into the ArrayList? I ask because the relationship between parent and child is one-way. A child is the parent, but the parent is not the child. It doesn't seem like you would be able to store a child in a list made for the parent (but you could do vice-versa.) Would you be able to store *a child of* `Entity` in a list `ArrayList&lt;Entity&gt;`? If you could, that would be really helpful, because, like you said, you could store many types of objects in a single list. --- Also, what I said before about the draw event was wrong. Now I can see that. Your `draw()` function is separate from the other operations.
Are you on windows? If you are click on Start, then right-click on Computer, and select properties On the window that pops up click on advanced system settings, and in the advanced tab of that window click on environment variables. Under system variables there is a variable called Path, click on that and click Edit And to the beginning of the value add the path to your Java installation, followed by a semicolon Example: C:\Program Files\Java\jre7\bin;C:\Program Fi... etc
Ok, thanks! And sorry!
After a decent amount of reading about Generics and `List&lt;&gt;`s, I finally feel confident enough to reply to this post. for(GameObject o : objects){ o.refresh(); } &gt; Essentially, you can replace GameObject with any other class name for a List of that object. I get that this for loop is running through the list `objects`. What I don't understand is why the `GameObject` `o` has to be `refresh()`'d so many times. With each iteration of the for loop, what exactly changes about `o`? When you call `o.refresh()`, what happens? I understand that `o` is a `GameObject`: public interface GameObject{ public void refresh(); } When you call `GameObject`'s `refresh()`, what happens? Do all objects that have implemented `GameObject` suddenly `refresh()`? Probably not...
Or maybe a ship object with a enumerated type 
&gt;What I don't understand is why the GameObject o has to be refresh()'d so many times "objects" is a list of several GameObjects. This is calling refresh on all of the items. This: for(GameObject o : objects){ o.refresh(); } is equivalent (but much more efficient) to: for(int i = 0; i &lt; objects.size(); i++){ GameObject o = objects.get(i); o.refresh(); } Every GameObject has its own refresh method, and each is called. I suggest making a simple class and playing around with Lists, so it becomes clear.
Yes, they are Generics. List&lt;&gt; is actually an interface, and ArrayList and LinkedList are different implementations of the List interface. Different implementations are better suited for different situations. The type should be the highest level class (the parent) of the objects that will be stored. Any subclass (nth child) of the parent can be placed into the list. For example, a List&lt;Object&gt; can store anything in java (except primatives), since all classes subclass Object. Another example, if you have a List&lt;Car&gt;, it can contain Trucks, Vans, Sedans, etc, if they all extend Car. super just references the parent class. To override, you just retype the method exactly, and put a @Override annotation above the method name. The example TriggerHurt gave should probably be more like this: public abstract class Entity{ int x; int y; public abstract void refresh(); public abstract void draw(); public int[] getPosition() { return new int[] {x, y}; } } Because there is no default behavior. Because the methods are abstract, you won't be overriding the methods, just implementing. EDIT: Overriding example: public class Entity{ //extends Object by default, as with all Objects in Java //This class is already defined in Object, but you can provide your own implementation @Override public String toString(){ //do stuff } }
Once more I call you out on your BS. The jroller page doesn't say the Eclipse foundation is spaghetti code, rather it talks about the dire need for funding in order to maintain quality. The foundation code is very well designed. Have you ever even written a substantial Eclipse plugin?
Yeah, I should probably become more familiar with Lists. I'm still not sure what the (presumably built-in) `get()` method means in: GameObject o = objects.get(i); I guess there are a few other well-known methods--like `size()`--that I should know for Lists as well. Until then, I'm not entirely sure how that first `for` loop works.
It might be automated, but it is still good practice to include it. Yes, it works with other data types, pretty much in all cases, such as method parameters. This is a really powerful point in inheritance. Abstract means that it is, well, abstract. You're saying it's there, but there is no definition for it yet. An abstract class is a partially complete class, and a subclass of it finishes it via overriding. Say you have the class Dog extending Mammal. You could do: Mammal m = new Dog(); say m.getClassification() is a method to get some information. Inside the dog class, you can do super.getClassification(). super is just a reference to the parent class.
I am usig windows 7, sorry for not entioning that. I followed your instructions, and I thought it might work since Java was infact not in the path, but when I added "C:\Program Files (x86)\Java\jre7\bin;" it didn't end up working.
look at the JavaDoc, should become clearer
&gt;It might be automated, but it is still good practice to include [@Override]. [I guess so.](http://stackoverflow.com/questions/94361/when-do-you-use-javas-override-annotation-and-why) &gt; Mammal m = new Dog(); Holy sh*t that's awesome. &gt;super.getClassification(). super is just a reference to the parent class. Okay, that makes sense. The only reason I asked is because I've seen `super` used in strange contexts before, but I looked it up on Google just now and couldn't find any of it.
No problem. Super() is like calling the constructor of the class that something is extending. It is not necessary, but can save time. super can be used to reference the class. Don't think of these as parents and children. Think of extends and implements as "Is a" and "Can do". If it IS AN entity, then we can store it and know it is similar to other things that ARE AN entity because it extends Entity. If you implement something, it CAN DO that thing. It can be a bit more complicated, but that is the best way I can explain it. For example, a player class IS AN entity, so it might extend the Entity class, but since it needs to be controlled it might implement a special Controllable or something similar that other Entities don't have normally, so that we know it CAN BE controlled. I think rp181 explained some stuff (and corrected me a little- I wrote that too quickly, I guess!) better than I did, so you should listen to him too. Edits: Made it a bit more clear on what does what. 
I read [Oracle's documentation on interfaces](http://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html), and it seems to me that they are just ways of grouping numerous--possibly private--methods and making them easily accessible to other classes. Is that really it? I feel like I'm off and there must be something more...
Thats mostly it, really. You can use certain things like instanceof, polymorphic arrays (what I described earlier), and a few other things which give both a bit more use in organizing and testing classes based on what they can do.
Don't know how much spring you already know. Read up on dependency injection, inversion of control, and aspect oriented programming; If what your looking for is a high level idea of what the framework is doing. It will do pretty much anything, web-apps are a very small part. At least run yourself through pretty much any context.xml bean wiring hello world tutorial to get a very basic idea of what's going on. The section of the spring tutorials, or what to plug into google is spring web mvc if you want to make a web app with it. It's easiest to do by annotation,(some people like the handlermappings in a list in the context.xml though, to taste really). You'll have a dispatcher servlet in your web.xml, you'll probably want to pass it contextConfigLocation this is the path to an xml file relative to web-inf. This xml file holds your controllers, handler mappings, viewresolver, messagesource; everything. The complicated bit is the controller you'll want to look up these annotations, modelattribute, and requestmapping. Handler mapping just delegates the requests to different controllers. View resolver is used to map strings to jsps eg a requestmapping returns a modelandview object the view object string is translated to give me this jsp by the viewresolver. Best just stick to the default one for that, for now forgot what path that puts the jsps at though =/ Wish I knew a good tutorial for it. I kind of just picked it up reading the manual :( 
The only other thing i can think of is when it is used in constuctors. If a super class has a default constructor, then any subclass HAS to call super(...) as the first line in the constructor.
I got started by reading [Spring: A Developer's Notebook](http://www.amazon.com/Spring-Developers-Notebook-Bruce-Tate/dp/0596009100/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1372652004&amp;sr=1-1&amp;keywords=Spring+a+developer%27s+notebook), which had a great high level explanation that made spring (mvc) make sense. It was a great way to get the basic concepts of what made spring, spring. Of course, the code examples didn't always compile or run 100%, and there were critical configuration steps that were blatently missing from the examples. Furthermore, the book was made for spring 2.0 (before annotation-based configuration existed). Now this is going to sound crazy, but I recommend looking at some of those tutorials that you've been seeing, and just straight up reading the [reference documentation](http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/). It will teach you about inversion of control, usage scenarios, and a lot of different things that just make sense. This document will take you a long way in understanding what an ApplicationContext is, or why/how you set one up when making a web application. Yea, you can get started without understanding these things, but doing so will maximize the learning curve when you get bit by something. It's not a bad read. **EDIT:** If you want to learn from the docs for the bleeding edge, check out the actual [docs section](http://static.springsource.org/spring/docs/) and go to the newest version (4.0.0.M1). The link I provided above is the most recent currently supported release.
Check out mkyong.com He has very good tutorials there on a wide variety of points. 
Looks good to me. 
SpringSource has excellent tutorial projects on their GitHub site [here](https://github.com/SpringSource). They are not step-by-step, but are usually well documented.
[Here's](http://stackoverflow.com/questions/738629/math-random-versus-random-nextintint) a detailed StackOverflow answer of the question. Essentially, Math.random() uses Random.nextDouble() internally. If you want the values as an integer, then use an int cast.
what does JavaML actually do? does it give you recommendations on similar items?
You're probably using an open source java implementation. Try just reading the method implementations.
shit I forgot about enums.
Mahout runs on top of Hadoop (at least last time I used it), so it scales nicely. Hadoop will split the file and distribute the parts to the separate nodes. Or you separate the file yourself. If you are only running one node this doesn't apply, of course. I had a task that took a day on my laptop run in just over 20 minutes on 20 instances on AWS using Mahout. Very satisfying.
From jOOQ's point of view, your custom domain model should not be restricted because of any ORM mapping rules. While jOOQ provides simple and straight-forward 1:1 mapping rules between tables and POJOs, you can flexibly override this behaviour to map flat SQL results onto your complex object graph: http://www.jooq.org/doc/3.1/manual/sql-execution/fetching/pojos-with-recordmapper-provider The essence here is that *you* decide how complex your domain model will get. Not jOOQ.
ActiveObjects seems to be a clone of the pre-existing, more mature [ActiveJDBC](https://code.google.com/p/activejdbc)
I would personally not look at Spring at all, but just start with Java EE. Spring was once an attempt to patch up deficiencies in the then lacking J2EE. But J2EE became Java EE, and it's no longer lacking. Ergo, many feel there's not much use for Spring beyond knowing it for legacy projects.
Alright, it's a bit hard to see whats wrong from here, but heres some things you can try: * Open command prompt (Press start and type cmd in the searchbar) move to the location of a java program by using commands (cd folder, to move to a folder thats in the folder you are currently in) (cd .. to move back a folder) Once you are there, type: java nameofprogram And see if it gives back any errors in the command prompt. If so, copy paste here * In command prompt, type: java -version and copy paste the result here. * If any of the above commands fail, remove any Java from your computer, (click on start &gt; control panel &gt; programs and features) Look for Java and rightclick it and choose Remove/Uninstall, after that delete both Java folders in Program Files and Program Files (x86) if they exist * Now check what kind of operating system you have by going to start &gt; right clicking computer &gt; properties. In the window that pops up it will say under System Type either 32-bit or 64-bit. Then go here: http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html And if you have 32-bit download: jre-7u25-windows-i586.exe If you have 64-bit download: jre-7u25-windows-x64.exe * Install the one you have downloaded and try the first two commands again
I've never heard GWT referred to as "simpler" than a MVC server-side framework. Don't get me wrong, GWT is okay and all, but IMO it is not simpler.
henk53 does not like Spring. It's cool - he talks a lot about how cool the new JEE is (and, it is). But I think he's comparing the Spring 2.5 era stuff to modern JEE, of course JEE wins. Spring 3.2 (and really 3+) compared to JEE now is really an apples to apples comparison. IMHO - both get the job done. For me it comes down to I prefer having my jar dependencies in my war file and not in my container. I personally find upgrades easier to deal with that way. Ever wanted to try a new version of hibernate? Update the version in your POM and tada! Upgraded. Need to upgrade Hibernate in your container? Ohh, gotta swap jars, no maven assistance, huh? container specific versions, what? ugh, nevermind - I'll just keep Hibernate 3.6. Sure, you can set up build and deploy scripts around your container, but why do it if you don't really have to... All that said, if someone wants to use the full stack of JEE - sure, pick that over Spring - it's not going to kill ya. But for me? I'd prefer spring (it also helps that I have previous knowledge with Spring and the JEE CDI stuff is relatively new compared to Spring DI - hence, a lack of familiarity)
Is that the whole error?
Yep, thats all it says :(
I assume you're using Eclipse, or a similar IDE. Do you have any errors displayed there?
+1
Could you post the whole stacktrace of the error?
You need to fix that before your program will run. Errors displayed in your IDE *need* to be fixed before it will compile properly. I was under the impression most IDE's would stop you completely from compiling until an error was fixed.
This was all built with Java and JavaFX. As for scoreboard, you mean the whole design or say the numbers should visually look more like a [typical counter](http://0.s3.envato.com/files/26076617/Analog_Counter\(CS5\)Inline.jpg)?
That's a good idea; line up the Play/Stop buttons with the logo below. The current attempt is sort of lost as well with it blending in with the previous record and appearing as less of a priority. Thanks for the suggestions!
Story for a game? This is not related to Java or any other programming language. Just ask at /r/gamedesign or /r/gamedev My suggestion, make a game about sending rocket into space and landing on the moon. Implement realistic gravity. Something like this: http://dev.keraj.net/space/
SO both before and after the fresh reinstall I've gotten these errors on both commands: For running a java app: (typed in "java minecraft" and "java minecraft.exe") "Could not find or load main class minecraft" for checking the version: (typed in "java - version") "Unrecognized option: - Error: COuld not create the Java Virtual Machine Error: A fatal exception has occurred. Program will exit." (typed in "java version"): "Error: Could not find or load main class version" these happened both before a fresh install and after, as well as after a rebooting of the system. 
The reference docs are fairly good. Tutorials are a great jumping off point, but you should always refer to the docs, which have examples.
Thanks, forking it right now and will test with it. *Edit:* Unfortunately I have to use tomEE, since I develop this for a friend of mine, so he can get used to the vmware version of tomEE and deploying of spring stuff to it.
I work with slick quite a lot. 1. Replace the imports with "import org.newdawn.slick.*;" 2. Make a res folder in the working directory, it makes distribution possible. Does the IDE have any underlines with errors?
Thanks, forked it too and the Initializer is not being loaded (Spring is not being bootstrapped by tomEE...)
I'm not a Java dev, so sorry if this is wrong, but it looks like *movementRight* and *movementLeft* are being defined in your *init* method, but they're being referenced when you define *left* and *right* at the top of your class. What if you put these two lines: left = new Animation(movementleft, duration, false); right = new Animation(movementRight, duration, false); **ERROR HERE** In the *init* method like this: @Override public void init(GameContainer container) throws SlickException{ grassMap = new TiledMap("C:/Eclipse/game/src/mygame/test.tmx"); charRight = new TiledMap("C:/Eclipse/game/src/mygame/charright.tmx"); charLeft = new TiledMap("C:/Eclipse/game/src/mygame/charleft.tmx"); Image [] movementLeft = {new Image("C:/Eclipse/game/src/mygame/charleft.tmx")}; Image [] movementRight = {new Image("C:/Eclipse/game/src/mygame/charright.tmx")}; this.left = new Animation(movementleft, duration, false); this.right = new Animation(movementRight, duration, false); int [] duration = {300, 300}; } I realize that you probably wouldn't want to leave them there, since your *init* method is for loading static resources, but see if that is part of the problem. Again, sorry if this is way off the mark.
I have to use EJB 3.0 because we have JBoss 5.0 But I'm looking for an example, with some code in the different tiers
Simple Spring MVC Web Application using Gradle: http://codetutr.com/2013/03/24/simple-spring-mvc-web-application-using-gradle/ 
Okay, well minecraft is a .exe file so you can't run that with the 'java' command. The version command is "java -version" no space between the minus and version So try that again and see what it says
Why don't you check out the Java EE 6 tutorial? I think Duke's Bookstore is a really nice demo application to get started.
That's true, but if you already exposed to it before, it's kinda stick since GWT has a well designed API.
JSF + PrimeFaces is great, but it won't scale.
Hey, thanks for your answer. I found a interesting option, the showInputDialog, but it only accepts string. I'm trying to validate the input before proceeding, but it will give a error before validating the OPC variable. Is there a way to make something similar like the code bellow, but to input a integer directly? String input; int opc; input = JOptionPane.showInputDialog("\n Input a value: \n 1-Sum \n 2-Subtraction \n 3-Division \n"); opc = Integer.parseInt(input); if(opc != 1 || opc != 2 || opc != 3){ JOptionPane.showMessageDialog(null, "Entrada invalida."); Pergunta(); } if(opc==1){Soma();} 
This is a littler older, but maybe helpful https://github.com/chadhahn/springweb-without-xml 
It's just a silly error: String input; int opc; input = JOptionPane.showInputDialog("\n Input a value: \n 1-Sum \n 2-Subtraction \n 3-Division \n"); opc = Integer.parseInt(input); if(opc != 1 &amp;&amp; opc != 2 &amp;&amp; opc != 3) { JOptionPane.showMessageDialog(null, "Entrada invalida."); } You need to change those ||s to &amp;&amp;s. What's happening is that if you input 1, the if statement looks at 'opc' and says, well it's equal to 1, but it's not equal to 2, so lets show the error message. If you use &amp;&amp; and input 2, it will say, ok so it's not equal to 1, but it is equal to 2, so don't show any error. Does that make sense? (I'm really tired and at work, so don't be afraid to ask me to clarify anything.) 
I used javaee6 (hibernate over jpa, jaxrs and angularjs for the frontend) to build CommaFeed, a google reader replacement, take a look at the sources [here](https://github.com/Athou/commafeed)
Yes, you are right, i don't even checked it because i was trying to fix the first part. If you input spaces or nothing(null i believe) it will generate the error bellow: Exception in thread "main" java.lang.NumberFormatException: For input string: " " It reads the input variable first, and trying to find a solution for it.
Thanks!! I'll take a look at it
http://www.javaforge.com/project/t2r the demo ticket system from the book EJB 3 professional http://www.holisticon.de/cms/EJB3Buch/SourceCode
Thanks a lot!!
what should i try to run with the "java" command? using java -version this came up: "java version 1.7.0_25 Java(TM) SE Runtime Enviornment (build 1.7.0_25=b17) Java HotSpot(TM) 64-Bit Server VM (Build 23.25-b01, mixed mode)" Thank you by the way
They do have an IRC channel where you can ask these kinds of question directly from the authors themselves.
&gt;left = new Animation(movementleft, duration, false); right = new Animation(movementRight, duration, false); **ERROR HERE** In the first line, you have movementleft, in the second (error) line, you have movementRight - note the Capital "R" - could this be a possible error since Java is case sensitive?
no programs work. Nothing in browsers, and no games work. This is for anything Java (but most direly minecraft :( )
ah, sorry. you can do that by adding an if statement before you parse the integer. String input; int opc; input = JOptionPane.showInputDialog("\n Input a value: \n 1-Sum \n 2-Subtraction \n 3-Division \n"); if(input.equals("") || input.equals(null)){ opc = Integer.parseInt(input); if(opc != 1 &amp;&amp; opc != 2 &amp;&amp; opc != 3) { JOptionPane.showMessageDialog(null, "Entrada invalida."); } } Strings in java are considered objects, so you can't use "==" to compare them; you have to use the .equals() method.
After looking over the code and the requirements of the program, I'm wondering what exactly the class has been taught prior to this assignment, because there are a whole slew of problems here. Has the class learned: * if/else statements? * how to use an input scanner? * basic types like int/float/double/strings?
What is a ~~secret~~ hidden API?
Might be useful: https://github.com/open-archetypes/multi-javaee6-archetype
Really? Did you already told Lufthansa that they don't scale? Maybe Ford and Deloitte would be interested in this information too.
There's no official API which means you have to go with parsing the links and see how to put variables in them to get what you want.
what about [YQL](http://developer.yahoo.com/yql/)? 
Try this StockHelper sh = new StockHelper(); sh.getStock("A"); sh.getStock("B"); sh.getStock("C"); sh.getStock("D"); sh.getStock("E"); sh.getStock("F"); sh.getStock("G"); and see what happens. If that doesn't present some concurrency issues then throw a bit more load at it. Watch out for "static".
How do you call that from Java? 
This worked for the animation one, now I just need the float x, y one.
Are these all the fields you can get out of the api? 
In addition to not using statics, seriously consider refactoring your helper. You have a lot of copied and pasted double parsing logic that should be extracted to a method. Also please don't catch an exception and printStackTrace from a library...
Was your test based on a facebook library or something?
Consider an interface for your helper class and an implementation of that interface for the Yahoo! API. Then users could swap in their own implementations (perhaps for exchanges that aren't supported by Yahoo!).
I think you create your query specify Json or XML output and it gives you a URL
There is a full list [here](http://www.gummy-stuff.org/Yahoo-data.htm). I plan on adding more soon
Well for starters, this is the description for the CSV download http://www.gummy-stuff.org/Yahoo-data.htm For YQL, you can look at the console here http://developer.yahoo.com/yql/console/?q=select%20%2a%20from%20yahoo.finance.options&amp;env=store://datatables.org/alltableswithkeys#h=select%20%2a%20from%20yahoo.finance.options%20where%20symbol=%27GOOG%27
You could do that if you wanted to expand its capability with other functionality and what not, but I think /u/tritium6 was pointing out that if there are multiple instances of StockHelper hanging out, stuff will go awry since it's has static global variables. They could be accessed by multiple instances of StockHelper all at once just making everything a mess.
I don't know if I'm just misunderstanding this. It seems very simple. Just create a sum variable and add to it every time you output a number. Then at the end you simply print the sum variable.
 String name = "name"; String input; while(!name.equals(input)) { System.out.println("Enter a name: "); Scanner sc = new Scanner(System.in); input = sc.next(); } Not do while but I think it's neater and works fine for your purposes. I honestly only use do while when I have to, which is not often 
That holds for JSF as well. It too has a well designed API and if you have been exposed to it before (version 2) you tend to keep using it since it works so well.
I partially agree with you. Jars in the war has a benefit and is IMO the only real big difference between Java EE and Spring today, but read below... Not all containers have difficult to swap out jars. With GlassFish, JBoss and TomEE this is mostly easy if you want higher versions of the same thing the container is using. E.g. a higher version of Mojarra if the container is using Mojarra etc. You can also build your own Java EE server from scratch, just as you do with Spring. Just start with Tomcat or Jetty, or even an OSGI container so you can upgrade Servlet from your application as well. The disadvantage of building your own with either Spring or Java EE, is that you have to maintain the stack and make sure everything integrates well together. That is where TomEE comes it. This is Tomcat + jars, but the selection and testing is already done for you. There are also some Spring configurations where you have the Spring libs already at he server (Tc server). As we see, the big difference between Java EE and Spring maybe isn't there at all, it's more of a cultural default but not a really technically enforced difference. 
Spring is **not** awesome! It's the posterboy example of XML hell and the main reason of the fun fans from other languages are making about AbstractDecoratorFactoryFactorySeeker.
If you are already using TomEE, then why not use CDI? It's already available and configured in TomEE. You only have to add an empty beans.XML in WEB-INF
EE app servers are great, just don't use Spring on them ;) To clarify; Spring should run on any Java EE server, but it's largely unnecessary to do so. The majority of things offered by Spring are already available in Java EE and you'll be better of using these. The only reason for running Spring on Java EE would be if you had an existing Spring app that you gradually want to migrate to Java EE.
http://forum.primefaces.org/viewtopic.php?f=3&amp;t=14778 Request based approach will scale better compared to the component based one. In addition to that, for small team, by using GWT you can reuse your code base for your mobile applications then deploy in all mobile devices that support Webkit (Android, iPhone, Blackberry 10). My team cannot achieve this if we use JSF (I know that Primefaces support mobile web, but not mobile application since it is actually a server-based framework). This is another reason why I stick to GWT.
To me, this sounds very helpful to be honest. I would not wrap it as service-only or anything, because it will be hard to convince people to use it without being able to see it in action first. Use one of the 'free for personal use, buy a license for commercial use' kinda licenses.
Before you do any work, examine existing software such as logstash, kibana and graylog2 to check if your dashboard idea isn't already implemented. And if you decide to build something, consider that seeing the exception is only the starting point: as a developer, if I cannot see the log of what happened before, the exception itself is not very useful.
JBoss supports .war based projects too, not just .ears. Make sure you really need the EJB functionality. 
Yep, you're totally right; however, maintaining two dependency trees seems harder to me than 1 dependency tree. Also, if you have 3 wars in 1 lightweight container that all need a separate version of _hostedByContainer.jar_, you're sort of forced to either not host 3 wars in the single container or do some funny business where you do classloader wizardry to bypass the container classloader to use the dependency from your war. I get it though - hosting jars at the app server level is totally doable and legit. I just prefer not to.
Thanks mang.
Thanks for your reply frucade. I did not know that IntelliJ allows you to refactor despite broken code, that's fantastic. Are the refactorings and quick fixes available in the open source edition? Also, and I apologize for just blatantly asking all these questions instead of RTFM, how do I access the quick fixes? In Eclipse it's always CTRL+1 (CMD+1 on macs). How do I access them in IntelliJ? 
"StockHelper" isn't an acceptable name, because "Helper" says nothing about what it does. It fetches stocks from Yahoo, so it should be called YahooFinanceStockProvider or YahooFinanceStockFetcher or somesuch, and possibly implement a StockProvider or StockFetcher interface. Also, if the library is specific to the Yahoo Finance API, then that should be in the name of the library.
Java has absolutely nothing to do with the appearance of a site. You will still need images, CSS, JavaScript, etc. to make the site look "pretty".
Full disclosure, I work at Firebase and worked on this release. This is our first Java release and we'd love to get some feedback from devs who would like to give the service a try. I'd be happy to answer any questions or concerns.
So then what is the point if it isn't an all-in-one solution? Serious question, as it seems I can accomplish the same results without Java EE. Edit: Other than the usual benefits of Java EE such as code reuse.
Never read a programming book in my life. Everything I've learned comes off the interwebz and a loooooot of practice.
I guess as a "serious developer" I've rarely found a need to reference a book. Once you understand the basic principles and rules of the language itself and how to read an API there's really not a lot of need for a book because almost everything is freely available and quickly accessible online.
With log4j, learn when to use each type of log line (Trace, Debug, Info, Warning, Error, Fatal), and how to uniquely identify your program's state when logging (eg. what to put on each line, and how to be definitive and precise with your information). When these are used incorrectly, your log files will be a mess, and you will spend more time configuring your logging framework than actually developing your application.
I now have direction while trying to figure out what to code, thanks a bunch!
For a small-scale project, there is no point to use Java. However, for large scale projects where concurrency, security, database integrity, etc. are important, Java wins.
Asset or Instrument are also meaningless names, and in that case it should be `Provider&lt;Asset&gt;` or `Provider&lt;Instrument&gt;`. If you want an interface that just says "give me a Key and get Whatever back", then just use [Guava's Function](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Function.html): `Function&lt;Key, Whatever&gt;`.
It's something of a myth that component based doesn't scale. I know for a fact that Wicket scales, and it's component based. According to several benchmarks JSF / PrimeFaces scales slightly better (not a major difference, but it handles a few more req/sec and uses a little less memory on average). I personally don't like GWT and it looks like Google doesn't really like it anymore as well.
I'll look into your suggestions, thanks for offering. Event stream logging is a very good idea. I do something like this today tied to users (both named and anonymous), but I hesitate to include it since the volume of data can be quite large. If others think events go hand-in-hand with exceptions, I can include them in my offer since they use the same backend. 
Looks like it searches a linked list of players for a given id. Its either really old or just plain bad code.
or homework, "foo5" is a suspicious method name.
Agreed - only thing to add is that this type of thing should go to /r/javahelp.
Check out [Primefaces](http://www.primefaces.org/showcase/ui/home.jsf) - in my opinion the best tool for making better looking (and easier to code/maintain) JSF sites.
[Effective Java](http://www.amazon.co.uk/Effective-Java-Second-Joshua-Bloch/dp/0321356683) by Joshua Bloch.
Consider using BigDecimal instead of Double. I know it's still a simple library right now, but if things grow bigger this change will avoid you of getting trouble with math operations later.
Glad you like it! =)
I think the tutorial on the website are not bad. It is just that Spring is complicated to learn. If you are required to learn Spring then it is a good way to go. If you have a choice learn JSF and PrimeFaces instead. Either way download Netbeans and do the tutorials. It has both and they are easy to follow.
Astroturf marketing. Look at these guys' Twitter accounts.
See for yourself: http://prezi.com/dr3on1qcajzw/www-world-wide-wait-devoxx-edition/ It doesn't matter whether Google like it anymore or not since it's a community project already (FYI, the main website also recently moved to http://www.gwtproject.org) and there are enterprises making money out of it (Vaadin, Sencha, Google Adword, Google Discussion, Google Group, Chrome Web Store and thousands of internally developed enterprise app) means that it will be supported into the future. The FUD caused by Google in favor Dart over GWT has some points in it, but for me and other thousands of developers who rely on Java everyday, GWT is a bliss compared to JavaScript/Dart. As a Java developer (including server side), I have no reason to go with Dart/JavaScript, given all support I have for Java (libraries, tools, people). As of the future of GWT: http://commondatastorage.googleapis.com/io-2013/presentations/251%20-%20I_O%202013%20GWT%20Roadmap%20for%20the%20Future.pdf 
I can't second this suggestion enough. The way that PF let's me write the Ajax/Jquery processing right along side the client widgets has changed the way I think. Just checkout the showcase demos and you'll be hooked.
Since the books' content is copyrighted, you cannot (legally) access its material online. In my opinon, books have their own advantages over online resources: convenient, quality, credibility. Also physical books (payperbook) make readers memorizng stuffs better, because our brain works best by doing physical activities. You may think again after reading Effective Java.
Head first java is an exceptional beginners book but nothing worth noting for "the serious developer". If your a beginner though whether it be java as a new language or your first foray into OOP, that's the book to get. 
Java EE is meant to create an interface to which business applications operations can interact with a website. At this moment, its future is sketchy due to Oracle's influence in Java. As for the visuals, well it doesn't exactly matter what you use. The application server can also function as a simple (but lots of overhead) web server. Just use JSP or JavaBeans to create interfaces to interact with information in the background.
my first books were on assembler and the X Windows System. i was at a complete loss and didn't accomplish much as a programmer. then i read k&amp;r's "the c programming language" and the am9513 (timer) data sheet and something clicked i needed to understand how a computer thinks at the right level of abstraction. for me, that was C (and java is close enough that i picked it up quickly) so for me i needed a little bit of info up front. but ultimately arthurv89 is right - example code and lots of practice
Can it do multi-screen desktops?
"String are made immutable in java because Java maintains a String pool in perm gen space of memory. If the strings are mutable then it will be impossible to maintain the constant string pool in java." Bullshit! Strings are immutable in Java because otherwise they would require a thread to acquire a lock on the String before accessing its value. There is a pool of interned Strings, to which all literal strings are added, and to which any arbitrary String can be added by invoking the intern() method on the String. But this pool is not used for all String--only for those String values that are set at compile time, or where the prorgrammer explicitly asks for the String to be interned. 
"Finalizer is the method which is run when before object is getting garbage collected and is totally different from Finally Block" well, duh ... it could be replaced with: finalize will only be called once, if for some reason during finalize execution object establishes a reference to non-gc'ed object, it will not be collected in that gc cycle, but finalize method will not be called in another gc cycle. 
TIL. That's a potentially quite useful caveat- I'd generally avoided using finalize, having been taught it has some gotchas. I guess this reinforces that.
thanx ..will update 
Can you just save the previous line to a variable and go from there? Not sure i understand exactly what you mean.
Transfer the already scanned tokens into an array.
No problem, as for arrays it shouldn't take you more than a few minutes to understand. Fairly simple.
Have a read about collections.
A little bit of advice: don't use 'real' arrays. Take a look at [collections](http://docs.oracle.com/javase/tutorial/collections/index.html) instead, since they are much easier to work with.
However this isn't true. Finalize will be called _at most_ once, but quite possibly zero times. http://www.javaspecialists.eu/archive/Issue170.html Somaniab, please don't continue with these blog posts until after you've read the books mentioned in the abovementioned article, as well as the other articles in that archive.
Don't forget that the www test measures server response time. In case of JSF and Wicket the response is trivial to render. In case of GWT there is parsing and rendering overhead on top of that on the client. The total time that the user experiences is highter with GWT than with JSF and Wicket. You need MUCH faster servers than the www test indicates based on server saturation to give users the same experience. And the client overhead is something you never control so can't guarantee. Many cheap Android phones will have a really crappy experience. 
nice read, thanks, but - how is "this isn't true"? 
A lot of his tutorials are slightly outdated, but they're still good.
When posting a comment, make sure it adds something to the conversation. Read more [here](http://www.reddit.com/help/reddiquette).
Uhh, you realize Spring is XML-less since Spring 3.1 (and was pretty close to XML-less before that). There are some projects sponsored by Spring that need XML, but Spring (as in the DI container) needs 0 XML now. The AbstractDecoratorFactoryFactorySeeker joke is probably correct, but you have to hand it to them, they name classes descriptively.
Did you know that Primefaces is going to start charging?
&gt;&gt; finalize will only be called once &gt; &gt; _at most_ once, but quite possibly zero times However, you have other misinformation, of which you've already been called out at least for the reason String is immutable. 
"quite possibly" ? :) i think you need to re-read that article again, the only condition for finalization to skip is to have trivial (aka empty - like java.lang.Object.finalize()) finalizer, in all other cases it will certainly be called - once. 
So I downloaded the community edition and trying all your suggestions. Thanks so much. Still infuriating as the eclipse keyboard shortcuts are coming automatically... ;)
Also worth mentioning is that there are on the order of zero reasons to ever prefer the use of finalize over phantom references. Finalize. Not even once.
I didn't read whole article, but when I'm debugging, I'm using this utility method: public static String getMyCaller(int depth) { StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace(); StringBuilder result = null; for (int i = 3; i &lt; Math.min(stackTraceElements.length, 3 + depth); i++) { if (result == null) { result = new StringBuilder(); } else { result.append(" &lt; "); } result.append(stackTraceElements[i].getMethodName()).append("["); String basicName = stackTraceElements[i].getFileName(); if (basicName.toLowerCase().endsWith(".java")) { basicName = basicName.substring(0, basicName.length() - 5); } result.append(basicName); if (!stackTraceElements[i].isNativeMethod()) { result.append(":").append(stackTraceElements[i].getLineNumber()); } result.append("]"); } if (result == null) { return ""; } else { return result.toString(); } } It isn't very complex, but it gets the job done.
Why not just call: new Throwable().printStackTrace(); Edit: Some loggers handle logging exceptions (and their trace), so if you need to log to a log, you could probably just use: Logger.trace(new Throwable());
:) please add System.gc() between lines 22 and 23. Edit: but yeah, that beats my statement :) thanks for example. 
I didn't - got any links for where this was announced? I know they currently charge for Elite membership, but I've not seen anything to say that the Community versions were going to start being charged for. Even if they did go down this route the code will just get forked and a new project will take over Primefaces popularity - there's already the [Primefaces Extension project](http://primefaces-extensions.github.io/), so I'd expect that to pick up usage if core PrimeFaces starts charging.
Not really sure what the point of this article is: * There's better ways of achieving file upload ([PrimeFaces file upload in JSF](http://www.primefaces.org/showcase/ui/fileUploadSingle.jsf), and I'm sure Spring has something to save you having to roll your own), so it's not of any practical use. * The code's of such poor quality that it's not useful for beginners to learn from.
As someone stuck using WebSphere Portal at work, I can only dream about this being the case.
...? So? Did you not already know about *'s in class paths?
There's a lot of old information out there about managing classpaths, and I recently was asked to modify a workaround that I surmise predates Java 1.6
That's one of the strengths of going with a non-EE solution - even enterprises with a fairly conservative (old-style) budgeting cycle and operations-biased capex/opex budgeting can avoid getting stuck on obsolete JEE technology simply by scheduling annual project-specific feature spends that contain a library upgrade and a QA cycle.
You really should just post the code. 99.99999% chance you're just doing something wrong. It doesn't help that nearly every synthetic benchmark for this type of thing is severely flawed (usually in an effort to keep it simple or short). So show us the code.
This is the first thing I thought of when I read the headline, and I wondered how someone was able to milk a whole article out of that.
Code please? Kinda hard to debug a concurrency API usage issue with only results :)
one caveat to this: if you aren't using * classpath notation now and you switch to it, your class path ordering may change. This will not be an issue unless you have jars that duplicate classes from other jars (there are a handful that do this). I would recommend using a duplicate class finder at build time (you can have the maven enforcer do it with the help of an extra plugine) to avoid getting bitten by this.
Nice. *Yoink!*
using shade plugin to make one jar and tricks like http://skife.org/java/unix/2011/06/20/really_executable_jars.html will give you a single executable file. No classpath to worry about.
&gt; nearly every synthetic benchmark for this type of thing is severely flawed This. Plus, read write locks are almost always the wrong choice. They have considerable overhead when compared to mutex locks, unpredictable performance, and are difficult to make fair. If you read carefully (wedged between two snippets of example code), the Java documentation hints at this: &gt; ReentrantReadWriteLocks can be used to improve concurrency in some uses of some kinds of Collections. This is typically worthwhile only when the collections are expected to be large, accessed by more reader threads than writer threads, and entail operations with overhead that outweighs synchronization overhead. And even in most of these cases you'll get better performance with striped mutex locks.
Go for [Gaelyk](http://gaelyk.appspot.com) - it's a Groovy toolkit for making applications on Google's App Engine. You can code in Groovy and in Java as well. 
Are you doing anything with the HTML received from the other site, or just displaying it back to the user as is? If you're not processing it in any way - and if you trust the content you'll be receiving - I don't see any need to involve a server-side call for this, just attach a javascript listener to the search form and update an iframe's src attribute when the form's submitted. If you do need to make a server side call, this is possible with Java; parsing HTML is a non-trivial task though - is there a web service you could call to get the information instead.
You guys are fuckin faggots. Java is the worse language ever made. Hitler is kinda cool though.
Which library/framework are you using? LWJGL?
I wrote my own engine:D Lot's of fun if you have the time. (The engine is called Carbon2D and I'll be releasing it soon...)
For rendering I'm using Graphics2D through a JPanel (using a custom repaint method) and for input I am using a MouseListener, MouseMotionListener, MouseWheelListener, and a KeyListener.
Protip: Drawing directly on awt.canvas is way more efficient.
Yes, but at the 6,000,000 FPS I get without V-Sync on, I really do not see a need for any more efficiency. Also, I created a custom buffer strategy and paintScreen method, so that brings it up to nearly the same speed. But yes, you are correct, I should start using the Canvas.
It's nonsense that that would be the strength of a non-EE solution. With Java EE you also upgrade simply by scheduling annual project-specific feature spends that contain a library upgrade and a QA cycle. In that case the library upgrade is a new version of say TomEE. I don't see what's really different between upgrading Spring or TomEE. We are using TomEE in production and have upgraded it pretty much after every release when it came out. Of course with the necessary QA testing. We have a Chef recipe in place and deploying a new version of TomEE is pretty much the same work as deploying a new war.
Very cool. Check the book Developing Games in Java. In that book they wrote their own 3D engine as well using just Java. Fast and cool too! :)
I am curious what you think is sketchy because of Oracle? Yes they are a big evil company but they know what they are doing and it is not in their best interest to let Java do poorly. Java EE does has a front end architecture. It is just HTML, CSS and Javascript like everything else but by using a framework like PrimeFaces the developer can focus on other things instead. 
Please provide a source for this because it is news to me. The source code is freely available and it would just be forked if they tried to charge an unreasonable fee.
For those who want to have a deep understanding about Spring Web MVC framework
Yeah, I really like it. It's got a lot better Maven support, that's for sure. It's got a completely different feel than Eclipse that you'll have to get used to, but eventually it'll feel even better than Eclipse ever did. And it runs smooth as silk.
After using Eclipse for years, I've started using IntelliJ because we use it at work, and I enjoy it a lot more than Eclipse. Android Studio is wonderful as well if you're into Android development. 
1000x yes. Long time Eclipse user that switched about a year ago. Once you learn the shortcuts, you will love it. Hands down better than Eclipse. 
Been an IntelliJ user for a decade. Community is the same thing as enterprise, just with fewer plugins. 
Yes! is awesome, I switched about a six months ago and it is way better.
Yup. It's also the only decent IDE for Scala development, which is important to me.
I've been using eclipse forever and it never crashes on me. No complaints at all.
i must say... Android Studio is the most beautiful IDE i've seen.
Yes, I know that, it's part of my thesis. I'm trying to figure out the "point" where the tradeoff is positive and RWlocks can be applied :)
https://github.com/metabrain/java-lock-benchmark/blob/master/src/Main.java here is the source Please check my update on the issue : http://www.reddit.com/r/java/comments/1hlhno/concurrency_in_java_and_odd_behaviour_from_rwlock/cavvo1q
Ok, I managed to "fix" the code, but I don't understand WHY!!! Focus on the "run()" method : @Override public void run() { System.out.println("run"); while(testing==false) { //System.out.println(0); } System.out.println("1"); while(testing==true) {go();steps++;} return ; } IF I comment ONE of the System.out.println() (I put them in to debug) used, I get the bug again. The threads are locked in the while(testing==false) loop even when the variable is set to true by the Main thread !!! I know this because sometimes threads don't exit cleanly (I have to thread.stop()/interrupt()) and they are stuck on that while loop... As I see it, currently,. with the prints, they are acting like a serialization entity and are avoiding (or stalling) the potential data-race by delaying their execution enough so the Main thread can do something else necessary? I am super confused. This must be some data-race I am not aware of, but so far I scratch my head and don't understand what can be. Thank you !
After reading this, I went to download the Java 7u25 JDK, and there wasn't any login required. As for redistribution, here's the license: http://hg.openjdk.java.net/jdk7u/jdk7u40/file/jdk7u25-b32/LICENSE http://hg.openjdk.java.net/jdk7u/jdk7u40/tags 
I don't see any login requirement, just checking a standard agree to license box. Where are you downloading from? You should be going to http://www.oracle.com/technetwork/java/javase/downloads/index.html You might want to look into http://ninite.com/. Especially if you are reinstalling other free apps too.
DAE use shortcuts in eclipse? I'm the only one? I rarely touch the mouse. 
As someone who has used Eclipse till recently, I can tell you that coding in IntelliJ provides a better developer experience by far. I was so sick and tired of Project -&gt; Clean | mvn clean install | reverts of files that Eclipse decides to "shuffle around" - not to mentioned the horrendous javascript support. You will fall in love with the little things (go-into xml defined beans). You can jump from controller that returns a String (in SpringMVC) directly to the view (IntelliJ reads your spring config - and can figure out the view directory in correlation to your project). CSS colors on the left (next to the line numbers). Great javascript support. etc etc.... Currently we are a transition period in my workplace (eclipse -&gt; intellij) and I can't wait for it, having been using IntelliJ @ home for some time now. P.S. I can never consider an IDE that doesn't have an option FULL dark theme - a professional IDE. 
Nifty. I'm just now getting some experience on front-end stuff after spending a few years on back-end Java EE stuff, so the primer is much appreciated. It seems like a very old argument, but I'm curious... do you prefer Spring MVC or the JSF stuff?
Well, I prefer using Spring Web MVC because most of my projects require it.
I don't know if there are that many extra features, but the included ones seem to work better. For instance, they both have code completion but it hardly ever works for me in Eclipse.
Switched to Idea after Juno release, with eclipse shortcuts. Smooth transition and like it.
I use shortcuts in both. You just need to rewire your brain when switching since they are all different. Intellij feels natural now but it took some adjustment.
Eclipse used to be good but it's way too easy to break with plugins. Netbeans used to suck because it was so slow but now it's much faster and integrates really well with Maven. Personally IntelliJ was always good, although you'll need to pony up a little cash (not that much) for enterprise level development.
&gt;multiple project wut? IntelliJ has projects and modules which are analogous to workspaces and projects in Eclipse. I would highly reccomend taking a second look if that was your only issue? It took a month or two for me to get used to Intellij after years of using eclipse, but I never want to go back. At least not back to juno.
System.out.println writes to a SYNCHRONIZED buffer, the result is you are adding hidden syncs as a side effect of calling println.
I've been looking at this code a lot and trying to understand `for each` loops. Couldn't the `for each` loop at the bottom be replaced with this: //assuming both Player and Enemy inherit Entity for (Entity e : objects) { e.refresh() } Kind of random, just wondering. ---- Also, `for each` loops are basically for iterating through items in lists and arrays, right? ---- The only reason you are using an `interface` to access each object's `refresh()` is to keep it generic, correct? That way, a list of Enemy and Player objects can all be `refresh()`'d at once in a single `for each` loop and still be type safe...
I dont understand why your job forces you to use a certain IDE. 
&gt; So that's my question. What are some cool features IntelliJ has that eclipse doesn't? http://stackoverflow.com/q/239732/1782
This tutorial does not provide a "deep understanding" of Spring MVC. It shows how to build one using Spring 2. Spring 3 introduced annotations and it makes it so much easier to build your app. Look for a better tutorial. There are plenty of them out there. 
You can configure Idea to use Eclipse-like keyboard-shortcuts.
I agree with you but, we are building an application that is based on eclipse plugins. You need eclipse to run them, altho I have not researched for alternatives yet. I guess I just figured out what to do this weekend.
Juno ruined Eclipse for me too. I switched at the end of year sale and after a short period of time using the Eclipse keybindings, I cold turkey switched to IntelliJ ones and I'm just now getting used to it. Ctrl-N instead of ctrl-shift-t was a hard one for me.
My code completion with Eclipse worked fine until Juno and then I'd get timeouts waiting for completion sometimes. It was really annoying. I've never had an issue with IntelliJ.
Any Java IDE that does not require a workspace concept and is able to work directly with Ant, Maven, Graddle and so forth, is better than Eclipse. 
You can do reactor POM projects in eclipse, but they all show up as individual projects, there's no nesting in the UI. So it's best to do it in another Workspace because otherwise things would be kinda cluttered.
Is this available in 3.7? They certainly aren't using it at my office.
This could work. Tried somethign similar but got a warning about OVERWRITE being static. Could it would just writing a 0 also?
I'm not at a computer so can't check the value of OVERWRITE. If OVERWRITE has the value of zero it probably would work, but what if at some point in the future the developers of the JSch library adds additional modes, and the value of OVERWRITE is now no longer 0 but some other value. (unlikely but you never know.) Your code will no longer work as expected. Also if someone else is going to read your code, 0 is not particularly helpful in understanding what it does. I'd go with using the static variable provided by the library. If you try it and you are still getting the warning please post it here. 
Netbeans is worth a shot as well. It might not be as good as IntelliJ, but Maven support is better than Eclipse, and it seems to be more stable and a bit more polished in my experience.
I'm not sure... I use IDEA. I just know what my coworkers go through.
I don't think that's entirely accurate. Most of those features exist in eclipse. But to be thorough ill run through each one and post back here if anybody is interested. 
I switched a few weeks back, and I like IntelliJ better.
As a previous Eclipse user, let me put it this way: if I ever meet anyone who works for JetBrains, I will have sex with that person no matter what he or she looks like.
The warning you got is likely because you used the instance variable (channelSftp, lowercase c) and not the class to reference the constant. So this: channelSftp.put(new FileInputStream(f1), f1.getName(), channelSftp.OVERWRITE); When you should have used this: channelSftp.put(new FileInputStream(f1), f1.getName(), ChannelSftp.OVERWRITE); Very subtle difference, it technically should still work (that's why it's only a warning), but refer to static's by the class they belong to since they aren't instance-specific. (Trying to make that sound clear, let me know if it's not).
Crashing was never my problem it is the poorly designed UI that keeps me from going back to it
I'm definitely interested!
Yes, for those people unfortunate enough to get stuck jn a situation like that Ideas debugger is way better than eclipse 
I've been using IDEA since v6 and every time I have to use Eclipse for any reason it makes me want to off myself.
I use the pro features very rarely.
Yes. I've been happily using it for close to 15 years.
[Eclipse Themes](http://eclipsecolorthemes.org) gives you this. 
[CTRL]+[ALT]+[H] is gold in the pro version.
I wouldn't know. I use Maven with the `scala-maven-plugin`, which IDEA automatically detects and configures itself from.
Went to IntelliJ two years ago because Eclipse's m2e plugin keep on crashing when I tried to import / checkout a maven project. What I love the most from IntelliJ is the productivity guide. Go to help and then productivity guide. It will list out all the shortcuts and how often you use each of them :)
How so?
Bought the full version, I love it most of the time however, for Scala projects it feels sometimes that eclipse has faster compilation. I'm not sure if that is even possible as they both use the same scalac, but typesafe maintain the eclipse Scala ide plugin so who knows what magic they added there. Besides that I keep coming back to the IDEA, it's faster and crashes less (though I managed to make it halt a couple of times, but bug fix cycles seem pretty rapid, and support impressive, but I'm a paid user)
heh ... well for what you want you should really replace testing with CountDownLatch and CyclicBarrier objects. The problem you have is you have no guarantee that all Worker objects will ever actually see testing be equal to true. You have it marked as volatile which handles memory visibility but you have nothing that ensures every worker instance will actually "wake up" and run in the short time that testing is equal to true. What it looks like you want to do is create a bunch of threads then have them all start doing work at the same time and then collect the results when they are all complete. CyclicBarrier does exactly that with actual concurrency semantics unlike volatile which just ensures visibility. Here is a simple example: /* * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * You should have received a copy of the GNU General Public License * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;. */ import java.util.concurrent.BrokenBarrierException; import java.util.concurrent.CyclicBarrier; public class ThreadSyncExample { public static void main(String[] args) throws Exception { final int threadCount = 4; final Thread[] workerThreads = new Thread[threadCount]; final CyclicBarrier workersSyncBarrier = new CyclicBarrier(threadCount + 1); for (int t = 0; t &lt; threadCount; t++) { workerThreads[t] = new Thread(new MyWorker(workersSyncBarrier)); workerThreads[t].start(); } System.out.println(Thread.currentThread().getName() + " - Waiting for Workers"); //wait for all workers and main thread to be ready to run workersSyncBarrier.await(); System.out.println(Thread.currentThread().getName() + " - Start Work"); //All workers and main are running! System.out.println(Thread.currentThread().getName() + " - End Work"); //wait for all workers and main thread to be complete workersSyncBarrier.await(); System.out.println(Thread.currentThread().getName() + " - Complete"); } private static final class MyWorker implements Runnable { private final CyclicBarrier workersSyncBarrier; public MyWorker(CyclicBarrier workersSyncBarrier) { this.workersSyncBarrier = workersSyncBarrier; } public void run() { try { System.out.println(Thread.currentThread().getName() + " - Waiting for Workers"); //wait for all workers and main thread to be ready to run workersSyncBarrier.await(); System.out.println(Thread.currentThread().getName() + " - Start Work"); //All workers and main are running! System.out.println(Thread.currentThread().getName() + " - End Work"); //wait for all workers and main thread to be complete workersSyncBarrier.await(); System.out.println(Thread.currentThread().getName() + " - Complete"); } catch (InterruptedException | BrokenBarrierException e) { System.err.println(e.getMessage()); e.printStackTrace(System.err); } } } } 
Nice... One thing to mention, putting a stateless annotation on a persistent entity is kind of an oxymoron, isn't it? besides that I see no harm in mixing concepts together to avoid excessive layering
Really intuitive UI 
I'm currently forcing myself to switch to IntelliJ. I first started with eclipse about 11 years ago. It was great at the time, but I needed an IDE to make swing development easier for my job and Netbeans was the key. 6.0 was a huge improvement and now 7.0 makes netbeans a very good choice. For about 6 months, I've noticed that IntelliJ is definitely faster, and extremely intuitive in its functionality. I will eventually switch over full time for any freelance work I do. Right now I rank IntelliJ &gt; Netbeans &gt; Eclipse, but really you shouldn't pigeon hole yourself into one IDE. I have all three installed because certain tasks are just extremely easy in one and it's always good to broaden your skillset. Eclipse may need a complete overhaul to compete, but because it only has a community version, changes can be slow to implement, especially if no one uses it. There is a reason that Android is developing an IDE based off IntelliJ. 
Eclipse has glorious shortcuts. It's a fantastic text editor. Possibly the best I've ever used (out of VS/idea/netbeans/mono/lightweight stuff. Never got in to emacs) For everything else it's garbage. I just run ant scripts to build everything and do all of my typing in Eclipse. It also debugs (locally and remotely) very well. However, don't ever dare to build or run something in it. That's a nightmare. I did like IDEA, still have a license somewhere. It was just inferior for what I needed. Building in an IDE is just asking for trouble :/
Nice work, needed to do the same a year ago. Came to help out, saw you already had it covered.
&gt; The problem you have is you have no guarantee that all Worker objects will ever actually see testing be equal to true. You have it marked as volatile which handles memory visibility but you have nothing that ensures every worker instance will actually "wake up" and run in the short time that testing is equal to true. Wait, what? I don't understand... When I flip the boolean to true, shouldn't all threads see that boolean as true, and skip the first while to the second while? I will do what you recommend, thank you very much :) But I still haven't understood why it's not working. 
I have community edition here at work, but run Ultimate at home (latest buy was 12 Ultimate in that hilarious **end-of-the-world** sale they had. Best $49 I've ever spent...can't stop laughing about that one) CTRL+ALT+F7 is a new one for me so thanks for that one. ps: I'm more of a CTRL+ALT+L guy myself. (Note: Kids! Don't try this at work! Definately try this at home though.. smirk)
Those are EDITOR dark themes, not FULL dark themes. Anyhow I was using that plugin, but having dark editor theme - while everything around has a bleaching white color is not nice.
Funny enough, I had the exact same issue with m2e today. Selecting 'Import Maven Project from SCM' from projects view doesn't work but going to the repository view and right-clicking a project and selecting 'Checkout Maven Project' works just fine. I'm using Kepler by the way.
You think so? I didn't think it was much better than eclipse, but again I've been using eclipse for 12+ years so I'm probably biased. One of the things I really like about the eclipse debugger isn't really related to the debugger directly, but more to Eclipse's concept of perspectives. I can have multiple UI layouts tailored to how I like to work depending on what I'm debugging. So I can have a different layout for debugging unit tests, REST interfaces, web controllers, EJBs, GWT apps, etc. For example, for unit tests I like to have both the test runner view and the variables view on screen at once, so I have a perspective for that. For rest interfaces, I like to have variables and the REST endpoint browser up. And in cases where I want to see as much source code as possible, I have a view that is just the editor, output console, and variables view, and I can put these wherever I want on screen. I haven't really seen anything similar in IntelliJ. 
Makes it easier to enforce standard static checks and code style?
eclipse keymaps are already integrated.
What do you mean with poorly designed? The layout, colors, or what? I believe that every aspect of the ui is customizable in eclipse. 
Yes it is. 
I do not think you will need any walk through. However, i would strongly recommend to look at the [IntelliJIDEA_ReferenceCard] (http://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf)
Still working through the lists, but a few of the things eclipse does that I haven't been able to find in IntelliJ --- btw IntelliJ experts feel free to correct me on any of these if I'm wrong. Could be I'm just not experienced enough with IntelliJ to find them. The concept of perspectives. This is a pretty big one. Eclipse let's me customize and save layouts of various views depending on what task I'm doing. IntelliJ will let you hide and show views, but pretty rigid on where those views actually are. In eclipse I can put them anywhere I want on screen. Integrated task management. I haven't found anything similar to Mylyn in IntelliJ, maybe something has been added by now. But the ability to have an interface to my task / defect tracking system directly in my IDE I have found is really nice. I have immediate access to my current task/defect, and it keeps track of the work I've done while working on that task, how much time I spent on the task, and gives me the option of saving the context as an attachment to the task, so if I ever need to review what I did while working on the task it's right their in the issue. This also makes it handy to switch back and forth between tasks--by filtering the context I can see only the stuff I'm working on for that task. This makes context switching much easier when someone comes up to me while I'm in the middle of something and says "hey can you take a look at this." Tools like git stash have made this a lot easier in recent years, but the filtering ability is really cool. REST navigator. Haven't found anything like this in IntelliJ either, but in eclipse I have a navigator window that can show me all JAX-RS endpoints and/or Spring Web MVC REST/Web request mappings with their parameters. This comes in really handy when I'm working on something like an iOS app and communicating with a REST interface I'm not really familiar with. I don't really know much about the REST interface other than the endpoint that I'm calling, so I can just open the project in eclipse, look at the end point browser, and navigate right to where it's implemented in code without a lot of searching. Maven -- some things IntelliJ does better (like profile management, and POM source editing) and some things eclipse does better (like dependency management, and working with the POM without having to touch the source). In eclipse if I'm working on a project that uses a library from our internal repo, or an open source repo, and I have an idea for improvement that I want to contribute, I can open a context menu on the maven dependency, choose "materialize pom" and eclipse will automatically check it out of it's repo, add the project to my workspace, and update the dependent project to use my workspace version. This is really cool especially in companies like mine where we have several teams building libraries and I find a bug in one that I think I can fix. In just a couple clicks I can be have the project checked out and be working on a contribution. Also I think adding maven dependencies is easier in eclipse. It has a handy GUI that I can get to quickly from a context menu or the POM editor that let's me search for and filter dependencies from all my configured repos. I do think if you are editing the POM.xml directly, IntelliJ has a much better editor for that, but in eclipse you can do a lot through the UI without having to directly edit the pom.xml. Maven profiles -- eclipse is just stupid here. You have to type the profiles you want into a text field buried in a preferences panel. This is one thing I'm jealous of IntelliJ -- it shows you a nice list of available maven profiles and you can just click the ones you want to enable. Integrated update -- why doesn't IntelliJ have this?? I have IntelliJ 12 ultimate and I just clicked the update button, and it takes me to the website to re-download. In eclipse, I just click update or configure autoupdate, and it updates itself in the background. Collaborative editing -- haven't seen this in IntelliJ, does it exist? As for performance I think that is debatable. I've just ran several tests loading the same project in Eclipse (with all my favorite plugins) and IntelliJ -- Eclipse loads about 10 seconds faster consistently to get to useable state. Compiling, Eclipse does clean build in 4 seconds, same clean build in IntelliJ 10 seconds. Navigating to Class, eclipse typeahead seems faster, Intellij waits for pause in typing. Actually opening the class though, both are near instantaneous, but IntelliJ is definitely the faster. Spring -- getting late and this merits a lot more comparison, but I will say I am really digging the level of spring integration in the IntelliJ editor. Especially how it lets you jump back and forth between context file and class file. Haven't seen that in Eclipse. On the eclipse side the spring navigator in eclipse seems to give a much more complete view of spring project layout and you can quickly jump from context to class, but not the other direction. Intellij seems to have more spring context file refactorings available. I would love it if some IntelliJ experts could give me a rebuttal and/or a similar list. I would consider switching if I could find the tools/plugins I would miss from eclipse. I will also go through the stackoverflow list tomorrow hopefully. 
Come on in, the water's fine. Every release brings a bunch of nice new features, there is good support on any issues you may have.
IntelliJ IDEa + Slightly Modified Darculla = God Tier.
Oh! I never knew! Thanks for this one, I'm going to use this!
indeed it covers Spring 3, not 2 and have annotation-based examples also.
You'll be fine - everything you did in eclipse you can do in intellij. If you're struggling finding something, Google will help you. Spend half an hour in file &gt; setting and set everything how you like, its searchable, as is the plugins list (settings &gt; plugins). You can rebind the key combinations, and there's eclipse settings file out there. I switched to intellij almost three years ago and carry a smug grin around whenever I have to help some figure out why eclipse is giving them problems again ;) If you use a lot of the popular open source frameworks, consider the ultimate edition. There's a 30 day free trail, if you find you don't use the extra features just go back to community edition.
It's working perfectly now, I updated the project on Github, thank you ;)
The first thing I did with IDEA was replacing the alt+enter shortcut with ctrl+1. Much more intuitive. 
You can rebind all key bindings. 
You say it's the best text editor and then go on to list a bunch of IDEs. :/
The other thing is eclipse create multiple projects for a maven project with multiple sub projects. Basically eclipse makes all those sub-projects a top level project which is annoying. I read a blog a while ago saying this is because eclipse and maven have different approach in terms of organizing projects.
Interesting feedback... Actually I don't like having to change perspectives. Is there a way to do everything without switching at all? It's so easy to change around the view that I don't mind doing it on the fly... Want to maximize an editor? Double click on the tab. Want to show the debug window? It's already up once you start debugging.... Alt-5 to toggle ... You are right I think that idea doesn't have screensets like eclipse. But it doesn't need then as much because it's easier to move around. I am biased, but I did use eclipse as a primary IDE for some time, so I'm not being wholly unfair...
Haha I upgraded my personal license during that sale, saved a ton. I use ctrl alt l a lot sure but (ctrl)alt-f7 is probably my most used. But I use so many nowadays that I don't wen think about them... F6 and shift f6 - rename or change method signature programmatically Extract method and extract variable/constant/field (ctrl alt m / v / c/f, I think?) Ctrl alt b on an overridden/implemented method to navigate to implementations (popups are awesome time savers) Ctrl-shift-space and double ctrl shift space (context aware refactoring and "deeper" smart refactoring - rocks) Ctrl-shift-t to auto create tests Ctrl alt t to surround code with try/catch et al I use extract superclass an interface as well as "pull up " refactorings liberally Ctrl f12 is nice Ctrl tab is nice but usually I just use camel case completion and regexps in the go to class popup (ctrl. N). . (CCasCom*) since it's so fast. Pro tip - remove the navigation bar from the UI and bind it to a key (I use `) - saves space. Also let's not forget little niceties like ctrl j which aren't needed often but are cool.. And if you want to be crazy.... Ctrl shift I or J to read source or docs in an inline popup. I use this for java docs sometimes 
True. The newer Eclipse does give you better control over things, but agreed, no dark like you describe.
Then use that JDK in a specific browser, with a separate one sans Java plugin for the external web.
Yes to everything! 
Being able to move the cursor after line endings is the feature I miss the most i Eclipse. But that is not enough incitement to make the switch.
You define ssf on line 6, but use it on line 4 (the first time you create the socket).
What do you use that feature for? I can't imagine a scenario where it would make sense.
&gt; Is there a way to do everything without switching at all? Yes you can do that in eclipse. Just customize the perspective you want to add all the views that you like in your IDE, and only ever use that perspective. Eclipse has tool bars on all sides of the editor window so you can put a view into a drawer that pops out only when you want to see it, ala intellij, and put it on any side of the screen you want. You could configure an eclipse perspective to be laid out exactly like IntelliJ if you want. &gt; Want to maximize an editor? Double click on the tab. Want to show the debug window? It's already up once you start debugging.... Alt-5 to toggle ... And yes, double clicking an editor tab maximizes it in eclipse. But the cool thing is it not only works on just editors, it works on any view. So you can double click any view tab and have that maximize. When you do this all other views go to side drawers ala IntelliJ. You can tell eclipse not to switch to debug perspective when you start debugging (it's the first thing it asks you if you want to disable that feature). One other powerful Eclipse feature I haven't seen an analog for in intellij is the quick help. If you want to do something via keyboard but don't yet have the shortcut memorized, just cmd-3 and type what you want to do, or type the camel case of the thing you want to go to, and it will quickly filter down the options and show you the shortcuts if one is set. If you learn no other shortcut, learn cmd-3 and you are set. You can navigate eclipse entirely by keyboard if you want.
I have to admit that I haven't used Spring for a long time. The last time I used it was on a project that used Spring 2.5. There was an XML file of many thousands lines long. According to everyone things that looked like code to me was "configuration" and had to be externalized from code. But these things never changed on their own, and when they changed they changed exactly when the code they were supposed to be configuring changed! According to all the Springs experts, both the ones on the project and in the ones in forums, this was the "Spring way". As this wasn't my way, I quit the project, found a new job at a place using Java EE which only used some lightweight annotations and never looked back. Good to hear that Spring finally saw the light, but I'm pretty versed with Java EE now and personally don't have a need for Spring anymore.
There's another [one](http://www.tutorialspoint.com/gwt/index.htm).
I am truly curious about this too. I am a frustrated eclipse user considering the switch and i cannot stand the cursor after the line.
good points.. &gt; Yes you can do that in eclipse. Just customize the perspective you want to add all the views that you like in your IDE, and only ever use that perspective. Eclipse has tool bars on all sides of the editor window so you can put a view into a drawer that pops out only when you want to see it, ala intellij, and put it on any side of the screen you want. You could configure an eclipse perspective to be laid out exactly like IntelliJ if you want. Yeah, IDEA just has one perspective, and you customize it. You just can't have different sets, which i have seen other apps call 'screen sets'. I think that's one thing Eclipse has which IDEA doesn't - but if you can deal with working in one perspective it's not an issue, personally I prefer modelessness and I can change the current perspective more than fast enough for my liking... but maybe I don't know what I'm missing since I dont have the option of having screensets. &gt; One other powerful Eclipse feature I haven't seen an analog for in intellij is the quick help. If you want to do something via keyboard but don't yet have the shortcut memorized, just cmd-3 Thats cool. The IDEA preferences window has a nice searchable view of all keystrokes which is close to providing that i think. http://www.jetbrains.com/ruby/quickstart/screenshots/45/keymap_set_up.png also there is a cool little plugin you can run that tracks when you do any actions, then notifies you of the keyboard shortcut as you go, which might be especially good for new users. I should fire that thing up again and see if I can learn something...: http://blogs.jetbrains.com/idea/2006/09/fun-stuff-can-be-useful-too/ IDEA also has this interesting thing that analyzes your uses and gives you metrics about what things saved you times and what things you didnt use that couldn't saev you time: http://blogs.jetbrains.com/idea/2006/05/how-productive-you-are/ 
You can turn off that feature: http://stackoverflow.com/questions/593214/how-do-i-turn-off-the-unlimited-whitespace-in-intellij-editor
I had slight problems with a Maven project which had Java, Kotlin, Groovy and Scala in the same compilation unit, but was able to work around the problems by disabling the new faster Scala compilation server.
SBT is the devil.
Eh, I disagree. It's still pretty young it seems, so the documentation isn't up there with maven, making the learning curve steeper, but once you learn it and use it, it's an incredibly flexible build system. Being able to code and debug your build system like a regular programming language is pretty nice too.
Holy cow, that's a lot of languages.
The problem I have with SBT is that the number of workdays I've seen seasoned professional use to sort out its upwards incompatibilities by far eclipses the amount of time I've seen spent on any other build system altogether, excepting ``autoconf`` and ``Makefile``s.
You missed one of the interviews, henk53: http://blog.eisele.net/2011/12/heroes-of-java-rod-johnson.html 
I've seen older versions of ``sbt`` libraries just disappear from repositories, silently breaking builds on machines which don't happen to have cached copies. Project configuration file formats changed wildly during that same period, while plugins such as ``xsbt-web-plugin`` didn't necessarily follow suit. All in all, it's _very_ far from being a _simple_ build tool. If I had to pick a name, I'd christen it "NIH fuckhead build tool", given that it follows ``Gradle`` and ``buildr``.
DO IT, you will wonder how you ever worked without it. You dont need any documentation its so well designed everything is obvious.
That's the joke :P 
&gt; I've seen older versions of sbt libraries just disappear from repositories, silently breaking builds on machines which don't happen to have cached copies. Ah yeah, that sounds bad. I've been having the same issue in reverse with a coworker who wants to update to sbt 0.13.0 in the RC stages. It's terrible, but one workaround I've found is to depend on the git repository itself (although I hate to do that). This problem isn't as huge an issue for me and my team though because if we really really need a plugin or library that's not hosted anymore, we just publish it to our nexus server and host it ourselves. &gt; Project configuration file formats changed wildly during that same period, while plugins such as xsbt-web-plugin didn't necessarily follow suit. As I said, I've only been using sbt since 0.11 or so, but this sounds to me like the shift from 0.7 -&gt; 0.10, which seems like it was a monumental change in api for sbt. I think it's just a problem with it being a young build system at the time. I think with typesafe backing sbt and with the scala community focusing on better forward compatibility in their tools this won't be an issue much longer (if at all anymore). &gt; All in all, it's very far from being a simple build tool. If I had to pick a name, I'd christen it "NIH fuckhead build tool", given that it follows Gradle and buildr Eh, I don't know gradle and buildr, but our project has improved a lot since we migrated it from maven to sbt. It's sped up our compilation time, made our build safely multithreaded, and much easier for new projects and modules to be added. It's also unfair to say it's just NIH reinvention of the wheel because at the very least the zinc incremental compiler came out of it, which is pretty important considering how damn slow scala is to compile.
Make sure to change the keymap to the eclipse keymap. That will help a lot.
Going through the top voted answer on stack overflow: - Yep, IntelliJ has smarter java code completion than eclipse. - Javascript statement was not accurate, Eclipse behaves the same - I did not check the javascript highlighting in a custom JSTL tag because I was too lazy to set up that test. :) - Searching for references across an entire project include spring bean files, JSP/JSFs, is not unique to IntelliJ, eclipse does this as well, so this statement was not accurate - The comment about renaming refactoring working everywhere, not just class files is also not accurate. Eclipse behaves this way also. - Logical view of hashmap in IntelliJ is correct... that is indeed very cool. eclipse does not do this it merely shows you a list of HashMap$Entry objects. - Statement about spring/hibernate on the fly config validation is not correct, Eclipse also does this. - JSTL completion in IntelliJ is indeed much better out of the box. Eclipse WTP JSTL support seems to be very minimal. Tag completion is there, but EL completion is not. EL completion for JSF is available as part of JBoss tools plugin suite though. - IntelliJ regex completion is indeed VERY cool. Could not find anything like this in eclipse. - Statement about merging is dubious. I've never used anything other than eclipse merge in eclipse, and I've found it quite powerful. - &lt;script src/&gt; and &lt;img src/&gt; completion sound neat, also not in eclipse. So that's my quickish rundown of the top post in that thread. Definitely enough there to pique my interest, and make me give IntelliJ another shot. Maybe someday I will have my favorite eclipse plugins available in IntelliJ. :) It seems where IntelliJ shines and eclipse falls down is that you get a LOT of cool helper features in IntelliJ out of the box. You get a lot with a full blown eclipse as well, but to get all the cool stuff you have to cull through mountains of plugins. If you know what plugins to look for, great, but for newb's I think that is a daunting task, which is why even though I personally still prefer eclipse, I recommend new java devs start with IntelliJ.
&gt;Thats cool. The IDEA preferences window has a nice searchable view of all keystrokes which is close to providing that i think. http://www.jetbrains.com/ruby/quickstart/screenshots/45/keymap_set_up.png Not quite the same. Eclipse has that also in the keys preference pane. What I'm talking about is this. Anywhere in eclipse, I just type cmd-3, then "de" and I get a view like this: http://imgur.com/gmon6GT Another thing I just found, I like the way templates work in eclipse better. In intellij looks like you have to hit cmd-j to access templates. In eclipse, you just start typing the template key "e.g.: sysout" then hit cmd-space and autocomplete will expand the template. It's pretty neat. &gt; also there is a cool little plugin you can run that tracks when you do any actions, then notifies you of the keyboard shortcut as you go, which might be especially good for new users. I should fire that thing up again and see if I can learn something...: http://blogs.jetbrains.com/idea/2006/09/fun-stuff-can-be-useful-too/ That's neat, I don't think I've seen anything like that in eclipse. &gt; IDEA also has this interesting thing that analyzes your uses and gives you metrics about what things saved you times and what things you didnt use that couldn't saev you time: http://blogs.jetbrains.com/idea/2006/05/how-productive-you-are/ Like that. This thread has definitely shown me a lot of what I haven't been able to find elsewhere. Hopefully I've been able to share some cool eclipse stuff too. I'm going to try forcing myself to use IntelliJ for a month and see what happens. :)
&gt; Not quite the same. Eclipse has that also in the keys preference pane. What I'm talking about is this. Anywhere in eclipse, I just type cmd-3, then "de" and I get a view like this: http://imgur.com/gmon6GT That is cool. The keymap preferences pane in IDEA is similar in functionality, but this seems a bit more powerful. &gt; Another thing I just found, I like the way templates work in eclipse better. In intellij looks like you have to hit cmd-j to access templates. In eclipse, you just start typing the template key "e.g.: sysout" then hit cmd-space and autocomplete will expand the template. It's pretty neat. Same in idea, but tab instead of cmd-space. Ctrl-j just gives you a list in case you don't know the template from memory &gt; That's neat, I don't think I've seen anything like that in eclipse. probably easy to write as a plugin, just as the idea one is a simple little plugin &gt; This thread has definitely shown me a lot of what I haven't been able to find elsewhere. Hopefully I've been able to share some cool eclipse stuff too. I'm going to try forcing myself to use IntelliJ for a month and see what happens. :) do it! would be interested to see what you miss, it's always interesting to learn what tricks other people use.. 
Make sure that in your project properties you've got the project listed as a source folder. It probably looks something like MiniMiniMusicApp/src or MiniMiniMusicApp/src/main/java. 
I'm not sure what you mean. If you want the user to enter a choice, you would want to get the next line anyways then you could make a switch kinda like: string userChoice=new Scanner(System.in).nextLine(); switch(userChoice) { case "l": LookAround(); break; default: break } and go from there instead. I'm not sure why you would want to grab the last given input in this situation since you need the choice of the user each time anyways. Also I would highly suggest you learn the basics of java before delving into programming this game, since things will become much clearer from the boot. However if you do want to store your given input, I would use a list or collection of some sort to do it, and just keep staking the given input into it.
Sorry for the delay. We were all beginners at some point and java class paths are probably the most annoying thing to get used to initially. As for the project name needing to be the same as the class name, no, not at all. You can have many, many public classes. I'm not sure exactly what happened before sorry to say.
Crap. Now I need to find a reason to use these. They look pretty cool. 
&gt; You have no guarantee that each thread is actually checking that while loop every few nanoseconds, that thread could get paused for some large period of time. My original benchmark ran for more than 10 minutes each... ANd still some threads with 0 iterations, so I don't think that's the problem. IF it was a very short benchmark yes plausible, but they are bound to be awake after such a long time and see the variable change...
try using jvisualvm, it's bundled with JDK
There are 4 levels of visibility available in java: public, protected, private, and package. (The Sun devs must have had a thing for the letter p). Of these, the first three have keywords, but the last one does not - a class with no modifier is assigned package level visibility (and you can't use package explicitly, that keyword is reserved for the package at the top of the file.). Incidentally, you can't assign a top-level class as private or protected - other things wouldn't be able to use it then! For a deeper explanation of what the visibility modifiers (or lack thereof) mean, see [here](http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html). So, in your example, there's a difference between public and no modifier, which may not be what you want. However, in general, it's much easier to find a class in your filesystem/IDE if the class is named the same as the file, so Java enforces that for public classes. I'm surprised it doesn't do that for all classes, honestly. So always name your files the same as the top-level class they contain - you'll annoy your coworkers otherwise :)
Good One
Try launching jconsole via the executable at %JAVA_HOME%/bin/jconsole.exe instead of via the jar - I believe this may bootstrap the correct arguments then when launching java/jconsole which may be causing your issue with the second screenshot at least. Also are you trying to monitor a 64 bit or 32 bit java process? (You're using the 32 bit install in the screenshot) Only other issues I've had have been with monitoring java processes that run as a windows service which is due to permissions.
Given that you have absolutely zero constraints other than teaching your students about programming I see no point in choosing Java. [SICP](https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs) is the way to go. Heck, even JavaScript would be a better choice because your students would get immediate feedback on what they are doing because they could just open up the console in their browser and start typing. Teach your students the fundamentals of computation and they will have a solid foundation on which to build. Teach them Java and they will conflate computation with the accidental complexity of how Java expresses computation.
My only reservation is that the object-oriented paradigm may be a bit much for high school students to grasp at first. Concepts like parameters, variables, methods and classes and how they all connect may distract them from the message you want them to take away from the class. Programming languages are an abstraction from the hardware that some people get quickly and some don't. Putting another layer of abstraction between the student and the hardware makes your job harder. Plus, you almost *need* to teach OOP with Java, preferably early on, since the language was designed with it in mind. You may want to check out a procedural language, which will allow them to learn about all of the concepts of programming in a more straightforward manner. C or C++ would be a good bet because Java was inspired by C/C++ and adopts much of its style and syntax. As a result, it should be an easy transition for you to make too. C++ is also another popular "beginners programming language" so there's that going for it. Plus, if you need an incentive to make your kids excited over the language there are plenty of examples you can pull up with C++. Even though C++ is also object-oriented it's almost an added component to the language since C++ is a superset of C. This could allow you to teach the class at the beginning in a procedural format which would allow the students to understand the grammar of the language before you dive into OOP later on if you so choose. That is just my two cents. Others may feel free to disagree.
If you're looking for a language to teach to get students excited about programming and computer science, Java is probably not the best excitement generator. I believe that you'd get more milage out of teaching python as you can go from 0 to something cool happening on the screen with the least amount of overhead. Particularly I believe that there is some python curriculum out there that uses the pygame libraries that also hits on all of the core decision/loop/data structure stuff. If you are past the point of excitement generation and looking to develop students future academic computing capabilities, Java is still the best choice. There is a great deal of academic computing that relies on Java so teaching students java early will give them a head start. [I've always found Monti Carlo Pi problems interesting. ](http://www.mathcs.emory.edu/~cheung/Courses/170/Syllabus/07/compute-pi.html)Not exactly sexy, but if you're looking for some really computationally, theoretically dense subject matter to excite above average students, this should do the trick. 
Thanks for your input! I think it will work out well.
&gt; The goal here is to really get students excited about programming Very very few students are going to get excited about programming without a cool/fun end goal to work and strive towards. I would imagine students would get a lot more excited about learning Javascript and be able to make interactive webpages that they could publish on the web to play with and show off. Another ideal would be to find/write a game where students could write AIs in python and have them compete. I've seen a few open source games like this out there. Put the students in teams and let them go at it... I would say avoid Java for an intro course just to avoid OO programming. There's so much to learn without even touching OO concepts. Save OO for an AP course or college as it will only compound the confusion that comes from learning programming with no prior experience.
Well, the AP curriculum is based on object-oriented programming in Java, and students all across the country take this and I think they can handle it. But I won't be starting off the year with the heavy stuff. I think I will first introduce some of the OOP stuff in the context of Processing. The book Generative Art by Matt Pearson has a great approach to teaching programming, including the beginnings of OOP (he calls it "stealth teaching"), and I think I may follow his methods. Thanks for your thoughts! I think I'm sticking with Java for now, especially since we did mention it in the course description (sorry, I should have mentioned that). I'm afraid I don't know C++ at all, but I've seen a bit of it. I think that will be my next language to master - I've been interested in working with openFrameworks in particular. 
As a high school student who just completed the AP comp sci course, I highly recommend that you start them with java now. The more comfortable they are with the language, the better they will do in the AP course and on the exam the next year. 
This is the way my collage was structured. Personally, start with C that way you can get the basics and knock all the obvious typos out before getting into problems that are harder to find. Java is a good language but little harder to get issues resolved when you first start than a procedural language like C. Your student would probably like java more because they could do android and such but lets be realistic in one class of high school they probably wont have time to be able to make any great android apps.
Having done Android programming for work, I would be weary of this for an intro class as it is non-trivial. God forbid you have to sit there and explain why your Activity object holding your UI might be destroyed at any time by the OS and that holding a ref to it in your thread object will not only not work for updating your UI, but will also leak objects. Oh yeah, you will need to use multithreading for every single I/O operation be it disk or network... Oh and stop looking at the Java docs because Android doesn't actually run a JVM but runs Dalvik which...
No I don't think we'll be seeing Angry Birds come out of the class! I'm thinking more about getting them started on something that maybe they can continue later.
Well, there is no real goal of getting them through the AP curriculum. We don't even offer the AP class anymore. Not enough students took it. Now we've restructured our CS offerings so that they can be a little looser. But I know at least one student who took it upon himself to learn Java and study for the AP exams, and he passed the exams. I'm thinking a motivated student who got started in Java during the year could do the same thing on his or her own.
Oh man you're giving me a headache just thinking about it. No, I don't think I'll actually have them do any Android development. It was more an example of something to mention to the students, just for motivation. Also, at the school where I teach, the parents are VERY involved. The more I can promise the parents that Java is worth learning, the better.
As a long time Java programmer, the only reason to teach java now is if you actually need to be programming in it. They teach it in college but that is a choice students are making for a long term goal, not so with high school kids. The only other reason to teach java is to familiarize people with the JVM because so many of the other cool languages that AREN'T JAVA do run on the jvm (scala, clojure, groovy.) Kids need immediate feedback and that means graphics. Java absolutely sucks at that. The only answer is javascript. Python or ruby are a close second. 
Still has similar issues. There are workarounds involving running or jconsole as System user, it is a pain. I use Linux which does not suffer from this issue. Connecting as a remote system also works on Windws.
Hmm...lots of mentions of Javascript and Python. I will think about these. I'm hoping Processing will give them that graphics excitement.
Well, Java I guess is an industry standard so there will be plenty of jobs that use it. Any large enterprise these days is going to depend on Java or C# for non-trivial parts of its operational infrastructure. One of the main reasons for this is that just like IBM nobody ever got fired for hiring a Java programmer.
I'm sure it was already me ruined somewhere, but the majority of enterprise development jobs are in Java and .NET still. Learn Java well and you'll always have a job. It's an easy language to grasp and keeping people encouraged by success early on is important to keeping their interest. 
Not sure how good it will be for them to learn about pointer chasing in their first language.
That was one of the design goals of Python, to make it easier for teaching. 
From a purely learning stand point (ignoring use in the "real world"), I think Java is a great language to start with. It avoids the nitty-gritty that C presents that may be overwhelming to young learners, but is strict enough to teach some good fundamentals. While Python may be easier and quicker to see a result from, I think if I had learned Python first, going to a strictly typed language with brace/colon use, it would be very hard to remember. Better to learn those habits at the start. Java, in my opinion, is a good in between from the lower level languages like C, and the upper level languages like Python, both of which (or similar) every student will learn eventually anyway. It's good to learn and branch from.
I learned Java, but my employer now wants me to work in C#. What I've found is that it's easy for me to move to C#, but I constantly encounter things that, in my opinion, Java does better (e.g. it has Checked Exceptions). To some extent you get C# for free if you learn Java and that's a good deal.
Thanks for the explanation, guess I have to read up on the specification again :)
Just another opinion here in favor of Python - Javascript has nuanced syntax and a lot of gotchas. Python is painfully straightforward and English-readable. As an intro to programming, you probably won't reach GUI tier in any language in a high school class, but Python makes it painfully easy to sample everything (whereas in js you could never have stateful files without trying to explain localstorage and that is beyond the scope of the class =P). Do use python3 though if you do though, so you never have to hit the roadblock of trying to explain unicode vs bytestrings vs raw bytes. If you ever end up teaching a CS level 2, Java is probably an option there, especially if you want a semester long project like an Android app. If you want a semester-long interactive goal for students, [pygame](http://www.pygame.org) is the defacto standard for making video games in python, and you can write, say, tic-tac-toe in a hundred lines.
I agree with your suggestions. JavaScript is not a good language to start. Too many things that you should avoid and debugging can be really difficult, especially with chained callbacks and similar stuff. The only downside of Python really is the unicode/ascii mess in Python2 (this isn't a problem unique to Python though). Python3 should solve this problem.
&gt; then I'll move them into Java programming, first on the command line then in an IDE (probably Eclipse). Why start hard? Tooling is one of javas greatest features and having the javadoc visible by just hovering over something makes learning it easier. &gt;if you had to put together a list of things that Java is used for Everything (excluding high end video games/OS): * Gaming (Minecraft, ...) * Websites (Tomcat, ...) * FileSharing (Vuze/Azureus, ...) * Smart Phones and lesser (Android, JavaMe) * Embedded (BlueRay Players,...) * Smart Cards (Java Card) * ... 
&gt; if you had to put together a list of things that Java is used for, in a way that high school students new to programming could understand, what might you include? MineCraft. Tell them that MineCraft is built entirely in Java, that they can build server mods and client mods using Java. That will get their attention. Android programs are written in Java, which runs on the Dalvik VM. Twitter is built on Scala, which uses the JVM. Or you can look for any page that ends in a .jsp extension and tell them that runs directly on a Java application server. It's all a dirty tease, though, as it can take years to even understand what's going on in things like MineCraft, Scala or JSP. If I had complete creative control over "Comp Sci 101", and I had to teach it tomorrow, I'd be using JavaScript. In the browser. So I'd teach your super-basic HTML and CSS for a week and then dive head first into DOM manipulation, animation and all the bells and whistles that you can accomplish with JavaScript. If I had a few months to plan ahead, I might pick up Python, as it's highly recommended as an educational language. But I still think that JavaScript has more legs, and its quirks are easy enough to gloss over until they're required. source: I actually do teach Comp Sci 101, but I don't have full creative control.
Good choice. Its wide success has shown that it's significantly easier for people with even little or no background in development to pick up, while some of the other languages which have been tried, have ended up as the niche hobby of some people who care very intensely about a particular subset of use cases. Try to avoid languages and libraries which have the tendency to suddenly stop working as expected, or don't have tools for teaching multicore concurrency. Skip UIs in AWT/Swing/JavaFX altogether, and concentrate on web UIs. Teach your students how to run their own programs on Heroku and other PaaS services. Perhaps a suitable motivation for teenagers would be to be the first in their circles to know about whatever they are interested in, be it sales at a certain store, a pop culture figure, or other content on the internet. Have them write an app that gets the kind of content they care about off the web, and pushes it to their phones. That way, some of them might keep developing it as the content sources, and their interests, change.
&gt;Try launching jconsole via the executable at %JAVA_HOME%/bin/jconsole.exe instead of via the jar Thanks a lot, buddy. This solved the problem!
Glad you think so. This is kind of what I'm thinking. I'll reevaluate over the year but I think Java will go all right. And if they don't understand it, I will be able to work with them until they do. I have a nice small group of ten students and I can be mindful of their individual needs.
+1 on the fact that OO adds significant cognitive burden on top of procedural concepts. ...But (at least for the way I teach), -1 re the use of C or C++ -- those languages are full of frustrating pitfalls and unexpected behavior, and t a bigger level they steer learners towards a mental model that is much closer to the machine hardware and lower-level.
You might also want to have a look at Alice: http://www.alice.org/index.php 
Lots of great information - thanks! JavaScript would be fun for 101. I will think about this. For now, I plan on introducing it in the second semester when I will have a lot more freedom - I have a little less freedom for the spring than it may have sounded from my post (but still more freedom than usual for these kinds of things).
&gt; students all across the country take this and I think they can handle it. Depends on the quality of the students, and how much attrition you're willing to sustain. At a conference workshop, I heard a veteran [college] teacher summarize my own, many attempts at teaching first-semester programming well: After one college semester, you can *either* have them comfortable with classes, fields, inheritance, constructors, getters/setters. *Or* you can have them comfortable with functions, parameters, local vars, loops, arrays. But you can't have both. [Clearly, that statement is relative to the university -- won't be true for programs whose entering SAT is 1250. But we have incoming SATs of about 1050-1100, and I have slowly become very frustrated with how Java's requisite OO bits get in the way of most students learning more fundamental concepts.] 
JavaScript is *everywhere*, it has a built in debugger, and while the code can be messy, we're talking about high school students here. You can also do things like [this](http://webglplayground.net/), and [this](http://processingjs.org/) and [this](http://pierreloicdoulcet.fr/pixel/), pretty quickly.
Interesting project! I don't think it's right for my students, but it looks like they're having some success with it at Carnegie Mellon. I watched their little demo video, and there was [Randy Pausch](http://en.wikipedia.org/wiki/Randy_Pausch), looking healthy and vibrant.
&gt; I have a Ph.D. in mathematics, but computer programming has become a hobby of mine in the past several years. Since I'm mostly self taught, I'm not really an expert in anything, but I've learned programming pretty well. This sounds very much like me, when I started! (Well, it was a CS degree, but was in abstract logic, and any programming I did during those years was not actually related to my thesis.) My biggest tip: After teaching half a year, I was assigned to shadow/teach a course using ["How to Design Programs"](http://www.ccs.neu.edu/home/matthias/HtDP2e/). Actually sitting and working through that approach's curriculum and examples ... it transformed the way I thought about programming, and teaching programming. You may not ever use that curriculum exactly, but I highly recommend all teachers-of-programming (beginning or advanced programming) spend a summer working through the exercises. (Currently there's even a slow-paced Coursera course, [Introduction to Systematic Program Design - Part 1](https://class.coursera.org/programdesign-001/class/index) that's currently on-going. It's a bit heavy on process, before it gets to more interesting graphics examples, but is overall good.) Just my $0.02.
Just a heads up on a fairly early activity that shows why JS is a good option even at the beginning. When teaching basic logic, a lot of systems do the ["run a turtle through a maze"](https://www.youtube.com/watch?v=m4a0jcrDgK0) thing that started back with Logo in the 60s. Using CSS, JavaScript and a few functions, you can build this in the browser pretty easily. Build some left(x), right(x), left(), right(), forward(x) and forward() methods. Have them pull on an &lt;img&gt; tag's CSS left, top and transform:rotate properties. Use some setInterval() blocks to do the animation. Bingo-bango, you've got a moving turtle. All without having to do any heavy drawing. If you build this as a library that you distributed to the students with something like a "makeTurtle" function, and build a maze as a page background, then tell them to push their turtle through the maze, you can get back a bunch of programs like this: // Set up the turtle var turtle = document.getElementById('turtle'); makeTurtle(turtle); // Move through the maze turtle.forward(2); turtle.left(); turtle.forward(3); turtle.right(); ... and so on ...
Java *does not* suck at immediate feedback for graphics. Let them make a simple JSF web app. You can make any change you want on a Facelet and it's visible right after a browser refresh.
I would personally not recommend Python. It's hyped here at Reddit, but in the grand world out there it's not even half that popular. Python is also annoningly slow, which IMHO limits its usefulness as a teaching tool. Students will get fed up with all the waiting before they really start to enjoy programming. Java is also much better to learn about the concept of types and organizing programs. Types exist in Python anyway, but in a sloppy dynamic way. When it works it works, but when it doesn't students will have a hard time figuring out why stuff doesn't work. Java has more regid and immediate feedback from the (incremental) compiler and better tooling, making it altogether a better teaching platform. 
Really, you like Java over C#? Java was taught in college and then I had internships in C#. This summer I'm back in Java and I'm just running into so many issues that worked great in C#.
Really, any examples?
Calling .toArray and having to pass in an array on a list. Not having linq isn't fun. I'm not a big fan of the foreach syntax. Setting up java environments can be a huge pain. Edit: Oh and Visual Studio is awesome.
If you want to teach entry level, look into starting with BlueJ as the starting IDE. It's great for beginners and gives a visual insight into what's going on behind the scene.
Thanks for the info, I guess I haven't used Linq enough to appreciate it yet. I usually develop on Linux so I haven't encountered any issues setting up environments since it's automatic. I am a fan of Eclipse's modular and highly customisable approach and I prefer it over Visual Studio as a result. Some people say it's slow but I haven't found that.
Here's another good resource I saw a while back: http://www.oracle.com/technetwork/topics/newtojava/young-developers-jsp-136992.html 
The vast majority of jobs where the engineer is requested to build large scale, scalable systems that are easy to maintain and the Java platform's ubiquity (both in the sense of industrial and community support, and in its virtual nature) make it an ideal choice for businesses to have code that's compiled once and runnable anywhere. (This has advantages for the client side, too, for obvious reasons. Clients use a Mac? Linux variant #12345? Windows vista x64? no problem.) For this reason I would estimate a large proportion of people who enter the computer science field writing server side software will use Java, it's almost unquestionably the primary platform of choice for businesses. As a Java programmer, I'm quite comfortable looking for jobs.. But for teaching it's not a bad choice for other reasons. The Java *language*'s simplicity makes it harder for novices to shoot themselves in the foot - no mixins or multiple inheritance, minimal language "sugar", simple interface/abstract concepts, a syntax which was expressly designed to be as compatible as possible with C, but full object oriented-ness (for the most part... int/byte/char primitives have a C-ish nature to them) The high amount of metadata in Java code lets you have highly intelligent IDEs which give a lot of information about the code (automatic error detection, refactoring, etc) which is quite interesting and useful. For the record I recommend IDEA's free, open source edition over Eclipse. You might also want to check in to the "learning" IDE BlueJ, but I've never tried it and suspect it might just be better to use IDEA. http://www.jetbrains.com/idea/free_java_ide.html You may also be interested in clojure/scala which are different languages that run on the JVM. But vanilla Java is probably best for your students, good luck 
From an employment perspective, having a bit of Java skills will go a long way in landing that first job. Like others have mentioned, I would not bother with building out rich clients but rather focus on JSP (possibly JSF) based web applications. They can get the core of looping, assignment, exceptions, and other basic programming constructs early on, which will give them what is needed for a simple MVC framework and some of the basic back end logic. (I'd mix in simple JDBC or XML on the data tier) Once they build out the a simple web app, the JavaScript code and DOM manipulation will be a natural extension of the projects they are working on. This is probably the most common sort of thing they will be asked to deliver early on. There are a plethora of development tools, books, blogs, and information out there for people just getting started in Java. The language itself is simple enough that folks will be able to make progress and understand those core programming concepts without having to deal with lower level areas. Since you are the teacher... I'd also add a bit of version control. GIT or SVN. They should get use to source repository basics. Bonus if you use that for them to turn in the assignments. I've always thought an invaluable exercise would be students handing each phase of a project to the person on their left each week. It is one thing to create code from the ground up, another to understand what the former developer did and extend it. 
Please no, JSF will only scare them away. Once upon a time I was responsible for a JSF framework and I am more than happy to be away from that world.
&gt; My only reservation is that the object-oriented paradigm may be a bit much for high school students to grasp at first. Not sure why. My first contact with object oriented programming was with Object Pascal in the form of Turbo Pascal 5.5, when I was at the 11 grade. Doing some short applications with Turbo Vision. I don't remember having much problems to grasp what OO is all about. Actually it made me curious to learn more about different forms of exploring OO across languages.
I have also tried IntelliJ but had it crashing more than Eclipse and have not really found a good reason to switch so far. It should be said I have not spent very much time with it though. But one thing that IntelliJ has that I miss from Eclipse is some of the refactor patterns.
Processing is a fun language but I wouldn't recommend it for an introduction to programming. It has too much "magic" and things done in the background. And if you move to command-line Java afterwards ... they will think it sucks. I would also recommend you introduce a bit of functional programming (if your class format allows it), learning different paradigms allows to approach problems more effectively, and it should also help them realize that Java is one language with a specific set of constraints and that they are not the only way. FP is a growing trend that is going to stay. If you want to get your students excited tell them that if they want to work in banking and make a lot of money, Java is still king here.
Like I said above it's a concept some people grab quickly and others don't. You just happened to be lucky to grasp the concepts. I have been a TA in many entry-level CS courses and I've noticed this struggle enough for me to at least bring it up.
How does this compare to / work with [Linked Data](http://www.reddit.com/r/compsci/comments/1e3mht/is_rdbmss_and_sql_still_part_of_the_standard/#c9xz34s) approaches like [D2RQ](http://d2rq.org/) and [Linked Media Framework](https://code.google.com/p/lmf/) (http://marmotta.incubator.apache.org/)? When merging three [datasets](http://schema.org/DataSet) with three different columns named 'price', 'Price', and http://schema.org/PriceSpecification, how should such a determination be [repeatably documented](http://www.w3.org/TR/prov-primer/#intuitive-overview-of-prov)? 
You may want to consider IntelliJ, introducing them to SublimeText would be advised when one does not need a large IDE.
Looking into it. Thanks!
No way. Flow charts are too hard.
Great advice. I'll keep it in mind for when I can do it.
Thinking about it. Trying to decide between that and Eclipse. I know BlueJ would be a lot simpler, though.
It started with JSF 1.x. Along the way, we hacked our packages to be able to use Facelets with JSF 1.x. By the time the project was cancelled we were already using JSF 2.0. It was based on top of MyFaces, Richfaces and Tomahawk. Trying to track down errors was horrible, as very debug information was available. Not to mention JSF life-cycle issues. Many times we ended up stepping through the code to understand what was happening. Plus the whole JSF model was getting into the way to some use cases people wanted to use the framework for, namely portlets and single page applications. The whole experience made me start suggesting plain JSP with proper taglibs for Java web applications. 
Thanks for your insight! Also, I'm looking into IntelliJ IDEA.
Hmm. I'll think about it. Maybe I'll torture them with command line first, then Java in an IDE, then Processing at the end for fun. Or...I don't know. We'll see. 
Well, we have a pretty rigorous curriculum here, and the students tend to work pretty hard. Not that I don't experience some difficult ones, though. I know I won't be able to teach them everything - I think I'll favor the second list of stuff (functions, parameters, etc) over the OOP stuff. But I will be sure they at least learn how to create a class and use it to create object instances.
We'll see. I'll do my best!
Thanks for your insight. And I like your idea of the students passing off their projects to one another to complete. Reading other people's code is painful, but a necessary skill, and it's a different sort of cognitive exercise.
Here's my take on it: My friend and I both took the same level programming introduction class. We had different teachers, but they used [the same material](http://www.bluej.org/objects-first/) but my friends teacher didn't think BlueJ was a proper IDE to teach with so he introduced (believe it or not) Eclipse to his class. Let's just say that I feel like my grasp is a firmer on the fundamentals. My friend told me he had a very tough time getting into the material - but in all seriousness, that might be because that the book itself presents the reader with BlueJ examples (which he wouldn't be able to follow because they used Eclipse). I know that this seems like it's very... "fitting" to your exact situation, but take from it what you want. I'm not trying to trick you into anything, just sharing my experiences.
Java isn't just a language; it has become a whole ecosystem or civilization (or some metaphor like that). IMO, that ecosystem reflects the current state of play for enterprise software engineers. * Java is free * We can work in gVim (simple) or [STS/Eclipse](http://www.springsource.org/sts) (IDE) * Our projects are managed by [Maven](http://maven.apache.org/), which is just awesome. * All our applications implement [patterns](http://www.eaipatterns.com/) &amp; best practices right out of the gate because we use Springframework [MVC](http://www.springsource.org/spring-framework) or [Integration](http://www.springsource.org/spring-integration). In a word: IMO, knowledgeable programmers don't write raw code anymore; we build from pattern-based frameworks using a project management tool like Maven.
What do you mean? JSF is easily one of the best web frameworks out there now!
Plus One for BlueJ. IntelliJ is most definitely more full featured, but think of it this way. If you were teaching someone to ride a bike, would you start with a simple bike with training wheels, or an advanced bicycle designed for competitive racing? The nice thing about BlueJ is that it's a few steps up from a basic text editor, but doesn't do as much 'automagic' as Eclipse and IntelliJ. That's not saying you should avoid a full-featured IDE, but for teaching the basics, you don't want a lot of bells and whistles distracting from what's important. Teach them to walk before you teach them to run.
Compared to what? Old J2EE? Struts? Portlets? On the java side better frameworks include Spring, Play!, Java EE 7. On the non java side there's Sinatra, Rails, Flask, Django, Angular, Ember, ...
&gt;Along the way, we hacked our packages to be able to use Facelets with JSF 1.x. Hmmm, strange. Why did you need to hack any packages? Facelets was originally created as a replacement VDL for JSF 1.x. &gt;Not to mention JSF life-cycle issues. What exactly where those life-cycle issues? The word "life-cycle" is sometimes used to scare people away, but it really is a fancy word for what pretty much every framework does in one way or the other: convert and validate input, execute some action, render the result. &gt;namely portlets and single page applications. I'm not so much into either of those, but from what I've heard Portlets are an important thing for JSF. I often see Neil Griffin (from the primary Portlets product Liferay) on the JSF mailing lists and spec issues. &gt;The whole experience made me start suggesting plain JSP with proper taglibs for Java web applications. I'm not saying JSF is -the- answer for each and evert web related problem out there (surprise, it isn't), but I don't really think plain JSP is the answer for Java web applications in general either. I've worked on a lot of projects that used JSP and I never really liked it. What is the "proper taglib" that you are referring to then?
If you expose people to OO at a young age than I don't think it's a problem for anyone. The ones having problem with OO are the old time programmers who never touched anything but procedural code or the hardcore functional evangelists. I've seen young people doing OO the right way and not even realizing that they were using a technique called OO. To them it was just the natural way to do programming.
There are pros and cons with how things used to be. Long time ago there wasn't that much interesting you could do with a computer other than programming it. The main audience for computers were hackers and hobbyists. When you turned a computer on you were thrown right away in a basic interpreter which was just begging you to be programmed. On the other hand, finding code samples, documentation and getting questions answered without access to the Internet was difficult. Heck, even a decent C compiler wasn't really freely available for most mainstream computers, let alone the sophisticated IDEs you have today. Although it's said that the commercialization of computers started when the masses got involved, in reality there's a wealth of tooling, compilers and libraries out there for free now. You can literally build the world for free now. Back then, every other little thing like the compiler, the ide, some external library, everything costed money. This was a major impediment for kids to start with programming in anything else than the version of basic that was shipped with the computer.
A good ORM, like Hibernate, can make a bunch of stuff very easy: * Multi-Tenancy * Table Inheritance * Updating your database schema for you * Avoiding SQL injection * Validation 
The irony that there's a code smell in the article's fairly amusing; granted the paper/scissor/stone variables are there to show the importance of naming and to mimic the original code, but there should be some mention that an enum should be used instead of static final Strings for this type of situation.
As __helix__ mentioned, you could start with a very basic JSP web app, or probably even better a JSF one. Take a look at this example: http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config You could probably even skip the class `BusinessBean`. This will give you an extremely simple starting skeleton for building an interactive and dynamic web application. Let them put a `Date` instance in the bean to see the data change on a page with each request. Let the page say something else like "Hi there", instead of "Hello", let them make the output bold (add the `&lt;b&gt;` tag), etc After a playing a bit with the concepts you can start introducing some stuff like loops and such. 
You will need to implement your own mechanism to detect that. There is no standard way with which that is accomplished. It depends very much on your application and the kinds of things you can modify. Off-hand, there are number of ways you could do that. If you can extend the communication protocol, it may make sense to add a pinger. If you can extend the hardware, you may be able to use the DTR line. 
I was brought on a few months ago to help out team IHMC in the Virtual Robotics Challenge (VRC) and thought you guys might like how 99% of the development was in Java. A few parts were done in C++ out of sheer necessity, like a ROS wrapper, otherwise it was all Java. Even the high frequency control loop. This is an oddity in the robotics community where 95% of the development is in C/C++ and python is also becomming more popular. Coding in Java was definately a huge asset towards the end when lots of developers (including novice ones) were frantically integrating code together. More Links about the competition: * [DARPA press release](http://www.darpa.mil/NewsEvents/Releases/2013/06/27.aspx) * [Videos/Images](http://www.theroboticschallenge.org/media.aspx) 
&gt;On the java side better frameworks include Spring, Play!, Java EE 7. Java EE 7 includes JSF! JSF works best when used together with all the other goodies that Java EE provides (especially bean validation, CDI and expression language). I don't think Play is better than JSF, not even close!
Java EE includes a lot of things. &gt;JSF 2.2 (JSR 344) is yet another specification that's being worked on as part of the Java EE 7 effort List of the many technologies included, servlets 3.1 is even on the list, so being on that list does not qualify a technology as being good. http://jdevelopment.nl/open-source/java-ee-7-progress-page/
JSTL is on that list too.
Well, I got to learn lots of stuff by making my own programs and typing code listings from computer magazines. Sure those magazines did cost money, but they were pretty cheap. Then there were the other computer kids I got to share stuff with. So I started with Spectrum Basic (Timex 2068 was ZX 48K compatible), followed by Z80. Typing hexadecimal dumps into Basic Data sections, or loading via an hexadecimal monitor, typed from a magazine. I agree with you, outside the occasional computer magazines and a few books I had access to at the local library, there wasn't much more information to get hold of.
I've wasted so damn much time trying to express complicated relationships in terms Hibernate could understand. It makes me sick thinking of all the work that didn't get done because the ORM made life harder. Yes, ORM has a place, but make sure you're ready to break out of it when you need to. Simple example where Hibernate works: I need a many-to-many mapping between two objects. You get a relation table which refers to the keys from your two object types. Same example with a bit of evolution breaks Hibernate badly: I need to know when each relationship was established. Now that relation table needs a date stamp, and the Hibernate mapping becomes 10x harder than just writing the SQL. Edit: Corrected one-to-many to many-to-many.
Ah okay, that makes sense. I wasn't sure if I was misunderstanding the various comm port event listeners and was curious if there was an already existing method. Thanks for the clarification!
&gt; that means graphics. Java absolutely sucks at that. Swing is not that bad, or did I understand you wrong? &gt; Kids need immediate feedback javac will give you a compile error, python/javascript will happily chuck along until they reach the buggy branch - a downside of being that dynamic.
&gt; Are you sure you don't mean many-to-many? You're correct. &gt; You can just map a property to the timestamp column. I found that to be impossible, because Hibernate doesn't expose the mapping table in Java at all.
This is not true if you are running some distributions of linux. The fonts are all messed up and it doesn't really work well with Unity.
Which list? The ones of good things, or the one of things that are in Java EE? JSTL and JSP together are an alternative programming model for building web pages, just like Scriptlets and JSP is another alternative (very PHP or classic ASP like). Pure Servlets programming is another alternative, but these days Servlets are mainly used complementary for specific tasks and not for general web pages. I don't think even the hardcore "frameworks are evil" zealots will embed HTML inside strings in a Servlet and will build complete pages from that. But really, I'm not 100% sure what you're trying to say with "JSTL is on that list too"...
&gt; servlets 3.1 is even on the list, so being on that list does not qualify a technology as being good. You edited your original response to include this, but I'm still not sure what you are saying. Servlet 3.1 is on the list of Java EE 7 technologies indeed. By using the word "even" you mean to say that Servlet 3.1 is bad or so?
My professor (whose lab also participated in a DARPA challenge) also uses Java for all higher level controls and logic for his robots, I'm surprised to hear its use is so uncommon. http://april.eecs.umich.edu/
Those numbers I pulled out of my ass, but I think they are probably accurate in several large sub-fields. My general observation is that the more a group works with real hardware the more likely they are to use C/C++ and to be out right hostile towards other options. Java tends to be used more for education and "toy" problems. I see Python becoming more and more popular in those areas. For evidence of that take a look at all the most popular open source robotics/computer vision/numerical libraries. They are all written in C/C++. The Java equivalent (if one exists) tends to be much more niche and smaller scope. 
This was for our projects done at certain big multinational corporations, wrapping internal services or while doing portlets. Not the usual type of developer that goes to Stackoverflow. Anyway, our last Java project was in 2011. Since then we are mostly doing .NET and C++ projects. So it can be the whole JSF situation has improved.
&gt; Facelets requires at least JSF 1.2, but we needed to target JSF 1.1. &gt; So we bundled a few jars in our war files and played some class loader tricks. Specially fun when deploying to Websphere. I feel your pain! That can't have been anything but a very nasty experience. JSF 1.1 is like the stone age of JSF and WebSphere especially back then was just made to be hated. Even the very latest WebSphere bundles an extremely old JSF implementation, which still has all the old bugs in it that were literally fixed years ago. And IBM does way better now than I did back then, go figure. 
This is a pretty standard industry progression. In the earlier days of robotics processors and memory were costly so it just was not logical to jam something like a P3 or P4 into a robot so you can use a higher level platform and still get the responsiveness desired. As high speed processors, bus's and memory become cheaper it becomes more realistic and desirable to use a higher level language as they can often be quicker to work with and less prone to developer error causing major issues. 
Here's a method name I encountered this week in our project: verifyIfFileExistsAndIsInWhiteList Wow. Right away this is code smell. Methods should do a single thing and have a single responsibility. When you see "and" in a method name bells should go off.
Immediate feedback as in some kind of reward system, not whether or not you have a compiler error or not. Kids certainly don't think of compiler errors as a reward, at least I sure don't. Swing is about the only thing you can use with Java but unless you have an IDE tool to help you, it's verbose. IDE's for beginners in general is a horrible way to start and using a layout tool can cripple them when a problem arises and they then have to do something they did visually by hand now. 
These are really nice. Thanks for being a teacher, and I hope things go well in your class.
JSTL is crap, IMHO.
Ordered a copy from the publisher for evaluation. The only thing that makes me cringe is the price on these books. Especially since I'm not sure how much I'll get through. But I'll have a look. Thanks for your insight!
OK...definitely will consider this. Thanks!
Very kind of you. Thank you. We'll see how it goes!
I drew flowcharts for every program I did in my intro class and it helped me a lot.
&gt; unless you have an IDE tool to help you, it's verbose Ah the IDE hate crowd, a group I could not care less about. &gt; IDE's for beginners in general is a horrible way to start and using a layout tool This is about giving graphical feedback for which the freely available GUI designers of both eclipse and netbeans are more than good enough. Also I have been using java layout directly for smaller projects and they are not that verbose (unless you forget to wrap new GridBagConstraints with its felt 200 non optional parameters in a custom create method). 
As the field gets more specialized, more evolved methods are being used. mathematics for control, optimized parts for mechanical, more efficient drive for motion, and more evolved programming languages. Python is simply a scripters wrapper around C/C++, but if you truly want high quality and evolved software; use of OOP, static compilation, type safety one should use something easier and better library support than C/C++, and safer than python and the associated run time errors.
Ahhh, the idiot. I use IntelliJ daily, have used both eclipse and netbeans even before it was netbeans and was called Forte. None of those IDE will help you when you get to the point when they no longer help you and you have to rely on knowing how the compiler actually works and what is going on under the hood. If you haven't had trouble with your IDE then I can't reliably think you have enough experience to give advice in the first place.
Yes, that's precisely the point of this article. "It has its place but be ready"
Yes. Although 95% is a marketing figure. And no one reads this disclaimer anyway :-) (and I think you don't really contradict the article itself...)
Don't worry about names, if you follow the far more important practices of small, focused methods and classes what you end up calling things won't make much of a difference. If your code relies on names to make it readable - that's a code smell.
That is all true, but a major part of the problem is standard programming practices in each language. Java is much faster when you minimize how often the garbage collector gets called. The way they teach people to use Java is very sloppy in terms of memory management and you end up with code that's easy to write, but much slower than it needs to be. Memory management in C++ is a real pain and people naturally tend to predeclare memory. So a novice C++ programmer will write much faster code than a novice Java programmer. This issue greatly exaggerates the hardware requirements to use Java. 
Done in regular java or did you use java rts?
I'm not sure I see why the the distinction between a library or a framework matters. But Hibernate definitely is not a leaky abstraction. An "abstraction leak" is the situation where the implementation details of an abstraction "leak" to the application layer, and the developer has to think about the abstraction as well as the implementation. A better example of a (perhaps) leaky abstraction might be JSF. JSF attempts to create a desktop abstraction (components/events) over the request/response implementation of the HTTP protocol. If you need to dig into the details of the HTTP request/response, then the abstraction has leaked. You're not *supposed* to care about HTTP (unless you are writing a component). Hibernate, on the other hand, has never hidden the power of native SQL, and native SQL is a first class citizen in Hibernate alongside HQL. Hibernate is not emulating an OODBMS, it is as Gavin King has been saying from the very beginning, merely a way to map OO domain models to SQL and to automate the work of hand-rolled persistence layers. SQL is not supposed to be hidden from the developer, so there is no "leak".
I like your explanation, but I think the same holds for JSF. Like Hibernate JSF does not try to fully abstract over http and html. In fact, you are supposed to put a plain "html" tag at the start of your pages, and you have a lot of API for directly obtaining things like request parameters. You have convenience functions like view parameters that map directly to GET parameters, you have tags for linking to other pages via a GET request, actions can ask for the new page to be loaded via an http redirect etc. All those things are concepts from HTML and http that JSF doesn't abstract from but instead embraces and provides support for. Vaadin if I'm correct tries much harder than JSF ever did to abstract from http and to provide a desktop illusion.
IDE visual tool dependency??? There's no such thing! You write JSF pages as simple xhtml files. Editor support is convenient for tag, attribute and EL completion and for navigating into EL, but it's not strictly necessary and that's not even close to a visual editor! Just take a look at the JDevelopment example that was given.
Ada? :)
&gt; wont ... when they wont Empty statement. &gt; . If you haven't had trouble with your IDE then I can't reliably think you have enough experience to give advice in the first place. I had until I stopped using eclipse. (Excluding the ocasion where i had to clean up netbeans cache files). None of these problems where related to javac and considering that both ant and maven exist there is still no reaso to use javac directly other than 'I can'. I am however completly confused as to how this relates to swing layouts and their theoretical verbosity. 
Regular java. They also use real-time on some other projects.
&gt; ORMs are not meant to make you ignorant about the relational model. No doubt about that. But people have hopes. Abstraction hopes. Unification hopes. Standardisation hopes. And if those hopes are too naive, they'll be disappointed. Which is when people start ranting... It's simpler to rant and insist that the tool is wrong instead of accepting that the hopes were wrong.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: http://www.reddit.com/r/Serendipity/comments/1hvvox/commons_collections_40alpha1_released_xpost_from/
[SWT: The Standard Widget Toolkit](http://www.eclipse.org/swt/) and the databinding toolkit [JFace](http://wiki.eclipse.org/index.php/JFace) are great.
[SWT is old and busted.](http://stackoverflow.com/questions/16694948/swing-vs-javafx-for-desktop-applications) Swing or JavaFX 2 are the official choices. The latter is the chosen direction for future Java versions and features good stuff like as the use of CSS.
There's JavaFX 2. Or Swing with some fresher look and feel. http://stackoverflow.com/questions/3954616/java-look-and-feel-lf A decent layout manager: http://www.miglayout.com/ Kettle (Pentaho's ETL tool) uses Java + XUL, which is Mozilla's UI system. 
Look at Griffin for an easy to use full stack framework.
I understand that JavaFX is integrated in Oracle's JDK, but what about OpenJDK? If I write an app using JavaFX, will it run on OpenJDK straight out of the box? Or will it involve extra fiddling most user won't bother with, and/or look different on OpenJDK?
Any word on when 8.0.0 is slated for release?
you might find this useful (still in beta, but very cool stuff) - http://www.continuuity.com/
You can do similar things with other addons to Hadoop like WebHDFS, Cloudera Manager, etc. However this doesn't change the fundamental problem. Adding any single point of access for the storage layer creates a massive bottleneck. If I am pumping in Terrabytes of data (which I do on a daily basis) I must use a java client application to do it. Otherwise I must funnel all of the data through a single node. Even using something like fuse to implement a file system requires me to spin up a JVM just to talk to my HDFS clusters. (Don't get me started on the issues regarding talking to multiple clusters simultainiously)
Do you work at Intuit? Who actually uses JSF in production besides them and some of IBM?
Run WebHDFS on multiple nodes?
Doesn't work for single large files. 
Oracle is still in the process of open sourcing certain parts for OpenJDK. Commercial JVM vendors don't have this issue. But the relevant part is that JavaFX will be part of Java 8, as such any compliant Java implementation needs to support it. 
Look up an if statement in the Java documentation. In your paintComponent method, if the condition happens, set the color appropriately. 
I cannot seem to find any authoritative resource to cite right now. But Erik Meijer's contributions to Microsoft's .NET ecosystem weren't unanimously welcomed in the beginning. Adding LINQ meant adding a lot of language features to .NET in general, most of which are taken for granted today (e.g. extension methods). In that sense, yes it was controversial and disruptive - which isn't a bad thing, of course.
No. I don't work at Intuit. There are tons of companies that use JSF in production. A few examples are big companies like Lufthansa, Zanox, Deloitte and Toys R Us, but also smaller sites like e.g. whoratesit.com Virgin Megastore had a very nice JSF based shopping site. A friend of a friend was involved with that one and it was build on JSF and had a lot of traffic, but there have been so many takeovers of Virgin Megastore that I'm not sure if the software survived. But just do the math; take a look at the number of question on stackoverflow, the rating of JSF in polls, the number of jobs on indeed.com, the number of books out about JSF, the popularity of PrimeFaces... if nobody ever used JSF in production, where would all this activity come from?
Why?
Somewhat. Some devs like to use the pure functional style which does not need all the extra sugar candy added to the language.
I view LINQ as being the bastard offspring of Hibernate. Both achieve much the same thing, .NET just built it into the language itself. There seems to be a movement of adding abstraction between Microsoft development products and their database SQL Server. This is seen with LINQ, but also with SharePoint and other Microsoft development frameworks. The benefit of LINQ is definitely performance, as the runtime is able to work with the database client to build an optimal query based on the user's logical abstract LINQ query (LINQ can create some crazy-looking queries). Furthermore, the developer has to care a lot less about indexes, table statistics, etc. The negative, is that LINQ is mostly optimised for MS SQL Server; you can use it with other databases but it's messy. It seems that Microsoft is slowly removing the "SQL" from MS SQL Server. Java is not tied to any particular database technology (which is good!). The current use of JDBC to segregate the java runtime from the database, means that the performance benefit of LINQ would be difficult to obtain without a massive overhaul of JDBC and strong collaboration with database vendors (yes, I can see the irony of Oracle between a database vendor). Java developers shouldn't be scared to write actual SQL once in a while. I don't see a big need for it. Hibernate serves its purpose well too.
LINQ works on plain old collections of objects, as well. It's more than an ORM query library.
Indeed, those in the dark need to know. Spread the word!
You do understand that Reddit is powered by Python. What site in the top 25 most visited uses JSF? Or even Java?
One of Perl's ORM's (DBIx::Class) is built on something very similar to jooq called SQL::Abstract. I've always wondered why people in Java don't try to abstract/reuse as much as possible, e.g. why JPA or at least the implementations like Hibernate, are not already based on something that provides what jooq does. One problem this doesn't quite seem to solve is how to store generated SQL. Do you just have a bunch of string constants laying around containing your constructed SQL? Also, I didn't see any way to store prepared queries with placeholders from flipping through the first few pages of the manual.
&gt; why JPA or at least the implementations like Hibernate, are not already based on something that provides what jooq does. JPA does... [CriteriaQuery](http://docs.oracle.com/javaee/6/api/javax/persistence/criteria/CriteriaQuery.html). It's mentioned on the JOOQ page as trying to hide SQL. From what I see in the example JOOQ "hides" SQL just as much as CriteriaQueries.
Google? Twitter? Facebook? Ebay? These seem pretty big to me. Google is even on nr 1 ;)
Cool, I didn't know about that! :-) So... in that case, what's the point of jooq? CriteriaQuery seems better since it's part of the JPA spec, right? I guess jooq gives you validation against your schema, not sure if CriteriaQuery provides the same.
&gt; The Spring Framework 3.2.3 distribution + dependencies archive is 105.6 MB What part of Spring is used there, that it gets blown up to 106 MB? In my spare time project I end up with 5.6MB of spring libs and another 4MB of other libs (which I haven't cleaned up yet). While I'm not using the whole stack, I do have 14 spring-* libs packaged right now and can not see this going up 10-20 fold at all. Any insight on what I am missing there?
When I look at Spring I come to the same numbers, higher even. The simplest way is to just go to the main Spring download page and add up all the numbers.
&gt; So... in that case, what's the point of jooq? I think that the linked page from the jOOQ manual explains it. jOOQ is about SQL, CriteriaQuery is about JPQL. &gt; CriteriaQuery seems better since it's part of the JPA spec, right? If the spec is undoubtedly "better", then yes. But that leaves you with defining "better". JPA evolved from Hibernate, which wasn't part of the EJB 2.0 spec. So apparently, the spec wasn't always "better" at that time. Maybe you mean "better suited"? That depends on your use case. Both JPA and jOOQ have their place. &gt; I guess jooq gives you validation against your schema, not sure if CriteriaQuery provides the same. In a way, both tools will help you with validating your querying code against your schema. JPA doesn't specify code generators, but some implementations (including Hibernate) ship with code generators...
How is this different to MyBatis?
There have been some talks about lambda support, but I think they were more aiming to include them around 2030. Some developers claimed this was too early and didn't want them before 2040. 
You can use JPQL or SQL as you wish with JPA. Since JPQL is based on the domain model, you get more options with joins, such as more compact join syntax and indicating whether to fetch eagerly or lazily. There's also some convenience with certain functions standardized with simpler syntax. The tradeoff is less expressiveness for higher abstraction. I usually go with JPQL with simple stuff and SQL or stored procedures for more complex queries.
There's a large amount of irrational Java hate out there. Lots of misinformation, and lots of holy wars. Try not to worry about it, too much.
A number of reasons I suppose. First, Java may be one of the most used languages, but that doesn't mean that everyone who programs it enjoys it. Personally my employer forces me to use Java, but I'd never use it if I had my own choice. Those who DO have a choice in the matter are generally not choosing Java these days because (a) the web is the most ubiquitous and popular platform, lending itself better to scripting languages than Java does, and (b) frankly speaking, Java is full of odd quirks and legacy problems that newer languages don't suffer from (classloaders? type erasure?). It's also way behind the times on newer features like type inference, list comprehension, lambdas, (proper) closure, and more functional paradigms. The JVM itself is also subject to a lot of scrutiny given the endless myriad of options with poor documentation, and odd garbage collector behavior you'd never see anywhere else (PermGen space?) The only thing that Java does do extremely well is portability, however the newer generation of programmers tends to see this already filled by the web. And since reddit is largely targeted at younger audiences (across the board, not just r/programming) you're more likely to encounter resistance to Java (which as seen as no longer filling any useful roles). I mean you could just as easily ask, why does no one ever post about Cobol? There are more lines of Cobol in existence than any other language, why all the hate? **EDIT** Christ people, I was just giving my opinion. I'll be the first to admit that Java has its uses, but that's not what the question was.
/r/programming
MyBatis - from what I understand - is mainly about separating Java code from SQL code, which is externalised to XML files. [jOOQ](http://www.jooq.org) is mainly about inlining SQL in an internal domain-specific language in Java. This brings you syntax and metadata typesafety. By building an AST from the DSL expressions, jOOQ manages to standardise common SQL constructs, such as: - [DISTINCT predicate](http://blog.jooq.org/2012/09/21/the-is-distinct-from-predicate) - [Row value expression predicates](http://blog.jooq.org/2013/05/03/sql-query-transformation-fun-predicates-with-row-value-expressions) - [Derived column lists](http://blog.jooq.org/2013/01/07/simulating-the-sql-standard) Being entirely string-based, I don't think MyBatis will evolve into such a direction
&gt; the web is the most ubiquitous and popular platform, lending itself better to scripting languages than Java does What makes you think that? The backends of all major websites are using Java for good reasons; compared to scripting languages it has superior performance, and it's relatively type safe (many error are discovered upfront). There are tons of high quality libraries available, which aren't always there for scripting languages. &gt;frankly speaking, Java is full of odd quirks and legacy problems that newer languages don't suffer from But newer languages have their own unique problems that still have to be worked out, and some of the supposedly newer languages (Python, Ruby) aren't newer at all. Even Scala has already passed its 10th anniversary (it's indeed newer than Java, but absolutely speaking not new) 
Both JOOQ and CriteriaQuery are abstracting over SQL, so in both cases, you're restricted from the full expressiveness of SQL by the abstraction you are working with. The JOOQ abstraction may very well be more flexible than JPA, which is vendor-neutral and is a more common denominator abstraction. The JPA standard doesn't allow native SQL conditions to be mixed with the CriteriaBuilder, unlike [Hibernate's criteria builder](http://docs.jboss.org/hibernate/core/3.5/api/org/hibernate/criterion/Restrictions.html#sqlRestriction%28java.lang.String%29), where you can mix and match.
&gt; The JOOQ abstraction may very well be more flexible than JPA, which is vendor-neutral and is a more common denominator abstraction. Absolutely &gt; unlike Hibernate's criteria builder, where you can mix and match. Nice, I didn't know that! Note, that you can insert plain SQL in virtually any type of SQL clause [in jOOQ as well](http://www.jooq.org/doc/3.1/manual/sql-building/plain-sql)
The most common usage of LINQ is [LINQ to Objects](http://msdn.microsoft.com/en-us/library/bb397919.aspx). Even if a project doesn't use a database you'll still see LINQ all over the place.
LINQ isn't SQL and doesn't have anything to do with databases. It's a query abstraction over collection types, something like monads in Haskell and comprehensions in Scala. Entity Framework (the standard .NET ORM) has a LINQ backend, which allows it to map entities to the collection types needed by LINQ, allowing LINQ to map to SQL through EM. The "Java world" already has something like LINQ, in Scala. But support within Java itself is somewhat more problematic because Java doesn't have first class functions. With Java 8 and the enhancements to the Collection API, something like LINQ might certainly be possible.
Ah ok, seems like there is a big bunch of stuff I haven't seen/used yet. Time to check what I'm missing out on.
&gt; What makes you think that? The backends of all major websites are using Java for good reasons; Do you have a reliable source for that?
LINQ isn't a bastard offspring of Hibernate. If anything, it is a bastard offspring of ML or Haskell.
That sounds very wrong. The backend of most major websites would probably be PHP, followed by Ruby (on Rails) and Python (like Reddit!). Java is very popular in a lot of *enterprise* websites, which already have a huge investment in Java EE.
Most major websites are probably running the LAMP stack, not the Java EE stack or even the Microsoft stack. I would agree with you that Java EE is very popular in enterprise applications, but it is ridiculous to think that Java is running the backends of *all* major websites. PHP (shudder) is the undisputed king of web application development platforms, in terms of raw numbers (not to speak of quality). Performance sucks, it's not type-safe at all, it's quirky as all hell, but it has lots of high quality libraries and easily integrates with Apache and MySQL or Postgres.
&gt; allowing LINQ to map to SQL through EM. Good to know. I thought LINQ-to-SQL could bypass LINQ-to-EM and directly "access" SQL. &gt; The "Java world" already has something like LINQ, in Scala. You mean [SLICK](http://slick.typesafe.com)? &gt; With Java 8 and the enhancements to the Collection API, something like LINQ might certainly be possible. I'm really looking forward to the [updated Collections API](http://cr.openjdk.java.net/~briangoetz/lambda/collections-overview.html). To me, *not* reusing SQL keywords in a Collections API seems more intuitive, as I will not be missing SQLesque things like window functions, grouping sets, common table expressions etc. I will know from the API that I am using functional operators on in-memory collections. But I guess that's a matter of taste, and I have no real-world LINQ-to-Object experience.
&gt; You mean SLICK? Not exactly. LINQ isn't like Slick, it's like Scala comprehensions and other features of the Scala collection library. Like Entity Manager, Slick is a library that takes advantage of existing language features. Unlike EM however, Slick is more like JOOQ and produces SQL directly. &gt; as I will not be missing SQLesque things like window functions, &gt; grouping sets, common table expressions etc LINQ doesn't have most of those things either, because those are specific to the relational model and are features of specific databases (CTE and window functions aren't ANSI SQL and are not universally supported). LINQ isn't SQL, but kind of looks like it, but is more related to functional programming theory than relational theory.
You need to email the developers of the game (see if there's a way to report a bug or just some email) detailing the exact steps you have to recreate the error, along with information about your computer/browser that you're playing the game
I would say it's because Java is primarily used for large, mostly commercial applications that you're never going to find posted to /r/programming. For example, [this post](http://www.reddit.com/r/programming/comments/1hwq0t/meet_corneliusjs_a_modern_library_to_easily/) that's on there today links to a project that's only a couple hundred lines long. I'm not on /r/programming too often, but I'd imagine that this is the norm there for Python or Javascript posts. Java is great for large architectures, but it's definitely not a scripting language, and most of what you see at places like /r/programming are scripts.
&gt; Not exactly. LINQ isn't like Slick, it's like Scala comprehensions [...] Interesting. I'll have to read up on comprehensions. Thanks for the hint! &gt; CTE and window functions aren't ANSI SQL - CTE: no (not yet, I guess. They "feel" pretty standardised across those databases that support them). - Window functions: Yes, they have become part of SQL:2003 in all their beauty. &gt; [...] and are not universally supported. Well, some cynics may say that ANSI SQL is just yet another SQL dialect ;-) Much of the standard is not universally supported either. E.g. - The MERGE statement - The BOOLEAN type - MATCH predicate (I don't know any implementation of that) - DISTINCT predicate - Row value expression predicates (they had been in SQL-92) - Partitioned join tables (I think only Oracle implements this) - Derived column lists - Schema-level constraints (I don't know any implementation) - etc. Since this is also talking about [jOOQ](http://www.jooq.org): jOOQ standardises many of the above features, where SQL can be transformed. For instance row value expression predicates: http://blog.jooq.org/2013/05/03/sql-query-transformation-fun-predicates-with-row-value-expressions &gt; LINQ isn't SQL, but kind of looks like it [...] That's where I think there is some mismatch. While SQL keywords seem slightly "off" for LINQ-to-Object, they're not "correctly" implemented for LINQ-to-SQL. In natural language, one might call them "false friends". Words that exist in two languages with different semantics. SQL is a declarative language. Mixing what looks like / mimicks a declarative language (LINQ) with functional paradigms is confusing.
D'oh, I may have misinterpreted the "backend" part. The JVM is probably the most popular virtual machines out there, the fastest and most platform independent and most reliable, and you don't even write Java code to target it. Twitter makes heavy use of Scala, for example. Ironically, there is plenty of room for Java haters in Java-land.
&gt; Mixing what looks like / mimicks a declarative language (LINQ) with functional paradigms is confusing. Maybe there's your source of controversy.
&gt;&gt; Mixing what looks like / mimicks a declarative language (LINQ) with functional paradigms is confusing. &gt; Maybe there's your source of controversy. It certainly is in my case. But I actually meant something else, which I unfortunately cannot seem to find any authoritative source for, anymore. I meant the politics that were involved when LINQ was first added to .NET...
Not a topic I know much about (although I did once use Java2COM successfully for reading Excel Spreadsheet data), but could you maybe get in touch with JACOB's author - chances are they wouldn't turn down a reasonable license fee if one was on offer.
It is hard to know where you draw the line at Enterprise. It isn't just banks and insurance companies but sites like Google, ebay, and amazon and many others. If you are just talking about more social sites like this one, or other forums, facebook etc... i would agree that they tend to more heavily use PHPs, Python, or Ruby.
Most java developers I know are on StackOverflow.
I don't think a lot of it is irrational though ... most (programmers) that hate java don't hate it because of the language but because of the frequency of required updates and then forcing advertising add-ons to those updates. NOTE: I think this is mostly a windows thing and I haven't used windows in a decade, but these are just the things I read / hear. 
Whoa, whoa, whoa! What do you mean you "checked out the 3.2.3 release from Github"... You mean you checked out all the modules and built from source? And you're comparing this to downloading the packaged JBoss EAP distribution? Shenanigans!
I checked out Spring Framework 3.2.3 and built from source. I did not build or include other Spring projects (e.g. Spring Security). https://github.com/SpringSource/spring-framework And yes, I compared the size of the generated archive to the size of the JBoss EAP 6.1 archive.
No, the Java hate comes more from Java perceived as being the next COBOL.
Java-The-Language is kind of boring: while it is usually an acceptable solution for most jobs, it's almost certainly not the *best* solution for a specific job. "Good enough" will never generate the sort of passion that results in lots of internet points. Java-The-VM, on the other hand, is pretty interesting. Whenever you see VM-related stuff, there's a decent chance it's *J*VM-related.
I think it's more because /r/programming has a more academic bent, or perhaps to put it more harshly, by people who want to be able to say "A monad is just a monoid in the category of endofunctors, what's the problem?" without being ironic.
OMG.. I had to type two characters less on "Hello World". This is totally the language of the future!
&gt;What makes you think that? The backends of all major websites are using Java for good reasons; compared to scripting languages it has superior performance, and it's relatively type safe (many error are discovered upfront). There are tons of high quality libraries available, which aren't always there for scripting languages. All of which is of course equally available to the modern languages on the JVM. &gt;But newer languages have their own unique problems that still have to be worked out, and some of the supposedly newer languages (Python, Ruby) aren't newer at all. Even Scala has already passed its 10th anniversary (it's indeed newer than Java, but absolutely speaking not new) The difference being is that a lot of these languages directly address problems present in Java. While they might have hypothetical problems, they certainly do solve actual problems people have.
There's not a whole lot to talk about. Java just works and it's not flashy. You write relatively straightforward code and get shit done. There's little new to say about it really, unless you're deep into the ecosystem and talking about this or that update to this or that framework, in which case you head on over to theserverside.com and hash it out there.
To be honest, that's a gripe among Java programmers. Among people who don't program in Java, these aren't even things they really talk about. Sure, they gripe about it, but not like Java programmers do. The things they *do* whine about are largely irrational.
From [SpringFramework's building a distribution with dependencies](https://github.com/SpringSource/spring-framework/wiki/Building-a-distribution-with-dependencies) - &gt;Although it is strongly recommended that Spring Framework users take advantage of the transitive dependency management features of build systems like Gradle, Maven, and Ivy, some teams cannot use these tools. This is usually due to corporate restrictions or working with legacy builds. If you're in this boat, you may want to build a Spring Framework distribution zip that contains all optional and required runtime dependencies. ... Keep in mind that most of Spring Framework's dependencies are optional! While it will technically work to "dump" all of the dependencies into your WEB-INF/lib folder, this is certainly not recommended. Add only the dependencies your application actually needs. The only universally required dependency the Spring Framework has is commons-logging. Everything else is based on which Spring module jars you're using, and often what functionality you're using within them. You're still including optional dependencies. The normal way to build a Spring app is to pull only the modules you need using your Maven/Gradle script and deploying the result into Tomcat or Jetty. You're building an "I don't have access to the internet, so I'm going to pull down everything and the kitchen sink" build. No single app is going to use all of this.
OP, he has a good answer.
wow you just made me spit out my coffee haha.
AS others have stated, it depends on your needs. If you need to be extremely flexible and are not too worried about adherence to contracts and interfaces, then Fuse/Apache Camel are probably a good bet. If you need better governance and audit capabilities, then something like Switchyard may be your answer. Mule, ServiceMix, Talend, Oracle, WebSphere, Spring Integration, etc... All have their pros and cons and OP will have to do some reading to determine which meets the needs of the organization. FYI, my currently employer is making this decision right now and so far we are leaning toward Fuse. Our infrastructure is not all Java, so Fuse makes it quite a bit easier to integrate with our other platforms without too much trouble. We're also quite enamored of Apache Camel's capabilities and the tooling built into FuseIDE.
www.google.com I'm serious, just think of some nice utility you would like to use yourself and then Google the shit out of anything you need (**"java how to iterate list site:stackoverflow.com**"). Doesn't matter if you need to open 100 links on your first day, books can only introduce a programming language along with its best practices but the accumulated knowledge from the Internet is where true learning is at. After a few weeks/months you'll get to a point where you can figure out most stuff just by pressing "." after an object and scrolling through the javadocs. Right now, search for Swing "getting started" tutorials if you need a graphics library and don't know where to start... then move to more specific libraries as soon as you understand which tools are perfect for you.
I'm always annoyed by "Easy Steps" that involve step 0: have some large piece of infrastructure that is non-trivial to set up. Should we use continuous integration? Yes, but let's be realistic about how many places have it. Should we have a full-suite of unit tests with high code coverage? Yes, but let's be realistic about how many places even have A unit test. I'm going to write a list called "How to become the President of the United States in 3 Easy Steps" and make the first step "Call a press conference at the Governor's Mansion for the state you've been governor of for 6 years". 
The same argument applies to Java EE and application servers. No single application is going to incorporate every Java EE technology. I did not have time to create a Maven project for every combination of required Spring Framework features nor did I have time to remove modules from JBoss EAP for every combination of required Java EE features. As a result, I compared Spring Framework in its full featured form against Java EE in its full featured form.
It would be unfair to compare the size of even a minimal Spring Framework web application to a Java EE web application as the Java EE web application would have no libraries. It would be a skinny WAR.
I do very much hate the frequent spammy java updates in the system tray. If I didn't get paid for writing the stuff, I'd have nothing but hate for it.
Here's a suggestion that I usually make to people who ask this question... Make a vending machine. Break it down into components (1) Fill up vending machine with items (i.e. populate an array) (2) Account for how many items there are ( 3 in each slot? 5? 20?) (3) Fill up vending machines cash register (give it $100 to start) (4) Get input from user (pick an item, insert money) (5) spit out the change if neccessary (6) remove item from inventory (7) update inventory (8) go back to step (3) (9) repeat this process until you run out of items or the machine has no money left This is a sort of 'large scale' project that should help you see what kind of things are possible in a programming language. Don't except to rush through this. Each of these steps may take half an hour, 2 hours, or 5 days. Keep powering through, and if you get stuck then start googling stuff like ('Java how to get input from user' , ' How to calculate change Java'). You can PM me if you personally need help. I once made a text based vending machine in an intro to C/C++ class so I have an idea of how the pieces all work together.
It may be a dumb question, but is something bad about being on StackOverflow ... ?
But wait, *that's the point!* **That** is why Spring is called *lightweight* and traditional Java EE is called *heavyweight*! It's not because of how many MBs of JARs that the entire ecosystem contains - it's because *you don't need everything for every app*!
Thanks ... no idea why I'm getting down voted, honestly.
With the correction that I means to type "most" instead of "all"; you can Google a lot of it yourself ;) There have been a number of articles on how Facebook and Twitter organize their backends. Facebook for instance has developed Cassandra (http://en.wikipedia.org/wiki/Apache_Cassandra). This is completely in Java, which thus proves Facebook uses Java. Here's on article on Twitter having moved to Java: http://theregister.co.uk/2012/11/08/twitter_epic_traffic_saved_by_java and here's one on Twitter's own engineering blog: https://blog.twitter.com/2011/twitter-search-now-3x-faster Of which I quote: &gt;Last week, we launched a replacement for our Ruby-on-Rails front-end: a **Java server** we call Blender. We are pleased to announce that this change has produced a **3x drop in search latencies** and will enable us to rapidly iterate on search features in the coming months. *(emphasis mine)* You can find similar stories and articles for many other big websites.
&gt; lots of holy wars 
&gt; facebook etc... i would agree that they tend to more heavily use PHPs Facebook was originally build in PHP, but from the various articles and presentations on Facebook's architecture it becomes clear that PHP is used less and less; mainly in the frontend to generate the HTML based on the data that delivered by the various backend services. And even there it's not *real* PHP, but a dialect that is converted to C++ and then compiled called Hip Hop. 
I personally believe it's an acquired hate. A small group of rather vocal people scream and yell that Java should be hated, so the masses slowly start to hate it as well, often even without knowing why exactly they should hate it. It's like people telling themselves over and over again that they are innovative and proactive and [insert management buzzwords], without actually being it. But repeat it often enough and you start to believe it just based on the words.
Shouldn't /r/programming be for general programming topics - algorithms, software development techniques, OO-design, functional programming, etc, and not language-specific topics? I.e. I don't see the point in trying to make /r/programming the superset of /r/java, /r/cpp, /r/haskell etc.
That doesn't make any sense. How does a Java EE application have to have everything?
Experienced devs start out with using the term *Java EE* ;)
&gt; Any insight on what I am missing there? The Java EE server vendor employees and community MVPs need to use these tactics for their sales pitches, being bereft of actual sales arguments. That's the strongest argument right there, they don't believe in their products themselves. It beats me why they'd choose these talking points, given anyone can check out an example application, such as https://github.com/mikaelhg/springmvc-example, ``mvn package``, and see that even the distribution that packages the WAR *with Tomcat* inside an executable JAR is only 30MB. 5.4MB of that is Spring, including the extra Spring Data JPA library, which allows me to simply [define CRUD interfaces](https://github.com/mikaelhg/springmvc-example/blob/master/src/main/java/mikaelhg/example/ExampleDao.java). Seeing as most of those classes don't even get loaded, running the web app with ``java -Xms32M -Xmx32M -jar target/springmvc-example-1.0-SNAPSHOT-war-exec.jar`` works fine. The 32M runtime memory allocation even has enough space to attach a YourKit profiler, for a nice graph: http://i.imgur.com/LDdwhjr.png
What hobbies do you have? It'll be far for you to stick with a project you're interested in, and basing it on a hobby or interest is in my opinion at least) the best way to maintain the interest.
We are also in the middle of a Fuse/Switchyard decision. Java shop using a home grown ESB today plus a variety of other JBoss products. It was clear for us on which middleware to choose (other than the decision we now have between Fuse and Switchyard).
If only that was any kind of relevant.
The answer is simple, small practice programs. Vending machines, calculators, text based I/O stuff, cash registrars, class avgs, charting test scores, atm machines. These type programs are a bit more complex than "hello world" but still easy to follow and build. After this move to sorting and storing, then on to data structures. &gt;Could someone please give me a general rundown of the different components or functions a program should have? Not really, the purpose of the program will alter what goes into it. What it needs is specific to the program. [Here you can find the java se7 api](http://docs.oracle.com/javase/7/docs/api/) which will tell you what each class does (this is a great resource, although a bit overwhelming to the "hello world" programer) 
A Java EE *app* doesn't have to have everything, but a Java EE *application server* does - partly because it's more of a standalone "product" and partly because to be "Java EE" certified it has to provide the full Java EE specification. Spring is a modular framework - you only have to pull the parts needed by the app you're building.
StackOverflow is a great site. Probably the best place to get answers about programming and code issues, which is why people go there first and the only things I see on reddit are news articles and sometimes product releases.
You might want to take a look at the architecture behind lightweight, modular application servers such as JBoss EAP, IBM WAS Liberty Core, and Oracle GlassFish. While the distribution includes modules that implement all of the Java EE technologies, the modules are not required. In fact, they can be removed from the installation if desired. Java EE technologies are provided to applications in the form of services. The application server determines what services are required to deploy an application and starts *only* those services. Further, only the modules (classes) that are required to start said services are loaded by the application server. It is sort of like executing Maven at runtime instead of compile time. With a Spring Framework application, the dependencies are manually configured at compile time. With a Java EE application the dependencies are dynamically configured at runtime.
I don't know why I didn't start thinking of something related to my hobbies. Travel would probably be my biggest hobby currently. Maybe I can make some sort of travel application. Now that you have me thinking about it, how about travel planning assistant. I often find that I have to weigh the pros and cons of flying vs driving. Maybe something that would take a starting point and ending point and estimate total travel time for flying and driving. It'd check ticket prices and compare them against to cost of driving. Later I could expand it to include hotel and rental car prices and possibly alternative modes of travel, like trains. I'd probably want to interface with a mapping application, like google maps. Where would I start to gather distance and routing information from google maps? Do you know of any travel sites that allow you to query and pull flight cost info, like kayak? Or would I have to write that myself?
More like OMG why does this language make me type repetitive and error prone boilerplate over and over agian.
This always made the most sense to me. Posts to /r/programming should have something interesting about programming in general. If you want to talk in depth about a specific language there are subreddits specifically for that.
Personally, I am leaving toward Fuse. I think that the tooling and capabilities are more mature. 
Twitter is Scala with a bit of Java, Facebook is PHP, but you got me on Google.
If your product had allowed your customers to implement business processes that the market winners can't, you'd be talking about those instead of how Java EE still means heavyweight enterprise beans and scaling-retardant licensing bills which keep customers from realizing cloud savings and continuous delivery quality differentiators. That's my experience of marketing and sales people who feel they have reason to believe in their products.
Agree it's not irrational. Oracle's stewardship of Java has been... wanting... bundling adware included (actually I'd like to better understand the forces that prevent OpenJDK or a fork from becoming a bigger player). I'd be fairly surprised if my non-programmer friends even had Java installed. Seems like it's mostly on servers or running in-house solutions at businesses. But I think there's more to it too... The language is slow-moving and *is* missing some features that make other languages a lot more enjoyable to write (and write about), not just terser. Lambdas should go a long way toward remedying that.
Agreed, but that's apples-and-oranges. You can't ask for advice, have discussions, or show off your projects on SO.
I'm not really sure what your point is. I think everyone would agree that J2EE application servers were heavyweight. I was not exactly a fan of EJB 2. Of course, that was in 2003. It's now 2013, and we've had Java EE since 2006. What does 'scaling-retardant licensing' mean? Are you familiar with the Red Hat subscription model? You mentioed cloud. Have you heard of OpenShift and / or OpenStack? I would comment on continuous delivery, but I need you to clarify what you mean by that.
You're thinking of Linq2SQL or maybe Entity Framework. That's just one application of LINQ.
Maybe so (and OP mentioned that), but we very frequently see specific topics for Python and other languages that the /r/programming crowd does love voting up. This includes things like [product x.z released!]. E.g. recent such posts: * http://www.reddit.com/r/programming/comments/1hl2qr/rust_07_released/ * http://www.reddit.com/r/programming/comments/1h1f7w/rails_40_final_version_released/ * http://www.reddit.com/r/programming/comments/1h9bq3/macropy_100_released_syntactic_macros_for_python/ I think somebody once said after posting a [java product x.z released!] that it didn't belong in /r/programming, but seemingly [non-java product x.z released!] is typically okay :X Although I have to say that in at least one occasion a similar Java related post, namely "JSF 2.2 released" did quite okay: http://www.reddit.com/r/programming/comments/1cj9yt/jsf_22_jsr344_is_final/
Are you comfortable with the Java EE stack (or any equivalent, e.g. Spring modules)? If so I think you've got a good platform to build on: * JAX-WS will allow you to consume web services, so provided you can find sites which provide this information as a web service you'll be able to get the data - I'm afraid I don't know of any sites which provide this data though (a quick google for "Flight time web service" only returned paid solutions rather than free access, but I'm sure there's sites out there). * If you use JSF you can use the excellent Primefaces utility - one which immediately springs to mind for your idea would be the [Gmap component](http://www.primefaces.org/showcase/ui/gmapHome.jsf), although that doesn't look like it supports calculating the distance between two points - there may be an API that they provide which gives you access to this data (from what I remember Google generally allow free access to their data for personal projects, but you may need to create an account in order to get an access key). Or perhaps you could use the [Timeline component from the Primefaces Extensions project](http://fractalsoft.net/primeext-showcase-myfaces/sections/timeline/basic.jsf) to map out the different journeys, something like that.
Because you just aren't Good Enough to write an extension to Eclipse to make it vomit that stuff for you. (No, I'm not good enough either... and neither is anybody else I know... damn, I miss Slick sometimes.)
That's OK, people who work with architecture budgeting should be familiar with these concepts. You want to be able to scale both your architecture and investment in business development and support projects. A scaling-retardant product licensing model makes the vendor a participant in the discussion, and stops many evolutionary improvements by the simple requirement of needing to have a capital expenditure discussion regarding temporary operational scaling. Continuous delivery quality differentiators fall under the same umbrella, except that as business development, they are even more important. I have both an [OpenShift](https://github.com/mikaelhg/paas-deploy-example/blob/master/openshift/src/main/resources/.openshift/action_hooks/start) and [Cloud Foundry](https://github.com/mikaelhg/paas-deploy-example/blob/master/cloudfoundry/src/main/resources/start.sh) installation, and I'm hoping that they turn into income-generating businesses for RH and Pivotal. When you look at their code, they do look like somewhat hacky prototypes, I'm hoping that the Docker offering will produce an implementation that would seem more maintainable on the long run.
Because most Java programmers are too busy with a real job to post here :)
&gt; [and (b) frankly speaking, Java is full of odd quirks and legacy problems that newer languages don't suffer from](https://www.destroyallsoftware.com/talks/wat)
It isn't the COBOL of the future, it is the COBOL of the now. When COBOL was hot, C/C++ was hot for performance applications and COBOL was used for business oriented applications. Guess what need Java fills? Java has rote solutions: Spring. Struts. Hibernate. Rinse. Repeat. Sometimes, it will be Spring, Faces, Hibernate. Or maybe it's Guice or EclipseLink. Some form of JPA. Naturally most companies feel compelled to layer this with WebSphere. Even RESTful applications follow some mix of the above, in spite of the fact it's all overkill. **Do you really want to bring that here?** There is really interesting stuff going on in Java: Hadoop, LogStash (jruby underneath, but lets not go there) Lucene/Solr) and probably more, but it's the exception to the vast vast majority of stuff people work in.
&gt; tl;dr Use your CI Setup to test Java 8. Well that was completely useless
Ah yes, everybody who doesn't think like you is a gullible idiot easily swayed by these nefarious vocal people who hate java for no reason at all. /sarcasm Or you know maybe there's a different story here. Maybe there's a group of people who only use Java and haven't actually done any serious development in other languages. These folk don't see any problems with doing what they've always been doing, and the jobs these people do don't allow them to learn anything new. The hate here seems to be coming from the fact that they see that a lot of people prefer other technologies when given choice. How dare people like something different than what you're used to. How can there possibly have been progress in the field since you learned what you learned!
A bunch of stuff is here: https://netbeans.org/kb/index.html
One of the main tenets of Java - unlike many languages out there - is to be READ friendly meaning that code should be self-explanatory and shouldn't hide things. You should be able to look at a piece of Java code and be able to say what it does. That's why Java excludes some language features like a preprocessor, operator overloading, structs, etc.. Features like these all detract from being able to build large and long-lived maintainable applications. On the other hand you have languages which allow to to type less code. Now I don't know about you but I'm not paid as a transcriptionist. I'm paid to solve real problems. 
Because every time we do, some language hipster tries to go on a rant or something. It's filled with teenager-like people who think that being written in Node or CoffeeScript automatically makes it better than Java. It gets tiring, and we just stop posting. Basically, the community is self-selecting against java stuff, and you have to change the community mindset to change the content. 
Here's the "proper" way imho: 1. add a setter method "setColour(Color colour)" and a field "colour" to MyDrawPanel. In the existing paintComponent(Graphics g) method use this field to determine the colour each time it repaints. 2. add a call to your new method at the correct point in your go() method The reason this is "proper" is that it "separates the concerns". The MyDrawPanel class is responsible for producing the gui **view** so it is the one that has it as a field. The SimpleAnimation class is the one driving the **presentation** so it makes the change when you want it to happen. By the way, what you have here is a stones-throw away from what is known as the "MVP Pattern" (hence the bold text in the previous paragraph). Once you get the hang of what you are doing just now look it up. It is absolutely the best way to build a GUI application for many reasons. (apologies for inconsistent UK/US spellings, it's late here)
My 2 cents, Think of an ESB as the mother of 5 children that don't get along. If the children don't want to talk to each other, but they all need to negotiate what they (collectively) want for lunch, they all go through the ESB. The ESB talks softly and quietly to the shy one cowering the corner, and grabs the rowdy one that refuses to stop running by the leg and holds them upside down until they get an answer. Mediation, Integration and Message Routing are key here. Are you worried about these [Salient Characteristics](http://en.wikipedia.org/wiki/Enterprise_service_bus#Salient_characteristics)? * Apache ServiceMix is a fairly nice package which lots of vendors derive from. * If you need to purchase production support, any major vendor can scratch that itch depending on which types of integrations you need. Employing Apache Committers, while useful and indicative of overall project support, is typically less necessary than you'd think. For example, if there's something wrong with my car, I need a decent mechanic, not an engineer who designed my car. 97 times out of 100, the problem lies in your implementation and not in what the software promised it'd deliver. I hear a lot of cases of, "Doc, it hurts when I twist my elbow and shoulder like this." "Well, don't do that." Sorry to get uppity and presumptuous, but since you asked "should *I* use...", I'm tempted to say that *you* probably don't need one. An individual typically doesn't need an **Enterprise** Service Bus and it typically just adds a bunch of unnecessary overhead in smaller projects. 
&gt;One of the main tenets of Java - unlike many languages out there - is to be READ friendly meaning that code should be self-explanatory and shouldn't hide things. This is counter to my experience. Often times Java code is down right impenetrable because you need so much overhead to do simple things. This obscures the purpose of the code and makes it difficult to reason about. The common development practices used in Java community only serve to make this problem worse. You'll have hierarchies of interfaces and abstract classes that you have to navigate the ultimately have a single implementing class with a few lines of actual logic in it. &gt;You should be able to look at a piece of Java code and be able to say what it does. You should be able to look at a pice of well written code in any language and say what it does. The language is completely tangential to this point. Either you're writing good maintainable code or you're not. You don't have to look far to find examples of shitty Java that's impossible to maintain. &gt;That's why Java excludes some language features like a preprocessor, operator overloading, structs, etc. Yet, Java creates a ton of complexity by having arbitrary restriction on what you can do with code and data. You can pass data as a parameter, but not a function. You can return data from a function but not another function. You can create anonymous instances of data, but again not functions. Then Java goes to solve the problems it creates by creating special language constructs such as constructors and anonymous classes. Instead of having a small number of uniform language concepts, you end up with a ton of special cases. &gt;On the other hand you have languages which allow to to type less code. It's not about typing less code. It's about having declarative code that's expressing the intent of the program. Good code separates **what** is being done from **how** it's being done. Java is terrible at this. Because you cannot pass logic as parameters easily, it makes it difficult to abstract common things like iteration. After nearly 2 decades Java is finally recognizing the value of this and will introduce a half assed lambda implementation! &gt;Now I don't know about you but I'm not paid as a transcriptionist. I'm paid to solve real problems. As am I, hence why I want to write code that's relevant to the problem I'm solving as opposed to writing boilerplate that has nothing to do with it. 
Conversely, it seems like many people will defend Java against all reason and refuse to see that the language could possibly be improved on in any way. Java was a huge improvement over working in C++. However, it was intentionally a very conservative step forward. Today, it has a lot of legacy baggage and lacks a lot of features that are common in the languages that came out since it gained acceptance. Not being able to have a rational discussion regarding this is holding everybody back in my opinion. The fact that it took this long to add lambdas to the language and their implemented speaks volumes in my opinion. It seems that instead of thinking of how to move the language forward Java community is becoming increasingly defensive and insular.
In practice I never see the query syntax used in c#, most developers shy away from it. However we use the extensions in IEnumerable practically every 10th line of code. 
&gt; A small group of rather vocal people scream and yell that Java should be hated Little over-stretched analogy but I would look at it the way people like Gruber and Siegler scream against anything that's not an iThing.
That made lot of sense. If you had another language to recommend, what would be your top choice? I'm a few months into java and android and have half an app done. I want to focus on android so I'm pretty stuck with java, but I would seriously consider your recommendation for another time. 
There's java on mac/linux just it normally comes in a nice controlled package that handles the nasty things like the enviroment variables for you, and doesn't launch a daemon in the background to do updates and whatnot. (no clue why after all these years the java installer doesn't set those environment variables itself)
business users are conservative, no big multi billion dollar company backing it to theoretically sue or something when things go bad. Openjdk also tends to be a mildly buggy sometimes try running eclipse off of it the graphics look wonky. (at least for me might be this added a color scheme to there eclipse package really haven't run into anything breaking) 
dunno why he's getting downvoted, they built a system so bad questions/answers can be dealt with, but a lot of bad ones still come through.
wonder why, other than the meta tagging and the tighter requirements before someone can up/down vote it's really a similar model.
If your running into typing speed as a block to a language your probably not thinking about what your writing enough.
It's cultural; Java isn't seen as sexy. Java is the COBOL or RPG of our era; it's used to write big, boring programs for banking, line of business, government, payroll, and other "enterprisey" needs. There are a seemingly limitless supply of mediocre Java developers here and off-shore because they heard computers are lucrative. Java the programming language was cool and innovative back in 1996, first catching the public imagination in the form of Java applets. These didn't have staying power, but Java did find another niche: enterprise software development. For this, it was mostly an improvement over C++, Visual Basic, and certainly COBOL and RPG. Still, Java hasn't kept pace, and people who are coding in their leisure time are going to choose a language that offers a better combination of expressiveness, features, etc. without all the enterprisey baggage they won't be needing anyway. I look at Java as my work language rather than a personal pick. Even on the Java platform, numerous languages have shown Java up.
Eh, I don't know. There are a lot of other languages "that just work" and equally "get shit done," but their communities, despite being a fraction of Java's, are extremely active. A perfect example is Python. It's like, what? 15th on the popular programming language scale, and yet the community is active as hell -- and it makes it a lot of fun to be a part of. r/python always has interesting posts. From recent PyCon videos, to blogs on some of the lesser understood features of the language, to whether or not the (god damn) GIL will be the downfall of the language over the next few years. Similarly, in "meat space" I have weekly meetups or user groups in my local area running weekly. All for languages like Scala, Python, Ruby, (I think there's a hackell one as well) and WebDev stack people, but... absolutely *zero* for Java. Which brings me to OPs question, which is the *exact* thing I've always wondered: why does the Java community... suck? It feels like no one's excited about the language, or its bleeding edge features. There's no meetup or user groups around me (and I'm in a major metropolitan area). The post on here are slow compared to other language subs/forums, I, like OP, just don't get it. This is literally one of the most widely used languages. Where's the community excitement? :/ I want to talk to people about the cool things that are happening in Java! 
What java package did you install? The java package you installed my not include the command line binary.
looks like the java executable is not in your path. I don't run centos, but here's some troubleshooting tips: - do not run the minecraft server as root. some distro's severely limit root's path for security. create a new user and group for this service. - If, as the new user, you cannot `java -version`, - The package might have an error; list your path and see if there's a java/jdk/jre: `echo "$PATH" | tr ':' '\n'` - If there is, check to see that there is a `java` executable file in that path. Also might need to make sure that it is the right architecture, for example if the java is 32 bit and your OS is 64 bit then it will not run without the 32 bit compatibility libraries. - If there is no java in your path, then check the package manager to see where it installed the java executable to. - make sure you can run java: `/path/to/java -version` - if all that checks out but `java -version` still reports an error, try manually adding the path; one of the least intrusive places to do this is a new executable shell script in /etc/profile.d
i manage my own installs of the jdk. I like being able to switch between 32 bit and 64 bit, or different versions (5 vs 6 vs 7) or different brands (stock oracle vs openjdk) at a moment's notice without affecting what I already have running. I can't stand the way the ubuntu package system tries to make the last java you installed the only java on the system.
Oh by no means is Java perfect, no language is. I've gotten angry multiple times working in Java, but have also been able to get things done with it. As for the community being defensive, I think it's just in reaction to the amount of people who think java is terrible and are more vocal about it. People are going to defend what they enjoy and get more defensive if others attack it, that's just natural. 
Interesting. Why do they shy away from it? With the original article, I was trying to make the point that the SQLesque-but-not-at-all-SQL syntax is misleading and not necessarily contributing to the expressive power of functional programming. As you put it, IEnumerable enriched with lambdas and extensions seems to be the main innovation here, even if it doesn't sound as marketing-sexy as "LINQ". Java 8 will ship with an adapted Collections API and the new Streams API, which doesn't introduce a querying language. It's just an API which can be used with lambdas.
My #1 tip is to write some code that reads in a template and uses it to write simple Java code for you. This will become an absurdly useful meta-project down the road... there are a ton of projects (like Spring) that do this for you, but by rolling your own you end up with a very deep understanding of things like 'introspection', plus you get tools that let you bash out something like this as a template: foo bar@ useCount# isValid? and spit out a complete .java file with fields defined like this, along with all the necessary getters and setters and constructors: public String foo; public List&lt;String&gt; bar; public int useCount; public boolean isValid = false; For bonus points, think of ways to take templates, turn them into .java files, stuff those into javac, and then use a [ClassLoader](http://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html) to pull them into your program... now you've got code that writes itself on the fly. The mind boggles... and also you'll have more time for Reddit when you get a coding job. (protip, use [Thread.getContextClassLoader()](http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#getContextClassLoader%28%29) so you don't have to roll your own..)
This is pretty much bang on, imo. Upvote for insight.
It seems to be a vicious cycle unfortunately. The more defensive people get the more insular the community becomes. 
I think for Android you really are best off using Java. The tooling is the best and Google seems to be doing great things with the Android Studio. I mostly work with web apps and I predominantly use Clojure for that. I find the language is fairly small and simple once you get past the fact that it's different. I find it's main benefit is its pervasive immutability. The language uses [persistent data structures](http://en.wikipedia.org/wiki/Persistent_data_structure). This means that any time you make a change to existing data you create a revision in memory. With mutable data you either have to copy whole sale or change data in place. Copying whole sale is prohibitively expensive in a lot of cases and mutating shared data makes it difficult to reason about scope of the changes. With immutable data structures you simply get a new value and changes are inherently localized. I find this makes it much easier to reason about large projects as you can safely consider parts of the application in isolation. The use of immutable data structures also allows for optimistic locking. The language has a STM library for handling shared mutable data. When a thread updates shared data the existing revision is still available for reading. The STM will also handle retries in case of collisions. Another large benefit is that the language uses small number of common data structures and has a rich library of common function for working with them. This allows writing code in predominantly declarative fashion. Since it's a JVM language you still get all the benefits of the existing libraries, tools, and deployment options. The programs simply get packaged as standard jars and wars that can seamlessly interop with Java code.
Well, if you're talking about pure Java, then maybe. On the other hand, languages built on top of the JVM and its libraries, like Clojure and Scala, are trending these days, so there's plenty to talk about, even if tangentially related to the actual Java language.
I'd suggest to test out all three major IDE's and see what works best for you: * [IntelliJ IDEA](http://www.jetbrains.com/idea/) * [Eclipse](http://www.eclipse.org/) * [Netbeans](http://www.netbeans.org/) If you don't have a requirement to have to use netbeans I really suggest to test IntelliJ IDEA.
Netbeans debug is intuitive and easy to use for fledgling computer science students. I used it to write my postfix calculator, you will soon! rundown: netbeans is very straightforward. Use debug to walk through your program line by line. 
Well, there are usually a few kids asking for solutions for their homeworks in /r/java ;)
I asked a very similar question the other day. Turns out the best way is to store files in apache and use something like jplayer on the front end. 
Yeah, that's interesting and I think I'll be able to dig a little deeper with that post, but I also need to figure out how to develop any solution that allows someone to record his own input devices to ve streamed live, not just saved into a file which could be streamed later on.
*sigh* as a java developer it seems we really bring our reputation on ourselves. An article titled "testing java 8 in 3 easy steps" sounds innocent enough. Let's have a quick test, and play around with some of the new features, right? Nope, lets start by migrating our fricking CI server to java 8. 
I agree, it seems some people drink the koolaid, others drown in it. 
http://www.reddit.com/r/java/comments/1gnbyx/question_ideas_on_streaming_audiomp3_from_java/ Good luck!
Try JavaFX. [This might be what your looking for](http://docs.oracle.com/javafx/2/api/javafx/scene/media/AudioClip.html) otherwise check the media package.
This. Java's not my favourite language, but I use it when it's needed. It's a work horse. In many ways it's like C -- there are few posts on C either. It's because they're boring languages that just the job done. IMHO -- exactly what we want in our programming languages. C++ is getting a bit of attention lately as the compilers catch up with C++11 and people start trying out the new features; but normally C++ suffers the same fate: yawns from the cool kids. I think people reach for python for their blog posts and programming questions because it's a modern language that's probably already installed on their linux system and is a single download away on their Windows system. It doesn't get much easier than "python script.py"; and sometimes that quick accessibility is what you need when you're discussing programming. Don't take it personally.
I have never experienced joy when coding vanilla Java or J2EE. I am exceptionally unexcited by the product being in Oracles clutches. The language is wordy while being unopinionated. The most popular libraries are well documented and understood. Many people in the Java community use it ONLY because someone pays them too (or a school forces them to learn it). It uses an uninspiring (but useful) vision of OO. It has a nasty complexity curve as you start using more and more libraries. No one gets fired for picking Java means it is often not the favorite tool, but the safest tool, the lowest common denominator. Having a community full of people who would rather be doing something else (doing it for the money or for school) creates a huge bias towards people who simply want to extract value from the community, then get back to the fun stuff in the communities they actually enjoy (Go[lang], Python, Ruby, whatever). This means the small handful of passionate Java developers who want to throw a lot of time and effort into posts and projects might get a decent hit rate, maybe many people read them, but no one engages. That is a demoralizing experience, so they stop... very possibly move on to other languages with healthy communities where the content they create generates engagement and a positive feedback loop. Kits like Clojure, JRuby, Jython, Scala (/w Akka), let them leverage some of their java experience, write less wordy code, and has brilliant communities. Just the quality of the communities is probably enough to pull people out of vanilla Java into something else. So even when passionate people get in the door, they learn quick to exit into something with a better feedback loop. 
Perhaps http://www.webrtc.org/ would be relevant to your question. WebRTC is a set of standards implemented in Firefox and Chrome, which allows you to stream video and audio to and from browsers.
I've use Netbeans at work, I used Eclipse at my last job (and the one before that) and I use IntelliJ at home on my "personal" projects. For a beginner, you really can't go wrong, but Netbeans is a good choice. Here's my impressions at all three: Netbeans: Lots of support out of the box for Maven, Swing GUI, JavaFX GUI, Javascript support [ no highlighting :( ], and basic Java refactoring and some nice time saving features (getter/setter/constructor generators). The plugin "ecosphere" is hardly impressive once you've been exposed to Eclipse, but there are some good ones out there. Eclipse: Less "out of the box" support for things; however, it still has the nice time saving features of Netbeans. That said, the plugin ecosphere is FULL of plugins that do everything you want. Want maven support? There's a plugin for that... etc... etc... IntelliJ: For a professional, IntelliJ IDEA is a dream come true. The refactoring support for popular frameworks is amazing. It's nice to be able to have an IDE make very good guesses at what it thinks you're trying to do. For example, if you type StringBuilder sb = new St [CTRL-SPACE], in IntelliJ you'll get an auto choice for "StringBuilder" which is the closest match that can actually fit, but in Eclipse you'll get "String" because it's the closest match. Worst of the three, Netbeans will suggest "StateMachine" which is a class currently open in your workspace. All-in-all, you really can't go wrong if you learn one of the three major IDEs. Knowledge from one is completely transferrable to the other ones. The only downside is the difference in keyboard shortcuts which IMHO is the reason why people get all uppity about one IDE or the other. It's really hard to switch from Eclipse to IntelliJ, for example. That said, once you do learn the different IDEs (and their shortcuts) the differences are still apparent, but it's far less of a OMFG I LIKE XXXX IDE BECAUSE ITS THE ONLY ONE THAT CAN POSSIBLY WORK FOR YOU sort of an argument.
And now I'll answer your actual question. If I were you, I'd fire up some of the tutorials on Oracle's website. Many of them are written for Netbeans and you'll kill 2 birds with 1 stone. Learn Java features better and Netbeans at the same time.
Hang on, so you're complaining that an article entitled "Testing java 8 in 3 easy steps" is about *Testing* java 8 and not about how to use Java 8? Top quality bikeshedding.
OK, I see that the title could be misleading. However, I'm curious about the responses here - exactly how many of you *don't* run a CI server for your work or even personal projects? I think it took me about..... 2 minutes to add Java 8 to my Jenkins/Hudson servers which I naively assume most Java devs use these days &lt;yeah I know - no real science to back that claim up&gt;.
Good points all around. All I can do is make up a wild ass theory that it has to do with age. Java may be the most used, but it probably is more used amongst older folks than younger. And people tend to be more socially active when younger. Also, young and old people have different hangouts. Java communities exist (theserverside.com), but they may not be where you go to hang out. 
Trying to figure out what a JAR does when you don't have the source.
Wouldn't it be easier to just google the file name, "github", and look at the source there?
Only if the JAR is open source and hosted on GitHub.
That would be a prerequisite for the probable legitimate use cases.
Isn't [jOOQ](http://www.jooq.org/) basically LINQ for Java?
So true. I can type &gt;100 WPM on a consistent basis if I never have to think about what I write.
I've experienced joy when coding Java - * In 1998, when I realized I could write graphical programs that ran on both the Unix machines at school and my PC at home. Java was *so* much easier to develop in than C++. And it had standard libraries. And it had a standard graphics and GUI library. * In 2005, when I moved a project from JSF1/EJB2 to Spring and Hibernate. JSF and EJB were about filling in boilerplate to arcane interfaces, trying to figure out what options to set where in Weblogic/Websphere/JBoss/etc., were difficult to test (used Cactus - which made a call from your local JUnit test case to the server, which made the real call you wanted and returned it....) With Spring it felt like I was actually *coding* again, it was so much easier to test, and you could usually just drop your WAR in Tomcat to get it to run. * Since then most of my 'joy' moments have been in other languages - Ruby (using Ruby on Rails - web development was just so much easier), Node.js (web services are so easy), modern JavaScript MVC frameworks (used to hate JavaScript so much, now it's... passable, but you can make so many awesome things work now in the browser.)
I would strongly urge you to look at Netbeans as an alternative to Eclipse. Or hell, IntelliJ IDEA Community Edition.
IME, the most common (only?) use case for decompilers is trying to find (and possibly fix) the bug in some 3rd-party component that you're stuck with. That seems pretty legitimate to me.
I've been in many situations where there has been a case like: "Hey, does anyone know where the source is for this old jar file that's deployed in production is?" "Nope, it looks like it was a hack and nobody ever put the source in SVN." "Better decompile it then"
How about verifying that a particular binary actually came from a given open source project? GPL violations, etc.
And I've seen deployment strategies that involve decompiling Prod, changing the code, then recompiling and 'checking the binary in' /shudder
"This is counter to my experience. Often times Java code is down right impenetrable because you need so much overhead to do simple things. " Then you're using the wrong framework. Plenty to chose from. Try to separate Language from Framework. "Yet, Java creates a ton of complexity by having arbitrary restriction on what you can do with code and data. " yada yada yada Ever heard of Java 8? "It's not about typing less code. It's about having declarative code that's expressing the intent of the program. Good code separates what is being done from how it's being done. Java is terrible at this." Ever heard of JavaFX? That's exactly how it's implemented. You probably need to update your Java skills and see what's been going on lately. 
Thank you for the explanation!
Like LINQ it doesn't have much reason for being. We already have a structured query language conveniently called SQL for that purpose. 
It's easy to lose sight of that. My first four jobs all already had a build process going with at least some tests and CI. Then I started my current project, where a recently-introduced ant-based release script is the only automation present. All other building is just done in Eclipse, and until that ant script was built a few months ago, releases were manually assembled into wars. It had simply never occurred to me that this state of affairs could exist in a modern professional environment.
One vendor I worked with had a particular security vulnerability that was a serious concern to me, but wouldn't acknowledge it. [It was the server trusting the client, but in a weird way] One day I called a meeting and said 'so, hypothetically, if someone decompiled the Java client and modified line XXX in file YYY to say ZZZZZZ, would your software let them in on the server?'... awkward silence... The software is now fixed. 
That should rightly be Oracle hate, not Java hate.
I just had a chance to look at the markup emitted from the companies you mentioned. All of them have quite a bit of Javascript in the markup, Bad idea IMHO. Zanox, Lufthansa being the least offensive. Zanox is actually not bad at all; so if that is a result of straight JSF2.1/2.2 then I am impressed. As an aside Lufthansa is using Dojo (not my favorite) but to their credit are not using Dojo's Dijits, which I have grown to dislike quite a bit. 
As has been said here: Scala isn't really new either, and Haskell certainly isn't new.
yeah unfortunately I've seen that kind of thing before too
Numerous languages have shown Java up huh? Maybe, but if you look at the top languages they are all Java like: C, C++, Objective-C and C#. Then there's PHP and Visual Basic. The first group is pretty much older and lower level than Java, with the exception of C# which started live as a nearly identical Java clone. The second group is widely considered to be the n00bs languages of choice and they have more odities and inconsistencies than pretty much every other language out there. Together these languages have some 70% of the total programming market? Java's usage is declining for sure, but I don't see any of those (yet unidentified) fancy new languages gain any serious momentum.
But there are a lot of new or updated libraries comming out every day, and besides Python is as old as Java and there isn't much left to talk about it either.
the serverside is pretty much dead these days... There are still articles posted, but the days of 100+ comments are long gone. It's already something if a post gets any comment at all these days!
&gt;Kids like Clojure, JRuby, ... But why doesn't this show up in any of the rankings? Be it SO, indeed.com, Tiobe, whatever your poison is to measure language popularity, don't really show any of these getting much more popular. 
LINQ queries aren't actually compiled until you call a method that requires it to execute the query, so it's entirely possible to do something like this db.Accounts .Where(a =&gt; a.Users.Count() &gt;= 100) .Select(a =&gt; a); or from a in db.Accounts where a.Users.Count() &gt;= 100 select a; You can use any variables that are in-scope in a LINQ query, how those get translated to SQL calls all depends on the ORM you are using (LINQ just generates a series of Expression objects, it's up to the LINQ provider you are using to translate those into something useful).
Funny, I felt the joy when moving from Spring 2.5 to JSF 2/EJB 3. I have to give it to you, JSF 1.0 and EJB 2 were... painful 
&gt; I'd be interested in seeing a list of legitimate and probable use cases for decompilers in 2013. Three recent examples from work: * A commercial application server bundles several open-source components, without telling exactly which version they use. Decompiling some of those classes and comparing to the open-source code may be the only way to know the version, and to tell if you are vulnerable to a security flaw found in old versions of that open-source component. * A commercial middleware vendor ships many fixes and your admins are a bit unclear about which fix is currently applied on your server. The version is stored in a class. Decompiling that class is a sure way to know the fix currently installed. * Due to a complicated build process, you are unsure if some changes made it to a particular class. Decompiling the class is a quick way to know.
Minecraft mods.
Wouldn't ``javap`` answer these questions?
For many performance sensitive algorithms declarative coding sucks! Try writing quicksory nicely and super declarative in Prolog: it will perform horribly! Same thing for Scala. Any DBA knows that purely declarative is nothing but a pipe dream. That's why 10 different SQL queries that each exactly say *what* they want for the same result instead of *how*, but each say this in a different way will differ radically in performance. One may return the data in a millisecond, the other in an hour, and yet another may crash the system because the planner came up with a plan that first tries to join with that 500GB table. 
&gt;For many performance sensitive algorithms declarative coding sucks! When you actually run across a case where you need the performance there's nothing stopping you from using an imperative algorithm. However, immutable data structures have a very reasonable overhead of O(log32n) vs O(1) and are perfectly applicable in most scenarios. I've been writing applications in Clojure for about 5 years now and I have yet to see a case where performance was an issue. You'll also note that Haskell has great performance and runs circles around most imperative languages including Java. &gt;Any DBA knows that purely declarative is nothing but a pipe dream. Nobody saying things have to be purely declarative, but it is better to default to declarative. This makes code much easier to understand and reuse. &gt;One may return the data in a millisecond, the other in an hour, and yet another may crash the system because the planner came up with a plan that first tries to join with that 500GB table. Again, write your code for correctness first then optimize your critical sections **when** you need to. You're creating a false dichotomy by saying you can either have declarative code or performant code. This isn't actually true. *edit: [here's a real world example of what I'm talking about](http://blog.getprismatic.com/blog/2013/7/10/introducing-hiphip-array-fast-and-flexible-numerical-computation-in-clojure)
I don't. Prefer persism (http://persism.sourceforge.net/) and normal SQL 
Age vs youth again :-)
I find it very easy to read. It has a very small and consistent syntax and you can actually see relations between chunks of code visually. On top of that the editors for Clojure are actually structurally aware. You work with expressions instead of simply shuffling lines of code around. Just because you personally aren't familiar with it, doesn't make it inherently difficult. Your argument is akin to somebody who only knows english saying that french is hard to read. A french speaking person would have quite the opposite view. &gt;YES Have a look at JavaFX So, do enlighten me how does JavaFX address any of the issues I outlined?
I thought that capitalizing "Good Enough" was sufficient, but it's not, is it? I really do have to use the /s , everywhere.
I like https://code.google.com/p/reflections/ for scanning/searching on classpaths
Sql2o: [http://www.sql2o.org/](http://www.sql2o.org/) Nice library to convert result set to POJO, with transaction support. It is not an ORM, it doesn't generate SQL statements, but I like writing SQL statements myself. I found this library in /r/java.
&gt; Prefer persism You're the author of persism, right? How does persism compare to these larger ones, with a similar focus (JDBC pain easing and simple record -&gt; POJO mapping): - [Spring Data](http://www.springsource.org/spring-data) - [MyBatis](http://www.mybatis.org) (which also has some simple SQL -&gt; POJO mapping features. Or to these smaller ones: - [Apache DbUtils](http://commons.apache.org/proper/commons-dbutils) - [Apache Torque](http://db.apache.org/torque) - [Apache Empire-DB](http://empire-db.apache.org) - [Ujorm](http://ujorm.org) - [sql2o](http://www.sql2o.org) - [DbOomQuery](http://jodd.org/doc/db/dboomquery.html) &gt; and normal SQL What does that mean in a Java context, short of using JDBC? :-)
You're welcome! As a matter of fact, thinking about these differences between [jOOQ](http://www.jooq.org) and [MyBatis](http://www.mybatis.org), I guess it is worth evaluating if SQL templating could be easily integrated in jOOQ: https://github.com/jOOQ/jOOQ/issues/2626 While MyBatis has its own XML-based templating and mapping language, jOOQ would probably provide an SPI that allows for arbitrary implementations, including [Apache Velocity](http://velocity.apache.org), [Eclipse Xtend](http://www.eclipse.org/xtend) or XSLT. This would allow for much more flexibility at the client side. Do you have any experience with MyBatis? What would you consider its main strengths?
jOOX: https://code.google.com/p/joox It's a jQuery port to Java that operates on the w3c DOM API. There are other jQuery ports, which are interesting, too: - http://jsoup.org - http://jodd.org/doc/jerry/index.html - http://code.google.com/p/gwtquery But unlike jOOX, they're all focusing on HTML instead of valid XML. Since I'm the author, my experience was obviously good :-) Apart from that, http://jodd.org has a lot of nice little, lesser-known libraries that are worth checking out.
How does it compare to [Apache DbUtils](http://commons.apache.org/proper/commons-dbutils)?
Oh, and one of the most beautiful but least known APIs I have seen so far (I'm a fan of DSLs) is jRTF: https://code.google.com/p/jrtf A Java library for manipulating RTF files. I haven't used it productively, though.
For anyone put off by the unhelpful (and spammy looking) thread title, here's most of the text from the page linked to: &gt; hawtio is a lightweight and modular HTML5 web console with lots of plugins for managing your Java stuff &gt; hawtio has lots of plugins such as: a git-based Dashboard and Wiki, logs, health, JMX, OSGi, Apache ActiveMQ, Apache Camel, Apache OpenEJB, Apache Tomcat, Jetty, JBoss and Fuse Fabric &gt; &gt; You can dynamically extend hawtio with your own plugins or automatically discover plugins inside the JVM. &gt; &gt; The only server side dependency (other than the static HTML/CSS/JS/images) is the excellent Jolokia library which has small footprint (around 300Kb) and is available as a JVM agent, or comes embedded as a servlet inside the hawtio-default.war or can be deployed as an OSGi bundle. Which actually sounds (and looks) pretty nice - worth taking a quick look at if nothing else.
That's an awesome method name :-) Reminds me of Spring. I tend to [go mad about Spring on my blog...](http://blog.jooq.org/2012/10/08/j2eebasedpreauthenticatedwebauthenticationdetailssource-wat) I'll give a couple of reddit gold to anyone who can tell me the precise purpose and responsibility of J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource
I've found the visitor pattern to be a code smell in many cases. It has its place and purpose, but in 70% of the encounters, it was just plain over-engineering. And very hard to understand...
Ah, good point. I don't think that DbUtils supports transactions other than JDBC's normal transaction mechanisms. At least, I haven't found any relevant classes in the Javadocs: http://commons.apache.org/proper/commons-dbutils/apidocs/index.html However, I think that staying out of transaction business might be a good thing. Modelling transactions in a small library is very hard. Chances that sql2o got it wrong/incomplete or at most 50% "correct" are high.
p.s. another public site using JSF: https://zeef.com See also http://reddit.com/r/java/comments/1i1c0e/jsf_in_the_trenches_about_developing_zeef
I think in some use cases having transaction support is required. For example, when I want to transfer an amount of money between 2 accounts, I execute 2 SQL statements (1 for decreasing balance and 1 for increasing balance) in a transaction so that if one of them fail then I can do a rollback.
Following up on my question here: http://www.reddit.com/r/java/comments/1hxgrc/jooqs_reason_for_being_compared_to_jpa_linq_jdbc/cazz53y ... I'm now pretty sure that you're the author of persism :-) - sproketboy (author) vs. sproket999 (reddit user): http://persism.sourceforge.net/about.php - Dan Howard: http://mikehadlow.blogspot.ca/2012/06/when-should-i-use-orm.html - sproketboy vs. Dan Howard: http://sourceforge.net/users/sproketboy Why not disclose your authorship? I can only encourage you to stand up for your ideas and intentions when creating a new library. It's more rewarding, in my opinion.
We have used JD Decompiler with somewhat ok results.
It's not always the case and I guess I should not have generalized because I have run into older developers who use scripting languages to do server side. From my experiences, there tend to be more younger developers who do that than older and I am not sure if it is the school curriculum or just using the latest hype.
it would be wise to specify which VCS you're using. git for example has local commits so in order to do this (beyond personal use) you'll have to enforce policy on each participant's environment, cannot be done server-side.
no reason you can't still do that, so many people try to pick up java as a first language and that hits them like a bus though.
not really, but I do make a lot of typos :( ide autocompletes are my friend.
These are mine, all up on github: https://github.com/JeffreyRodriguez JSOG - JavaScript Object Graph. Makes working with raw JSON a breeze. "Trust the developer" XML Wrappers. Same thing, but for XML. Web Tools. Uses URLConnection to GET and POST: byte[], String, JSOG, and XML.
There is no standard transformation of JSON into XML. You could try something like StaXON to attempt a translation to enable you to use XML tooling. Why not just start with XML if you're going to use XML tools?
The SCJP doesn't exist anymore (the S stood for Sun). You want to get the Java SE 7 OCA (Oracle Certified Associate) &amp; OCP (Oracle Certified Professional) certs. They are pretty different than the previous exams so I suggest ignoring all the old question dumps you might find. The good news is since you have some previous experience programming you'll be able to get the OCA pretty quickly. Good places to start are the FAQ and forums at http://www.javaranch.com/
Maybe, but not as easily, certainly not in the first case where comparing the source code was the surest and quickest way (the method signatures had not changed in the classes we compared, comparing the content was needed). Overall, jd-gui is so fast to start and easy to use that alternatives just feel more cumbersome.
Thanks for including the similar projects!
I used the Swagger plugin for JAX-RS for this: https://www.commafeed.com/api/
Great ! I'll try it as soon as I can. Thank, and good work at CommaFeed.
[Project Lombok, anyone?](http://projectlombok.org/index.html)
We have been using MyBatis for severall years now. We love the fact that we can use plain SQL and it maps directly to our POJOS. Sometimes you need more than basic CRUD support. For some views we need complex SQL queries. I have no idea how to write them with JPA, but I know how to do it in SQL. So I start with the SELECT statement and then work my way up to the application layer. ORM shields you from the database. MyBatis forces you to work with database. MyBatis is also dead simpel to get started. We use a DAO pattern with MyBatis. MyBatis is a very small dependency. I am not sure, but I think it is a single jar. Doesn't come with a lot of bloat. I definitely want to look into jOOQ. Are you one of the developers? 
http://www.joeffice.com/ For those wondering if it's in use yet.
I"m taking a shot :-P [JLS §14.18. The throw Statement](http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.18) * If evaluation of the Expression completes normally, producing a null value, then an instance V' of class NullPointerException is created and thrown instead of null. The throw statement then completes abruptly, the reason being a throw with value V'. Edit: oh :-/ I didn't see it came from SOF
&gt; We love the fact that we can use plain SQL and it maps directly to our POJOS. Sometimes you need more than basic CRUD support. For some views we need complex SQL queries. I have no idea how to write them with JPA, but I know how to do it in SQL. Yes, I feel there is a big market, helping all those "neglected" SQL lovers. The fact that a lightweight tool like MyBatis can have such a market share is impressive. It really doesn't do that much, actually. &gt; I definitely want to look into jOOQ. Are you one of the developers? Yes, I am the maintainer. I feel that there is a lot of potential for a tighter and more natural Java/SQL integration. Both languages are very popular and mature. Yet they're integrated through a low-level API like JDBC. jOOQ will enhance preceding paradigms and make SQL part of the Java language - currently as an internal domain-specific language. Eventually, there might be room for an even better integration with the Java compiler.
I am going to spend some time with jOOQ on the weekend. I let you know how I did. keep the spirit!
it looks good :)
Great. Looking forward to that. Feel free to post to the [jOOQ User Group](https://groups.google.com/forum/#!forum/jooq-user) for feedback.
You aren't throwing an NPE, you are creating one when you pass null to throw.
IMO Visual Studio is ugly, clunky and complicated compared to Eclipse.
[OpenImaj](http://www.openimaj.org/) Never tried it myself but I though I would mention since it might help
While the reason throwing null works is simple to explain (see other comments) it does bring up a good point about ensuring your code in catch and finally blocks does not contain errors. Every great once in awhile I get burned by trying to create a nifty error message using the parameters of the method and forgetting that they could be null.
I use IntelliJ over Eclipse
I'm not sure why this is surprising...this seems like expected behavior to me. What am I missing? Or is it not surprising?
Excellent, thanks. You and others have got me thinking about JSF a bit more.
I looked into Clojure and it looks great. It also led me to actually look up Scala. Also lead me to Shen. They all look amazing and I might start Scala in a few months. Thanks! Edit: Or maybe shen. I think I'll wait another year or two on clojure to see where it goes. Or I'll just start clojure, idk. But Scala seems like a great point between java and Haskel, and seems to be picking up speed in the industry. 
For what it's worth, I found Clojure to be the best balance between simplicity and maturity. I've been using it professionally for a couple of years now and I'm rather happy with it. I personally found Scala to be a fairly complex language. It looks similar to Java initially, but the similarity is very superficial and idiomatic Scala code is quite different in style. However, the tooling for it is fairly good. You have sbt for building and packaging, Scala IDE for development, and Twitter published an [Effective Scala](http://twitter.github.io/effectivescala/) guide that provides a good reference. As you mentioned it definitely is picking up in the industry. Shen isn't really used much in production as far as I know, so tooling and libraries are very much lacking. Clojure is used in production by a number of companies today and there are a lot of libraries and tools available for it. While it's not as popular as Scala in the industry it is used widely enough that any wrinkles have been ironed out and libraries for most common tasks readily available. I find the [Eclipse plugin](https://code.google.com/p/counterclockwise/) to be rather excellent with good REPL integration, structural editing, and code completion.
Some time ago I collected various java code (1.4.2) and utility that happened to be useful to me: https://github.com/dexgeh/JavaHelpers/tree/master/helpers Also, my string templating library: https://github.com/dexgeh/tmplj
I'm surprised someone tried throwing null and then fell down the rabbit hole.
Two threads. Have the timer thread call an interrupt() on the input thread after the timer runs out. You can add logic to either thread to reset the timer upon input
I believe that InputStream reads aren't interruptible, so that wouldn't work. http://stackoverflow.com/questions/804951/is-it-possible-to-read-from-a-inputstream-with-a-timeout
FWIW, everyone in the core file system area recognizes this is a mess. FileContext was meant to straighten up the API layer so that we can later on straighten up the ABI layer. Eventually, HCFS (http://wiki.apache.org/hadoop/HCFS) will likely get us there. In the mean time, protos are getting changed to be protobuf rather than raw bytes and there is always WebHDFS (which we use to pull multi-GB files from non-Hadoop sources on a regular basis). Edit: add info on FileContext.
This is interesting I guess because I would have never thought of doing it, but is there truly any point in throwing null? I cannot think of a time where you would need to, or rather should throw null. It seems like it would be bad practice to do so.
The last person I knew who used JBuilder was a guy who moved from COBOL to java in 97 and was still on JBuilder as of 2007. He was still using a treo 680 last time I saw in (2011)
the post-receive is not an option, with that you prevent the *push* not the commit.
Whoa now, I miss my treo...
Thanks, but when I tried that code it says it doesn't recognize ExecutorService. I'm doing import java.util.* at the top. 
Real men use annotations. &lt;_&lt;
That's because [ExecutorService](http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ExecutorService.html) is in java.util.concurrent. Here are links to the javadoc for both [ExecutorService](http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ExecutorService.html) and [Future](http://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/Future.html).
Thanks for that. Fail over would be a major concern in the app I am considering, though this might be mitigated through better design.
First, I would suggest finding a project other than something "mission-critical" for your first real Groovy application. That being said, I would describe Groovy as "robust" - but that word probably means something different to me than it does to you. With a remotely sane configuration, Tomcat will have no problems serving 1500 connections per instance.