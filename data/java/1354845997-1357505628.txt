Personally, I prefer Netbeans (as my first choice) unless you want to use any of the infinite plugins (such as the Android SDK) in which case I will use Eclipse. I think it's better to start with an IDE because that way you are learning Java as a language, and not how to compile it etc. Although Sublime is a very nice text editor, I personally use it for everything (notes, web dev, java snippets). And yes, I know my opinions are the same as the other 3 posts but it's also my opinion, which seems to be the general consensus so far!
Thank for the link! The other chapters seem very interesting too.
I'm from the internet, and my review is the same, but for the two IDEs that I'm comfortable with!
You could use the game programming library, Slick2d. It will allow you to get subimages of an image, re-scale them, and then I am guessing there will be a way to write them into a file! http://slick.javaunlimited.net
Java is a language that is designed to be used with an IDE. I personally use Intellij for most my stuff and have used Netbeans in the past a lot. In general I like IntelliJ a lot but I am annoyed it doesn't have an integrated profiler like Netbeans. Both of them make development faster and things like checking test coverage and refactoring really easy. They also make it a lot easier to discover functionality in libraries you are using with code completion. In any Java job you get you will be using an IDE so you may as well get familiar with how they work.
I didn't think that was going to work, on the surface. However actually working it through for a few iterations it does appear to do the right thing. I'd actually argue that you've done it wrong though. I'd argue that the correct answer should have been to [use Guava](http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Collections2.html#permutations(java.util.Collection)) (Or some other library that already does what you want) and not re-invent the solution yourself.
IntelliJ user for more than 10 years here, and have used my own dark theme for as long. But never have I seen the side windows utilise a theme. Wipes away tears of joy...
Your solution looks fine., good you figured it out even if after the fact. Interviews are a slightly different ball game than everyday work, you have to fail a few to get the hang of them. And dont get discouraged - no sense in fretting about not getting accepted somewhere you're not ready for or don't fit.
The goal is to have an area appear once the game is over without exiting the full screen. In the area the user can then enter his/her name.
Almost. The right thing to say would be "I would use the per-existing solution found in X, but here is how I could implement it from scratch"
Excuse me, but why are you considering the for-loops solution wrong, exactly? Aside from code elegance, of course. Did the interviewer told you explicitly that was not the solution she was looking for?
The solution wasn't important to the interview. They wanted to see your thought process &amp; whether you could get on the right path. 
This is, in all probability, exactly right. Also, it doesn't mean the interview is over. Follow up with an email of your solution and how you reached that solution.
[Recursion/Permutations example from Princeton](http://introcs.cs.princeton.edu/java/23recursion/Permutations.java.html)
There's actually both a theme (I previously used GTK+) and an editor color scheme which both have to be selected.
Would it not be O(n+n!) equalling just O(n!)? I may be wrong, I hated big o and big theta. 
O(n!) was what I got too, specifically O(2n!) even though c=2 is negligible. I did see one other prediction saying O(n*n!) which would not be negligible. I'm only curious because my discrete final is weds and growth of functions is on it. Do you know the subject well enough to weigh in? 
Just to reflect on my personal experience; while I am not a coder by trade, my profession requires a solid understanding of code and quite a bit of scripting. I recently interviewed for a job and hiring manager wanted to get an opinion of me from their developers. So the developers had me write a sorting algo in Ruby... with pen and paper. I didn't try to bullshit them and just told them that I'd walk through the logic I would use to arrive at an algo prior to coding it. I then wrote the algo in Ruby-centric pseudo-code. The algo was ugly and basically took a brute force approach. As soon as I got back to my hotel room after the interview, I whipped out my laptop and wrote a much more elegant solution to the problem. I followed this up by putting everything in a .ppt w/ logic flow charts. I zipped that up along with the .rb file and sent it straight to HR and asked that they forward it on to the dev's who gave me the challenge. I got the job. 
Huh? O(n^4 ) is *much* better than O(n!). Also, any solution to this is at best O(n!), including for loops, since there are n! outputs. One of the main reasons not to use nested for loops is because it hardcodes n: it's the number of nested loops in the code. 
http://www.wolframalpha.com/input/?i=n%5E4+and+n%21+on+%5B0%2C+10%29 ([plot](http://i.imgur.com/LR4wZ.png)) n^4 is obviously better. 
Good description of the features of objects (behavior, structure, state, and uniqueness), but bad explanation of why/how of objects. The article makes the same mistakes that many articles on the basics of OOP make, which is equating objects to real world things (cars, rectangles, dogs), which makes for bad OOP designs. I prefer this [explanation of OOP](http://www.scribd.com/doc/100842412/197/Heuristics-and-Coffee) - See Chapter 11.
 if( board.getgameover() ) { if(Highscore.highScr==true) { g.setColor(Color.BLUE); g.fillRect(150,200,500,150); g.setColor(Color.BLACK); g.drawRect(150,200,500,150); g.drawString("What's your awesome name?",270,240); g.setColor(Color.CYAN); g.fillRect(270,270,260,35); g.setColor(Color.BLACK); g.drawRect(270,270,260,35); //g.drawString(""+Highscore.name,280,300); }else{ g.setColor(Color.BLUE); g.fillRect(150,200,500,60); g.setColor(Color.BLACK); g.drawRect(150,200,500,60); g.drawString("GAME OVER - PRESS ESC TO EXIT FULLSCREEN",160,240); //TODO } } } so when the game ends and you get a highscore the first box should appear and in the smaller box you should input your name and it should get saved as some variable. EDIT: the window is in full screen
I would have liked to see a answer (nested for loops) rather than nothing. Then we could talk about optimizations. "We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil" - Donald Knuth
\*whooosh\*
NetBeans incidentally had the same issue on Linux (I last tried it on Ubuntu 11.10). There was a trick of some sorts, where you needed to provide some command line argument and then rendering greatly improved.
I read "all possible permutations" as. MARY ARYM RYMA YMAR etc... In addition to 3, 2, 1 letter combinations. Am I the only one?
That was a really interesting read, thanks!
Except the n^4 solution only works for n&lt;=4, [for which n! is at least as efficient for all possible n](http://www.wolframalpha.com/input/?i=n%5E4+and+n%21+on+%5B0%2C+4%29). The prototypical solution from which the n^4 solution is derived would actually be n^n, as it would require n nested loops to handle arbitrary input of length n, which yields [a slightly different picture](http://www.wolframalpha.com/input/?i=n%5En+and+n%21+on+%5B0%2C+10%29).
No.. that exactly what I thought too.. what is he actually trying to do?
My bad, all possible four letter permutations. There are 24 in this case
Unless you're interviewing for a job at a company that doesn't allow phones and internet, it might be better than not answering a question because you're blanking. Especially if it's the kind of thing that you're expected to spend at least several minutes on. I once took a paper quiz as part of a job interview, and I wish I'd thought of pulling out my phone to help me answer some of the questions, but I was too nervous and didn't think of it. I'd just gotten a smartphone so I wasn't used to using it to look up anything and everything like I do nowadays.
Not only that, but you might also have combinations with multiple instances of the same letter, e.g. "MMMM", "MMMA", "MMAA", etc. As it is, I think it is supposed to reference the Permutation operation in discrete math, i.e. choose a set of n = 4 members from another set in some fashion, where order matters.
Unfortunately, the right answer is usually the wrong answer in technical interviews. Which is silly, since I've only ever written code like that in technical interviews.
Exactly. Also always follow up if you want the job and are given a no. A while ago I applied for a position I wanted and was declined. I called the manager back to discuss it and found out that only one person was really against me and in the end it was because they severely misunderstood something I said. I corrected it and got the job.
I didn't get your point.
I think he was trying to say there is a lot of boilerplate code in java, while also trying to cleverly point out that there is a typo in your post title. He failed.
As a guy who does many intervies, here's what I think: Write a letter to the guys who interviewed you. Interviews are highly artificial situations. The ability to think of something in an interview doesn't really indicate whether you would be good to have around or not. However, the fact that you thought about it &amp; took the trouble to write might actually indicate that you're a valuable tech worker.
What type of PHP have you been developing? How familiar are you with OOP? Have you coded Java in the past? It's hard to tell where your current proficiency in Java lies. My guess is that it is pretty low, so I would start with some basic Java books and then move on to working with some JAXB examples towards building a prototype of what you need to be developing.
Failed... yet you understood... Interesting.
cleverly... 
If it helps I thought that was funny. To explain thek2kid's comment, coming from a weakly typed language like php, java will probably seem very verbose and redundant. 5 seconds of googling on the subject gives some opinions and examples: http://techblog.bozho.net/?p=742 https://schneide.wordpress.com/2010/02/08/verbosity-is-not-javas-fault/
As someone trying to wrap my head around Java, could you show me the output in order using your Mary Example? Thanks. 
So the thing you're supposed to write in Java is a web service? And mentioning JAXB suggests it is XML/Soap based? If these assumptions are right you may want to look into [Axis2](http://axis.apache.org/axis2/java/core/docs/quickstartguide.html), a framework that helps you a lot with converting a WSDL specification into a working application you can easily drop into Tomcat or other Java application servers. 
Juno is Eclipse's Vista.
You have the word "should" in there twice.
You should definitely learn more about OOP if your level is 'understanding' it. Java is so OO it hurts.
That's a good one :) I hope Eclipse 4.3 will be like Windows 7 then ;)
When writing Java, you are going to want to use an IDE. I can't know if you've been using an IDE when writing PHP, but if you haven't, you're going to need to learn. Writing Java beyond one file or two without an IDE is painful.
If the instructions were to "write an algorithm to accomplish blah", using a library is _not_ the correct answer. Of course we don't know how OP was asked, but yeah.
And I disagree with you. If we "have a recursion for each letter n" that's just n!. What we actually have is: T(n) = n + n + nT(n-1) because for each iteration we duplicate the list (n time), and then for each letter in the list, we remove it (n time) do the same operation on a list of size n-1 (T(n-1)). This equation is satisfied by T(n) = O(n!), if I'm not mistaken.
AFAIK, there is no print_r equivalent.
&gt; What **should** a seasoned PHP programmer **should** know while writing Java code?
&gt; Does it work the same as a chat(socket) does? It can. &gt; Do you have a good tutorial or exemple? http://docs.oracle.com/javase/tutorial/networking/sockets/
&gt; Java is so OO it hurts. Well, relative to PHP perhaps, but it's not as OO as, say, Scala or JavaScript.
Well it's close! And I think I meant class-based, not OO.
when comparing strings, never use ==, instead use .equals()
First - you are out of your depth if you are expected to write some Java middleware with no experience. Beginning Java developers start by learning Java SE. Java middleware is Java EE which is Java SE + an application server and its libraries. Second - How does the php tier talk to the Java middleware? If it is a web service then you need to figure out if it is REST (JAX-RS) or SOAP (JAX-WS) based.
Thank you! Do you have any other good exemple? 
FOR the love of all that's holy. We do not need more SOAP services in the world. Try something like Jersey for RESTful services.
A web based multiplayer game?
Please send this solution to the interviewer and explain the algorithm to him. Sometimes they may disregard your wrong interview answer when they see this better solution. They might just put it down to nervousness. It also goes to show that you are tenacious in finding a solution (better or not) to the problem at hand. 
Or in a nutshell, == can only be used to compare primitive types such as int, float, double, boolean, byte, short, long and char. String is NOT a primitive type but a class, so that is why you have to use .equals() 
First thing you'll need is this: http://www.arcsynthesis.org/gltut/
This is an easy solution to see, but in no way is it general. This is the solution the encouraged me to abandon. One extra letter? Another nested for-loop. When I said wrong path I didn't mean it didn't work, but it's ugly
Well the first one will make i=0 for each iteration, so they are not equivalent code. In general, there isn't much difference between for-each &amp; for. For-each will create an Iterator object behind the scenes, so there's a slight overhead for that. Edit: Primitive arrays won't make an Iterator object.
ImageJ (http://rsbweb.nih.gov/ij/) is a good library. The people on SO agree too: http://stackoverflow.com/questions/603283/what-is-the-best-java-image-processing-library-approach
Yeah but if I can't see how the guy wrote his code this isn't going to help me :p
I think there is more garbage collection if your use a foreach loop. Source: optimizing games. Edit: On Android, with arraylists. I make no claim to anything else. 
Congratulations on finally being allowed to code in a halfway-sane language.
Actually I don't think it does for primitive arrays. My bad.
If you're building a browser game, you're unlikely to use plain socket connections in such a way you seem to envision.
It's rarely a good idea to define a public method that is recursive. The reason is that you want your recursions to be as tight as possible, and letting any ol' caller invoke it directly means you might have to do all sorts of validation. But this validation is only used on the initial call from the external caller–presumably, when the method calls itself it would never pass unexpected values. Also, as in this case, the recursive method takes an input parameter from the external caller that is not necessary, the empty substring. Why does the caller have to pass this in? The caller shouldn't need to know or care that this is a recursive method; that's an implementation detail. If tomorrow you were to reimplement this method as a loop, you'd either be forced to change the API to remove the unnecessary substring, breaking all existing callers, or leave it there where it serves no purpose. Also, a recursion should strive to create as few objects as possible, since they can be called a large number of times it keeps memory allocation and garbage collection to a minimum as objects go in and out of scope. In this case, instead of using an array list of strings to keep letter sequences, why not a StringBuilder? Same for `substring`. You have to do a bit more management of these character buffers but it's way less expensive than creating a bazillion objects. Finally, I wouldn't print directly to system out. A method should never assume the interface, it should just do its job and return the result. Let the caller figure out how to convey the info to the user. In the case that you wanted the user to see each entry as it's discovered, better to have the recursive method take an event listener and notify it for each new permutation discovered. In this case, if there are a large number of permutations, you can avoid storing them all up and possibly running out of memory while still leaving it to the caller to convey the output to the user using whatever method they want. So, better is: public interface PermutationFoundListener { void permutationFound(String permutation); } // ... // the externally callable method public void permute(String sequence, PermutationListener permutationListener) { if (permutationListener == null) { throw new IllegalArgumentException("permutation listener is null"); } if (seq == null || seq.length() == 0) { return; } return permuteInternal(new StringBuilder(sequence), new StringBuilder()); } // the internal recursive method private void permuteInternal(StringBuilder letters, StringBuilder substring, PermutationListener permutationListener) { if (letters.isEmpty()) { permutationListener.permutationFound(substring.toString()); return; } for (int i = 0; i &lt; letters.length(); i++) { // etc. } } 
If you don't mind, what was it that was misunderstood? 
On object types, == compares the references of each object (kind of like a pointer comparison).
For OpenGL at least,a ll the function calls and how to do everything are the same in Java. LWJGL has Java methods that call all the OpenGL methods, so reading that book will be the best option (for graphics at least). I think there is a copy of the examples that someone translated into Java, don't have a link though, sorry.
The debugger? When I was writing PHP, I used print_r() solely as a debugging tool to see what was going on in my data structures. So I'd say to OP: learn how to use the debugger in your IDE.
I can't explain it, my only evidence is catching GC and looking for the source when optimizing games on android 2.1-2.3. I haven't done it for a while, but the only way I could get the GC to stop invoking entirely was to get rid of it. Maybe there is something else going on, but I hate GC in my game loops. I won't deny it if I'm wrong, and I'll retest the theory in the future next time I optimize, but I used to use them almost exclusively, and I switched for for loops entirely because of it. Maybe my evidence was faulty.
iPhones don't run Java.
I appreciate your suggestions, the second parameter should indeed be eliminated. But in this case my only real goal was the algorithm 
Yeah that is what I would say. It was at the point where print_r for java would have been useful to figure out what was in an object without launching the debugger.
Both JNI and and exec are going to load native executable code into memory and run it. As far as parsing results that is kind of the unix way, processing streams of text and I would say that is perfectly fine to do. The issue comes down to not having raw sockets in java so you have to make a call to native code, which has some overhead but I think it is less than you imagine. [Process Builder](http://docs.oracle.com/javase/6/docs/api/java/lang/ProcessBuilder.html) will be better if you are re-using the same executable over and over. I have a project that does ocr on text using tesseractocr, which is native, and calling it via JNA or using the ProcessBuilder (both of which I have tried) there is no noticible difference in speed. *Edit: Another thing you could consider is writing a native "ping server" that you start up and communicate with it via TCP in Java to make ping requests. I think this would be harder to and am not recommending it as the solution do but it is an option when you need java to be able to communicate with platform specific code.
Scala I'd agree with, but Javascript as a pinnacle of OO? Surely you're joking. 
great! I have been using net beans for last 3-4 years, even when I have to write html.
Go through the online Java tutorials at oracle.com, and then read Effective Java and the JPL Java Coding Guidelines.
In addition to this, the actual syntax for a for loop is such that you can have any exit condition you want. If you want to loop over all values *until you find a 0* then you would do: for (int item : array) { if (item == 0) { break; } // do something } Or alternatively: for (int i = 0; i &lt; array.length &amp;&amp; array[i] != 0; ++i) { // do something } The second of those doesn't have loop-exiting logic in the body of the loop, and doesn't use the break (which some places frown upon). 
The iteration *per se* requires only updating a reference to the current item of the iteration, there is no object creation except the `Iterator` implicitly created by the for-each loop. Hower, its scope is well defined and most VMs don't need the GC to free its memory when the loop is over.
Readability is the single most important factor when developing software. Later, if there are performance problems, go and measure what to optimize, and sacrifize readability only where it worth. The biggest mistake one can make is to write the code on "optimized" or "faster" way, and doesn't care about the readability.
None, unless you need to know the index position within the body of the loop.
Misleading. == works perfectly on String, as it does on all objects; it just doesn't do what you normally want.
I'm not sure but I think you can at least do away with the OS hack by using [netstat](http://en.wikipedia.org/wiki/Netstat). It should be available on *nix, OSX and Win. You'll still need to exec a command though. Try "netstat -rn".
I agree on readability is something not to be overlooked at, performance comes later, make it works first. But given a readable variable for each loops it is actually ok, for(Pet eachPet: petList) { System.out.println(eachPet.getName()); } compare with for(int i = 0; i &lt; petList.length; i++) { System.out.println(petList[i].getName()); //if array list //System.out.println(petList.get(i).getName()); }
I'm pretty sure I was using a arraylist in every instance that I mentioned. I use them a lot. Edit: But thank you, this probably explains what I was seeing in a rational manner.
I see.. so you are saying that.. for-each might be a safer way to practice, depending on the needs and reason of using it?
Although it *does* encourage *Java*-style foot shooting...
The answer is: The performance difference is absolutely negligible. Do NOT optimize code until you're done writing ALL of it and you have NOTICED a performance problem! Write the code that makes the most sense. Optimization is the last thing you should do to your code. ["We should forget about small efficiencies, say about 97% of the time: Premature Optimization is the root of all evil."](http://c2.com/cgi/wiki?RulesOfOptimization)
If you are using a some what modern stack, which i assume you are since you mention jaxb, you should look up java annotations. I'm not sure if php has an equivalent. Now for jaxb, all you need to do is annotate a plain old java object aka pojo, pass its class to jaxb with your xml and you get back an object with the xml bound. Work similar to generate xml for an annotated object. You also need to look at servlets and which ever web service impl you're using. Also if you don't already understand what java bean are then read up on those as well. I've never developed php but those should get you a decent starting point with java web dev 
I'm sorry, I forgot to say that my group members and I found a solution. We used a new variable which got updated using a keyListener and then printed it on the screen. (yourHighscoreName+=e.getKeyChar();) Thanks for going through all this trouble though.
Java's strange obsession with classes is because Java is Class-Based-OOP. Don't try to argue that JS's decision to be Prototype-Based-OOP makes it "more" OOP. In my experience, it just makes JS harder to work with.
You might consider starting by making small steps, like *Print each line with the correct amount of numbers.* and forget about the spaces. You can add those later.
I agree with you to some extent but not completely. I may take some time to pickup Java but I think I can still manage to deliver. 
10 upvotes, I must never forget this. Thanks!
so .equalsIgnoreCase will return true for "HEllo" and "hello"?
I am really short of time, if it was not related to my appraisals, I would have definitely learnt the language first :-)
Thankfully I am used to Netbeans and have used eclipse while developing a fun app for Android
Try to break down the problem a bit. If you look at the sample output, you'll see that every line has an odd # of characters: (L0=1 char, L1 =3 char, L2=5 char...etc) Also, Every line has a decreasing amount of spaces before the first character: (L0=5 spaces, L1=4 spaces, L2=3 spaces...etc) //some pseudo code: void pyramid(int depth){ for(int i = 0; i&lt; depth;i++){ print space depth-i times print character 'i' i*2+1 times print "\n" } } Note that once depth is greater than 9, we start to run into problems since each number is actually 2 characters. Our math breaks down at this point.
What's the business requirement against you using PHP?
I'll be sure to look into it.
Of course won't do anything. Although the second for is an almost infinite run (goes up to MAXINT before stops), but the third for will never start to run. The maximum value of "lines" is 5 (outer for). The third for checks whether spaces less than or equal to lines, but starts with 7. Seven is not less than, neither equal to 5, so it won't run.
I also prefer NetBeans. It's clean, simple, obvious, and does what I want.
I am using Sublime Text for most of my coding now. [Sublime Text](http://www.sublimetext.com/) Sublime Text has a great set of defaults and I enjoy a lot of the features that it provides. Vim was my standard editor until I became fed up with tweaking my .vimrc file. I used to use Netbeans until I started hitting stability issues on larger projects. I would have to re-install Netbeans and it would work again for a little while but I would have to carry out this process again on a weekly basis. *It may have been specific to my project and not the fault of Netbeans* 
I tend to think about how lazy I am and how much I hate dealing with array indexes when I just want to iterate a collection. For-each allows you to think more conceptually about your solution. There's little practical performance difference anyways.
1. Yes, if you catch the exception, then the execution continues after the exception environment. 2.a. It warns the compiler that the method in question must be called within an exception environment, and also gives hint what kind of exception must be caught. 2.b. Nope, if the method uses stuff which throws an exception, the coder my decide that instead of using that stuff within an exception environment, the method will transparent and throws that exception further. 2.c. Even if you declare a method to throw an exception, that's just a possibility and not obligatory. So you might catch that exception, and don't throw it from there. If you didn't read it, I suggest you to do: http://docs.oracle.com/javase/tutorial/essential/exceptions/index.html 
Yes, it will return true.
Eclipse with the Vrapper plugin. Eclipse fits nicely in the Java ecosystem with all the tools and Vrapper gives me the most important editing features of Vim.
Some people say that netbeans is better for Java EE, i use eclipse for it, also i only used netbeans for Java SE, and to work with Play!, i use IntelliJ :)
Even though there is an Eclipse variant for Groovy/Grails development, I prefer Netbeans because it doesn't crash or stop allowing you to save your documents nearly as much. I can't remember the last time Netbeans crashed on me but everytime I use Eclipse, it's inevitable it seems. 
Any read and write benchmarks other than "compares favorably?"
Idea. Eclipse feels really clunky, Netbeans feels old (I know it's not - I just installed 7.3, but it feels like a DOS-windowed program...). Just personal opinions, do not get bent over it. I just installed MacVim - loving the power. It so reminds me of Qedit from Semware (as it used to be on Dos-only machines. Except where Qedit was simple and intuitive, MacVim is a little idiosyncratic). I also like the overview down the right hand side of Sublime Text 2. I think when the Idea editor gives me instant record/replay of macros like Vim and the navigating overview of Sublime, then we'll have reached some pinnacle.
Anyone who's "classy" is the programming equivalent of a Mennonite (Actually, less so. I respect Mennonites.) It's not classy. It's a waste of energy. Modern IDE offer so much more in terms of making you faster, cleaner and more readable. An IDE is a part of the ecosystem that makes one a great software developer. Now before you downvote me, let me explain. The point is that refactoring tools are essential to good software development. deterministic ways of refactoring your code to shape it minimizing knock on is incredibly valuable. Consider something so simple as realizing that your first choice for a variable or method name was ill-concieved. It doesn't describe it's purpose and it's short and only holds meaning for you and is very similar to other names. You realize this half way through it's use before you were 'Oh shit.. It should totally be.." and with refactoring tools, you just right click on it and change the name. Two seconds work and suddenly your API and maintainability jumps through the roof. This is what your IDE does for you. What was painful become painless. It offer suggestions/warnings on how to make your code better. It allows you to auto-format your code so it's consistent with the rest of the formatting style. It auto completes so aren't afraid to create longer variable/method names that would other wise cause you to use obfuscating acronyms. In short, programming is so much more than just the language you write in. It's the tools you use. It's the entire ecosystem that you work with.
http://stackoverflow.com//questions/10899828/vb-net-check-if-image-existing-in-another-image Shouldn't be too hard to translate vb to Java
Eclipse is probably the best IDE that I've ever used. It's a software academic's dream of an IDE. it's a pity that Java is more or less an academic language that more people spend developing tools for than actually applying it in any practical sense. (Server side development not withstanding). Netbeans is too heavy and I find it's performance even on moderate systems to be too cludgy. Visual Studio is only useful if you have Visual Assist but then it becomes a IDE with a split personality of dueling banjos XCode is a nightmare of a usability problem. Makes you re-think your opinion that it's the same Apple so renowned for it's usability. It wants to be cool because it uses the iTunes interface but it awkward at almost every turn. (and don't get me started about Objective C) MonoDevelop wants to be something and it's usable to get the job done. Keep in mind: I'm a video game developer that's primarly worked in C++ and C#. I've recently made the jump to Unity3D and I'm loving it. 
Well, I think of class as the definition of an object. Does that help?
Classes are units of text one writes to a file (i.e. the source code). It's like the blueprint, a recipe for creating stuff out of: objects. Objects are instances of the class, created at runtime out from the blueprint. Objects only come into existence once you run the program. Objects of the same class have the same structure (same methods, same fields, etc) but might have different contents. Analogy: you can build different houses from the same blueprints, but color them differently. Sidenote: &gt; I've looked EVERYWHERE. No you did not. This is a *very* basic question, and every beginner level tutorial about OO will cover it. Also you might want to check out /r/learnprogramming and /r/javahelp 
It's because I was having trouble understanding the concept. All of the tutorials I saw used a vague metaphor I couldn't understand.
Are there technical reasons not to do it in PHP?
Why don't you post on stackoverflow instead?
I would disagree that Java is an "academic" language with little practical use apart from some server side stuff. It's precisely the server side stuff that is java's niche. In corporate back office systems, Java is phenomenally popular. It's also the language for Android development.
Different strokes... I agree on Eclipse, it feels old and clunky. I didn't see many differences between Netbeans and Idea, except that I am way more familiar with Netbeans. I've been using it for so many years now, it's really hard to switch. Every once in a while I give other IDEs a chance, but so far I've always come back to Netbeans. I think in the end it doesn't matter what you use. What makes one IDE perfect for person A might not work at all for person B.
Upvotes for Qedit. I'd forgotten all about it. It used to be one of my go to DOS tools that moved system to system.
Try this one please, and please let me know whether it helped or not. The link is a bit down in r/java (The OO Theory - Basics and Introduction), but here you are the direct URL too: http://programming.freeblog.hu/archives/2012/12/06/The_Object-Oriented_Theory_-_Basics/ 
Here's a bit about inheritance from one of the best java tutorials: http://docs.oracle.com/javase/tutorial/java/concepts/inheritance.html
For your objects, you need to override .equals and .hashcode. The default Object.equals is just an identity `==` comparison. Listen to schteph.
[Template Matching](http://en.wikipedia.org/wiki/Template_matching) - has sample code. (found via another [answer](http://stackoverflow.com/a/454536/409025) to something similar to your question)
It's another cool way to store data. However, I don't get why anyone would call it scalable. Right in the notes it says: - ACID transactions (only one-global transaction at a time; MapDB does not have concurrent transactions). ... - Transactions can be disabled, this will speedup writes. However without transactions store gets corrupted easily without proper close. Etc. Other notes hint at corruption being possible still as well, so it's clear it's an embedded solution only and not really a data-center capable option that can guarantee data safety (which to be fair, is exactly what it claims). Given that, I could see using it for applications where a single user can affect storage at once (like on Android or desktop apps), but not for large datasets that require intersections/joins, nested transactions, or concurrency.
Some unicode chars have 'equivalent' codes they are sometimes assigned during decoding, and thus you have two or more characters converted to the same utf-16 character(java's internal representation.) Most likely the duplicate is the replacement character, #FFFD because the input is an unknown code. Read carefully the documentation on public String(byte[] bytes, Charset charset) Start catching all exceptions and use CharsetDecoder.
A class is a file with code you have made. The main method in java, for example, is a class. You can make other classes and then bring them into other classes as *objects*. For example, you have probably messed around with the Scanner object. Scanner is a class that behaves in such a way (aka the code in the class makes it do things) that allows you to accept user input in the console (among other things, but let us keep it simple for the moment). **Scanner sc = new Scanner(System.in);** This above code is creating an *instance* of the Scanner class and naming it **sc**. For all intensive purposes, sc is a **scanner object**. You would not of been able to bring in a Scanner object if the blueprint, or the **class**, had not been created previously (Scanner has already been made and is in a library, which is why you have to import it to use it.) So let's say I created a class called Player and we are making a RPG. The player class has code in it that will store things like health, mana, gold, score, level, etc. But I want to make it multiplayer. Instead of creating another class called PlayerTwo, why not just create *another instance* of my Player class, since there will not be a difference between Player one and Player two? ex: Player p1 = new Player(); Player p2 = new Player(); Now I have created **two** instances of the Player class. To show how important O-O programming is, let's set the health of each player to different values via the setHealth method I hypothetically created. p1.setHealth(50); p2.setHealth(39); What is going on here is that I am using a public method that I had created in the Player class that set's the player's health. Now, to display these health values in the console, I would use my getHealth() method that I hypothetically created. System.out.println(p1.getHealth()); //Will display 50 in the console. System.out.println(p2.getHealth()); //Will display 39 in the console. Edit: Fixed some grammar and a few other issues for clarity.
Well the game is a Boulder Dash and i'd like to be able to load levels from preexisting images such as the one here: http://www.boulder-dash.nl/down/maps/PeterLiepa/BoulderDash01.html
I use eclipse. IDEs make your time spent programming hella more efficient.
You don't want to compare the images themselves.. you want to store what type of image is in what slot and compare that instead. So, the map is 2d with x and y coords, use a 2d array mapCells[x][y], which holds an int or byte that corresponds to the type of image, so maybe dirt is 0, wall is 1 and boulder is 2. or you can also use enums instead...
I suppose the use of vim or emacs is more likely to be for either minor edits or drafts. Or maybe hobbists.
I think it should be noted that a lot of people on here seem to be confused about what an object is; take their advice with a grain of salt. It is common for Java programmers to refer to *everything* as an object, but that's only because of what I explain below. An object is *not* a synonym for *instance* which is what a lot of people seem to be telling you. I think maybe you're confused because of the nature of 'Object' in java. Object is what's called a 'superclass' and all other Classes in the language 'extend' it. Extension is the process whereby all of the methods and member fields of one class become those of another. So, by extending Object, every class in the Java language is able to use any of the methods available to the Object class. At the end of the day, Object is just a class in Java, but it is the parent of all other classes. It exists to specify certain important things: It ensures that any object can be printed to console via a toString() method, it has a finalize() method that is used by the garbage collector to manage memory, and it specifies a equals() method that allow objects to be compared to one-another. Essentially, Object is just a way that all classes in Java share a certain subset of methods in common so that the JVM can treat everything the same on some level. Everything in Java is a child of the Object class. At the end of the day, all a class does is specify a set of functions and a set of member variables. When a class is instantiated, an independent 'box' of member variables in a specific state is created, and all of the functions available to that class can be called on those member variables. There are lots of complications to this, such as keywords like static, protected, final, etc, but in a nutshell, that is what a class and an object are. Let me know if you have any other questions.
Okay, when you say you want the map loaded from an image, I think this is not what you want. A map is really made of repeatable cells, so you want a data structure that tells the map which cells are in which locations, and not save/load a gigantic image like 1024x1024 for the map, this is bad for many reasons. There are several ways to do this, my favorite is to use a simple 32x32 image as a map key. Each pixel in the map matches to a 32X32 cell that is drawn in the game. A simple version would be to read the key (32x32 png image), and if the pixel is white, draw a 32x32 wall, if its black, draw a 32x32 ground tile. But you don't want to read the key every time the game is drawn, so you want to save it to a data structure (each pixel value), and a 2d array works well since its easy to understand for x,y coordinates. So your program flow would work like this: 1) Parse the map key (the 32x32 map png key) into a 2d array, so something like this: (pseudocodish) int[][] mapCells = new int[mapKey.getWidth()][mapKey.getHeight()]; for(int y = 0; y &lt; height; y++) for(int x = 0; x &lt; width; x++) { //this is not an actual method, just what you should do switch(mapKey.getPixel(x,y)) { case WHITE: //this would be an int that is equal to white pixel int value parsed from image mapCells[x][y] = WALL;// another constant that means its a wall break; //ETC. } } Sorry not the cleanest example, but there are quite a few games that do this, check out this: https://github.com/libgdx/libgdx/tree/master/demos/metagun/metagun-desktop This class in particular: https://github.com/libgdx/libgdx/blob/master/demos/metagun/metagun-desktop/src/com/mojang/metagun/level/Level.java But doing this, you also can easily check to see what "icon" is in what location, so if you want to see X,Y; just go back to your mapCells[x][y] and check. This is WAYYYYYY more efficient than reading from an actual image every time.
Thank you, I think that makes sense. Just for clarification, you're saying to loop through each square in the image and check what type of block it is and store an ID of the block in an an array and then load the world by looping through that array and placing blocks accordingly?
Indeed the edit has cleared things up. So you want to load an image just to parse it into the map? That is, you wouldn't be using the image as the map later on. If that's the case, then you can load each image from its respective file as a BufferedImage using ImageIO.read(). Then, loop through the pixels of each image and compare them. I can give you some example code if you'd like. 
Thanks for taking the time to explain it to me :) Think I understand what the issue is now 
Thank you for the detailed response, it helped a lot. Your method of using a key makes sense but how would I implement it if I want to load a map from an existing map such as the ones here: http://www.boulder-dash.nl/down/maps/PeterLiepa/BoulderDash01.html Finding the location of certain blocks in the actual world is not a problem because I can use the instanceof operator in the grid as part of GridWorld: http://www.horstmann.com/gridworld/javadoc/ I was thinking this might work: 1) Load the map image (the ones I from the first link) 2) Use a double nested for loop to go through every subimage or square in the map image 3) In the loop, check to see which block the square is equal to and store it in the 2D array 4) End the loop and then go through each index in the 2D array and load the corresponding block into the corresponding coordinate in the grid This process would only happen once (during the construction of the world) as I don't have to redraw the world once the objects are place (GridWorld handles this) 
Please read this *excellent* article by Barry Ruzek on how to make effective use of exceptions: http://www.oracle.com/technetwork/articles/entarch/effective-exceptions-092345.html &gt; A good way to measure the skill of a Java architect and the development team's discipline is to look at exception handling code inside their application. The first thing to observe is how much code is devoted to catching exceptions, logging them, trying to determine what happened, and translating one exception to another. Clean, compact, and coherent exception handling is a sign that the team has a consistent approach to using Java exceptions. When the amount of exception handling code threatens to outweigh everything else, you can tell that communication between team members has broken down (or was never there in the first place), and everyone is treating exceptions "their own way." This article completely changed how I work with exceptions and my code is much cleaner, more easily testable, and easier to work with by those using it.
You would load the images like this: // the images of the tiles. use these to compare with subimages BufferedImage rockImage = ImageIO.read(new File("rock filename")); BufferedImage airImage = ImageIO.read(new File("air filename")); // the image of the map you want to load BufferedImage mapImage = ImageIO.read(new File("map filename")); // the tile at coordinates 0,0 BufferedImage tile = mapImage.getSubimage(0, 0, 32, 32); // check if they're equal using a function that you've defined elsewhere boolean isRock = imagesEqual(rockImage, tile); The logic for imagesEqual() would look something like this: * first, if the dimensions aren't equal, the images can't be equal * for every coordinate in the x direction * for every coordinate in the y direction * if the pixels at that point aren't equal, the images aren't equal * if you get this far, then the dimensions must be equal and all of the pixels must be equal, so the images must be equal. This code checks if the pixels in the top left corner of the images are equal: image1.getRGB(0, 0) == image2.getRGB(0, 0); BufferedImage.getRGB() returns an int, so it's okay to use == instead of .equals()
If you are using a TreeSet, make sure your items implement Comparable and have an appropriate compareTo method.
I use Emacs for all my development, professional and hobby. Including java, with some custom extensions ([java-mode-plus](https://github.com/skeeto/emacs-java), [YASnippet](http://code.google.com/p/yasnippet/)) to help bulldoze around the verbose syntax. Emacs is far more than a "simple text editor," and I generally don't have to leave it to use a shell. For example, I never invoke javac directly, or even the build system. Emacs has a `compile` command that runs the build system and captures and parses the output, which I then can use to quickly jump around to warnings and errors. It's not fully aware of the language like an IDE would be, but this isn't a problem for me in practice. 
Think of a chair. Then make a chair. The chair you made is the object. The idea of the chair in your head is the class.
In both theory and in practice there are valid reasons to choose SOAP over REST. With that being said, we are currently migrating towards REST as the preferred WS solution. Honestly, REST is basically the PHP of the service world, used and misused all over the place, but hella effective. Where SOAP is the C of the service world, an enormous pain in the ass to use, but it does what it needs to very well.
I would highly argue against SOAP doing what its supposed to do. It's meant to work as a cross platform service that work with automated service and client generation. However in practice it doesnt deliver that at all. When working across platforms it causes a large amount of hacking and work into parts that arent meant to be touched. And if you arent needing across platforms, its entirely too heavy where remote platform specific protocols just win every time. No sir I will not admit SOAP had its uses. I also find it irresponsible to even suggest it. Even where RESTful services are innapropriate there are still plenty of approaches and protocols that should be considered over SOAP.
For code, you'll want to place the full class path to where you extend JApplet. So if you have a class called Asteroids which extends JApplet and resides in the com.foo.bar package, you would place com.foo.bar.Asteroids in the code argument.
It was probably the first thing I copied onto a new machine - for batch, config.sys etc work. It was an essential tool for me. FWIW, it still exists, but seems to have limited itself to a particular system. Vim is it's offspring, but is not as pretty. 
Brackets are part of regular expressions meta characters. Try escaping them with double backslashes.
I figured it out. Just had to quote it using \\\Q and \\\E. Thanks anyway!
Hmm, I must have tried single backslashes instead of double the first time. \\ works and \\Q and \\E also works. EDIT: I'm think \\Q and \\E just quotes *everything* in between \\Q and \\E, which I think I would prefer in my situation.
As a software engineering graduate student and on behalf of my classmates and professors, fuck this guy's tutorials. You learn syntax, but no programming concepts or basic algorithms. He will teach you bad habits that will piss off software developers everywhere, and his material is just laughable compared to what any actual Java developer would expect you to know. Avoid him like the plague. Stop being cheap and buy a decent book and do the exercises. Don't try to learn from a clown that begs you to like and subscribe to his channel so he can get paid for more advertising. That's the only reason he has so much crap up on his channel. 
Do you mind if I ask why you should never use singleton pattern? I don't see what could be wrong with it.
Sounds like you need a dependency injection framework if you really have 200 classes with the same dependency, but i would need to see your design to really comment. Read up on Guice or Spring. I'm dead serious when i say that future you will regret using a singleton in 200 classes. See https://sites.google.com/site/steveyegge2/singleton-considered-stupid And note that singletons make testing impossible.
People abuse it and it allows you to use poor object oriented programming practices. A core principle of oop is encapsulation and single responsibility principle. A class should only be concerned with its own data. Singleton pattern allows people to define a globally scoped variable which makes it hard to test and maintain. You should learn singleton pattern just to know it, but majority of the problems that require singleton can be solved better with DI. 
&gt; the OO Theory article is not about design In my opinion, any article on OOP should be, at least to some extent. OOP is an ideology which drives the design of software. OOP came into being as one approach to the design problems of large software systems. Without understanding the fundamental problems that OOP was designed to solve, the division of software into objects with behavior/state/identity won't make any sense. In tutoring novices, this is the biggest problem I've run into. They don't understand why they are why they are writing classes as opposed to a main method with a bunch of static methods and unencapsulated data. &gt; The objects are indeed real world things, that's why the paper uses the real world things this way. Objects should reflect real world "processes" not "things". In the "crossed wires" section of the book chapter I linked, the author gives a good demonstration of the consequences of this misplaced focus. Objects should not represent physical parts of a domain, such as Car, but rather participants in processes. Too many introductory articles focus on individual objects in isolation and creating taxonomies based on physical classifcation, that the essence of OOP is lost, which is collaboration. Thus, Alan Kay's regret in calling this paradigm Object Oriented Programming, because people have put the emphasis on the objects rather than the collaboration. &gt; The chapter you linked says nothing about the objects - what they are, and why. It isn't talking about the "what", but it certainly is talking about the why. This is the crucial part, because the design and the essence of the objects in the system are inseparable. &gt; that chapter gives an attempt to identify the classes first, and starts to &gt; deal with the use cases later. He is analyzing the domain first, which is making coffee, and uses this analysis to identify some key domain objects. Then, he works through each of the use cases to discover behavior, the messages sent between domain objects. These processes are not independent, and the use case analysis validates the domain analysis. A feedback loop. &gt; It well might be that the previous chapters made it already clear, but &gt; the design should start with the understanding of the required &gt; behaviour - the use cases. Next step is to identify the domain &gt; objects. This is use case driven design, [as opposed to](http://stackoverflow.com/questions/3173070/design-methodology-use-case-driven-vs-domain-driven) domain driven design, which is the methodology practiced in this book. The idea is that if you reach for the use cases first without understanding the domain and the processes that are to be modeled, you will end up with a software model that doesn't match the reality of the domain and instead creates an alternate "software" reality. Use case driven design makes the software much less resilient to change, because the use cases are much more likely to change than the the domain for which the software is being written. TL;DR - the points your article are silent on are the spaces between objects, which are actually the most important parts of OOP. It's okay though. Almost everyone forgets about the space in between. And another suggestion: add some pictures and diagrams. I skipped the article the first time around because I got bored. I had to make an effort to read and understand what you were saying.
Thanks for contributing these!
That's an instance method, not a class method. 
Rename your old project in your filesystem
I've been using JCreator in school and like it a bit. I have been using Eclipse at home though because I don't want to buy JCreator..
sorry first uplaod failed
Could you recommend any books or online tutorial series which are good? I was thinking of getting into game programming, i have been working with Slick and I have made a few games. But I was looking for a detailed tutorial series on the topic?
No, sorry. I don't dabble in online tutorials, really, since there's nothing stopping anyone like thenewboston from posting up horrible guides to programming. I'm in school to learn from accredited professors, and the only books that I buy are ones that undergo vigorous peer review from code gurus and coding communities. If you're looking at game programming, I'd steer clear of Slick and refocus your approach toward the tried and tested languages of C++, C#, or Objective-C. Check out the books for beginners listed here: http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list
That's the most unthought part of Eclipse, its caching. It might help if you go to your workspace and delete your project subfolder from this folder: &lt;workspace&gt;/.metadata/.plugins/org.eclipse.core.resources/.projects Well, better not to delete, move it to somewhere else - if eclipse goes mad, you'll have the opportunity to copy them back. I'm not sure as I did the same long ago, but if you close and delete the project from within Eclipse, then this problem won't appear.
PLEASE could everyone find something more intelligent then "HELLO WORLD"?! How about "enter a number and then print out the next ten numbers".
No, I like "hello world" programs, because they're so easy and short :) They're perfect to show that your tools are correctly installed and working. And only when these tools work you should start with more complex stuff...
Those are some pretty big things to leave out from a database. Would you call it a disk backed cache instead? 
Downloads from mediafire instead of whatever originating site? Bit sketchy. Microsoft supply a JDBC4 driver [here](http://msdn.microsoft.com/en-us/sqlserver/aa937724.aspx) I usually use [jTDS](http://jtds.sourceforge.net/), mostly because I found it long before I found the Microsoft driver and it has always worked fine for me [plus I like to choose open-source versions of stuff, all other things being equal which they are in this case]. One of my co-workers has always used the MS one, and is happy with that.
I'm really enjoying the 2d development series by DesignsbyZephyr. [http://www.youtube.com/watch?v=VE7ezYCTPe4](http://www.youtube.com/watch?v=VE7ezYCTPe4) He starts right at the beginning and goes all the way to multiplayer development. Check it out. 
This is neat. Would love to see a plugin for IntelliJ ;)
I would call it structured file storage. It's not a cache per se, because it's intended to be durable and it doesn't reside entirely in memory AFAIK, but it would be an OK application file format store. Or maybe it could be used on a site where a given shard of data were only going to be edited by one user at a time.
My dear sir, Although I respect your opinion, I do not believe there is nothing to be gained by these tutorials. I could see your point if it's the only thing I use to learn Java, but I plan on taking classes, reading books and doing everything I can until I someday get a job and have lots of little kids that I will teach java :).
Why not just delete the project's contents using your Eclipse package manager, then use the same workspace folder.
They're pretty useful for the curious observer who doesn't have the time or money to buy a 400 page java book and work through it. I did his entire java tutorial set, and now I'm enrolled in programming courses. Syntax wise I have a good foundation so I can focus on the algorithms/theory/good habits. It's all supplemental. Also, places like MIT/Stanford upload their entire intro computer science course online. 
I did but I was looking for more of an explanation and not a copy and paste. I am trying to learn through out this process.
 255 - col.getRed()
Again, thanks a lot, I'll consider your feedback. This one is supposed to be the very first one of a series, and the next one will deal with the abstraction, and the design considerations. As for the use case vs domain driven development, one cannot go without the other. One has the text of the interview, and the verbs are the use case candidates, the nouns are the domain object candidates... As for the use case driven design, the business processes are examined, and along the way the domain objects are found and validated. It's simply a bit easier, especially for the unexperienced, because it needs less abstraction right at the beginning. The next step is to start designing the software application. Here, I'm not necessarily going to mirror the business objects into software classes. Instead, I'm going to step on a different abstraction level, and trying to find the responsibilities and the services. Those pieces of code that have a responsibility and provide services are the classes. Just use the MVC pattern as an example. Neither the visual representation, nor the data model, nor the behaviour has in a one-to-one relationship with any domain object, yet these are supposed to be different classes and hence will be separate (although related) objects during run. I will read that book soon, because judging from one single chapter is neither fair nor valid, but I don't really like the design outlined in chapter 11 (e.g. each one of the three M4xxx class holds a reference to the other two - inducing such cross-references deteriorates the maintainability, among others). Or e.g. there might be a class polling a control continuously and immediately sending notifications to the interested parties, were the state of the control changed. In the current design, since the poll methods of the three are called after each other in a round robin schedule, therefore the change of one poll method (changing it to a long lasting one) will have a huge effect on the operation of the system (e.g. hot water will spill out). Not that it likely, yet it's a hidden contract that the poll methods should return as fast as possible. And such hidden contracts will kill the maintainability of the software. But of course then it should be supposed that parallel tasks are allowed (time sharing mode), otherwise it makes no sense (and here we might start a different debate too). Further, I don't think that during the development phase of an industry-size application (meaning hundreds of thousands of lines of code, and hundreds or even thousands of classes) anybody would draw class diagrams. Component diagrams yes, but class diagrams? Later, for testing, eliminating cross dependencies, and even documenting the system, yes, the class diagrams are very useful. During the design phase, I doubt. Anyhow, that's a different debate. Many thanks again for your notes.
I see python like most dynamic languages (compiles at runtime), it's fast to develop in. There are good libraries in it and you can get products going really quickly. But when you start getting to points where you have massive load on the system, python will probably not behave as nicely as Java could. I see Java being closer to C++ than most of the popular dynamic languages out there (those being PHP, Python, Perl, Ruby, etc...). Java does a lot of compile-time checking for us, specifically around types (static typing). For most small projects, dynamic typing that you get in languages like Python works just fine, but when you start getting a lot of code with a lot of developers working on it, dynamic typing becomes troublesome. Beyond typing, speed can be a major factor. Java allows you to have some pretty close-to-hardware control over how the language behaves, especially when you are multi-threading. Java is a good language, but it is a bit more verbose than other languages, and can take more time to prototype out new ideas in. If you are re-writing some existing program to get better performance, Java is definitely a good choice. (Go-lang would probably be the second language I would look at if speed was an issue). Edit: To add, everyone has their language preferences. I used to be a Java only fanboy, but since I've picked up a few other languages, I'm starting to see Java's weaknesses. A lot of the time, it is better for a company to choose whatever language the team is comfortable with so there isn't as much training that is required for others to work on the code.
Writing a webapp in Java takes a much steeper learning curve, and needs much more experience. Writing it in python is perhaps the faster way. Maintaining the code, that's something different - if further modifications were needed, it might be harder for the python code. Just might be, because a seasoned programmer might develop good enough python programs (he could do that in Basic too if he wants). But if the application starts to grow, and a lot too, then python runs out of control soon. Several hundreds of thousands of lines of code, that's not for python. Several thousand, it's still fine. So it all depends, what you are after. Besides, if you are experienced in Python but not so in Java, then the bigger risk is to switch to a new technology. Each has its own merit, and it depends also on your intentions. If you're going to move to the IT business as a developer, then I'd say Java has a better perspective. But if it was just a hobby project (even if it is useful for others), then I'd say stick with what you know better. One can do most everything with python (and with Java too).
In my experience, the largest tradeoff / reason to choose Java over python (or vice versa) is application performance vs development time. As a java dev who has recently started integrating python more and more into my daily work and play - python offers a delightful balance of being ridiculously easy to write with a lot of the powerful libraries / tools available in java. I can prototype, write and test a python application in considerably less time than I can a java application. I also write applications that are latency and throughput sensitive, and designed to scale across multiple threads. I'm also stuck with pre-3.0 python, and the global interpreter lock prevents me from maximizing the use of multi-socket, multi-core machines (yes, Multiprocessing exists instead of the Threading lib, but it's the difference between fork() and thread() at the OS level... it's not always acceptable). I'm not sure if the global interpreter lock is corrected in python's post 3.0 world - but py3 isn't available to me on customer sites, so I don't even bother with it. With java I can write the same application with a vast improvement in both throughput and latency. Java performance blows away python performance. Bottom line - language selection is always about right tool for the right job. If your application isn't concerned with maximizing performance, python is an excellent choice. When all else fails, there's always jython! EDIT: weird, reddit showed zero comments on this initially. Thought I was the first. Turns out I'm echo'ing a similar sentiment as a lot of people on here.
Your suspicions about Py3 GIL are correct, it still exists. If you do give Python a whirl again you might want to try [stackless python](http://www.stackless.com/) (caveat: I've not used it myself). I was wondering just how fast Java was compared to Python (I assumed it was faster, hadn't gotten around to looking at benchmarks yet). I will also look into Jython a bit more :)
It seems to run just fine in Eclipse for me. I'm curious as to which parts are failing on you? Ran your static main in testRoman, the console returned as it should: MMV A couple things to note for clarity. Classes should be capitalized (TestRoman instead of testRoman). For your Scanner object, you don't need to initialize it right away. My preferred method is; ... Scanner console; public static void main(String[] args){ console = new Scanner(System.in); ... }
ok, I'm dumb. What's happening is that the other programs run in the regular Eclipse environment/perspective. But only when I run my code does it switch perspective to debugging. I don't like having it switch on me and I don't know why it does that to my code but not the others. But I see it does work now.
The app is so far at 10kloc (though I am going to be cutting out some unused parts soon so it'll drop to approx 9kloc) and one of the positive things they've said is it's very well laid out. I've made a Python web-app before that was about 30kloc, nothing big yet though. Can you say why Java is better than Python for maintaining a large application? I was under the impression it has a lot more boilerplate and would thus potentially be harder to maintain.
PDF merging is built into the Apache PDFBox library if you want to go that route as well. The only caveat to calling it from code is you have to call their main method and have PDFs already on the filesystem. http://pdfbox.apache.org/commandlineutilities/PDFMerger.html
Nope, that's not exactly I say. I say however that it's a bit easier to write maintainable code in Java than in Python - one has to watch one's hand closely when programming in the latter. The client side of the application I'm working on currently has 100+ Eclipse projects, 10 to 30 classes in each (Eclipse RAP, EJB, JMS, all unleashed). I wouldn't want to maintain it, were it written in Python.
http://shootout.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=java&amp;lang2=python3
This is the worst formatting of code fragements in a blog post that i've seen in a long time.
ok, so I got everything working ok. Only thing I need to know now is if I optimized it correctly. I'll repost in case you wanna take a glance at it and offer some criticism. http://pastebin.com/f14FbTAg
That's a fair assessment, and in this case python may not be the right tool if the domain of expertise lies in java. It doesn't invalidate the point, it implies that python would be the wrong tool for the job in this instance.
Looks good. If you wanted to save yourself a line of code, you could do this. instead of; Roman myRoman = new Roman("MDV"); myNumeral = console.next(); myRoman.inputRoman(myNumeral); you could do; myNumeral = console.next(); Roman myRoman = new Roman(myNumeral); or even shorter :P Roman myRoman = new Roman(console.next()); The only other thing I can recommend is that the string variable roman inside your Roman class can become confusing to someone that hasn't read your code before. "numeral" maybe a more sensible choice, but it's all up to you and doesn't affect the performance of your code at all. 
Good comment sir. Upvoted. Out of curiosity though, what's your take on Scala? 
Thank you for clarifying.
That's quite a difference...
I've used both and I think Java really excels in large organizations because it is statically typed, prefers schema-compliant XML, and has a rich tool set especially around dependency management. Basically it is very easy to deploy Java modules across an enterprise. Compilation means slower iterating, but faster performance. Static typing also lends performance as well as clarity and maintainability in exchange for verbosity. It blows python away at things like concurrency and internationalization. Python is neat. It looks nice, has a good community, performs fine on IO-bound applications (like Reddit). I look at Python as the language you wish you could say was better, but really it's a very mixed bag.
When it comes to raw computation, yes, there should be an order of magnitude (10x) difference. However, don't forget most web programs are not maximizing the CPU, but waiting for I/O! :) Even Java programs are most often waiting, wasting their CPU cycles on the lowest-levels. A few years ago we benchmarked a Java web application we had written that was mostly exposing web services. It was spending 90% of its CPU time de-serializing and serializing XML! It is conceivable that we could have replaced it with a Python implementation, as long as the XML handling was optimized, for example with an implementation written in C. Not that we wanted to rewrite it in another language, this is just to show that the raw performance of a language implementation does not always matter much. Other issues mentioned by previous posters matter much more (maintainability, support, scaling to bigger teams and lower talent, etc.).
How much of a hassle is the XML to work with though? I've used XML before and it was.... painful.
I think it depends on what you want to use it for. If the print statements are just temporary, then some people don't indent them so they are obvious and easy to go back and remove when they aren't needed, like: class X { private myMethod() { if (condition1) { doSomething(); System.out.println("after doSomething()"); doSomethingElse(); } } } If you're talking about logging debug statments, then it's best to use a logging framework like [SLF4J](http://www.slf4j.org). In that case, make sure you try to think about what values you might need when something goes wrong, and not just log everything (since usually you can insert more logging in a problematic area if necessary). If you're talking about programming a simple text game using print statements, you could consider just wrapping this functionality into a method, like: private static void show(String s) { System.out.println(s); } This allows you to then hook in fancier stuff down the road as well. If you want to start adding more behavior to the console printing, you could make a Console class and then start adding methods to that. 
If you're using an IDE like Eclipse, it's pretty simple. Like everything with Java you're trading upfront complexity for a safer, more testable future. Also, you can alleviate a lot if the pain of using the standard lib by using Apache commons which wraps a plethora of utilities with simpler APIs. It's dead simple to manage dependencies with a tool like Maven.
Thanks.
I like Intellij. It has a lot of good features(like the omni search box), built-in integration, and it's ready to go out of the box for the most part. 
&gt; Tools. Static typing in Java make it super easy to refactor code. Oh, the joys of a language that's designed for computers to read, rather than humans.
One interesting thing people do is statically import the "System.out" object. `import static java.lang.System.out;` The soot framework has a global object G with a function v() that take a string so it just looks like: G.v().out.println; You can always make an object like that and do G.p("Hello World"). The JSP framework solves this problem for web developers by assuming everything NOT in special brackets is being output in the streams.
If performance is important, you should look at PyPy. [It is often many times faster than regular CPython](http://speed.pypy.org/).
I don't know about thorstaj's company in particular, but I think generally when a company says ".NET", they mean "C# and ASP.NET". thorstaj's key point is informative here: The managers don't really care what specific programming language you use to implement your solution (and incidentally, they don't really care about "fairness" except insofar that it impacts the morale of the employees). What they care about is that if you write a piece of code (in whatever language) and then quit the company, someone else is going to be able to continue your work. As such, they don't want you using "weird" languages that future hires are less likely to know, even if said "weird languages" run on the .NET virtual machine.
It's still painful. Java programmers see XML as a solution, rather than a problem.
Thanks the second solution will be my course of action, at least I can keep the code tidy. Thanks! 
You should check out [EventBus](http://eventbus.org/) if you are doing GUI stuff. Lovely for situations like this.
Sadly I'm using Python 3 rather than 2 so currently not an option. I've been following it eagerly though :)
Yeah. Except I am concerned that pretty soon your going to have a much EASIER time soon of hiring you people that have deep knowledge on MongoDB instead of Oracle, and Ruby or Javascript instead of Java or C#. None of the startups are using Java or Oracle, or SQLServer or C# or what we consider 'standard'.. .they are all using Mongo, Couch, memcached, ruby, php, javascript, node.js, mysql, etc.. Being so fixed in our ways in Corporate IT is starting to make us in the current generation with our ".Net and Java only" mantra sound like the people before us who used to say "Fortran and Cobol only". 
Or concern (not obsession) was with performance, not XML.
It's a trade off between initial ease and the features provided. It's not a black and white issue.
Your start ups sound like they only include web sites. Statically typed languages aren't going anywhere in enterprise applications. 
[http://docs.oracle.com/javase/tutorial/](http://docs.oracle.com/javase/tutorial/) I'd start with the Trails Covering the Basics and go from there. This is where I learned, and is the official page.
&gt; The designers of Java has always tried to stay away from as much "syntactical sugar" as possible with the language I think that's one of the reasons I like it so much. I'd much prefer the language itself to be slightly verbose, and have the IDE work to make it easier to write. This makes it easier to quickly understand, but still keeps it quick to write. That's part of the reason I don't like the Lambdas that they're adding to Java 8; essentially all they do is stop you from having to create an anonymous inner class, which to me isn't much of a benefit, as an IDE can create that in a second for you.
My teachers slide regarding this said: &gt;Recursion: &gt;See Recursion.
Yeah, the lack of a base case makes it more a definition of an infinite loop than anything else.
&gt; I will never understand ~~Java~~ programmers' obsession with XML.
Is this a joke?
I mean this post.
Nothing is stopping you from learning and working with multiple development platforms. Having multiple languages under your belt makes you far more marketable and says some very important things about your skills as a developer. IMO every developer should be fairly fluent in more than one platform. 
I completely agree.
Know how to build a for loop, Know what Overriding and Overloading is. Know your operators, Private vs Public Getters and Setters What is a Method, Class and subclass. Know how to write a main method, Fully understand polymorphism. Know the Difference between final, finally and finalize(). 
If my understanding is correct: a = b will compare the memory locations of a and b, and a == b will check if a is equal to b, whether it be an integer or a string.
For me, it has to do with seeing more of the code at a time. If I have an easily understandable syntax that's brief, I'd rather that than something that's verbose in the hopes of being easy to read. When I have more code on my screen at a time, I can understand what's going on more quickly. It's because of this that I've hated Java for not having first class functions and requiring anon inner classes. Why do I need all that clutter? Does the indirectness of having an anon inner class add to readability when all you want is to reference a function?
I would argue that perl isn't the best example here. I'll readily admit bias, but I think that the type system isn't the problem with maintaining this type of symbol soup. I'm not arguing that a type system doesn't help, or that boilerplate is/isn't important, only that there are other factors that make perl a nightmare to maintain. For what it's worth, I don't think that most of the boilerplate adds to the ability to maintain a program. Never once have I appreciated an anon inner class in Java for illustrating clearly that I'm referencing a function.
Yeah, I mean I know what they do in the code. I'm just not the best at articulating it.
excellent points. the jvm platform is quite powerful/flexible and the implementation of modern, syntactically light languages on top of the jvm ensures that java will likely remain relevant enough to never quite be "the next COBOL". 
I realized what I was saying was wrong after I typed it. I got it confused with something we learned in class about object comparisons.
IMO. Java and Python are complimentary to each other. I use both daily. 
Yeah, that makes a lot of sense. Thanks for the help.
Couldn't agree more. Java is a world of frameworks now. App server technologies, web application frameworks that sit on top of Java libraries that sit on top of Java libraries (Google Web Toolkit + Google Juice). The open source community made Java a clear choice for the enterprise. Java vanilla J2EE was really a toss-up for most corporations when they had to choose a modern OO architecture. Corporations that chose Java soon had Spring and Hibernate in their toolkits and oh boy did those take off!! When I talk to PHP or Drupal developers about dependency management, dependency injection, ORM, external properties files or any other completely fundamental elements of modern JEE application management, I don't get much of a response. 
How do you become a 25 year old COBOL programmer? How did you pick COBOL? Where did you get experience? Did you have classes or are you self taught? I'm a big fan of learning new languages, but I usually need some sort of project to work on, and I can't say I've ever come across an opportunity to even come across COBOL.
How'd you learn it? Did they let you learn COBOL on the job? Don't tell me they taught you COBOL in college? If so, COBOL is most certainly not dead at all. Fortran is dead. 
Also if Oracle never gets around to Jigsaw and Java dies out (the language) that would be incredibly freeing for JVM platforms, you wouldn't have to carry around all that AWT/Swing/etc baggage.
Both IBM's and Oracles entire Enterprise stack is built with Java. Other big companies like CA, HP, SAP, Finacle etc all use Java extensively in their products. Java is in deep and is not moving out any time soon.
Ridiculous demand. 
I'm curious: why not remote?
Quite honestly (as a senior software dev), remote workers are just hard to deal with. If they're in your same timezone it isn't too bad, if they are an hour +/- it's workable. If they are much past that very few people have the built in mentality to really be a great team member. I'm not saying remote people suck, I'm saying that as a team there is an amazing amount of side-conversations and small talk you lose that really helps keep projects focused and ensure people aren't duplicating work or effort. In the time table that most commercial software projects have, the remote work generally falls short of how talented each individual really is which is unlike open source where you can contribute when you want and timetables are a lot more flexible. I love my day-a-week work-from-home but much more than that and I think it'd be a detriment to myself but more importantly my team.
To build yes, to maintain I doubt, unless you have very clever, committed developers, who're not paid by their "productivity" (whatever would the boss consider productivity). You know, in perl one needs extra efforts to write a maintainable code. In java, one needs extra efforts to write an unmaintainable code. Sort of. Almost.
I would really hope your automated testing would catch it if an entire function definition disappeared (or you deleted any random line from your code). I understand what you are getting at wrt ugly perl code. You are right, Java's ugly code doesn't look like line noise (it can't) but it can turn into the huge over-architected mess that results from code generators and a too much enthusiasm about design patterns. This seems to be pretty common in the Java world and is much less popular in the scripting/functional world.
you just did his homework for him, aren't you nice.
Source?
No, it pretty much state of the art in most Fortune 500 companies. Last year we were still getting requests for proposals requiring Java 1.4 as target version.
Agree 100%. What kills languages is better languages that everyone wants to use because, in some way, they are a step up from what was available previously. Although Java the language has many flaws, the JVM doesn't really have any serious competitors on the radar. If Java dies off in the near future, it will be probably be because JVM languages such as Scala or Jython have proven themselves to developers to such an extent that no one really sees the need to cut new code in Java any more. I have my doubts about Scala. It seems to be one of those languages with a high potential for utterly unreadable legacy code, and I think that once we start seeing those Scala maintenance horror stories popping up, the shine is going to be knocked off it somewhat. At the moment, if I had to make a bet, my money is on Python on the JVM, once it gets faster. To revisit what the OP said - I think your acquaintance may be guilty of a little wishful thinking there. 
&gt; Fortran is dead. Go tell that to all institutes doing HPC, the likes of CERN, Fermilab and similar. Or Intel, Portland Group, NVidia to stop selling their compilers. So many people unaware of Fortran's death...
&gt; which is great because it never really left. The problem is that it left the radar of HR drones and cool technology titles about what is the next "Facebook" using. But it never left, and was happily driving all operating systems, games and VMs that the cool kids like to use. I am also including C in the same boat. Personally I would like other more type safe systems languages, but C and C++ is what we have currently.
Just out of curiosity (I am not looking for a job), would you hire some with strong Java fundamentals (5+ years experience) and SQL but no familiarity with the other things there?
Android. The smartphone OS with the biggest market share uses Java. So there's an example of cutting-edge tech that involves the language. Java isn't just for old, over-engineered, enterprise-y stuff.
I thought Java was dead :)
Well, standing on one foot, one needs a lot of efforts to keep the balance. Standing on all four properly, one needs a lot of efforts to fall. And if one has further extra support legs, one will still stand even if pushed hard. Java, C++, Objective-C, C# are all fours (although as I see, if one moves toward the .NET then won't ever go close Java EE, and vice versa), and I don't mention C here because it comes with C++ (actually it comes with Java either, you'll need to know the libs only). SQL (PL/SQL and all alike) is a very strong support today but it is likely it'll sink HTML5/Javascript, another support (IceFaces, GWT, many other such) Erlang/Haskell is yet another support (Clojure, and you stay close to Java) Python is yet another support (or Jython if you wanna stick to Java) Perl might be useful PHP is something you might meet Tricky stuff like ABAP, SASS, Cobol makes you a strong competitor on very special market segments MATLAB, Fortran another special market segment languages So it's all yours, I suggest you to see the TIOBE index for the trends. As I see, the end user applications are moving to the mobile platforms, while the large scale industry applications tend to foster their web clients. 
If by COBOL you mean an eternally living bastard that needs to die... then yes.
It's impossible for me to hire someone who has the skills I need, or it's very difficult to say the least. Why does no one really know JSF?!
Rather than use a class to do this OP could just use a HashTable with the Integer as the Key and the count as the value. Gaurantees you won't have duplicate ints too.
That's the impression I've gotten from the reading material I have managed to find on it. It looks like it's a bear to work with. Kudos to you though, I've always felt that good COBOL-ers probably make bank supporting those legacy systems. Is there a push where you work/in the COBOL world to transform the systems over time to more current tech, or is status quo the name of the game?
Because you don't pay enough. 
Try running a 2 year project with developers in Houston, Charlotte, NY and Pune, QA team in Jersey and Pune, Ops in Chicago, business in Chicago and Jersey. AND doing it as a consultant that has no true authority in decision making. 
If it's not in your area and you're looking for a Java job, think about relocating. The market in DC at least is hot enough that if you're good your relocation costs will be paid for, no question.
It looks like EAP6 to me which is the newest supported EE server from Red Hat/JBoss. It implements all the things that AS7 does (JPA2, CDI, etc) and has the additional benefit of having support. I do work in the government and private sectors and people are still designing new products on the old EE5/EAP5 stack. Brand new. Like... still in the architecture phase and not starting development until next month. What sounds outdated about the stack exactly? Struts2? I'd agree there but the rest of it looks fairly new but still stable. Also, OP, if you're going to put down Subversion you should also name your build system. Personally I'd not want to walk into anything that doesn't have a pretty solid build system. (I'd also mention Cruise Control, Jenkins, or Hudson if you're using anything like that.)
Because JSF is painful and I've spent the last almost 8 years trying not to learn it in favor of other Java technologies.
I really can't believe that index. It seems to be taking C++,C#, and Objective-C and putting that in the results of C. When I was trying to find C specific resources on the web it was very hard to separate C and C++ and there were more resources available for c++ than c in my personal experience.
That's our current technology stack, unfortunately. We exclusively hire consultants so we're not in the business of training people. I've had to relax my interviews a bit unfortunately - a few candidates I've had recently - one guy brought his dad to the interview...and didn't wear a suit, not even a shirt and tie...and another one came in dressed like he was working construction...so yes, I believe the job market is very good because it's really hard to find someone with just basic interview skills/etiquitte.
My best advice is find a project that you want to do, and use Java to complete that project. Put project on github. employers love that.
If Jigsaw never gets done people will keep on with what they're doing already, making do (quite comfortably) with some combination of maven and OSGi. I think oracle's bigger challenge wrt jigsaw is will be encouraging adoption, not completing the implementation. Javafx is set to free folks from awt/swing.
I switched from JSP and find JSF much easier to work with. I no longer need to spend large amounts of time working on front end stuff and can focus on the business logic of my application. If you were working with JSF prior to 2.0 than I agree with you.
.NET is a dying language? *Riiiiiiiiiiight*. Anyway, either do something you'd want to do, or make a Java version of a project you already did in another language. Design patterns and best practices are largely language-independent, especially between Java and C#.
Why don't you read their index-creation method, it's open, you might test it. (Objective C is excluded from the C, the two others are not, yet the expression to search for is +"C programming" -"objective-c", which gives you 12.4 million hits in Google, while +"C++ programming" gives you 6.2 million, and I doubt that C++ hits would be included into the former). However, I don't surprised at all. Many universities and high schools teach C today as the entry language, which apparently adds to the index. Yet, knowing C is a definitive advantage when one learns Java, C++, or C# later.
&gt; It seems to be one of those languages with a high potential for utterly unreadable legacy code I will be using that expression to describe people. I'm sorry Tom. You seem to have a high potential for utterly unreadable legacy code. You're off the project.
It depends on who's teaching. Both methods are clear &amp; you understand them. As well, if you're using a try / catch block, it can be useful to declare your variables outside and then initialize them once inside the try block
&gt;We exclusively hire consultants You exclusively overpay and exclusively "hire" people who don't give a shit about your company. Sounds like a winning plan.
I'm not trying to start the dynamic typing vs. static typing fight. (I'm on the side of static typing in it) I'm supporting terse languages over verbose ones. Protection against accidentally deleting a line I don't think is an argument for verbose languages in general or Java in specific. If you don't delete the starting or ending line or you delete the entire method (which I have accidentally done before), it is possible for the compiler to not catch it and then have strange problems when you run your code. You need some sort of testing in place if you want to avoid these issues and if you write those tests in a verbose language, you will have more test code to maintain than in a terse language. (And if it is a statically typed terse language you will less code still)
Most real world Java seems related to using it for the server side of web applications. The technologies that encompass that are generally referred to as J2EE. There was a time when people tried to use it for presentation stuff using java applets and AWT/Swing but that stuff failed pretty miserably for a variety of reasons so I wouldn't spend too much time looking into it. I would recommend looking into tutorials that explain how to create a simple WAR and deploy it to a web application server like JBOSS or Tomcat. Learn about JSPs and Servlets. Learn about how web applications are layered (DB-&gt;DAO-&gt;Business Logic-&gt;Web Services-&gt;Client Side) and then learn about the different technologies that are used at each layer (ie: Oracle-&gt;Hibernate-&gt;Java-&gt;Jersey-&gt;JQuery as a simple example). It's kind of difficult to impart the massive amount of information and knowledge related to Java webapps or just web development in general so you're going to have to take it a little bit at a time. There are tons and tons of resources on the web though. Good luck. P.S. There is also game development if you want to look at LWJGL which is a pretty decent framework for Java game dev.
I'll add one additional thing to other people's suggestions. Learn SQL, and how RDBMS' work in general. Not that important which one. So much of the real world development out there involves interacting with a database. We've been recruiting for a few entry level positions recently where I work, and it's amazing how many people come out of CS programs with nothing beyond a database fundamentals course and virtually no practical SQL exposure. 
You're hired!
Not if we have projects that require immediate development work and then I have project leads bitching to me about how their project is late and over budget because of "technology" or "training". Not everyone has been here that long, of course, the point I was trying to make is that he ones that stay, they care, or at least have us fooled enough to make us think they care.
My take: public static void main(String[] args) { final String[][] words = { {"", "one hundred", "two hundred", "three hundred", "four hundred", "five hundred", "six hundred", "seven hundred", "eight hundred", "nine hundred"}, {"", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"}, {"", " one", " two", " three", " four", " five", " six", " seven", " eight", " nine"}, {"", "thousand", "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", "nonillion", "decillion"} }; char[] n = ((args[0].length() % 3 != 0) ? ((args[0].length() % 3) == 1 ? "00" : "0") + args[0] : args[0]).toCharArray(); StringBuilder s = new StringBuilder(""); for (int i = 0; i &lt; n.length; i += 3) { if (i == (n.length - 3) &amp;&amp; n[i] == '0') s.deleteCharAt(s.length() - 2); StringBuilder g = new StringBuilder(""); g.append(words[0][Character.getNumericValue(n[i])]); if (Character.getNumericValue(n[i]) != 0 &amp;&amp; Character.getNumericValue(n[i + 1]) != 0) g.append(" and "); else if (Character.getNumericValue(n[i]) != 0 &amp;&amp; Character.getNumericValue(n[i + 2]) != 0) g.append(" and"); else if (i == (n.length - 3)) g.append("and "); g.append(words[1][Character.getNumericValue(n[i + 1])]); g.append(words[2][Character.getNumericValue(n[i + 2])]); if (g.length() &gt; 0) g.append(" ").append(words[3][((n.length - i) / 3) - 1]).append(", "); s.append(g.toString().replace("ten one", "eleven").replace("ten two", "twelve"). replace("ten three", "thirteen").replace("ten four", "fourteen"). replace("ten five", "fifteen").replace("ten six", "sixteen"). replace("ten seven", "seventeen").replace("ten eight", "eighteen"). replace("ten nine", "nineteen")); } System.out.println(s.substring(0, s.length() - 3) + "."); } There are a few bugs, but it mostly works well!
According to 3 seconds of googling: Web application ARchive
Doesn't sound like a good way to do things to me.
WAR is just a JAR with WEB-INF and/or META-INF and WEB-INF/web.xml which defines the web application; meant for deployment into a web container like Tolmcat. It's just an archive with specific info available. EAR is an archive that is is EE and may contain WAR inside and meant to be deployed to JBoss or Glassfish. (And by deployed I mean copied into the container's deployment directory; like tomcat's webapps forlder). It's not so complicated once you realize it's just a bunch of fancy zip files.
It's not the way I would hire development staff if given the opportunity, no, you are right, but unfortunately I don't have a choice in the matter (yet).
The crux of the problem is my company has 1 vendor through which all consultants are brought on through. Now they have different consulting companies that submit resumes to them, but the REAL problem is that they are also submitting resumes. I imagine they are giving us people that they can get real cheap, but we've had some backdoor resumes sent to us and even they don't really pass muster. We are in the greater NYC area (about 20 miles northwest). We do not do remote developers, unfortunately, unless we bid out a project and the entire team is offshore, then they're typically in India and they're even worse...
&gt;in most Fortune 500 companies Which is, of course, the bleeding edge.
&gt;Try to find a Java job after 5 years spent on an Erlang project I think that this would be significantly more easy than you imagine it to be. Java is not hard or particularly difficult to learn. 
Take the "Core Spring" training class. It's 4 days, but you'll learn a lot about the Spring Framework (that you can learn on your own from reading online, but not nearly in 4 days)
* read effective java * learn a DI framework like Spring (though Guice might be more lightweight) * learn a ORM framework like Hibernate 
The other guy replying is saying everything I was going to say. I would ask the vendor what their markup is and possibly bring in a competing vendor. I know several companies that will actually prioritize who they present to a client based on profitability for the staffing company, which means you get substandard resources. I've had bad issues with offshore resources as well, typically around mid-flight adjustments and cultural issues such as speaking up when something isn't fully understood. At one point, I had several resources under direct supervision not only ignore requests, but acknowledge the fact they are ignoring me because they know I didn't have time to replace them. Good luck, man. 
Platform. CLR is only decent on one of them. And arguably for certain applications (the ones I work with) That platform is horrible. JVM however probably runs on my coffee pot just fine :p Giving you a choice of the best tool for the job without having to competely rework your codebase.
&gt; smart phones aren't dying either I'm sure they will be dead before COBOL.
node.js would do the trick and avoid java (unless you wantto write some servlets to handle some traffic.
heh no, when i was in school, we had apples. i had a commodore at home, so everybody tried to get me to help them, but they were all total dicks otherwise, so i didn't.
I use [ICU4J](http://userguide.icu-project.org/formatparse/numbers). double num = 2718.28; NumberFormat formatter = new RuleBasedNumberFormat(RuleBasedNumberFormat.SPELLOUT); String result = formatter.format(num); System.out.println(result); // output (in en_US locale): // two thousand seven hundred and eighteen point two eight
there are plenty of frameworks that run in the tomcat container...and if not, you can fallback to jboss.
I think if you were right on this point, you wouldn't have problems finding decent devs. You (or whoever) is going to have to kiss some developer ass if you want good devs.
A lot of this is about technologies. But business is often also about normal stuff, just with huge figures and reliability requirements. Think about the affect of 5,000 website hits per minute. Think about what happens if the database drops or something. You have to fail as little as possible, as cleanly as possible, without giving cryptic errors. You also have to plan upgrades - how do you enable rollback, maintain data and so on. There's some great resources on tech here - but it's more than just JEE and certain APIs and libraries.
I second that motion, if all you want is some authentication, decision making, then returning an SPA, then node.js will do that for you easily with much less hassle, perhaps in less than 100 lines of code. I don't know much about the load it may serve (dunno your requirement either), so you might want to check that if you expect heavy load. To unleash JBoss for an SPA, now that's what I'd call overkill.
Now that's just cheating! ...oh, this isn't /r/dailyprogrammer? Carry on then.
&gt; You can learn from example of good coding and design by developers who actively track bug reports and post regular updates. Just make sure not to learn from "bad" libraries. The amount of WTF hidden in some up to date and surprisingly bug free code can be insane. A first warning sign is continued support for java 1.4 and earlier, it not only makes for outdated pre generics coding practices, but supporting a jvm that predates 1.5 also means supporting global warming (there was a time when jvm performance really was that bad). 
Downvoted, as title does not contain location and there is no mention of salary range.
Yep, Spring, JSF, Struts2, Tiles, SiteMesh or the newly available Oracle ADF. Spring 3 security is also worth getting familiar with
[Wrong Neighborhood](http://imgur.com/0BgyO)
Yes, if they portrayed other desirable attributes. For instance: strong work ethic, passion for programming, ability to communicate well.
It is our shop standard. Aside from SQL I have worked personally with DB2, Oracle, MySQL. I prefer SQL Server to all of those due to excellent performance and flexibility for scaling. SQL Server Mgmt Studio isn't bad for a UI, but really who cares since you can use any JDBC-compliant DB interface you want to work with it. //EDIT - also, snapshot isolation rocks. removes so many headaches. DB2 was terrible. Such bad memories . . .
Our pay is competitive for the industry. HR deals with that. If someone is interested in the job based on my description, they could talk salary with HR during the interview process.
Struts 2 is kinda old. We are looking to move to Spring. //EDIT - nevermind. I talked with one of our architects today and we are sticking with Struts 2. I thought for some reason we were going to migrate to Spring MVC, but that's not the case.
Thanks for the tip. From what I can tell, it is a good time to be a Java developer looking for employment.
This. Beats the hell out of dealing with a lot of the awful Java frameworks that one is expected to master in the Javasphere. Android is the future, or at least, has a pretty reliable future, and puts you on the cutting edge if that's your thing.
I second this. Do not learn an RDBMS from the perspective of Hibernate or other ORMs. Learn how to structure tables. Learn how to query them. Use Hibernate and the like later, after you understand what they're doing under the covers.
I have to use a while loop. It's for homework :P
[Stack Overflow](http://www.stackoverflow.com) would be best, since I don't think [scifi.stackexchange](http://scifi.stackexchange.com/) would be appropriate.. 
&gt; I'm not trying to start the dynamic typing vs. static typing fight. Rereading your post, I probably read to much into it, and saw arguments that simply were not there. My bad. Supporting terse languages over verbose seem like a no-brainer. Verbose is loaded with a negative semantic making it more or less mean "more information *than needed*". With such words, I don't think anyone would oppose you. I'm all for non-verbosity! And yes, Java is certainly verbose (as in too much information) in some areas.
That's what I mostly hear too. Done work with most of what you have. Love Oracle when I need performance. Microsoft when I need a blend of performance and flexibility. Postgres when I don't have any money. 
"At one point, I had several resources under direct supervision not only ignore requests, but acknowledge the fact they are ignoring me because they know I didn't have time to replace them." WOW - I've been in similar situations, but never had anyone flat out tell me that. I'd rather just can them - at least save the money. Even if you can't *replace* them, if they're not contributing, it's still a net drain.
Thanks a lot, snot3353! 
At a guess you are limited in the bandwidth to the GPU on the laptop. Have you tried running it with -Dsun.java2d.opengl=true (might need some of the other related flags to)? The only other thing I can think of is to check if your graphics buffers are in a pixel depth/format that your GPU supports without conversion.
Your laptop specs show an NVidia and Intel graphics card. Does your system switch between them automatically (NVIDIA Optimus)? You might be using the slow onboard intel card. See if you can go into the BIOS and only using the discrete graphics card (NVidia).
And the good developers will be able to identify if they are capable of working remotely 100% or something less and generally tell you what they feel capable of. This takes experience and introspection.
Yeah, I appreciate the offer but unfortunately I'm pretty down the decision chain when it comes to things like this. The staffing firm we use sucks, and everyone knows it, but there's little that will be done, I'm just going to have to suck it up. Thanks, though!
This is probably the reason. I have also two and usually have the energy settings to moderate on my laptop, which makes my laptop (lenovo the beast) slower than my two year older and much cheaper desktop. 
Oh dang! And here I thought everyone thinks of Java as an old language with C# as a modern version. On the internet, everyone always complains so it's nice to hear my platform of choice is still valid :)
I third this. I took over from a guy who used Hibernate Criteria Queries *exclusively*, then bailed after the app went live, with a whole host of performance issues. Knowing a reasonable amount of SQL and how RDBMS' work saved the app's bacon, and my job.
Impressive expertise you have here. What kind of projects have you worked on? Most experienced Java developers I know work on the server side, I'm interested to know what client side work you have done. :)
Your laptop processor has a multimedia support, while your desktop processor hasn't. Honestly I don't know whether it means any difference (if the graphics are made partly with the CPU, then the performance might go down as the load on the CPU increases). Your desktop has 8 MB cache, while your laptop has 6. Your desktop processor supports QMI and you laptop uses only DMI bus (but not sure whether it means anything, partly because it depends on your motherboard and graphics card too). Further, your desktop processor have 3 memory channels, while your laptop has only 2, which a huge difference. I don't know your graphics cards, but it's also a question how much memory those cards have. So much about your hardware. It also might be that for whatever reason, the JVM uses your laptop in server mode, and uses your desktop in client mode (due to the larger memory of the former). Might make a lot of difference - check those mystic -X... settings. 
Thanks. What options did you choose? (RAM, CPU. etc..) ? it seems to get expensive fast.
nevermind I found it! For all the other people who want to do this. just build your .jar file like you would do normally. Then open the jar file with winrar and find the class that holds the main method. My main was in my KryoServer.java file when i wrote it. That means that the main method is also in the KryoServer.class file when you build your jar file My KryoServer.class file was located in the folder "server" in my .jar file Then you should write a .bat file that looks like this: &gt;@ECHO OFF &gt;java -cp &lt;your-jar-file.jar&gt; &lt;path-to-main-class&gt; so for me it looked like this: &gt;@ECHO OFF &gt;java -cp spacegame_serverV0.1.6.jar server.KryoServer so save that as a .bat file and run this. It works fine, if has a console and you can input stuff and java can read it!
Thank you for your suggestions, Im looking to deploy a rather simple(ish) web app that needs very little disk space even for the db. It will be a trial to see if there is any interest before investing into something more customizable. I am unfamiliar with RackSpace, do you have a dedicated machine there? What are you paying if you dont mind me asking?
They were contributing, but never testing, using patterns as requested or following any best practices.
You could also make it an [executable JAR](http://docs.oracle.com/javase/tutorial/deployment/jar/run.html). Inside the JAR, create a directory called META-INF and in that directory create a file called MANIFEST.MF MANIFEST.MF should contain this line: Main-Class: server.KryoServer Then you can run the jar file by double clicking on it or from the command line via: java -jar spacegame_serverV0.1.6.jar
Linode, Amazon, Heroku...
Hi there! First of all, thank you for taking the time to comment on my code and help me improve. It was quite the eye opener. Secondly, unless I'm the one misunderstanding stuff here, I think you misunderstood what I was trying to say. &gt;As I've put in bold, whenever I'm randomizing the *alpha* value of each pixel (see code), my laptop falls GREATLY behind for some obscure reason. I wasn't complaining about the graphics performance directly, I was wondering why, in *comparison* to my desktop, my laptop has trouble rendering an image using the same code at a decent speed. I followed your advice and moved the code obviously causing overhead outside the loops. The new timings are: ________________________________________________________________________________ **Desktop** ([SPECS](http://i.imgur.com/sypHe.png) - i7 is 3.2 GHz, GPU is HD5870): drawNoise: 214 ms drawRGBNoise: 176 ms drawNoiseLines: 2 ms ________________________________________________________________________________ **Laptop** ([SPECS](http://i.imgur.com/FjQ7R.png) - GPU driver is up to date): drawNoise: **82900 ms** drawRGBNoise: 3496 ms drawNoiseLines: **1921 ms** ________________________________________________________________________________ The problem is still, as I tried to explain, my laptop is running the same code unnecessarily slow in comparison to my desktop PC, and that's what I don't understand, because my laptop has higher-end hardware than my desktop does. Sorry if this wasn't clear enough from the initial post. Anyway, after reading your post, you suggest that it's because of hardware acceleration. Now - correct me if I'm talking out my ass here - I know AMD GPUs have many, but weak, stream processors, where NVIDIA have few, but beefy, stream processors. Could this be the issue? My AMD GPU has many stream processors and is therefore able to draw many lines (my make-believe pixel drawing) simultaneously? I will try to implement the BufferedImage solution, thank you explaining it to me!
I used to have one of the most basic ones (I can't remember which one, it's been a few years), and upgraded as my needs increased. Looking at their web site, it looks like they changed things around. The plan I have is called "Advanced Max VPS", I can't find it anywhere in their web site. I can't remember off the top of my head how much RAM, bandwidth, etc. my plan has.
&gt;I was wondering why, in comparison to my desktop, my laptop has trouble rendering an image using the same code at a decent speed. Well I can't quite explain it. But I have noticed inconsistent performance with Java's graphics code on different hardware, or on the same hardware in different OSes. If Java uses different code implementations with different driver interfaces, that might not always work out for the best, like I speculated above about hardware-accelerating short lines. There's a couple of Java command line options that will hopefully track down differences like that. This will produce a log file of graphics operations: -Dsun.java2d.trace=log,timestamp,count,out:java2d.log This will produce a report (after exit) of how much time each thread spent in different methods. It's statistical rather than precise because it's designed to not slow things down too much, but it's still useful: -Xprof I think if you use opaque lines or switch to BufferedImage to plot pixels it will be fast enough that you won't mind the difference. But I agree, it's a *very* big difference and very odd. It's a bit much to blame Java's graphics API for all of it. Perhaps there's something you can tweak in the laptop settings, [like GrayDonkey said](http://www.reddit.com/r/java/comments/14r9cn/java_novice_here_have_noticed_funny_performance/c7fs2kw). Is perhaps your laptop's CPU or GPU is set to a crappy battery-saving mode? Are you using the same Java version, [in the same mode (`-client` vs `-server`)](http://www.reddit.com/r/java/comments/14r9cn/java_novice_here_have_noticed_funny_performance/c7fvv3h)?
Unfortunately, titles like advanced and beginnner are just in the eye of the beholder. There will always be those that know more than you, and visa versa. Instead, if you need to see where you stand among your peers, why not look at various interview questions for programmers? A lot of the time, it's not how much of the particular framework you know, but how you go about shaping your work. Questions like; (Junior Questions, as that's just coming off the top of my head) * Do you understand the concepts of OOP and put them into practical use? More importantly.. have you tried to put OOP into use? * Can you tell me the difference between Lists / Sets / Maps, and why you'd want to use one over the other? * What's the difference between abstract and interfaces? Later on, threading might become part of your knowledge, as well as different frameworks (Jboss, Glassfish, hibernate, etc..). Bottom line though, if even if you don't have intimate knowledge of a particular framework, as long as you can show how you'd go about shaping the project (pseudo code is great for this), you can hash out the details of your framework later
For java, it's when you can visualize how the code is interacting in the JVM through the lens of the java memory model. Threads, objects, and garbage collection. And use patterns without thinking. 
Great tutorial for a beginner such as myself. Thanks!
If I were to assign labels to programmers to quickly express to someone their skill level, I would use at least 3 levels (beginner, intermediate, advanced), not merely 2. And since I'm "in the industry", my labels are biased towards that context (as opposed to say, in an academic context). Beginner is a programmer whose work needs to be supervised and go through regular code review to make sure they don't mess anything up. Intermediate programmers can be given a typical task for your project, and you can trust that their solution will be reasonable. Advanced programmers are those who can improve the productivity of everyone else in the company by bringing in new tools, methodology, etc. from outside. She'd be the one who suggests we set up a continuous build server for example, and actually has the know-how to actually set it up for everyone, ending in a net gain for everyone as opposed to not actually knowing what they're doing, and bogging everyone down while they try this experiment that just didn't work out.
Advanced to me means delivering multiple applications through the full software delivery life cycle, including creation of design documentation, development, peer code reviews, unit testing, QA, performance testing, and go live. 
When you work on a team, do people generally come to you for help? Are you the one solving the difficult problems? Or Is there someone else that you go to for help? When you get stuck, who do you turn to for help? If you have a difficult design problem is there someone else you have look it for suggestions? Edit: for missing word and letters. 
* Beginner: public static Integer x = new Integer(0); * Intermediate: protected Integer x = 0; * Advanced: private final int x;
Advanced Java devs makes suggestions to [Spring](http://forum.springsource.org/forum.php) developers about how to fix stuff or add stuff.
Excellent thanks
I'm not sure these categories are all that helpful. Is the real distinction between advanced/beginner or good/bad? I've worked with people who just out of college produced vastly better code (literally orders of magnitude better) than people I've also met who've programmed for decades. I guess I'm now giving the impression that I think it's all about being gifted. It may be true that you can't learn to be good, but I'm honestly not sure about that. The thing is: having in-depth knowledge of issues like threading/GC etc, language details, and design patterns is not going to make you a good programmer, in and of itself. It's useful, certainly, even necessary in some contexts. But it's not what makes you a good programmer. A good programmer is someone who can deliver software by deadline that's mostly bug-free, performs well, and is relatively easy to understand and modify. Any other kind of programmer, advanced or not, is a nuisance. I also liked ivanhu's summary: a good programmer is someone to whom you can just say what you want, and they'll deliver it. A poor programmer is someone who needs hand-holding through the entire process. Another definition of a poor programmer is someone who given a complex task flounders, panics and makes a mess of things. I guess we've all seen software written by someone who has only a vague idea of how they got the thing to work by trial and error. That's a bad programmer.
When you've done a few big projects and realize you still don't know everything.
These Junior questions seems off. I've been learning java only for three months (that 13 lessons) and I could answer that, yet I feel and know I can't actually write anything of any practical use. What do Junior java developers actually do?
The Apache foundation has numerous Java projects that see plenty of real-world use. The Commons libraries might be worth looking at, as well as Tomcat and the like. For a side project, I'm digging into the [Mina](http://mina.apache.org) project to make it do things it wasn't intended to, and it's definitely a learning experience.
Yeah, its a large API (I believe the runnable jar is about 10 MB, but there's lots of code in there, most has been de-obfuscate, and the bukkit part is not obfuscate at all).
Yeah, I agree, so i I have started to use Eclipse and its awesome.
What this guy said. I've lead teams as well. And I would also add that advance programmers to me actively seek out solutions to problems they were not asked to do. 
Glad I can help, would love to hear how it turns out. Jersey is a good choice for a JAX-RS implementation
You should also take interest in languages that offer competitive type inference. When you write code you no longer have to repeat yourself twice all the time (no more Object object = new Object) and that bug you were talking about would still be easily caught at compile time. 
This seems great. Thanks again.
You could probably cross-post it to r/jenkinsci too :o)
Look at Jackson. Not only will it do the JSON parsing into what you want, but if you choose to do so you can write a richer object model and have it translate directly into that. You can then end up with a List&lt;Question&gt;, where a Question object has Challenge, Answer and Choices on it as fields. This then makes it much cleaner to work with in your Java code than working with JSONArray and JSONObject and so on.
This is not the main difference between an abstract class and an interface. These are the syntactic differences. The main difference between an abstract class and an interface would indicate why you would choose one over the other. An abstract class is used to implement the [Template Method Pattern](http://en.wikipedia.org/wiki/Template_method_pattern): where the base class has the implementation and provides abstract methods that the subclass must implement to produce a fully functional concrete class. This pattern uses inheritance to implement abstraction. An interface is used to implement the [Strategy Pattern](http://en.wikipedia.org/wiki/Strategy_pattern): where the class implementing the interface provides a capability which allows it to compose with a class requiring a collaborator with the capability. This pattern uses composition to implement abstraction. Usually, the Strategy Pattern is better because composition is more flexible, but it can be more verbose. The Template Method Pattern can be less verbose, but can introduce rigid class hierarchies. Hacks include using abstract to prevent instantiation of an otherwise concrete class or using an interface to be able to import a bunch of constants into a class.
Don't be sorry. Made me chuckle.
The point of the junior questions is that you understand the basic principles of the language. So if they seem easy, it's because they are meant to be. The next step (and a common one in an in-person interview) is to be able to write out a block of code handling simple functionality. A lot of the time it'll be on a white board, but the last one I went through was to simply reverse a non-empty string. &gt; What do Junior java developers actually do? Pretty much what any dev, junior or senior, would do. Front-end / back -end development, database integration, JSPs, web services, etc... The difference in what each is assigned is usually how critical the work is to the application(s). 
On the lower totem poll, it's nice to have higher ups that are willing to hear ideas. Last job I was at, it seemed like having an idea should only be kept to yourself, let the "Big boys" do that thinking for you... twas rough :(
Yeah, I imagined Junior post would mean you do the most basic things that cannot me done automatically, so that the Senior developers can focus on the important things.. I could bear with that..
&gt; people who just out of college produced vastly better code (literally orders of magnitude better) than people I've also met who've programmed for decades. That's because they've been taught properly early on. Those with the decades of experience are extremely, if not impossible, to break their bad habits (as I bet you can attest to). &gt; I guess we've all seen software written by someone who has only a vague idea of how they got the thing to work by trial and error. That's a bad programmer. Hey! I like my shotgun method! In all seriousness though, I only use this approach in the case that every external information source is exhausted (forums, colleagues, acts of voodoo). Once something sticks, its EXTREMELY important to go back and understand why it works now and refactor your code so the next guy / gal can understand it as well. That, imo, makes a good programmer
- abstract classes let you inherit code, but lock you into their class hierarchy - interfaces allow other classes to implement more flexibly, but don't inherit any code. (zargxy's post gives details where I just say "more flexibly".) Agreed w/ zargxy, that blog post doesn't talk about the main difference. One tip: make 'em both: always make an interface, and if you have common code to share then *also* make an abstract class implementing that interface. That way clients can choose whether or not they want to extend your class-hierarchy. (And if they really want to re-use your code but they are already extending some other class, then this approach also makes it easier to use the Delegate pattern, to achieve that.)
I use it at work. It is my job, and has been for the past (almost) two months. Best way to learn/keep up with a skill? Get paid to do so. \^_^ Edit: fixed emoticon
Minecraft is written in java, and while I haven't kept up with it, so was Bukkit (didn't they get hired by mojang?). Used to be that you could write your own plugins but this may have changed. Android SDK is written in Java with their special JVM iirc. When I was bored I used to create an IRC bot using the PircBot framework. It was easy and it allowed you to do random fun things like have the bot insult random people, have it fetch simple google search results, have it tell you the time/weather. There's a lot you can do with it.
Lots of times it all the String concatenation that you are doing that make things so ugly. Consider adding some toString methods to all the objects you are printing out.
[Take a look at any given Java project on GitHub](https://github.com/languages/Java), the majority will have XML files. [Compare it to any given Python project](https://github.com/languages/Python), note the lack of XML.
If you are planning on getting a vps server, avoid OpenVZ, go for Xen and KVM. I got some bad experience (the very same webapp and database on OpenVZ uses 700+Mb and 300Mb on KVM). If you are searching for cheap solutions keep an eye on [lowendbox.com](http://www.lowendbox.com/)
This looks beautiful, lightweight, easy to use and well designed. In other words, nothing like the built in types it replaces! I specially like the immutability bit and the builder-style modifiers, it reminds me of functional programming in Clojure.
It is based on Joda-Time, which is excellent, and corrects a few design flaws that became apparent as users and developers got more experience with Joda-Time. These design flaws are nothing too serious (Joda-Time is a pleasure to use compared to the standard Java Date &amp; Time API), but I agree it was a good opportunity to try to fix them.
Excellent introduction to the API, thanks for sharing this with us!
Its quite an advanced topic, so I left it out of this introductory article, but actually JSR-310 does have a way of accounting for this kind of thing. The now() factory methods all have a version parameterised with a 'Clock'. A clock allows you to introduce your own timeline. For example you could implement google's time smoothing algorithm in order to avoid leap-seconds, or you could use your GPS signal and knowledge of physics in order to not make assumptions about independence of time and space! You'd have to code a custom clock yourself, but fundamentally all of your business logic that you would write against the API would still work.
I've not used that IDE or editor before, but try looking for an option for syntax highlighting.
http://i.imgur.com/khRTC.png The int looks like 1 pixel darker than the others, but it should be bold as in much bigger. You can also notice both preferences are clicked. Very odd, as I believe it was working before....
If you're refering to maven/ant build scripts, that's like saying that carpenters are obsessed with metal just because their tools make heavy use of it. Also, I asked for a source, not a hint as to how to perform my own survey.
Maybe try something else? If you don't want to use a heavyweight IDE like eclipse or netbeans, check out Dr Java. That is my schools default IDE for beginner classes.
I said novice...... I am using eclipse soon actually. This is just for my free time, and I had it installed. Still a solid IDE.
That was not a ramble, that was really useful insight into how you and your department operate. While I doubt mine is exactly the same I can look into where there are differences and use this to fill in the blanks of some areas that I am lacking. Interestingly I am trying to learn Haskell at the moment :D
You'd think a webpage solely about a colour theme would include a screenshot bigger than 2 inches.
I wanted to use this library on a project last year that needed lots of date-time manipulation, but the boss never approved. would've made life so much easier. Looking forward to the explanation of how JSR-310 handles timezones, and how a DateTime with a timezone can be OR-mapped to an ANSI SQL type.
I use Notepad++ for E-V-E-R-Y-T-H-I-N-G (except the stuff I use IntelliJ IDEA for), and i LOVE it.
Good tip, always practise what you learn in the book. Once you cover a new topic, write some code, practise it, and then attempt to break it and improve it. Learning from a book can only get you so far, you will only really understand topics when you have implemented them. Keep it up :)
I second this motion. Java2D isn't particularly suited to serious game development, but for starting/on-the-side projects, I found it super-easy to dive into and figure out!
Try adding bonuses for guessing correctly multiple times in a row.
I haven't done JavaFX before, but is there any way to architect your app to abstract it away? Isolating it from the rest of your code? Preferably behind some well-designed interfaces so you can swap it out later if you want?
DUCAT provides an extensive training in JAVA Technology and Job Assistance in order to ensure a guarantee of 100% placement for its students. Ducat provides training in JAVA (Core Java, Advanced Java /J2EE, STRUTS FRAMEWORK, HIBERNATE, SPRINGS FRAMEWORK) by Experienced Faculty. This training is also supported with the help of live projects in JAVA Technology which provides industrial exposure to the candidates &amp; helps the Candidate to finding a suitable job in JAVA. Ducat provides training by experienced Industry Professionals. We have a dedicated placement cell which provides placement in JAVA to all the candidates.
I would also like to know if there are any non OO options.
Ahh. Much better. :-)
When you want to make use of graphics, 2d or 3d, you can use LWJGL that has an cool OpenGL binding. :)
I've been trying out [Slick2d](http://slick.cokeandcode.com/) the last few days and liking it so far.
The question is whether you want a desktop app or a webapp. Java Swing for the former, Oracle tutorials give a great help, and NetBeans GUI builder is an aid if you're going to wire something together. The tutorials are still needed to understand what is the container, layout/layout manager, event and eventlistener. For the latter, well, it all depends; perhaps I'd opt for the IceFaces, or forget Java altogether and use Ext.js (especially if I'd need diagrams). 
This is something I dropped into the Eclipse developer mailing list. They need to redesign all icons. Don't know when they're able to do that.
One cheap solution is to find a VPS provider. I paid $5/month for awhile for a VPS w/ about 1024mb memory (drawback: no swap). This was enough for Tomcat with 512mb, low traffic mysql, etc.
Thank you all, I will take a look at slick2d but I will probably end up using lwjgl, I don't want to use java2d because its a little too basic for what I need.
Slick2D is built off of LWJGL, and you can make LWJGL calls with Slick2D. If I were in your shoes, I would use Slick2D and, when needed, use LWJGL. You'll have the best of both at your fingertips.
Agreed. Unless there's more on subsequent pages (the next couple were ensuring setup is correct) the linked article is more the (very brief) origin of Java than its evolution - nothing about the massive performance leap that the JIT compiler represented, nothing about the introduction of generics, nothing about the improved garbage collection algorithms, nothing about the future plans (closures etc), and so on. As an analogy no-one no-one in their right mind would title a picture of a neanderthal "Evolution of humans", and for the same reason the title of this thread is misleading. Admittedly the article's got the release dates for the different versions, but there's no discussion about what each release brought to the table - i.e. nothing to indicate what evolution had occurred.
a very cool start, a very useful program also! you can always save yoru projects and use them in later chapters as well. an example: exceptions. once you get to exceptions, you should use your guess game project and add exception handling for invalid input. for example non-numeric/alphabetic input instead of numbers. or negative numbers or out of 0-10 range :) 
This dude posted a great tutorial. It's not a GUI tool but it's not hard to follow. [How to make in Java - 'Minecraft 2D Platformer'](http://www.youtube.com/playlist?list=PLA29D47E3D0900DC3&amp;feature=view_all )
I always made the same game and loved to add onto it with a few things. Like, allow the user to pick the "range" (IE: a number between 1 and X, where the user enters X). You could then have a set number of guesses based on the range (the higher the range, the more guesses you get). I also made it track "high scores" to learn about file read/write. Congratulations, it's always fun to write a program (even a really simple one) that does something you can actually see the result of.
I've been developing in Java for long enough that I was using several xterms running vi, another to compile, and a browser with the JavaDocs. XWindows was my first IDE. :P When I first started using IDEs they seemed like little more than a text editor with a (really bad) WYSIWYG gui tool and passable debugger. In some ways they were a downgrade because now I couldn't see multiple files as easily. Boy have they come along way. Modern IDEs can make **you** massively more efficient and the good ones are a joy to use. I have used many IDEs over the years. I won't list pro's and con's of each as most I haven't used in years. * **VisualAge** - Pretty sure it was the SmallTalk based version. Before Micro Edition and before Eclipse. Hated it. I'd have rather used vi. * **JBuilder** - Several times over the years. Better than old school VisualAge. But it was still pretty awful at first too. It did get a lot better over the years. When TogetherJ was integrated with it, that was probably it's pinnacle. (aside: I miss TogetherJ being a standalone app, instead of an Eclipse Plugin. Maybe it has gotten better, but the first edition of the plugin was bad.) * **NetBeans** - I really liked NetBeans for a time. But as the project grew NetBeans started to struggle with the size of the code base. On occasion I'd download NetBeans and try it out again, but never felt compelled enough to switch back. * **Eclipse** - When I first tried Eclipse I flashed back to VisualAge. I could feel the influence the old VisualAge had on Eclipse and it soured my view of Eclipse initially. I persevered and it came to replace NetBeans and JBuilder for me. It was cheaper than JBuilder and snappier than NetBeans. It has a lot of useful productivity tools, inline JavaDoc, imho a better debugger (it could navigate down into library objects better than NB at the time). I liked how NB works with projects and external files better (and still do), but there is a lot to like about Eclipse. Including a large number of useful plugins. * **IntelliJ IDEA** - Just made the switch and I'm in love. Never fallen in love with an IDE this quickly before. The VCS integration is wonderful, never quite got it working right in Eclipse with either StarTeam or TFS. I find myself trusting the re-factoring tools a lot more than I did in Eclipse. I find a lot more issues (EDIT: in the code I am editing) with the base Inspections than I ever noticed with Eclipse+plugins. That is invaluable maintaining an aging code base. The inspections also offers a lot of great suggestions to make your code cleaner. Not Java related, but if you plan to do any Groovy it is really good at it. I also find it does a better job at editing JSPs, js, xml, and referencing between languages. I do think Eclipse's context menus are better laid out. I would use the mouse a lot with Eclipse, I find learning the key-shortcuts is needed to get to options as quickly in IDEA. I'm fine with that. In the end I don't think you can really go wrong with the current state of NetBeans, Eclipse, or IDEA. My choice is IDEA currently.
I agree with you I do not think there will be a shortage of java programmers. It seems to be the language all University level programs teach computer science with... At least in Virginia, besides maybe GMU
What would happen if you wanted to make a buff that gave you both a Strength and Life buff?
Thanks. If it is any sort of endorsement I have been liking IDEA so much I shelled out the money for a personal license to do home Groovy development. If I find the time, I've been wanting to play with Scala to mess around with a hardcore functional language, the Akka project, and to see how IDEA does with the language. I do miss a good UML tool. TogetherJ was the only one I was ever pleased with the code it generated. And storing the model information as tags in JavaDoc style comments was brilliant. No longer did you have to manage 2 artifacts (code and model). It was not perfect at round trip (generate-&gt; reverse-&gt;generate...), but it was leagues ahead of Rational and any other tool I have played with. Rational Rose was... cool, I guess, at first. The names behind it put me in awe and convinced me to try to make the best of it. IMHO it suffered from a lot of issues. It required far too much maintenance to keep it happy. In the end I feel it hampered productivity more than any thing I can think of having used. I learned a lot using it. Probably nothing you wouldn't learn from using any UML tool. That's a project that I can't imagine was "eating its own dog food" and would have tremendously benefited from it. Anytime I hear of any design tool evangelist (UML, DB, or otherwise) say you should do all your design in this tool and only forward generate, I think they have spent far too much time in academia or have only worked on small short-lived projects. When you have a production issue and need to fix it ASAP, you aren't going to pull up a design tool to make the minor changes to a single field, method, trigger, or whatever. Just my 2 cents though. Last time I played with ArgoUML it was decent for a free tool to just layout some ideas. I never used it to generate code. I'll have to check out Papyrus/EMT. IIRC, I think I tried it once, a while back, it may have come along way in the time.
Haha add in a feature that just talks smack, I like it
An Abstract class might be what you want. You can't instantiate it like an interface, but you can inherit it so you don't have to re-write code like for damaging an enemy.
Not so. If we have something that can interpret something as nuanced as sarcasm we will likely have become far in the field of artificial intelligence. Something as seemingly simple as this is something we are almost incomprehensibly far away from.
It is an honest question if there are any functional-leaning libraries
this is the most retarded thing I've seen in my entire life.
I recommend exploring the [Java section of Github](https://github.com/languages/Java) and contact the owners of projects you find interesting.
I was using javafx 2.0 or 2.2, so the new version. By messy I mean that instead of keeping the gui code in the gui classes, it was tied into most of the game classes, which made it hard to follow in places where it should be easy.
Probably an ArrayList. To elaborate, you have several Collection classes which are capable of storing a variable number of objects. The most important interfaces in the Collections framework are List, Set and Map. Since the other two don't keep track of order, a List is preferrable in this case. Of the List classes, ArrayList is probably the most performant and most well-known. More information here: http://docs.oracle.com/javase/tutorial/collections/
This is possible with an array, but you either need to make your array as big as the biggest possible amount of numbers, or create a new array every time the amount of numbers goes up.
I like designing, maybe not as my main work, but it's useful and opens your mind when you get to code. When I have to design diagrams for DB or UML courses digitally (on a computer), I usually end up angry, because it's tedious, too tedious. I ended up buying a month subscription of Lucidchart, which made designing easier but didn't have code generation. Now, our teacher for UML (and other bits he teaches for our own good) says we should use Papyrus. It is on version 0.9.* and he says it's not stable enough and a bit rough around the edges, for example, having no grid to "glue" design elements and no autorouting for relationships (dependecy, aggregation, composition, hierachy). For now, the best thing I have is paper and pencil, then do it all manually, which is good, but could be better. Also, about Groovy and Scala. I know both of them are JVM languages, that Scala is compatible with all that is Java (incluiding things like LWJGL) but is more "short-typed", abbreviating a lot of things, and has no dot-colon ending lines; I want to try it when I have time, probably after ending the two-year course. I know less about Groovy, what is it like compared to Java?
I would only use an array if the maximum number of numbers generated will be the same each time. Otherwise, ArrayList is the way to go. Just be sure you understand how to properly use arrayList.size() in for/while statements, otherwise you'll end up with out of bounds exceptions.
Wish I had that again.
http://gyazo.com/83c7846effc13de1470e3860b36d9c21 this is what i need help with 
&gt;I'm more concerned with how it will help me buy a new boat. Larry ~~can~~ will have his cut. FTFY
It is like a scripting language primarily aimed at application build process. Why would you use it - * because it makes your build process consistent/repeatable on all machines * you are not dependent on IDE settings to build * it can ensure all tests are run and passed before creating deployment files * can integrate the build process into a continuous build system like [Jenkins](http://en.wikipedia.org/wiki/Jenkins_%28software%29) 
Ant is a way to script your builds. You create (or use) tasks to compile, test and assemble your source to get some kind of artifact. Since it is mainly used for Java projects, you'll mainly end up having jar-files as the artifacts it produces. You don't have to use it but most IDEs (silently) create ant tasks for you so that when you hit "clean and build" (or similar) it actually just runs the ant-script. If you want to do things not directly supported through the IDE, you will want to edit the ant manually. There are mainly one "competitor" to ant in [Maven](http://maven.apache.org/), also created and maintained by the Apache Software Foundation. I'm not sure how blueJ handles build configuration so I can't say how it differs from ant (maybe it uses ant behind the curtains). However, most IDEs will create ant scripts behind the scenes (or maven if you tell them). I'm not an ant user myself so as I said, you don't have to use it. But you should probably learn at least one of the two main build "systems" (maven *or* ant). The benefits of ant depends on what you compare it to. Compared to manually building by calling javac from a command line it has obvious benefits in that you can write the "commands" once and then just run the script instead of having to first call javac, setting the classpath and then jar the result, and run tests on the produced classes. **TL;DR It's a way to manage your build.**
no one is going to do your homework for you ... Protocol is to show people what you got and where you struggle, then people might actually help you. Quick google search for "java circular list" brought me everything i need to know.
None.
I'm sorry you got downvoted for that.
Gradle is my favorite too, really good build tool.
It would also be quite simple to turn the value parameter and location parameters into arrays of ints to store multiple effects.
Whoa!! I had no idea. I thought nvidia drivers were x86 assembler. Thank you for the lesson. 
Type erasure. At the moment, at runtime, there's no difference between `List&lt;String&gt;` and `List&lt;Product&gt;` to the JVM at runtime.
&gt; So, I've recently heard about Apache Ant. **I cant really find anywhere that explains exactly what it is or a good tutorial of how to use it.** Is it necessary for me to use it? What benefits does it have? [Bull](https://www.google.com/search?q=apache+ant&amp;aq=0&amp;oq=apache+ant). [Shit](https://www.google.com/search?q=apache+ant+tutorial).
I hear nothing but what Oracle says about JavaFX. So who knows?
There are plenty of open source tools that have lost popularity and are still maintained, yes. Apache has quite a few projects like this, yes. [Currently more people use Maven than Ant](http://zeroturnaround.com/labs/the-build-tool-report-turnaround-times-using-ant-maven-eclipse-intellij-and-netbeans/) [or this poll](http://discursive.com/2012/03/10/a-quick-poll-whats-your-build-tool-right-now/) [or this one](http://zeroturnaround.com/labs/developer-productivity-report-2012-java-tools-tech-devs-and-data/) show a clear lead for Maven (like it or not, I don't like Maven) and google trends [ant](http://www.google.com/trends/explore#q=apache%20ant&amp;cmpt=q) versus [maven](http://www.google.com/trends/explore#q=maven&amp;cmpt=q) for whatever that's worth.
It's totally possible to do a standalone, yeah. I actually played with it a couple of weeks ago and built an app mockup for a class. The CSS and SceneBuilder were really nice and the app looked great in Windows and mostly ok on Ubuntu. I just wanted to get an idea of how long term of a solution people thing it is, as I'll likely be building and deploying that application in JavaFX pretty soon.
At this point, it has to replace Swing. It just has to. Swing is so old and ugly that it cannot last on the desktop for the next several years it'd take to make another replacement. I've done a little with it, but intend to go into more detail with it next year. What I have seen so far though has been quite impressive. It looks so much better, especially on Linux, where Swings font handling was often horrific. I do think it is however still very much a work in progress. It was only added to the default Java installation in Update 6. Don't expect to see many JavaFX apps in the wild until maybe a few months after Java 8 is released. It's entirely possible the changeover will be phased, as it's relatively easy to embed JavaFX components into Swing applications.
It doesn't seem half bad from a development point of view. But I have never used a JavaFX application on the web or anywhere else. I have seen a few applets out in the wild. Flash apps, obviously but nothing on JavaFX.
What is wrong with 'D' unless I am reading this wrong. If you declare a method 'protected', you can use that instance method in other classes. And 'E' has strange wording. Why is it relevant that the method has a reference during execution, does it mean it doesn't have a reference at compile time? 
Reset the x/y/z co ordinates of the projectile upon collision.
I guess I'll never be a real Java developer, since I can never answer these types of questions. I'll just go back to developing working applications.
On the second closer look at node.js, I must say that is much better than Java! I am in love sir(with node.js). Thank you for your advice!
http://instantostrich.com/
In addition, giving your method no access modifiers makes them *package access*, i.e. all classes in the same package can access them, which violates D. edit: downvoters should go check their java knowledge.
This is only true if you make use of the default look-and-feel.
This was fixed in Java 7, but not back ported. People running Java 6 should really have been looking at upgrading to Java 7, months ago...it was supposed to be EOL already (it's now scheduled in Feb 2013).
http://en.wikipedia.org/wiki/Class_%28computer_programming%29 http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html http://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29
Using the native PLaF gives a sort of uncanny valley effect. :-/
1. Only true if tail-call optimization is provided. 2. You didn't read the article.
Great site!
True, but there are lots of so called Java developers that even don't know how to configure the native PLaF. While it requires a bit of designer skills, Swing is fully customizable. The blog series done by Roman Guy while working at Sun were very interesting. As his book, which summarized the blog entries. http://filthyrichclients.org/
If you use Linux and OpenJava, first try to install Oracle's JRE on the server and test it. IMHO the networking is faulty with OpenJava; once I wrote a server-client app using direct TCP/IP connections. Many clients were supposed to connect, but only the first succeeded, the other clients had to wait until the first disconnected. After installing Oracle JRE, the problem has gone, the server was able to accept multiconnections.
So many people are gunshy about upgrading to java 7. Not sure why, the empty angle brackets alone are worth the effort. 
This is kind of a lame summary of Java's history, focusing on trivia and not the substantial and really interesting parts of the story. Sun, the company, was originally founded to get in on the bandwagon of low(er) cost workstations distributing computing power over the network, rather than the centralized computing power of minicomputers and mainframes to which you hooked dumb terminals. Remember Sun's tagline, "the network is the computer"? Java was the result of research in this area, expanding the horizons of networked computing from between computers to between computers and consumer devices. The original application was a hand-held home entertainment controller which connected to the cable network. Unfortunately, as these things usually go, the technology was far too advanced for the limited hardware of the time, so it never gained traction. However, Java came just in time for the Internet revolution, which created a huge distributed network, ripe for the kind of rich network application that Java promised. Netscape saw the opportunity here incorporated Java technology, resulting in the applet. The applet catapulted Java into the public limelight and allowed it to expand from applets to other areas of computing technology. Java's history is all the more interesting in how it relates to current computing trends. Java was born for the cloud and devices like smartphones and tablets. Unfortunately, Sun's vision went far beyond their capability to deliver and their terrible marketing killed any hope of popularizing their ideas.
Not true. The default LNF was the worst, but none of them are good.
Okay, I've found this: "Most modern releases of operating systems contain fixes for SYN-based flooding attacks" [here](http://www.iss.net/security_center/reference/vuln/SYNFlood_Protection.htm). So try to switch off the built-in firewall (or if you have your own installed one then that).
That new Files API sold it for me
already did that. i said it works on a SMB file transfer. dunno why it doesn't work on the java program. both on the same PC. thanks anyway. 
There're no good answers, however when I have to test the applicants, usually I would like to see how they think, how they try to solve problems. So if you don't know something, and it's not a yes or no question, don't give up immediately; instead, tell them that I have no prompt answer but I'll try to find it out. Then start to think aloud, and dare to ask. Do not try to give complex answers to simple questions if you think there's a simple answer. They usually don't set up traps, but even if they do, you might tell that 'I think the simple answer is this, but if that's not what you'd like to hear, I might try to find the tricky answer". If they present you a problem and asking for a solution but you discover that something is missing from the description of the problem, then dare to ask for more details. If you could, you might want to suggest alternative ways, but then always leave an open alternative too. I've seen many times people trying to accomplish the impossible mission instead of just asking a simple question. Be open and honest, the ink is still wet on your paper and they know that, so noone expects you to know every itsy-bitsy details of Java. But it's better not getting the job than being fired after two months. Be prepared that by the end of the interview, it might be your turn to ask questions about the company, the assignment, the future colleagues, and so on.
Is it solved on plain Java 7 or or one of the subsequent update patches?
well, only java 7 release notes say that protection against syn flood attack is added. So if you have earlier Java, then one might think only that witches do exist and are flying all around your setup. No better scientific answer exists then...
Because a lot of software isn't certified for it. I as a developer would love to use it but large complex software like Hadoop isn't certified yet to use it. Certifications make large companies feel comfortable.
The first few releases were less than ideal, crashing things like Solr/Lucene: http://stackoverflow.com/questions/6894104/how-serious-is-the-java7-solr-lucene-bug http://searchhub.org/2011/07/28/dont-use-java-7-for-anything/ People had good reasons for being gun-shy. To be fair, it took most people quite a bit of time to move between every release.
Isn't Oracle planning on getting rid of PermGen entirely?
Never thought about that lol, I'll guess i'll go at it, any suggestions at a small project? 
I learned the basics from a guy called TheNewBoston. He goes over everything at a slow but steady pace and always reviews everything covered at the end of the video. He has 200+ videos on Java, and split them up into four sections: beginner, intermediate, game development, and game development with Slick2d. I highly suggest [to watch his videos](http://www.youtube.com/watch?v=Hl-zzrqQoSE&amp;list=PLFE2CE09D83EE3E28) :)
Can you post an [SSCCE](http://sscce.org/) of your code?
A very good place to start would be on Oracle's Java [tutorials.](http://docs.oracle.com/javase/tutorial/)
Im not so sure about watching him I mean his lessons are great but the order he teaches things I think are a little off. I think you should read the book Head First Java its a great book just takes a little more dedication plus it has several projects and games it gives you and if you need a little more about the subject that you are learning in the book watch the new bostons videos to help you understand. This is how I ended up learning the language.
Try to work on some personal projects. Learn as you go along and try to fully complete a few projects. Do you know the next class that you'll be taking?
* [Java meetups](http://java.meetup.com/) - sometimes being around experts can help * Look at other's source code [https://github.com/languages/Java](https://github.com/languages/Java) - might be too advanced, but couldn't hurt * have a project in mind - doing something without a goal makes it hard to know if you are making progress (make the goal attainable) * books: [1](http://www.amazon.com/The-Java%C2%BF-Programming-Language-Edition/dp/0321349806), [2](http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208), etc There are so many ways to learn this stuff you should pick what works best for you. 
Data Structures next semester. What project ideas do you recommend?
Start with a scripting language so there's a smaller chance you'll get bogged down in details. Try to write a script to download ~~porn~~ desktop wallpapers from some website. I did this when I was a kid. It's a great goal to keep yourself motivated. 
Algorithms and datastructures? If so it doesn't really matter what language you use. I used Python to get more comfortable with multiple languages since we've used so much Java elsewhere. But if you want to get better at Java I suggest the same as melchyy over here. Build something your self, complete something more "grande". For example, try building a game without using any existing game engines. Try and make the source as clean and structured as possible, because that's really the next step after mastering the fundamentals, large sources really forces you to learn a few new things.
Relevance of statements and logical reasoning are the foundations of strong AI. You are entering a problem sphere tackled by people who've spent their life's work inching closer. You should start with the foundation textbook 'Artificial Intelligence: A modern approach' - http://aima.cs.berkeley.edu/ This is an AI-hard problem
That still wouldnt get rid of leaks associated with classloaders. All it takes is one long-living object to reference a classloader that should be GCed, and the problem stays. In this case the keepAliveTimer thread (see line 47) in the [KeepAliveCache](http://javasourcecode.org/html/open-source/jdk/jdk-6u23/sun/net/www/http/KeepAliveCache.java.html) class is the one that references the web-app classloader. The thread stays around even after the app is undeployed, preventing the classloader from being GCed. The movement to get rid of the PermGen would be welcome. JRockit operates without one, so a precedent already exists. I just hope it would make it easier to reclaim memory consumed by Class instances, and thus allow this space to be reclaimed irrespective of the collector used. AFAIK, the CMS collector is the only one capable of unloading classes eligible for GC, and requires the setting a special flag to start doing so.
Check out Bucky's tutorials on youtube: http://www.youtube.com/course?list=ECFE2CE09D83EE3E28 This is where I started. After you have learned the basics and understand the concepts of programming check out Project Euler: http://projecteuler.net/ Some of the prgramming puzzles on here are very advanced but some are very basic. Ranging in difficulty this is a good place to practice. Lastly, as someone who programs java for a living, I have found that the best practice comes from building projects with constraints such as; Conways Game Of Life With Less Than 5 IF statements; Countdown Game (British TV show) Without using prime numbers; ect ect This forces you to think around the box and also teaches you that whatever code you write is disposable and more code is bad less code is good. Rattled on a bit here, PM me if you want any more advice. 
&gt; Where? I see no mention of ClassLoader in there, which I assume means it's subtler than that. It's a bit subtle, but only because of the confusing explanation on the blog post. When the keepAliveTimer thread is started, it's context classloader is set to the current thread's context class loader. For a web app, that happens to be the web app classloader. The KeepAliveCache instance can stay around for longer than the web app. If the app used the java.net.URL and the associated HttpUrlConnection classes to make an outbound HTTP connection, then this leak occurs. About the points on fully unloading classes, I don't disagree with you especially on the mathematical possibilities on when a class should be unloaded. My only point is that among the current collectors, this is not even possible for the algorithms chosen by the JVM on startup (unless you configure it). While this is fine for desktop apps, I don't like it that the JVM might have to restarted just to have a cleaner and smaller perm-gen with lesser memory fragmentation.
&gt;It's a bit subtle, but only because of the confusing explanation on the blog post. When the keepAliveTimer thread is started, it's context classloader is set to the current thread's context class loader. For a web app, that happens to be the web app classloader. The KeepAliveCache instance can stay around for longer than the web app. If the app used the java.net.URL and the associated HttpUrlConnection classes to make an outbound HTTP connection, then this leak occurs. My first thought at a solution: make a `ClassLoader` that has a weak reference to another, delegates to that only if it hasn't been collected, and delegates to the system `ClassLoader` if it has. Then use that as the context `ClassLoader`.
You could extend this to a hangman style game, will require you to use many different programming techniques to verify answers ect. I found this to be awesome practice. Gratz on the game BTW, out of curiosity does your random number gen select the same numbers everytime you start your program?
If you struggling for ideas, check out [r/dailyprogrammer](http://www.reddit.com/r/dailyprogrammer/) and take a look at the easy ones. They should give you plenty of small projects that should help you learn the fundamentals.
I wouldn't recommend TheNewBoston as a learning resource, he doesn't show Java in it's true elements and uses ridiculous examples to explain things. ie. as andrewphf said, 'apples' as a class? Also, his Game Development Series isn't even close to what he calls it, it's nowhere near Java Game Development!
It's not a bad idea. I'd add an HMAC+timestamp to the cookie, in order to avoid session forgery/hijacking.
I agree with the idea of secondary store for the sessions, wondering if they explored that idea.
Some common ones that I used were; * What are the usual team sizes for projects? * What is day to day life like at the office? This took me awhile to get through my skull, but it's very important that you feel comfortable at your future job. By coming up with questions about non-work related topics, you show your (potential) future employer that you'd be interested in the long haul &amp; the company. After all, a job is a two way street; The employer gets to use your head, and you've gotta make sure you'll enjoy yourself there
I actually just finished a data structures class. Do you mind me asking where in the country you're from? And I have a program or 2 that can help. 
I tend to design my applications without HttpSession in mind. Putting state outside your application layer (e.g. container managed session) does lead to too much complexity. Putting state into the cookie is much worse. If my application uses state accross requests, it is part of my application domain.
I don't think this is an issue with eclipse. I would suggest changing something with your desktop environment.
Moved to TestNG and not looking back. Was frustrated by CPL license, missing features, and poor quality of JUnit code. I am perfectly happy to see JUnit fade off into the sunset along with SVN, CVS, Maven, etc. 
My first question was how is this different from Groovy? I found the answer here: &gt; InfoQ: How does Xtend compare to Groovy or Scala? &gt; Sven Efftinge: Groovy is designed with a similar goal but unfortunately took the short route. Besides limitations in the IDE support, the lack of static typing has a lot of implications on Java interoperability. For instance, overloaded methods are resolved differently in Groovy than in Java, which can be very surprising. The complex meta object protocol is not only very hard to understand and to debug, but is one of the main reasons for Groovy's bad runtime performance. &gt; Xtend allows to build expressive libraries such as builder APIs and other internal DSLs without trading static typing, performance or tool support. &gt;Scala is an ecosystem on its own with a huge library and its own frameworks. I like many parts of the language although I think the type system is a bit over the top for mainstream development. Xtend is definitely influenced by Scala, but focusses much more on Java interoperability and IDE support. [Source](http://www.infoq.com/news/2012/06/xtend-release-10) 
What's your maven replacement? EDIT: Ooo, a downvote. The comment wasn't meant to be rhetorical or snarky, I'm literally curious what you're using.
&gt; Why do you like to use java? Still updated by oracle, lots and LOTS of libraries out there, Eclipse is very nice to work with as an IDE. Summed up, it's because there's a ton of support for the langauge &gt; What drew you to learn java? Honestly, I never touched java until my first job. They were originally looking for .NET people, and I ended up being put onto Java. Been on it ever since. &gt; What makes java easy/hard to use? Easy? It's the 3rd party developers that make Java life easier (Eclipse, JUnit, Netbeans, Jboss, jMonkey, etc..). That being said, it makes it hard to use because there's tons of different ways of doing the same thing. Unless you have a firm grasp of the language, you can find yourself bumbling about way too often
1) I don't really like Java, I think it has a lot of weaknesses and can make simple things difficult. However, it's the best tool for the job in my case, and fills the gap between high and low level nicely. 2) As part of my degree. 3) Easy: mostly portable, garbage collection, huge standard library, a library for almost everything. Hard: huge standard library, verbose, people who take abstraction too far.
I like ant + ivy.
Me too. A few too many projects full with Maven plugin magic. :(
Lots of good links on here already. I just wanted to add this bit of advice. Don't just read, *write*. Even if you're going through a tutorial, type up the examples. Run them. Tweak them. Break them, fix them. And then as soon as possible find a small project to work on. When I interview people for programming jobs, it's always a bad sign if the only programming they've ever done was in association with coursework.
For very small projects I still use [Ant](http://ant.apache.org/). For anything bigger [Gradle](http://www.gradle.org/) is the way to go.
&gt;Why do you like to use java? Because I'm paid for it. I like the strongly typed nature of the language, the verbose nature of the language doesn't bother me, and the JVM plus some of the associated tools are fantastic. &gt;What drew you to learn java? Career development - I was in support at a software company that used Java, so learning the language was the way to progress my career. &gt;What makes java easy/hard to use? Easy: GC, range of available libraries (particularly the Apache ones), range and quality of IDEs and associated tools, solid application servers for web development, plus a massive community - if you're having a problem the chances are someone else will have had it before and got an answer through a forum/stackoverflow. Hard: Very object oriented, almost to a fault. 
Gradle feels like "I don't understand maven, so here's all the programming you wished you could do.. ooops now you have ant" to me. 
I did not say that Gradle is superior to Maven. Maven (3) does a lot of things right when it comes to to managing larger projects. My company uses Maven for this reason: it is very conventional. In the end, it comes down to the maintenance issue and the corner cases of your project. With Gradle, I'm more flexible. I have much more power at hands to configure my projects. Where Maven forces me to write Plugins in Java, I can extends my configuration or tasks using Groovy. I cannot do that this fast using Ant or Maven. But that requires Groovy and Gradle Internals knowledge. We will see what is working out in the long run. Technologies live or die by their adopters.... +1 though ;)
I thought the same. I don't use Xtend but in Scala although the parathesis are (sometimes) optional I tend to leave them in. I also try to avoid the [cryptic underscore](http://www.codecommit.com/blog/scala/quick-explanation-of-scalas-syntax). Just because you can doesn't mean you should. Edit: typo
1. The depth and breadth of the libraries/tools/frameworks/literature 2. PHP was too slow and C/C++ was too much work. 3. See answer #1
probably the most important/common one is test dependencies. testng does everything junit does and more, why use junit?
No, JUnit specifically has as a goal that you cannot do dependent unit tests. I completely agree with this thought. If your unit tests are dependent on execution order you have done something wrong in the design of your system.
oh, I see. you're right, then, my mistake. I agree with that philosophy and all my tests are written that way. but it's nice to have the ability to make dependent tests those rare cases where i want them. here'sa good example - critical slow-running tests that the business wants and are poorly designed. they can be optimized by chaining them until they can be rewritten the right way. if you use junit, you don't have any easy option, you wind up writing more code yourself instead of leveraging the framework. have seen lots of people write the 'one time setup' method too, instead of just using @BeforeClass (dont know if junit 4 has this or not... it may. but it didnt exist for a while when testng first came out)
Gradle has conventions, very close to maven conventions. So unless you want to make it Ant, you can make it Maven and be less verbose. And then you can also be more flexible, and actually add code to your build. Much like the Ant Runner for Maven.
Sure, junit 4 was a great breath of fresh air and made junit basically interchangeable with all the good ideas testng brought to the table. Your data dependency problem is better solved by tools which directly address that, like DBUnit and kin. Grails has an awesome fixtures [plugin](http://www.grails.org/plugin/fixtures) that really needs to be pulled in to a more generic toolkit. Anyway, with this you never really think about how hard it is to load data because it just isn't. Also... while I understand that no one ever has time to fix all the technical debt of a project, the case you outline is really begging to be fixed instead of patched. Damn schedules keep us from doing everything right when we see it needs to be done right.
Yeah. My biggest (current) scala gripe is trying to extract a 3-level deep set from their json parser. It's matchers all the way down! :)
Yeah! I also() like ; to have { funny characters }; spread( through(), my(text))); (especially during Xmas time ;-))
1. Frameworks, strong typing, tooling (Jmeter, eclipse etc..), portability, embedded devices, garbage collection, seamless integration with other JVM languages such as Groovy/Scala/Clojure. Also ongoing updates means that it will improve with time so in the future we will see things like java 8 lambda features. Build tools such as Maven/Ant/Ivy coupled with Jenkins/Hudson make it great for setting up continuous deployment environments. 2. Degree/Work - First work project was Java based, this meant that I spent 2 years working with Java and from there on out it has become my main language and the job roles I have taken are only Java related. This is probably because it has a large following in Enterprise software houses. Most of the .NET development at my work has migrated to Java over time. 3. If certain best practises are followed Java code can be very easy to read and very robust (See clean code). It's strong typing means that we'll run into less issues at runtime that if we used a dynamically typed language such as Groovy. The JVM has the ability to run anywhere! Best practises such as TDD (test driven development) make it much more easier to use although this is not specific to Java. Also because a lot of the frameworks for Java are open source there is a lot of information online that can help you through difficult issues opposed to something more bespoke (also expensive) like Wonderware (Scada control system) it is next to impossible to get support withouth contacting Wonderware directly as it's uptake is much smaller. 
Can you elaborate on the weaknesses of Java opposed to other languages? I'm interested to see what you think.
A lot of the weaknesses are fairly subtle, and some of them have actually been fixed in Java 7, and Java 8 looks to fix event more, but things like: * Performance: it's fast, do not get me wrong, but it'll never be as fast as good C(++) code for most situations. * Memory Usage: Sometimes having more control over memory is actually useful. There are ways of getting more control, but they're considered unsafe. * Not everything is an object, boxing is nice, but it doesn't fix everything. * Lack of high level language features (first class functions, lambdas, etc.) which are generally very useful. * Too verbose: IDEs fix this to some degree, and Java 7 has removed some of the verbosity, but it's still a very verbose language. Don't get me wrong, I don't dislike Java, and I think it's a good language, but I also don't enjoy coding with it like I do in other languages.
Try [jerkson](https://github.com/backchatio/jerkson): import com.codahale.jerkson.Json case class Yadda(n: String) Json.parse[List[Set[Set[Yadda]]]](text) 
[part 2/2] Preparation **Practice.** You do not code on a whiteboard and write code with a marker. You have to practice this. Solve a lot of problems following the script above and have it down in your head. Practice solving *and expressing yourself* on paper. Literally talk out loud when you practice. Actually talking engaged parts of the brain that don't get engaged when you're only doing internal dialog, and these new areas lighting up will be distracting to your problem solving brain at first. You can find tons and tons of past interview questions and answers on the web. The ones you don't have time to work through, read the answers. You'll be surprised how often even a passing familiarity will save you on a question you'd have been otherwise stuck on. Also, sometimes you can apply an answer to a different question with a few tweaks. **Go on lots of interviews.** Go an interview at some places that you're not necessarily dying to work for, just for practice. This removes the stress of desperately wanting to get hired and gives you experience going through it. Also, you'll find that when you care less about being hired and can focus more on solving problems and answering questions honestly, you get offers. Hey, now you have a chance to find out what you're worth! That worked out! **Data structures &amp; algorithms.** Know recursion cold. I know of no place I'd want to work that doesn't interview candidates on recursion. They don't do this because you'll be using it everyday, but because it is an important way of thinking about problems even if they yield to other approaches. Know the basics of how to represent data in various graph forms: straight up graphs, DAGs, trees, etc. I recommend reading *Algorithms in a Nutshell* by O'Reilly to go over a bunch of basic algorithms across a wide range of areas. **Data storage.** Don't be caught out by SQL (or these days, NoSQL) questions. Most interview questions won't require you to deal with a DB, but you should be prepared for questions focused on that. What's the difference between an inner, natural, and outer join? **Understand beforehand or find out in the interview the basics of the business.** Know the difference between a waterfall and iterative development process, and know the basic roles involved that are upstream from you and downstream. Ask intelligent questions about how the dev process works. How does management decide what features to implement in what order? Who collects and analyzes requirements? How much work is there on infrastructure–that means carving off commonly addressed problems into standard libraries that everyone can use? After asking these questions, plenty of places didn't pass my interview criteria and I turned down the job when they offered it, and I was able to give them specific feedback why. Also very important: are you a cost or an asset? How does the company make money? Are you producing something the company charges directly for, or are you providing something they "have" to provide to customers, or an internal tool for other people in the company to use? You can bet that if the company isn't making money directly off of what you do, they'll be less worried about doing things right than doing them cheaply in almost all cases. This should perk your radar up and you should ask a lot of questions on this if you're not in the revenue path. Always check what management types tell you with coders. When you talk to an interviewer, find out first what they do at the company and how their job is related to yours. (This helps you tailor answers to that person, too.) But moreover, if a management type tells you they invest in infrastructure, ask the business analyst how analysis works for infrastructure problems. Ask the coders what major infrastructure projects are going on? If should greatly concern you if you are hearing things that are not backed up by others. This is the old bait'n'switch, tell people how great the company is by lying, and then they get in and the person who told you those things says, "Well, things never work out ideally. This is the real world." But if you asked questions and nail them down on specifics, it's a lot harder for them to lie. (For some reason, there's a double standard in interviewing. Companies can lie to prospectives, but it's a high crime the other way. Companies bring to the interview process the assumption that it's not equal, that you are clamoring for something they have. You should go in with the attitude that it's an equal partnership you're looking to form and push back a little against this nonsense. Paradoxically, they'll respect you more for it and want you more, because you are the type of person that can actually address some of the problems they're having and they don't have enough of you.) **Prep your non-technical side.** It's great to be the smartest guy in the world that can solve any problem. I will not hire you on that alone. You have to understand your value to the business. Go through your resume and for each experience on there, ask yourself who in the world is better off because of this work I did? What was the result to the business and the customer? Be very clear when you assess the bottom line of your career so far. (This is harder to answer if you're just coming out of school, but in that case, give the impression that the answer to this question in 5 years matters to you.) Identify successes you had with each item on your resume. Come up with a little narrative that captures it. Write it down. Edit it. Say it out loud like 5 times. Identify failures around you with each item on your resume. Who's fault was it? Your manager sucked, your peer was lazy, whatever. What was your role in it? How could you have made it better? There is almost no failure that you could not have made better somehow. Prepare a narrative. Now the hardest one: identify failures you personally are responsible for. Prepare a narrative. Be clear about what happened, and what you did wrong, why you did what you did, and what you'll do differently next time. This is the number one thing that will get you hired, if you can be honest about something you did that was a complete faceplant in an interview, you will shock and surprise whoever you are talking to, but if you have a thoughtful approach and you're not wishy-washy about your role and how to fix it next time, you will leave a hugely positive impression. No one ever wants to talk about their failures in an interview. You shouldn't revel in it or relish the opportunity, but in truth, frank discussion of your past mess-ups will be the one thing that will often cause managers to overrule coders whose problems you couldn't solve and hire you anyway. **Track your career.** For each experience you have relevant to your career, think about it and write down all the big stuff you did that was important to you, and important to others. (It doesn't hurt to actually interview people informally about what they think on these things at your past places.) Write it all down in a document you keep called work history. In a few years you'll forget all this stuff. Record it. You can mine it down the road for rich narratives about your past, and whenever the opportunity presents itself in the future you'll have a bunch of things you can pick from that are relevant to the situation. When it's time to write your resume, this full history will be your go-to document. You can even easily prepare a different resumes for a job you really want. Good luck! **[UPDATE]** Formatting, and also: Every single coding problem you encounter, consider the noble hash map for your first, stupidest, naive cut at the problem. It's shocking how useful the hash map is to get a simple answer out on the table right away that solves a problem. It's rarely the best solution, but it's often the first. Here's ten streams and twenty files full of words, find all the duplicate words and where they came from. Easy, map every word to a list of the places you found it. Next. Here's a linked list, except the last node links back into the list somewhere and it just goes around forever. Figure out how many unique nodes are in the list. Easy, throw them all in a hash map and look for the first key collision. Hey, notice that it doesn't matter what the value of each key-value pair is, so the naive second cut is to use a hash set. Also, one other thing I didn't mention before, abstraction is your friend. Say that your question is that you are given an arbitrary position of a chess game and told to write a program that picks up from there and plays white the best it can. What do you know about writing a chess engine? Nothing! No problem, though, just wrap whatever you don't know how to do in a separate method call, list all the method calls in the right order, and then delve into the ones you do know how to write. When you are given something that just sounds impossible, being able to write down a high level abstraction–even if it is completely wrong–gives your interviewer a basis for suggesting possible paths forward. If you just sit there looking at a blank page, your interviewer will only be able to prompt you generally. You want to worm specific tips out of him though, that will help guide you to the answer he's looking for. *Be aware of those tips.* Nothing is more telling to an interviewer when a candidate continues pursuing their own path against your advice. Of the two of us, I am the one that knows the answer. If I suggest a tip and the candidate ignores it, that's a very strong signal to me about what this person is like to work with; their way of doing things is the only one that matters.
This is awesome. Thank you for a well-thought out and timely reply. This helps because all of the things you mentioned are practical ways to approach and prepare for an interview. I especially like the idea of a work history document. It's a little sparse now (for me) but I can see this being a powerful tool in the future. Thanks again!
At first I was like "O-what-M? ORM? OXM? OQM?". Traversing up to the project root reveals that it is "OOM" - Object to Object mapping. Could be very useful if your application is based on passing data between layers with DTOs/VOs.
Is this code supposed to be complete?
no, its a skeleton which needs to be finished. currently its just outputting blank spaces and 0's in the GUI window. 
oh no, im like 50% through it, im just super stuck on one main aspect. i just uploaded the original problem so as not to confuse people. I suppose i could be more specific about the concept which confuses me at the moment if youre willing to hear me out. 
Yes, you need to be more specific about what your question is.
Thanks for the feedback guys, Im going to try and do some tuts, hopefully i'll get the jist of it within a week or two or maybe more lol idk. Thanks again im truley grateful :D
Well, I'm trying determine how exactly to utilize the r3 object methods to return four different solutions to the four different mathematical operations. I realize that this pertains to use of the four different r3 object methods which multiply, divide, add, and subtract the different r1 and r2 attributes, but I can't wrap my mind around how it all ties together. Sorry about any misunderstanding.
You don't really have to worry about it. Upon a call to one of the four operation methods (add, substract, ...), just update your object so the method getRational() return the correct value. The reason you don't have to worry about it is because what the main() method calls one of the operation methods, then immediately gets the result and puts it into a String. Only then will it call the next operation. It's ok that your r3 object loses the result of the first operation when the second operation is called. EDIT: hum... made slightly clearer... I think
My gut reaction is that the class hierarchy is going to be unwieldy. The items warrant their own class if they all have to individually respond to external requests from some other class to perform complex logic. I'm thinking what may be a better (or at least alternative) approach would be to just have an Item class and Effect class. You can subclass those as you see fit. But in the case of an Item, it would have properties such as name, wearable, armor protection value, and so on. This way for a player to hold multiple items you could use a simple data structure like List&lt;Item&gt;. Then, as it pertains to calculating, say, the damage that a player takes in a given scenario, you have some class like DamageCalculator that would operate on a player or List&lt;Item&gt; and figure out the damage but going through the items. I could be wrong. But I think you're going to find that the classes you have suggested are pretty lightweight, in which case, having a huge hierarchy of them right now would be a burden. And in the case that you need to subclass them, you could still do that as needed and just update DamageCalculator (or whatever other class) to interrogate the objects appropriately.
Sweet man. I found that using the system clock time as a number to start randomising on gives random different numbers each time. Anyway good luck with it man
As Civil says, you shouldn't bother with Applets. If you want to run something on your desktop use Swing and/or Java FX to get started. You need to make sure all resources used are deployed. In the case of an applet everything needs to be JARed. In your project settings you can specify which resources should be included.
I didn't mean the short class names were a problem, but if he is trying to teach you some *useful* Java code, I wouldn't recommend 'apples' as a class!
haha, it's actually just a test project from another website and I was using the default setup in IntelliJ.
You're best bet on utilizing Java quickly is by reading [Effective Java](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;qid=1356015847&amp;sr=8-1&amp;keywords=Effective+Java), by Joshua Bloch Make sure you are familiar with the collections framework and generics. After that start using apache commons, lambdaJ, and Guava, when ever possible. These libraries cut down on the amount of code you have to write and makes it highly readable if you use it properly. You should also be able write unit tests so take a look at JUnit or TestNG for a framework. Also Hamcrest has some of the best matchers available, use them. But this is all just general good java stuff learn. If you work with xml, take a look at JAXB. They have great annotations support that makes working with xml a breeze. If you want to work with web apps, learn Spring and the Model, View, Controller design pattern. If you want to make UIs, learn html5 and Spring :)
IANAL so I am not sure about all the details. The problems were related to redistribution and bundling. We couldn't include the JUnit jars in our tarball.
This is a great deal, but apparently it was doomsday for their servers. Oh the BITTER irony. 
I think they are getting hit hard with people buying it right now, normally site is much better. Thanks for posting this, grateful to have saved $150 
Why oh why don't they prepare for such sales with extra server capacity
I've tried to upgrade my academic license to a personal license but it doesn't add to the cart. I can, however, add a new personal license to the cart. Is this allowed?
FML! i just paid an intellij upgrade for $99 two weeks ago!
Thank you very much for this. I'm just curious, they're saying regarding personal license: "Personal licenses purchased or reimbursed by a company are invalid." So, if I will go to my employer and ask him to reimburse, and he agrees, my license will become invalid?
3 Years ago switched from IDEA to Eclipse because of employer denied to buy it for me. Not sure If I should switch back...
Is RubyMine worth the money or should I just stick to ST2?
&gt; Sure, junit 4 was a great breath of fresh air and made junit basically interchangeable with all the good ideas testng brought to the table. sure.. it was even better when it first came out with the name "testng", too bad junit 4 removed a bunch of features ;) DBUnit? yuck.. spring-test has all i need 
I had the same problem, but I removed it from my cart and re-added it, and then it was the discounted price.
You are saying that spending money when everyone will be dead in a few hours is a waste of money? 
to buy a new personal license? Of course.
Hmmm...not entirely happy at their conversion rates - $50USD for the Idea license should be about £30GBP, but they're after £37GBP (excluding VAT). Looks like this isn't anything new, Jetbrains as standard charges 20% for more British (possibly European?) customers. That's not them absorbing the price for VAT either, so the actual price is another 20% on top of that. Still a good offer for a great IDE, but their prices are nowhere near as good for some of us as it is for others.
no . . . upgrading an academic to personal, but I just found out that it's not possible to upgrade between licenses.
Does Orika now have deep hierarchy bean-to-Map default mapping?
First of all, if you're attempting to learn java by reading the javadoc for the core classes, you're doing it wrong. But if you were, don't worry. The API hasn't changed much in the last decade or so.
You. Are. Awesome. Just saved me $75 for the upgrade to Idea 12. By the way, is it weird that I found this post and made my order on my phone from a strip club? I clearly spend too much time here. Well, now I have $75 more dollars for booze and lap dances. Time to make it rain!! Haha!
&gt; The API hasn't changed much in the last decade or so. Yeah, they introduced only [1302 new public classes](http://pastebin.com/gvx1rTqs) + tons of fields, methods, and documentation fixes ;)
The individual language IDEs are generally one step ahead of the plugins available to IDEA feature wise. All the features of the individual IDEs are eventually ported to the IDEA plugins. All the IDEs share the same code base and are updated frequently so, unless you absolutely have to have some feature in the latest IDE release immediately, you will be fine with IDEA and the plugins which are updated soon after. I have been an IDEA user for awhile now and use the plugins for Ruby and Python, which work great for me, but I bought individual copies of RubyMine, PyCharm and WebStorm because I hope this goes well for IntelliJ and becomes an annual thing like the Steam Holiday Sale. ;) 
Chances are you were thinking of Strings and the difference between == and .equals() == will check if the object references are the same and .equals() will check the actual contents of the String.
Bah! And people kept saying that the end-of-the-world was a bad thing!!! +1 IntelliJ licence for me! Dark theme throughout the whole IDE.. here I come! Thankyou OP. 
You already named 3 yourself! I also recommend The Java Tutorials. Its not so much hands on teaching, you need to read the tutorials and experiment yourself with what you have learned, but that is also a very effective method. Also it is a good reference in addition to the API documentation. I also recommend buying a book. Books are great for learning!
Yes.
Sonofa! I literally just upgraded to IDEA 12 2 days ago
Yes, there's a lot of new stuff, but the old 1.4 stuff is still mostly valid. Still it was a rather silly statement, sorry about that.
Just bought IntelliJ and PyCharm for less than 70€... GREAT offer.
And ej-technologies' JProfiler as well...
Giving this a second thought, and I don't understand why would it be more acceptable to move the session data around to/from the remote user when you can move it around the servers over a dedicated management interface with multicast asynchronous replication. It's just a matter of knowing how to play around and tweak the replication JGroups configuration -it's not THAT hard, after all-.
Just made it under the wire. Yay!
You might try complaining to support about it. You never know.
You get the re factoring support and debugging for it. I've not seen that in any other IDE.
Same here. Got a code from the payment merchant but zero emails. I've just mailed their sales support to find out where my purchases are...
They've posted on their [blog](http://blog.jetbrains.com/blog/2012/12/21/to-all-who-placed-an-order-during-the-end-of-the-world-sale/) about this. They say it may take 24-48 hours to send out the licenses.
Yeah I know. It's a good price, but I've had better service from the local charity shop. I now have emails from the payment company, but now I have to wait for JetBrains to mail. I hope they've put more effort into their software than their ecommerce offerings. Surely I should just log onto a private area on their site to see my license codes, rather than wait for an email they seem incapable of sending. 
http://static.springsource.org/spring-social-twitter/docs/latest-ga/reference/htmlsingle/ http://camel.apache.org/twitter.html http://static.springsource.org/spring-integration/docs/latest-ga/reference/html/twitter.html
Thinking in Java by Bruce Eckel is great starter book and its free. 
Head First Java: http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208
&gt;First of all, I don't see the value of having *Functor marker interfaces. Maybe I'm just not seeing a potential use case here, but I would remove those interfaces unless they have actual value. I took a quick glance over the code, and looks like removing the *Functor marker interface wouldn't cause trouble. We could probably remove Functor/NullaryFunctor/UnaryFunctor and BinaryFunctor without having to update many classes or tests. If we removed these marker interfaces, and updated the project documentation, removing the whole implicit concept of functor as "function objects", do you think that would help to avoid confusion with the concept of functors from other contexts, like Haskell and scalaz? &gt;Secondly, I would use a bunch of static helper functions and eliminate the whole adapter subpackage. I will play with your code and eventually will create a branch in the project for massaging the code a little. Probably will try to remove these packages and see how the static methods would work. But definitely looks much easier. My use case for [functor] right now is a fuzzy decision maker system, where I use functions for membership functions and generators for double intervals. So I haven't really used much of the other packages yet. &gt;Right now the API contains 144 public classes, but using these ideas could reduce them to &lt;20 with most of the interesting functionality available in fluent static methods. +1. I'll take a look and see how that would work. But definitely it sounds like a great idea. Thanks a lot!!!!
Thanks for clarifying on functors :-) I will install Haskell in my computer to follow some tutorials with lists, play with the fmap function, and learn more about it. Definitely that's going to help modeling [functor] classes. Regarding the backport JAR, not sure if Oracle will provide something like that, but sounds like it would be worth to drop a message to the project lambda mailing list. As they are still working on the JSR, maybe they haven't thought about it :-)
&gt;Yes, that would definitely help, but in my opinion the project name should be changed too. But I understand if that's a too invasive change :) Indeed, but not impossible, especially since the project hasn't been released. If there is a good enough reason, and a better name, the project could be renamed (actually, I think one project promoted from sandbox in Apache had been renamed recently after a short discussion in the mailing list). However, I'm afraid I'm the worst person to create names for projects. 
Almost forgot, I haven't checked the whole classes in java.util.function package, but now I know what to do during holidays here :-) thanks a lot for pointing it out. I will definitely create some static interfaces, maybe peeking at the API's of Google Guava, Java 8, Lambdaj, etc :)
For if and when you want to start making networked programs, I wrote a short (2.4k word) PDF on the very basics of that. It was written for [Greenfoot](http://www.greenfoot.org) users, but that's kind of irrelevant. Anyway, it's [here](http://uppit.com/lqaugj1xvhwe/Starting_Networking.pdf). If you have any questions on it, or on anything really to do with Java, feel free to message me and I'll be happy to help out. Also, try not to spend too much time reading books - it's much, much more beneficial to actually *write* code (and lots of it). EDIT: The power of Java is in its vast quantity of libraries. Take time to get to know: - java.util.* has Lists and Maps in, which you will use a lot, whatever type of program you're making - javax.swing.* is used for applications with a GUI - java.awt.* has Color, Graphics2D... - java.awt.event.* for all your event listener needs
Dood I'm not going to download and execute a mysterious Jar. How about a nice Applet? 
Wow. Thanks. I'll make sure I learn about the libraries that you recommended and spend most of my time coding.
I own Head First Java and Liang's Intro to Java Programming is still my personal favorite for learning and my goto for reference (besides Effective Java, which is advanced).
[The Java Tutorials](http://docs.oracle.com/javase/tutorial/)
Get Java in a Nutshell. SUCH A HELPFUL BOOK. You can get it used around 20 bucks on Amazon. 
Am I the only one that found JavaFX very slow compared to Swing?
Best programm ever! 
looks safe to me... I decompiled and there is some shitty auto-gen swing UI and some random API. It doesn't look like it does anything cool, so I'm not going to run it.
I'll give it a go
I will.
I would recommend the Java tutorials by TheNewBoston, lemme see if I can find them. Edit: here you go: https://www.youtube.com/watch?v=Hl-zzrqQoSE
stay away from any Sams books. Head First Java is awesome. The language has not changed that much in 7 yrs. Then get Effective Java.
I believe java.applet and java.awt are already contained in the JRE or JDK. Also, I hate to burst your bubble, but game programming might be quite difficult if you don't have a strong command of the language. If you want to make something simple you can consider using an existing library such as GridWorld (http://www.horstmann.com/gridworld/). Although GridWorld is quite limited, a game made from the ground up in JFrame or something might be very difficult especially if it's your first time programming a game. I use Eclipse but most IDE's should work just fine. Best of luck.
Clearly you didn't learn it.
Well I can't help you with the generation algorithm because the truth is I simply do not know enough about algorithms to make a solvable sudoku puzzle. However, I can help you with the basic framework of your game. You're most likely going to want to use JFrame as the main display for your game. JFrame is quite simple after you play around with it a bit, so i'd recommend reading about Java Graphics and javax.swing
If this guy was 14, like I was when learning C, I'd be down with helping him. But if you got through the entire college system without learning even Java, I don't have much pity for him.
Alright, well, to be perfectly honest it looks like you're lacking basic comprehension of the language. If they never taught you that, I can't blame you but I'd be baffled if that was the case. Like the other comments have explained, what you've got there are packages which need to be imported. Once you've imported them, you can access the classes defined within them. No idea how you've managed without this knowledge.
Error log? Are you getting a crash?
Are you running other java applications-- for example, the minecraft client itself-- on this machine as well?
Here is the pastebin link : http://pastebin.com/yApCgNXk
actually it has little to do with the language, per se, it's the JFC he lacks experience with. the best reference is usually http://docs.oracle.com/javase/tutorial/uiswing/
Paged memory vs real memory?
This is a little outside my casual expertise, so I can't help you, but somebody else here might be able to.
Didn't he say he was a genetics major? Why are you surprised he doesn't have basic comprehension of a programming language?
This. Make sure the [a]mount you are seeing is the actual memory used not address space allocation.
hmm, try launching it with a batch file, like [this one](http://pastebin.com/GJkL576h). I got the path from a bit down the error log (it's much too detailed for it to be a stacktrace).
To start with, java programs contain classes. Each class has a name, which should be unique. Being originally designed for the Internet, that name reflects the domain name conventions of the internet, but in reverse order. Nowadays most everyone releasing software has his own domain name, so as a convention, it is used to name the classes. So a class name is something like "xxx.yyy.zzz.ClassName". The xxx.yyy.zzz part is the "package", given as the first non-comment line of the source. The next lines are the "imports" - it would be very inconvenient if we should refer the classes by these long (fully qualified) names, so the imports help the compiler to identify the classes. So you write e.g. "import javax.swing.JFrame", and in the code you are allowed to use "JFrame". In the file system, the packages might be thought of as directories, and the (public) classes as files. Such a structure is zipped into the "jar" file. The API (more or less the same idea as the lib in the Unix world) is the published "library" of several classes, providing solutions to (hopefully) existing problems. There are core packages that are part of the java release - these package names start with "java". There are "standard extensions", not necessarily parts of the release but downloadable from Oracle. These package names start with "javax". Originally the "swing" package was not part of the core release (it is added since java 1.1.7b). As for the game, instead of awt I suggest to use swing (javax.swing), and [this tutorial](http://zetcode.com/tutorials/javagamestutorial) may help you, although it expects firm java knowledge. However, if you're trying to learn Java well by writing a game, then I'm afraid you follow the harder way. First you might consider writing a small GUI-based java program to understand the GUI basics.
Any 64 bit JRE after 1.6.0.23 has the –XX:+UseCompressedOops flag enabled by default and this has been causing problems on AMD architectures. Please add the following flag to explicitly disable this. You need to append it wherever you're adding the -Xmx parameter: –XX:-UseCompressedOops Notice that I have switched the + (default) with a - Let us know if this helps
I assumed the title to be truthful, my bad.
The setting is "-Xmx", with a capital X, just in case its a typo. This alters the size of the java heap. That's not the only part of a process that can affect memory usage though. For example if people allocate off heap memory with the ByteBuffer class or sun.misc.Unsafe class. Furthermore not all memory allocated by the JVM is via a heap - some of it will be part of the "PermGen" and "CodeCache" - both of which are off-heap structures. If the process is calling into native libraries - such as opengl or openal they may allocate their own in memory structures, again this memory won't be counted as part of the 'java heap' but will be visible in Task Manager.
I'll (hopefully) be teaching an introductory Java course in February. It may be your thing. Have a look at last year's webpage (http://quarkphysics.ca/ICS4U1/Apr2012.htm) and see if there are things that are helpful. A lot of my lessons were not put up on the webpage. I'll be improving it and trying to make it more complete next semester.
I haven't read the book myself but Java is half programming language, half compatibility with older Java so old tutorials and code still works.
1. It has been enabled by default on the latest versions of the JRE 2. Some users have been facing crashes when running the JVM on 64bit Hardware based on AMD chipsets. I wish I had an Oracle ticket handy, but at the moment I do not.
Not really. Look again. Greenfoot is a development platform, Khan is a collection of tutorial videos. 
Every time I try to run this program an error message pops up saying it can't find the class file, but I know its already in the folder. What do I do? 
Javascript running on the JVM seems like a step in the wrong direction, unless this means we might, one day, be able to use the JVM as a scripting engine in the browser.
Why can't we just have V8? Why another engine?
Well, Rhino/Nashorn are implemented in Java - V8 is C++ ... Isn't that the reason?
&gt;What if your mom had said that? Why do we need another child? Aren't all the others good enough. Oh god: I've wasted my life. This gin will keep me company though. Look, it shares the same name as me.
No, it can be even more misleading than that. When a program is run on a modern operating system it is allocated a portion of the system address space for it's heap and for memory mapped resources such as the executable image. The size of the reserved address space for an app isn't closely directly related to the amount of memory used by the application. The reserved address space is always larger than the actual used memory but the only upper bound on reserved address is the size of the CPU address space which doesn't really relate to either the application memory usage or the amount of memory in the computer. Working set, the amount of memory actually used by the application, is usually the most interesting value. However, it is only useful if the working set of all applications plus system resources is well below the amount of system memory. When the OS and all running applications use up all of available memory then the system will be thrashing furiously to virtual memory and the working set used by any given application might only be factor of how lucky it is with page faults. Virtual memory usage can also be misleading because it normally includes memory mapped files such as the app executable image and libraries. Virtual memory size normally is measuring the total size of those memory mapped files not what actually is or might get paged in. It's not uncommon, for example, in a game to memory map a giant wad file of all the game resources or textures. It's not uncommon for apps to memory map every font installed in the system (this practice originated with "large" CJK fonts) and other weird things. The actual resources in use for a single game level is only a small fraction of the size of the wad file and the app's font usage usually doesn't include every font so the memory mapped space shown for an app can be very misleading. 
The main reason for Nashorn: because Oracle
Why create V8 when there was already SpiderMonkey? Why create SpiderMonkey when there's Trident's JScript. Why create Linux when there's FreeBSD? Why create 486 when there's 386?
So the first hello is to tell the compiler what object your creating, then is the variable name, after that is the 'new' keyword, which signifies an object is being created, then the actual object that your creating. For example: Map map = new HashMap() It *is* a HashMap, although the compiler believes it to be a Map. This is called polymorphism. I'm not too good of a programmer, but that is my understanding, any more experienced programmers please correct me if I'm wrong. Sorry for bad formatting, I'm on phone.
I don't give much credence to those Rhino vs V8 numbers. Not that I doubt V8 is faster, but that author doesn't seem to know much about performance using the JVM.
Nitpick on the convention, class names should be uppercase, objects (variables) should be lower case.
This is a vey good explanation, but I think OP is new to Java, so next time you might want to say it more simple next time :)
variables should be camelCase
Yes, it's entirely possible. You'll need to provide more specifics if you want a practical example though.
Well I just want a joption confirm dialog asking for two different things on one side it will roll 1-100 and then type it out. on the other button it rolls 1-60 and then types it out. I havent done java in about a year and need some help with this. I want it to type it out as if I was typing it out on my keyboard. 
This adds a whole new and massive level of complexity. If you want to ONLY do this in Chrome and you know where the position of the window is it might be possible. It would be HEAPS easier to make it a standalone program which displays the random value which can be copy and pasted wherever the user wants.
Oh okay well can you show me how to make a program just print it out so I can copy paste it wherever I need
Explore the Math.random() method. It will help you create (pseudo) random numbers. 
I think the biggest problem to overcome would be to generate the random number without changing the component focus. Maybe a keylogger-like program could monitor for `ctrl-alt-R` (R for Random) and when it sees it a Robot uses ctrl-v to paste the random number, but I don't know how to write a keylogger
No, AFAIK operating systems allocate memory lazy. This means java requests X GB of memory and gets nothing until it actually reads or writes to a memory location. This is based on the same "trick" used to implement swap. Steps: * app asks OS for memory * OS says O.K. you could get that * app writes to memory page x * hardware tells OS that page x does not exist * OS checks if page x in swap * if in swap OS replaces other page with x * else OS allocates page x and if necessary replaces other page 
ThisIsNotCamelCase. thisIsCamelCase. The first one is initial caps. The second one is initial caps except for the first letter, otherwise known as camel case. Classes are initial caps. Variables are camel case.
Ha you should have just said I need help making a Runescape bot and it would have been a lot easier.
I dont want to sound like a loser :)
Consider the following: List&lt;String&gt; namesOfThings = new LinkedList&lt;&gt;(); On the left, we define the reference `namesOfThings`. That reference has a type, which is `List`. (It is a generic type with a type parameter `String`, but let's ignore that for now.) On the right, we create a new object. An object is an instance of a class. For example, if you have a dog, Rover, Rover is an instance (or specific example) of the class of things we call "dogs". Whenever you see the `new` operator, its job is to grab that rubber stamp we call a class and press it to paper to create an instance. In this case, the object created is of class `LinkedList`. (It is also a generic type because of the diamond operator `&lt;&gt;`, again we ignore that for this comment.) The `=` assigns the reference on the left to point to the object created by `new`. So, let's review what we're left with: * We have an instance of the `LinkedList` class (I could also say "a `LinkedList` object) sitting in memory. * We have a reference of type `List` pointing to that object. Notice above that I say the object is of *class* `LinkedList`. This object is always and forever of class `LinkedList`. However, its type is conferred upon the object by the reference you use. In other words: LinkedList&lt;String&gt; stuff1 = new LinkedList&lt;&gt;(); List&lt;String&gt; stuff2 = stuff1; Object stuff3 = stuff1; All three references point to the same object. That object is of class `LinkedList`. If you use `stuff1` to access this object, that reference confers the type `LinkedList` upon that object. If you use `stuff2` to access the object, it confers the type `List`, and if you use `stuff3` it confers type `Object` upon the object.
If you're trying to simulate a keystroke, take a look at the [Robot](http://docs.oracle.com/javase/1.4.2/docs/api/java/awt/Robot.html) class. It can do some pretty awesome stuff. :)
On screen event like you pressing the key or automatically? Do you want to trigger something by the press of an specific key? 
+1
Well, you can use this method to get a page's HTML: public static String getHTML(String urlString) throws IOException { URL url = new URL(urlString); BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream())); StringBuilder html = new StringBuilder(); String line; while((line = reader.readLine()) != null) { html.append(line); } reader.close(); return html.toString(); } So, to get the HTML of reddit.com/r/java+javascript, you just do String html = getHTML("http://www.reddit.com/r/java+javascript"); You can just scrape the html using a regex to grab all the `&lt;a href='something'&gt;` tags.
Yeah, he could. I had completely forgotten about that
thanks for this, I can definitely use some of those things (like the getHTML) with json-simple, and I'll have to make my own datastructure...
It did disappear. The world moved on. You're making me miss my Amiga though.
I do have java installed on my computer, does it have to be in a particular destination or folder?
Not that I'm aware of. What version of Java are you running?
the environment is a pain... eclipse has an eclipse.ini file, you can put this in it (on separate lines) -vm d:/jdk-7u9-x32/bin/java 
Yup! It's kind of weird. In your main applet class you use the **draw** method, and the argument **g** of type **Graphics** basically comes out of nowhere. public void draw(Graphics g){ g2.drawRect(20, 30, 40, 50); } In a different class called **OtherClass**, make a method that inputs **g**: public static void drawStuffInOtherClass(Graphics g){ g.fillOval(60, 70, 80, 10); } ...and call it in the main **draw** method: public void draw(Graphics g){ g.drawRect(20, 30, 40, 50); OtherClass.drawStuffInOtherClass(g); } When the **draw** method in the main class runs, you'll draw both a rectangle and an oval.
Did you clear the canvas before re-drawing?
Just looking at the API for awt, if you call update instead of paint directly then it will clear the canvas for you. http://docs.oracle.com/javase/1.4.2/docs/api/java/awt/Canvas.html#update(java.awt.Graphics) 
Concentrate on honing your java *programming*. You can always bolt some spring *configuration* on top later.
Anything that covers JDK 1.5 or better is still relevant. JDK 1.7 adds a few nice features, but the language is very evolutionary. Something from that time zone should be JDK 1.5, which covers 95% of code I see at work. That book is a great starting point. The only parts that will be dated are (largly) the new NIO options and switching on a String. I use to use it as part of our new hire training. Takes a lighter tone than the typical language textbook. Examples are reasonable.
It'll give you the basics - OK, it's not going to have all the latest features covered, but most of the time you're only using the basic stuff anyway. And also, you should probably know the solid core before you should start looking at fancy new things.
Java 7 didn't introduce anything massively surprising for someone who knows Java 5, except possibly the newer cleaner I/O APIs. Java 5 introduced generics, which really changed the language and most of its fundamental libraries. 
Oh my god... it all makes sense now.
Your question is poorly specified, so it's not possible to give a useful answer. Here's something, anyways. public class Bullet extends JComponent { private static int HITBOX_WIDTH = 8; private static int HITBOX_HEIGHT = 8; public Bullet(Point origin) { location = origin; // The component bounds are the hitbox setBounds(origin.x, origin.y, HITBOX_WIDTH, HITBOX_HEIGHT); } // Called every time controller asks parent container for repaint public void paintComponent(Graphics g) { location.x += 10; paintBullet(g); } public void paintBullet(Graphics g) { ... } public static addSpacebarListener(final Container container, final Component gun) { // Keep launching a new bullet every 100ms while spacebar is pressed. final Timer launcher = new SwingTimer(100, new ActionListener() { public void actionPerformed(ActionEvent ev) { container.add(new Bullet(gun.getLocation(new Point()))); } }); container.addKeyListener(new KeyAdapter() { public void keyPressed(KeyEvent ev) { if(ev.getKeyCode() == KeyEvent.VK_SPACE) { launcher.start(); } } public void keyReleased(KeyEvent ev) { if(ev.getKeyCode() == KeyEvent.VK_SPACE) { launcher.stop(); } } }); } }
Java 1.5 is like a whole new language. Java 7 is: You can use `switch` on Strings, you can infer generic types (`List&lt;Class&lt;? extends Class&lt;?&gt;&gt;&gt; candidateClasses = new List&lt;&gt;()` instead of `List&lt;Class&lt;? extends Class&gt;&gt; candidateClasses = new ArrayList&lt;Class&lt;? extends Class&lt;?&gt;&gt;&gt;()`), and a new library, so that doesn't affect anything at the language level.
I'm pretty sure this is what they're looking for.
You need to package it as a jar with an appropriate manifest file which tells the run time which class to find a main(String[]) method in. http://docs.oracle.com/javase/tutorial/deployment/jar/run.html I'm sure Eclipse will be able to help you in this. Edit: In fact, if you select the project in Eclipse and right click to export, you can choose runnable Jar file. More Edit: Compiled Java code is stored in .class files as Java bytecode. It needs to be executed within a JVM, so it is not deployed as an EXE, instead your desktop environment should associate the .jar extension with the JVM executable on your system and launch the .jar through the JVM.
Interesting. Thanks a lot, this helps! I think I am just confused in general on how things work. If someone creates a game in java, and wants other people to play said game, can they only play it if they have a JVM?
Instead of having a Bullet class that will store a bunch of bullets, I suggest having an Arraylist that will have as many bullet objects you need. In your bullet object have a function that will draw the object. // List of bullets to draw ArrayList&lt;Bullet&gt; bullets = new ArrayList&lt;Bullet&gt;(); // Draw every bullet to the screen for (Bullet bullet : bullets) { bullet.draw(g) } //The draw function in the bullet class public void draw(Graphics g) { /* * Do you whatever you need to do to draw */ } This is not the best way to do this but you can add/remove bullets from the arraylist which will be drawn. For the hitbox you will have to store the x,y,width and height values in the bullet class and you can then have a function like... public void isIntersect(float x, float y, float width, float height) { /* * Calculate if the coordinates that were passed in will intersect with the bullet coordinates. */ } You could also have... public void isIntersect(Bullet,Player,etc. object) { /* * Use object.getX(),object.getWidth() to see if they are intersecting */ }
Excellent, will scope it out. Thanks! 
There are (commercial) tools that let you create an exe file from a jar file. The exe file is just a wrapper that bootstraps the jvm and calls the jar. You can even deploy the whole JRE with those tools. Very convenient if you have a lot of win customers but your software runs in Java. We have very good experiences with [exe4j](http://www.ej-technologies.com/products/exe4j/overview.html).
Wow this looks great. Thanks!
I'm guessing when you install Java on your computer, that's part of it. Thanks for the help, much appreciated! 
You are usually allowed to bundle the JRE with your software, so you can either cause it to be installed as part of your installer, or keep your very own (most likely soon outdated) version in Program files.
One thing that should be mentioned and you should at least consider is the fact that packaging your program into a .exe file defeats part of the purpose of java, to compile once and run on multiple platforms. It isn't a huge deal though. Mojang distributes Minecraft in a format good for Windows, Mac, and other platforms. These are separate files though. 
The thing about JAVA is that it guarantees you that your program will work in every environment that runs a Java Virtual Machine. There are several JVM implementations (because, the specification is public). The most used one is Oracle JVM. The JVM usually comes in the JRE (Java Runtime Environment), so, if you have a JRE installed, you would be able to run any .jar file.
I use an open source utility called [NSIS](http://nsis.sourceforge.net/Main_Page). Its actual purpose is to create windows installers but you can also use it to make a custom EXE that launches your Netbeans compiled jar. I throw the output jar and whatever libs into a subfolder called lib or whatever. Then at the base folder you drop the exe generated by NSIS. To the user it looks like an EXE, they double click and it launches your program. Create a shortcut if you want. The NSIS launch script should look something like: Exec 'javaw -jar lib/YourJar.jar' 
Awesome, I will look into this! Thanks!
Just wondering, why is it so wrong to make something compile "once" when the program is finished?
Why no key codes?
Seems like inheritance overuse to me. I'd start with a mix of composition and interfaces, rather than going straight to inheritance. For example, Wearable/Armor/Jewelry/Weapon could be one interface hierarchy. Belt/Sheild/Helm/etc.. could be concrete implementations. Each concrete implementation could be COMPOSED of a list of attributes which would be implementations of your Effects interface hierarchy. Then, for instantiation I'd use a factory or a builder or possibly one of the other creation patterns. It's more dynamic, can be modified at runtime, and you don't have to implement a class just to provide a custom constructor.
There was no first try. I assumed it taught both programming and Java (is it right?) and I don't want programming.
See also: http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Unnamed_numerical_constants or http://c2.com/cgi/wiki?MagicNumber
From memory the authors assume programming knowledge. Try and borrow a copy if you can. I also read Thinking in Java: the text was good but the pages upon pages of code examples were a bit mind numbing.
OK then. Thanks.
I my experience if you have JRE installed you can just double click the jar and run it ( assuming you've got the correct manifest in there etc)
As with any IDE, you'll need to give it a few months to learn all the shortcuts, know your way around IDE-specific limitations, etc.. For example, I use IDEA since 2005, and avoid any kind of wizards or IDE-based CRUD applications and keep the projects IDE-independent (which means Maven in my case). I'm not saying the wizards are bad, just that an IDE can be used (and experienced) in many different ways.
You can use the community edition commercially, it's free open source! 
http://jsmooth.sourceforge.net/
Are you sure about this? (genuinely curious, not trying to sound like a dick) 
Unfortunately, I would need some of the features which the community edition lacks. I work on a Spring MVC project.
I don't see any mention of commercial use not being allowed with the community edition: http://www.jetbrains.com/idea/features/editions_comparison_matrix.html?IC
Also check: http://stackoverflow.com/questions/1967549/java-packaging-tools-alternatives-for-jsmooth-launch4j-onejar Besides JSmooth there are few alternatives. The problem with JSmooth is that it doesn't recongnize 64bits JREs.
It's released under Apache 2.0 license, so yes. http://www.jetbrains.org/display/IJOS/FAQ http://www.apache.org/licenses/LICENSE-2.0.html
My advice would be to keep using it, and you'll learn to appreciate the little things it does that no other IDE does. It is truly intelligent and everything is in context: variable names, method calls, refactoring, tests, it knows where everything goes and how to name it. Even the search (and replace) box has context-sensitive auto-complete in it (I should keep a list, these are just things popping into my head.) It's the little things that add up for me. I've been using it just under a year, and I am impressed daily with what the tool brings me over Eclipse (after ~8 years of daily use of various flavors of Eclipse). I suffered through the little problems in Eclipse, just par for the course I thought. And if you needed something specialized you had to search for and hope to find a reliable open source plugin that usually was incompatible in some quirky way with your version of Eclipse. I had messed around with each new version of NetBeans but it just felt clunky and slow, and I never gave it a fair shake b/c who has the time, really? I love IntelliJ, and I never thought I would. I also snatched up the $50 license last week, as fast as I could - I had planned to spend $200 if I ever needed to do work outside of my day job.
Because there are usually more platforms that can run a JVM than anybody is likely to compile for.
Java in a Nutshell is what you want.
I know it's such a small thing, I was just wondering if there was this sort of optimization in place, and if there wasn't.. Why? I've never looked at how they work but surely it would just be something like this? (Obviously, this is no way near correct or supports any other data types, but you get my jist. if ((varType == int) &amp;&amp; (value &lt; 128 ) &amp;&amp; (value &gt; -128)) { varType = byte } 
I did something like this for fun years and years ago using [JMF](http://www.oracle.com/technetwork/java/javase/download-142937.html), IIRC. It appears JMF hasn't been updated in a very long time, it's possible it does not work on modern computers.
IntelliJ used to be the only option on large projects. However, I think about 2 years ago, Google got active in submitting patches to Eclipse. From what I hear, Eclipse now works well on projects that are 1M+ LOC.
There are *many* codebases these days of that size. Most software product, and hardware systems (that are powered by software), will likely be 1M+ LOC.
The java compiler (javac) does not spend much time optimizing code. The only space optimization I am aware of is pooling string constants per class (and if packaged with the compressed jar format per jar) to avoid duplicates. The jvm will pool strings globally, but everything else is less space and more performance oriented. For performance the native storage size is most often the fastest (after jit) which is int on 32bit systems and long on 64bit systems, so turning the value into a byte is unlikely.
I'm not sure that's entirely true. It would be a really low level optimization, but javac may actually be able to do things like combine operations on data types with smaller bounds into fewer operations in the java bytecode (or maybe at the assembly level at runtime). For example, using [demorgan's law](http://en.wikipedia.org/wiki/Demorgan's_law).
Beginner-intermediate: public Integer x = Integer.valueOf(0); The code analyzer constantly nags me that initializing an integer can be a waste.
As I said &gt; It certainly would be possible, but [...] end up being much slower. Since we can think of it and the definition is pretty clear, it should be possible to do so.. but for what? Speed losses of 50% or so for a few saved bytes?
I would recommend contacting them and tell them what you wrote above. Their customer service has been really responsive and understanding, and it's been all over their site that the overwhelming demand basically broke down their vendor they use for payments. They were very humble and apologetic for it, they may actually sell you a license at that cost - worth a shot I think. sales.us@jetbrains.com Several of us at work tried for hours before getting through, and then it took a few days to get the actual licenses. I bought WebStorm at the same time b/c for $12 it seemed like it will be useful doing web dev. Then I found out that IntelliJ Ul includes all the features of WebStorm so I emailed them for a refund. They were very responsive, even over the weekend with emails and help. Good luck, hope you get one! 
Consider condensing your vertical code space so it's more readable. Don't bother putting open braces on their own line. Do break lines over 80chars to avoid wordwrap when being displayed in pastebin, blogs, paper, etc. if(...){ dostuff() } else if(...){ otherstuff() } else{ shouldIUseCaseStatement() } Have a thought that fits in 20-24 lines of code so that you and others can grok it later. A better program design would not have so many if statements and so having braces on their own line might actually look good. There is a great little pocket book for [Java coding conventions....](http://www.amazon.com/Elements-Java-Style-Reference-Library/dp/0521777682/ref=sr_1_1?ie=UTF8&amp;qid=1356795463&amp;sr=8-1&amp;keywords=java+style) Try to rewrite this program where you can only have 20-24 lines of code in each method.
Thanks for putting this up here. As a Java newbie, I've been hopelessly lost on how to create games. Now I'll get to go through your code line-by-line and experiment with it.
It's a static. That means it's using 3 bytes too much, out of the dozens of millions your app will be using. The only place where you should worry about types and memory usage is for large arrays.
Have you tried "Thinking in Java" (Bruce Eckel) ? I think it is a good way to start with Java programming. You can read only the chapters that are interesting to you. You should find it online pretty easily.
indeed I did, my bad
It's a million LOC according to [Sonar](http://www.sonarsource.org/). It's not that hard to imagine. A lot of it is bad design and reusability. Some of it is pure grabage. But really it's just a big softwere (which is also part of the reason garbage piles up). We have about 200 screens and 500 POJOs and entities and most of them actually do something useful. What does it do? In it's most basic form it's an aircraft maintenance softwere. I'm not sure I can elaborate on that though.
[here's](https://github.com/yogthos/Space-Invaders) one I made a while back :)
You could always give [Greenfoot](http://www.greenfoot.org/home) a go
Looks cool! thanks.
Your code example there is horrible. Commit to either if(...) { dostuff() } else if(...) { otherstuff() } else { shouldIUseCaseStatement() } or if(...){ dostuff() } else if(...){ otherstuff() } else{ shouldIUseCaseStatement() } or _something_, just don't mix loads of approaches. What I mean is, you use a new line before the `else if`, but don't bother before the `else`. Also, you don't include a space before opening curly brackets but do between the closing one and the `else` (on line 6). I don't mean to get at you, but I'm just saying; if you're going to suggest something, suggest a clear approach. Also, for the record, I prefer the first example I gave.
If you need any help with it, my username on there is **Duta**. As an example of what you can do, [this is my latest creation](http://www.greenfoot.org/scenarios/5055). According some people who've commented it's laggy on some machines, but I'm currently fixing that (making optimizations where I can). Stuff you create shouldn't lag on anything though, it's only because that particular one has a lot going on.
I notice in your code you do: someVariable = someVariable + someAmount; This is more concisely expressed as someVariable += someAmount; It's not only quicker to write, but also clearer. EDIT: I'm rewriting it, and noticed you do: if(wrapAround) { wrapAround = false; } else { wrapAround = true; } There's a trick to avoid this; just do: wrapAround = !wrapAround; EDIT 2: Also, if(snakeLeftRight == 0) { } else { snakeLeftRight = 0; snakeUpDown = 1; keyPressedThisTick = true; } could be if(snakeLeftRight != 0) { snakeLeftRight = 0; snakeUpDown = 1; keyPressedThisTick = true; }
I've done a rewrite, available [here](https://github.com/Duta/Java_Snake). There are more changes I could do, but I'm really tired.
How do I know how to set JAVA_HOME or see if java.exe is on my path? I am trying to play games on pogo.com
Sorry, I guess?
Whoa what did you do hat for? He makes a very, very good point. I work in several languages (Lua, Java, Python, etc) and you might think this little difference doesn't matter, but when I'm trying to edit your code I look for some kind of consistent style to stick to, and if you don't have one I will have to choose for you, which will likely annoy you and will annoy me. Similiar issues: if( .. ) vs if(..)
Can you find the plugin if you go to chrome://plugins/ in your address bar? Make sure it is enabled. You can also look at chrome://chrome/settings/ (Show advanced settings), Privacy-&gt;Content Settings.. and look at all the settings and buttons under Plug-ins.
It's cool to see this as I'm approaching alpha with my second java game :)
Tried to run this on my Win 7 laptop. Does not seem to pick up key-press events. I put some debug inside 'keyPressed', but did not show up. Is this working for everyone else?
It has trouble with 'focus' which i don't fully understand yet. It works fine if you click inside the game, but won't register key presses till you do. Let me know if that works, and if anyone knows how to set the applet to grab focus at initialisation that would be grand
Ah, OK. That was it. Never occurred to me to click inside the applet! Adding the following at Line 63 fixed it: setFocusable(true); requestFocus();
Swing uses stuff in the AWT name packages
Well yes. new javax.swing.JFrame("Title").getContentPane() returns a java.awt.Container. Repainting uses java.awt.Graphics (when repainting canvases, commonly casted to java.awt.Graphics2D). All colors and fonts are done with java.awt.Color and java.awt.Font. Layouts are awt too: new javax.swing.JPanel().setLayout(new java.awt.BorderLayout()) It's very easy to awt without swing, but you can't really use swing without awt.
Originally made it for my sister in med school here in France. If you have any comments about it I'll gladly take them
Well, C is more popular because all the mainstream Operating Systems (windows, Linux, OSX) are written and maintained in C. 
I've only skimmed it and I haven't ran it, but here are some stuff I noticed: Needs more javadoc. With method/class descriptions at least. Without it, it makes the code much harder to understand since I just see logic and not purpose. Also, please don't do stuff like this: `dictionaryURL = "D:/eclipse/workspace/Acronymous/src/acronymous/" + "dictionaries/" + dictionary;` Not everyone has Windows. In eclipse, the working directory is already `D:/eclipse/workspace/Acronymous/` so you could have very well did `dictionaryURL="src/acronymous/dictionaries/" + dictionary` but you should separate code from data. and instead placed all your dictionaries in a folder in the Acronymous project directory or a data directory inside the project directory. Probably just preference, but I don't see why AcronymousGUI and AcronymousMain are two separate classes when you could just implement a main for AcrononymousGUI. Also, I don't think there's any reason that you should be storing the instance of the AcronymousGUI in DictonaryReader when I feel it is the GUI class's job to poll that kind of stuff and do error handling (by the way, if you are going to, why don't you just say it is an instance of AcronymousGUI instead of just Object? Since you end up casting it, anyway).
What is the difference between &gt;if(gameOver == true) and &gt;if (gameOver) ?
When you say every interface of this button, do you mean that you want every subclass of button to implement Onclick() in it's own way? I would say, in such a case you want onclick to be an abstract method of Button, which will require you to implemement it in every subclass (which is okay because that's what you said you want to do). However, if there is nothing that you want subclasses of button to inherit from Button other than the abstract method, you should make Button an interface and have classes implement the interface. 
You're right thanks, and about the dictionaryURL stuff, I did it like that because for some reason eclipse only lets me run it like that, but when I export it into a runnable jar i end up doing: dictionaryURL = /* "D:/eclipse/workspace/Acronymous/src/acronymous/" + */ "dictionaries/" + dictionary; So that's why I did that like that. Yup I should have included the main method in AcronymousGUI... It was just that I was trying to make up the classes I would need and I just kept it. About the storing of the instance, it's more because I was playing, to debug, with JOptionPane.showMessageDialog and in the first parameter I wanted to try and actually include the GUI to see what it would do. You're absolutely right though, thanks a lot I appreciate it! ~~EDIT: Having problems with formatting this...~~ 
Why are you implementing your own Button class? If you use anything that implements javax.swing.AbstractButton (like javax.swing.JButton) you will have an "addActionListener()" function, which is I think what you want.
This is now fixed, I made an abstract function in the button class. Thanks for the help!
Nice. Down arrow doesn't work in chrome for scrolling (likely because viewitem-inner isn't focused) and the hidden menu is sitting right on top of the scrollbar.
Well if you can't do dynamic registration (in ServletContextListener) then you can always implement a Chain-of-responsibility pattern where the first element in the chain is statically configured via deployment descriptor. The rest of the chain would be dynamically built using values retrieved from JNDI at run time.
High school is like that, didn't really know what to ask either.
It might be "sufficient" but it's blatently wrong. :(
Thanks for the reply, but I think the proposal seeks to address configurability in the face of portable and self-contained applications. The traditional way to configure a Java EE application has been to deploy it with "unresolved dependencies", and then depend on the target server for these dependencies to be there (e.g. as administered objects). You then switch between those dependencies by basically switching servers on which you deploy. E.g. production server A has the production data source and qa server B has the qa data source. So, if you deploy to A you get the production data source, and if you deploy to B you get the qa data source. This model is fine and dandy for some use cases (1 server, many apps, from different teams), but it's overhead when you have 1 server, 1 app, 1 team. In the last situation it's much more lightweight and agile to have applications without unresolved dependencies. The 'data-source' element in web.xml (@DataSourceDefiniton as annotation) addresses this. Java EE 7 will add similar constructs for JMS destinations. For in-house deployments it's then handy to have the differences between various stages clearly available within the archive. This kind of setup is not for all situations. If there are strictly separated dev and ops teams, especially where ops "owns' the server and different apps are deployed to it, this setup won't work. But it's not meant to replace it IMHO. It's an addition, that recognizes not everybody works like that. &gt;Most servers have a deployment tool that allows you to override your context entry values. But this is the issue. Just like setting up security, this is all server specific and frequently requires interaction with some GUI or console. That's really anti to having portable self-contained applications. So, IFF portable self-contained applications are the team's goal, then that mechanism doesn't really work. As for use case 3, yes, adding the filter programmatically is an option in that case. The switch doesn't even have to be a JNDI value, it could just as well be a system property. But I take it the servlet filter was just an example. I read the proposal as being applicable to every deployment descriptor. Filters and Servlets can be added programmatically since Servlet 3, but not everything can be added that way in the Java EE platform. I'm thinking of e.g. Singleton startup beans, or perhaps even error and welcome pages in web.xml again. There's so much you can do in a deployment descriptor that you can't do programmatically. (another proposal that would hook into your idea would be to have -everything- and really -everything- that a deployment descriptor can do also available via a programmatic API, but that's a different proposal ;)) 
This are btw the kind of workarounds that we currently use to get a similar effect. I just think that it would be much simpler if there was just some way to switch stuff in deployment descriptors on and off. Much more straightforward and easier to grasp.
RES has trouble rendering those. Here are the raw images: https://raw.github.com/Vulcrum/Acronymous/master/acornym.png https://raw.github.com/Vulcrum/Acronymous/master/Acronymous.png And imgur: http://i.imgur.com/PHstk.png http://i.imgur.com/OOx4t.png 
I actually do see java.com and pogo.com there...still doesn't work. Very odd.
Uncredible, JEE getting resonable basic features which reduce value from app server vendors' proprietary solutions, from the perspective of a purchase decision maker looking at a feature checklist?
I'd love to read it but the color were really stressful on the eyes.
My eyes! The pain!
I installed [readability](http://www.readability.com/) just to read this. Worth it.
Ah, i stuck it into my plain C directory and it worked, thanks.
It is a little hard to determine why the game will not work if we do not have the source code.
The only thing I can think of is that Windows is switching on toogle keys (check in accessibility/ease of use) for the application - Eclipse used to change keyboard layouts on me because a shortcut was similar to the Windows one for select USA keyboard on the machine
I had to CTRL+A whole text ;)
There is a lot of code in the game and it would be hard to get it all organized and presentable. I'm really hoping that someone has had this problem before. 
What I would do is get each line from the Scanner and then use a for loop to go through each character of the line and check if it is one of the desired characters.
could you give an example of that for loop? I thought it would be simpler to just remove everything except for t and s then count them
 String line = s.nextLine(); for (char c : line.toCharArray()) { if (c == 't' || c == 'T') { numberOfTs++; } else if (c == 's' || c == 'S') { numberOfSs++; } }
&gt; Any pointers would be greatly appreciated. http://code.google.com/p/snakeyaml/
 while(s.hasNext()) { String temp = s.next(); if(temp.equalsIgnoreCase("t")) numt++; else if(temp.equalsIgnoreCase("s")) nums++; } Probably needs a little tweaking, just doing this off the top of my head 
I'll look into it. But all of their data is being handled on a server somewhere which protects it.
Are you looking to do this within a local network or over the internet? Over the internet can be a bit tricky for P2P once firewalls and NATs get involved. Within a local network it is easily done with basic TCP or UDP mechanisms.
yeah I looked into it for you and google isn't supporting their weather API anymore. I haven't used this but I believe the following should work for just a personal project: http://openweathermap.org/wiki/API/
Over the internet. If I have to do it where the user has to manually forward ports that's alright, but not ideal.
thank you!
This all sounds like premature optimization to me. User input is so slow that the differences here are trivial. My suggestion is to go for readability, and to me using .equalsIgnoreCase() conveys what you want to accomplish more clearly.
Regex probably easier
Even something that trivial bothers me if I know I can make it faster, especially when the code difference is also so small. Edit: Some people seem to have some misconceptions about my intentions. What I posted is just a simple example. I know that the actual difference will be next to nothing. I just want to know which is ACTUALLY more better, in case I do need to put it in a giant loop or something. The code difference is also so small, it would not affect production. I don't plan on going back to my old projects and changing this, but when working on a future project it is just as easy to implement either method. I don't work for anyone but myself, so I can spend as much time as I want on anything without anyone complaining to me about it.
Changing case is a destructive operation in some cases, for example [Turkish "i" with or without a dot](http://en.wikipedia.org/wiki/Dotted_and_dotless_I). `equalsIgnoreCase` is better and not the same as changing case.
So according to the java.lang.String javadocs for the equalsIgnoreCase method, &gt;Two characters c1 and c2 are considered the same ignoring case if at least one of the following is true: &gt;The two characters are the same (as compared by the == operator) &gt;Applying the method Character.toUpperCase(char) to each character produces the same result &gt;Applying the method Character.toLowerCase(char) to each character produces the same result The documentation for equals isn't as detailed, but I'd assume that it only checks == for each character. Does this mean that equalsIgnoreCase is checking both toUpperCase and toLowerCase for every character in the string, totaling 3 checks for every character available? Why would it do this?
Care to elaborate?
You can check out the [source code](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/lang/String.java#String.regionMatches%28boolean%2Cint%2Cjava.lang.String%2Cint%2Cint%29). This method does three checks, and the comments say the final case check is due to irregularities in the Georgian alphabet.
Of course is the simple equals() more efficient. But in your case, equalsIgnoreCase() is more accurate and readable.
Open notepad and type in &gt;java nameofjavaprogram Save it and put it in the folder your program is in. Rename it .bat instead of .txt Double-click to run.
On the library subject... I always like to use [Netty](http://netty.io) for networking. Besides the excellent performance the pipeline concept provides a good basis for abstracting any layers in your communication protocol. Community support is excellent too and there is even a new major release (4.0) around the corner. HTH!
I am currently doing P2P with http://4thline.org/projects/cling/ to automatically map the port on the router and get the external IP. And then I feed the external IP and the mapped port to Akka to handle the communications. http://akka.io/ ...best tool ever.
Compare all chars manually like in [java.io.FilePermission](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/FilePermission.java#FilePermission.getMask%28java.lang.String%29) ;P As an exercise you can also check which method is faster: char[] a = actions.toCharArray() or actions.charAt(...
you can also take a look at UPNP firewall-punching-hole method. This will not be 100% efficient, but it will do the trick for a lot of hardware firewalls. If your program is simple, you can use serialisation over TCP to send data through network. This will prevent you to create a brand new protocol, and reduce your future headache :D This can be done using an ObjectOuputStream around a Socket 
Exactly , if your bottleneck is a difference between String.equals and String.equalsIgnoreCase you are living in a fictional reality that only exists in your mind. I may have spent 2 hours at $40 per hour fixing this , but look boss i saved .00001 seconds of execution time!
If its your images that are not loading properly on Windows then obviously you have some platform dependent code there. But it's hard to know exactly what without knowing how the images are loaded. Your question is like asking why a Windows only game on Steam does not work on Mac. 
Efficient code is always a good thing to strive for, but in this situation the nanoseconds you *might* save are ultimately humanly imperceptible (&lt;50 milliseconds). However, a long chain of **if/else** statements is kind of sloppy (pain to read/debug/maintain). You might want to refactor that.
Well, the data to protect is everything about the user stored locally. For example, each method of communication whether it is email, client to server, to Facebook, etc, is a "*communication method.*" Which is basically an extendable class that you program the protocol for that specific method of communication in, serialize it, and then package with the client for use. Each specific client basically chooses which of, and how to interpret, these protocols. Now to the security issue. In theory, if nothing was changed in the core classes of the framework, the user would have previously defined preferences that would determine whether or not the CMs can alter/view certain user information. Let's say for instance; a server-to-client style CM fired a getter method on the user class (which on startup had automatically interpreted the serialized user data stored on the file system) and requested the user's gender. If their preferences showed that the specific user had set for their gender to be shared, it would return the gender, if not, it would return nothing. But a developer could simply ship a client that had completely changed the inner-workings of the classes that held back sensitive information. The more I write about this the more I see that security in this specific situation is unlikely. I though about the possibility of having a separate program that handles user data that clients would contact in order to retrieve details about the user, but that seems to detract from the original goal of simplicity and portability. If anyone has any ideas I'd love to hear them.
Are you serious? This is a massive problem with coding these days. A basic understanding of the difference between what happens on an equals and an ignore case equals is something everyone should have. The pathetic arguement for not doing premature optimization is more of a hinderance in the long run as coders lack any kind of underlying education. Then things like equals ignore case get used in loops with massive amounts of iterations without a second thought (or basic string searches). For OP the JDK is open source, you can infact investigate these things on your own. Have a healthy curiosity for what might be happening when you call any core JDK method. What is probably happening here (I don't have access to look it up) is that you will have a basic O(n) complexity and could end up being quicker in some situations. It will probably be iterating through the char[] after doing a basic check on the String references, but fundamentally, go have a look at the code and make your decision based on that (not on some blank "premature optimization" comment).
When in doubt look at the [javadocs](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#equalsIgnoreCase(java.lang.String) and the [source](http://www.docjar.com/html/api/java/lang/String.java.html).
Curious, is it acceptable to put the `dictionaryURL` value in an XML file so that it is not always coded to only one file or directory?
The images are not the only problem. The frame rate is poor, and other problems. I used java 2d with paint component. I know its something with that because my menu screen uses jswing and it works fine.
I can give you the code from that class if you want. 
Yes, although it doesn't need to be XML. I generally feel that nothing should ever be hard coded without having a way to override it at runtime.
thank you for that, any good online tutorials for working with API's or parsing RSS feeds that you guys would recommend? 
I have used the [National Digital Forecast Database (NDFD) REST Web Service](http://graphical.weather.gov/xml/rest.php) with a lot of success. Also, it is free. For a news ticker, I once used [Google News API](https://developers.google.com/news-search/), but as you can see it is deprecated. If you are just learning, I would use [NPR's API](http://www.npr.org/api/index.php).
Doesn't matter what your intentions are, until you've noticed a slowdown and you see you're getting performance issues and you've used a profiler to determine that you're bottlenecking at this code, do NOT optimize this code. That's the most common mistake novices make. "We should forget about small efficiencies, say about 97% of the time; premature optimization is the root of all evil" - Don Knuth Note that he says small efficiencies. Good design patterns, strategies, and a knowledge of the way your code flows and the way it will be executed is WAY more important than minute optimizations at this level. As you become a better programmer, your code will become faster just through practice and intuition.
A *massive* problem? Really? Why? I agree with you that lacking "any kind of underlying education" *might* become a "hinderance in the long run" (IMO this is the difference between a coder and a computer scientist) - but not in this case. Comparing short strings like this with today's powerful computers is basically free. Whether you loop 5 times over the string "quit" or only once is not noticeable in most cases - i say most because as others have pointed out it *does* matter if you're running against tight time contraints, let's say a high-frequency stock-trading application. You mention O(n) complexity, but seem to ignore that 2*O(n) (e.g. once for the `toLowercase()` and once for `equals()`) still has an O(n) complexity. You also ignore that the JVM might (and very probably will) optimize things, and might merge the two loops into one, or even unroll the loop altogether. You point to the JDK, which really won't help you much when comparing a series of statements - you have to compare the produced bytecode, so you'll see which optimizations the JVM did. 
Probably a bug in the IDE because I didn't change anything apart from rewrote it exactly the same way and it worked.
Don't get in the habit of blaming your tools when you make a mistake. It wasn't the IDE and it will never be the compiler. You had a typo somewhere. No big deal but glad it is fixed.
Looks like eclipse. Sometimes I have to save, F5 on the project and from the menu project&gt;clean for a rebuild. Maybe the superclass/interface wasn't saved at that point? Eclipse sometimes acts up and ignores Ctrl+S or anything related to saving a file and the only way is then to close the file and answer yes-i-want-to-save in the dialog that pops up.
The problem here isn't with the case in hand but the way in which it is dealt with. The blanket statement "don't prematurely optimize" stops the underlying education and when you come to code on production environments potentially inefficient methods are used because you just want it to work. With that little bit of education whilst coding one can implement their algorithm in a more efficient way. This goes for high frequency trading, or large systems where your short method may be called millions of times. The stock answer of "don't prematurely optimize" is also misunderstood and actually means "reconsider your algorithm as changing that may get you larger benefits". With respect to equalsIgnoreCase and it's complexity I was thinking about it from a western alphabet where you can do a very simple bit manipulation to test for upper and lower case. In fact, I looked at the jdk and it is interesting as toUpper and toLower are used on the characters of both input strings. In this case (as someone else pointed out) a simple fallthrough if statement would be the quickest solution. There would be no point in looking at bytecode if there is a good understanding of what that bytecode might be, the point I am making and so many disregard and feel is oh so terrible is what you actually seem to agree with. Someone should understand what the underlying algorithm would be, what its complexity might be and then decide based on what they are writing what to use. Sorry if this isn't as coherent as it could be I am unfortunately writing it on my phone.
You compile with one library and execute with a different one. Ensure your class path uses your code first
Nonsense, do a bit of research and you'll find it'as fairly common to run into IDE issues. I've personally run into caching issues where the IDE is executing older versions of code in both codeblocks and eclipse.
I'm not saying there are no bugs in common IDEs. But a novice programmer will almost never find them. It is a bad practice to blame the tool. If you've been programming for years with a tool set or if your code acts different in one tool set vs another then there's maybe a bug. But the OP is an admittedly newish Java programmer and isn't able to look at the code to know what is wrong with it. 
+1 for this. I've run into 1 single true compiler issue in my 15 years of programming. And that issue was 100% documented well before I found it and it was already fixed in a newer version. StillAnAss makes a very good point. As for IDE tools, I've run into more issues with them, but 90ish% of the time, it's due to a plugin or an incorrect setting -- not the IDE itself. From what you described it could be explained by auto-build being turned off or *maybe* Eclipse not rebuilding the class after you made a change. It could also be explained by not hitting save.
I'm a novice programmer and I still find them. It's one thing to say "it's unlikely to be an IDE problem", it's an entirely different one to tell someone that it *definitely* wasn't an IDE issue and was most certainly a typo with no evidence. The latter means that if someone has genuinely run into an IDE issue you're reducing the chances of them finding the correct solution to it and making it more likely for them to run into the problem in future.
Assuming one is using OpenJDK as opposed to another JDK (e.g. IBM's).
You must bear in mind that the bulk of software development is code maintenance. If you are aspiring to be an excellent programmer (and I can see that you care about code) rather worry about readability than the speed of byte-code. Leave that to the JDK. Choose the most logical, readable method. Let the code document itself. Spend time there, not dicking around with nano-seconds. Good luck!
What you've created here is a 2x4 array. As such, when you call array[i].length you're looking for how many ints are in that array. As such, if you called array.length You should get 2
Have you *used* Eclipse? Running into caching bugs in Eclipse happens multiple times per day. It's one of the major reasons i use IDEA instead.
Basically, when you do int[][] array = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 } }; you are defining an array of arrays of ints. Imagine the example as a stack of two boxes while each one contains a stack of 4 boxes. So your array.length will return 2 as you are referring to an "external" stack and when you chose a box from it - array[i].length would return an "internal" stack.
I have used Eclipse. I've used it for the past 5 years. I can count on one hand the number of "code caching" related issues I've experienced.
At my workplace all my coworkers experience them daily. If nothing else, i'm sure you've experienced the most common one, "Press F5 to refresh." See also: https://bugs.eclipse.org/bugs/show_bug.cgi?id=303517 only fixed recently.
I started to type a comment about how I didn't get it. And then I got it.
Careful with your use of the word "stack"
I've used eclipse since early on in the 3.0 days (2004 - 2005). I've used it day in and day out for more than 5 years. If you're having bugs that happen multiple times per day then you don't have your project configured right. Go fix that and stop blaming your tool. Java has best practices for a reason. **edit:** Actually, I went back and looked and used Eclipse 2.0 for quite a while before 3.0. That was painful, but it was still better than VisualAge for Java that preceded it.
Hah, I got it while reading your comment.
I still don't.
Or there is a 3rd way: [Gradle](http://www.gradle.org) It has the convention and easy dependency management of Maven, and the plugin, easy scripting of Ant. It can even use ant plugins natively; well worth a look, for new projects and old.
I had the same problem, except that I actually got a confirmation screen. Still, my account hasn't been debited and I've been getting autoreplies to emails for two weeks. Now I'm concerned that I've sent my cc info to Russia and have nothing to show for it. 
I had written several paragraphs for that post about exactly what my view was on what things should be in a file and such but I had removed because they were somewhat specific to use cases and goes into the knowledge level of the users and such. In a nutshell, there is no one way to do this. Basically, you want maximum amount of configuration with no hassle for the user. You want to encourage your users to change your program as much as possible. So, I think it would be reasonable to be able to configure the directory in which the "data directory" for the program resides in and hard code paths inside that. So, `SomeProgram` has its directory configured to be `~/.someprogram` then it would be reasonable to expect `~/.someprogram/glyphs.png` to exist. The user may very well change that image. So the main problem here is how you configure this data directory. What says where that is? It needs be modifiable so it would be a file but it can't be in the data directory since it has nothing to tell the program where that is. Generally, I'd think it'd be fair to have a "default" that is, from best to minimally acceptable, configured either via a configured at compile-time, local file, or hard coded. I believe the best way to do this in Java is to put it in the JAR's manifest file but I'm not 100% sure. As far as local files go, on certain systems it may be reasonable to to expect that file to be in the working directory in which the program was executed. If, for example, the program is installed on Windows and the installatation directory is `C:\Program Files\SomeProgram\` it would be reasonable to expect `C:\Program Files\SomeProgram\config.xml` to exist in there which may reference the program's data directory. On a Linux system, however, the program will probably reside in `/usr/bin/` and a configuration file there would not be reasonable. So, with a Linux system it's pretty much mandatory that these kinds of paths be configurable at compile-time which why things like GNU Autoconf exist. But for a simple program like yours, local directory or in the JAR is fine. What I don't think is fine is hard coding an absolute path.
It took me years to realize that an [Eclipse](http://eclipse.org) would block out the [Sun](http://sun.com).
What part do you need help with? You should be more specific, this subreddit does not exist so that you don't have to put any effort into your homework. Broadly, here are the two things you need to figure out how to do: Loop through each number from 1 to 1000 For a given number, find what numbers divide it evenly (and sum them up)
Gradle! Maven eats ant scripts and excretes... something not pleasant...
Or you could use maven and ant together!
Given, in pseudocode: let array = [ [1 2 3 4] // array[0] [5 6 7 8] // array[1] ] then for each index 'i' in array.length print array[i].length Or in other words: print array[0].length print array[1].length Recall that array[0] == [1 2 3 4] array[1] == [5 6 7 8] therefore, array[0].length == [1 2 3 4].length == 4 and array[1].length == [5 6 7 8].length == 4 Finally, array[0].length == 4 array[1].length == 4 print array[0].length // print 4 print array[1].length // print 4
If you wanted the total length of all elements in the array: int total = 0; for(int row=0; row&lt;array.length; row++) { total += row.length; } return total;
We're not going to do it for you. We will answer *specific* questions, but we're not going to do practice exercises like this. What part of the assignment are you having trouble with?
Hey, I have an [IDEA](http://www.jetbrains.com/idea/)!
I think a jagged array will help make it clearer. int[][] array = { { 1, 2, 3, 4 }, { 1, 2, 3, 4, 5, 6 }, { 1, 2 } }; int x = array[0].length; // x = 4 int y = array[1].length; // y = 6 int z = array[2].length; // z = 2 int omega = array.length; // omega = 3, the amount of arrays in this array of arrays
I browsed trough this website but diden't find any reference to java programming. Just thought I should have added I'm programming in Netbeans, and I'm making an standard java application. Sorry If I just totally missed it, but I'm having finals till the first of february and very stressy. Thank you!
One of the original ideas of Maven was that it would be declarative -- making it far more machine readable. I would generally agree that this has been true. The other half is that Maven strongly encourages some standard layouts. As stupidly simple as this might be, I think it is helpful. 
You mean it's full of bugs?
There is a huge amount of value in the convention over configuration approach which Maven brought to builds, especially in the face of the insane number of layouts which came before. However, Maven makes you pay a high price for it, especially when you want to do anything even slightly custom. Gradle follows Mavens layout conventions but goes a long way to making it easier to work with, so you end up with the best of both worlds.
No, you didn't. This is javascript
Seems to defeat the point of the ~~subclasses~~ object-oriented design, and it adds unnecessary dependencies.
It certainly depends on your focus, but to start off: PermanentBuff and TimedBuff and Debuff can just be removed. Handle those in buff with a timelimit and some kind of method for handling the effect. You can add a boolean for isDebuff() as an optional constructor parameter. For permanent buffs time is some constant, EG -1. Again, why does it matter what type of buff it is? StatBuff, ResourceBuff, WeaponBuff can all be removed unless you need to tell at runtime, and a byte would still be simpler. Also, if you want to add versatility you could load based on a list of effects, removing sub-classes entirely while improving readability. This allows for a much more advanced potion brewery for example. Like this: [BuffFactory](http://pastebin.com/1jBSmp27) [Buff](http://pastebin.com/RDDUrBM0) [Player](http://pastebin.com/W0fPCfZR)
I wouldn't write your own parser. There are several out there that work very well and are widely used and tested. I'm not too familiar with developing for Android, but I've used Jackson pretty heavily for the server side of an API, and don't find it too difficult. What do you find difficult about it? There are a few ways to approach using it, maybe there's an easier way. That being said, I've also used Google GSON and have found that pretty easy to use too. Maybe you could look at that. I've read that Jackson performs better in some cases, though I haven't experienced any noticeable difference.
I've never had any trouble with Maven itself, but certain IDEs support can be pretty bad. Don't even get me started on the Eclipse m2e connectors.
In the absence of any actual question, I choose to take your requirement literally: public class Foobar { public static void main(String[] args) { final char[] characters = new char[] {'e', 'v', 'e', 'r', 'y', ' ', 'p', 'e', 'r', 'f', 'e', 'c', 't', ' ', 'n', 'u', 'm', 'b', 'e', 'r', ' ', 'f', 'r', 'o', 'm', ' ', '1', ' ', 't', 'h', 'r', 'o', 'u', 'g', 'h', ' ', '1', '0', '0', '0', '.', ' ', 'A', ' ', 'n', 'u', 'm', 'b', 'e', 'r', ' ', 'i', 's', ' ', 'p', 'e', 'r', 'f', 'e', 'c', 't', ' ', 'i', 'f', ' ', 'i', 't', ' ', 'e', 'q', 'u', 'a', 'l', 's', ' ', 't', 'h', 'e', ' ', 's', 'u', 'm', ' ', 'o', 'f', ' ', 'a', 'l', 'l', ' ', 't', 'h', 'e', ' ', 'n', 'u', 'm', 'b', 'e', 'r', 's', ' ', 't', 'h', 'a', 't', ' ', 'd', 'i', 'v', 'i', 'd', 'e', ' ', 'e', 'v', 'e', 'n', 'l', 'y', ' ', 'i', 'n', 't', 'o', ' ', 'i', 't', '.', ' ', 'F', 'o', 'r', ' ', 'e', 'x', 'a', 'm', 'p', 'l', 'e', ',', ' ', '6', ' ', 'i', 's', ' ', 'p', 'e', 'r', 'f', 'e', 'c', 't', ' ', 'b', 'e', 'c', 'a', 'u', 's', 'e', ' ', '1', ',', ' ', '2', ',', ' ', 'a', 'n', 'd', ' ', '3', ' ', 'd', 'i', 'v', 'i', 'd', 'e', ' ', 'e', 'v', 'e', 'n', 'l', 'y', ' ', 'i', 'n', 't', 'o', ' ', 'i', 't', ' ', 'a', 'n', 'd', ' ', 't', 'h', 'e', 'i', 'r', ' ', 's', 'u', 'm', ' ', 'i', 's', ' ', '6', '.'}; StringBuilder sb = new StringBuilder(); for (int i=0; i!=characters.length;++i) { sb.append(characters[i]); } System.out.print(sb); } }
I use [json-simple](http://code.google.com/p/json-simple/) myself, it's simple to use and very fast.
What's wrong with Jackson?
Nothing wrong really. Just pondering the pros and cons...
Never heard of it before. Thank you for sharing.
There is nothing really difficult about it I think. It's just the first time I use it. What puzzle me, is that when I include Jackson jars to my Android project, the generated APK is more than 500k for and application that does virtually nothing. I know some other Android applications use Jackson. It seems pretty efficient... Also, I want to learn new things, so that's why I am thinking about writing my own parser. :)
I like [simple](http://simple.sourceforge.net/). It's annotation based and pretty quick and easy to learn.. Also, not very big when used in Android apps.
Yea, Jackson seems pretty powerful. But as I said, I would like to learn new stuff, so why not write a new parser from scratch ? Moreover I don't want my resulting Android APK to be too "heavy" (simply adding Jackson jars to my projects make my APK 500K although it does virtually nothing...).
Looks interesting. Thank you for the suggestion !
Can you explain for (char c : line.toCharArray()) Im used to writing for loops like for(intx=0,x&lt;9;x++) by the way I got the problem to work using this method and I understand the if statements, its just this part of the loop that bugs me
this was close but .equalsIgnoreCase didn't work for me
sorry, like I said, I'm not a master at this stuff. I thought java was short for javascript.
What's difficult about Jackson? In my experience it's either easy or very easy to use, depending on what you do with it...
Use arraylists of objects. Each room and item is an object. Each room also has it's own set of commands you can use.
I would make a base class say "PlayerItem" and have other items extend it eg "PlayerItemBow". You can use an arraylist of type "PlayerItem" to keep track of what the user has picked up. This makes it a tonne easier to add new items than using the boolean array that you were thinking of using (an array of type "PlayerItem" can be used if only a certain amount of items can be picked up). I've never played Zork but you could make a class like "Room" and have classes extending like "RoomBoss", "RoomTreasure" etc. You can have a class called "Door" which has a class variable of type "Room" so you can use a command like door.getRoom().takePlayer(player); or something similar. I think the general idea of the commands is using a scanner and using a switch case. This is a lot easier than if/else and is a lot more readable. You could also Build a "CommandHandler" class so you could do something similar to commandHandler.handle(commandFromScanner);. None of this is set in stone but I hope I helped some. It's usually best if you do a little design work before you start, it saves a tonne of time later on for the small amount of time it takes. **tl;dr:Use an array of a custom type "PlayerItem" or an array list for inventory. Create a class "Room" that has a class variable of type "Door" that has a class variable of type "Room" to easily navigate through the game. Use Scanner for commands.** Edit: Formatting
How do I store object references in an array? Would it be like "array[4] = objectname", or something else?
You could try TinySound: https://github.com/finnkuusisto/TinySound I'm not sure if it can do MP3, will depend on your JRE version. But if not converting OGG to MP3 is trivial, so this provides another option.
1.Nope. This would somehow miss the point of classes and objects. Create one class Room which either holds most or all of the datafields you require for a room. Then you can turn each room in a new object of the same class. (i.E Room room1 = new Room("Cell", 1,1), Room room2 = new Room("Dungeon",1,2)) I would store the rooms in an ArrayList&lt;Room&gt; 2. Create a class "Item". if necessary create subclasses using inheriting. Again, store the item the player has in an ArrayList&lt;Item&gt; 3. Well ... this is a common problem and sadly there is not a big workaround. The only possible way to make it a little easier is to make your common game methods general so that you can "call" them from the console. i.E you want the player to be able to give himself an item over /give [Itemid]. Either you create a new Method to accomplish this, looping through a list of items, handling the adding etc. This is however only necessary if you messed a before. Probably you will already have similar method, used by your deep game logic. You just need to make this method accessible for the scanner. The scanning of the input string is quite easy, just split the string and use a Switch or a if-else, depending on your Java Version. 
Array: &gt; Item array[] = new Item[3]; array[0] = new Item(paramOne, paramTwo, ...); array[1] = new Item(paramOne, paramTwo, ...); array[2] = new Item(paramOne, paramTwo, ...); ArrayList (make sure to import it): &gt;ArrayList&lt;Item&gt; items = new ArrayList&lt;Item&gt;(); items.add(new Item(paramOne, paramTwo,...)); items.add(item2);
What is a Switch?
I second Google GSON - it works extremely well and is super flexible.
Read about arraylists. You create an arraylist of item-objects instead of int, String, etc. To create a Zork-clone you should also read about graphs and hashtables which will be used to link the rooms together. 
Ah, text adventure games. I created one in Java for myself, decent, so I'll give you some tips based upon it... you can make a really strong text adventure game but it will be reliant upon how flexible you make your program. 1) You want one class for rooms. Or maybe a few for different types of rooms, but for the most part most of the code will likely be just in one class. Let's call it an Area. So let's think what an area needs... A description. Personally I broke it up into an intro and a conclusion. Then I sandwiched the item/pathway details in between them. Let me give an example (not actually from my game, but what you might expect): *You walk into a room filled with piles of skulls.* To the right, you see a gaping hole that you might be able to fit through. Just a bit in front of you on a wooden table is a skull with a circular hole in it. *You start to feel really depressed and wish to get out of the room.* So the first and last sentence are the intro and the conclusion. The second sentence would be a pathway, the third an item. Basically, your area needs to hold a list of pathways and items (these can be empty). When describing the area, the area just reiterates through the pathways and items describing them as well. Now then, an area should have a few functions that you can do in them. First, a function called hasObject. You pass in an object name, and then it checks the pathway and object list for that object name. Return true if so and false otherwise. Second, a lookAtObject. Given a name, inspect the description of an object. Third, a function called takeObject. Given a name, it will remove that object from the object list and return it. Sound good? Good. You can add more functions, but those are the basics. Don't go crazy, you can do a lot of work with just basic functions used intelligently. Then, overall at the top level of your program, you have a map containing all the areas. 2) Screw a boolean array. Just use a map. Why? Because it does a ton of parsing work for you. When I say, "pick up knife", I don't have to have a table that says knife is array[2], then all throughout my code know that knife is array[2]. Instead, I always just refer to it as "knife". I parse that sentence "pick up" to a command, and the "knife" as what to pick up. Cool yes? Yes. This provides an important concept for your budding career, picking the right data types does a lot of the work for you and goes a long way. Speaking of which, make a Player class. He has a map (as in, map data type) of items, and also a pointer to the current area he is in. Now, give the player a function takeItem. It takes a name, "knife", and will try to take the item from the room. This function should return a string, which will be delivered to the console. So first, it checks the current area for the knife. If it isn't there, return something like, "You couldn't find a knife." You can jazz up the text later. If you do find it in the area, call the Area takeObject and put the returned object in the player's inventory. ... Speaking of which, we should talk about an item class real quick. What does an item need? A name, and two descriptions. Why two? Think of something like this... You have a knife stuck in a table in a room. Alright, that's cool description right? But when you pick it up, and inspect it, it's going to just be the description of a knife (it's not stuck in the table anymore). So you have two, one to describe it in the area it's originally in, and one to describe it when in the inventory. This is one way to really expand the capabilities to articulate a wonderful experience to the user. 3) Commands... This is the realm of parsing. You can make a simple one, that requires specific inputs. Like say "take knife". You search the string for take, find it, then remove it, and pass "knife" to the player as an item to take, then return the string result that describes the action. You don't need a lot at first, just a couple say: take, look, go, quit, help. Oh, always revert the user input string to lowercase... this solves a lot of issues to cover with casing problems. ... Well that's a start, you'll have to fill in a lot of the details but that will at least get you going pretty well.
Fairly straight forward. Which bits don't you understand? public static void main(String [] args) is sometimes the best place to start.
What are you confused about specifically? Do you have an code in progress? Take it in baby steps, break down the scenario into small chunks and then code each piece. I'd start with accepting and checking the input from the user, and using that to create the square object. Once you've done that start working on the method that will validate the square. EDIT: If you're confused by a problem like this start writing out your program in pseudo code step by step.
This is a great answer and I'm glad you took the time to describe to the OP (and me), how to deal with a game like this. After I finish minesweeper, I'm totally gonna do this!
Figure out how to do a 2 X 2, then figure out how to do a 3 x 3, then figure out how to do a 4 X 4. You should see the pattern by the time you get the last one done. (This should be done on paper.) Once this part is done everything else is just a little fluff. And do baby steps like /u/RagnarIV suggested.
Gotta plug my little project here... ;) If you're serializing/deserializing to objects Jackson is good, and I'm sure GSON is fine too. If you're working with JSON directly in memory, my project: [JavaScript Object Graph (JSOG)](https://github.com/JeffreyRodriguez/JSOG) is right up your alley.
It was the IDE because spelling ha no mistakes. I checked several times. Look at the attached photo. No mistake between the method and when it was being called. It continuously told me to change it to another one. I would. Then it would give the same error. You telling me thats a spelling mistake?
It must be the IDE that has had thousands upon thousands of developers use it every single day for a decade. No chance it was the novice developer that didn't know where to look in the code to see what was wrong.
You have changed the way I use procedures forever.
Isn't GSON field based? I find that awkward compared to JSON libraries that are bean-method based. Maybe I'm mistaken about GSON or there is a way to configure it?
Are there benefits to using arraylists over vectors? I have been using vectors for every array but they seem almost the same besides some multithreading stuff.
Do your own god damn homework
You will want to use a combination of a compass (accessible via http://developer.android.com/reference/android/hardware/SensorManager.html) and a gps (http://developer.android.com/reference/android/location/package-summary.html). Basic idea is to figure out where you are via the gps. Given known landmarks you can mathematically determine the compass angle to them, then compare that with the phones compass direction.
If you only need the goal in 2D location, then ydobonoboy's direction to the location API should be all you need. However, if you want to position something in 3D space as the goal for your obstacle course, you would also need an augmented reality portion to your app as well, which would be much more difficult. [Here](http://stackoverflow.com/questions/10067384/android-augmented-reality-library-toolkit) is a stackoverflow response with AR toolkits for android if you are using that.
Thanks for the toolkit, this really helps! 
I prefer Jackson but also used to use one called sojo. 
So I've used Google GSON, flexJSON, and Jackson and honestly I like them all. As I recall flexJSON was the simplest for small objects, but GSON seemed to have a lot more abilities for more complex use cases. With that being said, the place where Jackson shines is when you're using JAX-RS, and it will automatically marshal/un-marshal those object types for you. I'm not sure how you're using it, but being able to set up a REST endpoint(a la jax-rs) and just passing in an object from JS and having it show up fully fleshed out on the back-end is FANTASTIC. 
Its an enhanced for loop. What he did was turn the string into an array of characters. It's the same thing as saying: char[] c = line.toCharArray(); for(int x=0; x&lt;c.length; x++) { if(c[x] == 't' || c[x] == 'T') { numberOfTs++; } else if(c[x] == 's' || c[x] == 'S') { numberOfSs++; } } Just an easier way of writing that.
You should really ask more dire t questions if u of want help. 
Another vote for json-simple. 
Try LWJGL. http://lwjgl.org
I second LWJGL, it has openAL too which would be good for you!
Thank you. This was extremely helpful. I am going to read up on parsing. It seemed like that was going to be the hardest part, as far as commands went. Now it seems trivial
I used [JACOB](http://sourceforge.net/projects/jacob-project/develop) several years ago to integrate some legacy COM code with some new Java stuff - it worked fine for us but you need to have a reasonable understanding of COM to use it.
I know how to spell. Did you not take a look at the photo? Can you see a single error in the spelling? And how can you explain when the IDE created the method for me, using the spelling from the call, in the class I was calling it from, it would then tell me it already existed? And how can you explain the error not showing until AFTER I saved the class? Take a look before accusing novices of making simple mistakes. I'm a beginner programmer. Not an idiot.
If you want to do this with COM, you will need a COM bridge... JACOB is a good open source alternative, but I haven't used it in a long time. In the past it could only deal with non-graphic COM components, I don't know if support for graphic components has been added in the recent years. In order to work with graphical components, I've used ComfyJ in the past and it is great, but also not free (it's actually quite expensive, 1149$ per developer). OTOH, as cww said, if you need to manipulate documents and have some time to learn its API, you should take a look at POI.
Yes it is. From the [GSON Design Document](https://sites.google.com/site/gson/gson-design-document): &gt; **Using fields vs getters to indicate Json elements** &gt; Some Json libraries use the getters of a type to deduce the Json elements. We chose to use all fields (up the inheritance hierarchy) that are not transient, static, or synthetic. We did this because not all classes are written with suitably named getters. Moreover, getXXX or isXXX might be semantic rather than indicating properties. &gt; However, there are good arguments to support properties as well. We intend to enhance Gson in a latter version to support properties as an alternate mapping for indicating Json fields. For now, Gson is fields-based. It's just how GSON works behind the scenes. Nothing prevents you from having your own getters and setters, GSON just won't use it. So the only limitation would be that you can't do lot's of stuff in a setter.
This will explain the difference: http://www.javaworld.com/javaqa/2001-06/03-qa-0622-vector.html If you know how to use Vector, you know how to use ArrayList. I don't intend to focus to much on what you are using, but that you are understanding the principal behind object-orientation, which can be quite important in this project. You have a class called Player, one called Item, one called Room and so on. You _construct_ objects out of these classes, so you create a new Player when you start the game. You can also create a new item with a string in the Item-class called "sword". Each Room-object has it's own set of commands you can perform in the game. 
Horrible, horrible code :( It's not even thread-safe. If stop() is called, there is zero guarantee that the render loop is ever stopped. In practice it might work, but the code does NOT have sufficient thread-safety to guarantee it. A simple change, such as removing a seemingly unrelated line of code, or running the code on a different hardware platform, could break it. This is what I like to call **luck-based programming**! The problem is that even though the writes (start/stop methods) to variable *running* are synchronized, the reads are not! You would have to synchronize the read or add the *volatile* keyword to the variable. Without either, there is no guarantee that the running thread will ever see any changes in the variable value.
The model is just forcing you to do what you should be doing already.
I've tried POI before but I found that the documentation and the overall power of VBA in Office was significantly greater than with POI.
[I'll enlighten you](http://www.dannyg.com/ref/javavsjavascript.html)
As the other comments said, just go lower if the libraries aren't working. LWJGL is incredibly fast and, since it isn't meant to be high-level, incredibly flexible.
With the python com library it allows for complete access to all of the power of VBA, I can create powerpoint presentations, add animation, all of the visual basic strengths, and have access to the full visual basic documentation. When I do this i also have access of of python's strengths as well. ppt = win32com.client.Dispatch("Powerpoint.Application") presn = ppt.Presentations.Add() ppt.Visible = 1 presn.SlideShowSettings.ShowType = 2 presn.SlideShowSettings.Run() ppt.WindowState = 1 ppt.Height = 250 ppt.Width = 400 With this I have a handle to "Application" in VBA, and can do anything that can be done in VBA
As other posters have mentioned, LWJGL is a great option. Depending upon what you want to acomplish, libgdx might be another option. It's a game library/framework build on top of LWJGL for the desktop, but it provides a bit of extra frosting that may be useful, depending upon how you intend your visualizer to work. As an extra bonus, it would also give you the option of hitting Android devices and even (with a bit of extra work and cost) iOS.
While I certainly agree with your overall point (unless you have a damn good reason, use the [already written and tested] source, Luke), I think it's an overstatement to say that the *only* think you'll learn from writing your own parser is to not waste your time doing it again. While I use libraries whenever it makes sense, I'm glad I've taken the time to implement a fair number of "lower level" systems over the years (like parsing, data structures, sorting, timing, etc.), because: **a.** I can do a much better job evaluating libraries because I've implemented many similar algorithms and systems myself in the past. **b.** When it happens that I have an actual reason (be it legal, business, logistical, or technical) not to use an existing library, I'm not nearly as screwed. **c.** I have a better basis for evaluating the logistical and technical aspects when it *appears* I'm in situation (b).
More specifically, the error is happening in line 14 and 15.
You are assigning the value of 'x.makeNum' to x; problem is that 'makeNum' returns void. It needs to return an int. Edit: also for formatting, put 4 spaces in front of every line of code that you paste.
Awesome! thank you so much for your help :)
I can give you a pretty good hint mate. Join Topcoder. If you check google's suggestions about placement (are you from the uk by the way?) you will notice one of the things they suggest is that you get your bum onto topcoder and try out the practice questions in the single round tournaments. Theyre pretty bloody mentally taxing at times. But if youre excellent with java. you'll manage it. Google only want the best. Train for google, you'll get microsoft too. Google it has been said will give you a test very similar to the sort you will see on topcoder. Plus, it is of great help anyway for study. You'll be learning all sorts of stuff on the fly. Seriously improving your grades in the process.
That isn't the dereference problem though it is a problem with the code. x &amp; y aren't objects. You can't call methods on them. They are ints. 
I work for neither, but my guess is they will be realistic, so they're not going to expect in-depth knowledge of API's or frameworks. They will expect you to know the core language well and to be able to solve self-contained programming problems in your chosen language. I would expect them to drill into areas of particular interest to them, perhaps data structures (esp various types of tree), complexity theory (P vs NP, big-O notation), concurrency, and optimisation. Good luck! 
 while(running){ Well, this line reads the variable, does it not? The first time it gets executed, *running* is most likely true, due to earlier execution of the start() method. However, there are absolutely no guarantees that the loop terminates even if stop() is called, because writes to the *running* variable are not guaranteed to be visible in the thread that runs the loop. **Edit:** Also, I'm sorry, I know you didn't ask about thread-safety in your original post, but I just wanted to point this out. Multi-threaded programming is difficult to do right :)
yes I am in the UK, and thank you so much! I'm not a programming prodigy, I am just naturally fairly clever and work my ass off, but lately I have been doubting myself a bit, so learning resources are really appreaciated! Gonna head to topcoder now.
thankyou, yeah we have covered these things in our programming modules so I will make sure I know my theory behind programming etc
Could you share the name of the books you used to help a fellow programmer in progress?
Thanks and honestly I think its better that you mentioned that i'm still learning all of this and if you didn't point that out i would probably continue to make that mistake later on.
In case someone is interested, here's a minimal example of the invalid pattern: import java.util.concurrent.TimeUnit; public class Kaboom { private static boolean running = false; public static void main(String[] args) throws Exception { running = true; Thread thread = new Thread() { public void run() { while(running) { } } }; thread.start(); TimeUnit.SECONDS.sleep(1); running = false; thread.join(); } } On my test machine (Oracle JDK 7u10, 64-bit Linux), this program never terminates. On some other machine/java version/jvm parameters it might, but overall there's no guarantee that it does. Add the volatile keyword to *running* and the code is guaranteed to work every single time.
&gt; They will expect you to know the core language well and to be able to solve self-contained programming problems in your chosen language. The latter much more than the former. You won't get much in the way of "what's the difference between public and private". The questions will be much more along the lines of data structure and algorithm development as well as thing like run time/space analysis (Big O notation) and efficiency. Not sure about for the internships but probably some systems architecture questions as well.
cool thanks! Was the answer allowed to be pseudocode? Or did you have to write an actual working solution? I think I would use lisp
Also, /r/DailyProgrammer wont hurt :)
Some interviewers look down on psuedocode, in general it's often safer to use a real language unless they specifically ask. Also not everyone will appreciate you using lisp (personally I'd love it but then we're trying to hire Clojure programmers). I'd default to Java. Anyway, my advice, buy this: http://www.amazon.co.uk/Cracking-Coding-Interview-Programming-Questions/dp/098478280X/ref=sr_1_1?ie=UTF8&amp;qid=1357341986&amp;sr=8-1
Thank you a lot for all the help this is one of the reasons why i love Reddit so much!
 public int makeNum(){ int randomInt = rand.nextInt(100); return randomInt; } Part of the problem seems to be that Fantastic201 doesn't realize that the variable names used in makeNum have no relation to the variable names used in addition. Perhaps changing the variable names as I did above will enforce that point.
It's usually in a language, but it's for any language that you wish to attempt it in. Unless they specify otherwise. 
Googler here. Contributions to open source projects are by far the best things you can have on your resume, most notably because it means recruiters can actually find and read code you've written that is out there -- and you'd better believe they *will* read it.
you better know your basic data structures like the back of your hand - don't sleep on that, they will expect that. LinkedList reversals, different trees/traversals, which ones are best for what situation and why, stuff like that you will be expected to know if you're going Google.
I really love Processing at the moment (http://processing.org/), it's sort of its own programming language built on top of Java (and there's also a javascript implementation of it), but it's very easy to use and integrate with Java (i.e. you can still use all Java features while programming in Processing) in your IDE of choice (I use it with Eclipse without any problems). I feel like it's definitely different than other graphics libraries, but I think it sure merits a look. At the very least check out some of the code examples or tutorials on the site to get an idea of it. :)
Facebook has these test too, freely available. edit: the link https://facebook.interviewstreet.com/recruit/challenges There is a sample section if you click on start.
Never done any :(, I'm interested in web development and gaming but nothing has naturally led me to getting involved with any. How do you get into stuff like that, could you point me in the right direction?
Here's a nice tutorial written in Ruby which tackles the same challenge. I'd suggest mining it for the architecture, and porting it to Java would be a nice exercise. http://ruby.about.com/od/textadventure/ss/One-Tree-To-Rule-Them-All.htm
I just finished an internship at Microsoft, and was offered an internship at Google as well. I also got the internship after my second year, and my primary language was Java. Topcoder was certainly a site I visited (at Google's recommendation), but I was too lazy to actually do anything on the site. I would recommend brushing up on algorithms and data structures. The programming questions were fairly simple (to be honest, there's not much a second year programming student can know) and focused more on finding out how you think. They asked some questions that no one could ever hope to know the answer to, because they wanted to see how I could put together the information I knew to tackle a problem that was new to me. If you have any questions, you can feel free to ask. I'll try my best to answer, though I don't know how much help I can be. edit: I see some mention of open source stuff from some other answers. Yes, open source projects will look amazing. But they aren't going to write you off if you don't have it.
I would strongly advice against pseudocode. The most you can do is write out the algorithm in English and then write the code in an OOP language, commonly Java. I would also suggest [this book] (http://www.amazon.co.uk/Programming-Interviews-Exposed-Secrets-Landing/dp/1118261364/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1357361744&amp;sr=1-1) 
Processing looks cool - i'll take a look.
thanks. LWJGL is certainly the best direction then.
Nope, unfortunately they have no effect on the thread-safety. public only affects visibility. Who can access this variable? static only affects location. Is the variable stored per-class (static) or per-object (not static). Making it volatile is the only reasonable solution that works. Please note that in general marking variables volatile blindly is not a good idea, because you will suffer a performance penalty. However, in multithreaded programming correctness is more important, so we usually ensure correctness, but with minimal changes. Which in this case is ensured by making the boolean variable volatile.
I got my first Google interview through some contributions to a small open source project :D
Thinking in Java by Bruce Eckel is the right book for you. It covers everything from basics up to introduction to Swing and concurrent programming.
Head First Java...if you like it's style
Why would you want to go head first into something as complex as programming language? I hate books which don't teach you the basics and don't help you build the foundation of your knowledge. Bruce Eckel takes it from the bottom and even though you might wanna skip a few chapters at the beginning it is loaded with useful information designed after experience in teaching collage students.
Head First Java DOES teach you the basics. I've read it and I'd highly recommend it to Not_Cliche. It's a great book for helping you understand the object oriented programming principles and it contains some fun examples.
Imagine how much better your programming would be if you studied the basic of the language you use. If you didn't know about the switch statement, there are no doubt many other things you should learn. There are books that can help you learn these things. 
I took AP CS in high school too. Are you really familiar with everything that's been covered so far? Do you understand: * OOP - Inheritance, polymorphism, abstract classes, interfaces? * Reading javadocs - can you make your way through the Gridworld docs and understand everything? * Collections - for now, ArrayList, array, HashMap If you do, you're in a good place. Here's some next steps to take: * Data structures: implement your own HashMap and Heap. * Algorithms: implement quicksort, mergesort, and binary search * Threading: basic threading, synchronization with `synchronize` blocks and variables * Design Patterns: **MVC**, Singletons, static Factory methods. Pick up [this book](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/) * Swing: Google 'java swing' - DL Netbeans, make a couple of basic JFrames to get the hang of things, then create your own JComponents and see if you can do some basic animation with text (you'll need threading for this). You'll want to find a big project to get started on. Try making a game with a graphical front-end in swing, because it's gonna teach you about: 1. Swing API (important!) 2. Threading (Swing is single-threaded so you need to separate the computing and the painting) 3. java.awt.graphics API - this is very important if you want to get into making basic games in Java. 4. Double-buffering and other design patterns associated with java graphics 5. MVC - your main JFrame should be a pretty small file if you're doing it right 6. Game loop - very important concept if you're interested in game design You can do something like a turn-based, grid RPG: player turns or moves a square, all enemies move or turn, deal with combat, repeat until the end. If you're feeling ambitious, try something similar to [left4kdead](http://www.mojang.com/notch/j4k/l4kd/), although that might be way beyond your scope right now if you have no experience with java graphics. Maybe it seems like a lot, but it's really not all that much, trust me. I went through pretty much the same process in about 3 months when I was in high school. If you're dedicated to taking that next step in Java, it should be fun and encouraging.
If you don't mind change of language I would suggest http://learnpythonthehardway.org/ which should give you solid foundation to python programming. As you are quite inexperimented, you will have nearly nothing to lose by switching of language. And you will have good foundation in programming in general which is more important than to know the strange things found in java.
I haven't read the head first java book but I always hear great things about it. It should be good place to start learning Java. Once you get familiar with Java, pick up Joshua Bloch's book, Effective Java as soon as possible.
I would also like to add on, you should probably learn LWJGL if you also want to do game development.
I really liked the OCP (SCJP in my days) book: http://www.amazon.co.uk/Certified-Programmer-Study-Guide-CX-310-065/dp/0071591060/ref=sr_1_1?ie=UTF8&amp;qid=1357417366&amp;sr=8-1 Very focused, complete yet still a fluent read.
[Thinking in Java by Bruce Eckel](http://www.mindview.net/Books/TIJ/) is offered as a free ebook on the author's site at the link I gave. It covers OOP fundamentals and is specifically for learning to programme for beginners.
It's good to know someone else offering advice has been on my boat! To your question as to what it is I'm familiar with - yes for everything you listed, save for HashMaps. I have no idea what those are. Some other things are rusty, but I'm sure I can quickly pick those up again (it's been a few months since I last did anything real Java-intensive). And yes, I actually do have a big project that I have in mind. It's just a simple poker program (I'm interested in poker too, you see...), but for someone like me it would probably be the perfect fit. In your fourth bulletpoint, where you suggested the hyperlinked book, was that in reference to all your previous and following points? Or just for that specific point. Thanks for your detailed advice! **Edit:** Also - is there a particular reason why you suggested I download Netbeans? Would there be anything wrong with using Eclipse as my IDE? Or does r/java not like Eclipse? idk.
Well, I'm a bit (contrary to what I was suggesting) too invested in Java at the moment to really be able to or want to switch to a different programming language. However, once I do get a good grasp of Java, I'm definitely looking toward Python as my successive language - which *should* be, as you suggested, much easier to handle. Thanks for your input! I will keep that link/suggestion in mind for the future!
I actually own (rather, my friend owns) an edition of that book so, yes, I have looked at it. Ironically, it's a bit *too* thorough for my liking, so I just have it on hold for when I do need it for reference. (but thank you!)
I'll take a look at it. The reviews seem to be generally positive. Any particular things about the book, in your opinion, that make it a worthwhile read? Thanks. (sorry if you notice the absence of an exclamation mark. I feel at this point they're getting rather stale)
A second suggestion for Eckel. Will do. Nice to know there's a free ebook alternative. Thanks.
Thanks for the suggestion. Much obliged! :) (creepy smiley face included) 
Netbeans has a DnD visual GUI builder that's pretty decent, it's a good way to start out. The book is just for OOP design patterns. 
it can do both with minimal changes. 
er, you understand that you can decompile class files, right?
sweet thanks a lot
I vote for this too. I read both Thinking in C++ and Java and they are... just so great. 
I still don't really get the fuzz for theses lambda expressions. So, ok, we get shorter code, but since we can all use code completion, writing them will just take the same amount of ctrl+spaces! But, on the performance improvements on Collections, i'm just ecstatic.
Code creation may be the same, but reading code will be easier (provided they settle on a decent syntax).
The only (subjectively) interesting things being done with applets is virus/malware creation, which doesn't really help the applet scene.
Runescape started as a java applet. It might still be but I haven't played that game in a while.
I agree. The examples I see do not seem that easy to read. Shorter is not always better. I really like that Java is descriptive and not a bunch of symbols. Maybe it just takes some getting used to. I would rather see something to get rid of all the getters and setters. Maybe an @getAndSet annotation. That would cut down on a lot of boiler plate code that just takes up space.
This is incorrect, although I'd assume facetious. An applet runs in a sandbox and can't access the computer it's running on, or even a domain other than the one it's running on without the explicit permission of the user (set by policy). What you may be referring to are the multiple exploits of bugs in the JVM delivered by Oracle.
I believe it still is, but don't quote me on that; also haven't played it in a while.
&gt;An applet runs in a sandbox and can't access the computer it's running on, While this is true in a perfect world, the jvm browser plugins are the #1 attack vector precisely because this is false. What runs in the jvm browser plugins? Applets. The reason applets never made it on their own merits can be attributed to one entity, Microsoft.
Look friend, there is only so much time busy people can waste responding to the OCD Java Police. I linked to the defacto java coding convention book if anyone wants a handy pocket guide. I'm not a markdown expert, this site uses it to &lt;pre&gt; wrap code. What everyone is upset about is a single carriage return. Yet invariably after I posted it, noticed it and said, fuck it, I'm don't farting around with this markdown thing. If someone had something to say regarding my comment (reducing your vertical code real estate) other than attributing some missing carriage return into this grand idea I am giving advice without knowing anything about java myself, then I might have responded with less snipe.
“Only a few years ago, Java EE was used mostly by larger companies—now it becomes interesting even for one-person shows.” What is this guy smoking? He goes on to say: “The problem is not Java,” he explained, “but, rather, systems built with ancient patterns and approaches. Sometimes it really is ‘cargo cult programming.’ Java SE/EE can be incredibly productive and lean without unnecessary and hard-to-maintain bloat. The real problems are ‘ivory towers’ and not Java’s lack of productivity.” He fails to mention specifics, I would be interested in what he considers "lean, bloat free" java frameworks.