Much of the code can be shared if you use an HTML5/JavaScript approach for most of your app design (check out jquery mobile if you haven't yet). Both android and iOS support using web tech to develop apps. So, the part phone gap would do for you would be the difference between your two platform's code. About your other questions, I'm afraid I don't know the answer. 
Why the fucking hell are you in this subreddit?
Vote up for Yu Yu Hakusho username.
&gt;2014 &gt;Not running in linux constanza.jpg
asp.net!! And you are talking about my stupid fanatism? Call me when your future is here lad.
Ok, you win. While you are spreading the truth i'll be programming with java in linux. Since .net it is officially supported on windows now and c# is more efficient than java, you could join me and compare. I'm just curious, i'll pay 500$ for Visual Studio IDE and see how it runs on linux. 
Honestly, Java is an enormous language and no one will ever have a hope of knowing everything. Best you can do is learn the basics (syntax, Java Data structures, control-flow etc...) and just build something. If you get stuck, google it. You'll get stuck a lot, but that's part of the process.
Yes, good point. The use of GET is by no means mandatory and I will change that method to POST or even PUT (make the service REST). HTTP status is also a graceful way of pointing out errors. Thanks!
The use of annotations here is graceful. Also in perfect alignment with the whole SPRING environment. I like that and will see to implement it that way! Autowiring the validator would provide the benefit of having an already set up one ready when you need it, instead of creating a new one everytime, right? Isn't the validator something that might change on a quite substantial basis (created with eg. MIN_PASSWORD_LENGTH as a member)? Therefore creating new ones or casting the one you need with 'new' seems logical. This is my uninformed opinion and purposedly put there with a lot of question marks :)
Nice to see a really wide range of topics at javaOne
NIce features!
Just skipped through a bit without thinking about it real usage or correctness, but saw some stuff which poked my eye: * https://bitbucket.org/novaz/twitchbot/src/d2ce5f2d57e891f24e6d1aa3f027c2caed4cf1be/src/bot/Bot.java?at=master#cl-46 try catch in a constructor, not sure why but even then something is wrong * https://bitbucket.org/novaz/twitchbot/src/d2ce5f2d57e891f24e6d1aa3f027c2caed4cf1be/src/bot/Bot.java?at=master#cl-56 why printing it twice? * try to use `final` on fields since then they are immutable references (collections still mutable though) but it helps you properly initialize them * `private` methods can be code smell indicating that you doing too much in one class, I would probably split it up in something like a `CommandHandler` * try to use Logger utilties, there are several libs out there which offer that and Java itself offers a basic one. They are much more powerful than `println` can ever be * database queries are generally written in UPPERCASE so that you can easily identify the IDs from the commands of the DB itself * last but not least, write comments, at least for the class itself. If you notice that you writing too much, then its probably time to refactor the class and split the concern. If you want to keep it clean and not pollute your package with classes, you can create private classes, too.
I'm not sure what you're trying to do. I guess it has to do with monads, but I've never worked with that. I'm sorry. However, this works: public class TypeclassTest { public interface Monoid&lt;T&gt; { T unit(); T append(T a, T b); } public interface Group&lt;T&gt; extends Monoid&lt;T&gt; { T inverse(T element); } public interface IntAdditionMonoid extends Monoid&lt;Integer&gt; { default Integer unit() { return 0; } default Integer append(Integer a, Integer b) { return a + b; } } public interface IntAdditionGroup extends IntAdditionMonoid, Group&lt;Integer&gt; { } IntAdditionGroup intAdditionGroup = (element) -&gt; -element; } Good luck. __Edit:__ Although I'd not know why you'd leave the inverse function without a default. But, again, I don't really know what you're trying to do. 
What he's trying to do is define polymorphic relationships between classes adhoc. Why this is useful is easily illustrated in scala: def add[T](x: T, y: T) = x + y //can't be done, + is not defined for Any (scala's loose equivalent of Object (AnyRef is scala's true equivalent)) def addNumber[T &lt;: Number](x: T, y:T) = x + y //still doesn't compile, number doesn't define +. //Numeric is a typeclass that is implemented for the numeric types like Number is //inherited from by the numeric types. Numeric implements add, which + is aliased //to in some extra defintions imported by scala.math.Numeric.implicits._. It is an //example of adhoc polymorphism because the relationship between Numeric and //the numeric types is defined on the fly at a later point instead of at the //implementation site of Integer, etc like regular inheritance. def addNumeric[T: Numeric](x: T, y: T) = { import scala.math.Numeric.Implicits._ x+y //compiles thanks to implicits and Numeric } //generic addition! addNumeric(5, 6) //returns an Int addNumeric(6.0f, 2.5f) //returns a float 
Try also to post your code to http://codereview.stackexchange.com/
Wrong thread?
Run static code analysis like Findbugs and pmd. 
Sorry for the brief (and slightly inaccurate) reply, I was on mobile. I suggest you take a quick read through the URLConnection javadoc (http://docs.oracle.com/javase/7/docs/api/java/net/URLConnection.html) which outlines the basic process you'll want to follow. The URLConnection is pretty much single use and doesn't have a close method (although you do need to make sure you close any InputStream or OutputStream you get from the connection in a finally block or with Java 7 try-with-resources). From HTTP we know the cookies will be "set" by the server on the client in the header of a response to an HTTP request. Presumably, you are having cookies set on you in the response to a UrlConnection you've already opened and connected. At this point you'll have the cookie but you've already connected the UrlConnection which you used to get it. You want to include the cookie header in the next request to the server, which may be to a new URL or the same URL. In either case, you would call openConnection on the URL (again) which returns a new UrlConnection for you. You can now manipulate things like headers and other options _before_ calling connect on the UrlConnection. 
yes to all of the above AND PLEASE sanitize your SQL Statements. try (ResultSet r = Db.select("select input, output from command where channel = '" + _default_channel + "'")){ is highly vulnerable to sql injections...
I've never really used Jersey all that much. I just did a quick scan of the Jersey documentation and the API. I would suggest you do the same. Here is a link to the [multipart documentation](https://jersey.java.net/documentation/latest/media.html#multipart).
Autowiring the validator lets it participate in autowiring, so if the validator requires external resources, such as a database connection, you don't have to manually wire them in, which would be the case if you used new. Does the MIN_PASSWORD_LENGTH change while the application runs? If not, this could be made a constant or a parameter. If so, then it would make sense to use `new`. Usually though, validators represent a fixed set of constraints that don't change dynamically.
I think the universal consensus here is Primefaces.
Thanks for taking the time to look through it. I'm not entirely sure what you meant with something like a CommandHandler. Do you mean something like an observer pattern?
They generally involve misconfiguration. Some of my applications have plugin APIs that dynamically load JARs, so it's very possible to write perfectly valid client code and have the user misconfigure the system. It would be nonsensical for the client code to be given an exception that has nothing to do with their code -- that error needs to bubble up to my code, which i have a top level handler that will catch the error and investigate why the "libs" are misconfigured. Other scenarios are instances of apps i've written that allow user scripting, via groovy or javascript, which may make similar bad assumptions about the classpath, but which wont be seen until runtime. Should i make them catch checked exceptions in their scripts? 
[AssertJ](http://joel-costigliola.github.io/assertj/) has a cleaner API, with better code completion in your IDE and with better error messages. Don't use the old JUnit/Hamcrest stuff.
I've not worked out why people are so behind the idea of including everything in the core library - such as JSON Processing and the Money and Currency API - as opposed to just depending on an appropriate library that does what you want. I'm especially confused about the fact that people want both this AND Project Jigsaw... Pulling everything into the core library makes it convenient to use and distribute, but it also makes it much more likely that people will just use what is there instead of using potentially better alternatives, or even writing better alternatives if they need one...
Got it, thanks. I compromised a little by using a Set&lt;MyClass&gt; until I was ready to call the method, then calling with a new Set&lt;MyInterface&gt;(Set&lt;MyClass&gt;) and it worked fine.
Thanks, I'm using prepared statements for everything now.
Hello, Primefaces basically "won" the user base. jboss has publicly stated that they will not be investing much into developing Richfaces further. Here's my two cents on how to approach JSF. I develop in it daily and I have experience from Richfaces, Primefaces, Omnifaces, JSF 1.2 - 2.2x. I have also written several components myself and my employer has a legacy component framework with 40+ components that predates the invention of facelets but it has been kept up to date at least somewhat. JSF devs in general use components to much and look at Primefaces as some kind of free buffet. Back on the server side they know by instinct that using frameworks to much and in a decentralized way can be harmful in the long run but this seems to be forgotten when it comes to composing facelets. Try to forget about components such as spacer, separator, panel. Use html &lt;div&gt; with some CSS or perhaps another equally basic html component. Mixing html and jsf was painful in the old days and old habits die hard I guess because I still see people solve things with JSF that should have been solved with html + css. Also, use Omnifaces and JSF when they have equivalents to Primefaces. This is because Omnifaces works with Richfaces and normal JSF have two implementations and less fuzz if you don't need fuzz. Think about functional requirements and not so much on what the components can offer. You can create your own composite component and encapsulate whatever widget you want including of course a primefaces widget or one from a js framework. Further, today javascript is required to use the web and that opens the door for more work on the client side. JSF and jquery is a great combo as of today. When it comes to primefaces I would say that you don't need much. We use the datepicker, the megamenu, some css classes, and a few controls. We also use PrimePush. The rest is just plain html, css and JSF. We do however use the themeroller style classes for everything. Doing css that was is actually pretty incredible. Trying to add your style to components already styled with themeroller is misrable though. So embrace themeroller or forget primefaces. I think I have to show you some example code for how modern JSF looks like. My goto example is this button: **Modern JSF example:** &lt;composite:interface&gt; &lt;composite:attribute name="action" /&gt; &lt;composite:attribute name="value" /&gt; &lt;composite:attribute name="icon" /&gt; &lt;/composite:interface&gt; &lt;composite:implementation&gt; &lt;h:commandLink action="#{cc.attrs.action}" styleClass="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-left page-control" ajax="false"&gt; &lt;span class="ui-button-icon-left ui-icon ui-c fa #{cc.attrs.icon}"&gt;&lt;/span&gt; &lt;span class="ui-button-text ui-c"&gt;#{cc.attrs.value}&lt;/span&gt; &lt;composite:insertChildren&gt;&lt;/composite:insertChildren&gt; &lt;/h:commandLink&gt; &lt;/composite:implementation&gt; &lt;/html&gt; Usage: &lt;g:button action="#{loginBean.login()}" value="login" icon="fa-user"&gt; &lt;f:ajax /&gt; &lt;/g:button&gt; It uses Font-Awesome for icons because themeroller icons are pretty poor in comparison. To integrate Font-Awesome we used webjars.org pre-jared version + Omnifaces unmapped resourcehandler. It took about 10 minutes to integrate. It looks exactly like a primefaces button and I could change the underlying implementation to a primefaces button whenever I wanted to. Composite components are really great. This is another example. A form this time: &lt;composite:interface&gt; &lt;composite:attribute name="includeViewParams" type="java.lang.String" /&gt; &lt;/composite:interface&gt; &lt;composite:implementation&gt; &lt;o:form id="mainForm" includeViewParams="#{cc.attrs.includeViewParams != 'false'}"&gt; &lt;composite:insertChildren&gt;&lt;/composite:insertChildren&gt; &lt;ds:preventDoubleSubmit /&gt; &lt;/o:form&gt; &lt;/composite:implementation&gt; It uses a deltaspike component to prevent double submits and defaults to including the view params. So you see you can use composite components as a way to reduce boilerplate. JSF really shines when a few in the team love frontend and others don't. But don't forget someone has to evaluate what the resulting html looks like. View source is your friend. Sometimes primefaces components are too flexible and generate a lot of html. One example is the tooltip funtionality. **Performance** * Minify your javascript and css files. Note that css should be structure only because style == themeroller. Primefaces Extensions has a great maven plugin for this and it's not even tied to JSF. * Use client side when needed. * Use ajax when needed. Please look at "Ajax" from Omnifaces. It basically lets you do even finer ajax things than what is possible with just plain JSF. * Use Omnifaces combinedResourceHandler. * Try to avoid unnecessary el-expressions. * Use Myfaces * Use JUEL * Make sure @Model classes are very thin. Logic should be elsewhere. * Use @ViewScoped when needed and never do work in the @Model getters. * Use lazy loading. Lazy loading with p:remoteCommand is easy to google. I use omnifaces o:commandscript the same way. Don't it to much because server side rendering is really and part of the page plopping up randomly is just annoying. **What happens if PrimeTek folds tomorrow?** Themeroller will still work. Have a copy of primefaces source in case they add something css-wise. Since you did not go bananas you have very few components to replace. The ones with very specific design are used as composite components. Stuff like p:inputText can be replaced easily regardless. **What happens if you wake up one day and JSF sucks?** Go with PrimeUI if you like the primefaces widgets and want to migrate slow. Make sure you use Bean Validation so that logic can be preserved. Very important to keep JSF layer thin for this and many other reasons. 
wat.
ah should have linked the code there, I just mean a class which handles the commands `Command` for you
As Sphinx001 said, if you have a Set&lt;MyInterface&gt; then it will work. Alternatively, if you change your method to accept Collection&lt;? extends MyInterface&gt; then it will work too, because you are then saying that it must be a collection of anything that is MyInterface or a subtype of it. The problem is because you can have the following code: void myMethod(Collection&lt;Object&gt; col) { col.add(1); } Set&lt;String&gt; strings = new HashSet&lt;&gt;(); myMethod(strings); You have defined a set that can only contain String instances, passed it to the method and the method has gone and added an instance of Integer - which is not a subclass of String - to it. This means that if you later work with the instances in the set, you will come across one all of a sudden that is of the wrong type.
king_of_the_universe
I just wish I had the time to fork and maintain the Fest-Reflection api... I love fluent interfaces. Major love for Amazon's AWS java api and Rest-Assured as well.
Just curious, why are you downcasting your beautiful interface? ~~The whole point of making an interface is so you don't have to care about the base class.~~ [Nope, turns out there's more to it.](http://www.reddit.com/r/java/comments/2g097u/generics_question/ckejdrt)
Doesn't spring-loaded allows that? I think the last time i tried it, it reloaded the whole context on each recompilation.
Yea it does. JRebel is a proprietary solution that is supposedly more feature-rich than Spring Loaded and offers IDE integration that spring-loaded can't. Honestly, I haven't found a real need for it over spring-loaded at the moment but some people swear by it.
Some words to keep in mind: * **Invariant**: The generic type of the collection reference is the same as the actual collection. Accessing the collection through this reference is safe for read and write, since we know the *exact* type of the collection. * **Covariant**: The generic type of the collection reference is a subtype or the same type (? extends MyInterface). Accessing the collection through this reference is safe for read only. We know what the type of the collection must *at least* be, so it is safe to assume what you take out of the collection. But since we don't know the exact subtype, it is not safe to add to the collection. * **Contravariant**: The generic type of the collection reference is a supertype or the same type (? super MyInterface). Accessing the collection through this reference is safe for write only. We know what the type of the collection must *at most* be, so it is safe to assume what you can put into the collection. But since we don't know the exact super type, it is not safe to read from collection. See [here](http://java.dzone.com/articles/covariance-and-contravariance) for a more in depth explanation.
Yeah, but if you have the choice, don't use JSF, it's heavy, and when you try to go outside the trench it's a pain in the ass
Let the flame war begin!
Wow, this answer could easily have been a blog posting of its own ;)
Bear with me, i'm using JSF daily, it can be good for a lot of stuff, but lacking so much in customization
Never tried JRebel but springloaded is pretty slow, it took quite a while to get going last time I used it. It also may be because I'm running on Windows. Supposedly JRebel has a bunch of plugins to handle other contexts/libs too like Hibernate/Mybatis mappings. 
Thanks, I've been using netbeans (for php previously even, now for java) and following the tutorials at netbeans and the java ee 7 docs. glad to know im at least doing something right. 
What is Maven for? Why would I use it, what would the consequences of not using it be?
What should I go with then to publish my project, just using html/css/javascript?
Please don't. These views are total crap, often handle terribly and are never a native feel.
Yes, especially if you're hoping to reach normal people instead of a business intranet. You could possibly consider using flash, but really html/css/javascript are so powerful nowadays it will probably be the best option.
This is a pretty good comment, wish Reddit had some mechanism to give an extra boost to a post. I too live by most of those rules. Use components sparingly, nobody ever said that a JSF view should only contain components. HTML is your friend. Use plain HTML when it gets the job done, use a component when it clearly provides benefits. Keeping @Model classes slim and have the actual (business) logic in services is even my number one rule ;)
PrimeFaces is the number 1 component library for JSF. RichFaces used to be pretty solid too, but at some point it started to slip and recently they threw in the towel. I've heard through the vines the reason being they couldn't keep up with PrimeFaces, or in other words they were out-coded. In all honesty, RichFaces has existed since the early beginnings of JSF and had a lot more legacy to carry along. PrimeFaces started much later and had the advantage of being able to make use of more mature APIs from the start. There are lots of other component libraries like Trinidad &amp; Tobago, but (perhaps unfortunately) only few people use those. So yes, PrimeFaces is the number 1. (Note that there's also a library called OmniFaces. This is not a visual component library like PrimeFaces, RichFaces, IceFaces, Trinidad, etc, but a utility library. Where PrimeFaces provides UI widgets, OmniFaces provides enhancements, fixes and conveniences for the core JSF APIs)
What version of the JDK are you running? 32-bit or 64-bit? What OS are you running on? Post your code. -1073741819 is FFFFFFFFC0000005 in hex. In Windows C0000005 is "Access Violation" which is an unrecoverable crash such as dereferencing a null pointer. I would suggest uninstalling and reinstalling Java, whichever version NetBean is supposed to run on.
I used to work on an MMO that used JBoss and Smartfox for all of their backend services. At the game's peak, there would be 10K users playing at the same time and things worked just fine.
I haven't used maven, so this is what I understand based on what I've heard. It's a source code repository, that also has a way to handle understanding dependencies between code packages. Basically, you can specify that component x has dependencies on y, z, a, and b, and it'll pull all of those (and what they are dependent on) if you were to get component x.
Your EJB will serve as your container/transaction manager. Effectively, with an EJB, it'll handle all your database commits, transaction rollbacks, start of transactions per the JEE spec (based on app environment implementations.) JPA is just a way of creating pojos that will effectively be mapped between the database and that object, hence why JPA/Hibernate and those tools are known as ORM - Object Relational Mapping frameworks. They handle the mapping between java objects to relational structures. My opinion, start with the web service first, and start by creating the wsdl (meaning create that Dynamic Web Project). When that generates the code (your types objects and your Impl/Interface classes), start writing your impl. Keep it simple first, don't get too stressed and start small.
Ty sir. My favorite anime ever, regardless of how many other good anime come out, this series will always hold a special place in my heart.
any tutorial in particular?
I'd suggest Java 7 Concurrency Cookbook for Threading
I can't recommend this enough, I started a job programming in java with minimal threading knowledge and have found learning concurrency to be the best thing I could do do far
I see at least one problem. You should debug your program. Step through each line and check if each variable has the value you expect. If you are using an IDE, e.g. Eclipse, Google, "Eclipse debug", to learn how.
I'm not entirely sure what you're trying to accomplish, but right off the bat: n = n++; The value assigned to 'n' there is never used. Replace that with just n++; Now, total = total + n; Not necessarily bad, but Java (along with most modern languages) has an operator to make this simpler. Replace this with total += n; And the other mathematical operations have compound assignment operators (-= for subtraction, *= for multiplication, /= for division, %= for modular division, with a few more advanced-use case ones). Now, remove both of the assignments to num (as the values assigned by these are never used with this fix), inside the while loop and out. Then, make your while loop look like this: while ((num = stdin.nextDouble()) != 0.0) { ... } While this allows your code to behave at all, I'm not sure what the desired behavior is so I can't guarantee it will work the way you expect. Also, the print calls at the beginning of the main method will only be executed once and will not be printing anything but the default values since the only input is in your loop lower in the program.
If you fancy the idea of making games, check out LibGDX. You can make your first game in about an hour.
Threading is definitely next. Possibly in parallel, it might be a good idea to learn about Java NIO. It's an interesting topic because it highlights how the standard library has evolved to accommodate threading. Definitely know which end is up with threading first though, or it won't make a ton of sense.
"Java Concurrency in Practice" by Brian Goetz et al. Also, "Effective Java" by Joshua Bloch is IMO a must read on Java.
Back in the day, I tried to learn Java concurrency stuff. Nothing really stuck until I took a break and read the relevant parts of an operating systems textbook. If you don't have a solid grasp of the fundamental problems that threading and concurrency are trying to solve, then I think you'll have a hard time learning this part of Java. Once I understood concurrency at the OS level (processes, threads, scheduling, IPC, semaphores, monitors, etc.), learning Java's concurrency constructs was a piece of cake.
If you want to go for multi-threading and concurrency (which is definitely a way to go), i'd recommend [Java Multithreading](https://www.udemy.com/java-multithreading). Possibly you also might want to look into [Java Design Patterns and Architecture](https://www.udemy.com/java-design-patterns-tutorial). Both courses are free on Udemy.com There is also an Android course by the same guy on Udemy.com, but it's a premium course currently priced at $39 [Learn Android 4.0 Programming in Java](https://www.udemy.com/android-tutorial) (Once you are signed up with Udemy, you get regular discounts up to 80% - better wait for one of these discounts) [Derek Banas](https://www.youtube.com/channel/UCwRXb5dUK4cvsHbx-rGzSgw) has quite a few tutorials on Java and Android on Youtube.
User OwlShitty in another thread recommended [this](www.amazon.com/Programmer-Study-1Z0-803-1Z0-804-Certification/dp/0071772006) as a study guide. &gt;Complete Java knowledge right there including topics that deal with Threads, Generics, etc. All the essentials a Java programmer should know.
I have all my projects saved in my onedrive just because it was easier at the, it worked fine till i got a mac. Now all the code i have is not working on the mac but fine on windows its probably something stupid but would be good if i could get some help. 
also checkout Matin Thompson http://mechanical-sympathy.blogspot.co.uk/ there is a lot of materials about non locking algo and what impacts perf. Even if you're not in the low latency world is still knowledge you can use.
I think I have a better understanding of them now, thankyou. Though a few things on the tutorial were confusing. Like how did "p -&gt; p.getEmailAddress()" assigned to the variable email, so that "email -&gt; System.out.println(email)" works, as I didn't see any assignment, and I don't think computers have become psychic. How does it know to assign it to "email" and not "emailVariableThatIReallyWantToUse"?
Learn Lambda calculus aimed towards people with no knowledge. This was posted today on r/programming just started reading it and it seems fairly good. https://medium.com/@ayanonagon/the-y-combinator-no-not-that-one-7268d8d9c46 
I'm assuming you are talking about this code fragment: roster .stream() .filter( p -&gt; p.getGender() == Person.Sex.MALE &amp;&amp; p.getAge() &gt;= 18 &amp;&amp; p.getAge() &lt;= 25) .map(p -&gt; p.getEmailAddress()) .forEach(email -&gt; System.out.println(email)); The reason it works is because of the working of the map() function. This function converts every element of a collection into a new element. In this case: Collection&lt;Person&gt; is transformed into a Collection&lt;EmailAddress&gt;, by applying p.getEmailAddress() to every element in Collection&lt;Person&gt; and storing it in the new Collection&lt;EmailAddress&gt;. Afterwards, this new Collection&lt;EmailAddress&gt; is passed to the next step in the stream, the forEach. This forEach will just loop through the collection it receives (which is Collection&lt;EmailAddress&gt; because of the map function). It gives a name to the element (email) for convenience, and does something with it. (System.out.println(email);) The reason why it knows that email is an EmailAddress, is because it only gets those EmailAddress objects. The Person objects were transformed and thus never arrive in the forEach step.
Approach #1 RMI -&gt; http://docs.oracle.com/javase/tutorial/rmi/index.html Approach #2 CORBA -&gt;http://docs.oracle.com/javase/7/docs/technotes/guides/idl/corba.html RMI is probably the easier route though, also why not REST or SOAP? I can't really think of a situation where RMI/CORBA are better solutions unless you are working with a legacy system. 
Your code: // Copy the numbers input until 0.0 is read import java.util.*; //for class Scanner public class Assignment1 { public static void main(String[] args) { Scanner stdin = new Scanner(System.in); System.out.println("Ready to copy!\n" + "Enter 0.0 when done!"); double num; int n = 0; double total = 0; num = stdin.nextDouble(); n = n++; System.out.println("Count of numbers read="+ n); total = total+n; System.out.println("Total value of numbers read=" +total); System.out.println("Average value of numbers read=" +total/n); while (num != 0.0) { System.out.printf("%.2f\n", num); num = stdin.nextDouble(); } System.out.println("Goodbye!"); System.exit(0); } } How to solve your problems: Since the class name shows that this is an Assignment I think you should figure out most things yourself, hence I will only give some basic advice. * I assume you either want to print the statistics (count of numbers read, total value of numbers read, ...) after each number, or at the end. In the first case you should move it also into the _while_ loop, in the second case you should move it after the loop. * Your _n_ only gets incremented once - however you probably want to increment it after reading in a value. This should be easy to accomplish once you figured out how to solve the first mentioned problem. * Your _total_ sums up the wrong values. * You don't need _System.exit(0);_ there, after the _main_ is executed the program will shutdown automatically. * Though it _might_ (I'm not sure if it will) work in your example, it's usually not wise to compare doubles (read as: floating point numbers in general) to a specific value, since the mantissa only allows certain levels of precision. It's better to use something like _while(num &gt; 0.0000001 || num &lt; -0.0000001)_. 
Not to be pedantic, just to save any confusion – I think in the example in the linked docs, `p.getEmailAddress` gives a `String`. Also, rather than being instances of `Collection&lt;Type&gt;`, wouldn't it be more accurate to say they are actually instance of `Stream&lt;Type&gt;`?
I would also read about the Strategy Pattern http://java.dzone.com/articles/design-patterns-strategy
Previous books by these authors are excellent 
Store the different chat managers in a collection. When you want to bind a user to a specific chat manager, look up the chat manager in the collection. Bonus points if you encapsulate lookup in a chat manager locator class.
If you need to transfer real-time data, you should consider using sockets over your own data protocol.
That's also a reason why I want to lean this at an early stage. Thanks for your insight
Would this book also teach me the purpose of Threading? because I'm not really familiar with it.
Yes, exactly I don't understand the oracle docs fully. Maybe because I lack the grasp on the concept.
Maybe the question is from the perspective of someone using Jersey (or similar) and uncomfortable treating the API as a black box. He/She deals exclusively with POJOs yet "magically" the framework converts the java objects to JSON, and JSON to java objects. The question might be more about how does Jersey work. On the way out, is it using JAXB to first serialize the java object data into XML before transforming to JSON? I hope not, but I've never looked into it.
The connection object is single use and really represents a single request. E.g., from HttpUrlConnection docs: &gt; Each HttpURLConnection instance is used to make a single request but the underlying network connection to the HTTP server may be transparently shared by other instances. So you really need a _new_ URLConnection for your second request with the cookie. You can get the new one in the same way you got the original one if the URL is the same. By apache, they were probably referring to the Apache Commons HTTP Client library[1] which is higher level and easier to use than URLConnection, but what you are trying to do is absolutely possible without an external library. 1: http://hc.apache.org/httpclient-3.x/
These are 4 different things: REST is an architecture, SOAP a message protocol, JSP a web framework and Swing a GUI toolkit. That makes your question quite ambiguous. What exactly are you trying to achieve? 
If we are just talking options, theoretically, JMS could be used with a JavaFX UI.
http://mitpress.mit.edu/sicp/
I recomend [O'Reilly's Java 8 Lambdas: Functional Programming for the Masses](http://www.amazon.com/Java-Lambdas-Pragmatic-Functional-Programming/dp/1449370772/ref=sr_1_1?ie=UTF8&amp;qid=1410436413&amp;sr=8-1&amp;keywords=Java+8+Lambdas%3A+Functional+Programming+for+the+Masses). It's a quick read that introduces Lambdas and the Stream API. Lambdas are nothing more than anonymous methods/references to anonymous methods. In Java they're pretty similar to stateless anonymous inner classes with a single method and can often be used interchangeable. However, since lambdas require less boilerplate, they make some patterns more attractive and readable. Take the following example from the book: logger.debug("internal state is: " + expensiveOperation()); Although we just want to log the message when in debug mode expensiveOperation gets called every time, whether we are in debug mode or not. With lambdas we can write: logger.debug( () -&gt; ("internal state is: " + expensiveOperation()) ); The code of the logging library could look like this: public void debug(Supplier&lt;String&gt; logMessageSupplier) { if (inDebugMode) { this.log(logMessageSupplier.get()); } } Note that we don't pass the actual logMessage as parameter but a method that generates the message as needed. Therefore expensiveOperation is only called when in debug mode. We would achieve the same by calling debug like this: logger.debug(new Supplier&lt;String&gt;() { public String get() { return "internal state is: " + expensiveOperation() } });
+1 for PrimeFaces.
Fellow Redditors, pls let me know if this is useful to you !!
This might be more relevant: http://blog.sanaulla.info/2013/07/02/strategy-pattern-using-lambda-expressions-in-java-8/
I would recommend the [Functional Programming in Scala] (https://www.coursera.org/course/progfun) course from EPEL/Coursera. Although it's not in Java, it's done in a JVM language and the course is more about functional programming concepts which will give you a good foundation to understand lambdas better. The course is going to begin a few days so good timing! I've taken a previous iteration of the same course and found it to be great intro to FP.
Why not just check the string in place? You already iterated over it to make a backwards copy. Does python not have a reverse function anyways?
Yes, there is. And it seems something like this. reversed = user_input[::-1], which I thought would be scary to beginners. (my target audience) :)
'Java Concurrency in Practice' is the best practical guide to the concurrency utilities introduced in java 5 &amp; 6, with this book you can quickly start building something useful. For a real in depth treatment of multicore programming, memory models and low-level concurrency methods (like locks, monitors, lockless programming, implementing STM etc) I would recommend 'The Art of Multiprocessor Programming'. This book is mostly about how you design a datastructure like ConcurrentHashMap that is thread-safe and fast. This stuff is hard so it's not a good book to start with. Finally 'Concurrent Programming in Java™: Design Principles and Pattern, 2nd Edition': it's old and outdated but some of the mechanisms that are introduced in this book (fork/join) are the basis for the concurrency utilities in java 5, 6, 7 &amp; 8. 
Why not the solution where you have two pointers to indexes at the start and the end and meet in the middle? Don't need to copy - in your solution you basically iterate over it twice. You also return as soon as any are not equal.
There are virtually infinite options here; it just depends how much scaffolding you want to rebuild. For practical development, I've really fallen in love with RESTful webservices throwing JSON messages back and forth. From a practical interoperability standpoint, it is simply the best way (I've found so far). I've been fond of Caucho Hessian as a "tight" message transport for a while. It streams well, where JSON doesn't. If you want to be free of the request/response business, look at plain old TCP sockets; you'll get much better latency times, but deployment will be a pain in the butt; most businesses won't let anything but HTTP/HTTPS near their desktops. If you're feeling completely insane, you can tear it all down and rebuild it using serial communication and your own wires. (Note: I'm not suggesting anybody actually do this; there's only so many hours in a person's life, and wasting them building something that already exists is madness.) Bottom line is that the world is open; you can connect anything to anything else, if you're willing to make the path.
if you have a List&lt;String&gt; of names called names, you can do : names.forEach(n -&gt; System.out.println(n)); It means for each name, apply the following function : n -&gt; System.out.println(email) n is *not* a new variable, it is just the name you give to the function parameter "on the fly". You could also write : names.forEach(x -&gt; System.out.println(x)); It would be exactly the same
Answers below are helpful, but tl;dr = Notice the method chaining. As an example it's a bit sloppy to do this to the reader, because you don't know what each individual method actually produced. It's a bit overly clever. OTOH - Having watched the .NET community go through this with LINQ, it will be all too typical, so welcome to the future! ;) Side abbreivated rant: Without all these fancy IDEs, I don't think folks would be tempted to purposely obfuscate their code like this.
You're not a veteran if you don't understand lambdas. Branch out of java and see what other languages and communities are doing, you'll grow so much more. If you wait for it to port to java you are going to be 10 years behind the times 
Interesting. Anyway, what's the difference/advantage over Spring's BeanPropertyRowMapper? 
I jumped to a java class without any prior knowledge of computer science. Since the professor assumes that everyone knows computer science, it makes everything more difficult. I don't want the answer just to get the homework done. I want to understand, so I'm asking for help.
So I can use Omni Faces and PrimeFaces at the same time, they do different things? Cool. I haven't actually looked at OmniFaces yet.
Just remember, lambdas are basically "syntax sugar" for anonymous inner classes. If you understand anonymous inner classes, lambdas should be a piece of cake. You could translate (butcher) the following: roster.stream().filter( p -&gt; p.getGender() == Person.Sex.MALE &amp;&amp; p.getAge() &gt;= 18 &amp;&amp; p.getAge() &lt;= 25) .map(p -&gt; p.getEmailAddress()) .forEach(email -&gt; System.out.println(email)); as: Stream&lt;Person&gt; p1 = roster.stream(); Stream&lt;Person&gt; p2 = p1.filter(new Predicate&lt;Person&gt;() { public boolean test(Person p) { return p.getGender() == Person.Sex.MALE &amp;&amp; p.getAge() &gt;= 18 &amp;&amp; p.getAge() &lt;= 25 } }); Stream&lt;String&gt; p3 = p2.map(new Function&lt;Person, String&gt;() { public String apply(Person p) { return p.getEmailAddress()); } }); p3.forEach(new Consumer&lt;String&gt;() { public String accept(String email) { System.out.println(email); } }); This should hopefully also explain this: Filter&lt;Person&gt; f = p -&gt; p.getGender() == Person.Sex.MALE &amp;&amp; p.getAge() &gt;= 18 &amp;&amp; p.getAge() &lt;= 25; Function&lt;Person, String&gt; m = p -&gt; p.getEmailAddress(); Consumer&lt;String&gt; c = email -&gt; System.out.println(email);
Could you link to a newbie OS book that provides this info? 
I just thought it might be useful. Otherwise I'd have just posted the obvious link to the Oracle docs.
This shouldn't get downvoted. SICP is one of the most awesome material to start with, especially if you want to start learning functional programming. Definitely recommend it.
There is virtually no difference between serving text-based data and HTML. SOAP is just XML and REST is either XML or JSON. You can write `out.write("&lt;html&gt;");` or `out.write("&lt;xml&gt;");` with the same effort. Same thing with accepting web service requests. Instead of form data, just expect it formatted as XML or JSON. Parse the POST data or GET params and send a response. Because the formats are very strict, it's easier to write frameworks that can marshall and unmarshall responses like magic, but really it's not that difficult to write one by hand.
Holy shit are these replies and links ever throwing you into the deep end! Most of the replies are just jumping into syntax of overly complex examples and most of the links just do the same and then boil down to "Here, replace this contrived example with this differently-formatted example you should now use but still without actually understanding it." _None_ of them are actually stopping to tell you what is really going on. I'm going to try something different, using no syntax examples, and you can let me know if it helps you. I've used this one with other folks but always in person, so we'll have to see how it goes... Let me know if at any point one of the following "imaginings" stumps you. (I'm going to bend a couple of terms a little for the sake of the introduction, so pedants can kindly shove off.) Imagine a pointer. If you are stumped here then we are in real trouble. ;) Imagine a pointer to a function, used so that one piece of code can choose between more than one function, pass that function pointer to some other piece of code and have that code call the function without having to know which function it was. Imagine a strong-typed pointer to a function, so that we can be sure the function is provided with the right types of arguments (if any) and so that we can be sure of its return type (if any.) (This one gets long.) Imagine that that function needs some data that we have and could provide when setting it up but which cannot be provided by the code which will eventually call it. We need some way to capture that data at least until the function is finished being used. We don't want to put it in global state or even in our own instance state because who knows when that function will be called or what needs to happen in the meantime. So we create a brand new class with a constructor taking in that data and storing it in a field. In this new class we implement the function we need and have it use that data field, the value for which we will pass into the constructor. Now, before passing that function pointer down to whoever needs it we construct an instance of that new class, passing the extra data to its constructor, and then get and pass a pointer to the function we made that new class implement. Whew, that one was long. Hard to reasonably break it down though, so hopefully you are still with me. (This one gets really long.) Now, imagine that we could teach the compiler a way to recognize that we are trying to do the above. That we want to pass a strong-typed function pointer. To a newly-created class which implements just that one needed function. Where that function requires some extra data. That we can pass in when constructing an instance of the newly-created class. And then store in a field for use by that function. This is where the lambda "arrow" finally comes in. The arguments for that new function on that new class are specified to the left of the arrow. The body is to the right. The return type, if any, is inferred by the compiler. Any extra data is detected within that body and set up to become fields in the generated class, populated by a generated constructor. The constructor is automatically called by the generated code just before the strong-typed function pointer is grabbed and passed into the callee which needs it. That constructor call is passed in the extra data. The function pointer that is created is itself managed by the garbage collector like any other thing, and holds a reference to the newly instantiated object carrying the extra data and the function implementation which will execute, so that new instance is now also managed by the garbage collector and will be collected only after the function pointer becomes unreferenced and therefore able to be collected. As such, our generated code can just create that new instance, set up the function pointer and pass it along, and then forget about the new instance. The compiler simply does what we would have done, but gives us syntax sugar to do it. It creates a new class which captures any necessary extra state and implements the function we described. It instantiates that class and helps us hand off the desired function pointer. (It can also help bring updated extra data back out of the instance afterwards, if we need it, but that is a topic best saved for another time.) This process results in a callable function which "closes over" that set of extra needed state, resulting in what we call a closure. I have to run out for a bit, and the above is literally a stream of consciousness draft, so let me know where (not if ;) the above is unclear and I will update it a bit later.
Yes. The URLConnection is really somewhat of an odd stepchild; out of the box you can use it for talking over HTTP or reading stuff from JAR files. It is called "connection", but in the case of HTTP it represents a single request and "connection" pooling is happening through implementation magic. The "open" call doesn't open anything (AFAIK) it just creates the thing. It doesn't have a clearly documented end-of-lifecycle, it isn't closeable, and all sorts of other things that make it different from other similar APIs. If you need to do a lot of talking over HTTP check out the Apache project (I put the wrong link before): http://hc.apache.org/httpcomponents-client-ga/index.html or your needs are more RESTful the Jersey Client API is evolving into a nice library in its own right (originally just created to aid in the testing of Jersey services): https://jersey.java.net/documentation/latest/client.html 
Serious question, I'm currently in the process of reading Pro JPA 2 and it advertised JPA as a means of doing the easy stuff easily and not getting in the way when you want to meddle with the SQL. So, what's wrong with simply using JPQL when you need to do complex queries? I understand that using these NoSQL databases can potentially make mapping objects easier, but the Neo4j approach didn't seem like much of an improvement from JPA.
I learned it from the dinosaur book: http://amzn.com/1118063333 If you are resourceful you can find this book for free. Or you can get older versions for very cheap (http://amzn.com/0471694665) and the relevant concepts are still pretty much the same.
Here's a hint: learn about formatters.
I totally agree with you about having a more optimized solution to this problem. But the basic motive of this post was to outline the step by step process of breaking down the problem into smaller problems. So the focus was on problem solving &amp; provide a working solution rather than providing the optimized solution.
Well, let me join this party as well. roster .stream() .filter( p -&gt; p.getGender() == Person.Sex.MALE &amp;&amp; p.getAge() &gt;= 18 &amp;&amp; p.getAge() &lt;= 25) .map(p -&gt; p.getEmailAddress()) .forEach(email -&gt; System.out.println(email)); `email` is the argument to the anonymous function that's being passed to `forEach` on the last line of the listing. It gets a value when this anonymous function is called. This code fragment isn't doing the calling directly; rather, the implementation of `forEach` is doing it. What `forEach` does is invoke its argument once per each element of the stream. Since in this code fragment, `forEach` is printing email addresses, this means that `forEach` must have been invoked on a stream of email addresses. Since `roster` isn't such a stream, then that means that somewhere between the start of the expression and the call to `forEach`, one of the methods produced a stream of email addresses as its result. In this case that would be `.map(p -&gt; p.getEmailAddress())`. `map` is a method in `Stream&lt;T&gt;`, and it has this signature: &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T,? extends R&gt; mapper) So when you call `map` on a stream, what you're doing is constructing a new stream whose elements are computed by applying a function to elements of the original. In the example, we start with a stream with a subset of members of the `roster`, and convert it into a stream of email addresses. Each email address in the resulting stream will be obtained by applying `p -&gt; p.getEmailAddress` to the corresponding person in the original stream.
Actually it was the one before that, Approach 8: Use Generics More Extensively. processElements( roster, p -&gt; p.getGender() == Person.Sex.MALE &amp;&amp; p.getAge() &gt;= 18 &amp;&amp; p.getAge() &lt;= 25, p -&gt; p.getEmailAddress(), email -&gt; System.out.println(email) ); I understand that email is a variable, and such. But how did "p.getEmailAddress()" get assigned to it? There is a comma there, it's a separate lambda expression.
&gt; lambdas are basically "syntax sugar" for anonymous inner classes You can think of them that way, but lambdas don't actually compile into anonymous classes.
~~No, not really. How does the value returned in the "m =" lambda, get magically transferred to the "c = " lambda. It might be doing magic behinds the scenes, but I would like some hard rules for that kind of magic.~~ ~~How did "p.getEmailAddress()" get assigned to email? It's a separate expression!~~ ~~Expressions that can influence each other without ever touching is not the kind of magical playground I want, so if they are, I want to know how and the why of it.~~ Nevermind, I got it. I'm dumb today.
~~I was confused at the example before this bit of code. In the transfer of the string returned to the next lambda "magically". This one makes more sense, since it can be a returned value that is mapped, but the one before it has nothing connecting it at all.~~ Nevermind, I got it. I'm a moron.
How did p get assigned? It's the lambda's first parameter.
Usually to apply a consumer to a stream you would use `.forEach(consumer)`. In this case though, they have used a `for` loop over the `List` of items and called the `accept` method of the `Collector` instance on that instead. The code in question begins `for (Person p: roster)`. I would paste the rest, but I'm on mobile, sorry.
Don't talk down to me. Just because I haven't done functional programming, doesn't mean I haven't been writing code, including embedded and assembly code for well over 15 years. In a whole host of languages. I've written compilers, assemblers, emulators and simulators. I've done data mining, artificial neural networks, statistical analysis and clustering. Written almost every imaginable type of data structure, from stacks, to hashmaps, to kd-trees. I have never gone much into functional, because I have never needed to use functional programming. It was never required, and the languages I used didn't support it anyway. As I mentioned it was on my TODO list. If you think learning other programming languages is the only thing that makes you a good programmer, then you are the one that has a thing or two to learn. It took me no time at all to grasp the concept behind lambda, with just a few minor issues that are probably unique to java. As they are very similar to many constructs I have used in the past. Sorry, you made me a bit mad. Don't generalize people, we have wide and various experiences. Just because one tool or jargon slipped the net, doesn't mean I am a person who has only used Java his whole life. P.S. I don't care if I am down voted to hell for this. Feel free to pile it on.
Sorry, that is a bit long. I kind of lost focus at the first long paragraph. The oracle docs was very useful actually, and it got me most the way there. Just a few minor outstanding issues I am trying to sort out in my understanding. As for pointers, yeah, I have done C for years and years, I know all about pointers. In fact, I love pointers, most people don't for some reason. 
~~No... How did the return value from "p.getEmailAddress()" get assigned to "email"? For use in that lambda function.~~ Oh, okay, nevermind. I got it. Boy am I dumb for missing that obviousness.
Looks quite interesting when I get a chance I'll have to play with it.. 
Yeah, but you dip into a much deeper problem of going with an unproven technology, with a high learning curve, low resources (e.g. compared to number of SQL DBAs) and probably its own operation problems. Not saying it's not OK to do it, but it seems to be a steep cost to pay just because someone finds ORM too complicated. Switching from relation SQL to a graph-database is anything but trivial, considering the amount of re-training involved for everybody. 
&gt; How does the value returned in the "m =" lambda, get magically &gt; transferred to the "c = " lambda. It's not magic... Read the translation to anonymous inner classes, do you see any magic there? That's exactly (effectively) what going on with the lambdas. To answer your question, the value returned by the `m` lambda is used by the `map` method to create a new stream (`p3` in the anonymous inner class example). The `p3` stream contains the values returned by `m`. The `c` lambda is used by `forEach` is called on each member of the `p3` stream. &gt; How did "p.getEmailAddress()" get assigned to email? It's a separate &gt; expression! This is not the way to think about it. Again, refer to the anonymous inner class example. The two lambdas are being applied two different streams. They do not influence each other, at least not directly and certainly not magically, but are tied to the stream to which they are applied.
I should hope not. The restricted syntax of lambdas gives the compiler opportunity to optimize the bytecode. Effectively though, lambdas are the same as anonymous inner classes because of target typing.
Ah yeah, sorry. I edited my comment already. I got it (I was being dumb). Thank you though.
No worries!
Except for the query language which still is learnable, it's really not that different than doing DDD in ORM, except with a lot less annotations and mapping difficulties. Probably less performance problems for many types of queries, if we take the ORM impedance mismatch out of the picture then DDD-based projects should have a lot to gain. It's true it can't happen overnight, but it seems to make sense both technically and economically. This means that it could happen, in any case it's certainly a choice for projects starting from scratch. 
Some benefits are that a lot less annotations are needed to build the persistence layer, which is hard to get right in ORM. Certain queries can have a performance orders of magnitude better. Are you currently starting with ORM and JPA? After a few months of development using ORM developers see what this is about: it's just too hard to use it, it's simply not transparent. You need to know a lot about the inner workings of how Hibernate works under the hood in order to be able to use effectively. With graph databases, things should likely be simpler and a bit more transparent.
To belabor the Vietnam analogy, ORMs can be problematic if you go into it not knowing what you're doing, not having a clear strategy, answering to too many (and the wrong) people, etc., etc. ORMs are fine if you apply the DDD principles, in the broader context. DDD is not just about modelling business processes with entities and repositories. A domain model should also be small, fitting within a tightly defined bounded context. Domain objects should not be directly shared between bounded contexts, but there should be an appropriate mapping layer. If your domain model is too generic, your context too broadly bounded if bounded at all, serving too many masters, obviously you'll need lots of lazy loading because you don't know which client will require which data from the model. All that lazy loading can plant land mines in your code. One entity should map to one table, within a bounded context. That does not mean another entity cannot map to the same table in a different bounded context. The mapping is just a projection of columns from a group of tables onto an entity, appropriate to the purpose served by the entity in the bounded context. Also, know when not to use ORM. ORM is for mapping to and from objects participating in a business process. If you are just grabbing a bunch of rows to show in a report, with no behavior attached to any of the rows, ORM is the wrong tool for the job. TL;DR. Solve ORM - read [the DDD book](http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1410459646&amp;sr=8-1&amp;keywords=domain+driven+design).
Actually for for example batches, SQL is the recommended way for me. Spring Batch is a good fit for doing SQL based batches, although it also supports the OO way. This means developers in a team have to know both in order to maintain the online, the business logic backend and the batch jobs. Probably with a graph database, the same technology could be used to write the batches as well, with the improved performance for certain types of queries. Self-joins to traverse relations are a really killer of relation databases and are frequent queries that popup in DDD projects. How many projects work in the developers PC, then get sent to pre-production and need to be rewritten. Using a more performant data store would also alleviate that.
You already know what threading is, you just don't realize it yet. Say you have two classes `ClassA ClassB` with methods: `int methodA() int methodB()` which each 10 seconds to process. When you execute the code: [...] int a = new ClassA().methodA(); int b = new ClassB().methodB(); [...] then it will take ~20 seconds to process these two lines of code. However, if you execute them as threads then they'll both run at the same time (concurrently). The code will then instead take ~10 seconds to process, and you'll also be able to continue doing work in the class you used to execute those threads. --- The part where threading gets interesting is when you have two or more threads all trying to access/change the same shared data at the same time, or all trying to receive the same messages at the same time, and so on. Think of a network printer in an office: network printers work off a queue and only print one document at the same time, even when multiple people submit print jobs at the same time. Therefore this printer needs to be configured to execute only one job at a time or else it would start printing scrambled garbage, lock up, etc., while still being able to receive new requests simultaneously. --- Multithreading problems are some of the most fun and interesting problems in programming, imo.
Agreed, most of the problems that i saw in ORM usage are due to bad DDD practices: making value objects entities is an usual example, not applying correctly composition vs aggregation, etc. I also recommend the DDD Quickly book http://www.infoq.com/minibooks/domain-driven-design-quickly, which has the same concepts and is 'blessed' by the original author, at only 100 pages everything is in there. But the problem is that doing good DDD in ORM is hard. For example till today JPA does not support ManyToMany associations with properties. You have to map them as entities and put a comment saying that they are really associations and not entities.
129 dollars??
&gt; I also recommend the DDD Quickly book Haha, TL;DR :-D
Can you learn how to swim watching youtube videos or asking people how? Programming is a skill that takes *a lot* of practice to master. Write programs, lots of programs. Write shitty programs, lots of shitty programs. Ask people to review your code, don't ask for too much help on how to write it. Read lots of code as well. Read books on algorithms ([Structure and Interpretation of Computer Programs](http://mitpress.mit.edu/sicp/) is a good one) as well as design (my favorites: Clean Code; Agile Principles, Patterns, Practices; Growing Object Oriented Software Guided by Tests; Effective Java). Do lots of reading, wherever you can find material. I've seen this site pop up: http://codereview.stackexchange.com/. Write a program and ask for a code review. Read other code reviews and see what people are doing wrong (and right!).
yes you did :-)
It sounds like your chat manager is doing way too much work. &gt; each room is run in its own thread by a "chat-manager" object. The object is set up to keep track of what room ID it is managing, an arraylist of who is connected to it, and multiple other trivial things. Unique room IDs are good, a list of clients is good, but the "multiple other trivial things" is worrisome. What kind of multiple other trivial things? This sounds like it could be the problem. Especially when dealing with threads, the classes responsible for handling threads shouldn't be responsible for doing anything except executing them, interrupting them, and providing them with a simple means to communicate with each other.
You are all over the place with that code. Let's break it down and think about the problem you need solve. **If the balance is less than 0, add the overdraft fee amount** First off the 'overdraftfee' should be a constant amount. Next check if balance is under 0; if it is then charge the fee, if not then do nothing. **Pseudocode** constant overdraftfee x method overdraftfee() if getBalance() &lt; 0 setBalance( getBalance() - overdraftfee ) end method
Haha, I wouldn't worry about it. Java has such bad type inference that the compiler will fall over dead long before things get too complicated. See Hamcrest matchers for an example of what I mean.
- no boxing - I'll need to add it to the benchmark but very likely much faster - handles object in object - handles constructor injection
Totally agree to /u/sh0rug0ru's comment. I would like to add some advice, though: Read the questions posted in the Java &amp; programming related subreddits /r/learnprogramming, /r/Javahelp, /r/Java and try to solve the problems for yourself. I learned a lot that way. Also, as I have mentioned a couple of times before: http://www.reddit.com/r/learnjava/comments/207zoy/do_i_not_just_have_what_it_takes_to_be_a/cg0max7 (it's a previous comment of mine. Don't want to copy/paste or retype the whole text)
Put the `.csv` file where it isn't served by any of the servlets. As long as it's in the `war`s classpath, you'll still be able to access it server-side.
what I was thinking is to have a separate api that will generate queries based on the metadata and the class definition. The api would use the mapper for the select queries. and its injection for insert and update.
PrimeFaces and OmniFaces indeed work together. The OmniFaces homepage mentions this fact as well, and the OmniFaces showcase is indeed made with both PrimeFaces and OmniFaces. BalusC, the creator of OmniFaces, seems to be a big fan of PrimeFaces, but OmniFaces works with every component set.
It's not a matter of having programmer's logic, programmers are not special people with super powers, it's a matter of patience and time you're willing to invest in that field. You will need to practice a lot before becoming really great at coding, you need to build things to improve as a programmer and you will only get to that point by reading and coding a lot. About searching for answers online, this is human nature, 90% (probably more) of the programmers I work with do that all the time. Focus on the concepts, you need to understand what you're doing, even if it's just to find the right answer online. Everyone can search on google, but knowing what you're looking for helps a lot.
Hmm.. I'm actually using Hamcrest on our current project. But I'm confused by your statement. is() uses generics. Behind the scenes it eventually goes to Object.equals(). It's not very complicated really, though I'm not sure I'm in love with their API. I'm a pretty big fan of static typing in general, so throw me a clue here: what's wrong with Java's type inference? I'm not really a language designer, so I'm probably a bit ignorant on the finer points of type theory.
WEB-INF folder.
Try nesting matchers, especially trying to match on objects inside collections. I'm talking about `any`, `contains`, `allOf` and especially `hasEntry`, `hasKey`, `hasValue`, each of which can take matchers themselves. The Java compiler gives up pretty quickly and insists you tell it what is the type of the thing you are trying to match because it has no clue. You have to do horrible things like `Matchers.&lt;Map&lt;? extends Foo, ? extends Bar&gt;&gt; hasEntry(...)`. At which point, it is better just to create a custom matcher.
Try the App Store game called lightrobot
I see. That is pushing generics pretty far I guess. I do prefer to break my Hamcrest expressions up though and do my own loop traversal, which I guess is why I haven't run into this little horror show. 
curl is a great way to learn how HTTP works. It is also a very useful skill to learn when debugging web services. curl [-vvv] localhost:8080/resource/1 curl [-vvv] -X POST --header "Content-Type: application/json" localhost:8080/resource -d '{ "property": "value" }' add the flag -vvv to see what exactly is happening with a lot of debugging output
you can automate this and whole bunch of other tasks using [ansible](http://en.wikipedia.org/wiki/Ansible_\(software\))
What does the anonymous mean in anonymous methods?
Cool, thanks again for the info :D
FWIW, working with currency isn't the most straightforward thing. This StackOverflow post explains why: http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency
For websphere, wsadmin/was admin is your friend. You can use jython to better automate the process. Any task you do in the console should have a command window showing the jython used in the top right of the page. If you buy something, urban deploy is fancy. I wasn't aware that tomcat handled ears, but there are ant tasks that can automate the deployment of wars.
A good way to understand this is to implement a similar functionality for `Iterator`. Here's a version that has the `map` method (utterly untested): /** * A wrapper class around any Iterator, adding methods like map, filter, forEach, etc. */ public class FluentIterator&lt;A&gt; implements Iterator&lt;A&gt; { private final Iterator&lt;A&gt; base; public FluentIterator(Iterator&lt;A&gt; base) { this.base = base; } public boolean hasNext() { return base.hasNext(); } public A next() { return base.next(); } public void remove() { return base.remove(); } /** * Return an Iterator that draws elements from the base one and produces the * results of applying the given function to them. */ public &lt;B&gt; Iterator&lt;B&gt; map(Function&lt;? super A, ? extends B&gt; function) { return new FluentIterator&lt;B&gt;(new MapIterator&lt;A, B&gt;(function, base)); } // ...implement filter, forEach, etc. } class MapIterator&lt;A, B&gt; implements Iterator&lt;B&gt; { private final Function&lt;? super A, ? extends B&gt; function; private final Iterator&lt;A&gt; base; MapIterator(Function&lt;? super A, ? extends B&gt; function, Iterator&lt;A&gt; base) { this.function = function; this.base = base; } public boolean hasNext() { return base.hasNext(); } public B next() { return function.apply(base.next()); } public void remove() { throw new UnsupportedOperationException("not supported"); } } This is not the same as streams, but it's very similar; the key spot is the `next` method in `MapIterator`, which does this: 1. Pulls an element from the `base` iterator; 2. Applies the function to it; 3. Returns the result of the function. Step #2 there is where the "magic" that's puzzling you happens. When you use `map` on a stream, you cause that method's implementation to call your your lambda and pass in the email address as an argument. (Exercise, if you like: implement a `filter` operation for `FluentIterator`.)_
dont rebuild your artifact for production. the artifact should be built once, tagged in source control, and then archive the war off somewhere like nexus or artifactory. as far as tomcat deployment, i would recommend tomcat manager. this lets people of processes do a deploy without having access to the prod box.
Depends on the shop, but in a larger enterprise, it is very rare to be able to have all of your settings externalized. This is where you typically get "make all this stuff that was never meant to play nice work together perfectly". In the face of that, many people are tempted by environment variables with test/production only code paths, which is very heavily frowned upon. Not that I disagree with you, just that I have never seen this as a thing in practice. Everywhere I have ever worked has had test and production builds. A notable issue with some places is that they let their dev boxes, test boxes and production boxes get to different patch levels and settings, so production builds, even with externalized settings become a necessity. Having a production build guarantees that you are building against exactly what the production environment expects. Not everywhere out there runs perfectly.
Haha, I thought of doing a running total of yes or no, but honestly that seemed harder in my head. I'm a beginner so the conversion just seemed easier. Do you have a source of where I could learn how to make a total of the yes and no? 
Check out the [String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html) class. Is there a method there that will allow you to convert a string to an int? Check out the [Integer](http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html) class. See anything there?
You're not converting a string to an int, your just counting the amount of times someone types yes. if(ans == "yes") { count++; }
That's an interesting approach. We're a larger enterprise (1,000 unique EARs), and we build once and deploy that same artifact across our test and production environments. The test-specific and prod-specific pieces are externalized using a variety of approaches depending on the setting or config. In some cases we swap segments of an XML or maybe the entire file. In some cases, we use environment variables. Our deploys are ultimately done via wsadmin. We front it with a home-grown UI that makes the dmgr calls directly from java, but it's roughly the same concept. 
Heres how I think about it in my head, there are two approaches: 1.) "I will keep track of each answer (yes or no) and add them up at the end" or 2.) "I will add to the yes/no count with each answer so that I will have the totals at the end" really you don't need to keep track of both yes and no, since you can figure that if you have 6 yes, the others must be no. If there are 10 questions and 6 yes answers, you can figure out that their must be 4 nos. Thats how I am thinking of it at least, maybe you are thinking about it in a different way The reason why the second approach seems easier to me is that it is less work. You are keeping track all along so you don't have to do this "conversion" at the end. That doesn't mean you can't do it your way however. There is nothing about your approach that would not work. But it's useful to think about it and see if there is any easier way before you get started. for " how to make a total of the yes and no?" you could use an integer variable to store the count. 
If you're still soliciting feedback, this is what it looks like now: http://i.imgur.com/hBnlXM1.png
You can't have anonymous methods, but you can have anonymous inner classes. It just means the class doesn't have a name (in the source code).
This is why infrastructure needs to be automatically managed and tested on a continuous basis. Until or unless that is done, you'll constantly run into the situation you describe and people won't fix it. Just because it's the way it's always been done at a place isn't an excuse - two years ago all of our deployments required per-environment builds. Today hardly any do.
The only performance problems I have encountered in java (that is relevant here) is badly written JNI (native code accessing), which can be a problem in game libraries, but is usually not a problem. The GPU latency usually hides or negates all of this, and large, well known projects often have separate native parts that help avoid the performance impact.
Exactly, your approach would definitely work. ITs just that you learn from experience whenever you have a problem to try to think about in a few different ways first. Sometimes, your original thinking is the best you can come up with and thats what you do. Since a lot of the programmers here do this kind of thing (keeping score more or less) so often, the best solution is really obvious to them, but it wasn't always that easy. Its interesting to see how someone thinks about it when they are new to programming and your logic is fine. 
As many people are saying, using a count++ would make *much* more sense. However, if you ever need to do this here is how you would: int num = Integer.parseInt("54321"); 
I have done a lot of server side Java and I have found it can really be impressive in terms of performance. The place where you can hurt yourself is in memory management. Java works hard to keep you isolated from the memory representation of objects and encourages you to take advantage of garbage collection. Most of the time this is fine, but lots of allocations and GC can burn CPU and pollute caches, so you just have to be careful of that in critical areas. 
I'm glad you brought up JNI... I'm running into issues like (for example) that Steam requires some sort of communication between their C++ libraries and Java source code. Also, I want to be able to contribute to development of Oculus Rift for LibGDX. Could you point me in the right direction where I could learn how to not have "badly written JNI" because I definitely agree that it is a problem facing some Java game developers.
I'm relatively new to Java development in serious hard-core development scenarios. Can you please elaborate on how "to be careful" in critical areas where the JVM's garbage collection becomes a problem for the CPU? Or even direct me to somewhere that will explain it in more detail?
What do you mean, you don't have server access? If you don't have Internet access, you're pretty much stuffed unless you want to just keep all the files on a USB stick. If you have Internet access, just use git and a free hosting service like github or bitbucket. Github doesn't support private repositories for free but is very easy to use travis CI with, bitbucket has private repos for free. 
In my opinion, the best way to do this is using CI (eg Jenkins) to auto build all source control commits, tag a build, then use puppet to auto-deploy the artifacts to your test, then production environments.
Allocating new objects in a tight loop (such as Libgdx's render loop) can get costly. Try to minimize use of the new keyword in the game loop.
Thanks for the answer. Made me feel better knowing that my head is in the right place, just need a different method. So I applied the count++ as: int yes = 0; if(answerOne == "yes") { yes++; } else if(answerOne == "no") { no++; } And it's not adding up. It's ending as zero. Any thoughts why? EDIT: I applied this right after: answerOne = input.next(); Should I change something there?
Gotcha. Thanks :)
no server access, bitSnycing or similar products are not an option
ok. thank you
I'm assuming by "don't have server access" you mean that you don't have a server hosted in a data center somewhere. Keep in mind that for a lot of Syncing tools you can just install it on one of your machines as the server. 
Well, some books can help: - There is the design patterns book (gang of four) =&gt; http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ - Another book on patterns, but targetting enterprise applications (i.e. information systems) =&gt; http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420/ These books on patterns tend to be good on teaching a lot of what you're asking. Largely because you've named some patterns in your question, but also because many patterns are about: - Identifying the need for something X to be changed without affecting another thing Y with which X is coupled; and - separating X from Y in a way that allows X to change independently from Y. There are several ways to say what I just did in there. You're allowing X to vary independently from Y. This makes X a __parameter__ of Y, which is yet another way to say it. You're separating what is likely to change often (X) from what doesn't need to be affected by that change (Y). Some benefits from this is that a reason to change X, now, doesn't affect Y because X can be changed independently of Y. Another is that understanding X can be significantly done without looking at Y. This is a core guiding rule in the separation of concerns principle: the concern X is separated from the concern Y. Now, a lot of activities you want with X can be performed independently of Y. You probably know all of this, so I'm sorry if this isn't much helpful. But just to finish, a classic example of this is a sorting function (the Y) and the comparison criteria (the X). Many people, in many projects, would like to have that a change in the comparison criteria not lead to a change in the sorting function. They're 2 separate concerns we'd like to deal with separately. Therefore, the comparison criteria, as commonly done today, is a parameter of sorting. In this case, the word "parameter" is being used both in the sense of a function parameter in the source code, but also in the more general sense of something being a parameter of something else, in which case something can be one of many, and may change over time.
Ok. thanks for the tip
A lot of people talk about garbage collection being a problem. Maybe I could ask for some more clarification in a separate post or do more research... But I need to look for a nitty-gritty answer on WHY garbage collection is damaging enough to be constantly brought up. Like, why can't Java handle this problem as well as other languages?
Get a little linux box with some storage attached and run some source control
answerOne.equals("no") == does not work that way for Strings Use equalsIgnoreCase() for accuracy.
Garbage collection solve a complex problem. There two major elements about the gc that can be problematic for people: * Hard to predict * Easily badly configured Here is an interesting talk about the subject if you can get over the fact that is a big ads for the product of the guy: http://www.infoq.com/presentations/Understanding-Java-Garbage-Collection &gt; [–]okmkz 3 points 22 minutes ago &gt; Allocating new objects in a tight loop (such as Libgdx's render loop) can get costly. Try to minimize use of the new keyword in the game loop. &gt; permalinksaveparentreportgive goldreply &gt; [–]WildnWoolyShambler[S] 1 point 15 minutes ago &gt; Gotcha. Thanks :) &gt; permalinksaveparentreportgive goldreply &gt; 
Performance of Java really only becomes a problem at large scales. When you start dealing with data sets in the 100,000's doing any wasteful memory allocation and inefficient algorithms will become noticeable. For most operations the JVM is very smart about optimization. You need to start to watch out for patterns that lead to performance issues down the road: - do you store data in a list that should be in a map? It's common to find libraries that pass data around in a list, but is used in dozens of locations only to iterate and find a particular item in the list. - wasteful allocation: passing around data structures and always making immutable copies because Guava is fun. I've debugged a code path that ended up copying a Set 9 times before it ended up being used. Also allocating temp objects inside of any kind of loop, not caching where you can. - memory "leaks" : not true memory leaks, but if you create new objects and add them to a cache but never remove them it can eat up your memory. The GC handles true memory collection, but if you keep references that you weren't expecting it will cause problems. 
You should not compare strings with the == operator in java. You should use the equals method. Your code could read: if(ans.equals("yes") { count++; } Better yet, to avoid a null pointer exception when ans is null, you can invert them. (People call this Yoda Conditions) if("yes".equals(ans)) { count++; } You could also make the answer case-insensitive by writing it this way: if("yes".equalsIgnoreCase(ans)) { count++; } 
IMHO, relational databases are not only a way to persist objects. They are also a communication tool between systems, and people. I'm mostly a Java guy, but I can use the same SQL database that someone using PHP. There are tons of tools that allow people from different backgrounds to read, consult and even write data or any MySQL, Progress, Oracle or MSSqlServer. I can even allow business analyst to connect to the database using Excel, a tool they know and love, and make the graphs they like to see. That's why I think classical DBMS will last for a long time. They are not a perfect match for OO, they were not perfect match for pure imperative code and they will be not perfect for functional code (assuming FP is somehow the future). But they are good enough for every programming style, and can be used by everyone at the same time.
if you monitor the heap of a JVM while its running you'll see a saw tooth pattern, it climbs up then drops, climbs up the drops, etc. When the GC is run is when it drops, and it can cause CPU usage to rise while it's running. If the CPU is already running at or near 100%, you're going to see performance hits during GC. You can give it suggestions on when to run GC (before a CPU critical bit of code), but it's not necessarily going to be run just then. There's some JVM monitoring tools you can use to check out things while they're running to get a better feel for it, jconsole comes with the jdk. Other languages that have manually managed memory can be freed closer to specifically when you tell it to free, but then you have to manually manage your memory use. It's like the difference between an automatic or manual transmission in a car, you can get better efficiencies out of a manual, but most of the time, especially in city driving, it's just a pain to constantly be shifting.
Oooh. Okay. Perfect. I just changed the "int yes = 0;" to "in up = 0" and all changed the count to up++ and it all worked. Thank you for your help!
Thank you all for helping me! You all rock!
This is exactly what I was looking for. Thank you!
How much power do you think I will need?
Just FYI, you're missing the closing parentheses in your first example.
An example might be that "boxing" primitives into objects (e.g. int into Integer) for the purpose using them in collections is totally fine, until it isn't. And then you need to switch to using raw arrays or some other library.
&gt; * Hard to predict &gt; * Easily badly configured In addition: * Hard to detect as a root cause of problems * Hard to diagnose * Hard to fix 
I have seen 99 percent GC from some code that kept adding 1k onto the end of an array. Don't do that. 
This actually answers OP's question. Does not address the root of OP's question. 100% an upvote, but not sure how to elaborate because OP asked such an open sided question. So just gonna add my $0.02 anyway. Java scales REALLY REALLY well. Like I wanted to go back and add another REALLY, because Java is so good at scaling. Java does not work well for the very trivial of sets considered. Java launches an entire virtual machine (the JVM) just to do do a int++. Launching an entire virtual machine is a bit overkill when you want to just increment by one. Java is easy as shit to write. The compiler catches most stuff. Which is cool. Bring this back to OP's original argument : The programming competitions that I compete in allow an extra cycle for java programs. My point is that most people agree to live with the minimal overhead of launching the JVM.
It's overkill for this situation, but you could also use a Map to associate the String keys to their numeric values
C++. You'll never go back. Promise.
I'm in the same position as you and I've taken up learning Ruby. I'm also really interested in Scala ([this book](http://www.amazon.com/Programming-Scala-Comprehensive-Step-Step/dp/0981531644) is coming next week), but Ruby is an "easy to learn, and learn it right now" kind of language. Scala will take a bit of studying to get the hang of, even though I already have many projects in mind. The appeal of Ruby comes from having to slog through Java all day and jump from this big multi-module mess of Java code from work in a big, ugly, slow, eclipse environment that's stuffed with plugins... into this clean little SublimeText window with clean, small, easy-to-read Ruby code. It might not be offering me any technical solutions, but it's theraputic. There's also Groovy, which is a JVM language that's sort of in-between Java and Scala. It's like poor-man's Scala and a lot of Java code translates into Groovy 1:1 and vice-versa. They're very similar.
clojure? lisp dialect with easy java interop
Check out the "Pool" class that LibGDX offers; it allows you to re-use objects instead of constantly instantiating them and then leaving them for GC. It's a bit tricky (you have to make sure to release them back into the pool when you're done with them), but it really helps with performance. Also, whenever possible, use LibGDX's collections (Array, IntArray, ObjectMap, etc) instead of Java's collections (ArrayList, HashMap, etc). The latter can be pretty wasteful in tight loops
For git, a little raspberry pi would be sufficient.
So a lamda is basically a chained function you define the behavior of in the declaration?
Yeah, no, I just missed something entirely obvious (I thought it was some lambda magic). Thanks for the comment however.
No, I had gotten it already. If you see my comment (I had edited it). I had missed something very obvious.
You have no notes, no book, no professor?
If you're interrested, I've written something to patch up the template code on some google code repository regarding JNI. After I modified the code I was able to read/write memory.
I went back. 
I'd say go for this one - you can sill use java libraries that you are familiar with for a bit of effort and you get to learn a lisp dialect 
Using a thumb drive with your Git repository on it is not too bad. You can even sync to a second thumb drive now and then and you'll have a backup. No network needed. PM me if you have questions; I used thumb drives to sync multiple development machines like this for a while. 
You could always learn from [The Man](http://martinfowler.com/tags/), himself.
Umm... I only did it that way because it was easier to understand than trying to wrap up my crap in their crap so everything could execute in one line of code instead 3 or 4. Just because a particular API pushes the language to the point where the type inference breaks, doesn't mean the language is broke. It does mean that those features of that API aren't gonna get much love. Anyway, you pretty clearly showed Java's type inference limitations, and that was interesting. They can always do better in that dept obviously, and Java 8 did improve on it a bit more. Let's just hope they keep moving it in the right direction and don't introduce any real dynamic typing into the language. At least, that's what I'm hoping.
I know some examples not related to game programming. Stop the world garbage collection runs on JVMs with a very large amount of assigned memory. For certain applications throughput over time is not the only thing that is important, but a predictable and constant response time as well. There are commercial implementations of the JVM that avoid this problem (Azul), but generic JVMs can sometimes freeze noticeably when they have several Gb of garbage to collect. The startup time of JVM+application can also be problematic. Users hate the splash screen and long wait for Java desktop applications to start. When used for 'scripting', the long load time of the JVM can be a problem. 
I work in statistical data processing and have ported our hottest code to C for comparison. To my surprise, the code performed equally down to a few nanoseconds. That said, Java abstracts both from memory and CPUs, which - especially in multithreaded settings - can negatively impact performance (because it's generally impossible to bind a thread to a CPU, L1 caches may not be used as much, GC means pulling all that garbage into the caches just to throw it away again).
The points you list are not unique to Java, but could equally well be attributed to C# or other managed languages. I think its pretty safe to say that "Java is slow" is a myth. [Sometimes it's even faster than C/C++](http://stackoverflow.com/questions/145110/c-performance-vs-java-c) because of the advantages of doing JIT compiling.
&gt;2. Ensure that his Java skills are not eroded I'm not sure I understand what you mean with this. Why would learning a second language help on this? To answer your question with regards to #1 only, I'd say go for any non-typed language. Many people recommend knowing at least one typed an one non-typed language well. I'd say Javascript since no one else has. Why? It's everywhere and it's growing. If you like front-end development, delve into frameworks like Angular or React.js. Back-end? Node.js of course.
What the hell is going on here. Why is bitbucket not an option? Corporate policy? If so, *demand* that you get a corporate server with VPN at least, to sync your stuff on through a VCS. You can't seriously be running around with a USB stick in 2014. Seriously.
Apologies if this is well below what you were looking for ... Perhaps the following stuff is all you really need to know before you wade into the many resources. Consider: Foo f = (int x, float y) -&gt; { return z * x; } Take just the right hand side.There are two things of note. 1. It shows a function without a name -- called a lambda function -- that takes an int and a float and returns an int. 2. It uses a variable z that is not declared within its scope, so it'll be picked up from a surrounding scope. The left hand side is an interface Foo. Imagine it is declared like this: interface Foo { int bar(int x, float y); } It contains a single abstract method (often called SAM), `bar`. Note that `bar` has exactly the same signature (input argument types and return type) as the lambda function. Given this match, the javac compiler and the VM conspire to create an adapter between the two, so that when variable `f` is initialized, two things happen. 1. Whatever value of `z` is present at this time, it is frozen as far as the body of the method is concerned. If `z` had the value 10, it is as if the expression being evaluated on the right-hand size is `return 10 * x`. 2. f points to an object that implements the Foo interface, whose `bar` implementation is given by the right hand side (or the specialized rhs described in 1.) In this case, it has exactly the same effect as saying Foo f = new Foo { int bar(int x, float y) { return 10 * x; }; But there are other cases where you merely need a function (such as for comparison ... you don't need a comparator object); in these cases, the code generated at run-time is much more efficient. Hope this helps. 
That is true, but if a better alternative comes along that solves the same problem with significant advantages, then one technology slowly replaces the other. We could have said a similar thing about COBOL and Java: let's keep using COBOL because everybody already knowns it so it's simpler to just keep using it. And look what happened, Java came along and replaced it. It did so despite the fact that nobody knew it, because despite all it's problems it solved the problem of building enterprise applications better, and also because people where not happy with COBOL so they decided to give something else a try. I think with relational databases and ORM the situation is similar: everybody doing the persistence layer knows the pain ORM is and how difficult it is to use it. If a solution comes along that allows to just push and pop objects into a datastore with a reduced learning curve, people will start looking into it because dealing with ORM is a huge hassle, no matter how familiar. 
I know that problem, having worked as consultant, often sitting behind customer firewalls or without stable net access whatsoever. Keep your stuff on a fast external SSD / memory stick that you take with you (if you also care about history, you may want to set up a local git/mercurial repo on that drive). Backup regularly.
Actually, allocating new objects is not that costly if you manage to keep them in local scope. They will stay in the "YoungGen" portion of the heap which you can say is optimized for this mode of work. Trouble comes when you promote your objects to be "permanent" objects (adding them to external collections, passing them around etc.) - in that case the excessive allocation would lead to a number of Full GC cycles which might be of the "stop-the-world" nature (depending on the actual GC implementation) but are expensive nevertheless.
You make it sound like a death trap
We never had performance issues with Java. One time we got memory problems in an web application. The reason was the application server that worked faulty and did not release any memory. I guess there may be performance issues with Swing. Don't use that.
You can't just say that and not link to it!
Let's face it: if you're in a use case where option 2 is preferable or mandatory, you're using C anyway. 
&gt; Copy paste the projects/workspace folder to there Yeah. That's a great way to screw up and accidently overwrite your work. &gt; If you feel like a challenge, you could try learn Git. Learning a DVCS in a scenario is a complete must.
&gt;If you feel like a challenge, you could try learn Git. If you are even an adequate programmer then git is not an issue.
...or C++...
Take a look at [Ceylon](http://ceylon-lang.org). Personally I think this is what next-gen Java should look like.
You really should get the book (/u/LucidityWaver linked it) that specifically walks you through the exam. They tend to test you about a lot of the stuff that you hardly ever use (like the volatile keyword). Also: make sure you do atleast one test exam before you do the real one. 
When I get to my desktop I will :)
not that familiar with queryDSL, quick search lead me to thinkl that all that would be needed would be creating impl of MappingProjection ? Is that what you had in mind?
I once was contracted to improve/debug a Java EE application. (I.e. a "website" on their intranet.) One of their issues was that a particular page that had you select items on a list would hang when you had selected too many items (100 or so) and tried to save that to the DB. It turned out that the Java code didn't have any bugs in it but the problem was that the idiot who made this abomination had decided that it is a good idea to get all items out of the DB, send the entire objects (they actually only used a string and two bools of that data per item) to the client and have the entire logic live in JavaScript in the browser! The JS would then iterate through all objects several times (once each for name and the two flags) to populate the list on that page and do it again *every time an item was selected or deselected*. Another big issue they had was that their Apache would randomly crash but they couldn't reproduce that on desktop pcs. Turned out nested for loops that made copies of ALL the data they were iterating over blew up the heap and the RAM on their VM was just way more limited than on the gigabytes they had on their desktops. Those are very extreme examples but every time I see bad performance in my own code or in other people's code, it's due to such bad decisions. 
Try a dynmaic language with good support for functional programming. Clojure has been mentioned. Racket is another candidate, a very simple and elegant language. If you want something more mainstream you can even go for Python. Then use the new earned knowledge to take full advantage of the functional features of Java 8.
If you're looking at where the infrastructure of the Web is going, knowledge of JavaScript is becoming more and more valuable, as the various component-based web architectures are dying ignominiously.
Not to forget escape analysis and thread local allocation (TLAB). http://docs.oracle.com/javase/8/docs/technotes/guides/vm/performance-enhancements-7.html http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html
I personally have written JNI code directly, since I have not had a performance-intensive need for native code. I generally use [JNA](https://github.com/twall/jna) instead, since it is much easier and allows calling arbitrary native functions as long as you have the library and the function signature.
Javascript. It's everywhere. Nowhere to hide.
Bitbucket has git private hosting. Wat? No internet access? If company won't provide you with internet, just tether your dev laptop to your phone to get internet.
I'm actually using swing in creating GUI stuff. Of all you mentioned maybe the 2 things I want to explore more are Design Patterns and working on some projects. I'm not just brave enough to contribute to a project since a lot of them are pro's.
Yes! I'd love to see this!
Neo4J is great and all, but it is super expensive to use for commercial products. 
This looks pretty sweet. Thanks for the link!
thanks will have a look. roma looks very annotation heavy at first look. I'm thinking of introducing annotation for prefix and suffix list mapping.
&gt; lot of people talk about garbage collection being a problem. When people ask about problems when using Java, GC does come up often and it may sound like Java has some terrible GC related disability. But you have to look at it with in the right context. Java has a lot of facilities for eliminating tons of terrible problems which plagued lower level languages before it, things like support for GC, memory safety, multi-threading, dynamic code loading, reflection, run time monitoring etc. Java developers don't feel like complaining about these problems because Java makes them much easier to handle. With those out of the way it leaves room for GC related problems to rise to the top. It might be a big Java problem, but in the context of languages and runtimes it is not a Big Problem. C++ people like to go on about how bad GC is while forgetting about the 100s of hours they have spent debugging memory leaks, memory corruption, weird multithreading bugs, obscure library symbol versioning and header files mismatches, flakey multiplatform builds etc etc. I would rather have a GC problem than the other ones. 
Groovy guy checking in to second this: The Groovy became one of my most-used tools by being practically useful on two fronts. First, the Groovy console: when faced with a problem I need to "hack out" (before building a proper solution with tests and stuff), Groovy's mountains of syntax sugar make me very, very productive. On more than one occasion, I've been in meetings with business types who come up with an idea, and I've hacked out a proof-of-concept before we leave the room. Second: embedded Groovy: its happened more than once in my career that I've been asked to build a product that will be used in the field to execute business logic that *won't even be defined* until we get there. The solution I've used frequently in the field is to provide an assembly of objects to a Groovy scripting context, and script the logic at runtime. Groovy may not be as far as you'd like from Java, but it will sure as blazes complement your skills.
I'd suggest Scala if you want to stay on the JVM infrastructure and be exposed to lots of programming language features and paradigms you didn't know existed. Another would be Python if you want to learn a dynamic typed language that is a great general purpose language that is easy to learn and very practical to know.
Here you go: [Kernel32.java](http://pastebin.com/xh1P6R3s) [PsAPI.java](http://pastebin.com/fPsUzgbg) [Shell32.java](http://pastebin.com/p8HMHhUc) [User32.java](http://pastebin.com/HzmW5PZX) As you can tell I used the library **JNA**, *not* JNI. I commented some functions out as they needed extra modification to work with the code. I got the functionality of reading memory / writing to memory running. You need to instantiate some objects in the class you'd like to manipulate the memory. I did the following //General fields for memory processing static Kernel32 kernel32; static User32 user32; static Pointer readprocess; static Memory read; public static final int SIZE_BYTE = 4; static IntByReference pid; tools.Process (X) Pointer writeprocess; In the constructor I declared some of those kernel32 = (Kernel32) Native.loadLibrary("kernel32", Kernel32.class); user32 = (User32) Native.loadLibrary("user32" , User32.class); int pid = getProcessId("(X)"); // get our process ID (X) = new tools.Process(pid, "(X)"); //Get (X) Process. readprocess = openProcess(0x0010, pid); // open the process ID with read priviledges. writeprocess = openProcess(0x0020|0x0008,pid); // write proviledges To read memory address: read = readMemory(readprocess,0x54A5B7E0,SIZE_BYTE); // read 4 bytes of memory starting at the address 
embedded groovy is best thing ever happened to me. I try/test my concept in it and port to Java if it is fine. but in serious applications, performance is a bottleneck. by any way we can achieve Java-level performance ?
A large part of programming is dealing with your own stupidity for a long time, that's often why we are self deprecating types (at least the majority I've met). Just keep working at it and writing code, it's better to get something working (even poorly) than to not bother. Pretty much every week I look at old code and wonder why I wrote it that way - since I've now learned something new or thought of a better approach.
so only viable option that satisfies all of the above is try/test in Groovy and if performance matters, port code in Java.
learn to think in arrays. Arrays Arrays &amp; Arrays. Once you start thinking in arrays, start thinking about looping them. Once you learn to think in these two, you can master any programming language.
Yes, bad/inefficient code will give you memory problems.
I love Hamcrest for readable tests, and I'm a big fan of some of the changes to JDK8 -- including the new JSR-310 `java.time` classes. When combining the two, though, I noticed that there are no existing Hamcrest matchers for these new date/time classes. So I built some! But if something's not in Maven Central, I've found adoption to be pretty low (most folks don't want to manually manage dependencies). With that in mind, I took the lib as an opportunity to learn the process of submitting an OSS project to Maven Central by way of Sonatype. So that's the backstory. I'd love some feedback on 'em, so bring it on! Mostly, though, I'd just enjoy knowing I built a thing people can use.
Good job! Could you describe why you used ``ZonedDateTime.of(..., ZoneId.systemDefault())`` in your unit tests, instead of Zulu?
Did you find a better solution? Option 2 doesn't work for me and 1 makes all icons way too small (15 inch, 3200x1800)
Not really. Dropped Windows 8, running Ubuntu 14.04 now, increased the font size on any editors, and just use shortcuts mostly. Bluetooth mouse helps as well. =/ There really needs to be a well scaled Java IDE with the advent of high resolution monitors. I know 1080p @ 15" isn't high enough to be a **huge** issue, however it would help... I'd probably switch to whichever one implemented it *nicely* first. 3200x1800? That's got to be plain unusable without scaling.
Hi there, web developer here. We use java for everything-- front end JSPs, business tier servlets, DAO queries. Personally, I have about 9 years experience in Java alone. I've also been playing video games my entire life. That being said... I would totally use java for a game. If you want an example of a pure-java game, check out Minecraft. It may not be graphically intensive on it's own, but there are texture and model remapping mods out there that can make it damn near photo realistic. the only difference being how much memory you allow the JVM to play with. If you're serious, start off there. Try and make a minecraft mod, and add something to the game. It'd be a great learning experience and might show you if it's really what you wanna use before you're too invested in a language. 
&gt; A large part of programming is dealing with your own stupidity for a long time, that's often why we are self deprecating types (at least the majority I've met). Oh this is sooooo me. Yesterday I had a NullPointerException when trying to save stuff to the database, eventually I realised I'd forgotten to open the database - Damn!!! That's not the first time that's happened. ... straight away I wrote another method that called the database and forgot to open it again. FML. 
Python always been useful for tooling and testing scenario for me. Sometimes I use it also for lightweight batch processing and communicate with Java using Apache Kafka. For the main application development and workhorse code, I always use Java (Love you Java!). Quite lately I flirted with Javascript deeper and develop small Yeoman script in order to create some scaffold for my daily work with Spring Boot + AngularJS.
[This tip](http://balusc.blogspot.com/2006/09/debug-jsf-lifecycle.html?m=1) from BalusC helped me quite a bit in debugging JSF applications. It's a bit dated, but should be mostly still applicable to modern versions of JSF.
Would that really take 15 weeks to do? Is there any place where I can learn to write in Java that is good for beginners?
Didn't Sheldon try that?
You tried Azul GC?
I feel like you're putting too much emphasis on the language. Remember that a framework is usually just an implementation of common webapp principles; it just becomes a matter of choosing one that works. Simply put: Choose a framework that is suitable for the project. A good web developer should be able to implement features regardless of language. I agree with your points: Java webapps require **a lot of boilerplate**. That's not to say that PHP apps don't, but Laravel handles that boilerplate elegantly, and is especially good at just getting something working quickly. 
You're right, but I'm looking at this career-wise rather than freelance jobs where it's just 'pick what works and make it happen' - and I do those jobs occasionally, so that's useful. If I was just programming for myself or was the sole developer at a small company (like I am now) it works fantastically. However, most job listings I see for Java development jobs list massive Java stacks (and I'm pretty sure that it's just a list of Java technologies they use at the company handed to HR, and HR lists all of them as 'required' since they're looking for a Java Developer) but I rarely see anything that asks for or even lists a 'plus' for knowing anything besides Java.
thanks I'll take a read :)
I am a huge fan of Java, yet I hate the majority of the web frameworks for all of the reasons you pointed out. I would recommend one of two approaches. 1. Let java just the the web service. DropWizard is great for making quick http web services. Then you can use a client side web framework like angular, backbone, ember. Serve the static files from nginx or something so you don't have to make dropwizard host them. You could also let DropWizard serve the static assets. 2. Its not very hard to modify DropWizard to render HTML instead of json. Theres a few MVC type plugins with html templating that you can just plug in. Or just send back html manually. Or you can go much lower level. Running grizzly or jetty embedded on their own is not that complicated. You don't really need a whole framework if you are only going to render html, its fairly easy to set status codes and headers. One of my personal favorite servers right now is http://undertow.io/. Pretty low level, the non blocking is pretty easy to understand. There is not much documentation but the code is very easy to read and understand. On side projects I am using udnertow for both JSON and HTML rendering by just pulling in other libraries that handle json serialization or html templating.
Python, or at least some scripting language for when you just want to get something quick and dirty done and a full java program is overkill. I heavily recommend Python over any others though.
I'd suggest Groovy first, then digging in to jruby or jython, then going a bit further a field with something like scala or clojure. That would be a progression of 'most similar to java', while gradually exposing you to new concepts, but never leaving the JVM, nor jumping in to the deep end immediately. 
Modern web front-ends can be entirely divorced from the service layer. We use JRuby for our service layer, and bootstrap + knockout for our front-ends, with the two communicating via JSON. Simple, segregated, and means that if we need to change a back-end technology then so long as the JSON interface remains the same we do not need to change the front-end code at all.
&gt; For the past few applications, I've made the server side part in Java and &gt; grabbed that information with Laravel This is actually the modern microservices approach, for which DropWizard is ideal. If you think PHP is better for the front end, go for it. Expose your Java app as a REST service used by PHP, and then Java can then do the heavy lifting. You can mix and match technologies and languages as you see fit. You could even put "expert in microservices" on your resume ;-)
Scope I get. That's a no-brainer. I think C influence and C-influenced instructors are what I was thinking. (I often conflate C and C++ often since I have experience with neither.) Does the assignment of *null* during the declaration then the assignment of an object to that reference in the next line of code cause an extra step in the execution? Seems like it would. I hear you about extra horizontally long lines of code. I try to fight against them and keep a visual indicator of the 80 char mark; however, I can't remember the last time I printed any source code. It must have been years ago. And each time we are given new monitors, they keep getting wider. It's just so damn tempting to keep typing past 80!
&gt; Does the assignment of null during the declaration then the assignment &gt; of an object to that reference in the next line of code cause an extra &gt; step in the execution? It's not necessary (IDEs like IntelliJ will warn you about the redundant assignment), and I'm pretty sure that the Java compiler will throw it out from the final bytecode. &gt; however, I can't remember the last time I printed any source code While the "printing out" reason is way beyond obsolete, keeping lines short has another benefit. If a line is way too long, it's packing in a lot of information that will make it harder to understand. Extracting local variables breaks up the logic so that it can be consumed in bite sized pieces. 
&gt; If a solution comes along that allows to just push and pop objects into a datastore with a reduced learning curve, people will start looking into it because dealing with ORM is a huge hassle, no matter how familiar. Well, solutions "that allows to just push and pop objects into a datastore with a reduced learning curve" exists, and some people are looking at them, so you are right. But what I'm trying to say is that in order to replace DBMS, we need something that do all things DBMS do, and that includes more than only pushing and poping objects, but also query them in a paradigm agnostic way. Not everyone is doing OOP all the time, and a SQL db can be used from different technologies. If I replace my Oracle Server with Neo4J, I may have a nicer life, but everyone else will have a hard time. Some of them are PHP programmers who make quick and dirty web pages to show data for managers, some of them are BI people who make data analysis using excel, some are just smart guys using TOAD to find what they need, some of them are DBA who are responsible of keeping servers running 7x24. And maybe in the future I learn Haskell and a OO database will be horrible to work with because of the functional-object-mismatch. You say "let's keep using COBOL because everybody already knows it..." I think it is not the same case. Only programmers were using Cobol. And Java was offering way better tooling than Cobol from the very beginning. That is not saying DBMS will be around forever. I personally hate DBMS. But in order to replace them you need to be able to do that same things better and easier, and also offer new things. 
Idris.
What are your thoughts on Knockout? I'm considering learning a JS MV* (to link up with DropWizard) and one thing of note in Knockout is - afaik - there's no routing by default.
Suppose you have a class Rectangle, and a class Square that extends Rectangle. Suppose you have a Collection&lt;Rectangle&gt; recs and a Collection&lt;Square&gt; squares. Without the wildcard you would not be able to do : recs.addAll(squares). Because although a Square can be casted to a Rectangle, a Collection&lt;Square&gt; cannot be casted to a Collection&lt;Rectangle&gt;
I use this approach because I can see, at a glance, what variables are available in that scope. It helps to avoid having to visually traverse a dozens of lines of code to find where that variable is being initialized. 
Some novice (noob) programmers use such statements :p
I have just as of a few seconds ago restarted my computer and it's magically okay, I'll try closing the topic, thanks. Still didn't get my Intel driver update though, it doesn't seem to think I need one
Other thing I love about having short lines (usually beneath 80 chars, but hardly possible in Java...) is how they behave in side-by-side diffs and merges.
&gt; only when we disabled the array bounds checking So, how do you adapt to that? Do you try to forgo old-style loops (with increment counters) and stick to the Collections library's for-in and other iterators? What I'm asking is: what are the drawbacks you considered and how did you account for them? Thanks.
Great explanation. 
Thanks! Zulu being UTC? No real reason; though I guess it'd be better-compatible to use UTC, though.
I haven't used assertJ. It looks neat, though -- I'll have to play with it some.
It would be nice if this were true and in theory it is, but unfortunately not in practice. Object pooling is absolutely more efficient than allocation if done carefully. If you are writing program with tolerances of &lt;50us, GC will definitely kill you, even young generation. Interestingly, Java's new G1 collector seems to have actually made allocation more expensive in exchange for cheaper GC. Also keep in mind that article you linked is almost 10 years old. Sun/Oracle went on for a long time about the magic of escape analysis. Again, in theory this is a great idea, but in practice the escape analysis in the oracle JVM is so broken that it almost never actually does anything.
Do you have anything to support your claim? I am interested, as someone who is working on a project that does many tight iterations I have literary never had any trouble with the GC.
But if you do this, your variable is initialized twice: at the point of declaration and at the point of "real" initialization. You will still have to find where the real initialization is. Also, you can accidentally use the variable between null-initialization at the point declaration and actual initialization, and the compiler will report no error.
It depends on your resource constraints and VM settings. You can create all sorts of problems for yourself if you don't have the resources you need for your application and/or you've got silly VM settings for your app. For the most part, though, Java is very fast these days and if you are hitting a performance bottleneck you are either doing something really silly in code, working in a severely constrained environment, or dorked up your VM settings somehow. Example, say you were silly enough to roll your own cache and you are creating a bunch of what should be short lived objects but your cache is keeping a reference to them directly or indirectly -- you will find yourself in GC churn pretty quickly. If you aren't parallelizing GC, you are probably going to have pauses. If you set your eden space way too high or too low you will have pauses. If you are creating absurd amounts of objects only to have them collected very quickly after you might run into GC issues. You might see a pattern here. It is all about the GC. The compiler and JVM are really, really good at optimizing these days -- 95% of any performance issues you are going to see will be related to the VM. The other 5% will be because you did something wrong concurrency wise. If you create a thread that has to wait on some long process you might see some performance issues. Most of the perception that Java is slow comes from about 15 years ago. A lot has changed since then.
Also, in Javascript every variable is effectively declared at the top of enclosing function (not block) so this approach makes sense in that language as it makes the declaration hoisting behavior explicit. 
&gt; Does the assignment of null during the declaration then the assignment of an object to that reference in the next line of code cause an extra step in the execution? Seems like it would. I'd assume that it would be optimized away when compiling to bytecode but if it wasn't and that performance hit was a real concern, you're using the wrong language. ^^^^8ec4dcee56a6b927b2c93a47fa659908 
keep your drop wizard. And a skill set around a javascript based single page apps. I would look at angularJS. I've built 3 sites with dropwizard+angularjs. Works nicely. You can server the single-page-app stuff from drop wizard as an "assert" I also would add in bootstrap to that combo since my programmer ass can make things look tolerable with almost zero effort. 
Echoing others here. . . Java's performance is great, in many cases within an order of magnitude of C/C++ code which is something I wouldn't have believed possible 10+ years ago. However, "Stop the World GCs" can be a real pain in the ass. There are ways to mitigate them, but they are one price you pay for not needing to manage memory directly.
Hi all, I just want to thank you for your responses and also to say sorry for the late reply. I have been studying and making some stupid programs, although they are stupid they help me understand some points and for that i wanna say thank you for that sugestion. Like, for an example, i was trying to create a method that returned something and in the main method i was trying to compare 2 strings with (==), it was getting on my nerves why it didn't work. So i've read and research about it and then i've found why it didnt work, strings cannot be compare with (==), it had to be with string.equals() to other string. I will continue with my study and improving my coding skills. Thank you all for having the time to read =) 
&gt; Java launches an entire virtual machine (the JVM) just to do do a int++. Launching an entire virtual machine is a bit overkill when you want to just increment by one. Can you elaborate on that? In what context does the JVM spawn another JVM for an operation like that? Or do you mean as a developer it is a bad idea to intentionally spawn a new process to do a trivial operation, because duh.
Right, its the same kind of trade-off you make with most languages that aren't scripting languages. You could make a similar observation about doing that in C, needing to do a full compile into an executable just to do i++ would be overkill :)
The GC causes problems that are kind of specific to games, where the overall throughput isn't as important as consistent timing between operations. Beyond a certain rate of object creation, you NEED an object pool or the game starts looking really jittery, no matter what garbage collector you are using.
&gt; The G1 garbage collector has helped a ~~bit~~ lot. FTFY
I'm writing automation for iOS apps using Appium, the Appium java-client, and Cucumber. To automate an application you need to create an instance of the AppiumDriver. There are a ton of utilities and helper methods I would like to put into a separate package and eventually create a library to share with others. I just want to make sure I can use them when testing other applications. The problem I see is that these methods would all depend on methods of the AppiumDriver instance. What I tried before was creating a class to contain all of my [step definitions](https://github.com/cucumber/cucumber/wiki/Step-Definitions) and each one took an instance of AppiumDriver as the first argument. The code worked but I'm aiming higher than basic functionality. I want this to be done the correct way so people won't laugh at me :D. Another idea I had was to create an interface to driver in my "clientStepDefs" class. I'm not sure if that would be better so I would like to hear what you all think before I get too far into this. Thanks.
it's just some style thing. I pretty much never do it that way
You can't initialize a variable twice. It's initialized as null, then assigned an object reference. If you try to access instance members on a null reference you will most certainly encounter a null pointer exception.
You shouldn't necessarily worry about "wasting vertical space", but rather about how easy it is to read and understand the code. Longer doesn't automatically mean harder to understand. Your particular code I would write something like: String homePath = System.getProperty("user.home"); File homeDirectory = new File(homePath); The reason is that I like to follow the "do one thing per line" rule, which makes things easier to understand. The original example is doing two things on one line (fetching a property and creating an object), so for readability it is better to split it up. As a side effect it will be less refactoring in the future when you decide you want to log the value of the path, or sanity check it, or use it for another purpose later.
Search for 'fork' and 'child process'. I also think 'that option 1 just seems hacky'. Take a look at some Tanenbaum's books.
First make a addNotify() method. This runs automatically in your class kind of like toString(). Look up how to make a standard one and make sure you add a keyListener. The key events will run automatically when: KeyPressed: Runs when a key is pressed KeyReleased: Runs when a key is released KeyTyped: Runs when a key is pressed and depressed quickly (typed). You can use these to do something if a certain key is activated, like: KeyTyped(KeyEvent k) { if(k == KeyEvent.VK_LEFT) { System.out.println("you typed left"); } } That help?
This suggestion not only will not only give a deep immersion in programming, but it will introduce you to some of the soft skills involved (working with others, version control, user experience), and provide you with satisfaction from contributing work to a project that people actually use. Here it is: Find an open source project to contribute to with a goal of checking in some useful code by the end of your 15 weeks 1) Find a worthy project. This should align as closely as possible with your interests. (looking at your recent posts, I'm guessing..... video games). 2) Test it rigorously and collect a nice list of bugs and feature requests, submitting them as issues to the project. 3) Study the project code, do a checkout, get it running in your environment. Learn the ins and outs of Version control. Learn to use a debugger to watch the code execute. Learn to use an IDE. Force yourself to ask questions here or on stack overflow or in the mailing list of the project. 4) Pick one of your bugs or feature requests (start small, like "this error message is not descriptive enough") and begin coding your contribution. When you feel like it works and it matches the code quality of the project, check it in. 5) Repeat #4 as needed. I'm interested to hear how it turns out. If you need someone to check in with you about how it is going, obstacles, etc., let me know
And that project of which I speak is a game, and it does many tight iterations (and within which, tighter iterations for sorting - not to be specific as to associate NaziAdolfHitler to a real person.) Absolutely none of the performance issues I've encountered have been related to the GC.
Yeah, UTC. I didn't go through your unit tests in detail, but using letting the environment variables affect the validity of unit test results has bitten me in the ass before. Especially, when date math does vary quite a bit depending on your TZ.
Yeah, avoiding dotting more than two things together means that when you get an NPE report from a customer, with no steps on how to reproduce it, it is obvious what is null and makes the fix much easier.
Touche. I'd like to thank the compiler would fix that and I wouldn't really be too concerned about it anyways. But what I do often see from the people who insist on putting all their local variables at the top of the method is that some are in inner scope and may never actually get used. This wastes 4 (or 8) bytes of memory that didn't need to be used.
They have a free community edition, and Spring Data Neo4J is from Spring. I believe they would never have done it if the community edition was not feature complete, and you only need to pay the support, or to have the latest fixes. Have no idea on the price, is it very different from Oracle or SQL Server? That would be surprising. 
Good call -- thanks!
Lavavel is amazing for fast production. Python is great for high performance bits (plus you can put certain algorithms in another language like C and call them from python to help scale.) Python with something like Mongrel2 / ømq can do some pretty amazing things performance wise. If you need fast first cycle: build the side in laravel. Then move the DB to something scalable (use case dependent). Then make a custom model for a RESTFul API in Java if you need to scale the model side of things. If you need to scale the view side of things, at this point, it is much easier to convert views from laravel to something more performant, although you can likely scale the view side of laravel with a load balancer pretty efficiently in a small cluster / scaling VM pool.
Only reason I can think is to keep lines from being too long. But I agree, seems rather pointless in your example. Esp the assigning of null.
That's a bad comparison. C++ gets compiled to binary, and then executed by your computer every time you launch the binary file. Basically, launching the binary will allocate small chunk of memory, OS will move execution pointer there and make some simple operation. In Java, things are different. First, you have to do compilation to binary step anyway, that way you get .class from .java. But then, your OS can't just execute it. That's why a full blown Virtual Machine (JVM) is launched, with huge amount of allocated memory in it (128MB - 1GB+ depending on configuation), then your tiny .class file is loaded there, executed, and then whole VM is deallocated. Now, try comparing running a native binary and a java binary in a loop from some shell script.
Why can I just upvote you once :(
[Space Nazi](http://www.imdb.com/title/tt1034314/) you say?
We go to 120 at work, for this reason. We have big screens in most meeting rooms, so if we need to talk about some code and have too many people to sit at someone's desk, we can do that.
BalusC has helped thousands of developers like myself in StockOverflow. Congratulations to him. 
It's only when you go beyond a certain rate of object creation. Before that point you may have no issue with the default GC or might be able to eliminate problems by using a different one, but there is a limit to how many objects you can create each frame before everything pauses for 20 milliseconds or so on a regular basis.
I understand how both compilation and execution processes work. I wasn't trying to compare them as equal, simply saying it was also overkill. I mean, when you think about it, even the parsers and executors needed for the simplest of scripting languages feel like overkill if your just adding two numbers.
You get what you pay for...
the guys a god. all praise be upon him
What do these jobs do? It seems strange to kind of ridiculous to have jobs processing on a webserver. Have you looked in to just straight up breaking that processing out and using cron or something like quartz to run them?
4 spaces before your code turns it into code test a
What he said. Or you can put a svn server on it like me. :)
You are welcome, it's a quite common pitfall.
If being taught out of a book is hard for you, teaching yourself out of a book may be just as difficult, it is for me, at least. What I can suggest is take the concept of what you learned in class, go home, research it, and apply it. If you need any tutoring / help, I can help you if you pm me. I have a lot of free time on my hands.
I would never do this unless there was a syntactical/logical reason for doing it, such as scope like sh0rug0ru mentioned, or if we wanted to have it be final and initialize it in the constructor. Other than that, nope. Declaration and assignment in one line.
Let's see... List&lt;String&gt; names = new ArrayList&lt;&gt;(); names.add("John"); Edit - holy toledo! Learn something every day.
It's not so much that learning out of a book is hard, it's just the textbook itself hardly does a good job of explaining things. But that's a good suggestion I had not really thought about; researching what I learned in class. Right now we are on strings. I think a good way to teach this class would be to build a small program together or at least write the code for it and explain each line. Thanks for the tutoring offer. I will definitely take you up on it. I am also willing to compensate for your time, it's only fair.
Head First Java. It's in cartoon format. Download a sample chapter to get the feel if it. 
IMO, the best way to learn any programming language is to start small and get a few simple projects under your belt (Hello World, Towers of Hanoi, Fibonacci Sequence, etc) to learn the basics of the language and how things fit together. Reading through the Java tutorials on the Oracle website will give you a good overview of the Java development environment and introduce you to the basic building blocks of building programs. There's a ton of free tutorials with source code you can find online to get you started with simple projects. Learning a programming language is a lot like learning math, reading the text book helps you understand concepts but that doesn't replace actually working through the problems. When you are going through some of the basic tutorials and you are using classes you aren't familiar with, look them up in the Java API docs to find documentation. The best tip I can give you is to learn how to use an IDE with an integrated debugger. A debugger allows you to pause and step through your code line by line while it's under execution. Debuggers allow you to really understand what's going on in the code since you can observe the state, and step through your code to observe how that state changes. There's a lot of Java IDEs you can choose from, but the three most popular ones out there are Netbeans, Eclipse, and IntelliJ (I use IntelliJ personally). After you've worked through enough examples to feel comfortable with Java, use what you've learned and to create a project from scratch that you think is interesting. Start with something very simple, and gradually work your way into building more complex programs. 
Had helped me so many times on so. Good for him.
As far as I know, the community edition is licensed as GPL. The company I work for mostly writes desktop applications, so the community edition would require that we open source our proprietary code. This is not an option for us. Unless I am understanding the GPL wrong? 
I agree, hopefully IntelliJ fixes it because it would also fix phpstorm/Android studio, which I use most. It is, trying to get used to option 1 atm, but the super tiny icons are so annoying. Visual Studio works like a dream on this resolution, so does Sublime text, but Java IDEs are a big issue. 
What would the best place be to look for currently running open source projects?
I'm predominantly a server side / middleware developer, but the bit I've played with Knockout didn't seem to lack due to this. We have our own MVP framework that we've built on top of Knockout, and given that our routes are pretty predictable and strongly coupled to workflows, and our workflows are pretty strictly deliniated, we haven't struggled due to this yet. That said, a brief google search turned up PagerJS, which is a routing framework written to work with Knockout.
If you want to spend most of your time writing java then use JSF with Primefaces. They will handle most of the front end for you with components. Take a look at the demo page to see what the code looks like. www.primefaces.org
You might try [Java Koans](https://github.com/matyb/java-koans) too. It walks you through step by step the basics of Java by using examples.
What would you recommend for someone who's relatively new to JNI and would like to develop some skills to help LibGDX development in the future? :)
I had built a similar Java/COM/CLR Bridge - a long, long time ago. Could you be more specific as to what type of functionality you are trying to implement?
&gt; There is 1 area that I've seen no one solve with java, and that's startup time. A java program is relatively slow to start up, compared to a native app. Like I'd like to use JEdit as my text editor, but it takes a couple of seconds to start, so it's faster to use natively-written editors which start up effectively instantly. This may be fixed in Java 9, if Jigsaw is everything it promises to be. Depends how much of the JVM will have to be loaded for most standard applications, I guess, and how much could be loaded "on demand".
Currently in my AP CS class we spend like 30 minutes looking over slides to learn new aspects of code or we're asked to read something at home and then we spend 3-4 days doing a lab over the new concepts. This way works really well for me.
It's very hard to learn java from just lectures and books. Try and find some small projects you can do in java relating to something you enjoy. Sharing your success (or problems) here will help keep you motivated. 
Why is every minor version to be announced on reddit?
If none of these suggestions help it's time to switch to business. 
Because this throws a compiler error that complains that `homeDirectory` has not been initialized, although there's no code path that leaves it uninitialized: File homeDirectory; if (condition) { homeDirectory = new File("someDir"); } else { homeDirectory = new File("someOtherDir"); } System.out.println(homeDirectory.getAbsolutePath());
You will need to provide a lot more information. When people talk about cron on a Unix system, they are talking about a way of scheduling processes to run in the background at some time interval. So I am not sure what you mean by #2. Do you mean exec'ing the processes in the web server? This will be basically the same. Unless by moving the code into the web server you can exec the processes less often. You will get a much better response answering these questions, 1) What is the problem you are observing, the web server is unreachable sometimes? 2) What is the web server doing? 3) What are the cron tasks doing and how have you determined that they are "computationally heavy" as opposed to IO heavy, etc? 4) Why do these processes need to run every few minutes? 5) Being un-familiar with Heroku if you choose #1 will it be a second application in the same Linux machine, or a different Linux machine? 6) What are the specs of the machine? 
&gt; Start with a text editor, don't use eclipse or other SDK's. You're obviously confusing IDE (integrated development environment), like Eclipse, IntelliJ, or Netbeans, with SDK (Software Development Kit), libraries like SWING, SPRING, and many others. Yes, starting with only a text editor has certain advantages, but I'd advocate against it. Starting with the right tools for the job is the better option. When you want to loosen a screw, you don't use a knife, you'll grab a screwdriver.
Ugh it's the same with Android studio 
I hesitated at start, why do we need a caching library that does less then Guava? I looked at the GitHub project. I found 3 sub-projects there. First was ['core'](https://github.com/headissue/cache2k/tree/master/core/src/main/java/org/cache2k). Digging into 'impl' package (one of two packages), there are 30 classes + 3 more packages, one whom named utils. I described the process for the purpose of making a suggestion: If you are developing an in-memory, non-distributed caching solution on your own (why????) you may not need all that boilerplate code. I also saw that you mention "lock-free caching". Going to [LockFreeCache.java](https://github.com/headissue/cache2k/blob/master/core/src/main/java/org/cache2k/impl/LockFreeCache.java) class, the first method has the following comment: &gt;/** &gt; * First lookup in the hash unsynchronized, if missed, do synchronize and &gt; * try again. &gt; */ This is clearly not locked-free. anyways, you use package-private access level for fields but declare private setters, and variable names in (for example) [this file](https://github.com/headissue/cache2k/blob/master/core/src/main/java/org/cache2k/impl/ArcCache.java) are unclear. Also some files contains over 700 lines of code. maybe you should separate logic. I did stop early so please do not take this as a real code review, but as far as I got, maybe you should give Guava another go. From the specifications you published in your readme, guava can do all you ask and more. I can also assure you, we are using Guava on a massive scale and it's pretty rock-solid. Also Google.
I'd say its more like a loose screw on a toy and using a screwdriver (text editor ) or a power drill with a screw attachment (eclipse). 
I like to think so.
Probably the only programmer I would recognize by name. 
My teacher hardly taught. The only people who hit 5s were the people who do their own for-fun programming at home.
[Why did you post this again?](http://www.reddit.com/r/java/comments/2expxt/my_java_mmo_inspiration_its_bad/) It's not even a month yet.
yeahhhh not a good idea to repost this so soon.
So many magic strings I think you might be a wizard now. You should use a properties file or something along those lines.
Yep, our teacher told us you need to program at home to do well on the test. I've been using codingbat. It's a nice website for that kind of stuff.
https://help.github.com/articles/where-can-i-find-open-source-projects-to-work-on http://www.codetriage.com/ http://en.wikipedia.org/wiki/List_of_open-source_video_games
Jon Skeet would like to have a word with you.
That depends very much on your definition of right. With that said, I see more similarities than either side (java or C# folks) want to acknowledge. C# sure has some nice features (like operator overloading, real properties, unified generics with component type information at run time) which can feel like a big plus. On the other hand, java has a huge and very mature ecosystem that makes up for many of its perceived shortcomings. Still, both languages are VM based, multiplatform (at least if you stick to mono), mainly single inheritance (though Java's default methods on interfaces offer some escape hatch here, for the price of possible inconsistency that may arise when not used with care), garbage-collected procedural/OO languages. For most target domains the libraries and frameworks you use should probably have more bearing on your decision whether to use Java or C# than the languages themselves. Peace.
&gt; whereas there is not a single language level feature from java for which C# has no equivalent Actually even C# [6.0](https://roslyn.codeplex.com/wikipage?title=Language%20Feature%20Status&amp;referringTitle=Documentation) lags behind Java: Using static members (since Java 5), Binary literals and Digit separators (since Java 7) ;p
Beside the comments of idanh (that I fully support): You use GPL 3. How is anybody supposed to use it in commercial software? The whole project seems to be very unneeded in times we have Guava for non-distributed caches and big libraries such as eh-cache if you need more.
But dude, that goes against all that new fangled functional fluid api stuff the hipster kids are all doing!
Make a web app with [Dropwizard](http://dropwizard.io).
Karma.
This is a good point, but most IDEs will flag unused variables. I know IntelliJ does. 
/r/learnjava, /r/javahelp and /r/javaTIL are additional subs you can look at. After every lecture, go through your notes and pick out every concept. Then write a program that uses each one. It doesn't have to be big or complex, trivial and pointless will do, as long as you're using the concepts taught. Then go to /r/javahelp, pick a problem and solve it. Then look at the other posted solutions and see how they've solved it. It seems to me that a lot of introduction to programming courses will teach you the nuts and bolts of a language, but throw you in at the deep end when it comes to actually using them to solve a problem. Grab a book on object oriented analysis and design, and work through it. And book on design patterns, too. edit: www.github.com has a plenty of java projects for you to look at, to see how problems are solved in practice. There'll be plenty of examples of both good and bad code. Learning to tell the difference will help you in the long run.
Most employers (even at big-name tech companies) would probably not fire an intern - the whole point of a good internship is to learn valuable skills. If you aren't up to par, just try to demonstrate that you are a fast learner and they should give you opportunities to improve as you go.
Thanks, I appreciate the helpful tip! Any others are welcome :)
Thanks, that is really encouraging. I'm looking forward to applying now :)
You sound a lot like I did before I got my first co-op job. I was super nervous too. I didn't think I knew enough to be very useful, even though I also did well in programming classes. Then, on day 2 of the job I finished my first task/bug fix, they told me they didn't expect me to finish that fast and had to find something else for me to work on. A month or 2 in they were giving me bigger feature requests that had been given time estimates assuming a full time experienced dev would be working on it, and I was finishing many of the tasks a lot earlier than expected. They gave me an offer to come back after graduation at the end of the summer. I worked there for a couple of years and then moved from Canada to the US to work for a top tech company. I thought I barely passed the interview and didn't know if I'd be able to keep up with everyone else because the company is known for hiring good people. As soon as I became an interviewer at this company I realized I actually did pretty well in my interviews, and in my first performance review I exceeded expectations and was promoted. I'm always nervous about changing jobs, changing teams, working on a new type of project, etc., and it never ends up being bad as bad as I thought it could be. If you're anything like me, me telling you that won't stop you from being nervous... but I'm telling you you should still try. I've found that being aware of your abilities and not being over confident is a really good quality in a developer. There are a lot of people that are too confident and don't know when to ask for help, when to run ideas by people before implementing them, etc., and that can lead to a lot of problems. When interviewing, I see many people give wrong answers confidently when I would have preferred that they would have said they didn't know for sure but they had a guess. At the top big tech companies a large part of the interview is usually just a conversation about how you would solve the problem before actually writing code, you are not expected to get the answer right away, interviewers are OK with giving hints if you're stuck and sometimes they'll think you did well in the interview even if you got the wrong final answer. Showing that you can think things through and that you can justify your decisions is important, and it sounds like you're good at that. If you do well in the interview I would be extremely surprised if you were fired or even disciplined at all. You should not be concerned about that at all. Regarding bad code: many companies do code reviews, and you should expect to get a lot of comments on how to fix your code in most of your code reviews, but that is completely normal. Everyone makes mistakes, including senior engineers, and it should not reflect negatively on you unless you're consistently making the same mistakes. Also, don't worry about not knowing what to do. You're not competing with your co-workers (at least you shouldn't be), you're on the same team, so everyone should be helping each other. People ask each other for help with basic things all the time. And even experienced devs can spend huge amounts of time on Google trying to figure out how to do something. I think you'll do a LOT better than you think. This might be a case of the Dunning-Kruger effect (competent people underestimate their ability, incompetent people overestimate) or imposter syndrome (despite evidence, people don't think they deserve what they achieved)!
No, I mean, even for used variables the scope becomes larger then it could. For example, statement1 statement2 ... C x = ... statementN_which_uses_x becomes C x = null statement1 statement2 ... x = ... statementN_which_uses_x And now the structure of code doesn't contain information that x isn't needed in statements with index &lt; N. The reader should hold in his mind more potentially usable variables at point than it's actually needed. And in the first case, reader doesn't even need to care that there will be some x before he reaches the part of the method where it's needed.
"The Foole doth thinke he is wise, but the wiseman knowes himselfe to be a Foole." - Shakespeare You only think you don't know enough because you're smart. 
This has also been my experience. Interns can make hilarious mistakes. Everyone does. Most rational devs and dev managers don't look at the absolute value of your strengths or weaknesses, they make decisions on the margin. For example, imagine an intern with more real world experience than yourself that successfully completed a complex project, but they didn't listen to code review feedback, stubbornly argued for designs their team/mentors disagreed with, and showed little growth over time. Now imagine you really struggled with a less complex project. They hated your code at first, but you spent a lot of effort making sure you implemented suggested changes and understood why they improved the overall product. Maybe you have an impossible time with the design and they have to spoon feed it to you, but once they explain the details, you can demonstrate you get it and can produce a solid implementation. Objectively, the other intern probably produced a "more impressive" project. But no one would hire them over you, at least no one you'd want to work with again. Growth curve really matters. "Fitting in" matters, but not in the sense you describe, its more about taking and making constructive feedback and being flexible and friendly, sometimes under pressure. Sounds like you'll be fine :)
I understand what you're saying, but from an organizational standpoint, keeping those variables at the top of the scope is the easiest to decipher. This is especially true for methods that need to keep track of many different variables. Of course, at that point it might be worth trying to refactor the method. &gt;reader doesn't even need to care It's impossible to know this. Personally, I care about every variable in a scope. Also remember that modern IDEs make it easy to see exactly where any variable is initialized. (In IntelliJ, I can CMD+click any variable to jump to its initialization)
Go ahead and apply. Do your best and learn as much as you can: you cannot be expected to know everything off the bat but curiosity and adaptation will go a long way. I've found that even with experience the fear still exists. The best way to deal with it is to use it as a motivation tool: fear means you are doing something new and challenging. Plow through it and don't let yourself be managed by it. 
Wow, this was a great post, thank you so much. You're right; we're very much alike and everything you said is exactly how I feel. Thank you again for the inspiring post, I'm going to keep this bookmarked, or even print this off so I can keep it for reference! Actually, this also can be used for my other job I had in mind: I wanted to join the Canadian Forces as a Pilot but some of the stuff you said is exactly why I'm not 100% on it. Quick question if you're still around: What type of preparation should I do? They ask for experience in multiple languages but Java is the main one I'll be developing in I believe. Should I go over the basic concepts so I know the definitions of everything (primitive variables, classes, objects, inheritance, etc)? I also have a great resource of common Java interview questions and I will definitely be Googling for more. Thanks again!
Wow, great examples and posts, thanks so much! In my mind I think of it as, I have 4 months to complete a java application and I'll be working with experienced developers where I might not even be able to keep up. But this post demonstrates that my goal isn't to keep up (if I can't) but to learn on the go and give it the best shot I can. @jmickraut - your example is perfect, thanks! I am definitely a learner and for example, during my driving lessons, even though I did poorly on some things, I took the driver ed's advice and applied it. I bet I can do the same thing here too. Thanks again!
Heh, thanks a lot for the inspirational quote and wise words, GreatOwl!
I'm pretty new to Reddit and this website has been nothing but help for me. I have asked friends the exact same thing that I posted here. Actually, even after my I asked my friends for their advice, I still wasn't going to put in my application. But the posts in this thread are a huge help, thank you all!
The guy is a wizard! I cannot count how many times his blog or himself in SO has helped me out. Good for him!
They answer is always no if you don't try and that is the worse that can happen "no".
Why should I abandon Spring Batch for this?
&gt;... developer it is a bad idea to intentionally spawn a new process to do a trivial operation, because duh. Yeah it is duh to anyone who knows how Java works. /u/sonay hit on my point. A performance issue exists when you want to modularize entire Java programs. This is where we get into the nitty gritty of efficiency. You might write the portion of your app that does matrix operations in Fortran. Then you want to a simple if statement to decided to take more input or generate a report. I would not use java for that if statement primarily for efficiency reasons. Do Java performance issues exist in modern development? Yes.
You have [Inferiority Complex](http://en.wikipedia.org/wiki/Inferiority_complex).
When you do your first if statement (if(machine++ &lt;2){ ), you increment machine by 1. The following if statement (if(machine == 2){) could be activated if machine started at 1. :) You *could* change the second if statement to an "else if" statement to fix it, or you could change the second if statement to be == 3, but thats a bit harder to follow.
First off, please post this on [r/javahelp](https://www.reddit.com/r/javahelp/). I don't think that this subreddit is the right place for this post. Also, do you mind providing some sample input and expected output next time? This might help us discern where your error comes up.
Oh ok I am sorry! I didn't mean to although i did notice my post seemed out of place. and the output is supposed to look like this How many quarters does Marge have in the jar? 4 How many times has the machine been played: 0 Lose – 3 left Lose – 2 left Wi n – 3 left Lose – 2 left Lose – 1 left Win – 2 left Lose – 1 left Lose - 0 left Game over. Margerie played 8 times. and I was using increment on the machine so that everytime it would == 3 it would give the coin.
I work for a company that hires a lot of co-op students. The big picture is that the co-op process is us searching for people that we will want to hire full time when they graduate. The co-op term could be thought of as a 4/8 month long interview. Don't worry about getting fired, if you don't perform well, we just won't bring you back for another term when your done this one. There is no point in firing you when you will be gone in a few months anyway.
Oh very interesting in how you set it up and I was keeping a count++ in order to output the number of times she played.
No it doesn't.
It's okay, this is just FYI for any future java issues you might have. Looking at your code and trying to keep it within your style, there are a couple things I'd like to mention: 1. I agree with mcbi4kh2 regarding the incrementation of machine in the if statement. I think that is what's giving you problems. 2. The machine being set to zero isn't helping you achieve your lose-lose-win pattern in your code imo. [Here's](http://pastebin.com/jfvxY5nZ) your code with a slight twist that should yield the correct answer. The while loop is the thing to look at. Output: *How many quarters does Marge have in the jar?4 *How many times has the machine been played?0 *LOSE you got 3 *LOSE you got 2 *You won you have 3 *LOSE you got 2 *LOSE you got 1 *You won you have 2 *LOSE you got 1 *LOSE you got 0 *Game over. Margerie played 8 Hope this helps! Edit: Formatting 
Hey, I don't think your fix is quite right. I believe he wants it that every 3rd turn you gain 2 coins. You have it where he gains 1 coin. Actually, if he wants it to gain 2 coins, this is an infinite loop. Here is a look at my code and the output: http://pastebin.com/pvUSzhEV The way I figured it is the moment you insert a coin, that counts as a play. That's why I increment the machine first thing. Machine keeps count to how many times it was played - no need for "count" variable. If I divide the machine (number of plays) by 3 and see if the remainder is 0, that will indicate it's every third turn. I might have misread the question so I apologize if I misinterpreted anything! 
Oh, really? I was going on the Sample I/O OP provided [here](https://www.reddit.com/r/java/comments/2gc6il/can_someone_please_review_my_code_and_hint_me_at/ckhnpnk). You're not misreading anything, OP's initial post is obscure. Until I requested a sample I/O, I wasn't sure what was going on. 
You're right actually, it is one coin. I was going off his OP: &gt; The objective is to make a jackpot machine that only pays every third play, it gives 2 coins
Thanks! I didn't quite answer your sample question correctly myself so it looks like I have a bit of work to do on this. Thanks for the heads up!!
Because it is not standard. Ditch Spring, Apache Shiro, PrimeFaces and all the other proprietary crap unless you want to get your organization into a vendor lock-in.
Oh thanks man i appreciate it! I got it working some other way though, I kinda kept it the same i just messed a bit with the counts and machine. But thanks a lot though I'll compare both right now!
If you override `finalize`, Josh will visit your bed that night and finalize you.
Easy question, other than that what is wrong with it? 
Thank you all for your suggestions, I really appreciate it. I didn't expect to get so many good tips, I thought I would get the good ol "Use the search function" or "google it"
That's excellent news for JSF. I found that the JSF spec group sometimes lacks input from end users. Especially the faces flows feature in JSF 2.2 could have been a lot better, if they had gotten more feedback. I have no doubt that Bauke and Arjan are the most qualified members of the JSF community to provide that input.
It's not that bad of a question, really. It would definitely seperate people who are somewhat familiar with java from someone who lied on their resume (which is a big chunk of why these types of questions are asked), and answering it would allow the candidates to cover a lot of ground. They can demonstrate their understanding of exception handling, their understanding of design decisions (mutable vs immutable), and their understanding of the java memory model.
Greetings, as well! There is no reason, you're right. There's also no reason to have to write code like: --- &gt; public class HugePileOfShit() { &gt; BDOne businessDelegateOne = new BDOne(); BDTwo businessDelegateTwo = new BDTwo(); BDThree businessDelegateThree = new BDThree(); BDFour businessDelegateFour = new BDFour(); BDFive businessDelegateFive = new BDFive(); &gt; public void doTaskEJB(Client client) { businessDelegateOne.setServiceType("EJB"); client = new Client(businessDelegate); client.doTask(); &gt; } &gt; [...] // You can imagine what the rest of this shit // will look like, and how many lines it will take --- **As opposed to a [proxy pattern](http://en.wikipedia.org/wiki/Proxy_pattern):** --- &gt; public interface BusinessDeligate { public void doTask() throws Shit; } --- &gt; /* The purpose of this class is to throw shit. */ public class Foo extends FactorySingleton { private BusinessDeligate businessDeligate; &gt; public synchronized void bar() throws Shit { businessDeligate = BDClient.getBDFoo(); businessDeligate.doTask(); } &gt; public synchronized void baz() throws Shit { businessDeligate = BDClient.getBDBar(); businessDeligate.doTask(); } } --- &gt; /* The purpose of this class is to feed shit to Danny DeVito. */ public class Bar implements Runnable { private DannyDeVito theD; private Foo foo = Foo.getShitFactory(); &gt; public Bar(DannyDeVito theD) { this.theD = theD; } &gt; @Override public void run() { while(Pope.isCatholic()) { try { foo.bar(); } catch (Shit shit) { if (shit.isGood()) { shit.inspectedBy(this); // for logging theD.feed(shit); } else { shit = null; // time to get more shit } } } } } ---
Huh, you're right. I tried compiling [this full example](http://pastebin.com/wWRQjaqD) on JDK 1.8.0_20, 1.7.0_67 and 1.6.0_45 and they all worked fine. You probably need a more complex example to confuse the compiler.
What is wrong with overriding finalize? C# for example, its pretty common to override finalize for one reason or another.
Or G1 will come to your house and "collect" you.
It's also common in Java code, but things break rather spectacularly if you have large heaps or high allocation rates of finalizable objects.
But in what sense maximizing the scope of variables makes something easier to decipher? How earlier declaration of variable makes it easier to think/keep-track about/of anything? I see only how it makes things harder. Also, I've checked out Joshua Bloch - Effective Java, "Item 45: Minimize the scope of local variables" and he has even more arguments: &gt; Older programming languages, such as C, mandated that local variables must be declared at the head of a block, and some programmers continue to do this out of habit. It’s a habit worth breaking. As a gentle reminder, Java lets you declare variables anywhere a statement is legal. &gt; The most powerful technique for minimizing the scope of a local variable is to declare it where it is first used. If a variable is declared before it is used, it’s just clutter—one more thing to distract the reader who is trying to figure out what the program does. By the time the variable is used, the reader might not remember the variable’s type or initial value. &gt; Declaring a local variable prematurely can cause its scope not only to extend too early, but also to end too late. The scope of a local variable extends from the point where it is declared to the end of the enclosing block. If a variable is declared outside of the block in which it is used, it remains visible after the program exits that block. If a variable is used accidentally before or after its region of intended use, the consequences can be disastrous.
Calling LMAX "anonymous hippies" has really blown your troll cover. They're a company that's building software for exchanges/markets – I'd be hard-pressed to find a more pro-capitalistic company. Also the fact that there is a .net port (as well as numerous ports to other languages) should tell you that there is some demand for high performance low latency inter thread communication. Just because you don't need it doesn't mean no one does. TL;DR: Use C# and make great things. Then come back and boast about them. Otherwise troll off.
if i am interviewing i might ask a question like that to probe for holes in their knowledge and confusion in their understanding. holes aren't a bad thing - we all have to start learning somewhere - as long as you at least have the basics down pat. sometimes i'll get an answer that's incomplete and confused the terms (swapping final for finally, and not knowing what "finally" is for), so later i'll ask a question like "if I have a variable, say `int life = 42`, how would I ensure that I don't accidentally change the value?" or "how do I prevent a class from being subclassed?". if they've run across the `final` keyword at all it will usually spark a dear-in-the-headlights moment where they realize they used the wrong term previously. they'll correct their previous usage and we go on. if they don't know, that's fine too (it's pretty rare to see usage of `final` at entry level), I just want to be sure they understand what they are talking about with the previous answers of try, catch, and "final". if they express doubt the correctness of their previous answers that's a good thing - chances are that's the type of person who will be googling for the correct answer as soon as they are out of the building. but if they completely confuse concepts then that's when I "take serious points off" so to speak. It's hard for me to come up with examples or remember things of this nature that I've heard; I'm not very good at synthesizing knowledge fusion.
Full ack. Note however that a good range of applications can get away with allocating most of the needed memory up front and thus making GC pauses very rare. Also sun.misc.Unsafe allows manual off-heap memory management for the rare cases where you absolutely don't want to GC stuff.
Actually, not. In functional collection pipelines args are usually primitives or short lambdas, and it's just ok to see such a lambda or string or number literal as an argument to the map/filter/reduce/range/etc, but if there is some multiline lambda or another pipeline or heavy instantiation expression, result of which you even know how to name, it's better to factor it out like this.
Except that you can change collections marked as final. Not really immutable. 
&gt;But in what sense maximizing the scope of variables makes something easier to decipher? This comes down to the developer and organizational (company) standards. For me, declaring variables at the top of a scope makes it easier to understand the method or class containing those variables. Sometimes an organization will require its developers to follow a similar standard. And Joshua's point is completely subjective. What is considered 'clutter' to Joshua might be considered helpful to someone else. To extend my previous point, if a method has so many variables that you can't follow the variables, then it's probably worth refactoring into smaller methods. 
Oddly, the Java library itself depends on finalization to close memory mapped files: http://bugs.java.com/view_bug.do?bug_id=4724038 There are security/performance reasons they do this, but it effectively means that you can't determinstically close a memory mapped file. (Which means you can't determinstically delete a file on platforms like Windows, where you can't delete open files.)
Browse around GitHub.
The reference *value* is final, not the object referenced. If you need a read-only collection as well Guava provides immutable collections.
No more permgen in Java 8. Nowhere to run, nowhere to hide.
It's easy enough to pull that out in a conversation. I'm usually more concerned about their people skills and their developer skill than their deep knowledge of JVM minutiae. Final's probably the easier one to ask about, but finally has some really wacky gotchas that you aren't going to know about unless you have significant Java experience pre 1.7. I wouldn't expect anyone short of a guru to be able to handle "finalize" on a test. Like I said, it's a great Java Trivia question. It's fun to throw it out there to start a conversation, but as a written test question? It's awful. It didn't help that they threw in a logic puzzle (the one about finding the one slightly heavier object in the group of 9...). Which usually just shows off how clever the interview test writer is, or how many logic puzzles the interviewee has seen. These were the guys who had written their own servlet framework that output XML and used a single XSLT file to convert the servlet responses of every page into html. No, the xml was NOT used as a service response. This was only 8 years ago.
You do not need a virtualbox and debian for java environment. Java can run on pretty much any popular OS. I also suggest you take a look at Intellij - it is a robust IDE for many languages, java included. As far as eclipse/intellij, theyre both written in java and runs smoothly on mac, windows and linux with x
I mean it doesn't really take all that long - if do it yourself, get things set up exactly how you like them, and then save your own image if you want to do it again without the setup. That being said I remember there being a service to do that for you but I can't remember the name of it for the life of me. EDIT: I was thinking of Vagrant: https://www.vagrantup.com/ Haven't used it myself but I think it might give you what you want.
I just wish we could get rid of Object altogether. It literally provides no useful functionality and it makes objects bloated. Having one master super type is antithetical to the idea of object-oriented programming. Do we really believe that there are operations that apply to every set of data, no matter the contents or the context? Given the implementation of Object, the answer is pretty clearly no.
&gt; also worth mentioning is you have no guarantee ... That list can be extended quite a bit, like finalizers running in a different thread, no way to deal with exceptions exiting the finalizer, no guaranteed order in which finalizers are executed, ... Java has PhantomReference as replacement for it just to give developers some actual control over what is going on. 
Having one master super type is actually fundamental to message passing programming, because of its pi-calculus basis. You should read up on Smalltalk if you have the time. In Smalltalk there is no 'extends' keyword. To create a class, you send a message to the Super object that you want to subclass it, and it will return a class object in return. There is no new keyword either. To create new instances of that class, send a message to that class object that you want a new instance.
Why not, you know... Just write it yourself?
You cannot mark an object as final, you can only have final variables and fields, which hold either primitive type values or references.
i see you're from the "re-invent the wheel" camp. how's that bubble-sort working out for you?
Is this /r/programminghumor?
try troubleshooting using [this guide from netbeans](http://wiki.netbeans.org/FaqSlowNetBeans). also you did not specified the operation system, netbeans and java versions. maybe increasing the Xms and limiting the Xmx could help. [read about it here](https://performance.netbeans.org/howto/jvmswitches/)
You really have found yourself thinking 'Boy, I'm glad Object exists. It really helped me out today'? You really can't be using it at all if your program is remotely typesafe.
I just picked the biggest two, most likely to be "the one reason you don't want to override finalize"; but yeah, you are right. there are a host of problems with them and a lot of them are subtle, you won't find out it was a bad idea until much much later when it is extremely costly to rearchitect your application. The references are pretty cool, but wrapping your head around how to use them can be a bit daunting for even intermediate programmers. But phantom references do solve a lot of the subtle problems and the first big one that i mentioned - it is impossible to "ressurect" the object from a phantom reference because `PhantomReference.get()` *always returns null* (yay!). I believe that it is still pretty much unordered however. But it is a bit easier to see a correct solution to that problem once you've gone through implementing all the required infrastructure to deal with references. And it's easier to write tests for it.
&gt;You really have found yourself thinking 'Boy, I'm glad Object exists. It really helped me out today'? Yes. Having every object have a toString() and hashcode() fuction is nice. It also allows for generitcs to exist which is extremely useful. &gt; You really can't be using it at all if your program is remotely typesafe. What? Are you just learning Java or are you just listening to one of your friends shit on Java since it is cool to do? Do you cast all your variables to objects or something? I don't understand why you think Java isn't type safe. You have to go out of your way to fuck up your variables.
Have you ever really found the default implementation of toString to be useful? It would be great if there were a StringRepresentable interface that had toString on it - then you would know/be able to specify that toString actually does something other than print out the memory address. Hashcode is similar, but worse. It makes it look like things are hashable but they really aren't, unless you override *both* hashCode and equals. Again, a Hashable interface is a great idea, but the default implementation is pointless. Think about how many times you have used hashCode without overriding it. As to your point about type safety - you have it exactly backwards . I don't cast in my programs, which means that I will never have a reference to Object, because you can't possibly do anything useful with an Object. The one exception is using it as a lock, which is further evidence of Object's brokenness because there is no earthly reason to include the whole monitor pattern on every object. There should have been (and now are) separate objects for locking. The synchronized keyword is syntactic sugar at best and a source of deadlock at worse because you never know who is grabbing your lock. 
where i work they have techies like me do technical interviews (and there are a some like "what challenge have you faced in the past and how did you troubleshoot / fix it" questions) and someone else handles the "soft skills" questions to see how you would work in a team, etc. As a written question, one sentence apiece should be sufficient - anything more (like subtleties) and you probably don't want to work there anyway....
[Collections.unmodifiableCollection](http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#unmodifiableCollection%28java.util.Collection%29) and variants are often good enough.
I am not really sure what you are asking, however, you do need a class and a method to put that code in. public class ClassName { public static void main (String[] args) { size = 18; size=size+12; size++; size=size*4; size=size/4; } } /r/learnprogramming is a useful subreddit.
&gt; Think about how many times you have used hashCode without overriding it. I, for one, rarely overwrite the hash code method. It's pretty rare that memory address isn't sufficient and utterly obvious when it's needed from my experience. Requiring an interface and custom implementation to be able to just put your data in a collection is silly. Same goes for toString, its default implementation isn't *as* useful, but it's still useful to be able to convert *anything* by default to a string and at the very least have a visual null check when debugging. 
Sure, if you don't mind having to wrap an existing modifiable collection, which could change and update the unmodifiable view of it. People often don't understand the distinction between the two, though. Unmodifiable collections are for returning an unmodifiable view of an externally inaccessible (private/protected), but mutable, collection as the result of an API call. Immutable collections are static/constant after instantiation from any context.
&gt; Or, can you name any part of the ecosystem that helps you achieve what async and await provide in C#, making asynchrony practically transparent? The @Asynchronous annotation, that was available in standard Java long before async made it into C#. 
I'll seek refuge in ~~Meat~~Metaspace then!
You still added nothing to the discussion but anti Open Source FUD, which doesn't exactly improve the discussion's quality, let alone your image in this community (I mean r/java of course). I can only repeat: If you really love creating great or small things with C#, by all means do so, and come back to boast about them. Otherwise you're coming empty-handed, as just another C# troll on r/java.
I'm not llogiq, but you really love to talk about things you have very little knowledge about, don't you? &gt; So far, no one has been able to show me why/how the alleged "huge ecosystem" of java is really an advantage for the everyday developer. Are you genuinely dumb? You're practically answering your own question. In case you haven't grasped it yet, here it is in plain text: with the large variety of libraries available, the advantage to the 'everyday developer' is that it means they can surely find a library for their specific need, tweak it to how they like it (if they need to), or perhaps contribute (if they want to). &gt; In fact, I use third party libraries in my projects, but these are commercial products from recognized companies rather than some random 1-day project made by some unknown open source fanboy in a sunday afternoon. I'd hardly call Guava a "random 1-day project", and I wouldn't really attribute the term 'open-source fanboy' to Google. TL;DR: "I'm going to talk out my ass about things I know very little about." Also, judging by your post history, why are you in /r/java if you hate the language so much? Seems to me like you're just fishing for attention.
&gt; BTW, can you show me which of your "large variety of libraries available" in java provide the convenience you get in C# from async/await? No, because Java doesn't have async/await (not properly). &gt; As a matter of fact, a huge number of whatever third party libraries you consider a "huge ecosystem" in java have an equivalent built right into the .Net Framework, which is why in .Net people don't depend that much on third party code, because the tools are right there. Can you show me which "commercial products from recognised companies" provide a completely cross-platform desktop GUI framework that runs on all major platforms? See? Both languages do good at both things. I work with C# and Java, and I enjoy both the languages - I don't prefer neither. So get off your high horse. &gt; I'm not really willing to spend my time learning how to use other people's code I take it you like reinventing the wheel then?
&gt; By now there's already Xamarin.Forms which supports XAML and MVVM and goes really NATIVE on all mobile platforms, I will agree that the native widgets mapping is a nice feature; I've no comment on XAML and MVVM because I've used neither, so I can't really say if it's as much of a benefit as you supposedly claim. &gt; Granted, however OSX wasn't/isn't one of my targets so I don't really give a damn about that. That's cool and all, but don't go dismissing something just because it doesn't suit your requirements.
Poor choice of words on my part, edited my previous post.
Hi Kevin! 
Which JDK are you using? I've had trouble with Netbeans and some versions of the JDK. If I recall 7u45 gave me trouble. Maybe try updating the JDK to a later release (same version) or even just use JDK8.
I've been playing around a lot with Spring Social and it's really easy to get up and running but you are kinda forced into their system. Basically all you get is a Spring Bean that holds all your connections in an Array. All the OAuth stuff is taken care for you and you don't need to worry about graph API. You'll have to use Spring MVC though which may not work for you. I basically just write a RESTful Web Service and expose a cleaner API using Spring MVC + Spring Social and just call that API using what ever tools I want (Angular atm).
you were looking for segue. btw, my mind is blanking, what is the implication with final on the JIT? 
If you're dead set on going this route, use somthing like PhantomJS. It's a javascript-programmable webkit. It'll make your life easier. Still, the api is the better route.
Netbeans ide is itself written in java, and runs in the JVM. A compiler is one of the things that needs C pointer arithmetic for computation heavy tasks. Another C based IDE would be faster.
I would *strongly recommend* you look into WebRTC as your solution for this. It's not trivial to set up, but browser support is there and when applicable, it avoids putting extra strain on your server by going peer-to-peer via stun, and *can* (but doesn't have to) fallback to turn relay (passing the data across a server). And it's probably better than writing an RTMP framework. If you need to exercise server control over the client in real time, despite them having a p2p connection, you can use WebSockets (socket.io would be great here) from both clients to your server. Then you can fire events in real time to your clients. In fact, with webRtc I believe this is the signalling process.
There is no error. I left it open for over 15 minutes and it's still "running" 
He doesn't say what he is trying to do here. WebRTC is a good solution for peer to peer communication but for a typical webcam situation you need a server to do some recording, multi-plexing, and content distribution. I haven't seen a good server side framework for this in WebRTC yet. Let me know if you know of one. Red5 is probably the best open solution for any RTMP communications. It is at it's core a Spring project so you don't have to run it as a dedicated server. It can be packaged as a .war file and deployed to your server just like anything else, but it requires a bit of work. I would recommend building from source since their latest 'release' is way behind their source.
Are you sure there's an error? See that `stdio.readLine()`? That means the program is waiting for you type something.
What else is on the machine? Almost certainly contention of some kind.
Thank you, I'll look into it.
If your lab machine uses a solid state drive instead of a hard drive, that can explain the discrepancy. Additionally, the IDE itself may need some memory usage tuning. Look up how to set Netbeans min/max memory use and set it higher to see if that speeds things up. After all, you would like it to use more of that 6 GB RAM and not just swap like mad to work with the meager default settings it may be set up with by default. Also, you might just want to ask someone in your lab if they have ideas on why Netbeans is so slow on your machine. A little flattery here might go a long ways, as in: "I notice you guys got it to load wicked fast on these machines, so I was hoping you'd have some tips for me to use on my machine." Finally, keep in mind that your laptop may be running a crap ton of other stuff already. It might pay to check out what's going on in your machine with something like Process Explorer (assuming Windows is your OS) to get a feel for what might be interfering.
Like? Not saying you're wrong, but it's a bit off-topic and not too useful. Also, if the OP's class requires Netbeans, then your advice really doesn't work.
Guava is one. Parts are very complicated but much of it is simple, elegant design. Look at the collect package in particular: ImmutableList, Multiset and Multimap, FluentIterable, etc.
Your post with your comment have a difference of ~2 hours. In that time you could install VirtualBox, Debian, Java, Eclipse and Maven, and have the first Hello World program running...
It's open source - download the source, read it and pester the creator with questions :-)
This is your third submission of your library within a day. All of them are still on the first page.
Also try attempting some exercises on http://www.reddit.com/r/dailyprogrammer/ - I found this page pretty useful while I was learning. There are also many good tutorials on youtube that I found more useful than books! 
This looks cool ! which logging backends does it support ?
I would pay to see that! :D 
Whoops, late replying.. It tells the JIT the same implications. This means that it can do things like hoist out of loops, replace with literals, or just remove it altogether. I'm over simplifying, but if you want more examples you could look at some of the things that the LLVM optimizer does. 
I like the page, but hate the www. in front of it. Just javais.cool would be so much cooler!
There are two Java libraries serving different purposes: - [Pluggable CRUD administration UI library for web applications](http://lightadmin.org) - [Pluggable UI library for Runtime Logging Configuration](http://la-team.github.io/light-logging-configurer/) Hopefully, they will save your time and efforts. Cheers! 
I'm guessing it will make future try... catch wrapping easier. I'd like to take this time to specifically bitch about java making us do this for try... catch. I'd really have liked a construct to enable try...catch for a single line of code that kept the variable/statement in scope for the catch clauses File homeDirectory = new File(System.getProperty("user.home") catch (InvalidPathException ipe) println "bad file path"; catch (OutOfDiskSpace oods) println "no disk space left"; catch (PermissionException pe) println "File permissions: "+homeDirectory.getPermissions(); ... those are obviously fake exceptions and some false API calls, but I think that's a lot more compact and would encourage better error checking and handling 
What is the status of Spring-boot JAR packaging? In progress? Needs help?
Yeah, I know. That part can't be done later. I'm more concerned with how I'm going to access the AppiumDriver instance from outside of this class. Should I use an interface?
That's the name of the blog post. Not the poster's fault. 
woah, dude this website just copy pasted from vogella http://www.vogella.com/tutorials/JavaConcurrency/article.html Edit: looks like every para is copied from one other site..haha interesting.
Thank you for the thorough answer. That helped explain a lot of what was confusing me.
I believe the time complexity of the regex features is mostly dependent on the given regex. Some regexes could incur a O(n²) penalty, while some could have an exponential complexity
Already works, here is an [example](https://github.com/la-team/lightadmin-springboot). Give it a try and feel free to ask me any questions if any :) Help in spreading the word is needed to be honest. It's not that hard to create something useful, comparing to the process of making people aware it exists! 
I was specifically asking about this issue mentioned here - http://lightadmin.org/getting-started/spring-boot/ "Please note that currently LightAdmin works for Spring Boot applications with traditional WAR packaging." org.apache.jasper.JasperException: /views/layout/internal-layout.jsp (line: 4, column: 62) Unable to read TLD "META-INF/c.tld" from JAR file "jar:file:/app-1.0-SNAPSHOT.jar!/lib/jstl-impl-1.2.jar": java.io.IOException: Unable to open root Jar file 'jar:file:/app-1.0-SNAPSHOT.jar' 
Shame on me! I've fixed the issue itself and created a usage example, but forgot to update a documentation. I'll fix it. Regarding your problem, lets move our conversation to [GitHub Issues](https://github.com/la-team/light-admin/issues) - just create a ticket and I'll do my best to help you.
I never have the same environment quite the same twice. If a PC I'm using dies on me, I set up my environment re installing all my tools. This process usually involves upgrading to the latest releases of all my software as well, as I go to each individual website for downloads. I like the idea of having an image and instant deployment of a new environment ready to go, but at the same time I get personal satisfaction from "crafting" my desktop just the way I like it from "scratch". With each iteration I change how I do things.
In Lua you need to do this when you have a self-referential local function. local fib; fib = function (n) if n &lt; 2 then return 1 end return fib(n - 2) + fib(n - 1) end Syntactic sugar alternative: local function fib(n) if n &lt; 2 then return 1 end return fib(n - 2) + fib(n - 1) end
He actually talks about how Java 8 was given to developers early to have time for testing and certification, and as a result of that it's now ready for **end-users**.
Love this format, very nice indeed!
Java 8? Hell we just upgraded to Java 6 and IE 10.
I would argue No. It has the same warts as Java and only superficial improvements. After all, it was created as a Java clone. - Same nullable Types - Same type of VM (but lower performance) - no true safety - no true immutability - much more platform dependent - No proper community process - much much fewer rock solid libraries Its actually kind of sad, that all the effort is more or less duplicated for almost no advancement. MS Research is doing a lot of nice things, but c# will not benefit due to backwards compatibility considerations. Choose what you like, but claims of either superiority are unfounded lies. 
Lines like this aren't conditional. The first line will either execute once (if c != b and c != a) or it will execute infinitely (which is probably what is happening to you. while ((c == b) || (c==a)); c = rn.nextInt(53) + 1; You should use {} to create blocks for ALL loops, ifs, etc (even though it is optional if the block only contains a single line). This loop would actually change the condition variable... yours won't. while ((c == b) || (c == a)) { // add curly bracket, remove semicolon c = rn.nextInt(53) + 1; } // add right curly bracket You have this issue many times in the pasted code. 
Any String is an object. How would you call a method on any other object. Have a look here for the specific method which will produce the requested transformation (i.e. changing chars to uppercase). http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#method_summary P.S. You may want to check the number of "mad"'s you have in your literal... I'm a professor and I would certainly deduct points for it.
Thanks for the quick reply! Would System.out.println(movieName.toUpperCase()); also work? Also do you have any insight into the question at line 7?
After watching a bunch of the JVM Language Summit videos it would almost seem that Java 8 is not yet for developers either - at least, it would seem the performance of lamdba forms leaves a lot to be desired - this may have been more in the extreme with some of the talks presented - but I wonder if that's not going to be a larger issue going forward, when more and more folk look to adopt JDK8.
Thanks for the reply, I'm looking into that link now, much easier to look through that then the textbook I've got here! Thanks for catching that, looking back and forth between the question and my answer must've slipped me up!
The line that you have there would print the uppercase version of the string to the console without mutating the original variable. So System.out.println(movieName.toUpperCase()); will print out IT'S A MAD, MAD, MAD WORLD to the console while System.out.println(movieName) will print It's a Mad, Mad, Mad World The question dictates that you assign it to a variable, upperCase seems to make the most sense here as you've already declared it. I encourage you to use the docs to find the answer to number 7.... http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#method_summary The method you want is at the very top of the list. Feel free to post back what you think it should be if you want some double checking. 
Best way for you to learn is to try things out. Get an IDE which has autocomplete and see what options are available to you
If you're going to do this a lot and share it with other devs.. look into vagrant. 
Thanks for your help I've gotten all of them done, except the indexOf problem (9) Here is what I have firstLowerCaseA = movieName.indexOf(a); but it's saying that I'm wrong, looking at the oracle document it says that in the indexOf parenthesis there should be a char, well I put a in and my IDE is saying it can't find the symbol?
because Java thinks the "a" in your statement is a variable name. Put it in single quotes to make it a char. For instance: firstLowerCaseA = movieName.indexOf('a');
There we go! Thank you!!!!!
What does it do?
Lwjgl is overkill for something like drawing a graph every now and then. Consider using awt's graphics2d instead. Oracle has a nice tutorial [here](http://docs.oracle.com/javase/tutorial/2d). EDIT: fixed link. 
It fixed some bugs. 
here's an example of how to do y=x^2, though if all you to do is have a computer graph stuff for you look at www.wolframalpha.com import java.awt.geom.Point2D; import java.util.ArrayList; import java.util.List; import java.util.logging.Level; import java.util.logging.Logger; import org.lwjgl.LWJGLException; import org.lwjgl.opengl.Display; import org.lwjgl.opengl.DisplayMode; import org.lwjgl.opengl.GL11; public class Grapher { List&lt;Point2D.Float&gt; points; private Grapher(List&lt;Point2D.Float&gt; points) { this.points = points; } public void start() { try { Display.setDisplayMode(new DisplayMode(800, 600)); Display.create(); } catch (LWJGLException e) { Logger.getLogger(Grapher.class.getName()).log(Level.SEVERE, null, e); System.exit(0); } // init OpenGL GL11.glMatrixMode(GL11.GL_PROJECTION); GL11.glLoadIdentity(); GL11.glOrtho(0, 800, 0, 600, 1, -1); GL11.glMatrixMode(GL11.GL_MODELVIEW); while (!Display.isCloseRequested()) { // Clear the screen and depth buffer GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT); //set Translation and scale GL11.glMatrixMode(GL11.GL_MODELVIEW); GL11.glLoadIdentity(); GL11.glTranslatef(400f, 300f, 0f); GL11.glScalef(100f, 100f, 1f); // set the color of the graph(R,G,B,A) GL11.glColor3f(0.5f, 0.5f, 1.0f); // draw lines GL11.glBegin(GL11.GL_LINE_STRIP); for (Point2D.Float point : points) { GL11.glVertex2f(point.x, point.y); } GL11.glEnd(); Display.update(); Display.sync(10); } Display.destroy(); } public static void main(String[] args) { ArrayList&lt;Point2D.Float&gt; points = new ArrayList&lt;&gt;(1000); for (float x = -5; x &lt; 5; x+=.01) { points.add(new Point2D.Float(x, x*x));//graphs y=x^2 } Grapher grapher = new Grapher(points); grapher.start(); } }
Scalable means, in essence, the application can be configured such that it will gracefully handle increasing load without resulting in a negative user experience. This might mean that it is architected to bring on board additional services automatically, it might mean it is aware of caching or other techniques, or that it can be quickly deployed to new, loadbalanced servers on-demand, and transparently without downtime. Saying "I should be able to add more cores &amp; more RAM when needed" undersells it and a lot of scalability and availability issues aren't solved with more cores and more RAM. It's a large topic, which is why people will go off on tangents and mumbo-jumbo. Applications also need to worry about things like bottlenecks on resources or in a multi-threaded server, contention for things. A super fast server that can handle 100,000 requests per second normally, but where each request has to get a lock on a specific file and update a value within it has a bottleneck that limits the scalability of the application. Research things like caching (services like memcached and the like), caching persistence providers, so-called "NoSQL" key/value stores for indexes, thread pools, low latency IO, content delivery networks, on-demand "elastic" servers etc. 
Yes, that's why I said "should use... even though it is optional...". However, I think it's pretty well accepted that not using curly braces around all blocks is poor practice. Also, [checkstyle](http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces), [pmd](http://pmd.sourceforge.net/pmd-4.3/rules/braces.html), and the [google style guide](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.1.1-braces-always-used) all require braces. It isn't required by the language, and no one is going to arrest you for it or anything, but you *should* always use braces around all loops and conditional statements. Personally, every job I have ever had programing in Java has used static analysis tools like pmd or checkstyle where *not* using the curly braces would result in warnings or (at my current job) errors and will break the build (no warnings or errors are allowed on any commit).
2 areas. Vertical scaling - adding more resources to a node (or application) in a system. For example memory or processor or IO. Now days applications can be scaled massively thanks to virtualisation and certain server architectures like Azul. Horizontal scaling - Adding more nodes to a system. In Javas case, JVM's in a managed server deployment. Managed servers must have access to shared spaces for storage and caching. Load can be distributed across managed servers by either software load balancers, hardware load balancers or queues/resource pools. In terms of application design anexample of a well designed application that can horizontally scale would be one that does not require sticky sessions - is sessionless, uses RESTful architecture or persists data to a cache or database.
Have a look at the /r/Javahelp wiki. There are plenty tutorials listed. In particular, I can recommend the free [Java for Complete Beginners](https://www.udemy.com/java-tutorial) tutorial on Udemy.com Don't forget the [Oracle tutorials](http://docs.oracle.com/javase/tutorial/) On Youtube, have a look at [Derek Banas' channel](https://www.youtube.com/channel/UCwRXb5dUK4cvsHbx-rGzSgw). He has many tutorials for many languages on many levels from beginner up. Starting with Eclipse might be a bit difficult because it has quite a learning curve, but it's quite a good way still since it is one of the tools used in professional environments. Other popular IDEs are [Netbeans](https://netbeans.org/) and [IntelliJ](http://www.jetbrains.com/idea/) - the community edition is free. Don't use ninite to update your development system. Download the [JDK - I recommend JDK 7](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) and [Eclipse - Lunar - the latest edition](http://eclipse.org/downloads/packages/eclipse-ide-java-developers/lunar) or [Eclipse Kepler - the previous edition - widely used](http://eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr2) from the original sources.
Thank you! As you might have seen, I publish a new issue every monday (CEST) ;-)
Which metrics are bad? From what limited research I have done it looks as though lambdas are at least as performant as anonymous inner classes, but also show increases in throughput for forEach over iterators and loops? Admittedly that was looking at slides, not the presentation, here : http://www.oracle.com/technetwork/java/jvmls2013kuksen-2014088.pdf&amp;cd=1&amp;ved=0CB0QFjAA&amp;usg=AFQjCNH6rpH0xZTf7CzXPOu_DTp0BxuqNQ&amp;sig2=c3jaLnxDpPAhO6669M9RXw so I expect your info is better
Hey Bike, It seems you're at the beginning of your programming career which is awesome. Something that will really help you out in the future is getting used to reading the Java API, which is essentially a documentation of java objects and the methods/attributes they have. Here is the one for string: http://docs.oracle.com/javase/7/docs/api/java/lang/String.html I'm sure it will help you out with your homework, if you look down you will see some pretty helpful methods such as toUpperCase() and toLowerCase(). Reading the API on objects your using is a great programming practice and will save you a ton of time trying to create a method that is already in a default package. You can find API's for most objects and constructs within java, when you start getting into arrays, ArrayLists, HashMaps and HashSets you will be glad you're familiar with reading API's! 
I think you're conflating lambdas (the flagship java 8 language feature) with lambda forms (the internal facility to implement invokedynamic). You wouldn't be the first to do so, for obvious reasons. Lambda forms have some known issues and while they are being actively improved for 8u40 to simplify and improve performance of, say, nashorn, they are minimally involved and hardly of performance concern to lambdas currently.
&gt; a lot of scalability and availability issues aren't solved with more cores and more RAM. Strange, it's what StackOverflow does, and it probably handles much more load and traffic than all those millions of (hipster) sites out there that put horizontal scalability before everything because they every one of those million sites is utterly convinced they'll be the next Twitter tomorrow.
My advice? * If you are in one of the working groups, aim higher. * Otherwise, keep doing awesome stuff with Java and don't care too much before Java 9 actually comes out. Then hold off a bit until all the bugs are ironed out and then make the switch. Don't be too disheartened if your favorite feature didn't make it.
Ignoring the fact that this looks like a homework assignment (you should try to get the help of classmates or your tutor really), I don't think you've provided enough information on the robot and it's API/architecture for us to guess why your online makers marks your code as wrong. I assume you just missed out the last curly brace from the screenshot and the code itself makes sense. Did you have to submit snippets or the whole Java file for the Maze_Solver class? Going back to what I said about not enough information, a relevant example; when I did a robotics module at University (using something called Aria) the library the robots code was built off of would control the iteration itself (that is, it would run your code every x milliseconds), so using a loop would cause it to freeze in a command and time out, I would assume this is not an issue for you though as it looks like a simple architecture, just it illustrates a simple problem students had from not understanding the architecture, one or two submitted online questions to forums that got little attention or annoyed responses. 
Imagine you have to do a SQL query on a table with billions of rows. Maybe it has to join on a bunch of other tables too. Doing a straight SQL query might take a long time to get a result, but your users want it immediately. "Big data" and "caching" are looking to solve that problem. There are many strategies and platforms, but the general idea is that you can speed up those queries by doing things like storing the data across many nodes and have all the nodes search their own subset of the data for the result (a distributed system) and also precomputing some results ahead of time and storing them in memory for fast access (caching). One of the more up and coming and popular Java based tools to help you solve big data problems is http://hazelcast.org. Reading up on that will probably give you a lot more context and ideas.
Spring, Java EE, Tapestry, ... There is plenty but focus mostly on web technologies which is pretty much what Java is used for these days. But more important, keep learning even after uni ;)
Wish Project Valhalla would make it in :(
Learn Java EE. Specifically CDI and JSF.
What resources would you suggest to begin with Java EE? I use spring a bunch but I could never find any decent resources on building a project with EE
Why would you want to pretend you know a lot about clustering, caching, and code and database query optimization when you don't? I doubt you will be able to amass any significant knowledge in one evening. I would be honest about what I know and what I don't. In that case they can offer me the job if they believe I have sufficient knowledge, or that I can pick up the needed knowledge quickly. If they however assess that they need one with existing deep knowledge about it, then I avoid landing a job where I won't be able to perform to the level expected.
And JPA2, Servlets 3, JAX-RS, and JAX-WS.
It kind of sort of is. Stanford open sourced their 100 level curriculum a few years ago and this is part of it.
I'm using the JDK9 early access builds. An insane amount of work is being done, and things are already very stable. I just hope they fix the insanely slow Nashorn startup time from java8 (often several minutes). Still slow in jdk9u30 :-(
Of course I do not want to show up and pretend like I know everything on these subjects, this would only hurt myself in the long run anyway (as you said I would not be able to perform to the expected level). But I also do not want to show up and be absolutely clueless either. I would like to read up about some basic concepts, make sure I understand them, and then mention this during the interview. I could explain I did my homework, prior to the interview, but do not have proper experience/knowledge with these kind of technologies. Just to be prepared a little bit, so in case I do like the job, that I don't come off as a complete idiot. Hope that makes sense. :)
It's only proposed for now. I think it's a bit much to ask to go from proposal to implementation on the timeline for Java 9.
Oh sure, I know! I've been following the mailing list. But, you know, I'm a dreamer. ;)
This is the way to go. I've held a few interviews and for me the most important thing is if the person can learn what he needs in a reasonable time frame. Knowledge of certain techniques or frameworks is secondary.
Java 9 would really need a lombok-like JSR... All modern languages have properties now, hashcode/equals/toString method generation is a must-have too
I would start getting a good knowledge of the Collection framework, Jdbc and multi threading. The external api varies depending on the sector. but spring is widely use and spring mvc for web services. 
&gt; I said "A lot of scalability issues aren't solved with more cores". But very few websites will ever run into scalability issues when using sane hardware, programming languages and yes design. Scalability is for a large part an artifical problem created by using severely underpowered servers and ultra slow languages. It gives the engineers a false sense of greatness. "OMG, we're so populair! We're web scale! We need to scale out!" While in reality the load they're getting could have easily been handled by a single box. 
There's a huge amount of resources here: https://javaee7.zeef.com Check out the tab in the top left corner to go to a second page which has even more resources (https://javaee7.zeef.com/abhishek.gupta).
JSON API - Thank. God. EDIT: I may have misunderstood what this is really offering. I'll let you know if I did. Ok, I think I'm wrong here. I thought that what was being added to Java was an ability to handle object literals with accessible properties. Python and JavaScript programmers will be familiar with this: { "Houses": [ {"Rooms": [ {"name": "living room", "width": 20, "height" : 20}, {"name": "kitchen", "width": 40, "height" : 40} ], }, {...}, {...} ] } JSON objects like this are accessible with a straightforward notation such as object.houses[0].rooms[0].name // "living room" There would be no need for this: HashMap&lt;String,Object&gt; The collections would be literals -&gt; {foo:"bar"} .foo == bar //true This is not what the "light-weight JSON API" is offering. This is simply the same thing as the other older JSON libraries that you can find in the comments below, it's just that now its' native and supports Java 8 streaming, It's still going to have a builder interface and have to fit into an object inheritance model, and all that. Literals are much less verbose, and are more intuitive IMO, but I get why you wouldn't want to create a whole new datatype completely outside of the java inheritance tree, just to do json parsing. 
I'd definitely start by looking at some implementations of primitive collections libraries that use code generation, such as trove.
Note: around 55% of the talks are in english. Use the filter on the right side and click "english" to remove all the norwegian talks :)
Java EE 7 has this already (javax.json, if I remember correctly), I wonder if the API in Java SE 9 will look similar.
&gt; But very few websites will ever run into scalability issues when using sane hardware, programming languages and yes design. I agree completely, nothing I've said contradicts that. The original poster was asking about scalability in a general sense for an interview. The term is broad and difficult to encapsulate in a Reddit response. A well designed and implemented site, especially one on a tried and true framework or technology stack will generally scale fine for the load it will honestly see, and will generally benefit very highly from new hardware or things like switching their database system to SSD. Absolutely too many people think they are going to be the next Twitter and throw in technology they don't need; that's essentially premature optimization. But without a specific problem space being defined it's good for the OP to research, at least at a high level, the different types of scaling problems and the ways they can be solved. Throwing more hardware at it works if all else works fine and you have enough load to peg your current servers. Throwing more hardware won't work if you have some flaw in your design or implementation that doesn't change due to availability of CPU power or other resources. You can improve response time by having things placed in a CDN, which is not the same as tossing on a bigger server either. The topic is broad. 
&gt; Java 9 is _attended_ for release in 2016
collection literals ? are they in?
Thank you
Serious Question: Why? There are good JSON libraries compatible back to at least Java 5, what does an API being added to JSE give you that one of these libraries doesn't?
How have I never seen this page?! This is fantastic. Thank you so much!
I just hope we can get a configuration API in Java EE 8, it really sucks when I want to change application settings between environments but I'm stuck repacking a WAR to do so.
Agreed, they should avoid adding these sort of support things to the JDK itself. Look at CORBA, once useful, now almost completely useless, but still part of the JDK spec and therefore must be supported and implemented on all Java platforms. What happends when JSON is no longer relevant? Perhaps they should include a standard JSON jar with the JDK, but not make it part of the central spec. Isn't that how JavaFX is distributed?
I've been doing that with Jackson library. It is disabled by default, but can be enabled with a single line at the time of ObjectMapper initialization. [StackOverflow link](http://stackoverflow.com/questions/2525042/how-to-convert-a-json-string-to-a-mapstring-string-with-jackson-json). Edit: [GSON code](http://stackoverflow.com/a/15943171/456765).
I'm not familiar with the proposed API, but I'm almost certain what you've suggested is not part of it. In order to compile your code, the ValueTree class/interface would either have to have a public array named people, or require significant changes to the Java language to support dynamic properties.
JSON works seamlessly in Javascript, you just take it and you have objects, in Java though you need to parse it with a set of API's, parsing isn't hard, but it is work you need to do. In JS you just parse JSON with eval, something not supported by java.
Lombok is a must for any new Java project. I refuse to code in java without it. The fact that it is not even on the radar for Java 9 is an indication of how little Java coding the Java JDK team must be doing on a daily basis. If they tried Lombok for 24 hours it would be on the top of the JEP list immediately.
Oooooooo, neato!
Right, or it would have to have its very own datatype. Like a dictionary in Python, or an Object in JavaScript, this is what I was imagining was being added. 
Figured it out! 1.0 / n ~~IDK why it wants sig figs but whatevs~~ EDIT: I now know that 1 was an integer, and an integer / an integer returns an integer, so by giving the equation 1.0, you're making part of the equation a double and forcing the equation to return a double. Thanks everyone for the help with both the solution and figuring out why it works.
Consider buying an ad to support Reddit - otherwise your head-hunting submissions are just spam.
n is an int. dividing by an integer is an integer division, not a floating one. hence, 1/2 = 0 (with a remainder of 1)
yep. It assumes 1 is an int so 1.0 / n; forces it to treat 1 as a double and therefore divides correctly. Thanks for the help!
FYI this is a great video that helps explain a bit more of how floating point works: https://www.youtube.com/watch?v=PZRI1IfStY0 (computerphile)
It's generally considered very poor practice to parse JSON with eval - you make yourself more vulnerable to attacks. Doesn't change the fact that it's still easier to work with JSON in JS though!
Yes, those are the same. If you have questions like this, the best way to figure it out is create a program and test it yourself.
Its Over 5000!!!
No it's exactly 6 to three decimal places!
Its Over 5999!!!
sure thing man thanks i wrote a program import java.util.*; //for class Scanner public class Exercise { public static void main(String[] args) { int size=18; size=size+12; size++; size=size*4; size=size/4; System.out.println("total\n"+size); int length=5; length*=2; length*=length; length/=100; System.out.println("total\n"+length); int } } 
Are you asking about compound assignment operators? What's going on here?
First, you really only need mouse pos and tim pos. Second, your first direction.getTheta is useless. Third, what is delta? Either way we have somewhere to start. Defuck your movement, you *really* don't need vectors or angles, or theta, or any of that. "But how can I make the movement even!!1!" Just find the difference between mouse and tim, xdif = mousex - timx ydif = mousey - timy if xdif!=0 timPosX += (speed * ((xdif + ydif)/xdif) if ydif!=0 timPosY += (speed * ((xdif + ydif)/ydif) Outside of that, if your character still goes to the top left, you're setting its position to 0, or your delta is really high and the opposite polarity of xdif and ydif, which is extremely unlikely, but I don't know the code. Just print everything ^^related ^^to ^^it if it's not fixed. You'll find it eventually.
I tried this and he is still going to the top left I think I might be setting its position to 0 but I am not sure what you mean by that. Can you explain? Also I am able to move him just fine with arrow keys. Here is the code if (Mouse.isButtonDown(0)) { double speed = delta * .01f; int mouseX = gc.getInput().getMouseX(); int mouseY = gc.getInput().getMouseY(); double xdif; double ydif; xdif = mouseX - timPositionX; ydif = mouseY - timPositionY; if (xdif!=0) { timPositionX += (speed * ((xdif + ydif)/xdif)); } if (ydif!=0) { timPositionY += (speed * ((xdif + ydif)/ydif)); }
[Insertion sort.](http://en.wikipedia.org/wiki/Insertion_sort)
As the name suggests, it is not a named class, hence the anonymous. button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { // This is an anonymous inner class } }); See how instead of creating a named ActionListener class separately I am using the curly braces to create a new, anonymous instance. This is useful if you have a method that takes a class that may just simply be a method-wrapper, or in an instance where creating a new named class may be very verbose. You can also use it to create a named variable of a class. ActionListener actionListener = new ActionListener() { public void actionPerformed(ActionEvent e) { // This is an anonymous inner class } } I've worked with enterprise code for 3 years now and I see these pop up rarely, usually only in instances I've named above. Otherwise, it is best to actually create a class with a more explicit purpose, something that is named appropriately with proper documentation. 
Fair enough. He didn't give many details, so I just gave the bare basics. Not to sound curt, but he could just google it, and if he has specific questions come here with them. This is a subject that can fill several pages and I/we have no idea what he is looking for.
When I was looking for a VPS provider one had 1.000 GB of storage. I was really confused why they were so precise with that 1GB. What do you write if you need to write 1000.05?
I see this shit all the time in enterprise code, though always in the examples you listed. People get lazy and implement anonymous because they only need one specific function at a time and anonymous is easy.
True. I try to avoid them in code that I end up having to hand off to someone, but in my own personal code it's a cheap shortcut until I can refactor into something more managable. 
There's nothing wrong with it.
Are they sorted already?
&gt; I see this shit all the time in enterprise code, though always in the examples you listed. People get lazy and implement anonymous because they only need one specific function at a time and anonymous is easy. No. People implement simple interfaces this way (like comparators) because it makes perfect sense. If you just need to do a simple sort with a comparator that's not used anywhere else it doesn't make any sense to create a new class for it.
Why do you think using anonymous classes is shit?
To put it succinctly, it's a way to create an ad-hoc class and are usually passed as an argument when a method takes an interface as a parameter. They are useful when you don't want to write a full blown class; you just need some quick functionality for a specific use.
1.000,05
How is your group of numbers stored? If you have e.g. an int[] array, `Arrays.sort(yourArray)` (which as of Java 7 uses a specialized insertion sort for small arrays and Timsort for larger arrays) will be hard to beat.
Just to expand by comparing it to a named class, used for the same purpose. In MyActionListener.java: public class MyActionListener implements ActionListener { public void actionPerformed(ActionEvent e) { // handle event } } in another class: button.addActionListener(new MyActionListener()); or: ActionListener actionListener = new MyActionListener(); button.addActionListener(actionListener);
http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html you should read this description
This is almost never true. Please cite examples if you think otherwise.
Shorter version, w/o lambda boilerplate ;) button.addActionListener(e -&gt; System.out.println("You clicked me!") );
Huh? He's just put the comment within the inner class. Makes perfect sense.
Thanks op, but I don't have the time to go through them all. Do you have any recommendations?
I have done some work with smartcards and PKCS11 but it was a few years ago. Readers were almost proprietary and buggy as shit. Cards themselves were also almost proprietary and behaved differently between manufacturers. We had to write everything in a signed applet. I hated it. For a more modern day example look at [this](http://nelenkov.blogspot.com.au/2013/10/signing-email-with-nfc-smart-card.html) 
Let's break it down into the components of the name. A class is, well, a class. It's a collection of fields and methods, and can extend other classes and interfaces. It's the basic building block of Java code. An Inner class is a class that is defined as a member of another class. There's nothing that stops you doing this, and it's very useful on occasions to keep your code together like this. What's more, a non-static Inner class actually has access to the state of the class it's inside, including private methods and fields. An anonymous class is literally a class that doesn't have a name. When you write an anonymous class, the compiler will automatically generate a name for it on the fly, because all Classes need to have a name, but you don't need to specify it. There's no way to write a top-level anonymous class - what would be the point? Therefore, and Anonymous Inner Class is a class that is defined inside of another class and not given a name. Because of some of the restrictions, the only way that it makes sense to define these is on the right hand side of a *new* statement. They are designed for when you want to provide an object implementing some interface - usually a SAM (Single Abstract Method - literally an interface that has a single method on it) - often as a callback handler for some action. Swing uses this a lot. The addition of Lambdas in Java 8 will actually remove a lot of places where Anonymous Inner Classes would be used - you can provide a lambda expression that automatically implements the interface expected as long as that interface itself is a SAM. (Swing does still have some callback interfaces that have multiple methods that you need to implement, and then has it's adapters that give default implementations so you only need to override the ones you care about. Lambdas don't help there.)
You can find the same videos at this Vimeo album, sorted by most viewed. That should give you an indication of what's popular: https://vimeo.com/album/3031533/sort:plays/format:thumbnail (no english/norwegian separation there though...)
Checkout smartcardio
Oh, that sounds interesting. And it's apparently part of the JRE, the javadoc is just not part of the basic documentation.
It is shorter, but it is not clear what "e" is until you've seen this pattern a few times.
Sorry to be a nitpicking douche, but button.addActionListener(new ActionListener() { // This is an anonymous inner class public void actionPerformed(ActionEvent e) { // This is where actionPerformed() is implemented } }); ... seems more correct to me, and perhaps even highlights the fact that anonymouses aren't limited to single method classes. I also felt like being douchey to another commented who said anonmouses are signs of laziness: wrong. 1) It's less verbose, more concise and in appropriate cases more readable. (less namespace pollution) 2) Better no name than a shitty name. 3) Java 8 bonus - at this stage, it's not laziness, it's just using the tool correctly. button.addActionListener((e)-&gt;doSomethingWith(e)); 
What is this article and why do we need it? Sarcasm aside, I fail to see how this could belong in /r/java. Besides the URL, there is not one mention of java anywhere. What's more, OP has so far failed to explain why a discussion of this within the /r/java community would be useful. I'd assume that whoever subscribes to r/java already is a programmer or strives to become one.So posting this here is preaching to the choir at best and barking up the wrong tree at worst.
Ah, you're probably right, my Java syntax is rusty. Haven't used it for 3 or 4 years. Saw you guys finally got Lambdas though, that's nice :)
The reason this is posted in Java is simply because it's spam for a paid "Learn Java perfectly in 60 days" program poorly disguised as an informative post.
Thanks. This approach worked, and it didn't. I got the objects out, but in a raw farm, they where to big to compare.
Note that taint tracking is available as of Java 7 using the [checker framework](http://checker-framework.org). The article is a useless opinion piece that doesn't even link there. TL;DR: I'd rather have read something different, too.
That's why you use some kind of diff tool.
Not to big read manually. To big for a tool to open. It crashes my computer. 17m chars
I would greatly appreciate some code examples. When digging out my reader/writer (an SCL010) I also found my ACR122U, which I forgot I had. I actually already managed to get a very basic example running (read the tag ID), but I am very unfamiliar with the communication with Mifare cards. I know about some of the concepts, like the blocks and authorization for the blocks. But I don't know yet how that translates into Java code.
I've give lots and lots of programmer interviews over the years. Most people do a very bad job of interviewing. Here are my thoughts: Don't make people write code in an interview. This is a waste of everybody's time because it's not a valid test. I've been a professional programmer for over 25 years and I still wouldn't do a great job of writing code on a whiteboard or coding in Notepad with somebody looking over my shoulder. You can learn a lot by asking a few very basic questions. Don't just focus on whether or not the answer is "correct". Ask the person to explain why the answer is correct. Here are some good questions for this purpose: - Explain what "polymorphism" means. Why is that important? - Explain what "encapsulation" means. Why is that important? - Explain what "inheritance" means. Why is that important? These questions aren't even Java-specific, yet you can steer the question to Java as opposed to C++ or other OO languages by talking about single-inheritance instead of multiple and the use of interfaces. Figure out if the candidate knows about data structures. This is surprisingly basic stuff that not everybody seems to know. - When would you use a list and when would you use a set? Why? - Set up a hypothetical data structure application scenario that steers them towards using a map. See if they get that maps are for storing key/value pairs. A good one is designing a phone book. What data structures would you use? Why? An important aspect of the data structure discussion is about big-O performance. Make sure they wouldn't want to use a list in a situation where a set is more appropriate (read-access vs sequence). Ask about the "synchronized" keyword in Java. What are the two different ways it can be used? What are the pros and cons of each? Avoid cliche questions like the one that gets people to design an LRU, for example. That one is well known. Much much better are general purpose logic questions. I have learned much more about a candidate by asking these type of questions (bloody pirate, buckets of water, to name two). These aren't programming questions at all, they're logic problems. The point isn't whether they can answer the question, the point is *how* they answer it. Make it a discussion. Focus on the process. Do they think for a while quietly and then spit out the answer, or do they go step-by-step talking it out, maybe scribbling on a whiteboard. The latter is preferred, BTW, because everybody will run into a problem they can't solve immediately at some point. Encourage them to talk through the solution. With Java, mastering the language doesn't come from knowing the syntax, though that's important. It's knowing when you don't have to reinvent something because it already exists and knowing how to make existing frameworks work for you. But, don't demand that a candidate know everything about your product. The only people that know everything about what you're doing already work there. This brings me to my final point: don't judge the candidate about whether or not he's an expert in all the technologies you use. This is a mistake that comes from trying to establish objective interview criteria and it makes no sense at all. Interviewing is a subjective art, it's not buzzword bingo. You're trying to figure out if the candidate can *learn* what you're doing quickly enough to be helpful. You're not trying to figure out if the candidate already knows what you're doing. You'll generally have an intuition in the first five minutes whether the person is going to work out or not. Spend the rest of your hour or whatever time you have proving/disproving that intuition, but don't ignore it. Do not simply ask the candidate the toughest interview question you've ever been asked. Do not ask the candidate to design a linked list in C if that's not appropriate to the position. Do not ask the candidate to write a lick of code. Do take a little time to sell the position and the company. Remember that if the candidate is worth having, he or she will have several offers to choose from. Make sure yours is the one he/she wants to choose. Do leave time for questions about the position. An experienced employee will ask about the job. Say, "what are your questions" instead of, "do you have any questions". Take a little time at the beginning of the interview to ask about the person in general. There are plenty of questions you can't ask, like, "are married", or "do you have children" because they can open your company up to discrimination trouble if the candidate doesn't get the job. But you can talk a little, like chit-chat, at the beginning to loosen the person up. No matter how experienced, he or she is likely to be nervous, at least a little. Ask about the traffic or commute to the office. "Did you have any trouble finding the place?" "Oh, yeah, I hate that intersection", that kind of thing. Get away from the interrogation framework because you won't see the candidate in his or her best in that light.
Thank you, that was what I suspected. And yes, the early-access build seem to be a little dated, had tried to look for the release there.
That loop doesn't actually seem to do anything anyway - Java Strings are immutable, so calling replace() returns a new String and the return value is ignored. Hopefully that's code that's been simplified for the blog rather than their real production code but if so they should make that clear...
I know. Usually I'm all for the Apache commons, but the code for this particular problem (StringUtils#replaceEach) seemed unreasonably complex and I at least couldn't undestand if it does what we want with the performance that we need: http://grepcode.com/file/repo1.maven.org/maven2/org.apache.commons/commons-lang3/3.1/org/apache/commons/lang3/StringUtils.java#StringUtils.replaceEach%28java.lang.String%2Cjava.lang.String[]%2Cjava.lang.String[]%2Cboolean%2Cint%29 Just too much duplicated logic and extra Stackoverflow-prevention shenaningans for my taste. Writing our own version took about 5 minutes and is arguably easier to maintain :P
true that. You're spot on^^ I had to make it simpler, since the original code was spread over several files. Will be fixed soon! Thanks for spotting it!
use the "diff" command from the command line then or vimdiff... Though now that I've typed this out, I realize you're probably on windows and don't have access to good stream based command line tools. 
So much this... I've seen so many hiring managers and interviewers that are hung up on, for example, whether or not one knows the details of one specific framework (MVC, for example) with without even asking if one understands the fundamentals behind it (the MVC pattern, in my example). A framework is just that. I've seen (and had to fix) so many poor implementations MVC implementations because they hired a developer that only understood how to set up Spring MVC, but didn't actually understand what MVC *means*. And I *hate* writing code in interviews. I never perform well when I have someone looking over my shoulder.
Ask a trivial coding question something like "create a method to return the sum of a List of Integers". You should not get hung up on 100% correct syntax, but this problem should be a cake walk for anyone with any level of experience but quickly exposes frauds. It also opens you to further questions: how would you unit test this code, what if I supply a null List, empty List, etc.... As for Core Java questions, there are so many people who consider themselves to be "Senior Java Programmers" but they do not even know the basics of the Language. 1. How is equals() different from ==? 2. What does hashCode() do and what are some uses of it? 3. How is hashCode() related to equals()? 4. What are some common Collections Interfaces and how are the different from each other? 5. What's the difference between a variable being final and immutable? 6. What is the difference between inheritance and composition? 7. What is dependency injection? Why is it useful? If you are satisfied with their Core competency, then you can ask questions about frameworks you are interested in if you require the candidate to have a certain level of knowledge about them.
We're trying some home based coding challenge where we ask a problem to be solved that has some reasonably vague requirements and ask them to provide some proof of correctness. We're fully aware that they could cheat on this, so we have a portion of one of the technical interviews where we ask them to talk us through the code and assumptions they've made. Then we through in a curve ball and ask how they'd change the code if we changed the assumptions. I'm still surprised at the variation of effort we receive. From a single file with the bare minimum solution, no comments, tests, documented assumptions, etc, to full blown projects with all of the above. I think it gives a better idea of how they perform on day to day coding than seeing how they perform writing a sorting algorithm on paper. 
It would be nice to have more information on TestGap, the site it links to is horrible and gives 0 information on the product.
Will definitely check a few of these out
WebSphere's cost would be one big factor in any business decision - not only the processor value unit pricing structure, but also the price of any necessary consultation too. What do you gain? IBM's take on the EE requirements, a usable admin GUI for configuration, clustering, and so on. The first part's debatable as to whether or not it's a positive - they're normally a fork of an existing project, but can be lacking subsequent bug fixes for that project. When it works it's fine, when it doesn't prepare to spend ages trying to figure out what's wrong and trying to fix it, or to spend a fair bit of cash to get someone to sort it for you. There's nothing I'd really say makes it preferable to any other OSGi app server. If you do go for WebSphere, try to avoid RAD as the IDE - very unstable in my experience.
Two programs I use in my java class are. Dr. Java and eclipse. Both are nice to use and play around with and free. 
corporates love it so you can charge more for one :))
You can think of them as typed closures. Everywhere you would use a lambda, you can use an interface + anonymous inner class pair. The interface defines the type, and the anonymous inner class the code to be executed, which closes over final variables in the outer scope.
Mk, check for errors and start the debugging process. Print out anything that changes timPos X or Y, and print timPos before and after that. You probably only need it in your mouse section. Also print mouse X and Y, and tell me what you get. Also, is move speed constant with arrow movement, as in, when you move diagonally is your total speed more than if you just moved in a single direction?
&gt; Ask a trivial coding question something like "create a method to return the sum of a List of Integers". Something I like about this is that it'll give a clue as to whether or not they've kept up to date with the language advances - they may not know how to implement this using the nicities in Java 8, but they can at least indicate that they're aware of them. 
&gt; they're normally a fork of an existing project, but can be lacking subsequent bug fixes for that project That's the case for most Java EE implementations; it's typically a mix of existing projects that are directly used, existing projects that are forked (rare, but IBM does it with MyFaces, badly I have to say) and own internal projects. The following gives an overview for WebSphere and other servers: http://arjan-tijms.omnifaces.org/2014/05/implementation-components-used-by.html As you can see WebSphere mostly uses Apache projects and a few of their own (Servler, JMS and EJB are their own). But what sets WebSphere REALLY apart is that IBM somehow feels that there is a need to bundle **over 2GB of additional software** with the base Java EE server. What's exactly in that 2GB is anyone's guess. It's layer upon layer and package after package of what's most likely just crapware and bloatware. Maybe there's something in there someone needs, but it's a ridiculously large install. Well over 10~15 times that of nearly all other servers. IBM itself has understood the folly of all this crapware, and they have a second offering: Liberty. This is more like most other Java EE implementations; it implements the Java EE specs and bundles just a small amount of extra software (aka vendor specific features).
Support. Support varies from vendor from vendor- and I don't have experience with IBM, but if you run a supported setup and hit a bug or have performance problems, etc., your support contract might entitle you to bugfixes and help. Of course, the value of that depends on the quality of the support- from vendors who will fix bugs very quickly and be very helpful to support that doesn't solve anything and wastes your time. OSS projects do fix bugs you hit, but you rarely have a strong guarantee they'll do so in a timely manner. Under a good support contract you might have better certainty- as you are paying them.
http://wiki.eclipse.org/EGit/User_Guide#Considerations_for_Git_Repositories_to_be_used_in_Eclipse
If you're the person that's going to get the kickbacks from the IBM contract, then it's great. Otherwise, it pretty much sucks.
Just added some support for that. Right now it's expected PathExpressions. https://github.com/arnaudroger/SimpleFlatMapper#querydsl-jdbc 
The creator of WebSphere considers it his biggest mistake: &gt;What's the biggest technology mistake you ever made - either at work or in your own life? &gt;&gt;When I was at IBM, I started a product called Websphere [which helps companies to operate and integrate business applications across multiple computing platforms]. &gt;&gt;Because I had come from working on big mission-critical systems, I thought it needs to be scalable, reliable, have a single point of control ... I tried to build something like a mainframe, a system that was capable of doing anything, that would be able to do what might be needed in five years. &gt;&gt;I call it the endgame fallacy. It was too complex for people to master. I overdesigned it. &gt;&gt;Because we were IBM, we survived it, but if we'd been a start-up, we'd have gone to the wall. http://www.bbc.co.uk/news/business-11944966
~/git/projectname
Nobody can help you. Your approach is wrong on so many levels that you will never suceed.
Anyone know if these companies use WebSphere internally: Etsy, AirBnB, Netflix, Twitter, Facebook, Google? If not, why not? 
If I'm not mistaken the warning means someFunction should be static as it only accesses static members and does not need an instance of the API class to work.
I like eclipse better too. Can do a lot more things with it compared to dr java
sorry sure the function someFunction is also static. I guess it is meant that somehow the variable Operations is created... but to be honest I don't understand fully at the moment. I updated the code a bit. Maybe it's better understandable now. 
I'm curious, since myself and others have run into this issue before, and we keep working around it - has anyone reported this to OpenJDK so it can be fixed in Java so one day, we'll never have to work around it again?
ok found a solution: echo -n "5ABcqPZWb6ImI2E6tob8MQ=="|base64 -d &gt; nonce echo -n "2010-06-08T07:26:50Z" &gt; created echo -n "password" &gt; pass cat nonce | base64 cat nonce created pass &gt; wsstmp cat wsstmp echo cat wsstmp | openssl sha1 -binary | base64 produces correct values :) 
Yeah. I understand that the very idea of replicating reference parameters in Java is hacky, but there are degrees of hackiness. :) The generic mutable class idea was actually a fairly elegant solution IMHO, except when it failed due to type erasure.
Is MathOperations#calculateNormalVector static? If it is you should be calling it on the MathOperations class, not an instance. Or you might be calling someFunction on an object of Work. Since it is a static method you should be calling it on the class. (same thing as above) Kind of hard to tell what is going on without the exact warning.
there's no way they do. 
i can't believe it man it was just as simple as that thanks ...
You seem to already have the answer. int x = 3; int y = 4; int z = 8; if((x &lt; y) || (z != 1)){ // do something } A while loop will also work. while((x &lt; y) || (z != 1)){ // do something } Remember that **conditions are boolean**. If it makes it easier to understand, you could do something like this: if((x &lt; y) == true || (z != 1) == true){ // do something }
Your goal is wrong. Actually your whole process and work environment are wrong: * You are working against the language. Instead of using Java idioms you are using idioms of some other language. The result will always be ugly and therefore buggy. * Even if you find an equivalent for each language feature and library function in Java the result still might behave differently because of float/double arithmetic, integer size (overflows...), regex interpretation, date/time handling, string encoding etc. Just something looks the same in language A and B doesn't mean that it will behave the same in 100% of all use cases. * You obviously don't have any tests (or your tests suck). If you had proper tests you wouldn't be afraid of changing the implementation because that's what tests are for. * *More thorough modernization will happen in a latter phase.* LOL! We will do some refactoring and cleanup later... except later never happens. Experienced developers know that. * What's the point of this "translation" anyway? Right now the code is unmaintainable because it's written in some old/obscure language. You will end up with Java code that is also unmaintainable because it's horrible and not really Java. * Today there was an interesting article about Fear-driven-development on Slashdot. Look it up because that's exactly what you are doing. Your approach is driven by fear of making a mistake by changing something. That says a lot about your work environment. *but my hands are tied* That's bullshit! You always have a choice. If you are in charge then you can change things. If you are not then you should look for another job.
But isnt eclipse a bit more harder to set up each time?
All utility classes which I reference are have only static functions. Because they provide some general functionality which does not need an instance of the class. The classes are all have only static functions and no members. I only want to do it like this because the user is not an expirienced programmer and does not know on how to look for these existing utility classes and then make a correct "import MathOperations". So I wanted to give him a hint by referencing them within that poor API. Otherwise they try to write such code on their own within the Work class. But actually they don't need to.
The easiest way to communicate with an Android app via NFC from Java running on a PC is to create a [Host-based Card Emulation](https://developer.android.com/guide/topics/connectivity/nfc/hce.html) Service and communicate with it via javax.smartcardio from the PC side. You'll have to send a SELECT AID command APDU that matches the AID defined in the app manifest before you're able to communicate with your app.
Yeah, you're calling static methods on instances instead of their classes. You don't need the Operations field, just call MathOperations.calculateNormalVector directly - that'll get you rid of the warning. If you need to maintain a list of commonly referenced classes, place it in the API class JavaDoc. That way you won't pollute the code with nonsense fields and still keep important information close to the code. Please also note that classes containing only static methods should be final and have a private constructor so it is not even possible to create instances of them. public final class MathOperations { private MathOperations() { } // etc... } 
Just break the equation into its parts. (Math.pow(..., n) gives you the n-th power) double a = Math.pow(x2 - x1, 2) double b = Math.pow(y2 - y1, 2) To calculate the root you can then use Math.sqrt(...) To get the final result double a = Math.pow(x2 - x1, 2); double b = Math.pow(y2 - y1, 2); double distance = Math.sqrt(a + b);
Did you try compiling the regex (`java.util.regex.Pattern.compile`) and using that?
I used to have to deal with partners that used WebSphere... and the joke was their software was always down. This may be a commentary on the hiring practices of companies that use the 'product' (and I use the term lightly) or the software itself. Why use that when JBOSS is better and free? Anything your group is using that requires WebSphere is probably a mistake. Now if you are looking to be acquired by a company that exclusively uses the software... go for it. 
Please, please, don't do that "== true". Conditions are boolean. The rest is noise.
The wrapper approach should work. What exact problem do you have with type erasure? You are talking about a simple container type, right? Where would overloaded methods even come into the picture?
[HERE](https://gist.github.com/seniorjerry/8b8898be88e8e626c2da) is my play class I think this will be really helpful. https://gist.github.com/seniorjerry/8b8898be88e8e626c2da
In the original language there's something like: public abc(ref string inParam) {} public abc(ref int inParam) {} with different implementations in the curly braces. With a single generic mutable it becomes something like: public abc(Mutable&lt;String&gt; inParam) {} public abc(Mutable&lt;Integer&gt; inParam) {} Except, as I understand it, type erasure means that Java forgets what is inside the &lt;&gt; when it's compiled. At that point the two signatures become effectively identical, and the situation breaks down.
See my answer to the guy right below you. :)
&gt; too many wrapper types. What's the problem? Write a program to write these classes. Their functionality is frozen in time so you don't need to maintain them. Generate once and use forever. 
On a case by case basis, you could use a more concrete type to prevent disambiguation, such as StringMutable and IntegerMutable. Using arrays would definitely solve this particular problem. But, how often are you running into overloads like this? All in all, this sounds like a terrible code base and there are far better ways of migrating the code. Like writing a test suite against the old code that you are migrating and verifying that the new code passes the same tests. Porting a test suite is a lot easier than trying to force Java to be something different than it is.
I always make a habit of keeping my code and my workspace separate. I love to play with my preferences and settings, and all of that is kept in the workspace. If I screw up my configuration too badly, I can always delete the workspace and keep my code exactly where it is.
Apache Commons provides Mutable types all ready to go: http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/mutable/Mutable.html - these are basically types that can achieve reference like semantics without having to implement your own wrappers. I also recommend Google Guava - multimaps are an amazing thing. These are two libraries that will make your Java development life much easier. This said, it sounds like you're trying to re-implement procedural logic in an object oriented language. That's going to be quite difficult and the results will be sketchy at best. I would ask why you're even bothering to convert the code base to Java if you're not going to actually use OOP methodology.
The companies that use websphere are the companies in the Fortune 500 that are not tech companies: banks, insurance companies, etc.
&gt;If I didn't have a private remote git repo, I would have a separate project.git file somewhere on my machine so that I could push my "official" changes to it. This way you can commit often to the working directory and only push to the project.git if the software runs without error or when you need to make a backup and you are using branching. Is this any better than doing all of your work on a feature branch and merging back to master when you're done? It sounds like the same basic idea except your master is a remote instead of just another branch. Your way only takes a little more effort to set up but I'm not sure I see the benefit of the additional complexity. &gt;More importantly you can use the separate project.git file to undo any mistakes you made during your last commit. What's the difference between this and rolling back to your last known good commit and trying again? Why do you need a remote too do this? 
I think one advantage is support. Where using an opensource alternative you may have to just live with or fix bugs yourself, IBM can offer good support with problems. I can recommend Websphere Liberty server. It's lightweight Websphere application server and really easy to download and set up. you can also try it with Bluemix (cloud based app hosting), there is a great free trial and it makes trying out Websphere Liberty really quick and easy if your interested. Here is a link to Bluemix: https://ace.ng.bluemix.net/ and a link to info on Websphere Liberty: https://developer.ibm.com/wasdev/
That is a good practice. It also makes life easier when you collaborate on a project. Otherwise you have add the workspace files to git.ignore. I build with maven as well so the project is IDE independent. Which is another reason to separate workspace and projects. 
Or just simply double dx = x2 - x1; double dy = y2 - y1; double distance = Math.sqrt(dx*dx + dy*dy);
For a professional it is noise. For a student, probably not. If it is the difference between understanding and not then == true or == false or != true are fine.
but trying to emulate pass-by-reference in a language that is strictly pass-by-value is always going to be hacky hacky. &gt; The possibility of using a single element array has been proposed, but mostly dismissed as being too much of a hack. Sounds like it's time to revisit that.
&gt; I think one advantage is support While working for a large life insurer in South Africa in 2006-2007, they used Websphere exclusively, I had an issue were I generated client code to call a webservice with the ibm tools. I wanted to write an integration test that would be kicked off by ant from our CI server. Because the tools and libs were so tightly coupled *I COULD NOT* use that code outside of a WAS instance. So I sent a query to our _gold level_ support explaining what I was trying to do. 3 weeks later was basically told: Don't do that. 
Disadvantages: * Cost * Complex to administer * Requires training * Stress * Cronic fatigue * Mental fatigue Advantages: * No one got fired for buying IBM(This is old school BS) Robert Cringely has a number of post on why IBM is failing -&gt; http://www.cringely.com/
I can answer that. WebSphere uses its own WS engine that's... well... unique. It actually has some really cool optimizations that can make it perform extremely well (one of my co-workers spent a lot more time then he'd like with IBM engineers in the early days resolving all sorts of issues that eventually resulted in fixes to the engine itself in future fixpacks, and he's regaled me with many stories about it!)... the BIG down-side is that the whole way you develop services and host them and all that is proprietary and not nearly as clean as using an open-source package on, say, TomcatEE. And, what's worse: if you try and use AXIS or CXF or something yourself you wind up bumping into the WS engine (which, to my knowledge, can't be deactivated)... you hit all sorts of classloader issues, class conflicts, all sorts of nastiness that makes anything but the WebSphere engine basically unusable. As with most things WebSphere: when it works, it works quite well... when it doesn't... and that'll be more frequently then you'd like... oh boy, hunker down for a nasty time debugging (or a big consulting spend).
If you really need to give a hint in the source, just include a static array of Class objects of the utility classes. It's weird, but less confusing than creating instances of classes with only static methods. 
If you PM me your email and some questions, I'll send some more information your way, which is hopefully more suited to your needs :-)
I doubt any out-of-the-box solution could ever work at the insane scales Google, Twitter, and Facebook operate. Etsy and AirBnB are startups that probably would never be able to afford it when they were new and are probably just building off the free stack they started with right now. As for Netflix I mean, I dunno. They probably have a really nice in-house stack that they understand well and they'd gain nothing by switching to an expensive and externally developed stack. Note all the above is me guessing.
basically, it records the changes to your codebase over time and collects information about the tests you run on the same code. Then it combines those two to show you which parts of the changed code have not been executed at all by your tests. It helps you get transparency into your tests and can be used effectively to steer your testing phase while it's still happening. It can also detect when you're just refactoring code and does not show that as changes. E.g. when you rename classes or packages. Does that make more sense to you?
+1 for Logstash + Kibana
Avoid heavyweight IBM IDEs such as RAD, RSA, WID, IID, IIB. [Developers hate them](http://www.reddit.com/r/programming/comments/enngw/creator_of_websphere_considers_it_his_biggest/). It's a total drain in productivity. 23% of coding hour is spent on IDE server restart. 
We must go deeper: button.addActionListener(e -&gt; System.out.println("You clicked me!")); 
They know better.
Managers and architects often fall for those slick IBM snakeoil salesmen. They are not the ones who will feel the pain of using the WebSphere family suite in anger on a daily basis. By the time the company realize their mistake, the original people who approved the purchase of WebSphere are long gone and moved on to their next consulting gig. 
thanks that makes sense. It would have been nice to see that on the website.
Lots of opensource products are supported by big companies too. Eg. EMC/Vmware/Pivotal support Spring, tomcat, Apache, etc. 
Overly complex. I work with every middleware possible for my job and I find it to be the most convoluted. Not sure why people buy it.
I've always felt it's quite a rounded solution
mmhhh yeah but actually since there is only a reference and these classes do have a constructor and they are not initialized with a "new", there should be no instance of them. Just a reference to them.... I dont have to do it that way. My actual question is if there if a good technique to workaround this.
Please provide your kind suggestions Thanks
I suggest you stop using the term J2EE. The term is not being used since May 2006. :-)
&gt; The possibility of using a single element array has been proposed, but mostly dismissed as being too much of a hack. ??? Why would it be a hack? It's completely unlike relying on, say, undefined behavior in C++ "working as expected" on a particular OS and compiler version. THAT would be a "hack".
&gt; What's exactly in that 2GB is anyone's guess. It's layer upon layer and package after package of what's most likely just crapware and bloatware. What our shop has found in developing software that has to run under multiple containers, is that WebSphere is always the most painful deploy. Because of the sheer amount of stuff bundled with it, the likelihood that they've included a version of some library that is in conflict with a version you need to use in your app becomes high. And although it *should* be easy to resolve this, as **UnspeakableEvil** mentioned, when things don't work right it can be costly and time consuming to resolve.
CheckerFramework is not a runtime taint "tracking" framework for use during application execution, it is a JAVAC compiler plug-in for doing static taint "checking" during JAVAC compilation. Specifically, CheckerFramework is an implementation of JSR 308 Type Annotation processors for the JAVAC compiler. Here are the facts: 1) CheckerFramework is a JAVAC compiler extension (called a "processor" in Java8 nomenclature), and here is the quote from their website saying so: "To run a checker plugin, run the compiler javac as usual, but pass the -processor plugin_class command-line option... The checker is run on only the Java files that javac compiles." http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#running Thus CheckerFramework is not any of these: a runtime library, a JVM, a "-javaagent" for the JVM, an instrumentation library, an app-server, or a runtime application framework. So to use CheckFramework you need to (re)compiler your application with the necessary CheckerFramework extensions to the JAVAC compiler. If your application is already compiled or you do not have access to the source-code, then Checker Framework cannot help you. 2) To use CheckerFramework, you need to annotate your application with CheckerFramework's type annotation classes, which for tainting are @Untainted, @Tainted, and @PolyTainted. This means you have to edit your application source-code to use CheckerFramework's taint checking, and here is the quote saying so: "In each case, you need to annotate the appropriate untainting/sanitization routines." http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#tainting-many-uses If your application is already compiled, or you do not have access to the source-code, or you are using third-party libraries that you cannot modify and recompile, then Checker Framework cannot help you. 3) If the CheckerFramework is sought to be used, it is the programmer's responsibility to correctly and completely annotate their application code and/or library code. If a programmer annotates their application and/or library code either incorrectly or incompletely, then CheckerFramework cannot help you and here is the quote saying so: "The Tainting Checker does not know the intended semantics of your program, so it cannot warn you if you mis-annotate a sensitive sink as taking @Tainted data, or if you mis-annotate external data as @Untainted." http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#writing-untainted 4) Checker Framework is an implementation of Java8's Type Annotations defined by JSR 308. Java8's type annotations are for static-analysis during JAVAC compilation, not runtime analysis during application execution. Here is a quote saying so from an article which describes the CheckerFramework and JSR 308 type annotations: "…you apply type annotations to the code, you must use a compiler plug-in to process the annotations accordingly. As mentioned previously, annotations have no operational effect on application code." http://www.oracle.com/technetwork/articles/java/ma14-architect-annotations-2177655.html All JSR 308 type annotations, including CheckerFramework, "have no direct effect on the operation of the code." (http://www.oracle.com/technetwork/articles/java/ma14-architect-annotations-2177655.html) This means CheckerFramework only does static analysis of non-executing class-files during JAVAC compilation time, and cannot detect-and-defend against actual vulnerabilities and attacks at runtime after the application is compiled and loaded. 5) So in summary, CheckerFramework will not monitor or protect your application at runtime. CheckerFramework's @Tainted, @Untainted, and @PolyTainted annotations require application programmers to: i) modify the source-code they want to 'check', and ii) compile that source-code with a JSR-308 (type annotation) enabled compiler. CheckerFramework provides type "checking" by static-analysis during JAVAC compilation time, which can only provide incomplete warnings of conjectured tainting vulnerabilities unreliably inferred from static-analysis of class-file bytecode. CheckerFramework cannot 'taint-and-follow' runtime memory as it is processed in real-time by the JVM during real-world application execution, and so CheckerFramework is not a genuine runtime taint "tracking" framework.
Who wants to learn J2EE from 2006 in 2014? Please look into Java EE ;)
Thanks for your very thorough reply. * Yes, I see the difference between compile-time checking and run-time tracking. Note that while compile-time checking may be incomplete or lead to false positives, it has the benefit of checking *all* code, not just the one that happens to be currently running. Perhaps a seldom-used function is under-tested and will not exhibit problems until some hacker looks at it. Thus a mixture of compile-time-checking and run-time tracking seems to be sensible. * Yes, using the checker framework may require annotations (however, many of those are already inferred whenever you use common library methods, e.g. get a HTTPRequest entry/etc. E.g. when I first activated it on a codebase without any annotation, I got a lot of results. * So yes, while Checker framework will not monitor my application at runtime, it can help ensure that errors arising from using tainted data even reach runtime at all. Of course that does not protect me against errors at the untainting stage, but I'd be very interested in how a runtime monitor would do that.
http://www.greenteapress.com/thinkapjava/ http://math.hws.edu/javanotes/ These two are what I used most while learning, supplemented with online tutorials and lots of googling. The first one is much simpler and easier to read, but still seems quite thorough. The second one is a lot more dense, lots of information, but harder to get through. 
I added that simply for the sake of understanding. Boolean logic in programming doesn't come easily to everyone.
Interesting, thanks! Can I bother you with some questions, could you point me to the right direction maybe? The company uses Websphere and exposes some web services - what are some common problems and how do you deal with them? For example when you have a web service that itself accesses one or many services, how do you deal when some of them time out? Is there like a pattern, or do you use some sort of executor framework?
You may want to post this to /r/javahelp or /r/learnjava int n = 1; Declares a variable named 'n' of type 'int' and assigns the value 1. Checkout javadoc: http://docs.oracle.com/javase/7/docs/api/java/io/FilterInputStream.html#read() Reads up to byte.length bytes of data from this input stream into an array of bytes. This method blocks until some input is available. &gt; This method simply performs the call read(b, 0, b.length) and returns the result. It is important that it does not do in.read(b) instead; certain subclasses of FilterInputStream depend on the implementation strategy actually used. You get 49 if you read '1'. This has to with ASCII - you are entering a character '1' with is at 49 in the ASCII table. You could parse it as an Integer for example. hope this helps a little.
Thanks . I really appreciate and acknowledge it :) 
Just after I started using Java again, I soon decided I needed a build tool outside of an IDE. So I looked at maven. My only previous experience with IDEs and build tools were the type of Ant (without having really used it at this point). I had to download everything I needed. Maven helped me simplify my project a lot. But I did have one nagging issue: it seemed to abstract the direct control over what to compile — which is weird when you start with languages like C, C++. I later tried ant+ivy, and loved how they were an improvement on the Makefile, and would automatically download stuff. I appreciate both tools now, and got over my dislike of XML because of them. I have been thinking about other build tools, maybe there is one that has good IDE support while still letting me have some more control over the build process.
You shouldn't use "extends API" just to access the static members because it prevents you from inheriting from other classes. You can get the same syntax by using a static import like so: import static com.mycompany.API.*; You should also be aware that the static fields are initialized as null references when written like that. You can call static methods through a null reference but if the class had public instance methods, the VM would throw a NullPointerException when called. Why not just use a Singleton enum for the different API classes and collect those instances in the API class: public enum MathOperations { INSTANCE; public void calculateNormalVector() { // some code here } //... } public class API { // reference to another class public static final UML2Application UMLEditing = UML2Application.INSTANCE; // reference to another class public static final MathConverter Converter = MathConverter.INSTANCE; // reference to another class public static final MathOperations Operations = MathOperations.INSTANCE; } Edit: copy+paste error
I work with websphere on a daily basis and it makes everything more difficult.. please make the world a better place and just say no.
What sort of control are you talking about? Maven integrates just fine with IntelliJ and Eclipse and if you want to override any of Maven's conventions (such as source code residing in /src/main/java), you're free to.
And deeper... button.addActionListener(out::println);
Thank you very much. I guess this is exactly what I was looking for. Could you suggest that this is still good coding style? I mean making static utility classes an enum?
We're working on that :-) Hopefully in a few days we'll have something better up. Thanks for the feedback, much appreciated!
Common Maven problems: Finding a tutorial that doesn't assume you already know Maven
Every time I hear about Websphere's size I think there has to be some hidden movie in the installation. Maybe Lord of the Rings or The Matrix. There is no way it is 2GB of byte code. I don't know what else it could be.
/thread
I think I may have said that in a easily misconstrued way! What I meant was there is no guarantee of support with some opensource products, that's not to say that a majority give really great support and bug fixes. For instance I use Cloud Foundry allot and that is open source with active support, but the CF team are not obligated to help me with issues in the same way IBM would be under a support contract.
People are still using maven? http://i.memecaptain.com/gend_images/pWZ-hg.jpg
In his example the methods aren't static and he is creating the class as an enum to guarantee singleton status. It is a good way to accomplish what you are trying to do.
Some people consider the singleton pattern in general to be harmful (whether it's implemented using an enum or otherwise; The enum is just the easiest and safest way to implement it in Java). But in this case, I would still definitely prefer it over static methods simply because singleton instances can be passed around more easily and concisely. You can also implement interfaces in an enum class, so that might be useful in the future. As for the API class, I probably wouldn't do it like that unless it was a specific requirement from a customer. But I'm not in a position to judge your requirements, I can only judge the implementation.
[People are still using maven?](http://i0.kym-cdn.com/photos/images/original/000/170/976/DustinMattson10-305x457.jpg)
I've had my .git directory corrupted before and keeping a separate git directory gives me a way to recover. You can use feature branching to separate your work from the master and then merge when ready, but using branches was outside of the question given by dgrobler. Now at work, I always do my new work in a branch because I need the ability to go back to the master branch and fix any issues that may pop up between releases. While you can rollback your last known commit and have that rollback included in the logs when you merge your work back to master, the ability to undo a commit against the "main" repo has more flexibility (at least to me) in addition to being a backup, since rollback isn't the only weapon in my arsenal. Why keep all your eggs in a single basket (aka directory)?
Post it here. If it takes 10min, I'm sure one of us will tell you how to fix it. If its an hour job, we can burn that bridge when we get to it.
http://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-for-2014/7/
Setting dependencies in the dependencyManagement tag of the parent project solved all the transitive dependency headaches I was facing when I first started using maven, now it's pretty much hassle free. There are times when setting dependencies as optional in certain components helps.
Try www.freelancer.com or www.guru.com or any other similar website. There are plenty.
Psst: You're supposed to use a different account to post praise to your own submission.
I checked those websites before and I feel those websites are definitely for larger jobs. I'd rather try to find someone from this community or another reddit community. 
This doesn't sound like a "tiny job" and sounds illegal or at least very shady. You're asking us how to break into an application. I think you've posted in this in the wrong forum. This is a forum for Java hackers, not Java crackers.
It's definitely a morally grey area, but not illegal law-wise.
I found the book written by Sonatype to be very useful. It's available [online](http://books.sonatype.com/mvnref-book/reference/)!
That depends if there is a DMCA on the application or not. If there is then reverse engineering that application would be illegal in the United States.
Mind explaining what he wanted? For research, of course.
With many things it might seem like more time but it also provides more control. 
It is a hideously ugly translation, but it could be done. (Edit: see my 2nd approach below.) public boolean foo( FooParams fooParams ) { . . . body of foo . . . } /** Parameters to foo(). Non-finals are by reference, finals are by value. */ public static class FooParams { int x; final int y; final int z; String u; final String v; public FooParams( int x, int y, int z, String u, String v ) { this.x = x; this.y = y; this.z = z; this.u = u; this.v = v; } public static FooParams create( int x, int y, int z, String u, String v ) { return new FooParams( x, y, z, u, v ); } } // Example Caller of foo . . . public int bar( BarParams barParams ) { . . . some stuff . . . // bar() calls foo() FooParams fooParams = FooParams.create( 3, 5, 7, "meow", "mix" ); boolean b = foo( fooParams ); // now access the by-reference values . . . System.out.println( fooParams.x ); System.out.println( fooParams.u ); } You could possibly partly automate the generation of the XxxParams for each function Xxx(). As you said, more modernization comes later. When later comes, you can refactor to your heart's content. Instead of passing all parameters in a class, you could instead only pass the ByRef parameters. Each function Foo would then get a static class FooRefParams, or some such pattern. Rather than any lectures about, you're doing it wrong, it's the wrong language, etc, I understand that you have a practical problem to solve for important reasons, ugly though the problem may be. 
Another possibility public class IntVar { public IntVar() { } public IntVar( int ival ) { this.ival = ival; } public static IntVar create() { return new IntVar(); } public static IntVar create( int ival ) { return new IntVar( ival ); } int ival; } // Similar classes, BoolVar, DoubleVar, LongVar, StringVar, ec. public boolean foo( IntVar x, int y, int z, StringVar u, String v ) { . . . body of foo . . . } // Example of caller of foo . . . public int bar( . . . ) { . . . some stuff . . . IntVar x = IntVar.create( 3 ); StringVar u = StringVar.create( "meow" ); boolean b = foo( x, 5, 7, u, "mix" ); // Now access the by-reference values... System.out.println( x.ival ); System.out.println( u.sval ); } This approach has the virtue of being a bit more concise. You only need the classes for all of your Var types. You declare vars fairly simply . . . IntVar x = IntVar.create( 3 ); int y = 5; int z = 7; StringVar u = StringVar.create( "meow" ); String v = "mix"; boolean b = foo( x, y, z, u, v ); Then you can access the values of x and u. Furthermore, if variable x, is used as a reference parameter to another function, it is already a var. Everywhere that x is used within function bar() you would write x.ival whether x is on the left or right side of an assignment.
A couple more bits of advice on this. You could create a single global, statically imported overloaded function that creates these classes. // handy global functions to make syntax nice later. // use a static import in every class to import this overloaded function. public static IntVar var( int ival ) { return IntVar.create( ival ); } public static StringVar var( String sval ) { return StringVar.create( sval ); } public static BooleanVar var( boolean bval ) { return BooleanVar.create( bval ); } // Now when assigning variables . . . final IntVar x = var( 3 ); int y = 5; int z = 7; final StringVar u = var( "meow" ); String v = "mix"; boolean b = foo( x, y, z, u, v ); If the language you are coming from uses the token ByRef, then instead of IntVar, you could call the classes IByRef, SByRef, LByRef, etc. Or even IRef, SRef, LRef, etc. Those constructors... public IntVar() { } public IntVar( int ival ) { this.ival = ival; } make them private not public. Use the public create functions. 
&gt;Mind explaining what he wanted? For research, of course. Getting a jar belonging to a private version of a client to work on a public version is the tldr version of what I need
I mean as long as you have all the rights then there isn't a problem. EDIT: by default everything is protected by copyright, and even if it isn't it is still protected (unless signed off) by moral right, so you have a few loopholes to jump through if the issue ever arose.
Interesting!!! 
Not sure if that clarifies it any further.
I would like to addsome kind of flags on the configuration menu for the languages but i don't know how yet... Also... everythin is written in a unique class... i'm still trying to figure out how to work with multiple... anyway... thanks for reading this and trying my program!! PS: the accept swap buton apllies the jcombobox changes (to go from the money converter mode to the time zone one)
yes lots of them
idk my man
These were pretty interesting, thanks
But the standard project structure is literally in step two of the [Maven getting started guide](http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html). Can't start using a tool without reading at least the first bit of the manual.
The banned dependency plugin has solved so many problems for our team. People will add a library and not even consider the transitive dependencies. Just the other day, I get someone at my desk asking why they can't add some library with a transitive dependency to log4j to our webapp. Well, because we use logback + slf4j + slf4j log4j bridge. Also, you have the required version plugin, which forces you to specify specific version numbers for everything. This makes for a consistent build and less headaches. 
Just a question, why are you using mega to host your project instead of using github or bitbucket?
Wha... NOPE!
True! For greenfield projects, which is not what the OP was describing. And even within the context of a greenfield maven project, if you're looking at the POM for evidence of what the directory structure is, you're not going to find it. Convention is **GOOD** and this is no exception, but it can confuse people from time to time.
Very simple difference is stack is going to be FILO, and queue will be FIFO. 
The [java.util.concurrent.BlockingQueue](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingQueue.html) is a type of java.util.Queue and is very useful when writing multi-threaded code. Queues let you create a "mailbox", so that one thread can send messages to another thread, and the other thread can read the messages in the order they were received when it's ready. Stacks are very useful for backtracking, allowing you to leave a trail of breadcrumbs for yourself. When you reach a dead end (or a terminal step, in recursion), you can pop things off the stack to retrace your steps. A classic example is maintaining an operator/operand stack in a calculator.
Good question. Maybe because i never used it. I've just shared my programs to my friends via email... but i'll start using it! Thanks!
Check out [JavaFX](http://docs.oracle.com/javase/8/javase-clienttechnologies.htm), in particular, [FXML](http://docs.oracle.com/javase/8/javafx/get-started-tutorial/fxml_tutorial.htm) which is kind of like XAML. However, JavaFX is not MVVM. It is MVC. That is, you'll be writing your a controller class and wiring listeners instead of writing a view model and having the runtime do the two-way binding for you.
Everything this guy is saying is true. I can vouch for this experience. My way around the web services headache was to master IBM's modified version of Apache Wink. Their modified version is v1.1.1 and incorporates the wink-jcdi dependency. I had to put the com.ibm.ws.prereq jaxrs and com.ibm.ws.jaxrs dependencies (for WAS v8.0) in our Maven repo and include those dependencies in my projects. Update web.xml to use the IBM-specific Wink servlet (1 line config change). There was some annoyances involving Wink and the proper CDI annotations to use, but trial and error helped me figure things out despite their awful, wrong documentation. The crappy part about this is that while this works great for me in WAS v8.0, it doesn't work in Liberty Profile. I'll cross that bridge when my company is finally forced off of WAS v8.0 I guess... Wink is no Jersey, but I like it. It's simple, lightweight, highly extendible and was built to have other stuff bolted onto it, such as Apache Oltu as an OAuth 2.0 request handler added to Wink's request handler chain.
Seriously, go with something like Apache TomEE. You can buy support from Tomitribe. TomEE is my #1 recommendation. IBM uses a ton of open-source Apache projects within WAS, and so does TomEE. However, TomEE is composed completely of Apache projects. If you have a problem with TomEE, sorting out a solution is much easier than going through IBM's annoying PMR process that takes forever. My company uses WebSphere. It's has many, many disadvantages, pretty much all of them outlined in this thread. WAS Liberty Profile is a complete rewrite, very fast, and very nice IMHO, but I still would choose an open-source alternative such as TomEE over WebSphere any day. Since you're non-technical, there's a good chance you may think that open-source = (insert something bad here) or that the higher-ups that you may need to sell an idea to think open-source is something to avoid. Remember, IBM's WAS is built on a ton of Apache open-source projects, some of those projects forked by IBM and worse than the projects they forked. Alternatives to WebSphere are JBoss's WildFly. There's also Caucho's Resin. I would avoid Oracle's WebLogic. I like it more than IBM's WAS (not Liberty Profile though), but it suffers from many of the same pitfalls as WAS.
The development version is 183MB. The enterprise version is minimum 881MB. The Fusion Middleware version is 1.1GB. 
If I have a list of string returned from a generic method, is there any better way to cast it back without the double cast method? List&lt;String&gt; properArray = (List&lt;String&gt;)(List&lt;?&gt;) genericArray; Also does anyone know why you have to first cast to ? then to String?
the problem is that nobody is going to download that. Its a jar that you expect us to download and run, and it could contain anything. By putting your project on github you allow me to see your source and know that nothing fishy is going on. Its nothing about you personally, more about trust on the internet. 
If you have a List&lt;Object&gt; or whatever that's the best you're going to get. If you have a function that returns List&lt;T&gt; then if you call the method where you have generic it should just work. 
I can say nothing other than, yep, this is a good course of action.
&gt; Foo.Bar bar = foo.new Bar(); Ew. `new` is an operator, not a method! What bizarre syntax. Scala's equivalent is much more sensible: val bar = new foo.Bar()
genericArray is of type List&lt;Object&gt;, the reason I was in that situtation is because my method returned List instead of List&lt;T&gt; according to /u/HilbertSeries. Thanks for that casting explaination, I've never seen &lt;? extends Number&gt; before, had no idea java could do that. Very haskell like: Num a =&gt; a -&gt; a
I knew of a few. Unicode stupidity is of course allowed, and I've actually used classes inside methods before. Initializer blocks, including static initializers are a part of the OCPJ exam. Expect them to come up. Calling new on an object? I've done that with some compound key stupidity in a legacy database to make java.sql happy. It was quick and dirty, and doing any more would have required a new PO. The new PO was acquired.
I came across most of these while studying for my OCPJP certification. Luckily, you won't need to be able to do these in real world scenarios. In short, if you did this on your code challenge, we're not hiring you. And if you already work for us, well you likely won't be working for us much longer. EDIT: Perhaps I should have read the list more closely before posting a comment in my hazy, half-asleep, angry-at-the-world stupor. As several others have already pointed out, some of these are useful. I do use 4, 5, 9, 10. My problem with many of these techniques stems from how often I see them misused. Here's a few examples I've seen while reviewing code from other devs in the past year: * Using abstract methods on enums to allow given enum values to perform operations that should actually be handled by an injectable, service-level interface. * Nesting classes (up to four levels deep) and then copying and pasting that code everywhere. Again, abstraction and code reuse are your friends. * Placing code in static initializer blocks that make unit and integration testing nearly impossible. * Calling "new" on an object to create an instance of an inner class when injecting a factory would have been a better, more testable, choice. Granted, these aren't "fireable offenses", but they will certainly generate some complaints from other devs.
Your question still doesn't make sense. Foo is defined in Dangerous.jar, but you want to share a method signature which includes Foo, while not depending on Dangerous.jar? As long as Foo is in the method signature, you will by necessity depend on Dangerous.jar.
Thanks to all of you who chipped in with their comments and suggestions. Looks like JavaScript an Scala might be the ones . . either of them, not both. Will try each one of them for a day or two and stick to what intrigues me the most ! Cheers!
If you have already written lots of code for this application (which you won't be able to reuse in Java) and your only concern is the "Windows-only" thing, you might want to take a look at the http://www.mono-project.com which allows you to run .NET applications under various other platforms (including OSX and some common Linux distributions). From what I have heard, it works pretty well if you develop your applications with having in mind that they should run under Mono in the future. Some functionality is not yet available (and in case of the WPF there seem to be no plans to include it). But you should be able to keep most of your application code (especially file handling might require a bit of attention) and your MVVM-classes (you can use Windows Forms for your UI). That being said, you can also use MVVM in Java. However, as pointed out by others, you might need a Controller, effectively making it MVMCV (or something like that). Good luck for whatever approach you choose - from my experience, Java and C# are very similar. What Java lacks in terms of features like LINQ (to enumerables - though some of it has been added to Java 8), it can make up by the great dependency management (using Maven, for example). 
The 4th and 7th tokens on this line left one compiler's output silent. 
Im using simple read() not the read to byte array. Tried that too..array gets filled sooner than i expect becuz read() takes 23 as 2 and 3. I want to use readInt that takes 23 as 23. It can do so while reading from a file which is written by DataOutputStream.writeInt(). But its not working with System.in mainly due to translation problem Yes i see dis.read() is taking character's ASCII number but readInt() doesnt. Thank you. 
#4 is just silly. I'd be shocked if the opposite were true.
he did not ask what the system is gonna look like, but rather the application of those constructs.
That also works in Java. I have never used the former.
Item 4 seems poorly worded to me - it's not just arrays, it's any collection/mutable data structure at the boundary which could be altered outside your code if a defensive copy isn't taken. The StackOverflow item that the article links to does a better job of explaining it.
Please agusleiva get out of my /r/java. Noone cares about your comments.
Thank you! That inline URL is a really nice one - I have added it to the article as a bonus.
Probably because timsort is based on merge sort and it is stable algorithm which might be important for non primitive types. Quicksort is probably a little bit faster and for primitive types doesn't matter if algorithm is stable.
I think you might be right Angular may not be ready yet. If a good JSF component library is developed it might be nice though. : )
It would be great to see someone build a nice Angular based component library for JSF. As of today though PrimeFaces with jQuery is the way to go.
Timsort (at least in my benchmarks) has a time advantage over Dual-pivot-Quicksort whenever the array has a good percentage of pre-sorted "runs" (in any order). For those runs, it will operate in linear time, "degrading" to merge sort if no runs are found. Dual-pivot Quicksort on the other hand fares very well on random data, but has pre-sorted data jump around a lot (source: I've implemented both algorithms in different settings). I wonder if the library designers thought that the "mostly sorted" use case comes up more often with Object[] arrays than with int[] arrays and what measurements they took.
Hmmm interesting observation. To be honest I don't know :) Probably best bet is to try to dig java dev mailing lists to find out.
I also wonder why item 4 is considered security vulnerabilities. It is just normal defensive copy (basic mutable/immutable thingy).
That's a pretty arrogant perspective. Some of these are bad practice, some of them are great practice, just not well known. I use 1, 5, 6, and 10. If you want I can justify their use.
While this suggestion most certainly works, and probably is the simplest for a beginner, this doesn't scale. For each new "special user" the if-clause has to be extended. A better more OO-style way to do this would be to assign the player objects a *role*, e.g. "admin" or "moderator'. After adding an `isAdmin()` method the check simply becomes: command.equalsIgnoreCase("noclip") &amp;&amp; !player.isAdmin() Of course this requires `player`objects to be used in the first place.
Hi lukas, Thank you for correction. Fixed!
Hi hatstand0, It seemed to me, that there are many basic tutorials around, and I just wanted to write something different, but I may be wrong. If you feel that there is no basic tutorial around, I don't mind writing one :)
Check this: http://www.creytiv.com/restund.html
I agree with /u/mortal_esteban These are mostly bad practices, not because something is fun (or possible) means we have to do it. These snippets may be fun, they are not easy to read nor to maintain. Also, for 1) Instead of using Class.this or Class.super, use NameOfTheNestedClass.this or NameOfTheOutterClass.this which provides more clarity And for 6) I would love to see a justified use of non static initializer blocks 
What is against overloading? void getObject(myObject object) { List&lt;myObject&gt; lstObjects = new LinkedList&lt;&gt;(); lstObjects.add(object); getObject(lstObject); } void getObject(List&lt;myObject&gt; objects) { // process the list }
 void getStuff(myObject o) { // stuff... } void getStuff(List&lt;myObject&gt; list) { // other stuff... } Should work. Or if you really want them to be a single function, you could use instanceof. The problem is that instanceof can check if an object is a List, but not if it's a List&lt;myObject&gt;. In that case the parameter would also need to be an Object.
Because I'm doing this within an interface, And whenever I implement the interface I have a method that is basically empty. So it is ugly and is unneeded code that I have to have there otherwise it has to remain there.
Otherwise you can do something like this: void getObject(Object object) { if (object instanceof myObject) { } else if (object instanceof List) { } }
`void getStuff(MyObjects* lstObjects);` for a general solution. If you want a separate case if you want to pass only one object you can do the following: void getStuff(MyObject single); void getStuff(MyObject single, MyObject* rest); you would call it like this MyObject obj1 = ... MyObject obj2 = ... MyObject obj3 = ... getStuff(obj1); getStuff(obj1, obj2); getStuff(obj1, obj2, obj3); You just need to be aware that varargs are only syntactic sugar for an underlying array.
 Stream.of("Tom", "Tommy", "Mod Tom").noneMatch(playerName::equalsIgnoreCase)
Ah, yes, thank you. I stand corrected because I see this frequently. I guess I'm more picturing in top-level classes.
The attention-grabbing headline doesn't appear to be justified by the actual text. Sure, the way JavaScript tries to be clever when calling Java can lead to unexpected results for JavaScript users. That doesn't prevent you from changing your Java APIs via the usual methods (facades, adapters, etc), it just means that JavaScript users might face additional pain if they've been unwise enough to write code that relies on the JavaScript engine's automatic type coercion. The solution is to always explicitly coerce your types to exactly the right Java types at the JavaScript/Java boundary, so that you always call the methods you expect. I learned that quite quickly when I started doing JSF development.
Not proper what ? What's the issue with doing so ? If your method needs to have different behavior based on whether you have 1 object or a list of objects, you probably should continue having them split into 2 methods. 
The article is complaining that Nashorn has some limitations so that when using Nashorn (JavaScript) to call an overloaded method you might not call the method you expected. True enough but the JavaScript language doesn't support function overloading so maybe the author should stop trying to use function overloading in language that doesn't support it. Yes you might have to create some Java wrappers for your Java classes that were never designed to be called from JavaScript but that is just how it is. You can't reasonably expect two different languages to fully support each others features.
&gt; That's what they said to do. Look at the example, it's not literally "Class.this", "Class" is whatever the name of the relevant class is. No :) They say that we should use something like NameOfTheNestedClass.super where NameOfTheOuterClass.this is better. Regarding the initializer blocks, I'd rather have a method because a method has a name so i can specify what it does. Regarding the class declaration inside the method : is a class created each time you invoke the method? Bad eprformance. More generally, I hate these tricks, because often (not every time) they are hacks because the developer did not find an elegant solution.
And other primitive wrapper types... 
OK, here are a couple of real-world problems, one for each data structure. Imagine you're building an order processing system, perhaps to sell tickets to rock concerts. To deal with demand, you'll probably want to decouple the front end order-entry piece from the back-end database update piece (and then the user gets a confirmation when the database has been updated). To ensure fairness, you'll want to make sure that whenever two people order tickets for the same event at different times, the person who ordered first gets priority. So for that, you'll want a data structure where the first order placed in the queue gets processed into the database first -- a queue. Now imagine you're building a GUI application; say, a graphics package for drawing vector images. An important part of any modern GUI application is the Undo feature. So each time the user manipulates the document in some way -- adding a triangle here, rotating a square there -- you'll need to record what manipulation was performed, so that you can undo it if the user requests. When the user selects Undo repeatedly, the recent operations are undone in reverse order -- first the most recent thing they did, then the thing before that, and so on. So you'll want to use a stack. Note that both a stack and a queue can be implemented using an array structure such as an ArrayList. However, it's good programming practice not to limit yourself to a particular implementation. So if what you need is a queue, you should specify a Queue, and then you can freely choose which queue implementation you want -- _and change your mind_ and switch to a different implementation if you need more functionality, better performance, or whatever. Also, in current Java the [Dequeue interface](http://docs.oracle.com/javase/7/docs/api/java/util/Deque.html) is preferred to the old Stack interface, for similar reasons -- Dequeue has multiple implementations, whereas Stack was just a wrapper over the old Vector class. So if you need a stack where you can pull items out from the bottom of the stack quickly (say), you can pick an appropriate implementation.
It was true in Picasso's Target though :)
Repeat after me, == is for primitive types, `equals` is for objects. The wrapper types are objects. Making == behave any other way would mean fundamental changes to the language and runtime. I would rather know when Java plans on unifying the type system, removing the distinction between primitives and objects. And value types would be nice too, while we're at it. And a pony.
Another one: Calling a method that belongs to a just created inner class: new Object(){ public void method(){} }.method(); And using c's horrible array syntax String array[]; And using block with label's and pretend to have the most horrible GOTO block1: { if (i == 1) break block1; System.out.println("will not be printed"); } System.out.println("will be printed"); 
From [the Nashorn introductory documentation](http://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/api.html#sthref19): &gt; Nashorn also supports member access using the bracket notation, where you specify the name of the member as a string between brackets ([]) that immediately follow the class (in case of a static member) or object (in case of an instance member). This method is defined by the ECMAScript as an alternative to the dot notation, and is not intuitive for Java developers. However, it can be used to resolve method overload ambiguity. By default, Nashorn uses the overloaded method that best matches the arguments, and **this is not always what you expect**. They then give an example of how a simple println can go wrong. So it seems to me the problem is set out quite clearly. And I would argue that it's not the library API designer's job to try and persuade JavaScript programmers to call the library properly. Rather, if the JavaScript coder decides to rely on convenient shortcuts which later break, it's up to them to fix their code.
&gt; They say that we should use something like NameOfTheNestedClass.super where NameOfTheOuterClass.this is better. No, they're talking about SomeClass.super, where SomeClass can be an outer class (in the example, they use the outer class Foo, so toString() would be called on Foo's superclass' instance method toString()). &gt; Regarding the initializer blocks, I'd rather have a method because a method has a name so i can specify what it does. Agreed. &gt; Regarding the class declaration inside the method : is a class created each time you invoke the method? Bad eprformance. Incorrect. The class is created at compile time, and loaded as usual. It's just another class like any other class. &gt; More generally, I hate these tricks, because often (not every time) they are hacks because the developer did not find an elegant solution. What's the more elegant solution to calling a superclass's hidden method? The flexibility of enums are an exceptionally elegant solution. Scoping a class as minimally as possible is also good practice, so scoping to a method (if it needs to be named) is a good idea. Enforcing type constraints on method parameters via generic parameters, also a good idea. What's the more elegant solution to that?
Yes the overloading takes place in a Java class but since JavaScript doesn't support creating or calling overloaded methods why is this Nashorns fault? The fact that they even added a overloaded method resolver to Nashorn means they already did more than was required of them. Bitching that "Nashorn Prevents Effective API Evolution on a New Level" because you found a corner case that trips up the overloaded method resolver is just childish. If you want your JAVA api to be called from JavaScript then take the time to make a JavaScript compatible API instead of complaining about Nashorn.
This is /r/java. Not /r/javamixedwithc.
&gt; Rather, if the JavaScript coder decides to rely on convenient shortcuts which later break, it's up to them to fix their code. Yes, I agree with that. But effectively, if you build a large application with Nashorn, and you're unlucky (or crazy) enough not to have written any tests, upgrading third-party Java libraries might be a real risk.
It doesn't overload the == operator, because there is no operator overloading in the language. Simple as that.
That's your opinion. I wasn't aware that the title was particularly bitchy, and clearly that wasn't the intent. Maybe there is another reason for what sounds like you having taken offence? Which was also not the intent, btw...
Not a test at all. Just wasting time outputting characters. Also took about 30 seconds.
ahh thank you so it was the wrong keyword causing me issues.
You're writing your setter wrong. See [here](http://docs.oracle.com/javaee/6/tutorial/doc/gjbbp.html).
Well, yes. That's not specific to nashorn though. External dependencies always add risk.
This is one of my first good projects and i would like to know what you guys think. I already posted this here but i didn't know github and as it was a download link of the .jar file, no one wanted to download it in case.... NOW I KNOW GITHUB!! YEEEAH! Everything is written in a single class but opefully i'll figure out soon how to work with more... Thanks for trying my program! PS: The accept swap button is to apply the changes of the jcombobox (to go from money converter mode to time converter)
The hate is primarily for the overly sensationalistic title and the positioning of a JavaScript limitation being Nashorn's fault. A blog posting covering a gotcha of the method overloading resolver would be something I'd like and upvote. An article that blames Nashorn for preventing Java API evolution is unjustified. Saying "How Nashorn Impacts API Evolution on a New Level" is still misleading because I'd consider it a bad practice to rely on Nashorns overloaded method resolver. If you want to write to write JavaScript to call some library or application then you shouldn't attempt to use overloaded function calls because if you do then it isn't true JavaScript. Nashorn in no way prevents you from evolving your Java API. You might have to create a couple of wrapper classes to make a fully functional JavaScript API if you want that.
It's a feature, not a bug. Strings are immutable by design. If you want to perform a bunch of manipulations on a string, you should convert to a StringBuffer (which is basically a mutable string), do all the manipulations, then convert back. Honestly, the existence of String.replace is the bug.
In the context of auto(un)boxing, things can get highly confusing though: boolean b1 = (new Integer(1) + new Integer(2)) == (new Integer(1) + new Integer(2)); boolean b2 = (new Integer(1+2) == new Integer(1+2)); Both statements are legal in Java and you'd think they're equivalent, but b1 ends up as true and b2 as false.
Don't forget enums, typically nicer to use == for enums too (minor reasons, but it is faster, type safe and null safe).
That's relying on reference equality (reference values are a primitive type), which is perfectly safe with enums because the JVM guarantees that enum value instances are singletons. This is the idea behind [using enum to implement the singleton pattern](http://www.informit.com/articles/article.aspx?p=1216151&amp;seqNum=3) in Item 3 of Effective Java
Something something J AAAARRRRRRR E
Your non capital 'I' annoys me.
Still waiting for vm supported unsigned integer types, complex value types and the removal of type erasure.
The 's' is what got me since this makes it non-syntatically correct Java.
I agree, and 7 is asinine. If it's a static method, then just invoke it statically! I mean, I get that this article is not necessarily showing things you *should* do, but still.
Interpret it as Foo.Bar bar = Foo.(new Bar());
fixed
Ye syntax breach has been fixed.
You made the world a better place, I'm proud of you son. Go out now, be a pirate!
Bubble sort FTW!
So, you are expecting us to refuse the shit you speak? Java is guilty until proven the opposite? Why don't you learn java so you can backup your arguments? Last time you even said noone programs in linux, only nerds. I dont event know why are you expecting other reaction than downvoting.
It's because you are trolling. Honestly, I don't get your constant rallying against Java - why not use your energy for something better? Ok you don't like it, fair enough. There's many many programming languages out there, all of them with their fair share of good and bad. But why keep on crusading against the one's you think are stupid on Reddit? Just enjoy the language of your choosing and ignore the others.
Number.equals is evil as well. System.out.println(new Long(5).equals(5)); // false
1 is a very useful feature sometimes, and it doesn't make things difficult to maintain in the slightest. 3 would be pretty annoying, granted, but if you're moaning about it to the extent you'd consider firing someone you're just being petty. 4 is a *great* thing to do. It's basically just about documenting possible exceptions as a part of the API. Or, what, do you expect every method to be designed not to throw unchecked exceptions unless they are documented as thrown by the overridden method? That's nuts. 5, again, is a very useful and powerful tool. 7 obviously isn't something it ever makes much sense to do. I can only see someone doing it (along with at least a TODO comment) as a placeholder for as yet unimplemented code, but it'd be better in that case to throw a more sensible exception than a null pointer exception. Kinda dumb, but not a fireable offence. 8 is just the same as calling any static method on an object, kinda crappy, but not a fireable offence, better just to explain why it's an issue and move on... Well, I guess to an extent it depends on the experience of the hire and the level of expertise you expect of them. 9 can be perfectly useful. Granted, not as frequently as other generic methods, or often just genericising the class itself, but I fail to see the issue at all in principle. 10 can *sometimes* be necessary in more complex instances. 11 is very unlikely to be needed ever... But their example mainly looks so daft because they've hidden the type parameter on the class by giving the parameter on the constructor the same name, imo. I don't see anything intrinsically problematic about it otherwise.
Is your behavior different when you have your one object from when you would have a list with one object ???
There is no `Number.equals`. What is being called is `Long.equals`. The expression boxes as: System.out.println(new Long(5).equals(Integer.valueOf(5)); Java's primitive wrappers compare like against like (Long vs. Long, Integer vs. Integer, but Long vs Integer is always false). Martin Odersky [discusses the difficulty of correctly implementing `equals` while respecting subclass relations](http://www.artima.com/lejava/articles/equality.html). Basically, it's easier not to bother.
Wut thar be a "fresher," matey? 
I can't find a good explanation for why type erasure is bad. Could you give me an example?
This is one of the reasons guava is so nice: Set&lt;String&gt; manyString = Sets.newHashSet("foo", "bar");
A unified type system is in the [roadmap](http://www.javaworld.com/article/2071283/java-se/oracle-lays-out-long-range-java-intentions.html) for Java. Maybe JDK 10? This doesn't mean primitives would go away, but there wouldn't be a distinction in the type system.
Why don't you start by just inputting 3 strings and outputting them in the same order. Just get that part working then think about putting them in alphabetical order. The String class should help with that. 
* Post to /r/javahelp for these kind of problems (read it's posting guidelines!) * Describe what you're having problems with. "im really struggling on this" doesn't help us to know where your problem is * This is a very basic program. There's *millions* of resources that will show you how to use scanner, reading input and outputting it. Did you look these things up?
Good stuff, good to see the WAR file finally going the way of the Dodo in the Java world. Still, this is nowhere as good as Dropwizard (at least not yet), but it is definitely a step in the right direction.
I got a typical garbage recruiter email once from someone with an Indian last name that was looking for "college freshers" with &gt;5 years experience in some big enterprise Oracle stack. That's the only other time I've heard the term, but pairing it with "freshers" makes me think "freshmen", maybe?
The "+" operator doesn't necessarily operate just on primitive types in Java since it is used for String concatenation where the result is a new instance of the String class. It isn't immediately obvious that the "+" operator on boxed numerical types will return an unboxed primitive instead of a new boxed instance. It is a somewhat arbitrary decision by the language designers. The primitive int type is also never declared explicitly in the snippet, which is why it is especially misleading.
Yeah, you opened my eyes hahaha. Seriously, I'll change a lot of stuff of the code adter having read this great and huge comment. The only problem that I can have is creating more than one class, i still don't know how do more than 1 class match together and for what do I need more than one. Well... i might need more than one at some point that I need to implement actionListeners and mouseListeners. Honestly, thanks a lot.
Forget Java for a moment. In regular math, how can you tell if a number is even or odd?
if its divisible by 2 its even.
That's still pretty bad…
&gt; Write an expression that return true if and only if one of the numbers is odd and the other even. return ((a + b) % 2) != 0; 
List&lt;String&gt; and List &lt;Integer&gt; both compile to just List making polymorphic methods with generics impossible
thanks everyone I was able to get it from the book.
&gt; Unicode stupidity is of course allowed, I've learned about this when I saw a post about someone using math symbols (Phi and the like) properly as variable names.
you could use command line arguments for your inputs or you could use a scanner with a prompt. is the input an integer or a string? 
Well yeah... Like I said: "Obviously isn't something it ever makes sense to do." Let's not try and conjure an argument out of the aether for the sake of it ;)
Use Java 8 default methods or implement an abstract base class? 
Not 100% correct. A number is even if it is divisible by 2 **without remainder**. + 3 is divisible by 2 but it will leave a remainer of 1, so it is odd. + 4 is divisible by 2 with a remainder of 0 which makes it even. The remainder of 0 is the key to being even or odd.
&gt; Look, I simply gave a realistic warning to the OP. Whether you like it or not, I don't give a shit. &gt; what's javaFX's equivalent of WPF's ItemsControls and DataTemplates? What's javaFX's equivalent of INotifyPropertyChanged and ICommand? "I'll tell you realistic warnings op! i really dont even know what java has to offer, but sure this is how suggesting works!" &gt; BTW, if anything, javaFX is something that I would like to try out, but after spending HOURS trying to setup a java development environment on a virtual machine with XP, I simply gave up. *I'm not used to retarded bullshit such as "setting environment variables" because it's not 1990 anymore* And you call yourself a programmer? Almost every damn programming language forces you to do this so you can evade polluting your path. But i guess Microsoft knows it will have to face "not 1990 anymore" dudes like you. &gt; I use (Visual Studio) simply get installed with a 1-click installer and after that just run. No retarded oracle-like carcinogen penis-shrinking bullshit required. https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/4857015-visual-studio-for-mac-os-x Microsoft, it is not 1990 anymore. 
or just return (a &amp; 1) != (b &amp; 1); edit; alternatively: return ((a ^ b) &amp; 1) != 0;
As someone who loves programming scrappy little game prototypes in java my advice would be as follows; Start on paper; break down the whole game into small aspects like the ship, the missiles, the monsters, the background etc. Then break those down sets of numerical values that represent them (the ship's x/y location, it's x/y velocity components, size, collision information, etc.) Also try and plan out on paper the program flow - read up on game loops if you've not before. Once you've got all this on paper it's much easier to see what classes you will need and how they will interact. Structure and organisation are essential. I would also recommend trying to abstract the drawing/rendering of the different game objects away from the actual game data. I think about it as two separate things; there is this invisible world of numbers that holds all the information about everything in the game, and there is a 'renderer' type class that takes all that information and turns it into something you can see. Start simple. If you're new to this just getting a window open that you can draw on takes long enough. Have a look at '[Graphics2D](http://docs.oracle.com/javase/7/docs/api/java/awt/Graphics2D.html)' in the Java documentation (there plenty of other options but that's the one I use when I want to get something simple on the screen quickly). Then get a game loop going that has a frame rate etc. Then you can slowly start adding game features and logic. Discalimer: I've never played space impact, so I don't know exactly what you're going for. These are just my general tips. Also other people may disagree, there isn't really one correct way to do this, this is just how I like to think about it. If you have any specific code questions once you get started I'd be happy to help! Best of luck EDIT: You might have been better off posting this in [r/javahelp](http://www.reddit.com/r/javahelp). That's actually where I thought i was reading this.
If class Y is a subclass (extends) class X, then class Y is also a class X, therefore having all the same fields **except** fields that are private to class X. If X has getters and setters to its private fields, Y will have access to the private fields via those.
Just to clarify, instances of the subclass will still contain the private fields of the superclass, just the subclass code can't access them.
The other exception is instance variables (what we are calling data fields) that are not qualified with any access modifier (considered default or package level) when the super class and sub class are defined in different packages. 
Teach a man to fish... This is easily tested. Open your IDE/editor and just try it out. You will internalize what you find much better.
Your subclass will inherit all fields, but the code in your subclass will only have access to those declared as public and protected.
/r/gamedev
You can get Google to crawl your Backbone/Angular application by providing a PhantomJS prerender: http://lawsonry.com/2014/05/diy-angularjs-seo-with-phantomjs-the-easy-way/ or google "phantomjs seo".
Not all fields. `private` fields are not inherited.
Whaaa?
I'm posting this as a practice run, any feedback on how to improve the structure and effectiveness of my tutorials? 
Which should almost never be used.
Looking for a ban asshole?
they are
I'd rather use Integer.parseInt(input.nextln().trim()) for that purpose. Wrap it in a try-catch block and set your boolean to false in the catch. nextInt() is a *method* of the Scanner class, hence the parentheses. Also, it's generally better to initialize flags to their expected values (boolean number = true;) and to only set the flag to the unexpected state when that unexpected thing occurs, like when your user *doesn't* input an integer. We all know that users are ultra stupid and they break software in ways they aren't even supposed to, but at least give them the benefit of the doubt in your code and only deal with those who step out of line ;) Finally, put that code of yours into a method that returns a boolean, so that you can use it elsewhere as well. Again, it's good practice to give your classes, variables, interfaces and methods really long, descriptive names like testIfStringInputIsPositiveInteger(String s). Such descriptive names don't make the software compile or run any slower, and you can almost get away with not commenting your code if your names are complete descriptions of what they represent.
Welcome to real world ;) But I agree that it should be avoided if possible.
But if the user desn't enter a int, I can catch it, and then what? How do I re-run the program when I catch the error?
Put the try catch inside of a while loop with a retry booleab and then set the retry boolean to true inside the catch
I guess this project is to big for me, because I don't know how to do that. I'm going to learn out of my book some more and try this later.
They are, but code in the subclass can't see them. If you call an inherited method from the superclass, it will work fine, using the inherited private variables.
Sir, please raise your hands and slowly back away from the code while keeping your hands in clear sight... 
Still not really even coming close to answering his question. I'm sure that's why he thought it was spam. I thought the same thing when I read your initial comment.
I have to admit, I'm glad I read this link. I was about to start a new webapp and wanted to go with AngularJS. But since it will generat money via Google Ads, I had put AngularJS on the side. If this solution works, this will be great for me. So thanks for the link. ON a side note, it has nothing to do with what OP asked. Perhaps his app is an internal intranet app and SEO is not relevant to him. But for me, it was perfect. Thanks
Have you had a software job before? No? That is he definition of entry-level. That being said don't sell yourself short either. Also not sure what kind of company hires software "engineers" who only have a high school degree.
http://dropwizard.github.io/dropwizard/
It looks like you have your own Date type (I say this because you're doing things like "year == d2.year" but when I examine the java.util.Date class there is no 'year' field). What does it look like? Incidentally, (since if you are writing your own Date type this is likely an academic excercise), it's helpful to note you can also clean up if checks like yours by writing them in a way that is a bit more elegant. Such as... if (year == d2.year) { // perform month/day of month checks } else { return year &lt; d2.year; } That is just slightly easier to read/follow. If they're equal, you can dive down into more specific units of measurement. If they're not, simply return the result that performs the desired comparison (in this case, if this Date's year comes before the d2 Date's year then return true else return false).
 public class Date { private int monthNumber; final String[] monthName = {"Invalid date", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}; private int day; private int year; private String name; public Date() { monthNumber = 1; monthName[0] = "Invalid date"; day = 1; year = 1; name = "January"; } public String getMonthName(int x) { return monthName[x]; } public Date(int x, int y, int z) { name = monthName[x]; day = y; year = z; } public Date(String x, int y, int z) { name = x; day = y; year = z; } public String toString() { if (day &lt; 1) { return "Invalid date"; } else { return name + " " + day + ", " + year; } } public boolean comesBefore(Date d2) { if (year &gt; d2.year) { return false; } else if (year == d2.year) { if (monthNumber &lt; d2.monthNumber) { return true; } else if (monthNumber == d2.monthNumber) { if (day &gt; d2.day) { return false; } else if (day &lt; d2.day) { return true; } else { return false; } } else if (monthNumber &gt; d2.monthNumber) { return false; } else { return true; } } else if (year &lt; d2.year) { return true; } else { return false; } } } edit: added monthNumber to constructor
Without reading your code I will tell you for 100% certain that your if block is not being ignored, it is not being satisfied or it is not being reached. The compiler is never wrong. You are. Print the values being compared before every conditional. Whichever one isn't happening is because the condition is false. I know this is patently obvious as I write it, but it's occasionally hard to sink in when you're new to coding.
If you have indeed your own date class... Don't. There is an excellent video on implementing calendar logic; TL:D it's really really hard. Go watch it, then you realise that writing your own is wrong and replace it with stock Java or jodatime. 
You aren't setting monthNumber anywhere I can see. Also, you don't need to nest your conditionals so much.
With the questions he's asking, if he is implementing his own Date class it's likely an academic exercise which is perfectly fine.
Apply for jobs you want regardless of whether you believe you have the correct credentials. Titles differ from company to company. A lot of job classifieds are written by HR departments who don't understand software at all. The marginal cost of doing another application is far outweighed by the possibility that a company will see you as a "great fit" for a job you truly want.
Yes it is academic! Nice catch.
In which case he should argue with his teacher and state that no sane professional developer would write their own date class, instead, write a wrapper and delegate all the calls to Calendar/Date/Jodatime.
If ran through, and tweaked this code so many times and I'm with a friend. We know the compiler is right, we just aren't seeing where we are wrong. I posted the rest of the class above.
I've been debugging it with a friend and we are so confused on where we are messing up.
How does this affect the February? I've added it to the constructor, it didn't change anything though.
well the compiler is usually almost always correct. Especially for something simple like an if statement. Compiler bugs are a thing. But you are correct in that javac doesn't have a bug for this scenario. 
Because you are not assigning it, it will always be 0 and any different comparisons will not work. You need to set it in all 3 constructors.
I don't have a degree in Engineering or CS, entry level was how I got into the field too having self-taught and a portfolio of applications. Knowing how to program (where I was), knowing the things you know after a Bachelor's in Engineering or CS (where the OP is), is a quite a bit different from working in a professional environment. As an amateur, I built things from scratch by myself. Your experience with research and projects won't be completely applicable to an environment where you are working on finer details, linking intricate APIs, making little things scale big, all with varying groups of people with different backgrounds, roles, duties, and levels of experience.
Why is that, on what line are you getting confused? You could evaluate every if and else statement and see where it goes wrong
I am not going to look at this mess. If you have this many if or elses nested there is something wrong with your method. I suggest you write this method again and then you will actually see your mistake. Search online for good code design and practices. It will really help you. Messy code is just to hard to understand. Its probably a simple mistake.
People have already explained your mistake, so I'll tell you why it is a good one to make. It's because you can learn a lot from it. Your most basic error was that you are holding the month part of the date in two places: the "name" and the "monthNumber". Always try to hold one thing in one place only. Then you will not get these kind of problems. Also, remember to check your parameters. Now your class supports dates like the 44th of Invalid date in the year -15.
I remember from some calculator I had a long time ago that composite units, in fact your basic units could all be simplified with one concept. The 'unit' of anything is a vector of powers of some basic fundamental unit. There were about seven or eight, I don't recall. But as in your example, obviously, distance and time are fundamental. Because I don't remember the rest, I'll name then u2, u3, u4, and we'll assume there are five basic units. (But I think it was seven or eight.) Assuming you consider meter to be a fundamental unit of length, then 50 meters would be represented as: 50 x {meters ^1, seconds ^0, u2 ^0, u3 ^0, u4 ^0 } If I wanted area, then the meters unit would be squared. So 80 square meters would be: 80 x {meters ^2, seconds ^0, u2 ^0, u3 ^0, u4 ^0 } And 100 mph would be: (if I did my math right...) 44.704 x {meters ^1, seconds ^-1, u2 ^0, u3 ^0, u4 ^0 } (44.704 meters per second, the per second means the seconds unit is raised to the negative one power) 30 minutes would be represented as: 1800 (meters ^0, seconds ^1, u2 ^0, u3 ^0, u4 ^0 } To multiply 100 mph by 30 minutes you would multiply the coefficients and add the exponents of the units vectors. 80,467.2 {meters ^1, seconds ^0, u2 ^0, u3 ^0, u4 ^0 } Since the first vector has seconds ^1, and the second vector has seconds ^-1, then seconds ends up with an exponent of zero. Similarly the other fundamental units (u2, u3, u4) all end up adding to zero because they all started out zero. And that 80,467.2 {meters ^1, seconds ^0, u2 ^0, u3 ^0, u4 ^0 } is 50 miles, if you choose to convert it into a printed representation of miles. But internally all calculations are done in vectors of fundamental units. Only on I/O is internal representation converted into other printable forms. But a simple way is this. Have a constant which is a unit, that is a coefficient and units vector. The constant would be the value that represents 1 mile. 1 609.344 (meters ^1, seconds ^0, u2 ^0, u3 ^0, u4 ^0 } You might store that vector into a variable called ONE_MILE. Now if you divide the result: 80,467.2 {meters ^1, seconds ^0, u2 ^0, u3 ^0, u4 ^0 } by the constant ONE_MILE, you get the scalar value 50 (meaning 50 miles). But the units vector is now completely zeroed, meaning that 50 is a scalar value of the division to convert to miles. You could have other constants. Even combined constants. And powers can be more than 1. For example square feet would be some constant coefficient with a unit vector that had a power of 2 for the meters position. Acceleration due to gravity on earth would be a vector with an exponent of 1 in the meters position and 2 in the seconds position. (eg, it is distance per time-squared, like 32 feet per second squared, or 9.8 meters per second squared) 
I agree. It completely depends on the company. I've worked at a company where the Software Engineer title was one of the higher levels, but I've also worked at a company where the Software Engineer title was the lowest level.
I've seen much dumber exercises for students to implement than DateTime. While I agree with you that having students implement stuff like this rather than experiment writing stuff USING these classes is pretty dumb, no instructor will care in the slightest what the student says about it.
This is the correct answer, monthNumber is always 0. Any of the test that looks correct for different months only do so because of the day of month the test uses. For instance the &gt;test(new Date(5, 23, 1900), new Date(3, 23, 1900)); looks to be correct but that's only because 23 isn't "before" 23. Change it to &gt;test(new Date(5, 22, 1900), new Date(3, 23, 1900)); and the result will become &gt;May 23, 1900 doesn't come before March 23, 1900 May 22, 1900 comes before March 23, 1900 Edit: Testcases that demonstrates this better: Changing the month does not affect the result: &gt;February 2, 1900 doesn't come before January 2, 1900 February 2, 1900 doesn't come before February 2, 1900 February 2, 1900 doesn't come before March 2, 1900 Changing the day of the month does: &gt;February 2, 1900 doesn't come before January 1, 1900 February 2, 1900 doesn't come before January 2, 1900 February 2, 1900 comes before January 3, 1900 Edit2: I added the assignment to the constructor and the code now works as expected.
Yes, Java is insecure. Nobody uses it anymore. Tell your boss you think .NET is the way to go. 
You really don't need to be so harsh about it. Considering this is an academic exercise for the OP, it is a fair attempt for someone trying to learn the ropes.
Just as a reference, here is a video that explains pretty clearly the difficulty in creating your own date class. http://youtu.be/-5wpm-gesOY
That .NET is shit. Yeah that's the truth.
No harm done! I realize /r/java isn't really a beginners subreddit and it's easy to get stuck in the lens of evaluating code from an objective standpoint.
This was only for java in the browser which has been out of favor for years anyway. 
sure, here you go.. CocaCola 100 27 22 Sprite 100 26 0 MountainDew 110 31 36 SevenUp 100 25 0 Pepsi 100 28 25 DrPepper 100 27 27 Fresca 0 0 0 FantaGrape 120 33 0 AWRootBeer 120 32 0 FaygoOrange 130 32 0 CheerWine 150 42 32 Barqs 110 30 15 IrnBru 152 37 70 BigBlue 130 32 25 TikiPunch 200 50 0 PolarOrangrDry 200 49 0 SunDrop 120 30 42 Monster 100 27 61 FullThrottle 220 58 139 RedBull 110 27 55 EOF -1 -1 -1
I've experimented with using JAX-RS to map urls to functions and adding something like [HtmlEasy](https://code.google.com/p/htmleasy/) to render the view. You get the features of JAX-RS (Path annotations, url parameters, @Context injection). Plus if you decide to go ahead with implementing a REST framework in the future, you'll already be ahead of the game
Honestly, Entry/Junior/Senior titles don't mean much in this field. I've seen Senior Engineers with 2 years experience and Junior Engineers with 4. Just apply and see how you do, maybe you get an interview and do great.
The only thing retarded is you dude. 
The purpose obviously isn't to create a usable library. It is an exercise to learn basic programming constructs like variables, conditionals, methods, classes, and so on.
I would use the debugger in the IDE or at least put println() before the conditional that you think is acting weird to print out what the variables are.
Without reading the code, it sounds like your if statements are being short circuited. If you Google "java short circuit" you should find relevant results.
Look up flow control and learn it all.
and you can access them directly via reflection. Nasty stuff that should be avoided but are possible.
I've had this realization about myself a couple times now. Ask me to design something and I'm just gonna put everything in boxes. It'll work, but it won't be pretty.
Here's some screenshots so you get the idea: [1](http://i.imgur.com/EGOYlg5.png) [2](http://i.imgur.com/rx4RWIH.png) [3](http://i.imgur.com/r3ttUKg.png) [4](http://i.imgur.com/Vfnwbae.png) [5](http://i.imgur.com/Z0QcwNb.png)
People have identified your problem, but I wanted to bring up the [Comparable](http://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html) interface. If you're implementing comparison in java, you should almost always be implementing Comparable. This allows you to use the automatic sorting in Arrays and Collection and eases using Sorted Sets and Maps. Plus, it is how people are going to expect comparison to be done. 
The difference between “entry-level software engineer” and “software engineer” is that the former isn't buddies with the scumbag HR crook that's offering the job.
Well... that *is* a strategy. Folks who can't be bothered to Google readily available information serve your interests better when you can push them to the opposing team.
`reader` and `writer` in the `finally` block are out of scope. A `finally` block does not inherit the scope of the corresponding `try` block. You can declare `BufferedReader reader` and `PrintWriter writer` on the line above `try` and it will work. And please, please, indent your code correctly.
and this [try syntax](http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html) is nicer: public static void main (String[] args) throws IOException { String delete_this = args[0]; File file = new File(args[1]); File temp = File.createTempFile("file", ".txt"); try(BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))) { try(PrintWriter writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(temp)))) { for (String line = reader.readLine(); line != null; line = reader.readLine()) { writer.println(line.replace(delete_this, "")); } } } } 
I haven't tried running this yet, and I'm not familiar with the Scanner class, so this is an educated guess. The condition of your while loop will never be met, since you're using != instead of the .equals(str) method. Perhaps this is causing it to read beyond the last line of the file and break.
Ctrl Shift F is your friend for formatting. Set it up before using though.
Thanks for sharing!
It depends on the `class` definition of `Territory`. I'm guessing it looks something like class Territory { int row; int column; public Territory(int row, int column) { } } Java doesn't automatically set fields based on constructor parameter names: As far as the compiler is concerned, it's just a coincidence that you've chosen the names "row" and "column" for both parameter and fields. So you have to actually assign them in the constructor. class Territory { int row; int column; public Territory(int row, int column) { this.row = row; this.column = column; } } By the way, the reason your code reports `row` and `column` to 0 is because for class fields, java automatically sets them to 0, `false`, or `null` (depending on type). It only does this for class fields and static members, not for local variables.
Many thanks for your help, yes the Territory class is set up like that. Can you expand or re word on why adding: this.row = row; this.column = column; makes it work? I don't understand fully.
Constructor parameter names have priority, but by specifying this.yourfieldname you actually assign the field in your object.
Sure. Suppose that you named the parameters `r` and `c` instead. In that case, you could just say `row = r; column = c`, and it will assign to your fields. However, since the parameter and the field have the same name, if you said just `row = row`, then java assumes that both `row`s refer to the parameter. To refer to the `row` field instead of the `row` parameter, you have to disambiguate it by using `this.row`. I'm assuming you know about fields and instances here, if it still doesn't make sense let me know.
When parameters of the constructor or a method have the same name as fields in your class, the parameters take precedence. If you still want to access the field you have to use "this" to access them, where "this" refers to the current class. public class Territory { private int row; public Territory(int row) { row = row; // this line won't do anything; it does not set the "private int row", but only the "int row" parameter to itself this.row = row; // this will use the row parameter } }
Ctrl i does the proper indenting. Makes it really easy to read. Highlight all you lines then Crtl i. I use it all the time.
So the fields are set up and then the constructor runs and takes the parameters but because they have the same name it ignores the data? The this. part tells the code to use the data from the constructor to update the field?
Check out www.lynda.com as well. It has really helped me with some of the basics. What I have also found to be really helpful is just to pickup a good book. Then actually start doing the examples in the book and attempting to use it.
While everyone suggests WildFly, I would suggest TomEE, mainly because it is much more stable, simpler, lighter and less bloated. The community is very strong and the issue tracker proves what I'm saying here. Any issue you have is answered in less than a day usually, and a fix comes in the same day or the next one. Issue tracker: https://issues.apache.org/jira/browse/TOMEE Now let me contradict some of you. TomEE is not just a WebProfile. TomEE comes in more flavors, one of which is WebProfile, but it goes much more than that. Take a look here: http://tomee.apache.org/comparison.html Another cool thing is that you can get TomEE PLUME, which comes with Majorra and EclipseLink instead of MyFaces and OpenJPA. That's a nice out of the box experience. It works without you doing anything. TomEE 2.0 is under development now and will be Java EE 7 certified. Bottom line, I have been using TomEE for more than 2 years, and I am very very happy with its stability, performance and community, therefore I recommend it to you as well. I've run huge stress tests on the apps that I develop, and I can proudly say that TomEE performs very well. (of course, it depends from app to app, but for me it's very good) TomEE has already professional support from TomiTribe, a company formed by the core developers of TomEE. So, if you're a business looking for support, you already have it. http://www.tomitribe.com Of course, it is like food taste, everyone has it different, but, nevertheless, now you have a better overview of TomEE, and you can see that it offers many great things: commercial support, stability, performance, strong community, different flavors, WebProfile and close to FullProfile, PLUME etc.
I don't know what you based your reply on, but it's actually exactly the opposite way. TomEE is more mature and stable than Wildfly. Who came first and who has years in the market already? TomEE or Wildfly? TomEE of course. Who has a cleaner issue tracker? TomEE. See my reply for more explanation, please. http://www.reddit.com/r/java/comments/2ankg7/abandoning_glassfish_do_i_choose_wildfly_of_tomee/cko83f2
How could `parseDouble` possibly exist if it gave different answers then the string put in? it would no longer be parsing doubles from strings it would be outputting some random number from a string. If you meant floating point precision errors sure, but thats only because of the decimal to binary conversion, it does not change between calls to `parseDouble`. if you have a question like this, i urge you to on to the [javarepl](http://www.javarepl.com) and just keep on trying it. you will see that parseDouble does exactly as it says it does, and parses the double. Also check out IRC they give much faster answers than ones that you have to wait &gt;1 hour for, for something as trivial as this. Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == Double.parseDouble("1.234") == true;
Essentially, your CS curriculum has been about giving you background that might or might not be relevant to the job. The first day you start working, you start learning the skills which impact your performance.
http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html If your creditHours field is private subclass does not have access to it and you have to use public getter. You can use protected/public on data field too, but it is not recommended because it is hard to keep track when and where that field was changed and can it lead to bugs and difficulties on managing/updating your application.
This í my blog about Java tutorial in vietnamese, some one can visit here : http://cafeitvn.com/