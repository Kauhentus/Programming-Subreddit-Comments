There's blocking on a green thread, and then there's blocking a run-of-the-mill-fat-thread; The cost of each being the length of the stack that gets copied away. The whole point of quasar is to sort of stay in a safe zone where blocking will keep being cheap. When you call regular Java from Quasar code, you may block your current heavy thread. Quasar can help you detect this by printing warnings if it detects you took too long on some calls. There is a whole subproject dedicated to bringing regular blocking APIs to some that will be compatible with this safe zone: http://docs.paralleluniverse.co/comsat/ For example, in [comsat-jdbc](https://github.com/puniverse/comsat/tree/master/comsat-jdbc/src/main/java/co/paralleluniverse/fibers/jdbc), all the blocking calls of JDBC get wrapped with suspendable calls; so that the thread supporting this green thread can switch to another green thread, instead of getting himself preempted. Here, [ResultSet.next\(\)](https://github.com/puniverse/comsat/blob/master/comsat-jdbc/src/main/java/co/paralleluniverse/fibers/jdbc/FiberResultSet.java#L58) will be wrapped with a CheckedCallable. If I'm not mistaken, CheckedCallable can throw a SuspendExecution Exception [\(here\)](https://github.com/puniverse/comsat/blob/master/comsat-jdbc/src/main/java/co/paralleluniverse/fibers/jdbc/JDBCFiberAsync.java) which is the detection mechanism by which the green thread will be dismounted. **TL;DR:** You can mix light and heavy calls in your code. The whole game being making all the blocking calls through cheaply suspendable ones as much as possible.
Did i miss something? Article doesnt actually tell us what is a good solution to this problem
I don't know why everybody is shitting on this. This is amazing. They claim they can convert any Java SE code to javascript! More info here: http://blog.leaningtech.com/2017/06/announcing-cheerpj-java-compiler-for-webapps.html For what its worth, they're not billing this as being able to use java as a web scripting language: &gt;The main aim of CheerpJ is to allow existing, unmodified Java applications and libraries to be converted into Web applications with minimal effort from the developer. &gt;... &gt;The main purpose of CheerpJ is to allow developers to convert legacy Java code into browser-based Web applications, thereby not requiring any Java installation on the client side.
It makes a proposal for a simple one. If it doesn't fit your case, I'm open for discussion :)
They do not face any issues whatsoever that necessitate their beliefs. They think they do , but their don't. And normally, I don't care what other people do: if it makes you happy, go for it. But I am 100% sure that 5 years from now I'll be tasked to maintain one of these monsters where the devs took every single fad of the day and shoved it into an application without even thinking about it. On the other hand it is funny the look on a manager's face when I tell them the price to fix their crap.
Allright let's convert Apache Hadoop to a browser-based WebApp, because you know these guys have a tool.. Or who wants to convert their 90s looking crappy, slow Java applets to javascript? 
I can't tell if you're being sarcastic, but I don't think the point is to create projects. Fiddles are great at things like demonstrating solutions for StackExchange, or quickly trying something small. It's awesome that Java has a solution too.
I think you're missing the point of fiddles.
"The main aim of CheerpJ is to allow existing, unmodified Java applications and libraries to be converted into Web applications with minimal effort from the developer."
Get the NetBeans IDE and do some of their tutorials. You will applications up and running quickly.
Aye, but the linked page is for Fiddles. Still, their previous Cheerp for C++ -&gt; Web is successful, so they've done a Java one. There are obvious potential uses, like iOS, where there is no JVM. Even if it was only a proof of concept, you've still got to admire something about the achievement.
[removed]
The compilation takes forever but apart from that this is really nice
I see some value with this. Not so much for anyone who already can code, but for someone who is interested in learning. Getting an ide going and writing code can be intimidating to a new user. I think this could be a decent educational tool. It is slow though, but for a first time hello world type program it can be handy. I could also see it as handy to try something out where an ide isn't available due to permissions or on mobile or something, but you want to run something small.
those newline braces ...
I was fully expecting a web-based wrapper around the new JShell REPL, but I guess that is not the case here :-)
Yeah, I'm a relatively new Java programmer and sometimes I want to try something out quick without doing the whole IDE app creation thing. I honestly don't know what most of what the guy posted was. It's nice to try things out, it's hardly "worthless," just because you have other solutions or tools. 
i'm just starting into java after a long career in .net. what in the holy hell Should i be looking out for here?
Develope the applications you want see. Try online coding challenges or competitions. Join a developer meet up group and find some people to work with.
Yes but how do I learn the algorithms necessary to create these applications?
As you go you learn as necessary. It's very easy to get caught up in "I better not start until I know everything to do my task". However my experience and success has often come from taking a risk and learning as you go, refactoring the bad parts as I went. Not every codebase has been beautiful, but I learned a ton and can do a heck of a lot more today than I otherwise would have. I know many others who would relate, but I should /anecdote.
Thank you for the advice. I'll start adopting this method of work.
A large clusterfuck of [bounded types](https://docs.oracle.com/javase/tutorial/java/generics/bounded.html) using the wildcard. C# handled parametric polymorphism better than java, I'll give them that. The [wildcard](https://docs.oracle.com/javase/tutorial/java/generics/wildcards.html) (`?` symbol) is just a way to specify bounds for type arguments.
Alright, I'll bite. I must be missing the point of Java to JS too. Can you give an example of a use case? A realistic one, that is. I think I'll just keep my eyes on JDK9 AOT and WASM instead.
Lots of people recommend the Helsinki MOOC http://mooc.fi/courses/2013/programming-part-1/ Others recommend umpteen other things. I think the main thing is to think about something that you want to make, ideally something that you would actually like to use yourself, as then you have the drive to finish it. If you watch lots of random YouTube videos or online tutorials you'll be exposed to a lot of different ways of approaching things but you'll have little experience of how to plan your own project. If you want to make a simple Web application then start reading up on spring boot. Being able to create a Web app that prints something to the browser in less than 10 lines of code is a good confidence boost and then you can work on from there. Start small. Start simple. Then build :)
Would this be a good time to point out that Spring Boot isn't a web framework...?
First, accept that algorithms are NOT necessary to create applications. Algorithms come with the language, if not libraries. Learn how to use frameworks and tools, and of course the best practices of your language of choice.
Hyperic
Hawkular is used inside OpenShift, so it scales pretty well with your application. I think Prometheus is also gaining some traction in this area. I've used AppDynamics and New Relic in the past, and they've always been pretty good. Both have on prem versions. If you can be bothered to do some work on it, you can embed Jolokia into your application and build a portal over th top of the information it exposes - Hawt.io does this pretty well. CA APM is a bag of spanners. Avoid. 
What are some recommended code challenges?
Out of curiosity, what would one call it?
The assignment to variable `d` blows up the compiler because of this: http://www.cs.cornell.edu/~ross/publications/tamewild/tamewild-tate-pldi11.pdf An interesting edge case of use-site variance in Java
Spring Boot is an generic application framework, built on top on the standard Spring Framework IoC container, but augmented with auto-configuration of dependencies using "starters", which are very opinionated. The web framework you *can* use with Spring Boot is Spring MVC. 
yeah, the important thing to remember is that this kind of learning process will involve a lot of failure and a lot of shitty code. None of that is important. The only thing that matters is that you learn from it all and improve on past attempts.
If you like math I can suggest you www.projecteuler.net It's a site with hundreds of problems, often mathematics, that you should solve with programming. The firsts 30 problems are relatively easy to solve and are solvable with simple brute force algorithms, then you'll have to write way more complex algorithms in order to solve something in a reasonable time. (On their FAQ they say that everything is solvable in a minute, with an ordinary computer and the right algorithm)
I love math but sometimes I feel many problems are trying too much in comparison to quirky logical algorithms that do just enough for learning like a sponge. I've done the first 40ish but got bored of it. I'll give it a go again
Ooh, that makes a lot more sense. Thanks!
If you're only building things you already know how to build, you're not growing. Similarly, if you only benchpress cotton balls, you're not going to get any stronger.
he is totally sarcastic. The compilation for such a simple application takes way too long. Nobody wants to wait minutes of compilation for `hello world`. It has to perform faster before getting useful, thus great proof of concept. Though atm there are better fiddles for Java out there.
But as a response to "which Web framework do you use?", I'd say it's definitely a valid answer 
1. Post in the appropriate subreddit (either /r/learnjava or /r/javahelp) as is clearly indicated in the **sidebar** 2. Do a **proper** course, like the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html). CodeCademy hasn't taught you programming. It has taught you the *extremely basic* Java *syntax*. The CodeCademy Java course is *useless* and a *waste of time*. CodeCademy is simply not suited for complex, compiled languages, like Java.
Not really because you could use Spring Boot with different web frameworks like Spring MVC or Ratpack.
Do you use Jenkins or similar? I'd put it in there - easy scheduling and it shows your results all pretty as well, assuming you output something like Junit xml.
Gradle going strong. I've heard it is not really better ~~then~~ than Maven.
Maven is super opinionated, verbose and rigid. Grade is more flexible and concise. I prefer gradle for personal/quick projects and maven for large systems where long term maintenance is important. I can grok a maven project pretty quickly, whereas large gradle projects require more mental parsing. Might just be due to the difference in experience, though.
Is Struts 2 still alive? How is it possible?
Haven't used it myself, but I've heard good things about Glowroot. It's open source APM monitoring, so can't hurt to give it a go. The demo site they've got looks pretty good. https://glowroot.org/
Netbeans has great tutorials and could be a great IDE if it is brought out of the last decade.
Even better: Struts 2 is still actively being developed. And I know good developers loving it. Quite a surprise to me, too.
I wonder if the results are biased. I know Spring MVC is popular, but five times as many developers using Spring MVC than JSF sounds unlikely to me. Maybe it's just that Spring MVC is popular among IntelliJ users, who are more likely to participate in the survey than others. Does anybody know other surveys, so we can get a more balanced picture? The idea being that every survey is biased, but the biases cancel out each other.
I work in a large enterprise that was maven only. I had a hard time just looking at and understanding POMs quickly. Ever since I moved to Gradle I cringe when I need to open a POM. I feel it is just more cleaner and concise. Also it is way less verbose like you stated. But somehow you still need a little maven background to use it. 
That whole portion of the poll is a cluster#%€. Why is GWT (front end oriented UI framework) in the same poll as MVC (backend oriented framework)?
[Zeroturnaround Java Web Frameworks Index: February 2017](https://zeroturnaround.com/rebellabs/java-web-frameworks-index-by-rebellabs)
Enterprise, Fortune 500 companies that don't want to rewrite applications that happen to fulfill the purpose they were written for.
Anecdote here, since 2006 I have used Spring just during one month for a pilot project. All our web projects in Java are done in JEE.
[High-Performance Java Persistence](https://vladmihalcea.com/books/high-performance-java-persistence/) because you probably want that business tier to run at warp speed.
I only use it when I do Android development, because it is the blessed build tool. Outside Android I don't have any reason to move away from Maven, in what concerns Java projects.
Thank. I see that's a VMWare product... Probably slightly costly, but I'll have a look since we already run on top of ESX.
Thanks. Didn't knew New Relic had a on-prem solution. Having a look. Hawkular looks nice but seems to required for effort to implement / maintain. PS: No worries, no intent to deal with CA.
Thanks. Having a look as well.
I would be curious to see what do they use in the back end. Ti should be one of: * JDBC * iBatis/myBatis * Hibernate, with XML configuration, or with annotations * JPA
There is a free edition. It is originally open source. They have removed most documentation since vmware bought it. https://sourceforge.net/projects/hyperic-hq/
Well, it's obviously very subjective, but Maven is very easy to understand for me. I looked at Gradle, but I don't like that it's code. We already have enough nasty crap in the actual code, I don't need the same stuff in the build process.
**Sidebar** + **Do not post tutorials here!** Plus: A resource that lists **theNewBoston** as recommended is useless. This resource is discouraged as it teaches bad practices, doesn't adhere to standard conventions, uses horrible variable naming and much more. The list is actually missing the **very best** tutorials, such as *Java for Complete Beginners* by John Purcell, and *Derek Banas'* tutorials.
I second your comments on Maven. I even use it for private projects, because I'm intimately familiar with it. Writing Maven plugins is laughably easy and I have written quite a few at my previous job. Gradle never offered me enough to make me switch.
see :*Which editor or IDE do you use the most?* there is your bias right there
I've not used Jenkins, I'm pretty new to Java and Android automation. I think one of the biggest perks of automating a task is being able to schedule it.
That's an interesting point.
&gt; Doing some Android automating For whom? Are you working for company testing their product as they add features?
I'm just doing it for my school work, in a full stack bootcamp and the teacher has given an extra credit assignment if you can automate an app function on a virtualized android device. I'm using Genymotion to run Android and have written the tasks already, and he's impressed, but I want to see if I can make it run on a schedule.
In the real world, it would be assigned to a continuous integration server like Jenkins because you want them to run *when something changes*.
That's what I am seeing from the above. Do you have experience utilizing Jenkins with Gradle an a virtual device? Any advice?
Cross platform apps to places where there is no JVM, such as iOS or other browser only platforms. Not saying there aren't other solutions, but sometimes there is only the browser, or it's the most convenient. The link is specifically for fiddles, which are awesome for sharing solutions with others or trying something really quickly. Fiddles make providing solutions easy on places like StackExchange, It's great that there is a Java fiddle platform now.
Yes, they are still being used.
Yeah code is bad. We should let build tools do all our software.
OK, this is a bit hyperbolic, but it's more or less my experience. I've been leading teams of programmers for too long to trust them to not mess things up. It takes rules and persistent enforcement and control of those rules to keep the code clean. If I let them write more code in the build scripts, where tooling to control coding standards is basically nonexistent, there's a hall of nightmares waiting for me.
FWIW - my view: https://rule1.quora.com/Use-Maven-Not-Gradle
I would say there is a difference between the two. I agree with you on a technical level but you cannot take a Spring Boot developer using Web Starter and have them work on an application solely leveraging Spring MVC. The "magic" is a large aspect of this "framework". Fair?
As I see it, unit testing is crucial in any big software. I think you need to make them as quick as possible, and as much as you can, covering all the possible errors you can. It's sometimes required to write only after you write your code and then it can get a bit more hard to detect excatly where are the errors. The are also tools who helps detecting errors, such as checkamrx and others is needed. 
I like codingame.com and also /r/dailyprogrammer
It's easy to have Jenkins run some shell commands when a git commit is made. I don't know much about the virtual device though. If Jenkins seems overkill, there may be some kind of way to do this with git commit hooks.
I use maven for simple projects, library code, and stuff to be published. Maven works better for something that is standard and won't change much. The standard compiler, surefire/failsafe, release publish and deploy plugins make CI easy. Like, zero effort easy on all modern ci systems. Maven continues to have an exceptional community, now has color terminals, and best in class IDE support. It's the gold standard for build systems and works perfectly machine to machine in my experience. I love picking up a Maven project to work on, because I already know how it will work. Not much to complain about, unless you find XML ugly which is not an unfair criticism. It's just with a solid maven setup, you won't have to look at it often because it will just work. I use Gradle for projects with multiple languages or modules. The maven web plugins are very good, but Gradle is just easier to customize for slightly weird builds. I used to write lots of mvn plugins, but stuff like tool and file operations are a little easier to do with a language integrated directly into the build script. Gradle also has slightly better inheritance for things like plugins, which removes lots of boilerplate. Groovy is not my favorite language by any stretch, but it's also not very difficult to pick up and they already support a few other languages (not that I've tried, but it's a thing apparently). It has a much higher learning curve than Maven, and the community is still working on consensus and standards, but I think it's certainly improved in the time I've used it. The native wrapper with sources is also quite great... not maven dtd great but very okay. tl;dr - I like both, use both, and have opinions on which to choose for specific things. Both are great and getting better every day.
There is no right answer, of course, but I love Gradle. For standard projects, it is stream-lined (like Maven); when things go off the beaten-path, it is easy to customize. Even when there are problems, the problem-solving effort is rational and usually straight-forward. That said, I am very strong in Groovy and have taken the time to learn Gradle's core concepts. (I find that for most technologies that I dislike, the unvarnished truth is that I haven't learned the core fundamentals.)
One thing I like about Maven is that it's declarative. For example, this website crawls package.json (node.js) config to generate a "Your dependencies are out of date" badge: https://david-dm.org/request/request I don't use Maven but it's a reason I've considered trying it out. But to be honest I'm still at a point with Java/Kotlin that I'm happen when my build works at all.
I'm subbed to subreddit and it's great! Just found it yesterday actually haha. For the coding game is there any learning potential for me to learn as far as logic design goes? I went to school learning C and assembly and the two lacked OOP, datastructures and algorithms which I feel I am lacking the most which is why I do codewars and projecteuler. How does coding game compare? I'm open to anything even if it's a little bit to add, I think a little of everything is great even as refresher! 
As someone who took the same path as you I can recommend you to start with JSP, it is the base of JSF and Spring MVC.
Code isn't bad, and configuration files are also code. Matching expressive power to the task at hand is however very important form long-term maintainability. Consider that when using a less expressive language we (essentially) codifies best practices and architectural concerns into code. While sometimes inconvenient, it very useful to keep abstraction levels correct over longer periods of time. Code is good, but too much expressive power tends to be either abused, or need to be heavily policed. However, XML should be avoided more often than not if humans are to read more than a couple of dozen lines of the code. But I guess that train has passed.
As an experienced developer, I still prefer somewhat verbose formats for configuration. I find classic formats such as cron or regex to be unnecessarily obtuse, error prone and impossible to _validate_ by non technical personnel. Whatever the format, I expect to always be the one writing and editing it anyway. Length of the expression is never an issue.
As someone new to the Java world I'm wondering why vert.x is not more popular.
Uh, I wish I had knew about this library 12 months ago when I was setting up a very complex integration test scenario: I ended up writing my very own Java wrapper for Docker and Docker Compose commands. For what I can read in the website I already love it, will keep it in mind for future projects. 
why is this in java sub?
It's a spam account trying to get as many hits on their channel, don't hold your breath about getting a response.
Gradle has improved by leaps and bounds over Maven in the past year. Gradle 4 marked the Gradle Build Cache as production-ready along with improvements in parallelism. It is now, for a well-configured Gradle projects, significantly faster than Maven for building the same codebase. The only real reason to go with Maven anymore is if your build times do not represent a significant bottleneck and as such your org derives more benefit from Maven's rigidity than from Gradle's power.
Oh really!!
Which part are you disagreeing with? You've not answered the OP's question as to why you posted this here, so there's no meaningful response. Read up on Reddit rules for self promotion, you've way too many links to your channel vs other content, so as it stands yes you're a spam account as far as I'm concerned: https://www.reddit.com/wiki/selfpromotion Even in the most literal sense you've not replied directly to the OP's post, so you've not disproved my point there either.
Okay I read it, I didn't know that, I agree with you
Wow! A hacker with morals :) I subscribed to your channel.
Thanks bro
The demo pages seem empty and I can't find any examples of results.
https://issues.apache.org/jira/projects/MRESOLVER http://maven.40175.n5.nabble.com/Maven-Fluido-Skin-1-5-released-td5863163.html
Java dominated before Android and it will dominate after Android. If you prefer C#, good for you. I will never install a mono application on any of my machines, you can keep your .NET bloat and CLR slowness.
Clearly you missed the part where Mono is old news.
Mhm...
he meant these pages: * https://maven.apache.org/resolver-demos/maven-resolver-demo-maven-plugin/index.html * https://maven.apache.org/resolver-demos/maven-resolver-demo-snippets/index.html because nobody cares about the product, if the result looks ugly :P
**Sidebar** + **No surveys, no job offers!** Such content will be removed without warning.
Reddit is not a **self promotion** platform. You have greatly exceeded the **spam** threshold by only linking to your own content. This is not tolerable. We need active participants that contribute to other's content and discussions, not people who **abuse** reddit **only for spamming and self promotion**. You have been reported to the **reddit admins** because all you are doing is **self promotion** and **spamming**. Should you continue, you will be banned from here without further ado or warning.
Once you solve a puzzle, everyone's answers are revealed so you can compare differences and pick up some different strategies. 
How are they rated? Its hard to pick up good strategies if a portion of the solution present bad code / poor coding habits. Maybe I should take a MOOC datastructure and algorithms class?
https://github.com/vladimir-bukhtoyarov/bucket4j
Can't beat jewelcli 
Thanks for sharing the code samples. It will make jumping into Java EE 8 easier.
I'd prefer they'd exposed simd as API instead of hard coding yet another operation like arrays.mismatch. 
It's the java runtime that directly accesses the hardware resources, and there are separate runtime installs (JRE) for Linux, OSX, Windows, etc... Additionally, JavaFX doesn't actually create any native components, therefore, any access to the hardware (like painting on the screen) is done through the OS-specific java runtime.
If someone is also curious about performance of some java element but you don't want to waste time on this, just write, I will waste my time instead ( ͡º ͜ʖ͡º)
No, that makes no sense. It runs un a bunch of different platforms. Some big iron might not have simd, some future optimisations might make it available elsewhere. Java exposes API's, not implementations. We just happen to know which API's might be more efficient for particular uses.
Best of luck for writing and selling your book! :) I'm studying informatics and for exam preparation I created some simple examples for several things like threading, I/o. .. If you're interested, you can check out and perhaps you'll find some topics you could also mention in your book. https://github.com/marvpaul/Prog3Samples
Please add info on what system, JVM, and HW you are running your benchmarks. If that was Java 8, could you try if Java 9 makes a difference? Also, recently I've been wondering whether this: list.stream() .map(element -&gt; element.getSomeString()) .map(string -&gt; string.trim()) .collect(toList()) is the same performance-wise as: list.stream() .map(element -&gt; element.getSomeString().trim()) .collect(toList()) my intuition says the former will be slower (but more readable :( ). Oh, and this is something that I would love to check both for Java 8 and Java 9...
there is some work being done to do just that under project panama check out https://www.youtube.com/watch?v=Z2XgO1H6xPM 
I'll take a look at your samples when I get a chance.
I'd expect the first to be slower, and both to be slower than using a simple for-loop, but whether the difference is significant in the greater scheme of things would be application-specific. If that's the biggest bottleneck in your application then it's either very well-optimised, or very simple...
add -Dprism.verbose=true to your java command when running a javafx app on my Linux machine I see (during an ant session): [java] Prism pipeline init order: es2 sw [java] Using java-based Pisces rasterizer [java] Using dirty region optimizations [java] Not using texture mask for primitives [java] Not forcing power of 2 sizes for textures [java] Using hardware CLAMP_TO_ZERO mode [java] Opting in for HiDPI pixel scaling [java] Prism pipeline name = com.sun.prism.es2.ES2Pipeline [java] Loading ES2 native library ... prism_es2 [java] succeeded. [java] GLFactory using com.sun.prism.es2.X11GLFactory [java] (X) Got class = class com.sun.prism.es2.ES2Pipeline [java] Initialized prism pipeline: com.sun.prism.es2.ES2Pipeline [java] vsync: true vpipe: true [java] Maximum supported texture size: 16384 [java] Maximum texture size clamped to 4096 [java] Non power of two texture support = true [java] Maximum number of vertex attributes = 16 [java] Maximum number of uniform vertex components = 16384 [java] Maximum number of uniform fragment components = 16384 [java] Maximum number of varying components = 128 [java] Maximum number of texture units usable in a vertex shader = 32 [java] Maximum number of texture units usable in a fragment shader = 32 [java] Graphics Vendor: Intel Open Source Technology Center [java] Renderer: Mesa DRI Intel(R) HD Graphics 5500 (Broadwell GT2) [java] Version: 3.0 Mesa 17.1.5 [java] post ui injection [java] Group@5b78d786[styleClass=root] [java] ES2ResourceFactory: Prism - createStockShader: FillPgram_Color.frag [java] ES2ResourceFactory: Prism - createStockShader: Solid_TextureRGB.frag [java] ES2ResourceFactory: Prism - createStockShader: FillPgram_LinearGradient_PAD.frag [java] ES2ResourceFactory: Prism - createStockShader: Solid_TextureFirstPassLCD.frag [java] ES2ResourceFactory: Prism - createStockShader: Solid_TextureSecondPassLCD.frag [java] new alphas [java] ES2ResourceFactory: Prism - createStockShader: Texture_Color.frag [java] ES2ResourceFactory: Prism - createStockShader: Texture_LinearGradient_PAD.frag [java] PPSRenderer: scenario.effect - createShader: LinearConvolveShadow_4 [java] new alphas [java] QuantumRenderer: shutdown we can only hope in future that there is better exposure of the prism shaders...
Check out jhipster - JHipster is a development platform to generate, develop and deploy Spring Boot + Angular Web applications and Spring microservices. https://jhipster.github.io/ 
Glad to see you are sharing your code on GitHub, it'd be nice if it was the norm for all code books. I'd recommend that you add a license (CC, MIT, GPL, etc) to the code.
Because vert.x is new (roughly 6 years old) and it takes time to gain popularity in a mature development ecosystem. Unlike other languages that have seen a recent uptick in usage, the Java developers need to be convinced that event driven architecture (or at least a new framework) is better than what they already invested time and money in. 
**Sidebar** + **Do not post tutorials here!**
good stuff! i wonder if there is much market for "benchmarking-for-hire"...
The implementation for this "redesigned" equals() looks a lot uglier than any of my equals() implementations ever have. Language features that will help reduce some of the common boilerplate — such as declarations for hashCode(), equals(), and toString() — are currently being worked on. You can hear Brian Goetz, Java Language Architect, talk about it [here](https://youtu.be/oGll155-vuQ?t=15m8s).
I would like to see well example too.
How is it any different from Eclipse/IntelliJ? All major IDEs have the almost the same feature set. There is very little to differentiate them.
I'm thinking of using [WTFPL](http://www.wtfpl.net/) :) But seriously, may have to check with my publisher about what an acceptable license would be.
peak yegor?
Eclipse / Intellij have a better plugin / community base IMO
Well said. 
Requiring each class to create a `byte[]` for an equality check may turn into a massive performance hell. Classes which internally contain large arrays will be required to create copies of them instead of directly running the comparison on the existing objects. This is wasted CPU time copying bytes and wasted memory on the duplicates and a whole lot of garbage to then be collected.
The link above was just a subsection of a much larger survey. I found the methodology summarized here: https://www.jetbrains.com/research/devecosystem-2017/demographics/
Nah, there is difference but .trim takes more time that this difference, so in your example times are just this same, but if I replace second .map with something as simple as getter then version with single map is a bit faster ~10-15% max. So if you need that extra performance then it make sense to use single map for very simple operations like getters, but more advanced operations will make that difference just invisible and smaller than error margin of test. Also I think it is bad moment to benchmark java9, but so far it seems to be A LOT slower, even 2.5x for some larger tasks. So maybe in dev builds not all stuff is working at full speed, I hope so...
and it assume that you have the endianess right... also lets say you have a class with 32 fields, and the first field does not match you only need to compare the first one, but here you serilalized all the field. it's using serialization to solve the equals compare issue ... 
JavaFX GUI components are not "native". JavaFX renders the graphics itself and looks the same on all platforms (excluding some caveats).
In a properly designed project the business logic is separate from the UI so it shouldn't really matter what order you do it in. If you are able to write the logic without depending on UI, that would be great. If you are not that experienced in code design it might be easier to implement it along with the UI.
To add to that, I recommend looking into the MVC (Model View Controller) design pattern.
I'm actually a Netbeans user (you may have guessed) and as far as plugins a few of things I'd need to bolt on to Eclipse, for instance Mercurial support or Maven, come right out of the box. I use it professionally for Java SE and EE and I don't really need anything other than the "Java EE" install. So yeah...there *are* more plugins for Eclipse but I don't feel like I'm missing anything.
ya, my experience is that using streams to collect to a list/array a significantly slower than using a loop to fill the array. But my question is, why, shouldn't this be a fairly trivial compiler optimization?
decouple application purpose - put into an API. then can couple to whatever kind of client (GUI, console, command line, service call, etc) There was an interesting Rust talk at last Rust conf where presenter was creating a new text editor. Wrote the editor engine in Rust and ran it in its own process. The GUI front-end was then written in some sensible language for the platform. So believe GUI was in Swift on OS-X and C++11 on Windows and Linux (because those had bindings already for good GUI libraries). The Rust editing engine just ran as child process to the GUI process but was where all the meat of editing took place.
Keep in mind that enforcing a fixed coverage percentage can lead to many useless javadoc comments. First google result for an example: http://kaczanowscy.pl/tomek/2012-02/pretty-useless-javadocs
Author is officially smarter than I am.
Check out [Ports and Adapters](http://alistair.cockburn.us/Hexagonal+architecture). With ports and adapters, your UI just becomes a shell that plugs into a generic API through adapters. This is cool, because you can prototype a UI and stub the API with dummy adapters, so you can play around without invoking real business functions. You can develop the API independently, exposing a generic interface through ports, which you can test out with a console app or JUnit tests.
javac does not optimize code, even for very stupid code like instance.staticMethod() it will compile to bytecode that contains: ALOAD (load variable to stack), POP (and remove it without doing anything) and invokestatic (and invoke that static method), so it will be just like source code, even if it does not make any sense. JIT... it does not optimize code like that, it will not see what you wanted to do, it will only see what you did and try to compile and optimize code for it, but it will not magically remove what you did and change it something different removing whole classes etc - also it would be pain to create debugger for something like that.
I think that's what the discussion forum is for, to give and receive critical feedback. Over time you will understand the good and bad habits, it's just something that makes experienced people more experienced. But that is a great point though. Probably answered solely by discussion and something a rating can't give you.
&gt; MVC (Model View Controller) design pattern Thank you, I will check that out.
Hmm, I might be able to do that (since I'd like to make it into a desktop or web app in the future as well), but I've never build an API before. It seems like it'd be a lot harder than just making the app straight up as 1 whole thing, but obviously having different components be separate it give you flexibility. I'll think about it. Thanks a lot for your answer.
Seems a lot like what /u/RogerV suggested, thank you for the link and the explanation I'll be sure to check it out. The consensus seems to be that I should make the GUI after I build the actual working app, but also to keep them as separate entities. I appreciate your answers, thanks a lot.
##JustJavaThings
The problem with reports is it requires a human to check it. I would prefer to fail the build: * http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#BEJEFABE * https://pmd.github.io/pmd-5.8.1/pmd-java/rules/index.html#Comments * http://checkstyle.sourceforge.net/config_javadoc.html
While you're at it, check out [Clean Architecture](https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html) as well.
WTFPL is my favourite license 
"lambdas are implemented with anonymous classes" - this is not true. Lambdas use invokedynamic. https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood
And that invoke dynamic is used to generate dynamic anonymous class like this `com.gotofinal.blog.benchmark.part2.StreamBenchmark2$$Lambda$1/1308927845` where / is special marker that this class is special and used and generated at runtime for lambda usage.
Yes I understand it is non-native but then how is it available to look the same everywhere if anyway the access to creating windows and may be widgets is given by each OS?
The intention is not to enforce a defined coverage, but help developers to check the current documentation coverage. In the same way, code coverage tools don't enforce test coverage, just show where the developer may include more tests. I've seen the kind of useless documentation you pointed out in some projects. But it's totally up to the developer to write meaningful documentation or none at all if it will not help.
It's not an anonymous class. It may look like that in a debugger but it's not a class in the same sense as a normal Java class. It is much more efficient. To be exact, that object is a MethodHandle: https://www.infoq.com/articles/Invokedynamic-Javas-secret-weapon
Yes you can. You have my permission to do so. 
I don't like to fail a build due to a javadoc issue. But it's totally personal. And if you start to work on an ongoing project (as it's usual for open source projects), the tool helps to show where documentation can be included/extended. I know PMD and checkstyle and, for the best of my knowledge, they only show individual issues, not documentation coverage percentage. Furthermore, it also requires a human to check the issues. They just show information that requires to be checked. My plugin automates the process by computing documentation coverage for an entire project, presenting results into a single HTML table which is very easy to check. I don't know any maven plugin which does that. The only project I know is the [jdoccoverage](http://jdoccoverage.sourceforge.net). However, it is out-of-date and doesn't present a single-page and yet detailed report.
Oh, interesting, thanks for sharing. I must admit, I could have clicked around those buttons at the top...
What I do is simple access methods in a DAO, more complex logic gets combined into a service.
I've done console apps, and I've done mobile apps as well, but I've always found it very helpful to draw my class diagram with the traditional top down approach. (GUI classes at the top, application level classes in the middle, DB classes underneath, unless you are using a SQLite database, then these classes become part of the application layer) That being said, in my most recent project, I coded the SQLite database/JDBC in console first, then went back and designed my GUI. Thereafter, I wrote my queries and connected the two (two and a half maybe?) layers of my app together with event handlers. This might not be of any help, but because it was an inventory records/tracking/maintenance app, a lot of my logical operations were handled by JDBC and SQLite. Your situation may (more than likely) prove to be quite different than mine. I just found after each iteration it was easier to build in console, import your packages, and build GUI classes around that. It never hurts to have a mockup GUI to see what classes you might need in your class diagram though! Hoped this helped somewhat. 
It doesn't use the widgets provided by the OS, it only takes the window and renders its own content, basically like an image, inside that.
I use DTOs that get passed to DAOs. Those DTOs may make use of 1 DAO or many DAOs when doing CRUD operations. The important thing is that the developer using the DTO doesn't really need to know what DAOs are needed, he/she just sends that DTO to a service endpoint and the persistence operations are all handled automatically from there.
It isn't a method handle, lambdas are normal classes like that, method handles are used to invoke methods in them, and they are optimized for usage like that, as they even can be bound to given object. But it is still normal Class object, you can get it, you can construct new instance of it, and use it like every other classes. The only difference here is that in internal java reflection code you can fix methods to check if given class is that special dynamic jvm one, and check is very simple... return clazz.getName().indexOf('/') != -1 But it is still just a class: https://ideone.com/oDHCnE EDIT: also, you can even read code that clearly generate new class http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/java/lang/invoke/InnerClassLambdaMetafactory.java
So what you are suggesting is to make all the small DAOs and make a DT0 to abstract away the individual DAOs?
Except you can't create a instance of that class from Java code. You'd have to use a bytecode generator. To say that it's just an "anonymous class" is misleading. Edit: there's no way in Java to create a Call site like the compiler does from Java. Lambdas are not at all sugar around an anonymous class.
So basically if I wanted to create my own gui toolkit with java, I could call each OS window and draw my things? If so, how do you tell your computer to draw in the screen?
As you can see, I created instance of it just fine. And java generate bytecode for it too, and after that it is just pretty normal class. And invoke dynamic is all about returning class site, that is later optimized by JIT to very simple direct call (at least if call site is static) Lambdas are just sugar, pretty neat and great piece of sugar, you can even place breakpoint in that code and track each bytecode generated (by ASM library, pretty popular one, everyone use it to generate bytecode, even java itself) to provide classes like that. InvokeDynamic gets CallSite that points to method of generated class, that's all magic of lambdas. Ofc there is special support for them in bytecode, so there is place to stare that code that should be used in generator etc, but at the end, it is just simple call site to dynamically created method in class and everything gets optimized by JIT
If you are using something like Hibernate or really any JPA provider, and all those 5-6 tables are only referenced by some main object. Then I would just make the DAO for the main object and have your service decide which components should be loaded which are mapped to it. If you really wanted to, you could use your JPA provider to do prefetch (join) other tables during the query and just add those as extra methods in your DAO. As a rule of thumb I say: if I'm querying directly for it, then add a DAO. If it's a referenced table, don't. Example: I have a Customer table which references a User table. I only ever get users based on the customer. So I would create the CustomerDAO with an entity Customer which had a list of users. I can either prefetch the users when I query for the customer (decided by the service later whether I do getCustomers or getCustomersAndUsers) or I can make it a lazy load. In either case, the service later should handle if you want populated users or not and should abstract the logic of the DAO call from the end user.
The window creation, drawing and event handling are OS-specific and probably implemented as native library calls into like C libraries or something.
Yeah, that's pretty much what I do. One DAO per table. At the DTO level you can put composition of entities that make sense in your business case. In my project one of our more commonly used DTOs probably gets mapped into 15 or so tables. So hiding all of that complexity is really helpful. You don't need to know how it gets persisted, you just send it to some service and it takes care of the rest for you.
Is that a personal preference or a general convention for DAOs? It's not really about the load order, more the unity of the classes. They are so tightly knit together that if there was a DAO for each then there would be a lot of duplicate/redundant code that they all use.
A DAO is just a Data Access Object. It doesn't have to do with individual tables at all. The entire point of a DAO is to hide all of these details. If you have a DAOs dependent on the details of individual tables, that kind of defeats the purpose of the DAO pattern. The point of a DAO is to say, I as an application need X data, with the specific attributes that I need specified as properties in a DTO (Data Transfer Object). I don't know or want to know if it is one table or many tables, or even a database at all. Define the DAO in terms of what you want, not how it is stored the database, if that makes sense.
That makes a lot of sense actually. My office typically uses the one to one mapping but this is much more intuitive. Thanks
We disagree
So, the convention for DAOs is that there should be something to query for. If you're using something like raw JDBC or JDBCTemplates, and you're not doing joins then you would want separate DAOs because you're accessing separate data. Without at least knowing the structure that you're dealing with, it is difficult to know an exact solution. From my example: if I have Customers and Users, but I don't do a join (meaning I query for a Customer and then query for the Users of that customer) I would expect a CustomerDAO and a UserDAO. However I would most likely have a CustomerService which does the query for customer followed by the query for users of that customer.
So even if the only time you ever care about the Users is when looking at Customers you would still have a UsersDAO and not just nest the Users query inside the CustomersDAO?
As I said in my original post, if it is a referenced table only then I would do a JOIN in the query. THAT query should live in CustomerDAO. I understand that you don't want extra DAOs, but at the end of the day, if the User table is being queried separately from the Customer table (meaning no fetch/join query) then split it up. Eventually, you will want CRUD operations for that table (maybe not today, maybe not tomorrow, but you don't want to start mashing more User operations into your CustomerDAO).
Cmon, just read the code :D This is just truth, you can go and debug it and see it by yourself or just read the code ;)
[removed]
[removed]
This is just dumb. The operator `instanceof` isn't an exact type check. Subtypes are instances of super types. The subtype doesn't have to touch the internals of the super type. That's what `super.equals()` is for. Direct byte check completely defeats the purpose of `equals` being polymorphic. Two objects can be logically equal and not "exactly" equal. For example, this is true: new ArrayList&lt;&gt;(Arrays.asList("Ha")).equals(new LinkedList&lt;&gt;(Arrays.asList("Ha")) How would a linked list "digitize" to the same thing as an array? The internal representations are completely different.
[removed]
Yah. Eventually we may need to do CRUD operations on these tables But these tables are generated externally and imported in with non-Java code. They are mostly read-only tables so CRUD operations would be very rare 
I read the code. If you believe that all that is the same thing as an anonymous inner class you're crazy. I don't know what to say.
Yes, so when I say CRUD, that could just mean 'I have 5 ways to query for users' in which case I would want all of those User queries to be contained into one DAO.
simd.js works on different platforms. Java could have similar API.
Aah ok gotcha. That makes more sense now
java -jar your.jar or jd-gui if you want to look inside.
No you can not. You don't have my permission to do so.
Huh? What do you mean? DO you not open it regularly by double-clicking it?
What's this got to do with Java? Also looks like possible vote manipulation between the three other commenters, very suspicious.
It isn't exactly this same, but it is implementing like that, even class name of generator tells you that `InnerClassMetaFactory`, it is still just a class at the end. If it isn't, then tell me instance of what I've created :P And why that factory is generating bytecode for a class and then defining it. Also... YOU CAN generate lambda from java code: https://stackoverflow.com/a/26776042 It use this same stuff to do so, the only difference is direct usage of invoke dynamic to handle this better and more efficient. (and allow for future changes)
Okay, as a Jr. Java developer I enjoyed it, I'll keep an eye on it!
Run it from the command prompt by typing, "cmd," in the start menu and pressing enter. 
Just make sure that if you take advantage of Java 9 specific features, that the target JVM your application will run on is also Java 9.
Jr as Junior? Then still remember that premature optimization is the root of all evil, no one will want dev, especially in popular webdev that will spend all day to save 1ms while connection to db and client takes already 400ms and you can't do much about it :D It is good to know what and when is better, but don't waste time unless it's needed ;) But by knowing what to use you can save few ms without spending additional time on it - and that is good! Just saying.
I'm pretty sure you have to open it from the command line first before you can double click. try it, but don't quote me on that. java -jar yourjarname.jar will open it from the command line.
[removed]
Yup. I'll remember, thanks.
Alright, trying to open the jar file through command prompt, I get the error "Unable to access jarfile minecraft_server.1.12.jar". (I used this command java -Xmx1024M -Xms1024M -jar minecraft_server.1.12.jar)
java -jar "c:\users\you\Downloads\minecraft_server.1.12.jar" if you dont need to set the jvm args (xms xmx) dont. Forgot to add ""
you will have to put the whole path into the name of the jar, sorry I forgot to mention that. So it would be something like java -jar C:/user/whateverdirectory/yourjar.jar
&gt; I could call each OS window javafx handles the platform specifics so you don't have to create per-platform code. if you want to create a gui widget (custom button or whatever), you just need to work within the classes/functionality of javafx (control, behavior, etc)
Jar files are really very much like zip files, so you can possibly open them with WinZip. Associating them with java.exe is a bad idea, that runs them like an EXE file and so you're running unknown code.
* Open the command line terminal cmd by searching "cmd" in your windows search, right-click, **"Run as Administrator"**. * Test if your Java environment variable is set by typing `java -version`. If all is right you will get the version displayed otherwise you get an error. If so make sure Java is installed correctly and your "PATH" and "JAVA_HOME" environment variable is set. [How to](https://www.computerhope.com/issues/ch000549.htm). Normally the installation of Java does this already for you. Restart "cmd" to test it, it doesn't catch changes immediately. * In cmd, navigate to the folder where your .jar file resides by typing `cd "&lt;path&gt;"` replace everything between &lt; and &gt; (inclusive) e.g. `cd "C:\Program Files (x86)\Minecraft Server"` * Run command `java -Xmx1024M -Xms1024M -jar minecraft_server.1.12.jar` to run it. [See here](https://www.youtube.com/watch?v=y3RjXwZmUKs). * If it runs, it will first abort saying you need to agree to the EULA. Inside the folder an EULA.txt file was created. Open it up and replace `eula=false` with `eula=true` and redo above command (arrow up in cmd) 
Video linked by /u/_INTER_: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [How to make a Minecraft Server for 1.10.2 or 1.11.2](https://youtube.com/watch?v=y3RjXwZmUKs)|LBEGaming|2016-02-29|0:04:44|4,949+ (90%)|766,858 &gt; Update Video for 1.12: https://youtu.be/igP9jaKOTJ8 ... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/_INTER_ ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dkcmi2i\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v1.1.3b
Nice! I love Packt books. Is there a way I can find out when it'll be released. More than likely I will buy me a copy.
It is the same way it works on Android and IOS isn't it? QT and other multiplatform frameworks should do the same 
Where would I find the you part?
Thanks for your support. The book is scheduled to be released in December of this year. &gt; "I love deadlines. I like the whooshing sound they make as they fly by" &gt; &gt; -- Douglas Adams
If you're going to be doing an Android App don't use MVC a lot of the frameworks in android lend itself better to MVP/Clean Architecture https://news.realm.io/news/eric-maxwell-mvc-mvp-and-mvvm-on-android/
Just out of curiousity for the unenlightened me, what are the significant changes in Java 9?
Whatever your username is. So, if your username is Bob, it would be C:\Users\Bob\otherfoldersandfiles Edit: open explorer, click My Computer, click the C drive, click the Users folder, and see what the right name is for who your signed in as.
I don't see any good reason not to
But say for example I don't like javafx, and I want to create another toolkit, how is it done? because at some point I will have to handle the screen drawing through native apis, so there is not truly multi platform code
If I were to guess- You need to set eula=TRUE inside of your eula.txt file.
I think this is a good idea if you have to maintain a public API like JPA or other compile time only components you provide which serve as a boundary for other components depending on yours. Sure this does not protect you from stupid developers but at least it acts as a reminder that it and its contract should be documented.
you'd use jni to call into platform apis. possibly you could use lwjgl (ie create UI with opengl), but it may not be optimized for this purpose.
All maven code coverage plugins can fail the build based on coverage targets. This doesn't take away from the benefits of looking at the site report to see the actual coverage and where improvements can be made. But I will always prefer to fail the build based on coverage targets for the faster feedback loop. Generating a maven site takes too long * https://docs.atlassian.com/clover-maven-plugin/latest/check-mojo.html * http://www.jacoco.org/jacoco/trunk/doc/check-mojo.html * http://www.mojohaus.org/cobertura-maven-plugin/check-mojo.html
Actually mine is a pretty similar thing in terms of components, although I might use an open API DB and just pull from that and only do the calculations in-app. I think I'll make a working console app and go from there. Thanks for the insight.
1-to-1 mappings are easy when you generate and regenerate automatically upon change of the db schema. If you prefer to program by hand (like me), go for as much abstraction as possible. I have a single DAO per queriable db entity, which has a specific db-known name. (Queriable, is that a word? It's a table, a view, a data store, anything that can be queried.) My DAOs neither mimic the db entity nor map them. They identify the db entity's name. I have a single DTO which goes and prefetches from the data store the db schema of a DAO's db entity, fetching all column information like data type, key, foreign key, etc., but not the data. It also sets up CRUD sql on the fly, and determines user privileges. When a screen needs data, it tells the DTO to load the items belonging to a DAO, and boom! Data gets loaded. So when the db schema changes, all my applications need is a restart. (Well, mostly. My DAOs also feature a field whitelist and blacklist, and they do require updating in a limited amount of cases. And the screens can define the fields upon which to filter, so if those particular fields change in the db schema, they require changing, too.)
Module system and reactive streams
Try /r/learnjava/
The only thing that interests me are the things that don't really affect day to day, are the platform performance improvements. So unless I need one of the new intrinstic methods I won't worry about upgrading to Java 9 
What about a VIEW for those external tables and a DAO for the view?
Bean validation sucks. Actually, nearly all of annotation based specs/libraries/frameworks are bad.
Good read. But if you're hoping this gets more exposure, I'd watch using pejoratives like in your Person class example.
You might want to wait a bit until Java 9 has some bug fix releases. Java 9 has some big changes in it, including an entirely new module system. In addition, many third party libraries may not support Java 9 right away. So... If your new projects need to be released fairly soon, I'd stick with Java 8. Otherwise, give Java 9 a try.
Its just a zip with a different extension. If you are on windows, try 7zip
Some of the assembly would be useful such as why on longer arrays the generator approach is quicker. Either your foreach loop is not compiling down to an indexed loop or it isn't able to elide the range check for some reason (maybe a 64 bit index is preventing that).
Man, there's some good stuff in here. 
 &gt;It is the same way it works on Android and IOS isn't it? I don't know what you mean by that because Android and iOS apps are created using native UI components specific to those platforms. Frameworks like React Native are an abstraction on top of that though. &gt;QT and other multiplatform frameworks should do the same Qt differs from JavaFX because it actually uses native UI components on every perform as opposed to designing and rendering them itself, so it gets a more native look.
For personal projects? Sure. For work? Ehh... depends on what is at stake and when you are going to production. Either way, watch Trisha Gee's presentation at GOTO 2017: https://www.youtube.com/watch?v=watS54iWH9U 
Video linked by /u/BestUsernameLeft: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [GOTO 2017 • Real World Java 9 • Trisha Gee](https://youtube.com/watch?v=watS54iWH9U)|GOTO Conferences|2017-06-29|0:58:01|81+ (94%)|4,944 &gt; This presentation was recorded at GOTO Amsterdam 2017... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/BestUsernameLeft ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dkd37j8\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v1.1.3b
I can't believe it was actually evaluated by both OSI (https://opensource.org/minutes20090304) and GNU(https://www.gnu.org/licenses/license-list.html#WTFPL). WTF.
...Can you not?
http://minecraft.gamepedia.com/Tutorials/Setting_up_a_server explains everything you need to do.
Therefore, a piece of javascript code running on a malicious website can also write to that cache (side channel attack), allowing attackers to discover where software components, like libraries and RAM-mapped files, are located in virtual memory. Not that I was an expert, but just because one can write to the Cache by side channel attacks, doesnt mean he can read it too does it? Also the part how it is sufficient to go to a malicious website to get the attack going: yes, they can get the location of some things of my programs, but they still need an exploit, that utilises these information dont they? 
[removed]
If tried to to something like this, for my game in lwjgl. It works pretty well, i mean the only thing you need from lwjgl is the window, drawing capabilities, and the events. Nothing too fancy
I'm trying to picture what type of person you are. Are you the big ugly loser type?
There is another plugin to rule them all https://plugins.jetbrains.com/plugin/7846-typengo. It converts shortcuts into mnemonics
I'd say over half our direct third-party dependencies are doing blatantly dodgy things like calling sun.* methods still, which Java 9 is reportedly going to block.
Looking at the feature set, I honestly would not start using it until it is really out (Last second delays can happen). Is there a specific feature you were hoping to use, or did you just want to leave the option open?
Ok, fixed
They're literally just sugar around an anonymous class, but it's an implementation detail that isn't encoded into the class file. The lambda meta factory of the VM is free to do whatever it wants to link the call site. The current stable JVM creates a class that implements the type—just like an anonymous class. It's hard to tell whether you're just being pedantic in your argument (for instance: there's no such thing as an anonymous class anywhere, all types have names!) or you just don't know about the implementation of the current lambda meta factory. Your focus around the behavior at compile time is irrelevant to what's happening at runtime which is what the post is about. And at runtime it's all classes that are as close to "anonymous classes" as you can really get.
Don't worry. Most of us know your statements are accurate.
use java8 
If you don't have any business restriction and have the opportunity to use Java 9, I think it might be worth your time to investigate using Kotlin instead :)
I used to work on a project where (I think) javadoc was enforced in the past (not at the time when I started working on it). Why do I think so? Because it was full of comments like this: /** * ... */ The "..." is really all there was in the comments.
For sure. I didn't think this way. I'll see how to provide some configuration to fail the build according to a coverage percentage. Thanks.
 Not quite, actually. Just hate node js idiots.
Looks like I messed up the submission. Oh well, here is the actual URL - https://adoptopenjdk.gitbooks.io/adoptopenjdk-getting-started-kit/en/
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Basic helper guide to get started with hacking OpenJDK (x-post from \/r\/java)](https://np.reddit.com/r/programming/comments/6nzqqp/basic_helper_guide_to_get_started_with_hacking/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
You are right there are spam accounts here trying to promote this shitty post.
We made it!
Why is this being downvoted? I found the conclusion to be really interesting!
I wouldn't model things on such a 1:1 level, except for really trivial single-table-based CRUD use-cases. I find it to be generally much easier to avoid the DAO "layer" and run SQL queries from a "service layer", which has access to all tables, where a service implements a business use-case that is not strictly tied to any database tables. People tend to add [too many layers](http://geek-and-poke.com/geekandpoke/2013/7/13/foodprints) to their applications because of the fear of needing to replace a layer entirely. This probably doesn't happen, and if it does, there will still be many surprises, so the DAO layer doesn't add too much value, in my opinion.
SpringBoot @SpringBootApplication @RequestMapping https://projects.spring.io/spring-boot/#quick-start
Thanks but I think you're thinking that it is very complicated when it is not. Anybody can write the benchmark, output the asm and put in jitwatch. Nowadays the tooling in java is very good to do this kind of stuff. The more your expose to the asm the more it make sense the easier it gets. If you are interested in that kind of thing, Aleksey Shipilёv has a great serie of post https://shipilev.net/jvm-anatomy-park/
I'm not an expert but maybe [jwt](https://jwt.io/introduction/) is what you want.
You can implement OAuth2
I'm going to dig into this! Thanks
Thanks I see Google uses this as well. So that will make life easy
Jwt might be easier to implement. I don't know what you are trying to build, but I think I would try to start as easy as possible. 
How do you view the report if it fails the build without a report? Do you just run clover:clover again? 
As others have noted, you can use OAuth2 (my preference) or JWT. But why? Authentication and authorization are out of scope for a RESTful web service unless you're building a giant monolith. Even then, I'd put the auth flows in their own service.
they fucking wanted to
No - it is not literally sugar around AIC. If that were true the performance and memory implications would be exactly the same for a lambda or an AIC and they're not. E.g. each usage of a unique AIC creates a class that must be loaded by the classloader, etc. This is not true for a lambda. Also, here is Oracle's benchmarking of lambdas vs AIC - if lambdas were just sugar what would be the point of this PDF? http://www.oracle.com/technetwork/java/jvmls2013kuksen-2014088.pdf Edit: maybe you're thinking of JVM languages like Scala? Scala lambdas are literally sugar for AIC
Regardless on what method you use to authenticate the user, jwt or OAuth2 or something else, i would recommend making sure that the api is only accessible over https. Now that lets encrypt gives out free certificates it's trivial to setup https, and it guards you against a whole class of programming misstakes.
Is it a server-client architecture? Have the client install a PKI certificate
Sorry I'm showing my ignorance now. My thinking is that I would need to authorize every request in a stateless api. 
I'm making a cross between a social media app/ with a pda. Just personal use right now but I want security to be a core part so I don't want to leave it to later.
Each use of lambda not only causes a class to be spun by the lambda meta factory with a bunch of helper methods, but the body of the lambda is hoisted to the enclosing class as a method. So ignoring anything the JIT does lambdas are more costly than anonymous classes due to the added method overload. Perhaps you're talking about capturing vs non-capturing lambdas? A singleton instance will be cached for non-capturing lambdas. The call site is rewritten to point to a static getInstance method on the generated class which can either return a new instance or a cached instance upon every call. To your performance claim of course the reification of a lambda to a class by the VM upon first use will be faster than classloading. The generated class is injected into the classloader without having to do I/O and without having to run the verifier. The VM trusts its own codegen of a class to be accurate.
Have you seen the official tutorials on the Spring website?
&gt; Authentication and authorization are out of scope for a RESTful web service unless you're building a giant monolith. How do you secure the RESTful service?
They are speaking microservice purist nonsense, ignore it and just use JWT.
Yep I've followed a few but the problem is it doesn't tie together a complete example of user registration, login, CRUD rest API.
I've tried this quickly and it appears to generate what I want, along with a lot of other stuff. Will generate one and then try and pick it apart into a new project with less noise. Cheers.
I do Windows on Windows (workstation 12) at work...Assuming you have enough resources to share with the guest, I don't see why you'd have any issues. An SSD really helps if you can swing it.
&gt; ignoring anything the JIT does &gt; reification of a lambda to a class by the VM upon first use will be faster than classloading QED 
Why?
Yeah I think you're going to have to learn about and then implement each piece as you go. You'll get your own complete example at the end. Starting at https://spring.io/guides, I would follow some combination of two or more of these: Building a RESTful Web Service Securing a Web Application Accessing Relational Data using JDBC with Spring Integrating Data Accessing Data with JPA Creating CRUD UI with Vaadin Spring Boot and OAuth 2 When you run into trouble, Google, read the docs, get on the Spring forum and ask questions, go to /r/springsource and ask questions, etc. Also, FYI, another good source is Baeldung (www.baeldung.com)
Read the lambda meta factory implementation. You seem intent on ignoring it or this whole thread wouldn't exist!
I have did a program using commandline args not only just showed how to get args.
Seconded. Kotlin is a very pleasant language to use, and its integration is Java is practically seamless.
Here you go https://www.owasp.org/index.php/REST_Security_Cheat_Sheet
So, I guess a new AndroidStudio wont be far behind.
Sorry, but I didn't get your point. Just some stupid developer would write empty javadocs only to increase documentation coverage. If there is a javadoc like below, my plugin won't count the method, parameters or return value as documented because they are just empty. If you include something like ... you are cheating. /** * @param id * @return */ public int someFooMethod(int id){ return 0; } What I am planning to do is to try showing the quality of the documentation. For instance, the javadoc below is useless and should be pointed out: /** * Some Foo Method. * @param id the id * @return */ public int someFooMethod(int id){ return 0; } 
Most of the features are linked to Java 9, while Android did still not quite arrive on Java 8.
Smart: check. Sleek: check. Snappy: maybe on a m4.256xlarge
You can copy the .jar file to any place you want. jash3 assumed you've left it where webbrowsers usually download files to. The path you specify between " " just needs to point to your .jar file location. *Right click on your .jar file &gt; Properties &gt; General Tab &gt; Location*
Ever heared of JavaFX?
Yes, infact currently using that. Lol
Nice article. Here's something interesting - firstly, if you change the class to an interface and replace the Function member with an actual method, then it simplifies slightly: public interface Transaction&lt;T&gt; { T action(EntityManager em); static Transaction&lt;Void&gt; withoutResult(Consumer&lt;EntityManager&gt; action) { return of(em -&gt; { action.accept(em); return null; }); } static &lt;U&gt; Transaction&lt;U&gt; of(U value) { return of(em -&gt; value); } static &lt;U&gt; Transaction&lt;U&gt; of(Function&lt;EntityManager, U&gt; action) { return action::apply; } default &lt;U&gt; Transaction&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; f) { return of(em -&gt; f.apply(action(em))); } default &lt;U&gt; Transaction&lt;U&gt; flatMap(Function&lt;? super T, ? extends Transaction&lt;U&gt;&gt; f) { return of(em -&gt; f.apply(action(em)).action(em)); } default T run(EntityManager em) { try { em.getTransaction().begin(); final T result = action(em); em.getTransaction().commit(); return result; } catch (RuntimeException ex) { em.getTransaction().rollback(); throw ex; } } } It then becomes clear that the transaction functionality (in the `run` method) is essentially peripheral, so if we remove it (along with `withoutResult`) and also replace EntityManager with a generic parameter (since the type is not used in the monad code), we can simplify further and end up with this: public interface F&lt;S, T&gt; { T ap(S s); static &lt;S, T&gt; F&lt;S, T&gt; of(T t) { return of(s -&gt; t); } static &lt;S, T&gt; F&lt;S, T&gt; of(Function&lt;S, T&gt; f) { return f::apply; } default &lt;U&gt; F&lt;S, U&gt; map(Function&lt;T, U&gt; f) { return of(f.compose(this::ap)); } default &lt;U&gt; F&lt;S, U&gt; flatMap(Function&lt;T, F&lt;S, U&gt;&gt; f) { return of(s -&gt; f.apply(ap(s)).ap(s)); } } Congratulations, you've rediscovered the [function monad](http://www.mjoldfield.com/atelier/2014/07/monads-fn.html), also known as the *reader monad*. You should be able to see that your `flatMap` implementation is equivalent to the function monad bind operation: x &gt;&gt;= f = \r -&gt; f (x r) r vs of(s -&gt; f.apply(ap(s)).ap(s)) :-)
These are completely based on my personal choice, however ThenewBoston does provide some good content where you can learn basic concepts for free. I respect your suggestion and I will go through the Java for Complete Beginners by John Purcell, and Derek Banas' tutorials. and will update the blog. Thanks for bringing this to me.
Does it handle JavaFX GUI design?
Perfect thank you! How did you come across this? (So I might do like you)
You would. Clients pass their bearer token in authorization header. While processing the request, the RESTful API calls the auth service to verify the token is valid.
We have our services behind Traefik and route validation of API requests to our OAuth2 service.
&gt; I have no clue where to go from here &gt;_&lt; How about the big red box in the sidebar?
So far my biggest hurdle is the so many different IDE's and tooling available - get Visual Studio and you're off and running in .NET land - with Java I'm finding I have to go out and download a bunch of plugins, sdks, runtimes, app servers, build tools, etc and Frankestein them all together in a working dev setup...is there anything out there (IDE wise) that just has everything I need to get up and learning?
&gt; Windows 10 native look and feel Don't have a Win 10 machine nearby to try this out on, anyone have any screenshots of what they mean by this? 
Nothing screams "sleek" like a complete lack of screenshots.
Yeah, there's no way I'm believing it's snappy.
&gt; Debugger: filtering arrays, collections, and maps that is actually really useful! &gt; Arbitrary modules can now be marked as Unloaded to conserve CPU and memory resources when working on large projects. I guess, this is like in Eclipse now?
You have a long way to go. How sophisticated of a regular java application have you written?
I ran them side by side, and couldn't figure out what they meant.
https://www.jetbrains.com/idea/specials/idea/whatsnew.html?landing
OAuth2 tends to make things anything but easy. Especially when working with non-standard implementations like Google's.
Yes, sounds like the 'close project' in eclipse.
Owasp is like read-only reddit for security. Great resources.
It uses SceneBuilder for UI design but the XML editing is so nice you probably will just end up using the editor.
Can't pinch to zoom like in 2017.1 I really need that. Edit: I'm on a mac.
Check out my stack, it does exactly what you want (auth, rest, rbac, hibernate): http://github.com/lugrugzo/spring-stack
http://imgur.com/a/LCSLq can't pinpoint any change?
I think you are looking at this the wrong way. Unless you have really made big mistakes during Glassfish installation, most of your slowness should come from the application itself. In other words, if your application is really slow, optimizing Glassfish will have no effect in the final result. It also depends on how you use Glassfish. Does it manage the database connection pool? Or the application manages it itself? Do you have SSL on Glassfish or an external Apache? And so on... Also if slowness appeared just by moving systems in a physical manner it seems to me that you have bigger problems than Glassfish In the end I would advise you to **measure** your slowness and find where is the real bottleneck (the DB? the app? the firewall? the latency?) _before_ doing any blind optimizations. I also assume that you have already read inside out the Glassfish administration guide.
Well that's fancy schmancy. Going to have to check that out. Including authentication/authorization into a RESTful web service doesn't make it a giant monolith.
I absolutely agree....and I do think the app is the problem...but I need to convince the client that we've done everything we can with our infrastructure before I accuse the developers. We are using tools to measure different metrics to see if it's something else. I am not an expert at all in glassfish. Some in my team are good but nit great. I just started 3 months ago and was not involved in the creation or selection of glass fish 
Boom!
I can describe it best by saying it looks more like Visual Studio after the switch. I prefer the Intellij look, switched it back almost immediately.
IntelliJ and AS have entirely different release cycles. 
Does it have multitouch support yet? Been waiting for that for forever.
I've got my Lets Encrypt certs! :D
&gt; Including authentication/authorization into a RESTful web service doesn't make it a giant monolith. Of course. But I see a lot of organizations shoving everything into their monoliths; including auth services.
I love this library, and I like the cool background - but hasn't LWJGL 3 been out for quite a long time by now?
If you just want to convince the client then here are some basic things: https://www.c2b2.co.uk/middleware-blog/glassfish-4-performance-tuning-monitoring-and-troubleshooting.php https://dzone.com/articles/glassfish-4-performance-tuning Basically they mention stuff generic to Java apps (and not so much glassfish specific)
Thanks!!!! I'll review this. 
It starts off well for the first 6 months but then I find it slowly degrades overtime and get all these annoying system errors poping up on the VM. I don't have a SSD though but imagine it would run really well if I did. 
On windows, the setting for scroll to zoom has to be enabled. Maybe it got disabled somehow for you.
Disable plugins you aren't using.
Scene builder is what you should be using to design JavaFX guis. IntelliJ offers to open scene builder if you right click on a FXML file.
I think it's been out for over a year :D
Check the [what's new](https://www.jetbrains.com/idea/specials/idea/whatsnew.html) page. Mostly settings menus it looks like.
&gt; *LWJGL 3.0.0 Released!* &gt; *04 JUNE 2016* &gt; *https://blog.lwjgl.org/*
 Well owasp standard's quite known, after work research i end up and since years i quite follow owasp top ten that every developer my opinion ahould check
Got this working: https://github.com/macdice/syncreplay-spring-demo Using @Transactional(readOnly=X) annotation. Thanks for the idea. Rather than hiding retry inside the JDBC driver (which may make sense as an alternative move) I used whole transaction retry based on Spring Retry.
For my first attempt I did it a way that doesn't involve a modified JDBC driver (though it does have a special DataSource): https://github.com/macdice/syncreplay-spring-demo
(you're right in that this isn't the right subreddit for what you're trying to do, but) short answer: nope.
Oops, seems I was misinformed. Should have checked the dates.
But why is the repository mostly Kotlin? No use for me if thats the case
Why? The jars dont care if they were written in kotlin or java
Just look for the `stolen` attribute on the `&lt;video&gt;` element.
Do you have to install any other libraries for it to work? Where did you get the file from?
You are absolutely right. The transaction monad is an instance of the Reader monad. This is also mentioned in the article. &gt; We created a monadic transaction type for combining transactions and were able to define reusable transactions. The more general concept is known as Reader monad. It is intended to read values from an environment and feed them to functions. With Reader we are able to do dependency injection without any framework. I like how you made it clear that the run method with the transactional logic is only peripheral and shaped out the Reader monad. Just yesterday I got to know a project which uses the DB monad of functional java to describe database operations and provides different interpreters: https://github.com/novarto-oss/sane-dbc#interpreters
I got the program from [this](http://kanjitomo.net/) website. The only instructions it gives is to download Java.
https://en.wikipedia.org/wiki/Optical_character_recognition = OCR Your errors involve "kanjitomo.ocr" so it has to do something with that, I would assume. I dont use this program, but I would say you are using it the wrong way, maybe you try to analyse a picture where no characters are in it. From the website: "Instructions When you first start KanjiTomo, no file has been opened and the program is in Automatic OCR mode. This means that you can point the cursor anywhere on the screen and the program tries to identify the image under cursor as Japanese text. [...] If the image has large characters or complex background (for example in title page), it might be necessary to manually mark the text. This can be done by click and drag with left mouse button over image (file mode) or zoom frame."
**Optical character recognition** Optical character recognition (also optical character reader, OCR) is the mechanical or electronic conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document, a scene-photo (for example the text on signs and billboards in a landscape photo) or from subtitle text superimposed on an image (for example from a television broadcast). It is widely used as a form of information entry from printed paper data records, whether passport documents, invoices, bank statements, computerised receipts, business cards, mail, printouts of static-data, or any suitable documentation. It is a common method of digitising printed texts so that they can be electronically edited, searched, stored more compactly, displayed on-line, and used in machine processes such as cognitive computing, machine translation, (extracted) text-to-speech, key data and text mining. OCR is a field of research in pattern recognition, artificial intelligence and computer vision. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
How do you run it? On mac running the launch.sh on the command like seems to work fine at least, so it doesn't require libraries not included in standard JRE.
Look at the Run configuration drop down. It had rounded edges before. Here's another screenshot: http://imgur.com/a/BwDvy 
Your post history indicates that you have **gravely exceeded** the *reddit wide* threshold for **self-promotion** and thus are considered a **spammer**. Either you become an **active participant** of the community who takes part in other discussions and links to other sources **without self-promotion**, or if you continue spamming, you will be permanently banned.
By now, you should know that such posts belong in **/r/javahelp** as is **clearly indicated in the sidebar**. Your posting and comment history indicate that you have previously posted a lot there, that you even tried to learn Java programming, so your "I just downloaded Java" statement cannot really be true. **Post removed** 
**Sidebar:** + **Do not post tutorials here!** As far as I remember, this is **not your first warning**. Next time, you will be permanently banned.
&gt; I realize this might not be the place to post this so if it's not then please direct me to the proper sub-reddit. Have you had a look at our wonderful **sidebar** which **clearly states** to address programming help to **/r/javahelp**? Even since your question is more of a **general nature** and **not Java specific** it should be posted in **/r/learnprogramming** at best. Still, the answer is **no** it isn't possible. **Post removed**: programming help 
I was just agreeing with this statement (because of past experience that I had): &gt; Keep in mind that enforcing a fixed coverage percentage can lead to many useless javadoc comments. Imho if something is enforced (by automatic means) in a software project then you get the minimum needed to pass that check. If the check only checks if a javadoc is there or not then an empty javadoc is enough to get past it. I think metrics on their own can be useful to give some insight - but they shouldn't be enforced. &gt; For instance, the javadoc below is useless a should be pointed out I agree. 
Your post history indicates that you are only linking to content from a **single source**. According to the **reddit policies** this is considered **self-promotion** and **spamming** and thus is **against reddit policy**. Either you become an active participant in other discussions and link other content as well **without** any traceback to self-promotion, or you will be permanently banned and reported to reddit as spammer.
I'm sorry but I haven't had any warnings before. I thought this group was an opportunity to tell people what I learnt. Guess I'm wrong :) I'm really sorry for being a trouble. I promise that I'll not to post any tutorial hereafter.. 
I'm open for discussion - if you think that this article is completely irrelevant for Java category and doesn't provide any value for Java developers, then I get why it has been removed. Otherwise not. I'm not reposting the same content for several hundred times like others, neither I am the author of the article. This is a very tough way to say hello, but I get that some reddits are more strict than others. Have a nice day.
The point is not whether this is relevant for Java or not, the point is that you're only linking content from a **single source** and this is, according to reddit **spamming**. Your post already went negative minutes after you have posted it, which is indication enough that the content is not wanted here.
I'm not going to argue. The submit went negative, but it was in fact one downvote. Reading from Reddit rules: What constitutes spam? Am I a spammer? Sometimes spam is obvious, but often it is a gray area. If your contribution to Reddit consists primarily of submitting links to a business that you run, own or otherwise benefit from, tread carefully. If you flood a Reddit community with posts or comments, you may be considered a spammer. Instead, post one or two times and see what happens. If other users in a community historically downvote your posts or ones similar to yours, but you feel the need to continue submitting them anyway, you may be considered a spammer. --- I thought I'm not violating any of the mentioned rules. However I will keep in mind that in order to be considered as a part of this community with eligibility to submit links, I need to improve variety. 
&gt; However I will keep in mind that in order to be considered as a part of this community with eligibility to submit links, I need to improve variety. Not only that. You need to *actively participate* in other discussions.
sorry sir.
Honestly, with your posting history and with all the shadowbans you already have had, you should by now know better. You are not actively participating in other threads, your only contribution to reddit is spamming links from the same source and checking if you are shadowbanned somewhere (where your shadowbans are justified based on your post history). This simply is not acceptable.
Snappy as in "it snaps at you if you tell it to hurry".
Nobody uses Java FX, so it's not really necessary. 
It means that they switched the entire GUI to use native controls. Who am I kidding. 
Isn't Android Studio developed by Google?
I think they work closely with jetbrains
&gt; This is also mentioned in the article. Sorry, missed that, though I did check for mentions of function monad... Funnily enough, the article (and my subsequent ramblings) actually helped make the Reader monad click for me.
In my opinion it was easier just to develop on windows directly or install linux on the host and use Office in the VM. Is there a compelling reason on why to use the VM for linux? I had performance issues using the IDE in the linux VM. It was sometimes "sluggish". You might want to take a look at http://cmder.net/ and http://scoop.sh/ as well as the Bash for Ubuntu for windows (on windows 10 only) https://msdn.microsoft.com/en-us/commandline/wsl/about
The screen scaling is broken. I have 125% on my laptop screen and 100% on my 2nd display. When starting intellij it always scales to the scaling value of the primary monitor and not the monitor it's being displayed on. This means to get any normal scaling on my 2nd monitor I now have to have my primary set to 100% and everything else looks tiny :(
Thanks. I did not know about this tools. What is your experience with them? It looks like a good alternative instead of installing a vm.
Probably should post on /r/javahelp I would use Spring boot + Spring Data (JPA + Hibernate) and Spring Integration for creating endpoints to RabbitMQ You could always drop down to Spring AMQP intead of integration for connectivity to RabbitMQ. I would read through the tutorials on the Spring site. For example if you are just passing data to a rest api you can use Spring Data REST
I would probably use an IDE on the host OS to write code for performance reasons. All the major Java IDEs are readily available for Windows. But if all you need from Linux is a command line, I would run a Linux VM in headless mode, share with it the files you need, and operate the VM via SSH using PuTTY or something equivalent.
Fortunately, my plugin doesn't count empty javadocs. And I'm planning to spot useless javadocs too.
&gt; java9, but so far it seems to be A LOT slower, even 2.5x Whoa! I actually expected things to be much _better_ because of all the cleanup work they did. I too hope this is only because of the beta builds have more debug information enabled... Either way, my example was obviously contrived. Imagine five `map()` calls chained, each with only an accessor or a cast. Now put this in a loop that runs a 3 billion times per hour, then sends the extracted data over the network. Would it be useful to hand-optimize such code to only one `map()` call with chained accessors? By how much? I would hope not as the compiler should be smart enough to optimize this on its own.
It uses their platform, at the very least
Well, to this day I see some features that are in Intellij IDEA for quite some time and they aren't in Android Studio and vice versa. So I guess they somehow work together but not really.
I think that performance of java 9 should be this same (as 8) after release, at least... I hope so :D &gt; then sends the extracted data over the network. So probably not, as network lag will be much higher anyway. In such cases there is only one good way to solve this problem, just profile your code, and if this code is visible in profiling that it take more time than it should, then you can spend some time to optimize it. So if you think that few .map looks better, then just use it, it should not be visible if you do any I/O operations here too, as even .trim was enough to make it invisible, and it is pretty fast operation. 
It depends on what you want to do. If you have windows 10 and just need some background services, then the Windows Bash environment is great. Installing DBs or a redis for example works great (of course no deamon start scripts) and can get you going for that. I personally though used to have my DBs in VMs, so I had data seggregation per concurrent project. Cmder I currently use on a daily basis (full installation with git tools). It gives you a decent looking shell (personally I am using cmd, though it comes with a bash/mintty), command-line git and access to a lot of standard linux tools. So for getting my find/grep/sed/awk (and maybe vi or ssh) on this is great. ssh unfortunately does not support all features (like setting the terminal window name) but works good enough. Scoop I just used to install maven, python and some other tools I needed for my workflows / builds. It puts everything in the path and works well enough for me. The reason for that is that I just started to use scoop and therefore I did not use it to install git or the "msys" gnu tools layer. 
Spring boot is the easiest way to start.
If you have Win10 and only need CLI tools from Linux, then use WSL (which most people call Bash On Windows) and use GUI apps for Windows. WSL provides thin layer between NT and Linux kernels, so that all Linux apps run natively without VM side by side with your Windows apps. This thing installs full Ubuntu and you will have access to all APT repos. You can also run GUI apps, but you will have to install X server for Windows and there are no fast X servers for Windows AFAIK.
Java allows you to write native code using JNI. [This small tutorial](http://www.javaworld.com/article/2077520/learn-java/java-tip-23--write-native-methods.html) can introduce you to it.
JNA and JNR are mentioned in JSR 191. http://openjdk.java.net/jeps/191
Wow that looks like an incredible amount of work! At least its possible!
Since you seem like a company and money may be on the line, you could switch to using [Payara](https://www.payara.fish/) (which is built on Gassfish and compatible) and buy commercial support from them.
For python, there's Jython, but it's pretty far behind and a lot of stuff doesn't work the same. For instance, in Python you can use raw sockets but you can't in Java so you can't in Jython.
again an article that promotes the so called business exceptions which are then used for flow handling. business errors are better specified with an appropriate return value (either,...) and system errors should be the only scenarios to use exceptions (that should be unchecked). in short, use exceptions for exceptional behavior.
&gt; Wow that looks like an incredible amount of work! The original goal was to make people not write native code thus breaking the WORA model. Java designers already acknowledged it was a mistake to do so, and there is ongoing development to make a JNI replacement for Java 10. Until then instead of JNI, you can make use of JNA and JNR.
LOL.....close....we did move both the DB and the App server. I think the issue is that the Java app is written to not care about latency as it was local for so long. I'm just trying to eliminate the web server as the culprit. I totally think this is the application or just general network latency (some of these sites are in the 3rd world). 
I've suggested this. There are some reasons why we can't do that exactly now.......but I totally agree.
&gt; Unchecked exceptions [..] should [be used] for internal errors that you can’t anticipate and that, most often, the application can’t recover from. Not sure I agree with this. I guess the author has never used lambdas...
There's a library called JNA https://github.com/java-native-access/jna which already includes tones of stuff already. It might cover your needs. For Python you can use Jython.
&gt; And I'm planning to spot useless javadocs too. How do you plan to do that? That sounds more like checking the semantics than the syntax.
&gt; business exceptions which are then used for flow handling This is not what Joshua Bloch [meant](https://www.ibm.com/developerworks/library/j-jtp05254/index.html) with **Item 39: Use exceptions only for exceptional conditions**. Using exceptions for flow control has a specific meaning. For example, `Iterator.next()` will throw a runtime exception `NoSuchElementException` if the iterator is at the end of the collection. It is a misuse of exceptions to catch this exception instead of calling `Iterator.hasNext()`. The exception in this case is a nonlocal goto which obscures the contol flow, because the iteration loop no longer has a clear termination condition. The "Java Orthodoxy" when it comes to exceptions is that unchecked exceptions are for system errors and precondition violations, where the only sensible thing for the program to do is exit. For example, `Iterator.next()` throwing `NoSuchElementException` means that you have violated the preconditions for the iterator, and it is no longer safe for the program to use that iterator. This *should* almost always be the result of a programmer error, and the program is now in an undefined state and should probably exit. The orthodoxy for checked exceptions is for recoverable errors. It is up to the program to handle the exception and move on, or to abort. This facilitates a common Java idiom, separating the happy path from error handling, in line with **Item 43: Throw exceptions appropriate to the abstraction**: try { // happy path } catch(SomeSpecificBusinessException ex) { // recover from this specific exception } catch(AnotherSpecificBusinessException ex) { // recover from this specific exception } catch(GenericBusinessException ex) { throw ex; // send to caller } catch(IOException ex) { throw new IllegalStateException("I'm finished, I can't go on...", ex); } &gt; business errors are better specified with an appropriate return &gt; value (either,...) This makes sense in languages like Haskell, where `Maybe` and `Either` are monads, and the language has first class support for monads. In Haskell, you can do this: step1 :: Maybe a step2 :: Either a b step3 :: Either a b process :: Either a b process = do fromMaybe step1 "Not found" step2 step3 main :: IO main = let e &lt;- process case e of Left msg -&gt; putStrLn $ "Error: " ++ msg Right result -&gt; putStrLn $ show result Haskell neatly separates the happy path from error handling, which is piped to the final result. You can do similar composition with *Java 8 streams*, and functions expecting to work with streams should definitely return the `Option` type. Now, should idiomatic Java code be transformed entirely to streams, now that Java has functional things? That's another story...
To keep things simple, regex can be a good start. More details [here](https://github.com/manoelcampos/javadoc-coverage/issues/4).
One of the most famous java web framework is Spring. If you want to use it and learn it quickly i suggest you to study Spring Boot. I've recently developed a Spring Boot Template project, you can find the product at [springboottemplate.com](https://www.springboottemplate.com) that helps developers speed up spring boot based web apps development. It is a commercial product, you can use WELCOMESBT coupon code to have a discount, but you should have at least a basic knowledge of Spring Boot before buying it
They address this in the release notes, fix is for Windows only though: https://www.jetbrains.com/idea/specials/idea/whatsnew.html?landing If it still doesn't address your concerns you can always open an issue at https://youtrack.jetbrains.com Better HiDPI support The IDE used to scale its UI based on the global settings of the primary display. This scale factor was applied even to non-primary monitors. Now it scales its UI based on the scale factor for the monitor the UI is shown on. This improvement has a limitation: it works only for Windows and doesn’t support fractional values. The font settings are now automatically adjusted based on the display resolution.
https://blog.jetbrains.com/idea/2013/05/intellij-idea-and-android-studio-faq/
https://blog.jetbrains.com/idea/2013/05/intellij-idea-and-android-studio-faq/
"idiomatic" java code is old by definition, you can easily use e.g. vavr library and start writing more readable code right now in java. also, your case when you catch business exceptions can be easily handled with a if/switch clause and enums for business logic errors... sorry,I am on my mobile and cannot be more expressive, but I'm sure you know what I'm talking about. no need for stack traces and exceptions on recoverable errors...
this has only been an issue in the new 2017.2 release. 
Not only is it hard to use but it also has a performance impact since the JVM has to do some work to creat the JNI interface. On top of that the JVM wont be able to do its runtime optimization on native code and it's even possible to crash the JVM with cryptic error messages if you misuse the interface For these reasons it's recommended to use java code instead of JNI if it is possible. 
&gt; "idiomatic" java code is old by definition There's nothing wrong with old. Seriously, some people chase shiny "new" things, discarding the value of what has worked before, just because it's old? But the problem with "functional" stuff in Java, at least before Java 8, is that Java is not a functional programming language. Incorporating functional idioms into Java often leads to an unreadable mess. While things have much improved in Java 8 with lambdas and streams, Java is not Haskell or ML. &gt; also, your case when you catch business exceptions can be easily &gt; handled with a if/switch clause and enums for business logic &gt; errors... Exceptions were pretty much created to avoid doing this. This is essentially C-style error handling. In this case, you constantly have to check the return value, and entangle conditional code for error handling with business code to properly direct control flow, obscuring the happy path. The proper alternative to exceptions is monads, which abstracts away the control flow, and pushes the error return to the end, leaving the happy path unobscured. Java streams come close (there are other libraries, but I don't know) to where this style can be usable in Java today. But stream-based, functional idioms are very different than imperative idioms. Don't mix them! &gt; no need for stack traces and exceptions on recoverable errors... Other than a small performance hit (which can be minimized by not generating a stack trace), what actual problem is there with the checked exception idiom? I don't even suppress stack traces and I haven't noticed any performance problems. Obviously, *performance critical* code has different requirements and is often written with very different idioms than ordinary business code.
But I do. I'm not going to use shim to a Kotlin or mixed core. The same as its a mental and technical pain to use Play, Apache Spark, Grails,... when you have Java code base with a non-idomatic, non-Java core framework.
Its not idiomatic anyways, many things are bindings to opengl/openal/glfw stuff i think. At least the parts that ive used in the past. 
Hmm, guess that is a matter of where one is at. For me it is a lot easier to think about, reason about, designing an API and do encapsulation and decoupling of concerns. Building inter-meshed spaghetti programs gets hard to reason about pretty quickly. Plus, the decoupled, encapsulated, modular, API-centric approach is much easier to code discrete test and test out functionality in isolation. IOW, promotes or fosters a test-driven development approach. I think all the things I just mentioned (which I have found to be very true in practice) are why they have become a best practices approach by and large.
.. ugh.. the ongoing focus problem with the "goto class" dialog on linux is way way worse than 2017.1 https://youtrack.jetbrains.com/issue/IDEA-112015
But the Ports and Adapters comment was making the point that the GUI can be built against a mock API - where is just stubbed to provide reasonable semantic behavior behind utilized APIs. (And it's okay to have unused API calls to throw unimplemented exceptions - when they're actually used, then can give them a mock or real implementation.) IOWs, the GUI and API library of functionality are decoupled so that their development can proceed in parallel. However, for a new library, the thing that needs to be worked out is the API itself. Some folks advocate defining the API first (with mocking stubs for implementation - which most IDEs will code generate that from an interface). However, in practice, our first blush take on the API ends up needing a lot of refinement. That is where the client code that actually uses the API becomes important. So it can be important to be coding a realistic client to the API as the emphasis point because it can help flesh out more crisply what the API needs to really be. If you've never written an API for a library before, I wouldn't get too wrapped up about trying to make the API general purpose for all manner of client use case scenarios. Just design it around your one client use case. You're in library implementer learn mode, so keep it all very straightforward and focused.
X-Post referenced from [/r/vertx](http://np.reddit.com/r/vertx) by /u/TheLoup [[Interactive Tutorial] Building a HTTP Endpoint with Eclipse Vert.x](http://np.reddit.com/r/vertx/comments/6o1vyx/interactive_tutorial_building_a_http_endpoint/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
&gt; diagrams are above-and-below rather than side-by-side Anybody else like to do vertical diffs? No? Just this website? OK, thought so.
:) cool. Though I really like your comment. It shows where the Reader/Function monad is hiding.
&gt; LWJGL is a Java library that enables cross-platform access to popular native APIs useful in the development of graphics (OpenGL), Idiomatic on the caller side too. They should still just call it LWKGL. A Kotlin library with an additional Java API / shim is not a Java library. Noone is calling TensorFlow a Java framework just because it has a Java API.
Thank you, I will follow your advice. I suspect, since it's my first big project, that there will be a lot of trial and error, so it seems sane to keep it simple.
I've used VirtualBox for years. It's easy and I leave an Ubuntu VM running all the time. I also sometimes do Java development inside the WSL Linux Shell which is also Ubuntu. I use Eclipse (for dozens and dozens of projects), IntellJ (for one or two projects) and Visual Studio Code (sometimes) on both Windows and inside Ubuntu in the VM natively. 
Lol fuck your life if you need JNI to be honest. Misery
You can use Payara now and if you ever need a support contract you can get it. Payara is simply a better GlassFish with tons of extra fixes.
LWJGL is *not* a java shim on top of a Kotlin or mixed code base. Please have a look at the actual repository content and not only at the github language statistics. LWJGL is a Java library like any other. It just uses a different language to auto-generate Java JNI code and documentation, which would otherwise be a real pain to maintain manually. Kotlin is only involved if you try to build this library from source. They could have used python, ruby, whatever or a flexible-enough template engine to do the same. If you do not like the API, then it is because it reflects the actual APIs of low level C libraries (e.g. OpenGL functions, structs and constants). This has nothing to do with the use of Kotlin during the build process. 
Thanks. This new Ubuntu Bash Subsystem looks really interesting
I was asking this initially, so thanks for clearning it up
thanks for the link; I missed that page. I kinda expected a full rehaul from the release notes &gt;_&lt;
Very interesting. Not sure about the hat. 
He is not a model, he is a Java developer and one of of the best I know. And there's no accounting for taste.
For Python you want to use Jython along with JSR-223. This is generic support in Java for embedding scripting languages. See https://wiki.python.org/jython/UserGuide#using-jsr-223
Step one: avoid the JVM at all costs. Performance enhanced. 
What part of the **sidebar** -&gt; **Do not post tutorials here!** is not clear to you?
So what do you propose instead? Today JVM is comparable in performance to native code written in C or C++. Did you even watched the presentation? As Martijn said most problems are not related to JVM itself. EDIT: I see you are quite active in JS subredits. Maybe your solution is to replace Java with JavaScript? - perfect for performance LOL
I don't trust a developer that is not slightly weird. Especially when at a conference with other developers. Beards, nerdshirts and other associated shibboleths don't do anybody any favours but show that despite all that you are good enough. Like a peacock's feathers.
Here's the proof to backup bleki's statement. https://www.reddit.com/r/programming/comments/6m75ul/high_performance_managed_languages_martin_thompson/
I enjoyed this article. Looks easy to setup and use, nice docs. any other "competing" httpd servers?
https://trends.google.com/trends/explore?date=today%205-y&amp;q=wpf,javafx WPF trending down. JavaFX trending up. So sorry. Good name BTW. It suits you. 
Oh my
Step two: read a book and actually learn about a topic before you go spouting off about it.
/u/SomeRandomBuddy 's kids will need a burn unit for this one
Yes I am willing to use module system
Are you talking about backward compatibility?
If you compile your project using Java 9 and try to deploy it in an environment which only has Java 6 installed, the JVM will complain. Most companies are pretty slow at upgrading software in production environment. 
The scaling seems wonky regardless of system settings... I have 100% scaling for both monitors, and after upgrading Idea the fonts became smaller and fuzzier. No matter what I do I can't get the fonts to the correct size (14 is too small, 15 is too large), and the fonts are smaller than in any other application on the system. It seems like they added some form of scaling inside Idea, but there doesn't seem to be any way to control its value. 
You should do the GUI first. Because then by doing the GUI you can work out what your API should be to support the gui. If you do your console first, then the API you create will be designed with the console app in mind....which may, or may not be suitable for the GUI. GUI design.... then work out the API....then do the back end based around this API. 
What's he going on about the 35 byte limit? He's stating that your method will only be optimized if it's at most 35 bytes long. That's just wrong. Yes, there's an inlining limit but, as he also states, there are many many other optimizations. And yes, inlining is the most important optimization of them all (because it enables a lot of other optimizations), but your code will absolutely be optimized when it's longer than 35 bytes. And it doesn't even make sense. If you have a method of 30 bytes which calls a method of 10 bytes, after inlining it's now 40 bytes. Will it now not be optimized? He's kind of saying that if the complete call graph of your hot code is more than 35 bytes, you have a performance problem. That can't be right. Basically just ignore this part of the talk. Actually, the statement he's making that the JIT is insanely smart and knows far better how to optimize your code than you do goes for this one also. Please don't start looking into the bytecode how long your methods are thinking it's going to help if you make them smaller. There are **very** limited use cases where it does make sense to ensure inlining. One example off of the top of my head is argument validation checking. Such a method has to be fast and if it's not inlined, you may need to cut it up into a fast path and a slow path so that the fast path is inlined. But honestly this is the only time in my many years I even thought about whether a method was inlined or not.
They dropped it not for Scala, Kotlin or Haskell, but for JavaScript. :|
this is arguably worse!
Thank you. Really like it.
With the JPA 2.2 `getResultStream()` method being added to `EntityManager`, does anyone have a good idea of how you would page such a thing? I know `skip(..)` and `limit(..)` are not going to be as efficient as `setFirstResult(..)` and `setMaxResults(..)`, but while it's helpful to have a scrollable cursor impl (in the case of hibernate at least, I realize the default impl is currently `getResultList().stream()`), I don't see how that helps get results to the client in any manageable way differently than just paging. Would this be used in primarily batch operations? What happens to the EJB transaction when doing a long-running `getResultStream()`?
Have you seen this? https://github.com/nidi3/graphviz-java It's essentially a Java wrapper about the Emscripten javascript compile of graphviz, intended for use with V8 or Nashorn. I haven't used it, but I have used a JS port of graphviz on client-side code and it does seem to work fine. This one features a direct Java API but also the ability to parse the dot files directly.
Have you investigated [BIRT](http://www.eclipse.org/birt/)?
All criticism of jigsaw is valid
Have you tried JGraphT? You mentioned JGraphX, but I didn't see you mention JGraphT. You can find it here: https://github.com/jgrapht/jgrapht It's the other graphing library found in the Awesome Java list found on the hyperlink on the right of this subreddit. https://github.com/akullpp/awesome-java#science
Hi there, the speaker here :-) The 35 byte limit is not a hard and fast rule but it's a quick default rule of thumb to check. It's also good to remember that it makes it eligible for inlining (but that may not actually happen in all cases). Some relevant HotSpot code snippets that govern this and the chain of inlining calls as you mentioned: product(intx, MaxInlineSize, 35, "maximum bytecode size of a method to be inlined") product_pd(intx, InlineSmallCode, "Only inline already compiled methods if their code size is less than this") product(intx, MaxTrivialSize, 6, "maximum bytecode size of a trivial method to be inlined") product(intx, MinInliningThreshold, 250, "min. invocation count a method needs to have to be inlined") product(intx, MaxInlineLevel, 9, "maximum number of nested calls that are inlined") product(intx, MaxRecursiveInlineLevel, 1, "maximum number of nested recursive calls that are inlined") Agree that you only need to think about these optimisations if your code is 'hot' (e.g. burning that CPU). Fairly common in some of the apps I've worked on.
Hi there, speaker here :-), The Hat is an interesting one for sure. I started wearing one to say thank you to a particular conference organiser (JFokus, great conf) and when people said it was useful to find me in a crowd it kind of stuck :-). It certainly will not win any fashion awards though I agree!
Hi all (Speaker here), Had no idea this had been posted here :-). Any question please fire my way!
Hi, big fan! This project is a life saver. Could I please have the optimusfaces-demo source? I'm trying to code a simple CRUD app using Kotlin, but I've been stuck at the service layer all week. Thanks! 
Potentionally [GraphStream](http://graphstream-project.org/)
I'm generally suspicious of devs wearing hats indoors. Maybe you're as bald as I am :-) Anyway, I enjoyed the talk very much. Quite applicable to an issue I'm having now with a RAM-hungry Spring API. 
Yeah but this is all still just about inlining. You're making it sound method calls are evil and to be avoided like the plague. I don't disagree that method inlining is important. It is. I admitted as much in my original comment. What's confusing me is that you're singling out this optimization. Especially since you're saying that basically you shouldn't sorry about optimizing you're code at this low a level since the JIT will do it better than you can do yourself. I wholeheartedly agree, so why single out inlining? I'm honestly worried you're sending people down the wrong path. Funny thing about inlining is that you don't have that much control. Inlining is recursive and multiple methods may be inlined in a single method. Both these may prevent the JIT from inlining some arbitrary method if some thresholds are met (the options you reference). Singling out inlining like this means it sound like you should do your best to inline all the things in your but code, which is very difficult to guarantee.
All blame on me Martijn. It's me Marcin from LJC. How did you found it?
I don't think Method calls are evil and they certainly don't need to be avoided, the JIT will inline as needed 🙂. The developer should just focus on writing good SOLID code. However, if the developer is concerned about making sure that certain code paths are as fast as possible (low latency trading apps for example) then making sure those methods can be inlined is important as it enables the JIT to apply further optimisations.
Glad you found it useful and although not bald my hairline is certainly receding at a rapid rate! I'm not sure whether to blame having a kid or Maven 😉
API's of frameworks and libraries evolve with time, nothing is perfect from the start. Jigsaw suffocates this evolution process. It forces users to abide to the exact ways the provider had in mind. This way is mostlikely very narrow, he's providing a library, not all sorts of very different applications. He can't possibly think of all usecases, environments, markets and niches in advance. If users are discouraged from experimenting and exploring alternative - potentionally much nicer - ways of using it, those rigid libraries and frameworks will be frozen in the past. A guy in the video is making the point of misc.unsafe now being completely internal and isolated and the JDK team has the opportunity to do whatever they would like without breaking peoples code. But if it was isolated from the very start, people would have never used it to make wonderful applications and the JDK team would have never provided alternative access in an offical puplic API. There was an apparent need to use such "hidden" functionality. A lot of potential and market would have been lost without anyone ever knowing.
You can do that with JavaFX. As of Java 8 you can integrate JavaFX panels into Swing. Here's an example (of the graphing): https://www.youtube.com/watch?v=6_06zcDisNg 
I have removed this comment as it is not constructive. Please refrain from using such foul language going forward. 
Try three kids and Gradle!
I don't agree that jigsaw is useless but I do agree it is a heavy burden they put on existing library and framework maintainers. They are basically required to do the same thing Oracle team did with the JDK to their framework/library with one small twist - you can just open and export everything up and you're done. . But encapsulating things can eliminate fear and reduce the cost of maintenance.
I found lwjgl really hard for a graphics novice to dive into.
Library and framework maintainers aren't truly _required_ to do what Oracle did. The classpath is supported and automatic module offer a migration path. I agree that there will be pressure on the maintainers, but it's not absolutely required. A ton of effort has been put into the migration story for JDK 9.
Discussion here: https://stackoverflow.com/questions/41265266/how-to-solve-inaccessibleobjectexception-unable-to-make-member-accessible-m
RIP Lombok et al. Compiler arguments lists like [those](https://github.com/rzwitserloot/lombok/issues/985) are a [no-go](https://www.reddit.com/r/java/comments/6ojmmm/so_it_looks_like_java_9_nerfs_fieldsetaccessible/dkkb2xb/)...
You can always downgrade to ~~python 2~~ Java 8 :D, unless I'm in 100% control the --add-opens elimination may prevent others from upgrading to JDK 10 if they pull it
In general: if you need to consume a big result set and traverse instances one by one. Batches naturally come to mind. Paging is better achieved by manually setting offset and limit and reading them one by one. Streams need to be handled in a try-with-resources-block and must not escape the transaction. You can use Streams as repository return types using [Spring Data JPA on JPA 2.1](http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-streaming) already. We fall back to the underlying persistence provider's cursors to populate a stream. Same constraints apply though.
Or you could just use Springs Transaction Template...
That is entirely SICK as an approach to calling into graphviz. But you know... it might work pretty well. Certainly better than shelling out to an externally installed version of graphviz. I love graphviz BTW. 
I've used graphstream at work. It's pretty nice but it has very little layout options. They have not implemented the hierarchical layout algorithm named after the Japanese guy as the default like graphiz does. I looked into it. It's non-trivial. But all in all the API is pretty nice and I found it easy to customize the look of nodes and edges...they just need more layout options....
I've been using JFreeChart at work the last few weeks and it seems pretty good so far. http://www.jfree.org/jfreechart/ 
And they chose Javascript as the successor? Stanford must hate their CS students.
Java comprises a lion's share of existing enterprise software. It's not the hip new startup language, but it's also not going anywhere. As of this writing, it's #1 in the [TIOBE language rankings](https://www.tiobe.com/tiobe-index/), which isn't definitive, but is a commonly-cited metric for a language's mindshare.
Easier isn't always better.
Only if you like paid work. :)
Java is COBOL for the 21st Century. There's so much out there written in Java it's going to be decades before it goes away. I took one of the first Sun Java 1.0 courses in the U.K. and have been using Java in almost every job since. Not the hippest of languages, but you'll be employed for another 20 years if you know it well.
I get why, I totally disagree because Java was my first language, but if they wanted to go easy, why not Python? 
But it is an interesting thought on the topic of language design, that it does seem easier to get people to try out a language if the initial burden of knowledge is as small as possible. I always wished java would let you define code outside a class ala Kotlin, so when I want to introduce people do java they can just play around with simple statements in a file, without first having to understand the signature of a class, a main method and why its there. I would even go as far as to make the slightly bolder statement that all variables and methods defined outside the class in a file should be static by definition, it really is to more intuitive place to locate everything static, that would also help the understanding of static vs. non static.
&gt; in reality, this makes programming easier to understand mainly due to the latter having less 'bloat' to contend with. BWAHAHAHAHAHAHAHAAAAHAAA!!!!!!!!!!! Don't get me wrong, learning js is totally useful today, but to argue that it has less bloat, or is less elegant than Java is utterly hilarious. Yes, JS has no bloat, until you consider how it's actually used. Comparatively, real-world Java is very similar to vanilla java.
[This is old news from Feb](http://www.stanforddaily.com/2017/02/28/cs-department-updates-introductory-courses/). Standford is not dropping Java, they've just opened up an alternative class that covers the same material but uses JavaScript instead of Java. Students can choose to take either class. 
God bless you, ReflectionTestUtils. You were a good whore.
IMO if you're ditching Java as the introductory language, either they should be using C/C++ or Python. Whether they are going easier or harder, either way... they'd be foolish to not go with one of those choices.
The language ITSELF prior to ES6 WAS quite simple and easier to understand. ES6 has definitely upped the bloat quotient. Even still, I don't think it's a bad choice for people who have never written ANY code before. There's less boilerplate needed than with Java for example. I agree, if they teach it "real-world" then it's not much better than Java, but it doesn't seem like that's the goal. Sounds like it's along the lines of what BASIC was for me when I started 37 years ago and I'm not sure there's a better choice right now given that. JS might indeed be the new BASIC. 
I enjoyed having Java as my learning language, it made it easy to learn C#. I still don't understand why Java is too hard for some people, maybe it was the content of the courses that need change not the language.
This is the best comment.
my university did a horrrible job at introducing OOP. In the Computer Science courses (using C++), they didn't even teach it at all. We were just expected to understand it. In CIT courses (mostly Java) they spend 2 weeks on it, covering it at a super elementary level... and we weren't required to continue using OOP at all. If others' experiences are any like mine, I wouldn't blame them for hating Java. Fucking everything is OOP, and if you don't know OOP, you're going to suck wind trying to use Java.
&gt; JS might indeed be the new BASIC Mind = blown
Yes.
I don't know.. I had both multiple Java courses at uni and one JS course. Things like equality, prototype-based programming, implicit global variables, modules (before language support for them since es6 i think?), ..., are all features of the language that seem more difficult to beginners than how Java deals with those concepts. Then when you find out you can change prototypes at runtime.. oh wow. I mean, I like JS, but I would never label it as a beginner's language.
They replaced it with JavaScript? Lmao that is ironic 
But I think most of those things are more advanced concepts, especially for a beginner. All important for a JS programmer for sure, but not so much for complete beginner programmers. Just thinking back to when I first learned, you start with real basics like variables, flow control, looping, functions, expressions, etc., and you want to keep anything extraneous to a minimum. For example, I remember very well the first thing I was ever taught: how to write a program to calculate the area of a triangle. So, we wrote: base = 10 height = 4 area = (base*height)/2 print area I remember doing that on an old Commodore PET in 4th grade. It's very basic: you learn basic syntax, what a variable is, what an assignment is, what an expression looks like, and how to show some output. And, of course, you learn how to run the program (by just typing run!) For someone with NO coding experience, that's the level they're at when they start. And, you can port that over almost verbatim to JS: base = 10 height = 4 area = (base*height)/2 alert(area) The only new concept there is functions, but you can explain that similarly to how you would explain print in the BASIC version. Then, to get that to work, you can tell the students to open Notepad and write: &lt;script&gt; base = 10 height = 4 area = (base*height)/2 alert(area) &lt;/script&gt; Tell them to ignore the &lt;script&gt; things for now, save that as example.html and load it in their browser. Boom, they have a working program. By contrast, to do that in Java, you (a) have to tell them what a JDK is, where to get it and how to install it, (b) how to write: public class example { public static void main(String[] args) { int base = 10; int height = 4; int area = (base*height)/2; System.out.println(area); } } Then you have to tell them what compiling is, how to compile, then how to run a program, what a classpath is. More importantly, that's quite a bit more code, but critically it's A LOT more concepts: OOP, scope, data types, methods, arguments, packages, even "simple" things like case-sensitivity and line terminators. It's considerably more you have to explain just to demonstrate the very basics of ANY programming language (variables, expressions and some form of output). That's why I think JS is indeed a better choice than Java. Whether there might be a better choice than JS (I know some schools use Python these days) is debatable, but I think JS is a good choice and, at the level we're talking about, serves much the same purpose as BASIC once did.
Learn would you need in your project. My journey: 1. Python - web with Flask, UI with PyQt - I loved it. 2. .NET - web with ASP.NET, UI with WPF - was good as well. 3. Javascript - web with NodeJS, as I had issues with ASP.NET Core and was bound to Linux. So I decided to try NodeJS, which is fast to develop in. Did the job, but not good. So, I would recommend NodeJS only when alternatives are not feasable (e.g. developer knowledge). Frontend React, now Angular (2+). 4. Now I'm learning Java! Why? Because of the backend. I think Java is still the clear number one on the backend. Looked at Go, but came to the conclusion that the Java tools and frameworks have solved so many problems, that it doesn't make sense to resolve them even if the language is easy, fun and fast. I'm evaluating Spring Boot, Vert.x and maybe another smaller framework (Spark, ...). Later I might look at Kotlin, but for learning Spring I decided to start with Java. So far, I'm impressed how huge Spring is! Everything seems to be solved. A lot of automation, security, ... So yes, depending on your needs Java is still worth learning. Not for GUI, but backend for sure. Kotlin is amazing, but better at least have good Java fundamentals before going for Kotlin.
JavaScript is an interesting choice for a pedogical language because it's multiple-paradigm i.e. influenced by many other functional, object orientation and imperative languages that proceeded it. Also prototypical inheritance is a little different than the class based inheritance you see in c++ and Java but I'm not sure if one is better to teach first vs the other as long as students are aware of the differences. If students are taught good software engineering along with the language then I don't think the introductory language is very important. Also if you check out jobs for JavaScript you'll see that learning JavaScript is a good idea. JavaScript is legit nowadays and if you don't believe me check out node.js, angular, react or even ionic for some cross platform mobile development action. With this being said, their first language should really be x86 assembly, duh /s
Thank you, that makes much more sense. The notion that Java is too difficult as a first language is nonsense. In many universities, Java was a replacement for C as the first language while Pascal was another common first-language. Using Javascript as an introductory language at the college level is almost irresponsible. So many terrible habits will be learned.
Give them a boilerplate class and tell them to not worry about what it does. Just have them put their code in the main method. There's the syntax. When it's time to learn code structure, have them use static methods. Tell them not to worry about what "static" means for the time-being. From there, you can move on to variable scoping, then classes, then static/instance, then packages. Java doesn't need to be a difficult language to learn. It just needs to be taught simpler. Also, Java 9's interactive interpreter should be helpful for people starting to learn the language once it's released.
We said the same thing when they moved our intro CS course from C to Java. 
Fake news, js is a nasty language, SAD!
Something tells me that, if you failed to develop a basic understanding of OOP while majoring in Computer Science, the problem wasn't with your University's curriculum, especially if you were learning C++ or Java. Those concepts are covered in every introductory text book.
I'm currently learning Spring. But so far I dare to say that I think there's no way to write an Rest API faster then with Spring Boot and Data Rest. I've done NodeJS and it's crazy that people (mainly from the "startup scene") are saying NodeJS is faster to develop in (than Spring Boot). You only need to know it. :-)
Not if they teach ECMASCRIPT 6. Honestly starting with a terrible language, and teaching good standards, styles, and code maintenance from the start might do the world some good.
I think the problem is that, yes you can explain simple and slightly advanced concepts in JavaScript very well. But if you give the Students an assignment, they will stumble on curious solutions for their problems or be utterly confused while searching for a solution. Same goes for python to some degree. Something like golang would be better in that sense, but i dont see any university take on it, bc its maybe just a trend language like ruby. 
I think programming is one of those things the student must personally invest in. If they don't spend the time then it's much harder to gain the proficiency they're looking for. Data structures and algorithms was the first class that really kicked my butt like this. So many all nighters!! Java and C# are both awesome languages. My school does their entire corriculum in C++ so of course I'd say this lol. Manually memory management is silly and smart pointers do help, but the jvm and clr really make life easier on the developer 
they weren't using an introductory textbook. The learning curve for the 'introductory' C++ classes was insane. They didn't teach plenty of fundamental concepts, and the book used terms that assumed we already knew OOP. The textbook even made it clear in the introduction that it assumed we were already experienced developers from the very beginning of the book. this kind of experience might be acceptable for a more prestigious university, but for a university with a ~85% acceptance rate, that kind of unpredictable bullshit is unacceptable. That curriculum did a horrible job at meeting expectations and dealing with the kind of students they were given. More advanced course options are great, but honestly they need to be pragmatic with their curriculum. 
Nah. Mips is the way to go if you want them to learn some realworld important Assembler 
It's pretty easy to emulate class based inheritance with JavaScript as well. It's a good move IMO as long as the coursework is written appropriately. 
The proper course of action, then, would have been to seek out supplementary material to help fill in the gaps. Either that or you should have taken a class better suited to your experience level first. I made a similar mistake in my freshman year of college as you. I took Electronics 101 thinking that my basic understanding of electronics would be sufficient. Walked in on day 1 and had my ass handed to me when, within the first 15 minutes, I discovered it was a Physics 300-level course, requiring two semesters of college level physics as a prerequisite. I very quickly switched out and learned to research the requirements for a course before enrolling in it.
I think of tooling and setup. You can get started with a lot less overhead in js. They can spend more time teaching instead of helping new students debug their setups. I know this isn’t popular but it’s the truth. Even at technical schools I’ve seen smart people fall behind because they were new and couldn’t get their environment set up. We take this for granted, where it can be very frustrating for new developers. 
That's a fair point. Though, I'm not sure there's an ideal way to avoid that nowadays... interestingly, in the late 70's/early 80's when I was starting, that wasn't a problem because of course there WAS no Internet to go find wonky solutions on... all we had were the manuals that came with the machines describing BASIC. I don't envy anyone trying to learn programming nowadays. Hell, it seems overwhelming some days even to us professionals with decades of experience, I can't imagine how it feels for someone starting from scratch.
I hear risc is where the party is at! Cisc is just something that intel won't ever let die and students must suffer through. That's the price we must pay to make processors that are backwards compatible with their 1970s predecessors. https://www.quora.com/Are-modern-x86-processors-really-completely-backwards-compatible-down-to-8086-Is-it-possible-to-recreate-a-complete-16-bit-system-from-the-70s-using-a-Broadwell-processor
that's all grand, but when the default curriculum expects you to follow an insane learning curve, there's a problem. Sure your electronics 101 course was a 300-level physics course, but my experience is different. I've taken years to learn that I wasn't the problem. It was only after I spent time on my own learning OOP that the CS curriculum was HORRIBLE. There's a good reason as to why they've changed it since I finished University... it was badly designed. Since then, one of the tenured professors wrote his own CS book that provided a smoother learning curve... a curriculum that actually TAUGHT OOP, as opposed to requiring us to learn a very important concept ENTIRELY on our own. **I'm not even kidding. A CS curriculum that requires students to learn OOP *entirely* through self-study outside of the curriculum is a flat-out badly designed curriculum.** If you disagree with that last statement, then either you are a born genius, attended a prestigious university with difficult entrance requirements, or you are wrong.
if they chose python that could make sense , but choosing javascript doesn't make anysense really.
Actually the first language i learnt was 68000 assembler, and it helped me to learn not only some programming but also the hardware behind it. Considering that i was 13 at the time, it's quite possible for a collage student to learn Java as the first language. Learning JS as a language kinda pointless really.
[David Karnok on Twitter](https://twitter.com/akarnokd/status/774590596740685824?ref_src=twsrc%5Etfw) (project lead of RxJava, engine contributor to Reactor 3, an RxJava, Reactive-Streams and Java Flow expert): &gt; Use Reactor 3 if you are allowed to use Java 8+, use RxJava 2 if you are stuck on Java 6+ or need your functions to throw checked exceptions [Pivotal writes](https://spring.io/blog/2016/03/11/reactor-core-3-0-becomes-a-unified-reactive-foundation-on-java-8): &gt; All Reactor 3.0 projects have been upgraded to Java 8. While the JVM market is getting standardized on Java 8, we see no reason to delay further our transition. Let’s enumerate the benefits : &gt; &gt; * All “backported” functional callbacks in reactor.fn have been replaced by java.util.function. As a result Reactor offers a standard interactive contract and a competitive surface API. &gt; * Convert Flux to/from java.util.stream.Stream &gt; * Convert Mono to/from CompletableFuture &gt; * Safely create Mono from Optional &gt; * Sane time period support with Duration &gt; * Dropped shadowed JSR 166 backport for ConcurrentHashMap use specially affecting Reactor Addons &gt; * A massive step closer to the programming experience delivered by Spring Framework 5, itself building on Java 8. [InfoQ writes](https://www.infoq.com/articles/reactor-by-example): &gt; RxJava 2 was developed after the Reactive Streams specification, and thus has a direct implementation of Publisher in its new Flowable type. But instead of focusing exclusively on RS types, RxJava 2 also keeps the "legacy" RxJava 1 types (Observable, Completable, and Single) and introduces the "RxJava Optional", Maybe. Although they still provide the semantic differentiation we talked about earlier, these types have the drawback of not implementing RS interfaces. Note that unlike in RxJava 1, Observable in RxJava 2 does not support the backpressure protocol in RxJava 2 (a feature now exclusively reserved to Flowable). It has been kept for the purpose of providing a rich and fluent API for cases, such as user interface eventing, where backpressure is impractical or impossible. Completable, Single and Maybe have by design no-need for backpressure support, they will offer a rich API as well and defer any workload until subscribed. &gt; Reactor is once again leaner in this area, sporting its Mono and Flux types, both implementing Publisher and both backpressure-ready. There's a relatively small overhead for Mono to behave as a Publisher, but it is mostly offsetted by other Mono optimizations. We'll see in a later section what backpressure means for Mono. 
As far as I understand, JGraphT doesn't do visualization, just graph data structures and algorithms on them, and needs adapters to other libraries like http://jgrapht.org/javadoc/org/jgrapht/ext/JGraphXAdapter.html to actually draw the graphs. 
I've used it before, but I am asking about graphs as in https://en.wikipedia.org/wiki/Graph_theory, not about charts.
**Graph theory** In mathematics, graph theory is the study of graphs, which are mathematical structures used to model pairwise relations between objects. A graph in this context is made up of vertices, nodes, or points which are connected by edges, arcs, or lines. A graph may be undirected, meaning that there is no distinction between the two vertices associated with each edge, or its edges may be directed from one vertex to another; see Graph (discrete mathematics) for more detailed definitions and for other variations in the types of graph that are commonly considered. Graphs are one of the prime objects of study in discrete mathematics. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Not the kind of graphs I meant, unless I missed something. https://stackoverflow.com/questions/30679025/graph-visualisation-like-yfiles-in-javafx suggests Prefux, but that really has no documentation.
Thanks, I'll look into it!
Yes, found it after asking the question. Looks very nice and I'll be going with it for now (if I can make sure no interactivity will be required).
Thanks, but it's far too heavyweight for my purposes. I remember working on an application using it some years ago.
I think I know Spring and I didn't know about that one. Thanks for the hint!
The whole module system in Java 9 is a failure to be honest. Instead of releasing it into the wild with a million switches for special cases, they should just redo the whole damned thing properly. EDIT: Truth hurts, I know.
Is that supposed to be a real question? Reported for spam.
You can make your module open with a simple open before module in module-info Source - https://www.youtube.com/watch?v=czhSo8rotC4&amp;feature=youtu.be&amp;t=18m22s
Video linked by /u/lpandzic: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Migrating to Modules by Mark Reinhold](https://youtube.com/watch?v=czhSo8rotC4&amp;feature=youtu.be&amp;t=18m22s)|Devoxx|2017-05-17|0:51:16|9+ (100%)|1,301 &gt; The introductory session, “Modules in One Lesson,” assumed... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/lpandzic ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dkihsy4\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v1.1.3b
It exists since Spring 1. This is how we did Transactions before annotations and AOP.
Arent they already just translating their cisc commands to a few risc commands anyways? 
Yeah many get just frustrated at the amount of sources, and how unreliable many are. Im a cs student right now and lost quite a few fellow students to this. The overall attitude of the uni is: dont bother us with your questions thats what stackoverflow is for. Which is dumb but oh well, what am i gonna do about it Edit: not at stanford just for clarity
Google alert 🙂
It is interesting to read this from the RxJava lead. I feel the biggest disadvantage of Reactor is the lack of tutorials etc.
Lombok works fine in JDK9 currently. Further restrictions on this will just mean we jump through a few more hoops. Nothing to worry about. SOURCE: I'm one of the core developers of lombok :) For more: [Umbrella issue on lombok's issue tracker about JDK9 support](https://github.com/rzwitserloot/lombok/issues/985) 
OMG DO YOU HAVE TO SHOUT and that horrid header banner 1/3 the way down the screen that got deleted from my browsers DOM right quick... as for the article, I just lost the will, long and a bit rambling and not really very engaging...
I didn't know about this, thanks for mentioning it! https://stackoverflow.com/questions/5806589/why-does-intel-hide-internal-risc-core-in-their-processors
Can confirm. I only learned the real OOC concepts after I had my degree and started working. But that's mostly because it wasn't really needed much (especially in a single-threaded application) for what we did during classes. I'd still say I knew Java pretty well (enough to land a job, evidently). So despite that, if Java is "too hard" to learn for newcomers, I'd say those people just aren't cut for programming. I understand boilerplate and syntax can be a bit confusing, but with Kotlin on the rise and C# being "always there" (at least for the past decade or so), allowing JavaScript to become the new choice of introductory courses is... a joke at best.
Not all universities are like in the US, where you basically pick your own classes and just choose a degree to go towards with the classes/credit you have. Things where I live are more streamlined, for example. You choose a degree, they give you a time table with your classes and you can choose from a few (e.g. robotics vs UX for one class). Since you pay next to nothing for it, they want to make sure no time and money is wasted for either school or student. But essentially, their curriculum might not be well developed (for certain universities) and they either do JUST practical things or too much theory, or their theory advances too fast. CS (and all its branches you can study) are still fairly recent additions to most universities, especially if your focus lies on something like modern/web technologies, where you might skip a lot of hardware and possibly even math classes. Point being, it's often "still" experimental and subject to change. Some of us may have gotten less lucky than you did and in no way due to our own fault.
Random assortment of language features...
Ah, my apologies, I misunderstood.
Java 10 is where the real problems happen, though.
I write a commonly used library. Library writers are the ones getting the short end. If you write a library that needs to make fields accessible in other modules (e.g. Jackson, et al) what do you do? I hope Java 10 has a solution and that library writers are given a long lead time to adapt.
Removed thanks
This isn't really about private methods, this is about calling a transactional method from a non-transactional one on the same object. [The spring reference explains this quite well.](https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-understanding-aop-proxies)
this is exactly how it was introduced in my first semester cs course. + some helper methods from the prof that made it easier to read textinput from the console.
If pattern matching doesn't get into Java 10 then I will abandon Java for C#.
if your class is on the classpath then by default it will be able to call setAccessible. If you are on the module path then the module will need to be open either in the module-info or on the command line. note that a lot of framework do that to do field injection without bothering with constructor injection. 
So, does that mean you'll stick around for another while, waiting, right? ;)
My bad. When I googled for screenshots of JGraphT I assumed that that examples provided didn't require an additional library. It doesn't help that the descriptions for graphing libraries can be confusing since some provide plotting/charting functionality and others do not.
Its certainly possible, but people often follow the path of least resistance. I was making a comment attempting to explain the *Why* of python and javascript picking up more new developers, even in places where java, in theory, would be a superior solution (see nodejs). Java has many speed bumps in the way of new developers that are, perhaps ill informed choices at the time, or we simply understand peoples preferences better now.
right, the workarounds are all deprecated, java 9 temorary workarounds to help migration according to the actual JCP proposals/etc. 
now you need to tell your consumers to not only include your dependency via maven or whatever, but also to modify their runtime arugments
it only solves the problems NO ONE HAD. What was wrong with maven modules or grails or w/e? Meanwhile REAL problems are left completely unaddressed, like every dependency in my project including log4j and causing conflicts. These are the problems that OSGi containers were able to address by handling nasty classpath isolation. Project Jigsaw is one of the dumbest things I've seen happen to Java since oracle took over. Years of stagnation followed by complete ineptitude. RIP
All CS101 courses should start with C. You need to understand the lower level before moving up IMO. 
Agreed. Over the last year or so I have started doing more programming, first with automated tests written in Java and more recently with pieces of our actual application that require full stack. Frankly, Java makes a lot more sense.
Your brain must have crystallized in how it solves problems. IMO Java is a great language, but if you try and write JS like Java you're going to have a bad time. But also ES5s syntax doesn't help to convey that it works best when used more like a functional language. Higher Order Functions and closures are amazing once you wrap your head around it 
I really don't want this forced on me..
&gt; Question: Why Java does not accompaniment manifold inheritances? This question's answers seem incomplete for Java 8+, as there is increasingly a form of what I would call multiple inheritance due to interfaces' default implementations. They avoid ambiguity when multiple implementations would collide, by mandating an override of that method (which can delegate to the superclass or interface implementations if wished), but it's still a way for implementations to come from multiple sources. Also, why is "accompaniment" in the question? This is very odd wording. It looks like it should be "implement". This may seem outdated because it just is; when it lists operating systems its choice of Windows is 2000/XP (!) and it lists that twice. This feels like it was written by a bot. 
Agreed. And the people in Oracle appear to be completely pigheaded about the whole thing and unwilling to listen to the community (well, whatever little bit of community we are afforded by Oracle).
I have no problems with functional programming or higher order functions. In fact Clojure is probably my favorite language at the moment. It's all the shitty bits of Javascript not the good ones that make it such an awful thing. Try explaining all the seemingly inconsistent concatenation results due to implicit type conversions and coercions within JS to a programming beginner. It's quite possibly the worst programming language to have someone learn as their first one.
WTF? Some of these questions and answers don't even make sense. &gt;Explain reason that why is a compile time persistent in Java? What is the risk of using it? Ahh. What?
Please, see the **sidebar** which will point you to **/r/learnjava** and there again to the **sidebar** where you will find a section **Free Resources**. **Post removed** learning Java
How does your product compare to these? * https://www.tenable.com/products/nessus-vulnerability-scanner * https://www.sonatype.com/nexus-repository-sonatype * https://www.jfrog.com/xray/ Also it is not clear from your site if your product is _for_ opensource projects or is it opensource _itself_ (or both)
Your post history shows that you are **gravely exceeding** the **reddit spam &amp; self promotion threshold**. This is unacceptable as we want active participants who also contribute in other discussions and who link other sources **without** constant **self-promotion**. Should you post another self promoting post, you will be banned from here without further warning. **Post removed**
Those are all enterprise-level solutions, CoPilot is for Open Source projects hosted on GitHub. I agree that our front-page could be clearer and indeed we're working on improvements for that right now. CoPilot is designed specifically to plug into your Travis CI or Circle CI build process so you can just set it and forget it. Every time a CI build runs on any branch of your project you'll get new results. Also we're working on adding Pull Request support so that when somebody opens a Pull Request on your GitHub repo you can see if that pull request will add or remove any vulnerable components.
So it works without compiler arguments and then with Java 10?
Java10 isn't in a state to put serious effort into it, not right now. I'm pretty hopeful we'll make it work though, when the type is right to start investing the time.
Man, who thought it was a good idea to use pictures instead of a text based representation? And whats with the screen sized pictures right in the middle of the article? 
The thing is that all these projects work at the artifact storage level. So that it doesn't really matter what is your CI solution. I mean, most companies that would be interested in your project might probably run Jenkins. And I don't see any support for this in your web page. Any plans to support Jenkins/Concourse/GoCD?
One of our 3rd party tools uses it, so I mildly excited 
CoPilot is not for the types of projects you're thinking of, it is for open source projects hosted on GitHub. Our flagship product, [Black Duck Hub](https://www.blackducksoftware.com/products/hub) has integrations with Jenkins and other enterprise tools.
Same thing here but even a bit younger. If an ~8 year old can understand than certainly college kids should. And if that little class "frame" is such hurdle for them then they're likely not going to be good programmers anyway. I'm really not a fan of dumbing things down.
Pretentious nonsense that's all over the place. This is the sort of language abuse that should be restricted to blogs and never seen in production code.
This is the best tl;dr I could make, [original](https://www.neowin.net/news/stanford-university-dumps-java-as-an-introductory-programming-language) reduced by 78%. (I'm a bot) ***** &gt; Well, Stanford University agrees, and has decided that to make programming more accessible to its students, something drastic had to be done. &gt; In its latest update to the Programming Methodology course code CS 106J, the University replaced the difficult to master Java language that was present in CS 106A, with the more palatable language JavaScript. &gt; Although Java currently holds the top spot when it comes to programming languages, making it easier for students to learn programming will encourage them to acquire these skills. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/6opzpo/stanford_university_dumps_java_as_an_introductory/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.65, ~172453 tl;drs so far.") | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PM's and comments are monitored, constructive feedback is welcome.") | *Top* *keywords*: **program**^#1 **language**^#2 **Java**^#3 **more**^#4 **change**^#5
Have you seen the libraries for Node? They are written by retarded monkeys. &gt; If you take Android off the table and web apps Good lord
I didn't get it. I may be to dumb. 😓
I had not looked at javascript for 3 years, and I saw some ES2016... blew me away, the syntax is so much better than it used to be.
Couldn't tell how the first catamorphism example for Optional was better than Optional's ::orElse so I kind of lost interest. 
Altough it is probably doable with JNI, I would recommend using AutoHotkey or C# for developing MS Windows tools. 
Then maybe your landing page needs some more work to explain what this is all about, what is the target audience and what it actually does. * How does it find problems? Where does it get its information from? * Does it work with source source, binaries, both? * How it is updated to include the latest security announcements? * Is it a server? A script? A proxy? A tool? A build plugin? I think also it should be best for somebody to sign up right away (rather than "requesting" access). Open the free sign-up and only limit it if you cannot handle the signups. Do not start with a "request invite" stuff right away. As things are now, there is not a real incentive to try this...
You could use Jacob for that 
Although it says "Request Access" we actually just have a cap after which that will matter. For the time being it is open and if you "request access" you'll be granted it automatically. But I understand that confusion and I really appreciate the feedback. I'll also work harder to clarify who the product is for.
To be fair, in Java land the catamorphism usually gets called a "Visitor". 
&gt; Using Java~~script~~ as an introductory language at the college level is almost irresponsible. So many terrible habits will be learned. 
You should also include some screenshots of the reports that somebody gets. Also It is important to know that the product is actually based on the Black Duck Hub and it uses that for security information. Cheers!
I guess its a good thing OP made sure no one could copy and paste his code then
I don't know what exactly you need to do, but if it involves calling some windows funtions, then you could see if JNA https://github.com/java-native-access/jna can call that function from Java. 
It is LGPL 3 or some French license though. You might want to use something else if you are considering commercial use. 
That's why they need to start with C
Hei, I just made that tool a week ago to switch to vr more easily. I am going to sleep now since it's late over here, but I could send it to you in about 10 hours. If you want to do it yourself: I am using a command line tool that allows access to the windows audio settings, you can find it online easily. Then I wrote a 10 line batch script that essentially reads a text file with the name of the last activated device and enables the other device and updates the text. The reason I am going through the text file is that it was not possible to do it with that command line tool. Or I couldn't find it, I forgot.
why would you want to torture the guy with garbage c#?
This might help: http://docs.oracle.com/javase/tutorial/sound/accessing.html
map + orElse is an alternative implementation of a catamorphism / fold / visitor for Optional. It's the same thing, which is also very similar to pattern matching on Option (Scala).
Really? i find it very snappy and early the fastest IDE I've ever used. my setup: Lenovo X1 Carbon Intel i7 skylake 16 GB RAM pcie nvme ssd HD screen (not the super high one) 
what's the point of this random shitpost
Isn't this for Java application only? Like if I wrote Music Player?
Cmdlets? I downloaded that but haven't really tried to do anything with it. But any examples would be appreciated.:)
Sander here, thanks for posting! If you guys have any questions, feel free to ask. Meanwhile I'll be wrapping up the manuscript of http://shop.oreilly.com/product/0636920049494.do this weekend :)
Hahahahaha!
Just do Scala. You wont believe how you could ever have been writing java and you'll wish for not making switch sooner.
This whole database, connection pool, ORM, database cache is just to an ridiculous amount of setup just to store a value. There should exist a library that would just CRUD a bean. Main class would need only four generic methods. *Edit: Please stop downvoting.*
&gt; Isn't this for Java application only? Isn't that what you want? You post the question in /r/java I'm assuming you want to make a Java application. ;) You can start there and see what's available - you can query the sound devices and their capabilities and direct media to the various devices. 
1. Yes that's what it is, HTML but now in Java. But then declarative. That's what's missing in other frameworks. 2. There is no business logic in the view with VertxUI. It is very similar to ReactJS, at least the examples are setup with the same three (MVC) classes. Why would you think this is the case?
VertxUI is juist like Angular and ReactJS, every data manipulation happens on the server. It's a MVVM if you want to use that term, extremely similar to ReactJS. Don't know why you would think that it is different with VertxUI.
Actually I also love plain HTML/CSS/JS. That's why I've written VertxUI: most JavaScript GUI's just need a bit of CSS. In VertxUI you're also reloading your browser, same same. The code recompiles automaticly by Elcipse and then by FigWheely. And, you can still use plain HTML for the static parts. HTML itsself as template language for HTML! There is one example which does that.
Well, what i was referring to is Java Application like Music Player, changing property of Java Application's volume, but what i'm trying to achieve is changing Windows' Audio Mixer Devices(Like Realtek Audio Device, USB Audio device etc) settings with that Java Application. 
I heard about AutoHotKey but have no idea how it works. Will have to test it out. 
I agree. But, have you actually see how much JS (filling missing language frameworks like testing, compiler checks etc) libraries you need nowadays? And how much of these are older than six months old? So, is there any guarentee for the future when you write like that? Isn't that a waste of time?
Thats why Spring created Spring Boot. Just a pom file, some lines of code on your main java file and voilá. This video of Josh Long opened my eyes two years ago https://youtu.be/sbPSjI4tt10
true!
I like Spring Boot and it shortens the setup process, but you still have a complex configuration. CRUD could be a simpler.
That's not a solution: * The idea of runtime arguments to fix dependencies is *ridiculous* beyond compare, just shows how broken the whole design is * It's another error source, happy hunting * The consumers of libraries create applications for costumers which would also have to manipulate the compiler arguments. Then those costumers have their own costumers... For many end users it's already impossible to ask for splitting the classpath with runtime arguments * The temporary / already to-be-depricated nature of the arguments * Warnings and errors that need to be ignored. I know we tend to ignore those logs but in production every single one sends emails! 
lame. Not incorrect but as insightful as saying using .equals() not == when comparing strings.
Okay, it is relatively easy. The command line tool is NirCMD: http://www.nirsoft.net/utils/nircmd.html The contents of my "changesounddevice.cmd": SET /p CSD=&lt;CurrentSoundDevice.txt reads the last sound device and writes the content to the variable "CSD" IF %CSD% == "Rift" ( SET CSD="MySoundCard" ) ELSE ( SET CSD="Rift" ) Switches the content of the variable to the other sound device. ECHO %CSD%&gt;CurrentSoundDevice.txt Updates the sound device string in the textfile. "C:\Program Files\nircmd\nircmd" setdefaultsounddevice %CSD% 1 "C:\Program Files\nircmd\nircmd" setdefaultsounddevice %CSD% 2 Here you should insert the path you copied the "nircmd.exe". It is necessary to call the function twice with the parameter 1 and 2 to set the sound device as standard output device AND standard communication device. I hope this helps.
&gt;The catamorphism for Optional He's trying to explain what a default value is?
It's called ruby 9n rails. Or something similar :p
Ok, seems i didn't understand you quite well... This is what I did: &gt; SET /p CSD=&lt;CurrentSoundDevice.txt &gt; IF %CSD% == "Headphones" ( &gt; SET CSD="Speakers" &gt; ) ELSE ( &gt; SET CSD="Headphones" &gt; ) &gt; ECHO %CSD%&gt;CurrentSoundDevice.txt &gt; "C:\NirCMD\nircmd" setdefaultsounddevice %CSD% 1 &gt; "C:\NirCMD\nircmd" setdefaultsounddevice %CSD% 2 What did i do wrong? I just made Change.cmd in same directory of NirCMD and that is what it feels wrong.
Ok, it seems it started working now somehow, thanks a lot :D
Sorry, I may forgot to mention that you may need to create the textfile manually. Also the folder you created may not have the access right you need to change the textfile. You should be able to change that in the properties of the textfile. Edit: Also you need to manually write "Speakers" (with quotation marks) into the textfile.
It works now, thanks a lot!! :) 
Are we back to 2007 already?
It's only ridiculous if you are trying to build a "library" for your collection of SciFi novels with zero concurrency issues and a low rate of DB access. In this case I 100% agree with you. However, if you project concerns involve concurrency, serious IOPs, etc. then things like connection pools and ORMs with caching are not just important but make or break the project. In fact, one could make things simpler still if there was no database involved. Heck, just use something like HazelCast and persist all the objects to disk after every write. done and done.
Very good (and timely here), so thanks. Wish more people's presentations were like this, style-wise.
Lets imagine following reasonable scenario: You maintain a Jigsaw modularized system. One day you need to use a service from a 3rd party module. That module is also modularized and even provides a service implementation. You grab that implementation but soon realize that it's not quite what you need to make it work with your classes. You can't extend it of course because it is not exported. Also many other classes you'd need to extend are in that module but not exported. What are your options?
There definitely are simpler solutions to the problem. However, the reason for the stack you mention to be used in enterprise environments, is because they already have people specialized in maintaining, scaling and optimizing huge relational databases. If you're going to store large amounts of important information, you better make sure that you do it in a way that's scalable and maintainable. There are plenty of horror stories of organizations trying to implement [hip data storage tech du jour]. That said, I prefer cutting out the ORM and use a more direct approach based on something like Spring JDBC templates and mappers.
You are welcome. :)
Fixes jfilechooser when God mode in Windows is enabled with the windows L&amp;F. Interesting.
Never seen benchmarks, but this one is scalable and with gpu support http://nd4j.org
I am not sure that anyone will ever convince me that prototype inheritance is a good thing.
If equals any faster than ==? Tbh its easier to read with the symbol
You can do something like that with any key value style NoSQL database. Akka has good support for persisting things with minimal configuration overhead besides choosing a serialization library.
With strings you want to check text equality, not reference equality. == usually only works if both strings are interned
Does anyone know what Les Hazlewood (Shiro main guy) contributed to the Java EE Security API? He's on that EG I saw.
Ah right thanks :)
Things like Lombok should be done this way. Maybe someone can finally add pattern matching and case classes.
There are several options. Here's what I would do, in decreasing order of preference: * Submit a PR with the third-party module maintainer to make it also fit your use-case. You win, everybody wins (assuming open-source). * Use a different, better-suited third-party lib. * Fork the 3rd party lib and patch it with your changes (assuming open-source). * Use `--add-exports thirdpartylib/thirdparty.pkg.name=yourmodule` to force the encapsulated package(s) to be available to your module, then extend to your heart's content (works for closed source as well). * Use `--patch-module` to compile your alternate implementations as if they were part of the third-party lib, then run with `--patch-module` to make it so at run-time as well (works for closed source as well, but not recommended). Good question, thanks for asking! But remember, it's a bit like asking 'a third-party lib has a final class, how can I extend it?'. If the author had intended for the class to be extensible, they would've incorporated that into the design of the lib. Same thing for package encapsulation with the Java module system, really. I do understand that you want to have an 'escape-hatch', and there are several as you can see in the last points. Still, doing things like that increases your own maintenance burden and will come back to bite you.
I checked it out. Tried to put it to work but I found it really cluttered from the documentation point of view.
[removed]
I use [joml](https://github.com/JOML-CI/JOML) for opengl programs. It works quite well, and it's fast.
That's a nice hack. Well done. 
Hahaha, no no, that's not me. The author did a good job of documenting a starting point for us who want to hack on the Java compiler though! :-)
IIRC, Lombok does use the AST-modifying APIs like in this article, but that's officially sanctioned by Oracle, of course (though there haven't been any massive changes in the `javac` internals). &gt;Maybe someone can finally add pattern matching and case classes. Amen to that, brother! 
Pattern matching and class classes are being added to the language. Take a look [here](https://youtu.be/oGll155-vuQ?t=20m8s). Brian Goetz will also be talking about it at JVMLS 2017.
What is a case class? 
None mentioned the options are in any way usable or pragmatic. Some even defy the meaning of a module system or the open-closed principle: ***"Modules should be both open for extension and closed for modification."***: * PR's are rejected, take ages or the lib is closed source or dead. There's no time for that. * Alternatives may not available or are likely to suffer the same problem. Why do you need to look for alternatives because of artificial, unnecessary inflexibility? * Forking assumes open source. Forking means copying code that doesn't need to be copied and unnecessary maintenance burden. What if they are releasing a new version? * Runtime arguments are [no option](https://www.reddit.com/r/java/comments/6ojmmm/so_it_looks_like_java_9_nerfs_fieldsetaccessible/dkkb2xb/). They are temporary and you're often not in control of the runtime of your costumers. Also this would also mean, that if someone uses your code, he'd also have to open whatever you opened and so on. * --patch-module: The same as above and even more dangerous. The library maintainers can not think of all usecases in advance. It's very common to extend all sorts of classes to integrate a third-party library into your specific use case. Also the Java developers do generally not 'final' their classes unless they want to be really explicit about it, e.g. "the whole thing explodes if you extend it". Even if all your effort didn't work out, you could always rely on reflection as the very last straw. This is just another issue that shows how a flawed module system is forced upon us. One that causes many hacky workarounds, needless bug-hunting, effort to migrate and next to no gain. Mark Reinhold should get out of his ivorytower and do some real world Java coding. One can just recommend not to use this thing at all. Jigsaw is for the history books.
I saw that - but it's unclear if it's Java 10, 11 or when
It's sometimes called Value Classes. Scala has it, many other languages. You list the fields and the compiler generates builders, accessors, toString, etc. Here's the proposal for a future version in Java: http://cr.openjdk.java.net/~briangoetz/amber/pattern-match.html Edit: fixed the link
Correct. I’d rather them take the time and do it right instead of just nailing it on the side.
Any application written in any language from an untrusted source is a security risk for your machine. The problem with Java applets is that they install and run automatically on your browser (without your consent). Java includes many safewards to prevent any ill behavior, but time after time, those security features were not enough because of different bugs or design problems. The recommendation now is to disable Java applets in the browser. As standalone apps they are as safe or risky as any other app. Just make sure to download your app from trusted sources. 
Value types in Java are going to refer to a different thing. Data classes, which would generate those common methods, are being considered, though. Look [here](https://youtu.be/oGll155-vuQ?t=17m7s).
And break portability?
[removed]
Have a look at vavr [pattern matching](http://www.vavr.io/vavr-docs/#_pattern_matching). This is in vavr-core and should work without any fiddling with the compiler: String s = Match(i).of( Case($(1), "one"), Case($(2), "two"), Case($(), "?") ); They also added a "standalone" module for compiler support (vavr-match) probably for exhaustiveness checks.
It's called mobile code, use that for the security term 
And until then we have other JVM languages that are compatible with Java anyways
Just make your bean `Serializable` and write it to a file. What could go wrong ;)
Isn't .toString just defined in class Object? What would an automated .toString do? Maybe a listing of fields and values. That would be nice to have.
Am I nuts for being *really* turned off by libraries that use `$` as an identifier? I mean, this is Java, not Scala or Haskell.
I was (pleasantly) surprised to see you write this comment : https://www.reddit.com/r/java/comments/6ovau5/how_to_extend_the_java_programming_language/dkkr6ie/ I'm guessing you skim read the blog? The article is about the mechanics of case classes and pattern matching (which would useful for people to understand if they wanted to implement it at the compiler level, or make effective use of annotation processors like Lombok, derive4j or Vavr).
Actually, maybe not : http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-May/012673.html
Correct. It shows the object’s hash code in hexadecimal by default. It is currently unclear what the supertype of a value type will be, though.
Not sure what you mean. But they have docs and whole ml framework built on top
Lost me at the code sample... Looks like it would print "hello world" 1 or 2 times, or it would print "goodbye world" 2 or 3 times, the first time having an exclamation point. I don't think it invalidates the rest of the article, but why such a convoluted example?
Sad to see that even today there are still developers who don't understand that this kind of singletons are an anti-pattern and are very hard to test (and mock)
Talking of extensions to Java, people who want more (from Clojure and Scala) may like - https://totallylazy.com/ by Dan Bodart and https://github.com/tsmarsh/UnderBar by Tom Marsh (both ex ThoughtWorks).
Well it wouldn't be so bad if Scala or Haskell came to mind, but personally `$` reminds me of the PHP nightmare.
I actually wrote my own annotation processor https://github.com/soabase/soabase-halva/blob/master/README.md - the problem is you can only get 70% or so of the way. It ends up being a hack.
...wut
In java the two are very different things. == with objects will compare the pointer values (that is, do they point to the same memory location). equals, when implemented properly by the object, will tell you if two objects are equivalent (if they have significant fields which themselves are .equal) . So, "which one is faster" makes no sense. You should use the appropriate one, always. 
As another poster said, the problem with applets is that they run automatically when you load the page. They're also so complex (compared to html or javascript) it was just to complicated to be able to meaningfully secure them. Run Automatically + Complicated to Secure + Doesn't Update Automatically = impossible to completely secure. Regular apps are far far more dangerous to your machine than applets were. But, they don't run automatically when you visit a web page. Desktop apps written in languages (like C or C++) where you manipulate the memory with pointers and don't automatically bounds check arrays, are much harder to write securely. Languages (like Java or C#) that don't have pointers and do automatically bounds check arrays are easier to write secure apps in. Desktop apps are inherently more dangerous because they have access to your local files, but Java is among the best languages to write them in for security (along with all the other modern languages with no pointers and automatic array bounds checking).
I haven't even heard of that thing. I take it that it has caught on in certain circles?
Oh right, I always assumed they were equal in function just were different in the backend. Thanks for clearing that up
A calculator that converts input using Shunting Yard and then solves it. That was my first Java project 
Choose something that you can write a basic version of and expand if you like. That way you're pretty safe to end up with something that works. A calculator is a good example, you can start with add and subtract and add exponent and root etc later if you want / have time. Also a sketch program like paint with drawing simple lines and shapes and you can add more complex operations if you want. Don't make something overly complex, you only have one day.
I made a variant on the game of life in my first java course and did like it. Good luck https://en.m.wikipedia.org/wiki/Conway%27s_Game_of_Life 
**Conway's Game of Life** The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. The "game" is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves, or, for advanced "players", by creating patterns with particular properties. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Non-Mobile link: https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^94236
Haven't heard of it either 🤔
The confusion there would be for people who are familiar with Java, but not with Scala. They would be terribly confused since the article jumps between both without any explanation when. That being said, like I mentioned, it's a nice experiment when restricted to experimentation, but not when writing code for production. I believe that would only lead people to confusion. No offence intended, of course (even though no doubt it is inevitably offensive).
What pisses me off about annotation processors is that they don't really provide a way to update the current class without resorting to undocumented/internal APIs like Lombok does. If they allowed us to modify the class in place, that would be a great step forward.
There is presumed knowledge in every article, constructive criticism isn't offensive. You are right, the topic (as presented) is going to go over the heads of many Dev's who aren't familar with stuff like Scala syntax &amp; concepts, higher order functions etc (using the greek names will also reek of elitism). Nobody likes to feel incompetent or missing critical knowledge so some backlash is inevitable. I would not use it in production in the exact same way as described in the blog post, as it is deliberately verbose showing stages and steps. e.g. creating a sealed type hierarchy for Books - you can do this in a couple of lines of Scala and really only a few more in Java with the right libs. But we do use similar techiques all the time and even new engineers have no problem understanding what is going on and getting up to speed with it. I think you can kind of see that from some of the comments here, that Java Devs have a good intuition of the concept for Optional (and think the blog post was trivial).. It comes for other types just as easy.. 
We have been using it now in our non springboot applications. It's fast and it was much better then the former one (i i forgot which connection pool we had before)
Yes. We switched to it a while ago. It’s very fast but more importantly rock solid from what I’ve seen. 
I only know that It is default in Play Framework and Clojure's Luminus framework.
Ok, should've checked your comment history before taking the bait. Look, among other things, modules offer strong encapsulation for packages. Similar to the kind of encapsulation we already had at the class level through private/protected etc. Don't like it? Keep using the classpath for your applications, no one will lose sleep over it. Is modularity painful? Sure, it can be. Whether you use Jigsaw, OSGi or another module system, it will always impose additional restrictions over a free-for-all just throw everything on the classpath approach. That's just the nature of the beast. If you don't think modularizing your applications using one of those tools benefits you, then don't. Simple as that. 
BoneCP? c3po? 2 years back we switched from BoneCP to HikariCP, never looked back it's a beast. 
I also did the same sort of project for my 3rd year university project!
I think it's being considered as one of the best connection pools available, even by its predecessors: &gt; BoneCP is a Java JDBC connection pool implementation that is tuned for high performance by minimizing lock contention to give greater throughput for your applications. It beats older connection pools such as C3P0 and DBCP but SHOULD NOW BE CONSIDERED DEPRECATED in favour of HikariCP. https://github.com/wwadge/bonecp
&gt; The main reason I found was that Spring Boot plays nice only &gt; when you play by its rules i.e. auto configuration. This is the entire point of Spring Boot. It has strong opinions about how you should do things, and while it is possible to relax those opinions, you still have to do things the way Spring Boot expects. The Spring Framework is a separate project that Spring Boot builds upon. The Spring Framework doesn't really have any opinions about how you should do things. Most Spring projects make good use of Maven and provide tools like builders to help you with configuration and dependencies. But, because the Spring Framework stays out of your way, you have to do more work to gather dependencies and ensure consistent configuration. So, don't use Spring Boot if you don't like its opinions.
&gt; So, don't use Spring Boot if you don't like its opinions. This is what I was afraid of despite having the following point in spring boot reference &gt; Be opinionated out of the box, but **get out of the way quickly** as requirements start to diverge from the defaults.
Yep, spring boot is just auto configuration with some fixed dependencies (and some things like the actuators). If you're not doing auto configuration, you're not let with much over Spring. Boot has plenty of options to customise the context, either through configuration options or defining your own beans.
You should understand the auto configurations too. It's easy to override it if you know how.
Hmmm I'm not sure about that, this article describes a modification to the Java compiler, so it's basically a new programming language derived from Java. Which is nothing wrong, but it would make Lombok much more impractical if one had to switch compilers to use it. Lombok resorts to "hacks" (undocumented compiler APIs) because the public APIs are too limited, but it does allow it to be used with otherwise vanilla Java projects.
I've always felt that Lombok was a quasi alt-Java language anyway. 
Try to configure a production Liferay portal 
You are absolutely right. As others mentioned already, Spring Boot is very opinionated, auto configuration does too many magical/unwanted things behind the scenes. Registers lots of beans that you know you'll never use. For example, I noticed something like RefreshBean coming from actuator, which allows context refresh, and I knew I don't need it because I work with microservices, I will just restart the container(s). But I noticed that bean and auto configuration after couple of weeks, and disabled it. Same with health checks, servlet filters and many other things. I personally find Spring Boot too aggressive on auto configuration. However, conditional beans (that I create) and some other easy configuration options, for exsmple, property sources order and so on are awesome features, so I keep using Spring Boot, _with_ auto configuration but in the same time being very careful about what actually gets registered/configured automatically.
I think the biggest thing that has helped me with the problem you describe is that Spring Boot is open source, so whenever I disable autoconfig for some aspect, I dig down in the code of the class that defines that config to learn everything that it handles (and how, exactly). Then, using this information, I can re-add the dependent config classes needed back to my own "manual" Boot config. Hopefully that makes sense. It's been a while since I had to do this but if an example is needed, I can go back and find one.
&gt; despite having the following point in spring boot reference I think you have unrealistic expectations of what that means. Spring Boot *will* get out of the way, if you start disabling its autoconfigurations. But, it's a pointless effort to change the nature of the product you are using. Realistically, if you're going so far in disabling and overriding Spring Boot, why are you using it in the first place?
That does make sense and that is exactly what I ended up doing. But isn't that a bit too much of a work to configure a project ? Open Source is great but if one has to look at the source code to get the configuration right, then the framework is failing in its objective IMO. A reality check .. shall we ? .. For how many frameworks other than Spring Boot you have to look under the hood to get configuration right ?
I am still using it mainly because it offers environment specific configuration out of the box .. I know that isn't big but I make heavy use of it .. 
Your 4th point is incorrect. You absolutely can configure the connection pool properties for any of the supported data sources (see https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html). Have you taken time to look at any of the source code for the auto configuration classes? Most of them have bean declarations annotated with @ConditionalOnMissingBean which means to provide a custom implementation of a Spring Boot provided bean, all you need to do is provide a bean of that type, and configure it how you want. I have been using Spring Boot since almost it's inception and "it does too much magic" is what I hear a lot from people. To those people I say "if you read the docs and look at the source code, it's no longer magic". The source code tells you what it does, why does it seem developers don't want to look at it? I'm not trying to insinuate you haven't, but if you want to understand the "magic" of Spring Boot, looking at the source code is a good way of doing it. 
Yes, you are totally correct. The information about exactly how and why each autoconfig works should be published on the Boot website, and we shouldn't have to dig through (sometimes hard to trace) Spring code just to find this stuff out. 
Yes, indeed. Thank you for the correction.
came through on my mac the other day, thanks big red
One of my favorites :) along with [Wa-Tor](https://en.wikipedia.org/wiki/Wa-Tor) (which, BTW, is also a great quick project). I use both as early projects when learning new languages.
**Wa-Tor** Wa-Tor is a population dynamics simulation devised by Alexander Keewatin Dewdney and presented in the December 1984 issue of Scientific American in a 5-page article entitled "Computer Recreations: Sharks and fish wage an ecological war on the toroidal planet Wa-Tor". "(T)he planet Wa-Tor ... is shaped like a torus, or doughnut, and is entirely covered with water. The two dominant denizens of Wa-Tor are sharks and fish ..." Wa-Tor is usually implemented as a two-dimensional grid with three colours, one for fish, one for sharks and one for empty water. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
&gt; Don't like it? Keep using the classpath As [Mario Fusco](https://www.youtube.com/watch?v=qmeBb0TAIJ8&amp;feature=youtu.be) said, library developers basically don't have a choice. Application developers often don't have the choice either. It's the [architect](http://dilbert.com/strip/2017-07-18) - or worse the manager - that decide. Because they hear "modules offer strong encapsulation". Also what if I use the classpath, but the library / framework maintainer is expecting the consumers to use the modulepath? When I raise an issue or make a PR he could say: "You're not supposed to do this" or "Use the module service registry", eventhough my request could be a fine addition for those using the classpath. &gt; Is modularity painful? Sure, it can be. Whether you use Jigsaw, OSGi or another module system, it will always impose additional restrictions I'm also fine with accepting restriction, as long as they make sense and are not artifical. Caused by unnecessary limitations of the module system design. OSGi has way less issues like that than Jigsaw (we are using it in some of the applications at work), most of which will hardly be fixed because they are part of the core design. E.g. the issue I mentioned above or the one asked at the end of your talk. Oh and btw. it was the "not-so-strong" encapsulation with setAccessible that helped become Minecraft the most played game.
The lesson to be learnt from frameworks is that it isn't worth making hard things harder just to make easy things easier.
Is that all you are using Spring Boot for? Note that environment specific configuration is not a Spring Boot feature, it is a Spring Framework feature. Spring Boot just a layer on top of Spring Framework that automates existing Spring Framework functionality like [@Configuration and @Profile](https://spring.io/blog/2011/02/14/spring-3-1-m1-introducing-profile/) and [Property Placeholder Configurer](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html). If this is all you are using Spring Boot for, you can manually configure Spring Framework far more easily than tearing out all the wires from Spring Boot and trying to manually rewire it.
I can concur, while I found it was easy to start off with, but too much magic I couldn't stand for (just my opinion). I tried few others like Spark-java, before resorted to http://jooby.org 
Although, the corollary is that sometimes the productivity gained from making the easy things easier is worth making the hard things *possibly* harder. At least, that's been my experience with Spring Boot, in particular.
You don't need to look at the source code to figure out what auto configurations are being applied, [just ask](https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html#using-boot-replacing-auto-configuration). Any Spring Boot app started with the debug flag will print out a report. &gt; A reality check .. shall we ? .. Yes, absolutely. I have spent much time digging around the Spring Framework and Spring Boot source code. Sure, I could have gone to the documentation or *shudder* StackOverflow, but there's no better way to learn the way your tools really work than by reading the source code. That's why I feel crippled by vendor software, because problems not covered by the documentation require vendor support.
I've been asking myself this question. How do you override it easily. Say you start off with spring-boot-starter-data-jpa, and it has Hibernate underneath. For whatever reason you want TopLink. How do you do it?
&gt; For whatever reason you want TopLink. How do you do it? 1. [Exclude Hibernate from Maven](https://github.com/dsyer/spring-boot-sample-data-eclipselink/blob/master/pom.xml). 2. [Manually take over control of JPA configuration](https://github.com/dsyer/spring-boot-sample-data-eclipselink/blob/master/src/main/java/sample/data/jpa/SampleDataJpaApplication.java). 
Heh, the way I see it is that Spring (Boot in particular) lets me get to the essence of the hard problems quickly... so I don't have to re-invent 1000 different wheels before I even get to the hard problems.
Item 3 is partially right, it's not hard to understand (just time consuming) but replacing it certainly is hard (you probably need an new parent pom that excludes their auto-config dependencies for the ones you'd want to replace, but don't quote me on that part). The short is using the `@Conditional` annotations to activate a class and the beans it may provide. It works based on the optional dependencies in some pom allowing it to compile, but not bombing when the symbols are missing for actual instantiation. Usually those poms are broken into two different ones, the main auto configure pom which gives the conditional classes (check spring boot's parent pom, but you can bring your own of these and I have on many occasions), and the starter pom that is pretty much just a pom to actualize the dependencies from the optionals thereby activating your conditional classes.
Thanks a lot! Is there a list somewhere that has all the Spring Boot configuration endpoints like JpaBaseConfiguration? Also, because of single inheritance in Java, how can you do configure multiple things? 
Thank you. This is exactly how I feel about "too much magic". You can look directly at how it's done, if it doesn't suit your needs, you have a reference implementation right there and the best part is you even write your own auto configuration, if you have libraries you use on several spring boot projects across your environment. It's even easier than reading setup documentation in the old xml days, imo 
&gt; Is there a list somewhere I'm not sure. To be honest, I prefer digging around source code to find these things, or checking out sample projects either at the official [repo](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples) or the repos of prominent Spring contributors, such as [Dave Syer](https://github.com/dsyer?tab=repositories). &gt; how can you do configure multiple things? The way the configuration is done in the example isn't how you would want to do things in real code. The Spring Framework lets you pile on annotations onto a single class, so the class in the example serves as both the main class (`@SpringBootApplication`) and a config class (`@Configuration`). Ideally, you should have separate config classes, so that single inheritance isn't a problem.
The main thing I find unfortunate about Spring Boot isn't actually an issue with Spring Boot itself. A couple of times I've run into libraries that claim to have Spring integration but that actually have Spring Boot integration, with configuration systems that are hardwired to assume the application is using Spring Boot autoconfiguration and that offer no reasonable alternative for setting them up. (I mean, obviously it's possible to do; autoconfiguration isn't literally magic. But if there's no documentation beyond "Autoconfiguration will set everything up for you," it's a giant pain.) If a big enough percentage of Spring applications use Spring Boot, I suppose it's inevitable that library developers will conflate the two. And it's not just third-party libraries, either; an example that comes to mind is the Spring Cloud Config client.
There's Sentry. It's not good, but satisfactory, as it uses a Log4j or slf4j logger appender, which means you need to set up MDC attributes yourself. There's no integration with various frameworks. I've used it with php and JavaScript projects and it's very good. I've not integrated it with Java yet due to the extra work required. 
Use dropwizard
They mean by overriding individual beans, not disabling its configuration completely.
And if you run in debug mode, Spring Boot will print out the results of its auto configuration, including what conditions are required for a bean to be registered.
I've been in the same boat, but my main worry is about new developers, actually. Way too many questions on StackOverflow about Sprint Boot end up with "add annotation @Blah on your class X". While solving those users' problem it leaves them completely oblivious to the inner workings of the framework. I've seen it once already. A team was happily writing a Spring Boot application while the magic "just worked" for them. And one day, after a minor change, it suddenly stopped working. The application refused to start due to circular references, but the magic worked before and resolved them. Suddenly, the team was really unhappy, digging through piles of documentation they have not read before and trying everything at once. At that point I started to wonder if classic Spring's approach "read this book first, then you can try to write an application" is better then "relax, it just works" at first with a sudden bust of complexity down the road - where it may be too late to re-arch the application.
I recently converted an old project to spring boot. I probably scrapped about 95% of the XML config. I stopped having to care about setting up most beans. Things just worked.
Except if you set `debug=true`, Spring Boot will tell you what it found and possibly more importantly, what it didn't find. There's a whole report on what happened during the auto configuration and the conditions required to set up various beans.
The corollary I can think of after struggling with Spring Boot recently is, something like Spark Java just works and doesn't require magic. I think Spring Boot is a step in the right direction, I think the next step is for Spring Framework to seriously be put on a major diet.
Regarding credentials in connection pool, you can use environment variables superseding boot properties or use Spring Cloud Config. That way properties are not deplyed as part of your artifact.
Posting code snippet here since the Auto Moderator bot seems to think I am asking for help on some homework...heh. From the source in `langtools/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/JCTree.java`: /** (let int x = 3; in x+2) */ public static class LetExpr extends JCExpression { public List&lt;JCVariableDecl&gt; defs; public JCExpression expr; protected LetExpr(List&lt;JCVariableDecl&gt; defs, JCExpression expr) { this.defs = defs; this.expr = expr; } @Override public void accept(Visitor v) { v.visitLetExpr(this); } @DefinedBy(Api.COMPILER_TREE) public Kind getKind() { throw new AssertionError("LetExpr is not part of a public API"); } @Override @DefinedBy(Api.COMPILER_TREE) public &lt;R,D&gt; R accept(TreeVisitor&lt;R,D&gt; v, D d) { throw new AssertionError("LetExpr is not part of a public API"); } @Override public Tag getTag() { return LETEXPR; } } Of course, we cannot use it directly, but the very fact that some support for let is already in place in the Java compiler is ... intriguing!
&gt; Way too many questions on StackOverflow about Sprint Boot end &gt; up with "add annotation @Blah on your class X". This, right here, explains in clear detail why I hate StackOverflow. It encourages [Programming by Coincidence](https://pragprog.com/the-pragmatic-programmer/extracts/coincidence), where people find an answer on SO, it solves their problem, and then they don't find out *why it worked* and *what the consequences are*. Those who think Spring Boot is "magic" remind me of Arthur C. Clarke: Any sufficiently advanced technology is indistinguishable from magic. Spring Boot is magic if you don't bother to understand the technology.
Do you have a **downloadable** version of the video ?
Sure it's practical solution to making desktop GUI software. I'm not sure what you mean by failure. If by failure you're referring to its market share, then you're really making an observation of its use more than highlighting any technical shortcomings. It's featureful, it's portable because it's in Java SE, and it will be supported by the Java community going forward. There are many desktop Java programs that are well liked (eg, IntelliJ). If you are already comfortable programming in Java, then JavaFX sounds like an appropriate technology for you.
Thanks for the reply! I think I will be using JavaFX after some more research!
JavaFX is a good choice but if you are looking for something a bit more native looking then [SWT](https://www.eclipse.org/swt/) is a solid alternative for writing desktop application with Java.
We still don't know if Kotlin will be adopted by developers or it will end like Jython, Groovy, Frege and Jruby.
Thanks, Sentry looks promising. I'll give it a try today
Check out Gluon's Scene Builder: [http://gluonhq.com/products/scene-builder/](http://gluonhq.com/products/scene-builder/) ControlsFX: [http://fxexperience.com/controlsfx/](http://fxexperience.com/controlsfx/) And JavaFX subreddit: [https://www.reddit.com/r/JavaFX/](https://www.reddit.com/r/JavaFX/)
~~The only disadvantage over native solutions is that you need users to have their Java up to date, really. If you're targeting enterprise that's probably a non-issue, and even for home users, I'm sure most of them have probably updated in the last, what, 3 years now?~~ ~~JavaFX is lovely though. It works perfectly fine and it's easy to maintain if you're familiar with XML already.~~ EDIT: Disregard literally all of that, I forgot about packaging the JRE with your program. I think I've been working the backend too long, guys.
A couple more links... FXLauncher: "Auto updating launcher for JavaFX Applications. Combined with JavaFX native packaging, you get a native installer with automatic app updates." [https://github.com/edvin/fxlauncher](https://github.com/edvin/fxlauncher) And be sure to scroll through the posts on the FXExperience blog: [http://fxexperience.com/](http://fxexperience.com/) 
Also TornadoFX, if you're willing to consider Kotlin (which you really should). 
There is another disadvantage: starting up the JVM takes time and the application will be sluggish for a few seconds before JIT kicks in. It's not a huge difference but it'll make your application feel sluggish compared to a native one.
We at [Codename One](http://github.com/codenameone/CodenameOne/) use some features of JavaFX during desktop distribution. Here are some of the problems we experienced in our relatively edge case solution where we don't really use most of the JavaFX functionality: - javafxpackager was flaky for us. It produces HUGE files and you must use the 32bit version for Windows. Distribution thru the stores is very painful. For Windows store we have our own UWP port which works better for our case. The setup environment for javafxpackager is a pain when we get a new server up on Windows. - Media is pretty problematic for us, e.g. streaming content over https doesn't work - Webkit has a lot of issues and crashes - On Linux we have a lot of problems with people who use OpenJDK which still doesn't include FX - We ran into some issues with Mac retina devices, when combining images, fonts etc. This might be something related to the way we use the API but I noticed some issues with some revisions related to retina screens Personally as a huge Java advocate I don't recommend our own desktop port to people anymore because of those things. For Windows we push people to the UWP port of our platform and for everything else we have a JavaScript port that's implemented on top of TeaVM and is surprisingly small/fast. E.g. a simple app in the desktop port with javafxpackager carries the entire VM at 100mb. But the JS port of the same app can be just over 300kb in total size and run right in the browser.
If you have a long running desktop application then JavaFX is a fine choice. You will never reach the feeling from an application with native implementation or compilation (snappy startup times). You also either require an installed or shipped JRE which bloats your software quite a bit. This might get better with Java 9 where you can create your custom JRE for your application.
For what I can see, the most common way to build desktop app these days is by using https://electron.atom.io/ But if you care a lot about performance I'd go with Qt. 
I think the bigger news is spring boot wont support camel case, properties. It was a rather annoying experience trying to figure out where the error in my config was coming from. Had to switch all my camelCase to strike-through-case
Isn't part of the point of using 31 that you could replace the multiplication with shift + subtraction? How does that stack up?
C3po and we have used bonecp even before that
Include actuator project . There are some decent end points that shares some good insights.
Wrong endpoints
Which version are you using? That tool hasn't been called `javafxpackager` since JavaFX 2/JDK 7. I think the JavaFX WebKit is getting updated to Blink in Java 9. Not sure, though. OpenJDK users can be told to also install OpenJFX. Debian has it packaged as a plain old Java library. JavaFX 9 contains significant improvements to support for high-resolution displays, including Mac Retina. Give it a try. Java 9 will let you remove parts of the JRE that aren't needed by your application, reducing download size. The JS port being small is kind of cheating, because most of the run-time (i.e. the browser) is already installed.
Yeah, only thing is it is an eclipse project. I've learned my lessons, will not touch any eclipse stuff for a long long time still. It's like open source done by offshore consultants :/
WPF isn't portable. I wouldn't touch it with a ten-foot pole. There is no Java binding for Qt 5. There is one for Qt 4, but that version is no longer developed, so it's a dead end.
That applies to all JIT languages, including the currently-trendy JavaScript. I think it's safe to say that no one cares.
Java 9's deprivileging may make Java safer to use in the browser again, but in that regard it's likely too little, too late. Pity. Having a JVM in the browser would be amazing.
can you elaborate? what do you mean?
Eclipse foundation code I've worked with in the past tends to be * bloated * inefficient * feature incomplete (jgit... ugh...) * promoted as the best thing since sliced bread Kinda in line with their application platform disguised as a Java IDE. Just say no. Bad stuff should not be encouraged or used.
I would add JFoenix https://github.com/jfoenixadmin/JFoenix if you like to play with Material Design :)
I have used bugsnag.com very little, but know that it exists.
noobie here. * why specifically * 31? * wouldn't this overflow quickly with large arrays?
&gt;If you write a library that needs to make fields accessible in other modules (e.g. Jackson, et al) what do you do? You tell your users that they need to open their relevant packages to your module. That's one line per affected package in their module-info: `opens &lt;some package in your module&gt; to &lt;other module&gt;`. No big deal. Jackson example: opens package.in.this.module to com.fasterxml.jackson.databind; The FUD in here is ridiculous.
&gt; The only disadvantage over native solutions is that you need users to have their Java up to date, really. You don't. You can just ship a JRE with the app.
What is the difference between Gluon's Scene Builder and the Oracle one? Thanks for all the helpful links, respect.
What if it's for a module you can't anticipate? This is not a solution.
i.e. make consuming JARs an order of magnitude harder than it is today. No - this is not a solution.
From what I remember of my compiler classes in college, a simple loop like that should be easy for the compiler to automatically unroll. How is javac still missing that?
Then I have to ask why the hell a module needs that kind of access to every other module.
Gluon took over development of Scene Builder, so they provide the current version. They fixed some bugs, and added a few new features. Theirs is the one to use.
Adding that declaration is not an order of magnitude harder than adding a normal dependency.
- 31 is a prime, and primes have a unique factorization which supposedly help with uniqueness. - Yes it would overflow, but that isn't a problem (it doesn't throw an exception). It's basically as if you have an infinite-bit number but you just take the last 32 bits of it. Don't forget that hash codes are simply 'best effort' for uniqueness. Two objects which aren't identical are allowed to have the same hashcode, but performance will suffer if that happens frequently in certain collections like sets and maps.
Well maybe Maven and Gradle will just do it automatically and then it will be pointless anyway. Just auto-add all the open statements. It's ludicrous to make users worry about this.
Thank you very much, Sir! I just run a little test and the Int just seems to "loop around" instead of throwing an exception (which I expected at first). I guess this might even be beneficial to the 'uniqueness' if you can say so.
I would say so
The rule of thumb I've heard is that you can assume it'll add at *most* 10% to your startup times, on modern hardware. If that bumps things up from 1000 ms to 1100 ms for modest programs, I think most users can deal.
&gt;Just auto-add all the open statements. Those statements should only be added when they're actually needed, and only for the specific packages in which they're needed. Otherwise, modules are not fully isolated from each other. There is a shorthand for opening the entire module to all other modules. It's the lazy, unsafe option, but it's there. &gt;It's ludicrous to make users worry about this. What I find ludicrous is that you're whining so loudly about something so minor as adding a few `opens` statements to your module-info.
It's worth pointing out that embedding an *entire* Java 8 JRE produces an installer that's **still** smaller than an Electron app. Java 9 should drop that even further by a significant margin.
Have you looked at OverOps? 
The Spring framework was already too complex to understand / configure. It can't get worse than that so no Spring Boot doesn't make it any worse. Like a few others have mentioned other frameworks are much easier to use and yet have most of the functionality. Spring had no reason to be complex other than "enterprisey" all these years.
I don't use it but what irritates me is that now when I search Spring issues all I get in the results is the Boot answer which is always useless to me.
I can't speak to JRuby, but Groovy adoption is in an entirely different universe than Jython and Frege. Groovy is in Grails, Gradle, and Jenkins -- just to name a few contexts. Edit: also supported in Spring Boot!
We're using a JDK 8 a relatively recent update. We use it thru NetBeans so it can mesh with our automated build scripts and don't call the command line directly. I heard about the JDK 9 update but since JWebPane was something Sun had promised for years I take these things with great skepticism. That's interesting about the Open JDK packaging. I only use Linux on servers nowdays. Right now we just tell people to install the OracleJDK. The main problem is that people get a weird failure and even though we print the error its hard for us to print only that error because it's really hard to catch that specific case so some I'm assuming we are losing some people who never contact support... The module system of Java 8 will be great for most things but Java FX is pretty much the biggest thing there and we need Swing etc. I don't we'll reduce more than 30% and that's optimistic. I totally agree that JS has an inherent advantage with the browser being installed. FYI even wrapping the JS port with Electron it is still significantly smaller 30-40mb size. The point isn't an inherent debate but the result to the end user which is why being smaller is really relevant.
especially when you consider the benefit of truly writing once and deploying everywhere!
Ive seen multiple people mention that Netflix are using spring-boot but I cant find any evidence of them actually using it.
Nope, SPRING made Spring too complicated. Use Vert.x and cut your dependencies in a 10th, your coding time to 1/4th, and increase your speed. 
FYI, javac doesn't perform optimizations of that kind (used to in very old JDK versions). Nowadays this responsibility has been shifted to the JVM/JIT compiler. 
There was a grad student thesis that implemented a JVM in Javascript. It's slow but it runs java
Yup it's called integer overflow and Java doesn't throw an exception. It just "wraps around", as if there were phantom extra bits beyond the 32nd bits.
&gt;We use it thru NetBeans Then you have no idea what `javapackager` (that's its current name) can and cannot do. RTFM. &gt;I heard about the JDK 9 update but since JWebPane was something Sun had promised for years I take these things with great skepticism. Well, that's silly. Updating the browser engine that's *already there* is not nearly as hard as integrating one from scratch. Edit: [New WebKit has been merged into OpenJFX 10](http://hg.openjdk.java.net/openjfx/10-dev/rt/rev/74bf09f4ed14). Not sure if there are any plans to backport it to OpenJFX 9. &gt;The module system of Java 8 will be great for most things but Java FX is pretty much the biggest thing there and we need Swing etc. Why would you need Swing in a JavaFX application? &gt;The point isn't an inherent debate but the result to the end user which is why being smaller is really relevant. In my experience, nobody cares about the download size.
Electron involves a lot more bloat because every single application is bundling an outdated and buggy browser. Using Electron is a sure way to get a lot of hate because it's essentially using a browser for a single website.
You don't list your specific application and JavaFX might be the right the choice for a desktop application. As the comment above said about market share with desktop GUIs, make sure you use good MVC principles in your design. Maybe you will want to pivot to a web or mobile based application in the future. If your business logic is well encapsulated, you should be able to simply create a different presentation layer with little effort.
TIL there's a GUI library for Java that uses native controls.
Integer.MAX_VALUE + 1 == Integer.MIN_VALUE, but Integer.MAX_VALUE + 1L == 2147483648L If you expect an overflow and actually want the bigger number, use a long as one of the arguments, or BigInteger.
That optimization isn't exactly what I'd call low-hanging fruit. It would be easy enough for the compiler/JVM to unroll the loop into something like this... public static int hashCode(int[] a) { if (a == null) return 0; int result = 1; int i = 0; for (; i + 3 &lt; a.length; i += 4) { result = 31 * result + a[i]; result = 31 * result + a[i+1]; result = 31 * result + a[i+2]; result = 31 * result + a[i+3]; } for (; i &lt; a.length; i++) { result = 31 * result + a[i]; } return result; } ...but just unrolling the loop doesn't look like it would do any good on its own. I'm not sure how the optimizer would get from there to the form in the article. It doesn't look like any standard optimization I'm aware of, and I'm having a hard time imagining how that particular optimization could be generalized into a pattern that occurs often enough to be worth implementing.
I read the docs well and they don't offer anything we can't access thru netbeans. Saying RTFM instead of pointing at something wrong in what I said is meaningless. Thru our customers we have hundreds of javafxpackager apps built and delivered, how many did you deliver and ship into production? Updating webkit is in the way it was integrated is ridiculously hard! The fact that they updated webkit is meaningless since webkit is just a piece of the HTML5 compliance puzzle and doesn't indicate if the crashes/bugs are solved. In fact I'll bet you that it has a lot of new regressions because that's the way these things work... A simpler solutions just embed a ready made web widget. That's more volatile and less powerful but it would have made integration simpler and easier. E.g. on iOS/Android we just embed the native web component. Zero overhead and seamlessly updated. JWebPane is VERY relevant because it demonstrates the length of time between promise from the team involved, to delivering something completely different on a different platform that's still half baked. There is a serious management/engineering gap within that team, they are great at promising and delivering features... They suck at refining and making them work. Our apps use Swing we don't need JavaFX but since Swing never added support for a proper browser component, media or various other things we have to embed JavaFX. &gt; In my experience, nobody cares about the download size. How many installs do you have and what markets did you target? With some applications people start downloading and it takes so long they start doing something else and forget about the download. This is very common in the consumer industry where one of our customers who is building an IM style app preferred a web version of the UI as a result of this.
If you hack the java compiler like this directly, you're making a new language that isn't java anymore. Lombok kind of blurs the line, but here are things lombok gets to do, which 'hack on javac directly' does not: * Lombok usually just 'works' in any random tool, as long as it calls out to system javac. * There is no need for you, the user executing the dev tool, to have write access to the javac executable. * Lombok works with stock maven (or stack gradle if you prefer), using stock configuration directions ("I am dependent on lombok. done.") In my opinion, the above is important but not a show-stopper. What IS a show-stopper, however, is IDE support. If you hack on the compiler like this, it's going to be that much harder to get IDE support going. And, hey, if you write java without an IDE, I dunno – I don't understand that as a concept. I just don't see how you can do that and not go crazy. I don't consider that a relevant scenario at all (a language with no tool support, especially a java-like one, is pointless in my book). The kinds of things lombok does today require no or very little tweaking of IDEs to integrate. The few things that are missing are bonus features (it would be nice if IDEs have a lombokify refactor script to replace things with `@Getter` or `@Value` or whatnot). The doors you open by doing direct compiler hacking like this tend to mesh near perfectly with the concept of 'stuff that is going to be MUCH more difficult to adjust IDEs for'. Having said all that, lombok DOES do some of this hacking and even does it without actually requiring anybody to recompile anything: We use agents to modify things. Right now we only do this to eclipse, and only very sparingly (basically, to inject lombok in the right place, and to fix a handful of bugs because compilers (neither javac nor ecj, nor the parser intellij uses internally) do not understand the concept of 'these nodes are generated and aren't actually in the raw text content of the current source file'). Still, we COULD do it to javac and hack.. whatever. We could make javac -cp scala-by-javac.jar foo.scala work, having javac compile scala code. the scala-by-javac.jar would have rewritten just about everything and at this point 'javac' is a lie; no parts of the javac executable on your system is even run, except the part that loads in the classpath and sets up annotation processors (at which point all is hijacked and javac is told there's nothing left to compile anymore, the AP takes care of the rest). So, when I said the lines are blurred, I wasn't kidding. Lombok HAS case classes already (`@Value`). As far as pattern matching is concerned, now we get to the real gist of the above esoterics: _The rule used by team lombok today is as follows: It has to be syntactically legal vanilla java, even if it makes no semantic sense, **before** lombok does anything to your code._ As long as we follow that there is no need to change compiler internals as in this article, and it gets us all those other benefits (that tools tend to do the right thing automatically with what we add to java) as well. I haven't yet seen or thought of an acceptable way lombok can offer pattern matching, given the restriction that it has to be syntactically valid java. Note that Brian Goetz' Project Valhalla is researching pattern matching, and value types smell of case classes in their own way. valhalla is not completely done yet (but it's getting there; there's a complete, in-depth 'patch' to the java lang spec for it already), and at the very very very earliest will show in Java 10, and that's ambitious. 
Yes. $ is already established as being syntactic hinting for: "This is generated. Don't touch it, consider it special and exclude it for various analyses". That vavr reused it is bad enough. But, really, what irks most of all is that vavr is going down the path that so many other languages have: Cartoon swearing. Presumably with the aim to sacrifice all in the name of the God of Short Code, symbols are shorter than any keyword or name, and thus, where-ever possible, use symbols. For everything. There's such a thing as 'too much syntax to juggle around in your head'.
It's more than just an embedded website. As I said, if performance is a concern I would go for Qt
 &gt;It's more than just an embedded website. Barely. The main work area is still a website. You get some control over things normal websites don't like being able to manipulate windows and their aspects and some system APIs. The line between these system APIs and what is available from a web browser is getting thinner over time. &gt;performance is a concern I would go for Qt It's not just runtime performance. Bloat in terms of raw application distribution size is unreasonably large, considering everyone already has a browser on their system and there's no reason for every Electron app to ship another copy of the same thing. This is a very bad direction to go in, blindly increasing the size of an application by some 50-100 MB. We've already seen similar trends in mobile apps where apps become humongous for what they actually do simply because the developers pay absolutely no attention to the package size. The phase of embedded websites as apps on mobile is already getting old and web application support for normal website to work like an app is gaining more traction. It's worth learning from past mistakes and avoid them in the first place.
good bot
Thank you Alpgh367 for voting on WikiTextBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://secure-dawn-77807.herokuapp.com/).
Yeah - this. I wish they had called it something different :)
also the startups are even more terrible because you spin up a whole web browser :P
It's got decent adoption if /r/androiddev is anything to go by.
Couldn't you code a reference implementation of a contract that was clean and readable, then iterate and revisit if a newer JVM comes out where a specific case implementation is poorly optimised?
Good question! Kotlin seems to be more progressive and comfortable language for teamwork due to its conciseness and simplicity. You can forget all the doubts and make an optimal choice – Kotlin. In this blog, for instant, I found some useful information: https://erminesoft.com/java-vs-kotlin-for-android-development/
I am afraid I don't - the video is a courtesy of skillsmatter London. The html slides are here, FWIW: https://www.optaplanner.org/learn/slides.html
Hibernate (and JPA) are ORMs, or as I like to call them: object graph persistence APIs. This means that they're used to fetch object graphs from databases (mostly relational), handle client modifications of such graphs, and then handle the tedious act of persisting such modifications again to the database in the most efficient way. Hadoop is something entirely different. Like other analytics databases (e.g. SQL based ones like Hana, Oracle TimesTen, Redshift, Vertica, VoltDB, ...), these systems are not designed to persist object graphs. So, even if there may be efforts to run [JPA-on-Hibernate-on-SQL-on-Hadoop](https://twitter.com/codinghorror/status/347070841059692545), I think you're best off to just use Hadoop's native querying APIs and skip Hibernate for this task, because the several layers of abstractions will just keep you from using Hadoop the way it was designed for.
Although [Hibernate OGM](http://hibernate.org/ogm/) supports some NoSQL stores like * Key/Value: Infinispan; Ehcache * Document: MongoDB * Graph: Neo4j Hadoop is not supported at all. As for using an SQL layer on top of Hadoop, like [Apache Drill](https://drill.apache.org/), it's not enough for using Hibernate ORM with it since it will require a Dialect and it's unlikely that all the required RDBMS-like features will be supported so that you can use Hibernate ORM to store and load data from Hadoop. Last but not least. Hibernate ORM is meant to be a data access layer for OLTP applications while Hadoop is meant to be used for OLAP. 
JavaFX is really solid. I'm currently writing a Python GUI app and, while I really like Python, PyQt and Tkinter make me miss JavaFX.
I've used hadoop since '08 and never used hibernate with it, so I'll throw in on the "no, unless your organization uses them both" side. 
Also 31 is 32 - 1 which is nice because `x * 31` can be optimized to `(x &lt;&lt; 5) - 1` which is fast on modern CPUs. Similarly good are 127 and 257.
Wow indeed. Please don't. Use Dependency Injection instead, that way your code will be testable. If you really have to do this for some obscure or local reason, use the enum approach. If you _really_ need lazy initialization, use DI. If you can't, use the [Initialization-on-demand holder idiom](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom) which is completely missing from the article, but has been _the_ solution for years until DI came around! Oh, also, their double-checked-locking example is broken, it is missing `volatile`.
**Initialization-on-demand holder idiom** In software engineering, the initialization-on-demand holder (design pattern) idiom is a lazy-loaded singleton. In all versions of Java, the idiom enables a safe, highly concurrent lazy initialization with good performance. The implementation of the idiom relies on the initialization phase of execution within the Java Virtual Machine (JVM) as specified by the Java Language Specification (JLS). When the class Something is loaded by the JVM, the class goes through initialization. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Here you go: https://github.com/search?q=org%3ANetflix+spring&amp;type=Code
I've been doing a little frontend work recently, I am also finding Javascript ES2015/2016 to be far better than the mess I had to deal with ~3 years back.
Special case when you don't have to feed output as input (x = f(x)) because you can simplify it into one equation knowing number of elements involved: (a1 * 31 + a2) * 31 + a3 = a1 * 31 *31 + a2 * 31 + a3 Etc
Thanks
`Object::hashCode` is that contract. Not sure what you're asking. 
Can you provide statistics, numbers?
Thanks guys for the detailed clarification. Now I know it would be not futile to learn Java Hibernate to become a hadoop developer.
JavaFX is so cool tool… I have to recommend it to you
IntelliJ is written in Swing.
Crudest measurement is checking Github for projects using the language. Kotlin is 20k, Groovy 35k.
And Java has ~~222k~~ 3.4 million projects.
What I'm asking is instead of using the built-in, using your own contract that under-the-hood can implement it's own hashCode. If it's not possible because {reasons}, then I would simply not use Java for the task where this produced significant effects to cause a problem, or seek out / create an alternative implementation.
3.4 million by my count... Although maybe my query is wrong https://api.github.com/search/repositories?q=language:Java 
You are right. I was counting active repositories from an old statistic. EDIT: Even Haskell has more repositories than Kotlin!
Man, there is also an api to parse csv files ? That might seem like a little thing but in almost every project I had a developer build this feature from scratch. This is very cool.
man, they did not look too far there are tons...
[Obligatory](http://lmgtfy.com/?q=Java+CSV+Parser)
tbf this sounds very much like osgi without hot swapping.
I don't know origins of "Clover" name, but I thought that it was a mix of words "coverage" and "lover". :)
https://java.libhunt.com/libs/csv 
Hi! I have been Atlassian Clover developer for last several years. I can assure you that I'm eager to drive the open-source Clover project. As a matter of fact, I already did a clean up of Clover's sources and released Clover's open-source binaries as version 4.2.0, including not only Clover's core but all Clover's plugins available. You can find binaries on Maven Central (look for the 'org.openclover' groupId). I have also prepared a website for open-sourced Clover project. I strongly encourage you to visit http://openclover.org, learn about it's features, download binaries and try it out in your project. PS: I renamed the Clover tool to OpenClover to avoid any violation of Atlassian's trademark.
^ OverOps (aka Takipi) is incredible, unfortunately a little pricey for us.
Clover's code base is about ten times larger than JaCoCo, so it has a really huge list of features: http://openclover.org/features. And in version 4.0, released in 2014, it's HTML report have been completely redesigned: https://www.atlassian.com/blog/archives/clover-code-coverage-new-ui, so I dare to say it is way better than a version you used 10 years ago.
Thanks, I managed to find a way. I plan to try project job scheduling with opta-planner eventually.
Learning a programming language is very difficult and takes a lot of time. Learning a programming language that nobody will use could be an enormous waste of time.
That really stinks. Someone should make a quality version of SWT. 
In every case that I am aware of, developer time is far more expensive than toolsnl; so in those terms OverOps is not that expensive
&gt; build this feature from scratch That's only a good idea if you are not concerned about corner cases and performance - and once you built yours pray no corner cases will pop up over time. This can become a maintenance nightmare quite quickly. Case in point: [this](https://github.com/uniVocity/univocity-parsers/blob/v1.0.0/src/main/java/com/univocity/parsers/csv/CsvParser.java) is the CSV parser code of version 1.0.0 of univocity-parsers. It's clean, beautiful and organized. After 3 years I believe all sorts of corner cases one can think have been nailed, and with that the code looks [like this now](https://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/csv/CsvParser.java). More than half of that is not to give you brain cancer but instead to handle the not-so-uncommon case of having to deal with unescaped quotes, i.e. things such as: value,"&lt;td id="L304" class="blob-num js-line-number" data-line-number="304"&gt;""&lt;/td&gt;",another value The second value there is HTML in a CSV field. As it has quotes the "client" just wrapped quotes around it and did not escape them (typically by writing `""` to represent each quote). I'm yet to see another CSV parser that can read this sort of thing properly. There are many other corner cases as well, such as handling line endings inside quoted fields in a way that works across operating systems. It's very common to have this: value A,"value\r\nB",value C If you read this file on Linux and want to convert `\r\n` to just `\n` to avoid displaying an extra line break, you need to do this manually. When writing it back to be usable for Windows you want to write `value\nB` from your Linux box, but get `value\r\nB` written at the end. Univocity-parsers does this transparently through a `normalizeLineEndings` property. I could go on as I've spent years dealing with all sorts of crazy variations, so let me stop here. TL;DR: CSV processing can become a nightmare if you do it yourself. Try a using library for dealing with it before crafting your own - and if you insist at least compare possible corner cases for your requirements and the performance your solution against what a library delivers.
And in Java 9 there is initial support for AOT compilation.
There is always the possibility of AOT compile to native code. Plenty of commercial JDKs support it, and Oracle is adding support to their JDK as well. Java 9 will initially support Linux x64, with other platforms being provided later.
&gt;Our team was agile in the sense that we called our meetings stand-ups and developers were empowered to change and improve things. As long as the enterprise architects agreed to it. And as long as we spent a number of weeks writing documents first painfuly familiar..
&gt;I was once part of a team that inherited a sprawling application originally written in Java 3 (or 1.3 as we called it back then). There is no such thing as Java 3. Java 1.4 is confusingly Java 2 (which is where J2SE and J2EE come from). Apparently according to Sun/Oracle's release notes Java 5 is still java 2. &gt;The Java 2 Platform Standard Edition Development Kit 5.0 (JDK 5.0) Finally for version 6 (which is also 1.6) they sort of got their act together and dropped "Java 2". Edit: **TL;DR**: &gt;I changed this: &gt; Set&lt;Thing&gt; aSet = new HashSet&lt;Thing&gt;(); &gt; To this: &gt; Set&lt;Thing&gt; aSet = new HashSet&lt;Thing&gt;(0);
Was that blog written by Christopher Walken?
[removed]
Nice blog man. I like reading these types of stories.
And Java 1.3 didn't have Generics :-)
...because we had an insane number of empty sets. Also don't do this anymore because the latest JVM does the optimization for you.
any source for performance gain? I read little about the AoT compiler; most was about Jigsaw or API changes
Great to hear it's not abandoned completely! Reports generated by Clover are marvellous!
That doesn't work for an arbitrary f(x), though. In this particular case, since f(x) only involves addition and multiplication, you can use the distributive property to rewrite it, but how often is that the case? And how often will that transformation improve performance? The transformed version has the same number of operations as the original; it's only faster because it permits more instruction-level parallelism. It seems like the rule here is "given a loop involving only multiplication and addition (or subtraction), unroll the loop and distribute the multiplication, then keep the transformed version if it enables more parallelism". That's not the kind of optimization I'd implement without some pretty compelling evidence that it would be beneficial in a lot of real-world programs. Since we only have one example so far, and it's in the standard library, IMHO it would make a lot more sense to just hand-optimize the library and call it a day.
Incompatible JVM Version 1.7.0_51 of the JVM is not suitable for this product. Version 1.8 or greater is required
Just for fun, I coded this up in C++ to see what g++ would do. Even with the -O3 flag, it doesn't unroll the loop, and if you unroll the loop by hand, it doesn't distribute the multiplication. It does, however, convert `x*31` to `(x &lt;&lt; 32) - x` (a strength reduction), but if you distribute the multiplication by hand, you end up with three MUL instructions, which would presumably be slower. The surprising part, for me, was when I benchmarked the different versions. Unrolling the loop yields about a 15% speedup, and distributing the multiplication yields a 90% speedup compared to the original. My two takeaway points: 1. The optimization in the article is a much bigger win than the strength reduction that g++ performs automatically. 2. This isn't the kind of optimization you can expect even from a very mature compiler.
JavaFx is quite nice actually, and if you write your code in Kotlin or Scala, both of these map pretty well onto the reactive-centric approach of javaFx.
A quick note on Arrays.asList: “Arrays.asList : Be aware that the lists created by this method are non-modifiable” This isn’t entirely true. While you can’t use add/remove/etc, you CAN modify the elements for any given index of the resulting list, including what the index holds. List&lt;Integer&gt; wat = Arrays.asList(1, 2, 3); wat.set(0, 4); wat.forEach(System.out::println); results in “4 2 3” rather than “1 2 3”.
&gt; Barely. The main work area is still a website. You get some control over things normal websites don't like being able to manipulate windows and their aspects and some system APIs. electron is chromium + node.js, so you get everything from node.
Bloated/inefficient, yet guess which Java IDE has the well-deserved reputation of being the slow one? IntelliJ.
I haven't played much with it. You can get Java 9 [here](http://jdk.java.net/9/) and [JEP 295](http://openjdk.java.net/jeps/295) explains how to use jaotc. Currently it looks in a similar way like NGEN on .NET, or JIT caches in other commercial JDKs. You create a dynamic library from a jar, and use jaotc also as a way to execute it. In the future jaotc, coupled with jlink, will probably allow to produce binary redistributables, if you watch John Rose's [talk](https://www.youtube.com/watch?v=OMk5KoUIOy4) about the next 20 years of Java, including the idea of rewrite most of the JVM in Java, there have plenty of ideas on the roadmap. 
We needed a simple library to encode and decode H264 streams for our robot lab at IHMC. Using OpenH264 as backend we made a simple library to do so as well as provide MJPEG and MP4 support. The OpenH264 library is downloaded from Cisco, meaning all royalties are paid for by Cisco and there should not be any legal problem using this library. We decided to open source it in the hopes it will be useful for others. Contributions are always helpful, video codecs is not our main focus and we would love if people can help us out and we can spend more time making cool robots.
Paid for by the JetBrains for Google acquisition committed. /s
&gt; customizable usage help I have to admit that this is probably the killer feature of picocli over JCommander in my opinion ! Going to try picocli as soon as possible, thanks for your work ;)
I clicked next on the link /u/DuncanIdahos8thClone provided, it takes one to this site: https://docs.oracle.com/javase/tutorial/sound/controls.html Where it talks about "Changing a Line's Volume". Isn't that what you want? 
You need the **J**ava **R**untime **E**nvironment (JRE) to *execute* Java programs. You have downloaded the **J**ava **D**evelopment **K**it (JDK) - which is used to *develop* Java programs. BTW: This question is not suitable for here. Should go either in /r/javahelp, or, even better in /r/techsupport.
Since this is more about *programming help* it should, as the *plenty hints* in the **sidebar** indicate, be posted in **/r/javahelp**. **Post removed**: programming help
&gt; JetBrains for Google acquisition ? tell more
Wait what? IntelliJ is blazingly fast for me and that's with 200k LOC+
Who upvoted this crap? Edit: guess the same sockpuppets that downvoted my post Fuck off spammers 
A guy did a whole try catch finally framework to do similar on a project. Shall we just say it generated plenty of garbage and was kept away from any code with "non functional requirements". It looked quite elegant, and worked well for setting things up, though.
If your team's experience is Java, then this may be a good choice. However, I found the JavaFX ecosystem to be somewhat lacking and it hasn't picked up as much momentum as hoped (say compared to Swing). It really depends on what your requirements are for a desktop application and what it interfaces to. At the end of the day you can write shit in any language - you need to make an effort to adhere to the design patterns in the framework. For instance, we have a desktop app, that is used in finance. We needed docking (no de facto standard), we use tabular data a lot and there is no easy way to use tables with existing Pojo's transported via Oracle Coherence. We have to talk to middle ware messaging. There was a lot of of gotchas but you will probably have to do a lot of engineering to ensure it being a success. Personally I like Swing a lot better and it was easier to learn to be honest. But we have persevered with JavaFX as the team is Java and we are human resource constrained.
Starting back in 2014 during the keynote https://www.youtube.com/watch?v=xU267-YHN5c then onto spring cloud https://2015.event.springone2gx.com/schedule/sessions/spring_cloud_at_netflix.html Also from 2015 https://www.youtube.com/watch?v=pcE-92INQKc
I don't think there a lot of other frameworks that address the scope of what boot does with a the same programming model
Hi Kedar, you might find these two talks from the team helpful on understanding autoconfig 1.) https://youtu.be/Sw7I70vjN0E 2.) https://youtu.be/uof5h-j0IeE
It's known for being slow, and for many it is. It certainly has more issues in that department than eclipse. Which isn't to say eclipse can't be a hog.
I have used JFreeChart for work. Not intuitive at first but with some custom renderers was able to make it scale pretty well.
Uh, I have never seen anyone complain about slowness of IntelliJ and I have seen people complain about Eclipse/NetBeans
Seriously use JavaFX and don't look back. It's so superior to WPF. 
Why when JavaFX is superior to it in every conceivable way? 
Why, so you can have an app that looks ugly on all platforms? At least JavaFX looks great on mac and windows. Frankly nothing looks all that good on Linux.
Just the native widgets part. I'll not suggesting that we need a direct clone or anything, and I'm especially not suggesting that what we have should be used instead of JavaFX. I like JavaFX, I would just like it better if it used native widgets. 
That was very interesting, thank you !
[Java 1.2 was branded as "Java 2"](https://en.wikipedia.org/wiki/Java_version_history#J2SE_1.2)
That shouldn't be valid until java 5....
Just imagine the performance improvements with SQL batching
It has decent points but it is full of crap. Generics didn't exist in 1.3 so I'm betting the whole story is made up. There is a lot of filler but zero details other than one line of code that couldn't exist 
I want to enable or disable Audio Mixer(example: Realtek Sound, USB Audio Device etc...) It's okay tho i already solved this without Java
Lol are you joking or what? 
&gt; There is no such thing as Java 3. Java 1.4 is confusingly Java 2 It's more that the language itself was renamed to "Java 2", with the "2" being part of the name and not the version number. So we got "Java 2" 1.3, "Java 2" 1.4, etc This nonsense was finally ended somewhat after 1.5, and only has really been ended with Java 9.
**Sidebar** + **Do not post tutorials here!**
So two pitfalls then. `==` is identity not value and many value objects are immutable, so operations return a new object. 
Pretty neat, I'm working on a project for mobile like this in my spare time
Or they used a bit of license to show the change using modern Java code, while keeping the point of the change. They didn't copy the code verbatim from the original source.
I'm a massive fan of `Collections.empty*`, especially when a function returns a collection. I inherited a code base that would just return null on a database look up that returned no results, meaning null checks in calling code before running loops on the results. Returning empty lists means I can annotate the method `@NotNull` and remove all the null checking. And `Collections.emptyList()` returns the static `Collections.EMPTY_LIST` but in a type-safe manner, meaning no extra objects are created.
That sounds great. Do you have it on an open repository?
Every single thing mentioned at the end of that article is a very simple thing that a decent IDE will warn you about and offer to fix for you.
That is especially crude for Kotlin. I have a project written almost entirely in Kotlin, but my integration tests are written in Java, so the project shows up on GitHub as a Java project. Also, a lot of people adopting Kotlin do it into already existing projects, and Java is a lot more verbose, which further skews this number. If you make 50% functionality in kotlin and 50% in java, you'll have something like 25%/75% kotlin/java code (not accurate numbers).
I evaluated Grizzly and Jetty a wile ago to find out which is better suited for a really simple HTTP push based message consumer. Performance- or API-wise there are no big differences, but I noticed that Jetty consumed &lt;5MB of heap memory while grizzly sat on &gt;100MB while doing nothing. Most of it sits idle in a gigantic PooledMemoryManager and some googling revealed that this pool grabs 10% of the max VM heap at startup and holds it hostage for "performance reasons". I find this design decision questionable at best. RAM is expensive, especially in a microservice architecture where you have to run lots of VMs and don't want to cramp everything into a single application server. So, in the end, this was an important reason to choose Jetty over Grizzly. I don't care about a couple of nanoseconds per request, but I do care about 100MB of wasted ram per VM. Edit: I started two servers on different ports, one with Grizzly and one with Jetty. Both are hosting the same Servlet app and were started with the same VM parameters (using G1) . After 10k requests I measured the real RSS memory consumption as seen by the OS. Jetty Grizzly 169.028 548.816 (before full GC) 96.204 315.744 (after full GC) (RSS Memory in KB, lower is better) **Edit: Nevermind, this is was (silently?) fixed somewhere between 2.3.31 and 2.4.0. The current version of Grizzly is comparable with Jetty.** 
&gt; I have a project written almost entirely in Kotlin, but my integration tests are written in Java, so the project shows up on GitHub as a Java project. That's pretty interesting - I figured (incorrectly) that GitHub would be detect and support a repo being multi-language.
TLDR; I used new HashSet(0) but no-one needs to use it anymore anyway. Total waste of time.
That's logical. The list itself is non-modifiable, but the objects still have the mutability that they had before. If you want your objects to be immutable, you need to make immutable objects.
That is not the same. The list is modifiable, it is just non-resizable.
Oh yeah, never mind, I misread.
A pitfall that I saw on a lot of code where I work, is setting a HashMap or a HashSet initial size equal to the number of elements that would be insert. However checking the JavaDoc : &gt; &gt; public HashMap(int initialCapacity) &gt; &gt; Constructs an empty HashMap with the specified initial capacity and the default load factor (0.75). &gt; We had a code that on a lot of places has seething the wrong capacity, so we had it being forced to do a rehash of the HashMap/Set when is inserting the last few elements. Lucky, HashMap/Set implementation round up capacity value following some internal algorithm to get the best capacity size. I ended fixing it using a small auxiliar class that construct a HashMap/Set (and including Syncronized/Concurrent variants) with the correct capacity getting the number of initial elements as argument.
Thanks...didn't go back far enough :)
&gt; Be aware that the lists created by this method are non-modifiable and will throw a java.lang.UnsupportedOperation if you try to modify them. That’s not correct, they’re most certainly modifiable, but not resizable. E.g. try calling `list.set(0, "x")` on your first list… Also beware of those capacities. In Java 8, calling `new ArrayList()` and `new ArrayList(0)` are subtly different things!
Also see Guava's `Maps`/`Sets`, e.g. [Maps.newHashMapWithExpectedSize()](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Maps.html#newHashMapWithExpectedSize-int-)
But why? What do native widgets give you other than portability problems? A tiny maybe performance improvement?
But the list isn't non-modifiable, if it wasn't you wouldn't be able to change the objects at any given index, which you can. You just can't increase or decrease the size of the list. Array.ArrayList is a list that functions like an array in the truest of senses, you can modify the list as long as you don't change the size, just like an array.
Native look and feel
He said the app was originally written in Java 1.3. I have to assume they updated Java along the way. 
While this guide looks great, your account looks like that of a spammer as you are only posting links to your own stuff.
Lots of interesting talks, looking forward to the slides and videos.
Classic DI also doesn't allow lazy initialization though. Just because you declare you *may* need something in your constructor, doesn't mean you'll use it. There's a solution to this, but many people incorrectly refer to it as "the service locator anti-pattern", and those are Context objects (which is to ask for an interface that has getters for your dependencies).
Java EE is equivalent to Spring. These are 2 competing stacks really. I personally stay away from Java EE where possible as I do not like it. My main issue is with containers providing dependencies, once you've tried to upgrade JBoss once, you'll not want to do it again. I would spend the time looking at the frameworks/libraries, especially Spring Boot/Hibernate/Maven/Junit/Hamcrest It sounds like you know what you're doing. If you need anymore specific help just ask away.
I would say learning the frameworks would be a better way to spend your time because the advanced concepts are something to conquer once you have more experience with the programming language. Furthermore, your employer should be willing to let you transition to some extent on the job.
You have to master the language first. Many interviews are focused on the language itself before moving to frameworks. Josh Bloch's Effective Java is one of the best books one can read. Highly recommend, even though it is old. It does not cover Java 8 so you better master lambdas and completable futures as well. Java also has impressive collections using generics. Sets, maps, lists, arrays, in various different flavours. Use them extensively to understand the differences. Can't seriously program in Java without them.
If you are not used to write OOP code, learn the basics then take a look at the SOLID principles: http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod They are the basis of a whole facet of good practices.
Or even better: optimize it to `(x &lt;&lt; 5) - x`
Yeah but you could achieve the same results in a more portable, maintainable way with separate CSS files in JavaFX. 
There are some good suggestions in the sidebar of /r/javahelp for learning material to really get basics down. 
For the most part, yeah. It's hard to make it perfect though. I do agree that the way JavaFX does it is going to be easier to maintain. 
+1000
Did you try with the latest Grizzly version? The changed default memory manager was one of the big changes recently.
"A while ago" was 2.3.31. I ran the same test with 2.4.0 and indeed, the memory consumption is now comparable to Jetty. Great news! A bit late for me, unfortunately. The decision was already made. Edit: This improvement should be part of the change log and announcement perhaps?
Too bad it's too late, but good news it's indeed fixed now. Thanks for the confirmation!
#Pain Point 1 - Maven vs Spring filtering# I don't really understand why using `@property@` vs `${property}` is a pain point for you? Is it painful because you didn't expect it because, if so, it is [clearly documented](https://docs.spring.io/spring-boot/docs/current/reference/html/howto-properties-and-configuration.html#howto-automatic-expansion-maven) Is it painful because you have an existing project that makes extensive use of Maven filtering using the previous syntax and you don't want to have to convert it over? Fair enough! In that case, you can't be relying on Spring doing any runtime processing of those files so you can just convert it back again: &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;2.7&lt;/version&gt; &lt;configuration&gt; &lt;useDefaultDelimiters&gt;true&lt;/useDefaultDelimiters&gt; &lt;/configuration&gt; &lt;/plugin&gt; #Pain Point 2 - Accidental Dependencies# Can you be more specific? #Pain Point 3 - Auto configuration is a black box# Is it? Isn't it just a series of Java files which define beans? Why can't you just read the files if you want to understand what is going on? There is [clear (and short) documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html) on how auto-configuration works, how to find out what auto-configuration is applied, and how to replace/disable it. What more can Spring Boot do to make this less of a black box? #Pain Point 4 - Container based data source# I don't know if you can auto-configure it but is there anything preventing you from defining your own DataSource bean like this: @Bean public DataSource dataSource() { JndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup(); DataSource dataSource = dataSourceLookup.getDataSource("java:some/name"); return dataSource; } You might have to do something special to get it work with the embedded Tomcat but presumably that is not an issue for you as you are wanting to deploy to an external Tomcat anyway. I haven't tried it so would be interested to know if you have and found it doesn't work! Edit: Oh wait it looks like this is already [built in and documented](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html#boot-features-connecting-to-a-jndi-datasource)? Raise a bug if this isn't working for you?
Heh, I found this link: https://javaee.groups.io/g/grizzly/message/11 So, the `PooledMemoryManager` is still a memory hog, but no longer the default. They switched back to the old memory manager just 4 days ago, but for other reasons.
About 2 years ago I switched over to Java from other tools, including PHP, Python, Javascript, etc. When interviewing, they mainly talked about the structure of systems and had me do some basic programming problems. I had used Java before but it had be some time, but I impressed them by being able to translate the coding problem at will into different programming languages. I also was able to outline the general structure of a service oriented application and multi-tier architecture, regardless of the framework. This included routing, controller, services, data access object, etc. They were convinced I could pick up whatever Java framework they were using quickly. In this case, it was Spring Boot, and I managed to pick it up and start committing good code within a week. I also had strong skills across other disciplines they needed as well, such as requirements gathering, product management, and user experience design. In any case, if you have been doing coding in other technologies, chances are you will have no problem switching to Java. It will help if you can show you have done some work with Spring Boot or another popular Java framework (it checks off the box for recruiters), but really it is more important that you understand how applications generally work and are a strong coder, regardless of which language it happens to be in... 
If anywhere, this should go in **/r/programming** as it is not at all Java specific. **Removed** not Java specific
Learn about the completable future, it's a super useful tool for easy multi threading. Very similar to the JS promise.
The only thing I remember from that time is that you just had arrays and vectors.
If he has so many zillion of these things it might be worth avoiding the new until first insert into the Map? Worth a profile.
Seems like Java 10 can't come soon enough. Great features. Panama, Patterns, Valhala
So what. This post is great, it's free and you can learn something. IMO upworthy
Is Swing not Java code?
I am fan of guava so I prefer much more to use Lists.newArrayList(1,2,3) than Arrays method. And if you really need an immutable list guava also offers it: ImmutableList.of("one", "two", "three");
Thanks, haven't heard of completable futures yet, but have worked with promises before. Will definitely look into them.
No, I'm not sure yet whether I'll post the entire project online. I'm working on sharing the majority of the app though. It's a GraphQL object generator and runtime which I made for interacting with GitHub's API. It's somewhat like yours in that it handles documentation but fundamentally different as it just does on-the-fly documentation rendering directories and files within a repository within in the app. It's for people like me who browse repositories on their phone and dive into the code.
I have bought O'Reilly's Java in a nushell (latest edition) and am using it as kind of a reference when I want to know more about a specific topic. However I'm not sure whether it's a good use of my time to go through it from beginning to end until I understand *everything*? I've always been more inclined to learn something when I actually need it rather than a bunch of stuff at once and then forgetting most of it by the time I actually use it. Which is part of the reason actually why I posted my original question - like, is it more "valuable" to a company to know a lot of theoretical stuff, or instead having written lots of code, even if that code is on the simpler side and doesn't use any of the more sophisticated features and constructs of the language?
Thanks for that comment, I was not aware that EE and spring are competing frameworks. I have started looking into spring boot and maven today and I'll definitely be using those going forward.
Yes of course. I just want you to know, that the mentioned IDE is far, far away from JavaFX.
I'll always feel that the main problem with Kotlin is the whole IntelliJ part. 
They have been discussing those for years and experimenting, finally we will get the fruits of that meticulous job. I really hope they do a great job as they did with Streams. 
Please keep the discussion civil. 
Are you sure that it is the JVM optimizing? If so could you elaborate what it does to achieve that effect? AFAIK they updated the JDK code to optimize for those cases, I know because I looked. 
Recruiters and employers are mainly interested in the stack you are familiair with. Besides the language here are some other areas you can look into. * Spring Web MVC * Maven * Git or Subversion * Hibernate or MyBatis * Jenkins * Jira or Trello * JUnit and Mockito * Selenium and cucumber 
Yeah. We don't use Guava but literally I reimplemented these method.
I sometimes see it in mentioned in subs like /r/ProgrammerHumor but I'm guessing it's the same kind of people that think that you have to use C++ to build a fast application. -Xmx4G and concurrent collection and I can open huge repositories without issues
Can you tell more about the subtle difference? As I see it, in both cases the elementData array points to different static final empty arrays which shouldn't matter for any case. Or does it? When you add an element, first case is going to resize to DEFAULT_CAPACITY (10 elements) but in the second it won't (it will resize as it fills, as usual resizing to 1.5 times the capacity). However this has always been the case, even before Java 8. No?
Those features aren’t scheduled for any particular release, so I wouldn’t assume that they are coming in Java 10 — they warn about this quite often.
I work in a Java spring shop and my biggest concern is not with kotlin at this point, but solely getting my team on board. Kotlin only offers stylistic and minimalist changes it seems, so for me its not worth fighting with the other devs over its implementation. 
The headline made it seem like it was about Entities (the Domain Modeling concept) and DTOs, but it turns OP is talking about entities as they pertain to JPA. On that note, setters in Entities? Eww... Entities should encapsulate their state, which is why they say getter/setters are evil, since they break encapsulation. DTOs allow Entities to export data based on their internal state. DTOs are pure data structures, just getters/setters, and encapsulate nothing. So if you asked me to choose between Entities or DTOs, I would ask, do you need to encapsulate your data? Are JPA entities supposed to bear any relationship to entities as in domain modeling?
I actually prefer erased generics. It was a really pragmatic compromise at the time they implemented them. Reification, though, is coming to Java, but it mostly likely won’t be exposed at the language level. Those on the platform group are using it for specialized generics over primitives and value types.
I honestly like Kotlin a lot. I primarily write Java for android and at this point every new file I create is a Kotlin file. At my current company kotlin is the recommended language for android and it's starting to being used in backend projects too. 
Appreciate this - thank you!
[removed]