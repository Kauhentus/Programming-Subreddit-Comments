It looks like in your [submission](https://www.reddit.com/r/java/comments/8yu4hp/what_jdk_version_to_use/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Then you force users of your library to add SLF4J. I work in environments with very strict security managers. SL4FJ broke because of the security policy and therefore couldn't use the lib.
Based on my experience with Kotlin, I think you'd need the whole family of nullity operators/annotations in order for the compiler to prove the nullity at any given point in the data flow. Speaking of Kotlin, is there something about their already working implementation that you don't like? 
That would be about perfect.
You're probably still creating a lambda object even if fine isn't loggable. Probably depends on the scope of the message variable.
I think Stream&lt;Object[]&gt; is better than Iterable&lt;Object[]&gt;
It needs to be different if there’s a new bytecode addition, but they decided to bump it every release.
Javadocs aren’t really a learning resource. They’re a specification that defines the API, parameters, return values, exceptions. Most things follow a specific pattern (static factory methods, builder pattern, etc.) or interface anyways.
I have never used kotlin. The post is about java. Well, my understanding is that it is simply replaced with an if-else statement? var x = y ?? z; becomes var x = y != null ? y : z 
Some time ago, someone from the Ruby community asked the same question. The Javadoc API is quite old and there hasn't been much incentive to add examples to the older parts. The newer ones sometimes provide examples (e.g. [Flow](https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html) or [java.time](https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html)). I'm convinced that too many examples in the Javadoc add unnecessary noise, however it would be nice to have a separate doc for the examples. Somewhat like the Oracle tutorials, but more on API level like the Javadoc.
I'm pretty sure all of us who use Java extensively have asked this same question the entire time. Granted, C#, imo is a much more confusing language, and needs it more. All the in-parameter keywords get super confusing. 
LTS or no?
Javadoc is written as part of the code and directly available when looking at the source code. Sphinx seems to be more separate from the code (but can use code as a basis for starters)? If you look for API documentation, I recommend [Swagger](https://swagger.io/), for documentation in general look at [AsciiDoc](https://asciidoctor.org/docs/asciidoctorj/).
https://blog.codefx.org/java/why-elvis-should-not-visit-java/
LTS are every 3 years. Java 11 is LTS. The next LTS after that is Java 17 in September 2021.
Understand something quickly = copy and paste code?
I've already been writing javadocs, but those are really just API docs. Sphinx is really just a converter from rst to whatever output you want. It comes with plugins for parsing python docstrings, graphviz, and more. I've used it extensively and written several plugins. I wouldn't mind using it with Java too, but I'd rather use something that's more easily installed for the sake of my coworkers. We work in a pretty restrictive environment (for good reasons), so everyone getting set up with Python and sphinx is not a simple task. I was hoping there was a standard tool for Java that didn't require a second programming language :/
&gt;Javadocs aren’t really a learning resource. They’re a specification that defines the API, parameters, return values, exceptions. Most things follow a specific pattern (static factory methods, builder pattern, etc.) or interface anyways. Exactly. The javadocs don't do that because they weren't intended to do that. They're API descriptions, not textbooks. If it's examples that people are looking for, [Oracle has a pile of tutorials](https://docs.oracle.com/javase/tutorial/) for most topics, including some that come in complete downloadable code, not just snippets. If nothing else, you'll at least get the vocabulary and function names to use when searching for more.
What's new? 
For the conversion part there should be some options though not wildly used. With [Codovaj](http://codavaj.sourceforge.net/) you can parse the Javadoc and do whatever you want with it, though that needs effort on your part.
 Optional.ofNullable(y).orElse(z)
Did you mean this: [https://github.com/gothinkster/realworld](https://github.com/gothinkster/realworld)
This would also be my recommendation. Have a look at [the Test Pyramid concept by Martin Fowler. ](https://martinfowler.com/articles/practical-test-pyramid.html)
yep! Thanks...
It looks like in your [submission](https://www.reddit.com/r/java/comments/8ywcy3/array_out_of_bounds_exception_1/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Java 17 sounds hilarious. Who know we'd get that far within our lifetimes?
First off: that allocates a new object and does several method invocations. Second: ` y ?? z` is so much shorter. No one is saying Java can't do it. It's just annoying to. No one wants that.
\&gt; that allocates a new object Wouldn't value classes prevent that?
[https://github.com/TechEmpower/FrameworkBenchmarks](https://github.com/TechEmpower/FrameworkBenchmarks)
Which we don't have and are a much bigger hassle than a small syntax addition?
That's what he said. The quoting mid-sentence is a little confusing, but the fact that the quote makes no sense as a standalone sentence, should have been an indicator that you hadn't read it correctly.
Value classes are slated for addition. And said "small syntax addition" isn't really worth it considering that
https://www.infoq.com/news/2017/11/ValueTypesNov10 they're going to be added eventually. 
&gt;Granted, C#, imo is a much more confusing language, and needs it more. I don't find it more confusing. I think it is simply a consequence of Microsoft having set an standard for documentation since a long time ago. You check the docs for the classic Windows API and you have the same kind of info.
Just click _Java Collections Framework_ -&gt; _Collections Framework Tutorial_ -&gt; _ Interfaces_ -&gt; _The List Interface_ - it's not that far away from ArrayList API docs /s
Check the Java tutorial. They have detailed explanations of most of the standard libraries. https://docs.oracle.com/javase/tutorial/collections/interfaces/list.html
Javadoc has a tradition of complete uselessness that predates C#. People just write it pro forma, not to actually be useful. It could be worse. In JavaScript there's plenty of documentation about how to install things but not what they do or how to use them.
David Flanagan was my hero.
Docs aren't learning material. They're written for professionals, not beginners.
from Brian Goetz https://www.youtube.com/watch?v=FdkPHShh628&amp;feature=youtu.be&amp;t=50m17s
TodoBackend
Even with a family business you still want an audit trail: what was done, who did it, and when. So you need users and passwords. Once that's a requirement, adding roles gives you a lot of flexibility for little extra work. Secondly, even in a family business, should everyone have access to everything? Not sure what kind of software you write but if it has anything to do with money, the answer is probably no. If it has anything to do with medical, the answer is definitely no. Lastly, family businesses often grow larger or eventually hire people outside of the family. Access levels will be needed sooner or later.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
HashMap is a Map, check the docs for the interface Map. It will be easier to understand how to use from the interface. Similarly ArrayList is a List.
It's still so much longer and annoying to write, even if performance might end up the same. Why would I not just write an If Else statement then?
You're assuming we will - my bet is on Oracle changing release plans, and version numbering again before then.
It won't allocate an object forever, with Valhalla it'll be flattened. And the jit will know what to do with a bunch of final one-liner method invocations probably.
Unfortunately, due to the legal terms set out by the JCP long ago - they can only introduce language breaking changes as part of major version releases, unless they change the JCP process. We always used to have 6 monthly releases ( roughly ), such as the point releases, only now those releases have major numbers, and breaking changes. Unfortunately, people are not even at a point of being able to easily run on the defunct Java 9 due to Jigsaw changes, and some of those modules were only disabled by default - but now removed in 10 - which brings even more changes. At the moment I see we're a no-win situation as each release is also changing the class version number, which breaks fundamental libraries such as ASM - which then cascade into higher level libraries not work, and so on....
Second argument still holds. I might as well write an If Else statement.
I think the release train means that things are only added to an upcoming release when they're ready, so typically you won't see much new at the start of a new cycle because if it were ready they'd have probably tried to target it to the last one.
There's tons of interesting stuff on the way though, mostly from project amber in the short term. It just doesn't get targeted to a release until it's actually done.
Which is why I think they're bad for getting started, and OP would be better off looking for examples. OP explicitly asked what peoples experience with using the were, so I answered that.
&gt; In comparison to e.g., C#, where often code examples are clearly provided, the Java docs/API (like for the HashMap/ArrayList) contain lots of information and not a ''here is how to use it'' in a straight to the point way. Generally API references are references, not tutorials. There is a balancing act here where the API references should still be useful for experienced devs, so scrolling through pages of beginner level explanations would not be helpful. This is why the documentation generally is separated in [tutorials](https://docs.oracle.com/javase/tutorial/collections/interfaces/list.html) and a [reference](https://docs.oracle.com/javase/8/docs/api/java/util/List.html). That said; both the API reference and the tutorials are in a serious need of an overhaul.
I used to https://adventofcode.com/ challenges to teach myself Scala and Kotlin. IMHO these kinds of challenges (similar to Project Euler but more fun) are a great way to thoroughly learn the syntax of a language. 
Right, I was jesting. There are also a ton of improvements that happen that don't make it to the list of JEPs. What will be ready to be targetted for 12 remains to be seen. [http://openjdk.java.net/jeps/326](http://openjdk.java.net/jeps/326) is likely to appear on this list soon as it was almost ready for 11.
yeah, I think Python's API is much better at this.
if else statements aren't typesafe and checked at compile time as opposed to this method
You don't need it to be. Write it as a statement. Horrible idea? Yeah. So is using Optional for it.
sometimes you do need an expression. i'm sorry you're disappointed that the language isn't going to be expanded for some unnecessary syntax, but there are benefits to Optional usage. 
Every need for an expression can be rewritten to use a statement. It's not pretty, but it works. Therefore expressions can be considered unnecessary syntax. /s
proper code is easy to write. you're just saying that you want to write the improper code out of a sense of spite cause you aren't getting the operator shorthands kotlin has.
You're not paying attention. I'm saying both the Optional (abuse, long) and If Else (long) are bad ideas.
Elvis Operator is different though. I also don’t understand his answer if I want an Elvis operator it doesn’t mean I want optional types necessarily not sure how he made this connection 
Sorry, but making use of the facilities the language already has built in instead of adding a bunch of operators to the grammar for one use case is in fact good. Also, the example listed is not abuse of intended usage. I gotta say it’s really amazing the knots you’re twisting yourself into to throw a fit about special operators not being added to and complicating the language for little gain
I’ll give it a go
Agreed, this is where I've landed for brief conditional logging statements: [finest(finest() ? "Message " + stuff() : null);](https://github.com/a-hansen/alogger/blob/master/src/main/java/com/comfortanalytics/alog/Alogger.java)
&gt; which one provides free official LTS? .NET? [Yep](https://www.microsoft.com/net/support/policy).
Take a look at Kotlin Elvis Operator var x = y ?: z https://kotlinlang.org/docs/reference/null-safety.html
Value class is unsupported by JVM and no released date is defined
And is still eventually going to be released, unlike the ?? operator. 
Optional was only ever intended as a return type. This is fact. I'm going to reiterate my main argument: good code, or 'the intended way' to write code, should always be easy and short. If at any point something becomes boilerplate, you should make the boilerplate less annoying, because it means the language is lagging behind what people use it for. Reducing all this clutter reduces mistakes. This is a balance, of course, but introducing something as ubiquitous (in modern day languages) as a null-coalescing operator is not a step too far. People so conservative to refuse to accept this will drag the language into its grave.
I see flyweight in all the design pattern books, but it's roll seems to normally be filled by a mediator when I actually code. It just seems more natural for the thing mediating behavior to hold the objects for reuse.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Maybe you should! (What’s stopping you?)
Look at chrome versioning. I guess Java will look something like that
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/8z3o02/can_anyone_make_a_fully_functional_simplified/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Javadocs aren’t really a learning resource The point is, they should be.
Hmm sorry, but I don’t care how you think it was intended to be used, nor should anyone. All that matters is if the use is detrimental to others. And the answer to that is no, since we were talking about optional + value classes. As for your other “point”, no, code should not always be as short as possible, which is the only argument you can come up with in support of inventing a bunch of new operators into the language. As someone who is always programming in scala, I know how much introducing special snowflake operators suck. They’re hard to research and they make code cryptic. Worse yet, it introduces bloat into the language for no real reason. Introducing operators for just one type is ridiculous and it’s ridiculous you’re whining this much that java doesn’t copy your favorite language. Just use kotlin if you need that special syntax so badly.
I'm definitely not advocating Scala level of operator craziness. But the null-coalescing operator is common in a lot of new languages.
any other I meant?
An overhaul in what way? Java is one of the best documented languages that I have encountered.
Not really.
/r/titlegore
wuut ? there is really a subredit for anything :o
The version number goes way too fast, I don't think it's a good sign, in the end of day there will be no author willing to write books for Java.
Feel free to post to /r/JavaFX as well.
Isn't this partially because there is no standard "display" in Java? The best standard display is probably `BufferedImage`, which PDFBox renders to pretty well. Any proper interactive rendering (assuming that's what you mean?) would necessarily be toolkit-dependent, so should it be Swing? JavaFX? Perhaps an HTML5-faced Java-backed solution? On a side note - I've been planning for a while to start working on a JavaFX control/widget to display PDF, probably using PDFBox as the backend. Assuming I ever find the time for such a project - what features would you like/expect to see in it? 
Does Zulu provide early builds I can only seem to find java 10?
Also relevant: JavaFX 11 snapshots are available as Maven artifact http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-July/022088.html
&gt; so should it be Swing? JavaFX? Yes, those cover everything you'd need for a desktop application. &gt; what features would you like/expect to see in it? "Just" some standard text processing features, such as selecting and copying text, zoom, rotate, text highlighting (annotations). 
That sub is pretty dead though 
I know, I'm the mod there. That's why I invited him/her to post over there .
It's not hard to be on Jonathan Giles mailings and then post these over there yourself. If you want to push more traffic there....
Whats the use case for this? I thought java 11 isnt released yet?
The lack of a version of JDK8 with `--release` support really pisses me off - even if it ONLY supported 8. Certainly makes even running a build _under_ those other JDks a pain once class versions start clashing with the bootclasspath.
Winter is coming!
There should be at least some targeted features.
Yeah, I know, guilty as charged :-/ I'm definitely not taking care of that sub as much as I should.
It's a good example of be careful what you ask for. For years people have been complaining, crying even, that Java moved so slowly. And in every poll people always say they want things to go faster. I mean, seriously, who would ever say they didn't want things to go faster? Now things ARE faster, and people are complaining yet again. Conclusion; people will always complain, no matter what a company does?
It's not yet, but you might want to test Java 11 before it's released. Also it might be possible to use it with OpenJDK 8/9/10 since OpenJDK builds don't include JavaFX, not sure tho.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oracle do their possible to get money from as many business as possible... This persuade me that using JDK-based technologies for new projects is definitely a bad choice. There is too many incertitudes over what will be Oracle' next move to extort developers and companies. I think they are the only one to do this for major technologies and I definitely wish that they remain the only one (and that they'll end-up loosing money and users from these decisions).
Note: I do not know how well this advice works for Java EE apps but it should work for Spring. &gt; Do I wedge JUnit in there to accomplish this? Yes, it works pretty well. I usually have two kinds of tests in junit: 1. unit tests - which sometimes test a single class, sometimes a larger module in isolation. But they do not 2. integration tests (component tests?) - generally they run as much as possible with stubbed external dependencies. Usually this is the whole application, with database (these days usually in a docker container). Sometimes it's a larger module and I just call methods on some high-level interface. Calls to other services are stubbed and I tend to have some utility methods which every test uses to setup the stubs, e.g. stubCurrentUser(...), stubExchangeRates(...). Global defaults for stubbed calls do not work that well. &gt; How do I handle the underlying database itself? Rollback the transaction? What about testing my JAX-RS services? My preferred approach is to setup data for each tests separately and commit. It works if your data is partitioned in some obvious way. E.g. if there is per-account data, or per-oder data then you can setup each tests for a new accountId or orderId. Rollbacks can work, but then you need to make sure that the tested code does not commit anything. IMO the easiest way is to declare all transactions in your application as PROPAGATION_NESTED - it works as long as your setup uses safepoints for nested transactions. &gt; Do I test them as Java classes? Or do I test them as RESTful endpoints? I'm no sure what are you asking about - do you mean if your tests should the calling a method or issuing an HTTP request? You need some tests to verify that the request/response format is ok and that they are properly serialized/deserialized. But the majority of integration tests could just call methods on HTTP controllers instead of issuing HTTP requests. Using HTTP requests makes debugging tests harder because they go through all those various frameworks before reaching your code. Additionally your code probably runs in a different thread then the test itself so you can no longer rollback transactions easily. In small applications this could be the only kind of tests that you need. &gt; I've heard mention of Arquillian as a good framework for unit/integration tests. Is this a recommended way of performing these kinds of tests? I don't know, my advice is based on Spring rather than CDI/Java EE. &gt; Are there any tools http://wiremock.org/ https://github.com/avast/gradle-docker-compose-plugin
Like JavaFX... *cries in some shitty chromium abomination*
I wonder how you can pay your developers without money
I think Oracle has far enough money to pay all it's developer and give a huge amount of money to its shareholders. We are not talking about a small startup (for whom, I'd have no problem accepting this move), we are talking about one of the biggest consulting company in US, with many paid product, many clients already paying for extensive support, and a lot of contracts (including with governments) that give Oracle a lot of money. Therefore, I doubt that Oracle "need" this money, except to make its shareholders richer. We know they are a major detractor of OpenSource and do everything they can to discredit it or to make it less appealing that their close sourced, expensive products. They just prove it once again.
I help run AdoptOpenJDK.net mentioned in this article. If you’d like to know more about it then fire away. FWIW Zulu binaries are excellent 
So I’m relatively new to the Java ecosystem. Why is it that Oracle feels justified in charging for production use of a language runtime? I can’t imagine this is popular amongst developers or companies that are building Java apps today. To compare to other runtimes such as Python or Go, those platforms are supported/sponsored by companies such as Dropbox &amp; Google. However, they don’t claim to own it to sell as a product &amp; support contracts. Has this always been the case with JDK and Oracle? 
Made the link hot: https://adoptopenjdk.net/ As a developer - I'm reasonably confident I can run most of the software I need to run on OpenJDK as opposed to Oracle. What tests or monitoring should I implement to ensure that my code runs on OpenJDK? What non-technical things can I do to re-assure my superiors and customers that a move to OpenJDK is safe and sound?
Big corporations do not operate based on ”justified”. They had an financial analyst predict the licensing model that makes the most money, and went with that. 
I am not sure this article cleared up any confusion for me: &gt; Commercial users who want to continue to use JDK 8 or subsequent LTS releases after public updates have ended will have three options: * Purchase a commercial support contract from Oracle. * Use a different binary distribution of the OpenJDK, which has security patches and bug fixes backported to it. The Zulu OpenJDK binary is an example of this. * Create their own binary distribution from the OpenJDK source code and backport updates themselves. Is this saying that after Java 8 updates are no longer being made public even using Java 8 in production without a support contract violates the licensing terms? So something we can do today for free (run Java 8 in production) will require a support contract in the future?
Doesn’t this break the YAML schema?
I mean, you can always use OpenJDK, and that is the official suggestion. It is the reference implementation.
What? Why. Nope. Why do you think so? 
You can tell them that Oracle officially recommends moving to OpenJDK. If you are currently on 8, you might as well move to OpenJDK when you migrate to 9+. The 8-&gt;9 upgrade will break more than Oracle-&gt;OpenJDK will.
I made [this graph](https://yawk.at/java-support/) on the support cycles of various JDK packages a while back. It also includes sources for all the support interval claims if you need more details.
This works fine (without awful HTML codes): &lt;pre&gt; {@literal @}Annotation List{@code &lt;String&gt;} foo = = new ArrayList&amp;lt;&amp;gt;(); &lt;/pre&gt;
Yep, makes sense. I guess for large corporations who want their apps to last forever on a single version will need to figure out their own support cadence after 6 months? ie support via Azul
Yes. Depending on what you mean by "forever", AdoptOpenJDK, various distros (ubuntu, redhat) and other free openjdk distributors should also offer long-term support builds.
I wish they fixed the website and the installers as well... 
Java 11 will be released in September, JavaFX will not be part of the JDK then. So users need the decoupled modules by then when they want to migrate to Java 11. Furthermore Java 8's public support will end in January 2019, so either you switch to OpenJDK 11 or pay Oracle for support for another year until December 2020.
As of Java 10+ your tests should focus on things like making sure the cacerts etc work. Apart from that Oracle and OpenJDK are identical and variants like our Adopt OpenJDK are very thoroughly tested against popular libraries, frameworks and languages 
Idle question: how did Oracle GET all of its money such that it can throw it away? I'm not on oracle's side here - my heart aches for the rape of Sun's IP - but your stance makes no sense to me.
It's a little bit old, but I really like Head First: Java
I don't see anyone recommending anything else besides this and a udemy course. I would like more options to choose from!
Learning java. You can't not do object oriented programming in Java.
No. You can still continue to use JDK for as long as you like. However, there will no longer be any public (free) updates after January next year. If security and/or stability are important to you, you will need to consider this.
I will also edit my article to make this point clearer. When writing something like this it's easy to miss something that you think is obvious but isn't
I think you can use without the future updates... 
When it says JDK... does that also mean JRE ? Because there is no JRE in AdoptOpenJDK ? What if I just want to install Java on a client for my app ? Is there a "free" JRE to be used ?
Thanks for the clarification!
As of JDK 9, there is no separation of JDK and JRE. The idea is that, with the module system, you will produce a JDK runtime tailored to your application using the jlink command. This will only include the modules required for your application and typically reduces the JDK size well below what you used to get with a JRE.
OpenJDK has been the reference implementation since Java 7 anyway. If you're on 8, there should really be no notable difference (aside from JavaFX I guess?).
There are subtle differences around font libs and some media stuff and security Certs on 7 and 8 but the gap is closed pretty much by 10+
The JRE is a component of the JDK already, so OpenJDK already had a JRE that could be used. It's just not generally built for Windows users (or at least no obvious way to obtain it from the OpenJDK site).
Another classic: Helsinki University "[Object-Oriented programming with Java](http://moocfi.github.io/courses/2013/programming-part-1/)"
Nope. Read JourneymanGM's sentence out loud. Oracle recommends *only* using the even-numbered releases *if*...
Correct, Oracle made that change for 11+ though: &gt; In a significant move by Oracle they have recently announced that, from JDK 11, the Oracle JDK binary will no longer be free for use in production. Developers will still be able to download Oracle JDK binaries and use them for development, testing and demonstrations without change. For use in a production environment, a support contract with Oracle will be required. So basically every startup will be using OpenJDK moving forward if they aren't already.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8zebw7/feedback_on_code/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks. If only https://maven.apache.org/plugins/maven-jlink-plugin was working... sigh... 
Head first, Java for Complete Beginners (Udemy), and the MOOC *Object Oriented Programming with Java* from the University of Helsinki are the top three resources. Such questions belong in /r/learnjava.
So I'm free to use JDK11 (LTS) to build commercial production software, but not to install it (not bundling it with the software, but pre install it on the system) on the production server? That would be really strange
Sure for can install OpenJDK 11 on the server. It's under gpl.
I can confirm this. My company is currently migrating from Oracle JDK to Open JDK, and I'm the guy in charge of making it happen. Other than missing SSL certs (Open JDK 10 only has 80 of the 104 certs that are in the Oracle JDK, one of them happens to be what our company's website uses lol), every problem I've run into comes from the JDK/classloader changes. Our application does a ton of loading jars at runtime based on user configuration. That whole process breaks in fun ways now. Trying to re-engineer it has been... fun... lol
Will you or any other group work to have an LTS version of the OpenJDK? Or will companies that move to OpenJDK need to be constantly updating to a new version every 6 months to stay current with patches?
Our plan is to support LTS for longer than 6 months - we admittedly have some work / planning to do for this but our stated goal is 4 years.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Is it completely textual or video lectures? I found everything present over there as textual.
Just use markdown.
That is excellent, glad to hear it.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I could have used [Socket.io](https://Socket.io) with Spring MVC instead of STOMP if [Socket.io](https://Socket.io) implementation had been written in this way...
The more interesting question to me "does it play nicely with whatever dark magic the JBoss EAP/Wildfly classloader shenanigans does?"
You just don't 1.) have "support" if you need something/have a critical unfixable problem, and 2.) don't have anyone to sue if a critical security hole causes lots of loss. Depending on the size of your org, and whatever it is you're shipping, it might not matter.
Good luck suing Oracle for losses because of a security bug. You should probably read the terms and conditions before spending money on a licence.
To be fair, Oracle is not charging for the production use of the language runtime. The JDK is still free, in the form of the OpenJDK builds, produced by Oracle. Oracle is changing the way they license the Oracle JDK binaries so these will require a commercial support contract to use in production. This gives you updates for long-term support. If you move to the new version of the JDK every six months, you still get everything for free. The big change is that updates are no longer being provided beyond six-months for free. 
I just explained why there shouldn't.
Great work. Thx
I love clojure docs for this, they actually have usage examples which I go to first rather than read a page of useless docs that java has. 
Indeed. However, you may want to check Cettia as an alternative of socket.io - http://cettia.io ;) Asity is actually created to run Cettia on any web framework on the Java Virtual Machine.
Hi, I would like to know more about the cacerts situation. Do OpenJDK have it's own process to verify that the different certificate vendors are compliant with the regulations? Or do you follow mozilla/chrome decisions? Will openjdk detrust symantec for example? Is the reason that you don't have the same cacert store as oracle that your compliance team haven't managed to work through the process yet?
textual with assignments that are automatically evaluated
To clarify OpenJDK (the project) does indeed verify the cacerts etc and follows the market trends etc). There is an OpenJDK security mailing list (private) which deals with this sort of thing. AdoptOpenJDK uses the same Certs as what’s provided by OlenJDK upstream - we do t at this stage add or remove any. AdoptOpenJDK also has its own security team (and is a member of the upstream team) and we are assessing more CAs over time. Oracle chooses to have extra cacerts for its customers, we may or may not choose to have the same set going forwards. Hope that helps, sorry I can’t be more concrete on timeframes etc 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have 78 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There are no video lectures there, isn't it? Everything is taught via text right?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
i find Effective Java ( https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997 ) a great book to have. i also enjoyed https://www.amazon.com/Java-SE8-Really-Impatient-Course/dp/0321927761. 
Thanks so much for the response, what level are these books? Are they for beginners?
Thanks for the quick reply. Do you have any open policy documents that details the rules that must be complied with in order get a certificate distributed by openjdk, for example like mozillas here: [https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/policy/](https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/policy/) ? I'm curious on your standpoint regarding the certificate transparency project among other things.
given you have some programming skills ( whichever language ) you could start with the "impatient book" and then move to the Effective Java ( this one might earn a definitive place on your office desk, like on mine ;) ).
Out of all the Java books I've read over the past 20 years, these probably stuck with me the most: * Effective Java: [https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997](https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997) * Clean Code: [https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) * Head First Design Patterns :[https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124](https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124) (the GoF book on Design Patterns is a bit too much for beginning programmers in my opinion, just make sure you get the updated version of the Head First book) * Refactoring: [https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672](https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672)
Thanks so much.
If I understood your article correctly then Oracle will only produce the first OpenJDK build for each major version, right? The updates (in that 6 months period) will only be published as source code by Oracle, right?
That is a great list, thank you.
I also recommend Effective Java - written in clear language with a really approachable style. One of the better programming books of any language.
I own HeadFirst Java but I've not used it very much. I did a one-year comp-sci course and we used [Deitel &amp; Deitel](https://www.amazon.co.uk/Java-Program-Early-Objects-Deitel/dp/0134743350/ref=dp_ob_title_bk). It's a pretty good, and comprehensive book. Might be a bit meaty though depending on what you need. (Also you can get it waaay cheaper than what it's listed as new on Amazon for.)
With the Java 9 changes, who knows. It's so damn frustrating.
That’s one of the docs our team is working on 🙂. If you join our slack we can get you in as an early reviewer - you. An join via the website 
* Effective Java 3 * Spring/Hibernate/Java in Action * Java Concurrency
The code examples in the refactoring book are no longer in Java. *When I choose a language for examples in my writing, I think primarily of the reader. I ask "what language will help the most readers understand the concepts in the book?" Refactoring isn't a language specific book, its advice may have been explained with the help of examples in Java, but the refactorings apply to most languages. I picked Java because I felt the most people would be able to understand the code examples if they were written in Java. That was the case in 1997, but how about in 2017? ...I went for the alternative: JavaScript.* https://martinfowler.com/articles/201803-refactoring-2nd-ed.html
Thanks for the update!
Great review, thanks.
Fantastic, thanks :)
Thanks for the answer.
Ah, I didn't know that (just like I didn't know about the existence of a second edition). Just go for the original then would be my advice for a java programmer. Thanks for the info!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/8zlbjx/java_for_startups/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Effective Java is definitely not a beginner's book, but once you're comfortable with the language it's a must read.
&gt;It looks like in your &gt; &gt;submission &gt; &gt; in &gt; &gt;/r/java &gt; &gt;, you are looking for code help. this is not a coding help. I want to discuss the future of the platform and the language. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Great comment, thanks.
A selenium bot checking the downloads page perhaps?
U could use sdkman or adoptopenjdk. Adoptopenjdk has an http client library for this. 
Note that most of the books listed here are mostly for intermediate programmers. I will say Head First Design Patterns (Most beginner friendly of mix), Clean Code, and Effective Java (Most complex) are all fantastic. With that said, to take away much out of most of them you should have several months of programming experience. If you are a beginner programmer, the best thing you can do is start coding. Try to find a course online, that is fairly project heavy. Learn OO design concepts -- inheritance, polymorphism, composition, differences between abstract classes and interfaces, etc. and once you feel fairly comfortable with those concepts you can start learning design patterns. d
&gt;Java Concurrency Java Concurrency In Practice. +1
From the list linked, Java specific I would only recommend Effective Java. Other comments have also mentioned the greatest hits.
Aww, Mine got the least enthusiasm :( I will note that I was a 100% beginner when I opened this book, it is very comprehensive. Lots of explanation and lots of examples. For example, it really helped me learn recursion. 
&gt; The compiler would be capable of compiling itself, to produce a faster, JIT-compiled version of itself Run this in a loop, until the compiler runs instantly.
There's also a Ruby Edition ISBN-10: 0321984137
yes
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The "really impatient" book is very, very terse. I would suggest the somewhat longer [Core Java for the Impatient](https://www.amazon.com/Core-Java-SE-Impatient-2nd/dp/0134694724/) by the same author, which has more detail without becoming a Bible-sized book. The link also takes you to the Java 9 version. 
#Release Notes [Java 8u181](http://www.oracle.com/technetwork/java/javase/8all-relnotes-2226344.html#R180_181) Note that Java DB was removed [Java 10.0.2](http://www.oracle.com/technetwork/java/javase/10-0-2-relnotes-4477557.html)
TL;DR: remote devices begat Oak which begat Java, which ran everywhere (8min mark). But then JS prevailed on the web (9:22), but then Android saved Java (9:45). I.e. an uneven, one-sided account, and the "Fall" promised in the title is largely absent other than a reference to the spurious Tiobe popularity index.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8zo4mf/weird_java_scanner_issue/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Uh oh, my deadline for having to make an effort to figure out why my builds are giving warnings about deprecated features draws closer.
I like the whole polyglot development idea of GraalVM. But concerning this topic all articles only talk about dynamic languages like JavaScript and Ruby. But what about polyglot development with compile-time statically type-checked languages? As I understand, GraalVM also wants to provide a standard compiler infrastructure for developing new languages. But most code examples about polyglot development with GraalVM seem like a simple replacement for the Scripting API (= compiled and evaluated only at runtime). Isn't this a missed oportunity, since it is currently impossible to do joint-compilation with languages not named Java (Kotlin, Scala, Groovy, ...)? Also this is nothing new, the .NET Framework supports this since its creation.
And anything inside `{@code ... }` will render as-is with no HTML escaping (with the exception of `@`, which still needs the escape), so it's common to see /** * &lt;pre&gt;{@code * {@literal @}Annotation List&lt;String&gt; foo * = new ArrayList&lt;&gt;(); *}&lt;/pre&gt; */
You are trying to output the `Scanner`, not the user entered text. In order to do so, you need to store the input in a variable of type `String`. The input is obtained in your line `i.nextLine();`. As it is right now, you are immediately discarding this input. ---- For the future: such questions belong in **/r/javahelp**, not here.
the oracle jvk will start charing starting from jdk11 (so i think you are free to use java 8,9,10 for free on the server). openjdk, the jvm oracle jvm is based on, will still be free and you can go that route
7 is almost like algorithms &amp; data structures to be honest
and my client still runs 1.8.0_152....
Do not be fooled by the trends associated with technologies such as React, Node.js or MongoDB. Classic technologies such as Java or SQL databases still rule in business (at least where I work). If you want to create another trendy application that has a poor chance of winning millions of customers, a modern stack can be a good choice. However, if you create enterprise solutions, I assure you that the stability guaranteed by Java and high quality libraries is salutary.
Have you tested newer versions? What's the reason?
My client is still on 1.7 and I've not interviewed for a client on anything greater than 1.8x. 
million reasons all out of my control. we are still on tomcat 8.0 too. i can't touch the environment at all all i can do is stage wars to UAT, they test, they roll to PROD.
If this is for your hobby project, thats perfectly fine. Curl and grep may even do the job here. If this is for work ... please don't do this. Upgrade to a new release only after thoroughly tested and validated that your application works on it. Definitely not automated. Even if you have 100% unit test coverage, integration tests out of the wazoo, still, don't automate this.
Definitely! java is a good language I was shocked how inmature the c# ecosystem is compares to java. You can pretty much develop any service with spring.
Oracle will charge for Oracle JVM only. The vendor neutral and open source OpenJDK will be the go to for most people now. Oracle has been putting in effort into making the difference between its JVM and OpenJDK minimal. In my opinion, this isn't something to be concerned over rather it should be celebrated. It is better that an open source, vendor neutral implementation of Java becomes the defacto standard vs one that is by a company. Installing Java should be as easy in Linux environments since OpenJDK is often available in the repositories.
No, Oracle will provide updates for both source and binary (for their OpenJDK distribution) for six months, until the next release. This consists of two scheduled updates. If you use the OpenJDK binaries and update every six months you will continue to get all relevant updates: security patches and bug fixes. 
I haven't seen any company using a version lower than 8 in all the interviews I had
Did anyone ever actually use the embedded Java DB ( that was only ever shipped with the JDK, and not the JRE - meaning if you used it, you needed to package it yourself anyway, unless you ran with the JDK ). 
As you are just starting out, the information around the licensing/release model changes are largely irrelevant. You can just update to the latest openjdk and not worry about support contracts, LTS releases or anything. The likelyhood of hitting an unfixed jdk bug or compatibility issues is very low on such popular stacks. Personally i switched my machine's default jdk to 10 when it was released and have not come across any issues that couldn't be resolved in a few minutes. Java is very popular and i don't see a reason for the decline and even if, likely to another JVM language, but it's still running on the same JVM ecosystem. You list "tremendous amount of code" as a downside, however java's verboseness is rather positive as most of the time is spent reading, not writing code. Also any decent IDE/editor has autocomplete to help out.
and we still run u92
every single version post, there's someone saying "my workplace hasn't even moved past 1.2 and i've never interviewed for a place with anything greater than 1.3"
My condolences. 
This is why DevOps has become it's own job
Java detractors, just downvote them
You can just use the OpenJDK. Java's ecosystem is still ahead of C#. For a web app I would keep frontend and backend development separate, I'd also recommend against AngularJS. Give elm, vue or react a try for the frontend. For the backend I'd recommand taking a look at www.vertx.io as an alternative to spring. It has much better performance as a fully reactive stack and much less boilerplate code.
That was the final (publicly available) update for Java 8. RIP.
No, January is the last planned public update for Java 8. https://www.oracle.com/technetwork/jp/java/javase/documentation/eol-135779.html
Agile... :D
&gt;It seems all other languages are ahead of Java as of now. I think people use Java mostly for its ecosystem, not the language per se. From this perspective, only Kotlin is ahead of Java. With Java (Kotlin), you can have this: \- A lot of high quality libraries: Spring, Apache Commons, Guava, JUnit ... \- A superb IDE: No IDE can beat Intellij ( You dont even need to use UE, just CE is enough) \- High Performance: If performance is your priority, use Vertx instead Spring, the cons is it doesn't have a lot of "magic" like Spring. \- Proper async implementation: You can try Coroutines in Kotlin, in the future, Java will have Fiber( [http://cr.openjdk.java.net/\~rpressler/loom/Loom-Proposal.html](http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html) )
Not sure why I'm getting downvoted for telling the truth lol. Current gig is 100% remote @ $90/hr. Woe is me!
And here I am using OpenJDK 11 Early Access Build 22.
We all bow to your superior finances. Clearly that will instantly change our minds on irrelevant version FUD. 
You are [one major version](http://jdk.java.net/12/) behind
who's trying to change anyone's mind lol? Just posting my experience with JDKs. But yeah - thanks for the superior finances. It's awesome to make a fuckton of money - who gives AF about which JDK they use.
yeah it's kinda strange but I've not interviewed in over a year so maybe things will be different next time I go job hunting. It's interesting to get downvoted for simply listing one's current work experience. As a contractor, I have no say-so as to what JDKs these companies use. 
Usually you can propose it as tech debt, specially when you tell them its EOL and they are vulnerable to attacks that can make them lose everything!1!1!!1!!!(plus its cheaper to find new people on new jdks)
I'm still on 1.7 :/
I had to tried to use it a few times for testing (this was before things like Docket and Vagrant). The problem was that it was always behind in features compared to Derby itself (from which it was based), so I'd have a few irregularities. After a while, it just made sense to use Derby itself or H2 which had better docs. 
Count your blessings, a lot of us are still at 6..
This post might clear will give you a good idea about java licensing and what has changed. [https://www.azul.com/eliminating-java-update-confusion/](https://www.azul.com/eliminating-java-update-confusion/)
Same, sad times...as400,websphere
I've tried to like Gradle, but like SBT and Scala, it just makes things more difficult than needed, specifically if you are not interested in learning yet a other DSL. Maven and even ANT are more than good enough. I just need my build to be more complicated than necessary - I have code to wrote, not yet another build system to learn. Reminds me of the shit that the Javascript world continues to reinvent for no apparent reason other than not invented here syndrome. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/8zsxyw/the_significance_of_developing_java_web/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Another incremental release, the reporting will be the most useful and being able to pass args to JavaExec.
No **spamming**.
Thanks for the info. Well for now SQL DB would work fine for the app, the issue is that once we are in production, and want to advance a bit further, we want to gather a lot of data to apply some data analytics, to which NoSQL is much more commonly used. For frontend I wanted to use Angular anyway, so thats not an issue. :)
Thank you for letting me know! :) Its heartwarming to know, either way, what do you guys think of Kotlin? It seems to be compatible with most existing Java frameworks (there are already Kotlin Spring tutorials out there), works with java fine in the same codebase, and much less robust. Or is it just a new Scala, and ppl will forget it in 1-2 years? I have this feeling that the reason why Google promotes Korlin so much is only because of the 20 bn lawsuit :D
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes I wanna keep Java only on the backend. But I will have to stick with Angular (despite the fact that I belive react is much cleaner, simpler and easy to use), because here in Hungary everyone uses Angular, and you know, I have to adapt to the market as well. I was adviced vertx, thjank you for the advice, but I do not need the backed to be ultra-high performant, a simple spring app should be fine too.
thank you so much! :)
Thanks for the tip, I had to use Eclipse in my previous job, which was utter and absolute dogsh!t. Btw I would argue with Intellij being the best ide, I belive Visual Studio is miles ahead (if you are a .net dev, of course), but Intellij is still a really solid choice. Btw what do you think of Kotlin? Will it replace Java? IT seems to be compatible with most Java frameworks, I have already seen Kotlin Spring tutorials. Or is it just antoher Scala, and the langauge is just only hyped because of google? (I belive they are pushing this only because of the 20bn lawsuit)
from what I know oracle will charge for JDK8 no? Thats what I read, Oracle will start charging for "Java 8" from January, well I belive that is JDK 8 unless I am mistaken.
Hey, TechnicallyHumanoid, just a quick heads-up: **belive** is actually spelled **believe**. You can remember it by **i before e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey, Mr. Bot! While [over 20,000 words](https://www.thefreedictionary.com/words-containing-ie) indeed contain **i before e**, there are still [over 11,000 words](https://www.thefreedictionary.com/words-containing-ei) correctly containing **e before i**, and a lot of words which shouldn't even have "ie", such as `their`, `reimburse`, `foreigner`, `conceit` and `forfeit`. In fact, you yourself like to point out that people should use **e before i** pretty often. Stop contradicting yourself. None of these should be used general rules. The bot above likes to give structurally useless spelling advice, and it's my job to stop that from happening. [Read more here.](/8y3us6) --- ^^^I ^^^am ^^^a ^^^bot, ^^^and ^^^I ^^^make ^^^mistakes ^^^too. ^^^Please ^^^PM ^^^me ^^^with ^^^feedback! ^^^| ^^^ID: ^^^e2la2ex.960b
yaa this is awesome java 10.0.2 ,but eclipse has not released in java 10.0.2 version [JAVA -visit and cooperate](https://basicittopic.com/category/java/java-topic/variable-or-data-member-in-java/) 
Ah thanks for clarifying.
We call this process bootstrapping. But we want to ship the Compiler in a precompiled state using native-image so it can can compile application code from the beginning.
I have a few clients on 1.5 and I'm migrating them to 1.6. 
I'm not sure what joint-compilation with other JVM languages would achieve. The current compilation unit for Java is the class, and even Nestmates (and the forthcoming sealing upgrade) doesn't really change that. Perhaps you could expand on what you had in mind with an example? As for "the early days of .NET", well - not really. Sure, .NET launched with C# and VB.NET and possibly others but bear in mind that all languages had to obey the Common Type System, which you can argue quite tightly limits the divergence in semantics that's possible within the various languages. .NET also tried the Dynamic Lnguage Runtime, but that was basically DOA and is abandoned now. So, for sure, the ideas are not necessarily new in a theoretical sense, but this is (as ever in Java) about shipping a production grade product (maybe not this release, but that's obviously what they're aiming at) that helps developers solve real problems - the "Blue Collar" approach so famously championed by Gosling and others.
&gt; To be fair, Oracle is not charging for the production use of the language runtime. So the Oracle JRE will still be available for everyone to use (even in production)? And in case of LTS for the whole period of the LTS?
Wasn't the issue with Maven the fact that every small thing that didn't happen to be supported out of the box required you to write as plugin? That and the fact that XMLs are already unreadable as configs, as build descriptions they are just sad. People went after Gradle because a program that builds their program was expressed more like a... program.
I still use JDK8……
I would recommend to not think about NoSQL until you need it and you will probably not need it for a long time. Look at Twitter for how long they lived with MySQL. Premature optimization is the root of all evil.
Maven was a little rough when it first came out, and likely because, as you said, there was a lack of plug-ins. But since version 2 and especially version 3, it has a much better API. It has been years since I've not been able to find a plug-in to do exactly what I wanted. And XML is definitely the right syntax to use - look how well IDEs support Maven and Ant vs Gradle, SBT, and pretty much any javascript build tool. Anyway, what I've seen is that every project that attempts to use Gradle ends up writing all sorts of custom logic, which is fine at first. But eventually they're spending half their time dealing with the build and not the business requirements. Instead, by the time I need something (e.g. Docker integration) there is already a plugin on Github that has become the defacto standard with numerous groups supporting it. I'll take the community over some random junior dev on my time who spent a week hacking together some Gradle magic. 
Agreed 100%. I've seen so many projects in the past few years that just *needed* to scale out with Hadoop, Mongo, etc before they even had more than a few thousand test records. And then 3 years later we're stuck with Mongo even though we still only have a few thousand records. But all our data is now a bunch of columns or json without any constraints or ways to do proper joins. Large queries need to be written carefully, often times with a bunch of parallelism and we need a cluster to support them - it's a huge mess, all of which would be easy if we had used SQL instead. 
I'd say Kotlin has a better chance than Scala which is just too difficult of a language for most typical enterprise projects with mediocre devs. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
\+1 for two separate projects. Spring Boot + Angular is a great choice. 
F
Java is a giant in the "real" industry. Kotlin is the much better (modern) language in terms of features and readability. But no chance in replacing Java. For your startup: Why not? Spring supports Kotlin.
Why not have a build just for the kicks of it? If it works, great you can upgrade Integration-&gt;QA-&gt;Production, if not you look into it and check what's wrong, fix and upgrade? That way you automatically have an up to date image? The cost of doing this would be pretty high tho
Are you using Oracle Java releases exclusively? You shall try OpenJDK, and AdoptOpenJDK has a HTTP API for releases: [https://api.adoptopenjdk.net/README](https://api.adoptopenjdk.net/README) We are using OpenJDK in all our Docker images, try the official OpenJDK Docker images, like 8-jdk-alpine, 10-jdk-slim, 10-jre-slim and others.
My advice is to use what you know. If you know Java, go with Java. When you are a startup, the first step is to validate the idea with minimal effort. Create a MVP (minimal viable product), a landing page and go live. In this phase is important the TTM (time to market).
No one should be on 9 or 10 because they're not LTS releases. Doesn't make sense from a business perspective. My company is only trying to internally get to 10 right now because that should hopefully make it easier to migrate to 11 come this fall.
I'm upvoting you. Screw the haters, corporate IT can be totally back asswards. If they're willing to blow big bucks on people like us rather than upgrade their old systems, I'm fine with it.
Gradle is technically a superset of Ant, since Groovy includes the entire Ant API. I actually find the Groovy Ant DSL format to be more intuitive than writing programmatic build logic in XML.
Yeah we've only got ten people, so it's mostly just me doing the builds. I'll figure it out. Just need to actually start on it...
When will users start being updated to Java 10 from 8? It's been a long time now and i doubt a lot of programs will struggle using the Java 9/10 Runtime.
I still find JSP + tag libraries an easier way to deal with dynamic frontends than JSF.
Caveofprogramming.com Do all of his Java tutorials and you're more proficient and ready for a job than the majority of graduates.
/r/javahelp and /r/learnjava. And don’t make a thread there. Read the FAQs. It’s not the first time this question has been asked. 
&gt; a build just for the kicks of it As with anything, it a matter of cost vs reward. Reward = 0 Cost &gt; 0 Therefore, obviously not worth it.
The reward here is staying up to date with minimal effort because it's automated. :) 
There is no reward when the shit's broken. On the contrary...
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
From TFA: &gt;Note that JSP is still absolutely fine to be used by it self (outside JSF), but for JSF it has never been a good match. ;)
I *think* that might be for extended java 8 support. I think Java 8 is soon to be EoL'ed so if you want updates for that, you pay. I believe to use java 11 on servers you will have to pay. But openjdk will continue to be free across the board
If it's not a build you actively use? It's either that or every so many months you have to manually update the version and see if things are broken or not, at least with that solution you can automate the part where you check for updates and intervene when needed. This helps you keep your project up to date preventing you from falling into the scary legacy world without security patches or bugfixes. And I know you can still have a working application and upgrading isn't always worth it, but there are cases where you might want to stay on the edge and automating it might be worth it.
In your previous post you were told to address such questions to either /r/javahelp or /r/learnjava and yet, you are again posting here. *Reference books* are *references*, not *learning materials*, pretty much like an encyclopedia is not for learning things. If you need examples and practice exercises, use a *tutorial* as has been suggested in your previous post as well. Use the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki and you will have plenty graded practical exercises. **Post removed** - this question belongs in /r/learnjava or /r/javahelp 
Haven't looked into Kotlin much so no comment, but there is also a community Project to provide Long Term Service Versions for the OpenJDK : [https://adoptopenjdk.net/support](https://adoptopenjdk.net/support) 
Yeah I don't get the hate. If it was up to me (like it was in 2014 at a big orange retailer), I'd do the migration. But it's not so as long as there's a check in my account each Friday, who gives AF? For the most part, corporate America doesn't like upgrading to new versions of things every 6 months-year. If something is working fine, they tend to leave as-is unless there's a compelling reason otherwise. 
I don't remember major java versions updating by themselves in the past. You have to install those yourself.
But java.com still only offers Java 8, which is the site for consumer Java. It's odd that it's taken so long this time. Though from Java 9, updates should become more frequent.
No. The distinction is that Oracle is also providing an OpenJDK binary under the GPLv2 with CPE license. This is functionally the same as the Oracle JDK binary and is completely free. The runtime is therefore free (in the form of the OpenJDK binary), but the Oracle JDK binary is not.
Developing a new app for java 8 is like developing a new windows app for windows 7.
Yeah. It's a big problem don't get me wrong, especially with all the security risks that it entails. But there are huge costs associated with certain kinds of upgrades. Like my company, our app is still using a swing based UI, and it definitely looks dated. But that's not impacting our sales or hurting our business because we're an Enterprise, not a consumer, product. At the end of the day, it's more cost effective to focus on improving our feature set to stay competitive with what we can offer our clients than it would be to upgrade our UI purely for the sake of being modern.
Here is a link that explains the new jdk update model: https://www.azul.com/eliminating-java-update-confusion/ 
As I can see you have 2 options: 1. Every so many months, you put aside X amount of time to check how is working with the new version. Build, test, QA, etc. May even release to prod on the new version of JDK 2. You automate the update, as you said. Fine. But, build 112 is broken on the latest update. What do you do? Ignore it since you have other things on your plate (backlog items that you're working on) or deal with it right away. If you ignore it, you're back to situation 1, when you deal with it when you make the time for it. If you deal with it right away, you're gonna be behind on your normal features. I'd rather deal with it on my terms. On my time.
It's kinda pointless to argue on a fictional use case. But a company who would look into this definitely wants to stay up to date and the failed build would then be put on a priority list where it's gonna be fixed in the next few sprints. It's not like there are new releases every day, and breaking changes are pretty rare. The point of automating it is purely informational and prevents you from forgetting it. 
That people are forced to write plugins to do non-standard stuff is more of a feature than a bug in my opinion. That forces people to use the tools in roughly the same way as everyone else, so that not every project becomes it's own special snowflake.
Sounds like pushing Kotlin might have been the original agenda.
&gt; I had to use Eclipse in my previous job &gt; Btw what do you think of Kotlin? Ok yeah that's what I thought, not a genuine topic at all. Injecting JetBrains'. 
I have to disagree. If that status will be red for many weeks/months it'll be just noise in the background. No difference between that and deciding on your own accord to "ok, we're X releases behind, let's update". nobody will notice anything anymore after a while. It'll be status quo. 
Spring Boot absolutely supports jdk10. Oracle JDK8 is entering an extended support phase, where patches require paid subscription to Oracle. This is nothing, I recall working for a bank that paid money for support on JDK1.4 well after 1.6 was around. In general, especially if you're starting, you should be trying to use latest GA of everything. 
Just run `./gradlew clean --dry-run -Dorg.gradle.warning.mode=all` and gradle should tell you. For the warnings I have seen you can enable a preview feature that makes your current version behave like the version that removes the deprecated feature to make sure your build still works. Also, the warnings usually come with a nice pointer to the appropriate section of the user guide and/or migration guide. Most likely candidates are annotation processors on the classpath and/or "the 'deferred configurable' behavior of the 'publishing {}' block is now deprecated"
Oof. You're in for a tough time. The Azul folks published an article recently addressing the update situation. Short version is that Oracle is getting out of the business of helping non-paying users maintain a working Java runtime. There are many players dancing around filling that gap, but it's an uncertain time, for sure.
&gt; Wasn't the issue with Maven the fact that every small thing that didn't happen to be supported out of the box required you to write as plugin? Exactly this! This is why I never used maven. I find Gradle to be a perfect mixture of ANT and Maven. You get your build by convention like Maven, but if you need something custom you can just write a task like in ANT. 
Anywhere that has a "DevOps" teams has totally missed the point of DevOps.
@ManagedBean should have been removed 2.1.
&gt; Premature optimization is the root of all evil An out-of-context quote that has been leading programmers astray for a few decades: https://ubiquity.acm.org/article.cfm?id=1513451 Using foresight based on experience to head off performance issues is necessary and it is not evil. 
Even if you use Kotlin you still need a JVM so you aren't going to get away from having to make a decision between paying for the Oracle VM or using a VM from OpenJDK.
The future is here! Fasten your belts!
You can continue using Java 8 after Jan. 2019 you just won't get updates (including security updates) unless you have a support contract with Oracle.
bad bot
🍿Welcome to bot wars! 🍿
Noob who has made jsf sites before here. What alternatives are to managed beans?
Kotlin is fantastic at addressing the common complaints of Java (verbosity, null pointers, async) while retaining the strengths (ecosystem, performance, tooling, interop)
Not sure I understand the concern. Isn't the free OpenJDK with the option of having a fully supported Oracle JDK preferable to just having the chaos that is something like the NodeJS world with no option for support?
CDI
&gt; If you want to create another trendy application that has a poor chance of winning millions of customers, a modern stack can be a good choice. However, if you create enterprise solutions, I assure you that the stability guaranteed by Java and high quality libraries are salutary. Success has little to do with the technology and mostly to do with product market fit and then team and engineering skill. I'd pick whatever allows you to move quickly whether it be Java, Python, Node or whatever. Until you have product market fit you're going to be writing and throwing away a lot of code. You want to prioritize velocity. If this is your first time bootstrapping a startup tech stack. Have fun you're going to learn a lot and realize a lot about engineering is picking trade-offs rather than making the best technical decisions. 
Or perhaps never have been introduced. It was kinda a surprise addition in 2.0 and it came together with a warning that it might be removed soon again.
a server side web application in 2018?
Or fucky inputs to the task. 
Why not? There are still many server side rendered applications. SPA is not for everything there will always be usecases where server side rendering is appropriate.
you know that react junk people are on about in node/js land as the new hot shit, that's server side templating. pretty much every php page too. probably a good 95% of the web is server side templated. There will always be a place for the technology for people who don't understand how to configure a cacheing server.
SPAs in JSF are actually pretty easy to do.
Plugins might have changed, but I still find it alien to define my build with something that doesn't have syntax highlighting in every editor. To be honest, I haven't used Gradle for a while either (I work in Scala where SBT is de facto standard), but I remember that projects were migrating from Maven to Gradle and quite of lot of devs were happy about the change. Mainly because Gradle also had plugins, and somehow they found it easier to put working build together and maintain it in Gradle. ¯\\\_(ツ)\_/¯
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It is a good starting point for learning a robust language - it is widely used, has job opportunities, and is not an impenetrable wall like C++ is for new programmers. I learned it in order to make mods for Minecraft, it took a few months to learn the language and core parts of the library, although i have quite a lot of prior experience with C-like syntax languages. The most important thing is to have a big project to work on - trying to learn from tutorial snippets will not teach you anything about using the language in real software and the issues involved in making maintainable and organized code.
Very heavy Java user here, and I've never ever used it. Did use the default datasource in Java EE a lot, but not that weird JDK only thing.
yes!
Netbeans, it was what was recommended to me when i first started and ive yet to find somethibg better. Eclipse keeps crashing and is sooooo slow. It may not havd the latest features but netbeans is very stable which is all i care about. Also it can open maven projects directly without generating a bunch of IDE specific files.
Thank You so much for your help, could you please tell me how you learned Java; like how you approached it, through an online course or a book perhaps.
I just started disassembling the server sourcecode and looking up everything i encountered. If you are not familiar with an OOP language, there are good primer textbooks you can get that explain the basics of classes, inheritance, common structures and patterns, input/output, ect. From there, field experience is best. Always look things up and make sure you are doing things in the optimal way, and understand how things really work - 'black box' code that hides the real implementation leads to horrible performance and misconceptions about program flow/behavior.
The mooc offered by Helsinki University is incredibly good. It will teach you all the basics, then you can explore the language through a project of your own. http://moocfi.github.io/courses/2013/programming-part-1/
About time! Should have been done right after 2.0!
double yes, server-side rendered js apps is becoming an option on the js world because, turns out that rendering on the server is faster
IntelliJ Ultimate because my employer can afford it. 
It's a great choice, but Java EE with JSF is a better choice even ;)
&gt;It seems all other languages are ahead of Java as of now. You mention "proper async implementations", but is that really the definition of being ahead? Java has a concurrency library with more and more useful concurrency primitives than most other languages have, especially as part of the standard library. Besides this one "async" feature, is there anything that other languages really do better? Are they really *ahead* of Java, or are they just *different*? P.s. You don't need a tremendous amount of code to write Perl, but good luck reading it back.
React was yesterday. Vue is now the new hotness. What's gonna be tomorrow?
&gt;java.com [java.com](https://java.com) shows Java 8 since that's the LTS release. This will likely be updated to Java 11 upon it's release. As for the automatic update, I believe that's only really been done for windows users, and generally only on major releases - which I suspect will also only be for the LTS releases going forward.
IntelliJ, it has superior keyboard navigation. I hate mice.
This is welcome news. Sometimes too many ways to do something makes things confusing. Facelets are so much cleaner than JSP so it makes sense.
Here we go again. I am going to go with the Netbeans army. It is just so simple to get up and running. You can even install it with a configures webserver in one executable.
cgi-bins, clearly... 
Doesn't Intellij use the stanard windows "redo" shortcut (ctrl-y) for delete line instead? I seem to remember that being...annoying.
Eclipse. It's free, it's decent, it just works. While Intellij is fine, I've gone through several jobs where jobs where I was excited about it, only to start using using it and be disappointed. My experience has been it's basically eclipse, with a similar number of bugs, and a different layout.
Still stuck with Eclipse, only because I haven't had the time to figure out how to make IntelliJ do the same thing with directory links. Once I trawl through enough stack overflow posts to figure out the file formats, I'll duplicate the setup and can be done with Eclipse forever.
absolutely this
Intellij , it is what my teacher told me to use when I started learning Java. I've tested Eclipse and hated it compared to IDEA.
yeah, it's super annoying.
Whatever everyone else is using at the time... Last job net beans. This job eclipse.
Hey , I've started Programming when I entered in College in a Software Engineering course , the book that I was recommended to use was Java: An Introduction to Problem Solving and Programming , Walter Savitch , ISBN: 0134462033 you can easily find the PDF version of it. Just to clear something out , there's no "Completely Learn" in programming languages , there's always something that you don't know. I've been programming for a year and I feel like I know nothing bout Java, everyday I learn something new.
Somewhere else. /r/learnjava /r/javahelp 
I started off with Eclipse in AP Computer Science, then moved to NetBeans, and finally stayed with IntelliJ IDEAs. I just feel that its user interface and code analysis/completion features are unmatched.
And nonstandard Ctrl+/ for (un)commenting which isn't even possible on most keyboards(ctrl+shift+7 doesn't work which is where the / is). Pretty sure most other sensible editors use ctrl+shift+c also because it frees your right arm to hit the mouse and select what to comment out.
Netbeans because I'm just really accustomed to it. I didn't like eclipse when I tried it out and I haven't really tried IntelliJ.
Great point, I'm reading BalusC's new JSF book now and in literally the first chapter he complains about the introduction of @ManagedBean and its lack of removal.
Yes, but you can rebind it.
InteliJ of course, I love it’s style and intelligent!
Used it for a long time before trying out IntelliJ and sticking to it for no particular reason. The proper maven integration in netbeans is something i really miss. For example changing java language level in project settings directly reflects in pom.xml and vice-versa. The defaults are also more sensible(e.g. generated pom has properties for version and encoding). I feel like netbeans should be the first IDE for anyone doing java due to its intuitive design. IntelliJ may do some things better, but one really needs to understand everything(and customize some nonsensical defaults) to be more productive in it.
Exactly. If you are doing open source. Education. Or have an employer willing to fork $500 over IntelliJ is the answer. 
shit man don't tell the danm kids that exists, the last thing we need is one of those fuckers wiring a python repl up to it and deciding that's amazing.
I really like Netbeans and I was using it until last year, when I started to work with gradle and kotlin. Both technologies have not so good support (not at all in the case of kotlin) on Netbeans
Oracle releases on specified dates 4 times a year, so you only need to check 4 times a year. They will not be providing public (free) releases starting in January, though, so you will want to be looking at OpenJDK (or 3rd party providers of it) anyway. AdoptOpenJDK, Azul Zulu, Red Hat unofficial builds, etc.
For 11 they will likely be pointing to OpenJDK instead since Oracle builds won't be freely available anymore.
CTRL+/ seems common in all the editors I've used (or tried it in). US keyboard where it's shared with ? not a number.
Well stop redoing mistakes that you shouldn't have made in the first place.
IntelliJ... every time I tried Eclipse it made me scream in frustration.
I think that comes from WordStar or something ancient like that. Ctrl-Y was the line delete command in Turbo Pascal. It makes perfect sense to veterans!
Intellij IDEA community edition is all code licensed under Apache 2, which as a DFSG-compatible license does not discriminate against users. You can use it for commercial development.
no
Eclipse, for the reverse reason. One project at a time? No way to just straightforwardly compile a folder? What on earth.
Please, head over to /r/learnjava and read the sidebar there. This subreddit is not for questions about learning Java (/r/learnjava) or help with Java programming (/r/javahelp)
&gt; I hope this is the right subreddit. It isn't. This sub is for: &gt; News, Technical discussions, research papers and assorted things of interest related to the Java programming language What you need is /r/techsupport. &gt; I don't know if my hardware is dying or if this could be Java related Definitely not Java related since Oblivion doesn't use Java. First troubleshooting step: clean your computer. Make sure that all heatsinks and fans are clean and dust free. Quite often, it is only a dusty computer that doesn't get sufficient cooling that causes your symptoms.
This question appears roughly once per week. A simple search through the subreddit should have provided more than sufficient answers. Also, it classifies as *survey* which is forbidden according to the subreddit rules. **Removed**
make that cgi-\*beans\* and I'm sold.
Out of all the times to get a dust problem, now is the worst. Currently out of work for a broken arm and toe. &gt;.&lt; When I do get back, I'm gonna work on reapplying the thermal paste, too. Hopefully, I can also work on upgrading to a Ryzen 5 and a compatible motherboard and ram. Oddly enough, the ram is least affordable for me
Annotation magic came with practice for me, build a simple spring boot application and try to leave out the autowired, so you get kind of an idea what is happening. Also the guides on spring.io are pretty damn good at examining what is going on. 
don't get me wrong guys. if server side tempating will be necessary in near future i don't think people choice jsf. i have worked with jsf. also i have contributed a most populer jsf ui library. the developers of jsf even not patched some basic stuffs that why omnifaces exist. 
Ok,thanks❤.
Ok,thanks❤.
Ok,thanks❤.
Ok,thanks❤.
I'm considering JSF as a framework actually designed to build SPAs... but 20 years ago. It is like framework for server-side rendered SPAs :) This is why there is no place for it today. For SPAs there are client-side frameworks and for regular server-rendered sites JSP/MVC is better solution.
Try work with reflection. Build your own annotations and annotation processor, for example try to build orm. 
That’s an interesting thought. Or I can even look at the source code for lets say “EnableWebSecurity” 
Spring's source?
Yes that’s what I meant. Hopefully its in there somewhere!
monsieur knows a lot about perversions
It's in there, but you are going in the deep end. It's like trying to find multiplication in ZFC. Looks t Spring Boot as a layer on top of Spring.
\*khm\* AWS Lambda \*khm\*
A workaround is using animal-sniffer to check that you not are using anything that isn't supported by Java 7 rt.jar. 
&gt;Well for now SQL DB would work fine for the app, the issue is that once we are in production, and want to advance a bit further, we want to gather a lot of data to apply some data analytics, to which NoSQL is much more commonly used. If you want to perform data analytics in real time, there is Kafka. Look into it! It allows for real time streaming, great concurrency and most importantly, stability and scalability. It can appear quite cumbersome, but it is worth the effort! 
If you're using Intellij you can just do ctrl + left click on the annotation and it'll show you the interface. Or you could just google it.
&gt; So I inherited a Spring Boot application in my new job. I understand the application logic and everything works but I am uncomfortable with the Spring Magic that gets applied because of the annotations. There is no magic at all. It's just a matter of learning Spring. be careful to not dismiss stuff you don't understand as 'magic'; you're removing your opportunity to learn if you just dismiss it as 'magic'. &gt; I have browsed spring boot documentation, which it seems requires prior Spring and Spring MVC knowledge. Yes. Spring Boot is nothing more than some preconfigured Spring starters. You can't really use Spring Boot without some basic understanding of Spring. And you learn the same way the rest of us: by googling the stuff you don't understand. Also like the sidebar mentions; /r/javahelp is more suitable for questions like these. Also feel free if you have any specific questions; I use Spring daily and am happy to give you some pointers.
Yea.. if u are 50 years old lazy not assosiated with modern stack person. Spring boot + SPA is the best way to develop fast and reliable application. Also its gives you power to introduce changes fast and independly to achive client needs. JaveEE not even exist, now you call it JakartaEE. JSF? please, do not even think to move responsibilities from front UI to backend business staff. Let the JS framework show the power, this is the common ground for them. 
Does anyone have any experience comparing it to Spark or Javalin?
If you're surprised by that, checkout [this](https://nextjs.org/).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
well it has more or less more in common with Vert.x and Spring Boot, since all of them bring a lot of integrated modules Javalin and Spark are just standalone web servers with a DSL
You can't sue Oracle for such a loss anyway the same way you can't sue Microsoft if Windows crashes and you lose data. I think the license has some stupid amount like $5 compensation although that might have been removed now as I am recalling that from at least a decade ago. If you buy a support agreement and Oracle can't resolve it within your SLA the most you would get back is your support cost. If you lose $1m a minute due to some JVM bug you're shit out of luck though. 
preach
My home Mac that I'd not manually updated just popped up with a 10.0.2 upgrade dialog and installed it for me - so it's already being pushed out it seems :)
That Jonathan Giles - So hot right now. 
Ok, I was misled by the term "micro-framework".
Could you go into more detail on why it's wrong? I'm genuinely interested.
Better term would be 'micro-core-framework', you can start off small and add modules as you go big.
Sure. Document databases are only a good idea when you are storing non-relational value data. When your model elements are not completely contained under a root, you have to store them separately. A relational db is designed around this and is optimized to retrieve it in a single query. With couchbase or another document db, you need to issue a separate query for each and handle the joins yourself, which is much slower. There are cases where document databases are indicated, but the vast majority of cases will have independent relational data. Also, some relational databases, like postgres, have a document column format, so you can have both. 
Here a comparaison of all the major microframeworks that I did : [https://medium.com/@iliasyahia/the-state-of-java-kotlin-microframeworks-in-2018-54768edb7908](https://medium.com/@iliasyahia/the-state-of-java-kotlin-microframeworks-in-2018-54768edb7908)
I know you may not be convinced but JSF 2.x is a big improvement over JSF 1.x and just saying that it is "server-side rendered" is not an argument why it is not a good solution for SPAs. Looking at a PrimeFaces demo page gives a feel for what is possible: [PrimeFaces Manhattan Theme](https://www.primefaces.org/manhattan/) JSF is not overkill. Yes, initially there is a learning curve to understand the JSF life-cycle but after a while I don't even think about that anymore and coding with JSF feels very natural. Every framework has to do the same things in regards to eventually rendering a page and handling requests etc. it's just JSF has made this very explicit in their documentation how this is handled (which I like).
I really like the look of this, Java now has quite a few micro frameworks
Thanks for the detailed response. I’ll keep /r/javahelp in mind in future. As for specifics, may be just the best route to getting started you would recommend from experience for a spring newbie? Do I need to know entire Spring framework to be effective at Boot, or are there parts I can skip?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Jooby is not a "traditional" micro-framework, but more of a modular fullstack framework. /u/edgar-espina does a great job at creating modules/integrations for it. Spark and Javalin are more like DSLs on top of Jetty. Jooby is a more opinionated. For example, if you want to configure Jetty in Jooby you have these options: https://jooby.org/doc/servers/#jetty-server-conf, whereas in Javalin you'll have to read the Jetty docs and provide your own Jetty `Server` object, and Javalin will attach itself to it. Another example: To do JSON things in Jooby you can choose between Jackson and GSON: https://jooby.org/doc/parser-and-renderer/. Javalin instead uses functional interfaces for mapping so you can provide whatever implementation you want: JavalinJson.setFromJson(gson::fromJson); JavalinJson.setToJson(gson::toJson); Then you can easily use smaller libraries, like [klaxon](https://github.com/cbeust/klaxon). On the topic of Kotlin: Jooby and Spark focus on separate modules for Java and Kotlin, Javalin focus on one single module with good interoperability between the languages.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oof. Just no
&gt; Do I need to know entire Spring framework to be effective at Boot, or are there parts I can skip? Definitely not. The configuration and dependency aspects are most important to understand. The rest depends on what you're building exactly. It's likely you're going to be building a REST API so the Spring MVC bit will be important there, but Spring Security is not something you will have to dive in immediately (unless you need to build in security into the service itself). If you have a goal of what you want to build I can give more information if you want. 
Some people want to build a stable web application that stand for long time.
If you are just starting I would be weary of basing my business on Java ecosystem. First, Oracle is moving Java to where their database product is currently, in terms of licensing. This means, you are free to use the JDK and Oracle DB to develop, but you must pay to use it in production. This is starting from JDK 11, to be released in September 2018. Essentially Java is now: stable, secure or free - pick any two. You are of course free to use OpenJDK (which up to now has always had poorer performance than Oracle JDK and has had compatibility issues with slew of software). But OpenJDK is like green browser, there is no long term supported version, and you must keep upgrading to new release every 6 months is you want security updates. Startups are about proving ideas anyway, and you should consider technologies, languages and eco systems that are faster to develop and get your product to market faster. I would look into Node.js (your UI is going to be Javascript anyway, so you will use and hire JS developers for sure). 
Oracle will also start charging for JDK 11 and later binaries if you run it in production (i.e. support contract is mandatory now, except for development purposes). This is new and effectively puts the JDK into same category as their Oracle DB product in terms of licensing. For startups OpenJDK (which does not have long term support version at all) is the only viable option. But OpenJDK is also largely developed and will be distributed by Oracle as well. In any case, Oracle looming above my head is not something I want when starting a business.
Most probably, applets (aka java in the browser) won't be part of the next Java LTS (Java 11), they were deprecated in Java 9: https://www.java.com/en/download/faq/jdk9_plugin.xml
VertX isn't an alternative to Spring, it is an alternative to servlets. Spring can be used with verticles.
Well thanks for the info, you might be right, but here is what I was thinking: Since I was intending to use spring boot for the project I was thinking of using openjdk. Since it is the most popular Java framework my original tought was that it is going to be supported for newer jdk versions and get the needed support rapidly whenever a new job version arrives. Wouldn't you agree? I do not know how fast the spring ecosystem adapts, but since so many companies use it, I would believe that it will happen quickly. Also Oracle expressed that they want to make OpenJDK as similar to OracleJDK as possible. Don't you think this is a viable option? Thx for the response BTW :)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In Jan 2019, public updates of JDK 8 will cease. This does not mean you have to stop using JDK 8 (or any earlier version). The important thing is if you want to continue to get security patches and bug fixes your only option will be to get a support contract from Oracle. Since the browser plugin is not part of the OpenJDK, other JDK builds (like ours from Azul) do not include it. I believe they will be making it easy to buy the necessary support via a website with a credit card but this is not yet available..
I realize that this question is not 100% correlated to the topic but let me ask it either way. I want to make a project in Spring Boot for commercial use, and I have absolutely no intention paying for it. If I start developing it on openJDK (or with the Zulu version), will it be appropraite? What I am asking is basically how fast do you predict the Spring FW will adapt to this half-yearly release of new JDKs? Obviously everybody would want their projects to run smoothly, and not receive bugfixes/security patches do you think Spring will adapt to this rapid JDK release now? Also I was considering using plain OpenJDK, do you think its a good idea with Spring? As from what I have heard Oracle emphasised that they want to focus on making Oracle JDK and OpenJDK as similar as possible. Thanks!
So this means Oracle is embedding Google's JS runtime in one of their products. Even bundling it into a product thats sold.
No Graal.js is something else than V8. It is similar in speed and compatibility though. Maybe you are referring to j2v8? That is *NOT* what was is discussed in the article.
Springboot 2/Spring 5 require at least Java 8. If you want to use a version greater than 8, you must use Springboot 2/ Spring 5. 9 and above are not supported for earlier versions of Spring.
But it uses Node which runs on V8. I have to imagine it's V8.
Yes that is exactly my fear.
"This was accomplished by re-implementing the native node.h APIs on top of the internals of GraalVM’s JavaScript engine (rather than the default V8 JavaScript engine)."
Oh I missed that when reading the article. I wonder what the GraalVM's engine is then.
&gt; "This was accomplished by re-implementing the native node.h APIs on top of the internals of GraalVM’s JavaScript engine (rather than the default V8 JavaScript engine)." GraalVM provides the runtime. Theres a js-&gt;bytecode compiler part of Graal runtime. At least that is my understanding. 
Correction: public updates of Oracle Java (JDK/JRE). "JDK" is a vague term.
&gt;GraalVM’s support for JavaScript and Node.js are a great path forward for applications that have been using Rhino or Nashorn in older versions of the JDK with more features, compatibility and performance. This is an overly optimistic assessment for Nashorn apps right now, as Graal runs on only a few platforms currently, not including Windows. 
I'm using Eclipse as well, and working on a single project (around 100k LOC) with Java goes up and takes 3.1 GB memory. And I'm using Oxygen. On the other hand, I've rarely seen JVM release back the allocated memory to the OS, so that definitely contributes to the high memory usage. You can fiddle with the -XX:MaxHeapFreeRatio and -XX:MinHeapFreeRatio launch parameters for the JVM. (eclipse.ini file) If I were you, I'd invest into RAM sooner or later. If you want to develop Java, I'd go for 16 GB at least. (That's what I have, and running Eclipse (with 3GB) + around 190 Chrome tabs + few smaller program + OS takes up 10 GB of memory .)
The Graal compiler runs on Windows it is an experimental option in OpenJDK so it has to. Graal.js also runs on Windows. Only the native image command in GraalVM needs some more work. We will deploy a version for stock jdk 11 to maven soon. (A month roughly) That one will also run on Windows.
It looks like in your [submission](https://www.reddit.com/r/java/comments/908nb0/fast_way_to_get_to_know_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Seriously why not? We're running on WildFly 13 with the EE 8 option, and it's very nice to develop with. 
Java EE IS a modern stack! And omg, you know Spring is almost as old as Java EE is? And yes, we still have Java EE. WildFly, Liberty, Payara are Java EE. Jakarta EE will be the NEXT version :P And SPA? Lolxlol... not every website is SPA. Far from it! And server side rendering is FASTER! Why do you think all these JS frameworks want to do SSR too? Think about that! ;)
Yeah, I definetly need more than 8gb on my personal computer. My main problem with this new release is that at the same conditions (I dont even have my plugins installed in the new one) it uses more than double of the resources for the same projects, very weird, I guess I'll stick with the old version until I can upgrade my computer
My team is similar. Deploying an EE app to weblogic using JSP’s. Doing things this way just keeps guys like you and myself out of step with the field at large, reduces our marketability, and the salary we can demand I’d love to work on a Spring Boot / Angular project (well preferably React or Vue over Angular. But I’ll take what I can get).
What!.... why ? I use that software for the job we have who software use that ! WHAT ABOUT VIRUS/BREACH/RANCONWARE ? 3 BILION OF DEVICE ! and all entreprise, It's just a big F U From oracle ! [https://www.reddit.com/r/java/comments/6owu8u/ive\_heard\_enabling\_java\_applets\_is\_a\_huge/](https://www.reddit.com/r/java/comments/6owu8u/ive_heard_enabling_java_applets_is_a_huge/) Just wow !................................... If some one of oracle read that ! I think you have BAD FAITH about how you do money !! .......... ORACLE ! Thanks for reading for other normal person ! 
I think server sided rendering is great! But then again I've worked in environments where you always had to be logged and security &gt; everything else. If you're trying to do anything thats modern looking and is scalable, JSF is probably not the best solution available.
JDK is not a vague term. The JDK, in the case of JDK 8, is a super-set of the JRE. As of JDK 9, that's all there is, as the JRE has disappeared. The JDK, in this context, is the binary distribution of the OpenJDK source code.
It mentions being standard in 11+ which is also the version release that Oracle stated will start requiring service contracts to use commercially. Will you still be able to use it for commercial use via the "stand alone" version based on jdk8 or is this only usable commercially if you have a service contract? Also this is not ever going to be part of openjdk correct?
People like Pivotal may well adapt to the six-monthly release cadence, although you will need to confirm that with them directly. What most ISVs are likely to do is support each of Oracle's LTS releases rather than every feature release. That way they are updating the Java version they support every three years rather than every six-months.
Nope
Ouch, WebLogic, that's not a very "cool" server tbh. But WildFly and Payara are in high demand. Take a look at things like WildFly Swarm (Thorntail) and Payara Micro, but also at the MicroProfile and things like EE Security, and of course CDI. A lot of that is at the foreground of our industry, and we'll be very marketable really. Yes, "WebLogic and JSPs" is not going to further your career, but WildFly/Payara and MicroProfile with CDI, JAX-RS and BeanValidation sure is!
I thought my linked example of a PrimeFaces page looked reasonably contemporary. As far as scalable I guess it won't be the right choice for a Google/Facebook/Twitter type levels of scale but my understanding is that JSF is pretty efficient on the back-end and would scale well for a large portion of use cases. On another note, JSF now has a stateless option for views/forms to save on resources where saving state is not needed (I have not used this yet).
&gt; modern looking and is scalable, JSF is probably not the best solution available It's a while ago, but zeef.com used JSF and in the interview with Adam Bien it was said to scale pretty well. A couple of websites that I built with JSF were certainly scalable and modern looking. The modern look is mostly about the CSS anyway. 
Just wanted to clarify that this is about Oracle's updates :-)
The JVMCI API and the Graal compiler are already part of OpenJDK. GraalVM's JavaScript implementation is open source. The Community Edition of GraalVM is fully open-source and the JavaScript implementation will work just fine with OpenJDK 11.
In Graal.js there is no compilation to Java bytecode. There is however a JS *interpreter* written in Java and its Java bytecodes are partially evaluated to produce native code. So GraalVM is made of * the HotSpot JVM equipped with the JVMCI API (allowing development of bytecode-&gt;native compilers in Java) * the Graal compiler (using JVMCI) * the Truffle API (an API for implementing language interpreters in Java and make those languages inter-operate) * a Graal-Truffle integration that uses Graal to partial evaluate Truffle interpeters to native code * various language implementations (JS, R, Ruby, Python) using Truffle * an API (`polyglot`) that can used to access those language in a uniform, implementation-independent way The JVMCI and Graal compiler parts have been integrated into the JDK since JDK9. JDK9 and 10 contain more or less outdated version of those components.
/thread
JVM will use as much heap as you give it. So if you -Xmx it to lesser amount like 1G, what happens? If it’s actually not enough, you can make memory snapshots and inspect them with something like yourkit or visualvm to check who’s hogging the memory. Usual suspects are complex plugins like JavaScript editor. From personal experience, I noticed no difference between oxygen and photon for my use cases. 
To expand on other comments, you only need to pay 25 USD/month/CPU if you want support from Oracle. Otherwise you can just use OpenJDK for free. OpenJDK should be identical to the Oracle JDK, but without the support. Given that you haven't been paying Oracle for support you'll probably fine with OpenJDK. The only thing to worry about is security updates will probably stop for OpenJDK after six months, so you will probably want to upgrade more frequently. AdoptJDK is promising to provide longer term support, but they're an unknown quantity right now.
Interesting, I'll try these options tonight. I dont know if I can blame the javascript as I mostly edit front end outside of eclipse nowadays (I just find the eclipse editor really lackluster compared to others for other languages) and keep it just for Java (it's the only one I could settle with)
Oh ok awesome, thank you for the clarification!
'you know Spring is almost as old as Java EE is' And? But the gap between java ee and spring was f^ckin huge. And it's still exists. Only if your are totally ignorant person you might think that java ee can today compare with spring. Spring is for now leading because is continuously developed through all that years. 'server side rendering is FASTER' WOW 21st centaury its faster on windows Xp with 1gb ram. But why then major financial [bank] institutes in central Europe rewrite their architecture from EJB, JavaEE [all that heavy bullshit websphare] to Spring+ddd+cqrs+hexagonal+spa ? There is tons of benefits behind that 'new' concept. Read more about new architectural styles in software development and tools to make it work stable and reliable through the years without huge technical debt like for now is JavaEE unmaintainable in my opinion. Maybe i'm kind of 'not typical javaee developer' becouse i started my engineer career on startup market, not in huge financial soft. But now a lot of software architects comes to as to ask how to make stable modern maintainable application. Startup market is super awesome cause you can make experiments with software architecture, test new staf and ideas AND see benefits to choose the best one. For now spring boot is leading and will be leading in future in my and my colleges opinion. 
I've 16GB but sometimes manage to run out of it. The Max/Min ratio are indeed releasing memory, but not very often. One can trigger it with gc in visualvm, but that isn't very practical. If Eclipse calls System.gc() periodically, that would maybe help.
And what about the 6 monthly releases? I am not familiar with Spring support, can we expect Spring to follow the OpenJDK releases and adopt new versions relatively in time? I wouldnt imagine.
Anything Graal-related remains completely theoretical while it can't even perform its basic component installation functions without crashing on vanilla Ubuntu 18.04.
Contact the websites you use that require Java applets. **They** should have a plan to do something else soon. Oracle won't help you here, they can't.
That's not the only question here I believe. To put it into tech practical terms: I believe we also need to figure out how fast will the most popular frameworks will adap to openjdk. So for instance I want to build an application on Spring but not intending to pay, and taking into consideration how slowly spring has been adapting to new JDKs as for now, this also raises some questions if they are going to be able to adapt to these 6 month releases. in case you have any inside info or experience about this I would really appreciate if you would answer thanks
Would you be so kind and report the problem you are having? I don't think we know about it yet. [https://github.com/oracle/graal/issues](https://github.com/oracle/graal/issues) Thanks!
Yup. I know it's coming, it's just not fully there now. Looking forward to it!
&gt;Only if your are totally ignorant person you might think that java ee can today compare with spring. Spring is for now leading because is continuously developed through all that years. Yeah, whatever dude, keep on dreaming. &gt;EJB, JavaEE [all that heavy bullshit websphare] to Spring+ddd+cqrs+hexagonal+spa ? Because you're living in 2003 if you think Java EE is about EJB and WebSphere. Newsflash: EJB is all but gone, and WebSphere has been replaced by Liberty, which is much lighter than your frankenstein Spring cobbled together stack. Oh, and using Java EE, with pleasure, and with productivity, for startups! :) 
Scalable in what sense? Would you be able to scale horizontally?
Scalable in taking advantage of more CPUs (vertically) and able to add extra nodes (horizontally).
I'd be interested in seeing a project or two that scaled horizontally.
You can try to run Eclipse with OpenJ9, you can even run your app with OpenJ9 [https://www.eclipse.org/community/eclipse\_newsletter/2018/april/openj9.php](https://www.eclipse.org/community/eclipse_newsletter/2018/april/openj9.php)
OpenJDK is almost identical to OracleJDK, if your apps can run on OracleJDK it should run on OpenJDK. There have been a slow adaption from Java 8 to Java 9 because it is a big release. But after that, everything is smooth, I can update my Spring App from Java 9 to 10 without problem. I think Spring is the last thing you should concern, usually it is the IDE, build tools, plugins that cause the most of troubles (Intellij Lombok took a long time to adapt to Java 10 ) 
Tier 1 supporter of AdoptJDK include IBM and MSFT, among others. And separate from that effort red hat has maintained branches of Java abandoned by Oracle in the past. 
Where can I find spring/Jhipster project?
There are more jhipster projects in wild than we realize. There are plenty of examples on github/gitlab https://github.com/search?p=3&amp;q=jhipster&amp;type=Repositories
https://github.com/oracle/graal/issues/556
I've had the same issue when upgrading at work (a 110 module, 300k LOC multi maven project), but it hogged 8gb of ram (i think i still have screens of this), also the application server RAM usage increased. I tried a lot of things but the best course of action was switching to IntelliJ IDEA. The same project needs 1.6gb ram on intellij and i'm writing/debugging without any hickups (since eclipse would hang from time to time while writing/debugging) I'm not advertising it ofc, but if you have the time and chance give it a go. 
Disclaimer: I work on the Spring team at Pivotal I’m surprised to see the perception that Spring has been adapting slowly to new JDKs. Spring Framework officially supported Java 8 in 4.0.3 which was released on 27 March 2014. That was 9 days after Java 8’s GA. Similarly, Java 9 was supported in Framework 5.0.0 which was released on 28 September 2017, 7 days after Java 9’s GA. Java 10 is already supported in a similar fashion and we also expect support for Java 11 to follow this pattern.
Oh sorry, well that's great news to hear. :) Thank you
But for every feature that replaces Nashorn it *is* already there. So your original comment, that it's not yet a suitable replacement, wasn't really accurate. Again, the only part that's missing from multi-platform is the AOT, which Nashorn never had anyway.
Tl/dr?
File a bug against Eclipse with all the information you have and hopefully someone will be able to investigate with you.
Thanks! You need to skip step 7 if don't have more than 16gb. We should have a better error for this. Graalvm remains useful without all languages in the Polyglot image. 
Somone from Pivotal (the provider of Spring) would need to answer this.
It's pretty much the 2nd edition + a chapter on streams. I was quite let down. 
How much memory do I need free to fully use Graal to the extent its features are advertised?
So as i get it Oracle will only maintain Java 8 for consumers until 31 december 2019, no more major upgrades from them i assume.
Roughly 10Gb should be enough to build the polyglot native image. Note step 7 is an optional installation step. The rebuilding of the polyglot image basically takes all languages and builds a big native-image out of it. This is rebuilding the entire VM with the newly installed languages, so it takes a while and needs a lot of memory. You can do all this steps once on any machine of the same OS. We ship a polyglot native image by default with JS, but if you don't rebuild it with the installed languages then you will not be able to access them from our native language interpreters. You will need to pass in --jvm if you want to run polyglot applications. For running applications with GraalVM it depends on your application. But it can go below 16Mb for a simple js hello world.
Is it so much to ask for a zero-arg toArray (it would have to have a different name than toArray) that uses the collection's type parameter instead of Object? Why must they insist that I either have an argument which is literally always the same every time, or that if I have no argument that I must then cast any objects read from the array? I feel like I'm taking crazy pills over here!!! (I invented the piano key necktie!!! I INVENTED IT!!)
The answer, as always, is probably type erasure.
That's unfortunately not really possible without reverting to serious hacks - terrible idea for common interface.
I think they're doing slight improvements for existing users / customers, I seriously doubt somebody would start with JSF (or any similar framework) without using it already in the company. I done my fair share of JSF 2.x development I am glad it's gone for good :-)
I can recommend reading head first java and making programming challanges (kattis has good ones) or building a game.
But the second edition is about the same relative to the first edition (although I think generics were new...?). If you've studied the second edition the third edition is not very surprising, which takes away from some excitement but also means you don't suddenly have to unlearn a lot. It's certainly worth getting the third edition over the second edition but if you already own the second edition and studied up on java.util.stream there's no need to rush out and buy the third edition.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yeah. After type erasure, the class will have methods with following signatures: * `Object[] toArray()` * `Object[] toArray(Object[])` * `Object[] toArray(IntFunction)` The deeper issue here is that the language has been designed so that Object[] is not a superclass of "array of class". &gt;The supertype relation for array types is not the same as the superclass relation. The direct supertype of Integer[] is Number[] according to §4.10.3, but the direct superclass of Integer[] is Object according to the Class object for Integer[] (§10.8). This does not matter in practice, because Object is also a supertype of all array types. Solving that issue would require a backwards-incompatible change for instances to remember their types at runtime (and tag methods accordingly), so the JVM could infer that you actually want a T or T[] when you call a generic method.
`Path.of` is my favorite API enhancement in JDK 11 ;)
/r/learnjava -&gt; sidebar there
If you really want to learn a language, stop going through blogs and tutorials. Pick a book. "Also, what topics are covered in the Oracle &lt;...&gt; cert...". How lazy are you? [http://www.lmfgtfy.com/?q=Oracle+cert+topics](http://www.lmfgtfy.com/?q=Oracle+cert+topics)
It looks like in your [submission](https://www.reddit.com/r/java/comments/90hfqc/no_longer_able_to_print_document_windows_10_64bit/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
u/desrtfx any news?
Plenty of startups use JSF ;)
&gt;I think people use Java mostly for its ecosystem, not the language per se. From this perspective, only Kotlin is ahead of Java. more like the good features of kotlin will be integrated to java, talk look at java10
 List&lt;? extends Number&gt; list = magicMethod(); var array = list.toArray(); What would be the type of `array`? `Object[]`? `Number[]`? Or maybe even something like `Integer[]`? How can you be sure? And since you *are* sure, answer this: List&lt;? super Number&gt; list = otherMagicMethod(); var array = list.toArray(); What will be your expectation on this type?
A repository direct accessed by a controller (generated or not) leads to CRUD operations as RPC style as a bad practice or anti pattern. Dont do this.
I think a fair middle ground is to create a method which takes the type as an argument. Similar to the toTypedArray method in eclipse collections. https://www.eclipse.org/collections/javadoc/8.0.0/org/eclipse/collections/impl/list/mutable/FastList.html#toTypedArray-java.lang.Class-
It’s the smallest addition considering it’s only two characters less than Paths.get but it’s so satisfying.
Really ? In my experience IDEA was always worse on the resources (not to mention you can open only one project at time). Maybe I'll try the CE editions, but dont have high hopes about it. Their dark theme is nice tho
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Again, the only part that's missing from Windows is the AOT With all due respect, if I can't run use AOT on on Windows for the Java program into which Nashorn is embedded, then Graal is not currently a way forward for Java apps on Windows that use Nashorn. 
How is that the deeper issue at play here and how does it relate to inference?
Interestingly created in electron.
Da fuck? Gradle is great. Just works, less verbose. Seems to download less aswell, I assume it's managing cross dependencies better. It's certainly not bad, I prefer it to maven.
It has been a few years since I used it, so maybe it has gotten better. Maven isn't perfect - I know that I've spent a lot of time over the years learning it, so I'm probably biased compared to a newb. I've been seeing the Spring Framework team using Gradle quite a bit, so maybe it's worth checking out again. On the other hand, there are so many things I want to learn, and so little time . Not sure if learning another build system is worth the effort. 
I agree on the projects part, also downloading and installing maven dependencies is really slow for me, but everything else is really fast and low on the resources. I now use IDEA at work and at home (my personal laptop has 8gb RAM dual core old as f*ck machine). I use professional edition but there should not be a performance drops comparing to CE. Give it one more try, it might be good. Also, what jdk are you using with eclipse? In my experience zulu jdk uses way more ram than opendjk for some reason. The jdk that the IDE uses might also be a source of problems and is worth trying a switch.
I'll give it another try then, but I remember it being a bit slower than eclipse to start, I dont know why. I use the openjdk8 (my personal computer)
What is their to learn, it's simple as.
Oracle became greedy all of a sudden? I don't think that you suddenly become something that you've always been.
Lol
Companies won’t have to pay if they adopt OpenJDK. They only will if they continue to use the Oracle JDK. Commercial features such as Java Flight Recorder have also been open-sourced.
Ah, okay. Did not notice that. Thank you for taking the time to tell me this!
No problem! I suggest watching Mark Reinhold’s talk [Moving Java Forward Faster](https://youtu.be/H48QEcjP1PU). It will give you some more information.
OpenJDK 11 will be the official reference implementation 
My company's seen this coming for some time and started to transition off of Java some time ago. The entire process annoys me yes, but the fact that they're actually doing it is unsurprising.
Transition to what?
Scala. Which, I am trying to like.
uhm? you realize the fee is for the JVM and not java.
Yeah? That's... interesting. Well, seems silly they picked Scala then. I wasn't involved in that decision, and I didn't realize this.
OpenJDK has a few modes for AArch64/ARM64: 1) Zero, interpreted mode, available since forever (?); 2) [AArch64 port](http://openjdk.java.net/projects/aarch64-port/) that includes C1 and C2 compilers contributed by Red Hat in 9 (and shipped in RHEL/Fedora starting from 8); 3) [Unified ARM32/ARM64 port](http://openjdk.java.net/jeps/297) contributed by Oracle in 9. I would guess jdk-8u181-linux-arm64-vfp-hflt is the (3) before it was contributed to open, and OpenJDK10_aarch64_Linux_* is (2).
To me, printTransactions sounds like a method that selects from and prints the entire log of all deposit, withdraw, and fundtransfer rows. I don't know what the 'users' table has anything to do with this. Do they mean cardholders, account ids?
Your transaction table would have a foreign key reference to the uid, as a transaction belongs to a customer. The transaction table would have its own primary key, which could just be an auto incrementing number
This sounds like a homework assignment. How about you propose to US what you think would be right and then ask what we think about it?
Why not? Graal can do everything Nashorn did, therefore it is a suitable replacement. I'm not sure I follow your logic. You weren't using Nashorn for AOT, so why is it insufficient to migrate to Graal before AOT arrives?
Is nobody at your company aware of OpenJDK? And AdoptOpenJDK?
JavaFX is a great framework for that use case but it needs some marketing love. At last JUG meeting people was genuinely convinced that Oracle killed it by popping it out the JDK. 
Just use Zulu from Azul systems instead 
\&gt;As of Java 11, the JavaFX framework is a standalone component. There are 2 different options for developing JavaFX applications: Yeah... no. JavaFX was only ever apart of Oracle JDK by default. OpenJDK never had built in support for JavaFX. Since Oracle JDK no longer exists as of Java 11 nor was OpenJDK the JRE &amp; OpenJDK is now the primary JDK/JRE build, the first statement is a lie. And you can \*still\* create your own OpenJDK with built in JavaFX support if you want, so the second statement is a lie too. I've done it myself on Linux and it's really not hard to do. fake news.
I've written a blog post that summarises all the recent changes and the impact they have, https://www.azul.com/eliminating-java-update-confusion/. That could also be a useful read.
OpenJDK has been the reference implementation of the Java SE standard since Java SE 7. JDK 11 is where functional differences between the Oracle JDK binary and one built just from OpenJDK source will be eliminated.
It's not hard to see why. No native JDK support means that it's just more of a pain to create and distribute JavaFX applications. You now literally have to package a JRE with each application, which on classpath is 200+MB and even with modules is like 80MB(ish). Sure, it's great consistency wise since you no longer have to test on every JRE released after the version you target(AKA developed on 8, need to to test 9+) but christ, the hard drives of anyone who uses lots of JavaFX applications are going to be begging for mercy. Handing the reigns to the open source community is at best a gamble and at worst a death sentence. You only need to look at the current sad state of Netbeans to see that. I think.
There are a lot of misconceptions. If you use Linux in production, there's a good chance you're already running OpenJDK. The main thing that changes is that you need to either get on board of the release train and keep up with the latest releaese or pay someone, Oracle or Azul or someone else for updates to your older version. Adopt JDK is an attempt to make this support free again, but it's unclear who is going to fux bugs in older versions.
Application size is not an issue in JavaFX use cases. Certainly it is if you mind about not business, not corporate, desktop (or mobile) end user but that it is not where JFX is used typically. JavaFx was 'open source' way before the popping out from JDK but I agree it is a gamble. You cite NetBeans as failure case but success stories exists, just to limit on IDEs. Look for Eclipse. The CDT has literally hundreds of modules, applications and supporting companies around the world. I think the chance to see improvements in JFX library without waiting for JDK releases worth the shot. Also, I am eagerly waiting to see some crazy guys create toolchain to target WASM from JFX.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;If that status will be red... What if it doesn't (that will be more probable becuase of how strong Java cares about backwards compatiblity)? You only need to QA that thing just to be sure and you are done.
I disagree. For a lot of cases it is a simple and good solution. You don't use patterns because you have to. You use them to solve a problem.
&gt; You now literally have to package a JRE with each application Not necessarily. Your packaged JRE could be shared with multiple apps. And it's the 21st century and we have terabyte hard drives. Just for fun I checked my Windoze program files and shit even notepad++ was 10 meg. Most of the applications are in the range of 20 to 80 meg - and those are mostly c++.
I can't understand how the reaction to Oracle open-sourcing most of the commercial features of the JDK and starting to offer fully-functional, open-source, GPL-licensed, binary builds be "look at how greedy Oracle is"
Also Scala hangs by the hair. See [The Last Hope](https://www.youtube.com/watch?v=v8IQ-X2HkGE).
\&gt;Look for Eclipse. The CDT has literally hundreds of modules, applications and supporting companies around the world. It isn't simple being Open Source that's the issue but a large company that had previously been the driving force behind a project suddenly leaving or having much less of a presence in the project that's the issue. Netbeans was kind of just aborted like an unwanted child all of a sudden and "donated" to Apache. \&gt;I think the chance to see improvements in JFX library without waiting for JDK releases worth the shot. I keep hearing that but it's kinda hard to believe. As far as I've seen in my compiled from source Java 11 and JFX11 build, there is not a single major improvement from 9 to 11 besides modules. They've actually broke mouse transparency on Linux since jFX10.
\&gt;Your packaged JRE could be shared with multiple apps. I demand to know of this black magic that you speak of. How do I perform it? \&gt;And it's the 21st century and we have terabyte hard drives. Just for fun I checked my Windoze program files and shit even notepad++ was 10 meg. Most of the applications are in the range of 20 to 80 meg - and those are mostly c++. Just because you \*can\* use all of the disk space, memory, and CPU threads doesn't mean you should. I want disk space, memory, and CPU for my *cat* picture collection you know!
What are the advantages of JFX over Electron then? Both are resource heavy, JFX apps take more time to start and Electron has surely a bigger community around it not to mention the ease of porting an Electron app to web or mobile.
it's written for / from azul though...
Why does it need to be packaged? Isn't JavaFX effectively just another Maven dependency? 
Electron is giant and you still need an installer. With Java you can build an unzip-and-run application. And it starts up much faster than Electron. And you can write in a real language with some type safety with all the nice refactoring tools. 
batch file -&gt; SET JAVA_HOME = MY APP FOLDER..... if you have many apps you can put them all in the same folder... etc... etc... etc...
RedHat sells linux too, it'ss mostly the same model, isn't it?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Electron is giant Just as big as JFX with Java &gt; and you still need an installer. Not really, you can as well bundle the whole app in a portable zip. &gt; And it starts up much faster than Electron. I have completely different experiences. &gt; And you can write in a real language This is so biased and opinion-based... &gt; with some type safety with all the nice refactoring tools. There are fully typed languages that can be easily compiled to JS. They also have the very same devtools provided by major IDEs as Java. Also, on the contrary to JFX, with Electron you get the whole standard HTML/CSS ecosystem that's used almost everywhere now, unlike the FXML and JFX CSS crutch.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes. If you but RHEL you're pretty much buying commercial support. You could use CentOS instead, as it's pretty much just RHEL without branding or commercial support.
Did you really just suggest I change and potentially break a users Java install just for my application? I really hope your not a Java developer, that's horrible. Minecraft Java doesn't even work on 9+. You really think that's a good idea? Come on now.. .
&gt;There are cases where document databases are indicated, but the vast majority of cases will have independent relational data. Also, some relational databases, like postgres, have a document column format, so you can have both. I see. Thanks for the info!
Is the support the same for openjdk 11? I think I read it's just 6 months and then you'd have to adobt jdk 12?
Oracle is continously tuning their JVM which requires capital. I for one support Oracle making a profit.
That's right. OpenJDK will only receive security updates from oracle for 6 months for each release. After that time, the community will have to port the updates themselves. If you don't pay oracle, you'll have to rely on that.
I really wish blog posts like this would mention the actual numbers they think were their scaling challenges. &gt; What happens when you’ve reached a level of requests per second where your database can’t keep up anymore? How many requests per second? How complex were the queries? &gt; To give you an idea about scale, our production systems usually contain 256 shards. Ok We can make 1000 shards if we want why were 256 needed? What tech challenge led to this. 1.5 million "registered" users doesn't sound like a whole lot. How many are active users? How many are active daily? How many requests does a user make on average per session / day? Without a whole lot of detail, it seems like a well-designed SQL database could easily support this load maybe you would want some read replicas / caching but that's about it. Giving real numbers and response times would help justify decisions made.
Sorry, must have overlooked the messages. I think, we should try an approach with "approved surveys". Anybody with a legitimate survey should contact us moderators and we check the quality/legitimacy and then approve the survey - maybe by assigning an "approved survey" flair to the post. Should be not too difficult for us moderators to handle this. Would this be an acceptable approach?
Out of curiosity, what kinds of things did you miss in the C# ecosystem when compared with Java's?
Out of curiosity, what kinds of things did you miss in the C# ecosystem when compared with Java's?
How did you unit test against that, since it is strictly an implementation detail issue that affects memory usage?
Sounds great to me! Thanks for responding! If you need help determining which surveys are “worthy”, let me know. I’d be more than happy to help.
its crazy..... wtf!!!
When will people stop spreading the fake news that is “Java is not free”? You are welcome to pay Oracle for paid LTS version of the JVM. Or, you could just use the reference implementation that is OpenJDK. When you start realizing that Oracle, just like any business entity, tries to make money out of an open source offering, you have more rational response to its choice. Would you get mad at Redhat charging Linux? Or GitHub charges private git repos? It’s fear that creates this delusional conclusion that Java is no longer free and heralds a bunch of irrational responses to migrate away from it. Albeit, as someone comments in this thread, moving to Scala is an example of such irrational response to fear and fake news.
Do some pullrequest and add module-info for the dependencies would be the best option I guess. Or do it with maven or Gradle and add it in one of the phases. Jars are just zip files so I guess you could add the .class file if you know how to do it for each dependency. Just compile the module-info.java to a class file and add it. 
Oh, I didn’t realize that I could use another JDK I am such a noob at Java (I started learning it last week) that I completely overlooked the obvious. I know that companies need money to survive, but charging companies for a subscription when they already bought the entire package seems a bit unfair to me, in my opinion.
Access denied on my end.
404 but try [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
&gt; Do some pullrequest and add module-info for the dependencies would be the best option I guess. Not really an option as some of these dependencies might have dependencies that haven't been updated for years. Also doing this for all dependencies and waiting for results could take a year or so. This is not futureproof either for any new dependency, I might add later, again breaking my build... Also I think you can't add this module-info file to pre java 9 libraries. &gt; Or do it with maven or Gradle and add it in one of the phases. This is basically what I'm looking for, any idea how to do it? &gt; Jars are just zip files so I guess you could add the .class file if you know how to do it for each dependency. this is pain in the ass, I don't really want to manage all the jars separately. This also requires me to do more work when I add another dependency. Is jlink really that difficult to use in real scenario? Yeah, those hello world programs are really easy to get to work, but any bigger project with legacy jars and all hell breaks loose? 
Wrong. Support for modules requires a file structure change from classpath. No idea if any ides supports converting despite it being easy to do manually on small projects.
You can use the old javafx packager if using classpath in Java 10. Otherwise yeah, you're at their mercy and they probably won't because Java 9+ breaks and removes things. Code compiled in Java 9+ cannot run on older jvms without source being set.
The oracle pages are down/change relatively often, unfortunately. Makes it very annoying for people attempting to distribute the jdk as a ppa/rpm package, unfortunately. Because of the licensing the packages just run scripts which download and install from oracle, but with how often oracle changes the actual links the ppa/rpm owner (ex webupd8 team) need to constantly republish packages.
Take a look at moditect https://github.com/moditect/moditect - there is even a maven plugin which can be used to add module info to dependencies. It basically injects the missing module info into the needed jars. I highly recommend watching this video which introduces this method. https://youtu.be/BhuOSGrNBek
&gt; Just as big as JFX with Java Nope electron 120 meg minimum. JavaFX - around 40. So learn math. &gt; Also, on the contrary to JFX, with Electron you get the whole standard HTML/CSS ecosystem that's used almost everywhere now, unlike the FXML and JFX CSS crutch. Why would i want to use bloated HTML garbage on the the client? FXML and FX CSS are smaller and more precise. Not to mention memory usage of an electron app is atrocious. 
You can set an env variable which is not global you know. Clown. 
Thank you. Will do.
Literally every application would have to be started by a different batch file corresponding to whatever app it starts unless you use Swing or command line to provide a menu. How more hacky and ugly can you even get? Literally another layer of complexity. The very idea is just idiotic. Oh, and just FYI you wouldn't even need to use batch files. Java can do literally the same thing, albeit with a much higher memory overhead.
I don't use Maven, only Ant in Netbeans but it can be used as a module library all the same I assume. I have actually tested adding the modules to a library and it works great(I can't remember if the docs worked right though). It's just that, if you're constantly downloading 200MB+(classpath, I think its more like 280MB on Linux) or 80MBish(module) JavaFX programs over and over again as apposed to having built in support, you are taking less space of the user's hard drive. As a developer, just eating up system resources like disk space, memory, cpu, etc for no reason is just irresponsible. It's like not fixing a memory leak in your program because most users have like 8GB+ of memory these days. Built in might also be lighter file size wise as you can decide if you want webkit or not. I don't know if the modules do currently or not... IMO, developers should in these kind of situations give users the choice to use whatever works best for them. Unfortunately in the case of modules and because of Ant 1.9.7 in Arch, I haven't ever been able to launch a modular JavaFX application without being bundled. As a small bonus, you don't need to import a library or add a dependency every JavaFX project.
404'd
Well, that sucks. Guess I just gotta wait until it's back up to continue development.
WebEngine has a [loadContent](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/web/WebEngine.html#loadContent-java.lang.String-) method that takes a string. All you have to do is read the HTML as a string, remove the parts you don't want, and then pass it to the method.
This is kind of a long-shot, but can you check if the extra memory is on the heap or native? (using VisualVM or other JVM profiler/monitor)? I'm not using Eclipse and haven't been following its development, but I seem to recall a discussion a while back about migrating some UI featuresin Eclipse to JavaFX. If something like this did happen, and considering you are using Ubuntu 16.04 you may be seeing the effects of a bug in older versions of Mesa (which JavaFX somehow seems to be the only thing triggering it). If there is no JavaFX used in Eclipse, or if all memory is accounted for in the JVM heap then I'm completely off and you can safely ignore my ramblings :D 
Interesting, when I tried visualvm the heap size is 1gb but the heap used was just something around 500-600 mb. How is can I check If this might be the case ? Do you remember the mesa versions ? How do I check is theres JavaFX in my eclipse ? Mesa version here is 18.0.5
If you are affected by this bug then most of the memory would be outside the heap, i.e. - the heap size would be 1G but the total memory reported by the OS would be 2, 3 or even 8G. I think it was fixed in mesa 13.0.4, so perhaps its a red herring after all. 
Your dependencies should not need a module-info.java, only your project. The 3rd party libraries automatically become modular ([automatic module](https://www.logicbig.com/tutorials/core-java-tutorial/modules/unnamed-modules.html)). This module has the same name as the jar name (extension is dropped, hyphens '-', if any, are replaced by dots '.' and version part, if any, is also dropped. The automatic module name could also be reserved in the manifest). You can then 'require' it in your module-info.java Also this might be interesting for you: https://github.com/update4j/update4j
jlink doesn't allow automatic modules.
This is almost what I was looking for. Although it still requires me to write some logic manually to pom.xml about every dependency, it seems to otherwise work reasonably. Thanks!
Don't get it. This is for Java developer but build with electron. Why? 
[oh damn](https://bugs.openjdk.java.net/browse/JDK-8130047)
It looks like in your [submission](https://www.reddit.com/r/java/comments/90wk5y/spring_rest_business_logic/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
OpenJDK time?
When I was first looking at jlink for non-modular apps, I was just listing the set of modules needed on the command-line using --add-modules, then testing the app to see what broke. Invocation was done through the "Java" command that was present in the jlink bundle. So long as your upstream dependencies don't use any of the jettisoned APIs, you should be good to go.
ModiTect author here; came to suggest exactly that, but you beat me to it. Happy to discuss any questions, feature requests or other feedback. One thing to keep in mind is that some Java APIs behave differently when being invoked from within a named module (which legacy JARs will be once patched via ModiTect). This might cause problems in some cases; also ModiTect can't help if there are split packages involved. But I found it to work nicely for my experiments with Vert.x, Undertow etc.
That's true; you still can create modular runtime images with jlink though and keep your legacy JARs on the classpath. This might be an interesting alternative if some dependencies can't be converted into modules with something like ModiTect (disclaimer: I'm its author), e.g. due to split packages. In fact I'm thinking about adding support for creating runtime images with dependencies on the classpath into ModiTect.
Also see the AdoptOpenJDK API diff generator, which publishes a report with all the JDK 11 changes: https://github.com/AdoptOpenJDK/jdk-api-diff. There are quite some useful changes in 11, but also lots of removals.
Yes, it's posted on the Azul website, who I work for. I mention Zulu as a free (and commercial) alternative to the Oracle JDK binary but I also mention AdoptOpenJDK as another. As a Java Champion, I have tried to write this in as neutral a way as possible covering all the facts. Sorry if you doubt my sincerity.
Any change you can make it somehow automatically generate the module-info for jars, without needing to manually specify what it exports and requires? While trying to get this work, I realized that doing this manually for 10+ unknown jars, I really don't have any clue what jdk modules they require or even how they interact with each other, maybe it's possible to detect it somehow? Also, I ran into issue, but it doesn't really tell me what goes wrong: Caused by: java.lang.RuntimeException: Execution of jlink failed at org.moditect.internal.command.ProcessExecutor.run(ProcessExecutor.java:68) at org.moditect.commands.CreateRuntimeImage.runJlink(CreateRuntimeImage.java:108) at org.moditect.commands.CreateRuntimeImage.run(CreateRuntimeImage.java:66) at org.moditect.mavenplugin.image.CreateRuntimeImageMojo.execute(CreateRuntimeImageMojo.java:110) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
How does it compare to StringCache?
Lmao
Finally, an article that explains it well. Thanks.
So far I still got better result with ParallelGC for memory constrained server apps. Although I haven't spent great deal of time trying to tune G1GC 
Are you measuring throughput or something like 99th percentile latencies? ParallelGC is likely going to have better throughput than G1 on most applications, while G1 should be better at reducing worst-case latencies (even moreso with enhancements in JDK 10 to have G1 do full GC in parallel). YMMV, though: G1 may require slightly more max heap to perform optimally, so if you're really memory constrained (less than 256Mb heap or such) ParGC can still come out ahead.
That article lacks some important information, namely the price that is paid. 20% memory reduction does not sound too dramatic. It is necessary to know the CPU and runtime overhead that String deduplication imposes - and potential other effects it has. Plus, this benchmark is very artificial. For a typical server application allocation patterns are much different and you also want the reduction effect to be there for longer periods of time. It may well be that there are duplicate strings - but spread out over time so no deduplication can happen, but the overhead is still paid. I just note: where do the 20% come from? Is this mentioned in the article?
Should have made that more clear. throughput and ability to work with given heap size at all. The last app I had to change was spring boot app that's constantly hit with many requests, the app allocates like 2 GB of heap a second, often hits GC every few seconds and runs with around 16 GB of heap. Parallel GC works quite nicely there, G1GC was having trouble to keeping the app running at all, I had to tune max time spent in GC, but it was still causing issues. So I reverted back to ParallelGC which works nice there without much need for tuning. But it's pretty specific case I guess.
Glad you've found something that works for you! This could be a case where the concurrent and mixed GCs in G1 aren't able to keep up with allocation pressure, in which case G1 would be falling back to doing full GCs - using one thread(!). There are some ways to tune to avoid this, but it's been one of the main concerns with G1 prior to JDK 10. If anyone is interested in reading about some of the improvements to GC since JDK 8, Thomas Schatzl did a very nice write-up recently: [http://mail.openjdk.java.net/pipermail/hotspot-gc-use/2018-June/002759.html](http://mail.openjdk.java.net/pipermail/hotspot-gc-use/2018-June/002759.html)
Yeah, I use stringdeduplication on an application that uses alot of strings and takes about 12 GB RAM, with big variation of what the customer users do it is a bit difficult to know exactly the gain and cost from it though.
It would be best to avoid jlink until the 3rd party packages are modularized. In the meantime you can use [javapackager ](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javapackager.html)from the *JDK/bin* directory (Java 8+). It can be run on a set of JARs to create either an MSI or EXE Windows Installer package that includes the JRE. Example syntax: javapackager -deploy -native msi -srcdir &lt;Directory containing JARs&gt; -appclass &lt;Main class&gt; -BmainJar=&lt;Jar containing main class&gt; -Bclasspath=&lt;Colon separated list of JARs&gt; Javapackager supersets jlink in that it calls jlink internally (in Java 9+) and is additionally able to create an installation package. For an MSI, [WiX 3.11.1](http://wixtoolset.org/releases/) needs to be installed as a prerequisite, whereas for an EXE, [Inno Setup 5.6.1](http://www.jrsoftware.org/isdl.php) is required. Once some of the JARs are modularised, they can be added to the javapackager module path.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
cgi-js
We use string deduplication in BI server that caches a ton of data as strings (we load full OLAP hierarchies for faster access). Enabling string deduplication reduces memory usage by about 15% but adds about 5% to the load time. Since our data is mostly load-once, use-forever we don't have suffer from GC issues as much as some people mention.
Good to start with Java for beginner.
Beware std::string result; const char * res = result.c_str(); return res; As you return `res` from this function, the `result` string is going to be destructed, therefore `res` is going to be pointed do a deallocated memory region. You could change the method to return directly `std::string`. Use move semantics for C++11 or newer. return std::move(result); Sorry for nitpicking, but this could cause crashes if someone runs your example directly.
111 upvotes and no comment, what's wrong with this ?
&gt; Any change you can make it somehow automatically generate the module-info for jars That's what it is doing when specifying `&lt;moduleInfo&gt;`, the only mandatory thing is the module name in this case: &lt;moduleInfo&gt; &lt;name&gt;com.example.core&lt;/name&gt; &lt;/moduleInfo&gt; It will try and derive exports and requires statements then. If needed, you can amend/override those like so: &lt;exports&gt; !com.example.core.internal*; *; &lt;/exports&gt; &lt;requires&gt; static com.some.optional.dependency; !com.excluded.dependency; *; &lt;/requires&gt; Rules are processed from top to bottom, stopping after the first one matching. I.e. anything within the internal package won't be exported ("!"), and any other packages will be exported. For the `com.some.optional.dependency` dependence, the optional modifier is added, `com.excluded.dependency` is going to be not added and any other dependences detected automatically will be added. &gt; Caused by: java.lang.RuntimeException: Execution of jlink failed Can you try and add the -X and -e options? This should provide some more context. Otherwise, can you open an issue with a minimum pom.xml for reproducing this? Thanks! 
That might be a protobuf version 2 only problem, version 3 says all primitives are non-nullable / default to their zero value.
/r/javahelp or /r/javafx may yield better results. 
Don't std::move the result as it conflicts with RVO. Also, if copy elision fails, the compiler will itself attempt to std::move the result. https://en.cppreference.com/w/cpp/language/copy_elision
Thanks for pointing this out. However, as I understand, the compilers are not required to perform the return value optimization. &gt; Under the following circumstances, the compilers are permitted, but not required to omit the copy- and move- (since C++11)construction of class objects I'd rather move the result expicitly, as it is more readable, and the compiler will probably figure out the optimization in this case as well.
The optimization is required to be implemented by all compilers since C++17 :) I think clang even generates a warning for it nowadays.
People look at it - go "cool" and move on I guess. ;)
I don't know about how professionals work right now, but I haven't used Swing for years and even my uni switched JavaFX this semester.
Yes because more software is already written with Swing, but it's slowly phasing out. Now that said it's hard to know if JavaFX is phasing in on the other side or is just barely surviving.
Thank you! Didn't know you can just skip the exports and requires section and it will handle it. I will try to get you some context for the exception when I'll get home.
Yes swing is used more than javafx. The whole desktop GUI application market is declining so it's hard to tell how well javafx is doing. Also some pretty competitive javascript frameworks are out there. Most of the language development(money) focus on backend/microservices where java really shines right now thanks to swing and ofc the whole android ecosystem is java based. Neither care or use any swing or javafx.
What about 8u181 — does it include 8u172? Or only 8u171?
This is purely anecdotal but anytime I need a UI as part of my Java app I use Swing. Could be I'm just an old curmudgeon stuck in my ways, but I've tried using JavaFX and it just doesn't feel right to me. Having to use a combination of code and CSS in a desktop application to get the UI looking the way I want it as opposed to just setting fonts, colors and using layout managers in code or having to use a scene manager model when simple widget containers works just seems unnecessary. I get the promise of JavaFX, being able to externalize the look and feel of the app, but I guess I've not had a need yet to have that capability so sticking with Swing is easier.
Also enterprise applications are often still stuck somewhere between upgrading beyond Java 8 and finding the right solution to getting shipped with the required Java infrastructure that roughly equals to "just install the JRE" (so administration can avoid multiple, possibly outdated copies on the same machine), so Swing finds its use as a stopgap solution for new apps there.
Depends on your definition of "used". I'm guessing more projects started in the past 2-3 years used JavaFX than Swing, although the amount of desktop GUI projects has been declining rapidly in recent years. If you are including all actively-developed projects I'm guessing Swing still vastly overshadows JavaFX, as it has a long history and many projects written in Java are long lived...
Honestly, the vast majority of projects are web based an done use swing or javafx. The few that aren't tend to use whatever the developer is familiar with, which in this case tends to be swing. 
Ditto. My company has projects that are now five to seven years old, and contrary to what the kid downthread seems to think, *none* of them are web based. Nor should they be -- given what they do, being web based would not only defeat the purpose, but in a few cases would be illegal. So, they're not moving to JS frameworks, they're not moving to Electron, they're not moving to the cloud. They're desktop programs for damn good reasons. A couple of them might benefit from moving from Swing to JavaFX, but only because they do some HTML display and Swing's support for HTML and CSS is mostly shit. If we ever want to render some text more visually appealing than a bullet list, we'll want something approximating HTML 5. (The corresponding Swing classes' javadocs still say that "this might be updated to newer versions in the future," the lying fucks. They've never once updated their support.)
&gt; The whole desktop GUI application market is declining so it's hard to tell how well javafx is doing. Why do you say this?
Tablets and phones
Then why are you using it?
IMHO, based from my experience with Spring Boot and SDR, if your future service might have any of business logic, even simple, you should not use SDR. SDR is perfectly suits case when you only need basic control of entities(think CRUD). With the case of yours, i would start with spring web, rest controllers and use JSON representation as your views. 
&gt; "noise in the background" is gong to affect productivity or something like that. In the best case scenario it will have no effect at all. Best of the best, it will be like it's not even there. So, since the effort to set it up (and then completely never touch it again) was greater than zero, and the best ROI one can hope for is zero =&gt; well now, that's a waste of time. But if one actually spends time to unfuck it every time it gets fucked, well now ... good luck.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Because it’s true. 
Web apps and phone apps are used instead. Even for gui apps, electron is quickly expanding.
You can read this: https://jaxenter.com/javafx-separate-module-jdk-142253.html
There is a misconception that "desktop is declining". No, it's just that phones/tablets have exploded onto the market heavily in the last 10 years and required that type of application development and tech stack to develop on. PC, or desktops are still very much in demand and use. Desktop apps are just as relevant as they were. However, we've added a mobile ecosystem to our industry that tends to overshadow desktop development. It is neither **replacing** it, nor made it **obsolete**. More supplementing it. In some areas, phones/tablets/mobile make sense where obviously desktops do not. And vice versa.
Why not use Oracle Java?
So, if I understand this correctly, in Java 11 (to be released later this year) JavaFX will be a separate module we can use with our dependency managers?
Because I don't want to restrict my future users. Also, with the new release schedule it seems that Oracle Java is aimed at commercial use and OpenJDK is more fit for open source.
No, desktop apps are not as relevant as they were. It's not mobile that should be replacing it but the web applications. There are just few applications where I would not want to use web alternative - IDE, games and that's it for me.
yes though i'm not sure if it will be a multiplatform jar like zstd-jni or you will have to create versions of your app for every os. hopefully the former and not the latter, but that might make the jar too heavyweight :/
JavaFX also for many application isn't in direct competition. JavaFX only makes sense when your application from the ground up is a GUI application. If you for instance want to embed a simple debugging window in your Spring application for development, like HyperSQL console, you either cannot do this with JavaFX or it becomes very hard. Swing on the other hand can very easily be embedded, started and stopped.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/918ame/circular_dependency_list_item/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why not use Docker to manage this?
oh, you are a life-saver. I somehow completely missed that I'm able to jlink a runtime image without including my project, as long as it contains what it uses. ModiTect still comes in handy here, by generating it for me.
tried the automatic generation on a single dependency, but got another error: failed: duplicate element: lwjgl.platform &lt;execution&gt; &lt;id&gt;add-module-infos&lt;/id&gt; &lt;phase&gt;generate-resources&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;add-module-info&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;outputDirectory&gt;${moditect.target}&lt;/outputDirectory&gt; &lt;modules&gt; &lt;module&gt; &lt;artifact&gt; &lt;groupId&gt;com.badlogicgames.gdx&lt;/groupId&gt; &lt;artifactId&gt;gdx-backend-lwjgl&lt;/artifactId&gt; &lt;version&gt;1.9.8&lt;/version&gt; &lt;/artifact&gt; &lt;moduleInfo&gt; &lt;name&gt;gdx.backend.lwjgl&lt;/name&gt; &lt;/moduleInfo&gt; &lt;/module&gt; &lt;/modules&gt; &lt;/configuration&gt; &lt;/execution&gt; Not sure what I'm doing wrong here. I'm currently going to ditch this converting idea altogether, it's too painful to setup and maintain, and just use jlinking capability from modiTect, by specifying the required java modules manually and then having jars on classpath.
It's OS-specific JARs https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.openjfx%22
Because publishing a Docker image just to have a GUI seems like an overkill? Plus my application is going to need some user-provided paths and using Docker means I'll need to mount external stuff as internal volumes making the path configuration more complex than it has to be. I hoped to be able to simply release a fat jar with all the dependencies and users will just need the JRE. With JavaFX I though I'd had to require that they also install the JavaFX package and wanted to avoid it, and so I was suggested to make them install the commercial JRE, and then to use Docker, and I guess the next reply will suggest I install it on a server and ship the server to them? (even though the whole point is to have GUI...) I think I'll just stick to Swing...
 Can you specify in more details what you are exactly meaning by "use JSON represenation as your views"? So I should only return Json to my client, and I would have Rest controllers, services, DAO like Spring MVC? 
Maybe the closest alternative is Dynamic Jasper: [http://dynamicjasper.com](http://dynamicjasper.com) It's still alive, but is described as worse than DynamicReports in this old discussion: [https://stackoverflow.com/questions/4956841/dynamicreports-vs-dynamicjasper](https://stackoverflow.com/questions/4956841/dynamicreports-vs-dynamicjasper) Can you share your opinion about it?
While not exactly the same, pdflib is fantastic, and pdfbox is passable.
Current company and last company are using swing extensively and haven’t thought of moving to java FX. If at all we’ll go web based GUI.
Which of the *vast majority of projects* use **Java**?
You should be loading the package using a build tool like Maven or Gradle. From then, you can simply look up how to build a "fat jar" containing all your dependencies. A quick example could look like : [https://www.mkyong.com/maven/create-a-fat-jar-file-maven-assembly-plugin/](https://www.mkyong.com/maven/create-a-fat-jar-file-maven-assembly-plugin/)
Fat jars are incompatible with the module system
&gt;So I should only return Json to my client, and I would have Rest controllers, services, DAO like Spring MVC? Basically, yes. With this approach you may have clients of any kind: Android, iOS, React/Vue/Angular/AnyJsTrendyFramework, etc and all of them would work with JSON that your @RestController would return as response. As of tutorials/guides, [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/) must be a good starting point 
This is precisely how it should be, and apparently will be from Java 11, but apparently JavaFX is not something you can install as dependency with Maven/Gradle/Ivy but a separate package you need to install by yourself (or with the OS' package manager)
Well you didn’t specify the exact user requirements initially so it’s hard to second guess what your needs are. Does the gui have to be written in Java? 
&gt;No, desktop apps are not as relevant as they were. It's not mobile that should be replacing it but the web applications. I said *"In some areas, phones/tablets/mobile make sense where obviously desktops do not."* which is precisely the case. Cue in "web applications" where appropriate as well, sure, and we'll complete my original thought. Web applications bring their own set of problems. Nevermind the haze of incompatible front-end frameworks and usually a monthly "cost" to a web application. Slower performing, be it a browser or container like Electron, is also a real concern. &gt;There are just few applications where I would not want to use web alternative - IDE, games and that's it for me. Adding to that, I can't see graphics design, sound or video editing, 3D animation or any program that requires proper responsive UX and horsepower outside a traditional desktop. At least "yet". If your desktop app is connected to a "cloud" environment, then you have the best of both worlds, in a way. Without the restriction of a browser or container. But this is a non-argument really. Wherever appropriate, is where an application should live - web, mobile or desktop. But the desktop isn't going anywhere.
I'm having second thoughts if the application itself needs to be written in Java...
&gt; Any change you can make it somehow automatically generate the module-info for jars, without needing to manually specify what it exports and requires? * Maven can't exactly do that for you: https://www.sitepoint.com/maven-cannot-generate-module-declaration/ * There's the jdeps tool from the JDK: https://docs.oracle.com/javase/9/tools/jdeps.htm#JSWOR690 jdeps --module-path modules --generate-module-info out &lt;dependency&gt;.jar 
What exactly are you building (without going into too precise details)? A desktop application intended for what users? Just pick whatever language does the trick, and covers as many different user requirements as possible. IMO not many use desktop applications these days (OK, that's a bit simplistic yet I hope you catch my drift). 
Yes, but at least people can share their thoughts there and everyone can make up their own mind about it. It’s like people who write books and share their thoughts; it’s not maybe the absolute truth, but maybe someone will resonate with it and that’s already a good thing. It’s just a platform for sharing ideas related to a specific field. What’s so bad about it?
In JavaFX you can set fonts and layout and what not in code aswell. 
The [snapshot for JavaFX 11](http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-July/022088.html) was created already: &lt;dependency&gt; &lt;groupId&gt;org.openjfx&lt;/groupId&gt; &lt;artifactId&gt;javafx.controls&lt;/artifactId&gt; &lt;version&gt;11.0.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; The release version should be ready for Java 11.
I remember using Thymeleaf, but it was a long time ago
And new projects that use desktop UI in java is quite rare these days. 99% would use web frontend and Java backend.
And new projects that use desktop UI in java is quite rare these days. 99% would use web frontend and Java backend.
I'm building this: https://github.com/idanarye/nisui. I haven't written the readme yet, but basically it's a tool for running computer simulations and collecting their results - for some reason I couln't find a tool that does it, so I decided to write my own. I picked Java because the simulation I wanted to run was in Java, so I figured the interop would be easy. Right now I have most of the features I want for the initial release working in CLI, and I want to write a simple GUI for them: 1. Edit the "data points" - how to set the experiment variables and how many times to run each configuration of them. 2. A "RUN" screen that shows the progress, with a slider for picking how many threads to use. 3. 2D and 3D plotting of the accumulated data. 4. A screen for managing saved plot formulas. This is actually the only feature I don't have in CLI yet. 5. Dump to CSV. This should be simple to add, and useful if you want to use a better tool for plotting your data. I can probably do it with Swing, I just thought I may want to give JavaFX a try...
Might still be true given JSP, J2EE and so on 
Because knowledge that is shared is not necessarily good knowledge. Take for example and Youtube comment section, or even many posts on reddit. When knowledge is in actuality misinformation, it can be actively destructive. If a whole bunch of people were telling you to drink a homeopathic tea to fight a malignant tumor, there could be dire consequences. Similarly, if a whole bunch of people encouraged someone to talk about suicide in a discord channel, maybe that would foster suicide ideation and make an individual more likely to do the deed then say if that person had utilized known medical channels to get a trained doctors medical opinion. Do you understand my skeptical perspective better?
I suppose it's usefulness is very circumstantial. The MVC aspect is a great thing when working with designers, but for a typical business application, JFX is total overkill. I don't really find it all that intuitive to use either. That being said it's been a while since I've used Java. 
I'm just asking because *web-based* generally implies that it isn't Java.
What's the reason? I would think that "strip all the module info, jam all classfiles into a single jar, ignore duplicates, let the end user run it as the anonymous module" should work in 99% of cases.
The issue with the module system and fat jars is that it doesn't allow multiple modules in the same JAR, so you can't package your dependencies with your app. Stripping out all the module-info files just means you're no longer using the module system. That could run into issues with Swing interop with `javafx.swing` since there are some internal JRE packages exported to that module.
That's not true at all! See for example this code to open a new window: https://stackoverflow.com/a/15041893/5517612 Very similar to Swing.
^ This. I feel like I learned JavaFX just in time for that skill to become irrelevant.
Yep, when a place is looking for an internal application to handle a job and is on a budget with minimal IT support they will not be running a webapp. I feel like the niche will be manufacturing factory tracking software or government management case tracking systems. All of which it doesn't need to be "pretty", it needs to show a lot of information and get a job done quick.
That user session mix up thing definitely exists on earlier versions also.
Why on earth would you think that? Java is heavily used for the server side implementation of web apps.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This week I focused on Java Developer Salaries and Opportunities across the country. I used [Indeed.com](https://Indeed.com) for my data. 
Why would you post in a video that which could easily be published as a blog post or article?
Tbh I'm more likely to look at the graphs and hear what he says, compared to looking at the graphs and reading an article. I'm a lazy reader for stuff like that. 
It makes it really hard when you don't have the option of playing sound. And there's the part where you can skim the text for the parts you care about, going back to read if your interest is piqued. Text is just superior in nearly every way for things like this.
Ok maybe I could have included more details. That works if JavaFX has been started and is running, and the only way to do so is by having a class extend `Application` and calling the static `launch` on it with that class as argument. It will spool up JavaFX and you can build your UI. For a purely graphical application, this is fine, but not when your application is not completely graphical but in certain conditions would like to display a window. When you call `launch` then, your application has two parts that cannot communicate except by static fields: one is the JavaFX part, and one is whatever started it. But it gets worse, when you close JavaFX (I believe when you close the last window, not entirely sure), JavaFX will shut down its render threads and also set a flag that prevents it from ever starting up again. So if you have some kind of a CLI application that can, say, display a chart, JavaFX is very much not the right tool for the job.
Its a new channel. I am getting a feel for whats best. Eventually, the goal is YouTube video with commentary plus blog. 
I don't really see the point of posting this kind of content in video format. Talks are one thing. At least those are formatted like a presentation. Random one-sided discussion is best left to text. Don't get me wrong, if you've got ideas for content that lends itself to video, go for it.
Well if you want a self-contained cross-platform java app Swing/FX is still very relevant. My concern with FX is what tristan97122 mentioned, it's tough to gauge if there will be continued investment in FX or if it's just barely holding on. I've done a lot of Swing development and a tiny bit of FX, I really like FX but the biggest set back is a lack of an ecosystem, minimal examples, libraries etc.
I use TornadoFX for a lot of projects. It's useful for internal tools and for gathering data. A lot of the stuff I do is related to gathering data for UAVs and other types of research and packaging that data for none technical people to play with.
If, as many are pointing out, Swing is still going along just fine, then **why don't people update MigLayout?** It's the only layout manager that works (well, beyond the mindlessly simple gridlayout and the simply but useful bordlayout) 
If you're using Swing, please learn MigLayout. It's the only advanced layout manager that actually works well. The box and struts and glue are crap as is gridbaglayout. BorderLayout and Gridlayout are useful, but simple.
wow thats news to me, anyone know what happened ?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Well if you want a self-contained cross-platform java app, Swing/FX is still very relevant. There is a very serious question in my mind over whether or not that use-case has any future. How often exactly is a *new* Swing/FX Java app was built, and perhaps more importantly to the future growth of the ecosystem, could that new app have been better and more easily served by a web frontend?
I think there is still a decently large enterprise need for "self-contained cross-platform java apps". The ability for an application that can run outside of the browser and control lower level aspects and have its life not tied to a browser is still valuable and will likely be for a very long time. I do agree, however, web apps are and will continue to dimish this need.
Only for legacy projects, based on Swing.
Why stick to swing? You've already responded to another comment which explained that JavaFX will be available through maven soon. Surely that's a better solution.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm using JasperReports directly, my generated PDFs are mostly static.
"These days"? They were rare 10 years ago.
I've also made a space-invaders-like game, if anyone's looking for LibGDX implementation. [Video](https://www.youtube.com/watch?v=hDvjagaqedQ) [GitHub](https://github.com/JoonasVali/spaceblaster) 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Can anyone explain this snippet from ~9:04 of the video? root.getChildren().stream().map(n -&gt; (Sprite)n).collect(Collectors.toList()); I haven't used .stream() or .collect() before..
it takes the collection of root.getChildren(), converts all elements to Sprite, and collects the result in to a List. So the result will be a List of Sprites.
Denial Of Service (DoS) via UTF-8 decoder Lol! We just triggered in our tomcat dev servers by a bug where junk was getting accumulated on the URL...
He wants a list of Sprite objects and since he's only using Sprite objects in the scene graph he gets the children then uses stream() to access the streams API. Then he is using map() to cast each Node into a Sprite and then uses collect() which takes the way to collect as a parameter to convert to a list. Yeah if you just read the javadocs the streams API seems confusing until you start using it. Then you'll get the hang of it. 
You might like to watch this: https://www.youtube.com/watch?v=SO2W9KCWzvo Or these from NASA about the Deep Space Trajectory Explorer https://www.youtube.com/watch?v=ACqlCTk5tr4 https://www.youtube.com/watch?v=U7wdvhRKEiY Somewhere I remember a live demo of Deep Space Trajectory Explorer but I can't find it right now. :( 
In order to use JavaFX from Maven you need to use Java 11 - which is not even released yet. Also, there are libraries that can't run on Java 10 yet (like [Lombok](https://github.com/rzwitserloot/lombok/issues/1572), which I use). Is JavaFX so much better than Swing that it justifies these limitation?
Well only you can say that, only you know what your other needs and requirements are. But JavaFX really is a lot better than Swing in a lot of ways, I do think it deserves serious consideration. The fact that Java 11 is not released yet is only really a limitation if you need to be pushing prototypes to your customer within two months' time. If you're on such a tight schedule and can't wait then yeah, by all means use Swing! And if there are other libraries you want to use which don't run on modern versions of Java, I'd say they're the liabilities here, not JavaFX. Personally, if possible, I'd consider dropping *them* rather than letting them hold back my choices in other areas. Bear in mind, since you're worried about having a smooth deployment, that the last LTS release was Java 8, and the next will be Java 11 (Assuming you'll be getting your binaries via AdoptOpenJDK since Oracle won't be providing LTS binaries for OpenJDK any more). This means that you should already have moved to 10, and will have to move to 11 soon anyway, unless you're willing to sit all the way back at 8. You really shouldn't be shipping anything which requires 9, it's already EOA.
I used https://github.com/cuba-platform/yarg for doc files templates filling, and it seems it also supports PDF. You could give it a try. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Not following Object Orientation and instead writing code in an imperative manner (like C) is the first obvious give away. The second one would be trying to re-implement stuff that is already present in the Java core libraries.
Not using collections, and generics where it is appropriate to do so. Or using only Vector and Hashtable.
A few more from my side, - Prefixing fields with Hungarian like notation - Doing for loops instead of calling System.arraycopy(). - Explicitly write type sizes in ByteBuffer instead of e.g. Integer.SIZE. - Missing GC friendly code, where the code allocates like crazy 
From your description I would say in your situation not understanding OO, maybe not using things like inheritance, interfaces, generics, dependency injection etc. In general, I've worked in places where people who started with procedural or scripting languages before learning Java just wrote walls of code inside of classes, methods, or even JSPs. Again lack of understanding OO ( or even modularization which predates OO ).
Do you mean 'instead writing code in a procedural manner'? Both Java and C are imperative, and almost all object orientated code is still imperative.
All of those are either being unaware of some fairly exotic API or writing inefficient code, both of which are bad, but are things tons of java programmers do all the time, or an admittedly exotic but not utterly unacceptable style choice. They don't get anywhere near clear markers such as people who write_variable_names_like_this, or who make every method in their entire codebase static.
Lines and line of code in one method 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Maven is convention over configuration. A minimal Maven file is just a few lines long. If you layout your code like https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html I have seen developers with their code in /src and then the tests on /src/test, for example. That requires tens of lines of Maven configuration, exclusion of directories, etc. for no visible gain. Before starting to use any language or tool is worth spending some days looking into best practices and understanding how it is supposed to be used. I have seen just a few people be able to write in a new language without nobody knowing that they are new to it. And it is because they already know a lot of them. If you write good C++, C#, Pascal, C, Scala, Objective-C code then you probably can fake Java. Because you understand what is style and what is fundamentals. Otherwise good look with that. :P
Lack of obsession with abstractions. 
Yes, that often can be a middle ground. Still happy to take a look if you create an issue on GitHub with a pom.xml causing the problems.
&gt; using only Vector and Hashtable That gives away someone who learned Java from books or tutorials written in the 1990s.
Yeh that's probably true.
ModiTect uses jdeps under the hood for creating a "candidate descriptor", based on the project's packages and declared dependencies. If needed you can then amend or override the statemenst of that descriptor and create the final one. I found that's a nice middle ground, e.g. you don't need to list each single exported package, but can rely on wildcards ("!*.internal.*) and also dependencies can be obtained from the pom.xml and fine-tuned as needed (e.g. to make a given dependence "static"). Calling jdeps by hand is not very comfortable as you'd need to provide the paths to all your dependences' JARs, e.g. in your local Maven repo. So indeed it's not "Maven alone", but ModiTect tries to take as much of the boring work from you and just needs some manual help for polishing the candidate descriptors it generates.
you are correct. I fixed my comment
public variables. Yup, you can use them, but they are almost never used. Instead, private variable with a public getter/setter. 
Even then, better to be careful about making setters public if you don’t want other classes to meddle with your information. I usually default to private setters than adjust as needed. But yes, public instance variables are bad design.
Using `static` everywhere. &amp;nbsp; I've seen several Python programmers take a stab at Java and end up writing `static` on all their methods because Eclipse would complain if they didn't. But really this is a problem with not following OOP as someone else mentioned.
Using return codes. This infuriates me: public int doSomething() { try { // ... } catch (Exception e) { return -1; } return 0; } Not only does it hide the actual source of a problem, it propagates throughout the code. Whoever calls this abomination needs to check what the return value is, which is something we left behind in C. I'm currently working on a legacy code base that does this everywhere. There's lots of signs it was written by people who just didn't do Java. There's a mix of things from pre-Java 5 days sprinkled with more conventional Java with a splash of just bad C code thrown in. It's maddening because this is a project that was started four years ago. for (Iterator iter = myList.iterator(); iter.hasNext(); ;) { // ... } public Collection&lt;Thing&gt; getTheThing() { if (someService.doSomething() == -1) { return null; // Why?! Return Collections.emptyList() for fuck's sake so I don't have to be defensive later } // ... } 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
A friend of yours? lol sure.
I will try to find time for this, but I'm suspecting I'm just doing something wrong :)
Dear lord, those problems give me the heeby jeebies and I'm still just in college studying java. I did not know the function\_name convention was considered bad though. I switched recently from functionName because I thought function\_name was easier to read.
Declaring all method variables at the top of a method.
Writing big, all round classes doing many things. Using statics everywhere. No DI, just share state through the statics. Python programmers I'm looking at you. No encapsulation. Access modifiers nitbeing usedz everything public by default. No separation between packages, not following interface segregation principle. Everything stored in HashMaps instead of using classes and type systems to help you. String based programming. Writing stuff that is already in standard library. Pom.xml without plugins, dependency management. Writing .sh scripts instead of plugins. Distributing and launching Java apps from .sh scripts, manipulating classpaths manually on cli. 
I fail to understand your points. You have to distinguish between the OpenJDK project and the subprojects and repositories it contains. OpenJFX is a subproject of OpenJDK. It contains the source code, and is now also mirrored on github ([https://github.com/javafxports/openjdk-jfx](https://github.com/javafxports/openjdk-jfx)) which I think is great. Up till JDK 10, the Oracle Java SE SDK (the most widely used distribution of code defined in OpenJDK projects) contained the JavaFX API's, implementations and native libraries (built by the OpenJFX project). That will no longer be true as of the release of Java 11. Most JavaFX developers used to work with the Oracle Java SE SDK, and they would, starting from 11, find that the JavaFX modules are missing. So we worked pretty hard I guess to come up with a solution. A fair number of community contributors made it possible for all JavaFX developers to keep using JavaFX, in the way they are used to it (in an SDK) or in the way that is very popular amongst Java developers (using maven/gradle). The OpenJDK sources (at r/http://hg.openjdk.java.net/jdk/jdk) do not contain JavaFX code. So if you want to build your own version of OpenJFX, you need the code at OpenJFX ( r/http://hg.openjdk.java.net/openjfx/jfx-dev/rt) or the github mirror. I highly recommend people to do this. Building it is indeed not hard. And while you're doing that, please test it, find bugs, file them, discuss solutions, fix them. Come up with great new features, implement them, discuss them. That's how the OpenJFX community works. I think this is the first time ever someone calls my writings "lies" and "fake news" which I think is rather disrespectful to developers who spend tons of spare time making things work for other developers ... oh well.
You should follow the naming conventions per language. In Java, we use camelCase.
Who are you?
Well at least I got that part down.
?
There has been a lot of discussion about how to make JavaFX available on the mailing list, you can join it and lurk or offer up an opinion: http://mail.openjdk.java.net/mailman/listinfo/openjfx-dev
Just don't use Lombok?
Void methods that mutate objects form the parameters: public static void main(String[] args){ Integer number = 0; adddOne(number); } private void adddOne(Integer number) { number++; { 
Was an awesome reply.
With gradle you don't need a plugin to get a fat jar, here is a simple task that does it: task fatJar(type: Jar, dependsOn: ["compileJava"]) { from "$buildDir/classes/java/main" archiveName = "foo-${version}.jar" manifest { attributes( "Main-Class": "com.example.foo.Foo" ) } from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } }
It also gives away that they haven't kept their skillz up to date. Collections have been around for a long time now.
Oh, thanks :)
I use iterator loops occasionally when I need to remove items from the collection -- within the body of the loop. But not often. Is there a better way. (Obvious suggestion: stream with filter, but that is not always applicable.)
Yeah I'm odd. I'm looking into secure programming so this whole post has been insightful.
Your second one is the biggest give away for ANY programming language. Not knowing the common idioms of the language, including its libraries.
A lack of factory factories, and not having 40+ character class names.
https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines
But Lombok is the only way to maintain sanity while using Java...
Yep. Introduce variables where they are needed. Give them the smallest scope possible. Let them fall out of scope as soon as possible. Sometimes even introduce a pair of curly braces to create a section of code with a scope so that a few variables can go out of scope ASAP. Even if this doesn't have GC benefits (like for ints), it eliminates the possibility of accidentally accessing that variable outside the scope you defined it to have.
That makes a lot of sense. I'll be sure to do that in the future! I know it's important for working with other individuals and keeping code clean and easy to read.
Lack of understanding between primitives and Objects, and not understanding the immutability of String.
Not true. Not all languages come with such an extensive base library. I mean, if you look at C it is very common to re-implement basic stuff (like linked lists and memory managers) in a project. That would not mean that somebody is not familiar with the language. As another example, could you point me to the core libraries ( or well-known frameworks) of Scheme, that cover the same functionality of Java? 
Yes! That! Learn MigLayout. And a GUI designer that supports it.
Non-Java-programmer things: * C-style-array-declarations: `int [] foo;` or `int foo [];` instead of the regular `int[] foo;` * using ints instead of booleans or enums for states * not using exceptions properly * not using generics properly * using arrays instead of Collections/Maps * using native code or libraries or self-written stuff when there is an adequate class/function in the JDK * using for example C# code conventions (like uppercase functions) or other weird conventions like lower-case-classes. * using packages improperly or not at all &gt; Also what kind of fundamental patterns do you expect to see in 90% of projects ? Some design patterns are so common, that they appear in almost every project, like Factory or Singleton. Also I would expect wide usage of immutability.
Using an iterator with `remove()` is fine. It's not the most modern way but sometimes useful for performance reasons. If performance doesn't matter, prefer to keep the collections unchanged/immutable and create a (filtered) defensive copy.
Once saw a java class in production that had clearly been written by a sysadmin more accustomed to bash. It queried the database by passing hard-coded query strings to spawned mysql processes.
Is JavaFX even being maintained by Oracle? I'm asking because the Oracle documentation web page redirects me to OpenJDK and yet it still seems to be in version 8.
I have been coding in Java for years and tend to do this. I’ll introduce variables all together next to where they’re used so I see what I’m working with at a glance, but try and limit scope where possible. That is partially solved by shooting for my methods being as short and concise as reasonable, but it tends to look like they’re always at the top.
Specifically since Java 1.2, released in 1998.
You can program in Fortran in any language. Every programming language has idioms, and every programming language can be used unidiomatically.
Sending an empty array to a vararg 
&gt; Vector and Hashtable Wait, we shouldn't use those anymore?
Those were more common 15 years ago. 
If I were turned down for a job because my code didn't look "java-ish", I would consider myself lucky.
[The only](https://javabot.evanchooly.com/factoids?name=vector&amp;value=&amp;userName=&amp;Submit=Submit+Query) reason to use Vector is for compatibility with Java 1.1/1.0, or JavaME. Otherwise, use ArrayList. If you need an internally synchronized version (if you don't know what that means, you don't need it), use the collections in java.util.concurrent; the same applies to Hashtable and HashMap, Hashtable is old, HashMap is new, and Stack vs. ArrayDeque.
Even for reference variables, GC [may collect objects](https://shipilev.net/jvm-anatomy-park/8-local-var-reachability/) before the block they are declared in is exited.
I forgot the the /s. But I'm not going to edit my comment because your answer is so perfect. I deserved the schooling.
The style with underscores is fine, but usually only seen in C, C++, and derivative languages. Typically, Java follows the Pascal/Ada style using camel case. Follow whatever style is in use for the code you're working on. Consistency is better than rulebooks.
It appears you need to read this: https://en.wikipedia.org/wiki/Sarcasm
&gt; Not following Object Orientation and instead writing code in an procedural manner (like C) is the first obvious give away. Conversely, it also easy to tell when someone has read one too many OO books and has gone overboard. 
TBH I'm a little jealous other languages get properties and we're stuck with beans.
Do people not use the default project layout in their ide?
I think he means within the language your talking about. Of course different languages have different functions. In lang-x, you should be familiar with core functionality and probably some common libraries if you use lang-x everyday.
Practice
/r/javahelp
* Blissful ignorance of tools like maven and gradle. * A focus on code rather than configuring things 
void func() { ... **return;** }
Only if you write a shitload of mutable code. I lately migrate over public final variables, immutable collectiona and avoid getters and setters. JPA is another story.
I appreciate, and try to implement Functional Principles in my Java code. However, Java is primarily an imperative language, and most code written in Java will follow that. Java 8 is a great step away from this, but it is by no means a functional language. Getters and Setters are often great because I can incorporate logic around when a variable is called, I can easily put a debug point and see who is accessing it. Most of them simply return and change variable, to which I would generally conclude a public field is better, because it is effectively public.
&gt; Is there a better way. `ArrayList.removeIf`
`number` inside `main` is still going to be `0` after `adddOne` returns...
The use of System.gc()
Debugging state change of an object passed to method which isn't named properly (you have to deal with many layers of abstraction to get what you were looking for in the first place) *careful debug points and conditional one's help a lot but still think I waste too much of time debugging state changes if there aren't proper comments or proper naming.
This code would not compile at all. Last { is wrong. adddOne() is not static and can not be referenced from static context.
If it doesn’t implement an interface, you’re doing it wrong!
Holy shit, Vectors! Back when I learned Java in 2002 we were told to use ArrayLists because Vectors are old school. That's 16 years ago! Are you telling me some people still use Vectors?
So... no hire? ;)
It was mentioned in a previous [comment](https://www.reddit.com/r/java/comments/91g7p6/what_gives_away_a_nonjava_programmer/e2xytif/) but I'll reiterate the point about following naming conventions. Briefly, * type names are in `CamelCase` with an initial capital * method, field, parameter, and local variable names are `camelCase` with an initial small letter * constants are `UPPER_CASE` with underscores * type variables are single-letter or extremely short upper case names, e.g. `T`, `U`, `V` It's startling how difficult it is to read code that doesn't follow these conventions. Most subtly, code that uses mixed-case names for type variables is incredibly confusing. For example, consider reading code that uses `List&lt;Foo&gt;` and `List&lt;Bar&gt;` only to find out that `Foo` is a concrete type and `Bar` is a type variable. Ugh!
God how I hate that crap. My brain is half way there in general. But wow. Some of those stack traces require a 30" monitor just for width, to say nothing of depth.
another would be reaching deep within an api to get at some small detail the api provides at a higher level of abstraction. dear god i see this everywhere and it makes me cringe. 
Hey, leave AbstractClassFactoryFactory alone.
That's what I'm talking about! It's not java until you have this and its implementations.
Although common practice, private variables with default getters/setters actually expose the internal state. The added boilerplate is irrelevant to an object's responsibilities and, more importantly, exposing all internals ruins encapsulation. The practice of accessors-by-default feels like a missed opportunity for intentful object-oriented design. Furthermore, default getters invite client code to query for data and operate on it there instead of in an object that has the knowledge and responsibility over those operations (see: Tell Don't Ask and Law of Demeter), which causes awful giant service methods. Public properties or accessors-by-default do make sense for DTOs, because they're all state, no behavior.
Let’s just deprecate all other conventions! /s
The practice has never made sense to me for that reason. The accessors should be no more accessible than the object. Kotlin actually does a good job of enforcing this. A private field cannot have a public accessor, but a public field can have a private setter for instance. 
xd
Definitely makes more sense to me now - thank you!
That sounds awful. But I have to confess to not having seen much of it. 
I dream of a future in which all enumerable types are represented by enums instead of int constants. I doubt it will ever be realized...
People have picked at your syntax, but you're totally right about this behavior. Our app has a lot of code that sends large, complex objects into void methods and modifies them. It drives me nuts. 
What's wrong with static? Saves a bunch of initialisation code every time you need a class if you're not using an AOP container.
Using vectors is normal in C++. I was interning in a C++ shop, so when I started working as a junior in Java, my colleagues told me about ArrayList 
I normally use protected in java unless I need private, I assume most devs moving from python would do the same. Is there anything wrong with doing it that way? Looked at your interface segregation principle link but to me it just looks like an excuse to have your implements clause take up several lines so you can have an interface for each package that uses your class. Python has a bunch of extra tools for dealing with interface changes, so forcing encapsulation where it's not needed is an antipattern in Python. 
Protected is designed to work with inheritance. If you do not design your code for inheritance, then you should probably not use protected. Private is for privates, no modifier means for package, public for everyone. One of those will probably fit. What kind of tools?
Properties are the main one. They let you redirect the get/set/delete operations on fields of a class or instance with calls to a getter/setter/deleter handler. This means you can start off your class as just a group of fields, then change the internal representation or migrate to getter/setter methods later without breaking existing code, then graduall depracate the old interface.
 mMemberVariable _memberVariable VariableName = new className();
I will add one more: starting interface name with "I" eg. IWriter with concrete implementation Writer instead of Writer interface and WriterImpl implementation. You should use interfaces in your code so way wired name with I. I've seen one application which used static error code check after every method call. 
Using enums like a pleb.
what do you mean about a GUI designer? Oh. I guess I've never used one. I just always code my own GUI layout.
I worked with someone who hadn't heard of ArrayList.
Variable names that are less than 5 characters.
When there are a lot of warnings that are in an entire program. They kind of lead the way for numerous errors. 
Another way is with index (may not be better than the iterator though): for(int i=list.size()-1;i&gt;=0;i--) if(condition) list.remove(i); 
I saw once code written in 2004 that still used Vector and Hashtable. yeah , in legacy codebases it's still there.
Thank God for Intellij. `alt-enter` -&gt; "Move declaration closer to usage"
I would guess their use of the GPL licence limited the audience for the library. You could try their archived contact page and find out. https://web.archive.org/web/20171202103715/http://www.dynamicreports.org:80/contact Maybe pick it up and maintain it on github? 
 void saveUsersInDatabase(User[] users) { int i, j, k = 0; String username = null; String logMessage = ""; for (i = 0; i &lt; users.length; i++) { ... 
Also stack's iterator is broke.
At my job we use the C/C++ bracket convention: &gt; void methodName() &gt; { &gt; // body &gt; }
Depends what you're doing with it. The odd static helper method or initialiser is probably fine, static finals for constants are usually encouraged. If you're structuring your entire code base around static methods, though, you're probably going to run in to trouble sooner or later - or at least you're throwing away a lot of useful language and tooling features and are definitely not programming in a way that other Java programmers will be able to easily work with.
Good idea if nothing ELSE is being done in the loop body.
They think Java and Javascript are related.
I am ALWAYS in favor of immutability. But it's not always possible. I had mentioned the stream with filter, which would be my choice if the collection were immutable.
If you're using an IDE, you can refactor--&gt;Rename like magic. Rename the function\_name to functionName, and it is magically changed everywhere that refers to it.
m\_memberVariable
I dream of an impossible future where various internal Java int constants are rewritten as enums. Not gonna happen.
I was thinking Generic collections, and those have been around for a long time now.
&gt; Hashtable is old, &gt; &gt;HashMap is new, &gt; &gt;and Stack vs. ArrayDeque. that is the coolest rhyme!
I do not mean that all languages have such an extensive base library, but all languages do have certain idioms. If you saw scheme code with predicate names suffixed with a P you might think: Ah, a CL weenie!
Also one that I found is using `TreeMap` and `TreeSet`, as those are the default (or only) implementation in the C++ stdlib, whereas the Java community prefers `HashSet` and `HashMap` implementations. For instance, `Collectors.toSet()` and `.toMap()` both return hash-based versions, although that could change in the future.
Yes. If you see a SomethingXmlFactoryFactoryFactory pattern, you know it must have been written by a True™ Java programmer.
Concatenating strings, especially in a loop, instead of using StringBuilder. Think of StringBuiler as the mutable version of a String.
my eyes hurt
People are mentioning all these very specific stuffs (that not everyone follows, like parenthesis, not using generics, etc), but I think the most important ones are: Access modifiers; Not using ArrayList or HashMap for 90% of the list/maps situations;
That's nice to know, but my bigger reason to minimize variable scope is to avoid bugs. Even the title of the linked article suggests that the system understands when the variable \*effectively\* goes out of scope.
I always prefer smaller methods. But there are occasions where that is difficult to do; so for expediency I write a longer method. But very rarely thank goodness. But I have memories of having done that. Limiting variable scope helps. But now it is a principle just like making variables final where possible (letting the IDE do it for me). And sometimes looking at "how could I make that variable final".
Java 9 is no longer supported. If I had to take a guess, the next certification will be for the next LTS release, which will be 11.
Ah ok, I didn't realise they weren't doing LTS for 9. I guess that answers my question so, thanks!
How does this differ from GWT?
It's LGPL, so not so "bad".
A couple weeks ago I had to use Vectors, to work with a library which was already implemented in our project. There were a couple of places where the return values / expected values were Vectors and the project it's not old so, sadly, yeah.
Just two examples from production code I'm currently working with: for (int gc = 0 ; gc &lt; 5 ; gc++) { System.runFinalization(); System.gc(); } or System.gc(); System.gc(); System.gc(); infoLogger("Clearing all statistics..."); ... System.gc(); System.gc(); System.gc(); 
Help me be a better programmer.. what should I do instead of return codes?
_ in variable names.
WTF
I'm not really sure what the point of return codes are. But, if it's indicate whether or not the method ran into an error, then just use exceptions.
[removed]
You mentioned dependency management. When do you start using it? In my previous project the newcomers that came a year after me repeatedly questioned the purpose of using the dependency management block, which i had put in place. I personally had to enforce a few versions, but i had a hard time convincing the new colleagues of this feature. Could you point out where the feature helped you most (e.g. inheritance?) ?
I got scolded when I started at my current job for throwing an exception for a new selenium testing framework method when it couldn't find an element. I was told to just catch the exception and make it return null because that's the convention for the testing framework. Yeah I don't wanna debug null pointer exceptions every time a test fails. Fuck that. I've been systematically replacing that stuff with descriptive exceptions since then
but still IntelliJ will refactor all your functions that map contents from one object to another this way. and sometimes when you forget that call by reference you might even forget to copy an array instead of modifying it, and having to debug 15 mins to find that stupid oversight !
Return codes are from c background, where why something failed would be hard to determine. (i.e, network closed, file unable to write, file not found, out of memory, are all reasons why you couldn't write to a file, but as a c programmer using a function, especially a function you didn't originally write, would be difficult to determine.) But now that Java has exceptions, you would know via the Exception type and message, thus removing the need to return -1, -2, 0, 1, etc.
I straight up don't even know what a hash table is
Yep, and 10 won't be supported after 11 is released.
Java 8 certification will probably be applicable to any work you do now. The main feature added since then is the module system, which can mostly be ignored for the time being. 10 added local type inference, which isn't going to be that popular just yet. I'd ignore anything that doesn't cover Java 8 though, as lambdas are a very big update. Java 11 is due to be released very shortly, but it will take at least six months to a year before it's adopted by most places. It'll probably take that long for certifications to become available too. 
That's very sad since a hash table is basically a fundamental data structure. If you know it by hashmap or dictionary or whatever, you should at least be familoar with different names for the implementations of the same idea.
That's not how it's pronounced is it? Deck is correct pronunciation, or even deek. But not de-queue
If there is only one implementation it doesn't require an interface. It's easy to convert it if required later. (I know you're probably joking but it irritates me :P )
Like if lil pump was a bad java programmer instead of a bad rapper
you're no fun at all.
That’s the C# convention but apart from following convention, I don’t think one is intrinsically better than the other. It’s still cognitive overhead to prefix or suffix interfaces/implementation class names. 
Oooh I got one for you, how 'bout this one? public SomeThing methodThatSucks() { SomeThing thingToReturn = null; try { thingToReturn = //...do some stuff... } catch (Exception e) { thingToReturn = null; } return thingToReturn; }
I kinda disagree. The flexibility of OOP requires careful thought. If you are basically taking what are static methods and classes and making them interfaces and instances, you have false flexibility. This is worse than static methods, because you are advertising things as flexible and abstract, when they really aren't because they were never designed to be. Give me a codebase full of static objects with a few **carefully** thought out interfaces than a codebase full of ill-conceived abstractions and the same carefully thought out interfaces. In the former I can identify **real** points of flexibility and extension, in the latter good luck divining the points of extension from the crap-stractions littered throughout the codebase.
I would never turn somebody down from a job for something as trivial and pedantic as this as long as their code was solid. Something like this is easily teachable and only stylistic. While it does matter, it is something that's trivial to fix with IDE refactoring tools. Anybody who would not hire a person over something silly like this is potentially somebody who doesn't know how to assess things that really matter...like can you write good, clear, stable, efficient, working code.
In Python, the standard is snake_case. So it is a matter of what happens to be the common practice for a language sometimes.
Still not guaranteed to run lmao
It should be similar performance with ArrayList ((List|Iterator).remove is O(1)), but iterator is much better if you happen to have a LinkedList (Iterator.remove is O(1) for LinkedList but List.remove is O(n)).
you dont have to use exceptions (it's not always the best idea) you can use more meaningful types than integer instead.
Makes it hard to write a good test case verifying the failure case, doesn't it.
Swallowing exceptions and ensuring their stack traces never see the light of day is something most experienced programmers never do based on having been burned by it so very badly.
I looked it up, I can see why it could be useful. But never used anything like it.
Or Swing since they still never got around to fixing some of those APIs that use Vector. Pretty hilarious.
In this situation `Hashtable` is the pre-Collections Framework equivalent of `Map`. 
All my loggers are named `s_log`. I'm slowly renaming them to `logger` (and switching from log4j 1.2 to SLF4J).
&gt; Using statics everywhere. No DI This is my current hell. :(
There's nothing wrong with concatenating strings outside of a loop, as the compiler will replace it with a `StringBuilder` for you. https://dzone.com/articles/string-concatenation-performacne-improvement-in-ja
I've just discovered methods that do this in our codebase. I threw up a little in my mouth and then rewrote it to return a new object instead.
&gt;our solution to convert **existing, unmodified** Java applications to HTML5/JavaScript from bytecode
`removeIf` is actually on `Collection`, so you can use it on anything other than an `Iterable`. Not entirely sure why that is, given that `Iterable` gives you an `Iterator` that has a `remove()` method. 
Classes that have only one method with the cyclomatic complexity of a small nation's GDP.
LOL I use the fuck outta Vector and HashTable. I didn't learn from a book. But I did learn in the early 2000's. Why am I doing it wrong? 
Here's another clue, somebody that still handles AutoCloseable resources like this: public void someMethod() { InputStream is = null; try { is = //initialize and assign some concrete InputStream implementation. //Do some more stuff... } catch (IOException ioe) { if (is != null) { //Note they forgot the extra nested try/catch around the close() call //which is exactly one of the reasons you want to use try/w resource //so you don't have to worry about this kind of crap/warty code any more. is.close(); } } } instead of using Java 7 try w/ resource constructs. I have "senior" developers on my current project. Also they still use the old java.io libraries instead of taking the time/effort to learn the newer nio libraries.
😂
_Almost_ as bad is when you have something like a select() method for an object encapsulating some UI element not before it handles the actual test it does an assertion that the element exists... Which is good right? Well yeah, but when that assertion fails and all you're left with is "AssertionError: Expected true but found false", and a big 'ol stacktrace... TestNG ships with message parameters on every assert for a reason, guys!
&gt; JavaFX will be a separate module we can use with our dependency managers? Several modules actually - base, controls, graphics...
and methods almost always start with a verb: drawSquare(), countFingers()
Never used them. I use arraylists and hashmaps. How does that stack up? Good or bad style?
They start talking about pointers, pointer arithmetic and pointer optimization
There are situations where try-with-resources does not do the job that you need it to.
Wait I do this :(. Any nested for loops get indexes pulled out to before. The reasoning is so they’re not being constantly remade in the inner loops, I doubt the compiler wouldn’t optimize it but now it’s habit.
Most people now use ArrayList instead of Vector, and HashMap instead of HashTable.
&gt; the compilers are not required to perform the return value optimization Any modern compiler under -O (or similar) will do it. RVO is vitally important for C++ performance.
If you don't need thread-safety, ArrayList is faster than Vector. Same with HashMap vs HashTable.
Long-time Java user, but I personally like a floating `return;` statement even at the end of void functions so I can throw a breakpoint on it. Obviously something that can be removed when you're done, but doesn't always have to and not sure that's a bad thing.
And Cobol and shell scripting. 
[What Java version should I try to get certified in?](https://redd.it/48nh9i)
[GitGhub](https://github.com/ThinkpadNC5/MyPerf4J) 
If an exceptional condition occurred, use an Exception.
 String this_is_my_string = "some string";
was this a real piece of code somewhere? it keeps getting better (worse) the more I look at it. 
It could not possibly do that either. That doesn't mean it's useful; far cry from that, but there's a lot it simply could not handle without workarounds at the very least.
I have the exact opposite feeling. The need for doing desktop app is rare, but doing it in Swing is so slow an clunky compared to JavaFX that once I've tried JavaFX I won't touch Swing with a ten foot pole. I see a speed benefit even with a small "tool" applications. FXML is much better for separating application looks and behaviour and connecting one to another via annotations is IMHO quite clean. You get cleaner, smaller code to be maintained. It's worth to mention that with FX in larger projects you can very easily separate roles of developer and GUI designer. 
Of course it is. However, you can't rely on it unless you always use the same compiler which you know about that it does implement RVO. It's the same with some undefined behaviours. You can probably assume that it will result in the same value, but cannot be sure. (E.g. signed integer overflow)
That's not the point
Integration with shell systems like Control-M. They scan for return codes to indicate job success or fail. 
Great idea. I'd like to have such subreddit. Seems like u/Pix-I has created one - r/JavaConferenceVideos It's empty though.
&gt; that can handle xml, yaml, json, hocon. &gt; &gt; But I'm not overly keen on any of those formats ... What format are you keen on?
There’s r/ConTalks but it has a mixture of a lot of different stuff, though it includes a bit of Java.
I was just thinking the same thing. Bit late to the party, but oh well..
Use return codes when the error is {semi-}EXPECTED, and you can describe in your documentation what should be done/handled for each value. Otherwise, just throw an exception to save everyone the guesswork. And yes, describe this in your javadocs.
Yeah, I thought someone should do it! 
This is true as long as the editor in question is an IDE and understands ASTs and not just text. YMMV. Oh, and by the way, VS Code is somewhere in between. It depends on the plugin. That can be true of Eclipse too if you're not talking about Java. Java is pretty solid there.... except maybe for extensions like Spring, etc. Good luck and ALWAYS be suspicious! :D
Interface cluttered with obsolete methods, unneccessary (and usually insufficient when neccessary) synchronization. And it strongly hints that your skills are ridiculously outdated and you never bother to learn new things.
how long have you been programming? and what sort of programming? knowing what a hash table is, is pretty important.
IME, this is true. I would add .NET Core as a recent addition to the "family", or maybe golang, but those are my main go-to options these days; not that I've had any occasion to use go, but I would seriously consider it under the right circumstances. That said, this article is about 3 years old. Downvote.
In your first example, you used to have to do that, to get it to run. Though, I recall only having to do it twice, not 5 times.
in my experience. It's virtually impossible to convince people of the benefits of these sorts of patterns, by words or examples alone. That said, i question whether spring was worth it, when it was all XML.
&gt; best practices A good chunk of my time researching, is trying to figure out what the best practices are. It's like, no I don't want to do all this custom shit yet, I just want the basic functionality. GIMME
And I've added it to our *sidebar* (only old reddit design for now) under "Related Subreddits". Good luck with the subreddit!
Starting doing batch for 4 years (early on in my life) been doing java the last 2.5 years. But I'm completely self taught, which might explain why. I haven't programmed within a business.
The point is that in Kotlin code properties are _always_ private, and you only get to pick the visibility of getter and setter. This means that users of your code always access things trough the getters and setters, allowing you to stay binary compatible when you decide you don't want a property after all. 
That's horrible.
And if you _do_ need thread-safety, Vector and HashMap doesn't guarantee it.
I've been watching a huge number of these on my commute and I think it contributed greatly to landing a new job. I think this is a great idea.
ahh. well, you might learn a lot by studying some basic data types, if you feel so inclined. probably plenty of youtube vids.
&gt; I doubt it will ever be realized... Well, as Integer is enumerable...
Find yourself a book about algorithms and data structures, you'll learn lots of cool and useful stuff. [This one](https://mitpress.mit.edu/books/introduction-algorithms-third-edition) is what we used in my classes - it's pretty thorough.
&gt; The practice has never made sense to me for that reason. The practice makes sense in the context of JavaBeans and reflection-based code and tools written to operate on beans. 
&gt; And it strongly hints that your skills are ridiculously outdated and you never bother to learn new things. Yeah more or less moved onto management and / or tools but still get called on to code something quick and dirty from time to time. Thanks.
It looks like in your [submission](https://www.reddit.com/r/java/comments/91r29d/getters_and_setters_in_2019/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Ant is more popular than Gradle?! Eclipse more popular than Idea?!! GWT?!! WTF is this?!
JavaFX
the quick answer is JavaFX ( as long as you are not required to stick to a deprecated version, aka, JavaFX2 on Java7 and before ) from JavaFX8 and up. Before that, it's way too buggy. I am being "forced" to keep a dual version with JavaFX2 ( the openJFX backport to java7 is crashing with my project, still investigating ) and it's a pain.
I guess you justt disqualified all common configuration formats. What would you like to use? Properties?
Not all failure states are Exceptional
Any modern compiler you use will have RVO. Relying on its presence is perfectly acceptable.
But what if you can't use *any modern compiler*? Then using std::move will have an impact for shitty compilers, but will be optimized when using a modern compiler. There's nothing to lose with explicitly moving, but there is ambiguity and uncertainty when not using it.
My friend, I could not make something this awful up. It is sort of a paraphrasing/summation of an actual method from our production code base tailored to highlight the specific pain points...one of several that follow the same basic anti-patterns scattered around the code written all by the same author. We are undergoing this big agile realignment/transformation in my company right now to try and improve our process and quality and solve some systemic problems that are plaguing us for a long time. This is arguably a good thing...a move in the right direction. But long as you keep developers around who are thinking and writing code like this...might as well be taking all that money they are paying the agile coaching consultancy and flush it down the shitter.
I know that, but the situations I'm seeing in our code base are not those.
Oh another one I thought of, I still see people who write multiple catch blocks for specific exception types but repeat the exact same handling code in each catch block when they could have used a single multi-catch and avoided violating the DRY principle.
But you have to marvel at the level of creativity involved!
Dark window headers are *seriously* dope!
....Honestly? Try HTML/CSS.
Good questions. GWT is a java transpiler to Javascript, so you can create native web applications with Java. We a huge Java crowd at Sencha building web apps in businesses all around the world using GXT, which uses GWT to transpile to Javascript. The crowd that answered reported in the results on the build system. I agree with you I, I was surprised to see folks voting for Ant. But with Eclipse, I see this about 50/50 most of the time when engaging with enterprises. That said I know folks love IDEA and have no qualms with the IDE choice. 
Dark window headers and TouchBar support, niiiiiiice!
I totally agree with you! Something like \`getName()\` instead of \`name()\` is so stupid! This adds nothing but clutter to the code. Some developers even think they were writing OOP code, becaus they are using getters/setters. But these accessor methods encapsulate almost nothing, but making all the internal state public with a superficial level of indirection. If you really want to hide the internal state and create methods with a meaning in the domain you almost never end up with methods prefixed "get" and "set". See "Domain Driven Design" (DDD). It is wise to separate dumb DTOs and business objects. Getters and setters make DTOs look a bit like business objects which could get even worse if the developers get confused by this. Getters and setters are often an indicator of design flaws (and a lack of understanding in DDD). By the way: More and more frameworks can live without getters/setters. For example Hibernate is able to do it's magic without getters/setters. Same is true for Jackson.
That "skip push dialog" feature is what I always wanted!
I'd guess most people here develop web applications, too.
I like the new, cleaner icons. It is hard to tell what exactly is different with the icons, but the overall appearance is just a bit more polished and less noisy.
This is everywhere. People just don't seem to know any better....
If you are writing Java and not using Intellij(or, ugh, eclipse) you will be hard pressed to be as productive as someone using it.
Any references to a FastVector tells you they probably started learning Java in 1.1 and never updated their code when ArrayList became avaliable
&gt; Iterable Maybe because it can produce an infinite number of elements?
If your `Iterable` is not backed by a real collection, then your `Iterator.remove()` should throw an `UnsupportedOperation` exception.
This was the first thing I enabled after seeing it in the What's new page!
Its annoying that statics are such a pain to test. Having the static keyword on a function is super useful information. Knowing that a function does not perform operations with or on the object state is pretty important. Its also less boilerplate to invoke. Being forced to instantiate an object just to call the method is sort of a pita
I think Idea is very neat, but I seriously wish my nigga Netbeans 9 be released this year ;-;
Any compiler that supports std::move is, by definition, modern.
Ew
Some people are really worked up about it, grab some popcorn and look at the comments on this blog post: https://blog.jetbrains.com/blog/2018/06/26/new-icons-in-intellij-platform-2018-2/ And this youtrack ticket: https://youtrack.jetbrains.com/issue/IDEA-192025
You might be interested in [records](http://cr.openjdk.java.net/~briangoetz/amber/datum.html).
I don't want to be too hard on kludges and things I find in code because we've all been there... But this one's just... yaknow the code will work but it looks like it was written how MS Word tries to write html. and of course catching generic exception. At this point I feel like the Java compiler should give a warning about that. good luck with agile transformation. There ought to be an xkcd about that somewhere. Bring in agile coaches that usually aren't empowered to tell any given project manager that they're fucking things up, so the agile coaches just make light suggestions like a therapist. After a year the company believes they've converted to agile and doesn't pay for the coaches anymore. and then you're usually left with 15 minute standups and planning meetings every 2 weeks. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
what happened to `src.zip` ??? i haven't been able to find `src.zip` for either jdk-10 or openjdk-10, which was a staple of java debugging through at least java 8. anyone know what's happened to it ? /u/BenjiYokai: writing "I recently got back into learning Java ..." should be your first clue that you shouldn't be posting in this subreddit. use /r/learnjava or /r/javahelp. for all practical purposes you're concern trolling here 