As /u/bradshjw said, you need to actually assign something to the variable "w". showConfirmDialog returns an integer (the choice the user picked), so you'll want to make "w" equal the result of that. Then proceed with the check.
Who changes w?
 int w = 0; w = JOptionPane.showConfirmDialog(..... if (w == 0) JOptionPane.showMessageDialog(frame, "The right choice"); 
Holy Crap. Thank you sooooo much! I cant believe I wasted so much time trying to figure this out.
The Wrong Choice
I recently made a similar move, going from Drupal development to Java. I think my new stack will be Java-based backend that exposes a RESTful api with AngularJS on the fronted. Anyway... For frameworks I would definitely look at Spring. I'm sure there are other good frameworks out there, but that's what I'm starting out with. There is a lot to Spring, but I would start with learning it's [dependency injection model](http://docs.spring.io/spring/docs/4.0.4.RELEASE/spring-framework-reference/htmlsingle/#overview-dependency-injection). Build tools/dependency management: Maven and Gradle. Ant is sort of on the way out from what I understand. For an IDE, I would highly recommend IntelliJ IDEA. Should be pretty familiar if you've ever used PHPStorm. In fact, IDEA supports a superset of all the languages, so you can use it for PHP development as well (though you'll have to install a free plugin). If you want a free option and will be using Spring, then you may want to look into [Spring Tool Suite](http://spring.io/tools/sts) (STS). It's an eclipse-based IDE with tighter Spring integration. Here are some books I found particularly useful: - [Clean Coder](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) - [Effective Java](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683) - [Implementing Domain Driven Design](http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577) If you need a free intro to DDD, check out the [free mini-book by InfoQ](http://www.infoq.com/minibooks/domain-driven-design-quickly) I also found [Oracle's Java tutorials](http://www.oracle.com/technetwork/java/javase/java-tutorial-downloads-2005894.html) pretty good for learning the language basics. You can also download them as ebooks (.epub) if that's your thing. Also, this isn't specifically Java-centric, but I would make use of Thoughtworks' [Technology Radar](http://www.thoughtworks.com/radar). More pertinent to the OP, they recommend avoiding JSF (http://www.thoughtworks.com/radar/#/languages-and-frameworks/683). This is a bitterly divisive issue, so **I'm not making a judgement call here**, but it's something to be aware of as you navigate the sea of technologies. I myself am just starting out with Java, but if you have specific questions, feel free to PM.
I'd start by looking at the [tutorial](http://docs.oracle.com/javase/tutorial/uiswing/components/progress.html) and then post the code you've got so far. (Maybe in /r/javahelp - those guys are better setup for this kind of question)
There is also no advantage to initializing `w` and then assigning a new value to it on the next line. I'd guess the compiler can optimize it out, but if you do it all in one line, this problem couldn't exist.
I recommend checking out JavaFX. It has support for using CSS to style your components.
When [Eclipse](http://www.eclipse.org/) says you can't directly call [class](http://docs.oracle.com/javase/tutorial/java/javaOO/) members from a [static](http://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html) [method](http://docs.oracle.com/javase/tutorial/java/javaOO/methods.html), you don't need to make all members [static](http://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html), it means you can and should [create instances](http://docs.oracle.com/javase/tutorial/reflect/member/ctorInstance.html) there. All the lines there belong to the [`ConnorCantBeatThisGame`](https://gist.github.com/brownbajwa/fbd43374441417f74031#file-gursev-final-L3) [class](http://docs.oracle.com/javase/tutorial/java/javaOO/), which belongs to the [`mainGame`](https://gist.github.com/brownbajwa/fbd43374441417f74031#file-gursev-final-L1) [package](http://docs.oracle.com/javase/tutorial/java/package/packages.html). [`gamestate`](https://gist.github.com/brownbajwa/fbd43374441417f74031#file-gursev-final-L5) is an [enum type](http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html) which is used to select what the game is doing and what it can do next. In the class, [`Action`](https://gist.github.com/brownbajwa/fbd43374441417f74031#file-gursev-final-L234) is a [String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html). The [String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html) [class](http://docs.oracle.com/javase/tutorial/java/javaOO/) has a [matches](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#matches%28java.lang.String%29) [method](http://docs.oracle.com/javase/tutorial/java/javaOO/methods.html) which is used to test a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) against the content of the [String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html). I have linked the relevant [Official Oracle tutorials](http://docs.oracle.com/javase/tutorial/) for [Java](http://www.oracle.com/technetwork/java/javase/downloads/index.html?ssSourceSiteId=otnjp). [That code](https://gist.github.com/brownbajwa/fbd43374441417f74031) was written from a novice to [Java](http://www.oracle.com/technetwork/java/javase/downloads/index.html?ssSourceSiteId=otnjp), so by spending just a little bit of time reading them, you will get the gist of it.
https://code.google.com/p/guava-libraries/source/browse/guava-testlib/src/com/google/common/testing/EqualsTester.java
I second this. Its pretty easy to make some good looking GUIs with JavaFX and CSS
So for someone familiar with Rails and it's patterns (or anti-patterns depending on your view) what are the most common tools for achieving the same things in Java. I'm thinking specifically Java EE here unless SpringMVC is really the better option (subjective, I know, but biased answers are welcome). I've had a look at SpringMVC and it seems like a *huge* project of which MVC is a small part. If Java EE was to be my weapon of choice what are the most common tools for things like authentication/authorisation, model validation, RESTful services, ORM (I'm guessing Hibernate here) and security (XSS/CSRF/etc)? I think what's throwing me off to begin with is the sheer size and complexity of it, and it bring an entirely different ecosystem and, in some ways, a very different approach to solving similar problems.
Our company does our best full stack UX work with a relatively simple recipe of custom API choices: * Pick a persistence tier, usually MySQL or MongoDB * Pick a data access layer, usually Spring+Hibernate or Spring Data for Mongo. * Use Spring to wire up some hand-rolled JAX-RS REST services on top of the data layer. We like Jersey as a JAX-RS implementation. * Use straight HTML5+jQuery to wire up to the REST services. Getting familiar with all these moving parts and hooking them all up together takes a fair bit of work if you're not already conversant with them, but we have had great luck so far with this set of tools. It's a very nice, flexible, sustainable balance of custom vs. framework, and it suits itself very well to "in case of fire break glass" circumstances. I.e., the REST services backing the UI are already well positioned for integration with other apps, it's really easy to pull custom code into Spring and reuse it, it's reasonably easy to do 2-way SSL security, reasonably easy to switch databases, etc. etc. etc.
I may have to pick up this book. While I agree Concurrency is becoming a part of everyday programming, keep in mind the different level(s) of concurrency you have by either scalability (through multiple app servers which obtain their own level of concurrency), application types (web services, etc) and an individual java concurrency thread. The possibilities are a lot to handle your needs. :) **Edit: Just took a look at the chapters of this book. I will definitely be purchasing this book soon, as it definitely has everything I mentioned and then some!**
Play looks similar in its approach to what I'm familiar with but new hotness has a tendency to be subject to novelty value. Is JSF the Java EE offering for implementing MVC web applications or is it just another approach?
Out of date can still be useful, since most things with java do have some level of carry forward as well....
Thirded. JavaFX is a doll to work with in comparison to Swing. The ~15 year time difference between them really shows.
If this is just mucking around to learn some java etc... Just hookup to a REST framework ([Restlet](http://restlet.org/), [RestX](http://restx.io/), Jersey is pretty decent as well) -- Everything doesn't have to be an n-tier architecture. 
Does 3 or 4 "tiers" seem like a lot of layers? If so you may prefer PHP to OO code. ;)
EJB 3.0 and Spring aren't really related. EJB is one of a number of different services specified by JavaEE. EJB is a way of implementing remote services, more like CORBA or COM. What the Spring framework offers doesn't really compare. There is Spring MVC, which is a web services framework and a web framework. Which makes Spring in that context more similar to JAX-RS or JSF. These are different JavaEE specifications than EJB. At its core, Spring is a dependency injection container. In that context, Spring is more similar to CDI, another different JavaEE specification than EJB. CDI defines the concept of "managed beans", which are not EJBs, and these are more similar to Spring beans.
That's a great discussion. I agree that having utility classes to handle your own model classes is probably bad. Yet, I don't agree that using utility classes is always bad and the root of all evil. Or an anti-pattern by itself. StringUtils, FileUtils and others make you write procedural code, yes. But is that inherently bad? Let me list some of their advantages: - they tend to be simple: for a given input, you get an output. No object state is involved, thus rendering them thread safe without the need to create a new instance in each thread. Writing a test cases against these methods is extremely simple. Again: one input, one output, and nothing in between. You can't get anything simpler than that. I've looked at the source code of FileUtils, even though it is a big class, each method has a single responsibility and there is no shared state between them. It's easy to read and understand what each one does as you don't need to track where else in the code you might cause or be affected by a modification. - they don't "force" a design on you. This means you can get these utility classes and create your own model freely. The example you gave for transforming files is good until it becomes insufficiente for other peoples' needs: for example, that design assumes Trimmed receives a FileLines (or a Collection of Strings). How would I, as a user of your API, be able to transform a 10GB file if my available memory is limited to 1GB? If you don't provide a way to do that in your design, I'll have to write some code to handle that: probably by reading the line, trimming it, and writing to the ouptut immediately. If your library forces me to handle these situations in your way, and I can't get it to work the way I need, it won't be on my classpath for long. It would be easier for me to create my model, for my needs, if I had a set utility methods that I can organise to create my own model instead. - You can't just write a Object oriented wrapper to wrap every object an API provides and include another bunch of methods. That class won't be known out of your own code and performance will be an issue. You can also get into trouble by passing extended versions of classes around. So you extended java.util.Date to provide extra methods for date manipulation. Now apache did the same. And jboss. How can I have access to features in each one easily? Multiple inheritance? Also, you'll get into trouble when sending the instance of an "extended" out of your own application (serialization will break, a receiving system won't know the class, and so on). It all gets too complicated to quickly. The pure OO solution for trivial things (such as comparing numbers) gets more complicated, unreadable, unsafe and unpractical outside your own domain space. 
JSF implements MVC web applications, but in a different way than Rails. Rails implements an MVC pattern called "front controller" in the Java world, which is implemented by Spring MVC and Struts. URLs map to controller methods where you put your logic which returns a reference to a view. This is MVC which puts the C first. JSF implements another MVC pattern, where URLs map to views, and the processing of the view triggers events in beans attached to the view through bindings specified in a language called "EL". This is MVC which puts the V first. JSF and front controller are two different approaches. The standard approach is JSF, and the advantage of the standard are the number of very high productivity component frameworks are built upon it, the most popular of which is Primefaces. Also, seamless integration with the rest of the JavaEE stack. The front controller approach is a bit more hodgepodge, with no standard integration with other JS frameworks. If you're used to Rails, you're probably used to this already. Spring doesn't have ActiveRecord, but it has bindings to JPA. Another framework, Grails, has something called GORM which is much like ActiveRecord.
How much will you pay?
EJB is a spec. Spring is a bunch of pre-written, easily configurable/extensible code written for you to use to help you do shit faster. It has easily extensible classes, great coding pattern support, great support for other libraries, etc. Spring is like-- oh man I need a transaction manager, oh wait, Spring already has one I'll use theirs.. three lines of xml or one annotation later and bam, you have a sweet transaction manager. Or like, I need to use the factory pattern-- should I write my own factory? No, no no no, spring has one, clicky clicky typy type bam, got a factory pattern making me new objects all day err'y day. Dependency injection is just a way it helps you organize / implement your shit. It's nothing spectacularly clever-- just an easy way of doing things-- though I'm more fond of annotations now than xml. Dependency Injection is just some hot ass word for creating objects via xml. It lets you change things w/o having to re-compile things-- you know, for all of the .01% of the time you need to do that :) (but sometimes it's totally badass and the best thing when you distribute shit to clients). I wish I could describe how I choose to implement some things in XML and some in annotations-- I don't know why, but I definitely do some things one way and some things the other way and it's great and makes sense.
I would suggest doing custom animations on the canvas of a JPanel. But it's tricky -- I've done that sort of thing before to make images move around like in a Netflix UI. I'm very curious to hear what you're building ... is it just a programming experiment or are you building this for a specific product?
If you aren't already using an IDE (like IntelliJ) or build tool (like Gradle), I highly recommend doing so. That will save you a great deal of headaches, particularly when it comes to classpath and compilation, and should make common conventions and assumptions on the part of java more obvious.
I downloaded them in a zip. They both say "package providedCode" at the top so they're supposed to be part of the same package I think.
Um, I use Crimson editor to code and run in the Windows Command Prompt and that's always worked fine for me.
Are you running it full screen? In that case, you can just set the full screen frame to have specific column and row sizes. 
Which class? The class that it relies on? Or the class that I'm trying to compile but can't?
I could run it full screen. But what I would prefer to do is make it stretch, like if you have a low resolution picture and it scales to your display size, it might look crappy by my X an Y won't be screwed up Pretty much the game will be designed in one resolution.
The description said you can use brute force, so you should try all valid combinations. Take the combination of the size-1 for the number of moves the user wants you to make. So if you have 3 cups, and someone enters "f 1", you should try moves: e 0 e 1 e 2 if any of those result in an "solved" state, return it. It will grow pretty large for large inputs, but again brute force is okay. P.S. Do you want my paypal account or how do we transact? :)
Based on my short attempt to use Android Studio, Maven =&gt; Fast and doesn't hog all cores.
Neither. My original answer had a typo - there's no space between class and path. I was referring to [class path]http://docs.oracle.com/javase/tutorial/essential/environment/paths.html). The -cp option allows you to set this classpath. 
What kinda of loops/recursion do i need to set up if they type say, f 4 Because then we get need to empty every cup of a cup that's been emptied..
&gt; Isn't the whole concept of final in contradiction with interfaces? It is, but it doesn't have to be. The essence of the EG's rationale behind the current status quo is to provide at least all means necessary for API evolution. Making interfaces more like traits was not the main goal (i.e. not a goal at all).
javac DataCount.java That works. Now javac SimpleIterator.java does not compile, saying cannot find symbol: class DataCount. But I just fucking compiled that class and it's in my folder. What more does it want from me?
It actually started (currenty is) as a test review for learning event driven programming also, my movie collection is cluttered and i wanted to organize it programatically; the best way i thought was to visually represent the movies to see which ones i have, the ones i have already watched and additional info regarding each title. I have a very basic prototype, but i hope to improve it and have a working product over the summer. 
Take a look at http://www.ninjaframework.org/ . Get started with few samples and see if it suits your needs.
Jokingly, I'd suggest just using XBMC. Semi-jokingly, I'd suggest looking into HTML/CSS/JS.
Try making a Web interface with Vaadin. It's written in very much the same way as swing and looks infinitely better.
I don't use Netflix but I have written an application which does what you want. Here is a previous [post](http://en.reddit.com/r/java/comments/1yo5re/what_is_your_most_interesting_program_youve/cfmfvwd) about it.
You can use EJB's from spring both locally and remotely so it's really just like using another bean. We recently used a bit of spring integration on a project where we dumped messages onto a queue from there distibuted out to a glassfish cluster to have EJB's process the data.
I think you want to compare Java EE7 with spring. EJB is just a subset that doesn't really offer that many points of comparison.
JavaFX seems to have some really nice features to make the user interface interactive.
hi, ruby and java programmer here if you are familiar with ruby and rails... i think you should go with groovy and grails... you will be surprised at how familiar they are :)
The comparison is likely between EJB and Spring Beans. If you really meant something to compare to the whole Spring stack/framework it'll be Java EE vs Spring. Since both Java EE and Spring are HUGE this would be a looooong story. In modern Java EE, it's also not just EJB, it's mostly EJB + CDI. Both are Java EE Managed Beans. EJB itself is a really easy and powerful component model, plus a bunch of services like injection capabilities, asyncronous methods, transactional behavior and things like a timer service. CDI is another component model, that's more ala carte. It has more advanced injection capabilities and a more explicit notion of scoping. The CDI and EJB models are integrated in Java EE in that CDI scopes can be applied to EJB beans and CDI injection can be done in EJB beans, but some services like the timer service and the asynchronous methods can only be used in beans that are (also) EJB beans. Compared to Spring the Java EE Managed Beans are richer and easier to use. There are more scoping options, and injection is more powerful; it's type-safe and contextual. First and foremost CDI has been anti-XML from the start, while Spring wanted you to write ever increasing amounts of XML. Only very recently has Spring started to follow Java EE's lead. I would personally always consider Java EE and CDI/EJB first. 
Or [Brainfuck](http://en.wikipedia.org/wiki/Brainfuck)? Hello World: ++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.
Tried to migrate my project from maven to gradle several times. 3 years ago that was a blocker: http://issues.gradle.org/browse/GRADLE-784 . A month ago I tried again and the issue still in progress. Yes, there are several hacks around... TL;DR tried; no "provided" dependency scope; still waiting for the bright future.
You're talking about scaling with a fixed aspect ratio. Step 1: switch your rendering loop to paint to a backing store. You'll probably want a BufferedImage with a colour model that matches the native display's model. Step 2: at the end of your loop, figure out what the necessary transformation is to make your backing store fit on your actual display. Step 3: paint your backing store onto the actual display. You'll want to do some experimentation to see which scaling methods perform best in your environment. Recognize that this technique will not change the coordinates of input events...
If thats your only blocker you have some options. If its a war project you can use the providedCompile scope. Otherwise check out the the propdeps plugin https://github.com/spring-projects/gradle-plugins/blob/master/propdeps-plugin/README.md
thanks!
Does anyone know of some other security frameworks that are not application server specific? I use Spring Security only for lack of a better option. It works fine but I do not like that it adds huge amounts or garbage to the stack trace when there is an error. I also dislike that it is heavy weight and not really very modular. It requires 11 Jar files and a lot of stuff that is not really needed if you are only want security. I know there is Apache Shiro but have not had a chance to try it out.
Thank you, I know about propdeps plugin, but prefer to wait for first-class support for provided dependencies. The issue with plugin is that other plugins are not aware about it (like you need to add eclipse.classpath.plusConfigurations += configurations.provided to tell eclipse about new type of dependency). 
Where are you compiling from? You should edit your post with your file hierarchy to make it easier on us.
Just use an IDE. IDE and text editors are all tools. There is literally no reason to stick to a method and deal with basic compile issues for hours when a few minutes in an IDE can get your program running. People don't use Vim because it's inherently complicated or because text editors are more traditional. People use Vim because after the learning curve, they can program much faster than in a contemporary IDE. If you're sticking to a tool for some reason and you're sinking hours into a basic problem, then you're not using the right tool.
It's apparently not working fine if you made this post.
Exactly, also I usually use the JPA annotations on my CRUD code over the Hibernate specific ones because I like the way they're worded, but now that I'm thinking about it, JPA2 isn't in the EE spec anymore, is it? 
Oracle has a lot. http://docs.oracle.com/javafx/2/get_started/jfxpub-get_started.htm
Im not quite sure what the lesson is here. Did I miss something? Nothing that he's said hasnt been written about before. Dont get me wrong. He's one of my goto people for knowledge. Just not sure what this post is about. 
As others have said, you'll save yourself a lot of unnecessary headaches if you use the tools that are out there. There's no reason to manually compile when Java has such a rich ecosystem of tools built around it. Moreover, if you have any plans to use Java professionally, you'll need to familiarize yourself with these tools anyways. This issue you're having compiling is a perfect example. It doesn't work because your other class isn't on the classpath. A build tool or IDE would manage that for you, making it a non-issue.
As a side note, because you are using JFrame and not Frame, I am assuming you have a swing project. Please, for the love of java, do not use a null layout. Hard coded component coordinates are a nightmare to work with. Just don't. Set your content pane to a border layout. Now, think of the center of that border layout as your new content pane. Don't use the sides. These spaces will accommodate a menu bar that you can move around. For everything else, I like JGoodies FormLayout. If that seems too complex, you can accomplish almost all of its features by nesting JPanels with different simple layouts. If you use Eclipse, use Windowbuilder. I work with swing. I don't consider layout managers to be optional. 
Just noticed this was an unnecessary x-post from /r/programming :-(
BorderLayout, as well as most others, automatically resizes it's contents to the preferred size of its parent container. Meaning, if you make a JFrame, set it's preferred size to 500x500 and then add a label to the center of your border layout, you will have a 500x500 size label. Alternatively, and my preference, is to set the preferred size of your sub component (your label) and then call myJFrame.pack(). This will auto-resize your frame to the smallest size that fits your label. For multi screen compatibility, you can either design different layouts to use or decide on the smallest size you support and code to that. If I make a window with a main view and some buttons on the side, that can resize fairly elegantly to any size screen. Decide which parts should resize. Your labels should not be smaller than their contents. Text areas and canvases can be wrapped with a JScrollPane. 
Not sure if that would work for me. I need the jlabels at exact stops and changing their location by even a pixel wouldn't work.
He probably just wanted to survey the field regarding the current discussion about the vitality of Testing. Myself, I don't care too much if my full test suite runs in 1 or 300 seconds, since I use [infinitest](http://infinitest.github.io/), which runs only the tests pertaining to each change automatically once I hit save. Also I think there is a sub-point he misses - where the assert statements belong. I usually try to put generalizable assert statements directly in my code (which has the benefit of being validated with every run, not just under unit test conditions, also as they are mixed with the code, they are less likely to go out of sync when the code changes).
Up until "Compared the to Spring the Java EE Managed ..." I was really digging the richness of the post. I tend to see them as extremely similar toolkits that can both get the job done. I actually find that CDI is a lot more complicated to deal with, and I can only think of one instance where Spring DI falls short of other frameworks: Guice sees the difference between: @Inject IService&lt;Component1&gt; component1; @Inject IService&lt;Component2&gt; component2; Spring requires you to use the actual variable names to distinguish between the two (which isn't always possible) as it only sees the IService and not the Generic. I have no idea if CDI can handle that scenario though.
&gt; JPA annotations on my CRUD code over the Hibernate Hibernate/eclipselink/etc should all comply with JPA 2.0/2.1 depending on what implementation you are using. BTW have a look at http://projects.spring.io/spring-data-jpa/ to avoid tedious DAO plumbling layer. &gt; JPA2 isn't in the EE spec anymore It should be. It is a core technology of JEE. Latest version is 2.1 via JSR 338 https://jcp.org/aboutJava/communityprocess/final/jsr338/index.html
I mean in situations like when using a JMenu and each menu item has a listener attached. What would be the best approach performance wise...
I would say it depends. For internal app where nobody cares that much about UI/UX then perhaps it is ok. For external product especially in the context of mobile web I would say no. I am working in Vaadin project and used to work in GWT one in the past. I can honestly say that GWT was chosen there to save on proper web design and development. Maybe not all projects are like that but I just can not imagine doing hot startup project in GWT. 
I would probably make one action listener per action. The [Single Responsibility Principle](http://en.wikipedia.org/wiki/Single_responsibility_principle) says that each class should do one thing and do it well. This doesn't even come near to being a performance issue. 
I use Shiro. Not a huge fan. It is better in some ways than Spring Security, but it is still very awkward to use with regard to permissions.
They came in a folder called that. I don't understand what "compile from outside that folder" means.
If you want to PM A link to the file I can take a look
I would start with Spring Boot. It's meant to compete with Rails in terms of simple setup. Are you hoping to build a REST API? If so, it's hard to beat Spring Data REST. It's much better than the Java EE equivalent. JDBC = standard for database access. JPA = standard for ORMs to follow. Hibernate = implementation of ORM that follows JPA. JSF = component-based web GUI framework like classic ASP.Net, not really like ASP.Net MVC. Java developers prefer the DataMapper pattern over ActiveRecord. 
Let's say you are in folder %FOO%. Place your java files in folder %FOO%\providedCode, and compile them using javac -cp %FOO%\providedCode. 
... what was the error message? You do realise that no human is psychic, right?
That just seems like a feature list and not a list of reasons. A big reason not to is that my deployment target doesn't have 8 installed on it and probably won't for a while.
That is pretty much our reason for not moving today. We have a load of legacy stuff that is tightly coupled and required. We currently are on java 6 and are looking to move to 7.
If you have many "similar" buttons you can try to use [actions](http://docs.oracle.com/javase/tutorial/uiswing/misc/action.html) &gt; Just wondering if this actually has any effect on performance. Yes, but nobody will notice a 10 nanosecond delay ;)
DHH, with Kent Beck and Martin Fowler will be at Google Hangout, to talk about this... check this: https://plus.google.com/events/ci2g23mk0lh9too9bgbp3rbut0k and btw, anyone of you who wants to see the keynote from DHH: https://www.youtube.com/watch?v=9LfmrkyP81M
* Firstly: your code is Javascript, not Java. Yet another "programmer" that can't be assed to tell the difference and apparently thinks "eh, close enough". You might try /r/javascript . * Secondly: you might want to extend your question if you expect answers from anyone. Your "question" doesn't explain the problem you're having.
 * The for loop is incomplete. You need to add an incrementer value to the *yi* variable. For example: for( var yi = 0; yi &lt; getCorrect; yi++ ) * To run javascript you can (A) copy the code and paste it into the browser console (B) create a bookmark with the code, then when you click the bookmark the code will run. * To have it run one time every time you run it, each time you run it, run it once. For future note: **Java** and **Javascript** are not the same language. This subreddit is for java.
check out the comment by /u/freakooo here http://www.reddit.com/r/java/comments/24ump8/about_unit_test_by_martin_fowler/chb689b . Basically DHH recently came out and said how unit tests and TDD are shit in not so many words. So a lot of people have recently come out and commented on the overall practice.
Thank you, I used BlockingQueue and it works beautifully!
I don't think anyone is talking about getting *rid* of primitive types, only unifying them with objects so you don't have two separate representations (the author acknowledged this on the second page). Scala unifies types, but on the JVM, which itself does not natively unify types. I would have been interested in seeing how his example performed in C#, because the .NET CLR does natively unify types.
Firstly look at task manager while this is happening. Sort your processes by CPU. This might shed some light on the matter. My bet is MCShield or some other virus scanner is scanning the hell out of all the jar dependencies.
We already are :( thanks for the help though
Both operating systems show about 10-20 percent CPU overall and barely any of the ram. It's a fresh install of 8 I just did a week ago and performance issues are similar across 3 computers, we also had the issue on a mac
http://indeed.com is the best site for finding jobs. It's not a job ad website itself, but rather a job search engine
&gt;Does anyone know of some other security frameworks that are not application server specific? Uhh, JASPIC, which is already part of Java EE?
The idea of different jvms crossed our mind, we've tested it on 3 different Linux machines, 4 Windows (3 of them were dual boots) and on a Mac and the issues were exclusive to Mac and Windows. However I guess it is possible. Not sure on posting code since it's a final project. I'd have to ask my team. And I'm not entirely sure about the event dispatch thread, I do believe we are having the buffered image generated in a separate thread. The lag comes entirely during DrawImg nowhere else, if that helps.
Java2D has some pretty neat optimizations build in, like to use OpenGL for some of the drawing. The big problem with this lib is the unpredictability. I guess that somehow hardware acceleration or some other optimization is triggered on the linux system and not on windows. You have to do some googling, but I think there is a system property flag you can set to force Java2D to use OpenGL in more cases.
That was actually something we were about to try! Thanks 
not sure about intelliJ, but for eclipse, you right click on the .java class and edit the argument for it, maybe it's similar for intelliJ?
Open up the project folder in IntelliJ, then go to the menu -&gt; Run -&gt; Run -&gt; Select the .java containing your main method
Interestingly enough, taking the bufferedImage method out of its own thread dropped the delay to 40 with spikes still of 200-300 (ugh). Yes, we are using artwork, each piece of artwork is saved as a PNG and is a 64x64 image. As for the Event Dispatching Thread, still looking into it.
Tried, but sadly it didn't work. I agree, Swing/AWT can be a nightmare, I recall a GUI displaying differently between my Linux machine and my Windows one...
We're thinking about forcing OpenGL (since that is what Linux uses and it works) but a bit unsure how to do that, sun.java2d.opengl=true won't work. All of the items to be drawn are set to buffered images, and the only way we've determined it to be the draw function is by getting the system time right before our "g2.drawImage" line and getting it directly after, which shows the delay. We aren't too experienced at this yet, just second year CS students.
Comprehensive summary of app servers Arjan! You may want to rename JBoss to WildFly or JBoss/WildFly. JBoss is EAP and that is only Java EE 6 compliant. WildFly OTOH is Java EE 7 compliant. Also the complete list of Java EE 7 implementations in WildFly is listed at: http://blog.arungupta.me/2013/10/java-ee-7-implementations-in-wildfly-tech-tip-3/ Batch implementation in WildFly is not Batch RI, instead its JBeret (https://github.com/jberet/jsr352).
If you have some sort of Thread.sleep in your code then that might be your problem. It is unreliable on Windows.
We almost certainly have a winner here. Elsewhere in the thread, OP says they're using a backing store and then painting it to the screen. If the color model of the store and the display are incompatible, the performance of a 1:1 image paint operation suffers terribly.
Apache math commons has a solver. Keep in mind though that most good solvers are written in C/C++. 
Are you sure Java is the right tool for this?
I know it's not now, but I started the course thinking java would be fine for everything we were going to do. So i'm not trying to learn a new language just for this project.
This may help but for me I find more math related libraries in C/C++ and Python. http://www.mathtools.net/Java/Signal_processing/
If it helps, [MIT open courseware](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-011-introduction-to-communication-control-and-signal-processing-spring-2010/readings/MIT6_011S10_chap10.pdf) has a chapter on Power Spectral Density. [Here](http://www.mathworks.com/help/signal/ug/psd-estimate-using-fft.html) are power spectral density estimates in matlab.
that doesn't mean anything.
Well, what are the steps you'd take to solve that equation? You'd need to parse the string, identify where the variable x is, then isolate it by moving any other values to the other side. You see that the 4 is positive, so you'd need to subtract both sides by 4. Then you'd have 4 = 5x. So then you'd take x = 4/5. Start out simple, then add sophistication. I imagine since it's a beginners class, you don't need to solve the best of equations.
As I see it, there are three steps to this problem: 1. Find the formula for solving linear equations. 2. Get the values of the parameters for your equation (by parsing a string or having the user input them). 3. Plug the parameters into the formula.
wildfly is latest version of jboss. 
Uh.... You shouldn't need to create an exe. In the export menu there is an option to export the class as an executable jar file. As long as your friends have java installed (they should) then it will run.
Why would they need eclipse? Just compile it and give them the jar file
Might want to look into fatjar if you're including external jar files.
I wouldn't assume that op's friend has Java installed. Most people don't unless they have a reason for it to be installed. [this]( https://github.com/libgdx/packr) might help. It packages the jar with a version of Java so it runs without the user having to install Java on their own. Not sure if it will work with what op has setup though. 
I just tried this, (after ALSO removing the buffered image method from its own thread) and it's down to about 40ms with 150 spikes, a bit far off from Linux's 3ms, but it does seem to be helping, little by little. My teammate created a stackoverflow thread with 2 snippets of our code [here](http://stackoverflow.com/questions/23508187/javas-g-drawimage-takes-significantly-longer-on-windows-over-linux) (he's the one who did all the drawing code anyways) if anyone would like to further help us, other than that, thank you everyone for all your help!
This is absolutely the way to go in my book too. You can put the equations into a 2-dimensional array and then use basic Java Matrix libraries, such as JAMA, or even hand-code some matrix logic to solve those equations. For school (GT Yellowjackets!) in my Calc 3 CS-oriented class we had a lot of matrix programming homeworks and I would absolutely be able to help OP here!
I'm pretty sure what you described is the exact use case for Packr: https://github.com/libgdx/packr. Give that's try.
I enjoy Devoxx. You can watch talks at parleys.com.
Check out linear programming and the Simplex algorithm. EDIT: It's easy to represent a linear equation with inequalities, and vice versa. I'm not saying Simplex is the only thing you can use, it's just one option for solving systems of linear inequalities or equations.
Linear programming and simplex are for linear inequalities, not linear equations. The best way to algorithmically solve linear equations is through gaussian elimination.
Plus https://plus.google.com/+googleguava/posts/65tNpyh1wLr
+1 I thing every serious Java developer has to have read this book. 
Effective Java Java Concurrency in Practice Java Puzzlers The Algorithms and Data Structures course on Coursera (Parts 1 and 2) Generics and Collections, Oreilly Java Performance Tuning. 
&gt; but on the JVM, which itself does not natively unify types. Who knows if [value types](http://cr.openjdk.java.net/~jrose/values/values-0.html) make it into JDK 9, though ...? (also cited by the original article at the end)
In Chicago? That might be a deal killer. 2 weeks there 2 weeks home would be great.
Would they consider someone looking for telecommute positions or does it have to be onsite? I'm looking for more work, but would only be available as a contractor.
Yes, i am going to cross post this to couple of other subs.
Good till end of May. Please upvote and share. Thank you!
Was afraid of that it wasn't telecommuting. Ah well, had to try.
[No Fluff Just Stuff](http://nofluffjuststuff.com/home/main) [http://nofluffjuststuff.com](http://nofluffjuststuff.com) Only part of their content is available if you haven't gone to the event though. 
The interesting question would have been: why Spring and not something else like Guice (DI, AOP) + some message bus + some other libs or Java EE (which is lightwight in the authors sense too).
Could it be that having Chrome open just forced your GPU or CPU into performance mode? I have seen adaptive power scaling misbehaving often enough when I did performance comparisons on C++/OpenGL code. 
Usually in a simple game loop you do *nearly* everything in a single thread so you can easily manage everything. For example, you would move each ghost one at a time. Having the ghosts move in separate threads could cause a race condition of two ghosts trying to be in the same spot (though technically I think this is legal in Pacman).
How do you prefer to initialize singletons?
If I was to create my own pacman game, I'd put all moving objects into separate threads. It's much more versatile in my opinion. In the future, you might want to initialize a game with 20 more ghosts, 5 ghosts being really smart and 15 being dumb. Something like that. 
I feel bad for people stuck working with JSF.
I'm happy to hear about the data table updates. We use that component heavily and any improvements will have a direct impact. The ScrollPanel also sounds useful.
I don't know... I guess some way that doesn't create race conditions?
It's not so bad. A component-based framework allows you to create CRUD apps very quickly, which lets you focus more on the business logic behind the scenes.
I feel bad for people thinking things about JSF that aren't true and therefor missing out on a really great framework.
yes, there is: in the main loop you pass the elapsed time (in ms obviously) to your animated objects, and they calculate their movement from the time difference, not from incrementing counter in the loop. Distance = speed * time difference between frames.
Interesting, I'll look in to that.
/target for starters. Which IDE?
Seconded. I cannot recommend this enough. It is not only a great Java book, it is a great programming book, regardless of your language.
Where is there a race condition? I thought the method presented on the page you linked was the right way to handle it (Although there seem to be many people switching over to [enum](http://en.wikipedia.org/wiki/Singleton_pattern#The_Enum_way)s these days, there's also an [answer](http://stackoverflow.com/a/71399/3004221) on Stackoverflow for this).
You may want to read [game programming patterns](http://gameprogrammingpatterns.com). It's based on C++, but applicable to Java as well.
I consider reddit a tool. You can look at cat pictures all day long or learn new things. It totally depends on how you use it. 
The github hosted gitignore files are a great place to start. Very useful.
Actually I found a [wiki paragraph](http://en.wikipedia.org/wiki/Singleton_pattern#Eager_initialization), a [stackoverflow answer](http://stackoverflow.com/a/3635619/3004221), and a few different blogposts (Examples: [1](http://regrecall.blogspot.de/2012/05/java-singleton-pattern-thread-safe.html), [2](http://javarevisited.blogspot.de/2012/12/how-to-create-thread-safe-singleton-in-java-example.html), [3](http://www.javaworld.com/article/2073352/core-java/simply-singleton.html?page=2#drr-mod-1). Especially the third seems to be worth reading, I'll do that later) which claim that exactly that pattern you linked is thread-safe already. Though they never refer to your argument of accessing it in a try-catch situation, they usually claim that statics are initialized by the ClassLoader before everything else happens, which should resolve your try catch problem.
They disappeared, it seems that not intentionally. There is a JDK bug for it: https://bugs.openjdk.java.net/browse/JDK-8039151
These are the best books I've read on the care and feeding of code bases in general (but Java in particular): * Clean Code - Robert Martin * Domain Driven Design - Eric Evans * Refactoring - Martin Fowler I recommend those because it's not enough to know *what* to write, you have to also understand *how* to write it and *why*. The last book I'm recommending is a classic on the craft of programming in general, and I'd recommend it to anyone: * The Pragmatic Programmer - Hunt/Thomas
I'm going to give you the same benefit of the doubt I do to any comment making this kind of statement about JSF without giving any reason, and assume that you're thinking of JSF 1.x. 1.x was a royal pain in the arse to work with - 1.2 had several steps in the right direction, but was still a nightmare. 2.0 was a massive step forward, and the additional features added since then have been very welcome. Throw in that CDI beans can be used as backing beans from EE 7 onwards - plus fantastic libraries like PrimeFaces and OmniFaces - and it's incredibly quick and easy to set up non-trivial pages. If on the other hand you were referring to 2.2, I'm intrigued to know your reasons for thinking JSF is still bad.
That's perfectly normal... logical coordinates and screen pixels do not have to be the same. If storing your coordinates normalised (x and y go from 0.0 to 1.0) floats your goat, that works as well... you just have to scale them before drawing. Also that way you are not dependent on window / screen size.
Excellent find. Thanks!
I'm using STS. Right now I have : target .settings .project .classpath .springBeans 
great resources, thanks!
Core Java I &amp; II are great references I think. They helped me a lot before moving on to Effective Java. Even if I didn't read every line, they covered in good depth most of the language, including examples.
Actually, the question should be: why should anybody use singleton at all. From my experience singleton may seem like the great solution for many problems but in reality it causes more problems than it solves. 
That was discussed in the second part of the article. Namely, the ecosystem built on Spring's DI container. I think Guice's DI is much better than Spring's DI, but Guice doesn't have an ecosystem even close to what Spring offers. The better comparison would be against JavaEE. The author lists all of the projects associated with the Spring Framework which built on top of Spring's DI. These projects offer a lot that is not covered in JavaEE, such as integration with big data (Hadoop), NoSQL (Mongo), social (Facebook, Twitter) and security services (OAuth).
What problems have you encountered with singletons?
Thanks for posting this is a nice article. PrimeFaces is so nice to work with.
I would imagine people who prefer working with controller-oriented MVC (e.g., Rails, ASP.NET MVC, Spring MVC/Struts/Play) would find JSF's view-oriented MVC painful to work with. Different strokes for different folks.
upvoted for cat pictures.
I sent them an email shortly after, noting the page in my original post, since the issue seemed to have been 'stuck' with nobody knowing that. It looks like there has been activity on the issue since, so it appears it might get resolved. We participated! :)
Can anyone provide specifics on why JavaOne is good/ bad? Is JavaOne only about Java, or are there a reasonable number of sessions regarding other JVM or related technologies like Grails, Scala and Javascript client development? Is it just a marketing pitch for Oracle and their sales partners or do you get a real-world, balanced look into how and when to use the technologies demoed in the break out sessions?
OmniFaces is a wonderful library, i used it a lot, but tell me &gt; Tired of reinventing JSFUtils or FacesUtils utility classes for every JSF web application and/or homebrewing custom components, taghandlers, etc to workaround or enhance some general shortcomings in JSF? &gt; OmniFaces is a response to frequently recurring problems encountered during ages of professional JSF development of the JDevelopment team and from questions being asked on Stack Overflow. how good is JSF if you must use another library which contains basically fixes and workarounds for it.
Usually in a game, you want everything to stay perfectly synchronized with each other. Imagine that you have Pacman and 1 ghost, both moving the same speed, in a race against each other - whoever gets to the end first wins. With threading, it's completely repeatable and predictable. You move the Pacman 1 unit forward, then you move the Ghost 1 unit forward, then you move the Pacman 1 unit forward, etc etc. They're always moving at exactly the same rate. Using separate threads, it is not. Your threads could be interupted by other slightly higher priority threads, your thread could get slightly less or slightly more time than another thread, etc etc. Especially when things get complicated with lots and lots of threads, you can end up running the race and sometimes Pacman wins, sometimes the Ghost wins, and sometimes they tie. As another poster said, once you add in multiple threads you run into the headache inducing world of race conditions that happens sometimes, don't happen other times, and can lock up your whole app. I would personally always prefer a single thread over multiple threads - every time - unless there's an overwhelmingly large benefit to using multiple threads.
You could certainly use Thread. However if you have multiple threads you need to synchronize behavior and communication between them. e.g. did a ghost catch pacman ? And there is no implicit guarantee that all threads get the same amount of compute time ( nor that your simulation of each characters USES the same amount), so you need a way to ensure that too. So I think it's actually a poor approach. Now if pacman was actually a compute intensive game, then you might be able to justify the complexity. But it's not. It originally ran on something like a 3Mhz z80 processor. Your computer is probably about 500 times faster. So eschew complexity!!!! You want your game to run at a predictable rate so that it's playable in "human" time. So you want to introduce the notion of a "tick" Each time should be a known amount of time. Say 1/60 of a second. Create a main loop which will execute once, and then _wait_ until 1/60s has passed since the last time the loop started. Now in that loop, you might have a list of "executable elements" Each of these elements should run once for each tick. You could _think_ of them like threads, but because there is no implicit assumption that they could be run AT THE SAME TIME, the complexity can be far lower since you know only ONE will run at a time. Now each character could be a "executable element". 
I tend to use JUnit to provide many usage examples, because hey, it's an extra unit test or integration test. If what I'm trying to communicate or illustrate goes beyond the scope of an integration test, then I'll try to work it into an example project or other documentation.
Are you a software engineer? If so, certs are a good way to get your resume thrown in the trash.
If your employer is willing to pay, then I'd pick the most expensive ones and the ones that are most likely to get you noticed. But I think in the Java industry, a certification doesn't mean much. An active GitHub repo is probably more important. A potential employer is more interested in what you built, why and how. Instead of answering a bunch of multiple choice questions. Definitely go do whatever tests your employer will pay for, but at the same time start working on your portfolio.
I think it works very well for a certain use case: internal crud apps. If you need to do something out of the ordinary it can be a pain but those types of apps tend to be very simple and jsf makes it super fast and easy to write that stuff. 
http://pastebin.com/jVXfwLDE Sorry, is this good?
The instructions are right above the missing code. For the first one, you are supposed to initialize the instance variable. Do this by creating a new instance of the array list. The second one requires you to add each method parameter to the array list. Use the method ArrayList.add(&lt;T&gt;)
Partially you're right. OmniFaces provides fixes for things that should have been in JSF itself. I'm particularly thinking about the exception handler and utility methods for setting a faces message. Then again, Java has its Guave too, and its Apache commons and its... Is Java not good because of it? For one the existence of third party libraries also means that there is a vibrant community around a product. Then the point can be made that quite a lot of things are possible in JSF to do with third party libraries since JSF was designed with them in mind. One thing they did right straight from the start is the extensibility system. Nearly everything in JSF is wrappable, pluggable or replacable. This holds directly for libraries like PrimeFaces and RichFaces (it was the explicit goal of the JSF project that such external libraries would be created; i.e. JSF wanted to enable a marketplace of third party widgets able to interoperate).
SemVer is definitely catching on, Rust, for example, has it built in by default. I've been using it for a while now; I'm glad to see it picking up speed. I *am* planning to make an Eclipse SemVer provider, I haven't looked at any others yet. I wrestled with the `prere` thing for a while; I decided to make the public API use `prerelease` and keep the internals short. It was a pain to keep writing prerelease, and now all five major components have five-character identifiers, which makes the code easy to scan (for me, at least). Thanks for the feedback!
Do you have a blog post or something that shows an example, especially it would be useful for people (like me) who are new to SemVer
They aren't really Unit tests as you say, but they arguably could be used as Integration or Verification Tests and there's no harm in using JUnit for writing those. Alternatively, if you don't want them to run on every build, why not have a bunch of classes under your tests that are not automatically picked up, and are all Main classes in their own right? There's nothing saying you can only have one Main class in your Jar and then anyone can look at and run them easily enough.
Java 1.9??? I think I slept longer than I thought!
I would be careful with the license here. Your semver.md implies it is Creative Commons, but it looks like its LGPL. Thanks though it is a good idea. Will give it a try at some point.
Lambdas by themselves save you some typing, but currently they're effectively sugar for anonymous inner classes. (Under the hood there is scope to change that in a forward-compatible manner) The really big change arrives with the concomitent libraries additions: streams. It's now a one liner to filter and group a collection, and similarly trivial to apply a complex function in parallel. Was any of this impossible pre-lambdas? No. But it was complicated and, of particular significance, error prone. Try getting fork-join to work first time in java 7, or even reasonably complex collection manipulation. 
Why have you posted this here?
It is not really about what YOU can or cannot do with lambda. It is rather what the COMPILER can do for you. Lambdas are not simply translated to there equivalent anonymous class. They rely on **invokedynamic** which means that they will benefit from any speed improvement that the JVM might bring to this instruction in the future.
&gt;is there something that would be ridiculously long/complicated had I been unable to use them? As others have said, inner classes are the replacement. However you cannot use anonymous inner classes inline in a way that doesn't potentially leak memory. With lambdas it is possible to write your lambda code in-line in a way which doesn't allocate a new object every time it's invoked. I recommend pure functions or the "arbitrary method method reference" style. Either of those will accomplish this.
Can Java's lambdas generate SQL queries a la C#.NET's LINQ?
You can potentially annoy the other people who read your code by overusing them! Source: someone I work with loooooooooves guava functions. 
Good place to start would be some of the LINQ stuff in .Net. http://codefoster.com/linqlambda
The thing is lamdas in Java 8 are NOT simply syntactic sugar. It wouldn't have taken so long to add them to the JVM if this was the case. There was a great explaination by Brian Goetz about this during the Java 8 launch will try to find the link later, on mobile now.
&gt; There's nothing saying you can only have one Main class The problem is not multiple Mainclasses, but the need for a boilerplate with Guice initialization in each of those. I wanted to keep demos as short as possible.
... Based on 800 plumbr users.
I believe not. To put it simply and crudely (and a little inaccurately), C#'s lambdas are translated into an expression tree, which allows it to be turned in to SQL. Java's lambdas are more akin to syntactic sugar for functional (single method) interfaces.
So have a base class or a static helper class with that boilerplate in it. Then you can have your main method have a single line to call the helper method and just hide it all away. If it were me, I'd be tempted to have an abstract base class that claims to implement Runnable - but doesn't actually implement run() - that does everything necessary in the constructor. You could then have your individual tests look like this: public abstract class MyBaseClass implements Runnable { public MyBaseClass() { // Set up Guice here } } public class TestA extends MyBaseClass { public void run() { // The actual example code goes here } public static void main(String[] args) { new TestA().run(); } }
I know this doesn't really help much, but I've come to find that usually if you are calling the repaint method, you are doing something wrong. For example, if you click a button which is supposed to change the contents of a ComboBox then you are supposed to call one of ( fireContentsChanged, fireIntervalAdded, fireIntervalRemoved) in your ComboBoxModel. This will bubble the events up properly and the GUI will repaint itself. Though a quick look at your code shows you are doing 2D drawing so maybe I'm off...Most of my Swing experience is doing application GUIs working with Swing components and not so much raw drawing.
One of the primary problems with Guava stuff is that Java makes it so damned verbose. Once you can reasonably expect everybody to have lambdas, I expect it will be far nicer to read, and perform better to boot.
This is sort of what aastle wants: http://www.jooq.org/
Yeah that's it public void repaint() Repaints this component. If this component is a lightweight component, this method causes a call to this component's paint method as soon as possible. Otherwise, this method causes a call to this component's update method as soon as possible.
I'm no math guru but I've taken several classes on theoretical computer science and here's my understanding. I don't know all the technical terms so bear with some. Calculus is computation. There are several methods of computation. For example, the idea that something is Turing Complete means that it can perform all possible computation. Another way to perform computation is in lambda calculus. Now it turns out that both calculus are probably equivalent and both cover the same domain. This means that you now have two ways to compute everything that is computable. In fact there's plenty of fundamental ways to perform computation. As it turns out, most languages are based on the Lambda calculus because Turing machines are a pain to program. Imagine if all you had were left and right operations and read and write a to tapes? Now imagine all you had were functions and types?! That's lambda calculus. A lot more familiar than it seems right? The thing about lambda calculus isn't that it's the magic save all of computation that somehow magically opens up the domain a little bit. However, it does mean you can do computation in a different way that MAY or may not be easier to compute and understand. It's just like the conflicts between iterative and recursive (think tree transversal, ie parsing json). Or even the difference between imperative and declarative Programing (think constraint logic) 
- Don't call repaint from inside paintcomponent - Use proper naming convention: I.e. Methods start with lower case letters - What happens when the program runs? Any of the messages output? What is on screen? - why post code that includes lots of commented out parts that get in the way of us understanding it? 
Look, I hate to be rude, but a huge part of learning to code (especially for a language like Java) is learning the tools and learning new ways to do things. Doing it manually only worked well before because your use case was exceptionally simple. And you can still use a terminal and editor (but it's even more to learn); install cygwin or a VM to get access to a real terminal, and look at using a build system like Gradle to compile (you can even use the Gradle wrapper to avoid having to install it on your system).
Yeah, I turned up writing a static helper and then read your comment. I guess, having public static void main() { Demos.run(Class.class) } is short enough. Though it would be cool if something external ran Runnable demo classes the same way as JUnit runs test classes, so again I wouldn't have this piece of code in each demo. Any thoughts on that?
Java 9 is old and boring. See [Java 10](https://bugs.openjdk.java.net/browse/JDK/fixforversion/16302) ;P
This article shows how to do inheritance wrong, I'm assuming intentionally, but the presentation is a strawman. Which leads to a mistaken conclusion at the end, where inheritance should be used for IS-A relationships and composition for HAS-A relationships. The inheritance problem can easily be solved by making the `move` and `attack` methods abstract. In fact, `Insect` itself should be an abstract base class. The inheritance example demonstrates why overriding methods is dangerous and that base class methods must be specifically designed to be overridden. For example, the [template method pattern](http://en.wikipedia.org/wiki/Template_method_pattern). Attacks and movement are strategies, so it makes sense to make them interfaces. Interfaces define policies or contracts, and are ideal for implementing the [strategy pattern](http://en.wikipedia.org/wiki/Strategy_pattern). However, IS-A and HAS-A are poor heuristics for choosing when to use inheritance or composition. As the article demonstrates, every IS-A can be turned around into a HAS-A. A Bee IS an Insect, but a Bee can also HAVE insect-like behaviors. IS-A and HAS-A are interchangeable depending on how you look at the problem. Not to mention, that you should not model classes based on physical hierarchies but behavioral ones. Uncle Bob wrote an [devoted an entire chapter](http://objectmentor.com/resources/articles/CoffeeMaker.pdf) to this idea in one of his books. In choosing when to use inheritance or composition, implementation patterns are a better choice. For example, the problem you are solving might benefit from template methods or the problem might be better solved using strategies.
I've been in the industry for 20+ years. Certs don't mean anything to most employers. If anything they make people suspicious of your resume.
&gt; *Excessive* use of Guava's functional programming idioms can lead to verbose, confusing, unreadable, and inefficient code. These are by far the most easily (and most commonly) abused parts of Guava, and when you go to preposterous lengths to make your code "a one-liner," the Guava team weeps.
Exactly. 
Source: https://code.google.com/p/guava-libraries/wiki/FunctionalExplained
http://www.amazon.com/Java-Server-Side-Programming-Conceptual/dp/1492193933/ref=sr_1_sc_1?ie=UTF8&amp;qid=1399566742&amp;sr=8-1-spell&amp;keywords=Sever+side+java
This looks really nice. Been looking for something a bit softer recently.
This would have been useful with a single example of any kind. How does this help anyone who is thinking about moving? Hint: it doesnt
Lambdas are a purely syntactic facility.
Who can read these scrolling code samples so fast?
The next version of JSF is looking to have a Action-Based MVC functionality in it. Hopefully, it will be out by Java EE 8. 
Wildfly 8 has Undertow, not JBoss EAP 6.3. JBoss EAP 6.3 (JBoss AS 7.4) still uses a customized version of Tomcat.
This is true. I wrote a toy program in order to try out Guava. Once Java 8 was released, I ported the functional aspects to Java 8. There were a number of cases where the resultant code was cleaner.
Quick question have you tried compiling/running by hand through the command line interface? This would allow us to narrow the issue to Eclipse verses the Operating System.
JBoss EAP 7 (WildFly 9(?) (JBoss AS 8)) will use Undertow of course. 
I have not, but I did try something else that convinces me that the problem is with the project setup and not JavaFX. I'll describe it in the post text.
The thing is the example they give could now be written like this: lengths = strings.stream() .filter(CharMatcher.JAVA_UPPER_CASE::matchesAllOf) .map((s) -&gt; s.length()) .collect(toList()); (or `toMultiset()` if you have such a collector.) Which is certainly a lot clearer than their Java 6 functional examples, and not bad compared to the imperative way either. Certainly functional style can be abused, but it's a helluva lot easier to do right in Java 8, and that warning, which was written for Java 6/7, does not apply nearly so strongly. Heck, the second sentence of the page explicitly says it may not apply to Java 8.
jooq seems to do what querydsl does. Is one considered "better" than the other.
That's good to know! :)
Thank you. It's amazing how much effort was put into ZenBurn to make things more readable. After trying several other schemes this is the one I'm using for everything now.
Database querying can be a lot nicer now. This would be far less clear pre-lambda http://benjiweber.co.uk/blog/2013/12/28/typesafe-database-interaction-with-java-8/ Another thing is the structural type inference for lambdas which amongst other things lets you wrap a function with another simply by assigning it to a specific type 
This may be related to what thread the vm is started on, swing on mac needs for the vm to be running on the second thread (the main thread needs to run the native event loop). The java vm has an argument -XstartOnFirstThread which Eclipse likes to set because SWT needs to run on the first thread. So you should make sure that isn't there in your vm args. There are comments on an old [eclipse bug](https://bugs.eclipse.org/bugs/show_bug.cgi?id=212617) that suggest the jdt launching might add this automatically based on a -ws argument.
The problem is that there are a lot of bad programmers out there.
The title is kind of misleading.
This stuff: &gt; String[] VQSSBPZQL = { "1013-909", "-1728+1844", "550188/4743", "6313-6201", "2713-2598", "-4578+4636", "-8116+8163", "1651-1604", "2895-2795", "60048/556", "-8749+8795", "346700/3467", "-5081+5195", "2981-2870", "-5924+6036", "-6286+6384", "127761/1151", "-3631+3751", "-9327+9444", "731170/6358", "471872/4672", "-9164+9278", "3828-3729", "643134/5794", "816530/7423", "4552-4436" Is being evaluated as a bunch of little math equations each of which result in a number which is then interpreted as a character. All the characters are stuck together to make a string. The first part of this string specifies a URL which is being opened, something is being downloaded. &gt;HttpURLConnection DQHHYVWENUJXD = (HttpURLConnection)BJAGVJJHRD.openConnection(); &gt;Files.copy(BISDOWBNMAANE, Paths.get(HLLECQCSFNIRUWC, new String[0]), new CopyOption[0]); The downloaded file is then being executed &gt;Runtime.getRuntime().exec(KOXUXANXXLJEWMNFLTF()); 
So all I have to do is check these and I will have the actual program that does the malware part?
I would say take a look at an expression language such as mvel.
I am having a hard time imagining what you believe computers cannot do given significant advancement. I assume humans cannot do these things then, either?
It looks like that jar is just an entry executable that downloads the actual malicious files and executes them. Not that uncommon because it's easier to disguise a smaller-sized file to then download the rest of the malicious code. If you could figure out the URL the file is being downloaded from and download it (preferably in some sort of a sandbox) then you would have the malicious program. You could then decompile that and see what it does. Again if you are doing this I really suggest some sort of a sandbox. You wouldn't want to accidentally run it and watch yourself infect your own computer.
I suggest throwing all those g.drawLine(...)'s into some for loops. Would make the code look nicer, plus you don't have to type out as much code.
Well there is a whole class of undecidable problems. The canonical example is to write a program that takes another program as input and outputs whether or not the input program will terminate.
[Undecidable Problems](http://en.wikipedia.org/wiki/Undecidable_problem) ~~There is currently a 1 million dollar reward for however solves the P=NP problem.~~ Edit: I got it all wrong and mixed things :P
And their code is already nightmarishly bad. If you want to somehow be successful with them, too late—you've already failed.
To your first point - yes, everyone knows what for loops do, but having to mentally parse what a particular loop is doing is unnecessary. If it's mapping an input to an output, you use Stream.map, if it's filtering, you use Stream.filter. It just lets you focus on the important things... How are we mapping, how are we filtering?
That's a great article that also made me realise I must take some time to have a serious look on the new java 8 features and cool very interesting libraries (such as JMH). Now, I might be getting old and too resistant to change, but things like this make me cringe: // converts Gradle dependencies to Capsule dependencies def getDependencies(config) { return config.getAllDependencies().collect { def res = it.group + ':' + it.name + ':' + it.version + (!it.artifacts.isEmpty() ? ':' + it.artifacts.iterator().next().classifier : '') if(!it.excludeRules.isEmpty()) { res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")" } return res } I would rather have this code written in a java class that I can debug, and test and know other people have a chance to understand, than to have it on a script. I've put up with too much ant crap in my life to see things like this coming back to reality masked under "nicer" expressions. This is already hard to read in an example project. Imagine how it can "evolve" in any enterprise project with 100's of libraries and weird dependencies. Or maybe I am wrong and an old grumpy fart already. 
Have a look at http://www.physics.uwo.ca/science_olympics/events/grades_11_to_12/function_id/functionid_01.html All of the source code is in the JAR file.
I havent done this is ages, but look at one of the http retrieve packages, then just load the file it retieves into memory instead of file and parse it :)
RE sticking to default java, to do it without a package you will need to do Sockets and know a bit about HTTP headers, it can get a little tricky.
Is the remote server on a LAN? Is it possible to map a network drive (assuming Windows)? The file would then be read as if it were on local disk. But remote server or not, I'd assume you're processing the data to convert the XML into a POJO, otherwise you'd really just need to read the string a plaintext. Something from the "core" would involve JAXB, but I'd personally prefer XStream because of its ease of use. For XStream, * create the corresponding Java class, * plug in the library jar, * alias the class in an XStream instance, * pass the text file in, * ??? * profit 
I stand corrected, [this](http://stackoverflow.com/questions/1485708/how-do-i-do-a-http-get-in-java) shows you how you can do it just using .io and .net (now i'm on my computer i checked it out for my own curiosity :P)
Awesome! I've been looking for it. It's always been my favorite Vim color theme.
Here is the contents of that string array: http://pastebin.com/K90hJP11 EDIT: The big one at the beginning, not the smaller ones.
It's not you. That's gross.
To get it as a String? Scanner is your one-stop io solution. It's a convenience class that was only added recently, but it makes io from any source pretty darn easy. In the header: import java.util.Scanner; import java.net.URL; In the code: Scanner in = new Scanner(new URL("www.yoursite.com")); in.useDelimiter("\\\\ZZZZ"); String FullText = in.next(); Then you still need to parse the xml.
wow nice, i used to use this theme in emacs! I love it 
When we have languages like Scala to work with, that is a poor excuse for poor programming. Besides, website bugs are entirely capable of being far worse than mere annoyances. They can result in secrets being leaked (e.g. dumping the password database), unauthorized changes being made (e.g. via SQL injection), hijacking of the server (via arbitrary code execution bugs, for e.g. sending spam or intercepting credit card numbers), denial of service, and so forth. It is actually quite unfortunate that such a lax attitude has been taken to web application security, and many people have suffered for it.
Here's a (hopefully) slightly better example of what you can do with lambda expressions from C#: Say you have a class called Product: class Product { public int id; public String name; public String category; public decimal price; } and a list of those products: List&lt;Product&gt; prodList = List&lt;Product&gt;(); You can use lambda expressions to quickly and easily manipulate the list just by telling a function what elements you care about. For example, to find all elements in a certain category: String category = "toys"; prodList.FindAll(p =&gt; p.category == category); This would go through the collection and return a list of items in the "toys" category. Or, if you want to find the first item within a certain price range: decimal min = 10; decimal max = 100; prodList.Find(p =&gt; (p.price &gt; min &amp;&amp; p.price &lt; max)); This would go through the collection and return the first item between $10 and $100. If you want to find out if you have items that cost more than a certain amount: decimal cutoff = 1000; prodList.Exists(p =&gt; p.price &gt; cutoff); This would go through the collection and tell you whether or not it has an item that costs more than $1000. If you want to remove all items a certain category: String category = "hardware"; prodList.RemoveAll(p =&gt; p.category == category); This would go through the list and remove all items in the category "hardware". They can get more complex than that, but I'm not proficient enough to give any more complex examples (I just learned this stuff this week...).
Can you explain "in.useDelimiter"? I haven't seen that before and I've been using java for 3 years now.
So this is what people do with intellij. Explains much.
What do you do for a living? Maybe if you teach me how to do it, I'll teach you my profession.
The P=NP question isn't mentioned anywhere in that Wikipedia article. What's your point?
useDelimiter tells the Scanner how the input is delimited. Then it tokenizes the input based on that delimiter. So, if your input file was comma delimited: 5,3,76,3,1,3,54,3 Then you could read the file with the following loop Scanner in = new Scanner(new File("myfile.txt")); in.useDelimiter(","); while(in.hasNext()) { String input = in.next(); } And input would then contain each number until the file runs out of numbers. In your case, you could set the delimiter to &amp;lt; to get the start of each tag, but you shouldn't do that. You should use Java's xml parsing classes for that. By setting the delimiter to \\\\ZZZZ in the above code, I am setting it to something that won't occur in the file, just to read the whole file.
Rather than using a scanner I'd create an InputStream using the URL object and feed that into the parser, rather than tokenizing it and trying to deal with that.
&gt; ..would like to know if or how there is an easier way to learn java There is no easy way. Look around in /r/learnprogramming, /r/learnjava and /r/androiddev for resources.
I don't know if this says anything, but I observed the following change when replacing an anonymous class with a Lambda: I was using a variable in the surrounding code. I was using a new but equally named variable in the anonymous class. Once I had converted to Lambda format, there was a name collision so I had to rename the variable.
Companies I worked for the manager would go to the training and then come back and "teach us".. it was basically just a vacation for him and he would transfer his knowledge by giving us whatever literature he picked up, or someone picked up for him
Courses? Ha they give me lots of inefficient internal processes that provide me plenty of time to learn stuff I'm interested in while at work. Who am I kidding? I spend my time on reddit. Edit: to answer your question. This is very uncommon. I've never seen this in 15 years and I worked in big corporations (citi, dell the bigger ones, among some other finance-related). Even for the internal day to day work, they usually simply put you there and you have to guess how things should be done. Then you either start asking around or try and wait for someone's complaint.
That's unfortunate because the end of the day you're not getting the certification in your name, although you might know what it all entails you don't have the certification document to show for it.
This is due to the limited closure support that Java Lambda offer. Variables outside of the lambda are visible, and can be used, in the lambda as long as they can implicitly be considered as final. See http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#accessing-local-variables for more information.
Nope. The JVM knows about lambdas. Go there to learn more about it: http://www.takipiblog.com/2014/01/16/compiling-lambda-expressions-scala-vs-java-8/
I personally have become a fan of using long integers (64 bit, signed) for storing decimal numbers: If you know the value range you'll be working with, they can work wonders. E.g. I stored the position of objects in the Solar system with millimeter resolution while still being able to store star systems more than double the size of our system. I like the precision that comes with it, and I didn't have to multiply/divide in that program, only add/subtract, so there was no problem. With longs, you could store your ghost's positions in a much higher resolution than pixel (e.g. billionth pixel) and then divide when you need the actual pixel position. Just an idea. You could of course also just use doubles. I guess doubles would be the better choice since you wouldn't need really precise values for a Pac Man game.
My company pays for courses, conferences and certifications, including travel expenses if needed. We are a big consultancy firm, so we sell expertise. I guess company size and sector matter here. For us, training is an investment with very clear returns, but I understand that somewhere else under other conditions, it could be regarded as a liability disconnected from the revenue.
There is a book called head first java development, it's like the pictorial Bible of beginners development books. I would highly recommend it as a starting point to anyone interested in java
You can use an input stream as said below and use a SAX or DOM Parser (depending on what you prefer), a JAXB parser if you know the xml will always meet a certain standard (basically, create an XSD and then generate some jaxb classes off of said xsd using an ant build file and then use the jaxb marshaller), or XStream as well (as long as the xml is easy to parse). There are options :). 
Well, that's one of the questions you should have asked at the interview, at least I usually do. That's why I'm currently happily employed at the medium-size company where each programmer gets at least 1 training or course per year. 
my company has a division that organize internal courses. they provide a catalogue of courses that you can choose from, in agreement with your boss, then they send you to the school center where you meet collegues from all over the nation, stay in hotel and do courses 8 hours a day., usually for a week or three days. courses are usually very well organized and valuable. They organize one course per year for each employer. That's one of the best things in my company. They value formation and I love it: it's halfway between a vacancy, it breaks the monototy of the job, you meet new people (i even met a girl who become my girlfriend (and then ex-girlfriend)).
Serious question, do you have to set a delimeter at all if you dont intend to use it? Setting it to something that "wont occur for shure" seems a bit dirty, but I'm not familiar with scanners and if you definitely need the useDelimeter() for it to work.
1. Create XSD from the XML (Using just an editor, [xsd.exe](http://msdn.microsoft.com/en-us/library/x6c1kb0s%28VS.80%29.aspx), [xmlbeans inst2xsd](http://xmlbeans.apache.org/docs/2.0.0/guide/tools.html#inst2xsd), [trang](http://www.thaiopensource.com/relaxng/trang.html), or something else). 2. Use the XSD to create binding classes using [JAXB xjc](https://jaxb.java.net/jaxb20-ea/docs/xjc.html), which is included in the JDK. 3. Populate those binding classes with the [JAXB unmarshaller](https://jaxb.java.net/nonav/2.2.4/docs/api/javax/xml/bind/Unmarshaller.html). The unmarshaller can handle urls, so you don't need to write code to download the files from the server, and it is included in the JRE. 4. Once populated, the JAXB beans use collections and are very easy to work with. Please note: Alternatively, you could use one of the 3 APIS from JAXP instead of JAXB: [DOM](http://docs.oracle.com/javase/7/docs/api/org/w3c/dom/package-summary.html), [SAX](http://docs.oracle.com/javase/tutorial/jaxp/sax/parsing.html) or [StAX](http://docs.oracle.com/javase/tutorial/jaxp/stax/index.html).
If you don't set a delimiter then it defaults to whitespace.
Will definitely do that from now on. Thanks
Oh, okay, makes sense. Thanks! 
I never thought about it like that, very true :)
What I'd give for something like that!
The article correctly states that assert statements usually check pre-/postconditions and invariants (however, no exampe of invariant was given - I usually have a void checkInvariants() method in my class consisting of nothing but assert statements, which gets called before and after every public method. Some of these days, I'm going to write an ASM-based tool to include those calls automatically. Also the article is very weak about the questions when to use assert statements. Actually there is one hard-and-fast rule: If the condition can only be wrong when I've messed up, use assert. Otherwise (e.g. if the condition hinges on input data that I don't completely control), use `if(!condition) throw SomeException(...);` The last paragraph hints at a problem with assertions: They can only be turned on or off - there is no middle ground. Someone should create a tool to change all assert x : y into if (!x) log.warn(y)... Since my job contains mainly batch processes and no long-running servers, I always run with assertions enabled unless I am pretty sure about everything and need the utmost performance (because otherwise the task would take too long).
If you have questions or comments about it, ask.
I'm a junior dev at my company. There is no direct policy on attending conferences and the like, but we do get reimbursed for books. Also, there is a General Professional Development time logger task for self directed learning. I usually spend 20 hours per month on reading books and going through tutorials or working on small toy projects to implement the concepts and technologies. Finally, the company hosts a local web dev meetup every month that usually draws between 25 to 35 people. So I'm expected to spend slow time learning concepts and technologies that the company uses, but there is no formal process. 
haha this made me laugh
I completely agree. My preference (based on easy of use and efficiency) is JAXB 2.0 (with XMLStreamWriter so it doesn't all go to memory), SAX (because it writes one node to memory at a time and then out to file), JAXB 1.0 (writes the whole XML file to memory, then to file or vice versa, which if you have a big file will take a bunch of heap) and then DOM, which does the same as JAXB 1.0, but is code you have write.
It's aimed at computer illiterate people, so they see it and just run it hoping to see an image. then see a file inside the zip, and think "huh this must be the image then" and run the jar unknowingly, getting the malware.
I certainly can use anonymous inner classes inline in a way that doesn't potentially leak memory.
I call this *fauxnctional programming*: code that superficially resembles a functional style, but is actually full of side-effects.
Your two snippets are dissimilar in an important way: the first relies on mutating the value of a shared piece of data, the second does not. This turns out to be a more significant result than just an improvement in readability.
I want to see all of them. I can't just have one.
[All of them](https://news.ycombinator.com/item?id=7720226) Previous years were sooo much better :/
You are technically right, but the first can easily be rewritten to be just like the second by introducing a new array, and the map function can also be implemented to mutate the original array (although I wouldn't recommend it, immutability is a good thing). Functionality wise both are equally powerful.
Is there any coverage by a more respectable source of news? Not that I don't believe news of the Oracle win, I just don't want the spin.
Sure. Here's the [actual decision.](http://www.cafc.uscourts.gov/images/stories/opinions-orders/13-1021.Opinion.5-7-2014.1.PDF)
Thank you!
Forgive my ignorance, but how do you install this theme?
Personally, I don't particularly look for courses in a team member. If you have them, great, but it doesn't necessarily put you ahead of other candidates. What *does* put you ahead is personal projects. If you have something demonstrating what you know, and you're able to talk through it, then you're instantly above a large percentage of other candidates. This could be a game using any number of libraries/engines, an Android app, a movie player, etc. Give me something that I can download or view, and talk to you about in the interview. It also demonstrates that you're interested in developing *outside* of a work environment. So try to make a small project that is applicable to the jobs that you're going for. For me, that would be something using Spring, Hibernate, Jackson on a JBoss server with a web frontend in AngularJS. From a personal development point of view, I'd also say that projects are better than courses. You do need to put in the effort though.
That's what I want to hear. I love open source. I do want to get involved with projects like that. 
What a load of bullshit. Ugh. I hope this goes up to the SC.
Florial Mueller? Microsoft shill?
Contributing to open source projects are a definite plus. Basically, anything that shows interest outside of a work environment, and that you can talk about knowledgeably.
Can I do something with Java, or C that I couldn't do before? It seems to me that assembly language is Turing complete. Therefore, anything that can be programmed should be able to be programmed in good ol' assembly language. It's all a matter of developer productivity. Abstractions. More concise ways to express the same ideas. Techniques that require less bookkeeping from the programmer. Even garbage collection is just an abstraction that has been implemented for you that you could implement for yourself. For loops, while, do, if-then-else, these could all be replaced by GOTO's. Really. They could. But the results of introducing structured programming was better code, better ways to express (and comprehend) the same ideas.
That's the exact same link. Exactly the same one as the original post.
Even more reasons to hate Oracle
Spending millions on a legal crusade is a dick move in itself, but this ruling can considerably hurt innovation and interoperability. Soon no one can invent anything due to all the greed companies have these days.
Go to File &gt; Import Settings and select the Jar that you've downloaded. Then, to select a color theme, go to File &gt; Settings &gt; Editor &gt; Colors &amp; Fonts.
And they use `int max(int x, int y)` for a *good example* of something that would be copyrightable. Asinine. Just once I'd like to see a court in the U.S. make a decision that didn't make them look like idiots.
How do you need to process the file, as in, what do you need to do with it after downloading? People already gave good java solutions, but depending on your environment, It might be easier with perl or python, or even a shell script.
Yeah, I just discovered. I was not familiar before. PeterB/DrPizza is really a piece of work. I've been gradually getting disillusioned with their forums.
another resources: http://www.reuters.com/article/2014/05/09/us-oracle-google-ruling-idUSBREA480KQ20140509?irpc=932 http://www.theverge.com/2014/5/9/5699958/federal-court-overturns-google-v-oracle so that means google must pay some large amount of money to oracle? what if google won't pay?
we so miss groklaw right now... This was a won battle... And it was the right decision in the first place... With a judge that actually cared to research what programming was... This is terrible news...
Well, software patents already had that effect. This just makes it worse.
So what I'm getting from this is that in order to use Java, we need permission from Oracle for every single project since the language is pretty useless without the API? Or am I completely missing something?
Work at a large global enterprise company........ No.
Why not both? 
what is the implication of this? ELI5 pls
Because it isn't really Oracle's responsibility to keep Congress and the courts non-corrupt. It is ours, and we've failed.
When I was on the forums I'd disagree with him now and then, but I quickly learned to be careful arguing with him. He knows his stuff and he's pretty good at debating.
what a terrible news :(
Writing an API containing "int max(int x, int y)" can land you in court.
I totally agree with you, and I'm not downplaying the importance of having a governmental system that doesn't have its finger in it's ass, but Oracle didn't have to persue this either.
WTF, I don't want to code to other people's copyrights. If this stays in the supreme court, I will be switching to another JVM language that releases their rights on the API.
http://stackoverflow.com/questions/22434771/can-anyone-explain-the-following-piece-of-anonymous-mischief-code-for-windows The program is crap, just don't run it. Tested the methods to see what was going on, the stackoverflow above explains it all. Not the same program, but they are both trying to do the same thing. Program can only infect Windows machines, too bad I have Mac. If anyone cares about the output where the files are coming from the answers are below. Who feels like being the guinea pig to dl the dropbox file? ZPIGGLCPVFLRIYY() returns... (dropbox accounts that the program is trying to connect to) https://dl.dropboxusercontent.com/s/mlbj4nlswd7syzl/d.dat?dl=1@@@https://dl.dropboxusercontent.com/s/fr7bbgouyzyjjbg/d.dat?dl=1@@@https://dl.dropboxusercontent.com/s/ingjez5bvrikf98/d.dat?dl=1@@@https://dl.dropboxusercontent.com/s/2gmohnhiu0sec0f/d.dat?dl=1@@@https://dl.dropboxusercontent.com/s/f72pu2inhx22kdo/d.dat?dl=1@@@https://dl.dropboxusercontent.com/s/8dvn3s6mwz876ug/d.dat?... SCESLGXFXWCP() returns... "@@@" (used to .split() the string returned by the method above) HKYDTDPVUZFQSLNBPNK() returns... "C:\\temp\\" (build file location string) GNLDGDAGVDDUOCBZ() returns... "C:\\temp\\VYKYCDLH.CXV" (append crap to file location) KOXUXANXXLJEWMNFLTF() returns... "regsvr32 /s C:\\temp\\VYKYCDLH.CXV" (append more crap to file location)
No. You would have to copy significant portions of the API, as Google has apparently done for Android. And even then it might fall under fair use, a question the Court here has sent back down to be decided. (The jury on the original case was deadlocked on this issue, but was favoring Google.)
The last decision before the appeal was actually reasonable and well thought out. The judge was a programmer, too.
Can you provide confirmation of the 64-bit OS + the error message you're getting? Quite hard to diagnose a problem without information, 'my car is doing something wrong' kind of dealeo :P
No, that's not correct. This would only apply if you were reimplementing Java the language and its APIs. It does not affect software you write using Java. 
I still don't understand. How about writing something that contains "System.println(''oracle");" Or you mean the use of http://en.wikipedia.org/wiki/Java_API can get you in court?
I don't think that it can go to the Supreme Court since the lower court's ruling was over turned 
It's going to go back to Alsup, but Google can still appeal after that.
ah so it is going back to alsup for a decision on fair use? 
Refactored code so the method and variable names make sense, put in printlns to show what happens. Program tries to connect to https (secure connection) with an HttpURLconnection (not-secure). This program will not work straight from the get go. Refactored Code; http://pastebin.com/n8iACEN3
Yup.
At my job, the developers work primarily with PHP. Sometimes I forget how annoying it is in Java to explicitly define data structures like ArrayLists, Hashmaps, etc... But I still use Java for most resource intensive tasks and *do* find it easier, months later, to figure out what the hell I wrote.
~~Maybe that Open JDK and Amazon Web Services that deploy Open JDK are the next target for an Oracle lawsuit?~~ Maybe the GNU classpath jdk is in trouble. The Apache Harmony project is a serious issue. The JCP governance problem needs to be resolved. I'm interested in what exact APIs were found to be copyrightable. Haven't found a list yet.
Nope, [he learned to program for the trial. ](https://en.wikipedia.org/wiki/William_Alsup) 
Dude sadly people are downvoting you for truth.
Once you learn to program, you're a programmer c:
Its funny that it got sent back out for more court time. Its probably a very profitable case for politicians and lawyers. If I was in their shoes I'd just keep bouncing it back and forth until I had a house to rival the stars.
Welp! Off to copyright all the interfaces I've ever written. There's gonna be a gold rush on core math functions! (Yes, this is sarcasm... mostly.)
Well fuktards deserve what they get IMO.
Yeah, my description was very vague, perhaps not 100% correct-- but not wrong. It was half-assed. But I'm jaded about its status as a buzzword now as it was a few years ago. Yeah I use DI, but it's ingrained in how I code now. It's not a feature I even think about now. I just do it naturally. It isn't something I'd expect a new graduate to understand, or even someone in the business. 
c++:
How about a 1-d array? Just need to track each index as one item. Or, how about a List of type Item (Item being an interface/abstract class)? You could set it up with inheritance.
Does IntelliJ help with SOAP stuff?
[Apache Wicket](http://wicket.apache.org/)
Not just some programmer! Haskell is practically his middle name! Seriously though, Haskell is his middle name.
This would likely be a better way. A lot of 2d RPG/roguelikes use a weight limit on the inventory so using a container that isn't a fixed size would make sense.
1000$ for 3 days? Do they joke? I cant help wondering human greed...
&gt; Won't that count as prior work? You are confusing patents and copyright, afaik prior art is only a patent concept. With copyright int max(int,int) would most likely "belong" to the inventor of the first programming language and his "poor" descendants could now sue every programmer for their rightful cut for the next 3 centuries at least. 
You didn't scour too long did you? I was able to come up with this in a matter of no time: http://www.oracle.com/technetwork/java/jsdt-faq-137534.html
gee, thanks that piece of "code" really made things clear for me.
Wow that is quite weird. Reboot the computer and make sure you right click the installer and go to Run as Administrator? Also is there a reason you are explicitly running the 64bit? I'm not sure using 32bit would cause you any issues in 99% of applications.
When you talk about the 2D-array, do you have a visual grid (The inventory.) in mind where the player places their items? Probably not, because you said that it's a text based game. I think you need to explain your question a lot more clearly. I would create the class "Item" with the enum "Type" and the field "type" to define the items. Alternatively, I would use an item super class and several different item classes. If possible, the latter should be avoided (because simpler is usually better, and because you can only inherit from one super class, so that door should stay open). I would create the class "Game" which represents the currently running instance of the game as started with "new" or as loaded with "load game". "Game" would hold the core game code and would manage all characters, items, etc., so it would e.g. have a list of all actually existing items in the game world, so you could e.g. track an item being sold in shop X to suddenly appear in shop Y. To store the globally existing objects, or to store the objects that are in a certain shop, or to store the objects that a player has in their inventory, I would either use a HashSet&lt;Item&gt; (no duplicates, fast implementation), or a TreeMap&lt;String,Item&gt; (ordered by the name of the item, e.g. "sword of slicing"), or a HashMap&lt;Long,Item&gt; (not ordered at all, the key is the globally unique object ID; I would probably choose this version because it's most (de)serialization friendly, because during loading objects do not depend on the existence of other objects but instead just use the abstract reference that the long value represents; took me a few versions of a game I'm making before I realized this).
Where do you see the sources on this page? Even if you follow the download link, it's not there.
I tried downloading it a number of times in a number of ways to no avail. I cant play expansions and mods on minecraft without 64bit.
&gt; Java Shared Data Toolkit http://www.drdobbs.com/collaborative-applications-and-the-java/184403999
Well, the one they quote in the ruling is `int max(int x, int y)`. So, judging by that: all of them.
could you download the jdk manually and point to it with your %JAVA_HOME% variable and add the /bin to your class path?
Well it might be fair or it might not be fair, but the fact is that Google has a platform that not coincidentally uses the exact same language structure and has the exact same std library API as Java has. For all practical intends and purposes Android IS Java. Although it's insane that if someone somewhere creates a function "int max(int x, int y)" that this would then be copyrighted and nobody may call a function "max" anymore that takes two ints and returns one, I think Google should just man up, pay for a license and call their Android APIs Java. This is not some little poor open source project that's harassed by a big enterprise, but two big enterprises trying to screw each other with the Java / Android developer the real victim. It's not if Google doesn't make money with Android, so why are they being so difficult about it? (And while at it, why is Oracle so aggressive against the number 1 company that makes people want to learn Java? Just make a deal with Google, accept android as the default Java for smart devices, and everyone wins?)
Jesus fucking Christ. At this rate, C# is more open sourced than Java. I'm going to be switching back to C# if oracle keeps this up. It's absolutely humiliating for those of us who take the language seriously.
JDeveloper has a WebServiceRef wizard "create new web service proxy". It even creates a xml catalog to ease deployment.
That just ultimately leads you to https://jsdt.dev.java.net/ which doesn't exist. Oracle actually killed off the JSDT open source project. That's why I'm hoping to find somebody who grabbed the source while it was available and still has a copy sitting on a hard drive somewhere. 
That's just the source for the sample app from the article.
Hey FabTheTank that was an awesome advice from Vile2539! Try to create simple projects using different technologies and try to see ins and outs of each technology, share your findings with colleagues, friends, fellow redditors :) Here are some ideas: - phonebook application - tasklist or todo application - simple forum application - webshop application - microblog application Here are different technology stacks to try out: - tomcat - jboss eap6 / as7 Try out: - servlets + jsps + jstl - jee6 with ejbs for backend code - expose some biz functionality through JAX-WS (SOAP) - rethink your app in terms of resources and rewrite with JAX-RS (restful), jboss supports it out of box - for data layer use in memory map/list first and later add persistence layer, with jdbc first, then try jpa - if you are adventurous, try to create front end app in AngularJS or similar JavaScript framework, to talk to your backend restful app - try implementing similar things using spring on tomcat (no support for ejb, jaxrs out of box)... - try out different frameworks: spring mvc, jsf, struts2, vaadin, wicket, etc... There is plenty of online tutorials and blogs. Hopefully, this list gives you some ideas. Document your learning, blog, post, share... use bitbucket or github to share your learning projects... Ask if you seek some guidance and direction :) Good luck! ps. Long time lurker, first time poster :) pps. Pardon my formatting, editing on my phone sucks :)
Wow, that's admirable. We need to clone this guy.
Sometimes I feel the same way, but remember for every "enlightened" programmer there's 1-2 more who are just hatching that need to learn these things. I don't think DI is a buzzword anymore. Design Patterns in general can be buzzwords at some companies and bad words at others. Personally? I just use them as words because they're accurate descriptions of the pattern that I'm using.
For example, if you implement a class with all the same method names as java.lang.String, and call it java.lang.String, then write code for all these methods that is entirely your own, but gives the same results as Oracle's version, Oracle can legally fuck you in the ass.
Google should just change all the APIs to random strings then wait for an anonymous someone to create a translation library.
**Edit:** This looks like it might be your best bet: http://www.dfki.uni-kl.de/km/java/java/jsdt/ --- Here appears to be "a version", not sure if it's the one you're looking for and it's the class files: http://arezzo.w3sites.net/Common/Arezzo/Jsdt/jsdt.jar I just searched for the package `com.sun.media.jsdt`, the package you're looking for appears to be commonly named [`jsdt.jar`](https://www.google.com/search?q=%22jsdt.jar%22&amp;oq=%22jsdt.jar%22&amp;aqs=chrome..69i57.28893j0j4&amp;sourceid=chrome&amp;es_sm=93&amp;ie=UTF-8)
Maven is a build management tool. Its purpose is to produce an exectuable artifact, i.e. take input sources and dependencies, compile all of it into a runnable form. It does not concern itself with running the produced output (although it can be used for that, e.g. for unit testing). For a classic Java program, the entry point is still the class (or classes) containing the `public static void main(..)` method, regardless whether it was compiled using the command line, or with maven. 
Not sure if I quite understand the question because Maven is a build utility and dependency manager. You still need to execute the jar Maven builds.
maven is not an imperative "language" it's a declarative system. The language is XML. So there is no "entry point" where the program starts running. Associated with your blob of code will be a bunch of *.java files. grep through those looking for something of signature: public static void main(String[] args) {.......} Each of these is a possible entry point. 
What problem does this solve?
* Vagrant: You are right thinking about clusters of VMs. Docker has copy-on-write and is lighter than virtualbox (relies on linux cgroups), so maybe you want to explore that. * ffmpeg: That was easy, but the last time I compiled fmpeg from source, there were a lot of patches off-tree, and a lot of conditional stuff people in linux distros deactivated for patent reasons. What ffmpeg will you run? * You are absolutelly right about using BT for bulk data transfer. * Hazelcast: I have used Coherence as a queue with Map interface for lazy people. Heck, I even know people doing that with ehcache. But if you are going to use a data grid only as a cheap queue infrastructure, maybe you should be using JMS instead. * RHash: Sounds good to me. Bouncy Castle supports TTH (TigerDigest) which is what you need to write magnet links. I am not entirely sure if I could write a digest with bouncy castle faster than spawning a C process and waiting. * PeerGuardian: You don't need to do that. You don't want to do that. Entirely my opinion, but distributing the encoding process and publicly distributing the results are completely different things. For instance, the first one may fit in the safe-harbor provisions of the DMCA. * PHP: Seriosly? I know some guys had sucess using emscripten to [convert ffmpeg to javascript](https://bgrins.github.io/videoconverter.js/) and I know you can have a distributed P2P network in javascript using [WebRTC Datachannels](http://www.html5rocks.com/en/tutorials/webrtc/datachannels/). Think about that: You have sandboxes, bulk transfers, peer messaging and a solid platform, and you get a ton of nodes which are easy to update.
so its not possible? :( Or is it unwanted?
HashMap
http://stackoverflow.com/questions/6729605/assigning-variables-with-dynamic-names-in-java Found this when i put your post title as it is in google. It has some examples on how to solve your problem. As a small tip for your further programming career: As you see, type everything you want to know into google. If you have a question, someone had it before and you will find it on the internet.
Assuming the shop and player inventory changes as you play the game, arrays are probably not what you want at all. Java has lots of very handy, powerful data structures for things like this. Look into Lists, they are probably what you want. A List changes size to fit the number of items you need to store, it makes adding and removing items very simple, and its easy to iterate over the contents. 
Whenever you think you have a problem that can be solved by dynamically naming variables, you are wrong. The correct answer is to use some kind of map instead, or if the difference in names is just a numerical tag, then an array.
Functional thinking is completely impractical in the absence of tagged unions and a rich typesystem. Sorry Mario, but your princess is in another castle.
My inspiration is WinFF - I'd like this to be able to convert anything (DVD, Blu-Ray, CD...) into a format watchable on anything else - like mobile devices. Therefore splitting DVD and distributing it across a network to encode it to an iPhone-compatible video would be one example here. Doing this for 10 or 20 DVDs would consume quite a lot of time and processing power when doing this locally. So instead, let's just fire it up to the cloud and let others do small bits while we can still play our favorite PC games in the meanwhile :P
Thanks esanchma for your insight! This is the first time I hear about Docker and I tend to like it a lot from what I read so far. Will try and experiment with it a little. As for ffmpeg - I'm using the latest full stable version with all the libraries it can handle (https://github.com/martinambrus/ffmpeg-dht/blob/master/bootstrap.sh). Also, I was pointed in the direction of x264 which might be a better solution with regards to H.264 videos. JMS - I have no experience with either Hazelcast or JMS but from Hazelcast's docs, it would seem that a no-single-point-of-failure is tricky to reach with JMS. And since I'm no expert in this field, I pick what's ready, tested and the most plug-and-play-able :) However, I will check Coherence, as I've not heard about that one before, thanks. PHP - my choice of web language since v3, so I'm sticking with it :P ... but yeah, if I knew anything more suited for the job I'd use it - really! Also, thanks for the JS goodness - it's amazing what JS can do these days! Although, for this project and for compatibility sake, I'll certainly stick with some more traditional ways. But who knows, maybe someone will convert this whole project into JS in the future!
Yes. I'm basically relying on a fact that nowadays, the upload speed of average Internet user who does not live in central Africa is around 6-10Mbps. I only see this trend continue to improve, so even for people who's upload speed wouldn't beat the encoding itself today, it might in half a year. People are less probable to upgrade their hardware every 6 months but upload speeds are dependent on the provider - no hw investment is necessary there. Also, there certainly are people with machines powerful enough to do the encoding very quickly. For such users, a local encoding option would be present as well ;)
I think transmission supports blocklists already which is all peer guardian is right? 
First off, don't stop at "turn this file into a string" XML has a specific formatting for good reason, and don't ignore it. It helps you do things more easily. Especially true if some of the fancy XML features such Entity References are in play. The answer to this question depends on completely on what you're going to do with that XML and what you know about it. Questions: 1) does the XML come with an XSD ? ie is it of known format or could it contain never seen before entities ? 2) Is the file HUGE, or small ? could it reasonably fit in memory ? 3) Do you need to process all parts of the XML, or do you need only a small section of it ? 4) Will you reference the data multiple times once loaded from URL ? or will it be referenced only once. 5) will the format change in the future, when the thing creating said file adds a new feature ? The answers to these question will let you determine if you're going to one of the following techniques. a) SAX parser. FAST, low memory, but can only "see" things once. complicated structures can be mentally taxing to write parsers for. You must be able to think about stacks. b) DOM parser slower, more memory, but persistent, good for reading the same parts multiple times. c) deserialize to java classes. via something like JAXB. Super fast to read, but will barf on unknown entities brittle to change. d) process as pure text (don't laugh, this is somethings the right answer!) e.g. the Scanner example of PaulMorel. Simple but looses ability to really "understand" the XML. So the short answer is "it depends" If you want to post answers to the numbered questions you might get a better response. 
&gt; If not, is there something that would be ridiculously long/complicated had I been unable to use them? Parallel stream operations on collections would be very hard to do yourself. I wouldn't want to implement that functionality let alone test/prove that it's error free. Here are some examples of code that would be very tough to write without lambdas: http://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html The key idea here is that iteration is now implicit instead of explicit which allows the Java runtime people to do optimizations on how it's done.
Tried that too, no luck. Seriously, I've tried everything down to searching freaking *gopherspace* using Veronica, trying to dig this thing up. If it's out there anywhere, it's well hidden. But I'm sure somebody has a copy lying around on harddrive or a network share somewhere. It's just a question of tracking them down. 
Yep, found that. It's a useful copy of the binaries from an older version, and is better than nothing. I'm really just after this for educational purposes anyway, so decompiling that would be better than nothing. Still, I'm hoping somebody will turn up with an actual copy of the latest source bundle from before it was yanked. 
It sounds like you have AB problem; you have a problem A and think the solution is B, so you ask about B instead of A and up confusing people because of how absurd your B solution is. 
Where the heck do you live where the average upload speed is AT LEAST 6Mbps?! Mine is just above 5 on a good day and I consider that fast.
That is irrelevant to both the OP question and the answers here.
What's wrong with var[1] - var[100]?
That's interesting, but I have a few questions: * Bittorrent it a distributed protocol to send the same file to several peers, in your case presumably you want to send a different portion of a video file to each peer. That seems an entirely different use case. Or are you sending the complete source file to everyone? * The most limiting factor is the bandwidth. Generally when encoding your source file will have a higher bitrate than the target file, some people will even use raw video. Sending this on any kind of residential Internet seems redhibitory. I'm assuming this project is intended for individuals to work over the Internet and not server farms with local multi-gigabyte networks. People who produce a lot of video often max out their upload, so having to send more data will reduce their capacity. This issue seems insurmountable right now. * Why are you retrying encodes 3 times? It's a deterministic process so it shouldn't make a difference. * What's up with government spies? Planning to encode rips of commercial videos? 
You sanies, always making things boring for everyone else :P
Except for the whole immutable no side effects part which doesn't rely on either of those things
Sorry I don't understand. In general when I consume SOAP services I generate the client jar from the WSDL and put the client classes in their own jar and then bring the jar into my project. There's usually no need to use wsimport more than once. You could also automate the creation of the jar trivially using a maven plugin to retrieve the WSDL and generate the jar. Can you elaborate a bit about what you're trying to do?
This was I was thinking the whole way through. Encode (abc) != Encode(a) + Encode(b) + Encode(c), as far as I understand.
Maven does not run your code. You would still need a main method somewhere if it is meant to be executed. It may be a web application? Is there a src/main/webapp folder? Then it's meant to be deployed to an application server like Tomcat or JBoss.
You can do it with bytecode manipulation. But you probably need a collection (ArrayList etc.) instead.
I think using Docker and a deployment system like Puppet is ideal. Docker's deployment automation abilities are very limited compared to Puppet so it's a good pairing. Puppet can be run on the host to launch Docker containers and run on the client containers to manage their state.
You need a certain amount of bandwidth to get through the TCP ACKs, so asymmetry between upload and download above 1:20 is relatively rare. This means that high end residential broadband (which is still relatively cheap) will offer nominal upload bandwidths of 6 Mbps and above. Not many residential users order these packages, though, and they often come with fairly stringent volume limits, making uploading lots of data (such as raw video) fairly difficult.
Guess I owe an apology to you guys, I live in the UK where everyone pretty much uses what I wrote. Virgin Media, SKY and BT are competing to deliver the fastest Internet at the most competitive prices here, so I guess I was thinking too local. However, even in Slovak Republic, they tend to have Orange Fibre with the stated specifics still applicable. And I don't think many people here heard about Slovakia, so my thought is that if such an unknown country, smaller than NY City has such fibre packages, everyone has to be getting them by now. Thanks for letting me know this is not the case :)
Thanks for the info guys. I'll do my best to simulate ~1Mbps and less when working on the project and see where that gets us compared to the local computing speed :)
UK
My bad, I was blinded by my 2 current countries - UK and Slovakia. Especially since Slovakia is so small and unimportant, I thought even Africa will have a decent upload speed by now. Turns out it hasn't...
For some reason I actually didn't think of utilizing NodeJS to do the UI. It is possibly a much better idea and keeps the size of the machine down, too! Thanks for that, I'll give it a try :)
Interesting question. Some answers: * I'm splitting the file via ffmpeg using this method: https://github.com/martinambrus/ffmpeg-dht/wiki#more-exact-splits-based-on-ffprobe-keyframes * it is my understanding that 2-pass and 3-pass encoding will take the video and optimize parts that can handle less bandwidth to use it (black scenes etc.) and vice-versa... do you see a problem doing this on a partial file basis as opposed to the full movie? The result will still be stitched back together in ffmpeg, so the 2-pass encoding would be effective on all the video parts - is that theory not correct? * the project will also include a local encoding option for those with faster machines where local encoding makes sense
Thanks, here are your answers :) * the original file will be split via ffmpeg and BitTorrent will be used to send each of these partials to nodes that can encode them * yes, upload bandwidth is indeed an issue here. The idea is to allow encoding of whatever video files user can have (let's say a DVD file) to something playable on for example a mobile device (iPhone, Android...), so you could take that DVD with you everywhere. While this could be done faster locally on many machines, the distribution is more-less targeted to people who have like a library of 20-30 DVDs and want them encoded for their iPhone, while playing PG games in the meanwhile. Of course there will be a local encoding option included and the distribution will more-less be attractive to users with good upload speeds (such as those in the UK or Slovak Republic at the moment). * 3 times retry in case something goes wrong on the virtual machine - ffmpeg could segfault because an intermediate IO failure and I wouldn't want to base the assumption of failure on that * Internet is a free medium and so it shall remain - thus blocklists (which are even natively supported in Transmission now)
Just to chime in, I use maven to automatically generate the client classes at build time, then access them like everyone else.
Where in Slovakia is Orange Fiber available? Downtown Bratislava? Everywhere down to the smallest village? I may be wrong, but I would not be surprised that most households only have access to typical DSL (with its 1 Mbps max upload speed), with only the biggest towns wired up for fiber.
While there will never be 100% coverage of fiber in Slovakia, due to the massive advertising campaigns going on for the past 2 years, most households are switching to fiber now. The monthly cost is basically the same as DSL and TV adverts can be very persuasive. Believe me, my family live in a small town and they definitely have Orange Fiber there :)
yeah thats what i do currently. use wsimport to generate class files from the wsdl. but im asking if the soap service (like method parameters) was changed you'd have to regenerate it right manually? when i added a web service client with netbeans it actually did modify the pom to include a wsimport goal.
As several others have mentioned, Maven is a build system. One of it's features is the ability to add plugins to support any environment/platfrom (Servlet, Executable Jar, Play, Portlets, Hadoop, JAX-RS, etc...) you want to run in. The way it works is one of those plugins will be producing the final artifact that you want to deliver. Some of those plugins make it easy to run within Maven for development purposes by "hooking" command line arguments to Maven, e.g. *mvn jetty:run" Therefore the entry-point is dependent on what environment/platform you're talking about
&gt; using an obvious name for you mathematical function like max(a, b) = illegal I think it's more subtle. WINE may be illegal indeed if this stupidity holds, but I don't think max(a,b) will be illegal. IANAL, but I think it's only the combination of hundreds of such method names (fully qualified, package counts too) that may be vulnerable. E.g. a single sentence in a book that happens to be the same as in another book is NOT copyrighted. For instance: "He opened the door". This sentence appears in multiple copyrighted books but is itself not copyrighted, even though the book has this disclaimer saying "no part may be copied" and "He opened the door" is definitely a part of it. But many of those sentences combined in the exact same order means it's not trivial anymore and constitutes a unique work. Again, IANAL and this is just my layman interpretation of things. I may be completely off.
Once you've banged your head against the wall for 3 hours and then added "virtual" in front of the destructor to solve the problem, you're a programmer.
 https://github.com/ClareCat/CS-125-Pacmania https://github.com/patweb/Pac-Man http://pacman-vs-ghosts.net/ http://en.wikipedia.org/wiki/Pac-Man http://fr.openclassrooms.com/forum/sujet/aide-pour-mon-projet-jeu-pacman-en-java 
Hey, this made me think a little bit and using Bit-twiddling you can achieve something similar. Maybe this code combined with yours could work? int x; // we want to find the minimum of x and y int y; int min,max; // the result goes here for(int i = 0; i &lt; arr.length-1; i++) { x = arr[i]; y = arr[i+1]; min = y ^ ((x ^ y) &amp; -(x &lt; y)); // min(x, y) max = x ^ ((x ^ y) &amp; -(x &lt; y)); // max(x, y) } :) More info at: http://graphics.stanford.edu/~seander/bithacks.html#IntegerMinOrMax But it only works in integers, unfortunately.
As an academic problem, this is a great problem to solve. But you can use the Amazon Elastic Transcoder to accomplish that task at scale and dirt cheap. It's already a solved problem.
That doesn't mean the installation won't work on a 64 bit machine. That means the installation was interrupted. My first guess would be your antivirus program was scanning one of the jar files unpacked into the temp folder during the install. We run into this kind of thing from time to time during automated installations. If turning off the AV doesn't work, disable other background programs (SpyBot TeaTimer, Weather apps, etc) and try again. Something is stopping the installation before it completes. Lastly, there are switches to log the installation in most cases, and while the log files are huge, they might give you more clues to what happened.
Fest is still very usable and quite great even if abandoned. AssertJ is essentially the next gen of Fest. 
(I think you some words, in first sentence?) Looking at AssertJ's first page, I like it, though their "magic extracting" seems more natural using lambdas: // Rather than magic/reflection assertThat(fellowshipOfTheRing).extracting("name").contains("Boromir", "Frodo") // I'd stick with something like assertThat( fellowshipOfTheRing.stream().map(p -&gt; p.name)).contains("Boromir", "Frodo") // though admittedly that's still kinda verbose. // I want something lisp-ish like assert( containsAll( ["Boromir", "Frodo"], map(fellowshipOfTheRing, .name) )) (Of course this last wish-syntax assumes `.name` is already first-class getter function, which isn't Java, though I think ruby does it this way?) I'm not against magic/reflection, but not when there's an easy way to avoid it. Aside: What, Java8's `map` is defined only on `Stream`s, not on `Collections`? 
Ah, I see. I think one of the benefits to using SOAP is having a rigid contract ( WSDL ) in place during development. If the service does change, I'd hope that it would be versioned somehow. I don't know of anything that would gracefully handle a difference at runtime.
Instead of: get(new Route("/hello") { @Override public Object handle(Request request, Response response) { return "Hello World!"; } }); it's now enough with: get("/hello", (request, response) -&gt; { return "Hello World!"; }); 
/r/javahelp, /r/learnjava and /r/learnprogramming all have resources linked in their wikis, check the sidebars. And also there's hundreds of threads with very similar questions, do a search query.
I agree that services to accomplish this existed for some time now. But you need to pay for them, they tend to be non-flexible with regards to custom encoding options etc. This is a very different, free and decentralized concept. As such, it's not so much about solving the problem of transcoding but to give something back to the community - and keep it free :)
thanks! I'm kinda struggeling with the lessons in school so I"m looking for some extra lessons online which could be helpful
Java 8 has method references i.e. syntactic sugar for what you wrote as lambda.
What rxtx are you using that doesn't work on 64bit JVM? (Edit brain typed wrong word)
tried downloading whilst av was turned off and it didnt work. Same error message
I'm using the one that came bundled with the XBee API. I've found an [RXTX library on GitHub](https://github.com/rxtx/rxtx), which appears to have 64-bit support and also appears to have mostly stopped development. It points to a download site that's turned into a spammy link-farm, so I'm guessing that the author has stopped development and maintenance. I'm going to see if I can get that one from GitHub to compile. EDIT: That's a fail. The build instructions tell me to run configure, which doesn't exist.
Ok, final update. I installed the rxtx that's in the Ubuntu repositories and it seems to work. Hopefully the Debian repositories that my Raspberry Pi uses have a similarly working version.
http://www.reddit.com/r/linux/comments/258e1w/distributed_ffmpeg/ /r/distributed 
I should have clarified - I'm considering 'rxtx' to be the library as a whole, including the native pieces. I did find one in the Ubuntu repositories that works. It's just the bundled one with xbee-api that's 32-bit only.
OK. Your use of the specific term "JVM" confused me, since as you confirmed the issue is nothing to do with the JVM. You can get native libs for 64 bit platforms here: http://mfizz.com/oss/rxtx-for-java And also they are built in to many linuxes or available via the package manager. There is also https://github.com/NeuronRobotics/nrjavaserial I started using that in place of stock rxtx because it bundles all the various native libs inside the jar. Makes cross platform distribution simpler.
Yeah, I would only use Puppet for dev or prod deployments, not for end-users.
Agreed. Like I said, this is a great academic project. Have fun! 
Do you use any ORM tool? If you use hibernate, you can put your SQL statements into separate xml files. Or you can prefer to use criteria api(in hibernate) for easy tasks (e.g. find by id). Thus, you can fetch your data without writing any sql statement, orm framework does it for you.
If I have to use SQL, then I'll normally put them as a constant above the method. This has several benefits, it is normally indented further to the left so you can have wider strings, you can reuse it if you need to, and it has a VERY slight performance increase (but this shouldn't be a primary concern) 
This, and use prepared statements. 
Thanks for doing this! I created a similar project that used lambdas, [Micra](https://github.com/noelherrick/micra), but Spark is way more complete and mature. Your efforts are appreciated - it's encouraging to know there's a community of Java programs that value terse APIs. 
There was a conversation not long ago in this sub about serial communications in Java (http://www.reddit.com/r/java/comments/2288cj/what_is_java_doing_for_serial_communications/), and there were a bunch of RXTX forks/clones to consider. However, if one of them is available in working state in the the Ubuntu repository , that's good news to hear.
Yes, forgot about them. I'm too addicted to ORM!
I was in charge of a junior once, who thought he needed to dynamically declare variables (as you say), so he built his class, cut it in parts and made an Apache Velocity template with that, which was stitched, compiled and run at runtime. Yeah, it was THAT horrible, but the guy was tenacious, he had something to show. If you have a Java assignment and you, out of the blue decide that you need metaprogramming, java templates, complex introspection or bytecode manipulation, chances are you didn't fully understood your requirements. This is the same as when you say "the compiler has a bug", 99% of the time you are completely wrong and you have to revise your assumptions.
Coming from the world of scripting languages like shell I actually considered doing this and other retarded things when I was an OOP newbie. With time I realized how stupid this was.
It is just me, or does this API "feel" a lot like Node.js? I'm not knocking it... I may just have to give this a go on my next side project. I'm *really* curious as to what it will work like on a real-world project.
For those that didn't find the slides useful, I suggest to take a look at their design page: http://osv.io/design/ Interesting stuff :)
Excellent framework! My next project will almost surely use this, as I want to diverge from PHP and Codeigniter 
FYI, JavaScript is quite different then Java. In fact, Java and JavaScript are similar just like Ham and Hamster are similar. Perhaps try /r/javascript if you need a JavaScript implementation?
I thought this was about the apache spark project. (http://spark.apache.org) - I've never heard of this "spark" framework.
Dude, this subreddit is not here to do your homework for you. 
This.right.here. Sorry man, you should take this as a learning experience.
Everyone elses' comments are good. I am going to just add one thing. If you have no varialbes in your string concatination, which you shouldn't with SQL (hint: use prepared statements), then you don't need string builder. Just do this: String sql = "select *" + "from table t" + "where t is not null"; Because the string concatenation is done at compile time, not runtime. No performance hit. You only get issues when it involves loops or variables or anything that isn't know at compile time. Also, we use HQL named queries for about 90% of our needs. Most queries in any app are usually pretty simple, (find by id, super simple join, etc). We drop down to either a raw query run through hibernate or without hibernate if we need custom joins, better performance, hibernate caching screws us over or something like that. Either way, the query is usually a private static field. 
Question (coming from someone who hasn't adopted Java 8 yet in practice)... Could you leave out the return statement and curly braces to make it even simpler?
1. You should be seeing a compile time issue because *Thread_extended* takes an int primitive and you are supplying a String to the constructor. 2. I assume the loop in Thread_extended constructor is the work. If so, this needs to be added to the *run* method. Reason for this is when *T1.start();* is called the jvm will create a Thread on your behalf and then call the run method. You should never directly invoke the run method. This will be handled for you. Hope this helps
Yes, you can.
Yup get("/hello", (req, res) -&gt; "Hello World");
If you want an all-in-one data persistence then go wi Hibernate. If you want control over actual SQL queries an you dont want to use static strings, go with MyBatis. If you want SQL queries to be part of the code, go with jOOQ. In other cases (quick'n'dirty and hard to maintain code) you could put the statements in static strings, as others have mentioned. 
It has to do with the way HashMap arranges the items according to their hashCode in a deterministic manner as to provide an optimal means of looking up items via their hashcode. The hashCode of an integer is the integer itself, however the calculation for a string is less representative of what the string is. I.e, the hashcode for Integer 5 is 5, and 4 for the Integer 4, but that hashcode for "5" could be 7 and the hashcode for "3" could be 8. (These obviously aren't the actual values, but gets the point across.) If the items are thus arranged deterministically based upon there hashCode, it would be seem "Random" for strings, but not for integers. This isn't guaranteed behaviour ofcourse. Also, I prefer using the String.valueOf over concatenating an empty String, since it is more representative of what you are trying to do - both in the eyes of the compiler\JVM and in the eyes of another programmer looking at your code.
For one, you could use an array to store the **int setX** variables. Reading the parameters should work in a loop: int[] set = new int[10); for(int i=0; i &lt; set.length; i++) { set[i] = Integer.parseInt(request.getParameter("set"+(i+1))); dastagescore.updateScore(stageid, i+1, set[i]); }
 private int [] sets = new int[10]; for (int i = 0; i &lt; sets.length; i++) { sets[i] = Integer.parseInt(request.getParameter("set" + (i + 1))); } for (int i = 0; i &lt; sets.length; i++) { dastagescore.updateScore(stageid, i, sets[i + 1]); } Something along those lines should work. EDIT: forgot something :)
You could just go ahead and loop through the numbers and append them to the parameter prefix like this: for (int i = 1; i &lt;= 10; i++){ // or some other range String parameter = "set" + String.valueOf(i); int set = Integer.parseInt(request.getParameter(parameter)); dastagescore.updateScore(stageid, i, set); } Having said that, having to loop through a bunch of strings that you expect your code to know beforehand smells like an issue somewhere else in your design. edit: FYI this post should have probably gone in /r/javahelp 
Thanks for that. I was stuck trying to dynamically create new variables (something which obviously doesn't exist). I should indeed have thought of using an array. Guess my brain stopped functioning for a while.
thanks for the link to /r/javahelp . And the reason why I need to loop through those strings is because they're being sent as params from some jsp page. But you're right as I probably could place those parameters in an array from the start. Will be looking into that right now.
Just as allahsnackbars said. It is a consequence of how HashMap uses the hashCode() method and how Integer implements hashCode(). If you don't know, hashCode() is a special method, it is designed so that each class that implements it try as much as it can to return different values for different objects. If two object are equals (as per the method equals()), then the must have the same hashCode(). HashMap exploits this method to "distribute" different objects into different "buckets". So for Integer, the obvious implementation of hashCode() is returning the integer itself, for string is a little bit more convoluted (it basically cycle all characters building up an integer). Note that: Map doesn't guarantee sorting, it means that things *can* eventually be sorted, it's just that you can't relay on that. HashMap doesn't guarantee either, but other implementations of Map does! For example, TreeMap is guaranteed to be sorted. Sorting maps also implements SortedMap interface
&gt; I hate having queries (especially big ones) in Strings. Too much time is wasted to extract a query from the class and execute it against the database when you need to test your query. Good point. I hate that too, but if I put the SQL statement in a file, wouldn't I need to read from that file every time I want to execute the SQL statement? Would that file I/O and I/O exception handling impacts the performance?
Just read the query once and that's it. I suggest doing that at start up and if an exception occurs then just don't let your application start. It should not initialize with such error. How you do this is a matter of taste. The simplest thing I can think of is a singleton that keeps the SQL strings loaded from these files and is initialized at the startup. In fact this is one of the cases where a singleton makes sense: to have some read-only configuration, used by both your application AND your test cases, in a central place that is easily accessible from anywhere. 
See this documentation: https://javaee-spec.java.net/nonav/javadocs/javax/json/JsonArrayBuilder.html The code for creating the JsonArray is different - just a copy from the documentation: JsonBuilderFactory factory = Json.createBuilderFactory(config); JsonArray value = factory.createArrayBuilder() .add(factory.createObjectBuilder() .add("type", "home") .add("number", "212 555-1234")) .add(factory.createObjectBuilder() .add("type", "fax") .add("number", "646 555-4567")) .build(); Build closes the build process and returns the immutable array.
Thanks. I spent a few minutes before figure it out. I still don't understand why it has to be designed in this way. (I don't mean it is bad, I'm just curious.)
I found browsable source: https://eclipse.googlesource.com/jsdt/webtools.jsdt.core/+/v201307161720/bundles/org.eclipse.wst.jsdt.core/src/org/eclipse/wst/jsdt Additionally I found some bloggers who have discussed it. You could contact one of them. 
Yet another framework? What makes this simpler than Simple? See http://www.simpleframework.org
What have you found out so far? What is your existing knowledge, and what have you found from Googling the question? As a separate question, what's the reason for using jsp:useBean - that's not a tag I've had to use for a long time...
On my last project I started with simple, but then switched to spark. IIRC simple is just a framework for handling requests, whereas spark is an all in one solution that handles the web server.
this is good, i'd just add that if you were only using the variables to do the updateScore call, you don't even need the array.. for(int i=1; i &lt;= 10; i++) { dastagescore.updateScore(stageid, i, Integer.parseInt(request.getParameter("set"+i)); }
Definitely okay if you don't need the values somewhere else.
What do you want to know exactly? You setup the nexus server, then your configure maven to use that mirror.
Same here. But then again I'm using the apache spark project at work.
If I recall the way a hashmap (This may not be how the Java implementation works) works under the hood is that it's an array of linked lists. **If I'm wrong about this I'd be interested in knowing why and how.** When you create the hashmap it's a small array, say 100 items. When you insert an item it's placed in the linked list with the array index of the keys hashcode modulo the size of the array list. When you retrieve an item it goes to the array element that matches the key modulo the size of the array, then iterates through the linked list to find the key. If any of the linked lists starts to get too long it rebuilds the hashmap with a bigger array to spread things out a bit more, I think it will also shrink the map if you take out too many items but I could be wrong. I think it you put in keys that were larger than the size of the initial array then the output wouldn't be sorted, or it would be sorted by the modulo of the key to the array size, which isn't much use. Also the hash map can resize at any point depending implementation so you can't rely on this ordering. 
Java 8 changed that behavior, now it will put colliding objects in TreeMaps instead of LinkedLists. There even was a post here about it: http://www.reddit.com/r/java/comments/23w4j3/hashmap_performance_improvements_in_java_8/
Do it!
Thank you for reply. :) In your code min = y ^ ((x ^ y) &amp; -(x &lt; y)); // min(x, y) (x&lt;y) returns a boolean so -(x&lt;y) is invalid. Can you please re-check
How many machines do yo use for development at home? I just use one machine for development, so having a nexus repo at home is an overkill. Maven caches artefacts in ~/.m2 directory anyway. At work, when entire team is fetching same artefacts over and over- it's definitely worth it.
Only a few minutes work, seems a good idea.
This is just blog spam mirroring a rather worthless article. 
awesome - thx!! but thats so DUMB!
I see. It can be useful if you deploy your own privates artifacts. I can see a far fetched scenario where you want to save bandwith on your snapshot.
IMO nexus is very easy to manage so I don't think you should not have any issues. My only warning on this is I would be careful if you are colaborating with other people i.e on OSS projects. If your build becomes dependent on your nexus having some exotic upstream repos, or some dependency that you have manually deployed. Then obviously anyone else building the same project will have issues. Its not a huge issue though, and problems like that are very quickly discovered.
I'm a bit rusty on this topic myself and I haven't looked at the source code of HashMap for a while, but I think you're correct in general. The shrinking and growing part are determined by the load parameters IIRC. You're definitely correct with the sorting behavior. While it can happen that a HashMap maintains the insertion order, it doesn't guarantee it, so you shouldn't rely on it. We had a case of that in the department where switching to Java 7 made a program unrunnable because it was built on behavior that was never guaranteed, but valid until Java 6. Trust the documentation if it says "doesn't guarantee xyz behavior".
I don't have the setup and I would only do it under one of these circumstances: * super slow internet: the repository would survive new installs of my machine and therefore save me a lot of pain * multiple machines (2+) accessing maven repos
Do it! It lowers the costs for having the Maven Central servers around. It is quite expensive for Sonatype &amp; Co to support the co-located infrastructure. I have mine installed on my server. I even use this server at work (proxy repositories). It makes life much easier.
I haven't used Jersey in a while so I don't know off the top of my head. There seem to be a lot good examples if you try googling "how to send http codes using jersey". For example: http://stackoverflow.com/questions/12489137/how-can-i-send-a-response-code-and-content-from-a-resource http://examples.javacodegeeks.com/enterprise-java/rest/jersey/json-example-with-jersey-jackson/ @POST @Path("/") @Consumes(MediaType.APPLICATION_JSON) public Response consumeJSON( Student student ) { String output = student.toString(); return Response.status(200).entity(output).build(); } Also try looking at Jersey's docs: https://jersey.java.net/documentation/latest/
It feels like Node.js because you're handing each action a callback (anonymous class in pre-1.8 JDK speak) but there are plenty of Java frameworks that use callbacks. Building UIs in Swing (or most UI frameworks) would be a go-to example here. Amazon's Java SDK for AWS also includes async versions of the different clients which operate the same way.
First thing I look at for projects like this are it's dependencies to make sure I don't have to add 100 more jars to my project. This one seems legit with only SLF4j and (if you use it) Jetty. Edit: The obvious question I have is if you can still use the framework with pre-JDK 8 without lambda support or if the framework will only work on JDK 8.
You are close, just missing a few bits. Try this: @Path("/") @GET public Response getResponse() { return Response.status(Response.Status.BAD_REQUEST).entity("Bad request").type(MediaType.TEXT_HTML).build(); } The entity method is the response that will be returned with the status code while type tells the browser how to render the response.
Using Spring Data JPA plus Hibernate will save you a lot of time. 
Yeah the question is what are you expecting to "get" in the client? The code you have here should work fine, but the browser will just get a response code, not any sort of response text.. which might be fine, just depends on what you expect the client to do with the info.
Hmm, ok, that looks alright, but Is that the correct way for a webserver to give a 404 error? Does the header start with HTTP/1.1 404 BAD_REQUEST? (Sorry, no idea how to check raw HTTP traffic to localhost) Is my browser supposed to just show "Bad request"? If I want a fancier HTML "bad request page" to show, then I'll have to code that myself and replace the "Bad request" field with that? Oh and thanks a lot for the response!
Do it. Those saying using local m2 cache are wrong since using it won't be safe for concurrent builds unless using the latest maven extensions. 
&gt; Is that the correct way for a webserver to give a 404 error? Does the header start with HTTP/1.1 404 BAD_REQUEST? Yes, that is valid. The text in the header isn't really important. &gt; (Sorry, no idea how to check raw HTTP traffic to localhost) View HTTP headers in Google Chrome? http://stackoverflow.com/questions/4423061/view-http-headers-in-google-chrome Or you can install a full HTTP debugger like Fiddler http://www.telerik.com/fiddler &gt; Is my browser supposed to just show "Bad request"? The browser will show what you send back. So in your case, yes. &gt; If I want a fancier HTML "bad request page" to show, then I'll have to code that myself and replace the "Bad request" field with that? Correct. 
Without seeing any code or a more detailed description, it is hard to say anything. If you absolutely can't delay the initialization of the timer, you can have the method it calls proxy for the real method that changes panels. The implementation would look something like this: void timerEvent() { if (this.actual != null) { this.actual.changePanel(); } }
This isn't recommended due to thread safety issues.
Exactly what he said. The only thing I would add, is that if you want a fancier HTML "bad request page" you should probably code that in whatever client you use to connect to the RESTful service, rather than within the service itself.
personally I'd just declare as constant - and I lay it out as I would if just using sql query tool to make it easier to understand. If I have a complex multi-join query then I make that a view/stored proc in the database to keep complex sql out of the Java code.
This is the eclipse plugin called jsdt. Not the code OP is looking for. 
Another Java web framework? What makes this different/better than **web4j**? (http://web4j.com) Some of the web4j focus points: * it's small, and has a philosophy of deep simplicity and minimalism * it can significantly boost your productivity compared to other tools * it doesn't take you long to learn (and you don't need to buy a big fat book) * it makes your application classes simple, and easy to maintain 
as far as I understand, String.valueOf() will be even faster and consume less memory footprint...
**EDIT:** Shit I saw the title and thought you were asking a question... Ooops... I started typing out an answer then I thought to do a quick google to make sure I was right and found this question on [StackExchange](http://programmers.stackexchange.com/questions/195099/why-is-string-immutable-in-java) that answers it better than I ever could. **Concurrency** Java was defined from the start with considerations of concurrency. As often been mentioned shared mutables are problematic. One thing can change another behind the back of another thread without that thread being aware of it. There are a host of multithreaded C++ bugs that have croped up because of a shared string - where one module thought it was safe to change when another module in the code had saved a pointer to it and expected it to stay the same. The 'solution' to this is that every class makes a defensive copy of the mutable objects that are passed to it. For mutable strings, this is O(n) to make the copy. For immutable strings, making a copy is O(1) because it isn't a copy, its the same object that can't change. In a multithreaded environment, immutable objects can always be safely shared between each other. This leads to an overall reduction in memory usage and improves memory caching. **Security** Many times strings are passed around as arguments to constructors - network connections and protocals are the two that most easily come to mind. Being able to change this at an undetermined time later in the execution can lead to security issues (the function thought it was connecting to one machine, but was diverted to another, but everything in the object looks like it connected to the first... its even the same string). Java lets one use reflection - and the parameters for this are strings. The danger of one passing a string that can get modified through the way to another method that reflects. This is very bad. **Keys to the Hash** The hash table is one of the most used data structures. The keys to the data structure are very often strings. Having immutable strings means that (as above) the hash table does not need to make a copy of the hash key each time. If strings were mutable, and the hash table didn't make this, it would be possible for something to change the hash key at a distance. The way the Object in java works, is that everything has a hash key (accessed via the hashCode() method). Having an immutable string means that the hashCode can be cached. Considering how often Strings are used as keys to a hash, this provides a significant performance boost (rather than having to recalculate the hash code each time). **Substrings** By having the String be immutable, the underlying character array that backs the data structure is also immutable. This allows for certain optimizations on the substring method the be done (they aren't necessarily done - it also introduces the possibility of some memory leaks too). If you do: String foo = "smiles"; String bar = foo.substring(1,5); The value of bar is 'mile'. However, both foo and bar can be backed by the same character array, reducing the instantiation of more character arrays or copying it - just using different start and end points within the string. foo | | (0, 6) v v smiles ^ ^ bar | | (1, 5) Now, the downside of that (the memory leak) is that if one had a 1k long string and took the substring of the first and second character, it would also be backed by the 1k long character array. This array would remain in memory even if the original string that had a value of the entire character array was garbage collected. One can see this in http://www.docjar.com/html/api/java/lang/String.java.html public String(char value[], int offset, int count) { if (offset &lt; 0) { throw new StringIndexOutOfBoundsException(offset); } if (count &lt; 0) { throw new StringIndexOutOfBoundsException(count); } // Note: offset or count might be near -1&gt;&gt;&gt;1. if (offset &gt; value.length - count) { throw new StringIndexOutOfBoundsException(offset + count); } this.offset = 0; this.count = count; this.value = Arrays.copyOfRange(value, offset, offset+count); } // Package private constructor which shares value array for speed. String(int offset, int count, char value[]) { this.value = value; this.offset = offset; this.count = count; } public String substring(int beginIndex, int endIndex) { if (beginIndex &lt; 0) { throw new StringIndexOutOfBoundsException(beginIndex); } if (endIndex &gt; count) { throw new StringIndexOutOfBoundsException(endIndex); } if (beginIndex &gt; endIndex) { throw new StringIndexOutOfBoundsException(endIndex - beginIndex); } return ((beginIndex == 0) &amp;&amp; (endIndex == count)) ? this : new String(offset + beginIndex, endIndex - beginIndex, value); } Note how the substring uses the package level String constructor that doesn't involve any copying of the array and would be much faster (at the expense of possibly keeping around some large arrays - though not duplicating large arrays either). Do note that the above code is for Java 1.6. The way the substring constructor is implemented was changed with Java 1.7 as documented in Changes to String internal representation made in Java 1.7.0_06 - the issue bing that memory leak that I mentioned above. Java likely wasn't seen as being a language with lots of String manipulation and so the performance boost for a substring was a good thing. Now, with huge XML documents stored in strings that are never collected, this becomes an issue... and thus the change to the String not using the same underlying array with a substring, so that the larger character array may be collected more quickly. Don't abuse the Stack One could pass the value of the string around instead of the reference to the immutable string to avoid issues with mutability. However, with large strings, passing this on the stack would be... abusive to the system (putting entire xml documents as strings on the stack and then taking them off or continuing to pass them along...). **Other languages** Objective C (which predates Java) has NSString and NSMutableString. C# and .NET made the same design choices of the default string being an immutable. Lua strings are also immutable. Historically, Lisp, Scheme, Smalltalk all intern the string and thus have it be immutable. More modern dynamic languages often use strings in some way that requires that they be immutable (it may not be a String, but it is immutable). **Conclusion** These design considerations have been made again and again in a multitude of languages. It is the general consensus that immutable strings, for all of their awkwardness, are better than the alternatives and lead to better code (fewer bugs) and faster executables overall.
Any reason you are using String.valueOf(i) rather than just concatenating i to the string? I know they both mean the same thing but "set" + i is easier to read. On the other hand kudos on thinking outside the box and starting with 1 rather than 0. 
If you use libraries which are not in some Maven repository (Central, Spring, JBoss, ...), set up Nexus / Artifactory, so you don't have to install them in local repository. Also it is useful if you use more machines for development (coder111 answer). Otherwise don't bother. 
Just in case OP runs into any issues and gets confused, it's worth noting that you can't create an instance of List as it's abstract. You can have a List variable and assign an ArrayList object to it though. Also to save you the headache of having to cast endless Objects to Items look into using "Generics". So you would declare it as: &gt; List&lt;Item&gt; items = new ArrayList&lt;Item&gt;(); I'm curious as to how OP intended to implement it with 2 dimensional arrays, and what train of thought lead them to that. 
Thanks, I realize that experience means more than credentials from a test. Just don't want to waste an opportunity if the job is willing to foot the dough.
I'm not sure this is true, I don't have a CS degree and having the core Java cert has helped me get my foot in the door for a couple of consulting gigs. I'm sure some people don't trust them, and I wouldn't trust them without a portfolio to back them up, but I don't think it is a net negative having credible ones.
Why do you think that is? 
I scanned the first page and looked at ease of use based on initial documentation. In micro there were keywords that made me think "Well getting this going is going to be a thing" for instance the word ANT appearing in installation. Versus Spark which is just a pom.xml dependency, so if I know maven spark is virtually no work at all. Furthermore being that I use maven and initially Micro does not have a maven enabled jar out there already it means even more work for me (or at least not one without me wasting more time searching). Again all this is an initial scan, going from nothing to something Spark seems far superior, I can look at their first page and know how to get it working without any other reading. I don't even need to scroll the page to figure out how to get Spark going.
SortedMaps (eg TreeMap) are great if you need to keep your keys sorted, but if you just want to maintain insertion order, you can use a LinkedHashMap. This is great because add(), contains() and remove() are still O(1) operations (like HashMap), unlike with the SortedMaps, in which they are presumably O(logN)
I believe that's a different JSDT. Offhand, I think that's the Eclipse Javascript Development Tools. The one I'm hunting for is the Java Shared Data Toolkit. 
I use static final variables, I use the MessageFormat class for the table owner replacement and a prepared statement for the query parameters. private static final String SELECT = "SELECT id, name, gender, class from {0}.Students where id = ? Limit 1"; public Student getByStudentId(long id) { ... }
Good points. I am also wondering what the 2d array is about. It makes me suspicious there are some fundamental misunderstandings about how to use objects.
That fast method to return the array index only works if the capacity of the collection is a power of two, which is of course ensured with the current Java implementations. A consequence is that HashMap must rehash the hash it got to defend against poor quality hash functions (that does not distribute lower bits uniformly). As far as I remember Integer does uses it's value as the hash value, which complicates things when you only have numbers with the same lower bits, as those are what used to identify a bucket in a power of two hash-based collection. 
You are correct. The collision resolution Java uses is called closed addressing (separate chaining). Basically the array elements (buckets) are themselves arrays, so they can store multiple values. &lt;http://en.wikipedia.org/wiki/Hash_table#Separate_chaining&gt; With Java 8 once the size of a bucket grows beyond a certain treshold, that bucket switches from using a linked list to a balanced tree. In the case of high hash collisions, this improves worst-case performance from O(n) to O(log n). &lt;http://openjdk.java.net/jeps/180&gt; 
Are you also confusing BAD_REQUEST (400) with NOT_FOUND (404)? (See [HTTP/1.1 RFC](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1)) To generate a 404 response use the following code @Path("/") @GET public Response getResponse() { return Response.status(Response.Status.NOT_FOUND).entity("Not found").type(MediaType.TEXT_PLAIN).build(); } 
There is also a mutable string class: `StringBuilder`. Since they are different classes, you can tell them apart, but they both implement the interface `CharSequence`.
The question mark at the end is very misleading - I thought you were asking why!
No, windows 2000 and XP are 99% the same. Besides, no one should really be using a 10 year old os. It's time to upgrade or use linux if you are intent on keeping the old hardware.
I found the http://javabrains.koushik.org/ videos to be awesome! The guy can be a little hard to understand at first but he is an excellent teacher.
Excellent! I'll check these out! There are also courses for other relevant topics I'd like to learn about.
:(
javaranch is a great resource.
Moron.
Why Struts? Just curious, I mean I just rolled off a Struts 2 project, but it's not something I'd start a new project with again.
I've started an internship for the summer, and my employer uses it.
You can go to this: http://introcs.cs.princeton.edu/java/home/ It's through Princeton. They have powerpoints, assignments, and general info. I'm using it now over the summer as a prep for a class (not a prereq, it would just make the class easier for me because it's in java and I know only know C++)
Read books and start hacking away. Just keep going through it all. Don't worry about memorizing or knowing everything. You just need to be familiar with it and know how to get information yourself first. Above all, you need to have a passion for it and have fun! It can be overwhelming, but each day you'll learn a bit more until you one day realize you still don't know much, but you know a lot more than many others ;) The lessons you learn doing is just something you can't learn anywhere else. You must hit obstacles and you must keep going. 
http://www.mkyong.com/all-tutorials-on-mkyong-com/ These tutorials helped me out in my last course that used Struts 2. It looks like there are Spring and Hibernate Tutorials as well.
*something* is showing JPanel. That same *something* can start the timer. You don't have to start the timer when the program starts.
Spring boot is an awesome tool to spin up a service really quickly using the spring framework. Take a look at this: http://spring.io/guides/gs/rest-service/ There is an associated github repo with a working example as well. it is super cool.
Different strokes for different folks i suppose, but once i saw Spring i was happy to never have to work with a strutsconfig.xml again.
Nope, just regular blog-spam. This user only submits this blog - over and over again.
I'm not a radiologist, but I have worked in maintenance of computer based radiology systems. Sorry to tell you that your idea is way too late. Programs like your idea exist in nearly all medical domains. Can't name them as I have not specifically worked with them, but I've seen them in action (in Europe and North Africa) and I can assure you that they exist. Any attempt to make money out of that idea is wasted time. Big companies wouldn't sponsor anything that already is on the market.
 QueryDSL: nice expressive database API w/o the overhead of Hibernate http://www.querydsl.com/ List&lt;Customer&gt; result = query.from(customer) .where(customer.lastName.like("A%"), customer.active.eq(true)) .orderBy(customer.lastName.asc(), customer.firstName.desc()) .list(customer); 
Well, thank you for pointing that out , i would appreciate it if you send me the names of those programs or what they call it in general . I appreciate your experience but I have to see what you are talking about in details before I calling it already done . 
You are kinda right actually ; there is something called "templates" where you press a button for a ready made report text to be put on your screen and then fill the gaps using primitive word processing , maybe that you have seen . My idea is totally different . Money is not exclusive to big companies sponsoring , ads on a website can do great too. 
So, it's pretty much Some(e) and None in Java? 
mkyong is a swiss army knife.
Look at the IRC protocol, and do the exact opposite.
I would imagine that sometime in the future, when Java 28 hits, there will be a new type to prevent exceptions caused by accessing missing and unchecked Optional&lt;&gt; values. From my experience, NPEs usually occur due to laziness (prototype code becomes protoduction code), not actually *forgetting* to check for null.
"Marty.. we have to go back!"
Well *null* is not "bad" in itself, the issue is about the management of nullable types in a statically-typed language; A type system that makes no difference between type T and type T+null is suboptimal, because it relies entirely on the discipline of the programmer to avoid null dereferencing mistakes. And you know what happens when you rely entirely on the programmer :) Since the introduction of Optional in java 8, the situation has a bit improved, though. http://java.dzone.com/articles/optional-java-8-cheat-sheet edit: ahah sorry thought it was a self post question, didn't read your article :D 
Until you start formally proving every single program you write, every single bug ever can be credited to a certain amount of laziness then. Also, you can be super paranoid about NPEs, if you rely on third party API who change its postconditions without telling you, you're still at risk. Optional adds a bit of security.
I still don't understand why Optional exists. You still need to check your result, you just check Optional.isPresent() instead of != null. If you just call Optional.get() without checking Optional.isPresent() first you will still get an exception, just like when expecting an object where you only got a null. The only difference is that all the NPEs are now NoSuchElementExceptions. To me this seems like a rather useless addition to Java.
It's all about the contract. If i tell you that there is an apple in a box, and in fact there is none, you may be surprised. Surprise is a bad thing. But if I officially tell you "THERE MAY OR MAY NOT BE AN APPLE IN THIS BOX", then it's your duty to check. Contracts are everything in API design. Being able to formally tell to your client the exact nature of the message you send to them reduces the possibility of error.
But this contract is inherent with the Java language (or any other language that supports NULL). Any language that has objects and null references indirectly states that **any** object can be null and you cannot rely on receiving a valid object reference. Therefore it is already your duty to check what you get from other methods. Optional just allows you to express this more verbosely and I don't see a benefit in that. If Java would enforce on the compiler level that Optional.isPresent() must be called before Optional.get(), then I could see a benefit. But the way it is now Optional seems rather pointless to me.
The difference is that Optional makes you explicitly think about it. Or ignore it, but that's your problem, now. With `foo.toString()`, you are likely to *forget* about handling the null. With optional, if you don't care, nothing will save you. If you care, you can't possibly forget to handle the empty case.
Use more XML.
Answered in the other thread, it was me too :D
The difference is in what is said and what is implied. In `public Employee getEmployeeWithName()` the method only tells you that it will return an Employee. However, sometimes, it doesn't. If you write perfect code, you will always take care of it and `null` is no issue for you at all. If you're more like me, you will sometimes forget. And then terror ensues. In `public Optional&lt;Employee&gt; getEmployeeWithName()`, the method explicitly says to you that it might not find the employee and that you need to take care of the case. The API just saved you from a runtime exception by reminding you that you need to do some extra work.
You could reimplement pircbotx with lambdas for event callbacks, I guess? Honestly IRC is *solved problem* in about every possible language. It would be really hard to bring something a lot newer.
I will concede that there is a small benefit for a subset of cases where NPEs can occur. It all goes out the window when your Optional is null, though. ;)
The Comparator and Comparable interfaces are two interfaces available in Java for sorting the user defined objects. For more information please follow the link..
I'll have a look at this too, thank you!
Not to mention the fact that null is like a cancer. If you return that value up the call chain to code far away from where the null was generated, you end up with random null pointer exceptions. Now you have to trace the entire call graph to figure out where the null crept in. The Optional type carries its optionalness where ever it goes.
As it stand, you'd have to check every return value from every method call in order to be safe, and that's tedious. Well, maybe the author would say in the method's doc that it will never return a null, so you don't need to check for it. But then in a new version he changed his mind and the method could return null after all. If you are vigilant and read every changelog for every library you you're fine, but again that's tedious. But what if the author could specifically say "all methods of all classes in this library will always return a value, unless it returns an Optional." Then you can eliminate most null-checks and only focus on handling and recovering from the critical operations that might actually fail. If the author changes a method to return an Optional instead of a plain value, then you'd immediately notice the time you compile your program, even if you don't read the changelog. All this relies on the assumption that the extra verbosity from a few None-check is still less than null-check everywhere.
it should be called "simple alternatives to null". null has a purpose, just not one for every situation. he also barely went into exactly why it's bad.
I get the part that Optional is just a tool to tell users of a library that a method might return "nothing". Making that statement more obvious than just putting in into the Javadoc. That is indeed a benefit, albeit a small one. Optional offers a way to convey the notion that a method may return 0..1 instead of 1..1. But it does in no way prevent NPEs from happening. The Optional itself can be null. Although I would say that that would be caused by extremely sloppy programming. But if your method calls other methods to get a value and returns it, the value inside Optional can be null (Optional.of(null)). Then you are back with an NPE.
How would you expect the language to behave when you invoke a method upon a non initialized variable? I suppose default instantiaton where a variable now becomes a default value? The many levels of abstraction away in my code I debug why my variable is 'a' rather than 'b'?
What are you talking about? Null might have been a mistake, but I don't have an alternative. My point is that Optional doesn't really fix the null reference problem. It is, in my opinion, merely a tool to convey to users that a method might not return a proper object reference. But you can still get nulls through Optional.
Yay! XACML, WS-Addressing, WS-Policy, WS-Security, WS-Trust, WS-SecureConversation, WS-MakeConnection, WS-Enumeration, WS-Eventing, WS-Notification and WS-Federation. IRC will be enterprise ready! You will need a huge cluster to make it work, but who cares?
Understood, but in a static language whats the solution? I completely understand your point on Optional, even though you don't see it as a solution I would bet almost everyone sees it as a useful new option &lt;pun intended&gt;. In short that's what I am talking about. 
there was a very similar discussion to this just a few weeks ago: http://www.reddit.com/r/java/comments/21kzvm/tired_of_null_pointer_exceptions_consider_using/
This has definitely been done. On the [EMR that I worked on](http://oscar-emr.com/), we called these 'eforms'. They were actually a combination of what you're referring to, with areas for free text as well. Data was available as a report of the form, as well as in the database for charting, etc. One thing that I learned working with EMRs though, is that we had *far* more requests for better ways to enter narrative text (i.e. automatic dictation) than we did for canned forms. I will admit that I haven't worked with any Radiologists directly (most of my customers were family-practice, with a couple specialists mixed in), but I know that there are radiology-specific applications out there. I would be quite surprised, for example, if [Cerner](https://www.cerner.com/solutions/Hospitals_and_Health_Systems/Radiology/) didn't have something. Last thing - don't underestimate the complexity of what you're proposing. It seems very simple on the surface, but if you actually want physicians to use the software, you're going to at the very least let it be customized on a per-install basis, and integrate with existing EMRs. All that being said, nothing is impossible. The Oscar EMR I mentioned earlier started out with the vision of a family doctor to build an open-source EMR, and it has a significant install base in Canada.
I swear to fuck I am going to murder whoever thought blacking out the screen and popping up an ad was OK. On the list of things you should almost never do, it is number 2 right behind a welcome page.
No you have a game thread that iterates through an array of ghosts, if there are 20 ghosts or 1000 ghosts it doesn't matter. Having lots of threads that all need to access and alter game state and be aware of each other and the board state is a nightmare and a recipe for disaster. You can pass in a strategy object to your ghost instances or have SmartGhost and DumbGhost subclasses of Ghost.
&gt; It all goes out the window when your Optional is null, though. ;) While this can legitimately happen, I would argue that returning a null optional is a sign of a poorly designed function. The exception, of course, is something like a cache where null means "we haven't loaded anything" and optional.empty() means "We have loaded something which turned out to be nothing". However, it is an exception, not a rule.
Look at optional as a strong hint to the programmer. It doesn't outright prevent a null dereference, but it shouts out "Hey dummy, this thing can be null" loud enough that the programmer should be aware there is possibly a problem here. As a bonus, because it is part of the language standard, static analysis tools will probably soon start throwing errors and warnings when someone does `optional.get().doSomthing()`. Which makes it even harder for someone to get away with making that mistake.
Quite informative , do you have any screen shots from that program? Maybe i am talking about a different niche ? From my side i am surprised i didn't come across any of those . For sure they are not popular and if they are not popular maybe it is a niche to make a better software . 
I don't think the problem lies with NULL itself but in the way it's handled in the language - eg. throws exceptions when used, unless explicitly checked. It feels like trying to mix 2 different paradigms: If you want immediate warning, throw an exception, enough said, no NULL necessary. But sometimes you really don't want to handle exceptions in these cases. Instead, I think NULL should be a proper object, highly infectious but never throwing .. and it should carry a ..stack trace of a kind. For example: x + 5 should yield NULL when x is NULL, and that NULL should contain the line number of the x+5 line, *and* a reference to the original x NULL. The same goes for method calls and everything else, no exceptions anywhere, you can still check for NULL equality at the point where you care .. and if it gets somewhere it shouldn't, you get a complete info about the origins. That's what I consider an ideal NULL. Unfortunately it may be impossible in Java.
&gt;Never heard of any of these That's what every other web framework author says as well when confronted with a long list of existing frameworks that do pretty much the same. Might even be exactly what the guy from Juzu said now that I think about it.
It seems like this could be handled with annotations (like [IntelliJ IDEA does with @Null and @NotNull](http://www.jetbrains.com/idea/documentation/howto.html)). These annotations provide similar impetus for the developer to think about the `NULL` case, which seems to be the reason people would use `Optional`. What's more, static analysis can utilize these annotations to identify unsafe usages so you hopefully never get to the NPE or `NoSuchElementException`.
http://jpassion.com/portal/ is a nice place to learn Spring, Struts and general java topics, but it's paid. 
This doesn't seem like much of a solution to me. Some actions succeeding, some actions having no effect and those actions being arbitrarily mixed is entirely too inconsistent and dangerous.
I would rather have my JVM throw a null pointer exception for accessing/using a variable that is irrelavent to its current state than carry on accessing one, causing unexpected "default" behavior that may be difficult to locate the cause of later. The problem is more to do with the added complexity of introducing variables that can become irrelavent at particular states. Especially if the given object is large/complex to begin with. Optional will hall manage the complexity a bit. I think using a null reference is an instance of using an irrelavent variable and should throw an exception. &gt;In order to explicitly convey its meaning, the function getByName() has to be named getByNameOrNullIfNotFound(). The same should happen with every function that returns an object or NULL. Otherwise, ambiguity is inevitable for a code reader. Thus, to keep semantic unambiguous, you should give longer names to functions. Or you could just use annotations. &gt;Every time you get an object as an input you must check whether it is NULL or a valid object reference. If you forget to check, a NullPointerException (NPE) may break execution in runtime. Thus, your logic becomes polluted with multiple checks and if/then/else forks: And if you forget to test for Employee.NOBODY, you could end up throwing nobody into a database rather than getting a null pointer exception.
&gt; It all goes out the window when your Optional is null, though. ;) Agreed, the issue is at the language level. However with Optional you need to be careful to never return null at the producing site, while with a standard type you need to be careful everywhere you use the value, so it's a little bit better.
Hopefully java will get call by name parameters like scala so .orElse won't allocate the default object unless necessary.
I would say null's only purpose in java now is high performance code, and it should only be used after profiling says it's necessary. It introduces too many issues for the benefits it provides.
I guess comparing to Micro is irrelevant since Spark is intended for pure java development and Micro (from a fast scan of the documentation) wants the user not to use java.
It's not about them paying for it. Its about WHAT they should pay for. If you allow people to patent broad topics you hurt the entire industry. Copyright law needs to be very nuanced and specific to be effective, otherwise people with patents can bully people who have new ideas into financial ruin.
Well, first off I think that lambdas are a nice addition, but not a reason on their own to move to Java 8. And secondly, many programmers don't get to make that decision. Their company does and unfortunately many companies have only made it as far as Java 6 - if you're lucky.
Hey, That's probably because I took this from C code. Casting tje x&lt;y to an int should fix that problem :)
One click ordering is a silly patent. Google isn't some kid in a basement w an idea being bullies by a big bad corporation. You gotta draw the line somewhere.. if sun/oracle invested millions and billions into Java,, I don't see why that's not a worthy piece of IP to defend and expect others to license if they use... its like making a copy of Ms office except going in and changing all the logos to say Google office
Don't you mean "JAVA 8 LAMBDA EXPRESSIONS BY EXAMPLES" which is the actual title of the article?
Google didn't copy/paste the code, just build it from scratch. I think that this make the big point here. If we start licencing ideas or API's, we have to go back to Xerox times. 
We are in the process of moving to 7 right now. I would recommend against production java 8 until all the kinks are worked out. Just look at the massive vulnerabilities found when 7 was released.
Really wish these articles were proof read; as someone that stumbled across this I'd click away pretty quickly - there's plenty of other guides on the web about these features which don't require me to read sentences twice to figure out what they're on about. Case in point, which comes from the first paragraph of their first feature: &gt; Before JDK 1.7 introduce a new operator &lt;&lt;, known as diamond operator to making type inference available for constructors as well
They mentioned it in the article... They had 0 IBM users.
Is there any performance benchmark numbers to explain why it is a good idea to do so? There isn't any in the article. 
&gt; As it stand, you'd have to check every return value from every method call in order to be safe, and that's tedious. Well, maybe the author would say in the method's doc that it will never return a null, so you don't need to check for it. But then in a new version he changed his mind and the method could return null after all. If you are vigilant and read every changelog for every library you you're fine, but again that's tedious. No respectable API would do that - ever. Unless it is stated that it may change at a later point in time.
The article is rubbish because the 'solution' is no better. If the first example should be named `getByNameOrNullIfNotFound()` the second has to be named `getByNameOrThrowCustomRuntimeExceptionIfNotFound()`. They both throw RuntimeExceptions. If you forget to check, the first might throw an RTE. If you forget to check, the second will throw a RTE. &gt; The Map interface (no offense to its authors) has a design flaw. Its method get() should have been returning an Iterator so that our code would look like: Returning an Iterator is a ridiculous solution. The OOP solution he proposes above is that it throws a `NoSuchElementException()` `null` is fine.
Thanks for the background info. Doesn't seem like I can find anything too worthwhile to work towards certification wise right now anyways. 
There shouldn't be a problem, as the Java Specification ([Java 7](http://docs.oracle.com/javase/7/docs/api/index.html), [Java 8](http://docs.oracle.com/javase/8/docs/api/index.html)) does make `setText(String)` a valid method of `java.awt.TextArea`. Are you sure it is the setText() specifically that throws the error, and not something else on that line? For example, are you literally typing `TextArea.setText(...)` as opposed to `&lt;variableName&gt;.setText(...)`?
Ok So I have the init method where I have TextArea minSpec = new TextArea(); minSpec.setText("Blah blah blah"); the blah blah blah shows up in the text area when you run the applet. I have an event listener on a button, and when the button is clicked it calls my actionPerformed method which works I can set the text of a lablel just fine and it changes but when I try and put minSpec.setText("This is different"); before even compiling netbeans is complaining because it can't find minSpec.
God sometimes it's best to walk away from something and come back... I just came back from blowing things to tiny bits with a shotgun and sure enough I've solved it, it wasn't public.
You can use [Optional.orElseGet\(Supplier\)](http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElseGet-java.util.function.Supplier-) in the meantime.
I'll have a look. It could be worth it to pay for them!
Is this line before or after `minSpec = new TextArea();`?
Java? For a browser extension? 
I think you are looking for a Javascript developer, not a Java developer.
[Learning Java, 4th Edition](http://shop.oreilly.com/product/0636920023463.do)
Effective Java: 2nd Edition
The code fragment you're showing doesn't even compile. It's missing a closing parenthesis. Be precise! &gt; ... it just crashes null pointer exception I believe You *believe*? How are we expected to help you if you don't even read the exceptions that you are getting? Besides, this whole thing would be easier if you'd show your code. Also: /r/javahelp would be a better place to help you. 
Knowing an object is optional and not checking its presence before use is programmer's error.
Google did not built it from scratch. They made a derivative which is/was in parts a word-by-word copy. And the court ruled, that it is infringing Oracle's copyright. APIs are copyright protected much like books or songs. There is no difference. What matters is how the copyright holder enforces his rights. And Oracle decided to enforce it. What is so hard to understand?!
It has to do with the way a CPU in practice reads from memory. Essentially by aligning things to the word size the CPU can fetch the fewest number of words, and do fewer calculations to recombine them. So fetching 0xaabbccdd could take differing amounts of time (small but non-zero difference, also depending on architecture and implementation) based on whether it is aligned or not. If you are doing computations on large sets this would give you a speed boost over the entire process. Example: 0x aabbccdd 00000000 0x 00aabbcc dd000000 In the first, fetching at offset 0 will simply return the value there. In the second, fetching at the offset 1 will require two fetches (one to offset 0 and another to offset 4) then it will have to recombine the bits (00aabbcc&lt;&lt;8 + dd000000&gt;&gt;24 or something) then it passes it to you. [Data structure alignment](http://en.wikipedia.org/wiki/Data_structure_alignment)
Leave patents out. They are different and not discussed. An API is a composition of words or symbols. And yes, usually it is based on a specific language like English. It is the composition, the arrangement of words and symbols which makes the result a product that is protected by copyright. With your explanation, books cannot be protected by copyrigh, because the book is a method of communication, too. The point is the enforcement of copyright. That is why even APIs from Apache projects require to have a copyrigt license at top of each file. They don't leave the license out, because it is "just" an API. And it does not help to cite older times (Bell Labs). In those times, copyright was just not enforced in a way it is today. That does not negate copyright laws. Those laws are not exceptional to APIs - formal definitions, arrangements of text and symbols. Edit: If you want another ruling, you first have to change copyright law by creating an exception for APIs. Edit 2: Btw. That applies to protocols, too. Protocols are protected by copyright, too. For instance, you will get sued by Microsoft if you try to create your own implementation of the Exchange protocol without their consent.
It might improve performance, theoretically. But can any slab user demonstrate such performance improvement in real usage scenarios? In particular, how much speed up is gained in this way?
A book cannot be copyrighted. Its contents however can be. The book is merely a container. The words themselves are the language or API ([not copyrightable](http://www.groklaw.net/article.php?story=20120502083035371)), a manner of communicating ideas from entity to entity. The plot or algorithm itself is also [not copyrightable](http://www.legalmatch.com/law-library/article/what-cant-be-patented.html), it is an abstract concept, if it was then we wouldn't have derivative works of fiction. Now the exact order of those words to form that plot, known as the implementation IS copyrightable. The way this case was ruled at the lower court was correct in its original ruling. The original judge was an [active programmer](http://www.i-programmer.info/news/193-android/4224-oracle-v-google-judge-is-a-programmer.html) the 3 judge appellet panel however does not have such domain knowledge and it shows. The appellate court is showing a distinct lack of domain understanding of the subject matter they are ruling about. I doubt any of the judges have any understanding of advanced mathematics or computer science. [What does copyright protect?](http://www.copyright.gov/help/faq/faq-general.html#protect) Copyright, a form of intellectual property law, protects original works of authorship including literary, dramatic, musical, and artistic works, such as poetry, novels, movies, songs, computer software, and architecture. Copyright does not protect facts, **ideas**, **systems**, or **methods of operation**, although it may protect the *way these things are expressed*. See Circular 1, Copyright Basics, section "What Works Are Protected." 
yes although that may be misleading for people familiar w/ python since in python None is the equivalent of null. edit: Java doesn't have pattern matching so in the docs(http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html) instead of talking about None/Some tags they talk about empty Optionals or ones where a value is present. To get a None you call `Optional.empty()`.
It is the **arrangement of words** that is copyrightable. Google took entire arrangements 1:1 and used them on their own. They could have created their own API. But they did not. Of course, there are not many ways to describe an Iterator in Java. If this class would have been the only class that is equal to the Standard Java API, it would have been ruled as a coincidence. But it was not only one class. And it was not just the signatures but also the Javadoc comments what were copied by Google. That's why the court has ruled that the equality of arrangements of words on the Java API and the Android API is infringing copyright protection. Your agreement with the decision by the lower court is your opinion. The Appeals Court had every right to overrule the decision. And in my opinion, the decision was correct because copyright law does NOT make an exception for arrangements of words that result in a thing we (programmers) tend to call 'API'. 'API' is just a notion. Let me outline your citiation a little different, so you can see what I mean: Copyright does not protect facts, ideas, systems, or methods of operation, **although it may protect the way these things are expressed**.
 long creditcardNum = 1234_4567_8901_2345_L; //underscore at the end of number Anyone caught doing this should be dealt with harshly.
&gt; An API is is language such as English, the software you write with that language is the book. I'd actually say that a better analogy would be that the language primitives are the *letters* the APIs are the *words* and the implementation is the book.
Java? Intermediate level? You already should know Java core perfectly. I'd like to advice you to read Design Patterns or about Java frameworks (Spring, Hibernate, etc.)...
&gt;An API is no different from any other code or from a book or a song. How much of the Java API do you suppose was an original creative work? The encumbered API includes statements which are the fundamental I/O points of the language.
&gt;They could have created their own API. But they did not. They could not have done without java.io, java.lang, java.util... Those are part of the JLS but still part of the case.
Is there any sort of reference of what knowing Java core perfectly means? I can get through programs of simple to medium complexity without Googling anything, but I may reference javadocs while I'm working on them. For more complicated programs, I generally only need to Google something if it's something I've never done (or only done a couple times). For new technologies, obviously, I need to get a book or go through the documentation carefully.
&gt; Oracle must protect itself from other implementations, because other implementations can damage the trademark / product value of their Java platform. This makes business sense. And so since I'm a developer and not an MBA I will look to invest my talents in a platform which doesn't hold my know-how hostage. It's time for a FREE classpath.
The current kneejerk reactions about optional are starting to become a bit ridiculous. The point? Well it's litterally one google search away: &gt; **What's the point?** &gt; Besides the increase in readability that comes from giving null a name, the biggest advantage of Optional is its idiot-proof-ness. It forces you to actively think about the absent case if you want your program to compile at all, since you have to actively unwrap the Optional and address that case. Null makes it disturbingly easy to simply forget things, and though FindBugs helps, we don't think it addresses the issue nearly as well. &gt; This is especially relevant when you're returning values that may or may not be "present." You (and others) are far more likely to forget that other.method(a, b) could return a null value than you're likely to forget that a could be null when you're implementing other.method. Returning Optional makes it impossible for callers to forget that case, since they have to unwrap the object themselves for their code to compile. from https://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained TL;DR: idiot proofness. I'd add that you're NOT supposed to clutter all your code with Optionals. It is meant as a specification helper between software boundaries, i.e. when your code is meant to be used by other people.
&gt; TL;DR: idiot proofness. I think the OP knows that, but he's explicitly criticising the JDK's Optional implementation
I don't get this guys arguments against Optional. &gt; The catch with this new Optional class is of course the word "class". What else could it be? Unless you add another layer to Java's type system, it can only be a reference type or a primitive type. &gt; -Throws NullPointerExceptions Of course. In this case the NPE is a programmer error. You're not supposed to put null values inside an Optional container. &gt; -Can itself be null, causing a NullPointerException The horse is already out of the barn. Optional is a reference type and thus can technically be null. Don't return null where Optional is declared. &gt; -Increases heap size Are you sure about that? The JVM doesn't always heap allocate, and for very small types, it might not even stack allocate, using registers directly. &gt; -Makes debugging more difficult Null makes debugging difficult. Why is that value null? Better trace the call graph. A reference is a box, either containing a value or a bomb, but there's no label on the box. So, you always to look inside the box to make sure it's safe or just trust that the box doesn't have a bomb inside. At least Optional puts a label on the box, and if you code with the *convention* that potentially empty values are wrapped in Optional, then you can better trust that *in all other cases* raw references aren't bombs. &gt; -Makes serializing objects, say as an XML or JSON for an external &gt; client, much more difficult Why on earth would you do this? You should serialize the thing inside optional, not optional itself.
Ok. I will check that.
Why? They are independently developed APIs describing a similar concept. Google copied Oracle's APIs verbatim. Google did not independently write the API declarations it copied. The question is whether that copying falls under the Fair Use exemption of copyright law.
Where is `r` declared?
Yes. cyclic inheritance is against OOD. Thank you for your reply. Can you please tell little more about your cyclic inheritance problem?
Don't you need a sorted array to do a binary search?
Ya. Sorted array is prerequisite for binary search. I have mentioned that in my article. Arrays.sort(), sorts the array.
Thank you. The documentation is incorrect on this one, as it states: &gt; By default, this option is disabled and compressed pointers are not used. 
Ordinary references don't indicate their nullibility, you assume or check. Optional types are explicit (and it is safer to assume ordinary references are never going to be null). So when you're far from where the reference got it's value (or its value was changed along the way), and the reference is copied over and over across the call graph, that level of indirection gives you some indication of what you've got.
That said, we now officially have multiple inheritance in Java. Congratulations!
O(nlogn) complexity at best, plus O(logn) for the search. Adding in high constant factors, I'd rather do linear search unless the array was presorted.
You might want to go to /r/javascript.
Code in interfaces? I feel dirty.
In the multiple Interfaces with the same method example, what if I want to use the default implementation provided by one of the Interfaces?
You can reference the default method using the interface: @Override public String fullName() { return NamedPerson.super.fullName(); } 
[That's another java til.](http://www.reddit.com/r/javaTIL/comments/25a9ou/til_an_easy_way_of_making_a_singleton_with_an_enum/)
They can also define constructors taking parameters as one person posts. This is also very useful.
I quickly set up your method and used the debugger and the method is not doing what you expect it to. when you do a split you end up with [0] "[Rectangle]: Width: 20.45" [1] " Length: 10.43" I think you need to go back and work on the regex to remove the unwanted characters 
Don't do it like that, it will only make your code more complicated and error-prone. Write a regular expression ([Pattern](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html) class) that describes the input and capture the width and height arguments. Use the [matcher](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#matcher%28java.lang.CharSequence%29) method to create a matcher for the input string. Then use the matcher to check for the [match](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#matches%28%29) and then use [group](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#group%28int%29) to extract the width and the height. You can use this site to play with the regular expression and have it explain to you what is going on: http://regex101.com/
Java's Enums may actually be my favorite part of the language. Unlike enums in (nearly) every other language that has them, they are completely type safe. Every single enumerated value is its own singleton of its own type. The type/values merely have a base class in common. Try implementing a finite state machine with enums sometime. It's actually really fun :)
I've used [JFormDesigner](http://www.formdev.com/) to make GUIs in Swing. It's similar to the GUI designer that is in Netbeans. I don't subscribe to the idea that you should makes GUIs by hand. I say use a designer for all but very simple GUIs. The designer programs usually consolidate the messy code into sections that shouldn't be edited by hand anyway. Once you get a job, they will either already have a method of making GUIs and you will follow suite, or they won't have any rules in place for it, so you can blaze your own trail and advocate whatever you prefer. This will be moot soon enough, because JavaFX should be the way forward and it separates GUIs into FXML layout files and easily maintainable controller classes.
There are some things that java did hit-and-miss, like Cloneable or Generics, but they really knocked it out of the park with Enums.
I was going to ask where I could see some examples of this as my book for cs 1 and 2 make enums seem pretty useless. I guess I really should pick up effective java.
WHAT THE FUCK HAPPENED TO ABSTRACT CLASSES!?
C++ has a lot of very complex features built into the language that can easily be abused. If you are interested in design patterns, you do not need a book specific to Java as they are universal concepts which you should easily be able to implement in Java. But be careful with design patterns; patterns can also be abused easily and overuse can produce lots of extra code which accomplishes little. Use patterns when you NEED to. I'd recommend reading Code Complete 2 or studying data structures if you have never done so. Core language features alone won't write lots of useful code; you need to learn frameworks and libraries. You'll pick up lots of Java knowledge writing code along the way.
I really love that initialization order is fixed, so the first ones are initialized first. And you can reference them from later constructors. Like: public enum Direction { North(0,1), South(0,-1), East(1,0), West(-1,0), Northeast(North, East), Southeast(South, East), Northwest(North, West), Southwest(South, West); private int dx, dy; Direction(int x, int y){dx = x; dy=y;} Direction(Direction... dirs){ this(0,0); for(Direction d : dirs){ dx+=d.dx; dy+=d.dy; } } (this is untested code and probably has typos)
Check out this post [10 Examples of Enum in Java](http://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html), you will find a lot about power of Enum.
thank you!
I suppose everything on this page : http://docs.oracle.com/javase/tutorial/java/index.html can be considered core Java
Using a String in lieu of other types (especially primitive types) is a bad idea. If you're going to do this parsing, do it before you pass the values to Rectangle constructor. Rectangle constructor should just accept 2 double numbers. Better still, store the values in some format that doesn't require you to parse strings to retrieve them afterwards.
An API itself is a protocol, a specification, a declaration - a bit abstract. In the example you cited, the files containing the API, have listed out the API in a particular way. They do not prevent anyone else from listing out the exact same API in a similar or different way (even same order). Copyrighting an API prevents listing the specification even if in a different order, much less implementation. It's like copyrighting an idea, or a way of interacting with a system. For example, copyrighting 'interacting with a computer/machine by providing text/voice commands/gestures as input' - pretty much covers all current ways of interacting with a computer.
I'd suggest using a debugger and finding out which statement fails for your corner case. If you don't know how to use a debugger, then I'd suggest printing out each part of each statement to find where the code is failing. 
Just for comparison, how does this stack up against C#'s enums? Only asking because there is so much stress on C# being type safe. 
&gt; Only asking because there is so much stress on C# being type safe. In what manner? Or do you mean stuff like linq queries instead of sql strings? I wouldn't say c#is a lot more type safe. Plus it has dynamic objects, mostly for interop but some people have actually built useful non-interop libraries with it. You can do stuff like turning json into a dynamic object ala ruby/python. Unlike languages like scala/f#/haskell/rust, c# does not have as heavy a focus on type safety. Is it on average more typesafe then java, I don't know but it wouldn't be by much.
Programming Tutorial website. Learn java and open source technologies
I'd be more interested on an article that helps me figure out WHEN to use this feature rather than another rehash of the 100 articles i've already read on how. 
This is video tutorial of writing Spring 4 hello World code.
I'd recommend using default methods when you need to change an interface, but don't want to break existing implementations. Sun ran into this issue back in the day and had to create a LayoutManager2 class to not break everyone. I've also heard of developers using this to create functional interfaces with more than one method, but I can't speak to that. Let me know if you'd like more details and I'll put it in the blog queue :-)
Glad you liked it :-)
Having coded in C++ before moving to Java, I can't help but notice the direction Java is headed in. I love the new features, but Java's starting to look like that other language.
Many tutorials of Java programming languages...
If you have actual examples where this is a fancy way, i'd be definitely interested !
Your solution does not work if it is fully enclosed by the other rectangle, so also check it the other way around. 
Yes, this! Learning layout managers is the important skill to learn when designing window layouts. Regardless of whether it is for Swing or something else. Regardless of whether you hand code it or use a design tool. The thing NOT to do is used fixed layouts where you position a control at 45 x and 60 y. When you resize your window, everything should fluidly resize with it. 
Enums can be used for states and other things. /** * The states that can be used in an address. */ public enum State { Alaska ("AK", "Alaska", "USA"), Alabama ("AL", "Alabama", "USA"), // . . . states deleted to make short enough for posting here . . . Wisconsin ("WI", "Wisconsin", "USA"), WestVirginia ("WV", "West Virginia", "USA"), Wyoming ("WY", "Wyoming", "USA"), Alberta ("AB", "Alberta", "Canada"), BritishColumbia ("BC", "British Columbia", "Canada"), Manitoba ("MB", "Manitoba", "Canada"), NewBrunswick ("NB", "New Brunswick", "Canada"), Newfoundland ("NF", "Newfoundland", "Canada"), NovaScotia ("NS", "Nova Scotia", "Canada"), NWTerritory ("NT", "N.W. Territories", "Canada"), //Nunavut ("NV", "Nunavut", "Canada"), Ontario ("ON", "Ontario", "Canada"), PrinceEdwardIsland ("PE", "Prince Edward Island", "Canada"), Quebec ("QC", "Quebec", "Canada"), Saskatchewan ("SK", "Saskatchewan", "Canada"), YukonTerritory ("YT", "Yukon Territory", "Canada"), AmericanSamoa ("AS", "American Samoa", ""), Bahamas ("BA", "Bahamas", ""), Bermuda ("BM", "Bermuda", ""), Micronesia ("FM", "Federates States of Micronesia", ""), Guam ("GU", "Guam", ""), MarshallIslands ("MH", "Marshall Islands", ""), NMarianaIslands ("MP", "Northern Mariana Islands", ""), Palau ("PW", "Palau", ""), VirginIslands ("VI", "Virgin Islands", ""), // Military 'State' AFOther ("AE", "Armed Forces (other)", "USA"), //AFAfrica ("AE", "Armed Forces Africa", "USA"), AFAmericas ("AA", "Armed Forces Americas (except Canada)", "USA"), //AFCanada ("AE", "Armed Forces Canada", "USA"), //AFEurope ("AE", "Armed Forces Europe", "USA"), //AFMiddleEast ("AE", "Armed Forces Middle East", "USA"), AFPacific ("AP", "Armed Forces Pacific", "USA"), // Unknown (" ", "Unknown", ""), ; // semicolon ends list of enums. // ============================================================ // fields - since they are immutable, they are made public. public final String postalCode; public final String stateName; public final String country; /** upper case state name -- for fast comparison ignoring case */ public final String stateNameUC; /** Constructor */ private State( String postalCode, String stateName, String country ) { this.postalCode = postalCode; this.stateName = stateName; this.country = country; this.stateNameUC = stateName.toUpperCase(); } // getters public String getPostalCode() { return this.postalCode; } public String getStateName() { return this.stateName; } public String getCountry() { return this.country; } /** * Lookup a &lt;code&gt;State&lt;/code&gt; from its postal code, case insensitive. * &lt;p&gt; * A data entry method, for example, might use this to * determine if a postal code is valid, * and if so, which actual state it belongs to. * * @param code * @return the State for this postal code, or null if no such postal code. */ public static State findStateByPostalCode( String postalCode ) { if( postalCode != null ) { final String postalCodeUC = postalCode.toUpperCase(); for( final State state : State.valuesList() ) { if( state.postalCode.equals( postalCodeUC ) ) { return state; } } } //return Unknown; return null; } /** * Lookup a &lt;code&gt;State&lt;/code&gt; from its name, case insensitive. * &lt;p&gt; * A data entry method, for example, might use this to * determine if a state name is valid, * and if so, which actual state it belongs to. * * @param name * @return the State for this state name, or null if no such state name. */ public static State findStateByName( String name ) { if( name != null ) { final String nameUC = name.toUpperCase(); for( final State state : State.valuesList() ) { if( state.stateNameUC.equals( nameUC ) ) { return state; } } } //return Unknown; return null; } /** * Lookup a &lt;code&gt;State&lt;/code&gt; from its name or postal code, case insensitive. * &lt;p&gt; * A data entry method, for example, might use this to * determine if a state name is valid, * and if so, which actual state it belongs to. * * @param stateNameOrCode * @return the State that matches the parameter, or null if no such state. */ public static State findStateByNameOrPostalCode( String stateNameOrCode ) { if( stateNameOrCode != null ) { final String stateNameOrCodeUC = stateNameOrCode.toUpperCase(); for( final State state : State.valuesList() ) { if( state.postalCode.equals( stateNameOrCodeUC ) ) { return state; } if( state.stateNameUC.equals( stateNameOrCodeUC ) ) { return state; } } } //return Unknown; return null; } } 
root master
I'm on my phone so I'll give you the short answer. Yes you can have buttons that lead to other screens. You'll have your main frame then have panels over the top and have the buttons hide and show different panels depending on the button. Yes you can populate from a text/dat file just read it in and assign it to it. Most Java IDE's have a gui design option in them to help you visually lay it out. Java has different layout managers built in to help you too
Well all jobs are different. At my company, we use our own framework. While you might want to get an idea of different frameworks, I wouldn't waste my time learning them in detail. As a java developer, the best advice I can give you is to know how to use other stuff. Be an Oracle expert, that will open tons of doors. Be a problem solver. Companies are looking for people that can learn quick and fairly independent and reliable. You have to sell them on you and your ability to adapt on the job. 
Try changing this GridBagConstraints GridBagConstraints.NONE to GridBagConstraints.HORIZONTAL 
Perfect! Thanks alot! I had a feeling the layout had something to do with it. Glad I included it in the snippet. :)
I've noticed that college grads really aren't prepared at all for moving to a working environment. You'll have to learn a lot of this stuff on your own. A lot of grads don't put the work in after school so don't get complacent. 
That sounds nice. I will have a look at them.
Yeah, requiring someone to know Spring is stupid. Same with SOAP. If you can show that you can learn on your own, should be fine.
More than anything, companies want someone who is motivated to learn on their own and has a high capacity for learning quickly. If you demonstrate those, then your actual knowledge on many subjects is not as much a question as how fast can you get onboard overall (since this industry is constantly changing, those skills are way more important than knowing some vogue framework). To be able to compete, you need to be driven enough to spend free time learning new things. Many of which may not directly relate to work, but they exercise your brain and I find that I view problems differently by learning some of them.
For JavaFX, there is [Scene Builder](http://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-info-2157684.html). It is a very nice tool for that job.
Same here. Also, I use java2ws to create the WSDL based on the service interface. Of course, this assumes you have access to the service interface.
http://jax.de/awards2014/nominees
http://vimeo.com/groups/satoris http://www.autoletics.com/tools
I would recommend trying [this](http://blog.paralleluniverse.co/2014/05/01/modern-java/). Most likely you wont be using half those frameworks in your first job, but there are a lot of winners in there and a bit of experience throwing something together with those might get you an interview.
Sounds very interesting. What experience level are you looking for, what skills would be needed for this role, where is the starting date, is it available to those outside the US, and how to apply? EDIT: Another US only ad. Wish this was posted in the title so I can skip them.
Seems extremely abusable. Of course that's me writing this comment from an iphone that probably has a killswitch with millions of backdoors and 0days...
Practice some c#.Net. It's nearly identical to Java and will open you up to twice as many jobs. EDIT: What I meant to say in this comment is that by knowing 2 languages, it will open you up to more jobs. I didn't mean to imply that there are a ton more jobs in C# than java. Poorly worded, I know. I just wanted to let OP know how easy C# is for people coming from Java.
No need for that, just set it up to mirror all external repos in your user settings.xml instead of the pom files.
&gt; The project doesn’t aim at re-implementing a full-featured desktop IDE... Instead the goal will be to re-use the capabilities of existing tools by making those capabilities available as cloud based services. It sounds like they're not trying to create an entirely new IDE from scratch, but they're not making a cloud based Eclipse (thank God).
Their not the best in the world, they're really aimed at understanding programming rather than the actual language but nevertheless, good place to start if your in the super early stages... 
Yes, I have : DrawingPanel dPanel = new DrawingPanel(); but not "dPanel.setVisible(true);" afterwards. When I try to compile I get the error "cannot find symbol" for the class DrawingPanel
is DrawingPanel a subclass of JFrame of Window? If not then you might need to create a JFrame and add the DrawingPanel to it. Something like: JFrame frame = new JFrame(); DrawingPanel panel = new DrawingPanel(); panel.setPrefferedSize(new Dimension(500, 500)); frame.add(panel); frame.pack(); frame.setVisible(true);
My personal POV: Specification (vm not lang, lang spec is zzzzzzzzzzzzzzzzz): http://docs.oracle.com/javase/specs/jvms/se7/jvms7.pdf performance: http://shop.oreilly.com/product/0636920028499.do http://www.amazon.ca/Java-Performance-Charlie-Hunt/dp/0137142528 Well grounded java: http://www.manning.com/evans/ puzzle: http://www.javapuzzlers.com/
Go to a hack-a-thion, or a local chapter of Code for US. Then, write code, and network with other programmers there. 
Not too sure about that actually. 
The TIOBE ratings are based on the number of skilled engineers world-wide, courses and third party vendors. It rates C and Java as the top two most popular. C# is fifth. 
I disagree, but this may vary from area to area. However, I found that at least here in Germany Java jobs tend to pay better than C# jobs, and when I switched jobs last year, some head hunters I spoke with independently confirmed this.
The last time I tried to use Jackrabbit it was a nightmare to find up-to-date documentation. Connecting to a server was incredibly difficult. Once that was out of the way, things worked though. Have things changed considerably in the last year or so?
you forgot to [flush](http://docs.oracle.com/javase/7/docs/api/java/io/BufferedWriter.html) after you wrote your data.
You are only reading the first line of the request headers. I think you have to read all of them (until "\r\n\r\n" occurs) before sending a response.
maybe in certain industries or areas, but i think thats quite an exaggeration in general terms. it wouldn't hurt, but its debatable whether its worth the effort.
This is an awesome overview of Dropwizard. After trying Grails, Vaadin, and deciding fairly quickly that Spring was overkill for my use cases, Dropwizard has been a blessing. I'm really preferring JDBI over something like Hibernate. Over Grails and Vaadin (especially), I'm liking that for the most part it's just Java and common libraries. There isn't a whole new convention to learn. I can basically drop any standalone application I've made into a new thread, let it run alongside my Dropwizard project, and allow it to easily update both my databases (running MongoDB and MySQL on the same project) and the associated views at the same time. I really hope that Dropwizard (or the libraries it combines) becomes more of a standard. Whenever I encounter something new, I feel like I'm spending time learning something that can be transferred to dozens of other projects - not just a specific peculiarity of that framework.
Basically: no. Usually, bigger companies already have their own certificates (e.g. for proxies) rolled out. Speak to the IT department of your client, whether you can get an intermediate certificate that can be used to sign your application.
Dropwizard rules. We have been using it for 1.5 years now and are in production. The best thing in Java besides Lombok amd lambdas.
Yup, that's your problem. Alternatively, you could close `output` first, since closing automatically flushes. Right now you're closing `input` first, which cuts off `output` before it can flush. Also, the trailing `\r\n` after the content is incorrect, though it generally won't matter. I written something like a dozen throwaway HTTP servers like this. 
The code that runs http://spring.io is open source [https://github.com/spring-io/sagan#sagan-the-springio-site-and-reference-application]
The fog of bureaucracy is dense over there, but I guess we'll have to work towards something along that line, somehow. I wanted to make sure it's not me thinking things more complicated than they need to be, lest I interpret the situation wrongly. Thanks!
not sure if rolling your own compiler is needed to become a (java) expert; if you know the basics i would suggest to get a job as (java) developer, be curious and in some years you may be one; not working in that field would at best make one more of a expert hobby programmer i guess?
Usually you can find the certificate authority server host name by running "certutil -config - -ping" from any windows machine on the domain. The server usually has a built in web site and request signed certs completely automated. Requests for certificates should be addressed to this site via the URL, such as: "http://theServer/CertSrv", where "theServer" is the URL of the Web server hosting the CA
Unavailable: (Pending Review) The requested page is currently unavailable because it is pending review by our moderators. This URL will become functional if and when the page is approved.
The easiest is getting an official cert for signing java objects. Not sure why you think about being your own CA... I don't see the need to touch to the DeploymentRuleSet, since you are going to sign and fix the MANIFEST of all your jar files... and only use Java 7 or 8 ? edit: if you need, I can post my ANT scripts that does this all automatically. 
I'm curious now, how did it get 5 upvotes? Do people just upvote based on a title they like?
Sorry my question wasn't very clear. We were given this code to download: http://courses.cs.washington.edu/courses/cse142/07wi/handouts/files/2007-01-22/DrawingPanel.java And somehow we have to use this DrawingPanel to create our panel and graphics. I've saved DrawingPanel into my files, but it's not working. 
I'd heard somewhere that doing a for loop was better than a while true. Don't ask me where, though.
There will probably be no difference in the byte code between either, but while(running) would give you a way to bail out gracefully if needed.
If you already know how to write static web pages, it's usually between either Spring MVC, or J2EE with JSF. That's been my experience as someone who's job is writing web sites in java. They're very similar (J2EE and JSF basically copied Spring MVC), once you know one it's not that hard to pick up the other. JQuery (for javascript) is another thing you'll see requested a lot. I'm not saying it's a total waste of time or anything like that, but almost no one is going to ask you to build a compiler. Video chat is again something I don't think there's a lot of jobs in. I used to write Swing, but there aren't a ton of jobs for it. All of those things are better than nothing, but the majority of jobs seem to be in web development. Do you understand databases, and can write jdbc queries? Understanding databases is used almost everywhere (you don't need to be able to do 5th normal form or anything, but you do need to understand what a foreign key relationship is), and is something you'll likely need all the time. 
This goes over the Open Session in View (OSIV) pattern , pros and cons, alternatives.
Well, reading this code you don't have to do anything to get it to work, simply instancing the class will make the panel appear. E.g.: public static void main( String[] args ) { new DrawingPanel(500, 500); } You can put that in another .java file, or add it to the end of the DrawingPanel class. If you're not familiar with the `main()` method, this is by convention the method that is the entry point of your program. When you run `java -cp &lt;path to .class files&gt; SomeClass`, Java will actually run the SomeClass.main() method. Actually drawing something in the panel is another matter. I'm hoping your teachers will help you along with this because this code is relatively complex for a total beginner.
Visual basic makes me cringe. I had a project in it a couple years back and I just wanted to shoot myself the entire time. What a god awful language. Anything you can do in vb, you can do in java.
People still use Mongo? 
I tested this and the results are pretty much the same. Compiled using "javac *.java" public class Test { public void loop2() { for (;;) { System.out.println("for recursion"); } } public void loop1() { while (true) { System.out.println("while recursion"); } } } decompiled version using "javap -c -sysinfo Test" Last modified May 16, 2014; size 501 bytes MD5 checksum f04071ff3af5ee64ba53cb079517a35f Compiled from "Test.java" public class Test { public Test(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V 4: return public void loop2(); Code: 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #3 // String for recursion 5: invokevirtual #4 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: goto 0 public void loop1(); Code: 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #5 // String while recursion 5: invokevirtual #4 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: goto 0 }
Thanks so much, I got it to work! :)
The Java Networking Tutorial already does that. You can read it [here](http://docs.oracle.com/javase/tutorial/networking/urls/readingURL.html). Hope this helps.
This reads like an auto-generated text.
I reckon we could technically pass the BS that is DeploymentRuleSet off to the other vendor in charge of Desktop Administration, but given how much spaghetti there is in the systems they have there, being our own CA isn't implausible for our use cases. They do have several projects handled by us (maintained by different teams of people), so I was considering we can streamline the process this way. I'd appreciate a look-see at your scripts to see how far along I am with my changes.
Don't send domain entities to the view. Separation of concerns. Instead, marshal the data to a view object. 
Here are the ANT targets I use: http://pastebin.com/kHeVGfUN The DeploymentRuleSet stuff is only good for running old apps you can't touch under a recent jvm. But if your code run under Java 7/8 without bugs, you only need to package &amp; sign them properly. (Since you are using applets, you might have to check for the LiveConnect (java-javascript) issues and add some attributes to the manifest of the jars, but I can't tell you much more than this). The way to look at it... being your own CA resolve what ? Just pay to get a cert. You'll still have to sign the files anyway, and repackage them with the new attributes in the manifest. Unless you try to trick java with the deploymentrule stuff... but that stuff with all those clients needing the cert &amp; rule file installed and all, you'll have to support that forever. good luck!
We still have legacy systems.
Nice, didn't know about this. Anyway, our "standard" toolbox, Google Guava, has something very similar: [`TypeToken`](https://code.google.com/p/guava-libraries/wiki/ReflectionExplained#TypeToken) ([JavaDocs](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/reflect/TypeToken.html))
Not had time to check all the code but from what I can see it's pretty well structured and the code I did look at was nice. 
However, TypeToken does have restrictions, e.g. it cannot infer types that are inner classes of generic types unless those types are fully bound.
He probably wanted to write Map/HashMap.
Typetools is much better https://github.com/jhalterman/typetools
so I have to see 1 hour video to learn?? 
Sadly, nothing comes free. I think that the contents of the video are valuable, but the decision belongs to you.
It took them &gt;5 months to distribute a binary? Did I read that right? What's happening with OpenJPA?
I'm not sure whether this is a troll or not. If not, than yes, you definitely should spend time learning if you actually want to learn something. Programming is a spectacularly wide field and you will probably learn your whole life if you want to be really good. An hour-long video is a minimum, think of it as a really good lecture given by one of the (former) most important people in Java.
Yes, I want to learn something new always, but spending time watching video for 1+ hour then applying it in practical seems to be difficult for me. I prefer textual tutorial instead.
&gt; Java Type Erasure not a Total Loss What high praise! (I can't believe a bunch of people smart enough to write the JVM actually thought type erasure was a good idea...)
Well, in that case, if you are interested in API design, there is an excellent API design checklist: http://theamiableapi.com/2012/01/16/java-api-design-checklist/
If you just want to read the PPT, then http://www.scribd.com/doc/33655/How-to-Design-a-Good-API-and-Why-it-Matters is where you need to go. No one has transcribed this talk yet (or at least, no one has uploaded a freely available verbatim transcription that is easy to find with google), but it's generally held as a must-watch for all java API designers in my experience. Maybe someone should do the hearing impaired community a solid and completely transcribe it, but I lack the patience right now.
Lol.. I tried to submit this article, Moderator said - BLOGSPAM, but information is up to... 
It's from the designer of the venerable collections API, and I expect he's condensed many years of experience into that hour.
https://www.youtube.com/watch?v=heh4OeB9A-c This one is in 480p instead of the 240p original video in case you actually want to read the code.
You can also read his book, *Effective Java*, where he also mentioned what makes a good API.
you are drawing from top to bottom by outputting text lines. You can know which line you are on with a counter variable. you need a way to draw each line knowing the line number of that line. 
Thanks
Part of me agrees with you, but at the same time I wonder how much code would still be stuck on pre-generic collections if they hadn't used erasure. Without erasure, you can't cast from a raw `Map` to a `Map&lt;Foo, Bar&gt;`. You have to construct a new `Map&lt;Foo, Bar&gt;` and repopulate it. This is an even bigger deal for objects that are hard to copy, or where you care about object identity, not just structure/contents. I feel like the best strategy would have been to implement genetics without erasure, but deprecate "raw types" (which would really be the same as using `Object` for the type parameters) and then *actually remove them entirely in Java 7*. That would have given people two versions of Java to get their code generified. One of the biggest problems with Java, IMHO, is their complete unwillingness to break backwards compatibility. Things that were deprecated many versions ago are still there. Once something is deprecated for one or two major versions it should just be taken out.
I too would love to know of such a list.
Specifically the "Field.setAccessible" method
Agreed, also you should start the comparison with the constant. So "rock".equals(..). This will help avoid npe :)
THANKS! This is what the /u/bankarsaale was looking for, I think.
One of the biggest things to take away from this is this little nugget: "example code should be exemplary." MSDN is a *huge* offender in this respect. Heck, just browsing the blog archives on http://virtualdub.org/ you'll find plenty of posts about bugs in official sample code from MS. The latest one is a classic little memory leak: http://www.virtualdub.org/blog/pivot/entry.php?id=386.
This chart measures tagged SO questions and line changes on GitHub.. How is that a measurement of popularity..?
It's a general measurement of how much online activity there is surrounding the language. There are of course complicating factors, such as the fact that certain languages are more verbose than others, which will lead to higher SLOC, and therefore higher line changes on GitHub.
It isn't exactly...but how else would you measure it?
I think the numbers are skewed since C# usually is kept in TFS for source control management.
Why return the die again? You mention that it's so callers will know which die was rolled, but wouldn't they know that already since they have the die instance (they're the ones calling roll() on it after all)?
SHA-1 might be appropriate - I'm sure there are plenty of java APIs for it. Just google around. EDIT - here's a good thread for you: http://stackoverflow.com/questions/6210449/library-providing-various-hash-algorithms-md5-sha1-sha256-etc-in-java
+1
There are [Adler32](http://docs.oracle.com/javase/7/docs/api/java/util/zip/Adler32.html) and [CRC32](http://docs.oracle.com/javase/7/docs/api/java/util/zip/CRC32.html) implementations in the JDK which you can invoke over any byte array. Seems pretty straightforward. If you want something stronger, a more general API and whatnot, you can take a look at [Guava's hashing](https://code.google.com/p/guava-libraries/wiki/HashingExplained).
&gt; Also did you check the XML capability of your target DB? I guess you want to compare hashes for performance reasons. Did you measure performance when selecting XML type fields? (always measure first!) &gt; And finally: Do you even need to store XML or are you perhaps able to normalize the data to ordinary fields? I'm not sure I'm following you here. Are you suggesting that checking if the xml file itself exists could be faster than checking the hash? The XML file is going to be stored as plain text, it's not going to be manipulated in the database. 
&gt; I'm not sure I'm following you here. Are you suggesting that checking if the xml file itself exists could be faster than checking the hash? I'm quite sure the DB will be using some kind of structured data index on the contents of XML fields, so it may be worth checking out. But as I said I think you'd need to conduct a performance test with adequate test data on your DB. Edit: Also important: Does hashing take place on a server or on clients. &gt; The XML file is going to be stored as plain text, it's not going to be manipulated in the database. Even if it's write-once/read-many it could still be worth parsing and storing accordingly, but I don't know the complexity of your data, so this may or may not be feasible.
Do you want &lt;abc/&gt; and &lt;abc&gt;&lt;/abc&gt; to hash to the same value? Then your first problem is normalizing your XML; the hash algorithm is the least of your worries. If it were me, I'd wonder if using a hash is actually a good solution to whatever problem you're trying to solve. If it is, and if you truly don't care about cryptographic issues, I'd just use md5 since it's so widely available.
http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/hash/Hashing.html
thank you :)
[Java Performance (Hunt, et al)](http://www.amazon.com/gp/aw/d/0137142528?pc_redir=1400108197&amp;robot_redir=1) wasn't surprising for someone with experience, but it had a good overview of very practical performance analysis and optimization techniques for enterprise Java. "Java Concurrency in Practice" will explain what works for JVM concurrency problems. For projects check out Jackson. It's a great one to learn from. Applying that to different solutions will yield some good tooling I think.
Empty elements are only the start. Order of attributes, namespaces, white space, default values when dealing with schemas... Functionally identical XML documents can be expressed in wildly varying ways. All of which would produce different hashes. If OP doesn't control the XML, using hashes on un-normalized XML is a huge mistake.
Logback. It's widely used. So your experience is useful. It's lowlevel so easy to learn how it works. Mailing list is low volume but there are things to fix/improve. 
https://github.com/rapid7/metasploit-javapayload Lots of opportunity for open source java exploits, too.
Interested in game development? https://github.com/libgdx/libgdx
OP could read the file using the streaming API and immediately write the events to a DigestOutputStream chained to a "no-op" output stream.
If you have any interest in machine learning [check this out](https://github.com/sanity/quickdt). It's a pretty powerful machine learning library (including lots of cool stuff like hyperparameter optimization, and a pretty fluent API). I'm the main developer and I'm happy to help. Oh, and read the book "Effective Java", and "Clean Code" (the latter isn't Java-specific).
You are a babe! My program works a bit now :D
Normalizing would not be enough in worse case scenarios. If OP needs to store documents by uniqueness of their data rather than uniquiness of XML itself - best way is to deserialize XML using all of the business rules, apply various data normalization (sorting lists that can be sorted, lowercasing fields where case sensitivity does not matter, etc.) and then serialize it back to XML. 
I'm interested in a lot of things, which I know is not super helpful. Web stuff, servers, testing are some more notable ones I guess.
Maybe, thank you.
You mean to help me get up to speed so I may contribute easier? I'll buy "Effective Java" today.
Sure, I'll help. Do you have an interest or any experience in machine learning?
The value in message is probably overwritten by another thread and is garbled at the time of the split. A quick fix might be to make check synchronized: public synchronized void check(String message) throws IOException{ and then do the split on workingMessage instead of message. For a more ambitious solution you could look into adding the messages to a concurrent queue and have a number of worker threads pulling messages of that queue and do their work. 
Hi, that book is the bomb. Make sure to get the second edition and also go check out some of the talks too, for instance: https://www.youtube.com/watch?v=V1vQf4qyMXg My advice to you is to build something you think would be awesome, use frameworks to achieve it and when you fall in love with a framework go a head and contribute to it :-) 
There are three very recent blogposts on modern Java development. They are by far not exhaustive, but it's a good start! [Part 1](http://blog.paralleluniverse.co/2014/05/01/modern-java/), [part 2](http://blog.paralleluniverse.co/2014/05/08/modern-java-pt2/), [part 3](http://blog.paralleluniverse.co/2014/05/15/modern-java-pt3/). My own list follows. I have used all these and have good experience with those + I know they are needed. Your Mileage May Vary. You don't need to learn everything at once. Pick the one thing that sounds as the most needed one and dive in. Anyone, please feel free to add some another crucial libraries, frameworks and books which I forgot to mention. ----------------------------------------------------------------------------------- **To Read** - [Bloch, Joshua: Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683). A must. There'll hopefully will be a 3rd edition with Java 8 in mind, but that might take a while. - [Goetz, Brian: Java Concurrency in Practice](http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601). *The* concurency book. Lots of good stuff there, read it, then go and learn about the new and recent additions to `java.util.concurrent.*`. - [Bloch, Joshua: Java Puzzlers: Traps, Pitfalls, and Corner Cases](http://www.amazon.com/Java%C2%BF-Puzzlers-Traps-Pitfalls-Corner/dp/032133678X). Just for funsies. Gives a lot of inside info. - Any good book on algorithms, data structures, design patterns. ----------------------------------------------------------------------------------- **Build tools** Pick either one. They manage your project structure and basic configuration, they manage your dependencies and whatever you need to build your project. - [Maven](https://maven.apache.org/). The good, old and tested. It's the standard build tool. - [Gradle](http://www.gradle.org/). The new, shiny and modern. Arguably beats Maven all the time. Needs a bit of Groovy knowledge, basics are enough. ----------------------------------------------------------------------------------- **The standard Utils and Collections libraries** The JDK gets better with every new Java release (for example, Java 8 deprecates a lot of functionality of these libraries!), but if you're stuck with Java 6/7, pick these without hesitation. Even then, there's a lot in these for you. - [Google Guava](https://code.google.com/p/guava-libraries/). A must. My first addition to every new project. Seriously. - [Apache Commons](http://commons.apache.org/). The second place to go when I can't find something in JDK or Guava. They're not that often needed, but they'll always fit in larger projects somehow. There's so many of them for so many different things! For the beginning, worry only about [Commons Lang](http://commons.apache.org/proper/commons-lang/) (the basic utilities), then come back for more. - [Joda-Time](http://www.joda.org/joda-time/). THE date &amp; time library if you can't use Java 8. Use this. Do not use `java.util.Date` nor `java.util.Calendar`. - [Lombok](http://projectlombok.org/). Java on steroids. Not needed, but makes your life easier once you learn it. - [Auto Value](https://github.com/google/auto/tree/master/value). Google's new library for easy immutable value objects creation without any boilerplate. Very optional, but since Lombok does something similar with values, I wanted to share a smaller alternative. ----------------------------------------------------------------------------------- **Advanced Collections** Usually just one or two of these are needed in addition to the JDK classes. Advanced stuff. - Guava, again. Lots of goodies, usually just enough. - [Commons Collections](http://commons.apache.org/proper/commons-collections/) where Guava falls short. Haven't used it in quite some time, had no need to. - [Goldman-Sachs Collections](https://github.com/goldmansachs/gs-collections) A *huge* and complete library that has everything. A drop-in replacement for JDK's collection framework. Has functional stuff, immutables, primitive collections, many missing types. If you're okay with using a huge and (at first) complicated library, this is the way to go. - [Trove](http://trove.starlight-systems.com/). A primitive collections library. When GS collections are a bit too much, but you need a reliable collections for primitives. - [High Performance Primitive Collections](http://labs.carrotsearch.com/hppc.html). An alternative to Trove. A primitive collections library with a slightly lower-level access. Usually faster, but allows you to shoot yourself in the foot more easily. - [Javolution](http://javolution.org/). A good collections library with real-time compliant bounds. ----------------------------------------------------------------------------------- **Dependency Injection** If you don't know it, study it first, you'll need it soon. Then pick one, you can do it almost arbitrarily. - [Spring](http://projects.spring.io/spring-framework/). Spring-context is enough. - [Guice](https://code.google.com/p/google-guice/). A DI injector from Google that was made to mitigate Spring's shortcomings. Spring quickly caught up, though, so nowadays, it's simply a matter of taste. - [Dagger](http://square.github.io/dagger/). A new one, works on compile-time, then disappears. No reflection. Weaker than the former two frameworks, but it's main field should be Android. It can be good enough for you, too, though. ----------------------------------------------------------------------------------- **Logging** Use [SLF4J](http://www.slf4j.org/). That's it. Then pick one of these as your logging backend, it doesn't really matter (much): - [Logback](http://logback.qos.ch/). My default choice. - [log4j 2](http://logging.apache.org/log4j/2.x/). A brand new library, seems to do everything Logback does and a little bit more. - [log4j 1.2](http://logging.apache.org/log4j/1.2/). The old one, good enough, still is often the default choice. And: - [logviewer](https://code.google.com/a/eclipselabs.org/p/logviewer/), an eclipse plugin for showing logs. Could use some cleanup, but it's better than nothing. - [Metrics](http://metrics.codahale.com/) for additional goodness if you're building a large app. ----------------------------------------------------------------------------------- **Testing** - [FindBugs](http://findbugs.sourceforge.net/). A must. [Use the eclipse plugin, too.](http://marketplace.eclipse.org/content/findbugs-eclipse-plugin) - I personally like the [MoreUnit](http://marketplace.eclipse.org/content/moreunit) eclipse plugin. It's a tool for easier test writing and maintaining. Pick either [JUnit](http://junit.org/) or [TestNG](http://testng.org/doc/index.html), a matter of taste where JUnit is the default. Optionally, use one of these for assertions. The JUnit's `Assert` is enough for starters, but I recommend to use something stronger: - [Hamcrest](https://github.com/hamcrest/JavaHamcrest). Was the default choice for a long time. Still the most used, I think. [A nice quick reference here.](http://www.marcphilipp.de/downloads/posts/2013-01-02-hamcrest-quick-reference/Hamcrest-1.3.pdf) - [fest](https://code.google.com/p/fest/). A newer and better assertions. - [AssertJ](http://joel-costigliola.github.io/assertj/). The newest and shiniest. For mocking, take for example [Mockito](https://code.google.com/p/mockito/). Honestly, there are more libraries on this, but I have only used this one, so I can't recommend any other. For microbenchmarks, if you need them (You usually don't!): - [Caliper](https://code.google.com/p/caliper/) - [JMH](http://openjdk.java.net/projects/code-tools/jmh/). Arguably better. Additional goodies, not needed at all: - [jimfs](https://github.com/google/jimfs) for mocking a file system. - [Selenium](https://code.google.com/p/selenium/) for controlling a browser programatically. Good for web front-end tests. ----------------------------------------------------------------------------------- **Database access** [DBeaver](http://dbeaver.jkiss.org/) as an in-eclipse plugin for DB access. Not the only choice by far, but mine favourite. Anyway, database is hard. There's a lot of different approaches and a lot of different databases. If you ever come close to these, though, I can recommend them. If you want to read something on DBs for Java, these are a sure bet. - [JDBI](http://jdbi.org/). JDBC alternative. Very nice! - [jOOQ](http://www.jooq.org/). Generates typesafe code based on your SQL schema. Goooood. If you ever use Cassandra DB, try the [Astyanax](https://github.com/Netflix/astyanax) as your API. I liked it most of all the alternatives. ORMs (JPA implementations) - [Hibernate](http://hibernate.org/orm/) is the default choice when going for an ORM. Not bad. Also, [Jadira](http://jadira.sourceforge.net/) is a Joda-Time -&gt; Hibernate helper. Saved my ass a couple times. - [Eclipse Link](https://www.eclipse.org/eclipselink/). ----------------------------------------------------------------------------------- **Other Data, all optional** - [MapDB](http://www.mapdb.org/). A nice disk-backed concurrent `Maps`, `Sets` and `Queues`. - [ZooKeeper](http://zookeeper.apache.org/). A good distributed system for easy config management and distribution, synchronization etc. Basically a distributed and sychronized filesystem for keeping small amouts of data. [Has an eclipse plugin.](https://marketplace.eclipse.org/content/plug-zookeeper) Protocol buffers ([an eclipse plugin](http://marketplace.eclipse.org/content/protobuf-dt)) - [Protocol Buffers](https://code.google.com/p/protobuf/). Google's cross-language tool for fast and typesafe data exchange. - [Wire](https://github.com/square/wire). A diferent implementation of Protocol Buffers. Still the same protobuf, but now with a more compact API. Very useful on mobile. JSON. Pick one: - [GSON](https://code.google.com/p/google-gson/). Google's JSON library. - [Jackson](https://github.com/FasterXML/jackson). A different JSON library. ----------------------------------------------------------------------------------- **GUI** The JDK has Swing. MANY libraries there. I consider it dead, but if you must use it, it's not that bad. [JavaFX](http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html) is the way to go nowadays. It's Oracle's and it's in the default JDK from Java 8. Use with [Scene Builder](http://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-info-2157684.html). Optional libraries for JavaFX: - [ControlsFX](http://fxexperience.com/controlsfx/). Additional controls for Java FX. - [JFXtras](http://jfxtras.org/). Another controls and goodies. - [TestFX](https://github.com/TestFX/TestFX). A simple testing tool for JavaFX. ----------------------------------------------------------------------------------- **Web** Sorry, too many to list here. Surely somebody has a similar list to this one for the web stuff somewhere.
I found that the folks that maintain the Spring projects (Pivotal) are very open to pull requests.
Wow, this is perfect. Thanks!
Groovy's "groovyConsole" is my go-to scripting environment these days. The syntax is like Java with a whole bunch of syntax sugar. http://groovy.codehaus.org For importing external libraries, there's a feature called Grapes that lets you import via Maven in one line of code. Best of all, if I need to write some bit of code for extra-high performance, I can do it as a library in Java, and just import it into my scripts.
Try playing around with the code, messing up values, removing stuff, looking deeper into objects, etc. I find that generally that is a good way to decipher what code does (even your own when debugging). 
Java is dead. Long live java 
Change the Check method correct?
That code looks awful. Magic strings and numbers all over.
Probably you are looking for the scripting engine abstraction: http://docs.oracle.com/javase/7/docs/technotes/guides/scripting/programmer_guide/ Also you can 'script' using java directly: http://pastebin.com/yhFKsVaD or here http://janino.codehaus.org/ or here http://asm.ow2.org/
Yes, not 100% sure but I'd try that first
I tried that before and that was extremely uncomfortable for the caller. Now they can just send the result as a message to whatever actor they want and the latter can manage the tuple. As I said in the article it's gut feeling...
Well ...
JComponent (java swing) vs Component (java awt) THashMap (gnu trove) vs HashMap (java util) In these cases you can tell it's not a classic Component/HashMap without having to use fully-qualified names. I can't think of another good reason for it. (edit: formatting)
The main reason is, curiously, readability. When you write an application, you'll usually use simple name of classes and put the imports on top of the file. When you read an application, you'll usually skip the import section as what you are interested in is the body itself. If you use prefixes wisely, you can hint the reader that he is not looking at a regular instance, but to a carefully chosen one that should not be replaced without thinking twice about it. But I also did encounter prefixes that where just pure ego of the programmer.
I'd like to know *why* you are grabbing &gt; those Strings FROM the .bin and .csv files, and send the strings through the Rectangle constructor again , I mean why do you have to parse two different file formats? Also: If this were my program, and I'd have to store the geometry stuff in my own format (Your .bin file.), I'd use a very practical multi line approach that I have learned to appreciate: Instead of storing all information about one element in one line, store them in several. Example for file content: rect width=20.45 height=10.43 circle radius=15 This is very easy to parse if you use two passes: The first one just stupidly reads the file into an ArrayList&lt;ArrayList&lt;String&gt;&gt;, the second interprets all those packages (The inner ArrayLists.). This isn't very efficient, but it's easy to implement and to maintain, and the file format is not cryptic at all (as opposed to one-line solutions where you have to do all kinds of separator character magic). There's even the nice java.nio.file.Files.readAllLines()
The miscreant's eyes shall be stabbed with squiggly lines!
&gt; JComponent (java swing) vs Component (java awt) Ah, that reminds me of the aptly named List in AWT, which Eclipse always thinks is more important than the java.utils.List. 
You can fix it by blacklisting the awt package in Eclipse preferences. I don't remember where exactly but a short google search should turn up the answer.
I don't use Null as a quasi-last resort, I use it intentionally to communicate stuff, it's all over the place. Hence null-checks are *also* all over the place in my code. And I don't feel the need to name my methods with something like "..OrNullIfEmpty" because I naturally expect it to behave like that, anyway. To me, Null is not an oddity or a nuisance, it is a natural part of the thought process. With this in mind: I wish that Java 8 would have brought an *optional* "'return' null instead of throwing NPE" solution for chains like these: final MyType myType = something.somethingelse.getData().image; If you actively use Null like I do, you would be happy if instead of causing NPE's, this line would just abort like the if-clause (a == null || a.length() == 0) and would set "myType" to Null. I wish such a mechanism would exist in Java, but alas we only have TryCatch, which is slow, so I have to keep ripping apart my chains. :( I find this wish quite straightforward, and you would have thought that with introducing Lambdas and Optionals, they also would have introduced this mechanism, but they didn't. Again :(
Not all languages have namespaces. Obj-C doesn't, so an iOS dev moving to Android might prefix their classes out of habit.
ummmmm does anyone else view this as the programming equivalent of wiggling your ears? its cool and all, but what good does it really do? aren't there already a whole bunch of acceptable functional programming languages? why bolt this to Java? hasn't enough stuff already been bolted to Java?
In the examples you've given, both Component and HashMap are in the Java API. In the OP's example, Activity, ListAdapter and OpenGLRenderer are not. Since they're not in the Java API, are they non-classic - meaning that they don't need the prefix?
If you have the Code Recommenders, you can go to the preferences dialog, go into "Code Recommenders" → "Completions" → "Chains" and add the "java.awt.List" type to the "Types to ignore" list.
 public void run() { MASC MASC= new MASC(); try { MASC.check(MASC.currentMessage); } catch (IOException ex) { System.out.println(ex); } } In your thread you create a new MASC object. This MASC has currentMessage initiated to "". So effectively you run MASC.check(""). This results in parts = message.split("; ") returning String[]{""}. So part2 = parts[1]; results in IOOBE. ps. please dont name your variables exactly same as the class.
Multi-paradigm languages are the future. Java was already being used in a functional manner with anonymous inner classes because there are some classes of problems which work better with a functional approach. For example, event handling. Functional programming also makes embarrassing the GoF's mantra of "Composition over inheritance" more seamless. This example shows that functional programming shouldn't be used everywhere. The procedural approach would have been much cleaner.
Personally I would use a Set/List of touples String-MyObject with ManyToOne mapping to your interaction class, instead of Map, but I'm no expert on hibernate.
You can really feel the attention to detail that is happening in the latest versions of JBoss EAP. Now that JBoss is caught up to the proprietary app servers, we can really expect an explosion of innovation out of the community.
The procedural approach would not have given you a clean way to express fizzbuzz, buzzfizz and fizzbuzzbang compositionally, which is the point of the example.
StringBuilder does less memory reallocation, so if you're doing a series of repeated operations building up a string, you're better off using that. 
True. But lets not go overboard. For a "fizzbuzz" problem the chances of needing to add new bangs/whizzes/pops is pretty minimal. I'm fine with making things composable, but I'm not fine with blindly applying a paradigm because it is "better". In this case, the procedural code is just easier to look at and immediately grok what is going on. public Class MyClass{ public static void main (String args[]){ for(int i=1; i&lt;=100; i++){ System.out.println("Number: " +i+ "," + FizzOrBuzz(i)); } } public static String FizzOrBuzz(int num){ String fizz = (num % 3 ==0)? "Fizz":""; String buzz = (num % 5 ==0)? "Buzz":""; return fizz+buzz; } } (Stolen from [here](http://stackoverflow.com/questions/10466709/fizzbuzz-print-string-depending-on-number) because I'm lazy)
Nice thing is that they didn't just switched focus to their latest server for EE 7, but keep fixing and enhancing their EE 6 one. JBoss is also one of the few who actually have an update for their server at least every few months, excluding the Java EE 7 releases its: * 6.0.0 26-Jun-2012 23:01 * 6.0.1 20-Dec-2012 17:22 * 6.1.0.Alpha1 7-Mar-2013 20:29 * 6.1.0.Beta1 26-Apr-2013 15:04 * 6.1.0 20-May-2013 15:16 * 6.1.1 4-Sep-2013 16:38 * 6.2.0.Beta 16-Oct-2013 16:33 * 6.2.0 2-Dec-2013 19:56 * 6.2.1 13-Feb-2014 17:44 * 6.2.2 28-Mar-2014 17:46 * 6.3.0.Alpha 24-Mar-2014 18:19 * 6.3.0.Beta 15-May-2014 15:04 Compare that to GlassFish, which has an average 1 release per year (e.g. GF 4 is a year ago, and GF 4.0.1 still isn't here). WebLogic same thing, over a year between 12.1.1 and 12.1.2 and it will again be a year or more for 12.1.3. Geronimo same thing, 3.0.1 was released after more than a year after Geronimo 3.0 and there's no telling if there ever will be another release for 3.
I imagine the code evolving as follows: public Class MyClass { public static void main (String args[]) { run("FizzBuzz", MyClass::FizzOrBuzz); run("BuzzFizz", MyClass::BuzzOrFizz); } public static void run(String description, Function&lt;Integer, String&gt; describer) { System.out.println(description); for(int i=1; i&lt;=100; i++){ System.out.println("Number: " +i+ "," + describer.apply(i)); } } public static String FizzOrBuzz(int num) { String fizz = (num % 3 ==0)? "Fizz":""; String buzz = (num % 5 ==0)? "Buzz":""; return fizz+buzz; } public static String FizzOrBuzz(int num) { String fizz = (num % 3 ==0)? "Fizz":""; String buzz = (num % 5 ==0)? "Buzz":""; return buzz+fizz; } } and then the obvious refactorings from that point generating something like my original example. Of course a toy program is never going to demonstrate the necessity of a technique, since there's usually a blindingly simple way of doing whatever blindingly simple thing it does. But it can demonstrate its applicability; figuring out when and where to use the pattern in anger is left as an exercise for the reader.
Someone should give you gold. 
Well, if you iterate often over the list and it has many elements, you could have the interaction class contain a Map that is ignored by hibernate.Then it would be you responsible to keep it in line with the list of attachedData objects. I think this should be quite simple with well implemented setters and add*/remove* methods, but you should consider all pros and cons of such implementation.
I tend to put the logic into a EJB or Managed bean (depending on what I need) because that way it can be reused outside of the JAX-WS context. (For example: you may want to provide JAX-WS and JAX-RS interfaces for the same application.) In terms of absolute performance it could be worse because of the additional level of indirection through the bean's proxy but I doubt it very much matters. It depends on what you are doing, really. Though, might I ask, why use a Session bean?
This is another game API http://lwjgl.org/ Used in many games such as Minecraft!
Remeber that the String class is really just a bunch of methods to manage a char array. The String class treats this data as immutable, and its methods are not optimized to manipulate the char array very quickly. StringBuilder on the other hand is optimized to append data, the implementation is dealing with mutable data. StringBuffer is yet another char array manipulation class that is similar to StringBuilder, but is meant to optimize for updating a fixed size. If you're curious about any of the Java collections API's, just follow them down and look inside! It's really interesting to see how the classes work.
`StringBuffer` does pretty much the same as `StringBuilder`, but is thread-safe. Like /u/kulmbach said, it is faster though.
Even the Java docs for the collection is pretty thorough in what each class entails. The Java doc for the StringBuffer and StringBuilder class explain everything in this thread already. 
You're welcome.
I agree I think it's much easier to have the logic externally from the service. Think single responsibility principle. 
&gt; Are there any JOOQ alternatives? No. ;-) Ok, *my* opinion might be slightly biased... Essentially, [you might be interested in Googling for "Java LINQ"](https://www.google.com/search?q=linq+java)
I inherited an application that started off as monolithic EJB + JSF web application. The application then suddenly exploded with increasing requirements to add new functionality. We decided to ditch JSF as well. To implement a new interface we simply exposed the business methods in the EJBs using Web Services and developed a new Web Interface (App) that calls the these services. So we are currently slowly disintegrating the original application and trying to optimize where ever we can. Off-course when we initially did the Web-Services we built them around the original session beans, so I wanted to know as we are cleaning up whether we should just get rid of the separate Web Service Implementation classes
There *are* [alternatives](http://stackoverflow.com/a/4404097/521799), but you'll be unhappy once you've seen what's possible and how efficient you could have been as developers :-) [I'll explain this further down in this thread](http://www.reddit.com/r/java/comments/25yd03/any_alternatives_to_jooq/chmfpzu) Why don't you contact our sales? We have special rates for non-profits, depending on the project setup...
Yes, packages help with this, but aren't always enough. If you want to create your own List but also use java.util.List you will have collisions. So, although it is better to give your list a specific name, it's usually easier (but sometimes lazy) to just name it WTFList. 
Since Java 1.6. If you code something like this: String all = " everyone"; String a = "Hello " + " world" + all. it's automatically compiled to something like this: String a = new StringBuilder().append("Hello ").append(" world").append(all).toString(); So there is no need to do that yourself.
Thanks much!
The article specifically notes that the compiler takes care of simple cases like that. The issue comes into play with loops, and yes, there is a need to do it yourself.
I don't like jooq, mostly because the pretty-ness behind it means you're statically importing a ton of stuff. And when you get into cross-table joins, you might have two ID constants, for different tables. This means you need to start scoping stuff like Books.ID and Authors.ID. I much prefer the simplicity of [JDBI](http://jdbi.org/). It's as thin as can be, all interface driven, with pure SQL. You can do index-only queries, you can use Oracle's db-specific 'connect by' syntax -- or PostgreSQL's json datatype. I used to argue strongly for ORMs, but I'm not to the point I just want a thin SQL wrapper. The allure of "write once, run anywhere" in regards to the DB is a nice idea, but I almost never see people actually doing that. 
Take a look at [Yank](https://github.com/timmolter/Yank).
This a common misconception. StringBuffer is **NOT THREAD-SAFE**. Repeat after me: StringBuffer is not thread-safe. What does it even mean to write to a string in a multi-threaded fashion? Amazing, it's synchronized. Every time you call append(), you can be sure that nothing else is appending, but you're not certain that the **order** will be correct. So end garbage will up with you. If you catch my drift. I don't know why anyone thought that StringBuffer would benefit from synchronization. It's one of the worst decisions in the Java libraries. Right up there with the terrible Date API, and the non-thread safe SimpleDateFormat. 
I remember that reading it in a book. Wish I remembered which one. Crazy its such a common misunderstanding.
Hello Lukas, We were about to use your library but when we realised it was $$ for Oracle we took a look at QueryDSL. After a few weeks we are happy with QueryDSL but our team finds some of the syntax a bit clunky and the debugging of poorly generated SQL a bit tiresome. Do you feel that Jooq's syntax is and SQL generation is significantly better that we should take second look at Jooq? Thanks!.
&gt; Compare that to GlassFish, which has an average 1 release per year (e.g. GF 4 is a year ago, and GF 4.0.1 still isn't here). And there is a bug that the combination of HTTP compression + WebSocket would lead to NPE, as I encountered that [1 month ago](http://redd.it/236v7p). I think it is serious and should be patched... But there is only an unofficial patched build of related library, hidden in the discussions on the issue tracker. Not to mention that the JAX-RS implementation (Jersey 2.x) isn't as easily [upgradable](http://blog.dejavu.sk/2014/01/21/updating-jersey-2-in-glassfish-4/) as before (as in GlassFish 3.x). Despite of the problems in GlassFish, after several testing, I'm still using GlassFish. * In my opinion, documentation of GlassFish is better. For example, there are PDFs covering everything you need to setup, administrate and fine-tune each component (e.g. web server, JavaMail, data source) the application server. I really like that the `asadmin` reference clearly explains all commands and options used to manage the application server. For JBoss/ WildFly, I always need to read the [documentation page](https://docs.jboss.org/author/display/WFLY8/Documentation) of WildFly itself, and then look for more information about data source setup on [documentation page](http://www.ironjacamar.org/doc/userguide/1.2/en-US/html/index.html) of IronJacamar (Java EE Connector Architecture implementation in JBoss/ WildFly). * For unknown reason, I can't get any web application which makes use of JAX-RS deployed successfully on WildFly. To be more specific, plain JAX-RS application can be deployed with no problems, but when I try to add form-data/multipart handling, WildFly always complain that there are missing dependencies and the log mentioned something about Weld. I tried to use Jersey (with JAX-RS feature disabled in WildFly) and RESTEasy (JAX-RS implementation in JBoss/ WildFly), both doesn't work well when handling form-data/multipart request entity.
If you have multiple processes adding to the same String where the order didn't matter, that it is thread safe in the way that each individual process would write their full string without having other processes inserting data in the middle of the string. I think this is why people say it's "thread safe".
The author of this article barely has any idea what software is much less why it doesn't follow Moore's Law. Terrible article IMO.
Yes, we all know that C# was meant to fix some of Java's shortcomings (e.g. the oft-lamented type erasure). Tell you what: Some of you C# trolls always stray into /r/java trying to convert people. You'll never win us over with your "my language is better than yours" attitude. Go back to /r/csharp and write cool stuff. Thanks.
I'll have a look at that. 
When you're writing a logging utility which buffers a set amount of messages before flushing it to a file or database. In this situation, order doesn't matter since multiple threads are writing messages. What matters is you capture the output and indicate which thread wrote it. Not saying it's a great use-case. But it is an example where order doesn't matter.
That is a weird RESTEasy issue in Wildfly. Personally, I wouldn't use Wildfly 8.x in production. There are no plans for that branch to be productised, therefore it will not be tested as much as if it were a productised branch. If you intend to use the Wildfly, then wait until 9.x comes out. Which should be in about 6 months. You should look into [JBoss EAP 6.3 Alpha](http://jbossas.jboss.org/downloads) if you want a more stable and free to use option. Don't let the Alpha tag fool you, I found them to be pretty decent. The [documentation](https://access.redhat.com/site/documentation/en-US/JBoss_Enterprise_Application_Platform/) for EAP is far superior than what is in the community. Keep in mind, anything with a label other than than "Alpha" would require a subscription license, which I would highly recommend. edit: I am wrong about EAP requiring a subscription.
It's just a pathetic troll. Best ignore.
I'll second a vote for JDBI. 
Mostly useful stuff, although I would hope these are pretty standard practices. I'll just comment on stuff I don't agree with: The "Classes should be made immutable" part. Object inheritance is a central paradigm of OO code and I still haven't read a convincing argument to throw that away. Putting utility methods in interfaces seems like an anti-pattern as well. I don't get what you gain from switching from static methods to default interface methods, and you misuse the semantics of what an interface should be. You now implement UtilityStuff in your class, does that mean that the class can now be used as provider of utility stuff by other classes? Certainly not, but that's what the interface says.
If you don't care why are you doing nothing but proselytizing C#? Go away.
Immutability has nothing to do with object inheritance.
Consider ditching Java Beans altogether, including the "C-struct"-style immutable version, and using an immutable record type like the one provided by Rekord - http://github.com/samirtalwar/rekord or (in Java 8) the one provided by Octarine - http://github.com/poetix/octarine No more builders! Equals and hashcode for free! Lots of other advantages - but read here if you need more convincing: http://monospacedmonologues.com/post/86221882520/rekord-java-beans-must-die
Well, it kinda does since to make classes truly immutable you have to make them final, which he recommends in the article.
nevermind, i realized i was using the wrong code. needed applet code in there. Sorry 
Not according to the [javadocs](http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html).
&gt; Optionally, you can make the class itself final so that it can't be extended and made mutable.
You can also click the color box and select the color and it'll change it automatically in the code. How cool is that?
What color scheme is that?
[Obsidian](http://ideacolorthemes.org/themes/2/)
So, only one thing really bugged me: it recommends Play, says that Jersey is a good alternative, and immediately says to ditch JAX-RS. Isn't Jersey the reference implementation of JAX-RS?
I was on my way into this thread to ask that! Very cool!
What the... I'm just here for code, i didn't sign up for this.
Eclipse has so much momentum in schools and corporate environments; your story is spot on! I don't hate Eclipse, I just don't enjoy using it compared to IntelliJ (or even Netbeans, which is almost universally reviled for some reason). JetBrains has good product, and the Community Edition is an easy way to check it out. It's what I use at home.
Trying too hard
Does that work for any class with “color” in the name and that has a constructor that takes three numbers?
Also works for CSS colors
Eclipse does that...
Does this only work in Ultimate? I have the box checked on multiple computers but there are no colors in the gutter.
Check out solarized if you want a good color scheme. Its the go to for a lot of programmers.
wow. MAgical.
http://www.querydsl.com/ Its really good.
Hello, and thank you for reaching out this way. Let me try to answer your questions inline: &gt; After a few weeks we are happy with QueryDSL but our team finds some of the syntax a bit clunky and the debugging of poorly generated SQL a bit tiresome. This experience probably matches what [Darren from Apache CloudStack](https://groups.google.com/d/msg/jooq-user/-RqBEr8JHv0/2eRUDHUj-3AJ) had said on the jOOQ user group: *"while jooq is awesome, querydsl is probably acceptable"*. Let me explain these thoughts: QueryDSL is certainly acceptable and if you are on a very tight budget, it might be the better choice. But by paying a reasonable license fee, you will find yourself using software created by people who spend 100% of their time thinking about how to embed SQL in Java (and who love working with PL/SQL, btw) - people who have maintained "monsters" of 4000 lines of SQL with 7-level nested derived tables and common table expressions, and still had that beast perform with &lt;1ms on Oracle Enterprise Edition (admittedly, not with jOOQ but in stored procedures and views). People who simply believe that SQL is awesome. And we believe that what you get out of jOOQ is precisely that feeling: *"Hey, SQL is indeed awesome!"* By choosing jOOQ, you will also choose software used by very demanding enterprise customers in production, whose SQL problems reach up to supporting Oracle, SQL Server, DB2, Sybase ASE and H2 in a single application with 600 highly normalised tables and an average of 10 joins per query. These are SQL standardisation problems that I do not believe can be solved with anything other than jOOQ, unless you remove SQL from your stack and use JPQL, or you write much more expensive, home-grown but tailor-made frameworks I have been personally following QueryDSL for a long time, and while I believe that QueryDSL is a great tool for easing some of the JPA CriteriaQuery pain, I do believe that it is quickly going to limit you when writing SQL. Since we've been following their user group, and since this is Open Source and we've also been following their improvements, I'm confident that QueryDSL SQL will not match jOOQ's SQL rendering quality any time soon. :-) Besides, the distraction created from supporting completely heterogeneous data stores like MongoDB, Lucene, Java Collections, RDF will probably eat up a lot of time they will not invest on improving the SQL experience. &gt; Do you feel that Jooq's syntax is and SQL generation is significantly better that we should take second look at Jooq? Yes, I do think so! *Externally*, jOOQ exposes an actual internal domain-specific language through a set of interfaces that model the current "step" when going through the SQL BNF. [The idea behind that is explained here](http://blog.jooq.org/2012/01/05/the-java-fluent-api-designer-crash-course/). To my knowledge, QueryDSL simply provides you with a builder, like a `StringBuilder`. To our standards, while still being a fluent API that is not really a DSL. For instance, I believe it is possible to compose meaningless things like `FROM .. GROUP BY .. FROM .. WHERE .. GROUP BY` in QueryDSL. Also, the whole idea of type safe, generic row types is completely lacking in all other APIs (except Slick in Scala). We believe that SQL is a very typesafe language, and thus, the Java compiler should be able to type-check `UNION` subqueries for their row type compatibility. [This is shown here](http://www.jooq.org/doc/latest/manual/sql-building/sql-statements/select-statement/union-clause/) *Internally*, jOOQ [models SQL as an AST](http://www.jooq.org/doc/latest/manual/sql-building/queryparts/), which is transformed by renderers. This allows for much more powerful SQL transformations than with other APIs string-based or template-based approaches, which do not properly reflect the complexity of SQL. In fact, our [SQL transformation SPI](http://www.jooq.org/doc/latest/manual/sql-building/queryparts/custom-sql-transformation/) has allowed one of our customers to implement row-level security on databases that do not natively support it (e.g. SQL Server 2008). Many people argue that SQL is not composable. This is not true, but it is indeed very hard to compose on a parseable language level. But since jOOQ models SQL as a transformable AST, we have solved many many SQL compatibility problems, that I believe other APIs will not have solved. Some examples: - [SQL Server's peculiar insisting on ORDER BY correctness](http://blog.jooq.org/2014/05/13/sql-server-trick-circumvent-missing-order-by-clause/) - [Standardisation of sort indirection](http://blog.jooq.org/2014/05/07/how-to-implement-sort-indirection-in-sql/) - [Various JDBC quirks that you shouldn't need to worry about](http://blog.jooq.org/2014/04/14/were-hacking-jdbc-so-you-dont-have-to/) - [Boolean data type compatibility](http://blog.jooq.org/2014/02/25/the-jdbc-boolean-compatibility-list/) - [SQL transformation for row value expression emulation](http://blog.jooq.org/2013/05/03/sql-query-transformation-fun-predicates-with-row-value-expressions/) - ... We also see ourselves on a mission to help Java developers better understand SQL, regardless if they're using jOOQ (so even if you stick with QueryDSL, do read our blog :-) ). Some examples: - [How to calculate running totals with SQL](http://blog.jooq.org/2014/04/29/nosql-no-sql-how-to-calculate-running-totals/) - [How to fix broken metadata in Oracle](http://blog.jooq.org/2014/05/12/the-index-youve-added-is-useless-why/) - [How to leverage advanced PostgreSQL features for calculations](http://blog.jooq.org/2014/04/15/how-to-do-this-with-sql-of-course/) - [Various alternatives to calculate aggregations in SQL](http://blog.jooq.org/2014/03/10/please-run-that-calculation-in-your-rdbms/) I hope this helped. This reddit thread was explicitly about jOOQ, so I hope that this little marketing post is not too intrusive. There *are* (free) alternatives to jOOQ, but we believe that if you're really about to write embedded, typesafe SQL, none of the alternatives will make your own SQL programming experience as productive and as fun as jOOQ will.
I absolutely love Intellij too but I think NetBeans has a similar feature as well.
It would be interesting to have a concrete comparison between Yank and jOOQ (since this is part of the question here on reddit). Would you mind adding a couple of paragraphs?
I've seen this solution, but I need to be able to search the DB for based on attached data. :(
It also shows referenced images http://imgur.com/skRb8Su :)
&gt;Object inheritance is a central paradigm of OO code and I still haven't read a convincing argument to throw that away. There is a wealth of arguments out there advocating composition over inheritance for OO code, and most "modern" coding guidelines promote it (this is not Java specific). &gt;Putting utility methods in interfaces seems like an anti-pattern as well. Absolutely. It's not what the interface default methods are for, and completely breaks the semantics of interfaces (they are a contract, not an implementation of anything). Default methods are a hack meant to allow you to plaster over design mistakes in legacy code, but people are starting to abuse them for many things that will just lead to poor code. Personally I would bet that 5 years from now they'll be viewed as a mistake that caused far more harm than good.
It works for all possible ways to represent a color in CSS: name, short hex, long hex, rgb, rgba (correct me if I forgot something).
Having been using jOOQ for more than a year, on MSSQL, and then suddenly having to pay for it, on a monthly subscription no less, really pissed me off. Who knows what will happen next? More expensive subscriptions, pay for upgrades etc.? So I am looking into querydsl as a replacement myself, and it seems to be up to the task.
**TL;DR: We also have "unlimited" plans as opposed to monthly ones. We believe that by purchasing a license, you will continue to get great quality software for a very reasonable price as opposed to the non-negligible cost of migrating to another API** Hi there, and thanks for your feedback. We fully understand that some users might have grown used to the free (as in beer) jOOQ and then found themselves in a sort of lock-in when jOOQ became dual-licensed. But consider this: 1. We have reached out to the community for donations, funding, sponsorships, etc. before. Unfortunately without any avail. We don't blame the community, we might not have asked hard enough, but still, it wouldn't pay our bills. Even Eclipse or Wikipedia hardly get any donations (have you donated, for instance?) 2. We want jOOQ to succeed and not be yet another SQL API to fall by the wayside, just because the lead developer suddenly has "more interesting" or "urgent" projects. This has happened to pretty much all the predecessors like [Squill](https://java.net/projects/squill/pages/Home), [Quaere](http://quaere.codehaus.org/Getting+started), [JaQu](http://www.h2database.com/html/jaqu.html), [iciql](http://iciql.com/), and many others. So we simply need *some* money to pay for our income. That's fair, right? After all, you're paid for your work on the system you're working on. 3. We give back tremendously to H2, HSQLDB, and Derby, (among others) helping them succeed as well, as we believe in Open Source and in the excellent work performed by Thomas Müller (H2), Fred Toussi (HSQLDB), Knut Anders Hatlen, Dag H. Wanvik, Rick Hillegas and all the others (Derby) 4. You can always fork jOOQ 3.1 and continue fixing issues at your side. But something seems to keep you from doing that and just hopping on to the next "free beer ship", which happens to be QueryDSL. 5. Who says that QueryDSL won't follow suit eventually (or fall into the category #2)? What I do take away from your feedback is the fact that obviously, our downloads page is far from optimal. We have monthly, yearly, and perpetual subscriptions. So if that is easy to misunderstand, we must fix this immediately, sorry for that. I do hope that you will carefully gauge the costs of migrating a whole application to another API after one year of integration against the reasonable price we ask for our commercial subscriptions. &gt; Who knows what will happen next? More expensive subscriptions, pay for upgrades etc.? We promise you that we're not in for the quick win. We want to pay our bills and we want jOOQ to succeed. We believe that ultimately, many developers want true embedded SQL in Java, and that's what we're striving for. To help us succeed, all we ask is a moderate subscription fee that will guarantee us to keep the high level of quality that we're hoping to have delivered to our users in the past. In that way, no, this is not meant to be a trap. But yes, there's no way back to completely free, unless we find a sponsor that pays for our bills and shares our visions about Java and SQL.
Yep, a troll. Redditor since two months, has posted nothing but "C# is great, Java is baaaad because arbitrary reasons" ever since. What a waste of biomass. ;-)
Of course, giving a hand to lwjgl would definitely help even more.
Wow, thank you for the detailed description! I think we may take another look at QueryDSL. 
Thanks All for the answers, I have used Enums in my application , I this that the best way to deal with
I like Jooq very much and can really recommand it. For me, it solves very nicely 2 problems: 1. "human beings" sql api in Java: the DSL really allows to build large queries without ever having to worry about String concatenation; 2. programmatic api for SQL: the idea of SQL as API is actually not so good: it is a API made for humans that type queries and not for programs that generates, manipulates them. With Jooq, you get in Java a SQL API for programs. It allows you to compose, abstract, etc your SQL statements. While I would prefer an API that is not bound to an AST (e.g. like the datalog of Datomic), Jooq is very flexible and covers all my needs. For instance, I used the JGraphT library to produce trees of tables (via the foreign keys objects that Jooq generates) and then load trees of records (parent/childs according to the table trees); everything is done abstractly and stays readable. 
That was beautiful.
I assume you can't choose freely at work, but in any case just FYI: The community edition can be used to create purely commercial code, too!
Giving the user a choice or at least getting stuff like this from a file (e.g. for regional differences) is better, but I wouldn't call hardcoding colors "bad".
so.... you're on a tight budget but you use oracle... 
There is something along the lines of "show color box in gutter" in theoptions. I have tried a fresh install and all the options I can think of on a Mac and in Ubuntu but can't get it working. This is for Scala and css/html though. Maybe only java is supported in CE?
&gt; "show color box in gutter" in the options Yep, you're right, I overlooked that. &gt; Maybe only java is supported in CE? \*shrugs\* 
I did that once for something else and got a "WONTFIX", which was more discouraging than it should have been.
&gt; Personally, I wouldn't use Wildfly 8.x in production. I'm still doubting about this. I've succesfully used JBoss AS in the past in production. Of course, we have to realize that as someone explained on the jboss forums the usage of the term "community" doesn't just means it's available to the community, but more accurately means it's "open for community testing". Where JBoss uses the term "community", other companies might use the term "open beta". The entire AS/WildFly line is an alpha/beta line for what will eventually be an EAP. Where JBoss uses the term "EAP", other companies might use the term "final". &gt; There are no plans for that branch to be productised, therefore it will not be tested as much as if it were a productised branch. I'm not 100% sure yet if it's like this, but you may be right indeed. It could be that WildFly 8 is a relatively quick release just to have Java EE 7 support out there (like JBoss AS 6 did for Java EE 6, and where JBoss EAP 6 was based on AS 7). But... it could also be that it's just a Chrome-like naming thing, i.e. Red Hat may want to increase the perceived difference between WildFly and EAP by making sure they get wildly (no pun intended) different version numbers. So what otherwise would have been WildFly 8.1 will now be called WildFly 9 (remember that what's now 8.1 would initially be 8.0.1). In a continuous line of development, the next EAP version will of course be based on WildFly 8 as well. It's just that compared to the future WildFly 9, the latter will be a release closer to the EAP release (e.g. just like JBoss AS 7.1.1 was closer to EAP 6.0.0 than JBoss AS 7.0 was).
&gt; Keep in mind, anything with a label other than than "Alpha" would require a subscription license, which I would highly recommend. I just visited JBoss website and tried to download JBoss EAP. An agreement was presented before I proceeded to download JBoss EAP. The agreement contains text like this: &gt; By participating in the Program and accepting these terms, you represent that you will be using the Red Hat Subscriptions(s) for **development purposes only**,... So I need a subscription if I want to use JBoss EAP in production environment?
Ctrl+Y has been used to delete a line in quite a few editors over the years. (I know I wasn't surprised at it when I started using IntelliJ.) Can't find many examples but certainly the Borland IDEs of the 1990s had it ([Google search](https://www.google.co.uk/search?q=borland+delete+line+shortcut+ctrl+y)).
It works in pretty much all file types. CSS, HTML, Java, etc.
The Keymaps page in IntelliJ's settings has a dropdown to quickly switch to the Eclipse keyboard shortcuts.
&gt; JGraphT library to produce trees of tables [...] Very interesting! That would be worth publishing in a blog post... :-) &gt; While I would prefer an API that is not bound to an AST (e.g. like the datalog of Datomic) That too, of course ;-)
Thanks for the feedback. Too bad for us, we would have loved you to "come back", but it's never too late. Maybe in a future project, and maybe with PostgreSQL? May I ask what the deciding motivation was? Just the price (or any price at all)?
I'm still firmly in the eclipse camp.
I don't understand all this eclipse hate. I don't have any gripes with it.
It's just that common desktop programs (WordPad, Libre Office, [...tests...] and apparently Firefox) use CTRL+y for redo (un-undo), so it's a harsh trap to walk into.
&gt; So I need a subscription if I want to use JBoss EAP in production environment? No. JBoss EAP is LGPL software (check their license details). Now look up what the (L)GPL stands for. If you read it carefully, it says there can't be any such restriction as "not using in production". TINLA and pure informational, but the LGPL is pretty specific in what it does and does not allow. Ask your own lawer if necessary when in doubt. Anyway, the restriction only takes effect when you promise Red Hat that you won't use it in production. It's thus the other way around. Initially the restriction is not there (it can't be there, the LGPL doesn't allow it). But then YOU enter into a (zero dollar) subscription with Red Hat and then YOU promise not to use it in production. It's a subtle, but important difference. If you never enter into this subscription, there's nothing that prevents you using JBoss EAP (any version) in production. Again, it's LGPL software and via its license Red Hat and all other copyright holders have already given you very specific rights. Again, if needed, read up on what the LGPL means and what its purpose is. 
I think one most relevant answer should be obvious to everyone: Layers. The more calculation power the guys at Intel and other hardware manufacturers are able to squeeze out of physical reality, the more abstraction layers can be created between the transistors and the code. This allows more rapid development, better code-reusability / less learning (hence again more rapid development), and most importantly: Stability. (See e.g. Java versus C++) Another law (King's law, I think.) says: Eventually, the number of layers between the machine and the code will asymptotically max out because the amount of possible abstractions is finite. And even if more and more software is run on the same machine, Moore's law might eventually bless us with ever increasing computing power *in practice*.
I'm not one who get religious over which editor other people use. If Eclipse works for you, that's great. What more could you want? I tried Eclipse years ago and didn't like it. I heard about Netbeans and liked it a lot and used it for many years. Then IntelliJ had a crazy sale and I bought the Ultimate edition. That prompted me to move. In my opinion IntelliJ and Netbeans are equally nice. IntelliJ feels much faster, but Netbeans seems smarter. There's always something to complain about.
I wish I caught one of their sales :-(
**Avoid lots of Util classes** I would not do that. Because the inherited default method is then public. Especially if you unit test your code, this should be avoided. For each unit test that tests a class that inherits those default methods, they have to be tested for their behavior. So imagine you have 100 classes that implement an interface with 2 default methods, you have to execute 200 tests additionally, just to ensure, that behavior did not change (e.g. by overriding a default method). Please still use a utility class so that concern is private. Otherwise you have a class architecture that is too explicit without proper context.
i'll try to cook up / write something :)
Nice article. Just watch out that you don't just swap out one thread for another. Synchronous http requests are nornmally handled by a thread pool already. If you just hand over the work that would have been done by the http thread and hand it over to a worker thread pool, and do nothing else, you could just have well added additional threads to the http thread pool.
I kind of wish some more crazies had another well-publicized prediction about the end of the world.
Am i the only one that use vim + eclim?
What happens when you define multiple colors per line?
My company is also pretty much an eclipse shop. Please don't kill me, I'm quite happy here.
I want to like IntelliJ, but when it has to index very large php files, it becomes super slow and laggy when typing. PHPStorm doesn't have this issue interestingly. Support is very responsive though and asked for "idea.log, thread dumps and a CPU snapshot" when their initial "possible quick fix" didn't work. I love that they answered my email within an hour!!
In the settings is a category for auto-imports. You can opt to import unambiguous classes automatically.
you get multiple colored squares (up to five, i just checked)
As someone who has been following your product for a while now, the license issue is what has made me look at alternatives. Has Data Geekery evaluated other licensing models that have been proven successful in the open source community? For example, instead of a license to use the product, you could instead offer a support subscription.
Sure. I'll explain them below. The idea of the task is to code a program and not only utilize what we've learnt but also expand on that and find our own code online to try and improve on the program. My program is going to be purely textual. My teacher says I can either read the data in from a text file or link the text to the program using databases (Which he said I'd get more marks for). The basic functions of the program needed to be: - A secure login feature using a username and password. - The ability to add, edit and delete files. - A search function to find. - A sort function to match similar files etc. - A help window to explain the program. He says that to "fancy" up the program I could provide the ability to play music through the program. I have absolutely no idea how to do this so for now it wasn't a priority. Other than that, it's apparently extremely simple. If I get an A for this it almost guarantees me an A overall for this year in high school which would be great. 
I advise you stop reading and start solving actual problems. Maybe work your way through [Project Euler](https://projecteuler.net/).
&gt; Project Euler The thing is... in camps I don't have access to a computer, the closest thing I have access to is a smartphone. I can only use the computers on the weekend, when I get out of camp. I think this is also somewhat similar to CodeEval right? I use CodeEval every weekend for their challenges. 
&gt; As someone who has been following your product for a while now, the license issue is what has made me look at alternatives. I'm very sorry to hear that. Even now, 8 months after the dual-license switch, it's hard to see users / customers leave. But you do have your reasons. &gt; Has Data Geekery evaluated other licensing models that have been proven successful in the open source community? Yes, we have, and believe me, it was a tough decision! &gt; For example, instead of a license to use the product, you could instead offer a support subscription. Of course, we have evaluated this. Ask yourself: Are you aware of any (literally *any*) company that would pay for support for something as straightforward as jOOQ? Why would they even need it? Would you pay for such a subscription? I don't think so :-) Support subscriptions do seem favourable for most users, simply *because most users don't need it*, and thus *most users don't have to pay anything*. It would still be free, because [*"THEY"* pay](http://blog.jooq.org/2014/05/20/free-as-in-beer-has-caused-heartbleed-and-much-more/). But if you're honest. How come you pay good money for your MS Office, JetBrains IDEA (why don't JetBrains offer support subscriptions instead of licenses? Like Eclipse, NetBeans), Oracle Database, SQL Server Database, Adobe PhotoShop (or Lightroom), and many other great software products, but with jOOQ you're not willing to do so? What makes them better / different? For any of those, you have free alternatives, and the alternatives are simply not as good, but they may be sufficient for some use-cases. So you trade license price for quality and feature richness (and warranties!), and that's fine. I might be exaggerating a bit, but this is how we see it at Data Geekery. Support won't actually pay our bills for a long time. We would continue to invest tons of money (or lack of salaries) into this product, making it popular, and then maybe, in 2-3 years, we can pay for 1 employee with the horrendously expensive support subscription that we would have sold to 1-2 customers with a sales team of 5 (or so). Instead of investing in the product itself. But we're not Pivotal, Oracle, or Red Hat. We're just the little Data Geekery from Zurich, working hard to change the game for Java and SQL. So, again: This is a "no" for support subscriptions... [In our recent article (linked to before)](http://blog.jooq.org/2014/05/20/free-as-in-beer-has-caused-heartbleed-and-much-more/), we have compared this discussion here on Reddit with Heartbleed, which - in our opinion - was essentially caused by the fact that most people also tend to think that *"THEY"* should fund the OpenSSL project (again, who is *"THEY"*?). *"WE"* are entitled to get it for free (e.g. in WinSCP, etc). Now, this is our opinion at Data Geekery. We think we've made a great decision, the best one to help jOOQ grow. We're investing a lot of love and effort, and because like most OSS projects, we have (almost) never received any donations or other sorts of funding to pay our bills, we're now just changing the game for some customers. And it works, [popularity is not decreasing](http://www.google.ch/trends/explore?q=jooq). We're aware of the "free beer user community" having left the ship, but that's OK. We want to be the JetBrains in the Java/SQL market. The one that's simply better. And if you're looking for "better", then I'm sure we'll be able to agree on the price :-) Hope this sheds some light on the issue. This whole story is really not so easy to do, when you're on the vendor side, and when "free" is what's expected from by customers. Some further reading about our story here: - http://opensource.com/business/14/1/how-to-transition-open-source-to-revenue - http://opensource.com/business/14/1/5-lessons-open-source-revenue-based-model
Before you start coding you're going to want to plan out your project in detail. Is it console-based (in a terminal) or do you need an interface? What are the various tasks users need to perform? How do you want to store the data, as a collection of Song objects (simplest but not the best organization)? You're looking at making a relatively simple application called a CRUD (Create, Read, Update, Delete) application. Then using your plan, break up the project into small chunks. You need to know how to read and write text files (or communicate with a database) for persistent storage. I'd recommend looking into the XML format. You don't have to become an expert, just know enough to save and read your data in valid XML. Write code to read and write song data to the XML file. Have it print song titles to the console to tell it's working. There's your Read part basically done. In general, each task will act as guidance for where to go looking for resources. For example, you'd search "reading XML file" or "how to format XML" which are specific queries. Then start coding your features. Have a way to get information about a new song (Create). Add it to the internal collection of songs, and then have it save the XML. Editing is essentially the same thing, except some of the information fields will already be filled, and instead of adding a record you have to find it first. I'm assuming you're going to be adding song information manually instead of going through song files and adding them automatically. If you need to do this, look at how song information is encoded in mp3 files (ID3 tags). The idea though is to go through and organize your ideas. What tasks do I need to incorporate? What are the steps for each task? What tasks are similar, and what can be reused? The final project seems incredibly daunting. But by dividing everything into subtasks and tackling those individually is much, much easier.
Please x-post this to /r/IntelliJIDEA!
The code is under the LGPL, which does not include Red Hat's trademarks and artwork. Therefore, you cannot use JBoss EAP (except for alpha) binaries in production unless you remove all the trademarks and artwork or purchase a subscription. Removing the trademarks and artwork is what CENTOS does to RHEL.
Those requirements must apply to JBoss EAP binaries that are not Alpha. Alpha It is best stated in the 5th Question in the [FAQ](http://jbossas.jboss.org/faq). Jason Green (WildFly Lead / JBoss EAP Platform Architect) gave a great answer to a forum question about it [here](https://community.jboss.org/thread/228640). I would still recommend having your organization purchase an EAP license. JBoss support is amazing plus a 16 core license is only 6k. That is a really great deal.
I'll try looking at simpler things :) Thank you for the advice. Do you know any simpler tutorials I could look at or whom would be better to learn from?
That's really cool ,thanks!
&gt; I'm still doubting about this. I've succesfully used JBoss AS in the past in production. If you are using JBoss AS/Wildfly to host basic web applications or services, then it will generally work fine. Our organization uses large parts of JBoss, including JMS, JMX, EJB, domain model, customized log handlers and more. We ran into issues in the AS line many times with JMX, the hardened binaries worked out much better. &gt; But... it could also be that it's just a Chrome-like naming thing, i.e. Red Hat may want to increase the perceived difference between WildFly and EAP by making sure they get wildly (no pun intended) different version numbers. So what otherwise would have been WildFly 8.1 will now be called WildFly 9 (remember that what's now 8.1 would initially be 8.0.1). There is nothing I read in the mailing lists or forums that would indicate that this is the direction that Red Hat is taking. I can see it being a possibility, but I bet Jason Green of Red Hat would know for certain.
&gt; In Netbeans it lists all the exception that are thrown in the block. In IntelliJ I always have to remember which exceptions are thrown and then start typing to get auto-completion. Am I missing something here? When I select a piece of code, and surround it with try/catch, idea inserts all the catch blocks for all thrown exception types automatically. Unless I misunderstood what you mean.
What about [MyBatis](https://code.google.com/p/mybatis/)?
Ok so here are some suggestions: I'm going to suggest that you use a JSON database for this. It's basically like using a text file, but more libraries support it. I suggest using json.simple, but that's only because I've used it before. On to the details &gt;Secure login Find a library that can do something like take the md5 hash of a string. Make a "bean" for users that `implements JSONAware` (that might not be exactly the name of it) with code something like (may be syntax problems, I'm on my phone) @Override public String toJSON() { return String.format("{\"name\":%s, \"pass\":%s} ", username, pass) // username and pass are declared elsewhere Read up on json to understand the format there, but it's basically a json version of a `Map` (it's called an object, and is **different** from a Java `Object`.). json.simple turns them into `Map`s, more on that later. Now you want to make constructors. private final String username; private final String pass; public UserBean(String username, String pass) { this.username = username; this.pass = pass } public UserBean(JSONobject jo) { username = (String) jo.get("name"); pass = (String) jo.get("pass"); } So now we have a constructor for making a new user, and one for loading users from their json representations. Now let's make a wrapper You know what? Screw it, I'll finish the rest of this on my computer in an hour or so.
&gt; Keep in mind, anything with a label other than than "Alpha" would require a subscription license, which I would highly recommend. I also would highly recommend the paid subscription and the associated support, but it's not the case that anything other than Alpha **requires** a subscription and/or special license. JBoss is fully open source and that comes with both certain rights and limitations. The requirement for a subscription is not such limitation. A special license is also not needed. JBoss is already licensed, and this open source license already gives you the right to *use* the software yourself for ANY purpose you see fit, and explicitly not excluding any specific usage (like cannot be used by meat factories) or specific types of persons (like cannot be used by men with beards). Distribution has certain limitations and requirements, like making the source available (and especially, making the source of any modifications available). 
IKWYM. I was just mentioning that it's maybe more common to delete a line using Ctrl+Y than you think. On a similar note, I'm used to either Ctrl+Y or Ctrl+Shift+Z for redo, but when I use Notepad++ I automatically try Ctrl+Shift+Z. This doesn't undo, it prints an ASCII character which loses the redo buffer. Aaargh!!! So I can sympathise, but I would miss Ctrl+Y in IntelliJ if they removed it.
Okay, that makes it a bit clearer. For a project like this, you need to plan ahead a bit. + Design it with the [**Model-View-Controller** (MVC)](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) pattern in mind. + Decide what music information you need to store (Song name, Artist, Year, Genre) + Decide upon a data storage (others have already listed XML and JSON as data storages, I'm going to add [SQLITE](http://www.sqlite.org/) as another option - SQLITE can be used as embedded SQL database and with the proper driver, the data can be mapped to POJOs (Plain Old Java Objects) + Decide upon your interface - GUI / Console - if GUI SWING of JavaFX (probably SWING as it is currently more common than JavaFX) Once you have all that decisions made, you can start on details. In a real-world application, the database for this would already be getting quite complex, as DBs should be designed in such a way that as little redundant information as possible is stored. (You'd need individual tables for the Song titles, Artists, Genres, and a table that links all together. For studying purpose, forget about that structure and use a single table.) + Work out a class that can store a single song with all related information. + Create [comparators](http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html) for that class so that you can sort by any field + Think about a memory storage - I'd recommend an ArrayList (Normally, only a couple records would be cached, but since it's for study purposes, it should be possible to keep all records in the memory) + Design the User Interface (just as a mockup) + Design the workflow - how the program responds and what it needs to do for a certain action **and last:** start coding. [Tutorial for using SQLite with Java](http://www.tutorialspoint.com/sqlite/sqlite_java.htm)
Hey, come on now! Netbeans was the bees knees once, dont't you forget it.
&gt; JBoss support is amazing plus a 16 core license is only 6k. That is a really great deal. +1 every company except perhaps the smallest startups that don't make any money yet should be able to afford that 6k easily. I haven't seen many established companies that didn't went for some kind of support contract for production usage.
I think WordStar (back in the day) used it too.
On the mailing list pretty much the same question was indeed asked, including the Chrome reference if remember correctly ;) The answer was indeed that some bigger changes were planned and that this justified the major version bump. As for issues, we encountered the same thing for a customer that wanted to use AS. CDI in JBoss AS 6.0 was not workable for our use case, there was something with JMS not being available early enough, and EJB throwing NPEs when asking for the user principal when not authenticated (spec mandates a null here). We were always able to workaround the issues. CDI was easy since we just didn't use it, and for the specific JMS and EJB issues we created some utility methods (e.g. a utility method that caught and swallowed the NPE and just returned null). So yes, the AS line was generally buggy, but still good enough for this customer to use in production. Also one of the rare examples of a small but fairly established company that didn't want to use a supported version. With AS (now WildFly) you as a developer just have to be prepared that some (Java EE) features just do not work yet or occasionally are just not there (which may happen if the TCK for some reason just doesn't test it). EAP is certainly more hardened, but it's always a long wait for a new Java EE version. Java EE 7 is there NOW for WildFly, while EAP 7 might still be a year away. 
there doesn't seem to be anything here
Not really. It usually means that they've looked at it and determined that a) it's doing exactly what they want it to do (maybe not what you want it to do) or b) it's not worth fixing because it's too complex and so rarely an issue.
&gt; a) it's doing exactly what they want it to do (maybe not what you want it to do) The correct status for that is INVALID, not WONTFIX. &gt; b) it's not worth fixing because it's too complex and so rarely an issue. In that case I'd argue that it's better to either decide that the existing behavior is what you're going to stick with (hence, INVALID) or just lower the priority. Using WONTFIX for "we don't have the resources to fix this" artificially lowers the open issue count. Leaving the bug open with a low priority at least keeps track of the fact that there's an issue that *should* be fixed, should it ever become easier, time becomes available, or priorities change for whatever reason.
From the editor perspective - probably. It beats the shit out of Microsoft's Visual Notepad. 
Thanks for the detailed response on your rationale for going the route you did. FWIW, just have been following the product and have not been a customer -- I respect what you are trying to accomplish. In terms of other companies successful with the support model, maybe Gradleware would have been a better example as a smaller company in the Java space.
I think that java7 gave a MediaPlayer and Media class to make playing common codecs fairly straight forward (but I'm mobile so don't have much else helpful to suggest ATM)
My compiler is not working. Something wrong with the path address. :/
You are not trolling us, right, right!?
Get Android Studio. It is relatively easy to use. Available freely from Google. I have Eclipse ADT and Android Studio both installed on my Debian system. 