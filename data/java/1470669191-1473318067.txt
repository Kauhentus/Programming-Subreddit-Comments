In the industry, especially for large companies, we tend to hang back on updating java until absolutely necessary as it usually requires that at least some kind of code changes be made to keep older products functional. "The Business" usually sees upgrading as "unnecessary until necessary" due to the extra work it creates without tangible pay offs for the user. (Tangible as in new features) So, it's not uncommon to be on java 6 or 7.
Can confirm, in the banking sector. Still waiting for an actual reason to not move to 8. The "it's not backwards compatible" arguments don't work so well with Java in my experience 
... at some point :P
Cool article, wrong sub. The word java doesn't even appear in this article. 
Wow, I never know Drools could be used to solve such complex processes.
So you're saying we need a sidebar sign that reads: It's been *20* days since the last swing/javafx question!
Nice, but how do you serialize these? Marking setters with @ignore would make them undeserialisable.
What type of serialization are we talking about? Java serialization or Jackson? Java serialization works just fine. Check out this [unit test on GitHub](https://github.com/vladmihalcea/high-performance-java-persistence/blob/master/core/src/test/java/com/vladmihalcea/book/hpjp/hibernate/mapping/FluentSettersTest.java). For Jackson, you can do this: ObjectMapper mapper = new ObjectMapper(); mapper.setVisibilityChecker(mapper.getSerializationConfig().getDefaultVisibilityChecker() .withFieldVisibility(JsonAutoDetect.Visibility.ANY) .withSetterVisibility(JsonAutoDetect.Visibility.NONE));
I agree whole heartedly half and half generics are weak, and honestly really don't being value to the table... 
In case you are looking to deploy your Play 2.x application to AWS, we at Boxfuse have built deep integration for it. You can literally deploy your app, provision, configure and secure all necessary infrastructure with a single command: https://boxfuse.com/getstarted/play
0 points. 47% upvoted. All hail our spring framework overlords.
Thank you, we manage our own servers but I'm very interested in monitoring Play applications, what do you use for that ? 
I wrote a related blog post in 2012 and also asked Brian Goetz about expanding union and intersection type support in future versions of Java. The question was inspired by Ceylon's first-class support for these concepts: https://odoepner.wordpress.com/2012/07/11/union-and-intersection-types-in-java/
IntelliJ
Eclipse is pretty much the defacto standard in Java shops. Many tutorials and books use screenshots of Eclipse to help explain how to do things with Java. Eclipse is free. If you get a job programming in Java you will already know how to use a complex tool that you will use all of the time on the job. You will start off making it easier for people to help you, easier to exchange work with others, and easier for you to help others.
I would say (in order of popularity): + IntelliJ (Community Edition is free) + Eclipse + Netbeans
How about you search this subreddit for the 1000 other times this has been asked?
I would disagree with you, most of my coworkers at this job, and many at other places have moved to IntelliJ, either community or enterprise edition. Its head and shoulders above eclipse in stability, speed, and its far more consistent in appearance / styling. I never want to go back. (I write 90% java code, and some js / node / html)
My shop uses intellij idea and Netbeans interchangeably. Eclipse has been banned by consensus. Our rule is: use whatever you like so long as CI builds, standards are maintained, and other participants can still work on the project without having to change their build environments to accommodate your IDE. We had about five incidents in the span of two weeks where Eclipse killed the build by trying to "help" us. Even the die-hard were swearing at it by the end.
My favourite one is Netbeans, but I can only use it for personal projects. All our clients require Eclipse. As for InteliJ I only have experience via the Android Studio fork from Google, which tends to be quite heavy for our computers, i7s with HD and 8GB.
Just a FYI... the commerical supported version of OptaPlanner is Red Hat BRMS (business rules engine) or Red Hat BPM (business process management). One of the way to support that team is to buy a subscription which gets you enterprise support and access to whitepapers, forums and solutions at http://access.redhat.com.
You can import an Eclipse workspace into NetBeans (`File`-&gt;`Import Project`-&gt;`Eclipse Project...`) and use both IDEs in parallel.
I'm a consultant / contractor and here they let you use whatever you want. Typically they'll even provide a company wide IntelliJ Ultimate license if you want to use it. It makes no sense that you pay a ton of money for a contractor but won't allow them to use their favorite tools.
IntelliJ is pretty great if you want an IDE. What's wrong with ATOM?
Just as a thought exercise, I want to list the things that you mention that makes a proper IDE: * Code completion - *I have smart code completion in vim via the [JavaComplete](https://github.com/artur-shaik/vim-javacomplete2) plugin* * Syntax highlighting - *Syntax highlighting exists in vim* * Code suggestions - *See 1* * Direct documentation access - *I do not have this in vim (I assume there is a plugin) but I don't find it much more difficult to google `com.w3c.org.Document` and pop open a tab* * Code refactoring - *I can easily refactor in vim, using either regex, or Java based plugins to do exactly that* * Boilerplate code generation - *Easily done in vim. Example: with my plugin setup, I can press `\ja` to generate getters and setters for each of my member variables*
ed, vi is for all you lazy youngens. WTH is this Intellij thing?! 
I have experienced it in both areas. When doing R&amp;D in-house we were locked to what IT and architects wanted to allow on our PCs.
If you want to pursue Java as a career you will need to pick an IDE. There is no team that is going to want a member that seriously underperforms compared to the rest of them because that member insists that vim and some plugins are the same as a Java IDE. Take code refactoring for example, you say you can write regex to refactor. Sure, that's completely possible, but in the minutes it takes you to write a regex to extract an interface from an existing class I can right click on the class select "extract interface" and be done in a couple seconds. Vim is definitely my favorite text editor but it would not even give it a moments consideration when it comes to writing java code.
We are normally supplied computers too but still have admin access. Not being able to install your tools is pretty stupid. I've never been on a project where it was that locked down. 
Seconding the OP's comment. I'm just starting out with Spring and backend in general and this looks like exactly what I'm after.
More like Spring and Java EE - Head to Head Survey **Not the results, literally take this survey please**
I guess they want to keep the survey simple, but some of us work on more than one stack at once and/or do consulting gigs that change every few months.
&gt; The Collections API is just downright weird. The Collections API is downright ancient. It was retrofitted with generics, when it was already almost a decade old. Back then you got genericity with `Object` and had to cast out of the collection. So you have vestigial `Object` APIs, like `toArray()`. &gt; If you add to a Collection it's type safe, but removing it's not. What is type safety? Generics ensure the integrity of the contents of the collection. So that you don't accidentally insert a `String` into an `Integer` collection and get yourself a `ClassCastException` for your troubles. Removing an element cannot violate the integrity of the collection, so the original equality contract is sufficient. Same with `contains` and `indexOf`. &gt; It was just weird decision making at the time. I think it was a great decision. When Java 1.5 rolled around with generics, there were tons and tons of libraries still using "raw" collections. Java's way of doing generics let you increase the type-safety of new code without causing major friction with existing code. I don't really mind the Collections API. It has grown and adapted based on what is practical rather than on what is "pure". However, Java's type system is just stupid. As in, it forgets the type of expressions a few levels of generics in, so you have to keep giving it hints with the ugly `.&lt;T&gt; foo()` syntax or break apart expressions.
&gt; like being able to call list.toArray() without having to provide a &gt; type reference You can do that in Java too, thanks to the broken covariance of Java arrays. The cast from `Object[]` to `T[]` is totally legit. The "type reference" version of `toArray` has nothing to do with generics, it was there since the beginning. `toArray(Object[])` simply became `toArray(T[])` in Java 1.5. I've never understood what's so great about reified generics. So what if you know what the type is? If the type is generic, how can you possibly know what you can do with the type? Suppose you want to do `new T()`, which is impossible in Java. But what if `T` is abstract or doesn't have a default constructor? Is the C# compiler smart enough to tell you that the concrete type is incompatible with the usage of the generic type, or are you in for a runtime surprise? Sounds like Liskov Substitution violation fun time. Screw type references, I prefer polymorphism.
DDD can be shipped with any persistent framework. DAO = Repository. But DDD is half joke. The only things that very valuable in DDD is its distinction between value objects and entity, and the introduction of service and repository. All these concepts have been well accepted by the community now. The real way to guarantee maintainability is component-based design, which aims to "divide and conquer". Ubiquitous language in DDD? Doesn't scale when the system and the team get big. 
Interesting read, I've never thought about optimization this way before
I use Netbeans but Eclipse is by far the most popular. ItelliJ's marking have been caught spamming stuff on here before so it is probably not the best place to get a good feel for which is the most commonly used.
This is how you scale with Python, but it's not very efficient. I'm not sure how many Python processes you can reasonably run on a single machine, but it's certainly much lower than the 10K threads or 10M goroutines. Things become even more complicated (in Python) if you need to efficiently share memory between processes. Basically a single Go machine may replace an entire Python cluster, depending on your application.
So my experience definitely is limited, I only did a few projects with it. And at that time, those were the common practices I saw around. Maybe we have some different terms, because to me "vendoring" is literally keeping the dependent source code in your repository - not just being able to resolve it. By the latter definition then technically everything would "vendor". Also under the latter definition, it is true - since you are looking at a literal repository you don't lose the history. But if you "vendor" by my understanding of it - you can't just have a submodule the same way. AFAIK "vendoring tools" are more about resolving those dependencies into the "vendor" folder, but they aren't really "vendored". Again, seems like we define that differently (mine me be incorrect, but that seems like the OG go definition from the GO15VENDOREXPERIMENT) - because yes, under what you're saying it's like every other system, you point at a version based on some version identifier (semver, hash, whatever).
So to be clear, when I said "trivial build" that included automatic dependency resolution. I consider a file that lists your dependencies to be "trivial". By "non-trivial build" I mean a build that contains many steps, like processing data files into alternative forms that are then incorporated into the final program, customised compilation flags, custom code for different platforms etc.
It seems to me that you're not benchmarking the exact same thing: for direct call you're invoking the method through the interface (`directCall(Person person)`) while for the other cases you specialize the methods (ie. `_Reflection(ImmutablePerson person)` and `_Reflection(MutablePerson person)`, etc)
I started using intellij full time not that long ago. I used to use it for android studio but that was not very often. At my current job I was using eclipse and while I dont hate eclipse the switch to intellij was great. I find intellij so much better over eclipse
IIRC there's no direct way to do this if that dependency tries to open files by itself - you could probably do some in-memory bytecode rewriting shenanigans, but that's fragile as hell On the other hand if you can supply the `File` or a `InputStream` instance to that dependency then it's pretty easy, but the VFS implementation is on you.
The idea or aggregate roots is what interests me. If my understand is correct in a simple eCommerce system you may have Order, LineItem, nad Item. Order would be the aggregate root, so when modifying an order it would always come through the Order domain object. OrderDomain.java might have methods like: addLineItem modifyLineItem removeLineItem getTotalCost getTax getWeight calculateShippingCosts ..... In an anemic design the Order object might just expose List&lt;LineItem&gt; via getter and setter, and then a service classes modifies the collection.
The Evans's book is sort of long-winded and hard to read if all you want is to get the good high level introduction to DDD. Much better concise overview is ["Domain Driven Design Quickly"][1] by InfoQ. It is short and to the point while still doing a good point of explaining the main principles. [1]: https://www.infoq.com/minibooks/domain-driven-design-quickly 
Actually the OP (/u/ChavXO) can since Java 7 create his/her own `java.nio.file.FileSystem` via the given providers which perform everything in memory. Then to replace the filesystem that the JVM uses, you just need to set the appropriate system property which uses his/her file system interface rather than the default. All of the standard old I/O classes use the new NIO code internally. A setback however, is if JNI code is used and it accesses the filesystem using the OS file interfaces instead of Java's (i.e. it must use purely JNI and not stuff such as `fopen()`). If the OP has no use of JNI anywhere then this should not be an issue at all.
But how can he get a $100k salary faster /s
I started programming in java with Netbeans - which was really beginner friendly and i was very pleased to use. Afterwards I had a short journey with eclipse for android development which really, really sucked - but mainly because Android was new at that time and the Android support was rather Alpha than anything else. In the last two years I have used **IntelliJ** and I cannot emphasize enough how much i love it. It handles so much tasks for you. However you have to be aware that in the beginning it might have a tough learning curve if you haven´t worked with other enterprise IDEs. 
Makes sense. 
It looks like this library is more of an abstraction over other OpenSSL or JCE based providers. In theory BC should be usable then... I think!
I wish oracle would just make it easier to use full strength encryption using JCE without having to screw around with JRE extensions.
Vendoring in go typically means you copy the source code from the remote repo into your repo with a metadata file containing the repo Url and commit hash for reference purposes. The aforementioned tooling basically just manages this file for you.
Basically, you're in the wrong subreddit. This should go in /r/javahelp. Still, check out the [Programming Challenges](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) in the /r/learnprogramming wiki
The first big difference is that OptaPlanner uses your POJO's as input/output. So you don't give it an int[] and a double[], but a List&lt;Nurse&gt; and a List&lt;ShiftAssignment&gt; etc. So the input/output is object orientated (and polyformism is supported). The second big difference is that you can directly use those POJO's in your constraints and even call Java methods in your constraints. For example, presume you need to know if a specific shift date is holiday in the nurse's country, simply use use isHoliday(nurse.getCountry(), shiftAssignment.getDate()) in your constraints. The logic of that isHoliday function is quite complex (Eastern Monday in Belgium is the 2th monday of April unless ...), but just reuse an existing Java lib for that. It's really Hibernate versus EJB 2 all over again.
Not Oracle's fault. Due to US legislation related to crypto export. Crypto is considered a weapon by US law and there are export restrictions on it.
Again, because of the law, if you ship the extension it's as if you're shipping crypto itself. Do you know that in USA open source projects (hosted in US by US people) have to get a permit to use "strong" crypto? and write a letter to some department and stuff. Do you really believe Oracle has no lawyers that know how to interpret the law better than you ?
They will get a Backpressure exception with this code. I've done this by implementing an operator that request, using the backpressue, a new element after a given amount of time.
great I'm going to rewrite all my blog posts using some obscure wording, that way I will look "clever" confuse my readers, and have many more posts, yay "English" abuse for the win.
Another interesting read would be "Implementing Domain-Driven Design" by Vaughn Vernon. It is complementary to Evans book and shows some simple implementation examples and has a git repo. Your Repository is supposed to return domain objects.
I see. Thanks! 
I think it's funny that a lot of Java 7 features slipped under people's radars because it was treated like a basically nothing update to Java 6.
The only advantage I see here is to be able to use Intel AES New Instructions for performance. But the docs are not totally clear on what you need to get it to work in practice. Does AES NI only work via the Openssl/native channels? That doesn't seem very java-like to have extra-jvm requirements. Given that it has limited cipher support and little code reduction over standard java implementations, "Commons Crypto" is an overly ambitious name for this project. 
Nice, I've been looking at [GSON](https://github.com/google/gson)
I don't think there is a uniform answer, it really depends on the person and if they are getting any support and by whom. There are some horror stories of college profs requiring the use of 15 year old textbooks in this sub. If anything that would slow things down. 
I think it's more of a gradual click. Lots of stuff to learn, not just syntax and technical bits, but design patterns and best practices, particular libraries, and so on. I'm about a year in myself, and I'm *just* starting to feel like I could get a job soon. But, haven't been reading Java every day, as I'm studying at university and got other classes besides programming. My guess is, if you study Java every day - you could probably get employed in 6 months. 
depends how easily you handle the Object Orientated core tenants To go from I know nothing about java but understand basic C code, to basic click gear spinning lightbulb time is 8hrs for core java, and 8-40 more hours to figure out javascript basics
Hmmmmmm an interesting question, honestly ...... I have no idea how to answer
Reliable and understandable is basically the opposite of how I'd describe eclipse.
The language itself is easy to learn relative to programming languages in general. The difficulty in learning how to program an Android app is getting to know the Android way of doing things; networking, updating the user interface, using Google services, [material design](https://developer.android.com/design/material/index.html) and applying Google's [design principles](https://developer.android.com/design/get-started/principles.html). An example is that you can't do networking on the main (UI) thread so right away you will need to use more advance features to work around that. At least, that's my experience.
Some people will never really become proficient though.
You won't have a moment when everything makes sense but a rather steep learning curve if you have no programming experience. I powered through a Java course on Udemy in one week and went on learning Android development on Udacity. Fairly quickly I built basic apps and I understood what was going on. But if you want to build more advanced apps it's much more difficult - especially because you have to understand what's going in the back-end. So it really depends, it can take many months before you feel like you have a solid grasp on the matter but a few days to build an app that works.
Your question is too broad to be answered easily, you need to tell us what experience of coding you have and what sort of complexity the app you have in mind has. If you are proficient in another programming language you could pick up the basics of Java in anything from a few days to a couple of weeks (some languages like C# are quite similar to Java). In th ink case because you know now to program you know how to think like a programmer and know the sorts of things that are possible. If you have no experience of programming it's going to take much longer to become proficient, think months. You'll write your first application quite quickly but it takes a lot of hard work to start thinking like a programmer. You need a ton of practice before you start to understand how to break a large problem down into bits you can easily tackle. Lets say you wanted a job as a junior programmer, from a degree your likely to have got about a years worth of experience, that would get you the job. You won't be useful to the team for about another 6 months. It would probably be another year after that before you get let loose on anything important. It sounds like you don't have much experience so I'd recommend grabbing a decent beginners book on Java 8 and working through it. You can probably find some good online tutorials as well. I'd avoid trying to start with making Android apps as they are going to be harder to debug compared to plain Java. Google is going to be your best friend for a while too.
I have been using Java for 15 years. I am still learning. It is vast eco-system. 
First, understand object orientation in whatever language you like. Then in java, learn everything from basic programs to advanced libraries and advanced techniques. (Things like queues en linked lists) . For android, read all the android tutorials on the android dev website. If you already are not understanding basic java, it will take some time. But everyone can program. You'll get there
I meant you could become good enough to get things done (eventually), but mastering programming takes years.
That's true, but it should only take a couple of months to find out if you're one of those people
The learning should never end...
Java is fine to start with. Aim for pure java first, and then tinker with your desired java/android combo.. 
Professional for 10 years, still learning every day!
&gt; That moment when everything makes sense Everything? Double.POSITIVE_INFINITY.
enough to get things done but I've worked with people who dived straight into Android while still struggling with concepts like inheritance, interfaces and garbage collection which is definitely a problem
One that functions: a few days. One that is correct: a decade. Keep programming everyday and aspire to learn and try new things, after about five years you should be decent. After about 10 you should be proficient.
I've been working on a [media player that will allow two people to listen to the same file in sync over the Internet.](https://github.com/NoahAndrews/SynchronizedMediaPlayer) Unfortunately, school's starting up again. :/ 
Social analytics data mining platform
Huh. That's what I get for not reading the comments. Apparently never documented in the release notes: https://blog.heckel.xyz/2014/03/01/cipherinputstream-for-aead-modes-is-broken-in-jdk7-gcm/#comment-158993 &gt; As Martin has noted above, Java 8u25 has fixed the javax.crypto.CipherInputStream bug and it now neatly throws an exception. In 8u20 the fix was not there (I tested with both, BTW I didn’t need to replace the parameter spec, it worked fine with Phillip’s code). This fix, just like other security fixes, is NOT documented in the release notes (http://www.oracle.com/technetwork/java/javase/8u25-relnotes-2296185.html). This one just refers security bug fixes to http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html, which again has no details.
This is the correct answer.
[jOOQ](http://www.jooq.org), [the others](http://www.jooq.org/products) and tons of awesome SQL, PL/SQL consultancy (mostly tuning, some coding) for Swiss banks.
&gt; all with bad naming and is scattered all over the place I'd consider that to be the problem which needs solved - once you organise your media collection, other programs (eg: Plex) will work better with it. FileBot works well for fixing names of TV shows and movies to a standard format.
No comment
The same countries you can't sell weapons to (like terrorist countries) You can't export software with strong crypto there.
Nooooo, there ain't enough comments in modern code as it is!
A new business from the ground up. 3 months into it, and lots todo before it goes live in 3 more months. I quit a good paying job to do this, so I hope it all works out. Java and PHP7
Hey, Thanks for your response Do you know where is good to apply with my skillset? I am 1 semesters away from my bachelor.
i work on [ia-mame](https://github.com/TiBeN/ia-mame), a wrapper for the emulator "Mame" which downloads roms from the collections available at archive.org if they are not present on the rompath.
Your answer is very helpful. Thank you for this insight. If there are any more tips you can send them my way :-)
You make a good point. I thought there would be an industry standard of when you become programmer material. Thank you for the insight! 
[Pippo](https://github.com/decebals/pippo) (micro Java web framework), [PF4J](https://github.com/decebals/pf4j) (plugin framework for Java) and [other](https://github.com/decebals).
small and fast [web framework](https://github.com/wizzardo/http), [json-parser](https://github.com/wizzardo/json-benchmarks) and [other stuff](https://github.com/wizzardo/tools)
internet-based-radio :p
Sometimes people accidentally make code more friendly to read by adding comments. This helps you correct that mistake.
I watched some videos on YouTube by a guy called (I think) Derek Banas. He's a fantastic teacher and it got me through android development for by final project at uni.
I'm trying to put together a flashcard pdf for remembering different Java questions that might be good for anyone to know, both beginners and more advanced users. I just hope there are no errors there, if you find any please submit a patch or write in the issues at: https://github.com/fsoc/java-flashcards
He's right about apply now. Java is mostly used on back-ends or web-apps these days. So invest time in improving your skills in these areas. But don't wait, apply now. You can learn these things while you work if you find an employer willing to hire you, and chances are, you will. Things I would look into: * Dependency Injection. Spring, Guice, Dagger. * Web development. Servlets, REST webservices, frameworks that support that. Classic servers like Tomcat/Jetty/Jboss and newfangled stuff like spring-boot, dropwizard or play. * Classic SQL- JDBC, JPA. Learn to use several databases well, optimize queries, etc. * Classic messaging- JMS. * BigData/noSQL databases &amp; analytics. Hadoop, Cassandra, Spark etc. Search engines like Lucene and stuff based on it. But do that while looking for work. If you have time, do personal projects or contribute to open-source to improve your skills. Learning doesn't happen just by reading docs. Oh, and if you need help come back and ask. Worst case, PM me.
[uniVocity-parsers](https://github.com/uniVocity/univocity-parsers/) which I built to be the absolute best and fastest CSV parser for Java and is being adopted by many open-source projects (spark-csv, apache drill, apache camel, etc). This and few related projects that are becoming products which are closed &amp; commercial that we use to build data migration/integration solutions our clients: mapping of database schemas, html scrapping, real time database synchronization (by that I mean keeping different databases products in sync, not only multiple replicas of the same database), and all sorts of file-based data processing.
Will it help if I made one project from each of these topics and put that on my resume or github?
I am making a "materialised" app for Jodel (if anybody here knows what that is) because the official one looks like crap. The only problem that still has to be fixed is the automatic bearer token refresh which is a pain in the arse because they use some sort of HMAC code in their HTTP requests for that purpose and I can't seem to crack this.
You don't need to know everything, and in my opinion if you try to do a project for each they'll just end up shallow and not a true reflection of your ability Conversely, I find that making one project and shoehorning everything at the start is the quickest way to become overwhelmed and end up with a hot mess. My suggestion: start by creating a web service for something. Before long you'll need to use a database so you learn about that. What you then end up with is a solid core that shows off your Java skills and also gives you discussion points when someone says "what would you do next/improve".
Do you use NTP for this?
I develop SquirrelJME &lt;http://multiphasicapps.net/&gt; which intends to be a very portable Java ME 8 environment.
Enhancing https://javalibs.com which is Maven dependency search engine. Currently I have cca. 60 items in TODO list, most cool would be fulltext search of all javadoc files. Currently it has artifacts, java classes (source and javadoc), maven plugins and some more.
Looks like good old [Skip list](https://en.wikipedia.org/wiki/Skip_list) but with no ordering
I don't get it... What so you do when you insert in the middle of the list? Can you? Won't a linkedlist be faster? Also, how fast is it to retrieve element (n)? If you have to traverse the list, won't it defeat the purpose? Isn't arraylist already extremely efficient at retrieving data? I can't for the life of me understand why this is better for anything other than very specific use cases. 
I don't see any changes to the project since you've posted [this 9 months ago](https://www.reddit.com/r/java/comments/3rlrx2/gluelist_the_newest_fast_low_memory_consuming/) :/
Why would anyone want this?
A data binding system with a few features I wanted which were missing from alternatives: * Type-safe with generics (types and methods) and with type inference in schema definition. * Modular over YAML/XML/JSON/etc. * Maps simple structural data to complex binding strategies e.g. builder pattern. * Binds to interface not implementation (i.e. binds to methods as well as fields, can inject different class/builder implementations at runtime etc.)
Awesome description! We all know that an image speaks a thousand words. /s
Agreed, I don't trust those numbers because the benchmarks are very naively implemented.
I have interviewed candidates who claim to be java developers and they barely even know how constructors works. From what you claim you should have been applying for jobs last year itself. Honestly if you ask me, mastering a programming language is just not needed in these days. You need to have a strong basics and slowly down your career path you will realize that adaptability to new things is far more crucial than mastering one language. Go ahead and start applying for jobs. All the best mate. 
Please don't.
Except that any listener can pause or seek playback for everyone else :)
Shouldn't be necessary. Instead, commands will contain timestamps relative to the file. So if one user sends a pause command, the others will know at what point the file should be resumed from. Edit: I suppose I might need to use NTP to make sure that everyone resumes at exactly the same point. Haven't gotten that far yet. I plan to get something basic working before deciding if anything more complicated will be required.
If you put yourself on any jobs board, you should start getting calls from recruiters even with your limited experience. People have varying views on the value of recruiting agencies, but they are really valuable in getting you the first job, because they know the places that will take a green candidate. And you don't need to try to "sell yourself" to a recruiter. You can be frank and honest, then they do the job of selling you and will give you help with crafting your resume. We are extremely lucky as programmers that the market favors us so much that these services are things people knock on our door to offer us for free. You chose your career well. :) Depending on your location (I'm aribtrarily assuming United States) the "low" end will be 40-50k. Take anything you can get, but not anything that won't let you finish your degree, but I wouldn't be the least surprised if some organization was willing to give you a part-time paid internship until you graduate. But DO NOT skip getting your degree just because somebody throws what feels like a big bonus or salary at you. Your immediate managers won't care at all about your degree, but HR departments at bigger firms have it as a required checkbox for them even to let that manager see your resume. Take that first job for any amount, because it will certainly be a lifestyle upgrade from your college student life now. Pick based on the value of the experience you will get, not on the benefits or work environment or salary. Because... my EMPHATIC advice, which others may disagree with, is that you should quit that job after a year. After a year, you are no longer a green college graduate, but a junior programmer with a year of real world experience. You are worth far more than any generous raise your boss can try to squeeze out of his budget. And you've soaked up most of the experience that job can give you. Another job will hire you for the skills you've picked up, but have a great many more skills that you will learn. My slightly more controversial opinion is that for the first 5-7 years of your career, you should be bouncing jobs every 1-2 years, seeking more valuable experience for your resume that is also in an area that you've learned you both have a knack and passion for. Especially during this period, bouncing jobs is a far more effective way of increasing your salary than waiting around for a 5% bonus. If you are good at what you do, you can almost always bounce for a 10-25% kick in pay for those first few hops. I would say good luck, but you don't need it. WE ARE REALLY FORTUNATE that we are willing to keep cussing at the computer until it comes around to our way of thinking. The rest of it is just punctuation.
One major issue is the use of the default package.
Love your work. Thanks for jooq, I no longer have to write my own sql dsl at each new contract like I did just 5 years ago. 
When I was in college, a team-mate decided that we needed to use NTP in our project, not knowing any better, I thought it was a great idea, sure to impress to prof. He spent almost the entire rest of the project trying to wrap his head around NTP before giving up, and contributing almost nothing to the project. Looking back now, NTP would have been entirely useless. Not to say you shouldn't use it; just recounting my experience trying to develop with NTP.
So are you going to post everything you have on your github ?
Thanks for clearing that up. Upvoted.
Depends. If you're an expert at C#, then a few weeks. If you're a noob, then a few years
fastutil, trove, hppc, Mahout, pcj, Koloboke... Just to name a few.
I've been working on JSQRL Server, a Java server implementation of the SQRL authentication protocol. Github: https://github.com/banichols/jsqrl-server SpringBoot demo implementation: https://github.com/banichols/jsqrl-spring-boot-example Deployed demo: https://demo.jsqrl.org/
There are several tools that do that including javafxpackager from Oracle install4j etc. javafxpackager has many problems (notice that it works for Swing apps too, the FX moniker isn't required), but it generally works. Notice that you need a Windows machine for a Windows installer and a Mac for a Mac DMG which is painful.
Thanks dude. I had to reread because you had so much content here. I live in New York City, 15 minutes from Manhattan. The advice about becoming a junior programmer after a year is gold. Bouncing around jobs is counter what I thought you're supposed to do, which is form deep connections. But it seems like you're probably right. 
Really? They dont know constructors? That gives me a litlte confidence vickstruse. Thank you for your wishes. 
I thought about your point about shoehorning. Thank you for the tip about the web service. It's funny, i started working on one yesterday. Can i link you github once im done? 
Level of interest is what determines skills. People who just learn what professors told them and get good grades know *nothing*. People who spend their own time and motivation to learn above and beyond what's being taught- these are the guys I want to hire. People who hack, tinker, explore, research, try and see if it works, attempt things and fail and then try again. Ok, maybe it depends on the university, but that has been true with people I dealt with. Good ones effectively learn things on their own 1-2 years before professors get around to teaching the subject. And have some experience with personal projects as well. Some exceptions- hardcore Computer Science stuff- algorithms, data structures, graph theory, dynamic programming, Monte Carlo optimization and similar- are better learned from books or professors. You won't be able to discover this while tinkering- no matter how smart you are. People smarter than you spent decades doing this stuff...
Inno Setup and NSIS are two free and/or open source ways to do it.
install4j has a good set of infrastructure around this. It is a commercial product though.
Not sure it's fun, it's a lot of hard work, and kind of depend on other services' API. You'll need to be very motivated to keep on. On the other hand, it's kind of a script, so it doesn't need too much architect experience to get started.
My windows app at sqllocus.com uses nsis. Will use it again.
Two small libs: [storage-units](https://github.com/sebhoss/storage-units) &amp; [memoization.java](https://github.com/sebhoss/memoization.java)
Upvoted to promote visibility of crazy talk.
Does this work with screenreaders?
why you mixing the two, if you dont mind me asking
Is there a language you would suggesT? 
I'm using it for basically anything I would have used Java for in the past and that means lots of server side code. So yes. For me at least.
Developing a game where I'm attempting to use it to learn JavaFX, Spring, Hibernate, and maybe Cassandra (don't know if it'll work for what I need) and Scala (was thinking of using it for parts of the game that could bebefit from multithreaded). Its a project that start and stops due to work and school but it's more a learning deal then anything
My work is a Java shop mostly and we haven't really considered it at all. As great as the language may be, it's already hard finding good Java people - going niche probably wouldn't help that much.
Yup, the brief tutorial on their site is all you need. What's the issue you're having?
GPS Tracking. Something I've been doing for 11 years or so.
Crazy amount of data processing, Java. Front end, PHP
Link to changelog since the blog post is non informative as ever https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10031&amp;version=22550
thanks good idea for a follow up post.
Without sounding inflammatory why should I bother with something like Kotlin and not go with a language that is really renowned for its great taste in design like Clojure or Scheme? 
Problem is you have to wait for the blue thing to show up. 
JavaFX was supposed to replace swing but it looks like it's still in beta and it doesn't progress anymore. Here's the difficulties we encountered when trying to migrate our swing application: - the rendering of the components is weird: the fonts are not rendered correctly whatever you do (enable/disable antialiasing lcd stuff) and some components are blurry when you embed too many of them (this is due to the scaling applied by javafx) - ui eats up a lot of resources - tables/trees/... lack so much functionality. For example, you can manipulate only view model so when you sort the view, your model is sorted too which makes it complicated to handle your data (update/insert/delete) - fxml/gui builder is totally useless if you do anything more complicated than a simple form More generally, every post you see on javafx always focuses on 3d/charts/animation, which is something you don't need in enterprise applications. You'll never see anything on performance or custom enterprise components (like excel like data grids). It's designed to create applications similar to web single page applications
This is programming, not a museum. 
That's indeed a lot of fixes. Some of those were fixed by the Hibernate core team, while we also have had a lot of Pull Requests from the community. Open Source rocks!
You could learn the syntax in only a few days but after 10 years I'm still learning on topics like multithreading, memory management, ...
In addition to an installer, consider using [packr](https://github.com/libgdx/packr). It will create a natve launcher for your Application, and bundle the JRE. You'll probably want to bundle with OpenJDK, if possible, to have the legal right to only bundle the portions that you actually need. Oracle's JRE redistribution license only allows you to leave out certain things, and doesn't allow you to ship a partial rt.jar. Packr has an option to remove parts of rt.jar as part of the packing process.
"If you look at the JDK’s mod() implementation, you’ll see that it’s indeed O(n) for IEE754 floats, and O(1) for doubles." I don't get what the 'n' is here.
Checks out. There are some pure java crypto implementations like scrypt, but nearly all of them have ia64 naive binary bindings. Even so, most modulo operations (like string.hashcode) are not power of 2.
Number of bits or digits in the number I'm assuming.
Autowiring feels like someone is having fun setting a trap to test whether you pay attention about why you use DI in the first place. Just as you think you've moved away from global state and singletons through dependency injection, they tell you "just slap @Autowired in there, and it'll pick a match from the container". Your object just went back to going out and grabbing a singleton for itself, but this time, through annotations. An obscured singleton is still a singleton.
Also, JavaFx has tons of bugs and regressions (like this one: http://stackoverflow.com/questions/36917220/javafx-treetableview-leaves-icons-behind-when-collapsing) which are very painful to investigate and work around and no one seems to care about that at oracle. I think the api will never reach production quality and is going to be dropped very soon by oracle
I really like stuff like this. as Java developers there is so much work already done and tooling that makes us forget how much really goes on behind the scenes. I imagine you learned quite a bit doing it, too! more to the point: how is the performance? any surprises?
If you don't mind me asking, what did you use to learn to become so fluent in java?
Am I mistaken or would that grow logarithmically?
As I did this mainly to have dynamic sql, one thing I did was pluggable chunks of expressions I could put into config files. So, I had a base query in spring, then I would have a number of smaller plugins, which were used to extend the original one. When the user needed a complicated query, I combined the selected ones dynamically. Each plugin could declare a number of features and there was a dependency automatism to motivate code reuse. The parser that can process arbitrary chunks of sql was what I missed the last time I did something like this. Not sure if it's in there now. 
))))))))))
Why did you decide not to write unit tests ?
For comparison, I have also written classes which do the same thing: &lt;http://multiphasicapps.net/artifact/059c10f04c4d1920&gt; for the ZIP and &lt;http://multiphasicapps.net/artifact/34bfffa043002a7b&gt; for the entries (GPLv3).
For starters, statically typed vs dynamic.
AFAICT you are doing the opposite: you uncompress already zipped stream. What I'm trying to do is to take a sequence of lazily fetched files and present them as lazy zipped stream.
Yes, you are correct. I saw the writing of the bytes but the `InputStream` is what got me. Then the correct comparison would be the one &lt;http://multiphasicapps.net/artifact/6abb834893131b33&gt;, note that I currently do not compress entries (since I lack the deflate algorithm). This writes to an `OutputStream`, but you could always bridge that to an `InputStream`. 
Can you please elaborate on 'bridging' part? Will I have to save the whole zip file somewhere before bridging that to `InputStream`?
http://psy-lob-saw.blogspot.fr/2014/11/the-mythical-modulo-mask.html
src: http://psy-lob-saw.blogspot.fr/2015/03/fixing-ycsb-coordinated-omission.html
Going beyond the "Apply Now" responses you have gotten... Here's a little advice which has worked for me: * Put some example code up on GitHub and put your GitHub link on your resume * Use LinkedIn, put as much accurate information there as possible and keep updating it regularly (ever time you update it bubbles back to the top of recruiter visibility) * Use and contribute to StackOverflow/StackExchange and link them on your resume Using these techniques, I have not had to "look" for a job in several years. The recruiters come and find you. 
BTW, the motivation behind the lib comes from this stackoverflow question: http://stackoverflow.com/questions/36644337/can-i-do-direct-streaming-of-zipfile-in-vaadin/37014995
I like this approach. How do you reference methods and classes with the `` syntax? 
So you are testing whole app after changing thing or two? Come on!
After looking further into unit testing, I kind of see why that would seem stupid. So much time could have been saved :p
I'm reminded of http://agiledox.sourceforge.net/ from 2003
It's a bit too wordy for me although I could see it providing more value to business folks who wanted to read the tests, maybe even in a report or something. 
This looks like a failed attempt at recreating Spock tests. 
That's placeholders, not variables. And debugging get's always messy if you have to go through another language stack. Spock+Geb is a much better alternative in many respects.
Swing is much better in this area: - it allows you to separate the data model from the view model which javaFx does not (you only manipulate the view model in javaFx and you can see that because sorting the view sorts your data model) - swing is orders of magnitude more performant (try to play around with more than 50 000 rows and javaFx will crumble even with its so called virtualization) - it's way more difficult to implement features like filtering and custom sorting in javaFx while it's pretty easy in swing - it's nearly impossible to achieve a particular customization for the table headers in javaFx while in swing you can easily add filter icons arrows any kind of mouse listeners, ...
No, jdk 9 is not coming with anything new for javaFx except the for jigsaw stuff. The last significant improvement was the new spinner component which was a long time ago and is still in beta (it lacks properties customization via fxml). The library is dead imho
Because you want a better Java that can stilll be understood by Java programmers and that you can easily introduce to your Java code base without friction. Clojure is a great language and I love using it but you can't convert Java users overnight to it like you can with Kotlin.
It is about productivity but it is not about Kotlin, or even Java. This is how to accomplish the same in Java: @Test void displays_success_screen_when_creating_a_user_with_all_fields_valid() { ... } Camel-case causes reading friction which hampers comprehension.
Could you explain what's the benefit of getting a Gherkin feature file at the end of the process?
@DisplayName annotation looks good but introduces duplication, it doesn't look as clean as the other way.
For the least few weekends, I have been busy working on a [Bot framework](https://github.com/ramswaroop/botkit) which helps you make Slack Bots in Java in mere moments. If Java is your forte then you can give it a spin. Feedbacks and contributions are more than welcome.
&gt; everything makes sense and &gt; Java don't go together very well...
I'd also suggest getting started with Spring Boot. It includes a production grade web server (Tomcat, Jetty, or Undertow) embedded inside of your application artifact by default.
Our app runs 340gb heaps, GC tuning was a challenge.
Guys, from the feedback of many developers, I have renamed the project from BotKit to JBot. Thanks very much. Links: 1) https://dzone.com/articles/make-slack-bots-in-java-in-minutes 2) https://news.ycombinator.com/item?id=12239667
My point is, why not start from it? If it's an output, it will be already too late - and there's no need for a standardized format like Gherkin.
alright thanks for the suggestions 
Why can't you just subscribe to /r/kotlin ? Do you think we should articles about coffee in here because most Java programmers like coffee?
Because I like writing in typed languages with good refactoring tools!
Not sure what your app does, but wasn't it possible to distribute the load across a cluster of machines? Maybe using a Big Data framework? Or Infinispan, GemFire, Hazelcast, etc.?
Pretty much anything you can think of (Desktop apps, mobile apps, embedded electronics).
Is this a homework question?
Is it just me that prefers the readability of verbose code, its what attracted me to Java all those years ago....
I like verbose code, when I make it. But if you maintain it, it is generally hell
usually for special-case services. hadoop cluster nodes where you're more bound by RAM than CPU, neo4j cluster nodes where you want the entire db in memory, apache geode as the backing for an ESB, etc. so not a ton of them, but when you just need the largest raw pool of heap you can get, there just aren't a ton of options. 
Why exactly do you need Linux? You can use spring boot with windows or OS X without a problem, as jetty / tomcat run on those systems just as well. Other than that, why wouldn't you use a build tool like maven/grade? They make life so much easier, no need to manually copy jars and all that jazz.
Fine point, yawkat. The JMH version does return the value. The ScalaMeter and JMH code is now linked in the article and can be found [here](https://github.com/twistedpair/benchmark-jvm-modulo/blob/master/jmh/src/main/java/org/sample/MyBenchmark.java). Note that for the Scala-Meter example, I believe dead code elision is taking place, so `return` or not makes no difference in the runtime. I've currently working with some devs of that project to use some tricks to get around that (e.g. volatiles).
Sorry, that's a little unclear. Since we often see recursive approaches to find the remainder (e.g. keep dividing util zero or you hit the dividend), the larger the value, the more recursions we need. That's an over simplification, but gives you a general idea what `n` would be. There are also many checks you can apply before that (e.g. for `b % d`, if `b` &lt; `d`, return `b` and if `b == d` return 0).
A completely inaccurate statement on my part. I must have conflated this with something else I had read. I meant to comment on the interesting case of negative floats for modulo. I've corrected the article. Thanks! 
https://start.spring.io/
What I would really love would be a "fork" from a stream to multiple stream based on a partitioning function. (Without need to collect them into collection).
Readability is even more reduce since methods like [reduce](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#reduce-U-java.util.function.BiFunction-java.util.function.BinaryOperator-) is non self explainable. &gt; reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner) IDE quick help does not give very much more info.
This is fantastic! I wish more people did these kinds of very thoughtful, full-featured "hobby" projects. You can easily learn as much from this as spending a year in college. 
I know not everybody can or wants to use it but I really like Lombok to get rid of my getsets.
Look at JMHs blackhole class to accomplish this
Java is best for big projects ( banking, telco, automotive domains) where you need larger teams. Why? It is easiear to hire people. (So far) Why? You can target lower seniority and train the devs to your needs. Why? Juniors start bringing value sooner. I don't think there is good technological reason to pick up java over other languages. I currently make my living as a team leader on java project but I would happily switch to python, clojure or even C++ if we could get enough decent people. P.S. I used to love java 5 years ago.
reduce is actually a common functional idiom to work with collections https://en.wikipedia.org/wiki/Fold_(higher-order_function) It's difficult to infer from signature since it's a bit abstract, but once you tried any FP language you know what it does.
O_o
RxJava has that!
Lombok only seems like a good idea because Java devs have OCD about `public` (or default scope which is underrated) and have some weird notion that refactoring is hard.
Don't get me wrong. I don't hate it now. I think my problem is mainly the unnecessary wordiness.
I believe that C# might be very similar in this aspect, but I live in unix world where it is not a natural choice. Python and others lack the safety net. Errors happen with every language. But with java they can be found faster even by juniors. I am not sure if I have any evidence for this because I never worked on similar size project in python. It just seem so from my experience with juniors and my own starts with python.
IMO Streams are much more readable than nested for-loops. You'll need to grasp the concept once of course, but at least many methods include equivalent procedural code in their javadoc to explain what's going on. 
By using a method, you can extract an interface from the class, use the Interface everywhere, and then mock it out in testing. In general, using a public final field is just a poor decision for the long-term life of your program.
I don't think I've ever had an interface that had getters and setters. The getters and setters are usually just on my data containers and there's no harm in that being public final.
&gt; The platform needs a new programming model that's geared towards reactive style programming for building large-scale distributed applications that are loosely coupled. I think it's great, and quite exciting for everyone working in this space, that they acknowledge that reactive is the way to go. Naturally, I'd recommend people don't wait for JavaEE to become reactive. [Lagom](http://www.lagomframework.com) and [Akka](http://akka.io) are available today, just go with that. *(Disclaimer: I work for Lightbend).*
Right but I'm saying that the variables that can easily be set and get without an accessor why bother. Have get/set for the weird ones and not on the normal simple variables. If for some reason it changes and I need a get/set (almost never happens) I'll change it to private and fix the places the compiler errors, I'm 100% safe because of the type system plus I can evaluate the areas and determine if there is some kind of affect, for instance if my get/set is synchronized I may need to modify the code using it for performance. It is easy to generate them but it feels silly as a programmer to be doing the repetitive task of creating all these get/sets and tons of code that I probably never needed.
IMO you should use the logging tool thread context variables to do that. add variables to MDC and change your logger layout to print them out (see http://logback.qos.ch/manual/layouts.html#mdc). See logback docs http://logback.qos.ch/manual/mdc.html. I know that log4j also supports it.
What about IBM and Oracle not sure if entire platform be replaced and we must decide? This not sound too good!
I've managed to run it, performance is pretty shitty, 2k rps on my laptop (50k in tomcat), and even in idle state it consumes one core at 100%
So the PI runs the GUI and relays commands to the UNO?
I definitely see what you mean, I was just curious to get some insight from someone who has more expertise than I do.
My worker implementation sucked, and I knew it from the beginning. The coming version using executor services instead, and should be both faster and less CPU intensive. Though, what did you expect? 
Yeah I get what you mean, Just have public for simplicity, but everyone's biased about their code to some degree and, with respect, the belief that it will never happen and so we do nothing to mitigate it is complacent. If we want our code to stand the test of time, which I'm aware most software doesn't, we must mitigate the effects of future problems caused by lack of principle. Although I do agree that it does contribute to code bloat and extremely repetitive but software is extremely repetitive anyways lol
I expected nio implementation, and at least 20k rps 
&gt; but everyone's biased about their code to some degree and, with respect, the belief that it will never happen and so we do nothing to mitigate it is complacent. I'm in the school of thought that all code is a potential point of failure so if I don't need it, I shouldn't add it. In my experience software often has to change in extreme ways that my abstractions never accounted for, and all that time trying to plan ahead was time wasted. While some work well like hiding the communication protocol behind abstractions others seem to be mostly useless like get/sets. There's many opinions in how software should be built and I'm sure there are scenarios where my solution is probably not the right solution.
Not a `Stream` improvement, but still pretty awesome: `Optional.stream()`. Which is useful, for instance, for this: Stream&lt;Optional&lt;X&gt;&gt; stream = ... stream.flatMap(Optional::stream); // instead of stream.filter(Optional::isPresent).map(Optional::get)
RxJava and j.u.Stream APIs are separate beasts. They share a roughly similar sets of operation verbs but they are conceptually entirely different things. 
What does "reactive" even mean today? Akka implements the Actor Model architecture. Is this "reactive"?
There's truth in this logic, but sometimes there's just no reason to have more than one implementation of Pair class. Ever. 
There is at least one thing you can't do without accessors: return defensive copies. If the field type itself is mutable (`Date` or `Point`, and even collections) you lose immutability. You can hide those behind accessors but then your API becomes inconsistent. I commend you for having a critical attitude towards common practice, though. Java has many common practices that are quite silly and counter-productive.
i think reactive is referring to this style https://github.com/ReactiveX/RxJava imo, it works as if someone took the listener pattern and made a monad out of it (kind of like how java's new Optional is like a monad of the null-check pattern).
Thank you. This is exactly what I have been looking for. Learning by reading code and project structure is really helpful for me. 
Usually the classes which are that fundamental are going to be part of the JDK though. The few exceptions are usually available in common utilities libraries like Guava or Commons. Specifically for Pair, it has specifically been left out of most utilities libraries on purpose, see: https://github.com/google/guava/wiki/IdeaGraveyard &gt;Tuple types are awful obfuscators. Tuples obfuscate what the fields actually mean (getFirstand getSecond are almost completely meaningless), and anything known about the field values. Tuples obfuscate method signatures: ListMultimap&lt;Route, Pair&lt;Double, Double&gt;&gt; is much less readable than ListMultimap&lt;Route, LatLong&gt;.
The whole section about "8:00 am: Java EE strategy (Anil Gaur)" sounds like Oracle is brewing up significant roadmap changes behind the scenes (outside the JCP) and everyone, except select vendors like Redhat and IBM have to wait for JavaOne 2016 to be presented with Oracle's plans for JEE8 and beyond. 
You are welcome :)
No. I guess I should be happy?
Whoops, didn't pay attention to that - won't happen again! :(
Nope. Fun trivia: I'm actually just starting my first year in the IB, so I will be able to work as much on this in the future. Summer holidays and a really lazy International Baccalaureate Pre-DP year (yay, got to love the Swedish school system), mostly. 
Thanks for comprehensive answer.
Nice. I always hated the fact that Gradle used Groovy and Kotlin is a major improvement. I
Just making a point. Point class specifically has no special role - just a sample. 
This post shows how to use MDC in Spring Boot. Spring Boot is only chosen as it is my preferred stack atm ;). The log "enhancement" can easily be applied to many other Java servers/frameworks. 
eh, i still hate that it's still a full programming language. but it seems to be getting slightly better. 
I hoped for some toList(), toSet() etc terminal operations.. They're so common, using collect(Collectors.toList()) is too verbose 
What's there to hate about groovy? It can be basically java
You perform... Files.createSymbolicLink(Paths.get("foo"), Paths.get("bar")); ...instead of... FileSystem fs = FileSystems.getDefault(); FileSystemProvider fsp = fs.getProvider(); fsp.createSymbolicLink(fs.getPath("foo"), fs.getPath("bar")); ...but the first line is equivalent to: FileSystems.getDefault().getProvider().createSymbolicLink(FileSystems.getDefault().getPath("foo"), FileSystems.getDefault().getPath("bar")); Now imagine your code does not use any custom filesystems and purely the default, say you need to do a bunch of things with files, it can get cumbersome (although technically going the second route would produce faster code since it does not need to get the default filesystem all the time if it is cached).
If all 340GiB is physical and not virtual (such as 256GiB swap files), then said system must be doing something rather important. 
Interesting.... for that though i'd just use print statements to the console window or something. I think going as far as dynamically naming your threads is a little extreme, right? I usually don't even delcare my threads as variables. Usually I just do like : new Thread() { public void run() { } }.start(); I've never really had a situation where I've needed to kill, merge, or pause threads is why I guess.
I almost never code with threads directly and instead use ExecutorService or similar interfaces. In a high availability production system logging and debugging are pretty important when you need to figure out why something went wrong.
The slow version of it.
I am yet to see Gradle beat Ant or Maven without the help of their daemon, which Google advises to allocate between 2 and 5 GB to make it actually perform fast. Also one of the speed improvements on Gradle 3.0 was to rewrite their public API in Java and introduce Kotlin. That says it all.
Probably there is no real reason for this. Just that the early developers of the standard library must have really loved instantiating everything. The only "advantage" that I can see from that, is that you could use the Runtime instance as an object in other places... still it is not a serializable class or something like that, so, I don't know, it's strange.
It's not "the answer" to this question necessarily but Jon Skeet has cited the Runtime class before in answer about singletons: http://stackoverflow.com/a/4448057 So most likely it was done for flexibility reasons since it was likely one of the first classes written into the standard library and the authors didn't know how it would be needed / used.
Whilst I don't really appreciate how condescending you come off, I do appreciate that you brought this up. I've gone through the whole worker process and made sure it works as one would expect. There are still a tonne of optimization to be done, but the performance should be better. The CPU load issue has also been fixed. 
Nothing. It was a stupid decision someone made forever ago. The whole class should be deprecated and its methods moved into `System`.
Seems like neither /u/kodifies nor /u/vkolev read the answer. It lines out why you shouldn't and this is a bad idea.
Hm, might be nice to have a lombok annotation to add getters/setters using Optional for fields which are not Optional. Unless that exists already.
About that latter: https://twitter.com/OmniFaces/status/765565744503525376 :P
Have you created issues with those libraries?
Have you tried using a different JavaEE 7 conform Application Server? We use Wildfly and are mostly satisfied. 
To be honest, its not the app server. If an app server goes and cancels running threads, then its not really compliant with Jee standards. What should happen is on shutdown, any application should be allowed to finish off what its doing, before terminating. This might include finishing off any database transactions, or deregistering themselves from a service repository... graceful shutdown. Rather than just zap it.!
It worked for me. I bounced from Java EE (ATG consulting) to Rails, then got started on Play. Never been happier.
This, why spin up static tomcat instances when you can easily scale independent docker containers. Servlet and EE containers are on the way out in terms of having one server to administer many apps. Smaller containers that can easily be spun up and down with tools like docker are the current way to do things.
Or you could just use a reverse proxy which you can configure the exact same way to secure web applications written in any language using any framework.
The book *[Design Patterns](https://en.wikipedia.org/wiki/Design_Patterns)*, which caused a huge hype at the time, was published the year before Java 1.0. That might have something to do with it...
I think most people just don't know how to diagnose those issues and for the most part don't really understand the shutdown life cycle. For those of you who don't know, you can see which threads are not shutting down but trying to stop the app and then using kill -3 or jstack to take a thread dump. Then just start investigating based on what threads are left alive. 
Just kill the process. Invest time on graceful shutting down is not worth it
&gt; got started on Play What's "Play"?
Spock did this a long time ago?
You got it :)
I think the idea of an application server as a source of virtualization is all but dead...I think the original idea of sharing memory, DB connections and whatever just isn't well suited to the JVM and you are better off running multiple JVMs, containerizing, using OS virtualization, etc. I think serverless is a pretty natural evolution for cloud hosting, but it's not ready to handle all use cases. For us, having hot caches and long running VMs is too important for something like AWS lambda to make sense as it is today. Also, not using hot deploys is not at odds with clean shutdown, but I think the app server lifecycle should just be matched to the application lifecycle...I.e. You don't ever "redeploy" the app in the app server, but instead bring down the whole app server and restart with new code. This is essentially what drop wizard does for me...you "kill" it with SIGINT not SIGQUIT or SIGHUP, shutdown hooks run, my managed objects get shutdown() called on them, and then the JVM exits cleanly. This solves the permgen issue and smoothed over misb having libraries like you're dealing with. You are still free to add clean shutdown logic if needed/wanted but in case there are bugs things get smoothed out operationally.
If you think verbose is hard to maintain, try maintaining a large terse code project instead... You'll long for verbosity.
Damn, you read my mind! I was looking for an updated version of the bookmarks tutorial that used the 1.4 improvements, especially for testing! Thank you, sir.
&gt; Just kill the process. Invest time on graceful shutting down is not worth it I think this is extremely bad advice. Your databases, monitoring, network connections, and other stateful components are going to have you for it.
despite containers, disposable VMs, you still need to shutdown properly. You need to file bugs/pull requests with those libraries.
True. &gt; There is a misconception that creating many small short lived objects causes the JVM to pause for long periods of time, this is now false as well &gt; Current GC algorithms are actually optimized for creating many many small objects that are short lived, that is basically the 99% heuristic for Java objects in every program This is certainly not the case for my prime example of bad Java programming: Minecraft. The game creates thousands of objects per second which get thrown away after each tick. I think if you move around it allocates a whopping 200MB/s only for those objects, which leads to **very** noticeable GC pauses. 
Can you explain to me how immutabiliy prevents object allocation? Learning question. 
Also, this article actually only explains three patterns for thread-safety.
I've never used the Report feature, but at the same time I'm mystified by this policy. Taken to its logical conclusion, /r/java will become the superset of all manner of things that might be of possible interest to Java developers as long as someone upvotes them, rather than a forum specifically for Java topics. Consequently, we get x-posts of articles from /r/programming (e.g. blog posts on Agile programming), articles on Kotlin (which I suspect are all posted and upvoted by a minority of extremely vocal Kotlin advocates) and so on. Why can't the people who want to see these topics subscribe to /r/programming and /r/kotlin as well as /r/java, and then they only see the article once, instead of multiple times across multiple subreddits. Those of us who don't want to see them can then avoid them by not subscribing to those forums. Saying you're relying on the voting system is simply abrogating your responsibility as moderators. As we know the voting system is easily gamed.
Is it possible to get an offline stackoverflow with searching capabilities?
Move to Java 8 and stop caring about perm gen.
But isn't that like saying that you should always close a TCP socket? It's not possible.
Restarting the entire tomcat sounds like overkill. Can't you just redeploy your .ear/.war? Also, hot code swap is a thing (redeploy only changed .class files in your already running deployment). I don't have details, sorry. I've tried out a commercial utility called [JRebel](https://zeroturnaround.com/software/jrebel/), which promises to make hot code swapping (and more?) easy.
I'd like to address the point "Do developers just not care about this anymore?": I can't talk for all developers, but there has been a shift away from designing systems where the components rely on the behaviour of other components (e.g. expecting them to cleanly release resources) and towards designing robustness into components in an error-prone environment. It comes largely from the trend of using commodity hardware and the "cattle, not pets" approach to servers (and services). Given this trend, it gets harder to justify spending effort to ensure a clean shutdown. I think the same forces have pushed us away from shared web containers to the point where servlet containers are often embedded in simple jar files.
[One technique](http://mechanical-sympathy.blogspot.com.au/2012/10/compact-off-heap-structurestuples-in.html) is to allocate a giant direct buffer and then index into it using sun.misc.Unsafe calls.
I've been an ATG consultant for a long time as well, and I've used Play along with ATG on a recent project. Coming from Play 1, we were quite disappointed in Play 2, at times it felt as heavy as our ATG + JBoss combination.
if hot deploys aren't working for you then its maybe time to see about not doing hot deploys if you DO have to support hot deploys then i'd look for other ways to make them happen - like a redundant server
Context, abstraction and modularity, agreed! 
I agree. It's a hassle chasing down how to file bugs for the different packages but it's the best way to approach it providing you can do so without violating any confidentiality agreements you might be working under.
I don't think you can use Minecraft as a reason to change how most Java programmers (who are working on server-side applications) should program. The latency requirements of Minecraft are much different (and stricter) than your average server.
I'm going to be That Guy: screenshots? demo site? EDIT: my bad. The link is to github, but then I dug around github and found a link to the homepage, which has a demo.
&gt; What's there to hate about groovy? It can be basically java It's typically dynamically typed.
Demo: www.mamute.org
The same way it works when your hardware catastrophically fails and all chances to cleanly shut down go out the window.
[I see you're going for the complete stack overflow experience](http://i.imgur.com/KJOIPxl.png)
Once I discovered unit testing and TDD, I stopped needing hot deploy.
This heaviness is one of the reason we wanted to use ATG as an API backend and having a Play-based frontend, with the 2 communicating via REST calls. ATG is a very big framework, which also has a long legacy: so many people coded parts of it that it can feel incoherent at times. Of what you mentioned, my opinion is: * pricing calculator: OK, takes some time to master though * custom catalogs: good * scenario integration: useful only to sell the product to people who will never write a scenario once in their lifetime * versioned repositories: bad (good for trivial demos with 10 products in 2 categories, a major pain with real-life catalogs) * multi-site: bad (over-engineered mess) The thing that sets apart ATG from all of the other frameworks is Nucleus: after 15 years of using it, a Java project without it just feels wrong to me.
I'm saddened that I can only upvote this thread once.
Such an object is not immutable. In your use case that data would be stored somewhere, in a database or ORM store of some kind, and that backing data would change -- not the objects in memory. And if you did need those to change you would just reload the updated data. 
They can exist but in most cases they don't have to matter. Your program won't die from running out of perm gen space. Maybe you'll have an unpleasant GC while you purge the now swollen metaspace. If you're lucky the pages backing the unused classes will get swapped out from disuse, freeing their associated physical memory. Point being, 95% of the time you don't have to stress about it. Yes it's ugly, but not catastrophic.
Don't be pissed, this is how software works. It takes an observant technician to find bugs. It's challenging to diagnose them enough to be specific. It's all part of the process. This is open source.
because its OSS, it is probable that you can run this in a local offline server, using it internally. 
Oh that's going to be fun. Imagine your cost overruns when some poorly written library keeps a thread running, causing your 2 sec AWS Lambda call to turn into a 300 sec call.
It's mostly a toy at the moment.
I fell you on that JS part: I'm currently making an app that stores information about dogs using node JS Express SASS and the MySQL driver. I set them up as dependencies: okay cool, easy peasy, not a lot of work.. But when it comes time for another developer to collaborate, a simple npm install pulls down hundreds of MB's of **other dependancies** and we're like *why?* 
Which Java version did you install? 64bit or 32bit? Most browsers only recognize the 32bit version - so, if you have installed the 64bit version you need to also install the 32bit version. BTW: `javascript:enabled` has nothing to do with Java - only with JavaScript - which are two different languages.
&gt; I doubt that would alleviate personal accountability or responsibility that employment contracts require. Since it depends on a case by case basis, the risk tolerance of the company and the individual as the rationality of the employment contracts (which are usually enforced when your on your way out anyway or doing something egregious), or essentially sharing company IP. All that seems like the rare case.
Http://udemy.com/Java-Tutorial
I'm using this https://play.google.com/store/apps/details?id=com.sololearn.java
Has anybody experiences with this type of error handling (p.39-end)? I'm thinking about using this kind of stuff in day-to-day use but I'd be happy to hear some opinions :) 
I thought books are more effectual for beginner, especially HeadFirst series.
Always fancy me an Abstract Chicago Clam Pizza.
Lol :-D 
If you leak mutable state then you have to assume that other classes will change that state without your knowledge. its not testable. Every class should have one invariant in particular. That it will always be in a valid state from construction to destruction. Your class cant ever make that statement due to the leaked state. Its a bad idea and almost never worth breaking. 
I once wrestled with these kinds of problems and ended up implementing a ServletContextListener to listen for application shutdowns and manually deal with such libraries.
For future, please direct such questions to either /r/learnjava or to /r/javahelp. In general, the most recommended free tutorials are: * **University of Helsinki MOOC** [**Object Oriented Programming with Java**](http://mooc.fi/english.html) - text based with exercises that need be completed and submitted before being able to proceed. (Uses Netbeans as IDE) and * **Java for Complete Beginners** by John Purcell (probably the best and easiest entry into Java) - video based (Uses Eclipse as IDE) - the links below lead to the same course hosted on different servers. I would use the Udemy link because it has an active community where you can ask questions and get answers. * [CaveOfProgramming link](http://courses.caveofprogramming.com/course/java-for-complete-beginners/) - John Purcell's site * [Udemy Link](https://www.udemy.com/java-tutorial) Both are excellent, both are free, try both and decide which you like better as learning style is entirely subjective.
That is not silly. Build scripts are very rarely edited in development, learning Groovy just to better understand the build script is a high cost. Especially, that build scripts contain, mostly, easy and simple operations.
Manure has search capability. There's a Solr indexing feature that works similarly to SO. 
One site that I use for solving some cool fundamental problems is [Codility](https://codility.com/programmers/lessons/). It is marketed as a hiring tool but I just use it for their problems.
I think I have 64bit, but not positive. Here is the quote from the Java website: &gt; **Mac OS X System Requirements for Orcale Java 7 and later versions** * Intel-based Mac running Mac OS X version 10.7.3 and above * Administrator privileges * A 64-bit browser (e.g., Safari, Firefox) * 32-bit browsers do not support Java 7 and later versions on the Mac platform So, based on this, shouldn't Firefox be a 64bit browser? And it sounds like there is no 32bit Java after Java 7.
Don't you mean an AbstractAmericanCitySeafoodPizza?
Well, then you need to check whether your Firefox is 64bit or not. (Should be somewhere in "About" or "Help/About".)
The leftover connections will soon disappear because of timeout
It feels like good advice, but [citation needed]
These tips, don't know. I will say, mindfulness meditation helps me manage distractions, especially those from depressive and anxious rumination. A lot of beginners are slow because of "loser anxiety" (just made that up), i think meditation's a good treatment. I've been listening to Alan Watts talks on Zen and Dao (not data abstraction objects) and it puts me in a good mindset. I'm not talking about using your "full brain" so much as being more attentive to what you're trying to do. 
[removed]
Worth considering [time zone handling ](https://vladmihalcea.com/2014/11/17/a-beginners-guide-to-java-time-zone-handling/) as well 
I would say that's a totally personal choice, so keep in mind that whatever worked for someone else may not work for you. With that said, I'm learning now and I'm finding it best to use many sources at once. I'm doing exercises from one course while reading a book, watching a couple tutorial walk throughs on Udemy and YouTube, and going through online documentation. For me, seeing the same concepts over and over in different contexts has been really helpful! Good luck! 
I second this. By default, the brain only uses something like 10% of its potential
 &gt; Plain text storage of passwords. Damn, yes, thank you! That one slipped completely through because I had covered the topic of password security in an unrelated talk with the trainee. Thank you very much! I will extend the solution with an explanation, but keep the plain text passwords as they are "an additional way in". &gt; IMO, since the range is very limited, you could easily circumvent the creation of String objects (Integer.toString) with a sequence of simple if statements, or even through a small auxiliary method and a loop. It never occurred to me to write such an `if` cascade, very interesting. I will have to try it and then include it. Thank you!
If you use Spring Boot and is a savvy user of the Actuator functionality - then this may be of interest ;)
Umm... Not that I know of. Programming isn't a thing where there is one solution... Usually you end up with n+1 valid solutions, with n = number of devs working on it.
Why! I'm learning java atm as my first language....! This is not the first time I've seen people dislike java, but why??!
Spring Boot is pretty easy to work with and very popular: http://projects.spring.io/spring-boot/
Definitely Spark. 
I'd say Spark. Play is good but it can do so many things and you might use 10% of what it offers and as it offer so much, the documentation need to cover a lot hence it's not very detailed. My biggest thing against Play is that .x upgrades are code breaking and can give you lots of headaches if your application heavily uses one of the feature they changed. I used to work on one pet project using Play that relies a lot on WebSockets in 2.4 or 2.5 they deprecated lots of stuff related to that and made a new way to work. I spent hours trying to migrate my code but the poor documentation didn't help at all and i never managed to make things work. I restarted my application from scratch using Spark because of the flexibility it offers. Spark does one thing and does it well, the documentation is good. Spark would require you more discipline to organize your code as Play has a stricter structure. 
This framework comes with a designer out of the box. CUBA.platform https://www.cuba-platform.com
My point was in the case you want to make your spring app configuration using XML you can't easily define the routes like you could do with other frameworks. 
If you want to teach your students how to get a small application running in Play, here's how: Download [sbt](http://www.scala-sbt.org/download.html) and git, then run: ``` git clone https://github.com/playframework/play-ebean-example.git cd play-ebean-example sbt run ``` Then go to http://localhost:9000 and see the site. That's it. A good place to start is the controller @ https://github.com/playframework/play-ebean-example/blob/master/app/controllers/HomeController.java and the documentation is at https://www.playframework.com/documentation/2.5.x/JavaActions You can see more tutorials at https://www.playframework.com/documentation/2.5.x/Tutorials -- they're all on Github, so you can use git clone to pull them. 
And why is that a desirable thing to do on it's own?
You seem to be quite mistaken about the popularity of node relative to Java. Java absolutely dominates and will for many years. As for what I would have done differently, I'm on mobile and won't go into details, but nothing I would change would have anything to do with what languages are hip at the moment. I would have possibly tried harder to focus on fundamental principles and skills that would improve my ability to develop software conceptually (e.g. more time with functional programming).
Spring is the reason Play or Spark even exist. Lets face it if spring was lightweight, fast at startup, nice small jars to deploy, people wouldn't need to make their own lighterweight frameworks like this. We've just done a major project with spring boot. The next one will be using Ratpack - good riddance spring!
This seems biased at best, unless I am reading it wrong!? A Hibernate advocate asking his Twitter followers for their JPA of choice, then calling it "JPA providers market share in 2016". 
Stuff like this triggers me: "requires unnecessary amounts of inheritance in order to accomplish what should be basic things" Do you mind giving us an example of a "basic" thing, that's soo hard to accomplish in Java, while in C++ it writes itself in a breeze? 
Since Spring is pretty much the defacto standard in de industry might I suggest [Spring Boot](https://spring.io/guides/gs/rest-service/). It's incredibly easy to set up and has the benefit that they can easily use the other spring goodies (like Spring Data JPA) if they want to access a database for example. All the "light weight" frameworks are nice for just the REST part but in almost every application there's also a database, configuration, dependency injection and testing aspect. Spring is incredibly mature in that regard in both tooling and learning material.
Why would you want to use Spring's XML config over annotations when you want to keep things simple?
Well I don't have anything against XML configuration. But anyway, Spark doesn't deal well with annotations either unless you don't want to use lambda but it will go against spark concept so having auto generated swagger yaml/json is going to be a pain. 
Yet, the results are similar to ZeroTurnaround 2014 Survey and 2015 DZone Survey. 
I'm a huge fan of Spring Boot, especially compared to XML-based traditional Spring Apps, but for developers new to Java and the Spring ecosystem it might not be the most productive choice out of the gate.
Please ignore GP. Each language has pros and cons. Java is an established and mature platform that is used by thousands of small to massive enterprises.
I use Spark as the primary servlet in my WAR files that I deploy to Tomcat. It simplifies the setup of routing so inbound calls go to a method connected to a path, so I don't need roll my own dispatcher inside a doGet or doPost method of the servlet. So best of both worlds.
It really depends on the situation, as others have pointed out you generally can't keep away from object creation, but in some cases you might want to limit it. As an anecdote, I had built a 3D model viewer using lwjgl and wanted to display changing debug information on the screen. I have text rendering working fine so I simply added into my rendering loop some lines using a String.format to construct the debug text. It had data like amount of memory, camera world location, camera direction, that type of thing. I noticed when I ran the code my memory usage was racing to max, then GC would kick in, it would drop down then race back up. The higher the FPS the faster memory was used. After some digging I determined that it was because of the debug message being built. Every conversion of a primitive number to a string results in object creations, sometimes multiples if you look at how Java toString works on things like float values. And then all those objects were released to be garbage collected. So instead of using StringBuilder or String.format, I put together a class, CharArray, with a collection of .add() methods that took in all the data types. Under the covers it maintains a single character array that is expanded if needed but never contracts. I use fixed internal buffers (so like StringBuffer it is not thread safe, but that's ok), to convert the primitives to char[] buffers that are then copied into the primary CharArray data buffer. CharArray implements CharSequence so I am able to use it where I was using String data types. End result, memory consumption is now stable, only goes up when I increase the scene data. So there's no blanket yes or no to whether object creation should be avoided, but it is something you want to profile and monitor depending on how your code works.
When talking about "routes" are you referring to web endpoints? Because ... yes, that would not be possible, nor desirable. Use spring-web in that case.
To monitor the connection pool usage pattern, I think it's worth mentioning [FlexyPool](https://github.com/vladmihalcea/flexy-pool).
Sure, the method is inherently biased, but the results would support even my anectodal evidence. Hibernate is the de facto standard on most projects I've been involved with.
Yeah, I'm in the middle of a camel project at work so i got a bit mixed up. 
For Play in Java, you use Play-Authenticate for authentication. There's also a play bootstrap plugin I like for CSS styling.
I doubt the bias affected an order of magnitude. Perhaps some minor percentage... [Here's a comparison on Google Trends](https://www.google.de/trends/explore?date=all&amp;q=hibernate%20jpa,openjpa%20jpa,eclipselink%20jpa,datanucleus%20jpa). I added the JPA keyword to each JPA provider to avoid adding in the tremendous popularity of searches for - Microsoft Windows hibernation - Polar bear hibernation (both of which Hibernate the ORM often likes to take credit for) ;-) (when will those software vendors finally optimise their names for SEO, sheesh)
Thanks for the reply! I definitely don’t have any illusions that Node is more popular than Java. Java has owned a large market share for a while, and will continue to do so. I’m more concerned with what is the best tool for a given application. When you analyze a Big Data project or some app dedicated to scientific computation, Java cruses it. However, for web apps / API design, newer technologies like Node or Go seem to be offering real opportunities. With all things begin equal for web architecture, I think Node presents a stronger business benefits for a major enterprise. You get comparable performance, but JavaScript developers are much cheaper in the long run.
&gt; JavaScript developers are much cheaper in the long run. There's a reason for that, and it's not a good one from the perspective of cost/benefit. Hiring people with no programming ability at all would be even cheaper, but would not be a wise decision. You should hire based on ability to write code, not price tag.
Hi guys. This is a small tool I made to parse natural language dimensions such as "6 hours 20min and 3 seconds" into the equivalent number of seconds. Feel free to comment or ask any question here :)
I know that, and I have implemented that exact code you pasted in my IDE and benchmarked it, compared it to just On.get("/").html("Hello World") and there was no significant difference in performance. Both were exactly 9 seconds at 20000 requests on a 2013 Macbook Air. I have no idea why the maintainer implemented it like that, but I have already suggested he should change it to how it's in the docs to avoid confusion.
Good to hear that you are more in the spring camp :) The biggest scalability limit in thread based Web containers is the one we create ourself. You decide the thread pool size and may likely get it suboptimal. Same applies with downstream services - fx a thread based outbound http client. Or the connection pool settings to dbs etc. See : we tune that stuff ourselves. The promise of non blocking stacks is that the scalability is dominantly limited by the underlying resources. And most importantly the network throughout. At least that as far as I have understood it. I'm like you more in the traditional thread based world. But there is no doubt that I'm going to pay close attention to the non blocking options as well. My personal take is that you can easily stay with the normal thread based frameworks for 97.5% of your applications. After all : even those can be made to scale well. And if you design them for it - then scale horizontally by adding more nodes. One day, however, when you develop a cloud app that needs to hyper scale - then you'll know it's time to take at least some of your application to the non blocking world. Maybe :)
&gt; But this assumes that JavaScript developers automatically have sub-par programming skills compared to Java devs. No, it assumes that the low cost of JS devs in general is due to a lower quality in general. If you only hire the really good JS devs, then they won't be cheaper than Java devs. &gt; If knowledge of Java correlated to a directly to programming ability, I wouldn’t hear my coworkers complaining about some of the sub-par work they inherit from contractors. No one suggested this, which is why I stated that you should hire based on ability and not price tag. &gt; seems to swing heavily in favor of Node In spite of the hype, this is very debatable. &gt; which allows developers to get up and running faster The majority of project cost is in maintenance, not development. Accordingly, starting soundly is much more important than starting quickly, because sound code will be cheaper to maintain in the long run.
Whew, to answer that, someone would have had to built a non-trivial project with both of them, to be truly able to compare. I don't know Spark at all. I think Play is very user-friendly and recommend it to everyone who wants to build a web app. Did you notice btw. that both of them have terrible names for googling? You'll get a lot of Google Play Store or Apache Spark results..
1. Servlet does asynchronous 2. The # threads on OS can handle is often far larger than you think. 
I often just choose Spring as my go-to tool to use. It's popular (easy to get help), well-maintained (bug/security fixes) and performs well for the majority cases like you noted. Why does everybody assume their apps could be big like Google's someday?
Great advice! Thanks for taking to time to write all that out. The “act like a lead” suggestion dovetails into something my mentor recommended. Despite the lack of business interest in a newer technology like Node, he encouraged me to host a lunch and learn to share that knowledge with others.
You are right, thanks for your suggestion!
I always assumed going reactive, especially for something like a personal project, was a premature optimization.
Another option is [Pippo](http://www.pippo.ro). It's similar with Spark but it's modular and comes with builtin support for multiple servlet containers (Undertow, Tomcat, Jetty, TJWS), multiple template engines (Pebble, Trimou, Velocity, Freemarker, Groovy, Jade), multiple content types (json, xml, yaml), metrics, multiple session storages (jdbc, ehcache, hazelcast, infinispan, jedis, jcache, mongodb, memcache), support for DI containers (Spring, Guice, Weld), CSS preprocessors (SASS, LESS), a helper class (PippoTest) to ease unit testing of Pippo applications. I found on reddit an old comment with some characteristics of this micro framework https://www.reddit.com/r/java/comments/3x1wsm/why_are_java_web_apps_so_much_bloated/cy0xlki 
&gt; Is there a use case where Play would be technically a better choice (not based on personal preferences)? Yes: if you want to save money by buying fewer servers and being able to scale linearly with more servers. If you use Play, you'll go from hundreds of requests per second to 10K requests easily, and you can stick them behind a load balancer and be "webscale" without even trying. &gt; I've done real world @playframework + pgsql apps tens of k on a basic quad core w/o any intentional tuning. 100s of k if I tried -- https://twitter.com/kevinbowling1/status/764188720140398592 According to Hootsuite, when they moved to Play: &gt; Cost Savings - the Hootsuite team was able to reduce the number of servers by 80%, resulting in major savings on its AWS bill and lower IT Operations complexity. &gt; More Requests Per Second - Hootsuite load-tested Ow.ly at an order of magnitude more requests per second than the current system. https://www.lightbend.com/resources/case-studies-and-stories/how-hootsuite-modernized-its-url-shortener Some of that is because Play is built on Akka and Netty, which lets you get more out of your existing hardware: Paypal uses 8 VMs for their stack, and they stay responsive even at 90% CPU. http://highscalability.com/blog/2016/8/15/how-paypal-scaled-to-billions-of-transactions-daily-using-ju.html There's lots of other stories out there, but best way to find out how fast Play runs is to download it and do a load test against it. Use [Gatling](http://gatling.io/), make sure you're running the server and the client on different machines, and run it against one of the [maintained examples](https://www.playframework.com/documentation/2.5.x/Tutorials#Play-Maintained-Seeds-and-Example-Templates). For extra fun, run Java Mission Control / Java Flight Recorder against it so you can see where the CPU is going: it comes with JDK 1.8, so typing "jmc" at the console will bring it up.
Also, in the end, each book/web tutorial/... has its flaws. I'm currently learning with two books and a web tutorial, one has amazing exercises, the other has great explanations but lacks examples, the other one has stuff that the other two don't have, etc.
That app is not nearly as efficient as a proper book/web tutorial. This app gives you the feeling of understanding things (questions that are WAY too easy or even slightly off-topic), but as soon as you're sitting on an actual PC and start programming, you feel lost because you lack of practice. Learning programming is not just reading things about it and answer questions (without actually coding), it's learning-by-doing.
We are talking here about the ability to handle the request SLA that you have... On that basis, if there is no cost associated with utilising the resources that you have to a very high potential then go with the technology that lends itself to that. Disclaimer: I work for Lightbend and formally worked at Springsource. I am not trying to diminish Spring MVC in anyway and welcome the fact that Pivotal and now Oracle see our Reactive Manifesto initiative as the future. Spring Reactive and the prospect of Java EE going reactive are great initiatives. The question then is around whether wanting to go reactive today, or sometime in the future. One over-arching note: the industry as a whole needs to care more about what goes on under the hood. Resources such as cpu and memory are finite and need to be respected. I also believe that the JVM needs to recognise this particularly given the movement back to thinking in terms of the OS process as the service boundary of a system.
THIS. My team wasted 6 weeks trying out lots of new fancy frameworks and ended up going back to our 10-year old home grown servlet/JSP/JSTL framework. 5 second builds versus 5 minute builds. 10 seconds on a clean build versus 20 minutes. No thank you!
Jooby http://jooby.org, similar to Spark but bit more considered and powerful. * It is micro server with an extensive module echo-system. * Multi-server supports including Netty, Undertow and Jetty. * Hot reload for development * WebSocket/Server-Sent-Event/HTTPS ready to use (HTTP/2 is coming in next release) * Offers two programming models: 1) script routes like expressjs/sinatra 2) MVC routes like Spring/Jersey It is simple, powerful and easy to use! Give it try!!! 
I'd love if the solution of scalability were choosing the right framework. In my experience the code that is written is the bottleneck in most of the application that I worked with. Not the framework, db, network, number of threads, choice of server or anything else. 
This is perfect! I've been having trouble parsing some recipe steps and this should help convert everything to common units. I'll try it out next week
&gt; Play-Authenticate Okay, I am curious, how trivial is it to implement your own oauth2 provider service vs spring security?
The headline is misleading. If you read the article they are talking about speeding up SE releases to once a year instead of every three years or so. 
Right, cause that’s never hurt them before. I remember it used to be every 3 years, then they switched to 2, then people “aka big enterprise” complained it was too fast so they went back to 3. That being said, once Jigsaw is “out of the way”, and if it works hopefully more regular releases with changes might occur. Altho that may make planning big ticket things like Panama, Valhalla, etc. rather hard. Here’s hoping it all works for the best.
They've had that since Wildfly 9 I think Edit: you had to pass flags to turn it on, looks like it's on by default now
Sounds like the java backend wants to just be an API, be that RESTful or otherwise. Let it, and *only* it talk to the database. The PHP front end should query the DB via that Java server, other you’ll just end up in a mess of Hibernate caching and stale data.
Orrrr you stick with nginx.
A big step forward!
Okay, regardless of whether you use the Java backend as the Source of Truth and pull all your data from it instead of hitting the database directly, you don't *HAVE* to put every column in your hibernate entities, in fact, it's bad practice to pull in anything that you aren't going to use in ANY ORM. If you are using Hibernate caching you can run into some funky issues with coherency between the two applications, but if you aren't using the L2 cache features in hibernate and use JTA or some other method to make sure every request gets a new session/transaction there's no reason they CAN'T share a database.
I wonder if enterprise is the reason Java has fewer features than C#
Generally message queues and consumer/producer systems can achieve the same thing and will be easier to work with in some situations, such as a cluster.
JSR299 defines an new type of event dispatching system. Check it out at http://www.adam-bien.com/roller/abien/entry/java_ee_6_observer_with [ActFramework](https://github.com/actframework/actframework) provides two event dispatching approach: 1. The jQuery style: [the Simple Event Framework](https://github.com/actframework/act-doc/blob/master/en/event.md#simple-event-framework) 2. The classic style: [The Typesafe Event Framework](https://github.com/actframework/act-doc/blob/master/en/event.md#typesafe-event-framework) The Simple Event Framework is simple, lightweight and very expressive to declare event handler but there is no type safe and it uses reflection to call the event listener The Classic approach is typesafe and has slightly better runtime performance but it require you to declare the Event and Event listener which is bit verbose 
The title is misleading. Op tells what tools he prefers which have nothing to do with them being everyone's must have. First example is Notepad++. I would argue that it's the best in its class, especially looking as it availability on other platforms and quality of other advanced editors (Vim, Emacs, Kate, Sublime, Atom, VS Code). The other choices are also low quality. Not everyone use Oracle DB. My personal choice would be pgcli and I would never say that it's others must have. Putty? Never needed. ssh from command line was always enough. Decompiler? Eclipse already can do it. Eclipse? What if you prefer NetBeans or Intellij IDEA?
Thanks for the link. Indeed these are tools which are being used in Corporate Scenario. However if you are a java fanatic, you might have other tools which you prefer using @HOME but not at work.
How on earth can you get in to the NIX box if you are not going to use Putty and other ssh tools? SSH from command line? But that's only applicable if you are using NIX box yourself and nobody uses NIX machine as 'development/user/local machine' as far as I know. I might be wrong though.
I use IntelliJ for "in-project" editing of many source files, be it Java, XML or SQL. I use Notepad++ for loose files. Also, use Keystore Explorer instead of command line keytool, it will make your life much easier.
Too windows-specific set, IMHO. Doubt it is popular OS among java developers. Many such guys here, BTW? Even originally windows guys in our project moved to linux after some time.
What is 'developement/user/local machine'? Update: I think I've finally understood you. You presupposed that if people use a PC then they use Windows (are you a gem dev? :P ). Which is not true…
[removed]
We have this set up at work and it's a huge help. We're currently working on getting the Rabbit cluster up to broadcast those changes automatically over the service bus too :) The only issue is some internal people are giving lots of resistance...
That, and the fact that Java has historically relied more on library features as opposed to language feature. One example is the improvements wrt to locking in the library vs the synchronized keyword. At the time there was a discussion whether the synchronized keyword should be improved or maybe get some companion keywords, or that everything should go into the (SE) library instead.
Can't invoke private methods or access private fields. Fastest api is slightly more awkward to use. Doesn't work on Android. Doesn't work on any jvm that doesn't use bytecode. 
Not slightly slower, they literally become a static function call 
Depends on the type of method handle being used (there are multiple kinds of them) and the way it is invoked (`invoke`, `invokeExact`, etc.).
Would [this](https://github.com/iluwatar/java-design-patterns/tree/master/event-driven-architecture) be of any use?
My list would be slightly more generic, and look something like: * JDK - I have several versions installed for different projects. * IDE (e.g. Intellij IDEA, Eclipse, Netbeans) I use Intellij IDEA. Used to use Eclipse. * Web browser (e.g. Chrome, Firefox, IE/Edge) I mostly use Firefox, but I'm a web developer too so I have various versions of all of them installed. * Editor that handles large files well (e.g. vim, emacs, Sublime) I use emacs. * SSH client (e.g. command line, Putty) I use command line. * SCP client (e.g. command line, Putty) I use command line. * Version control client (e.g. git, Subversion) I use git. * SQL client (e.g. Squirrel, navicat, MySQL workbench, SQL Developer) I use a combination of these depending on the db I'm connecting to and what I'm trying to do. * keytool * openssh * JVisualVM * Large whiteboard, markers, and eraser I would add a good set of headphones and music, but that might just be my preference. Some people might need an FTP client (e.g. FileZilla).
I wired up a FileWatcher with a ResourceBundle in less than 50 lines and zero dependencies. It isn't hard. 
I use none of these tools for Java development. However I do use PuTTY, but only when I need to access serial devices or play NAO (since it works better than my own terminal). &gt; Jad `javap -verbose -p Foo.class` and read the byte code. 
Good for you, and I bet your car has nice custom wheels as well ;) To be serious, How do you change your beans on the fly? 
1. Java for Dummies (Thinking in Java is better choice) 2. Data Structures and Algorithms 3. Code Complete/Clean Code/Pragmatic Programmer 4. Refactoring I haven't read Object thinking.
Or Apache.
That's actually remarkably similar to the second example I created in my Dispatcher. The only key difference between the two systems is that mine can register multiple listeners to a single event, whereas the one you linked only allows one handler per event. Still very useful though, thanks!
That should bee a good start. Thanks you so much @fsherstobitov Do you know then, some nice video lectures also? 
I usually use some kind of tailer for big log files (LogExpert on Windows), Notepad++ does have the tail option, but it doesn't work very well.
Jad is the most garbage decompiler there is, and almost always fails to produce anything other than junk if you were to decompile Java 8 code. Use Fernflower or Procyon instead. Also, I don't recommend anyone to use Eclipse if they don't have to. Try IntelliJ IDEA.
Just look at his post history... its a spammer with no shame.
Best Java Tutorial site 
In curious now too
The head first series are great for beginners. I can recommend the Head First Java book. It's not on your kid but is still great. 
A lot of stability work for EAP 7 is now available in Wildfly. Thanks Red Hat!
Yeah so I didn't know what you required specifically but the purpose of EDA I've read so far is to decouple events and event handlers on order to scale up and out without worrying to much about the underlying relationships. So if you needed a new event handler for something it's easy to change it out for something better. This is achieved by the use of dependancy injection by the looks of it.
Have you been living under a rock? Let's Encrypt isn't out to make money. They are trying to make the web 100% SSL / TLS accessible for privacy reasons.
General to Specific: ------------General + Theoretical----------------------------------- Head First Design patterns CodeComplete Pragmatic Programmer ------------Specific + Practical------------------------------------- Java for Dummies Object thinking ----Advanced Concepts------------------------------------- Data Structures Clean Code Refactoring
OK cool thanks for the info
Effective studying: 1. Create a simple project. You'll be suck at it, refer to stackoverflow when you get stuck. On the way you'll learn about gradle / maven, basic OOP, basic design pattern, testing, and maybe some concurrency. 2. Once you've completed your first program. Read Effective Java. 3. Apply the recipes in effective java to fix your program. 4. Focus more on advance book / topics like concurrency in practice, enterprise integration pattern, etc. You can also goes deep into framework such as Hadoop/ Spring boot / Lucene whichever interest you. Normally book is not needed to study framework. 
java5e has posted a sample project writting in SpringBoot: https://github.com/javaeeeee/SpringBootBookmarks I have rewrite it using [ActFramework](https://github.com/actframework/actframework) at: https://github.com/greenlaw110/ActBookmarks Take a look and have some fun :-)
I don't believe you need formal training to learn a language, it's more the abstract stuff like algorithms, design patterns, object oriented design/architecture that having someone else guide you really helps. Java itself you can pick up by yourself relatively easily with a good book containing exercises.
[removed]
[removed]
May I just say this is an old problem, that was solved decades ago.... JavaEE / tomcat always had per-server configuration put into context.xml or web.xml. Database settings were never deployed with the application. The same war could be used in test, as was used in live... Even before JavaEE, when I worked on mainframes decades ago, we used a separate configuration from our deployable artifacts so we didn't have to redeploy live and test versions of our same app. Its only since the arrival of Spring based applications, were it seemed like a great idea to bundle all the config into property files that were deployed with the App. Douglas Adams one said: “The idea that Bill Gates has appeared like a knight in shining armor to lead all customers out of a mire of technological chaos neatly ignores the fact that it was he who, by peddling second-rate technology, led them into it in the first place.”.... I have the same sentiments towards Spring.
The article reads like it is from 2005: "Who doesn’t love eclipse? Well some hardcore developer might answer “I don’t use that, notepad is the best”.
I'm confused on what the problem you're trying to solve is. Calculate JSON data automatically? Perform calculations on specific json data keys? Is this a program that, given JSON data, tells you what the sum of various values is? The description of the purpose of the tool isn't clear. Can you give us a specific example?
This is again a new direction for Red Hat. During the previous cycle there were no more WildFly builds (called AS then, but same thing) after EAP 6 were released. This time there are, at least for now. We'll have to see if the stability fixes done for EAP are kept being back ported to the WildFly branch, or that like with EAP 6 soon the WildFly branch will stop and not be re-opened untl the work for EAP 8 starts (which could be years from now assuming that EAP 8 will target Java EE 8 as it has historically done, but about which Mark Little once said it does not have to be like that).
If you are talking about template engine, Act support the following three products: * [Rythm](http://rythmengine.org) - Native and best supported because I am the author of Rythm * [Freemarker](http://freemarker.org) - need to import the [act-freemarker](https://github.com/actframework/act-freemarker) module * [Velocity](http://velocity.apache.org/) - need to import the [act-velocity](https://github.com/actframework/act-velocity) module You can find a lot of demo apps in https://github.com/actframework/act-demo-apps/tree/master/fullstack-app, and there are examples on how to use template to return response. You can also checkout the document about templating in Act: https://github.com/actframework/act-doc/blob/master/en/templating.md Groovy template is not supported at the moment
Nice! Starred it on GitHub. :)
You want to recheck your tutorial: public class HelloWorld { public static void mail (String[] args) { System.out.println("Hello World! w3clan.com is cool"); } } Do you see what is wrong in the **very first** program? Such errors (I know that it's just a typo) **must not** happen in a quality tutorial. Also, your formatting is off - the code and curly braces are not aligned.
Josh Long is an awesome speaker, his introduction is always funny. "Is someone on Twitter... T-W-I-T-T-E-R". Loved his talk about Spring boot/Spring cloud last year on Devoxx.
It's JLo! Always enjoy his talks. Dude is pretty fun to hand out with as well.
Ubuntu 16.04 also comes with OpenJFX packages, not sure about older version *buntus though.
You could try using regex http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags 
really? one of the first courses i took.
So they re-invented proguard? 
Everything he says. Say what you will, corporate loves Microsoft. Not every one works in start ups/Facebook. Your accountants/receptionist are what Corp IT serves and Windows is what THEY are comfortable with, so odds are you're sitting at a Windows box, with that comes word, etc. I'll add: If your box is win 10, try the anniversary update and WSL, I start using it for grep and tail -f on Windows etc it's like best of both worlds. I'd use Tera term for the macro function. Not sure if putty has it too so correct me if I'm wrong. As for notepad ++. VS code is definitely catching up. So give it a try.
Unfortunately under GPL license :(
I think the problem you're trying to solve is rather trivial for a programmer, so your audience is not programmers. And the tool required to solve the problem for non-programmers would be quite non-trivial (think like Excel... but for JSON), so you'd need many man-years to arrive at a MVP. Still you say you've identified some problem. Maybe your description of it is inaccurate, I don't know.
I would give vert.x a shout. Play is a big, opinionated framework, works alot by convention and is quite powerful. So its probably overkill, convention hides things / is magic and its scala, which is something you shouldnt throw at people to learn if they are also trying to learn to write a webapp as well. Spark I've never actually used, strikes me as a very small / simple web framework to handle requests. Good for a little microservice API type thing you'd want your web app to run off. And can easily use java, so seems a good fit. Because there's little magic/convention, you see your routes and handlers, which I think is good for beginning with as you see all the dots being connected / gain understanding. The other one I would give a shout out for is vert.x. Vert.x isnt an application framework like play, its more of a toolkit to develop apps, and in particular you can develop web apps. Its great because it has a load of little modules to help with authentication, messaging, DB access etc. Toolkit not framework because you have all these tools / modules you stitch together any way you want rather than play, where a set of tools are provided to you in a certain way. So yeah, simple stuff then spark seems a good fit, bit more complex then I would give vert.x a look. Their blog has a bunch of basic tutorials and a git repo of examples of simple web apps. CRUD interfaces etc.
I've using Firebird since the beginning, no complains, never had a problem with it, it needs almost zero maintainance, now using it with Jaybird, awesome.
Usually done on the front end, hard to tell what problem you have identified, though. If you're simply mapping data from an API, a map/reduce function on the front end would suffice. Or, for normalization, normalizr would work.
If you need to install it as a windows service, be aware of this one : https://issues.jboss.org/browse/WFCORE-1719 It is still not fixed in 10.1.0.Final.
Would that be for games that require JBoss?
That would be when you want WildFly to start at boot on windows... whatever application you have deployed on it...
right, but still, i don't think it belongs in "advanced" topics. once you know what the basics are, hello world, you're going to want to know what to do with that. that's data structures and algorithms. from simple objects or primitives to more complex structures that are made from them. i believe my courses had that along side intro to programming (like as in 101 and 102). i'm sure there are a million ways to do it, but i think you'd want to be a "programmer" not just a "java programmer" (not everyone does, i understand). cheers!
You might also find real user reviews for Oracle SQL Developer on IT Central Station to be helpful: https://www.itcentralstation.com/products/oracle-sql-developer. As an example, this Software Architect writes that one of his favorite features is the, "Oracle SQL Developer Data Modeler. No PL/SQL IDE has such modelling capabilities, as far as I know. This is a killer feature for me." You can read the rest of his reveiw here: https://www.itcentralstation.com/product_reviews/oracle-sql-developer-review-38481-by-stefan-oravec.
You might find real user reviews for Oracle SQL Developer on IT Central Station to be helpful. As an example, this DBA writes, "The speed with which you can build SQL statements and PL/SQL code has been very valuable. In addition, it simplifies how we manage database objects and connections to different data sources." You can read the rest of his review here: https://www.itcentralstation.com/product_reviews/oracle-sql-developer-review-38713-by-dba966. Good luck with your search.
Check this answer in this other thread : https://www.reddit.com/r/java/comments/3o2dwi/so_rjava_what_have_i_missed_in_err_15_years/cvtki2h Even if Java 8 has less bullet points that 7, I would highly suggest you to check books like "Java 8 in action" to grap the idea behind streams, optional, default methods, ...
You could take a look at http://netty.io. Quite nice API and loads of examples to get you started. 
Sorry for that. I'm looking for an HTTP server. Thanks.
I only got something like that when the executables get corrupted during downloads.
I'd use Akka HTTP with Akka Streams if possible. You get automatic thread management and backpressure for free. Here's where to start: http://doc.akka.io/docs/akka/2.4/java/http/routing-dsl/index.html Here's an example of Akka running on Android (in Scala, the Java API is almost exactly the same): https://github.com/danosipov/actor_downloader 
Then why not just embed something like Undertow or Jetty? Undertow is lightweight and very easy to embed. 
SQL Developer *sucks so much*. Do yourself a favor and buy intellij, if just for the incredibly cool integrated SQL tools, which are order of magnitudes better.
So, this questions also interests me. First, I googled around and found some pretty useful advice [here.](https://www.reddit.com/r/opensource/comments/4yubd1/good_open_source_projects_for_a_newbie_to/) But, the issue I had with up-for-grabs.net is that it didn't include filters for Java. The issue with openhatch.org is that the most recent Java post was from 9 months ago. But, after looking at openhatch.org, it gave me a few ideas that I might be able to use with Github's search. With Github's advanced search, you can add filters, which help match projects you might be interested in. Just playing around with it, I decided I wanted: * Projects created after Jan 1, 2014 (Modern-ish projects) * Java as the primary language * Less than 50 stars (Something not so popular, they probably have enough contributors?) * State:open * Label:bug (I want to fix bugs) * NOT android (Unwanted results included android, so I excluded it from the search) My end search query was: `created:&gt;2014-01-01 language:Java stars:"&lt; 50" state:open comments:&gt;1 label:bug NOT android` But, with all that said. I think the first things you should think about are: * Determine what you would like to spend your time working on. Do you like Game development? E.g. Then maybe contribute to a game library/framework. * Do you have any libraries/frameworks you're currently working with that have bugs, documentation errors, etc? If so, then you can also start there. For fun, [this](http://programmers.stackexchange.com/questions/294/how-can-i-find-a-good-open-source-project-to-join) was a good read about some things to expect when starting open source development.
I got back into Java a couple years ago after a number of years away and was able to catch up in a couple days by reading Java 8 for the Really Impatient. It is a short book that will cover most of the stuff you are missing. https://www.amazon.com/Java-SE8-Really-Impatient-Course/dp/0321927761 Then, you should consider familiarizing yourself, at least briefly, with the most popular libraries and frameworks used in industry: **Spring Framework (Specifically Spring Boot)** http://projects.spring.io/spring-boot/#quick-start Use https://start.spring.io/ to create a starter project with a maven build **Maven (Automating Builds)** https://maven.apache.org/ **JUnit / Mockito** https://github.com/junit-team/junit4/wiki/Getting-started **Others worth checking out** - Google Guava - Apache Commons - Lombok **Learn one of the two popular IDEs** - Intellij IDEA (has free community edition) - Eclipse Then get a job and get to work ;)
Do you believe Java 9's HTTP/2 client API, or whatever it is, will be a suitable replacement for this or do they have different functionalities?
Do you like Ruby as well as Java? Come and join us in JRuby (#jruby on free node, or https://gitter.im/jruby/jruby). We're very friendly and can help you get started.
&gt; created:&gt;2014-01-01 language:Java stars:"&lt; 50" state:open comments:&gt;1 label:bug NOT android [Click here to execute a similar query on Github](https://github.com/search?utf8=%E2%9C%93&amp;q=NOT+android+NOT+deprecated+created%3A%3E2014-01-01+language%3AJava+stars%3A%3E50+language%3AJava&amp;type=Repositories&amp;ref=advsearch&amp;l=Java&amp;l=Java)
Reading other parts of the log, this _surial_ person seems like an angry person in a land of idiots. Either this person has been like this for a long time or it was the free tech support. Also the IRC log server's site is _very_ flaky, half the time I get bad gateways or 404s. 
Netty is not a http client, it is a framework for developing network applications 
Brilliant! Just what I was looking for!
It's very long video for such simple task. And BTW, Do you really using photo of yorself as desctop wallpaper?)
Ah I see, so Netty will still be relevant with the introduction of Java 9. Thanks for the clarification.
The javabot logs are flaky?
Never heard of it. I'll take a look at it. Thanks!
I'll forward to the maintainer - I haven't seen that behavior. The bot's logs have been pretty stable for me.
Build scripts should be declarative, not imperative. Hopefully people will still use the rich plugin ecosystem instead of reinventing the wheel.
In order of awesome: - IntelliJ Community Edition - Eclipse - NetBeans
I know nothing about Visual Studio, but the gold standard for Java IDEs is this one, which has a free version. https://www.jetbrains.com/idea/
Ok good 
@Caesicius At this moment, you should be focused on fighting with language itself, not the tooling. Pick one from that list. Every of them is easy to learn and will let you focus on language and programming itself. Maybe later you will want to be `vim` hacker or not. :)
&gt; Less than 50 stars (Something not so popular, they probably have enough contributors?) I maintain a project that has hundreds of stars and many contributors... but they're all drive-by contributors--people who submitted a PR rather than an issue. I'd search by highest stars and look for projects that have mostly one person doing all the work and is nice in issues/PRs. That way your contributions are valued highly by the community being that it's a popular project. edit: also look in commit history and see if that lone contributor is basically doing bare minimum effort to keep the project alive.
No way you should bounce that much. If an employer sees you have 7 different jobs in 7 years then it will be a red flag for them. They might think you'll do the same thing to them so why even hire you.
Or you could, um, use the MDC http://logback.qos.ch/manual/mdc.html
Yeah, but XML is a horribly bloated language for that.
Good point! I should probably have mentioned that it should be disabled by default in production. But it should be easy to enable at runtime (by authorised personel; operations, cross functional developers) - even in production. It is it's most powerful strength: to increase the information level when you need it. ( the traditional way of increasing the log level for the entire application - or even application server - is not optimal: you are simply flooded with information from too many irrelevant threads)
I don't know a single Java dev who went from a proper IDE to VIM. 
Wow this site looks terrible on mobile. White text with drop shadows on white background are you serious?
I know nothing about such standard and I'm doing Java staff for years. 1. There is NetBeans which is developed mostly by Oracle which are Java owners at the moment. 2. There is Eclipse which is in some rankings the most popular. 3. There is IDEA which just have many satisfied users. From what I know, none of them is considered a standard. Then, from my experience, most job offers demanded familiarity of Eclipse (and only Eclipse), so if I really have to choose one, it wouldn't be IDEA.
Your client is doing something screwy. Chrome/WebKit is showing a black background after a short delay.
Programming is more about algorithms than languages. Pick the data structures and algorithms.
The maven schema is bloated and terrible, but there's nothing wrong with XML itself. There is work to make it less verbose, in particular for declaring dependencies using attributes, but don't expect it before maven 4.
Yes. It will be easier to take the specific language class afterwards.
Some to look into: * Mojarra * PrimeFaces * OmniFaces * TomEE * OpenJPA
I agree fully. I like this methodology for enabling logs for a single request. 
Ah, okay. I saw it - reported it to the author.
Try OpendayLight! 
You are 2 months late with this.
I'm the author of this book. If you have any question about this book, I'll be glad to answer them.
Are you using Windows? In that case consider downloading: http://developers.redhat.com/products/openjdk/overview/
It might depend on location. Very few of my friends use eclipse.
I tried not fallback to personal expierence. I was thinking about rankings like here https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/ . And as we can see I've made a fail assumption that Eclipse is the most popular for which I apologize. Probably I was thinking about previous years reports.
I have a difficult time trusting anything that Oracle says will be open source. 
[removed]
[removed]
I just use IDEA in VIM mode.
Also in desktop. Without enabling scripts it is unreadable, so it is not worth my time. 
Poked at this a bit, and you can get similar functionality by using SLF4J markers and filters: https://gist.github.com/wsargent/36e6c3a56b6aedc8db77687ee5ab8c69 You do have to specify your code with the marker explicitly though: if (logger.isTraceEnabled(marker)) { logger.trace(marker, "this only shows up if trace level OR marker") } Which is inconvenient -- on the other hand, far more flexible than MDC. Also, check out https://github.com/godaddy/godaddy-logger and https://github.com/logstash/logstash-logback-encoder -- both great projects doing stuff with logging.
Ahh, okay that makes sense. I could also see this being used for large-scale backend applications the same way some people use MessagePack (http://msgpack.org/index.html). For example, in distributed, message-oriented architectures its not unheard of to use something like MessagePack internally but JSON/XML when dealing with anything externally. 
And?
Just that the issue on YouTrack went from Submitted to In-Progress state.
I am building a new java web app, i use Jersey and embedded tomcat, so i am not using any big frameworks, and i don't intend to. Can you suggest any approaches to the Database code? here i am thinking of performance, code re usability and maintainability through design patterns and features like generics and annotations. I was think about making my own annotations for the business objects and generate stored procedures based on that, but i haven't solved calling the stored procedures in a generic manner, i would have to specifically implement CRUD for all of the entities. E.g. in C# you can do a abstract/generic repository pattern, i know that is with the EF, but still :) Thanks !
Both subjects go hand in hand, so the answer is... yes. I can't begin to tell you about the number of interviews I've had with people who can't tell me the difference between a map and a list, and the performance benefits over using one vs the other. You can't "learn algorithms" any more than you can learn "science". But, you can learn common solutions to common problems. And, the most common problem you're going to run into is, "how do I access and process all of this data that I care about?"
I accept your apologies.
Right, but the whole point is that requires preconfigured servers. The point of this is your container doesn't matter. The properties are pulled purely on a single environment variable, which is container agnostic. This is extremely helpful in the devops space since you gain build once deploy anywhere.
Ah so like Play! then. Backwards compatibility isn't a thing. Good thing the Play! app I developed was a simple one page web app that just verified a certificate. But as soon as I tried to upgrade I found out I had to re-write the routes and every single async return. Fuck that. Spring Boot might be enterprisey, not as fast, *GASP* synchronous, and a bit bloated. But because of their enterprise mentality, they care about backwards compatibility and documentation. Also, they'll have a way of doing what ever you need to do, even if it's sometimes complex. I really learned to actually watch frameworks for a while before trying them out. 
Compared to lightweight alternatives like YAML (https://github.com/takari/polyglot-maven/blob/master/polyglot-yaml/src/test/resources/compact-example.yaml) or Atom (https://github.com/takari/polyglot-maven/blob/master/polyglot-atom/src/test/resources/org/sonatype/maven/polyglot/atom/parsing/example_pom.atom), the equivalent XML syntax is horribly bloated. Not in terms of features, mind you. Just sheer amount of character noise that XML adds is staggering. And the craziest thing is. Maven does not even use any of the features of the XML besides the syntactic bloat. In fact - trying to enhance your Pom file with extra information like adding namespaces attributes will run the risk of breaking Maven. There is a time and place for XML, but no - build files (declarative or otherwise) does not count as an effective use of XML in my book. 
Are pigs flying?
There isn't one Oracle. Don't forget, a lot of former Sun people are still there
JSF cares a lot about backwards compatibility as well. That's why it remains a very popular choice among enterprises, including green field projects.
Thanks! I love these cheat sheets.
[removed]
Farewell dear Applets. You served us well. We won't miss you though.
Sorry, but could you reword that as I'm having trouble following what you were trying to say.
I've missed the cohesivness of Applet programming. The mess that is modern web development, HTML, JavaScript, CSS, JS framework du jour, etc. is just that, a mess. It keeps a lot of people employed though, trying to make something useful out of the heap.
We actually use Dropwizard, for nearly 4 years now. It's basically what Spring Boot copied, piece by piece. http://dropwizard.io/ Dropwizard is my goto tool for any Java microservice. Solid as a rock, battle tested in production. Every time we update to a new version it is mostly painless. It is just a collection of best of breed Java libs: Jersey, Jetty, Hibernate Validators, Logback, etc.
HPJP is the book title 
You should use ORM for read-write OLTP use cases, and you should avoid it for OLAP and analytics 
Allelujah Brothers and Sisters! The Lord has spoken: "It is comming". And thus shall it come to be!
**Defaulted to one day.** I will be messaging you on [**2016-08-27 20:23:20 UTC**](http://www.wolframalpha.com/input/?i=2016-08-27 20:23:20 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/4z2woa/jvm_debugger_memory_view_for_intellij_idea/d6xzal2) [**1 OTHERS CLICKED THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/4z2woa/jvm_debugger_memory_view_for_intellij_idea/d6xzal2]%0A%0ARemindMe! ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d6xzbdv) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Thank you.
You should probably bring the other guy into the discussion. You both need t agree on the design, and you each need to make sure you aren't accidentally sabotaging each other. We've heard what you require and how that will change the front end, but what does he require from the backend?
Starting my first Java dev job next Thursday, this'll sure come in handy 😀
My understanding is its essentially just another browser that runs an applet. But I'm sure its more complicated than that
libGDX is awesome if you want cross-platform (code once, deploy "everywhere") but it does introduces some annoyances because of that, like you configure the aspect ratio and things like that.. It shouldn't make you afraid of it tho, if I had more time I would definetelly spend some learning libGDX :) Edit: Also, how much of java do you know? I would suggest reading head first java and head first design patterns if you're in doubt about books, anyways, good luck and dont give up!!
For graphics, LWJGL corresponds very well to the underlying OpenGL, letting you look at a wider range of materials if finding stuff written specifically for LWJGL is hard.
This is the first time I've heard of this project. It looks pretty awesome. The [code on github](https://github.com/ObjectLayout/ObjectLayout) says last commit is Sep 30, 2015. Anyone know the status of the project?
ThinMatrix has a video game making series with in depth explanations of VBOs VAOs shaders etc. He is a youtuber. 
Emm just use Scala + Scala.js for everything. Works fine.
I'm not a big fan of SBT but the rest of the Scala ecosystem is awesome enough that it's still my language of choice.
It is also mine. Scala is great. But SBT is crap.
True - didn't know about javalibs :) Though the focus of javalibs is to browse existing java libraries, while of UpdateImpact - to provide searchable dependency trees, for easily resolving dependency conflicts.
They mentioned wanting to put it in Java 10, do they have a JEP?
I'm definitely far from an expert on Java but I do consider my self a fast learner generally speaking. I feel I know more than enough to get my started with Java on it's own to get me started to say the least and have a lot of potential so long as I keep trying. libGDX seems really nice though. :) I actually downloaded 2 books already on it which I'll be reading through tomorrow most likely to see if it makes more sense. I can post links if you're interested. Thank you for your input.
J2ME is probably less Java then Android. J2ME had no Java features post Java 1.3 when Android came out. 
Basically it's like downloading and opening *.exe file but cross-platform and more secure. Java Web Start displays annoying security messages which makes it IMHO almost as useless as applets ;)
Richard would be impressed, looks like they use tabs instead of spaces as well.
If you are delivering JavaFX apps as a JNLP package (a web start app), then this will help with the fuss.. http://docs.oracle.com/javafx/2/deployment/packaging.htm
[removed]
Just an FYI: [Up-For-Grabs does have a filter for Java](http://up-for-grabs.net/#/tags/java) There's not many (14), so it's not part of the Popular Tags that are shown on the front page, but within the search bar above those.
Yeah, avro, protocol buffers and so forth are all great... but they require you to specify the structure ahead of time. The purpose of this scheme is to separate payload from structure automatically without knowing the structure ahead of time.
Alternatively/in addition, couldn't arrays of final classes optimize like this?
All corporate Java dev I've done over the past six years has been on Windows.
Then ... don't read it and use a plugin like m2e? I don't get it. Why is maven/xml so hard when we have IDEs?
I always felt [Arquillian](http://arquillian.org/) did a pretty good job in that area.
How to explain your problem? Best possible and easy way in English?
consider 1 , 96, 101, etc are bus routes and the associated values in each route is its stop, i want to hardcode these values in java. I tried jagged array but it didnot work out.
 Map&lt;Integer,List&lt;Integer&gt;&gt; But also this is one for /r/javahelp, and you should give them more information (e.g. instead of "did not work" post the code you have and why it didn't work).
Since this is help with **Java programming** it should go in **/r/javahelp** as is indicated in so many places here on the subreddit. Also, you need to explain your problem way better and more elaborate if you expect us to help. Please, before posting in /r/javahelp, read the [**Posting Guidelines**](https://redd.it/48eykt) there. 
I'd argue that generating an application from a database is a suboptimal idea in the first place. 
Thank you! This is the best advice. Spring Boot works very well with few code and configuration.
But... but Netbeans has more Facebook likes and Twitter followers !
http://plantuml.com/sequence.html
Also consider use of gradle+asciidoc+plantuml bundle.
Brian has made comments in several presentations that we shouldn't even expect value types in Java 10. Or at any rate, not in the language. Much like invokeDynamic, the project Valhalla features may first release in the JVM, then later in Java.
If by any chance you still are enrolled for some IT classes/workshops, I think Visual Paradigm offers older version free for students. Not sure about the exact requirements though. 
I've used [Astah community](http://astah.net/editions/community), which has been fine. I'm not really sure how it compares to others, but it's free.
It seems similar to PlantUML
I've not used it, but I think NetBeans has some UML tooling. 
https://www.softwareideas.net/ Commercial software, but pretty low cost. 
Dia works pretty well.
Don't make a web application if you don't actually need to. Use static pages instead, if that is feasible.
That was a long winded way of saying that that the functional interfaces that streams rely on don't allow checked exceptions.
[During the infamous Oracle vs Google trial:](http://arstechnica.com/tech-policy/2016/05/suns-jonathan-schwartz-at-trial-java-was-free-android-had-no-licensing-problem/) &gt; Was the Java language, created by Sun Microsystems in the 1990s, "free and open to use," Google lawyer Robert Van Nest asked? &gt; &gt; "Absolutely, yes," Schwartz [former Sun CEO] said. "Since its inception. Long before I arrived at Sun." 
I'm not sure what this Facebook / Twitter statistics really says. I mean, consider, for instance: - [JetBrains the company](https://twitter.com/Jetbrains): 43k follower - [IntelliJ the product](https://twitter.com/intellijidea): 40k followers - [phpstorm the product](https://twitter.com/phpstorm): 25k followers Let's assume there are no duplicate followers, add it up and see how that compares to Netbeans. And those aren't all the JetBrains accounts, yet. ... And that students bit... Even if that was changed in a survey, it would certainly not change any order of magnitude. Just correct the every day statistical error of around 3-5%. Anytime any conference speaker asks their audience about the IDEs they're using, the result is pretty much the same as the ZT survey. Sorry, Geertjan :)
I think the majority of programmers read, and probably everyone on Reddit. So... all of them?
Check out spring and hibernate. The big points of spring are AoP and IoC. Hibernate is an ORM framework that uses annotations, xml, or a combination of both to map objects to database tables. The people I work with use eclipse and Spring tool suite as their IDEs but they're wanting us to move to intellij. Hope this helps
Makes sense, thank you! :)
&gt;m2e solves like 1% of all the problems that come with XML. Concrete example?
This is a good project for you to make into a class that can provide this functionality from input into the class, rather than a single program that takes input from the user. It is also simple enough to write some unit tests for so you can get some experience there as well.
Forgets the **-server** flag. 
Having quite a few years of highly productive, commercial experience using the Grails Framework in production I decided to try something new (for the sake of learning) so this year for a personal (and now public) project I went with the Play Framework 2.5.x. https://gitpitch.com https://github.com/gitpitch/gitpitch Overall I found the transition from Grails to Play very straight forward as the basic conventions are not that different. I've been using the Java (not Scala) APIs with Play where I had been working in Groovy with Grails. Perhaps unlike most Play Framework applications my own app was heavily IO bound. So this required wrapping my head around how best to handle long lived async operations, something Play actually handles nicely, but it does not seem to be it's core use case. This article in the Play doc was particular relevant albeit somewhat hidden under a Configuration chapter when in fact it has ramifications key to app architecture: https://www.playframework.com/documentation/2.5.x/ThreadPools Finally, standing up a Play Framework app behind an Nginx web server with appropriate SSL certs etc was straightforward, essentially per the doc. Just remember that if you are using the Play WSClient in this kind of deployment you will also need to register/configure your SSL key store in your Play application.conf. As I was developing a brand new application when adopting Play I did not have to deal with or address any Play release version migration issues. Compilation could be faster but auto-reload in dev mode works well which helps. Overall I found the framework allowed me to be productive quickly, and deploy in production without undue complications. My single biggest recommendation, if you use the Play Java APIs I'd strongly recommend getting comfortable with Java 8 CompletableFuture async programming model before diving deeply into all things Play. 
absolute no, swt has no advantage of speed now, because computers are fast nowsday
&gt; Hi everyone, I am looking for plugins to generate Sequence Diagrams from Java code. I have seen tools that generate class diagrams from Java code and these already tend to just create an unreadable mess no one wants to deal with. A sequence diagram sounds to me like something that's borderline impossible to get 'right'. In my opinion sequence diagrams are a great tool for a dev to work out complex sequences before implementing them. Not something you 'generate' after the fact. So I seriously doubt you'll find something like this. If you do let us know though; I am curious how such a tool would perform. 
&gt; In reality someone ends up with a huge mess of code 20 years old and no idea what it is doing. I have seen methods of 3K lines or taking 60 parameters (yes 6 followed by 0). I understand that that's what you want but I seriously doubt a tool would be able to make something sensible out of that. Code like that isn't often a nice tree structure. Instead it often approaches a completely connected graph :) So I'd be pretty amazed if such a tool would exist!
Mainly looking for something like this: https://bitbucket.org/doklovic_atlassian/atlassian-docco/wiki/Home Which is inspired by https://jashkenas.github.io/docco/
[removed]
Thanks for info, I never heard about them let me check these. EDIT : I checked but aren't these servers ? I am looking for a lightweight RAD framework that supports REST and easy to get started with.
What?
Yes please!
Hey! 
I, for one, love writing documentation. Love this quote: "With Java, anyone can easily create enterprise-level applications." K. 
One of the authors (Sander) here, if you have any questions on the book or the upcoming Java module system in general, fire away!
Program or Programming or Programmer, but certainly not Performance. I thought he was talking about a specific package, I had to read it several times. 
This left me rather confused. If you post something that specific, you may want to include a short explanation about the following content. Chances are nobody knows your language, which may not even be that old. Speaking for myself, I missed your last post (which also happens to be the first) about your language. So I had no idea, what you wanted to tell me. Also, what about that website? Is it quite hard to read or better skim through the contents. It could use some basic web design. On another note the page says, the project is open source, but I couldn't spot a repo link.
Well, then it looks like you found it...
DZone hasn't been relevant for years... edit.: and it looks like this was posted by a fake spam account... of course.
Hello What would be the size of a packaged hello world jar with its modules? 
Very good answer, thank you. I also like the example project, do you have more real world example projects ? ( besides the activator templates ) 
Spring Boot with thymeleaf as a view. 
Great question! An indication, all based on the current Java 9 [Jigsaw ea build](https://jdk9.java.net/jigsaw/) for OSX: * Full Java 9 JDK ~317mb * Helloworld + just java.base module in a custom [jlink](http://openjdk.java.net/jeps/282) image ~31mb * Same as above, with full optimizations on ~21mb *edit: adjusted Full Java 9 JDK from 423mb to 317mb, since it includes all modules in two different formats for convenience of developers to create their own images. No fair to count those towards the total size.*
For simplicity and raw performance I would recommend [Rapidoid](http://www.rapidoid.org/)
This sounds interesting I did play with springboot in my leisure time, thanks for suggesting it. 
you need to get on the Single Page Application bandwagon in my mind. Which means branching into javascript. I would recommend jhipster given your background. I actually LOVE dropwizard. But it's more of a REST server, than a page server out of the box. There are template engines for it, so it's not totally devoid. Personally, I do angular on top of drop wizard. zero page generation. I do use web pack do "compile" my javascript. 
Thanks. It is great that there is a 'standalone' image created. No more ensuring a JDK is installed on box all the time. I ran across this tutorial if you want an overview for how it actually works if anyone is interested - http://openjdk.java.net/projects/jigsaw/quick-start
This guy posted in the Android apps subreddit as well. They found that he just took the open source music app Timber, changed the name, and added a $1 price tag.
Looks like this is the one &lt;https://github.com/naman14/Timber/&gt;. One can sell GPLv3 software, but anyone who has downloaded it (even if it was a free promo code), the author is required and obligated to provide source code (for a reasonable price (free)). If one who did get a promo code asked for the source code and it was refused, then he can be sued or DMCAed. Although the author is in India, Google is an American company so a DMCA is completely valid. 
I came from visual studio to eclipse which I am very used to now, however I have been eying up intellij recently because it's very pretty...
I would add: Java Fundamentals, part 1 and 2 from pluralsight.
Does it matter? all of those are great material.
Never heard of JavaX before and it seems I cannot find much information about it at all (not even source code from links on this page). Also, it is very difficult to search the internet for it due to the fact that it contains the word _Java_ and that there is a package prefix called `javax`. EDIT: Looks like this information just appeared a few minutes ago, so this is much better. Looking at the "snippets" and the fact that you need something as small as `!12345` in code. I would summize that it acts as a kind of `import` except from an online database of snippets, which is an interesting concept. A question is though is reliability about the server, it seems that if the server were to go down that JavaX would become useless. Do you support something such as an offline copy of the snipped database as a JAR? If not, I would suggest a kind of offline cache where one can download snippets and use it as a kind of local database. Also, are snipped just source code which are dynamically compiled using `JavaCompiler` or are they actual class files which special methods and linking? 
The GitPitch project is so far my only public Play project. If you haven't already you might want to ask in the Play Framework Google Group for further example projects.
If you feel rusty programming in general, then practice is the only way you're going to get better. That said, many programming jobs don't give enough practice if you're in bug fix or support mode. If this is the case at your job, see what you can do to fix it (take a more active role, switch projects, etc.). As for staying up-to-date with Java, there are lots of great resources. Probably you use some frameworks or libraries at your work, so search for resources on that topic. For Java in general, I recommend the [release notes](http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html) (look at the Java Programming Language section in particular) (Google 6 and 8 too), and books like [Core Java for the Impatient](https://www.amazon.com/Core-Java-Impatient-Cay-Horstmann/dp/0321996321) and [The Well-Grounded Java Programmer](https://www.amazon.com/Well-Grounded-Java-Developer-techniques-programming/dp/1617290068/) (which is an ecosystem _overview_).
[removed]
They're not mutually exclusive, but complete interoperability between OSGi and the Java module system is not a given either. For one, you will be able to continue to use Java 9 with the 'legacy' classpath, without writing your own Java modules. When you run your OSGi application that way, you'll have minimal issues migrating (basically you're only screwed if you use internal JDK API's in your code or libraries that have been encapsulated in JDK 9). It gets interesting where you want to really use Java modules from OSGi and vice versa. The OSGi Alliance is still working on their interoperability story. It's hard, because OSGi's bundle/services lifecycle is much more dynamic than what Java aims to support with its module system.
I try to stay uptodate with this reddit. You can derive some information about their relevance through the reddit votes and frequency they are published.
If I thank you for being so polite to bot, will the other bot thank me again?
You are great thanks for kind words and helping hands. cheers
If you want to maximize you employability, I would stay up to date with /r/programming in general, most of what goes on in the programming world ends up influencing Java practice. Stay aware of the new JVM languages such as Scala, and Clojure. Even within Java there are many Java styles nowadays, JEE &amp; Spring Boot, Reactive / Functional, even real-time low-level stuff. 
Thank you for being a polite user on reddit! --- *This bot was created by [kooldawgstar](http://reddit.com/u/kooldawgstar), if this bot is an annoyance to your subreddit feel free to ban it. [Fork me on Github](http://www.github.com/kooldawgstar/PoliteUsersBot) For more information check out /r/Polite_Users_Bot!*
Thank you for fully automatically and mindlessly assuming every post with a certain keyword is meant politely! But hey, it's the sentiment that counts. *This bot was created by [Spritetm](http://reddit.com/u/spritetm) For more information check out /r/Polite_Users_Bot_Bot!*
Me too, but I also follow /r/programming for articles and threads not specifically related to Java.
I find /r/java pretty good. This list is also good to find interesting blogs: http://www.programcreek.com/2012/11/top-100-java-developers-blogs
Ok, bots. How about opening a parenthesis? Here: (
You can use Flyway with Hibernate and jOOQ. There is an example in [this GitHub repository](https://github.com/vladmihalcea/high-performance-java-persistence/tree/master/core/src/test/java/com/vladmihalcea/book/hpjp/hibernate/schema/flyway). In fact, I'm a strong advocate for managing the schema with Flyway or some external tool as opposed to using HBM2DDL. Check out [my book sample chapters](https://leanpub.com/high-performance-java-persistence/read) for more info.
Serious question: is "API" now synonymous to "HTTP API"? I keep seeing it used that way. When did that happen? What should we call an API that's not an HTTP API? 
&gt; ...porting a very small API (only two POST calls) to Java... &gt; ...Performance is quite a big deal in this project... It's very likely that whatever this API is doing behind this two POST calls has more of an impact on performance than whatever package you choose to listen for HTTP connections.
Are you wanting this to be stand alone or running inside an existing container like a Tomcat or Wildfly? If stand alone then you'll want to look for an embedded engine like Jetty. If deploying to a container as a web application, you only need to provide an implementation of a Servlet to receive the HTTP requests and wire that up to the container. That servlet can be eliminated using a web services framework that handles that part for you. The SPARK framework for example can be run standalone (built in Jetty engine) or dropped into a standard web application container (Tomcat/Wildfly).
Reading this subreddit. Works for me. :)
Fro two post calls just use servlets, no need to even adopt a framework. Servelts will be as fast as you can get.
Legacy apparently. 
HTMl, CSS and JavaScript are disparate. Java libraries and Java are cohesive.
This seems pretty small and probably not worth dragging in a big framework. I would probably just stick with a pure JAX-RS implementation for this. You can use something like Jersey or Apache CXF. Either of those would be fine.
Yeah, this would be fine too for such a small API. I suggested using JAX-RS above, but with only two calls you may not even need to go that far.
Maybe I'm misreading this, but take a look at https://square.github.io/okhttp/ in case you want to perform those POSTs in your Java client(?). Example from their homepage to send a JSON payload: public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8"); OkHttpClient client = new OkHttpClient(); String post(String url, String json) throws IOException { RequestBody body = RequestBody.create(JSON, json); Request request = new Request.Builder() .url(url) .post(body) .build(); Response response = client.newCall(request).execute(); return response.body().string(); } 
Ok great thanks for the pointer. What are you thoughts on using Hibernate vs. jOOQ's POJOs / UpdateableRecord's ?
If you're looking to get the most throughput then I'd take a look at something like WebActors http://docs.paralleluniverse.co/comsat/ - personally, I'm using DropWizard http://www.dropwizard.io/ since it fits better with what we're doing (with the Comsat integration)
Try Rapidoid, it's very fast and easy to set up.
&gt; Does this is targeted specifically for embedded/IoT/microservices/cloud? Yes/no. The module system modularizes the whole JDK, so it can scale up and down with the needs for of your applications. This makes the Java runtime more applicable to embedded than before with just the three predefined compact1/2/3 profiles. But it can also be beneficial in the cloud, where you just ship the modules on a container image your application needs, not the whole JDK. &gt; Average large application (think of Spring/Guava/H)ibernate monoliths) will actually benefit from this in somehow ? There's no reason why not. Actually, for the migration chapters in the book we're using a typical Spring/Hibernate implementation to show how it can benefit from Java modules. If you're at JavaOne by any chance, we have [a session](https://oracle.rainfocus.com/scripts/catalog/oow16.jsp?event=javaone&amp;search=CON1956) on this very topic.
Thanks for the questions! I'll politely try to address them :) - Unexpected: the elegance of the [automatic modules](http://openjdk.java.net/projects/jigsaw/spec/sotms/#automatic-modules) as a backwards compatibility mechanism. Fascinating: it looks like people are way more into nasty reflection hacks than I would've expected. Strong encapsulation puts an end to many of those tricks, or at least requires you to be more upfront about your intentions. It is one of the most hotly-contested topics on the developer lists. To be fair, many popular frameworks like Spring/Hibernate don't give a rat's ass and just load/access anything at a whim. People like it, and would be sad if they had to do some additional effort to keep this working. - You're right, IDE vendors are not really far along. NetBeans being the exception, afaik. I believe they're just waiting it out (although some forms of support in Eclipse/IntelliJ are in place), to see what the final spec will be. Remember, officially the [JSR-376](http://openjdk.java.net/projects/jigsaw/spec/) hasn't been finalized and there are some pretty big design choices left open. - I think Scala could embrace Java modules just like any library, but the big question is of course whether there will be source-level support for creating module descriptors in Scala. I really don't know whether that will happen, and I don't believe the Scala team is currently looking into that. 
I wish I had more of that money stuff to buy a bunch of these. =(
you're asking why people drop unnecessary words/letters? on the internet?
There is no way some sub-reddit can evaluate you. There are professional trainers and seminars you can visit/attend to learn that, given you are paying the required fee (not cheap). Depending on the country, area, field of work, experience etc you should behave differently. Generally you are not paid that differently than any other in that corperation on the same level. Insights how much they earn are often gained through connections.
Using nashorn as portable command line script. 
Stop spamming links
You will have a hard time finding something faster than plain [Undertow](http://undertow.io/), which provides a basic framework and a sync/async/WebSocket server.
Does it need an application server? How can i scale this thing?
By deploying to a container as a web application, you mean compiling a WAR?
It does not need a application server. It uses Jetty for the http server and Jersey for REST. I have not used it in production, but I have used it for a few test services and it is quick and easy to setup. As for scaling, you would could either scale vertically with bigger / better hardware, or horizontally with multiple instances with a load balancer in front. You didn't actually say, but I assumed you were doing a REST service. If so, horizontal scaling is easy (no need to worry about sessions etc). 
Do you have a reason for believing this other than the vague notion that your project needs to be fast? Have you done any profiling or requirements analysis?
I'm porting an existing project. I have data, use cases and pretty much everything i need in order to make decisions towards a faster, and more efficient, server. While i do understand the feeling behind this attitude ("Stop! STOP! PREMATURE OPTIMIZATION DETECTED"), it's not the case.
I think `java.lang.StackWalker.getCallerClass` (since JDK9) will be the best ;)
The instances should not need to talk to each other. That is part of the beauty of REST. It doesn't matter which instance services the request, each should work independently of each other. Yes, in theory you just spin up as may identical instances as you need. Each configured to run on say port 8080. Then you use the AWS load balance to balance the income requests across the instances. the load balancer would be running on port 80 or 443 normally and the instances on another port. There are lots of tools around to easily deploy to aws such as docker. then you can scale up or down as needed. As is often the case load is difficult to estimate.
Dropwizard apps are built as a single executable jar file. You deploy the jar to the server and run it, which starts the embedded Jetty server as a daemon and can then serve requests from whatever port specified in the configuration. You can easily use ELB to load balance between multiple instances of the application.
Wanting something to be "fast" is pretty vague. What are the actual metrics you are concerned about? Have you done any profiling or optimization of the code you have already ported?
I suggest that you download the free [Spring Framework reference document](http://docs.spring.io/spring/docs/5.0.0.M1/spring-framework-reference/pdf/spring-framework-reference.pdf) and read it. Spring is king in modern Java development.
I think the overwhelming response you're going to get is that it matters less which language you start with, compared to the idea that you start. First of all, the PDFs from uni websites are largely not legally obtained. They are put up by students on their own accounts for storage during a class and rarely taken down, or are put up by some professors who don't give a damn about it and want every student to have access to the text no matter what. As for which language to choose, in my opinion, it doesn't matter. A few things to keep in mind. Java requires you to keep track of less things, whereas C++ demands you be meticulous in your programming approach. What I mean by that is that in Java, you create an o next, you use it, and when it is no longer useful, Java frees the memory where it resided for you. In C++, you create an object, you use it, and you damn sure better remember to clear that object out of memory when it's done being useful. If you don't, you will run into very confusing error messages that don't even have anything to do with the object. This makes it very hard to track down the bug. However there are things like debuggers and profilers that make the job of tracking memory leaks a bit easier. Oh, and the allocation and freeing of memory goes for objects, structures, pointers, variables... Pretty much anything you can use in a program, really. Second, Java cone with "wheels on". What this means is that a lot of data structures and other things you'll want to make your job easier, like collection objects such as lists, maps, etc, are built in to Java. In C++, you either have to build them, or you have to include a library of other people's making that contains such things. Now, from the above two points , and there are more I could make, it may seem like I'm saying that Java should be the first language. This isn't necessarily true, though. To truly become proficient at programming, it's good to understand whats going on "under the hood", so to speak. There's a reason that even at colleges and unis that offer a CS degree, one of the required courses is often data structures. They make you build those lists, maps and other things that are built I to the "nicer" languages. They also require, more often than not, an algorithm course. This is to force you to create from scratch things like iterators, sorts, and other nice things that are already present in more modern languages. The reason for teaching this is simply that every item that is already included that you don't necessarily have to build in modern languages are simply more tools in your toolbox. You can accomplish many of the same things with an array and a map, for example. So when is using one over the other preferred? A knowledge of what's going on close to the metal helps that choice become second nature. In short, learn both. Take one year to learn one or the other, understand it, build a few things with it. The, next Autumn, pick up the other and start doing the things the other language does with it and find out the differences, and rebuild some of your old projects with the new language. You'll know two languages, you'll have a hell of an impressive portfolio, and you'll be able to understand at a fundamental level things that others either take for granted, or don't even know enough about to take it for granted.
That's even better - thanks for the feedback. Would you mind if I adapted the post to use that instead? 
Vertx. http://vertx.io/ Fast, built in async.
What I really like about this article is how it shows that Hibernate (et al.) excels at solving the object graph persistence problem. Updating version columns across a complex object graph, keeping in mind optimal locking semantics, etc. is a very tough problem that I wouldn't like to solve with SQL. It could be solved with triggers, but there's substantial risk of running way too many updates on the root entity when the graph becomes more complex (not to mention the risk of undetected cycles).
&gt; I have data, use cases and pretty much everything i need in order to make decisions towards a faster, and more efficient, server. And would you care to share this information with us?
First of all: you want a Web API Framework. "API Framework" is quite a nonsense term. Then: just use either vertx or spring boot (e.g. with undertow beneath). Just use what you think is easy to use and to maintain. See how to fasten it up or switch it once you really hit performance bottlenecks. That's what load tests are used for. Quite often people want "high performance" even though their real life scenarios don't even require it.
[Well, you know my opinion about when to choose which](https://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/) :) [I also like Mike Hadlow's point of view](http://mikehadlow.blogspot.ch/2012/06/when-should-i-use-orm.html), charting [throughput vs. model complexity](http://i.imgur.com/sItBrVB.png)
ORM Expert sounds perfect for LinkedIn profile :D
My opinion is. Lear Java, a lot of developers say that Java better then C++. But C++ and Java difference is different spheres. Java is more web-browser, android, servelts programming. C++ is more game, programs etc. Im learning Java and recommend to read this books: 1. Head First Java 2. Thinking in Java 3. Java 8. Shildt 4. Horstman Java 2, 7 edition 5. Effective Java(after all this books)
Maybe a plain ServerSocket implementation could be enough. If it weren't for j2ee I'd say use Websocket.
Go ahead, it's not my invention anyway - I got it from *The Well-Grounded Java Developer*, I think.
Joo-lambda. Or Jewel (if spelled as jOOL). Your choice.
That's the funny thing about worth, there is no single answer. If the company is in a pinch it will pay more, if not it won't, supply/demand etc onpeople who do your job. Really, what other jobs do you think you can get / be paid for, how do they compare. How does the opportunity of a lucrative contract compare? Experience really helps here to guage worth / what you can do in you career but if difficult cos you just starting out. Really, could you do that test project and be happy / afford rent etc? Is the lucrative contract really worth it / could you be earning alot in a year time. What other jobs pay that amount, would they be possible in a years time? Negotiations are a conversation. Really they will have expectations of you and some idea of your progression / what and why they pay you. It's completely reasnoble to understand that and have a conversation if you think they have undervalued something. Really though you need experience, so if you are happy with the job and pay accomodates life and in x months land a lucrative contract, doesn't sound that bad at all!
Yes
btw, I'm benchmarking [hello-world](https://github.com/jooby-guides/hello-world) example
&gt; hello-world Ok, that example isn't up-to-date (will update soon). Did you start the app via jooby:run right? There was a bug with undertow there. Suggest you to try latest release: 1.0.0.CR7 and ideally with plain/raw jar not jooby:run (there is small overhead to supports hot reload in development here) Also, test depends on what tool you use... and/or if you keep-alive or not the connection while testing (think that is the diff between netty and jetty)
Yeah, readability is a massive part of Java, and one of the principle reasons that organizations choose it, so I agree it's not great to go against convention. Maybe something like this is best limited to personal projects. Or else it's time to start a JSR!
Syntactically I really like it
 List&lt;Point2d&gt; line = Arrays.asList(new Point2d(1,1), new Point2d(2,2), new Point2d(3,3)); " I don’t like the disjointed nature of that whitespace between new and Point2d. " I do "new" is very important, why loose something so important in an ascii soup.... "new " including the space add very much to the readability allowing you to scan code much quicker than dense ascii soup which you must carefully decode...
That test contact alone could pay several months of life compared to my current situation
This reads like an advertisement.
Yeah there are pros and cons either way I think.
Yeah the to me this just seems like a restriction on what you can name factory methods. I like the concept though. Maybe give it some more specific behavior?
That is a good point with immutable classes. I wonder if they are going to use constructors for value types or if they will use static constructors. Seems like it would be a good way to differentiate between value types and objects. 
Definitely would be more useful for value types and immutable objects though.
ok, so, with latest release version and uberjar * netty: 45k rps * jetty: 38k rps * undertow: 31k rps I'm using ab like this: ab -n 100000 -k -c 16 http://localhost:8080/
Because it's not Spring?
&gt; 10,000 requests per second (...) It could actually be achieved with WildFly and it’s load balancing capabilities pretty easily and cheaply This means virtually nothing... 10k RPS on a cluster of an unknown size doing unknown things :)
I had bad experiences with ab. Wrk is better but these days I prefer https://github.com/tsenart/vegeta 
This doesn't seem like the vector you should focus on if you are concerned about performance. Ignore the performance of HTTP libraries. I'm willing to bet your bottlenecks are going to be server locations (how close is the client to the API), network latency (ties to location), and most importantly the general performance of your API endpoints. I'm willing to bet you that you will have more performance problems with the API you are integrating with than you will with virtually any java http clients.
Thanks for that comment, immutable value types is exactly what I was thinking of for this, might edit the post to mention that and remove the Setters. 
That's a great point, of is more in line with stuff like guavas optional too I think. 
I usually use builder pattern and to avoid typing that in each class I use lombok. So you annotate your Point2D class with @Builder and you can do Point2D.builder().x(2).y(5).build(). It is more verbose but great for classes with lots of attrs. In these cases, constructors are horrible because you forget the order of each param. If you like chaining setters, you can also avoid exposing defsult setters and use @Wither to generate a withAttribute() method that will return instance of the class with the new value of that attribute so you can chain several with~() calls: Point2D p2 = point.withX(2).withY(5);
I wish I could downvote this more.
I don't really like it. First thing is readability - it makes it harder for someone randomly looking on the code to see what the code does. Second, the new operator indicates the creation of a new object which would be obscured. Though I have to admit this is a rather weak point in Java since it's common practice to obscure this in many cases already and not that important since gc. Third point, to, me it does not add a real improvement. You lose a whitespace and win that it looks like a static function call; if using $ as a symbol, it looks more technical, which I personally do not like. Java is ugly and verbose as is, you seem to want to lessen that a bit, but I think a different (jvm) language would be a better fit. 
This one is a game changer
Totally agree with this. Thank you. r/webdev is the exact opposite of this policy and they've removed several posts I put there that did amazing. I don't post there anymore.
And be extremely hard for Americans to type :(
I'd fucking hate to see this. Why not just call it create instead? Or maybe _new. Is really new and a space that bad? 
This is free and open sourced library which allows to write similar code in java and javascript. It may be extended with a new methods in existed or new plugins. Math, string and lodash plugins already exists. Kind regards, Valentyn
Aside from this being a huge argument from authority without any new arguments or compelling evidence that OO doesn't work (which it has quite a few times in the past), this part: &gt; Java is the most distressing thing to happen to computing since MS-DOS. It's silly because MS-DOS was a great platform for its time.
&gt;It's silly because MS-DOS was a great platform for its time. It had no hardware abstraction, virtual memory or even multiple processes. In comparison to Unix which came out much earlier it was a toy OS that got out of hand.
I agree completely with your thinking and experience. Unless you are in a business where you can start over year after year (certain types of sub contracts or short term projects maybe) nearly every other type of project is going to need refactoring and constant restructuring. Anyone who tells you they can completely rewrite code and the new code won't ever need to be refactored is either suggesting the project will be dead in &lt; 2 years or lying to you. 
Not really that bad, it's just interesting to try new things. Going by the responses here I'd say this is one for the 'failed experiment' pile! 
Yeah I haven't tried Lombok yet. I'm not sure how comfortable I am with having the code autogenerated where I can't see it, even if it's only boiler plate. The first blog post I wrote was on using multicursors in intellij to speed up fluent setter creation. 
I think this sums it up best: &gt; Rich Hickey (2010) SE Radio, Episode 158 "I think that large objected-oriented programs struggle with increasing complexity as you build this large object graph of mutable objects. You know, trying to understand and keep in your mind what will happen when you call a method and what will the side effects be." The real enemy here is complexity. Imperative programs get very complex because of all the global state they expose and they fail to keep controls on changing that global state. OOP allows us to simplify global state with encapsulation, so it did make things better for a time (C++ notwithstanding). However, it does NOT prevent us from using global objects instead with complex encapsulated private states changed by methods that are intended to be used in a certain way, to ensure that the overall object state always proceeds down a "happy path". Call the methods in the "wrong" order in a typical OOP API, and you are certain to find dragons. I don't think there is a silver bullet to fixing this, but clearly countering that requires a big reduction in complexity so we can properly reason about software again. IMO, this will require that we take refuge in statelessness, and the best way to do that currently requires a shift to functional programming and referential transparency. This is already happening in Java and C# and related langauges built on their respective VMs, and the approach will likely gain inertia. The more ambitious can transition to Haskell, Scala, or an ML-family language like F# now to try it out. Since functional programming and OOP were pretty much conceived of at the same time (look up APL vs. Simula if you don't believe me), I find it interesting that OOP took off in the mainstream and FP didn't. I can only guess that the first wave of FP languages like APL scared people away from it and that the siren song of creating software as a sort of simulation of reality won people over much more readily. The world doesn't appear to take to mathematical thinking by default.
How much abstraction do you want in a 4.77 MHz PC XT with 128 KB RAM? DOS was great because it was so small and left most of the available resources to the application. Sure, it didn't make much sense on a Pentium-class computer, but even then it stuck around as part of Windows 95/98 for several more years.
What's the alternative? Learning OO for the first time felt like the missing link to large scale application development. Maybe I havent used it enough to dislike it
New version was released: https://www.reddit.com/r/java/comments/50kpy2/java_port_of_underscorejs_version_118/ Kind regards, Valentyn
It may be endpoint which returns mp3 content with valid content type and html audio tag which play it. Auto player will not work in iOS, btw.
"Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%." Donald Knuth or my version get the damn thing *working* then in the unlikely event it needs optimising *profile* and see what's really taking the time, not what you think ought to need speeding up.....
Why?
yesyouarerightwhoneedsspacesatallicangetmuchmoreonalinelikethis
pointtaken
Do people still use the `$` sign for these things? That seems so 2009. I think it would be way more fashionable to use `λ` instead. As in Point2d.λ(() -&gt; 1, () -&gt; 1)
It worked fine back in the day. It's not like we had much hardware to chose from back then.
You might have better luck asking on /r/androiddev. They usually have a daily questions thread that you can ask in. Anyway, I used the zxing Android port [here](https://github.com/journeyapps/zxing-android-embedded)
ORM and Excel Expert :D
Oh, so the entire point is so that I can write "$...whatever" in java?
I find it quite readable, might just be the way my brain works, but I put a semantic gap where the whitespace is, like 'new' is an argument. Anyway I've been convinced of the demerits of this approach by this discussion, so it's been worthwhile having, and thanks for your input!
You may create class with name $ and static methods inside it. package com.github.underscore; public class $&lt;T&gt; { public static void myMethod() { } } 
Nothing to do with **Java** as such. **Java** and Java**Script** are two entirely different languages.
It means that every problem is your problem. 
Not all games supported all hardware, I had a friend who couldn't get sound sometimes because his card wasn't a true Sound Blaster Compatible, or only was at a lower sample size. And until you start running out of conventional memory because you hit the 640k limit, and having multiple boot configurations turning off certain devices drivers so you could squeeze enough spare memory to run a certain program. And then reboot again when you want to run the app that needed that driver. Ok for 8086's, but obstructive for the 286 and above. For over a decade PC's were held back due DOS's tight coupling with that CPU. It's was never meant to be a long term solution but we got stuck with it.
As a side note a natural key is nice for hashcode/equals if you're using an @Id that's autogenerated on the database because in JPA/Hibernate that ID won't be set until you actually persist the object vs the natural key should come in via the constructor e.g. new User("myusername"). There are some workarounds for this though, saw this article from Vlad recently when I was trying to understand how hashcode/equals should be implemented correctly (if at all) for Hibernate/JPA - https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-entity-identifier/
&gt; And just for the record, i think many programmers add surrogate keys way too quickly "because it is easier to map". I personally like easier to query much better. I totally agree. And it's often also a bit faster to query
Take that back!
This isn't about javascript either, but I thought it was relevant for both
Ah, you're under the impression that /r/java is only for Java related things, silly you. Didn't you know that you can post anything [without it being removed](https://www.reddit.com/r/java/comments/4tvpgc/psaposts_reported_as_spam_and_as_offtopicnot/) - as long as it's upvoted? You're also not allowed to write about posting not being relevant, because the sidebar states: &gt; don't pollute the discussion with things that should be settled in the vote count.
Yes, a more robust solution would probably allow for annotating candidate/unique keys and provide the same loading/caching behavior around them. 
Such a strong statement from a 0-day account... strange... Obviously you're either banned from /r/java or too much of a coward to use your real account - so - being bitter and sarcastic is not going to cut it here.
I hope that I'll never see anyone using this library. Honestly, thanks for your effort, but I think this is just redundant. Take the join function as example: Most projects already use Guava or Apache Commons and thus have a joiner in one way or another. Also StringBuilder has a size property, so no need to call toString() to check if it is empty. If I'm not wrong StringBuilder also has a null-safe append(Object) method, so no need to call toString() manually there. sort function? We already have Coillections.sort() and Collection.sort(Comparator) (since Java 8). uniquePassword: Why not just use RandomStringUtils or some function based on SecureRandom? unescape: I believe Apache Commons Lang (or some other library) already has StringEscapeUtils. now: Why not use System.currentTimeMillis() or Calendar.getInstance() (or the even newer LocalDateTime.now())? Sames thing for many other methods. Sorry if this seems a bit harsh, but Java has better ways to handle certain functionalities. Underscore.js may have it's reason to exist, but please keep it in the JavaScript world.
Maybe people making a new account would like a history of their old ones? 
Still, what would do with it?
Stress your brain or your feeble pinkies. Your choice.
Do you know of any examples that show how to add authorization ids on the end? Would the UI request the id and use it on the actual GET request? Couldn't the foreign sites just request an Id as easily as the UI could? edit: not trying to be condescending, just curious on how that would work.
OO is an abstraction of the real world and the real world is complex
Sure ... but why would I wanna do this? I mean, wtf ...
In 2019, it'll be 20 years of Java for me.... (just saying....)
Or you can just use [Log4j2](http://logging.apache.org/log4j/2.x/) ``` private static final Logger LOGGER = LogManager.getLogger(); ```
This is an alternative for other collection libraries. Kind regards, Valentyn
Check out the [**Programming Challenges**](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) in the /r/learnprogramming wiki. There are plenty ideas on various levels.
Oracle supports a javascript for jvm since jdk 8, March 2014 and going to do it with jdk 9. Kind regards, Valentyn
Yes you're right, that's something great to come from this discussion and that's exactly what I'm going to do from now on! 
But you can get your whole comment history by going to https://reddit.com/user/username.json Infact you can do this on almost any reddit page
Cool I'll check it out for sure, thanks.
There is nothing wrong with OOP. There is nothing wrong with PP. There is nothing wrong with FP. In contrast, there is something VERY wrong with people choosing the wrong language for the problem being solved!
I agree this shouldn't be here, let's just downvote it to oblivion. I already did.
Seems like you should read the Vagrant Docs. Vagrant creates VMs for you with Oracles Virtual Box. Afterwards you can specifiy your needs in a Vagrantfile (e.g. Shell Provision, Mounting Folders, Port Mapping etc.). When you finished your Vagrantfile, you can run it by `vagrant up` and log into your machine with ssh for instance.
Vagrant+Docker is a killer combo. I've got something for you which makes this stuff ridiculously easy, but it's not quite ready for prime time yet. I'll hopefully have it ready in a few days (although I've been saying that for months, so we'll see how it goes :)
You won't *believe* what happens NeXT!
You can mount host directories as a volumes in Docker as well. We do this with JARs and other things for local testing before doing a full Kubernetes deploy. Getting started with pre-made docker images on the hub is super easy; for example: &gt; docker run -ti -p 80:80 -v /path/to/my/local/jar/:/opt/myapp/ java:latest java -jar /opt/myapp/myjar.jar I do integration testing with a postgres docker running alongside, and open a network bridge between the two. After using Docker for a couple months at a new job, I thought I'd check out Vagrant. IMHO I found it to be too heavyweight for most purposes. I use Docker for everything now. I haven't touched a full VM that wasn't in AWS/GCP in months.
If you're talking about "communicating with an API", then probably. I also hear "REST API" quite a bit, when "real" REST is actually much more strict than most JSON HTTP APIs (but it's much easier to say than JSON HTTP API). The other meaning is still in code: "What API should we expose here?", "We should figure out the API first for integration purposes".
I wonder how this is handled on arm... probably just the direct way but i'd be curious to see. 
That's what this uses. Those results are paged and limited to 100 comments. It's also in a pretty messy format with a lot of unnecessary extra data. 
You could use Docker very easily I imagine. Map your container to your code files, have your Dockerfile install all the reqs for your app, and then when you are ready to test, you can build/whatever in your containers. This will also help with testing your code in a clean environment, opposed to a VM.
I've had excellent success with the paid https://manateeworks.com/ barcode scanning library. They're not cheap, but their barcode scanner engine works very, very well.
Did you read https://www.reddit.com/r/programming/comments/50oqkj/why_was_doom_developed_on_a_next/ by any chance?
Get outta here, BuzzFeed!
I started by steps, by using Vagrant + bash script provisioning. Now i'm using Ansible for provisioning, it's quite easy to learn (unlike Chef/Puppet). I guess that Docker will be the next step, probably. 
Use Netty. Since you only need something simple. They make it fairly easy to set up an HTTP server and even HTTP2. If you don't want to do little extra work any java http server will do the work just fine. 
Especially given that most of these "thought leaders" tend to retweet each other all the time. 
What if the string is interned? Does that only affect .equals()?
This is one of those small features I'm really looking forward to. Lets of tools and shit need to interact with the OS processes and getting PID's right now is a pain in the ass... I wish they'd actually backport to Java 8.
Interning would only effect `==` (reference equality)
Im actually on the same boat as you are! I spent 3 months developing for android, managed to deploy 1 app but spent the rest of my days procrastinating.. I really want to start up on Libgdx aswell.. Have you started it?
https://www.reddit.com/r/learnprogramming/comments/2a9ygh/1000_beginner_programming_projects_xpost/
Thanks 
[removed]
This is the first time I am hearing this term. Have you tried Apache JEXL? 
Anyone aware why they're using Java 7 (EOL'd over a year ago)? AFAIK, both Swarm and Oracle's cloud support Java 8, don't they?
&gt; Here’s my thought process when reading this: “Ok, so we split the query string by ampersands and then, JESUS ON A FUCKING STICK, what’s that?! My first LOL of the day, thanks.
Note that this API is highly platform-dependent, so some exotic platforms may not implement it, or may not implement it as you would expect. For instance, if someone devises a way to run Java code on a GPU, this API will probably not work there. So, if this API isn't available, and your code can still do something sensible without it, make sure you catch those `UnsupportedOperationException`s.
I'm a little surprised the algorithm didn't start of with that as a quick "are they literally the same object, then return 0" given it's near zero cost. My guess would be it just doesn't come up often enough with strings to have any value, most other equals/compareTo implementations for other objects open with that check. 
Where are you? Where are you willing to move? If you are looking for jobs, that's a pretty important question. Do you have a linkedin setup? I know there are a lot of people hiring java developers in the Philadelphia area personally. New York, New Jersey and Baltimore as well. Honestly I would just start throwing out some applications while doing your side project. Code for 30 minutes, do an app, code, do an app, etc. 
It's not a criticism. It's a workaround for not having this in Java 8.
You're never adding the entries to the list...
There is a mac installer
isnt that what my setName and setphoneNumber do?
Yes.
edit :NVM got it
Take a look at jhipster. It's a starting point for a crud framework. It uses spring with hibernate and a configurable Db including h2 It comes with a frontend in angular as well. 
https://gist.github.com/anonymous/6eec435c759ea33fb3756c5b2a249e5d
I created the new phonebook entry in those lines so i could set it has the argument when calling the displayEntry class. Without making it I wasnt able to set phonebookentry as the argument
are you having a specific problem doing the obvious?
This maven plugin should make docker the easy choice: https://github.com/spotify/docker-maven-plugin
Take it one step further. It seems that you don't quite understand what's going on when you call methods such as [ArrayList.add()](http://www.tutorialspoint.com/java/util/arraylist_add.htm) or create objects such as PhoneBookEntry. Think carefully and specifically about what calling [ArrayList.get()](http://www.tutorialspoint.com/java/util/arraylist_get.htm) returns. If you still don't understand, read up more on the [methods of ArrayList](http://www.dummies.com/programming/java/use-array-lists-in-java/) and [creating object classes](http://www.java-made-easy.com/creating-java-objects.html).
So list.get() will return me the data I have stored inside of the array. I'm assuming I need to play list.get() inside of my displayEntry method? Like list.get(entry.getName());?
Redownload it? Or check the update notes as it may run a different interface now? (Web interface maybe)
Antivirus.
I tried out jBPM when jBPM 6 was just released. I was pretty disappointed by the quality of the product. Since then i've only been using Camunda. I never regret that decision
You implied it doesn't work, and I assume this means somewhere along the lines you're getting an error message, it's easier to diagnose if you give us more pertinent information 
I said "The official user guide is very erroneous" in the original post. I am just sick of the official document and I wanted another tutorial, instead of continue struggling with the shitty official document. I am sorry if I sounded rude. But you can see why I said error messages didn't matter. 
Try to run the .jar with Java directly: - Download / Update [Java](http://www.oracle.com/technetwork/java/javase/downloads/index.html) - Make sure that your JAVA_HOME environment variable is set. I think there is an option that does it automatically while installing Java. Otherwise see [here](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/). - Open your command line tool were your jar resides: Go to the folder where your jar is, press Shift + Rightclick, "Open Command Window here". - Type in cmd: java -jar &lt;nameofjar&gt;.jar. (Replace &lt;nameofjar&gt; with the actual name) _Assuming you are on Windows_
We used docker containers for db and queues, running with spring boot maven plugin for local development. When we needed to integrate the full environment (microservices setup) we used docker-compose with every microservice as an image (created those images with docker maven plugin from spotify). Finally, to address the hosts issues (connect to mongodb on localhost for local development or to mongodb host on fully dockerized env) we used spring boot profiles.
Please, in the future, direct your **programming help related** questions to **/r/javahelp** as is outlined in so many places here on the subreddit. Make sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting.
Such questions should be directed to either /r/javahelp or to /r/techsupport. /r/java is not the place for questions of this kind as is outlined in many places here.
This would be a question for **/r/eclipse** rather than here. If anywhere in the Java related subs, it should go in **/r/javahelp**.
Mockito is an extremely useful tool. I primarily use it to mock external service calls for unit tests, and it's doing admirably for that purpose
As a person just finished second year of uni, this is amazing advice. I work on Minecraft plugins and its awesome and I've been noticed by companies because of it.
It is open source and in my opinion more light-weight. And it is actually related to jBPM. The key developers of jBPM started Activiti when they were not happy with the progress of jBPM any more. And Camunda is a fork of Activiti.
A better OOP is the alternative. I found and assembled all that links in order to demonstrate that our current OOP is in trouble. We need a better one.
You're really close! &gt;So I think that my instances of PBE are stored in the array correct? Yes. &gt;Am I getting null values from the array because it has not been initialized? If so how do I initialize an arraylist? You initialized it in line 14. &gt;For some reason I cannot retrieve the data (or am doing something wrong) using the get methods. Yup. Go look at lines 30-34 and explain to yourself exactly what you're doing. Giving the method displayEntry a PBE as an argument (line 34 pasted below) is a step in the right direction, but that instance of PBE doesn't have any data. PhoneBookDemo.displayEntry(phoneBookEntry); Therefore, you need to give displayEntry a PBE that has data. And as you stated earlier, the instances of PBE with data are stored in your ArrayList. All that's left is to get them individually from your ArrayList and give it to displayEntry. I also think you've gotten far enough that I won't feel guilty about leaving the solution [here](http://pastebin.com/83yHxA5w). I would recommend only looking at it to check, but it's up to you. 
It's no problem, it was a good chance for me to practice/re-remember the terminology. I'm taking a beginner's comp. sci. course in C++ myself. Anyways, feel free to drop another comment or PM with any issues and good luck! Edit: Remember to remove that lone getEntry() because the PBE it returns isn't being used.
You can also use PowerMock, which has a Mockito API. Then you don't need any special code to mock new. 
I found it very intersting to read, maybe one day I'll understand it.
Same...
I'll do my best to explain it simply, as I understand it (please feel free to correct me where I'm mistaken, anybody): Essentially, the Java garbage collector will stop everything to collect the garbage every now and again. It throws a signal to each of the application's threads and says, "Hey, hold up, I gotta get your garbage." And each thread, when it's safe to do so, pauses. The point at which it pauses is called a safe point. Now, what happens here is that if the GC says, "Hey hold up, I gotta get your garbage," and a thread _doesn't_ have a safe point, the GC will wait patiently for ~10 seconds (aka the timeout), and just decide it's in an infinite loop and just stop the thread itself. This is the thing that's causing the delay. Most of the time, these safe points are inserted without you really ever knowing about them, but because this is a lambda function, the compiler doesn't do it here sporadically (which may be a bug--I honestly don't know enough about it to say whether it is or not). Hope that helps!
Also great for mocking static, and a bunch of other neat things. 
Java Champion is Oracle's program similar to Microsoft MVP, specifically for Java. There's also another program called Oracle ACE, but for any Oracle technology. JavaOne Rockstar is a badge/recognition for most well-voted speakers at JavaOne conference.
It's a little confused in the SO thread but it is actually a STW due to JIT wanting to replace code and not due to GC. It seems that `-XX:+PrintGCApplicationStoppedTime` [logs all STW times](http://stackoverflow.com/a/39299153) and not only those due to GC.
I know what they are, I'm mocking the childish names. 
Note that this mechanism is not just used by the GC, but also the JIT (And the JIT was at fault in this case)
[removed]
Very fun to look at, thanks for doing this :). One question; when I'm looking at the comparison charts, almost all of the libraries seem to show a [huge jump at the beginning of this year](https://javalibs.com/compare/h2-vs-derby) and then suddenly drop down again. Is this a bug in your code or is it real? If so, any idea why this happened?
Interesting. One nice to have feature might be an option to filter out test and logging libraries from the most used list as they will always dominate the list. How come there's a spike around March 2016 in (almost) all the graphs?
Adding specific code to your classes just to inject Mockito mocks is also bad design. 
Just use [JMockit](http://jmockit.org/), where a constructor call can be mocked like any other call.
That would be really great!
That actually was my bad attempt at humor. Sorry. 
I understood this reference.
Your problem is not so much Java itself as the infrastructure and library knowledge. There's a huge number of libraries and frameworks that are used in projects. I could rattle down projects, but only some of those will be relevant and expected from you.
&gt; Learn the Java 8 features pretty quick, because they make concurrrncy a lot easier. For a new green-field development, absolutely. There is a good change the poster may end up in a maintenance role of an existing project based on slightly older stuff that doesn't use it though. This is even more likely if they are taking on entry-level staff. OP, as much as you can spend the time learning the language for the interview, I would first recommend finding out as much as you can about the company and their product. That'll count more in the interview, java is 10% core language and 90% frameworks/apis that you make heavy use of. Find out what frameworks the company uses (look up their historic job postings &amp; sometimes you can find this in marketing materials) and at the very least understand what each one does.
My main advice, take Java as maintainable code. Write code thinking someone next to you will try and pick it up. So use meaningful variable names and class names, try to highlight business rules code over technical code. You'll get frustrated when doing some logical stuff like filtering lists, mapping objects, Java is still learning a lot from other languages and reducing the boiler plate, but you won't find it that bad once you start maintaining someone else's code and seeing some of it's pros.
https://www.pluralsight.com/blog/tutorials/learning-path-jump-into-java Also "Java EE the Big Picture" and search for introductions to Spring. These are big rival frameworks, so find out which you're using if any.
The popularity, of course, only shows how popular a given dependency is among other Maven Central (i.e. Open Source) artifacts. That's an extremely strong bias. If you had the full information, Spring artifacts for instance would be much higher in the ranking.
Not only Maven Central, but various Maven repositories (total cca. 2 mil. artifacts) AND open source projects from Github (cca. 2 mil. projects). I'd say that this table: https://javalibs.com/charts/dependencies shows that Spring is VERY POPULAR. Before spring-context are just low-level libraries (mostly logging and testing).
Java is really a lot more about the tools, libraries and frameworks than about the actual language itself. It's a lot like JavaScript in that sense. If I'm making an app using jQuery and I compare it to an angularJS app, someone not familiar with JavaScript might assume I'm using two completely different languages. There is some good news and some bad news. Good news, the frameworks have come a long way. Spring is my chosen Java framework, and specifically Spring Boot, the code-based configuration project that focuses on bootstrapping Java apps very quickly. The bad news is: the frameworks have come a long way... and you won't really understand how or why things evolved, or truth be told, really be able to see the entire landscape of choices and offerings until you have a half-dozen substantial projects under your belt. This isn't meant to discourage you, but to set expectations. Start with the language, then move to simply setting up a Spring Boot project and hitting and endpoint... give yourself a few weeks worth of nights and weekends, and don't give up! From there, add one very small "new facet" and build. Such as, adding a DB connection. From there, maybe check out some of the offerings that Spring has for ORM, Repositories etc. Don't try to bite off too much, approach this very iteratively. Good luck! EDIT: "How hard is it going to be..." is kind of an indicator about you. It's going to be extremely hard. I've been using Java for 16+ years, and Spring for 5, and I am still learning things all the time. In fact, I can't say that I really know all of the options available. I know some good combinations that work well for a huge majority of the projects I'm involved in... but there's always more to learn. I honestly encourage you to try not to ask how hard it is, but to set goals, and accomplish them. Forget the timing of this. It may take months, it may take years. But chip away every day. It's a long path, but you'll get there eventually.
Surprised to see nuxeo all over that list. It's a relatively niche and commercial product. 
Java, the language, is not hard; Java, the infrastructure (libraries and tools) is a bit harder.
Because it has quite a lot artifacts in their Maven repository which depend on their core libraries. The same is with Atlassian Jira or some JBoss projects. (Basically they get the boost because they are large - nuxeo has 100 THOUSAND! artifacts with groupId 'org.nuxeo*'). With Nuxeo it seems that since 2013 they are on decline, though: https://javalibs.com/artifact/org.nuxeo.runtime/nuxeo-runtime (all their other artifacts as well). Btw. these are the currently indexed repositories: https://javalibs.com/maven-repositories Many thanks for your feedback, though. I published the raw data and now I see that sometimes it may be hard to interpret them. I'll try to figure out something so that it will be easier to interpret them correctly. I didn't want to publish whole database because only few people would find that interesting (and currently it's a work-in-progress, so it's not possible anyways). I also didn't want to publish curated list because that would be outdated pretty quickly.
Your mic has a lot of feedback and it makes it harder to understand you. Also, you could probably write in bigger letters since it's hard to read what you're writing. 
Thanks for suggestion. I'll look into it. 
cool
Spring, Hibernate (to a slightly lesser extent), and Apache Commons are pretty much musts to learn for sure. One thing I've found impresses a lot of employers is significant knowledge of nashhorn. A proper scripting engine can push a good application to a great one. Also being able to update application modules without restarting it...great stuff. Sorry I went off on a tangent there.
1. Wrong subreddit. If anywhere, this should be in /r/javahelp 2. No "do my homework" posts - neither here, nor in /r/javahelp. You have tried to cleverly wrap it, but failed. We will not help you to cheat. Don't dare posting this in /r/javahelp - should you still do it, you will instantly be banned in both subreddits.
A lot of proprietary libraries. Kids, be professional and don't get out of the Java EE APIs.
No. Are you Rod? Are you trying to argue that things like Spring, Guice, Joda and Gson are not proprietary?
If Scala compatibility is your goal, you might want to know that `€` is not a valid Scala identifier.
Just make extension functions already.
Where is "Venkat Subramaniam" (https://twitter.com/venkat_s) name?
I'm not saying it's a lot of time... It's really basic stuff I'm advocating learning and not glossing over. Saying Java is easy, the libraries are where you need to spend your time seems like dangerous advice because it encourages glossing over the language itself. I never said it was going to be a huge time sink. I've been a Java developer professionally for over 10 years and on the web-side, started on Servlets, then Struts, then all the different iterations of Spring. I've seen a lot of Java devs who have a very trial and error approach to the language and have clear knowledge gaps and I think it holds them back. I used to be one of them until I decided to hunker down for a day or two and really learn what was going on. It's an ongoing process, but just a few days of focus can give you a solid foundation for further learning and debugging. Having worked in several IT consulting firms, venture-backed technology companies, and small startups. I've got to say that an expert in Java is very valuable to have. I've interviewed devs who are Spring enthusiasts who simply don't know some basic things about Java and I feel they're doing themselves a disservice by not taking that time to really explore the language fully. And guess what? I'd rather hire the solid Java expert who can pick up any framework vs the framework expert who may unknowingly produce tough-to-debug code. But hey, sounds like we may have different values and different perspectives. Just offering my 2cents.
What are extension functions?
It's a way to simulate methods on objects outside of their declaration. extension methods is .net terminology, but the pattern also exists in scala and other languages. Have you ever wanted to add a method to a class but didn't control the class? Extension methods let you do that. It would solve a lot of the helper class and stream extension library bs that occurs. Instead of having to wait for new methods on streams people can extend the stream interfaces and add these themselves. It's incredibly limiting and near sighted to not have this. 
It's one of the reasons I switched to Kotlin.
You can; https://web.archive.org/web/20120413185503/http://www.onlinetechvision.com/?p=566 But you can't use Ruby on Rails with spring right?
 would prefer named parameters and default values. Never really saw the appeal of extension methods.
Basically free functions with syntactic sugar so that they can be called, obj.func(), instead of func(obj). 
This is stupid and pointless.
Header compression &amp; Streams + Binary Frames is very cool. 
Thank you for suggestions, I'll look into it.
Using '.map()' and '.collect()' doesn't make your code functional, it is nowhere near that. Functional programming is also about immutability which is not the case in the example. This aspect alone makes it more difficult to do FP in Java, because you only have simple classes. Shame it doesn't have case classes like in scala.
And what can you do, if the second or nth item needs a rollback because of a deterministic failure? Retrying is no option anymore... perhaps I missed it, but I haven't grasped a strategy for that category. The only way out would be mechanism to *manually* reset the already committed data... which seems to be error-prone in other ways...
Java 8 was a huge step forward for Java, but Java still lacks features other languages have adopted, mostly because Java cares deeply for backwards compatibility. Kotlin addressed many of the complaints Java faced but it comes down to does Kotlin offer enough for a development to move from Java 8 to Kotlin. Honestly enterprise world is slow to change and adopt new technologies so I don't see Kotlin getting much penetration there, but it might for Android and small / medium sized greenfield projects. It is in some ways competing with Scala as well, which is a more advanced and feature rich language that has been around longer. Although Kotlin has better interlopability with Java, which makes it easier to integrate and introduce into an existing code base so it might get traction that way.
I'm going to add to the list something nobody has told you yet, learn Maven or Gradle just after learning the lenguaje and before learning anything else.
I think it has a decent chance of stealing some market from Java, specially in the Android world. It's syntax is comparable enough to Java (fuck off Clojure boy), is a better language that from the very beginning was pragmatic and doesn't try to offer novel ideas from an academic perspective (unlike Scala), has officially the best tooling from the alternative languages (thanks to JetBrains), it is statically typed (GTFO Groovy), it's performance is great (Gradle is basically recommending Kotlin now) and it basically targets all the platform you can target using Java (unlike Ceylon land where Android is something irrelevant).
Well, only Jetbrains knows. I would still though prefer if they would fix the many bugs in their IDEs instead of making new programming languages.
C++ was pretty novel in its time - Simula style classes on top of C and later on a Turing-complete template system. Java, running on a JVM, was no less novel in 1995 for a mainstream language. &gt; And BTW, Brendan Eich (JavaScript) and Larry Wall (Perl) are computer scientists too. Larry Wall developed Perl while working at Unisys, and Brandon Eich developed JavaScript at Netscape. Both were programmers not computer scientists, i.e. they weren't (and still aren't as far as I know) working in "academia". 
Dang, I also can't hand craft a tls handshake. What is the world coming to!
Make jar, not War.
You are still not getting it. Java running on a VM was not novel from an academic point of view. That's my point. The same is true for C++. **And that was good**. Scala is a different story. &gt;Larry Wall developed Perl while working at Unisys, and Brandon Eich developed JavaScript at Netscape. Both were programmers not computer scientists, i.e. they weren't (and still aren't as far as I know) working in "academia". LMAO WTF? So now they were not computer scientists because they are were not in "academia"? WTF for you "academia" is? Is MS Research "academia"? Gosling at Sun was a programmer and not a computer scientist?
It wasn't and i was definitely joking about €! 
My websphere 8.5x (not liberty) only accepts war or ear. Feel my pain. I should quit this job. 
&gt;"Academia" was your phrase not mine. And I provided a definition. Now can you answer the other questions? And why are you quoting that Wikipedia article to show me that Gosling got a degree? I can do the same for Wall and Eich you were saying they were programmers and not computer scientists at that time. What was Gosling?
Definitely as a CS student with previous java experience, I was able to write a decent program within a few hours. Learning curve isn't really steep.
Nobody knows how much Kotlin cares about backwards compatibility, and when the first large projects fail to migrate to newer versions, Kotlin will have to prove itself. Right now, while verything is new and shiny, it's easy to be hyped.
One can easily write a tool to do that.
Head First Java, any number of on-line resources. Also, think about subscribing to Safari On-Line Bookshelf
They originally created the language to help them write code for their IDEs with less bugs. 
HTTP/1 is not going anywhere. If you are handcrafting a request you will not get any of the benefits of HTTP/2 anyway.
Here's to hoping the request resolves in 5ms... Perhaps on a local host connection in will. 🍻
And where is the difference related to the work you have to do in order to remove data from a persistent datasink? 
And some of the IntelliJ plug-in authors (independent of Jetbrains) seem to confirm this :).
Well that is nice.
Well, at least you're on 8.5
Oracle's own developers probably don't know Java 8 exists. It only came out last week for them.
Rabbit is a real pain to operate. We've use it for five it six years and are now moving away from it
It's extremely common in financial markets these days. We have to support it. Honestly I haven't found it to be a pain, but there are of course any number of issues you might encounter just like any other protocol. 
The problem with it isn't in day-to-day operation, it's in failure scenarios. When we first started, they recommended awful clustering mechanisms with drbd pairs that are horrible when things fail. We've switched to other ways of handling them but we've had many hundreds of exchanges running on a few dozen brokers for different things and when network issues or other rare but serious events happen in the datacenters the rabbits always seem to be one of the most finicky things to get working again. The protocol is not really the problem.
This sounds like a mistake, Wildfly Swarm actually requires JDK8.
Depends. For apps moving to aws we've used managed stuff like sqs (or posting to and if we needed fan-out) if the brass were simple. For things with higher volume we've been using Kafka but that's not exactly an operational joy either. We do still use rabbit, but are eager to find better solutions and when we find places we can get away without using it we jump at the chance
*woosh..*
ah. woosh indeed.
I like Kafka. We have Tibco though so I never use it anymore. If you guys have a bajillion dollars lying around, Tibco is nice.
wtf? Are you serious? Why this extra (and extra stupid) step? Why not use https://start.spring.io all the time (or buy Intellij Ultimate if you want better IDE integration)? It's not that hard, for god sake. One major issue with your approach: when Spring releases new version of Spring Boot, with https://start.spring.io you can use it right away. With this approach you would have to delete the old template and create a new one. And if you have more than one template and you forgot to name it like spring-boot-web-1.4? Then you're screwed. Good luck with that.
RabbitMQ is a queue manager that has the ability to call external utility APIs. Say, for instance, you want to upload a file to Dropbox from your website, and maybe your website gets a million hits a day. You wouldn't want your web server uploading the files because that would lock up the process while the file's uploading. Sure scaling can help alleviate this, but queuing might be better. You can queue the file upload and allow another server to perform the upload while your website informs the user that the file upload will happen in the very near future. The problem with this queuing example is that the user doesn't get realtime feedback if there were errors. I haven't dealt with RMQ personally, other than knowing that it's being used in a process I've developed and dealing with the delayed error logic.
What's 'failover'?
Each piece has it's own documentation on the specific website for that component. They aren't treated as a cohesive unit in any way other than by name. Can you download all the javadoc jars?
The work is no longer *manual*?
This is really cool. I'm getting into Java but I'm not interested in learning/using a huge IDE like eclipse or IDEA.
Why not threat semver as explicit versioning without the Release part? That way you would have the first number for things that break compatibility with older versions (like adding a new page that would mean editing another page), feature would be only for adding things without breaking other things, and fix only for repairing broken stuff without adding new things and without breaking compatibility.
Sure, Rabbitmq's response code, but not if the thing being queued is an asynchronous process as well. What we've done is store that response code which was provided to the system that rmq triggers in a database that can be retrieved later by the UI.
You can move to rabbitmq sync call and get the response code in real time from the end user. Problem is that user may have to wait for completion of the transfer. Either way, it's not ideal which bring me that this design is a bit old. Most people use an object store like Ceph to mimic Dropbox's like capabilities. Nevertheless your example does show a fire and forget with guaranteed messaging scenario. 
That’s a good idea. Never thought of using javadoc, thanks.
Because you don't always have the option...even if it breaks your heart 
Would you mind making it in plain text, or some kind of slides at least? Video tutorials always sort of suck (you can't search for keywords, or go back a chapter easily, you don't need additional interaction to not have a information input speed forced onto you, etc. Not to mention accessibility at all)
see Node.js, and electron
Definitely easier to pickup than Scala
You program a rollback, or a cancellation, or an automatic email saying it didn't go through, or notify a human being to fix it manually, or just retries, etc... It depends on the business needs and what's acceptable. You may no need a full rollback on every case. If avoiding full rollbacks takes away the need for distributed transactions on every transaction you are gaining on performance.
And then navigate the Javadocs in [Dash](https://kapeli.com/dash) for fast searching and browsing! 
There probably is no good answer without considering how that company makes their money, and how your cost/benefit affects their bottom line -- but i can't imagine that just floating the idea of a bit more money would somehow make you a bad candidate. I would not go crazy with the #, and i would ask in as polite and considerate way as i possibly could. Put yourself in their shoes on some level.
I know about it, JS is still not widespread serverside or on desktop.
I think I didn't explain it right. When I said distributed transactions I was thinking of the ones with two-phase commits.
First off, thank you for your response. &gt; There probably is no good answer without considering how that company makes their money, and how your cost/benefit affects their bottom line -- but i can't imagine that just floating the idea of a bit more money would somehow make you a bad candidate. While avoiding giving too many details they have over 10,000 employees, and seem to be doing very well for themselves. The difference between the top and bottom pay range is only $3,000 (for this position). Though I'm not sure how 'replaceable' I would be, which is my biggest concern. A good bit of the colleges in my area focus on Java though.
Especially since there is not much special about Java 9 without jigsaw. Gotta get that anchor feature figured out and stable!
So many wrongs in one short article. Please people, do proper research before posting complete crap. &gt; Java and JavaScript are the same language, OOP. OOP is a *programming paradigm*, not a language. Fact is that the *Mozilla Foundation*, not Mozilla (the company) maintains JavaScript but it was originally developed by *Netscape*. All in all, the post is completely useless and wrong in most statements.
You are in the completely wrong subreddit as so many hints on the page indicate. /r/javahelp and /r/learnjava both have tutorial links in the sidebar and in their respective wikis.
Notepad and CMD.
The "feature complete" deadline was missed quite a while ago and jigsaw just isn't there yet. I doubt they'll shorten the time allocated for fixes and other work just so they meet the scheduled release date. 
Depends what you're interested in. There are some interesting improvements to some of the java 8 features 
What improvements? I've not heard about much other than Jigsaw and an HttpClient.
Interesting. What I was hinting at, though, is that you cannot see into any non OSS repositories (which are most repositories out there)
I sometimes catch flak for this opinion, but I hold it very strongly: For your first job, don't worry very much about the pay. You should be entirely concerned with the value of the technical experience you will get. In fact, if you had competing offers, I would recommend a lower paying job that was giving you more valuable experience over a higher paying job doing repetitive work in an old technology. Because... You should quit that job after a year. You'll be quitting it for a 25% pay increase easily. The percentages go down after each successive hop, but for your first 3-4 jobs, a job-hop pays much more than hanging around waiting for a raise. And that second job will be extremely easy to land. Welcome to the world of recruiters hassling you for the opportunity to get you a job. We are SPOILED. And no, you shouldn't have a resume that makes you look like a job hopper, but in our industry, 3 jobs in 6 years is not considered a flight risk. And if I see a resume that shows your first job for a year, then your next job for two years, and you're applying to me for your third job, you just look like somebody that knows they are valuable. If you are good at your job, and this entry level one is only paying 50-60k ("only" 50-60k is something programmers get to say), don't sweat it. And I definitely wouldn't sweat a $3k band. If you're good, your next job will be for 75k, then 90k after that. But... be good at your job. ;) (And be humble... we're fortunate. Nobody likes working with someone that thinks they're God's Gift.)
umm maybe they can add more new features now that its delayed further? How about local variable type inference? http://openjdk.java.net/jeps/286
I plan to make the content available on an article on my blog quickly too.
All language developers claim they do. The python people care about backwards compatility, yet Python3. The Ruby people care about BC, yet Perl6. Caring about BC the way Java does requires more than just good will.
im still getting use to java 8
Intellij is the best so far. Additional bonus : if you're a vim user, intellij has the best vim plugin compared to other IDE. The vim plugin itself is officially developed and supported by the jetbrain teams. 
I'd be totally happy with a Java 8.5 that had the streams and optionals improvements plus maybe the new HTTP client and not a whiff of Jigsaw. I have yet to see anything about Jigsaw that makes me think it'll benefit my application at all, though obviously different people have different needs and I'm sure it'll be great for some people.
Thanks!
[Here is some guide](https://github.com/ariankiehr/java9-tutorial) I found searching in Github, incomplete though.
But no organize imports? That bugs me :(
I use eclipse for everything except Android work. Like all IDEs, it takes some getting used to, but overall I have no major complaints. And it's free. For android, I use android studio which is based on IntelliJ. IntelliJ is better than eclipse. It's faster, and has lots of intuitive little features that make it a pleasure to work with. For me, there's no single big reason intellij is better, but there's tons of small reasons, and those quickly add up. Unless things have changed, you can use the community version for free but only to create open source projects. Otherwise you pay. NetBeans is also free and is a great overall IDE. Once upon a time I had backwards compatibility problems with it so I returned to eclipse and haven't looked back. I'm sure it has improved tremendously. For java only, NetBeans is probably your best free IDE. I code in several languages and I prefer eclipse's multi language support. I really disliked the C support on NetBeans the last time I used it. Tl;dr they all have free versions. Test them all. IntelliJ isn't completely free.
Yes buddy. If you want to use https://start.spring.io all the time you can do it. And, your assumption of everyone is (has to be) hard core fan of IntellijIDEA may not be correct. I know how powerful IntellijIDEA Ultimate is. But there are few things that I don't like which prevent me to completely switch to IDEA. About the MAJOR ISSUE: when a new SpringBoot releases I will create the SpringBoot app with same old template and just change the version number in &lt;parent&gt; section. How hard that can be?? The point is there are people who has to use IDEA community edition only (can't buy or don't want to buy ULTIMATE for whatever reasons) and want to be able to create SpringBoot app from IDE itself, this template approach could help. Cheers :-)
&gt; Groovy Ugh. &gt; Scala NOOO &gt; Clojure This is a cool language, but how many people here would actually know how to use it? --- [THIS](https://kotlinlang.org/docs/tutorials/command-line.html#running-the-repl) is what you actually want. :)
Those people are retarded, and should be ignored. Banned, if they persist.
Personal preferences and all that.... I've been using IntelliJ IDEa since 1998, so it appears that I've become a "fan 4 lyfe" I guess. I did a short stint on a .net project in VS2015 last year and even with resharper I found the VS flow to be.... odd. Sadly I don't think I know how to use more than 40% of what it can do today, so I need to look for some training vids...
**Eclipse:** * Completely free * Plenty of plugins * AutoCompletion support is ok but not great * Will get random errors for unknown reasons * Installing additional plugins may screwup things **Intellij IDEA:** * Community Edition is free, but less features compared to Ultimate Edition * Excellent Editor and AutoCompletion support * More stable than other IDEs * You have to open multiple projects in separate windows or add them as modules * You can't see all warnings in code at one place. You have to run Analyse Code. **NetBeans:** * Completely free * Batteries included for Java/JavaEE development out-of-the-box * Good support for JavaScript/PHP development as well. Cheers :-)
intellij
Different people, different preferences. Its all well and good :-)
Eclipse except for Android experimenting, Google in their infinite wisdom decided to switch to the Intellij platform. Paraphrasing /r/mookymix, I use Eclipse because [It's faster, and has lots of intuitive little features that make it a pleasure to work with. For me, there's no single big reason Eclipse is better, but there's tons of small reasons, and those quickly add up.]
Citation?
I'm sorry, but this design is not only not even resemble FP, it's not even decent Java. In the words of Forrest Gump, "I'm not a smrt man, but I do know what love is..." "Love", in my case, is a deep interest (followed by a poor understanding) of the works of people like Rich Hickey, Eric Meyer, Brian Beckman, and Graham Hutton. This article starts with the author trying to "avoid boilder-plate code", while actively trying to re-implement a simplified POJO mapping. I would first like to state for anyone who is new to this issue, this problem has been solved before, by more than one library. One of the more common solutions found these days, and that's even used by the hippest of all the Java devs (ala JHipster) is MapStruct. MapStruct (of which I have no affiliation with) is a simple code generation tool (think JPA Meta Models) that uses reflection to generate classes at compile time to map Base objects to Dtos. This pattern would seem to be what the author of this article is trying to push towards, but because of a lack understanding of understanding of the language features (in this case generics and reflection) and a lack of understanding of FP/OO principals, just can't reach. The usage of public interface GenericConverter { E createFrom(D dto); D createFrom(E entity); E updateEntity(E entity, D dto); I'm not quite sure how this wasn't an obvious issue to anyone with anyone who had experience with the Java programming language, but the interface is un-typed. While I'm not a giant fan of MapStruct, the only thing that needs to be done to map one object to another, is to define something like public interface Mapper&lt;E,D&gt; { D convert(E entity); E convert(D dto); } But, I digress from my rant on solved problems, and just have to say that nothing that I just wrote is FP. Just because your API is using Streams, doesn't mean it's FP. Using Map (function not data structure) is not FP. Functional programming focuses, primarily, on data immutability, first class/higher order functions/ idempotence (1 + 1 = 2, no matter how many times you say it), and, just, data structure programming, in general. None of these thing have to do with Object mapping. I'm really sorry to say (I'm American, and I'm talking Canadian SORRRRRY), but this article provides no worth to the reader. So, don't bother.
Here is a citation that is good enough for me. https://www.reddit.com/r/java/comments/51ogxz/which_ide_do_you_use_advice_wanted_but_not_code/d7djgel I'm not providing it in MLA format, sorry.
&gt;Scala doesn't offer anything that increases readability (the most important thing I look for in a language) Then your priorities are misplaced. Readability is important, but it's certainly not the only thing that's important. Expressive power of the type system, for instance, is also important, and the only other language I know of whose type system is similarly powerful is Haskell. &gt;while having a much much larger stdlib So? Tree-shake it with ProGuard or something if it bothers you that much. &gt;not generating perfectly compatible Java 6 bytecode Why the *hell* is that a requirement?! Java 6 is dead, buried, and thoroughly decomposed by now. &gt;and having a ridiculous nullity system via `Optional`s instead of the cleaner, more elegant `?` system that Kotlin uses. It may be more concise, but it's not at all elegant. What you've got there is a bunch of specialized language features that are useful solely for dealing with potentially-null values. What a waste. The correct solution here would be union types, as in Ceylon, which neither Scala nor Kotlin have.
...That's the point of a subclass.
&gt; Then your priorities are misplaced. Readability is important, but it's certainly not the only thing that's important. Expressive power of the type system, for instance, is also important, and the only other language I know of whose type system is similarly powerful is Haskell. No, it is the most important thing. I don't care if you can do clever shit. Writing code is easy. Reading code is hard. Kotlin makes reading code easy. Scala makes reading code impossible. Being able to do clever shit isn't a good thing, it's a **very bad** thing. Kotlin is all about being explicit while still being concise. Scala's love for implicits kills readability. &gt; So? Tree-shake it with ProGuard or something if it bothers you that much. Ugh, ProGuard is god-awful. I have to worry about whether, even though my app compiled, things that are necessary were stripped out. &gt; Why the hell is that a requirement?! Java 6 is dead, buried, and thoroughly decomposed by now. Except for Android development, where Java 6 is still the only thing you can write against unless your app is set to run only on Android 7.0. It's just one of the biggest ecosystems in which Java is still used, no big deal. &gt; It may be more concise, but it's not at all elegant. What you've got there is a bunch of specialized language features that are useful solely for dealing with potentially-null values. What a waste. It is very elegant. It's readable and makes complete sense. The only advantage for `Optional` is that it's not "blessed" like `?`, but null deserves to be a blessed feature. null values are necessary and yet very dangerous, and the language should be completely aware of the semantics surrounding them at compile-time. Kotlin was created by industry experts in working with large code-bases that have to run on the JVM. Scala was created in academia. It really shows in the design philosophy of both languages. &gt; The correct solution here would be union types, as in Ceylon, which neither Scala nor Kotlin have. Nah, union types get messy.
I'll check out those links, but I've seen similar papers on the implementation and extensions to Java - and I wouldn't really call that a language which offer novel academic ideas or isn't pragmatic. Can you give me specific examples of unifications of OO and FP in Scala that are academically interesting? IME, it tends to just have a bunch of OO features (subtyping, methods, classes) and bunch of FP features (first class functions, higher-kinded types, higher order functions) with the two never really meeting. Sure, the FP features are implemented in an OOish way (eg. functions are actually a kind of class) but even typeclasses have to be hacked into the language through the implicit system.
&gt; You must not have written very much of it, then. Yes, everyone knows that good programmers write a ton of code and don't read any existing code. &gt; Attitudes like that are the reason for most of Java's flaws. I'd prefer not to repeat those mistakes, thanks. Like what? Kotlin has everything that Scala brought to the table that is decent, and more, and none of the implicit bullshit. &gt; At the expense of imposing severe restrictions on expressiveness—some of the same ones that I switched to Scala from Java precisely to get away from. No fucking thank you. Again, "expressive" is the exact opposite of Scala. Kotlin is expressive. You see exactly what the code is doing. It doesn't do any magic. Writing an extra method call takes all of a quarter of a second with IDE autocomplete. Figuring out why something you didn't expect to happen is happening (such as magical Scala voodoo) can take a very long time. &gt; Has that ever actually happened? [Never](https://www.google.com/search?q=noclassdeffounderror+proguard) &gt; False. Java 7 features are supported by Android ≥ 4.4. Java 8 features require Android ≥ 7.0. My mistake. Still, almost nobody is doing minSdkVersion 19, and even if they are, Scala *still* doesn't provide 100% interop with Java 7 bytecode, does it? &gt; No. Just no. You're right, I love NPEs. &gt; lol Don't tell me you use Eclipse or something ridiculous like that. :) &gt; FTFY Scala was created by people who would rather see how cleverly they can write a specific piece of code, while Kotlin was created by people who just want to get work done instead of playing code-golf.
We use SAML, but one client we've worked with had a custom SSO solution which required session sharing within the container (WebSphere IIRC). It wasn't LTPA for some reason. If we write new software without prerequisites, we use SAML (I prefer Spring Security SAML).
Wow, I've been out for a while, but content has gone down quick. Where's the adsense people when you need them?
Everyone should be strapped in a chair, have their eyes peeled open, and forced too watch an OOD talk by Uncle Bob before finishing university.
Call it dogmatic, mainstream, or whatever, the man speaks the truth, once you get past the hubris. Teach people to start with the abstract and to keep pushing implementation off until the end. Implementation will always be off, but at least, people can always see what you're doing right/wrong through your design. This is super helpful when trying to figure out what new/young devs were/weren't doing/thinking, and is something I try to stress.
&gt;Like what? Kotlin has everything that Scala brought to the table that is decent, and more, and none of the implicit bullshit. Implicit conversions are a useful and powerful feature, not “bullshit”. I would like to see them made safer to use, but I'd much sooner deal with the unsafety than deal with not having them at all. Other things Kotlin lacks that I am not interested in trying to live without include: * Pattern matching * Macros * Typeclasses (which Scala implements via higher-kinded types and implicit values) * Custom operators (another feature that is to be used sparingly, but is very useful) * Proper list comprehensions (with `yield`) * Multiple inheritance of fields and instance initializers (i.e. Scala traits) * Custom string interpolation &gt;Again, "expressive" is the exact opposite of Scala. Kotlin is expressive. Lol no. See the above list for why. &gt;You see exactly what the code is doing. It doesn't do any magic. Just because you can't wrap your mind around Scala implicits doesn't mean they're magic. Their behavior is quite consistent and predictable; you just don't understand it. &gt;Writing an extra method call takes all of a quarter of a second with IDE autocomplete. And makes the code less readable. So much for that being your #1 priority. &gt;Figuring out why something you didn't expect to happen is happening (such as magical Scala voodoo) can take a very long time. That generally doesn't happen in any statically-typed language that you actually understand. If we were talking about JavaScript instead of Scala, I'd agree, but we're not. Again, you just don't understand, and obviously haven't bothered to try. &gt;Still, almost nobody is doing minSdkVersion 19 Why not? &gt;and even if they are, Scala still doesn't provide 100% interop with Java 7 bytecode, does it? Yes, yes it does. The upcoming 2.12 release won't, though. &gt;You're right, I love NPEs. Really? I don't. That's why I use `scala.Option` everywhere. It is admittedly a bit verbose, and that should be improved, but not at the cost of crapping up the language with special-case language features. &gt;Don't tell me you use Eclipse or something ridiculous like that. :) Ugh, no. IDEA or GTFO. &gt;Scala was created by people who would rather see how cleverly they can write a specific piece of code That's sorta-true of Haskell, but not even remotely true of Scala. If it was, Scala's designers would never have bent over backwards for Java interop like they did. &gt;while Kotlin was created by people who just want to get work done instead of playing code-golf. With all those missing features, I'd say it's more of a bondage-and-discipline exercise.
Netbeans - came bundled with the JDK when I was learning. Honestly, you can't go wrong with any of these three. The problems happen when you have to switch and learn the quirks of another IDE.
I think, from this level of knowledge, you were looking for /r/webdev/
Funny enough it reminded me of the articles written in the early web days...
Ultimate is free for students though
You can also get the ultimate edition for free by proving to them you are a student/instructor. You could also get it by other means... but I really doubt you'd need any of the ultimate edition features anyways.
It seems Java 9 should be still delayed : http://mail.openjdk.java.net/pipermail
intelliJ will organize imports/remove unused imports/etc.
I mostly agree with your comments except for eclipse and intellij stability, they both have quirks and it teeters between which is more unstable. I also feel like eclipse has some amazing features like mylyn.
Do you have any other wisdom? You basically just made my month with that. You have no idea how awesome this is when you don’t have internet.
You don’t even need a .edu email!
That makes one of my projects so much easier. Thanks.
Some extra info: this works internationally, not just americans with .edu mails. As a student you get an account that works for all Jetbrains IDEs, not just IntelliJ ultimate. They have some great IDEs for php, Python, C/C++, javascript and egen SQL IIRC. They really made me a loyal customer by this deal. 
All major new features are listed under [JEPs targeted to JDK 9](http://openjdk.java.net/projects/jdk9/)
I felt the same way when I discovered this tool. Some of my teammates use the Intellij plugin, but I don't. In Dash, I only learned the other day that there is a third-party exchange for docsets. That's been useful for finding more docs without having to build a docset. I take it you found this [tool for making docsets from Javadocs](https://github.com/Kapeli/javadocset#readme). Enjoy! 
Didn’t know about that. Velocity has the repository built in, and the repo already has Apache Commons in it. So convenient. Thanks again!
Are you willing to pay for IntelliJ Ultimate? If so, go for it If not, look at the feature difference between ultimate and community, can you work with just the features of the community version? If so, go for it If not, then the safe bet is Eclipse
Indeed, just don't make the subclass into something entirely different from the superclass. This is okay: Animal -&gt; Cat; this is not: Animal -&gt; Airplane.
Awk, come on! Do we really have to digress into a pun thread?