You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The thing is: actually it's a good thing that we are forced to "merge" this delta based db changes. Because execution order matters. I only dislike the thing, that firebase did not think about the implication of their file naming. It would be far better to have the filename unambiguous like v12.sql to force developers to merge their conflict. The current mechanic simply shifts a merge time error towards runtime (or burdens developers to always double check if their merge requests contains a db change - which is error prone). Liquibase is better in this regard, because the descriptive metadata is a comment within the file. 
Can you extrapolate on the magic going on? Are you referring to it's heavy use of annotations? Or is it not customizable at all?
Cobol is also prevalent in the finance industry.
While I'm using Spring Boot I would not recommend it for starters. It's certainly not lightweight and don't be fooled by the ease to get started. The day you need some customization will come and then you need to dive in which is a long and hard journey. This day came to me when I had to implement some complex custom authorization with Spring security. Pro Spring is that it's widely used in the enterprise. Good to get jobs. II haven't used Jooby or Javalin but both look very good to start web dev in Java.
It's highly customizable. But to do so you need to understand its DI system and autoconfiguration quite well. As example try to customize Spring Security authorization ... Everything can be done but the easiest thing is already hard.
And as a newbee after that you're lost. The OP wants to start web dev with Java. JHipster is fine and dandy if you're already a Spring pro and want to save you some typing.
I would suggest to try hackerrank.com. It has problem solving problems and you can solve in any language. A big plus is a lot of big companies take initial test on hacker rank before calling for job interview. 
Also possible, but lots of effort depending on the change and your style of development. For example when you drop a column, create a copy of your table before doing it. If its a big table, only the affected column + pk. Drop the backup table some versions later. The true issue is something different: what's your strategy when data was already stored within the small timeframe your patch was already deployed in production? You lost your opportunity to undo your patch without consequences. 
Hmmmm it might actually work!
You might be familiar with IDEA on-line inspections that highlight some problems with the code and might suggest fixes (e.g., `Optional.get` with no `Optional.isEmpty`). I'm suggesting that if you go with tags, the IDE developers may incorporate some inspections that, given the IDE knowledge of the method call hierarchy, suggest that the Javadoc of the method lacks `@tag factory`.
not sure if there's anything currently usable, but eclipse at times has at least dabbled in this space. i've never followed through to get it working, so not sure where exactly to point you, but a couple of leads &amp;#x200B; [https://www.eclipse.org/community/eclipse\_newsletter/2017/may/article4.php](https://www.eclipse.org/community/eclipse_newsletter/2017/may/article4.php) &amp;#x200B; [http://eclim.org/](http://eclim.org/) &amp;#x200B; eclim sounds like the more mature tech and it's possible that it "just works". good luck and report back if you get anything working ! &amp;#x200B; &amp;#x200B;
Just looking through your code, I noticed that you use `privateLookupIn` in ObjectMirror, while this class has a Lookup field. `privateLookupIn` requires that the target class is open to your library, which is not needed if you use the provided lookup. Also you use `MethodHandles.lookup()` as default value for the Lookup, a better default value would be `MethodHandles.publicLookup()`. The API looks nice, through.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for the insight, it does look a little steep 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Enterprise will pay to get support. 
Use openjdk (and corresponding jre)
Some will pay, but some (most?) will probably just move to OpenJDK. My company is moving to OpenJDK, and I know of many others that are also.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/9lyjt6/im_extremely_new_to_java_and_wrote_a_quick_test_i/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
https://beyondgrep.com/ `ack --java - g Abstract "private.*\("` HTH! 
All I can see from the thumbnail is Hellman’s mayonnaise 
Do yourself a favor and don't jump on the spring train and learn vert.x instead. It is faster, leaner and less magic than spring. People recommending Spring do so because that's all they use at their boring job. Just look at the techempower benchmarks and ask yourself the question if you really want to invest time into something that is slower than node.js
Spring's reactor is slow in comparison to vert.x
in theory, a nice result for java. but the methodology for this study is garbage - allowing the study designer to pick and choose whatever result s/he wants this is nothing more than cloudfoundry propaganda 
TL;DR Kafka is a distributed log, _not_ a message broker. Stop using at as such, you'll only hurt yourself. 
Thanks for this insight. I will keep it in mind.
I am confused by your comment. OP asked for a CLI tool for searching code...
Pick up a copy of "Cracking the Coding Interview" and spend a few weeks memorizing brainteasers that in no way apply to the work you will be doing.
Start learning spring ecosystem
Spring, maven, and hibernate are good things to know 
&gt;How many windows are there in Manhattan?
12
office politics
If your a junior dev they’re gonna focus on OOP design questions, mostly(inheritance, abstraction, polymorphism, encapsulation). I can almost guarantee they’ll as you to list those and explain. Difference between abstract class and interface. Different types of collections(maybe). White-boarding exercises will be along the lines of FizzBizz, reverse a string, traverse a tree, fibonacci sequence. What’s big now is restful services, spring/spring boot, and some sort of database work will be asked. These are probably not required as must haves for a junior but help. If you have a github account, that helps. The source control knowledge will help but might not be a must have, either. As a junior - they will want to see problem solving skills and how you think more than anything. If you aren’t sure how to do something, talk through your thinking, you don’t necessarily have to get it completely right. Lastly - display a passion for the tech and a willingness and eagerness to advance your skills. Good luck!
Every (good) employer knows that most of what you need to know on the job, you'll have to learn on the job. They're looking for a solid framework where you can pick up new facts. You want to know how to decompose a problem cleanly into helper/sub-problems. Also, the fundamentals of Java's memory-model (everything's a reference; what lives on the heap and what's on the stack, and ideally how that might be different in C or Rust). But 45% of your job is knowing fairly-specific-libraries (e.g. Spring or other frameworks), and 45% is knowing the architecture/organization of the projects you'll be thrown in to. Those last two, you'll pick up when you're working 40-50hrs/wk for months straight. (Oh, and the remaining 25% is knowing how to communicate well, and be a good team worker.) &amp;#x200B;
Thanks! This pretty much touched on everything I thought I'd need to know. Also there's some stuff on here that I've been hearing around and I'll have to look into.
Java
Your regex is a little loose. Never used ack so I could be wrong... `private int someVar = someMethod();`
Not necessarily before, but knowing Spring, Springboot, and Kotlin won't hurt these days.
Thanks!
Right, but you wrote: &gt; I do it almost every other day... Why would you do that almost every day? I do realise it's useful in some rare cases but on a day to day basis?
DBA here, please learn at least the basic principles of good DB design. Don't let your ORM do it for you. And when you're at a company that has DBAs, remember that we're not there just to annoy you :) We care about your applications and projects too, and have already stepped on a lot of landmines that we can now help you avoid. 
Everyone’s covered some good basics. The difference for me was what the “senior devs” knew and weren’t saying. Hence tough code reviews. I learned a lot of the senior knowledge from Elegant Objects 1 and 2. Hope it helps you as well. 
Red tape 
CI/CD pipelines. Visual Studio (or git). JUnit.
Wait what? ELI5 plz
I'll start first with asking why you're still using an external XML for your configuration. When you separate your source of truth across multiple layers, it's easy to introduce brittleness into your system, developers won't know, and they'll begin to bootstrap and spaghetti code to work around it. That being said, it is common in the micro service architecture to implement either a common model library that is pulled in as a resource(jar) into each service, or the micro service implements its own set of models for the entities it cares about. 
Yeah I would assume OP knows git and at least the basics of JavaScript/html/css and probably MySQL since odds are you’d have to learn and use those in any CS degree. Although I suppose that may depend on the school and program 
Lot of coding interview practice
Look into Jenkins, maven, testing (unit testing, integration testing, performance testing). Look up cloud providers like azure or google cloud platform. Understand Owasp top ten.
Just an advise -- once you get a job. Just try to implement design different ways that make sense. Try as much as design pattern as you can. You will learn power of the programming language so much doing that.
How many fish are in the ocean?
Companies still use CVS... Used to work for one not so long ago.
&gt;Yeah I would assume OP knows git and at least the basics of JavaScript/html/css and probably MySQL since odds are you’d have to learn and use those in any CS degree. I can confirm that this statement is false. 
45... + 45.... + 25....
&gt; Although I suppose that may depend on the school and program
High performance tips: JVM engineers are smarter than any programmers. Keep allocation low. Pool heavy objects, learn binary protocols, realise single thread lack of context switching is going to beat any multi threaded systems. IPC should be done with with off heap unsafe buffers. c++ isn't the performance magic bullet that will be thrown down your throat in education. Big frameworks are important but not the be all and end all. Spring hibernate guice are important. 
Started my career as a dev last May. We use CVS and I had never hear of it before. 
Would you believe i didn't have to take a single English class at my college? Died what it did to my comprehension abilities.
Awesome man! I'll also tell you that most DBAs I know, including myself, are stupid busy. So sometimes, people figure they won't bother us with what they think we might consider "stupid questions." But the best parts of my day are when I get to teach a dev (or anyone else for that matter) how to accomplish a certain task, or how to analyze and optimize their sql stuff. Even though we tend to be in infrastructure, we're a different creature altogether than sys admins. And one of our normal tasks is to be an interface between Dev and Infra. (Sys Admins seem pretty stuffy from my pov :) even though I guess I technically am one?) So, if you need something, that's what we're there for, especially if it supports the health of the data that backs your application. And again, we will say no to things sometimes, but the good DBAs will try to find an alternative rather than just saying "Narp, ain't gonna do it." We love to help you out with weird ass problems when they pop up, as long as we don't have half a dozen meeting scheduled that day, or are finishing a project and the deadline is today. We're not Superman, but we can do a lot to help you out :) And just to forewarn you, if you're in a larger company, a lot of the devs will shit on infra because it seems like they're just being slow assholes. They aren't but it will seem that way. Pro tip, ask a DBA to help you get the issue pushed forward if he/she has a few minutes to spare. We can make stuff happen most of the time. But be quid pro quo, and let your boss know that we fought for you. We love that kind of environment, less politics, better relationships, and better work done in less time. This is a novel so I'll stop there. Wish you the best with your career! 
haha not worries 
Non coding : Maven, Git. Coding : OOP's, Exception Handling and Collections basic, write couple of junits and you're good to start
Most entry/junior level development interviews, in my experience, focus more on CS fundamentals over language specific knowledge. I'm absolutely not saying this is a good thing or "right", but it's usually what I see. Know how to whiteboard sorting algorithms, b-trees, "fizzbuzz" (for some reason, it's still used sometimes), and potentially some kind of object oriented approach to a simple problem. Being able to speak intelligently about version control and Agile development processes will probably help. If they DO ask Java specific questions, basic knowledge about Maven and/or Gradle and dependency injection (especially Spring) are going to help. My biggest tip for new job seekers is to have a public Github repository with some hobby projects, or having any contributions to open source projects. It doesn't really matter how many stars it has, but if a candidate has projects that they do in their spare time for fun, it's generally a good indicator that they're passionate about programming and will be enthusiastic about learning new patterns/frameworks/etc. It also demonstrates at least basic knowledge about version control, and if it's contributions to OSS, it may show that you know how to abide by existing code licenses/code styles/unit testing/etc. Good luck!
You should know that as a recent grad an employer expects you to know nothing but the simple basics. A good employer will be hiring you for your potential, not any specific knowledge around tools or frameworks that may have been mentioned in this thread. Each company is different, uses different tools, frameworks, methodologies, etc. For example, I have seen spring/hibernate mentioned in this thread a few times. My shop doesn't use it, your knowledge around would just be ignored in an interview. Instead show you're eagerness to learn, that once hired you can quickly become a contributor. So I would suggest that you spend your time reading blog posts, and books. Follow some prominent engineers on twitter. The things you learn in blogs and on twitter are great conversation starters in interviews and it tells potential employers you have an interest in the field. - https://www.joelonsoftware.com/ - https://blog.cleancoder.com/ - https://blog.codinghorror.com/ - https://martinfowler.com/bliki/ - http://thedailywtf.com/ - https://hackernoon.com/5-books-ill-read-to-facilitate-software-engineering-practices-2f42a7df3a0d
May I ask you? I heard from java senior dev that java enterprise development is really hard. It's more stressful and nervous compared to other kinds of programming. And he said that if you have a choice you'd better choose everything but enterprise. What can you say about it? Is it true?
I am a software developer that works with our top level support on customer issues. Depending on the day I could be working in java, Pascal, python, ruby, Perl, c, bash, JavaScript, typescript etc. I also work on third party integrations looking at a lot of logs in any given format. We have our own linux distro and build all of our own packages from scratch. We utilize different build scripts and docker images that are written in shop. There are no kidding millions of lines of code. For 2.5 years I wrote reflex all day long to parse data from logs for third party integration. From day to day I don't know what I will be supporting within our product. I use simple tools like grep and pcregrep to find quickly what I am looking for :) When you have your own OS and as many applications as I do running it's easier to just turn up the loglevel as high as it goes and `tail -f /var/log/someMessaage | grep whatEver` to quickly find what I am looking for. Or `grep -v` whatever some lazy dev was over verbose about...
When I am writing Java I do use eclipse. Most other languages I use sublime. When I am looking for something specific I grep. See my other response. I have a large codebase I work with.
How many fingers am I holding up?
Thanks for the feedback, I will investigate it. The publicLookup() definitely sounds better as the default value.
-12
This is entirely dependent on the person and the team/product. I would take it with a pretty big grain of salt.
Ya, I'll leave the regex to OP. My point was ack. 
OP is a java newbie but certainly not new to web dev. As Java webdev if I wanted a hand in learning asp.net I would not want people showing me how to do asp Hello world but practical stuff that would get me going quickly to get me back to develop at the same proficiency that I am developing now with my current tech stack.
First of all, thanks a lot for such a detailed response. A couple of questions again. "Low marketability if you need to find a new job. (Unlikely to have anything hawt and sexy on your resume)". I thought that work in enterprise for 1-2 years guarantees you to find new job in another enterprise company without any problems ( isn't there a shortage of java devs on the market?) I think it'll be not so difficult to switch the language/direction (as you said people go to managment) after 1-2 years if you understand that enterprise isn't for you. And thanks for your response again
Don't waste your time on hibernate. Learn SQL and use a library that let's you use SQL directly. Jooq, Jdbi, sql2o, Spring template, whatever. JPA/hibernate is a death trap.
That there are far too many Java developers with whom you must now compete. I'd advise you to add more skills in your résumé to differentiate yourself.
Yep, your correct after 1-2 years of experience as a Java dev you are A LOT more marketable than someone right out of school. And there is a shortage (in most places) of Java devs, That's a reason there are so many H1-B visa's of developers working in the USA (mainly from India). But there are a few things to consider: 1. Economic Low's: Sure there are a lot of jobs now, But we have been on a steady increase since 2008 and it will be corrected(might be corrected even faster with Trump's trade laws). When all projects are put on hold and companies just try to stay afloat there will be few new jobs and tons of layoffs. I have worked with older guys from the 2000 dot com bubble and the 2008 collapse, One of them was interviewing as a senior developer against a guy that wrote early code for Netscape navigator for a rather normal crappy dev job back in 2001 and couldn't get employment. When budgets are frozen and all that's needed is support, not many devs are required. Companies will be able to pick and choose the best resume's. 2. Ability to move to things besides Java: I doubt Java is going anywhere soon but you never know. There are tones of Java-Only resumes out there. If i was putting together a project with Spark. And i had to choose between a developer with 2-3 years of scala/spark experience vs a java developer with 15 years experience i would choose the scala guy. Or even a Java/Scala Guy. 3. Framework/Tools Experience: Even if your a java developer with experience, companies will prefer people with experience of the new frameworks they want to use. A resume with SpringBoot/Gradle/Java8+/Kafka/TDD/Micro-service experience looks better than a guy who has been supporting a Struts Java 6 App for 10 years. NOSQL has been big for the last few years as well. I have been lucky enough to use MongoDB, Hbase/Hadoop/Spark the last few years. It got me my current contract. 4. Just because you CAN get a job does not mean you can't get a better job: You may be able to get another enterprise job. But you could get a much better job with much better pay if you stand out. 5. Outsourcing: There are a lot of people overseas that can do your job for much less. What we build is software. Everything you do can be done over a wire. Its not hard to get someone in India to do a simple java job. Unless you have the experience to do things they do not know how to. 6. Pigeonholed/Ability to take risk: If you have a family or have debts you may be stuck in your current job, because switching jobs to learn new skills may mean a pay cut. This can make it hard to leave a job if you NEED that money. And if your current job offers very little chance to better yourself, it can be a pickle. And it can end up keeping a person in a job for decades 7. Job satisfaction: Doing the same thing everyday can be soul crushing. Its a job at that point, not a career. I jump at any opportunity to do something new, other than stock java. 
Along side the tech stack that people are writing about, I'd recommend reading: Design patterns, Clean code and clean coder are really good books to know for everyone. 
_I haven't had any prior computer science jobs and I'm a little concerned about what I should know before I start applying places._ Everyone expects you to know nothing. Don't worry about learning the frameworks beforehand, try to understand the fundamentals of Java as good as you can, though. First half a year or so you are probably producing less value than your salary is to the company and that's okay, it's a learning period. Just have an open mind. Don't be afraid to ask for help. No one is going to care how much of colleagues help you used during an assignment, as long as you learn from it and the result is a completed assignment. 
Yes, unfortunately...
&gt; Finally, be prepared to see some really old legacy code, that will make you wonder what the developer was taking at the time and where you can get some Also, be prepared to look at your own code in half a year and wonder what you were taking at the time and where you got it.
Coding interviews are less likely to be about specific Java frameworks and more about algorithms, Big O notation, and workflow. It'll help you tremendously to have a Github account with public portfolio of example projects you've developed independently. It'll help recruiters and technical screeners to get past the initial steps. Java coding styles vary dramatically. Java 8+ companies use more lambdas and cloud-hosted Java. This is quite different than legacy Java 6-7 shops. Make sure to interview *them* and be clear what flavor of Java you want to work on.
I am in a similar position too, damn these java code basis in enterprise are an absolute over engineered mess and ticking time bombs full of bugs
Thanks for the advice, appreciate it!
Be that as it may though, Hibernate is still one of the most sought-after Java frameworks. So if you're looking for a job, I'd still recommend it, even if you may be right.
Can agree. Most companies use frameworks like spring boot in their applications
I love Kotlin, but if you aren't an Android dev it won't really help your résumé
Java is fine, you will find enough jobs on the market. It is the most spread but, unfortunately, not because it is the best but simply because the majority of developers do not understand its ecosystem properly, thus creating monster applications which require a lot of maintenance. &amp;#x200B; That said, simply knowing the language is enough to get an entry job. However, on the long run, make sure you understand what you're working with. In a year, I would expect you to be able to clearly explain what is Java (the language), Java SE (the specification and its 2 big implementors) and then Java EE (spec + implementors) or Spring, depending on what you will be using. Make sure you don't fall in the trap of "learning by doing" and end up in the scenario I described here: [https://www.amihaiemil.com/2018/01/24/teach-them-the-language-first.html](https://www.amihaiemil.com/2018/01/24/teach-them-the-language-first.html) &amp;#x200B; Again, what I said above applies on the long run, it is not necessary to learn all of that now :) &amp;#x200B; &amp;#x200B;
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
RabbitMQ provides queuing infrastructure. The basic need of using a queue is to be able to process tasks asynchronously. By definition, using a queue means to intend to actually process the tasks and clear out the queue. &amp;#x200B; Apache kafka on the other hand, is a distributed log, i.e. it allows writing of events. The idea is that you would never delete them from the database. Of course, any system can be modeled as a series of events but most systems deal with transient data, i.e. user updates their preference for ice-cream. Do we really need to know what the previous preference was?
Above all, write good exception handling. Catch only what can be recovered. Never swallow silently. And for the love of all you hold dear NEVER catch NullPointerException. Speaking from 21 years experience.
"who wrote this aweful code???" (Git annotate) "Oh, I did. Three months ago...."
How to udate shitty legacy code, that you want to rewrite, but your boss says thats going to cost too much. So you program pissed off for 6 months until you bring it up again. Your boss says no, you say ok You hand in your 2 weeks, then go back to your old job.
Write some today for whatever code you most recently wrote, today, now even! it's not hard. Don't overcomplicate it, just use junit, run your classes, make sure the do what they're supposed to do with asserts.
No, not true at all. Work/reward, games dev is harder. I find enterprise pretty easy going, I rarely work overtime that I don't genuinely opt into as I enjoy it. Enterprise is perceived as boring but I enjoy it, and demand for good devs exceeds supply.
&gt;so far as a senior in CS I’ve never written a single test. Spookiest statement of the month right here.
Just a typical critical thinking problem asked in interviews. How many miles away are we from the sun?
Just start. You'll learn what you need on the job. If you want to study something valuable in the meanwhile learn the super basics of Spring MVC, Maven, Git, Scrum 
I agree knowing SQL and using one of those others would be best practice but there's way too much Hibernate code out there to advise someone to ignore it.
Between OP and GP, I think you've really nailed the state of the Java ecosystem. It's crap, but it's in high demand! Now, I say this as someone who did PHP for 10 years, Rails for another 10, and a couple ASP.NET projects too, who is just trying to do my first "Java" web app. I'm subscribed because I'm looking for what I seem to be missing. How can it be so popular when *I* think it's such missing SOOOO much compared to other languages and frameworks? Then I see a comment thread like this, and it seems to confirm that I'm not missing anything. Honest to God, if I could start over, I'd avoid Spring/Data/Rest/JPA/Hibernate entirely, and write my own backend from scratch. To save time and try to catch up, I'm trying Grails with GORM, but the jury is still out. I may still have to fall back and write hard-coded SQL statements and JSON de/serializers. Unbelievable.
You should stick to spring boot 2 every other framework lags behind in support, dev, money, marketshare.
Do not homebrew a password manager 
1. No. 2. No. 3. Mu. OpenJDK, the source repository, is free and open source. Oracle is the only one with commit rights. OpenJDK, the distribution, is built off of OpenJDK-the-repo, by Oracle, and is free to use and download. Note, it becomes an unsupported product (Oracle wont host the binaries, and even if security updates are available, oracle will not release updated binaries) the day a newer java version is released (new versions are released every 6 months). You may have heard about 'long term support' versions: That doesn't count here. Even OpenJDK11-binary (11 is an LTS version) is supported for only 6 months, until the first OpenJDK12 binary is released. OracleJDK, the distribution, is built off of the exact same OpenJDK-the-repo, and is basically the exact same thing, except with a few oracle tools added. It also has commercial support. _ALL_ versions of OracleJDKs cost money. It's their commercial, for-money, supported offering. These versions are maintained for longer, especially the LTS versions. AdoptOpenJDK is both a project and the name of the binaries that this project releases (so, this is NOT oracle): Also based on the same OpenJDK-the-source-repo, they try to apply security patches and support them for longer. Free as in beer, free as in libre. TL;DR: Download java from adoptopenjdk. 
Have you ever tried to use IntelliJ? I have 300k LoC in my codebase and codebase-wide text search works flawlessly &amp; is mostly instantaneous
Nothing I said indicated otherwise. In fact I was asking for resources so that I might learn how to do just that. Do you happen to have any, or were you just using my comment as a soapbox?
Hibernate or other ORMs are not necessarily a death trap. But! You have to know when to drop down to native queries and JDBC or lean on the DB with PLSQL. As a rule, I don't use Hibernate for reports. Let the DB do it's job.
I use eclipse mostly. Never really touched intellij.
I highly recommend it - productivity boost is worth the initial hassle
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Certainly. Don’t believe the FUD, subversion is a perfectly fine version control system. I know both pretty well and they both get the job done. Git does have way better offline capabilities of course, but besides for that they are equal in capabilities. Git got really popular really quickly not because it was vastly superior but because of github. In fact some developers just assume github is git and you have to use github to use git. 
+1 for learning Java Stream API (lambdas) - definitely makes code much more concise while maintaining or often times improving code readability. Plus, it can be a real time-saver for time-boxed white board interview questions.
Licensed or pirated?
Why do you say visual studio *or* git? 
Also, as a general rule: If something is advertised to scale to millions of something, but you only need a couple hundreds of something, it's the wrong tech. Massive scaleability is always a trade-off
My man, I'm not arguing for nor against Hibernate. I'm just saying that the majority of hiring reqs are not for "this new project that we need to get off the grounds asap" because those projects generally get eaten up by internal devs. The majority of hiring reqs I've personally seen are, "we need to maintain this app that someone wrote 2-3 years ago" (if you're lucky, it may even be 5-10 years ago). In such a job interview, you can't negotiate to use pure JPA. You won't get hired by saying "don't worry, if you let me, I'll refactor the whole app to not use the framework I don't like". Of course, it highly depends... Not all job reqs are for legacy/longer-running apps, and some reqs would certainly be open to changes. However, my personal experience is, that's certainly not the majority, hence learning hibernate will help your prospects in any case. 
SHUT UP ABOUT THE SUN
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; a majority of the new backend projects started at work are now in Kotlin That's pretty far from universal.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Basicly what /u/ApprehensiveSand said. If you have a method called add(int a, int b) What you want this method to do is add and return the sum of those numbers. There for you write a test that expects 2 and 3 to be 5. That is basically it, you call the method and the number it returns should be expected by you, so if you or someone else make adjustments in the code that other places use, the test will tell you it's not doing what it's supposed to do and fail. Then you get a heads up warning that other stuff can break.
This, I'm a mid level java developer. I'd also recommend Gradle and git.
Yeah I do, you'd be surprised the amount of people who don't know git well.
That's not correct. Oracle provides commercial builds and free OpenJDK builds. See this [explanation](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later).
Let’s not try to remove the whole concept of servlet containers, etc. in practice, using something like Undertow you can have whatever you want-if you want to write all the handlers for everything yourself after HTTP (you don’t) then you can, and if you want an almost-fully-automagic container that Just Works with Spring or whatever, you can do that too. Spring still relies on a lot of, if not directly servlet container features, subcomponents that went into it. Spring Boot still even uses one of the servlet containers as a web server: tomcat, undertow, or jetty depending on how you configure it.
This is a fuzzy response, and as such not necessarily wrong. IF you only need some parts of the things that make up JEE, you can use various things that implement them until you have what you want. As an example, you can have just servlets and JPA (Hibernate is the reference implementation) by using Tomcat and including appropriate jars in your app. At “scale” (whatever that means this particular second), this isn’t fun. There are a couple primary ways that the industry seems to be dealing with this: 1. Make the server more modular, and only turn on what you need. Wildfly/JBoss EAP take this approach, and still have features to manage groups of servers, etc. 2. Package everything along with the kitchen sink into your application, so that you can just take a firehose of data and spray it at all the servers. Don’t like how one is behaving? Nuke it, spin up a new server (container?), copy your kitchen sink there, and run it. This *can* be done somewhat intelligently, but as usual that by no means implies that lots of people *will* do it intelligently. Things like Spring Boot, and kinda Wildfly Swarm, take this approach. In-between, all the other stuff trickles through the cracks-you can use JPA, or JTA, or JMS, and so on along with any of the above options. Some methods will be more automatic than others, and some will be easier to scale than others.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9mc81s/java_9_programming_for_complete_beginners_in_250/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
dog and pony showmanship
Good news is: that's totally not true. The job search is lind of wrong: nobody codes for widlfly or glassfish, but for Java EE.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The related original paper: https://www.cs.utexas.edu/~wcook/Drafts/2012/ecoop2012.pdf
Let's take a look at how you might write code that controls a rocket. A rocket is pretty complex, however *we don't need physics to make an outline of the code*. The code we're going to outline will control the rocket boosters throughout the flight. Something needs to control which boosters fire, when they fire, and how much thrust they exert. Now, the rocket's flight can be broken down into a few stages: * Launch stage * Flight through atmosphere stage (when air resistance has to be taken into account) * Flight through space (when air resistance becomes negligible * Payload release stage (rocket's weight is going to change dramatically) * Atmospheric reentry stage Given that we're controlling a rocket's flight, it makes sense to have a `FlightController` class. This class stores a `ThrustCalculator` object, which it uses to periodically update the power output of each of the thrusters to balance and direct the rocket's flight. It does so by calling the `CalculateThrustSpecification` function every millisecond, and sending the resulting `ThrustSpec` object to the device controlling the boosters. This `ThrustSpec` object contains information about how much thrust each booster should output. It could, for example, be a HashTable relating `BoosterID`s to `BoosterPowerLevel` objects, but let's not worry about that for now. We can keep things simple if we let `ThrustCalculator` be an interface instead of a class. The `ThrustCalculator` interface has two functions: an `init` function, which takes a `BoosterConfigurationInfo` object and a `PhysicsEngine` object as input; and a `CalculateThrustSpecification` function, which takes a `RocketSensorData` object as input, and returns a `ThrustSpec` object. By making `ThrustCalculator` an interface, we can have a separate implementation of `ThrustCalculator` for each of the rocket's flight stages. The `FlightController` class switches between them as necessary over the course of the rocket's flight. We'd have a `LaunchThrustCalculator` class, a `AtmosphericThrustCalculator` class, a `NearSpaceThrustCalculator` class, a `PayloadReleaseThrustCalculator` class, and a `ReentryThrustCalculator` class. They work differently under the hood because the physics is different in each case, but they all communicate with the `FlightController` class in the same way, through the `CalculateThrustSpecification` function. It's now easier to add functionality to the rocket. For example, if you need the rocket to also be able to dock, you can just write a `DockingThrustCalculator` instead of rewriting the entire system. 
I'm sorry but I have hard time understanding this. &gt; ... why you're still using an external XML for your configuration" - well, I guess because that's how we're supposed to configure persistence context. Is there other official and / or recommended way ? &gt; ... developers won't know, and they'll begin to bootstrap and spaghetti code to work around it. - I'm not developing an API for unknown people. All devs that will ever need to follow my approach are part of my team / group. Also, requirement to provide persistence.xml is well documented and I hardly can think of situation when anybody would try to do something else than provide his specific persistence.xml as expected. &gt; That being said, it is common in the micro service architecture ... - I understand this as re-phrasing of what I said with "It's common practice to have JPA related code ...". Or did you mean something else ?
It looks like in your [submission](https://www.reddit.com/r/java/comments/9mfb6u/eventbus_and_cqrs_with_java_and_spring/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How does this compare to https://grpc.io/?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I wouldn't put thinks like `/build` or `/nbproject/private` under source control.
Looks interesting. Would be nice to get rid of the boilerplate associated with writing sum types in Java. BTW, there's a typo in the "Updating deeply nested immutable data structure" section, in the first piece of code: import org.derive4j.*; import java.util.function.BiFunction; @Data public abstract class Address { public abstract &lt;R&gt; R match(@FieldNames({"number", "street"}) BiFunction&lt;Integer, String, R&gt; Address); } ``` vgbu ```java I'm guessing the \`\`\` vgbu should be \`\`\`java. 
I don't know much about PHP, but I'm tempted to say yes. You pull the embedded server in as a dependency, similar to any other piece of code that your app needs. The alternative is to run a Java server separately, and deploy your app to it (similar to how I imagine you'd put PHP files on an Apache server)
Nice looking app! If we could get more great looking apps like this out in the wild maybe we could chase awful Electron off the desktop.
Thanks you! Originally I was going to make the application in Electron but I seriously didn't like it at all, so I decided to make it in Java since it's my favorite language.
If you need some more ideas, you can look at this overloaded rename beast: [BulkRenameUtility](https://www.bulkrenameutility.co.uk/Shots/mainscr.png)
thanks, fixed.
I would not use JSP at all, and I would even be wary of JSF. Most web development seems to be moving into a separate client/server architecture, with the server providing data via APIs and the client being HTML/CSS/JS and rendering the page using this data. For Java web development, really focus on backend development and APIs that deliver raw JSON data. SQL and security are related things.
OMG! that program is truly a beast, thank you for letting me know about it, now I have in mind some extra features for the future versions.
Thanks! I forgot to exclude those folder, I'll delete them right now from the repo.
Neat. But you know in the FXML you don't need the content or children tags. They're superfluous. 
Two people already brought up the different purposes of Rabbit v Kafka (MQ v distributed log). I admittedly just skimmed the article, but I did see that it does bring up one main case I know where the lines are blurred between those two ideas: Event Sourcing. Wanting to know previous values all the way back to entity creation can be very important in any sort of audited environment; knowing who changed what and when. 
/r/HomeworkHelp 
It is an alternative implementation. It has a simpler API and on tests I did it performed faster. The xsrpcj examples project has an indicative test comparing the execution time between xsrpcj and [grpc.io](https://grpc.io) I would say that xsrpcj is a good fit for applications that exchange many small messages and need to get every bit of performance. It would fit distributed applications that each node needs to have tens to hundreds active interactions, but it is not currently designed for a server with many thousands of concurrent clients. &amp;#x200B; 
But it isn’t homework 
&gt;`import java.util.Scanner;` &gt; &gt;`public class Doomsday {` &gt; &gt; `public static void main(String[] args) {` &gt; &gt;`Scanner in = new Scanner(System.in);` &gt; &gt;`System.out.println("Password");` &gt; &gt;`in.nextLine();` &gt; &gt;`System.out.println("` &gt; &gt;`List of targets &lt;DOOMSDAY&gt;\n` &gt; &gt;`A PewDiePie and associates 3,622 66,742,772 18,840,308,536\n` &gt; &gt;`B- Luis Fonsi and associates 72 22,178,685 15,101,745\n` &gt; &gt;`A Markiplier and associates 4,219 21,967,968 10,165,500,833\n` &gt; &gt;`B+ nigahiga and associates 343 21,248,926\n` &gt; &gt;`A Ali-A and associates 2,946 15,193,086\n` &gt; &gt;`B+ RomanAtwoodVlogs and associates 1,537 14,905,272 4,824,604,974\n` &gt; &gt;`B+ RiceGum and associates (include Clout gang, Faze could be troublesome) 283 10,810,163 1,836,112,336\n` &gt; &gt;`A- Logan Paul and associates (include brother, brother may be an issue) 566 18,548,299 4,044,341,737\n` &gt; &gt;`A David Dobrik and associates 491 9,217,213 3,121,499,075\n` &gt; &gt;`B Moe Sargi and associates (include Juicy Gang, Ali H and Dany are trouble) 366 1,515,902 182,505,487\n` &gt; &gt;`Terminate\n` &gt; &gt;`Meet back at location.\n");` &gt; &gt; `}` &gt; &gt;`}` &amp;#x200B;
Complete legend, how do I turn this into a jar file? 
This has been covered extensively in other pages. Java is absolutely not going anywhere, it's one of the most widely used languages in the world with some of the most job opportunities. Other people will likely add links. here is the summary: &amp;#x200B; 1) Oracle's charging for licenses applies only to use in production. Development is still free. &amp;#x200B; 2) OpenJDK and Oracle JDK will now be code-identical, minus a few Oracle-specific things in their flavor. &amp;#x200B; 3) OpenJDK will also be multi-platform for the first time. &amp;#x200B; 4) Solution: just use OpenJDK for everything now unless you want Oracle support.
Save it as a .java file, download Java SE Development kit and make sure your path variables are correct (Oracle has a tutorial), open cmd (if you're on Windows), type "javac -version" without the quotes to check that it's working, then navigate to the folder you saved it using cd path so f.ex "cd C://users/foo" then type javac [filename.java](https://filename.java) to compile and java filename to run.
How did you make this https://camo.githubusercontent.com/d27ac6f09affffff0b348ba36eb7e173eddca02e/68747470733a2f2f6d69722d73332d63646e2d63662e626568616e63652e6e65742f70726f6a6563745f6d6f64756c65732f6d61785f313230302f31346331633937303933383539392e356262343361363730333436652e706e67?
I have dual boot in my computer with Windows/Linux and I use a iMac in my office, so I took a screenshot of my program running in the three systems, then cropped the program's bar and with Adobe Illustrator I gave it an Isometric view and added a 3D deep effect.
Thanks for telling me the secret 😆 Btw the screenshots look too good!
What exactly will the OracleJDK have that won't be in OpenJDK? 
Why are you hosting the Jar on Mediafire? Why don't you host it on Github?
Oh my bad, sorry about that detail I'll host it on Github right now. It's just that I'm used to Mediafire.
paid support from oracle. otherwise, nothing else at the moment. they may add new tech to the oraclejdk to differentiate it in the future
Looking at you [FileFunctions.java](https://github.com/Usbac/Namely/blob/master/src/namely/FileFunctions.java), it appears that you were not aware of lastIndexOf() in Java strings, when you wrote getExtension(). It would save you the contortions you make there. 
Yeah. I tend to hand code fxml.
Nice app, will use it in place of the horribly bloated tool I've been using forever. One quick suggestion: center the text on the tabs, left-alignment on tabs looks very unnatural.
You can also use `.gitignore` so git will take care of it for you, and whoever else ends up working on it :) 
It does look nice. If you have any improvement ideas, please ad some issues. I would be glad to give it a try.
I was using Scene Builder, that's why I didn't know that the content and children tags where there, thanks for the advice!
I've been using Java for a good time and I didn't know about that function! I should pay more attention to the documentation, thank you so much for letting me know about it, I'll apply the changes.
Yes! after finishing the first version of my program I fell in love with JavaFX. And also I've thought about that option. Greetings
Java 11 is the latest version. You might as well just run that rather than thinking about older versions like 9 and 10. What do you think is the reason to not upgrade? Have you found some incompatibility?
As far as Karaf is concerned - the most recent ( like a week or so ago ) release 4.2.1 is the first version to properly support Java 9, 10, and 11. Language/coding wise, your java 8 program should run without changes. Packaging wise however - you'll need to add additional dependencies for those things no longer shipped with the JDK, and you may need to update your existing dependencies to their latest versions ( assuming they've actually been updated to support Java 9/10/11 ). Also, if you do upgrade - be sure to use an OpenJDK build ( I use the AdoptOpenJDK builds ) rather than Oracles commercial version - it's the same code, but not restricted with a production $$$$ fee. 
In which domain are you working? Depending in which section it is you might benefit more or less.
Personally, I'm wary of 11 because the liscense agreement forbids data processing.
back end service. Currently busting my ass to setup a Netflix like cluster micro service farm.
Hm, why not just encrypt the entire database? 
Just go with 11, given others are not supported. Karaf and module system are not the same thing. You can loads of weird and mostly (IMHO) useless things in OSGI that don't map over to the module system. Things like OSGI services and the ability to do direct VM calls between bundles have no direct relation to module system. 
Oracle will stop providing OpenJDK builds at some point after Java 12 is released. It's quite likely that OpenJDK will start providing their own binaries, given Andrew Haley's comments.
&gt; Java 9 does offer an interesting feature "Jigsaw" You can mostly ignore the modules system right now. Mostly. &gt; and type inference. I wonder does these worth upgrading. Local variable type inference was introduced in Java 10. &gt; I am using Maven. var is very nice compare to writing HashMap&lt;long,HashMap&lt;MyObject&gt;&gt;. `var` doesn't buy you a lot in the way of characters because you still need write it on the right hand side. Map&lt;long,Map&lt;MyObject&gt;&gt; map = new HashMap&lt;&gt;(); var map = new HashMap&lt;long,HashMap&lt;MyObject&gt;&gt;; What `var` does buy you is having all variable names aligned. And a much bigger need to name your variables appropriately. &gt; I have tried OSGi Karaf, but that is not easy to use. A lot class definition conflict. And spring does not work well with Karaf. ​I can not help you here. &gt; Java 10 seems to have a more efficient GC. Which avoid world stop. How much performance does this squeeze? a small percentage? or not even 1 percentage? or more than 10%? How long is a piece of string? You'll need to do your own benchmarking with your own code. ​ &gt; How much will these upgrade affect the coding style? `var` will force you to name variables better, but your coding style will not change nearly as much as with Java 8 and lambdas. &gt; Do I run my Java 8 program without making any change? You may need to add a few dependencies that were removed from the JDK. But otherwise, they should be backwards compatible.
Btw. type inference was in Java 10. If you need it for `HashMap&lt;long,HashMap&lt;MyObject&gt;&gt;` then your code needs refactoring, not Java uprade.
From a quick glance: * Ideally that [package name](https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html) would link back to you. * Have your logic and the GUI separately. * Use [java.nio](https://docs.oracle.com/javase/8/docs/api/java/nio/package-summary.html) whenever possible. It works differently, but it works well. * `FileFunctions: int option` should be an enum. * `FileFunctions.change_order` is not a valid name. * `//Delete extra whitespaces at the beginning or ending of the Parts` [`String.trim()`](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#trim%28%29)? * `file.getName().toLowerCase().substring(0, length);` Ahrm...why the `substring`? * `return String.valueOf(Math.round((file.length()/1024f) * 100d) / 100d)` You might as well format it with two decimal places. * Javadoc, Javadoc, Javadoc, say after me: Javadoc. &gt; private String name, modified, size; &gt; &gt; public SingleFile(String n, String m, String s) { I'm out...
They're not 100% exactly the same, but the changes are mostly cosmetic. https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later
It looks like in your [submission](https://www.reddit.com/r/java/comments/9mn6iv/springboot_microservices_online_training_free/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Add a junit test that checks migration filenames: problem solved :-)
I usually use this for Java projects in IntelliJ: https://www.gitignore.io/api/java,java-web,code-java,intellij+all,jetbrains+all
Oracle's OpenJDK binaries will be supported for six months only, meaning two scheduled updates. That applies to all JDK versions; there is no LTS for these binaries. OpenJDK is the source code so it requires someone to produce binaries. Several people other than Oracle now do this: Red Hat, Azul (who I work for) and AdoptOpenJDK, plus others.
I actually agree that the code is pretty atrocious. Yeah we get it its his cool project he wanted to share but this is nothing to boast about. Just look at this beast: \`\`\` //Load Original File view when moving between Tabs tabPane.getSelectionModel().selectedItemProperty().addListener(new ChangeListener&lt;Tab&gt;() { @Override public void changed(ObservableValue&lt;?extends Tab&gt; old, Tab oldTab, Tab newTab) { previewButton.setText("Preview"); previewActive = false; listController.updateListView(previewActive); } }); \`\`\` Java8 exists and lambda listeners are a thing tbh.
JDK 9 and JDK 10 have already reached the end of updates (public or otherwise). Remember that JDK 11 includes all features that were added to JDK 9 and 10. If you move to JDK 11 you will get modules and local variable type inference.
It's still confusing, even for me who basically read every post about it. The bottom line is just "don't use Oracle JDK and you should be fine."
You are just reinventing the wheel, please check out [SDKMAN!](https://sdkman.io/) it offers you versioning not only for java but for a lot of different tools.
I got it from [this](https://www.oracle.com/technetwork/java/javase/terms/license/javase-license.html) page, which I read before I went to download it. &gt; Further, You may not: - use the Programs for any data processing or any commercial, production, or internal business purposes other than developing, testing, prototyping, and demonstrating your Application Based on more of the text it does not read to me that it only applies to commercial data processing. It's possible I've misunderstood this, and if so I'd be happy to be corrected. 
No it means that you can't use the jdk tools themselves to do anything other than make apps, not that you can't make apps that do data processing 
Thanks, will give it a try! I feel like experimenting manually improved my understanding of how the underlying aspects work so I’ve got that going for me :’)
I wish more people understood that. It sometimes feels like in many parts of our industry it's a rush to making everything attain an imagined "state-of-the-art" where really very few companies or products actually need anywhere near the performance or scalability offered by such solutions.
Sorry, but which is the relation with java subreddit? I can't see in the document nothing about its integration with Java...
I talked to pushupsam in private messaging. The app he's thinking of is r/https://graviton.app \- but it's not launched yet. If you'd like to help out, come find me on the #graviton-browser channel on the Kotlin slack.
I suggest using JDK 32 bit and eclipse photon 32 bit. My eclipse(ee) photon 64-bit is taking 928 MB of RAM. Read more at r/https://stackoverflow.com/questions/17285928/jre-32bit-vs-64bit
Are you nuts?
InteliJ IDEA is your best bet
Use IntelliJ or Eclipse. Your IDE is supposed to help you, Atom is a text editor, not a Java IDE.
Anyone else enjoy punching themselves in the balls?
I did not knew that Spring was outdated. JavaEE is not deprecated on Java 11 at all, what is deprecated are the Java EE classes that were duplicated on the JavaSE JDK. JavaEE is alive and well as Jakarta EE.
java 10 had a number of issues with valid class files, eg https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8209112 i'd skip it and go with 11, which is also current and LTS 
I'd agree with the general sentiment here. But I'm also stubborn and am using VS Code almost exclusively for Java dev. (I do some Kotlin in IntelliJ) Our projects are all in Maven so I use the mvn CLI for all my building/dependency management (I've created PowerShell commands to shorten things up). Tomcat JDPA debugging is working pretty well too. I'm sure there's an Atom plug-in for that since there's a VS Code one. (It's provided by RedHat IIRC) I find I just like the simplified environment more. You'll need to do some extra work if you roll your own dev env, but it can be rewarding :)
- No feature enabled based on classpath detection - Minimal reflection &amp; annotations usage - Pure lambdas, no CGLIB proxy Surely must be Kofu specific as this would require massive changes in Spring Boot
especially since they are in college and Ultimate is free.
It's like eating rice with a fork. You can do it decently but why not just use a spoon 
&gt;Java EE is deprecated on JDK 11 Source???? it was my understanding that they are just removing duplicated modules that also exist in SE.
In school I used Eclipse and it worked much better for me than NetBeans did for EE. https://www.eclipse.org/downloads/packages/release/kepler/sr2/eclipse-ide-java-ee-developers
Yeah, I had to take course on JSP and a course on Java EE in college. At my job interview they laughed when I told them that that's what we were being taught.
Don't your packages update /usr/java/latest automatically and have executables use symlinks via /etc/alternatives? They do for me, using RPMs. I see the postinstall scriptlet sets all of that up.
I would never eat rice with a fork
How would one even use the the JDK tools themselves for data processing?
Really cool. I'm longing for this... &gt; which should support value types and erased generics over values. ... however this makes me sad.
&gt; use the Programs for any (data processing or any commercial, production, or internal business purposes) other than developing, testing, prototyping, and demonstrating your Application not &gt; use the Programs for any (data processing) or (any commercial, production, or internal business purposes other than developing, testing, prototyping, and demonstrating your Application)
The perception that Java EE isn't useful is mostly held by people who used it long ago. That being said, I don't see any schools teaching it competently. JSP should... *sigh* fucking zombies
Why would they teach you jsp??? There's a Java plugin for vscode from red hat so I'd try that first if you want to stay away from real IDEs. Of course you can code with nano if you really want.
This one might be pretty interesting for you: [http://www.vogella.com/tutorials/JavaWebTerminology/article.html](http://www.vogella.com/tutorials/JavaWebTerminology/article.html) Not that I am a professional software developer at all, but I'm trying to get into it. 
That is just for the preview. Last I heard, generics over primitive and value types will eventually be reified.
Fantastic news. I have so many little classes that could be value types. They will benefit greatly from this.
I love to see they will just "Trash" their proof of concept. That is the correct way to do things. How many projects are there running that are based on a prototype or proof of concept and owners didn't have enough vision to just throw it and begging from scratch based on the knowledge collected from the experience of building those artifacts?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My company is going the AdoptOpenJDK route. I was the lucky guy who had to upgrade us internally to OpenJDK 10 earlier this year and fix everything. The move to 11 is with one of my coworkers now because we're all juggling a bunch of projects. &amp;#x200B; My advice: OpenJDK vs OracleJDK, only issue is SSL certs. Even as of JDK 11, OpenJDK still doesn't have as many CA certs as Oracle JDK. It's a licensing thing. &amp;#x200B; Otherwise, the Java 9 module and classloader changes are the only thing to really worry about. My company's application does a lot of fancy classloading tricks, and they all broke horribly with the upgrade. JDK 10 &amp; 11 have pretty small changes by comparison and haven't given us any issues.
It has some limitation when the encryption is producing different results for the same input thus searching is not possible on database level.
Yeah basically every program I wrote at my first job was a rapid prototype that I should have burned and didn't and when it came time for maintenance and upgrades I paid the price.
Generics over primitives is a goal for (or close to) L100, last I heard.
AdoptOpenJDK are not offering support. All they are going to do is provide binaries for OpenJDK. Someone else has to do the backporting of fixes.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9mtfdw/swagger_inflector_payload_validation/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I hope that is the case
David Simms and Tobi Ajila mention it [here](https://youtu.be/_26KZAegYRM?t=2189). As u/nlisker said, it is slated for L100.
They mentioned specialized generics, where some types will be erased (like `List&lt;String&gt;`) and some will be reified (like `List&lt;int&gt;`).
They mentioned specialized generics, where some types will continue to be erased (like `List&lt;String&gt;`) and others will be reified (like `List&lt;int&gt;`).
This is the pattern that broke my honeymoon with OOP 6 years ago.
I’m in the same boat. Work uses Gradle and although most people use Eclipse and more and more are switching to IntelliJ I use VS Code when I can though. With the plugins (like the Red Hat one you mentioned) it’s actually pleasurable.
Can you elaborate for me?
In general, the angular app and apache can be deployed together, and your java app as a stand alone server, maybe even behind apache. It has been a while since I played with apache, but basically you have an apache rule that routes /api/ to your Java app, and everything (/ in this case) else gets served up by apache. I haven't played with angular so I don't know if you need to do anything fancy with apache like silently redirecting any non /api path to your angular index.html file so that the client side app bootstraps itself.
Make classes final by default, so you have to make a deliberate choice (and have a valuable discussion) to open it up for inheritance if need be. I am firmly in the camp that thinks you rarely need inheritance. If you need to add behavior, use dependency injection, typehinted against an interface. That makes classes open for extension through injection. Think: decorator, strategy, composite. This creates way simpler objects and less complex dependency trees. You do not need thousands of constructors, just custom implementations.
I don't think this is how encryption should work...
You can serve static content from Spring Boot. https://spring.io/blog/2013/12/19/serving-static-web-content-with-spring-boot The only technical issue to solve is copying your angular build artefacts into the Spring Boot build tree.
It is public. But it means having to write this every time: var tee = new TeeInput(new InputFromUniverse(coords),new OutputToFile(file)); Explicitly creating a new `OutputToFile` object. Every. Single. Time. Compare that with: var tee = TeeInput.from(new InputFromUniverse(coords).to(file); If you have an excessive number of parameters or overloaded methods, the builder pattern is the right thing to use. You already said that it makes the API easier to use and read. That alone is worth using it.
What is "LW10" and "L100"?
No need for extension through injection in this specific example, as the dependencies (`input` and `output`) are explicitly final. The best solution would be to just expose the constructor `TeeInput(final Input input, final Output output)` to users and let them inject their specific implementations right in construction time. If multiple dependencies are present and not all of them are required, I will then choose the builder design pattern to sort of ease `TeeInput` objects creation to users.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9mxsf7/convert_dotted_decimal_notation_to_ipv6/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why the downvotes? It's an interesting discussion.
Basically I had the issue that the visitor pattern tries to solve when you have a list of completely different things. So I had to traverse the whole list and depending of what type of class, do something completely different. In the past, I solved it with a huge instanceof if else. But it was horrible, because the order of how it was written affected the outcome. Anyway, I read about the visitor pattern and double dispatching and try it, but to be honest, it was not much better and far more complex to debug or read. Since then, I stick to POJO that never extend a class and very rarely an interface (maybe, HasId or something trivial) and I am a much more happy panda.
No you'll have one private constructor in the `TeeInput` class along with *n* `from()` factory methods and a inner builder class with *m* `to()` building methods. With 5 inputs and 5 outputs that's 11 methods rather than 25 constructors.
Articles rarely get upvotes in programming subreddits. And this is not a good article. It's bad advice solving the wrong problem.
&gt; I'm still not bought on the "rule" that inheritance is harmful. It's not. It's just the general trend of taking a few examples where X is misused to blog posts that tell people to "don't misuse X" to posts about how "X considered harmful" to yet another dogma that some people blindly follow. Composition over inheritance is just a general guideline that you should favour composition over inheritance where both give you the same benefits, mostly to prevent running into the [diamond problem](https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem). There are numerous cases where having a reusable prototype you inherit from makes perfect sense. 
Well at least, with my design, you don't have to add two methods, one in `TeeInput` and the other in `TeeInputBuilder` for each new `Input` and `Output` type. The extensions are done outside of `TeeInput` and `TeeInputBuilder` and then injected into the builder parameter methods. Regards mate.
These are the stages of the project. LW stands for L-World, or L for short. L1 is the first prototype, L10 is a major milestone stage, and L100 is the completion stage. See the talk in this [comment](https://www.reddit.com/r/java/comments/9mq6da/entering_the_next_phase_of_project_valhalla/e7h7ypg).
Effective Java Items 17 and 18 Inheritance is a perfectly valid hammer that can be maliciously abused or misused like any other hammer. One of the biggest issues is (IMO) documentation. You need to judiciously document anything that is *designed* for inheritance. Things like self-use will bite you in the ass with the quickness. If you have some wrapper around a collection with an ```addAll(...)``` method in your base class that, internally, is calling an ```add(...)``` method repeatedly. When a consumer overrides your ```add(...)``` method, they could (potentially) break your ```addAll(...)``` as well without realizing it. It's a trivial (and, I'm sure, poorly remembered by me) summation of the above Effective Java items. But it's something you have to think about when *designing* for inheritance. 
Tell that to people in Brazil. Eating rice with a fork here is so common that I got confused by your analogy
"make all classes `final`", "never make classes `final`"... What happened to "be familiar with the benefits, drawbacks and caveats of each option and make an educated decision based on the particulars of your specific case"?
Good article overall but I would be remiss if I didn't offer a warning. I'm a Java EE dev and I started out doing JSF and have since moved over to spring and I would highly recommend spring over JSF. You can do way more work with way less code and config work. Just my two cents.
Is JSF still a thing in 2018 for greenfield projects? Would it be a career limiting move?
No one has ever said "make all classes `final`". The advice has always been "prefer composition over inheritance" and "if your class is *not designed for inheritance* make it `final`".
Spring boot? 
Sounds more like you have a problem with polymorphism than OOP.
To me jsf is much like struts, it had its time and place in history and did amazing things at the time, but it’s no longer something I would use for a new project. It’s been eclipsed by other better frameworks. Just like today’s frameworks will eventually be eclipsed by tomorrows frameworks. 
WAAAAT seriously this website must have been hacked
I am not sure polymorphism works, but I may be wrong, how would you make this code not print **I am A for both values** of the list? package com.jonvallet.test; import java.util.Arrays; import java.util.List; public class Polymorphism { public static void main (String [] args) { List&lt;A&gt; list = Arrays.asList(new A(), new B()); list.stream().map(Polymorphism::whoAmI).forEach(System.out::println); } public static String whoAmI(A anObject) { return "I am A"; } public static String whoAmI(B anObject) { return "I am B"; } } class A {} class B extends A {}
You know normally I would disagree with this. I think mostly people overstate the problem of erasure, and my initial reaction to this is that as much consistency as possible is preferable to a weird half-baked semi-erasure where some things are erased and some are not and people are going to be frustrated by the difference... But I think in this case it might actually make sense. Since we *may* need some new notation to show that a type parameter opts-in to supporting value types, and since we also *may* ultimately need some sort of reification for value type specialisation, why not get the most out of these changes? We could say that whatever the opt-in notation is, if it is needed, e.g: ``` public class List&lt;any T&gt; {...} ``` This means that *all* instances of `List` are reified regardless of whether T is instantiated with a value type. This way we can have opt-in reification, but existing types will continue to behave in the same way and be erased, and it adds a little more value to the annoying **any** (or whatever it ends up as). Who knows at this point though. I've lost track of whether the **any** thing is even going to be needed with the current model/direction.
Only thing is, Spring has nothing to do with Java EE :) Sure, some modules from Spring implement parts of the Java EE spec (like JPA) but that's about it. Overall, they are parallel both in design and implementation.
Right sorry.
"How to make sure you work in a shit tier java web mill"
If you cant upgrade to Java 11, then use Java 10 at least. The introduction of type inference is a significant impact maker for me, I can now actually enjoy programming in Java as I can with C#. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Downvoting doesn't help or make these subreddits look good when a valid question gets downvoted.
Whats up with it? &amp;#x200B;
When building form heavy applications, typically those within Enterprises, JSF would still be a viable option due to its speed of development and abstraction of the underlying web complexity. Only when you start building complex UIs would I feel that Javascript client or Action based MVC frameworks are a stronger option.
JSF as a general purposes web framework may not be the best option today. However, there are still niche use cases like internal form based Enterprise application development where JSF is still a strong option. 
I've enjoyed using JSF/PrimeFaces/OmniFaces because it allows me to create a front-end without me having to maintain Javascript. Allows me to use the great component library with PrimeFaces. Allows relatively easy upgrades between JSF or PrimeFaces updates. Has good support in IntelliJ allowing me to refactor between front-end and back-end together. JSF/OmniFaces has evolved to solve most front-end issues that I have run across in the past. With PrimeFaces I don't have to lean on my UI expert heavily to make a page look reasonably good. For the use-case of creating a a business type of applications I think JSF is a good fit. 
Simple: public static void main (String [] args) { public static void main (String [] args) { List&lt;A&gt; list = Arrays.asList(new A(), new B()); list.stream().map(A::whoAmI) .forEach(System.out::println); } } class A { public String whoAmI() { return "I am A"; } } class B extends A { public String whoAmI() { return "I am B"; } } But there are times when you can't use polymorphism, such as when the objects being visited don't belong to they same type hierarchy, when you need to dispatch by parameter type, not on a polymorphic method. Single dispatch languages like Java will need the visitor pattern, but some languages like C# can dispatch on the dynamic type. This isn't a case against OOP, but the calling conventions of different OOP languages 
It's a trap!
I suggest looking into the JHipster generator project. You can spin up a "hello world" monolithic and should be able to just about merge your Angular work right into that. Another possibility is just deploying them both seperately. Keep the spring boot running as an API server, and just host your Angular4 app wherever...no idea on your actual app structure or security model, but it's an option.
And I have switched from Spring and had the completely opposite experience. With Spring you need a whole Front End Development team. With JSF just use Primefaces and most of that is taken care of. 
I agree with your assessment but I would not call that segment niche as it is very large.
OOP is one paradigm among many. But Java is an OOP programming language. Even with the functional features coming in, functional code is not idiomatic Java and is painfully verbose compared to Scala or Clojure.
&gt; I've enjoyed using JSF/PrimeFaces/OmniFaces because it allows me to create a front-end without me having to maintain Javascript. Is this something people actually enjoy? I guess different strokes for different folks. I've worked with both JSF and JS, and I'd rather work with JS. JSF abstracts too much from the front end, obscuring the web tech behind facelets. I have found it far easier to work with the web tech directly. &gt; Allows me to use the great component library with PrimeFaces. I would only use JSF with Primefaces, which solves the problem of the front end stack not having a cohesive component library. This was the key selling point of ExtJS. BTW, [PrimeNG](https://www.primefaces.org/primeng/#/) exists, so you can get the benefits of PrimeFaces components without JSF. However, nowadays, especially as I have gotten into React, I prefer sourcing multiple smaller libraries instead of a kitchen sink framework. &gt; With PrimeFaces I don't have to lean on my UI expert heavily to make a page look reasonably good. Is this really a problem? Especially with things like [Bootstrap](https://getbootstrap.com/)? If you want to stick with Java and don't really care about the front end stack, I can see why you might like JSF. &gt; For the use-case of creating a a business type of applications I think JSF is a good fit. Actually, I would say it is not the type of application, but the type of developer. Some developers prefer to stick with Java and don't want to deal with front end tech. Other developers developers prefer working the native tech of the delivery platform. For many reasons, this is one of the reasons I don't like working with JSF.
&gt; With Spring you need a whole Front End Development team. No you don't. You only need a front end development team if all you care about is Java and would rather have a front end development team do the development work. Some people actually *want* to be full stack developers. &gt; With JSF just use Primefaces and most of that is taken care of. You don't even need JSF. Just use [PrimeNG](https://www.primefaces.org/primeng/#/), and you get Prime components without JSF. There are plenty of kitchen sink component libraries available for JS, if that's your thing.
Or you just provide some utility methods like [BodyHandlers](https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandlers.html) so you would write var tee = TeeInput.of(Inputs.url(url), Outputs.file(file)); &amp;#x200B;
all the discussion about JavaFx just seems a little bit misleading; with Java11 and OpenJdk you can build your own runtime by using jlink and Maven, so I do not frankly understand what's the problem with that, if any most of all I won't ever use Swing again!
You could, but I feel like you're repeating what that type system can already work out, but I'm just bike shedding now. I think we're in agreement that 72 constructors is just the wrong approach. :)
Just to be pedantic, I think you mean Spring MVC, not Spring Framework or Spring Boot. Spring MVC is the web (services) framework. Believe it or not, you can actually use [JSF with Spring Boot](http://joinfaces.org/).
Java without an installer is not a problem, it's an enhancement. You simply unzip the files into a directory and point JAVA_HOME at the new directory. What's the big deal?
No separate JRE. How will non-technical users install it now if there is no installer? Also, if I understood the article correctly does it mean that the default JVM will not be able to run JavaFX now? If that is the case it was a nice way to kill the most beautiful GUI framework to ever exist. &amp;#x200B;
Sorry, we talk so frequently about spring boot at work as we are migrating our development stack from JSF/Primefaces to rest services using Spring and angular front ends and so we just say spring for simplicity sake. That said, I thought MVC was a part of spring boot, is that not the case?
you have to include the javafx jars to run javafx. it's a better situation imo
I'm just being pedantic. Everyone knows what you mean. :-D &gt; That said, I thought MVC was a part of spring boot, is that not the case? It's not, *technically*. You don't get Spring MVC unless you include the `spring-boot-starter-web` module. But it is featured in the Spring Boot documentation and maintained by the core Spring Framework developers, so it might as well.
So my end users will have to download further stuff if they want to run my JavaFX app? Beautiful things dont last for a long time. Time to go back to Swing then.
I used to code with \`GroupLayout\` by hand...
I agree. I think the writer is too depressed about it :) I don't remember if the installer set JAVA\_HOME for you or not, but if you need your users/clients to "have Java installed", now they also need to set that environment variable themselves, which can be a hassle for them.
The JDK/JRE distinction doesn't matter. Assuming the JDK has the same kind of installer there's no effective difference. To use JavaFX, application developers will need to include the JavaFX runtime in the same way they do other libraries already so, again, no real difference other than more work for the application developer. I don't think this will kill JavaFX. Those people that want to use it still can, especially thanks to the great work of the people at Gluon, who make the JavaFX 11 binaries available for free.
&gt; JSF is a total resource hog I don't know if JSF *itself* is a resource hog. JSF doesn't include much beyond basic HTML components (`h`) and AJAX (`f`) and a standard JSF JS library (jsf.js). Typically, to get the real benefits of JSF, you'll throw on a component library like Primefaces. The results are hideous. Consider the [Primefaces autocomplete demo](https://www.primefaces.org/showcase/ui/input/autoComplete.xhtml). As you type, Primefaces is doing HTML POST requests: javax.faces.partial.ajax=true&amp;javax.faces.source=j_idt676%3AacSimple&amp;javax.faces.partial.execute=j_idt676%3AacSimple&amp;javax.faces.partial.render=j_idt676%3AacSimple&amp;j_idt676%3AacSimple=j_idt676%3AacSimple&amp;j_idt676%3AacSimple_query=test&amp;j_idt676=j_idt676&amp;j_idt676%3AacSimple_input=test&amp;j_idt676%3AacMinLength_input=&amp;j_idt676%3AacDelay_input=&amp;j_idt676%3AacMaxResults_input=&amp;j_idt676%3AacForce_input=&amp;j_idt676%3Add_input=&amp;j_idt676%3Acache_input=&amp;j_idt676%3Aevent_input=&amp;j_idt676%3AthemePojo_input=&amp;j_idt676%3AthemePojo_hinput=&amp;j_idt676%3AthemeCustom_input=&amp;j_idt676%3AthemeCustom_hinput=&amp;j_idt676%3Athemes_input=&amp;j_idt676%3AitemTip_input=&amp;j_idt676%3AitemTip_hinput=&amp;j_idt676%3Agroup_input=&amp;j_idt676%3Agroup_hinput=&amp;javax.faces.ViewState=-7770416205237403196%3A47500405673671282 And you get back XML page update descriptions: &lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;partial-response&gt;&lt;changes&gt;&lt;update id="j_idt676:acSimple"&gt;&lt;![CDATA[&lt;ul class="ui-autocomplete-items ui-autocomplete-list ui-widget-content ui-widget ui-corner-all ui-helper-reset"&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test0" data-item-value="test0"&gt;test0&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test1" data-item-value="test1"&gt;test1&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test2" data-item-value="test2"&gt;test2&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test3" data-item-value="test3"&gt;test3&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test4" data-item-value="test4"&gt;test4&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test5" data-item-value="test5"&gt;test5&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test6" data-item-value="test6"&gt;test6&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test7" data-item-value="test7"&gt;test7&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test8" data-item-value="test8"&gt;test8&lt;/li&gt;&lt;li class="ui-autocomplete-item ui-autocomplete-list-item ui-corner-all" data-item-label="test9" data-item-value="test9"&gt;test9&lt;/li&gt;&lt;/ul&gt;]]&gt;&lt;/update&gt;&lt;update id="j_id1:javax.faces.ViewState:0"&gt;&lt;![CDATA[-7770416205237403196:47500405673671282]]&gt;&lt;/update&gt;&lt;/changes&gt;&lt;/partial-response&gt; Whereas with the [jQuery UI autocomplete demo](https://jqueryui.com/autocomplete/), its a simple HTTP GET: https://jqueryui.com/resources/demos/autocomplete/search.php?term=robin And the response is JSON: [{"id":"Erithacus rubecula","label":"European Robin","value":"European Robin"},{"id":"Cercotrichas galactotes","label":"Rufous-Tailed Scrub Robin","value":"Rufous-Tailed Scrub Robin"},{"id":"Irania gutturalis","label":"White-throated Robin","value":"White-throated Robin"},{"id":"Turdus migratorius","label":"American Robin","value":"American Robin"}]
&gt; How will non-technical users install it now if there is no installer? They unzip and set JAVA\_HOME. Not that big a deal, though a bit annoying for them. &gt; does it mean that the default JVM will not be able to run JavaFX now? Does not mean that at all. The JVM doesn't treat JavaFX in any special way whatsoever. It's just that JavaFX does not come with the OpenJDK zip (or the Oracle JDK installer), so the user needs to download it separately, or, better, you need to include it in your distribution. Also note that JavaFX is modular, so you don't need all of it usually and you can choose specific modules to bundle. &amp;#x200B;
Bad bot.
&gt; Why not try it with your applications? jlink would be great if you could make it work easily, however anything that is beyond a simple hello-world project contains at least a dozen third-party libraries. All of them need to be modularized and their transitive dependencies aswell. Not just an automatic module name. Even if you inject a passable module-info you need to make sure there are no split-packages. This is likely going to fail even with "basic" libraries such as slf4j and junit. The ecosystem is simply not there and I don't see enough progress to make it work in this decade. 
FFS, you just have to include the JavaFX dependencies in your build system, and bundle them along with your application.
I see. So I can just compile my "fat jar" with the JavaFX library inside and thats it?
What if two apps use Java home?
Absolutely still a thing, and not a career limiting move at all. Server side html generation still has many advantages, including faster display of the first request, less stress on the device (saving battery and heat), and often saving bandwidth as well.
I built a JRE with jlink ND specified the javafx jmods and it build a JRE with JavaFX for me. I did not want to move to module system for my app, but it seems to work now. Had to use jdep to scan for what I needed and then had to guess for javafx.
You can’t compare Spring directly to JSF. It would be Java EE vs Spring, or JSF vs Spring MVC.
there’s no need to set JAVA_HOME if you’re bundling your own JVM.
This is precisely my point, you stated it far far better than I did haha. 
It’s far often not that simple. For any reasonable real page in JS backed by a realistic amount of services you often have to do many individual requests to get all the bits of data you need. These requests are client to server and hence slow. JSF has to do similar requests of course, but those happen Server to server and are often (with collocated servers) a lot faster. When asking services for data, like user data, inventory, selected product, offers, etc, a service often returns too much data. You might only want to render the name and price of a product, but the service will return (in Json) all attribute as well like short description, long description, availability, etc etc. When sending such excess of data over a local network it hardly matters, but via the internet can be problematic. Your neatly crafted example isn’t representative for many real world systems.
Which is a bit better than Spring or Angular promotion!
So what framework would be among those “better frameworks”?
Write a script that sets it locally and then calls Java.
&gt; Server side html generation still has many advantages, including faster display of the first request Both React and Angular can switch between server side rendering and client side rendering, so that the application can work without client side JS and decrease time to first paint. So you can get the benefits of both. &gt; less stress on the device (saving battery and heat) How many JSF apps are being served on mobile devices? Most JSF apps are LOB apps running in an intranet on desktop machines. *Especially* because of mobile, the trend in web application development is moving from HTML-first progressive enhancement to progressive web apps, where static content is preloaded on the device. Server generated HTML requires a network connection for the application to function, which is not a guarantee, whereas applications taking advantage of HTTP caching and service workers can load the heavy assets (the application shell) once, and then use lightweight JSON for updates and can actually function in offline mode.
Sure you can also have full stack developers. It still takes twice as many people to write all that front end css and JavaScript.
The idea is that the developer can provide a custom JVM that's tailored to the application. Do you expect your MIL to check code out from github and compile the package herself?
I don't get your question then. 
&gt; For any reasonable real page in JS backed by a realistic amount of services you often have to do many individual requests to get all the bits of data you need. Only if you are not making HTTP requests wisely. High performance web applications will make use of edge services implemented by API gateways like Zuul to make composite requests which are fanned out to collocated internal servers. If this were not the case, microservices would be the stupidest idea ever. &gt; Your neatly crafted example isn’t representative for many real world systems. Of course it is. In fact, this is yet another reason why I don't like JSF. JSF hides all these details from me, whereas when I design HTTP services, these are actually things I am monitoring and designing for.
Personally I'd say /r/javahelp is the most appropriate place. Maybe /r/Eclipse.
That has not been my experience. I have been developing web-based line of business applications with small teams of developers from small companies to large enterprises for well over ten years. I mean, I believe you that terrible development teams exist, where you would actually need double the amount of developers just because HTML is involved, but thankfully I have not worked in those places.
[Time to bring out the GridBag](https://youtu.be/UuLaxbFKAcc?t=21)
Of course!
Its not different than any other jars you have as a dependency, except that some of javafx jars are OS dependant (win, linux, osx).
I'm talking about the situation when you don't bundle your own image. And I don't think you mean JVM.
The deal is stability. JavaFx was out in Java 7 By default in java8 here but in a non default module in Java 9 Dunno or Java 10 Out for Java 11 ...
It's a library, but you don't need to compile it (just like any other library). You either download the jars yourself (the SDK) or via Maven/Gradle. Then whichever way you create your own bundle will have to include those jars.
You can't compare Spring to JavaEE either, since Spring is a suite of products and JavaEE is a suite of specifications. Spring only really competes with JavaEE with CDI, JSF and possibly Batch, where Spring has a competing product. In other cases (JPA, JTA, JMS, JNDI, etc.), Spring builds on JavaEE. In most cases, you would compare a product you would use with JavaEE, such as Apache Shiro, Apache Camel or DeltaSpike with various corresponding Spring products. 
Primefaces supports mobile browsers just fine.
What non-technical person is installing Java?
# the right tool for the right job - use something like angular or react (or web components) for pixel perfect client-based solutions. One major benefit is local caching control if you want offline-first applications. - use JSF for something like high productivity and first to market. It just makes sense, that time is crucial in some fields and others might copy your product. You can be productive without knowing HTML, CSS, and JS. Your business logic is the most important part of your business and is required and if you need to educate your developers about random HTML, CSS or JS-quirks if can only take longer. After you reach a certain point you can replace it **if your requirements change**. 
&gt; Your business logic is the most important part of your business and is required and if you need to educate your developers about random HTML, CSS or JS-quirks if can only take longer. This is not true of most businesses. Most web applications are action oriented (if you expand your vision outside the Java world), when you consider every other platform other than Java. Rails and PHP are the most popular web frameworks out there, and most web developers are writing their own HTML/JS/CSS. Is there some weakness in Java developers that we faint when we see HTML/JS/CSS and can't possibly be productive, unlike our Rails or PHP brothers who are also under the same productivity and time crunch that we are, that we need JSF to hide the horror so we can get out of bed and efficiently get work done?
this article says in it that you **do not** need to have modularized dependencies nor a modularized app
The NO HELP on programming subreddits exists so that we can get current news and information on that language. Personal 'help' questions are not welcomed since they would inevitably drown the wanted content. Help needed on a **product** are better answered on the product user forums when those exists. 
Did you start it a decade ago?
In our case the application we're building with JSF has a mobile as well. We don't like JavaScript on the server, so that's not an option. The fact that Angular has a server side rendering mode only proves that JSF is a viable choice with its server side rendering. 
Was WildFly 14 with JSF 2.3 available a decade ago?
Funny that Microsoft is going in the opposite direction. Join the .NET core bandwagon where everything is open and free. Let Oracle do their enterprisy things alone until they notice that it was the wrong move.
I think your account has been hacked and a troll bot is now using it.
&gt; the response I would get throw 
If I had a time machine, what difference would that make?
I have been developing web based applications for longer. I have worked with a number of different teams but none of them were terrible. In my experience at least half of development time is spent working on the Front end using the technology you are referring too. With JSF components it is dramatically less.
&gt; Renderkits to write a mobile UI? So that you don't have to do clever stuff. If you have to do "clever stuff", why use JSF at all? I find JSF requires too much "clever stuff" when the abstraction leaks, which is why I would rather just use the web platform directly.
I think he meant making a fat jar with the javafx jars 
java is more open and free than .net core. get back to me when MS finally gets a cross platform UI for .net core
I'm making an educated guess. In the Java world alone, it's about a split 50% between action-oriented frameworks where web developers write Java web services and front end work with HTML/CSS/JS, and component-oriented frameworks where web developers don't do HTML/CSS/JS. If you look outside the Java world, most web frameworks are action-oriented and developers write web services in server languages like C#, Ruby, Python and PHP and do front end work with HTML/CSS/JS. Most of the startup world is not using JSF (and probably not Java either) and is developing web applications very competitively. Thus, either all of these people are rock stars and not representative of the average developer, or the average developer is perfectly capable of delivering similar numbers of features without twice the staff. In which case, if you do need twice the staff, I can only make guesses as to why that could possibly be.
Well it would explain why you're evangelizing an outdated tech that only a small number of enthusiasts who refuse to learn anything new are keeping alive.
Well you guessed badly. The reason is that Front End Development is time consuming. When you use good components it can be done much faster. It is not the solution for all development of course but for business applications it is far more productive in my experience. It is ok if your experience is different. 
&gt; On mobile you often have a different layout and fewer actions. Responsive design is only one aspect of a PWA. &gt; A render kit only takes care of the output of a component. For proper caching, this is actually very important. If the render kit can translate a Facelet into a representation that can be stored in the browser cache along with some JS code to control presentation, the JSF application can continue to run without the web server. Using the standard HtmlRenderKit this is not possible. You would basically have to do so much "clever stuff", it would basically make JSF pointless for a PWA. &gt; So I either create a template in JSF that inherits from a main template and omits some actions and output, or I put some conditionals in the main template. And all of this runs on the server. What if the server isn't available?
You mean I came from 2008 or I'm from now and taking WildFly 14 back with me to 2008? Any way JSF is just a new as any other tech. JSF 3 seems to be in development now, and 2.3 was released last year or so. Or do you also say that we should all stop using Java since it came out in 1996 (before JSF!), so it's too old and only used by people why refuse to learn something newer?
Yeah. Moved to Java 11 last week and that's how I did it. Maven Shade. It does have a bug however that makes it difficult to use, but there is a workaround. 
Thats an extremely brittle approach. The third party libraries are left on the classpath and treated as unnamed modules: * If any transitive library makes a call to Java libraries that was not included, it gives a runtime error * If any transitive library is an automatic module, it is elevated and [it gives an error](https://bugs.openjdk.java.net/browse/JDK-8130047) * Split-packages 
Glad I wrote my own Gui in the early 2000's. Still using it. (It is a real time gui using for game dev projects).
&gt; Running a big client side framework is never going to be faster than just straightforward HTML rendering. A web application isn't only doing HTML rendering. An application that spends most of its time doing HTML rending is a content heavy site, and it would make no sense to use a Javascript framework. The client side framework is taking care of all the other stuff that makes a web application an *application*, all the stuff that happens after the initial paint. For example, React renders component updates in a virtual DOM to minimize the number of DOM nodes that are touched in the live DOM, which significantly decreases rendering time.
They don't but if the server or network are gone there's often little you can do with either approach.
Yep. Using jdep to analyze the bytecode also found a bunch of them for me. 
No. That is the entire point of PWAs. Browsers today aren't simlpy dumb HTML viewers anymore. They can run fully featured programs and have access to local storage. There's a lot you can do with that, which means web applications don't have to be tethered to the web server.
&gt; this was addressed in the article. you mean by pointing jdeps to the required jars?
&gt;50% of the Java world web development world does not use JSF Where does this number come from? I would have guessed like 5-10% max. Most of the Java world lives in the present.
Nothing is for free. Every technology involves tradeoffs, and for web applications, client side frameworks offer very good tradeoffs, especially for applications which make a large number of dynamic DOM updates.
They can but doesn't mean that they should. I've seen devs here saying that js clients are an advantage because it lowers the processing a server needs to do, so they need less hardware. Don't you get that they offload processing to the client? Since a client has a cpu and cycles to spare, and a client wants that cpu to be used? Uhhhh, no! I don't want my cpu to be used fully! I want it to sleep and spare my battery.
That was a number used for rhetorical effect, and I'm not sure the accuracy of surveys, but this survey by [Zeroturnaround](https://zeroturnaround.com/rebellabs/java-web-frameworks-index-by-rebellabs/) puts JSF usage about 22%, with most of the other frameworks being action-oriented.
Financial employees.
That's not compiling anyway. But fine, as long as he got his answer.
&gt; They can but doesn't mean that they should. And who determines that? The browsers offer all of these capabilities, and people should not use them why? Because they consume cpu and battery, like every other app on the device? &gt; I've seen devs here saying that js clients are an advantage because it lowers the processing a server needs to do, so they need less hardware. Who says that? Most processing is obviously going to happen on the server. &gt; Since a client has a cpu and cycles to spare, and a client wants that cpu to be used? Yes. Why else would they install apps on their phone? PWAs are another delivery mechanism for running apps, that is universal and does not require developing multiple platform-specific versions of the application for each type of mobile device.
That just got a spot in my top 3 funniest programming-related vids.
Ok. Then I'd rather use something like this: https://github.com/marschall/jdeps-maven-plugin and hope none uses plugins, services, external dependency injection or reflection. Very unsatisfying if you ask me.
I agree with that. There's always trade offs, and sometimes a JS client framework is the one to go to, and sometimes it's a Java server framework.
&gt; and sometimes it's a Java server framework. And for me, that would not be JSF. JSF seems to me to be the worst of both worlds. The best case for server frameworks are for apps that are not heavily dynamic, in which case JSF's components are overkill, where a straight JSP template would do far better (or Freemarker, or Thymeleaf). And for apps that are heavily dynamic, JSF's abstractions get in the way, and require too much "clever stuff" to optimize the client side experience.
what kind of stability you're talking about? the module has been declared with Java9 and it's the same for Java11; and why do you need JavaFx as a default module? what's the advantage with that? just to know
The weird behavior is my favorite part.
lol
&gt; Java 11 receives long-term support in Oracle’s new release cadence, so its main purpose is to stabilize the major changes I don't think that's accurate. My understanding (mainly from Oracle engineer talks on YouTube) is that Java is now on a "rolling release" type of track - whatever is ready to go into a new release goes in, whatever isn't has to wait until next semester - just like the r/Linux kernel and other big projects. Other than that a good article summing up the latest (big) changes to Java!
Yeah, but for small applications, bundling a custom-built JRE just doesn't seem like a good fit. You're going from having a few-kilobytes JAR file that runs on every operating system to having to build 3 dozens-of-megabytes native images that you can't even properly pack into a single file because there are no up-to-date packaging tools. I'd really love to be proven wrong here, but to me, this just seems like a huge hassle for very little actual gain :/
Set each to use a different JAVA_HOME? Are you serious right now? I have 8,9,10,11 in both commercial and open running on my deck machine. 
this is more of the first removal - the truly great removal is a removal of access to stuff that's in the jdk. and it's coming sooner rather than later most significant libraries depend on a few of these features, and one by one oracle is cutting off access - locking down the end users in a walled garden
I believe IntelliJ , PyCharm Community, etc.. use Swing under the hood.
I'm definitely more of a .NET Core fan than a Java fan, but .NET Core doesn't have any equivalent of Swing or JavaFX right now. Desktop GUIs made with it can only run on Windows.
By which metric? I checked a few job aggregates and JSF didn't break 2k on any of them. 
&gt; Is this something people actually enjoy? I guess different strokes for different folks. Is this seriously surprising to you?
It looks like in your [submission](https://www.reddit.com/r/java/comments/9n4pnx/usecase_when_to_use_interface_vs_abstract_class/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Bro, you can use Bloc-notes too if you are a Windows user But believe me you will struggle, a lot , Using IDEs is more helpful and if you are argue that using IDEs will not help remembering methods and classes , these things come with practice Good luck tho.
It's more difficult, but having end users install a JRE from [java.com](https://java.com) was never intuitive or error-proof. Non-Java applications have had to do it forever. There's a [JEP](http://openjdk.java.net/jeps/343) to create a better tool for building regular installations, but it will probably be a while before it can be used.
That's just who uses JRebel and stuff. Not really an accurate picture. I'm pretty sure it's much less, they just come out of the woodwork in these threads.
Because nobody uses it. Prove to me that a significant amount of jobs or people use it and I'll believe that it's relevant. None of you circlejerkers have done this in this thread. 
&gt; This is a serious problem for distributing Java applications to non-developers. You either somehow get them to install OpenJDK, or you bundle everything you need from the JDK into a local JRE that comes with your application. I admit I don't create desktop Java apps, but doesn't the JDK come with a program named `jlink` that is explicitly for creating a custom JRE + libraries setup that you can distribute with your application?
Windows 10 ships with JREs now, doesn’t it?
Nothing new if you've been paying attention over the last few months. An utter failure by The Register to mention OpenJDK or any of the other alternatives.
The closest .NET Core has to those are Xamarin.Forms and Avalonia (a third party product currently in alpha). To make matters worse, .NET Core is gaining support for WPF in .NET Core 3, but **only for Windows**.
The recommended process for deploying Java applications is to bundle the runtime with your app (and use jlink).
Why not defer that decision until JDK 12 comes out? This way, if the upgrade is hassle free -- you win; if it isn't, you can go back to 11 LTS.
And this is why Linux has 0.01% of desktop market. 
What desktop market? 
Yeah. The new effort to get Windows GUIs working doesn't strike me as a bad thing, it just doesn't happen to help the movement for cross platform GUI frameworks.
True, but if you used a desktop computer of any ilk, it's quite likely you're mostly using it to get to web apps. We're making two different, and compatible, points I think.
Painfully true jokes: http://gs.statcounter.com/os-market-share
&gt; So you may not use Oracle’s JDK 11 to actually run programs unless you have a contract with Oracle. Although I like OpenJDK and I like the software changes to Java 11 in general, but this is where I get off the bus. I know I am late in the game, but this seems like a desperate move by Oracle. I haven't really developed anything new in Java in a while, so I really don't see a reason to return to using it. There are just too many alternatives. 
It's not free :(
You can encrypt the entire database, example: https://www.postgresql.org/docs/8.1/static/encryption-options.html Then there's no need to handle it at the moment of persisting entities.
A desperate move to open source Java and to give it away for free?
Nope.
First, there will always be ways to open up and use internals by using command line flags, Java agents, or even simply using good ol' JNI. But yes, there will likely be a stronger push to persuade users and library authors not to "hack" into JDK internals unwittingly. One possible change in a future release might be to make `--illegal-access=deny` the default, rather than the current permissive-but-verbose default (`--illegal-access=warn`). The main arguments for this is that all those internals are subject to change and not even guaranteed to exist on alternative or future VM implementations. However, intent is to make sure there are better and _supported_ solutions for libraries and applications made available as the strength of the push increases, thus considerable effort has been spent on things like `VarHandles`, `MethodHandles`, and new APIs like `Lookup.defineClass` (see http://mail.openjdk.java.net/pipermail/core-libs-dev/2018-October/055845.html for an example on how we replace JDK-internal use of `Unsafe` with this, along with some discussion on how this API could be improved). So, already in JDK 11 the mentioned additions collectively provide means to replace *many* uses of "hacky" reflection and `sun.misc.Unsafe`, but the story might not be complete for all imaginable use cases. Feel free to join the conversation if there's some use case you feel is not covered.
Two books about JSF from a major publisher came out recently. There's a large amount of questions about JSF on Stackoverflow, JSF is high up in a diverse amount of surveys (for instance https://arjan-tijms.omnifaces.org/2018/05/java-ee-survey-2018-results.html)
http://gs.statcounter.com/platform-market-share/desktop-mobile-tablet
Give this man some golds!
You are correct for non technical people. We should have AdoptOpenJDK builds push to Windows Store/Mac store and automatically update for non technical people. It should be the easiest one. When you look to download a JRE on the net, you may end up on an installer with spyware/adware 
reddit could also be in plain text, or only accessible with one-line editor? Why do we need for visual editor? What's the big deal? You just need to learn vim or a dedicated tool and that's fine? FYI I needed to manually modifiy visualVM (the config file) because it was unable to find the new java version that I installed by setting JAVA\_HOME manually
In September 2018, Oracle commercialised their services with Java SE 11. Meaning, you can still use the Oracle JDK for free, but only for development and testing purposes. If you want to use it for production, you will have to pay Oracle from day one. Ever since this came out, small business owners and developers all over the world are worried sick. They don’t wanna start paying for services, updates, and patches they always received for free. **Here are some ways you can avoid the Oracle Pricing and Licensing:** [How to escape the Java Pricing and Licensing Nightmare - Alternatives to Oracle](https://www.aquevix.com/blog/how-to-escape-the-java-pricing-and-licensing-nightmare-alternatives-to-oracle/?utm.source=reddit)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don’t use Windows 10 personally, but I was helping a coworker figure out some path issues the other day and without setting anything, there was a java runtime installed in some windows location and it was on the path. I suppose it could have been out there by something installed after win10, but this was a pretty fresh machine, 
There is also something similar on OSX. Without installing a jdk/jre, there is a jre that is available to the system as part of OSX.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
yes to both
In September 2018, Oracle commercialized their services with Java SE 11. Meaning, you can still use the Oracle JDK for free, but only for development and testing purposes. If you want to use it for production, you will have to pay Oracle from day one. Ever since this came out, small business owners and developers all over the world are worried sick. They don’t wanna start paying for services, updates, and patches they always received for free. **Here are some ways you can avoid the Oracle Pricing and Licensing:** [How to escape the Java Pricing and Licensing Nightmare - Alternatives to Oracle](https://www.aquevix.com/blog/how-to-escape-the-java-pricing-and-licensing-nightmare-alternatives-to-oracle/?utm.source=reddit)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I hope you guys will take a look around the project and be interested. Leave any issue there. Of course, it is also very welcome to leave what you think on here. ps. I did my best on the docs(readme, tutorials), but English is not my first language. please feel free to make a PR to make it better. [https://mindplates.github.io/scouter-paper](https://mindplates.github.io/scouter-paper) (git hub : [https://github.com/mindplates/scouter-paper](https://github.com/mindplates/scouter-paper)) &amp;#x200B;
swing's gonna get removed too
That's just an example config which works for local builds. There's no reason you can't set it up differently.
You could almost certainly get all 3 native jars and load them per platform if you were willing
It's not the `osdetector` dependency I'm worried about, it's the OS dependency that it implies...
Yes, they are. However, in my testing, simply bundling all of the platform-dependent jars works properly across platforms (at least on Windows and Linux), although it does inflate the final distributable size by a couple extra MB.
You mean building the JAR with all 3 versions and set the `.sh`, `.cmd` and `.bat` files to run the appropriate JavaFX JAR?
But it doesn't imply an OS dependency on the build environment. It just implies that in their example they *chose* to tie the platform of the build artefact to the platform of the build environment, because that makes for a convenient example. You can set things up to build and deploy for multiple platforms simultaneously. Or were you not aware that there are platform specific artefacts? Yeah I'd assumed your question was just about the build configuration and you already knew that, apologies. Some of the JavaFX jars come in platform specific versions, which is a pain.
No one
I am :)
JavaFX JARs are *always* platform-dependent, regardless of what you do or don't do or how you attain or build them. I'm not a JavaFX expert but this is necessary for several reasons, including using faster native code, interfacing with the OS GUI and 3D layers and drastically reducing the package's file size. Theoretically, you *could* have a single JAR but it would be pretty big as far as libraries go and either be way too complex to produce or be way slower to run by not using any native code (or doing so dynamically). It's a trade-off and they chose to go with having separate JARs, which seems right for me. One of the reasons I stick to Java is it's philosophy of "write once, run everywhere". Sadly, as of Java 11, all deployment expectations have changed and you shouldn't expect people to have a JRE or JDK installed - now you're supposed to provide your own binaries with each application through `jlink`. In that sense, platform-specific JavaFX JARs are completely a non-issue right now - and I don't anyone's going to convince Oracle to go back to the way things were. In one hand, it's a shame that the simple "JAR double-click" doesn't cut it anymore and you cannot expect people to have a fully up-to-date Java installation at every single computer anymore. On the other hand, users don't need to install and update Java themselves, we get compile-time dependency sanity and link-time optimization (which I imagine is gonna be huge moving forward), our bundled JVMs are pretty small compared to how it used to be, etc... It's not the Java we were used to up to this point but I'm OK with it ¯\\_(ツ)_/¯ if anything, I'm happy to see the language evolving again, on the fast track - especially when it comes to syntax improvements! Sorry for the rant, I was up until 1AM yesterday getting very intimate with `jlink`, modifying build scripts and figuring out cross-platform deployment so this topic has been very close to my heart right now, I've been thinking a lot about the pros and cons of it. Would love to hear what other veteran Java developers feel about all these changes in the core philosophy of the language!
I mentioned Gradle because the Maven version does not have that problem - at least not on the surface (as /u/duhace said, it does that behind the scenes). And yes - I was under the assumption that Java is a _build once run anywhere_ language. I know there were some packages with platform specific artifacts, but I thought that the official GUI should be platform independent...
It looks like in your [submission](https://www.reddit.com/r/java/comments/9nbmfd/object_equals_another_object/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/9nbq0m/how_do_i_attach_one_variable_to_another/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; there will always be ways that may be true now, but they're cumbersome today and getting more cumbersome and oracle has not stated that the future will be kind - their language is quite the opposite, using words such as "intended use" and "benign", which indicates an enthusiasm to pick and choose winners &gt; Feel free to join the conversation herding the simplest of changes through the openjdk process is a months-long process. yes, i could spend the next year constantly fighting for the particular fields that i rely on to be preserved and might win some of those battles. but that would be a full time job and prevent me from developing so thanks but no thanks - the environment is toxic to developers and users, and it's designed to be that way, eg not allowing non-contributors to post bugs - a system of control maintained by those that live in the ivory tower the best hope right now is that oracle oversteps and a viable fork of openjdk happens 
I feel the same. When I can get the same or similar service at two websites, with one draining my battery and causing my other apps to close, and the other not. Guess which one I’ll choose to use?
&gt; Guess which one I’ll choose to use? Does it matter? You have been overruled by the market, who clearly prefer app like UX 
If you made a single jar with all os-specific versions, how would it compare to the old approach of having a bigger dependency?
I'm seeing this pattern more and more, where suddenly we have to worry about platform-specific stuff in the newer Java releases. It's the same thing with JLink, now that the client-side deployment story seems to be "package the JDK(s) with your application". "Write once, run anywhere" is fast becoming "write once, package for all the different OSes and CPU architectures, THEN run anywhere".
&gt; On one hand, it's a shame that the simple "JAR double-click" doesn't cut it anymore You can still deploy like this. Just use jlink to add the modules you need and include the VM in your jar. 
we're doing a usability study in san fran that week so while i won't be going it certainly didn't make getting a hotel room very pleasant.
&gt; build once run anywhere It is "write once, run anywhere". Not build once. 
way to move the goalposts - i never claimed that they were changing the Java API 
https://adoptopenjdk.net/releases.html?variant=openjdk11&amp;jvmVariant=hotspot
I don't understand what you're asking.
https://jdk.java.net/11/ works for me.
i never claimed oracle was removing an API. for one, you don't need "access" to an API. i wrote: "removal of access to stuff that's in the jdk". and you asked for evidence, which i provided whether you personally feel that i "shouldn't use it" isn't something that i (or anyone else) care about
I spent up until 1AM yesterday porting one of my main projects to use jlink instead of an old jar build and I gotta say I'm very satisfied with the experience. Sure it took me a long time but that's much more on me wanting to explore and learn - I had a working jlink build fifteen minutes after starting the transition. I don't like having to provide one build per platform but even then I understand how we got to this point and that the advantages (for us developers and for Oracle as the technology developer) justify the changes in philosophy over how we worked before. Anyway all I wanted to say is that jlink is as simple to use for standard projects as you could hope for and cross-platform linking is a breeze as well. I don't think jlink in itself should be a show stopper for any developer who even barely knows what he's doing.
How am I overruled if I have a choice between websites as in my example?
And more importantly it's throwing away a lot of old baggage for a technology that is decades old at this point so it can start moving forward again at full speed. I mourn the loss of Web Start, bundled JavaFX and JRE desktop installations with auto-updates but if it's all for the sake of improving the language itself, then I'm in!
Did you automate your jlink usage (maven, etc?)
Some recruiters won't even consider your application if you don't have a degree, so yeah? Unless you already have a job and don't see the time investment as beneficial in the future.
It means your choice is irrelevant if the vast majority of users choose otherwise.
You can use the classifier in maven to download the dependencies for a different os. Also you can use jlink with a jdk for a different os. So you just change the configuration to build for a different os.
It's not what I personally feel. It's what Oracle has been saying since 1995 and what the Java compiler has been saying for as long as I can remember. Anything outside of `java` and `javax` is off limits. If you've been ignoring the big compiler warnings, then I don't have a lot of sympathy for you. Oracle has had enough sympathy to offer you official replacements.
If you can get a degree. You may not really need it now, but think 10 years from now. Lots of things could happen. If I were you, I would do it.
I'm having the same issues, trying to download [JDK 8u181](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html). I was initially able to load the page, but it kept throwing errors when trying to download the JDK like OP. Now the DL page doesn't load at all.... Waiting game at this point, I guess.
Isn't tomcat open to use commercially? There's a Windows binary installer for Tomcat, I know that. Honestly, just switch from whatever you were using before to OpenJDK, the only headache may be if you stay on Java 8 because I'm not sure how good OpenJDK 8 is on Windows (I know they don't have official binaries of OpenJDK for windows prior to Java 10). But yeah, I think you're worrying about nothing.
Tomcat is open source; it has nothing at all to do with Oracle or Java except for running on it.
Thanks for the answer. I'm aware it's open source, I was just wondering about the binaries they distribute and if they contain anything that may be affected by the change in licensing. I suppose if they did, they'd change that as well. Sounds like as long as the jdk installed on the server is good, then we'll be good as well.
If you can't install a JDK from a binary, you have no business working in development. It is literally a one-step process. You being incapable of preforming basic tasks literally essential to the very concept of programming is not a problem an .msi package can solve. 
You can use the Tomcat binaries you download from https://tomcat.apache.org/ without worrying about licensing (unless you modify Tomcat and then distribute it).
Thanks!
Thanks for the reply, I think you're right.
Get a bachelor's degree. You will get paid more and there is an entire world beyond java. You want to learn operating system fundamentals, data and algorithms concepts, objected oriented development, functional programming, assembly, web development, strongly typed languages, weakly typed languages. You want to fill up your resume with everything you can, but most importantly you want to learn how to learn. I have had several formal coworkers who only knew TCL/TK, or only knew PL/SQL, or only knew Perl and shell scripting, and could not learn any Java-related or web based technologies. They worked here for 20 years but when they lost coverage on our contract, we had to let them go because there were no jobs for them. In 10 years, this will be you if you only know Java. Branch out.
Glad you posted this. Not enough are talking about distribution changes. I personally love these changes. I have always shipped Java applications with all dependencies, including the JRE. I never understood why we should expect end users to manage our runtime for us. Now that we have a linker, these distributions can be reduced in size, in some cases dramatically!
https://docs.oracle.com/en/java/javase/11/tools/jlink.html Java 8 and 9 had a great tool called `javapackager` unfortunately it was removed from Java 11. Although on the JavaFX mailing list it has been stated they are working on a replacement. The Java 9 version of javapackager would use jlink (https://docs.oracle.com/javase/9/tools/javapackager.htm#JSWOR719). However, it looks like you can achieve a similar thing with just jlink. 
Man it's at 11 already? I still won't bother to update from my 8.0.181
After January you won't have security updates. You might want to think about migrating.
actually for small apps you have to create your own JRE, if you don't want to waste your time on releases and customer's JRE checks it is actually more convenient: sure if you just package your binaries in a JAR it's just a few kilos, but it really and strongly depends on what kind of APIs you're using; but then let's suppose we want to create a terminal app for SQL updates or a silly app like that, you do have to require SQL module, JDBC driver etc. in such case although the jar itself is small you use a small part of the runtime anyway, so why bother the customer to download the whole JRE? most of all what if they need to download the updates of it as well every 3 or 6 months (or less)? they need to care about your releases and JVM releases... so confusing... it's better to simplify that and with jlink is possible. 
Without a degree, I would dump your resume in the bin immediately. You don't know what you don't know.
I don't either really. I think I might be getting two posts confused.
Yeah I definitely will do that when I have to.
What about open jdk? Will I get updates if I download the source code and compile it myself? 
Why exactly do you care if you need to use OpenJDK or Oracle JDK? They have (almost) the same download content, only a different license and the latter is covered by Oracle's support (there are 3rd parties that give support for OpenJDK).
As I said, I miss the old "give the user a JAR and he'll be able to run it anywhere" but this is 2018 and Java is starting to catch up from way back on the early 2000s and into current-day scenarios. So far, I'm along for the ride! &gt; Not enough are talking about distribution changes. Absolutely agreed! I'd like to hear more people's opinions on this.
The time to do that is now. It's only four months until security updates stop. Start running parallel builds on your CI server with Java 8, 11 and 12.
No need to compile it yourself. Oracle are providing binary builds until at least Java 12 is released and AdoptOpenJDK is promising builds after that.
&gt;non-technical users ... set JAVA\_HOME &amp;#x200B;
Well, I'm compiling it to bundle it inside an application (licensing). While I Know open jdk is still maintained by oracle, I didn't find binaries for the Jdk 8 that weren't those distributed by my operating system. 
Sorry, you might mistake me for someone competent. lol I'm in college and still haven't made anything noteworthy that needs to be switched. Our latest assignment has to be delivered in Java 8 anyway. Switching when that is done.
You should be able to find a Java 8 binary from Oracle for the next few months, after which you'll have to use Java 11 or accept that you won't have security updates. https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html I believe the correct way to bundle the jvm with your application after Java 9 is using jlink.
I'll be there and so will be dozens of Java Champions. 
There's enthusiasm about removing *use* of `Unsafe.defineClass` from the JDK (meaning the public API is now as good or better as the legacy backdoor for this internal use), and a request for opinions on what it'd take to be able to remove it entirely. You make it sound a lot more ominous than it really is.
i edited the top-level post to address this argument 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9nf29x/help_with_reading_from_file/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Go to college if you want to learn something else that does not relate to trivial programming (web development/mobile applications). Go to college to learn electronics, physics, chemistry/biology, go to college to learn about a challenging field where programming can be of great help. Dont go to college to learn how to program. 
Some companies' HR just tosses resumes without a degree. This doesn't mean you need an expensive degree, necessarily however.
Yes, consider this as an option.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You want to learn creative writing, social skills, problem solving and critical thinking, but most important thing a degree can teach is to learn how to learn. Of all the skills that allow your career to progress, problem solving and writing are the single most important. 
Either this or include all jars as resources and load the appropriate one during the start of the application. The dependency injection part of the spring framework might be a good fit for this.
Get a bachelor or master degree. You'll learn "new" techniques beside java. You'll get in touch with soft skills or complete other topics like accounting or "best practises for kickstarting a business". Espacially wirting, speaking, rhetorical skills are the most important thing to learn, to land awesome jobs nowadays. (imho)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That is Oracle's JDK, not the OpenJDK. You cannot ship Oracle's JDK unless you pay for the license. OpenJDK is distributed with a GPLv2 license with the classpath exception. 
yep well they are not that recent projects, but if use for instance SQL Developer they started to mix Swing with JavaFx
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Not me
It looks like in your [submission](https://www.reddit.com/r/java/comments/9nitmp/microservices_online_demo_by_srinivas_730am_ist/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Vote this: https://youtrack.jetbrains.com/issue/IDEA-188689
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Getting degree will get you degree plus job; not vice versa. If you don't need money to survive, get degree - it will be the best time of your life, which you won't be able to get back with your money in your thirties(trust me, I did it)
college is free in some countries...
There are a lot of part time dev jobs. Setup google jobs / LinkedIn job alerts for part time dev roles and you’ll get plenty of results sent to you everyday
Regarding regular employee it depends what country you are in. I know quite a few people working in Switzerland and Germany working 3 or 4 day weeks, less so in UK. But there's always remote and contract work you can pick up for set periods of time.
Does it offer encryption? With grpc i am able to terminate encrypted grpc at a proxy.
I agree with you up to a point but after I gave myself a couple hours to learn to use `jlink` I can absolutely say that it's the best cross-platform packaging tool there is - you can build for 3 platforms at once in under a minute from any OS. Meanwhile, you can't even do cross-platform builds easily *at all* in with any other major technology. &gt; "write once, package for all the different OSes and CPU architectures, THEN run anywhere" Thankfully that is still "WRITE once, RUN everywhere" at the end of the day. If you used SWT for example, you already needed package-independent JARs as early as a decade ago. Yesterday I was using a Node dependency that also needed a package-specific download (it even built itself on my OS as I installed it). It's *definitely less convenience* for us developers compared to the way things were but I can also see the reasons why and what benefits we get from this core change in philosophy. So fa I'm OK with it, especially if it helps Java move forward again at a quick development pace as we've been seeing. It's not hard to adapt at all.
Its really hard to find part time dev jobs. Believe me. I tried /forhire here in Reddit. and people just want some very specific work or very tight deadlines with very less money. I spent almost 30-45 mins on daily basis but very less replies. Even worked for two guys but never received the money and at the end of the project when the functionality is working or all bugs resolved. they keep on saying code doesn't work or memory issue and we are not paying you. so felt sad and left /forhire . 
I don't think there is formal specifications for this. Depends on type GC using and cases many people just have "rules of thumb". For myself I reserve something about 75% of Xmx for GC in my containers. And surprisingly it could be not enough sometimes (depends on your app). It is huge waste but reality.
Thanks for your insights based on experience. It's such a sorry state of affairs if this really is the case though. We were using parallel with jdk8 and were hoping to benefit from g1 in jdk11 but the overhead is insane (and seemingly unbounded).
Yes, fell you pain completely. G1 is a well-known memory hog, I'm still not using it in production because of it.
TL;DR: use batch inserts when persisting large number of rows. 
There could be many things that use off-heap memory (Unsafe class). Afaik, jvm's default max direct memory size depends on the value of Xmx and the available physical memory, but you can control the maximum using the `-XX:MaxDirectMemorySize=2G` flag.
It also shifts the burden of releasing security updates for Java to the developers/software publishers. From a distribution perspective, now you have to create an exe, dmg, and a tarball, but I guess at this point Oracle wants us to forget Java ever existed on the desktop and instead build for the web and mobile.
&gt;GC (reserved= &gt; &gt;3657100KB +1089325KB &gt; &gt;, committed=3657100KB +1089325KB) To add to what I wrote, the above has already helped narrow it down to garbage collector's usage of this memory. I don't need to look at unsafe, directbuffer, metaspace etc... 
Will all the naysayers please read this: &gt; **Won't bad developers misuse this feature to write terrible code?** &gt; &gt; Yes, bad developers will write terrible code no matter what we do. Withholding a feature won't prevent them from doing so. But, when used properly, using type inference allows developers to also write better code.
Usually Java devs work in some kind of a backend framework. Spring Boot is one of the more popular ones. I would suggest you learn a bit about it and try to build some basic REST service, but to build one you have to learn some other concepts first. Understanding relational databases is pretty much a must. Understand what an ORM is and how to use it. Read a bit on MVC architecture and dependency injection. As a junior, you don't need to understand those concepts in depth, but knowing generally about them and being able to use them is a big plus.
Thanks :)
Are any of these able to decompile a ZKM (Zelix KlassMaster) obfuscated jar? I could not find any tool that helps with it.
I wonder why they must do these batch inserts through JPA, seems like such a hassle.
Which one is used in IntelliJ IDEA ?
Competence in java, understanding of related programming things like XML, json, git. Understanding of all the core concepts: inheritance, polymorphism &amp; encapsulation. Then it's job specific, one job might want more experience with multi-threading, another might be android and knowing Kotlin would be useful. But most importantly experience. It's great understanding concepts but where can you show you have used them?
You're picking things out of context and reading a lot of things into this that simply aren't there. A common reason for the JDK to bypass public APIs and use `Unsafe` directly is to avoid bootstrap issues. As an example, the only reason why `ConcurrentHashMap` hasn't been rewritten to use `VarHandle`s instead of `Unsafe` is that the implementation for `VarHandle` itself depends on `ConcurrentHashMap`... The expression power of the supported, public APIs of the JDK has increased a lot in recent years, in part to encompass various unintended uses of `Unsafe`, but also since some of these internals have matured to a point where exposing more low-level implementation details is less risky. There's an ongoing conversation with Rafael and others on how to add APIs or mechanisms to support some of the `Unsafe` things they want to be able to keep doing. There's more context out there, along with more or less pretty workarounds, and there are many things on the table that may or may not happen. If you think that conversation is "toxic" or that Rafael is being "demonized" then I'm not sure what to say..
FernFlower
i hope that you're right. but i wouldn't want that language used about my own work, and i didn't like seeing it used about rafael's work. to me, those are words of judgement, not engineering 
I've never seen terrible code being written in C# because of local type inference so I never understood why some people are going against it in the Java world. Maybe they have a bad opinion about their fellow colleagues.
How far along are you? You need for certain stuff like SQL, Java8 knowledge, basic concurrency, etc. As far as libraries go once you're pretty good Spring framework is the most amazing thing I've ever come across. Spring boot is cool and shit, but learning the spring core down to the bones is extremely useful. Both for you as a developer knowledgewise, and your utility. What I'd do is learn spring, learn how to autowire, learn qualifier, learn JPA, all the repository types in spring, and learn hibernate. Then learn HQL down to the core because that shit is super important. Once you can connect hibernate and spring learn some frontend stuff. Reactjs is actually really solid. A lot of people have seen me say stuff in this subreddit against js frontends but uh...man I was wrong. Once you have those 3 pieces all you really need is Spring Security, and you can make some pretty serious enterprise applications. If you get into using google cloud SQL with spring and such you can do (very) basic distributed systems as well. So yeah I'm pretty much sold on Spring. Others can provide you with another perspective, but to me the Spring+Hibernate stack is here to stay. The only thing changing is the frontend technology you use to interact with it. 
Just apply on full time. During your first round you have an opportunity for asking questions. That's where you leave your part time requirement. Here in Germany, this works perfectly.
Thanks, I will follow your advices. But as I can see I have still some way to go if I want to get my first job. I got some udemy courses and I will try fill all the holes I have in knowledge with that( I don't know what you guys think about this courses there) I'm mostly going through the pdfs and make sure that I havent forgotten what I knew. I move to a new country t2 years ago and since then I didnt have time to code. So now I'm relearning as much as I can and then apply for jobs after a have a few strong projects. 
Skill of learning by yourself.
What if there could be a no arg constructor, as well as the absence of any constructors at all? Now it would be possible to have classes with no constructors that execute, they just fill with zeros, and they are as efficient as a struct. Yet if it is necessary for certain types to ensure correct construction, a constructor could be created, understanding that this has a runtime cost. &amp;#x200B;
Some people just don't like change.
I was a naysayer until some months back. I didn't see any possible use of var, or any reason to use it instead of a class or interface type name. But I read a post (here, no link sorry) which convinced me. There is one unique thing that a var can do that cannot be done any other way. Have you ever created an anonymous class? Or maybe an anonymous subclass of a class or interface such as the action handler for a button click? Suppose you then need to add a few additional members to your anonymous instance. You will probably end up having to create an inner class instead. Because your only reference to the instance is via the type name you used -- which doesn't include your additional members. Var to the rescue! Use a var to hold your anonymous instance or anonymous subclass that has additional members. While there may be no class name for this, the var (as I was led to believe) is "of that anonymous type" and therefore allows you to reference your additional members of your anonymous class. I hope that made sense. (or cents, scents, or since)
Perfect sense (aside from the last sentence).
Absolutely agree. There are definitely people who disliked Java's automatic updates, but it's undeniable that they worked well and didn't require additional development time.
It’s amazing. I also love being able to set debug steps in the decompiled code. 
sounds like FUD on both counts (and both azul and ibm have a vested interest is pushing people away from openjdk to their own proprietary ecosystem) 
I am thinking that if you get Open JDK from a source that is NOT trying to sell you a commercial license, you are less likely to be subjected to scare tactics to frighten you into getting a commercial license. I don't see the problem with GPL + Classpath Exception. Clearly you cannot (ordinarily) use GPL for a closed source application. It is the Classpath Exception which enables this. See the GPLv2 + Classpath here: [http://openjdk.java.net/legal/gplv2+ce.html](http://openjdk.java.net/legal/gplv2+ce.html) &amp;#x200B; Now here is something that makes me wonder . . . &amp;#x200B; Certain source files distributed by Oracle America and/or its affiliates are subject to the following clarification and special exception to the GPL, but only where Oracle has expressly included in the particular source file's header the words "Oracle designates this particular file as subject to the "Classpath" exception as provided by Oracle in the LICENSE file that accompanied this code." &amp;#x200B; Okay, so are there any files that DO NOT include the classpath exception? &amp;#x200B; &amp;#x200B; &amp;#x200B;
You don't want to work for this kind of manager. 
&gt;Even if you do modify Tomcat and distribute it, why would there be a problem? &gt; &gt;Tomcat, as anything from the Apache foundation would be under the Apache license wouldn't it? (Probably the Apache 2 license.) &gt; &gt;Why would that license give you any problem distributing it.
https://github.com/java-deobfuscator/deobfuscator
Because every network round trip takes time. I am ideal world it would just default to batch inserts but there are reasons why it doesn’t always work I guess. 
Why not just make the class and do your thing. Something I never understood about software development is such small things like uninitialized values are over complicated by these types of post filled with vocabulary that just confuses a learner even more. Simplifying it to "bruh be aware if you don't define your non primitive objects theyll be null and could cause null pointer exception if you aren't careful, be aware but you do you". Is much easier for a 20 year old college dude to understand. Everyone is trying to grow their dick with vocabulary to impress knowledgeable people rather than making it easy to understand for beginners. On such a basic topic such as this there is no need for complexity
You should at least read it before distributing it. You *should* read it before using it, but doubly so before distributing it.
As already stated by others, this probably depends a lot on your country/area. Here in Austria most employers are fine with you working anywhere between 30 hours and full time.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Academic level post?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
CraftyAdventurer gave a pretty good answer. If you have time to read, I think Effective Java (3rd edition to be up to date) is a must read (Maybe not that important for juniors but still could be a great improvement to your knowledge of the language)
&gt; You mean this survey that shows all of Java EE is at 9.5% LOL! That means about 10% of Spring users also use Java EE. Baeldung is a Spring website! (yes, they try to gather for a wider audience now, but they still mostly attract Spring people). 
https://blogg.kantega.no/webapp-with-create-react-app-and-spring-boot/ Not quite what you're asking for, but may be relevant regardless. It covers compiling js and serving static content as a part of the build pipeline.
Adding to what others have said, I'd include JUnit for unit tests, and for builds, maven and gradle. &amp;#x200B;
Sure, docs, fonts, images, etc. But you don't link against those so GPL doesn't kick in (or at least that is my non-lawyer understanding).
On point 2 about GPL+CP, I found this post to be very helpful https://softwareengineering.stackexchange.com/questions/119436/what-does-gpl-with-classpath-exception-mean-in-practice
It looks like in your [submission](https://www.reddit.com/r/java/comments/9nokgu/help_a_fellow_java_programmer_to_startagain/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Learning Python....? 😀
Regarding the default constructor approach: Are there use cases where the default value for a value type must be computed for each value? The only reason I can think of is side effects in the default constructor, but that seems dangerous: the developer has to be aware of all cases where the default constructor is called implicitly, seems very easy to get this wrong. My point is: If the default value can be customized, it should be a constant. I imagine it would be more efficient to insert that constant everywhere instead of running arbitrary code for each value. Terrible strawman syntax: public __ByValue Fraction { __default = new Fraction(1, 1); // only run once (somehow) int numerator; int denominator; public Fraction(int numerator, int denominator) { if(denominator == 0) { throw new IllegalArgumentException("denominator must not be 0"); } this.numerator = numerator; this.denominator = denominator; } } That doesn't *code like a class*, but maybe it's close enough? As a sidenote: If we can change what *coding like a class* means in the future, it could be fine. Today, classes behave semantically like: public class Optional { __default = null; } Maybe we can someday say something like: public class Optional { __default = Optional.empty(); } and then optionally do some handy-wavy type system trickery so null can't be assigned to it.
I was going to upvote your parent comment but now... Nope.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How to detail a car. Our last intern was terrible.
Congratulations 
is there an update mechanism for jlink'd applications ? i mean, if a patch fixes a security issue in the jdk
Minecraft players, I'd imagine. If Java had value types back when Minecraft was written, one of its major performance issues would never have existed.
Problem: In order to keep track of whether the default constructor has run yet, each instance of a value type would have to have a header with an “initialized yet?” flag…which kind of defeats the purpose of value types.
That's literally a static final singleton. Those are already possible: public __ByValue Fraction { private static final Optional&lt;Fraction&gt; fract = Optional.of(new Fraction(1, 1)); // will only run once. public static Optional&lt;Fraction&gt; getFraction() { return fract; } int numerator; int denominator; private Fraction(int numerator, int denominator) { if(denominator == 0) throw new IllegalArgumentException("denominator must not be 0"); this.numerator = numerator; this.denominator = denominator; } }
&gt; Use IntelliJ's "Analyze" and it'll tell you when you are doing something dumb a lot IntelliJ told me that I should use this stupid .equals() method or something on a variable instead of the == operator. So now I do not trust it at all.
&gt;Have you ever created an anonymous class? Or maybe an anonymous subclass of a class or interface such as the action handler for a button click? Suppose you then need to add a few additional members to your anonymous instance. You will probably end up having to create an inner class instead. Because your only reference to the instance is via the type name you used -- which doesn't include your additional members. Can't you just declare a named class in a method? Which, if you have to use it like this, you should be doing anyway.
I actually disagree with quite a few of the answers here. I was promoted from a junior to senior about a year ago so feel like I'm in a good position to answer this question. Firstly as strange as it sounds I wouldn't worry too much about the java side of things. Sure you should have a good understanding of the language and how to write good, effective, clean code but in terms of frameworks and patterns I would say that they all come with practice and you'll naturally learn these things if you're working with them/other who use them. I think what would really benefit a junior developer is a good understanding of git. It's amazing how many people don't fully understand this tool and it stops them doing their job effectively. Sure it can be fairly complicated and you don't need to know everything but you should have at least some understanding of git workflows and what branches/PRs/merging is. Secondly I suggest learning maven/gradle, again these can be fairly complicated but when you use them everyday at work an understanding of what it does and how it works is vital in troubleshooting/getting started on new projects. Again at the last place I worked so many people didn't understand these tools and when anything went wrong they would have to ask for help from "maven people" i.e people who know how to do their job. Finally I'd say intellij (or the ide of your choice), when you first get in you'll have no idea what is going on, what all the shortcuts do or mean but if you get a good basic understanding of the IDE as your knowledge of Java/frameworks/maven/gradle improves you will find yourself understanding more and more about what the different buttons do and why it's so helpful. I hope you find this helpful and remember imposter syndrome is highly prevalent in software engineering so if you feel like your out of your depth just feel free to ask for help, remain calm, you're a junior and absolutely no one expects for you to know everything.
Lol twice in this thread I find posts that are hard to believe someone wrote and assume they must be trolls. I think since they are both from RailsIsAGhetto it seems pretty certain. Why you trying to mislead young up and coming devs? Go out and socialize a bit bud, I think you're overworked. 
lol
Are you looking for a job? Every company will focus on data structures, algorithms and design patterns. Practice on leetcode. Id never expect a junior developer to know the ins and outs of a framework or specific Java tools. I would want to know that you can solve problems and apply what you've learned in CS program
I honestly eat rice by just grabbing the pot off the stove after it cools and dipping my fat hands directly in it and shoving handfuls into my mouth letting it fall all over my hairy face and fat stomach. First I put a whole stick of butter in the pot though. 
Impressive 
Cool story bro. Not sure anyone is liking your toll comments though and they don't help any of the things you're railing against. Only one charlatan ITT and I'm talking to him now which is evidenced by your insistence that all programming must be done using your preferred syntactic sugar such as Java streams and collectors. If you're actually in a management position, I feel very very sorry for your team. 
Just wanted to say that I totally feel where you are at. I was in your exact shoes 5 years ago. Whatever you do, don't quit and don't give up. I felt overwhelmed for about the first 3 years in the industry. It's a rough start but it will get easier and more enjoyable in time. My best advice is to ask questions but make sure you try something first and Google your problem. People love to help but people don't like to waste time so take your best stab at a problem but as soon as you are stuck then start asking questions
&gt; your insistence that all programming must be done using your preferred syntax This is every programmer ever. Every single passionate programmer insists their way is the right way. It comes with the job. You do it too. &gt; I feel very very sorry for your team No you don't because my team has no room for sloppy garbage programmers like yourself who love useless unit tests and deprecated syntax. Looking at a C-style FOR loop is going to confuse the shit out of anyone who is starting out. Python doesn't have them. Ruby doesn't have them. JavaScript written the right way doesn't have them. So writing these old crusty loops is going to mislead the young up and coming devs even more. The new syntax is fucking beautiful. I even named my third daughter Map-reduce. If she doesn't grow up to become a programmer I will honor-kill her.
Narcissism != passion But sure, keep trolling 
Learn how to use [Spring](https://spring.io/) in some regard. Try to learn enough about [Kotlin](https://kotlinlang.org/) and [Scala](https://www.scala-lang.org/) to be comfortable with them.
OK, I read it. It's still a stupid feature that shouldn't have been added. The only people who seem to be in support of it are the "concise" advocates from Python and C++ who complain a lot about the verbosity of Java. Like Lambdas and Streams, var is a pointless alternatives to doing what could already be done but in fewer lines. Performance, Readability, Refactorability, Reliability, etc are not determined by the number of lines or characters on a particular line in 99% of cases. var is pointless and stupid. There is no situation where it it achieves anything that couldn't be done otherwise. Write a block of code that shows var's strong points and I promise you I will write better code using the old way *because there isn't*. 
&gt;Have you ever created an anonymous class? Or maybe an anonymous subclass of a class or interface such as the action handler for a button click? Right there is your *actual* problem. Create a private class instead.
In my experience, you must have a technical knowledge of Object-oriented programming (usually Inheritance &amp; Polymorphism). You must also understand the concept behind XML, ORM (e.g. Hibernate) , Database design (Primary Key and Foreign Key).
&gt; I even named my third daughter Map-reduce. If she doesn't grow up to become a programmer I will honestly disown her. Ok, I don't agree with the rest of the trolling but that was pretty funny.
Not at all. The traditional updating mechanism is also gone because Oracle threw the desktop installer away and all that came with it. Basically now you provide the updates yourself. Thankfully there's a few third-party launchers that support auto-updating files on launch. Here's [one example](https://github.com/update4j/update4j) and I know there's a least a couple more that seem worthwhile on GitHub.
Lots of good advice here that I agree with, but I want to add my own take. I'm in sort of a unique position because I'm a "junior" dev in the sense that I've only done it professionally for 3 years, although I'm 49 and have actually been programming since the 80s. (I spent 20 years in the military first.) Anyway, besides the technical skills that others have recommended, here are some crucial skills that will help you make it: * Learn to be able to take constructive criticism on your code. Actually, not just take it, but seek it out, realizing that it will make you a better programmer. * Learn to never be afraid to ask questions and to admit when you don't know how to do something. Most more senior devs that I've worked with (and I have to admit that I've been lucky to work in a professional, non-toxic environment) are more than happy to share their expertise. * Accept that others may have a different programming style than yours; this doesn't make them wrong, just different. * This was the toughest thing for me to learn: for anything but the most trivial assignment, you need to plan it out, on paper, in advance, before you write any code. * Learn to properly document your code, both through comments and in a separate document. This is incredibly hard to do, at least for me, because it's just not fun. But you have to understand that, even if you leave, some poor schmuck is going to have to maintain your code. * Most important, recognize that your job isn't to write code. It is to make your company more successful than it would have been without you. **That** is why we take pride in our work, **that** is why we write good comments and put up with code reviews and write documentation and all the "non-fun" stuff.
You
Nope var is not pointless nor stupid, your comment is.
Funny, since most people I know tend to avoid battery draining apps. The OS even explicitly points out which apps drain your battery, and a warning appears when a website is using significant energy. It’s easier than ever to avoid these, and people do!
&gt; That sounds just like setting values to null as a default value and then using setters to change their values. Why exactly are structs more efficient? It would undermine a lot of the value of value types but the selling point is still that they're stack-allocated so you avoid some pointer indirections. If this were the compromise, though, I think I'd just as well be without them for the detrimental impact on code quality caused by multi-phase initialization.
Says my comment is stupid but doesn't make an argument or provide a situation where var is actually useful(because there is none). Begone foul troll!
Lots of true statements here.
That's probably true about value types as well, I didn't want to assume too much. The point is that this static final constant should be used as the default value, so the following properties hold: Fraction[] fa = new Fraction[1]; assert(fa[0].denominator == 1); // not 0! // or var o = new Object(){ Fraction f; }; assert(o.f.denominator == 1); I think the default value constant should get some special syntax (or at least some magic annotation). Having a special name like `public static final Fraction DEFAULT = new Fraction(1,1);` seems very surprising.
In his personal blog ([https://www.jerolba.com/](https://www.jerolba.com/) ), he wrote another 2 posts (in Spanish) about how to persist fast in database using plain JDBC and using methods of the underlying JDBC driver for each database. At the end of his last post, he presented a library he created for that purpose [https://github.com/jerolba/jfleet](https://github.com/jerolba/jfleet)
I agree with you that JPA is not the best option in this kind of situations. This post (and the next one) just tries to measure this hassle. It can also help people who can not choose not to use JPA &amp;#x200B;
I propose other non-stupid strategies in the post as solution. I decide to use the counter just to simplify the example code.
Map-reduce! LMAOOOOOOOOOOOOOOOOOOOO!
There is a fix you can download here: https://www.jetbrains.com/idea/download/ 
Add this feature via marketplace: https://marketplace.eclipse.org/content/java-11-support-eclipse-2018-09-49 
facepalm
Unless that was a senior dev not knowing basics, why would you fire such a person? Teach them... unless they refuse to learn, then they should be fired. 
Oracle just released Java 11 so yeah we still have to wait a bit..
:D
i n t e l l i J
Should not it be "standard" by now?
I'm sorry, you're right, didn't read carefully what you wrote and replied too fast.
Unfortunately it breaks everything else :/
The proposed lazy initialization also has a run-time cost. Every field access or method call on a value-type instance will carry the performance penalty of checking whether it's initialized yet. Not to mention that the constructor will eventually be called 100 times anyway, just not all at the same time… If you want to be able to construct an array of a value type with 100 slots quickly, you probably want to have a single prototypical instance of the value type, filled in by an initializer that runs when the value type is loaded (like how static initializers work). Then you can `memcpy` the prototype into each array slot. Of course, this has its own issues: * Like static initializers and unlike normal class constructors, the side effects of this prototype initializer will only happen once. * Like static fields, the fields of the prototype instance may contain object references, preventing the referred-to object from being garbage collected. Unlike static fields, however, the fields of the prototype instance are presumably immutable once initialized, making it impossible to clear those references in the future.
&gt;There is a fix you can download here: https://netbeans.apache.org/download/index.html FTFY.
It is a pretty big assumption to attribute all of its performance issues to excessive and unnecessary heap allocations. Layout of data structures and choice of algorithms can have a say as well, not to mention general code structure; there are many ways to write the same piece of logic and if you don't pay attention to performance implications you could make really bad choices here and there. But that being said, will value types in Java be as powerful as structs in C? For example in C you can allocate a struct instance on the stack and pass a pointer to it to other functions, avoiding not only heap allocations but expensive copying as well. It seems unlikely to me that Java would support pointers to value types unless they were a separate data type with its own set of restrictions to prevent dangling pointers from making it into more permanent data structures that live outside that particular call sub-tree.
&gt; Like Lambdas and Streams, var is a pointless alternatives to doing what could already be done but in fewer lines. Spotted the try-with-resources hater &gt; Performance, Readability, Refactorability, Reliability, etc are not determined by the number of lines or characters on a particular line in 99% of cases Right. Off the top of your head, please write a correct try-with-resources statement with Java 6 syntax. &gt; There is no situation where it it achieves anything that couldn't be done otherwise. var o = new Object { String firstName = "Lukas"; String lastName = "Eder" }; System.out.println(o.firstName); System.out.println(o.lastName); Thank me later &gt; Write a block of code that shows var's strong points and I promise you I will write better code using the old way because there isn't. Let's use jOOQ, then: var record = ctx.select(T.A, T.B, T.C, T.D, T.E, T.F).from(T).fetchOne(); Do you really want to write down the `Record6&lt;TA, TB, TC, TD, TE, TF&gt;` type every time?
Why do people do this? &gt; To see this. Write a class SomeClass then in Main say var x = getSomething() where getSomething returns an instance of that class. Find Usages will not find this. If I do SomeClass x = getSomething() then it does work fine. I mean, why describe code with prose, when it could be described with... ghasp... code?
If you can understand easy installation, you have nothing to do in business... Honeslty, i would not like to be one of your customers. You are the kind of guy WHO KNOWS PERIOD. 
In general, the Java files in the JDK libraries and interop/embedding files (like `jni.h`) of the JVM are designated for the exception, while internal JVM files are not. 
I recommend you to take all advices people gave you here and put them in a personal project. And then upload it on GitHub, so you will have something to talk about in a interview.
Know how to write a for loop, and be able to copy code already done in the baseline by people 4x better than you. Also, you are more than likely not prepared for the abstraction hell that is a mature Java project.
"Build it with us!" ...but then pay us to use what you've built in production...
Wait until they learn about the PostgreSQL `COPY` command or the MySQL `LOAD DATA` command.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Not sure anyone is liking your toll comments Why are you being so sensitive about some sarcasm?
Non US resident here. Is getting a degree overseas cheaper?
&gt; Accept that others may have a different programming style than yours; this doesn't make them wrong, just different. Usually it makes someone wrong. There aren't all that many right ways to write code, but there's a hell of a lot of wrong ways. The chances that two right ways are colliding is relatively low. Most likely it's an argument between two wrong ways, lol.
You won’t have to if you use the OpenJDK builds.
Thank you for your reply! I appreciate the effort you’ve made in the blog post. I am sure it will help people who need to make JPA inserts perform better, or as you said, help in making an informed decision. Do you plan to measure an alternative to JPA? I would also be interested in why you choose to use JPA in your case. 
... but then pay us if you want to buy support from us, otherwise don't as we've now open-sourced the *entire* JDK for the first time (which is why you can even buy support from other vendors who've contributed... to varying degrees). FTFY
Especially when many of the contributors can and do charge separately for support, including both those who've contributed a lot and those who've contributed very little.
I didn't choose JPA in my real production code. I wanted to know what difference there was between different persistence methods, and how to tune each one to reach the best performance. I started with JPA, but the next post will use JDBC directly, and the third one will use the commands that [lukaseder](https://www.reddit.com/user/lukaseder) mentions in [his comment](https://www.reddit.com/r/java/comments/9nj59x/persisting_fast_in_database_with_jpa/e7ouhxz/) &amp;#x200B;
Your comment is beyond stupid that there aint any point to give an argument. I'd like to ask you the same question. Give me a situation in which explicit local variable types explicitly is better than implicit declaration with var, and I can tell you that nope you cant. 
Presumably that is one of the better cases for an optimizer to work with.
My config is a mess and depends on a lot of work in progress uncommitted changes. Basically what you are seeing is: Theme: spacemacs-light Package: - `lsp-java`, `lsp-ui`, `dap-mode` - https://github.com/emacs-lsp/lsp-java/ (Scroll down to the Quick Start section for configuration) - `treemacs` - https://github.com/Alexander-Miller/treemacs - `company-box` for the iconized `company-mode` - https://github.com/sebastiencs/company-box As a side note, I am working on themes support(eclipse/idea/vscode/atom).
duh
Pay us for support or pay a consultant for a support or pay an employee for support or pay for it through your own time and personal resources trying to figure out the answer on your own. There really isnb’t anything nefarious going on here with Oracle. If your organization requires paid, on-call, formal support, pay Oracle. If you don’t have that requirement, then use one of the any several other methods that you have used over the years when you have needed assistance. And use OpenJDK.
It is. Click on the link they provided.
Not good joke though since NetBeans 9 doesn't support JDK 11 either. NetBeans 10 does but it won't be released for another month or so.
This, precisely. Up to Java 8 I can distribute a jar, and even my most non-technical users are capable of downloading and running an installer from java.com. Post Java 8, either my users have to learn how to download OpenJDK and set classpaths (never going to happen), or I have to jlink executables for them on three different build platforms... which means I have to go out and drop &gt;$1k on a Mac for the sole purpose of building Mac binaries. So I guess I'm sticking with Java 8 for the foreseeable future...
IDEA is trying his best to steal Eclipse users that is a way to achieve that! :D
I was giving OP crap for using an out of date IDE like eclipse. But Netbeans?!??! XD. Do you boot up Netscape Navigator to download it? Why would you used these ide's? Honestly curious
too much of a title for such little content
The first IDE I used for Java was Eclipse. I switched to NetBeans years ago; I don't recall all the reasons exactly, but I think the biggest was that Eclipse tied me to its own build process, so if anyone else wanted to work on my software they were effectively locked into Eclipse. NetBeans uses Ant for the build process, so anyone can build a NetBeans project without installing a whole IDE to do it. As far as I recall, at the time I switched, IntelliJ IDEA was still purely commercial with no open-source community edition -- or at least the community edition at that time removed so many features (e.g. refactoring) that it was a non-starter for me. NetBeans was the obvious alternative, and I've stuck with it since. I'm interested in your perception of NetBeans as "out of date". It's fallen behind in the last year because their move to Apache has absorbed so many developer-hours, but until then (and hopefully in the future) they seemed to have a fairly respectable release schedule. What Java development features from IntelliJ do you miss in NetBeans? I'm aware that IntelliJ Java refactoring support is generally regarded as better than pretty much anything else out there, but what else stands out? I'm currently considering a move to IntelliJ, but there's a major time cost and productivity hit in changing IDEs, so I need strong reasons to do it.
Eclipse also does as per other comments.
As an FYI this is very much BETA support. &amp;#x200B; Currently I'm unable to get a Java EE project to build with the Java 11 support plugin installed (even when running Java 8).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Any reason in particular? It makes sense if it's a degree in law or healthcare. But in IT? I got a CS degree in Brazil of all places and never had any issue getting jobs in other countries.
I haven't done this but my first thoughts are using some custom dynamic class loading solution or OSGI Karaf bundles... I imagine there is better ways having only toyed with jlink and having never used web start
It’s just cheaper and people recognize the universities. 
There are many ways to skin this cat. One way (that I personally find nice for the user) would be invisible updates, same kinda way that chrome does nowadays: - The application, when it starts, loads the jars from a set folder (let's say the folder is specified in a properties or ini file). Lets' call that folder app1 -The updates, whenever available, get downloaded in the background, in a different folder: let's say, app2, and updates the properties file. - Next time the user starts the app, it will load the updated version, without even knowing. If there's a problem, just switch the app folder in the properties file. - Manage the number of applications installed by only keeping 2-3 versions at a time, deleting anything earlier.
Yes, if you have the qualifications.
To have eager to ask, search and learn when you don't know something, the ability to analyze requirements well and not just spam code, and embrace feedback when it's given to you. This is, by far, the most important. Technically I expect you know well all OOP concepts, java basics and SQL. I don't expect you deeply know frameworks like spring, for example, but I would like you know what it is, what problem solves and better if you know the basics. Finally, after some time in the team, I expect a progress in your skills.
Why do you want to do it like that? What's your reason to split it up instead of keeping it on the same container? If you need to do that, I wouldn't go for a restful API between. It feels like a whole lot of unnecessary boilerplate. Injecting remote EJBs living on the backend into JSF component seems much cleaner. In fact, there isn't even much of a difference whether the EJBs live on a different server or on the same container. It's merely a matter of configuration. If you have a backend using a JPA and a frontend with JSF, the natural API between the two are EJB. And if there's a server boundary between, remote EJB over RMI is the obvious solution. That's literally what it's built for. If your backend is something else, like a Spring container, or not even Java, I would ask why you want to use JSF?
It looks like in your [submission](https://www.reddit.com/r/java/comments/9nxopw/fluent_builders_for_java_cryptography/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have, but I haven't been able to reproduce it in a small demo project. Hoping to get the right combo to trigger the bug soon.
&gt; I think the submission form didn't have code style - if I remember correctly Right. Try remembering again ;-)
The team is interested in hearing any feedback/comments on the currently proposed changes. Feel free to join the discussion with your thoughts, if you have any/want to share.
This is utter BS. The GPL applies to the code that makes up the JVM and JDK itself, not programs you create using it. This would only be a concern if your distributed OpenJDK with your software or if your software actually extended the JVM itself. However, if you have a program that could run on OpenJDK or Oracle JVM or whatever, then you can license it however the hell you want. It's your code.
It does, actually.
Simplicity of notepad. With half the performance :P
&gt;Right. Off the top of your head, please write a correct try-with-resources statement with Java 6 syntax. Don't need to because you can do a normal try-catch which achieves the exact same thing. &gt;Thank me later Encapsulation.exe has crashed. FTFY: public class VarIsStupid { public VarIsStupid() { Person person = new Person("VarIs", "Stupid"); System.out.println(person.getFirstName()); System.out.println(person.getLastName()); } private class Person { private final String firstName; private final String lastName; public Person(String fN, String lN) { firstName = fN; lastName = lN; } public String getFirstName() { return firstName; } public String getLastName() { return lastName; } } } &gt;Do you really want to write down the Record6&lt;TA, TB, TC, TD, TE, TF&gt; type every time? I don't see a problem with it. Copy and paste is a thing though if you are that worried about it. &gt;Oh, while we're at it. Notice the "useless" foreach loop. I'm sure you're still using iterators, right? Notice also the "useless" generic type safety. I'm sure you're still manually casting, right? Never said there was anything wrong with iterators or generic types. They actually add something meaningful and/or improve readability. 
Notepad doesn't have code completion. RIP.
Did you read the article and see how many non-Oracle contributors there are to OpenJDK?
I did. 
Depends on the requirements. For our enterprise customers, I use installers to distribute the application, the JVM (bundled) and any dependencies. The installers are configured to remove old versions before installing the new. Then I usually use something like Advanced Updater from the Advanced Installer toolkit to check for updates, and then download and run the new installer. The whole process is pretty seamless, and it's not terribly difficult to replicate what these products do yourself, if necessary. In some cases, I like doing what /u/DefiantNewt2 suggested. Java makes this type of updating really simple.
Related to junit 5?
Don’t forget if you’re shipping a JRE as part of your app, it’s your responsibility to keep it updated as well. You’re going to need to be able to push out updates to that somehow too.
I have done that on more than one occasion. However, projects probably should not start out this way because it makes it more difficult to test, debug, and in general, maintain. This design is one way of scaling your application up when your current system has reached it's capacity. It can sometimes be more cost-effective to extract the expensive procedures (back-end) from the rest and run them on another server (or cluster), than simply adding more and more servers. That's not always true though, so care should be taken when considering this design. And HTTP is just a useful protocol for network communications. You could use anything else and the design doesn't change. This is one of the reasons why our databases often run on their own servers and not on our application servers.
As everyone is saying here, JSF is part of the backend, so I'm also not sure what you're trying to achieve here. I'm surprised that no one said one thing though, maybe you'll understand your situation better: the purpose of JSF is leverage user interfaces that interact directly with your Java code. So if you're using JSF just for the styling and premade components, you're not doing better than you would doing an Angular project or a plain HTML/CSS/JavaScript project. If you want to separate the backend and the frontend, use as little as you can in the front, so you can focus on the meat of your application in the back.
if you wanted to use other clients or ever wanted to replace jsf a restful API would make sense. use jwt for auth in between and it isn't too complicated. ultimately your want to future proof your solution and a restful API will help with that.
no it's not. jsf is doing html/javascript for a browser, it is done server side but still...
For the updater, we are using getdown. It's open source. Works great. You just put your files to an URL as soon as you have an update. The app then downloads the new files automatically when it is restarted. https://github.com/threerings/getdown For the binary, we are using Install4J (paid; we are not affiliated). Otherwise, packr might be another great solution (open source): https://github.com/libgdx/packr Note, it appears that Install4J can do auto-updates as well, but we haven't used it: https://www.ej-technologies.com/blog/2010/12/beyond-installing/
I'm not familiar with Electron, but have seen it mentioned a lot lately. Why is it awful (at least compared to competitors)?
[removed]
If your application is modularized (which I suppose it is given you're using jlink), then you could implement this quite easily yourself by leveraging the "--upgrade-module-path" option of the java binary. You'd just have to create a simple launcher script, that checks whether for any of the runtime image's modules a newer version is available. If so, download all updated modules into a directory, then specify --upgrade-module-path=&lt;UPDATE MODULES DIR&gt; when launching the runtime image from within that launcher script.
I always prefer explicit bean definitions over autowiring, reason being its less guess work for me.
Shit eater. I do remember. They created that case from a forum post so why don't you do the world a favor and fuck off. 
Heck, I have an even simpler example of why to use var that pretty much no one can call bad. Here are two lines that should compile to the same code: AVeryVerboseObscenelyLongClassName something = new AVeryVerboseObscenelyLongClassName(); var something2 = new AVeryVerboseObscenelyLongClassName(); One of these is by far easier to read than the other.
AFAIK they are both widely used wherever appropriate to create neat, readable, testable and reusable code. In most cases the performance impact isn't enough to warrant avoiding them. I'd say use them as they are quick to implement. If your app is slow then benchmark it, if it turns out the problem is either of those you can spend the effort to write that code some other way... And be sure to comment the code to explain why :-) (Although, when Spring support is ready, you might be better off spending the time making graalvm part of your build process. That's extreme performance right there.)
Ah yes, reddit. Where people come to get all salty and excited because of nothing. Have a Sunny afternoon my friend!
Thanks, i have the skills you mentioned but the thing is if I'm going to apply for a job and need to show them something so they are intersted, I'm good at accept critics, willing to learn everything I can and I do enjoy coding in java and growing my knowldage of it. Could you guys give me an advice, I'm thinking on working in a project by myself so I can send it with my CV, the things is that I dont know what to do? I want to make something that is good enough to show that I have the skills of a Junior. Any ideas of what could I code by myself that fulfill this criteria? And thanks in advance, I really appreciate it 
I just checked their GitHub page and looks like it have all things you need to get started. https://github.com/mabe02/lanterna/blob/master/README.md
Thanks that helped byt what is this code?: dependency&gt; &lt;groupId&gt;com.googlecode.lanterna&lt;/groupId&gt; &lt;artifactId&gt;lanterna&lt;/artifactId&gt; &lt;version&gt;3.0.1&lt;/version&gt; &lt;/dependency&gt; Where can I find it
So I have to download maven? Do I need to add it to eclipse or something like that
You can look at this video https://m.youtube.com/watch?v=sNEcpw8LPpo
Thank you very much 👊
No problem, if you have any other questions, let me know. 
Yes both are worth it when used correctly, and make code 100x easier to write.
You're gonna want to look at apache's install guide. Also maven is mega important so learn it well
Your "take" is about field vs constructor injection. @Autowired can be (and had to be) used with constructors. All those @Services will be "autowired" even if their constructors are not annotated with @Autowired. The way to avoid "autowiring" is to do the wiring manually, e.g. in a @Bean-annotated method.
11....
JNA or BridJ ?
Usually the most important is not *what* you code but rather *how* you code. You can try to create some simple tools or games just to show how you write code and organize your projects. Additional points if those projects are on GitHub and can be build with maven. Also it would be useful if you try to contribute to opensource projects (on github for example). It would be a real life experience and you'll learn a lot. And of course it makes you more interesting for a potential employer.
Autowiring and AOP have their use cases. Neither should be avoided nor should either be used to solve all problems thrown your way. Particularly, reserve AOP for problems that are cross-cutting, like Authentication or Authorization type problems. AOP is an exceptional solution to this type of problem because it helps avoid coupling (authentication) code to all of your web or presentational layer. AOP however does introduce some extra overhead (probably only a few CPU cycles) to check if the pointcut applies and then to execute code defined for that pointcut. If you have a lot of heavy operations running in this time, then you'll notice the slowdown vs not running those operations at all. But generally it's just a way to wrap some sections of an application with specific code that's needed across multiple unrelated parts. Autowiring is another story though. It is extremely useful to inject any beans you need into your classes. I would caution against using Field Injection as that couple's your code testing to Spring and you'll require bean injection. If you go the autowired constructor route, then testing is as simple as setting up dummy or mock classes for everything in the constructor and creating a new instance of your class under test with the constructor. To be honest, I'm not sure why you would want to avoid autowiring altogether because it's a relatively integral part for the Spring IoC container. But keep in mind, the larger an application, the more beans you're creating, the more complex the autowiring/bean dependency graph becomes, and the longer the IoC container requires to start up. I'm not sure how well that addresses your questions but dependency injection with Spring's Autowire (single constructor classes don't need an explicit autowired annotation on their constructor, recent versions of Spring assumes you want it autowired) is very common and I'd be skeptical of anybody that tried to give an absolute for or against it, or any technology for that matter. 
&gt; Don't need to because you can do a normal try-catch which achieves the exact same thing. Writing out a try-with-resources statement using ordinary try-catch-finally is quite complex. See [JLS 14.20.3](https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-14.20.3). The reasons are that t-w-r catches exceptions that might occur during resource creation as well as use; it properly closes dependent resources; and it adds exceptions caught during close to the original exception’s suppressed exception list.
*Effective Java* is not only the best Java book I've ever read, but possibly the best programming / software engineering book of any kind that I've read.
&gt; How common is it to use Spring AOP in real life projects? Extremely common. For example, setting up transaction boundaries using `@Transactional`. You can let Spring take care of figuring out when to start a transaction, and committing the transaction or rolling back on exceptions. Spring Security makes heavy use of AOP by using annotations to describe the security requirements needed to call the annotated method, and Spring will take of deciding whether it is ok to call the method. This is called eliminating cross cutting concerns, letting your code focus on business logic, instead mixing your code with infrastructure details. Heavy use of autowiring in Spring is largely due to convenience, and also back in the day, an application without autowiring required that Spring beans be defined using XML, which kind of sucked. Modern Spring uses Java config with `@Bean` annotated methods where you invoke constructors yourself. Personally, I like this approach because IDEs know what is going on without specialized plugins just for Spring. 
Test4j is just a wrapper for tesseract. I used to use plain tesseract for my project (by spawning tesseract process for each file) but now I use javacpp wrapper for it. It allows to initialize tesseract instance only once. For my test dataset it decreased processing time from 8mins to 2mins. Never heard about aspire though.
[https://medium.com/@rahulvaish/simple-tesseract-ocr-java-be261e343c5b](https://medium.com/@rahulvaish/simple-tesseract-ocr-java-be261e343c5b)
I've tried all those and the Abbyy engine is just so far ahead of them it's scary. They have a web version at ocrsdk.com that's pretty reasonable.
well... why Java9 then? don't you want to be cutting edge with last features and enchaments? 
Direct from the source: [https://www.indeed.com/jobs?q=java+junior&amp;l=](https://www.indeed.com/jobs?q=java+junior&amp;l=) [https://www.monster.com/jobs/search/?q=java-junior&amp;intcid=skr\_navigation\_nhpso\_searchMain](https://www.monster.com/jobs/search/?q=java-junior&amp;intcid=skr_navigation_nhpso_searchMain)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Cloneable is broken, pretty much that. All what `Cloneable` interface is enables `Object.clone` method to work without throwing `CloneNotSupportedException` exception. The method is protected, so it's not a public contract. It says nothing about existence of a method called `clone`. In short, `Cloneable` is a recognized design mistake, back in Java 1.0. It cannot be fixed due to backwards compatibility.
Wait, people are already migrating from kotlin to something else? 
jOOQ is garbage. Like you.
Neither Kotlin, nor Go are Java and thus, your post is **off-topic** here.
This is not really about migrating from Kotlin to something else, it's more about gotcha's (of which there are many) on running AWS Lambda functions. 
&gt; It cannot be fixed due to backwards compatibility. That's the bane of Java... Hopefully, they lately finally started removing stuff from the API. I hope `clone()` will be part of a future shipment (though I think it will never happen).
https://www.ocrsdk.com/plans-and-pricing/ You're probably looking on their main Abbyy site at the on premise stuff, which has high pricing designed for huge volumes, and yes, you'll need a salesperson to get pricing. The web engine at OcrSDK is all up front and easy pricing. 
tesseract was pretty decent last time I tried different OCRs. Don't worry so much about Java side of it, just find a free OCR that works best for your case, then worry on how to integrate it- there will be some way to integrate. My tests for my use-case showed that tesseract is best by far out of other free OCRs I tried.
Good answers already about knowledge that would be useful to have, but with job applications don't get overwhelmed by the requirements. If you're applying to a junior position they should be expecting to teach you a lot. Those listed skills are typically a nice to have thing, not a must have thing. Really you can apply to anything junior and you shouldn't be too worried about skill requirements. Show them you can code and problem solve in the interview and you'll be fine. 
&gt; In short, `Cloneable` is a recognized design mistake, done back in Java 1.0. It cannot be fixed due to backwards compatibility. I don't understand what keeps them from doing this now, the changes would be manageable for newer projects. Any project that actively uses `clone()` is helplessly stuck with Java 5 or so anyway.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
At least init the StringBuffer capacity when it is known. 
&gt; it's an enhancement Your level of b.s. is off the chart, you should go into sales or management. 
Whenever there is the new hawtness, there is a tendency to go overboard and then complain about it not being appropriate in a lot of cases. If you judiciously use streams where it makes a lot of sense, I don't think there is a problem. Streams, like anything else, are a tool that can make some things easier, some things more readable. 
Thanks, this is very informative! I already get type-aware completions with NetBeans but a lot of the rest of it looks very appealing, especially the code transformations. My current project has hit a point where I need to do a fair bit of refactoring and tidying up before I add any major new functionality, and I'm increasingly feeling that NetBeans isn't the best tool for this job. I did a simple class rename this evening which somehow deleted an entire method body in an unrelated class. Time to try something new, I think :).
That and `Serializable`. Both have turned out to have been a bad idea in hindsight. 
I've had IntelliJ's refactoring mess up too, tbh, but maybe that's what I get for always using the beta version. OTOH, IntelliJ makes frequent copies of files in its own "local history" so I could recover what was lost. As for completions, you can also get type aware completions for chains, \`a.b\` for all expressions that contain one dot, which I use quite often really.
Naa. There are some technical downsides. They have a bit more overhead then a for loop for instance. But if your project cares about that kind of thing you shouldn't be using Java anyways. I think overall they make the code much cleaner. Converting a list of people objects to a unique list of first names for example is hella more simple and clean imo. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Well that's a stupid argument. You could use the exact same for a while loop if it helps seeing how dumb it is. Streams don't solve code duplication, but you just have to follow the usual rules, extract the duplicate code in a method and call that one from your stream pipeline.
That doesn't make sense. Care to link one of those articles?
&gt; Whenever there is the new hawtness, there is a tendency to go overboard and then complain about it not being appropriate Exactly! I find streams, like other declarative code, cleaner.
Too bad this is being downvoted. It makes some good points.
What's wrong with [code]serializable[/code]
I would suggest migrating to another implementation of the JNLP specification rather than reinventing the wheel. [IcedTea-Web](https://icedtea.classpath.org/wiki/IcedTea-Web) provides a free open-source implementation of the specification and is actively developed and maintained (as it is part of Red Hat Enterprise Linux). Windows compatibility has recently been introduced. Quote taken from [https://docs.oracle.com/javase/8/docs/technotes/guides/javaws/developersguide/overview.html](https://docs.oracle.com/javase/8/docs/technotes/guides/javaws/developersguide/overview.html): "Java Web Start is the reference implementation (RI) for the JNLP specification. "
&gt;They have a bit more overhead then a for loop for instance. But if your project cares about that kind of thing you shouldn't be using Java anyways. "If you care about performance you shouldn't be using Java" Damn, I knew I should have learned C++ instead!
:P language performance is overrated. I'm more worried about the kinda think i rejected in a PR yesterday. &amp;#x200B; Nested for loop doing the same database lookup. Programmers usually the cause of performance issues &gt;\_&lt;
&gt; you'll need a salesperson to get pricing. The web engine at OcrSDK is all up front and easy pricing In 2018 that shit is completely unacceptable. Not to mention OP specified free to use...
StringBuffer is still cool guys
The vast vast vast majority of Java security vulnerabilities comes from Serializable. As it turns out, when you allow specific and sometimes untrusted sequences of bytes to be able to form application-altering behaviors unchecked, you open yourself up to all sorts of problems. &amp;#x200B; It is also painfully slow, or at least slower than the alternatives. &amp;#x200B; And the alternatives make much more sense anyway and are far more resilient to backwards and forwards comparability. Have classes only designed for data, and have other classes designed to use that data. Pass the data around, instead of the entire data + behaviors. So, stuff like JSON, etc.
That makes sense, thanks for the reply
Why? It's a local variable that you've directly instantiated. **You** already know what type of variable it is as it's right there on the right side of the expression. What's more, you can even return this variable if your method declares that it returns any of its parent classes or interfaces without needing a cast.
for tight loops, the efficiency difference is often dramatic, especially in real world usage at least with java 8, as inlining won't happen java performance for those loops should be comparable to other languages 
local type inference is great as long as you use it within reason as it saves a lot of duplication. It becomes a problem when you use it when the average programmer can't figure out what type the right side actually returns. It's less of a problem in C# because almost everyone uses the same IDE (Visual Studio) which has supported telling you what type var actually is on hover for at least 6 years, likely longer.
I'm working on a backend that is littered with code that iterates through awful MongoDB Json -&gt; Java maps of lists of Maps of untyped objects. It's awful. Huge methods that dig down into these hellish blackholes of untyped data to pluck and merge - half a dozen of temporary lists and maps to hold the intermediate data, and the code is hard as hell to follow and verbose. With streams, a lot of these temporary storage variables aren't needed and the code is easier to understand using declarative streams (filters, predicates, etc) vs the mass of right-flowing *for* loops.
&gt;It becomes a problem when you use it when the average programmer can't figure out what type the right side actually returns. Who is that average Java programmer that can't figure out a return type? And again it seems Java developers don't trust their colleagues. &gt;It's less of a problem in C# because almost everyone uses the same IDE (Visual Studio) which has supported telling you what type var actually is on hover for at least 6 years, likely longer. And almost every Java developer uses one of the "big three" and they also can tell what type the variable is.
Agreed, though I wouldn't call streams "new", they are 4 years old.
I can't remember the last time I actually needed to clone something in any code I've written for years.
I can't seem to tell the difference in the drop-shadow one ??
Just like in the old days my man.
See this Stack Overflow question and the top answers. https://stackoverflow.com/q/26398951/1441122
Look at the bottom of the menu bar under "Customer Management" where there is a search icon, "Add New Customer" button and #12345. That's what has the shadow. 
i'd recommend reading the the r/java rule #1 (available in the sidebar) 
So basically stop using the OO paradigm. 
/u/danthonywalker mentioned security, and touched on this but the format is effectively part of your classes' API and you need to support reading from older versions of your class, and because the serializable format is tied to your internal implementation, it can be very hard to change that implementation and maintain backwards compatibility. https://www.infoworld.com/article/3275924/java/oracle-plans-to-dump-risky-java-serialization.html
LMAO
I believe the OP meant that if the (rather minor) overhead of streams is meaningful, maybe just maybe Java wasn't the right language to pick for a project.
I honestly gave up on a full-java webapp system and learned react. I'd just uh..do that
React or VueJs. I like the latter more. Also separating frontend from backend will have other benefits too.
2005 called..
Sorry, but what do you mean with "installer that comes with the JRE"? 
It would be great if IcedTea-Web was stable and had a simple windows installer. As it is, there is no way to tell our enterprise customers that they have to compile an experimental browser plugin :)
Streams are good. But to me the biggest problem with them is that I can't pass a lambda that throws a checked exception to them. I kind of understand the JDK team's arguments about it, that streams are not supposed to be used with code that throws exceptions, but in reality it just makes them unusable in a lot of situations where otherwise they would make the code more concise and clear. Or just leads to some questionable solutions with various degrees of ugliness :) But I guess this is a much broader issue with Java, that is: functional style is not compatible with checked exceptions. And JDK is full of checked exceptions.
&gt; what do you mean with "installer that comes bundled with the JRE"? Sorry, not a great writer. Our app uses Install4J as the installer which includes the JRE in the installer (no separate JRE download needed). It's all in one. When a user installs the application he/she installs getdown. When the app is run, it runs getdown first, which updates as needed and then starts the actual application. So every time, instead of the application, we just run getdown which then starts the application. Also, you can do the same with packr or any other installer builders.
In those situations, I recommend using a sort of an api for doing auto JSON marashalling/unmarshalling to convert your MongoDB objects to specific java classes, take for example Jackson as an api for this, this way, you will stream over typed objects and remove all the unnecessary type casts in your lambdas.
I recommend using a third-party api like [throwing-function](https://github.com/pivovarit/throwing-function), it lets you create lambdas throwing checked exceptions and then converting them back to their equivalent functional types either returning an optional or throwing an unchecked exception upon on an exception is thrown.
It's probably because of the insulting and gatekeeping in the last parts of the comment. It makes the whole comment look bad.
Streams inside streams are a red flag. Especially if they're inline. At least move that to a separate method. `forEach()` with anything more than a method reference is also a sign that you're doing things wrong. In particular, you're not thinking in a functional manner. But I do like stream operations in the right place. They tend to be more readable than the equivalent loop operation would be because they are step by step. But you shouldn't wedge them into somewhere they don't belong.
Expect complaints about `var` in about six months.
The easiest solution (as in no dependencies) is to wrap the operation in a local method that wraps the checked exception into an unchecked one. Java 8 introduced `UncheckedIOException` for example, for just this use case.
Did they want your joke back? OpenJFX 11 was released last week.
I would't say so. I created the [Apron](https://github.com/hupfdule/apron) library and had to think over that question: which logging framework to use. Those were the most important aspects I considered: &amp;#x200B; JUL : The only advantage of JUL is that it doesn't need an external dependency Slf4J : Seems to be the most common used logging facade now Log4j2 : Provides an API and can be used with different implementations as Slf4j, but has a better API in my opinion &amp;#x200B; So usually I would use Log4j2. But as Apron doesn't depend on any other library even such a thin logging API dependency would be a bit too much in my option. As Apron uses logging very sparingly I decided to stick with JUL since it doesn't introduce an external dependency and is well enough for that use case. However in other cases, when a library is heavily relying on logging the decision is not so clear. It is very unfortunate that SUN left us as with such a broken logging framework instead of introducing a clean logging API and only a reference implementation.
absolutely but since Java9 and Java10 are already reached the End of Line, you need to check your tools; therefore we are also talking about security updates and general support.
In my current job I ended up with a thin wrapper over java.util.Stream that is also parametrized by the type of Exception it can deal with: XStream&lt;T, X extends Throwable&gt; Its combinator methods (map, flatMap, etc.) accept lambdas that can throw the X. And its reduction methods (collect, reduce, etc.) throw X themselves. Internally it just delegates all calls to underlying Java stream, hiding all exceptions using "sneaky throw" technique. As long as Java stream is a lazy structure, it works nice. I must say that I'm not satisfied very much with the result, so lately I've started a little open-source project that's supposed to help you manage effects in a functional way (inspired very much by Scala cats-effect library): https://github.com/lpld/jeff It provides stack-safe IO monad for Java (with async support) and a lazy Stream implementation that is basically a bunch of IO values chained together. The project is on a very early stage and can be considered just an experiment. So there is almost zero documentation, few tests and no benchmarks for now. The examples of usage can be found in the tests. When I have more docs and better test coverage I'll probably write a post about it, but for now I just decided to share it here, since we talk about streams and exceptions. Maybe someone gets interested. All critique is very much welcome :)
No need for GWT as Vaadin 10 solely relies on Web Components and drops GWT - I'd say definitely a look worth
Thinking of best 1z0-808 Dumps for your Oracle [1z0-808 Exam Question Answers](https://testcollection.us/1z0-808-vce-download.html)??? Here it is at testcollection. We present outstanding 1z0-808 Exam dumps with 100% valid and verified 1z0-808 Questions Answers. All 1z0-808 Dumps are obtainable in both PDF file and Exam Engine formats. Free Demos are available to experience the interface and proficiency of our 1z0-808 Practice Tests. Get the huge discount.
... do you not realize that programmers and anyone in the IT field use desktops all the time because it's 5x more practical ? desktops aren't going anywhere, they're just changing. don't forget about gaming and content creation.
I thought these only exist to put random ass obscure imports and then make you wonder why the class you imported doesn't have anything you're used to
&gt;Why would they teach you jsp?? That's the IT program in most schools for you.
I was not aware of it, I will have a look then. Thanks.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ocjac/help_please_i_dont_know_anything/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
thanks in advance 
Don't give them access to your database directly. Regardless of whether it is single or multitenant it is invariably a pain to handle, especially around schema changes for upgrades but performance issues can be a problem as well. You need to provide a well defined stable API into your data, eg have a queue per tenant containing events for data changes. That can then be written to another database or directly to an BI system.
Jib lets you 'do docker' without knowing docker the same way JPA let's you 'do databases' without knowing databases: it doesn't. Don't get me wrong; it's a great tool we also use. But you're selling ignorance with IMHO is not a good thing. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You mean have the BI reporting access the data through, let's say REST? Won't that be extremely slow? And I would still need a multitenancy BI suite integrated with the site.
This is 90% of the demands of the corporate market anyway, internal and external.
Does Jib do a multi-stage build to cut down on the resulting image size?
https://github.com/GoogleContainerTools/jib One of the biggest benefits is that it puts your dependencies on a separate layer. This makes images a LOT smaller in general (since layers get cached). It's unfortunate that the article doesn't go into this. 
I see what you mean, But I want to do the data analysis &amp; the reporting on my end - this is part of the spec.
Really cool
Really cool
&lt;context-param&gt; &lt;param-name&gt;javamelody.locale&lt;/param-name&gt; &lt;param-value&gt;en&lt;/param-value&gt; &lt;/context-param&gt;
Where we've got small customers with a similar requirement we're going to the expense of hosting a separate reporting database. In our case the system has multiple databases so allowing a customer to query a database directly isn't really an option though. If you still have the urge to let customers directly access your database then defining a set of views per tenant might work.
This is like driving a car without knowing that you need to change the motor oil or replace your tires. I'll stick to my Dockerfiles and my ymls, thanks.
I understand some of those words.... unfortunately, not the ones you're probably interested in
Didn't work :/
apache poi -&gt; jpa (hibernate) -&gt; make a gui to display db stuff or have someone use a DB explorer program
I second this. database views would be the way to go. under all circumstances consider decoupling your database and potential BI solutions. yes, it is more work upfront. the alternative would be to tie a middle to large sized rock to your feet during development down the line due to having to make sure that your customer specific reports are not breaking when e.g. your schema changes. a further plus would be the opportunity to implement row level access decisions in those views as well -&gt; each customer has their own view(s) have you checked e. g. the airbnb superset BI solution? they also support authorization and the capability for end users to define queries 
apache poi is a great api for parsing excel workbooks. And then for showing it to the gui, take your pick of javaFX or swing 
/r/javahelp exists for this type of question, but people will expect a bit more information than "I tried nothing and I'm all out of ideas". Go read up on POI or docx4j then post a specific question there, including things like how you're planning to do the UI (application, web app, etc).
https://poi.apache.org/ http://hibernate.org/ http://www.h2database.com/html/main.html 
1. Not sure if I can automate the creation of views every time a customer signs up. I'm not sure how well the database will cope with a large number of views - but I would like to think Postgres can cope. 2. I will also need seperate users on the DB for this to work? 3. The cavets still stand on direct DB access of course. 
I'm super interested in this conversation. I've found SonarQube to be really useful. It's personally saved me from quite a few defects (I always jack up the printf syntax for string formatting). We set it up to break the build when quality thresholds are not met. 
Why? For performance reasons? That is not ever going to be measurable, and the time you spend typing out the x.length() or whatever you have is going to be more than the sum of all the time wasted amongst all your users repeatedly running that code. A few million times a nanosecond is still not a very large number. 
A couple of other considerations: first, your answer to this will be different if you have a large number of low value customers (100 duck-sized horses), or a small number of high value customers with manual provisioning (a horse-sized duck). For the first of these you're going to need some automated provisioning ti create a separate database role for each customer, and use [row](https://www.postgresql.org/docs/current/static/ddl-rowsecurity.html) [based](https://docs.microsoft.com/en-us/sql/relational-databases/security/row-level-security?view=sql-server-2017) [access control](https://docs.oracle.com/cd/B19306_01/network.102/b14266/accessre.htm#DBSEG324). For the second, you can manually create individual reporting database instances for each customer, and then have a scheduled job to copy data into them. &amp;#x200B; You're not out of the woods yet, though: you still need to consider resource usage of the reports. Jrxml expressions can be arbitrarily complex. Within a single company I've had plenty of issues with reports eating all memory and CPU on the server, plus users will write SQL that no query optimizer can help and reports that generate 50000 page PDF files.
ok, so what exactly is this blog post supposed to tell me? All I can do is read between the lines that there are some parties that offer alternative JDK Builds, who currently do not have a commercial JCK agreement with Oracle and Oracle will crank down on them in the very near future.
Yes: * [Error Prone](http://errorprone.info/) as a SA tool built into compiler, * [SpotBugs](https://spotbugs.github.io/) as another SA tool. * CheckStyle ­— to enforce a certain code style. Also, the code I write benefits from IDEA live inspections (but remember that not all of them are live, so it makes sense to run them all once in a while), but they are not integrated into the build system. I've also experimented with Infer, but haven't integrated this for it requires quite some setup. On top of these, there are some dynamic tools configured: * [JaCoCo](https://github.com/jacoco/jacoco) as a code coverage tool. * [Pitest](http://pitest.org/) as a mutation coverage tool. Your results, however, does not seem accurate — have you checked for each project the tools integrated into build systems (like error prone/spotbugs/checkstyle/pmd), numerous configured web services (like sonar/codefactor/codacy), tools run only during CI? Also, some projects do have internal CI systems (usually those coming from big corporations), which distorts the results.
True. I probably should have said something like, "Too bad the insulting tone of the comment overshadows the good points it makes."
The craziest configuration I’ve seen in an open-source project is CheckStyle — take a look at 2.5K SLoC of [pom.xml](https://github.com/checkstyle/checkstyle/blob/master/pom.xml), there are quite some SA tools configured :-) 
My shop is about 80/20 commercial/OSS, and we use static analysis tools in CI, but not as a build-breaker. Our team's consensus is that a good tool stays out of a developer's way while they're working, and encourages good practices along the way. Our build-status board includes trend graphs for a bunch of metrics, and the team largely self-polices via social pressure. As a manager, it feels *really* good not to have to chase people for such stuff. New hires quickly "get" that code quality is about mutual accountability, not about me being a big mean boss.
Hi, thanks for your interest! &amp;#x200B; Which kind rules do you configure in SonarQube?
Yes, I checked the presence of the static analysis tool in the repository by searching for their specific configuration files or by looking at their definition in build configuration files. Which rules do you typically enable?
There are such things as Java 11 beta releases that IDE developers can use to include support ahead of the final release.
&gt; Do you use static analysis tools? No, in fact there are few-to-none issues in a project a that a static analyser would find that would better spent making better use of a type system. If you are using a static analyser in for some reason, either your compiler is deficient at checking for unsound behaviour, or the types you're using to express your program are a lie and you should change them. Enforcement of formatting and style is a worthy pursuit, but to call the tools that do that a static analyser is an abuse of the term, since that requires no actual semantic understanding of code to perform.
Yes, for performance and also clarity. And perhaps my code will run more than a few million times, if it does its job right.
Some feedback. I successfully built my sample project but it crashed upon launch. I figured out that Jib uses the Docker image gcr.io/distroless/java which is based on Java 8. My sample project is based on Java 11. The Maven plugin could choose an image more suited for my project or fail the build with a helpful error message in case a suitable image isn't available. Filed an issue for it https://github.com/GoogleContainerTools/jib/issues/1143.
Get a study guide for Java Certification, take notes, do all of the exercises and code samples along the way, practicing memorizing/reciting your notes, and try writing many of the code examples from memory versus looking it up. After that join one of the code challenge web sites out there to have something regular to write until a work project comes along.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I wouldn't. I would wait to learn Swing until I got a job where Swing is used extensively. Most Java jobs are server side/web based. 
Not OP, but we have sonar analysis enabled as well, as a part of all Jenkins pipelines. I'm not super familiar with the config, but aren't there hundreds of sonar rules? Bit too many to post here...
1. table aliases and views can be used to hide &amp; make the real tables easy to migrate. Mileage can vary though depending on complexity. 2. Since 9.5 there are features to do row level security properly. Indeed managing that with SQL can be tricky. It's not only about visibility, if done wrong a user may add a row for another user. 3. Creating other datastores to pass the data is not an option. It's too heavy and duplication is not good. The app won't grow in the customer's minds as well. https://www.postgresql.org/docs/9.5/static/ddl-rowsecurity.html 
As a beginner, what does companies expect from me? Should I have good knowledge about the language and frameworks, libraries and all or the basic knowledge of the language and good problem solving skills similar to competitive programmers?
&gt;we use static analysis tools in CI, but not as a build-breaker. why do you think exceeding some quality gates (e.g., very high code complexity or huge technical debt) shouldn't break the build? &gt;Our build-status board includes trend graphs for a bunch of metrics Which kind of metrics are you talking about? I would be curious in some examples... &amp;#x200B;
Do you think the huge amount of rules make it tedious/difficult to configure them? 
Pick up a few books on java or just do exercises you find online. If you get stuck do research on what you are stuck on. 
It depends on the company. Java is HUGE now. There is no way you can familiarity with every API. Have familiarity with the language, especially the latest features, server side programming, and possibly a web framework like Spring. I would also learn Eclipse as it is much more widely used than Netbeans. 
This is really very helpful. Thank you for guiding me. :)
how does that add clarity?
Indeed. Cant say why too!
&gt; Have you ever used static analysis tools for these purposes? Yes, in languages like C, where the type system and language specific specifically mandate undefined behaviour. In a language at like Java, how is "static testing" exactly different from type checking?
save for later 
[https://www.reddit.com/r/java/comments/9nlku5/what\_are\_the\_must\_have\_skills\_for\_junior\_java/](https://www.reddit.com/r/java/comments/9nlku5/what_are_the_must_have_skills_for_junior_java/)
Yes, it's probably best to avoid the browser plugin component and run javaws directly instead. You can obtain a Windows installer from the following URL: [http://icedtea.wildebeest.org/download/icedtea-web-binaries/1.7.1/windows/](http://icedtea.wildebeest.org/download/icedtea-web-binaries/1.7.1/windows/) Look for the file: itw-installer.msi.
Jib seemed like the exact tool that we wanted but didn't cut the mark. I'd looked into using various gradle plugins that allows creation of a docker image but Jib, like many other similar tools, make it harder to customize that server environment if you need some native tools, as well. I ended up converting to just making a standard build and then using a Dockerfile which adds the built JAR. I get that for 99% of use cases, a tool like Jib may be more convenient, but having your build tool be a pain to use for niche use cases makes it hard to make a case for adopting.
Things like resources not being freed, methods that expect not to be passed null being passed things that maybe null. Some more advanced ones like infer can point out possible synchronization bugs and race conditions.
the grip tightens
It looks like in your [submission](https://www.reddit.com/r/java/comments/9oi4pr/java_rest_application_to_solve_vehicle_routing/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Link doesn’t work
Try rewriting some of your old programs! That's my favorite way to not only refresh my memory, but also to learn new languages entirely.
https://codingbat.com/java
Second to that. Deployment to actual users is much easier with browser based apps (not to mention any kind of mobile use) so JS front ends are becoming increasingly popular. If I were to guess something like “more than 95%” of Java based development is some form of HTTP-based app. (Web/API types of things.) In terms of Swing, etc. - might not be a bad idea to be roughly familiar with the concepts, but I wouldn’t worry about being terribly in depth with Swing / JavaFX unless there is a very specific reason, or a new employer offers training.
As an example, both sonar and PMD detect when I'm logging something in a catch block but the exception itself is not logged. Or if only the *message* of the exception is logged, but I'm missing the stack trace. Now, maybe I don't want to log the exception for some reason, but more often than not is a mistake, so it is nice to have a tool that automatically points that. Other things are simple metrics, like "no method should have more than 1000 lines" and stuff like that. Nothing that code review can not check, but again, it is nicer to get to the code review with all that stuff already covered (That said, probably with a better type system we could encode more of 'the right way to do things' in the type system and then the type checker will replace lots of checks done by the static analyzer... but I doubt Java type system will ever be that powerful)
Id never use drag and drop for swing.. Especially with all of its oddities. But i kind of like SceneBuilder for the little bit of JavaFX ive done, but i have only done very little as my day job is all Swing. So i could see if larger more complex applications can get out of hand. Ive been messing around with Kotlin and TornadoFX (kotlin wrapper/extensions over javafx) the past couple weeks and that's been quite interesting. I feel like expecting java developers who work on backend services to know Swing is just because you want all java developers to share in your misery :D In seriousness thats like saying a java developer who primarily does desktop or android should know Spring. Its not a bad idea, but certainly not expected.
Just write code :)
Here is from [AdoptOpenJDK](https://adoptopenjdk.net/index.html) website: &amp;#x200B; &gt;Java Compatibility Kit (JCK) Compliance &gt; &gt;The London Jamocha Community (LJC) have an agreement with Oracle to use the Java SE Technology Compatibility Kit (TCK) under the terms of the OpenJDK Community TCK License Agreement (OCTLA). &gt; &gt;**Oracle has requested that the LJC stop TCK testing** ***OpenJDK with Eclipse OpenJ9*****binaries,** and remove specification compatibility marks from the existing *OpenJDK with Eclipse OpenJ9* binaries available at AdoptOpenJDK. **The LJC is working with Oracle to reach an agreed interpretation of the OCTLA**, and in the meantime have agreed to stop using the TCK for *OpenJDK with Eclipse OpenJ9* and will remove the existing compatibility marks. &gt; &gt;**AdoptOpenJDK will continue to run the TCK for** ***Hotspot based OpenJDK*** **binaries at AdoptOpenJD**K. &gt; &gt;All AdoptOpenJDK binaries are tested with our suite of functional, integration, and performance tests, including real workloads from popular libraries and applications. We remain confident in the quality of our builds. &amp;#x200B; Ref.:[https://adoptopenjdk.net/support.html](https://adoptopenjdk.net/support.html)
https
Create classes. Lots and lots of classes. Some to become services. Some to become Data Type Objects. Some to become aggregators. Hide their properties. Use them in data structures, lists, maps, etc. implement a restful app. Implement a client server app. Create an app that mimics Mission Impossibles “this message will self destruct in 5 mins”. Create an authentication service. Create an outbound email service. Just ideas. But the goal is practice creating lots of classes. Write small unit tests. Also checkout Elegant Objects book. One of my fav. 
Not creating an account just to read this.
Take a look at the guides on the spring boot site. After languishing in the JSF world for too long, spring has been a breath of fresh air.
I am religious, scene builders can go to hell. And yeah, everyone should share my misery with Satan´s Grid Bag Layout. 
there's nothing specific to java in this
Codeacademy is fun and interactive. There's lots of books out there as well, and of course just programming will help you out. Good luck!
find an open source project your passionate about and join in i promise you that's the best way to learn 
Good call. 3rd Edition recently came out. 2nd edition was my absolute favorite technology book. I'd been using Java fulltime for 10 years when I read it, and I learned a LOT! Good stuff.
And then for every class you'vre created.... Add ProxyFactory classes. MethodAccessor classes. DynamicDelgator classes. 
&gt;Requirement 2 can be met with awesome tools like GetDown or update4j - but these require an installed JRE. No, they perfectly work with jlink or javapackager (at least I can say certainly for update4j, what I created).
Watch it not do anything lol
Agreed
The Inforworld version has more content available before you need to log in: https://www.infoworld.com/article/3301197/java/jdk-12-roadmap-the-new-features-coming-to-java-12.html But the headings before the paywall are: * Improved startup, CDS, and garbage collection * Reduced number of ARM ports * Switch expressions * Raw string literals I believe the last two are going to be hidden behind a command line argument.
Again, I don't configure it :)
Usually when a big company open sources their proprietary tech, its when there's not much interest left in that tech.
Write tests Seriously, find a testing framework you like, whether it's JUnit, Spock or anything else and use it for all the code you write. If you start doing it right away, you'll get used to making your classes more testable and - in consequence - robust.
Basically, yes. What they're saying is that the JCK is licensed for people working on OpenJDK only, code distributed under GPL. In particular they're thinking of IBM's OpenJ9, which uses, but it not part of OpenJDK, and distributed under Apache 2 / Eclipse. TCK/JCK is really the only hold Oracle have over java, and it's basically trademark protection. The code is free, there are several very big companies who contribute to its development, but only Oracle can let you call it 'Java'.
Hi, in my report there are quite popular Java projects. Do you use static analysis tools? If yes how? If no why?
Certification gets a lot of crap, but tbh the scjp prep guide was one of the best Java books I've read. 
Something amazing that always comes out of this is realizing there were better ways to do what you did. So you start recreating the program and realize you can optimize here or simplify there. It's a great way to see things you have learned or things you have worked on and gotten better at come into practice. 
&gt; I think it's important to point out the difference between what the type system can do, and what Java developers are willing to do. Agree, somethings are just not popular in the Java world. &gt; Monadic error handling is a thing you can do in Java, as are disjoint unions you can use to return exceptions values as instead of throwing them Even if you are using monadic error handling, you still want to log the underlying exception, you still can forget about that, or do it wrong. &gt; Why don't most Java developers do this? I really don't know My excuse: Since it is not popular, it is hard to know if you are doing it right, it is hard to explain to new people in the project, and while it is possible in Java, it is not simple. But i know it is an excuse, I should try harder... 
Assuming you're looking for employment as a Java dev, learn Maven and Gradle. In particular, learn how to set up a project from scratch, include 3rd party libraries and how to create sub-modules. Spring Boot is an even faster way to get started but it still generates Maven or Gradle projects. Gradle is newer and more flexible but Maven is still the status quo for a lot of projects. &amp;#x200B;
I don't know how to solve this, but read [https://blog.2ndquadrant.com/how-do-postgresql-security\_barrier-views-work/](https://blog.2ndquadrant.com/how-do-postgresql-security_barrier-views-work/), good to know.
&gt; After 5 years from the start, if you are really great at interacting with customers and take up managerial roles, you are likely to become as a team leader. Wait, what?
Yeah. I would say 5 years experience means the person is mid-level. If the person is a lead, I would say the company is in trouble especially if the product is complex is any way.
I worked a lot with Wicket long ago. Are there any components or do you still have to create them yourself ? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I am reading the book named Core Java Vol1 by Cay Horstmann. Is it a good book to learn java?
Absolutely, however, keep in mind that the writer wrote the book for people coming from C++. But it's still great for a beginner.
I think customers in this context refers to stakeholders rather than end clients...
React or VUE are not an option. Basically an enterprise application lifetime is around 6 years and there is no JavaScript Framework that is older then 6 years, was not complely rewritten and/or have backward compatability. So the only options are indeed ZK or Vaadin. I would try Vaadin or JSF with PrimeFaces components. I have to share that writing ZK Is a lot more fun then Vaadin since it has a XML layout and the RAM usage is quite smaller compared to Vaadin. I have to share I havent used Vaadin 10 maybe by removing GWT the RAM usage is not that big anymore.
This article really hand waves away the complexities of JWTs and stateless session management. Which I guess is expected because thats Okta's whole value add as a SaaS SSO provider. 
Specially for that "all programmers will end up client facing and/or on managerial roles." I mean, what way of seeing things is this.
We use sonar at work, it actually doesn't catch much and most rules are just subjective style greps
I'm still a uni student learning Java in OOP classes and trying to get certified sometime soon after graduation (major is not CompSci), and building my portfolio. Is this article realistic at all, assuming I find a Jr job? Because my father has been a dev for 20 years now and only started to head his team this past year or two, the most of the rest I remember him being mid-level. This article definitely seems too rainbow and sunshine
Hm, yes, that seems to be a good use case, albeit a rare one (:
We use a scriptlet to inject an appropriate filter (organization id as an example) through a variable that the jrxml uses. The scriptlet knows who is running the jrxml and can lookup the appropriate organization id to use. We don't allow customers to write their own jrxml, but if we did I would imagine we could scan the jrxml for any incorrect sql and override using the scriptlet.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9oq26p/easiest_way_to_build_a_multijdk_version_project/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;You need to have a bachelor’s degree to consider for a Java programmer position That statement right there marks the article as uninformed. For most places I've worked and/or know folks who have worked, you do not need a bachelor's degree to be considered for a programmer position. The company might have a policy requiring a degree to move to higher levels like architect or manager, but for a basic developer position a BS isn't usually a requirement.
I just bought both those books last week. Still waiting for them to come in the mail can’t wait to read them! 
Let me know what you think!
It looks like in your [submission](https://www.reddit.com/r/java/comments/9or8ay/java_11_and_calling_web_services/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If it doesn't do it already, would jib be a good place to integrate jdeps/jlink to build a super slim JRE tailored to the app? From the user's point of view it could just be a configuration switch to get smaller images. This dplink plugin does it but it would be great to have it integrated: https://github.com/alkimiapps/gradle-dplink-plugin/blob/master/README.md
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have the same question, what is to do after 13 years?
Do you mean server side token management? Not sure what you mean by stateless session management because if an application has a server session it's not stateless.
Simple and secure token auth for Java Apps: `SecureRandom.nextBytes(32)`
Oh... that is why I got confused sometimes!
Isn't this overkill?
My experience in Java is using it because everything else it is running on top of and interacting with is in Java and because everyone working on all those things programs in Java and all the production environments just have the JVM installed and if you wanted to do something in C# in that flow you better have a pretty good reason especially getting the .net runtime installed in all the dev/uat/cert/prod environments. That’s not even mentioning CI and release processes. 
I think they're pretty close when it comes to ease of use. Java comes from a time when it was perfectly viable to write software with notepad. C# had better automated tooling from the get-go, but it paid for that with complexity in the build process that it's only now starting to shake off. There's still a huge schism in the C# library ecosystem between CLR, Core, and Mono. The biggest advantage Java has is momentum, and it shows no signs of slowing down. When lots of organizations use a language, they release lots of tools and share lots of code, which makes the language even more attractive. It's a self-perpetuating cycle.
Correct. If you don't have a degree we will not get along because you will not understand the things I tell you. And I will be saved from ignorant twerp who thinks that a bootcamp is a subsititute for 4 years of training. For further details, refer to this answer: https://www.reddit.com/r/webdev/comments/9if7kx/i_know_coding_bootcamps_get_a_bad_rep_for/e6j99i2/
I work in both -- especially on the current project I'm on. Java still beats C# on platform independence. I love Java Streams. Linq tries too hard to be some weird SQL mashup IMO. I don't like csproj files. I prefer a build system that can just grab what's in the src folder and build it. IntelliJ IDEA Community Edition is super feature rich, free, and to me, the best IDE available. There's a lot of choice in the Java world. Sometimes that could be a bad thing I guess. Pretty much everything is open source. Most of the time, I can tell IntelliJ to pull the source and it goes and grabs it for me with very little effort. While .Net is getting there, there are likely parts of the framework that will never be open. &amp;#x200B;
Nicely written article. Thanks for sharing.
I know this isn't universal, just my experience, but every C# developer I've encountered does forms. They know nothing about things like HTTP and threads. They only know how to build gui forms and when I ask them to parse something, they quit. So to sum things up, C# developers tend to be pussies, so I think C# is for pussies.
Spring. Maven. IntelliJ. Pervasive library support for just about everything. Not knocking C# either. They're both great and I work with both, but I'll still prefer Java if I am creating a green field client-server system, because I know it backwards and forwards and I trust it to be industrial strength and never embarrass me for choosing it for a client project. Several years ago I might have hesitated, but the improvements in the language since 8 have really fixed most of the gripes I ever had with it in the past.
C# copied Java and was able to make initial improvements because it didn't have the legacy. The most depressing thing about C# is it's developers. A sorry lot who thrive on making gui forms.
It's not a new format. MSBuild always worked that way. Visual Studio just does the stupid by default. 
Spring? IntelliJ I can accept. Maven, maybe. But Spring? That over-engineered POS only looks good when compared to J2EE. I am thankful that most people don't know that Spring.NET exists.
&gt; I love Java Streams. Linq tries too hard to be some weird SQL mashup IMO. Really? So far I've only see Java Streams as a neutered version of LINQ that only supports in-memory collections. Has that changed? 
It doesn't hook up straight to a database if that's what you mean. &amp;#x200B; I'm talking about the System.Linq extensions...
So... butterflies then?
Honestly, I don't even know what a good build system looks like. I just know what we have today isn't it. 
You sound like a nice person to sit down and have a reasoned discussion with.
When I'm evaluating frameworks I pay very careful attention to the complexity/lines of code to necessary functionality ratio. And in the case of Spring, that ratio looks horrible compared to Apache Axis2 or ASP.NET WebAPI. Frameworks like Spring are why Ruby on Rails and Node.js were able to thrive. (Which in a way I'm grateful for because ASP.NET MVC/WebAPI wouldn't exist without RoR to show how easy things should be.)
Ok, for the sake of argument lets stick to only in-memory collections. var dataset = new [] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // the .NET example dataset.Where(x =&gt; x &gt; 5).Sum(); // the Java example Arrays.stream(data).filter(x -&gt; x &gt; 5).mapToInt(Integer::intValue).sum https://www.foreach.be/blog/java-and-net-comparing-streams-linq That's not a very promising comparison. But if you have one that shows Java Streams in a better light by all means share. 
Hmm. I haven't seen that myself, but I'm only using it for REST services. Maybe making server-side rendered sites is more complicated?
Oh come on, how has no one mentioned Hotspot yet? The JVM has a huge advantage over the CLR in the way the Hopspot JVM works. It can recompile machine code on the fly as performance metrics indicate better ways to interpret the intermediate code. This allows you do to things like mindless wrap everything in abstract interfaces without paying the performance cost of v-table lookups on every method call. And escape analysis? Golden. The .NET Core version of the CLR is only barely beginning to implement support for de-virtualizing method calls . And it will be years, if ever, before it handles automatic escape analysis. Sure, the CLR can be faster when using value types. But that requires a lot of work by the developer and is rarely suitable for public classes in reusable libraries.
I will admit that I don't know how much of it is mandatory vs optional, but every Spring project I've been involved with included a stack of brittle AOP and auto-wiring garbage that broke if you looked at it wrong. I was given instructions such as "Just keep rebuilding until it works", which does not inspire confidence in me. Looking around, I see this example: https://spring.io/guides/gs/rest-service/ And if that's what modern Spring looks like, awesome. That's great. Unfortunately that's not the Spring that I've been exposed to.
Have you ever done this in real life?? I'm pretty sure I never have. Usually, you're going through a collection of objects or strings and massaging it or whatever. I prefer the Stream syntax.
That is Spring Boot. It's an opinionated layer on top of Spring designed to simplify getting up and running. No one really does Spring without Boot unless they're stuck in a legacy hell.
That's Spring Boot. Before that was the ordinary Spring Framework. Except for the auto-config layer of Spring Boot, Spring Boot and the Spring Framework aren't that different. Believe it or not, some people prefer the ordinary Spring Framework, because you get more control over the AOP and autowiring, instead of having it magically set up for you.
wow feelings = hurt 
Can you suggest any non-crap alternatives?
Sorry, didn't realize your a rocket scientist and going to change the world. Average is.
The Java example isn't very good: Arrays.stream(dataset).filter(x -&gt; x &gt; 5).sum(); `dataset` is an `int` array, such that you get an `IntStream` out of it. `filter` transforms the stream into another `IntStream`, so there is no need to convert to `int`. And, `IntStream` has a `sum` method.
I didn't even know the JVM does that. Thanks for the info
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 In this session we are going to see , how to read the JSON file and using JSONParser and how we are playing around it !!! 
No, but I'd love to see one.
Java Streams supports any data structure that can produce a Spliterator. The JDK comes with in-memory collections that have been augmented to produce Spliterators conveniently. JPA 2.2 [can return](https://www.thoughts-on-java.org/jpa-2-2s-new-stream-method-and-how-you-should-not-use-it/) query results as a stream. Third party libraries [like jOOQ](https://www.jooq.org/doc/latest/manual/getting-started/jooq-and-java-8/) can too. JDBC is a basketcase.
There are other JVMs available including the currently vogue Graal, openJ9, Azul Zulu. Many others as well, but some offer significant benefits in certain (or many) situations over Hotspot. 
That statement doesn't mean anything unless you say what those benefits/situations are.
Annotation processing
What are you talking about? All your comments suggest you have virtually no experience or understanding of Spring and almost all your problems with Spring are the result of poorly designed projects. Not claiming Spring is beyond reproach (and for that matter many on the Spring team itself would say the same), but Spring, and in-particular Spring Boot, is a big reason Java has remained popular/relevant over the past decade. 
Graal offers polyglot support, though admittedly don't know much about it beyond that. OpenJ9 uses much less CPU and memory (about half) when compared to Hotspot and with AOT enabled (storing class files in a shared location) can offer faster startup times. 
IntelliJ is great, but given that JetBrains has both Rider and ReSharper for Visual Studio, that's not really an advantage for Java.
Just let me know when Graal can actually start up in a sane amount of time. Last I heard, they were planning to use Hotspot's C2 to bootstrap Graal because graal would take minutes to compile and start executing user code.
Java 11 doesn't ship a JRE anymore. Use the JDK.
Ok but I'm confused. I'm not a programmer. The jdk doesn't have a Java settings panel like the JRE does. So do you mean that if I install the jdk the JRE is there but doesn't have a settings panel?
You're not wrong man. I use both also, and I'm just glad the cloud / DevOps is forcing these things into a standard configuration so we can all stop acting like every project is a special snowflake. Every time someone wants to change the build pipeline, it's a major headache unless it happens to work on the first try.
Seconded! I've used those tools a long time and never knew that VS / MsBuild could actually be not stupid about that.
Believe me... he's done this in real life. Lol....
Dude, you're fucking awesome. I know you prefer the .NET side too and here you go throwing these folks a bone. Nice!
I’m with you on the build tools (mvn/grade vs NuGet). And, even with .NET Core, Microsoft hasn’t (and won’t for a while) catch Java in the “write once run anywhere” ideology. But with .Net, Azure is giving the java devops ecosystem a run for its money. If you can subscribe to the fact that cloud deployments will outweigh hosted solutions in the future. Then, I’d argue that having a complete CI pipeline makes a big difference comparing ecosystems. Microsoft’s acquisition of github will be game changing in this arena. Give it a year or two. P.S. I’m a Java guy
Have you looked at Rider? It’s the new hotness C# IDE by Jetbrains. If we’re comparing streams, look at Scala! Otherwise 100% agree!
How well received is Kotlin in this sub? val dataset = listOf( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) //auto-inferring List&lt;Int&gt; dataSet.filter{ it &gt; 5 }.sum() No need to convert to stream, also sum() is available in Iterable&lt;Int&gt;.
I sort of know what I'm talking about and like u/grauenwolf my experience with Spring is it's a flaming POS. Our team has a fairly significant system sitting around that's mired in Spring version upgrade hell. I've spent many, many hours trying to debug it to no avail. Ultimately the entire component and internal framework it's built on are getting scrapped for something completely new - it's that bad.
- Existence of &lt;?&gt; in generics, if you are following design patterns with generics, its hard to glue them in c# without reflection - Thread pools, .net doesn't give lot of control on thread pooling, usually that control is not needed, but not available on .net if you need it - Different types of garbage collectors and tuning parameters, based on your workload, either its low latency or throughput you can choose GC accordingly on java - Different community mindset, its not just language but whole ecosystem, while working on .net ( core ) project it often happened that building blocks libraries are paid items provided by third parties, wheres most of the items are already in java specifications and ecosystem and opensourced - Frameworks like spring boot and its spring data for quick prototyping and making small service - Java 10, finally we have 'var' - Backward compatibility as one of primary items in mindset of jvm architects
The standard library of Java is incredible 
&gt; Microsoft’s acquisition of github will be game changing in this arena. I doubt that. I'm expecting that Java and Node are going to be supported just as much as .NET when it comes to CI and GitHub. Azure is where the real money is, regardless of what you run on it. .NET just allows MS to control their own destiny. 
What are some of your biggest gripes about C# devs? That’s what I get paid to do. Projects and classes are different languages and frameworks. I have always sensed that C# .net enterprise is a bit dead end
Microsoft manages every part of the CI pipeline except for the source until the github merger.
&gt; why do you need out variables if you can (efficiently) return an object from your method? 1. To support native libraries (e.g. Win32, Linux syscalls). 2. So you don't have to create a class for the result of TryParse. 3. So you don't have to allocate an object for the result of TryParse. (2) can be addressed using tuples. But they didn't exist in C# 1.0. (3) can be addressed using value types. 
&gt; Thread pools, .net doesn't give lot of control on thread pooling, usually that control is not needed, but not available on .net if you need it That's not true. You have always been able to create your own thread pool if you don't like the default one. If you are using `Task` (which you really should be in modern C#), you can also create your own implementation of `TaskScheduler`, which is basically your thread pool.
&gt; Different community mindset, its not just language but whole ecosystem, while working on .net ( core ) project it often happened that building blocks libraries are paid items provided by third parties, wheres most of the items are already in java specifications and ecosystem and opensourced That was true a decade ago. Now I almost never see commercial libraries in .NET projects except for some UI components such as grids and charts.
I've been using Spring Boot this year and it's amazing. Writing web apps and rest services was much easier than before since they picked their way to curate Spring and ran with it for Boot. Really enjoying the ease of local development. 
&gt; Backward compatibility as one of primary items in mindset of jvm architects Nope. Not going to believe that one. Still too cranky about them changing JDBC interfaces on me between versions. Of course there is the DateTime.Kind problem in C# that broke countless applications, so MS isn't off the hook either. 
Entity Framework is popular too. That doesn't mean it is a good library. Java deserves better than Spring. It deserves something that takes advantage of Java's static typing rather than failing in unpredictable ways at runtime. 
&gt; I haven't used the var syntax, but I'm assuming without a type, it is inferring Integer[]. In C# it would be `int[]` (also known as `System.Int32[]`. There isn't an `Integer` class like we have in Java. 
&gt;I don't even know what a good build system looks like I have to agree.
Rider is made by the intellij guys after all:P
Wait what, CLR doesn't have devirtualization? That's, like, one of the easier features to build in a jit
Even spring boot still likes brittle AOP way more than it should
&gt; Having full end to end control will allow Microsoft to be a game changer in the industry is all I’m saying. You keep repeating this but you're not explaining why this is a 'game changer'. Microsoft is doing a lot of great stuff but they are in most cases not the innovators. They look at what works and build their own 'better' version. 
&gt; And if that's what modern Spring looks like, awesome. That's great. Yes. That's how modern Spring projects are done. &gt; Unfortunately that's not the Spring that I've been exposed to. Well yeah. I had shitty manually-configure-everything-through-XML projects as well. But that was a decade ago, literally. Between then and now a lot has changed.
&gt; My main beef is that it just too much damn magic injection shit to the point where it basically negates the core advantages of using Java in the first place, namely using static typing to get a handle on how components relate to each other. I don't get this bit. How the IoC container works is well defined. If you're using Spring's own dependency management all the dependencies are handled for you. To me it sounds more like being doing it wrong than Spring being the problem itself. I'm not saying Spring doesn't have it's problems (it definitely does), just that these problems sound like a combination of "doing it wrong" and "not trying to understand what it does". Even Spring AOP, which you normally don't need, is nothing magical. And that's by far the hardest to understand bit.
I'm currently working as a software engineer for a small consulting company specialised in the Java ecosystem. Before this I worked for a small tech company who did both Java and C# depending on the client's needs. I was mostly tasked with integrating our technology (a search engine) into the client's system but I often also supported the clients on other stuff (like helping them do graceful degradation on high loads and stuff). Small disclaimer; I left that company in 2012 so my experience with C# was mainly between 2002 and 2012, so before .Net Core. During the 10 years or so I worked there I noticed that while I preferred C# as a language and was quite content with Visual Studio (didn't mind working in Eclipse either), I tended to always gravitate towards Java when building 'stuff'. If I needed to ingest some CVS's for example I would build a Java tool, and not a C# tool. Even before Java 8, which removed a lot of the issues I had with Java. The reason was the community: the Java community had by that time fully embraced open source and we have a huge very mature ecosystem of frameworks and libraries. The C# community on the other hand wasn't open: there were ports of Java libraries (nhibernate, nunit) but people tended to keep the stuff they built close to their chests instead of open sourcing it. This culture difference was caused by Microsoft itself. Fortunately they have now figured out they have to change that, and they are working hard to change it, but I really don't believe the C# community is changing all that fast with it. Just a single example (I know n=1 is pretty meaningless) but one guy I know from uni that is a huge Microsoft fan (back in 1999 he was claiming Java was dead and C# is the future) is often still posting anti-Linux FUD about how Windows is so much easier and that installing stuff on Linux is hard. Another example of this is what used to be a sister company of the company I work for now that were mostly doing Sharepoint consulting. They had the same problem; there was a pervasive anti-OS sentiment there (it's free so it must be crap) that is completely outdated. This is one of the reasons the company is now completely split off; the personalities didn't match. So TL;DR: for me it's the community. While microsoft itself is changing I still don't have the feeling the .Net community as a while has embraced the open source 'sharing makes us all better' ideology. 
To add to what /u/jveverka said; developers that are building Java applications that need Java 11 should be packaging that JRE with the application. Having one JRE all applications use turned out to be a bad idea. Especially now since, by default, many pre-Java-9 applications don't just work out of the box on 9+.
Denver area. And I’m glad to hear your advice, that’s pretty much what I’m doing. I have nothing against web development. My main goals are comfortable pay and flexibility so web lends itself to though ends pretty well 
Right yeah I understand that. For me the end user I'm still needing JRE until the developer converts the app to v11.
Last I looked at it was a year ago. Here is my report: https://www.infoq.com/news/2017/12/Devirtualization
Wake me when they finally add a TryParse()... or an out parameter. Operator overloading? Primitive methods without the need for primitive wrapper classes? Named parameters? Seems to me that C# is the winner here.
Yeah I agree. I'm just trying to understand what to do as the end user. It looks like I'll be staying with v10 until the app developer recompiles.
The last spring project I was on wasn't heavy into XML and, if I recall correctly, did use Spring Boot. But it still had this weird ass "we're going to generate a class based on the abstract interface and fucking magic" feature. And as a DB developer, I can't express how much I `loved` the "we're going to generate SQL from the method name" style ORM. It made EF look sane by comparison. And of course it too required runtime class generation.
Thanks for the info. I understand. 
It is brittle and verbose and no IDE actually knows how to handle them correctly so we are stuck editing it as plain XML/JSON. Nothing works the same way as the code it is being used to build, so we're basically learning a completely separate, single-purpose language. Is something like [Rake](https://martinfowler.com/articles/rake.html) where you would write the build script in Java/C# the answer? I don't know. But what we have isn't what we need, it's just what we happen to have.
I think a lot of people are afraid of that concept. They love labeling everything as "innovative" no matter how clear it is that the product, however good, is just an incremental improvement.
Regarding (4): But isn't return tryParse(s).orElse(0); with tryParse returning an Optional much nicer? What is won with that pattern? I find it harder to understand, but that may well be because I'm not used to it.
&gt; But it still had this weird ass "we're going to generate a class based on the abstract interface and fucking magic" feature. I still don't get that: the cglib proxy generation it does in some cases is still well defined and the 'why' makes perfect sense. Normally it's completely transparent and in no way gets in your way unless you're doing weird stuff (like somehow depending on very specific instances of classes being injected). I hear these complaints a lot. Spring is definitely a lot more complex than frameworks like Ninja that just let you do everything yourself. But that's kinda the point of Spring; we're fucking expensive and 'doing everything ourselves' is not an efficient way to spend our time.
Then there's the whole mess with having to choose between OracleJDK11 and OpenJDK11 because it introduces new licensing issues.
You just barely missed it. The .NET community started embracing open source with the introduction of NuGet as a Visual Studio component in 2012. The problem was never Microsoft's attidude. Rather, it was the inability to easily share libraries. Each dependency, commercial or open source, was an exercise in pain. They all had their own installers that would put the DLLs in random locations. Making sure everyone was on the same version was a nightmare. NuGet changed all that. Suddenly open source made sense. Why fight the installer of a commercial library when you can just list the open source alternatives in a project file and have MSBuild automatically download them.
From a programmer's perspective, when the experimental docker awareness features were backported to Java 8, it suddenly got a lot harder to justify migrating to Java 11 to get syntactical sugar.
The example was simplified. Usually there is a lot more going on in the if or else block. If I really did just want to return a value, then the signature would be: int ParseOrElse(string value, int defaultValue) return ParseOrElse(s, 0); This I do admit I have this function in my library: int? TryParse(string value) return TryParse(s) ?? 0; 
There is no mess. OpenJDK is Java. Oracle have been pushing people towards OpenJDK for quite some time now so I don't really get why people have been so surprised by this move. 
It may be "well defined" when it is working correctly, but it sure doesn't feel that way when I'm getting a class not found exception with no explanation as to why or when the code generation failed. 
You are right. The ecosystem is the key for Java developers. You have mentioned just build tools and we should talk about Docker like tools and Docker ecosystem tools like Kubernetes. So we have a full stack of tools from Java and IDE to provisioning and infrastructure management. And the most part of these tools are open sourced. So you have to pay money just in special cases and not from scratch like OS, dev tools. 
&gt; The .NET community started embracing open source with the introduction of NuGet as a Visual Studio component in 2012. I know, but that's kinda the point. That's only 6 years ago. 
&gt; Isn't this a somewhat-proper way of generating random tokens for sessions? Generating the tokens was never ever the hard part. So his reply doesn't add anything. 
Valid point for the current config. We will soon use native image for graal when running on HotSpot. That will reduce footprint and bring startup time basically down to zero. No need for bootstrapping with another compiler in that mode. 
Well you're not giving me any context to work with here. Like I said; Spring definitely has it's problems but that kind of stuff I never ran into an the last 5 years, aside from one 3-month Java EE project, have all been on Spring. Most complaints I heard about Spring were from developers who prefer building stuff themselves over learning something someone else wrote. And while I definitely enjoy building my own version of stuff it's not what the client pays me to do. 
This is no longer available. Need to find a backport for open jdk 8 on ubuntu 18.04
I should have also mentioned the "Death by Microsoft" problem. We had many popular open source libraries for .NET before 2012. But if there was even a rumor that MS was going to make a competing library, support for the open source version would instantly dry up. A good example of this is NDoc. When MS Sandcastle was announced, no one was willing to help with the NDoc project. And when Sandcastle turned out to be a mix of bloated crap and vaporware, we were left with no documentation tool. If I'm not mistaken, we still don't have a non-commercial tool that converts C#'s Javadoc into a website or help file.
And boom, bye bye lazy.
Running it in production already. So far so good.
We want to switch to Java 11 but a lot of frameworks don't support it. IMHO one bigger reason is that ASM's (https://asm.ow2.io) Java 11 support is still in beta and dependent projects can't upgrade yet.
Except first, its not directly related to the std lib.
I worked the last three years with spring and it all makes sense once you put some effort to understand springs philosophy and inner workings. I love spring.
To migrate to java 11, first we need to migrate to java 9 which is not going to be soon... :(
Good point.
OracleJDK has been OpenJDK since java8, OpenJDK was nominated as reference implementation, OracleJDK just adds some binary blobs for CPUs to improve performance in some edge cases. There is no mess, just go for OpenJDK for everything.
IoC is statically typed and also spring fails on start up and never at runtime. You're really not experienced enough to be so negative about spring. 
Startup is part of runtime. 
Yes, I hated the feeling of mixing SQL-like code in C#, feels just wrong, formatting is unintuitive, everyone has their own style, bugged me a lot.
https://www.youtube.com/watch?v=mAtrEPeAJSc
What's the mess? Why is that a difficult choice? Just use OpenJDK, it could not be simpler.
C# can only run on Windows which supports the .NET framework unless you have a compatibility layer like Mono on Linux whereas Java has native runtimes for all platforms. You’ll also find that Java is more commonly used for server back-end software and it’s built the foundation of many popular websites like Google, Facebook and Steam. It also dominates government software and IT.
&gt; Until they get rid of type erasure How is that relevant? 
Out parameters are shit. The deconstruction patterns being explored by amber will be *far* more useful.
Because people just love their overengineered OAuth2 and JWT when they don't need it.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How do you see type erasure as being related to this? Seems to be yet another person complaining about it without really understanding what they're saying... Value types are certainly related if you're talking about streams over primitives, and they are on their way. Nevertheless, as has been pointed out to you a couple of times now, your Java example is simply wrong.
Most focus on ecosystem because objectively Java wins here and C# is a better language with more features. But there are language features that are better in Java, for example Java enums are much better and useful than C#.
Ant + ivy ftw. Keep it nice and simple. 
The JVM is a better polyglot platform than the CLR, and is higher performance. There are a lot more popular and interesting languages which compile to it, and it performs better with dynamic languages with invokedynamic. With Graal on the way this is only looking better and better, with performance even becoming competitive with e.g. V8 for javascript, with zero-cost interop with other languages. The CLR doesn't come close.
Well. I saw you complain about maven and gradle as well. I feel the problems these people have were caused by inexperience more than anything else. I set up the CirlceCI pipleline of Spring Boot service deployments as docker containers in a terraformed AWS ECS enviornment and frankly the Java tooling was the least of my problems; ECS sucks. 
There’s always Sequece&lt;T&gt; to make it lazy explicitly 
 var dataset = new [] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; is not legal Java syntax because you're missing the array type: either `int[]` or `Integer[]`. If I have the former then do IntStream.of(dataset).filter(x -&gt; x &gt; 5).sum(); So the only extra step is to create the stream.
I was very excited for JDK 11, new LTS release and so far I’ve been utilising modules a lot. Makes it so much more organised.
&gt; Usually when a big company open sources their proprietary tech, its when there's not much interest left in that tech. &gt; JavaFX has been open source since 2011. &gt; 2005 called.. 
You don't need to migrate to java 9, there is no reason to run java 9 anymore.
[removed]
I'd suggest migrating directly to 11, since 9 and 10 are already EOL.