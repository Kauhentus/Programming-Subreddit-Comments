No the JVM will magically rewrite `new Object()` to instantiate a `RefObject` and deprecate the public constructor.
I’m a junior java dev, and I’ve always heard this but never understood exactly why very clearly, just took it as gospel. Would you mind explaining?
Someone didn't read the very, very, short linked email.
IntelliJ IDEA. Community Edition is free. Ultimate is better _and_ free if you are a student (i.e. you have an email account from some University or educational institution).
Because you want `Foo::newInstance()` to return a `Foo`, not an `Object` that you then have to recast back to a `Foo`. There's various points in the API that could not be generified in Java 5 without breaking source compatibility, like `Object.equals(Object)` even though it makes sense that it is generic. However, I suspect adding a public `newInstance` method to `Object` would break a lot of existing code so I imagine they haven't nailed down the method name just yet.
&gt; value objects, which are a stepping stone towards records and embeddable flattenable objects Pokemon are literally more sensible than this.
Nothing is better than intellij. Can't argue that
Most shops I have worked on (big corps) rely on Eclipse. I still prefer Netbeans for private projects from all three, even if now it is only supported by the community. InteliJ, is too bloated on my hardware, always need to disable plugins, and requires 10 finger chord shortcuts.
I switched from Eclipse to NetBeans a long time ago because in NetBeans the build process wasn't so tightly tied into the IDE, which made it easier to build projects in IDE-less environments, work with people who don't use the same IDE, or change IDE without too much pain. I also found that NetBeans felt a bit cleaner and more straightforward to me, but that's mainly a subjective judgement. I've played with IntelliJ and might move over to it one day, but I've never considered going back to Eclipse. In the long run it shouldn't matter to you as a developer, because you should be capable of learning a new IDE if and when necessary. It's not a marriage: you're allowed to switch :).
My good sir or madam, you endanger yourself by asking such a controversial question. That being said, Intellij is better than either of the two options you presented since it maintains an index of all things within the project which enables it to create "smarter" suggestions based on context. Additionally, it is the primary IDE Google supports for Android development if that sort of thing interests you.
&gt; like `Object.equals(Object)` even though it makes sense that it is generic How would you generify that if compatibility weren't a problem? Java doesn't have a self type, and even if it had, you still want it to be possible that different implementations of an interface can be equal to each other, like `linkedList.equals(arrayList) == true` for example.
Google also hates holy shit.
 Eclipse and IntelliJ are the two competing IDEs in the industry. There are lot of passionate discussion going in the social media, forums to declare the winner in this race. We thought it would be a fun exercise to study which IDE utilizes memory efficiently? [Eclipse or IntelliJ: which one will triumph](https://blog.heaphero.io/2018/11/05/memory-efficient-eclipse-or-intellij/)
[removed]
And how can I get comment karma? Also I am repoting a bug yet it's removed? How convenient for the support of 3 billion devices related software developers :)!
How to report a bug for Java in here?
It frustrates me that this article mentions “modern processors” and specifically two high end processor families as the types of CPUs that maintain on on-die memory caches.
In my experience, Eclipse has a wider installation base than netbeans, and their workflow is more or less the same. In the long run, for better or worse, it is worth to stick to one, as shortcut and specifics knowledge really helps you to keep working without having to fight with the IDE. So I'll suggest you eclipse. Also, as you can see, you will find here a shitload of people suggesting intelliJ. I haven't never used it, nor found a reason to do it (The best reply I've had on "why is better than eclipse" was "its in the small things" in an interview, and probably here you will only get similar or worse replies.
IntelliJ, both community and ultimate versions beat eclipse and NetBeans.
Yeah this is pretty obvious.
I run it on a MacBook.
Most OS don't seem to allow you to set a system time before 1970 to avoid such problems. Still, even if that particular method never returns negative numbers in practice, dealing with negative milli-timestamps can be very common if you handle older data for example.
Now I am curious: What processor families shows I have mentioned?
“Modern Processors like the Intel Xeon or the AMD Ryzen”
Thank you for the keywords, I can catch up the trend by googling them. How about C-sharp? I used it few years ago for a small project and so so liked it technically, but worried if it can survive in the market. Is it still not so "typical" for Windows desktop app today?
The first hit to my google search for alternatives was "JWrapper" ([https://jwrapper.com/](https://jwrapper.com/) ), and asked a trial use. Is anyone use this? Was it good?
I use IntelliJ, but I never learned it's shortcuts. I remapped IntelliJ's keybindings to match Eclipse. Makes it weird when I have to use anyone else's IntelliJ.
Someone asked about this on the mailing list on your behalf: https://mail.openjdk.java.net/pipermail/panama-dev/2019-May/005447.html
Oh, I mis-read your question and assumed you were wanting a cross-platform solution (which has *always* been tricky for desktop GUI apps). If you only care about Windows, then I would say C# is the norm. Microsoft is pushing a new thing, "universal"-something-something, that is intended for writing apps for the Windows Store. But I would say that 90%+ of Windows apps are still written with WPF and XAML, which is essentially .NET's counterpart to JavaFX. JavaFX copied from that very heavily.
If it wasn't for stupid lawsuits and legalities, it would make sense for Dalvik/ART to actually merge with OpenJDK enriching the whole ecosystem and more easily adopting new features from both platforms. Unfortunately the lawyers will be making the money instead.
please remove it. too many people could not pass their interviews because of it.
Any would work (i do not recommend intellij, it's just fluff and marketing). Try them both and see what you like.
i do. everything, nano, is better than intellij.
Before OpenJDK, the Java licensing deal imposed field of use restrictions that prohibited embedded use, presumably for JavaME licensing. Google didn't want to pay for that license, and I guess they were going a different way with Dalvik anyways. James Gosling felt like Google "slimed" Sun, but the new CEO Jonathan Schwartz wanted to put on a happy face instead of suing Google like they had with Microsoft. That's also why the original Android SDK was based on Apache Harmony, a clean room implementation of the Java SDK, I guess created in case Sun went rogue ir something. Apache was also not in peace with Sun or Oracle, because the Java TCK is not open source, and this conflict eventually lead Apache to leave the JCP.
All the Fortune 500 companies I worked for.
I also used InteliJ on a netbook, it doesn't mean it was usable for the workloads I am tasked with.
&gt; I'm not sure what the compatibility level is these days, considering Java for Android does not target the JVM. Everyone else does things the "Java way", so no conflicts. Basically it is hit and miss when you take a random standard Java library from Maven Central and try to use it on Android, specially Java 8+ ones. So as library author, you either constrain yourself to the common subset or write two versions, standard Java and Android Java.
IDK when it was first introduced, but I'm pretty sure old 486s already had L1 cache
As in, it wouldn't be possible to use another IDE for development? I would hope not, because that's not a sign of a sane development process.
Yes, it is sane for IT. Everyone gets the same developer image on their laptops.
The whole ecosystem is already quite rich with plenty of JVM implementations to choose from. https://en.wikipedia.org/wiki/List_of_Java_virtual_machines It is Google that doesn't want to play ball with the Java community.
While this is true, the spirit of free software is that you cooperate with the community, not create hostile forks. This tends to fragment the community, especially if the fork is popular, forcing library developers to target one or both. Which sucks if the hostile fork plays by different rules than everyone else. This reminds me of the great Emacs schism that spawned XEmacs from GNU Emacs. Eventually, XEmacs died when GNU Emacs with its much larger installed base caught up. I think that's the real motivation to move to Kotlin. Google can't keep up a hostile fork, especially as Java keeps moving forward, and libraries targeting Android have to be held back to whatever variant of the Java SDK works properly on Android.
Exactly the same experience with NetBeans. A real joy to use actually. I left I telling for NetBeans for all my personal projects. At work I use Intellij but I definitely prefer NetBeans.
The Android Java ecosystem is lacking (as this article is pointing out with only partial Java 8 support). Also I'm sure the wider JVM community would benefit from a system designed for embedded machines (J2ME is dead)
Sane for IT and sane for developers are different things. Every Fortune 500 that I've worked for that is developer friendly has gold images of developer tools which developers can install onto the base image. I've only worked at one Fortune 500 where this wasn't the case, and I had to install developer tools "creatively" to circumvent controls imposed by IT that made sense for business users. That was a decade ago. I wouldn't do that today for fear of getting fired or worse. I'd rather work for a more sane organization.
I think we should start making a list of Java Commandments. The first one that comes to mind is: &amp;#x200B; 1. Thou shall not attempt to parse Dates in Java or will perish trying.
Programming help should go in /r/javahelp. **Removed**
It certainly does not matter in the long run, and you will likely work with several IDEs down the line. Try them both (and IntelliJ, too) to see which you prefer. Of the three, I like NetBeans and IntelliJ, with a *slight* preference to NetBeans, but this is a completely personal preference. Beginners and experienced developers may also prefer different IDEs.
Google didn't care about the Java community. They just wanted to steal the Java developpers. J2ME was pretty huge. Symbian C++ failed to gain traction. Samsung OS and language was buggy. Apple was using eye watering Objective C. Microsoft failed because there was no applications on their mobile platforms. Android success rests on the clean battle tested Java APIs. Google raped Java by breaking compatibility. SUN was weak. Imagine being able to run android code on the JVM on linux/windows/mac etc. Google should lose.
Excelsior JET was the oldest Java implementation with ahead-of-time (AOT) compiler and deployment toolkit. It was probably stopped because of GraalVM. The guys who worked on it obviously know a lot of stuff regarding bytecode...
It looks like in your [submission](https://www.reddit.com/r/java/comments/bps1w9/friendlistassignment_please_help/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The JVM community has plenty of options for system designed for embedded machines. PTC, Aicas, MicroEJ, Ricoh, Embedded Java, Websphere Real Time.
The main difference between eclipse and intellij is in the autocomplete : intellij one is far better because it is contextual. One the other hand it is more resource consuming.
Lol ok, by that logic anything a person doesn't know about or fully understand doesn't matter..
There's a thread about it from two days ago: https://www.reddit.com/r/java/comments/bp2v48/excelsior_jet_16_cancelled_and_excelsior_moving/
The kind of projects I work on, we only get access to customers' intranet either via IT provided laptop for external developers, or a VM in some cloud provider.
Upper right corner, click "Report bug", then choose "Language" and then select "Java". On the screen you'll see there, enter your bug, the time you are prepared to wait for the fix, and click "Submit".
But there people thought it was made-up: https://www.reddit.com/r/java/comments/bp2v48/excelsior_jet_16_cancelled_and_excelsior_moving/eno5j9w/
Good luck.
Java tomorrow, Kotlin today ;)
Sorry...
Even Chief Architect [can't implement](https://i.imgur.com/6WJ8kV1.jpg) equals/hashCode/toString correctly without IDE ;)
I like both, although as a long time Eclipse user, I switched to IntelliJ IDEA CE and I've been quite happy with it.
Or JSON serialization. One may put an entire POJO in an SQL Server column and use JSON queries in their SELECT statements.
Maybe it is a subtle way of promoting data classes.
You are correct and your example is also kinda-correct. Let's imagine equals is generic. You could downcast both lists to a common interface, java.util.List and then call equals... ((List)linkedList).equals((List)arrayList) Ugly, but works the same and we have type safety! It's doable, but as the guy above said, would break the hell out of the older Java code.
Generics are like a ruler. Yea, you probably can draw a pretty straight line by hand, but why should you if there is a device that always makes it perfect? They give you type safety at compilation time. Sure, you can check instanceofs all you like! Most often than not your code will work just fine, too. But there's that 1% of ClassCastExceptions that will haunt you in your dreams. In all seriousness, generics are at least worth learning. Maybe you will decide not to use them - and that's fine! There are many cases where generics don't apply (take a look at Collections internals). However, you will have one additional skill that might come in handy some day.
Thanks, actually I am familiar with generics and how to use them, and why they make sense for collections (like you get access to all the normal things for your objects at compile time, without having to downcast). I guess i was unsure of the context here. It was also around 2 AM my time so i think i was confusing myself :) thanks for the words of encouragement nonetheless!
You like your fist better than your girlfriend?
I currently use Eclipse, but I started developing on Netbeans. I think Netbeans is a bit more straightforward to use. I don't mind Eclipse, but the frequently shuffling between perspectives irks me. Maybe other people have a different workflow than me, but I switch between Java and Debug perspectives frequently and I don't like how each perspective keeps its own set of windows and their positions. I should probably make a custom perspective that just has everything. Netbeans used to just give you one big set of tabs, and it feels more straightforward to me to work that way.
Except for the Amber changes, none of the other projects discussed can be addressed by Kotlin.
If you can't use intellij at a company, guess you CAN argue it. Silly to make this claim.
It's silly that the company makes you to use some other IDE in the first place. 2nd thing: open source IDE is built by programmers wich had free/spare time for fun (or other reason). Intellij IDE which is built by payed programmers. Their job is to build an IDE worth paying for. How can you even compare them?
That is funny...however, there is no universally agreed-upon scheme for equals/hash. I have had to use instanceOf() instead or getClass() for Object Equivalence in scenarios that involve sub-classes.
Not saying open source is bad. I really love open source community. But if we are talking about IDEs than Intellij is a solid choice.
NetBeans is easier to use in my opinion. I moved away from Netbeans recently to IntelliJ because there was some lag when Netbeans got moved over to Apache. They seem to be getting things going again though so I may go back. IntelliJ is alright buts it's project structure is bad and it forces auto save on you which is really annoying.
Ah, good ol’ copy and paste!
Note that the return type for all methods is `double`, so they aren’t correct overrides haha.
Don't forget Loom, Kotlin has continuations &amp; fibres (coroutines) too. Granted not a VM level, don't get me wrong Java adding these things is great and Kotlin will benefit from the low level VM changes too, they are different tools used for different reasons.
&gt; Kotlin has continuations &amp; fibres (coroutines) too. They're not at all the same as Loom's.
Eclipse, can't stand IntelliJ.
Good catch!
But a coroutine is a lightweight alternative to threads? So they have the same purpose
For the beginning Netbeans, then switch to Eclipse or Intellij. The latter is risky in the long run since no one knows when Jetbrains drops support. Also Intellij is too intelligent, it writes the code for you, it's kinda boring. I would suggest to try out Eclipse and Intellij and see with which one you finish your work faster.
I've always found it strange that you could create a plain object. But are there any good reasons to actually go ahead and make the change?
Try them both or add IntelliJ and try them all. Use the one you like.
He also "started" the Thread by calling run() instead of start(), another classic. The constant mispronunciation of [Vegeta](https://www.youtube.com/watch?v=SiMHTK15Pik) by the JVM engineers is kind of endearing. :P
They serve the same purpose, but in different ways, and they differ in their behavior. Kotlin coroutines do not behave in the same way threads do.
Read the discussion below.
I see a lot of spring components support “reactive”, but what is it?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Kotlin fanboys are like jehovah witness. Keep showing up at r/java and trying to convince Java developers to join their "better world". We know Kotlin exists. Why do you keep posting like it's something new and not heard of?
It looks like in your [submission](https://www.reddit.com/r/java/comments/bpvd34/last_stitch_effort_shit_java_professor_maybe/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's just a joke
This is what I have so far: import java.util.Scanner;//import scanner class &amp;#x200B; public class ProgrammingFinalExam {//main class public static void main(String\[\] args) {//main method int length;//create integer variable to contain the length of array Scanner input = new Scanner([System.in](https://System.in));//create object from scanner class to read input from user System.out.print("How many numbers would you like to enter? ");//prompt user input for quantity of numbers length = input.nextInt();//receive input from the user and store in length variable double\[\] numbers = new double\[length\];//declare and initialize the array "numbers" for(int counter = 0; counter &lt; length; counter++) {//declare and initialize variable "counter", establish condition, and increment System.out.println("Enter number: " + (counter+1));//prompt user to enter numbers and store in array "numbers" numbers\[counter\] = input.nextDouble();//read the input from user and store in array "numbers" } input.close();//close scanner input System.out.println("Your numbers are"); for(int counter = 0; counter &lt; length; counter++) { System.out.println(numbers\[counter\]);//print the values received from user } } }
Sorry and thanks for your guidance!
Look up reactive programming.
Note that this would be a replacement for `break` in `switch` expressions. They were originally going to use `break-with`, but thought they could do better. A keyword like `yield` could be used in other future expression blocks.
A better comparison might be bytecode weavers like [https://github.com/puniverse/quasar](https://github.com/puniverse/quasar) . I think I read that the guy behind Quasar was working on Loom so presumably they aren't good enough. Not sure why a sort of lazy CPS translation couldn't be adequate though, ~~~ void serverLoop() { for (;;) { Connection con; con = recv(); doStuff(con); } } ~~~ ~~~ void serverLoop() { resume(); } void resume() { for (;;) { Connection con; try { con = recv(); } catch (Yield.YieldThrow y) { Yield.saveState(() -&gt; resume()); throw Yield.YieldThrow.SINGLETON; } doStuff(con); } } ~~~
Hi, Great work on the lib ! I have started a little experiment on the project I am working on with Spring Data R2DBC. I waant to see if it would be difficult for a team of junior programmers to learn reactive programming. Having trouble myself (not so much with Spring Data R2DBC itself), what are your thoughts ? And with is a reasonnable timeframe to have a production ready release ?
For a newbie starting coding with IntelliJ, would you recommend him just downloading the standalone JDK, or use the installer that sets up things like the Path variable? Is the 2nd option more future proof considering that he might want to use Java outside of Intellij IDE?
Ignore them, I bet that in 5 years time it will be just yet another guest language on the JVM. They might have won Android, but it remains to be seen what the political wars between Android, Chrome(PWAs), ChromeOS and Fuchsia will lead to.
Reactive programming is the next frontier in Java development. In any case, you should have a good reason to apply reactive programming as a lot of techniques known from imperative programming aren't applicable to functional-reactive-programming. Take your time to learn your library and how to debug code and how reactive execution works. &amp;#x200B; Expect an R2DBC GA release somewhat end of 2019. It is now good enough to build prototypes and start development. The missing bit that would turn it into a GA release is mostly API stability.
I'll be honest, if you're not using something like Maven or Gradle regardless of your IDE, you're doing something wrong. Most IDEs have support for both.
I've worked for my state's government in two different divisions (technically I was on loan to the second) and Eclipse was mandated at both locations.
sounds like a you problem
All those Object mutexes will need to ... change.
IntelliJ &gt; Eclipse &gt; Netbeans
Hmm, this reminds me of the class has articles by Aleksey Shipilev. In particular, [this part](https://shipilev.net/blog/2016/close-encounters-of-jmm-kind/#myth-barriers-are-sane). It seems to me like in your article, your veering a bit close if not too close to imementation details rather than the Java Memory Model.
final keyword also causes a storestore fence. Ripped from wikipedia ~~~ public class FinalWrapper&lt;T&gt; { public final T value; public FinalWrapper(T value) { this.value = value; } } public class Foo { private FinalWrapper&lt;Helper&gt; helperWrapper; public Helper getHelper() { FinalWrapper&lt;Helper&gt; tempWrapper = helperWrapper; if (tempWrapper == null) { synchronized (this) { if (helperWrapper == null) { helperWrapper = new FinalWrapper&lt;Helper&gt;(new Helper()); } tempWrapper = helperWrapper; } } return tempWrapper.value; } } ~~~ Although using a lambda should be more optimizable (because it is an internal VM class the final field is more trusted for optimizations.) Also ~~~ // If there is only ever a single impl of an interface it can be better interface Wrapper&lt;T&gt; { T get(); } public class Foo { private Wrapper&lt;Helper&gt; helperWrapper; public Helper getHelper() { var tempWrapper = helperWrapper; if (tempWrapper == null) { synchronized (this) { if (helperWrapper == null) { var helper = new Helper(); helperWrapper = () -&gt; helper; } tempWrapper = helperWrapper; } } return tempWrapper.get(); } } ~~~
I'm missing something. Why do we need `yield` at all? Is this just about making switches into expressions? It's kind of lame if you're using up the word and not enabling the sort of functionality that Scala and C# use it for.
Just wondering, but how does auto save annoy you? I've never found it to interfere with my workflow.
`switch` already has an expression form in Java 12. It is currently in preview. See [here](https://openjdk.java.net/jeps/354). What they’re uncomfortable with is that reusing `break` may cause some ambiguity since `break` can already be used with labels. They are looking for a better keyword that could be used in future expression constructs. Currently, the leader is `yield`.
What features do you give up by using Fiber instead of Thread?
I love how every time he's about to say "we are addings things similar to other platform and languages" my mind automatically replaces it with "we are addings things similar to *Python*" and it's right on the money every time xD I'm not complaining either! Java robustness and performance with Python-like syntax and features? Where do I sign up? :D All I can say at this point is that I want more and I need a stat on list slices ASAP, thanks!
You can read a comparison, as well as other information about Project Loom [here](https://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html).
They make is seem like it's up in the air. Maybe it's outdated
As far as I remember MethodHandles are implemented using a lambda calculus style intepreter and only jitted into bytecode lazily. [https://github.com/frohoff/jdk8u-jdk/blob/master/src/share/classes/java/lang/invoke/LambdaForm.java#L791](https://github.com/frohoff/jdk8u-jdk/blob/master/src/share/classes/java/lang/invoke/LambdaForm.java#L791) So it might use less bytecode. I'd measure directly though because there are lots of reasons why it might not be optimal.
Yeah, it likely is outdated. [This](https://wiki.openjdk.java.net/display/loom/Main) should provide up to date information.
[Here](https://www.baeldung.com/spring-boot-https-self-signed-certificate) This uses a self-signed cert. Don't do this in production. You will need to obtain a legitimate cert. They're not hard to get.
huh? that's oddly specific and wrong as far as i am concerned. don't group me in with your weird fetishes. you're the weird one here, not me.
Sometimes I am trying a solution and then realize a better way. With auto save I have to undo everything instead of just not saving it. It's more work and error prone.
[https://duckduckgo.com/?q=spring+boot+ssl&amp;t=ffab&amp;ia=web](https://duckduckgo.com/?q=spring+boot+ssl&amp;t=ffab&amp;ia=web)
Not really. A lot of project Amber looks more like Scala or Kotlin than Python.
If you're willing to change your architecture and spend a bit more money, you could create an ALB load balancer that sits in front of your EC2 instance. pros: * using AWS Certificate Manager to support HTTPS via the ALB becomes easy * can lock down your EC2 instance security groups so it's no longer just sitting on the internet (or you can go all the way to putting your EC2 instance in a private subnet) * no more tying your client directly to your public IP address, which helps a lot with maintenance, allows you to change things behind the scenes without worrying about how the client connects (like run multiple EC2 instances, change to a spot fleet of instances to save money, convert EC2 instances to Lambda, etc.) cons: * more complex architecture * load balancers cost money
This is \_so\_ much better than \`break-with\`. I'm really glad they stuck it out and came to a better solution.
use an elb/alb and terminate the ssl there. use letsencrypt to get yourself a cert
Totally agree with you. For the record, if I had to spend an *hour* arguing with my teammates in a PR about unit testing getters and setters, I would start looking for a new job.
Thank you again, BadMoon! C#+WPF seems the best at this moment because AOT compiler is included in Visual Studio. I need AOT compiler mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows, considering cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one. For now, I have to find out an alternative to Excelsior JET, to continue work on current code (Java+SWT) for a while.
Thank you again, BadMoon! C#+WPF seems the best at this moment because AOT compiler is included in Visual Studio. I need AOT compiler mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows, considering cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one. For now, I have to find out an alternative to Excelsior JET, to continue work on current code (Java+SWT) for a while.
Thank you again, BadMoon! C#+WPF seems the best at this moment because AOT compiler is included in Visual Studio. I need AOT compiler mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows, considering cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one. For now, I have to find out an alternative to Excelsior JET, to continue work on current code (Java+SWT) for a while.
All you have to do is put information for the keystore in your [application.properties](https://application.properties) and spring will handle the rest automatically. &amp;#x200B; server.ssl.enabled-protocol=TLSv1+TLSv1.1+TLSv1.2 (you might want to not allow v1 in production) server.ssl.key-store=/key/store/directory server.ssl.protocol=TLS server.ssl.key-store-password= server.ssl.key-password= server.ssl.key-alias=
Thank you again, BadMoon! C#+WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable because cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one. For now, I have to find out an alternative to Excelsior JET, to continue work on current code (mainly Java+SWT, around 300-400 k lines) for a while.
Thank you again, BadMoon! C#+WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable because cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one. For now, I have to find out an alternative to Excelsior JET, to continue work on current code (mainly Java+SWT, around 300-400 k lines) for a while.
Thank you again, BadMoon! C#+WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable because cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one. For now, I have to find out an alternative to Excelsior JET, to continue work on current code (mainly Java+SWT, around 300-400 k lines) for a while.
Thank you again, BadMoon! C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one. For now, I have to find out an alternative to Excelsior JET, to continue working on current code (mainly Java + Eclipse/SWT, around 300-400 k lines) for a while.
Thank you again, BadMoon! C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one. For now, I have to find out an alternative to Excelsior JET, to continue working on current code (mainly Java + Eclipse/SWT, around 300-400 k lines) for a while.
All you have to do is put information for the keystore in your [application.properties](https://application.properties) and spring will handle the rest automatically. &amp;#x200B; server.ssl.enabled-protocol=TLSv1+TLSv1.1+TLSv1.2 (you might want to not allow v1 in production) server.ssl.key-store=/key/store/directory server.ssl.protocol=TLS server.ssl.key-store-password= server.ssl.key-password= server.ssl.key-alias=
Thank you again, BadMoon! C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live. I have few years of preparation time to actually choose one.
Thank you again, BadMoon! C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live.
All you have to do is put information for the keystore in your [application.properties](https://application.properties) and spring will handle the rest automatically. &amp;#x200B; server.ssl.enabled-protocol=TLSv1+TLSv1.1+TLSv1.2 (you might want to not allow v1 in production) server.ssl.key-store=/key/store/directory server.ssl.protocol=TLS server.ssl.key-store-password= server.ssl.key-password= server.ssl.key-alias=
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually be required even in the conservative market I live.
Thank you again. C-sharp + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually become popular in the conservative market I live.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But in few years JavaFX can become better choice when GraalVM's covers Windows. JavaFX is preferable then because cross-platform may eventually become popular in the conservative market I live.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need a long-living AOT compiler, mainly for hiding the source code from my competitors. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need an AOT compiler mainly for hiding the source code. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need an AOT compiler mainly for hiding the source code. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
Thank you for this answer. I am learning right now and I agree that it requires a different approach. I have a system that is expected to be able to handle dozens of requests per second on cheap hardware. So I thought that we could have a more efficient/resilient application by using this programming style.
Thank you for this answer. I am learning right now and I agree that it requires a different approach. I have a system that is expected to be able to handle dozens of requests per second on cheap hardware. So I thought that we could have a more efficient/resilient application by using this programming style.
Thank you for this answer. I am learning right now and I agree that it requires a different approach. I have a system that is expected to be able to handle dozens of requests per second on cheap hardware. So I thought that we could have a more efficient/resilient application by using this programming style.
Eh, if project loom exposes continuations as API then things like generators etc. could be implemented at the library level, no need to waste keywords on it.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Aww, and here I was hoping for language support for generators...
That's a simple analogy. Do you need explanation?
So you'd close the file and discard the changes? I see. In that case, you might like the "Local history" feature (accessible via right click in the editor). That makes it very easy to go back.
&gt; I'll be honest, if you're not using something like Maven or Gradle regardless of your IDE, you're doing something wrong. That was my point; perhaps I expressed it unclearly. At the time I switched, Eclipse didn't use a standard build tool: Eclipse was what I used to build my project, and if anyone else wanted to build it, they also had to install Eclipse. I didn't like having a whole IDE as a build dependency. I also didn't really want to set up an additional build configuration with a tool like Maven and end up having to maintain two parallel configurations; I just wanted my IDE to make use of an existing standard tool, so that hitting "build" in the IDE always produced the same result as checking out the project and running Maven / Ant / Gradle. That was the system NetBeans used, so I switched to NetBeans.
Thank you again. C# + WPF seems the best at this moment because AOT compiler is included in Visual Studio (isn't it?). I need an AOT compiler mainly for hiding the source code. But cross-platform may eventually become popular in the conservative market I live, so JavaFX can become better choice when GraalVM's covers Windows.
As I've been doing a little research into the r2dbc projects the last two months I see your name pop up everywhere, awesome work on all of those repositories! It's amazing to see how far r2dbc has come.
&gt;What (useful) features do you give up by using Fiber instead of Thread? Scalability. With a \~ 200-300 byte overhead (+ some variable stack) you should be able to have millions of fibers in a single JVM. Not possible with threads. &gt;Can you still wait, notify, join, use synchronized inside it, etc? No, fibers work mainly via LockSupport.park(). They are currently retrofitting all java io classes to use LockSupport.park() instead of synchronized() to allow support for fibers.
I know that better late than never but FFS having to wait to Java 12 for a fundamental feature, that most people will never use because 9 out of 10 Java devs are stuck in Java &lt; 8...
Is there anything new in this talk? He seems to hold it at every conference every year.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bq2if2/no_main_classes_found_error/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm not sure how since yield is used for very different purposes in C#. It will cause confusion.
(heh)
Hi thank you for your reply,so if I am understand correctly. I will have a alb where https will be terminated and then the request will be forwarded to the ec2 instance over http. Do I need to add any configuration to my spring boot app for this?
It’s a solution for a problem you wouldn’t have if you wouldn’t use Spring ;)
Care to elaborate?
I'm not a .NET expert, and would suggest checking out some of those subreddits. But I believe that the .exe files it compiles are roughly equivalent to Java executable JAR's. They depend on the operating system having a .NET VM installed (which Windows does). But unlike JAR's, they are not simple ZIP archives, and should meet your needs for code obfuscation.
Well, those things work in fibers just as well as they do in threads -- but no better, which is the point. Ultimately, we'd like to rework the native locks in the VM so that they can be owned by fibers, but that will take some work, so one of the things we want to figure out is whether releasing Loom before we have native lock support is enough for many people to enjoy the benefits. So the current limitations are those: if you block (on IO or `wait`) while holding a monitor, i.e. while inside a synchronized method or block (which you have to be to call `wait`), you will block the underlying kernel thread rather than just the fiber, reducing the scalability of your system for the duration of that block. The same thing happens if you block while there is a native frame on the fiber stack (i.e. you make a JNI call that blocks, or a JNI call that calls back into Java and then you block). So the thing you want to avoid to get the full benefits of fibers is to do blocking IO operations inside synchronized methods/blocks. Using synchronized methods/blocks to guard in-memory operations is fine. Guarding long operations with java.util.concurrent locks or other classes is also fine, as those now only block the fiber rather than the thread. Most IO operations are now fiber-friendly. One issue is file IO, which is hard to do in a non-blocking fashion on most OSes (Go has the same problem). Another "fiber unfriendly" operation is DNS lookup, as it uses a native library. We will need to replace that with a Java implementation to make it fiber-friendly.
* https://en.m.wikipedia.org/wiki/Reactive_programming * https://projectreactor.io/ * https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html
I'm just happy they moved away from the dead character backtick.
Not a lot. It's the usual framework vs. library debate. It's layers upon layers of abstractions with sometimes questionable benefits.
Is it? Serious question: have you read the article? You can use the programmatic APIs just like you’d use the library. However, Spring users are used to an annotation based programming model, that has been in place for non-reactive APIs for ages and is now available for reactive ones as well. So I don’t quite get what exactly you criticize. That we provide what users expect? That you have choice which way you’d like to use reactive transactions? Or is it more like: I don’t like it, so it’s got to be bad?
How does a reactive relational database driver work with an ACID-compliant database? With eventually-consistent NoSQL databases, the driver can stream query results or inserts before the query or insert has completed, because it doesn't have to worry about transactional consistency. But with a relational database system, the underlying engine does care about these things. So does this driver actually wait for the transaction to complete, and THEN stream the results? If so, then is there really any performance advantage to any of these next-gen reactive prototype API's? Or is it really more about getting relational database users some experience with an API that looks like one from an eventually-consistent database. It just seems to me that an ACID-compliant database is inherently non-reactive by design, no matter what you do.
Sounds like you are bashing spring regardless of what the article is about, which is spring giving us transaction support in reactive/async flows. That’s not a problem specific to spring, every async code/flow could benefit from that.
That is pretty specific to the way you build Spring apps indeed. You first need to ask the question: what is being transacted? Because, frankly, this stuff is just brittle: "Spring distinguishes (based on method return types) which type of transaction management to apply: Method returns a Publisher type: Reactive Transaction Management All other return types: Imperative Transaction Management" I wish the good article would also mention something about rollbacks, which are fundamentally incompatible with reactive flow system.
I know, Spring is the holy cow. It can't possibly be bad. All I'm saying is that adopting any framework is a risky undertaking. The amount of 'magic' one doesn't have any control over can bite you in the ass in the worst possible places - like in production. To your point about 'you can use it like a library'. From the fine article: "Reactive Transaction Management ships with Spring Framework 5.2 M2, Spring Data MongoDB 2.2 M4, and Spring Data R2DBC 1.0 M2 milestone releases." - where's that library again? With reactive flows in particular, having DB transactions scattered all over the place, potentially in several threads is a bad, bad idea in general. That is mixing responsibilities in the worst of all places with a largely undefined rollback behavior. Yes, I don't like it. I hope I could illustrate why I don't.
lol. sure. explain away.
Exactly the same pattern applies as in synchronous drivers. The difference is that R2DBC drivers do not block a `Thread`, only the connection. &gt;So does this driver actually wait for the transaction to complete, and THEN stream the results? No. You start a transaction, run your queries, consume results. &gt;If so, then is there really any performance advantage You don't do reactive for performance/throughput, you do it for scalability. Reactive drivers also can apply smart prefetching. Blocking drivers block the underlying connection and `Thread` until the database replies (see [https://speakerdeck.com/mp911de/reactive-spring-workshop?slide=13](https://speakerdeck.com/mp911de/reactive-spring-workshop?slide=13) for a diagram. The white areas between requests are the latency). A reactive driver built with Reactive Streams has a notion of backpressure – it knows the demand of its subscriber – and can apply smart prefetching. Knowing how much data a client wants allows the driver to fetch the next chunk of data while the application processes the previous chunk of data(see [https://speakerdeck.com/mp911de/reactive-spring-workshop?slide=51](https://speakerdeck.com/mp911de/reactive-spring-workshop?slide=51) for a diagram where latency is minimized). R2DBC drivers don't change how SQL databases work. They just help to [get rid of thread congestion/blocking I/O](https://speakerdeck.com/mp911de/reactive-relational-database-connectivity?slide=29). You get the exact same database behavior: * Database supports MVCC: Retrieve responses without blocking the **connection.** * Transactional locks: A query returns data after a transactional lock is gone. Until then the **connection** is blocked. All this happens on I/O level and you get consistency guarantees according to the isolation level you've set. A reactive driver does more work with fewer threads.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's close to how it's used in Scala. "yield" from a for comprehension. I'll be there's much more Java-to-Scala crossover than C#-to-Java
&gt;Yet you seem to miss the "implement your domain logic" part. I am not missing anything, maybe you are. &gt; And you replace it with "in Java". Have you noticed the subreddit you are writing in? &gt;IMO, the domain logic is generally the best part to use pure functions. You generally don't want side-effects in the same place as your domain logic. That may even be true in general, but not always. In some cases you will have requirements that make it painful or impossible to implement pure functions.
IMHO I prefer IntelliJ. It's one of the top IDEs for Java (besides Eclipse and Netbeans), and if you decide to develop android app some day, the official IDE (Android Studio) is built on the same platform that powers IntelliJ so you have little switching cost. I was involved in full stack development from time to time (javascript, html, java, Kotlin, scala, python), and I'd say the paid IntelliJ version provides an overall good support on these languages.
Features take time to design and implement. I highly doubt companies will stay on 8 forever.
That’s a lot of buzzwords in one title.
I turned off auto save first thing.
That’s a mouthful 😳
NetBeans manages to do the same job better while being simpler. Eclipse's plugin architecture feels like exposed internals at every point. It's demoralizing.
Those are the technologies included in the template. If you're looking for a template I reckon you're going to google a phrase similar to that.
\&gt; this will be resolved soon when reflection is reimplemented in Java Can you give a little more detail on that?
This seems like premature optimization.
No thanks
Why so rude?
I’m not too sure, even slashing a second to a 1million dau service adds up
So...you're trying to SEO with inbound links? Because we don't take well to that around here.
needs more SaaS cloud content big data blockchain disruption
?
Could you explain the secrets file further?
Sure! Modern applications are typically written to be state independent on the code level. In the infrastructure you can then inject a list of secrets. A secret is typically an environment variable for values such as timeouts, connection credentials, API keys, and other values that you'd want to customize between production/staging/developer/qa/local environments. The application can read this in and use this instead of hard coding values that may change per environment. For example, if I'm testing a new version of my application, I probably want to connect to a test database rather than the production database in which real users are using my application, right? Well I can have a environment variable called DATABASE\_HOST that I can change per environment. Compose will take the secrets.env file and pass each value as an environment variable for your application to read on start up. You can also use this paradigm to work with modern orchestration systems like Kubernetes and ECS.
\&gt; Netbeans or Eclipse? \&gt;... use IntelliJ ... Is this reddit or stackoverflow ?
y not just use application.properties?
I wouldn't use `application.properties` because it is not a portable solution that you can use across multiple languages. Environment variable injection is however supported by orchestration software like Kubernetes, ECS, Swarm, and Compose.
I stopped reading at "download tomcat and". Containers should be saving us from this manual stuff
Perhaps you should've continued to read the README because if you had you would've learned that you only need Docker/Compose to deploy and run the application. If you plan on writing code you will need an IDE or text editor. If you need to debug the application then yes you do need to download Tomcat 9 binary for your host machine to put next to your IDE in addition to the embedded Tomcat that will also run 'remotely' inside of the container automatically. I'll review if I can phrase the README better.
I was quite literally just coming to ask you this question. Thanks for the informative reply!!!
Secrets files should be platform specific. You should not be storing secrets files with your code repository. You would have a \`secrets.env\` file or a script to inject secrets (environment variables) into your the environment of your choosing then boot the application which now has state date associated with it. If you had a prod/staging environment then you'd have a \`secrets.env\` file or some injection method for each environment and it would live there or somewhere else not in your codebase.
&gt; I will have a alb where https will be terminated and then the request will be forwarded to the ec2 instance over http Yes. &gt; Do I need to add any configuration to my spring boot app for this? No, but you'll want to learn about the [X-Forwarded](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html) headers that ALB uses. Specifically, X-Forwarded-Proto, so you can make sure you enforce that the client is talking to the ALB via HTTPS. You can just configure your ALB to not listen on port 80 at all, but it's better to double-check that from your Spring app, just in case of mis-configuration.
But devs need everything to be simple and easily accessible! /s I'm growing very tired of having to calmly explain to devs why checking this type of stuff into source code repos is a bad idea. Awesome info. Thanks for your help!
It looks like in your [submission](https://www.reddit.com/r/java/comments/bqcnju/what_do_you_think_of_elegant_objects_book/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I’m not exactly sure why having “buzzwords” in your title is getting you so much hate, but I see nothing wrong with this. Obviously I’m not speaking about this whole sub reddit but I think most subscribers here are just entry level users of java and don’t quite appreciate people making things like this simply cause they barely understand the technologies involved themselves. We probably shouldn’t be discouraging people from making useful software, but what do I know I guess.
It's sensible optimization, why would you wake up every thread, when a single one can be awakened.
I did not read everything but why would you need separate Tomcat if you are using Boot? You know you can debug Boot apps too no need for local tomcat. Why are you downloading gradle inside docker use gradle wrapper.
may I ask, how come the project is not reactive? (since as far as I got it is blocking...)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Add some application.yml and make some test
I believe that casting is ugly and especially casting to a super type shouldn't be needed to just call ca normal method. The type safe way to do this would be an "Equalable&lt;T&gt;" interface similar to Comparable&lt;T&gt; and have that define the equals method and not Object. Of course that wouldn't be backwards compatible at all and it would complicate things a lot if you always need to ensure that your generic types implement Equalable in order to be able to use equals. I believe the current solution is the best. And I especially hate in Kotlin for example that I can only use the == operator if the types match. That often leads to ugly upcasting as in your example code.
Is the docker container still exposing all the available RAM to the JVM by default? you might want to add some sensible JVM memory flangs if that is still the case.
java 11 or 10 introduced container awareness to the jvm, where it will detect the program's running in a container and use the container's memory limits rather than the machine's
I tried to use NetBeans first, downloaded the version whichever was current after moving to Apache and it barfed when I tried to create a project on `D:\` drive. Then I thought to myself that if such a simple thing didn't work/wasn't tested, the rest is also probably buggy as hell so I've gone for eclipse.
You go for a Java backend job and you don't know anything about Java threads? That's pretty basic stuff.
Reflective method invocation is currently implemented in native code, and after some number of calls a class is generated. Instead, it could be implemented in Java using MethodHandles (what matters to Loom isn't if some native code is used during the resolution of the method, but only if native code is used to make the call).
in most cases i've seen. reactive programming is overengineering for a problem you don't have. It's also a maintenance nightmare. see: https://www.youtube.com/watch?v=5TJiTSWktLU
&gt; why would you wake up every thread, when a single one can be awakened The traditional reasoning is to avoid deadlock. Because threads are awoken randomly (`notify` instead of `notifyAll`), if the JVM happens to pick a thread that sees that the condition is not met and goes back to sleep, all the other threads will remain asleep, causing a deadlock. If you wake up every thread (`notifyAll`), each thread will race to acquire to lock. If the winner sees that the condition is not met, it will go to sleep and release the lock, allowing the other waiting threads to get a chance at acquiring the lock, avoiding deadlock. The code in the article matches the example in the JavaDoc for [Condition](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Condition.html), so I don't doubt it, but still I wonder if this code is proven not to deadlock.
You can still use Java outside of IntelliJ IDEA without using the installer. You'll just need to set it up yourself: - Add `JAVA_HOME` environment variable (for various command line tools) - Add `$JAVA_HOME/bin` to `PATH` environment variable (so you can use `java`, `javac`, `javaw` in the command line) - Associate `.jar` files with `javaw.exe` (so you can run Java-programs by double clicking them)
Thank you, that's very helpful, especially with your little explanations what each setting does. Is the JAVA\_HOME variable something that is the same for each tool that uses it? In other words, is it something that is defined once and then just works?
Yes, it's used by tools that not only use the `java`/`javac`/`javaw` executables, but also directly utilize some other contents of the JDK directory (outside of the `bin/` subdirectory). The most important ones would be build tools like Maven or Gradle, which you can use to manage your dependencies and build your projects independent of any IDE like Eclipse or IntelliJ.
So not applicable in this case, the condition queues are separate, if the thread is woken up it would be on right condition, deadlock isn't possible here.
That's what I was alluding to. People trained to use `notifyAll` might be tempted to use `signalAll` because of the traditional reasoning. In an article comparing the two implementations, the reason for waking up all the threads in the traditional implementation might deserve a mention. Otherwise, someone might think it's a dangerous optimization.
So an api reference?
The API reference (like the one I linked) isn't a comparison...
Thank you. So to me, it seems that letting the installer set the Path and JAVA\_HOME variables is a reasonable setting for someone installing the JDK the first time, even if he wants to use IntelliJ IDEA (which needs neither of them).
Yes, just as reasonable as doing it yourself. Even if you do it manually, it's probably a one-time thing.
Added an Edit section making this explicit, I thought this was way too **obvious**.
you can inject environment variables into application.properties, making it supported everywhere. It's also the standard way of configuring spring boot applications with way more advantages such as profiles, configuration based context inject, fallback and many more! It is a spring specific solution so if you have applications in other languages/frameworks you'll need to do something else but i'd much rather use something specific and great than generic and average.
ya that all comes with spring boot you dont need to download it separately just to debug.
I would be very careful about what you call obvious. For example, here's a long [coding standard](https://wiki.sei.cmu.edu/confluence/plugins/servlet/mobile?contentId=88487729#content/view/88487729 to using), describing how to use `signal` *securely*.
I like it, thank you
Glad you liked it, you may Book mark the page for more tutorials in future :)
Thanks for doing this. How long have you worked with Hibernate?
The 2 bullet in advantage of using hibernate is misleading. Hibernate can never be faster than pure sql calls. Saying it is relatively fast is incorrect. You may be speaking on the first level cache. The first level cache has nothing to do with speed of retrieval. Caching is introduce into applications because on IO. Reducing the amount of IO increases the performance of an application. Pl/sql can be very help in reducing IO. Pl/Sql plus oracle’s program global area memory management is a better application development approach when performance is of concern.
\&gt; ***Lightweight*** By comparison to what?
This tutorial is based on 3.11. As way of a helpful update Hazelcast 3.12 introduced a CP based subsystem with FencedLocks. 3.12 also supports JSON. [https://docs.hazelcast.org/docs/rn/index.html#3-12](https://docs.hazelcast.org/docs/rn/index.html#3-12)
This seems like a good library. Without stealing your thunder, I wonder could anybody else recommend other Java libraries that focus directly on CQRS patters? To the original poster, what made you write your own? Did you search and find nothing available?
How many more of these JPA/Hibernate tutorials do we need? Vlad Mihalcea used to prolifically post [tutorials](https://vladmihalcea.com/tutorials/hibernate/).
1) lightweight — what is your definition of lightweight? Because lightweight is something I have ever heard attributed to hibernate. 2) fast performance — Fast performance and hibernate do not belong in the same sentence together. Sure it is possible to make hibernate perform as fast as hand written SQL but the fact is that the learning curve is so high, and there are so many gotchas, that in practice this never happens. Developers are lazy and do t pay attention to the SQL hibernate is generating. Hell, most developers don’t even know you aren’t supposed to use entities for read-only queries. 3) cross database support - this is the only realistic reason to even consider using hibernate 4) automatic table creation - does anyone actually use this outside a quick prototype app? If you want good DB performance and want to use good DB practices you better design your tables first.
This is really about exploiting non blocking IO from the perspective of your application as it communicates with a database. This does not make your application faster or your database eventually consistent or less ACID compliant. You are just trading increased throughput for increased latency by multiplexing IO operations on small number of threads. The cost of reactive approach is a greater pressure on garbage collector. As a result, you are reducing the overall OS overhead that comes from thread management but increasing possibility for garbage collection pauses. Whether this approach gives you any benefit depends on your workload. For example, if you use your relational database as append only linear storage, you will probably not see much benefit from this. This is because with linear storages, like tape drives and such, you'll tipically have one thread using the device anyway (say you have one tape head). With blocking IO, you get back pressure for free since it's provided by your OS scheduling infrastructure.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bqgzaa/what_do_you_think_of_elegant_objects_book/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have started almost 3 years back
Points noted and thanks for valuable feedback. Shall ammend the post
Thanks for the valuable feedback. I shall update and ammend the details
It looks like in your [submission](https://www.reddit.com/r/java/comments/bqhdfr/what_do_you_think_of_elegant_objects_book/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Intellij IDEA makes you download a local binary if you're connecting to a remote Tomcat instance.
Found the bug, [https://bugs.java.com/bugdatabase/view\_bug.do?bug\_id=6824466](https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6824466) &amp;#x200B; Thanks
There's no seperate JRE any more, point it to the JDK_HOME.
Can you support your claims against Hibernate with any formal articles published by a trustworthy resource? Either way, the strikes against Hibernate are far outweighed by its advantages...one of which you begrudgingly conveyed in your second point.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What is JDK\_HOME supposed to be the bin file inside jdk?
Oh... do you also think Spring Framework or Linux or any open source software are solely built by programmers on their free time for fun?
Sorry, I meant JAVA_HOME. It's one directory above bin
there is no java_home directory in java version 11.0.3
It's not a directory but a common environment variable that could be set if programs need it. For now, use the JDK top folder, it usually has a version number in it
https://docs.docker.com/config/containers/resource_constraints/ Yes, by default a Docker container can allocate all available memory or CPU from the host machine. I recommend using a container orchestrater to configure your application's resource needs in an production environment. if you don't need that type of control then Compose should work just fine for you.
 [https://blog.docker.com/2018/04/improved-docker-container-integration-with-java-10/](https://blog.docker.com/2018/04/improved-docker-container-integration-with-java-10/)
do i create a new environment variable or append it to the path variable?
Are the two threads reading from the queue performing the same task or do they both need to act on each entry? Assuming they are performing the same task, I would say a BlockingQueue. The only downside there is that the threads reading from the queue would need to be popping entries off the queue to get the benefits of the BlockingQueue data structure. If you really need to keep all the entries in the queue even after they've been worked on (which I don't understand why you would), then you would likely need to create your own data structure to handle this. I would basically make a class that stores a linked list and tracks which element is being worked on. Then make a synchronized method in that class that will return the next value to whichever thread is requesting the next entry.
a new one. Additionally, you can append the path to the bin folder to PATH so you can invoke java from the command line
You have no idea how much you just helped me. thank you so much random user on reddit. if i see you im gonna give you a big hug man 😭😭😭
Lock, read, unlock with a re-entrant lock or use BlockingQueue.
Thanks! Yes the two threads do exactly the same thing and they aren't allowed to change the queue. It is an assignment I was given to learn Java so it isnt something that will actually be used.
&gt; I did not read everything but pikachu_surprised.jpg &gt; would you need separate Tomcat if you are using Boot? Intellij IDEA (and some other IDEs) require an external copy of Tomcat if you're connecting to a remote instance of Tomcat to debug. The embedded Tomcat running inside of the Docker container locally is considered remote in this scenario. &gt; Why are you downloading gradle inside docker use gradle wrapper. As explained in the README that you did not read, the goal of this project is to be portable and turnkey. A multi-stage Docker build it utilized in order to provide maximum portability between local development and cloud deployment. With this method, you can utilize automation CI/CD pipelines like Jenkins, CircleCI, or Travis and automatically create images to be shipped into a registry like AWS ECR, Nexus, or Artifactory and deployed on-demand.
Got it. Then I would recommend you look at the java.util.concurrent package (this package includes BlockingQueue). 1. It's good to know what concurrent data structures Java has baked in. 2. You may find an appropriate data structure in there. 3. If you need to build a custom data structure, it would be a good idea to look at how classes like BlockingQueue implement the thread management aspect of this problem.
You might want to check out [RxJava's ReplaySubject](http://reactivex.io/RxJava/2.x/javadoc/), it sounds like what you want.
Hibernate was definitely considered lightweight compared to the J2EE EJB stuff that existed at the time hibernate came out.
haha, not exactly) I'm usually the interviewer :)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/bqioyu/a_java_module_threw_classnotfoundexception/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
i knew it was one or the other, I was just too lazy to look up which :)
Avoid Hibernate if you can. I was once a Hibernate proponent, but my opinion of it has changed over the years. It’s too heavy weight.
Why should we not use entities for read only queries?
I work with Spring Framework on Linux. Not trying to say opensource is bad or something, I love it. But I'm ready to pay for the best tool to do my job. It's more like photoshop vs gimp kinda thing if we are talking about IDE's
It looks like in your [submission](https://www.reddit.com/r/java/comments/bqjnic/is_there_a_reason_javas_access_modifiers_arent_in/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;cross database support - this is the only realistic reason to even consider using hibernate That's not the only reason, really. This, big abstraction layer (especially if using spring data, for example) provides ease of use, saves a lot of time in development, provides an easy way of doing lazy loading and with this, allows to easily map large tables with multiple relations quite efficiently, provides database validation. And it's only peak of the iceberg. Saying that there is only one realistic reason, being cross-database, is just delusional.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bqjsit/java_access_modifiers_syntax_vs_c_syntax/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
ah okay, I thought you had failed several interviews because of it :). As someone who using Java, do you prefer the synchronized Atomic* classes or the volatile keyword?
And what do you recommend as an ORM?
Sorry but you can debug Spring Boot applications with IDEA without Tomcat instalation. Actually only thing you need to do is run java in debug mode and then remotly connecty to it. And you know Spring Boot bundles embedded Tomcat with it. &amp;#x200B; For compiling java docker is only overhead because java builds exactly the same on all systems if you configure maven or gradle. Using docker to deploy is OK but that is only for deployment in development you should still have all the tools locally installed. &amp;#x200B; For me it is better to leave image building for the CI server.
From Amazone review: &gt; The author presents his interpretation of OO which he claims stems from a couple of books (8) listed in the bibliography. He did not do his history lessons, however: throughout the book he criticizes Java, C++ and other OO languages wishing for a pure OO language where, for example, even “if” statement would be an object. Not knowing that such language already exists – Smalltalk – he started working on his own pure OO language. In other words, **the author is talking about “true” OO programming without ever having programmed in a true OO language**.
No it does not use this command line and then use remote debugging (When you use installed Tomcat IDEA does the same thing) &gt; \-agentlib:jdwp=transport=dt\_socket,server=y,suspend=n,address=8000
&gt; Sorry but you can debug Spring Boot applications with IDEA without Tomcat instalation. Actually only thing you need to do is run java in debug mode and then remotly connecty to it. And you know Spring Boot bundles embedded Tomcat with it. Community feedback is welcome. Feel free to submit a pull request and contribute to the project.
Community feedback is welcome. Feel free to submit a pull request and contribute to the project.
Topic is so commonplace that it is covered even by: https://en.wikibooks.org/wiki/Java_Persistence ))
Yes, entity mapping for query results saves a lot of efforts. But I doubt cross database support. They don't have generalized adapters for ID generation. We migrated from Oracle to Postgres and hit 3 major issues, lost 4 man-days.
This doesn't sound like it needs any locking (only waiting), the 'consumers' read a read-only string from an append-only queue. Each consumer need only know the position of the last String they'd processed, or have a mechanism to be notified when there's a new String to process (if they can be sure to process each one before a second is added). Either by polling or notification, the consumers will run otherwise independantly of each other and the producer. I suspect you also meant the program should end once the consumers are done, not just the producer having put the last String on the queue, probably never to be consumed.
Entities are loaded into the session and tracked for changes until you flush or clear the session. If you're never going to change the entity, that is a huge waste of memory and time. You can tell Hibernate to create a read-only projection into DTOs, which aren't loaded into session and are immediately available for garbage collection after you're done with them.
jOOQ is much better :)
I completely agree. It doesn’t even compare to something like jOOQ.
How is that argumenr for Hibernate in an article written in 2019? Especially since JPA is the JavaEE standard that long ago replaced entity beans.
There are a lot of folks dumping on OP's efforts to launch a tutorial. &amp;#x200B; This is just trolling for the most part, even though there are some posts that have merit. &amp;#x200B; If you don't like the tutorial, STFU and move on.
Just addressing the incorrect assertion that hibernate was “never” associated with lightweight
Care to expound the virtues of JOOQ over Hibernate. I have never heard of JOOQ. I have heard A LOT about Hibernate.
&gt; Saying that there is only one realistic reason, being cross-database, is just delusional. Have you heard the expression "once burned, twice shy"? Many people who hate on Hibernate now were probably won over in the past by the same kinds of arguments you are making. But Hibernate is not easy to use efficiently, and the initial time savings made early in the project might be traded for much more time spent on development later in the project when you debug and fix performance problems, when you have a lot less time to deal with those issues. You need to use Hibernate with discipline, always checking your queries, carefully designing your entities and fetch graphs to efficiently query and load data. Many projects don't do all of this preparation work early in the project, so that they get burned by Hibernate later in the project. Thus, they become critics of Hibernate who say that if you have to do all this work to use Hibernate correctly, why not write manual queries and use libraries for the features you want. Then, when problems do occur later in the development cycle, it's obvious how the persistence layer works, and you don't have to scour StackOverflow, blow up your logs by logging Hibernate in trace mode to get a clue about what is going wrong or worst case single-step through the Hibernate source code. At that point, you might be so far against Hibernate that you would write it off for any purpose but cross-DB support.
Oh boy. I've been been in mixed paradigms for quite some time, so quite interesting to read "pure" evangelism. There are not real news there, most of the points are good, and been raised before! But nice to see it expressed in one place, in a concise text. Where I'm struggling, is with "no setters". I followed the article links, and IMHO, the use of the visitors pattern (called printers in the linked resources), is just inverting getters (push vs. pull) The logic is the same, there needs to be a contract about which attributes are available/needed. The pragmatic part of me, who want's to re-use, as a much as possible, for example templating languages, says that getters are fine. However, If a *page* or *document* is expressed as a class, and encapsulates the rendering, the visitor pattern would work. That said. On getters the approach off for example renaming *getBall* to give(), is just naming. Any zero argument method that return a value is a *getter*. With the fancier naming, we just made it complicated when using the object with most templating engines (back to my thoughts above). Just wanted to share some thoughts on this. "Clean" code and productive developers, is something on my mind these days, thank for reading :).
With jOOQ you get to access the database by writing standard SQL statements in typesafe Java.
Even then, Hibernate was heavyweight (and worse, required mapping XML files), but it was less heavyweight than a full app server, since J2EE was not modular. So, I think it is safe to excuse those who say that Hibernate ever being considered lightweight is marketing fiction.
JOOQ isn't standard SQL, it is a DSL that closely matches the semantics of SQL, but generating DB specific SQL.
I did not know about JOOQ until today, thanks for that. &amp;#x200B; I also noticed JOOQ is not Open Source...but, at the same time, it is not that expensive either.
For all intents and purposes it is like writing standard SQL.
It is open source, but from what I understand from the posts by /u/lukaseder, the author of JOOQ, that only extends to open source databases. You need a commercial license for proprietary databases.
Well yeah, that's by design. But, how often to you ever write "standard SQL" without dealing with DB specific details, from mundane things like paging to more exotic things like analytic functions.
By “Standard SQL” I just meant that there isn’t an additional ORM language on top that tries to hide the SQL. I think we agree :)
The license can be found here: https://github.com/jOOQ/jOOQ/blob/master/LICENSE
I read a [detailed review](http://zvrba.net/articles/eo-review.html) of the book awhile back. The reviewer thinks a lot of Yegor's principles are overly dogmatic, contradictory and unsound. Overall, the review can be summarized as an expensive waste of time.
Have a look at reactive streams. Standard: [reactive-streams.org](https://www.reactive-streams.org/) Interface: [Flow](https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html) Implementations: [ReactiveX](http://reactivex.io/) / [RxJava](https://github.com/ReactiveX/RxJava), [Akka](https://akka.io/), [Reactor](https://projectreactor.io/)
I dont see why they dont just use return or break. I agree that if java ever does do a coroutine-y or generator-y or comprehension-y like thing, the familiar `yield` keyword will be used up in something unrelated...
Hopefully you’ve figured this out by now, but your program exits when the producer finishes because the producer is in the main thread and when the main thread finishes your program exits. You should wait for your consumer threads to finish via join() or through a Future (depending on how you are starting your threads)
The program should only stop when all of the non-daemon threads have finished running. Even if the main thread is complete, the program will run until the other threads complete as well. Granted, with this program, the producer thread would need some way to notify the consuming threads that they should not wait for entries into the queue.
Nicely put review. Thanks!
He actually know about smalltalk, and he mentioned it's purity several times in some of his videos. I don't think we should use java/c++ as examples because they're the dominant semi-OOP languages. We can't do everything with just one language (old smalltalk).
Please see my other comment on another reply regarding this review.
Had you considered just reading the install guide?
Pure OOP can mean a pure OOP programming language like Smalltalk, or pure OOP can refer to a way of programming that has nothing to do with the programming language. Smalltalk is a pure OOP language, in that *everything* is an object, including `Boolean`, and almost everything is defined in terms of method calls, including control structures: factorial: n (n = 1) ifTrue: [ ^1 ] ifFalse: [ ^n * self factorial (n - 1) ] With `true` and `false` just being subclasses of `Boolean`: Boolean subclass: 'true' ifTrue: trueBlock ifFalse: falseBlock ^trueBlock Boolean subclass: 'false' ifTrue: trueBlock ifFalse: falseBlock ^falseBlock Obviously, that's not Java. What Pure OOP means as a programming paradigm is that objects hide data and the only way you can interact with an object is through behavior. You can implement this pattern in any language, even C. That's why purists say getters/setters are against "pure OOP", because they expose the data encapsulated in the class. Yegor takes this to the extreme by suggesting that objects should even control their own presentation, so that the data is perfectly hidden. That would make MVC evil, in Yegor's book.
Sorry my reply had a serious typo in it. I edited it.
&gt;What Pure OOP means as a programming paradigm is that objects hide data and the only way you can interact with an object is through behavior. You can implement this pattern in any language, even C. That's why purists say getters/setters are against "pure OOP", because they expose the data encapsulated in the class. Yegor takes this to the extreme by suggesting that objects should even control their own presentation, so that the data is perfectly hidden. That would make MVC evil, in Yegor's book. What about data models that don't have any behavior?
That isn't OOP, according to OOP purists. If you go by Yegor, those are evil. According to Uncle Bob, another OOP guy, they are totally fine, as long as you don't mix them up, in what he calls the [Data/Object Anti-Symmetry](http://jd-syntropy.blogspot.com/2009/01/dataobject-anti-symmetry.html): &gt; Objects expose behavior and hide data. This makes it easy to add new kinds of objects without changing existing behaviors. It also makes it hard to add new behaviors to existing objects. Data structures expose data and have no significant behavior. This makes it easy to add new behaviors to existing data structures but makes it hard to add new data structures to existing functions.
You could adapt the code in the sample for [Condition](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Condition.html), which shows you how to implement a queue.
His example of making the `Book` handle it's database transactions kinda makes sense in his own way, like views that draw themselves on a canvas. But this model is kinda awkward, I mean the book object needs to be able to display it self in an android recyclerview. So much for Separation of concerns/?
His solution is essentially the visitor pattern (which he unconventionally calls `Media`). You could have `Book` accept a `BookVisitor` interface instance, and that `BookVisitor` interface instance could construct the Android RecyclerView. Boom, separation of concerns. This is essentially what the visitor pattern is for. Or, as one of the commenters suggests, just return an immutable DTO instead of the convoluted indirection. The visitor pattern can be really hard to follow.
I've recently interacted with the visitor pattern, and I remember saying "yeah I'm not doing that". Good thing that dynamic dispatch is quite easy in kotlin, It was my goto when my problem couldn't be solved without The visitor pattern. The fact that purity (in any paradigm) leads to such difficult patterns makes me stick even more to multi-paradigm archetuctre; I've recently learned about haskell lenses which supposedly achieve data polymorphism through composition. Which was quite verbose and inconvenient.
The nice thing about the visitor pattern is that is is statically dispatched. Dynamic dispatch is significantly slower. But, that's also another purity trap. Some people will not accept dynamic typing at all, and will force things to be verifiable by type system no matter how awkward it makes the code. Lenses allow you to define traversals through data structures instead of nasty destructuring, which can be verbose and inconvenient if elements in the middle are missing. Lenses are like an extremely fancy version of Kotlin's null safe traversal.
btw, Thanks for your comments. It was a fruitful conversation to me.
Sure thing!
Thanks!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Coming from the perspective of a newbie to Java ORM tools (and Hibernate), I think I'm part of the targeted audience of this tutorial. Nice written article, but a few confusions arose while reading it. 1. You listed out a few advantage of Hibernate, which is fine. But how's Hibernate solving problems that existing ORM tools were incapable of? 2. Some styling problems that may decrease the credibility of this article. For example, only the first subtitle of "Hibernate Architecture" has bold font but not for the rest. Also, the graph for ORM tools has a little cut-off at the bottom, which makes me wonder if this tutorial was copy/pasted from somewhere else. Not saying you are, but just makes me inevitably doubt that :) These are little things that aren't central to a tech article but eats away credibility by little bit. 3. The opening paragraph of "Hibernate Architecture" is a little confusing, as it doesn't convince me why I need to learn about its internal architecture. Do I need to learn it to be better at tuning the performance of Hibernate, or just some nice-to-know info? &amp;#x200B; I know writing tech articles are hard, and I'm glad you spent time and efforts for this. Hope my feedback is useful for you!
Can you dump the result of the tasklist cmd?
Here is what I have so far: [https://pastebin.com/J8vaeQiW](https://pastebin.com/J8vaeQiW)
Here's what I have so far, [https://pastebin.com/J8vaeQiW](https://pastebin.com/J8vaeQiW) What do I need to add so I can save the output as a String variable, then run .contains() to check for specific processes?
Check my edit, you're on the right path. You just need to read the result back in and parse it.
ProcessHandle.allProcesses() will give you a Stream of ProcessHandle objects. You can iterate over this and check things like PID and names of processes. You can do things like call killForcibly to kill them etc.
Advice for a newbie: don't use hibernate/JPA. Look to jOOQ or maybe querydsl to save yourself a lot of pain.
Im a newbie to this part of java, do you have any links to consult?
New since Java 9. Good to know! https://docs.oracle.com/javase/9/docs/api/java/lang/ProcessHandle.html
yes i did but it didnt really help with setting up the path
These are some good tips...
How about using JavaSysMon https://github.com/jezhumble/javasysmon
Look at beeeeeefecake's link for the ProcessHandle API &amp;#x200B; [https://docs.oracle.com/javase/9/docs/api/java/lang/ProcessHandle.html](https://docs.oracle.com/javase/9/docs/api/java/lang/ProcessHandle.html) &amp;#x200B; As far as tutorials on it you'll have to find one on google there are a few but not a ton. It's a rather new piece of Java.
Programming help should go in /r/javahelp.
Any thoughts on Apache Cayenne?
No its not. The whole point of the visitor pattern is that it gives you dynamic dispatch on two variables (rather than the normal one).
This was posted 2 days ago..
Nope. Java is single and static dispatch. Java doesn't dispatch on the dynamic type, it dispatches on the static type. That's why you need the [accept method] (https://en.m.wikipedia.org/wiki/Visitor_pattern#Structure) on the visited type to call the correct visit method on the visitor, otherwise known as double dispatch. Only the visited item knows its static type.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bqrjjh/amazon_hiring_challengelatest_19052019/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yeah, 8KiB L1 cache.
I really appreciate your efforts. I am currently developing a [framework](http://openlowcode.com/) making use of javafx, what I need is a stable framework that looks nice, is fast, and allows spreadsheet-like ergonomics. I think javafx is not far from there, and I am really looking forward at the improvements. Especially, I have been struggling with the tableview.
I just looked through my 100K codebase and I do not use Object a lot. Maybe that is because, as a design rule, I do not use reflection. So whatever happens, this does not sound huge to me. Maybe the lower-level libraries would take the hit.
jOOQ is faster (at least closer to sql) and database independent. IMHO the main target of Hibernate is to read and update quite complex graphs of objects.
It's a tool with limitations. I know few people that got 'burned' and the only reason was their lack of knowledge (that includes database knowledge) and 'hacking' approach (not looking for proper solution, just slapping every annotation/config and see what works). If you log queries, check execution times and actually look for a proper way to do things when it's not just one object with no relations, then you'll be fine. There is a reason why hibernate is de facto standard in java world.
I think you're lucky if you only lost 4 md. Do you remember any of those issues? That sounds interesting and would be good to know (beside this ID generation, which if I recall correctly - default is different between different databases and depends on driver implementation).
Hard not to agree here. Seems that people just try to blog anything to get any visibility. &amp;#x200B; There is a great book: High-Performance Java Persistence by Vlad Mihalcea. It good, because it's written by someone who actually knows something in the area.
ID generation has the major issue. Some syntax related issues (easy to list hard to spot): * sysdate =&gt; current_date * trunc =&gt; date_trunc * Double to Integer because Postgres doesn't allow `plus +` with real numbers on dates * Removed @Lob to support `text`
As of JDK 9, with the introduction of the module system, there is no separate subset of the JDK, in the form of the JRE. This is described in JEP 220 ([http://openjdk.java.net/jeps/220](http://openjdk.java.net/jeps/220)). As a replacement, to allow reduced-sized runtimes, you can use the jlink command to build a runtime that only contains the modules required by your application. This is JEP 282 ([http://openjdk.java.net/jeps/282](http://openjdk.java.net/jeps/282)). I wrote a blog post on how to use this for non-module based applications here: [https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4](https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4) It typically makes the runtime a \*lot\* smaller than either the JDK or older JRE.
&gt; It's a tool with limitations And it's not the only tool in the toolbox &gt; Which, is exactly what you described. You missed the point. Some people, when burned by a framework, choose the library approach instead, preferring the transparency of an assemblage of simpler tools instead of the opaqueness of a framework, which even if you use it correctly is still opaque. &gt; There is a reason why hibernate is de facto standard in java world. Why it is the defacto standard ORM. But we're not talking about which ORM to use, but whether to use an ORM at all. There's a reason why people write articles like [ORMs are the Vietnam of Computer Science](https://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/), which indicates that there isn't a consensus on ORMs being the best persistence strategy.
&gt;You missed the point. Some people, when burned by a framework, choose the library approach instead, preferring the transparency of an assemblage of simpler tools instead of the opaqueness of a framework, which even if you use it correctly, is still opaque. *That is a perfectly valid choice*. Never said other tools aren't valid, what I'm saying is that there are multiple reasons to use Hibernate and cross-database support doesn't come near the top of the list. &gt;You mean why it is the defacto standard ORM. But we're not talking about which ORM to use, but whether to use an ORM at all. There's a reason why people write articles like [ORMs are the Vietnam of Computer Science](https://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/), which indicates that there isn't a consensus on ORMs being the best persistence strategy. Hibernate is de facto standard when it comes to connection to database. It can come in multiple flavours (Spring Data, GORM), nowadays it's mostly because spring and spring data. Any other solution just isn't that popular. I've worked in places where there is JOOQ, JDBC templates or just simple driver used and in most of those apps anyway they came together with spring data (perfectly valid tandems), but those just aren't that popular.
&gt; Hibernate and cross-database support doesn't come near the top of the list. Not for *you*. That's the only reason why /u/wildjokers would ever use Hibernate. &gt; Hibernate is de facto standard when it comes to connection to database. Given how strongly held opinions are held for and against ORMs, that cannot possibly be true. You might be speaking from anecdotal evidence only.
I don't have any experience with it. At a glance one upside is the use of code generation over runtime annotations, but a downside is that it still follows the active record pattern which is not ideal for more complex projects. I also don't see anything (again, at a glance) for asynchronous usage, which is rather out of place for something released in 2018.
This has mainly to do with instances of "new Object()" since Object would now be an abstract class. You will still use Object for parameters , fields, return values, ... as you do now. Object \[Abstract\] RefObject extends Object ValObject extends Object
I believe all of then have their own specific use cases :) The idea is to identify them and apply the best solution :)
I'd counter that not adopting a framework it also a risky undertaking. Nowadays I don't really mind which framework that is, just as long as a framework is used. At least then, if there are any problems, you can ask on Stackoverflow, or read the documentation, or pay for support. I've seen a lot of time lost, trying to work with a home-brew framework, made by a developer who has long since left the company, with close to zero documentation and accordingly no help available.
So you give up scalability, but then you become more scalable? How does that work?
Option 3 probably makes the most sense if you want to move into an architecture focused role further down the line. It's also important for developers to be able to take their code to production and have an awareness of all the steps involved along the way (deployments, CI/CD pipelines, levels of testing etc). But like anything, you can always experiment and see what you enjoy the most!
vim ;) No seriously try vscode if you want a one for all. Personally not a fan of eclipse but that is because I am brainwashed by using IntelliJ IDEA for Java. However might be worth a try.
Why don't you use sdkman for installing your JDK? [https://sdkman.io/usage](https://sdkman.io/usage)
big fan of sdkman in general
Search for jobs with java, java react, java aws, and feel out what you wish you could do.
I'm curious... why would every java dev need to know docker?
To be honest, it provides little value add over just reading the Hibernate user manual, which also doesn't have advertisements. http://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html Consider blogging about an unexplored niche, rather than recreating things that have already been done before.
E.g. Docker allows you to set up a developer environment by executing a single command. For example, if in your project you're using OracleDB, MongoDB, Kafka, etc you can setup it in the single docker-compose file. What's more, you need to have only docker/docker-compose installed, each of docker images holds all mandatory dependencies. In my project, I saved a lot of time by using Docker. &amp;#x200B; Without docker, you will have to install all these components separately (and their dependencies) and turn them on one by one. What's more, if you make a mess in these components and want to start from a clean setup, you will have to clean it manually (or at least re-install). With Docker, you don't have this problem because each component runs in an independent container. &amp;#x200B; So I think java devs should have the knowledge to be able to make stuff as I described above. Of course, it's only one of many usages of docker.
AdoptOpenJDK still provides JRE builds. They are provided either as archives or installers (MacOS, Windows). The installation artefacts and how to guides can be found at this page [https://adoptopenjdk.net/installation.html](https://adoptopenjdk.net/installation.html).
took me a good couple of days when to figure this out when i started using sb all those years ago
In terms of "risky" long-term support, the fact that we're getting new builds of Netbeans is a small miracle after so many years of neglect. As far as JetBrains eventually deciding to drop support for their flagship and most profitable product: 1. If that ever happens, it would probably be because the naysayers were right and Java was dying after all. 2. The core of the product is open-source under the Apache license, and its market share dwarfs everyone else now, so it's an even safer bet than Netbeans that someone would take up the mantle. 3. Compared to every other programming language out there, the prospect of learning a new IDE or editor every decade or two barely even counts as a "risk". The greater risk is that your ecosystem is so frozen and stagnant, the world is moving on from it.
So someone in Debian uploaded the 11.0.3 build to Sid (the development version) on the 27th February. As this isn't going to be used on production boxes this isn't an issue. (If you use Sid on a production box, you should know what you're doing.) The issue is that someone decided to upload it to to Stretch backports on April 1st. This absolutely should not have happened. Curiously, this version wasn't even the most recent version in Sid (which was 11.0.3+4-3 at the time). * https://metadata.ftp-master.debian.org/changelogs//main/o/openjdk-11/openjdk-11_11.0.3+1-1~bpo9+1_changelog * https://metadata.ftp-master.debian.org/changelogs//main/o/openjdk-11/openjdk-11_11.0.4+2-1_changelog
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That's why you need to set this application property: spring.jpa.open-in-view=false
You can learn a bit about each of them to decide. It won't hurt to learn some react and aws, other than in time investment. I've also found that learning the basics of react well enough to put something together than works takes only a few weeks. React is pretty easy to learn. You could probably get the basics of react and aws down in a month. Then figure out which one you like best.
But someone who *made* the build gave it a release version number; that's also an issue.
You could just use a synchronized ArrayList, if you do not want anything removed. Queue is useless here.
&gt;but I'm not sure if it's pragmatic when it's dogmatic, I can't say it's pragmatic. I personally would not want to maintain that kind of code (looking at the examples). It's so alien compared to what you see in the wild, that you _will_ lose time. Additionally, let me be skeptical about producing better quality code.
They probably should have given it a 11.0.3-0.... to indicate a non-release build. I'm not sure why it has a *+N* release number after the Java version.
Sure, but what can you do when you are not using docker? Don't get me wrong, I agree that Docker is useful and everything, but a lot of Java developers which I know don't use Docker, or hate it because some reason. I personally use Docker only at home to play with it, but people and company avoid Docker like it's a plague.
So they have to play around with above stuff manually, or they didn't have an opportunity to use Docker, but I think it mostly depends on project type.
&gt; Dynamic dispatch is significantly slower. In a jitted language it's not even true.
That's correct. The jOOQ Open Source Edition (ASL 2.0 licensed) supports only open source databases: https://www.jooq.org/legal/licensing#databases
We're working on an actual SQL dialect that implements as much of the standard as possible in its external DSL form. You can play with it online here: https://www.jooq.org/translate It's already available through jOOQ directly, via [`DSLContext.parsingConnection()`](https://www.jooq.org/javadoc/latest/org/jooq/DSLContext.html#parsingConnection--), but currently, that's also work in progress.
2 and 3 if possible. Learn to deploy your containerized react and java services to aws
IntelliJ &gt; Netbeans &gt; Notepad &gt; Garbage &gt; Eclipse
&gt; AdoptOpenJDK is working with the Docker folks to find out who is providing the 'official' openjdk builds there (we're also not sure who's currently providing that openjdk) I find this point later in the discussion quite interesting, does really nobody in the openjdk team know who makes the docker image? I wonder how many cloud processes runs of the image provided by this anonymous hero.
if you're interested in getting into architecture, front end stuff doesn't seem like it'd be worthwhile. Learning more about Java (as you stated it) would be good, but you could learn the same sorts of things in most modern languages and get the same benefit to your ultimate goal. Devops seems to be more what you want, but software architect and system architect are different things. First is more about the code you (and your team) will be writing, and the second (what you actually stated) is a lot more about putting tech pieces together (frameworks and platforms). Frankly, I'd say pick your language of choice and pick a framework and learn them well for the next year. JAVA+Spring is good. Learn multithreading and DAOs and services. You may want to dabble in other things like hosting services or containers along the way, but I'd advise not switching fully to that stuff until you've got a good handle on the other first.
Better yet, use QueryDSL or JOOQ instead of JPA. JPA is shit.
A great answer was given by /u/_____dban_____-_ and to add one more point to his answer when you query an entity you get all fields returned whether you need them or not. For best DB performance you should always only return the columns you actually need. A DTO projection lets you accomplish this. For read-only queries you should be writing HQL/JPQL to return the columns you actually need. Don't take my word for it Vlad Michaela literally wrote the book on high performance hibernate (mostly an oxymoron) and he says the same thing (https://vladmihalcea.com/the-best-way-to-map-a-projection-query-to-a-dto-with-jpa-and-hibernate/) "As previously explained, fetching entities only makes sense if you plan to modify them. If you are only interested in a DTO projection, it’s more efficient to select only the columns that are really needed by the caller."
But not more lightweight than just using the existing abstraction for querying a database i.e. SQL.
I have been using Hibernate since 2005 and I assure you it was never considered lightweight.
Your assertion that it saves time in development is totally false. It most certainly does not, in fact it increases time of development because of having to research all the issues it causes. If you say it is saving you development time then you are most certainly using it wrong.
Thank you! What made me write this is due to the complexity of current CQRS frameworks in Java. Most frameworks incorporate event sourcing and DDD concepts into them whereas I only need CQRS.
Why exactly is JPA shit?....
Well, from the Jenkins Dockerfile, &gt;FROM openjdk:8-jdk-stretch That's a lot of people.
When you know what you're doing - JPA is very good. When Spring decides to fetch your data behind the scenes without you knowing, thus creating N+1 query problem, then its shit.
Isn't that kinda the docker philosophy tho? The number of times I've been told to just do `curl $url | sudo bash`...
From yegor256? No, thanks.
Its inherently the most leaking abstraction layer in the world. It may be useful for some simple crud apps (but even then its riddled with traps). Most devs don't know how it works and what are the good practices. For more complex projects it can turn into performance nightmare and often creates more problems than it solves. Criteria API is a joke and many complex things need to be handled by native queries either way (select from select, etc) To see what kind of overhead is generated, just add a Trace logger on org.hibernate. Any app bigger than hello world will be booting up for a long time and will generate hundreds of MB of logs.
N+1 can be autogenerated by Hibernate itself. For example using the bidirectional one-to-one, on the mapping (non-fk side). Also multiple fetch joins (when loading a larger entity graphs) will lead to N+1 and cartesian products). Most devs think that they know what they are doing and most of them are wrong.
It is an intentional decision on the part of the OpenJDK project, that the project itself does not produce binaries. OpenJDK developers work with what amounts to the closest thing to "official" builds -- Oracle's builds at [jdk.java.net](http://jdk.java.net/) for the current JDK version and Red Hat's "upstream" builds [here](https://adoptopenjdk.net/upstream) for 8u and 11u[1] -- which pass the TCK (there are other distributions that pass the TCK, too). It's an open source project and anyone is free to build it, so choose your JDK provider carefully. [1]: They're official in the sense that if you want to report an OpenJDK bug you need to report them against those builds, as those are the builds that most OpenJDK developers work with,
&gt;Most devs don't know how it works and what are the good practices. I've seen this argument again and again, and its just amazes me. You can pretty much say this about anything, for example Set and hashcode, Spring Boot (magical) autowiring, annotation parsing etc. If you don't care enough to *learn* the tool, why blame the tool? However, I agree regarding Hibernate size, initial boot time and Criteria API (JPQL is awesome though).
That's not true. for example: https://docs.jboss.org/books/lightweight/ch01.html Hibernate was fairly lightweight compared to the J2EE stacks pushed by the vendors at the time. Spring was considered lightweight to! The big argument behind Hibernate was that it used POJOs instead of EJB, and that in itself was considered lightweight. I don't consider either of those things lightweight, I'm just saying, many people did and they were sold as such.
I don't think anyone was arguing about which thing was the MOST lightweight
No, JPQL is not awesome because it forces you to code in Strings (making creation of dynamic sql a pain). Even if IDE is highlighting it. Also it is as limited in functionality as Criteria API. The problem with hibernate is that devs think they know how it works because they are getting expected results. Very often it turns out that the results are achieved in a completely different way. Also when combining hibernate with Spring, people most usually use transactional tests that don't test anything because of very different transaction boundaries that occur during production usage vs testing usage. JPA is a minefield. For anything more complex than simple cruds it's just not worth the effort.
Return in a switch statement returns from a function. Break in a switch statement jumps to a label. If you reused either of those as the value of a switch expression, then switch expressions would be the only type of expressions that behave differently when used in an expression statement.
&gt; Also it is as limited in functionality as Criteria API. Care to elaborate on examples? My mantra is that JPA should be used for simple fetching of data. It is especially useful when you need to fetch multiple joins, update some of the fields are persist that change. Anything that requires more than that, most likely should be done using something like JDBCTemplate. &gt; Also when combining hibernate with Spring, people most usually use transactional tests that don't test anything because of very different transaction boundaries that occur during production usage vs testing usage. Agreed. That is why I do not use @JpaDataTest or any transnational tests. That is once again, stems from learning to use the tools. &gt;For anything more complex than simple cruds it's just not worth the effort. Agree. But most of the apps are just that. If you want something more complex its always best to go to native.
&gt; If you log queries, check execution times and actually look for a proper way to do things when it's not just one object with no relations, then you'll be fine. You pretty much made the point for the people that don't like Hibernate. A library should make things easier, not harder. Hibernate makes things harder. SQL already offers a way to query relations you really don't need a gigantic and heavyweight library like Hibernate to accomplish this. The problem with Hibernate is it calls itself an ORM tool. However, it wants to be a SQL generator _and_ ORM. Hibernate is a great ORM, it is an atrocious SQL generator. I wish hibernate let you use one without the other. As it is, a small JDBC helper library that maps result sets to objects is really all you need.
jOOQ is a non-starter because you can't use it with Oracle without paying a licensing fee. Unfortunately we have clients that use Oracle, we can't encumber the app with an additional license fee for those clients.
At 3 yrs I am really surprised you are not yet in the hate hibernate club. Maybe it is too early. See how you feel in another 3.
&gt; When you know what you're doing - JPA is very good. When it works JPA is the same level as writing the queries yourself. When it doesn't work it's a huge pain. The simply joins JPA/Hibernate writes for you are not difficult to write yourself. The complicated sql JPA refuses to write for you anyways.
&gt;The simply joins JPA/Hibernate writes for you are not difficult to write yourself. Multiple join selects and updates ***are difficult to write.*** Even using JDBCTemplate, there is a lot of boilerplate, it is error prone and hard to maintain. Especially when you need to iterate on new database schema early in the project. I would argue that JPA is only for using in those situations where you have simple CRUD queries. There aren't that many pitfalls in those situations.
LMGTS: You want to broadcast to 2 recievers from a single producer? It sounds like you want to use a Topic with Durable subscriptions. Or am I missing something?
JPQL handle a relatively small subset of SQL. No window functions, no limits/offsets on subqueries, no subqueries in FROM clauses etc. Even unrelated joins are not possible in the strict JPA, Hibernate added them on its own cause it was too riddiculous to not have them.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;BookVisitor interface instance could construct the Android RecyclerView. But still wouldn't it be necessary for \`RecyclerBookVistor\` to have access to \`Book\`'s mere data?
I don't use Docker because we have environments setup already. Especially when it comes to server stuff we try to have the Dev environment exactly as it is in Prod. Locally using Docker is neat but you won't have the exact same environment.
&gt; Multiple join selects and updates are difficult to write. That's what I thought before I tried writing them. After a few weeks I realized how easy they are. You're literally just doing: table1.id = table2.table1_id Over and over again. &gt; Even using JDBCTemplate, there is a lot of boilerplate, it is error prone and hard to maintain. Especially when you need to iterate on new database schema early in the project. There is a lot of boilerplate, just like there's a lot of annotations with hibernate/jpa. When I worked on a hibernate project I found it tended to be the same pain in the ass to change the model with hibernate as it was with sql. They both suck. &gt; I would argue that JPA is only for using in those situations where you have simple CRUD queries. There aren't that many pitfalls in those situations. I just found writing the sql for simple cases was also simple. A lot of the claims of "more writing" ignore the numerous annotations you have to write with hibernate that in my experience led to about the same amount of typing, but a much more difficult situation for a 2nd person to come along and try to figure out what's going on. I'm not saying "sql is easy" because sql is a strange beast that makes some things easy and other seemingly-easy things extremely difficult. Like you have an employee table and an address table, and you want to load just the latest address for the employee - there's an entire forums dedicated to how to solve this problem that sounds so easy. But, those kind of problems are a huge pain in the ass in hibernate to. Or you just load everything then find the latest yourself in the code, but you can do that with either one.
I just threw up a little in my mouth.
*Indirectly* through the visitor interface. Instead of asking `Book` for an ISBN, the visitor would receive an ISBN (or maybe not) through a method like `visitISBN(String isbn)`. So, the `Book` data can be represented as a `ResultSet`, for example, but that isn't really relevant to `RecyclerBookVisitor`. While this mechanism is more convoluted than just returning a data model, it does have one interesting property. If there is no ISBN, the visitor method would never be invoked. In a data model, you might have to return `null`, and well, Yegor thinks [null is evil too](https://www.yegor256.com/2014/05/13/why-null-is-bad.html).
If you learn full stack, you can do independent projects more easily when you're sick of the corporate grind.
&gt;If you use Sid on a production box, you should know what you're doing. You should also keep your resume up to date.
Have they given a rationale for that policy? Because it sounds like a recipe for a bunch of competing individuals and groups to offer their own quasi-official builds. I guess it might help deflect liability claims away from the OpenJDK devs if something goes wrong, but it also makes it a lot easier for someone to sneak malicious code into a build, and, rightly or not, the OpenJDK devs will be blamed.
I don't really do 'production' (I'm a researcher) but I find it nearly impossible to build a system on top of stable, because the packages are pre-historic. Everyone I ask tells me 'unstable is really stable, it'll be fine.' Are they wrong?
I think that's what I said :)
Don't get me wrong, but don't get too religious on one thing like is the best stuff ever. There are millions of articles which describe how much damage Docker did to their production. We have stable ecosystem on production and testing which is not using docker. Everything is automatized and works perfectly for years now. And tbh, I would like much more if developers use common sense, know difference between queue and stack, list or map,... than knowing docker. Had much more problems with that kind of devs, not missing-docker-knowledge developers.
I'm aware that "unstable" is generally considered pretty stable, and I don't have any reason to disagree, but I'm a programmer, not a sysadmin, so my opinion isn't all that useful. But as you said, the concept of "production" doesn't really apply to research environments. If your options are to use ancient releases, build your own packages from source, or run a distro with with less than stellar support, I would pick the last option. Back in the day, the company I worked for used RedHat, then CentOS, and they were always \*way\* behind the curve on new releases. I think any "enterprise" distro will be that way, because they're trying to appear to corporate IT people who are fanatically risk-averse and don't usually have much sympathy for users who want to use more up-to-date software.
I love IntelliJ, I just personally like how the different parts of the IDE are laid out, but as some people have said, it is a little fat in size. I've never used eclipse, but I'll tell you this: eclipse plugins for gradle are what others end up using if they choose some other IDE. &amp;#x200B; That being said, I highly recommend Visual Studio Code. Yes it's not an IDE per se and the Java support for it was weak a few years ago but it is doing very well now. I've recently started building a Sparkjava app with VS Code. What you have to do is download the Java Extension pack for vs code, make sure that your settings point to the JDK installed in your system (preferably OpenJDK), install Maven or Gradle on your computer (I use a mac, so for me, I would install it via Homebrew), and then initialize your project with either Maven or Gradle. I personally use Gradle, so in that case, be sure to use the Eclipse plugin (as this is the only way VS Code will recognize a gradle project) and then on terminal use "gradle eclipse --refresh-dependencies" to generate your .classpath file and other project files. It's not a beginner-friendly way of doing things but if you get the hang of it, it will make it easier to understand how java projects are handled from the terminal and will make it easier to transition to IntelliJ or some more complex IDE. Also, If you're doing web development with Spring Framework, there's a specialized Spring Boot extension from Microsoft for it. For desktop development, there is JavaFX, but I'd recommend you use other programming languages for better performance since Java requires the Java Runtime Environment attached on every app you build. For mobile development, I would stick to Android Studio when you're starting but it may not be that hard to do mobile development through vs code since the tools found in AS have terminal commands for it (the only downside is having to fire the emulator through Android Studio). Either that or pick up an easy cross-platform framework like React Native, Ionic, or the new Flutter framework that just came out. &amp;#x200B; If you have any questions regarding other things to learn in Java or where do you want to go from here, just reply back. Java was the hardest for me to learn because the documentation for it is very scattered and very technical but I can tell you which places to go to for easy learning.
There's a difference between running a desktop and a server. Generally, "production" refers to a server environment where you want stability. So much stability. Desktops have a bit more leeway, but you would ideally still have a known platform. Which is why Ubuntu has a 5 year support promise for their LTS and 9 months for their other releases and you'd run non-LTS on a desktop, but not a server on it. Sid is a moving target. Unless you're willing to get burnt (or know how to treat burns, or a Debian Developer), do not use it. I've been a Debian Maintainer, but I haven't run Sid in over 13 years; life is too short. If you need regular updates, run Ubuntu non-LTS releases and upgrade every six months.
As a concrete example, say I want to run Ruby in production on a sever. Debian stable provides Ruby 2.3.3. That is * ludicrously* out of date. It isn't maintained by upstream anymore, even for critical security fixes. I guess Debian would aim to make critical security fixes themselves? Do they know enough about Ruby to do that? Do they know enough about all packages they ship to do that? Seems very unlikely.
they backport fixes, but they apparently have a long history of botching said backports.
They do they back port a fix that hasn't been written? If the feature has been removed from recent Ruby releases there will be no fix written by upstream.
no idea and i'm not particularly interested. nowadays I run opensuse tumbleweed on my laptop and everything works fine
The GPL takes care of liability. What is missing is accountability.
Ruby 2.3.3 was released six months before Stretch, which allowed Debian to stabilise their Ruby runtime, so any ruby package or application you install from Stretch will be rock solid. That's what Debian stable is for. If you don't like that then Debian is not for you. Use a different distribution. You're also currently using an extreme case because Debian Buster is due to be released within the next month or so. That will come with Ruby 2.5.5 which is two months old.
My mistake. You don't give up scalability you gain scalability. What you give up, is mostly stuff that maybe was a good idea 20 years, but not so much anymore. Things such as Threadgroups, thread priorities, context class loader (should probably not have been in Java SE). Then we have thread locals which can be very hard to use and clean up properly.
They discuss it at ~11-13m [here](https://fosdem.org/2019/schedule/event/openjdk_gb/). But the two builds I mentioned are as close to official as they come (they're pretty official, actually), as they're "blessed" by the project leads, and those are the ones the OpenJDK developers use. But if you choose other, pick a reputable source, as you do for all software you depend on. I think Linux doesn't have official binaries, either.
Hey I’ve been wanting to try developing a 2d game in java. Do you mind me asking where did you start?
Join a startup. Jump in the deep end and do all of it. You'll get a feel for what you like pretty quickly.
This sounds like a typical publish subscribe (one to many) pattern. Are you requiring that the queue not be altered because you need a record of all the elements at the end of execution, or because you think that not removing elements is necessary to have two consuming threads? Either way, you can make a typical fan-out setup using multiple queues. Elements are published to one queue. One thread pops elements off of queue one and pushes them into queues two, three, and four. Thread two and three pop from queues two and three (respectively) and do their operation. Once the producer is done, all the elements are in queue four and the program ends.
You might be interested in [this talk](https://www.destroyallsoftware.com/talks/boundaries). Examples are in ruby but the concept carries over just fine. You'll find the [immutables](https://immutables.github.io/) and [vavr](https://www.vavr.io/) libraries extremely useful to this end. To answer your question, if you have enough domain logic (ie. not just a CRUD app) then implementing that logic in a pure way is an excellent idea.
Just pipe them remote .sh files right to a privileged terminal. You only live once.
Dont mind at all! I'm happy to explain anything and everything you want to know :). I got started by doing small little projects, so the first thing I did was getting a loop running where I could draw simple shapes, from there I moved onto a simple game (like a tamagotchi style game), then I went on to recreate simple arcade games (space invaders, pacman (minus the ghost ai I just did random movement)) then finally onto something like this. Other people might have other opinions on the "proper" way to go about this but those were the steps I took to learn and constantly hone my skills. All of the code for this game is open and available on github if you're interested :) Hope this helped!
All three.
I suggest using a dark themed ide. It makes everything better.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have worked on this.. I did the following &amp;#x200B; Development &amp;#x200B; I added proxy in packages.json "proxy": "http://localhost:8080/", &amp;#x200B; Production: &amp;#x200B; You should use http(like nginx) server to separate UI and back-end part. * Add context path spring boot. * Whenever request contains path matching with boot context path ,use nginx reverse proxy to send to port 8080. * Remaining all requests points to your spa.
See [here](https://spring.io/guides/tutorials/react-and-spring-data-rest/). Don't use Gradle/Maven to move your JS assets around, use your JS build tools. The example I linked uses Webpack, which you can configure to write the JS bundle to the location expected by Spring Boot. Typically, you do want your frontend to be separate from your backend for development, because the Java and Javascript development environments are completely different. In particular, I have found Javascript development to work best when run out of the Webpack dev server. The tricky part is CORS, because the browser won't let you access services hosted on another domain. You can configure the dev server to [proxy API requests](https://github.com/webpack/webpack-dev-server/blob/master/examples/general/proxy-simple/webpack.config.js). The browser will make the API request to the dev server, and the dev server will forward the request to Spring Boot, so that as far as the browser is concerned, everything is hosted on the same domain.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I second this!
Learn to make flappy bird with LibGDX. That is the starting point imo.
Sounds like you might like to play [sudo rm -rf roulette](http://www.commitstrip.com/en/2014/05/16/russian-roulette/)
Last time I looked there was over a thousand Debian developers and they are often involved in the project they maintain and are capable of writing patches themselves. Quite a few Debian developers are also Canonical employees, so are paid to work on both distributions.
I have personally gone down the route of 2 &amp; 3. Learning react for front end has been an eye opener from a java developer. It even makes you aware of stuff like CORS which you might not have faced with build a front end with thymeleaf etc. Docker has been very useful in spinning up and dev environment and testing against databases such as Postgres. I would definitely recommend it. But I would choose what you are gonna find interesting. Hey, I’ve even had a little play with creating microservices in golang. Will I use it? Maybe. Who knows?
DevOps is not dependent on docker at all. You can run DevOps practises with a whole range of products and platforms. Doesn't even need to be cloud based. For example my last project was an Apache camel app deployed to WebSphere app servers through Bitbucket, bamboo and artifactory using bamboo plugins and gradle.
These are valid points - about home-grown frameworks and that you can find any questions on SO for popular frameworks. But there's no reason why adopting one is mandatory or even desirable. More can be achieved by going down the library path, not tying your object's life-cycle to magic things and have a full understanding of what is happening in your system at all times. You will have to spend more time upfront and you might not get all the conveniences that you get with a framework, but you also don't inherit their complexities. Frameworks don't compose and you just can't rip out parts you don't like and replace it with something else. Only if the framework lets you. About annotations in general, here's an interesting article on the problems of using magical annotations: https://www.yegor256.com/2016/04/12/java-annotations-are-evil.html
I corrected this in the article. Thank you for pointing this out.
TL;DW anyone?
Thanks! I might follow this exact plan, understanding the basics and then recreating classic games and such.
&gt; More can be achieved by going down the library path, not tying your object's life-cycle to magic things and have a full understanding of what is happening in your system at all times. I disagree with your opinion. However to be more specific, I think the what really allows you to achieve things, is first-class testing support. This is what I like about frameworks such as Spring Boot. I wouldn't like creating that infrastructure myself, and wouldn't see business value in it. &gt; Frameworks don't compose and you just can't rip out parts you don't like and replace it with something else. Only if the framework lets you. Spring Boot auto configuration is composable, you can easily switch out things, e.g. servlet containers, database migration tools, session persistence methods etc. However I can see how the decision would also depend on the application. I think the library route would work if you are doing something that is very outside the box, however not to use a framework for common CRUD applications is reinventing a worse wheel.
It is purely dogmatic. The inventors shoudl first try to solve or manage a Huge problem with their idea. I also recommend them to try to implement efficient data structure, because, for instance ,the immutable Strings are fine but difficult to use in fast algorithm (because they recreate the String). Smalltalk is a nice language (containing also metaclasses, concept that is forgotten nowadays), but very slow. In addition, you can write bad and stupid code in any language. And most of the time, the real world is quite different to what is written in books
Thinking in Java maybe? It has tons of examples. Only have an old edition, though, no idea how it is now.
Here are my 2 cents about it [Effective Java](https://www.amazon.com/Effective-Java-Joshua-Bloch/dp/0134685997), [Thinking in Java](https://www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486/ref=sr_1_1?keywords=thinking+in+java&amp;qid=1558431377&amp;s=books&amp;sr=1-1), and [Introduction to Java Programming](https://www.amazon.com/Introduction-Programming-Structures-Comprehensive-Version/dp/0134670949/ref=sr_1_1?keywords=introduction+to+java+programming&amp;qid=1558431424&amp;s=books&amp;sr=1-1) are a good start Then we can also mention [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_3?keywords=thinking+in+java&amp;qid=1558431377&amp;s=books&amp;sr=1-3) which has snippets and task with Java in mind. Do them, they are great. There is also [Java Concurrency in Practice](https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/ref=sr_1_1?crid=EGCHJ77TGBXT&amp;keywords=java+concurrency+in+practice&amp;qid=1558431459&amp;s=books&amp;sprefix=java+con%2Cstripbooks-intl-ship%2C260&amp;sr=1-1) which is THE book on Java concurrency (and also concurrent programming in general)
Thank you!
Yes, Java is used comercially by companies of all sizes. Desktop applications are only a small portion of the Java world, with the majority being server side web applications. Does that answer your question?
I was just wondering about a relative noob programmer coming in and claiming that all Java devs need to know Docker. I have been coding in Java for nearly 20 years and I haven't had the time or need to find out what this is. Guess I'm too old for this industry...
I wrote "they should" not "they need to"
JakartaEE 8 landing later summer, early fall. 8 will be equivalent of JavaEE 8. Will use javax packages. JakartaEE may not modify classes in javax namespace. 2 proposals out there, big bang rename all packages for JakartaEE 9 asap after 8. No other changes, just renames. Then start on evolution towards 10. Alternatively, only do renames of packages as required ie. When things need to change. Actively looking for feedback, making decision about 9 June on which approach to take. How will JakartaEE be future of cloud native Java? We will evolve it to be. MicroProfile is doing good stuff. MicroProfile combine with JakartaEE? We'll see. Sort out JakartaEE 8 first.
Copy pasting my reply from [here](https://old.reddit.com/r/javahelp/comments/br8bvq/is_java_used_commercially_outside_of_large/). &gt; Oracle's licensing changes affect commercial users. Commercial users haven been moving (being pushed by Google) to OpenJDK builds for ages now. So no it generally doesn't. If they are still, somehow, tied to Oracle JDK distributions that's totally on them. &gt; Leaving OpenJDK aside here on purpose You can't. OpenJDK *is* Java.
Licensing changes does not affect anyone, as the OpenJDK remains free and open source, and that’s what the developers use. Java is used in everything, from small apps, to games, to Android...
&gt; OpenJDK *is* Java. OpenJDK is just one implementation of Java - there are others, such as J9.
Thank you. So it's realistic that someone installing the JDK on his computer to learn Java eventually uses the same computer and the same JDK in a commercial context? This question may seem weird, but I want to understand if a Java beginner should use an OpenJDK right away to be covered for this case. Because Oracle's JDK is free for personal use.
&gt; JakartaEE may not modify classes in javax namespace. May not modify *APIs* (except, if they want, through the JCP)
&gt; I mean, solo developers are not creating desktop applications with Java these days, right? They do
There's no reason for a beginner to use specifically one or the other. It really doesn't matter.
Essentially you need to consider two images and calculate the similarity / distance between them. I've successfully done this in Java on Android using OpenCV so it's possible to do so. Albeit you should note it can be a pretty slow and CPU expensive process, especially on mobile devices. On the other hand, these type of comparisons on strings are done by using Levenshtein Distance algorithm, so try to google its implementation in image recognition, there could be something out there.
But even someone learning the language can eventually end up creating something for commercial use, right?
Sure. So then you can simply use the OpenJDK build. Or just use OpenJDK from the start. I'm getting the feeling you think there's a reason you can't switch?
I know that you can change the JDK easily, but I am preparing a tutorial on Kotlin and I am trying to figure out if I should let viewers download the OpenJDK right away. IntelliJ directs you to Oracle if you have no JDK installed.
By all means just point to the latest OpenJDK builds.
Thank you. I wanted to avoid mentioning this because some people think you shouldn't make tutorials if you have gaps in basics topics like this.
Yes, they are. Depends of what you want. Sometimes, Electron should do the job fine. Others, only Java.
So simply said, you give up thread locals and context class loaders, right?
The rationale for "no code on ctors" is what I call "OOP garbage" which is quite widespread in Java code-bases. He actually has to write boiler plate code to workaround performance problem imposed by his design decision.
Any project at https://github.com/eclipse-ee4j that uses the javax namespace, can not release said project if there are changes in any of those classes in that namespace. Though I *think* changes only constitute changes that would fail the signature tests.
As I understand it, they are only not allowed to change APIs and specifications of those namespaces, which are generally reserved for the JCP. Changes to implementation should be allowed by the open source license.
Yes, I'm working with a pre-funding startup that's using Java.
There's no effective difference between Oracle's OpenJDK build and the Oracle JDK.
Aha I've used them in the past the part I'm not a fan of with the dark theme is when I switch to a browser to check some documentation or something it ends up being really bright XD
Classic games are great because you wont need to make your own ideas or graphics and they are all pretty simple! Good luck to you! If theres anything else you need help with just let me know :)
Only if you plan on making games with LibGDX ;) I worked with it a bit a while back but wanted to do things on my own and do my own engine for the game so I started learning that stuff instead :)
Yeap, they do. I'm a live example using OpenJDK/GraalVM with SWT on desktop which can be served to web via RAP/RWT and embedded Jetty at my work. Eclipse SWT: [https://www.eclipse.org/swt/](https://www.eclipse.org/swt/) Eclipse RAP/RWT: [https://www.eclipse.org/rap/](https://www.eclipse.org/rap/) \--more specifically ([https://www.eclipse.org/rap/developers-guide/devguide.php?topic=rwt-standalone.html&amp;version=3.8](https://www.eclipse.org/rap/developers-guide/devguide.php?topic=rwt-standalone.html&amp;version=3.8)) Eclipse Jetty: [https://www.eclipse.org/jetty/](https://www.eclipse.org/jetty/)
*Effective Java* is great, but I wouldn't call it a "good start": it assumes that the reader already has a fairly solid understanding of Java.
Absolutely correct Will edit answer
&gt; I mean, solo developers are not creating desktop applications with Java these days, right? I am, and I know of a few others who are. In fact, being a solo developer was a major motivation in choosing Java: it lets me build once on a single platform to publish a multi-platform jar. Maintaining multiple build platforms isn't a big deal for a large corporation, but it makes life harder for a solo developer. Of course, with the death of the Oracle JRE, this gets a bit trickier: I'll either have to start doing multi-platform builds or hope that my users are tech-savvy enough to properly install a JDK or third-party JRE without the old user-friendly click-through installer.
Thanks for the explanation! I was assuming that the standalone JRE would still be free for end-users. That's not the case?
Take a look at GraalVM.
Oracle JDK and OpenJDK are the same. And most enterprises use OpenJDK as well. There is no practical use case for you, at this moment, to even consider Oracle JDK.
This is not what you asked for, but you can use operating system commands to run python scripts from java.
You could decouple, you can expose services via flask or similar framework.
I am a fan of the [Core Java Series](http://horstmann.com/corejava/index.html) by Cay Horstmann.
Introduction to Java Programming and Data Structures by Y. Daniel Liang is a book that follows the style you're looking for. It has problems at the end of each chapter you can practice with.
I second this. ProcessBuilder will probably be the easiest thing I can think of. I can post some examples if you need OP.
You could potentially create your own? Blurry photos usually have smooth color changes, while sharp photos can have eradic and interval changing between any small part of the image. If you calculate the fourier transformation of the image, the lower number of higher frequencies implies blurriness. If you arent familiar with linear algebra and want to go the poor man's route then perhaps you could map the image into a quad tree and process the colors from there. Perhaps link colors that are close together. Or set each value to be the difference between its neighbors average. The lower numbers but with a threshold (so you dont get a false positive for solid color images) could indicate a blur. You could check your results and come up with a % that you can say "if more then X% of the image is calculated as blurred pixels, then the image appears blurred". Dont quote me on my 2nd idea as I am just a university student who just finished his computer graphics class.
Jython
That would be great! :) Does using a ProcessBuilder have siginificant performance impact on the program run?
thanks, I will! Looks promising too!
How exactly would that work?
You can rest services and expose them in python. Flask is a popular framework in python.
Is there a version that supports python 3 code? As far as I have seen it only works for python 2?
That depends on the ratio between number of processes and the run time for a process. You will also have to think about if you will run it synchronous or asynchronous.
It's not that it's not free: there just isn't any Oracle JRE after Java 9. (But the old Oracle JREs do remain free for end-users, and JRE 8 is supported till late 2020 IIRC). They want to move from the model of "user installs JRE once and can run any JAR" to "every Java program runs on its own stripped-down, bundled JRE". A couple of third-party vendors (Azul and AdoptOpenJDK) do offer their own JREs, but I'm not sure if the installation process is as idiot-proof as it is for the old Oracle JRE.
Doesn't support Python 3, as stated in the question. And won't be doing it any time soon, at the current rate of development.
As well as GraalVM, there are some Java/Python bridge projects out there. Last I checked, javabridge was the most promising of them. Documentation was a bit thin, but it worked well with Python 3. ( https://github.com/LeeKamentsky/python-javabridge ). One potential problem: I *think* you have to start the JVM from the Python end, so if you need to connect to an already running JVM from Python I'm not sure if it can do that. Py4j also looks promising but I haven't played with it. The other option I know of is JPype but it seems to be pretty much dead.
There's a [Jython 3 repo](https://github.com/jython/jython3) described as "very early stage". Last commit was in 2017. I wouldn't put any hope in it :/.
I think the preferred way going forward is to bundle the runtime with you application. For example, using GraalVM or something like Jpackage ([https://openjdk.java.net/jeps/343](https://openjdk.java.net/jeps/343)) targeted to be released with Java 13.
Is AdoptOpenJDK fine, considering that the "official" OpenJDK only provides updates for 6 months?
Yes, you could argue that they never really worked properly... [https://www.youtube.com/watch?v=vbGbXUjlRyQ&amp;feature=youtu.be&amp;t=1626](https://www.youtube.com/watch?v=vbGbXUjlRyQ&amp;feature=youtu.be&amp;t=1626) &amp;#x200B; Take a look at the whole talk if you want, it gives a really good overview.
Yes.
Another option is Jython. To be fair, I haven't used it yet, but it comes highly recommended.
Jep. We use this ,a nd works without issues.
Help me understand! I read the blog post about never **ever** using evil getters and setters, and surely I cannot set the ball on dog, but rather give the ball to dog, but my objects are API clients and financial transactions. I'd love to see the source code of an enterprise application written in the way proposed from these guys.
I think someone with 0 game dev experience needs to start with at least a framework. Writing a game engine is not a first game project. Also you can write your own engine with LibGDX, since it's just a framework. I want to write a game engine from scratch(ish) as a learning project. I also just enjoy doing that lower level programming. But, someone wanting to make a 2D game in Java, is different from someone wanting to make a game engine. If someone wants to get a game done in a reasonable amount of time, they should not write an engine from scratch.
Thank you very much!
Unless you have to, I don’t think it’s worth it. Maybe use Python as an API or using an DB/Message Queue?
If you're considering going this route, you should think about your project as a distributed system (running on one computer or spread across a network). If you want to avoid dealing with the network communication aspects (that you also have when running like this on just a single computer), another solution is to expose your Python logic as [Pyro](https://pyro4.readthedocs.io/) objects and do remote method calls to them from your Java code using the [Pyrolite](https://github.com/irmen/Pyrolite) library. This abstracts away a great deal of the underlying network communication and more or less lets you call the remote Python server code as regular java method calls.
See [here](https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask).
Head first java with bert bates and kathy sierra. They go through UML diagrams of java code structures also they show examples of almost every pattern you can think of. Design patterns, observer patterns etc etc. You will grab alot from there, all the "basic" stuff is basically already there :) everything you can't grasp fully you can go back to basic java tutorials and look at all the variables, access modifiers etc etc. I wish you all luck!
Yes, that's the plan. Unfortunately, jpackage explicitly won't support cross-compilation, so under this model Java will be merely "write once, run everywhere" as opposed to "compile once, run everywhere". I'm still not sure how I'm going to deal with this myself: I can't really afford to buy a Mac just to build packages for the users I have on that plaform.
It shouldn't really have an impact on the program it's running. It's similar to running a program from the command line. Your java program will probably have to wait for the Python program to complete, so there might be some threading overhead if you need to run it asynchronously. Here's a pretty good example. https://github.com/gradle/gradle-profiler/blob/f58ecabf10a528b02d0036b5c272c946ba8cb6ce/src/main/java/org/gradle/profiler/CommandExec.java It's used to run gradle with different options passed in.
I'm not exactly sure what you are asking. Are you wondering how to read from a file? If so, you can use classes like [Scanner](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Scanner.html) or [BufferedReader](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/io/BufferedReader.html) and a [File](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/io/File.html) object.
Maybe something in between. Yes it isn't the *only* implementation, but it also isn't "just one implementation", it's the official reference implementation.
/r/javahelp is a good place to ask questions. &amp;#x200B; When it comes to reading files it really depends on the content of the file and in what environment it's being read. Using the `Files` API is a good starter
I have been reading a lot of java books, at the beginning was like a hobby, finally I recommend you OCA &amp; OCP for java 8, good books, well explained, it teach you java in deep parts plus I can help you to certificate yourself, I read them 2 times, last week I bought and I read them again, here is the link: [https://www.amazon.com.mx/OCA-OCP-Java-Programmer-Certification/dp/1119272092/ref=sr\_1\_1?\_\_mk\_es\_MX=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;keywords=ocp+java&amp;qid=1558450747&amp;s=gateway&amp;sr=8-1](https://www.amazon.com.mx/OCA-OCP-Java-Programmer-Certification/dp/1119272092/ref=sr_1_1?__mk_es_MX=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;keywords=ocp+java&amp;qid=1558450747&amp;s=gateway&amp;sr=8-1)
And now it is banning huawei from android, that for me is the last straw
what he said.. i would try to calculate the average color distance to each neighbour. that should be an easy indicator of how blutry the image is
GraalVM allows full interop between Python and the JVM. It might be able to bridge the gap that you need it to. I'm using GraalVM right now to run a Kotlin IRC bot. It dynamically loads Python and Javascript plugins at runtime into the GraalVM polyglot context and gives an interface for the plugins to communicate back to the JVM objects. If you're interested, the source is here: [https://github.com/kesslern/kotbot/](https://github.com/kesslern/kotbot/)
Yeah, these books are great, especially if coming from C/C++. The author gives many analogies with C++ throughout the book.
The answer depends to how complicated your pyton code is. If you use something like numpy, socket based approach is the only possible one. If you code simple enough, you may consider to remove v3 specific things and use jython.
I've built a similar product that uses Py4j. It worked well. [https://www.py4j.org/](https://www.py4j.org/)
\&gt; I could rewrite the code in java Have you considered switching to Java in both cases? What advantages does Python have? I believe cross-process communication/GraalVM are quite complicated approaches in testing perspective for example. But if Python usage has some real advantages it makes sense
This is what I use
I have to disagree, it's not necessarily the only/best way. It is important to know whetber your primary objective is learning or making a game in say. six months. Also, I'd like to point out that tools can have frustrating design paradigms that can really get in your way if you don't understand them or think the same way the people who made them did. LibGDX is an absolute pain in the ass to work with coming from learning "normal" programming. You have to learn a whole new way of thinking just to make a game.
Am I misunderstanding something or are you saying spinning up a separate process won't have a performance impact? Of course it will have a performance impact. To what degree depends on the usage, the design of the python library, the host system, etc.
Along these lines, gRPC might be a good solution if OP wants to go distributed. If not distributed, rewriting the shared library in c++ would allow using it from python and Java.
Use a messaging service like zeroMQ, Kafka, rabbitMQ, etc.
head first is like comic books which I don't like.
If you're going to buy exactly one Java book, make it [Effective Java](https://www.amazon.com/Effective-Java-Joshua-Bloch/dp/0134685997). It does a great job of explaining idiomatic Java, and why Java APIs are designed the way they are.
I guess I'm not sure what perf you're worried about. Doing the work in java is probably "more performant" but it doubt it's that important, or super noticable. Only way to tell is to profile. Although I was under the impression the question was asking if there is a perf hit to the Python program which there probably isn't.
/r/javahelp **Removed**
I'm not worried about performance per se, but I think the answer to OP's question of... *Does using a ProcessBuilder have siginificant performance impact on the program run?* ...is *maybe* rather than *shouldn't have an impact*. There's a lot of variables that go into whether it's a significant performance problem.
While you're technically correct, you probably well know that's what OP meant.
It looks like in your [submission](https://www.reddit.com/r/java/comments/brdudo/i_am_having_trouble_with_some_methods_in_this/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yup. Small company reporting in. Java server, Java client with bulk done on Swing and newest parts on JavaFX. Oldest code is from 2001.
* https://tech.transferwise.com/hibernate-and-domain-model-design/ * https://medium.com/@urgo/when-not-to-use-hibernate-84fec5091fd1 * http://blogs.tedneward.com/post/the-vietnam-of-computer-science/ (has a lengthy and odd introduction but eventually gets to the point) * https://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html * https://martinfowler.com/bliki/OrmHate.html (this one is actually mostly for ORMs but acknowledges that criticism against ORM is not totally invalid) * http://seldo.com/weblog/2011/06/15/orm_is_an_antipattern Hibernate forces you into an anemic data model which is an OOP anti-pattern.
Focus on what your heart desires.
I'm not really sure what the OP meant. Java doesn't have dynamic dispatch (although the JVM has `invokedynamic`). It sounds like he is talking about multiple dispatch, which dispatches on multiple variables, rather than the "normal" one, `this`. Java also doesn't do multiple dispatch, and the visitor pattern isn't multiple dispatch, except in the sense that it does two single dispatches.
They have disclaimer that project is in really early stage. graalpython is promising but needs a couple of years to mature I guess.
Without any context, I‘d say 4 and then 1. Dig deeper instead of going horizontally too early. You will learn on your way automatically. Frameworks come and go. If you want to invest time, pick JavaEE/JakartaEE which is around for ages and there to stay. Spring is solid as well, but might loose traction with Microprofile and JakartaEE gaining. Stay clear of Scala and stuff, not worth investing before you master Java itself. Scala and co are hip but also subject to seasonal change. Invest there if you are really bored or need it for a job.
&gt;I guess I'm not sure what perf you're worried about. Doing the work in java is probably "more performant" but it doubt it's that important, or super noticable. Only way to tell is to profile. Although I was under the impression the question was asking if there is a perf hit to the Python program which there probably isn't. pretty sure Jython doesn't support Python3 still
I guess someone hasn't heard of [jython3](https://github.com/jython/jython3) sandbox project?
I have used this before: [https://doc.nuxeo.com/nxdoc/quick-overview/](https://doc.nuxeo.com/nxdoc/quick-overview/) it's open source, pure java and provides plenty of functionalities
I don't know how useful knowing Jakarta is without experience with the kinds of problems it attempts to solve. I may be biased though because from what I've seen of it (beans, spring, jax-ws) it's mostly composed of anti-patterns IMHO.
Thanks, I'll take a look into it!
&gt; pick JavaEE/JakartaEE which is around for ages and there to stay &gt; Stay clear of Scala and stuff [Beautiful](https://pics.me.me/trolling-is-a-art-memes-com-18049045.png)
Thanks for that comment. I appreciate your pragmatism
Thanks for that comment. I appreciate your pragmatism
I agree that a game engine is a lot of work but I started with 0 game dev experience and I've now written a 3D engine with shaders and all that such as well as simple 2D ones. A lot of it comes down to how much you're willing to learn and what the goal is. If you're looking to make a full game in a short period of time using an engine will make it faster. If your goal is to learn and make something truely yours then writing the engine is the way to go :) Just my opinion of course :)
I second all of what you said :) I've yet to find a java engine I actually enjoy using so until I do I'll be making my own :)
Definitely 4 if you're not feeling comfortable with the basics and internals like memory management. They are the foundations you build upon.
I highly recommend Derek Banas. He does these amazing "in one video" tutorials. He has an older Java video that covers most of the core language in a half hour. He has a more modern, more inclusive one that is over 2 hours. I watch his videos anytime I know I'll need to brush up. Disclaimer - These are not for new programmers. https://youtu.be/n-xAqcBCws4
Thank you so much, I will definitely utilize this videos
Personally I recommend [Contentful](https://www.contentful.com/) . You can check this website to get started / for more info https://simply-how.com/free-headless-cms-a-content-as-a-service-review
Functional is here to stay though, getting some functional experience under the belt can never hurt
Skip the book and just use [the Java tutorials](https://docs.oracle.com/javase/tutorial/reallybigindex.html) ("java trails") online
Being a primarily Java developer who has had some exposure to various C# and .NET projects, I found that hardest thing to adapt to was actually the eco system and tooling. From a language perspective, Java and C# are VERY similar. Some conventions and syntax are different, but for the most part it should be fairly easy to transition. But, you might have some trouble figuring out how Java applications are built and run, especially since Java usually has some different options for very similar tools. So, here's a quick list of stuff off of the top of my head: IDE. .NET equivalent is Visual Studio. Java has Intellij, Eclipse, and NetBeans. (I don't know for sure, but I'm almost certain that you can use Visual Studio for Java development). Build tool and dependency management. .NET equivalent is NuGet. Java has Maven, Ant, Gradle. These are the mains ones, but there are actually more that you probably won't run into Packaging. .NET equivalent are .exe or .ddl. Java has .jar or .war. Some .jars are executable with java run command. .wars contain web applications that need to be deployed into an application server. Application frameworks. .NET equivalent... well .NET and ASP.NET. Java has A LOT. In terms of web applications, the most popular are Spring MVC, Struts (unfortunately), Play, Tapestry, etc. There might be additional frame works with in your web application for dealing solving other problems like Object Relational Mappers (Hibernate) or Dependency Injection (Spring, Guice). Then there are the asynchronous/streaming data processing frameworks like Storm, Spark, and Flink. Server side templating. .NET equivalent are .asp templates. Java has .jsp templates. Application Server. .NET is equivalent IIS. Java has Tomcat, Jboss, Jetty, Glassfish,IBM Websphere, and A LOT more. SDK. .NET equivalent is .NET SDK. Java has the JDK. However, there are a few different different implementations of it. There's the Oracle JDK, Open JDK, Red Hat JDK, and some others being developed. Oracle JDK was sort of the "de facto" JDK but now it requires a license for commercial use, so other JDKS are gaining popularity now. On top of this, Java also has JVM languages. These languages that are separate from Java, but are compiled down to Java byte code so that they can be run on any JVM. Some of the most popular languages are Groovy, Scala, Kotlin, Closure. There are also some languages like Jython and JRuby which are just Python and Ruby respectively that run on the JVM. Anyway, that's just sort of a crash course on the "Java world". I've glossed over somethings and might've left some other important things out, but I hope it's jumping off point to kind of do your own research or to just figure out what questions to ask.
Ah, good to know. Thanks.
Thanks! Having a quick glance it looks nice, and they have a Java API/binding for their SDK. A shame they don't have a self-hosted FOSS version, but will continue looking into it though.
Have you looked at https://getmesh.io/ - that's an open source java based headless cms I'm working on. Otherwise a good resource I often recommend is this list: https://github.com/gentics/headless-cms-comparison I have tested a lot of systems on the market and I think there is often a difference in the feature set and editing experience / usability. There is in my mind no silver bullet. Some headless cms are great for blogs and some great for enterprise applications (e.g. shop systems). The choice imho. depends on the app you want to build. If you for example want your app to be able to push modifications to the headless cms you need one which provides a management API (not all systems do). Editing experience is hard to quantify and thus not part of the comparison sheet. I suggest you just take a look at the systems which meet your requirements. Disclaimer: I'm the lead dev of Gentics Mesh
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Even as a seasoned Java developer, I still use the Spring Guides quite a bit to get started with specific challenges: https://spring.io/guides There's examples on Spring Boot, MVC, Batch, JMS, Spring Data, etc, and they provide pretty good starting points IMO.
This is very comprehensive, and I thank you for it
I believe alfresco is a long time player
&gt; My fear is that I am going be spending the good part of a month or so going through tutorials to refresh my memory of the syntax of Java with little work going into the new project That's fine - don't worry about it.
With C#, you have sln and csproj files that govern almost everything about a project like what files to compile and what to build. This management of files is hidden from you by the tools, and you're almost required to use Visual Studio to work on these projects because VS manages all of that and provides a UI for manipulating the settings. Need to add a .cs file? The csproj file needs to know about it. Java doesn't work like this, so it opens up a lot of options as far as what IDE you're using or whatever. At my company, we're using Maven for builds and dependencies. Whenever you need to change something about the project, most of the time you're editing the project's pom.xml file. As far as what source files Maven will include in the build depends on convention mostly -- where in C#, the csproj file would dictate that. Need to add a .java file? Just put it in the package folder under src, and Maven will find it. Ant and Gradle work similarly. Beyond that, read up on "type erasure". It might mess with you if you ever serialize something.
Unless you have a specific task to do, I highly recommend learning some different languages and programming paradigms. Try some Kotlin, Scala, Closure, Groovy, etc. These are all JVM languages and are interoperable (some much more easily than others though). I recommend Kotlin as a first pick, particularly if you're using IntelliJ IDEA because the support and tooling is fantastic.
https://www.baeldung.com/ is an amazing resource for Spring-related Java stuff (even some vanilla Java stuff).
Idk a ton about angular or react but have bounced back and forth between java and C# and they're both c based languages with very subtle differences (at the lowest level) you'd figure it out really quickly if you're working in the environment and looking at an existing code base. If angular and react are THAT different at least this might be a learning opportunity that opens some doors. Good luck!
To add to this, if you have to do any sort of testing, JUnit and TestNG.
Thanks for the share, and also for your work on Gentics Mesh! I'll definitely be trying this one out as its features seem to match my requirements.
Thank you for sharing this.
Thanks, I'll be looking into this!
I would highly recommend spending the ~$13 for Tim Buchalka’s Java Masterclass on Udemy. 70+ hours of instruction, and plenty of practice assignments. Single-handedly got me through my Comp Sci degree!
Next 6 mo u'll feel how java is better than c#... (Thats what my 13yrs working with java says) About being unproductive... thats good u work for the gov, the less u work the better for mankind. (Thats what my anarchist hearth says)
Next 6 mo u'll feel how java is better than c#... (Thats what my 13yrs working with java says) About being unproductive... thats good u work for the gov, the less u work the better for mankind. (Thats what my anarchist hearth says)
Springboot is pretty massive now.
Dunno what your particular use case is, but I'm awfully fond of Apache Sling and all the stuff it stands atop.
Funny.. I have been doing years of Java/web stuff, and did a little React and am now moving to nodejs/react and man, it is scary! I love what node/react does for front end UIs, but 3rd time working with a different team and 3rd time the way things are organized, coded, etc are different. One thing I like about Java, and Golang for that matter, most projects that use the same sort of underlying frameworks look/coded/work the same way (or very similar). Not quite so with nodejs/react developers. Seems everybody has different ways of doing things, and especially with UI, they prefer NOT to document things like what className styles mean what, do what, etc. Fun, but a little worried I am going to take WAY too long to get up to speed on how things are done.
Made a similar jump this year. I spent a lot of time reading up on Spring Boot, Lombok and Maven. There are some great books available for free if you search online and in github. Baeldung also has great tutorials as does Spring.
Basically what they're saying is you will add to your existing python code to turn it into a network accessible API. Your necessary Python code will be invoked from Java using HTTP requests.
Good call, probably the only major thing missing from the list.
You really need to learn sql and basic front end to make it long term in this industry, IMO. I would lean Spring too since it’s so entrenched in enterprise.
Visual Studio Code can be used. But it's doesn't stack up to the big 3 in terms of features.
&gt; On top of this, Java also has JVM languages I've never had to deal with .NET, but I would assume that the equivalent would be C#, F#, where they are different languages, with different compilers, but they all compile down to the same binary.
Far too old. You'll be solving problems using techniques that are entirely antiquated. Make sure whatever book you choose covers at least Java 8. "Thinking In Java" does not.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What exactly do you mean when you say memory management? Just programming as to avoid collisions in cache read/write, specifically pertaining to locality and other methods for speeding up data fetching/write sequencing?
I’m curious, when someone says learn front-end, what exactly do they mean? It took me literally one day to pick up HTML and CSS, it’s just so intuitive. I can throw a simple website together pretty quickly, but I’m not super artistically inclined so it’s not really for me. If I was given an already existing site, I’m confident I could make simple changes w/o screwing anything up. This can’t be what people mean when they say learn front-end, right? The languages just seem so simple, I feel like I’m missing something.
This is awesome. I'm in a similar situation landing my first job as a java developer, my problem is all my education has been in javascript and using React. Would love a similar write up comparing java to javascript
Home and CSs were basically all you needed to know 15 years, along with a little javascript to pop up a banner or something. Since then the front end has turned into a complex mess of BS, partially because we're demanding a lot more interactive pages on dozens of different devices and partly because Google, Facebook , etc. have decided to add lots of *features* that make it easy for them to spy on everybody. Regardless, you need to learn home, CSS, and Javascript and then figure out how it's all put together with Node / NPM and a framework like React ( which is hot now but will be replaced next year). You should understand *async* vs synchronous calls. This is really important on both front end and backend. Along with that, you need to understand how the front end browser communicates with the backend - SSL, HTTP, keys, certs, general security, authentication.
As someone who has been in professional Java dev for about 10 years, /u/locatedtaco did a good job of outlining key points. The only thing I would add is that if you are good at recognizing patterns and generally evaluating why something was done a specific way, Java is extremely forgiving to learn in terms of syntax. The downside is that depending on the nature of your new team, you might spend a lot of ime being confused at why a colleague did something in a particular not-so-good-way, and similarly your project might suffer from some performance issues that require familiarity with the codebase to handle correctly. Take your new project a day at a time and things should work out in the end...probably, lol.
Get Intelij IDEA and let it do all the work for you.
That makes sense, I was assuming there were important frameworks I needed to learn. I’ve heard of everything you mentioned, but I’m more of a backend guy so I’ve never dived into those frameworks. I am comfortable with sql and how the front interacts with the back, but I’m hesitant to start learning a lot of JavaScript and frameworks relating to the front. I like C/C++ &amp; Java a lot so JavaScript and all it’s web cousins seem like a really big leap from what I’m currently doing. I’m also worried I’m going to spend a lot of time learning the stack then some new fancy language or framework is going to pop up and wreck what I’ve dedicated so much time to. What would you consider the basic front end fundamentals for someone who is more interested in back end topics?
Came here looking if someone mentioned Derek, glad to see he is getting reco.
[Liferay](https://dev.liferay.com/en/develop/tutorials/-/knowledge_base/7-1/using-front-end-frameworks-in-your-portlets) and [Adobe Experience Manager](https://helpx.adobe.com/experience-manager/kt/eseminars/gems/Adobe-Experience-Manager-6-5-Sites---Whats-New.html) Not much experience to talk about, Liferay I used as pure CMS a couple of years ago, and AEM is one of the offerings we do consultancy on, but usually as regular CMS as well. Throwing them in, as they also support headless as of recent versions, although they are probably out of game for what you need, given their enterprise focus and pricing models.
Didn't it get updated?
I honestly love the man. He is so responsive to his commenters, he's not trying to sell you something. He just makes the best programming tutorials on the internet. He also does videos on vegan recipes, how to crochet, psychology, and other stuff. He's definitely getting into the Good Place.
The latest version is still from 2006. He recently wrote a different book on Java 8, but it's not an update.
Yeah I agree don't waste time learning the framework du jour ( React, Node) because it will be replaced in a few years with the next great thing. But I would really advise you to have a good understanding the basic protocols of how the front end and backend talk to each other. So like I said, HTTP, SSL and certs, and general networking (DNS, tcp, ports, proxies, various tools like netstat, ping, etc). For example, your front-end might be some basic html *hello world* jsp, but you should be able to serve it from your backend using HTTPs with Tomcat or NGINX proxy. You'll need to understand java's keytool to create the keys and certs.
Oh yeah, along with spring framework, learn spring security or at least servlet / Tomcat basic security so you know how to do basic authentication with a password and cookies, Web filters, etc.
Absolutely.
In addition to the web frameworks that /u/locatedtaco mentioned, and if you're interested on the MVVM architecture (Model View ViewModel) you should have a look also at: **Eclipse RAP/RCP and RAP/RWT: -** [**https://www.eclipse.org/rap/**](https://www.eclipse.org/rap/) * Eclipse RAP/RCP - [https://www.eclipse.org/rap/developers-guide/](https://www.eclipse.org/rap/developers-guide/) \- Build web applications based on the Eclipse RCP platform * Eclipse RAP/RWT Standalone - [https://www.eclipse.org/rap/developers-guide/devguide.php?topic=rwt-standalone.html&amp;version=3.8](https://www.eclipse.org/rap/developers-guide/devguide.php?topic=rwt-standalone.html&amp;version=3.8) \- Build web applications using SWT as the GUI toolkit. * Both RAP and RAP/SWT can use the Eclipse WindowBuilder GUI designer for creating the user interface. With it, you can very easily create insanely complex UIs that work on both web and desktop with the least amount of time and effort. * CSS based themes are supported in RAP. **ZKOSS framework:** [**https://www.zkoss.org/**](https://www.zkoss.org/) * ZKOSS ZUL - [https://www.zkoss.org/wiki/ZK\_Getting\_Started/Learn\_ZK\_in\_10\_Minutes](https://www.zkoss.org/wiki/ZK_Getting_Started/Learn_ZK_in_10_Minutes) \- Build web applications using the default ZUL XMLbased notation. * ZKOSS offers coding-support Eclipse IDE plugins, but he ZUL syntax is so very easy to understand and use, that I stopped using the plugins altogether. * CSS is supported in ZUL both as themes and direct to components. * ZK JSP - [https://www.zkoss.org/product/zkjsp](https://www.zkoss.org/product/zkjsp) \- There is also JSP integration, but I never used it in production since ZUL makes things quicker to build.
If you have not touched Spring yet I would definitely get some experience there. It's the de-facto standard when it comes to enterprise frameworks and anything you learn there translates very easily to other frameworks (Micronaut, Jakarta EE). Other than that; it depends on what you want to do. It's easy to be good at something you enjoy doing. I don't enjoy HTML/CSS work so while I do have quite a bit of Angular/React experience, I don't focus on it at all: it's not fun to me.
&gt; Multiple join selects and updates are difficult to write. I can't understand how doing "complex shit" in JPA can ever be less difficult than doing that "complex shit" directly in SQL. It makes no sense at all. JPA/hibernate is just an abstraction layer; so in addition to understanding the data model and the queries, you also on top of that need to be able to figure out what hibernate is doing right or wrong. I have used hibernate extensively in past projects and I have not seen a *single* instance where it was less complex. For simple work, like querying a simple table and mapping it to objects, JDBCTemplate is only slightly more 'work' than JPA. But for anything not as simple, like for example compound keys, not to mention more complex M:N relationships, just writing the query yourself is always simpler than setting up JPA relations correctly and then trying to figure out if the query it creates is correct. It does not make any sense that "something + something else" is simpler than just "something".
I'm always worried about devs that work with hibernate and use "joins are hard" as an argument.
The difference is that C# and so on are all maintained by Microsoft while groovy, kotlin and so on are mostly independently developed by other companies and open source communities.
Sorry went on vacation and couldn't answer until now. \&gt; What about writing tests? Spring Boot has a well-documented test framework. I've always just used JUnit + Mockito. Getting these to work is very easy and you can write your code any way you like so integration with those tools is not hard. I even managed to get integration tests to work within the JUnit framework. I used to use docker to setup all the dependencies but getting those tests automated and running inside the build was horrible. Undertow actually helps a lot here, you can spin up a service and have it listen on a port directly from code. \&gt; the bottleneck is usually in the database I'm taking a ceteris paribus approach here and assume that our databases run at the same speed. It may be true that if you add some caching layer somewhere that that part of your code runs faster than mine. I implemented caching for the responses of REST calls, so in case of a cache hit the DB layer would never even be called. I also used query caching that comes with HikariCP. I never had performance issues. \&gt; And you like manually tracking all their updates and ensuring they always work together nicely? No, I like automation. There is an awesome versions plugin that comes with maven that will tell you if any dependency is out of date. For a while I integrated it with the build to have it complain about any out of date stuff. Ultimately though I turned that off because I found that all the software I used was extremely mature and basically never failed and didn't have any security issues. So frequently updating these dependencies became unnecessary busy-body work. It's important to note here that it is much harder for a generic framework to get the versions of components to work well because they have to get it to work for everybody. If any of the frameworks components interfere with anything someone wants to use you get bug reports and complaints. Since I only have to get my stuff to work for me the problem isn't hard at all. \&gt; allow me to avoid writing boilerplate There is absolutely no boilerplate to find in this setup. There is no framework, that means no configuration files for the framework, no annotations, no XML, no properties files, no hashcode or equals operations unless actually used, no getters and setters because no beans, no DB entities. The controller code is even smaller and leaner because of more freedom in their design. The benefit I really like was small call stacks, I had stack traces that were on average about 8 lines long. Whenever I see spring-boot code I can see boilerplate all over the place. \&gt; I think a much more productive use of time People always assume that these frameworks provide them with a higher software development velocity but that hasn't been my experience. I was (currently on a different project) insanely productive with this setup. At times the speed became embarrassing because I would outperform entire teams or implement features faster than managers could talk about in meetings.
Spring Boot might be configurable, but Spring overall is not composable. Not without significant effort, I should say. With regards to testing: There are two different things we are talking about. Project scaffolding (which Spring Boot does) and buy-in into a framework. A proper test environment can be created with scaffolding alone. But maybe I don't quite understand what you mean with 'infrastructure'. And going down the library path doesn't mean reinventing the wheel. It means you have more choices in how to set up a project and explicit control over how these pieces are working together. Yes, that means more upfront work as certain conveniences might not be available. For a common CRUD application (i.e. SQL in the back) it is also quite questionable why one would bother with object-orientation at all - or more specifically ORMs. They are not a good fit at all. But that is a different discussion and the shortcomings of ORMs have been researched quite extensively. And, yes, if you have one-off quick projects that don't have a decade long maintenance expectation, using the fastest, most convenient way is very much the right approach ;)
Adobe Experience Manager is built on it, love working with both!
Thanks man. I ran into Micronaut a couple of weeks ago and found it quite nice. I was particularly impressed with their support for GraalVM. Undertow right no cannot be compiled with GraalVM which made me look for other things as well. I've been experimenting with Spark, which has also been a pleasant experience. My general approach with programming is to stay away from configuration and annotations as much as possible and stay in code land. But I'm not against annotations if they work well. I really like the way annotations are used during JSON or XML serialization.
I was just meaning the relationship to .NET by having multiple languages. I agree that the monoculture of only having Microsoft produce .NET languages is a bit shit.
&gt; I agree that the monoculture of only having Microsoft produce .NET languages is a bit shit. That's not what I was implying. It also has advantages if everything is under the same control, for example Kotlin right now would have a really hard time implementing something that requires an extension of the JVM bytecode. If Kotlin and Java and the JVM were created by the same Company, something like that could've been coordinated much better.
Building within a VM/container would probably be a better solution even if you could afford to buy a Mac.
[removed]
Sure, but I still need a Mac to run the VM on, since Apple explicitly forbid running their OS on anyone else's hardware, whether virtualized or not.
By testing infrastructure, I mean everything that is provided by https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html It provides test slices, from full container integration tests, to presentation and data layer tests. It also provides other configuration, e.g. test data insertion, HtmlUnit configuration, test CSRF support, test security support. I wouldn't like to replicate these things by myself, and there wouldn't be much business value in doing so. I've worked with PHP CRUD applications that did not use object orientation and just shuffled things around in arrays. It became unmaintainable in the end, and you traded not using objects for lots of array_key_exists calls. It's questionable why you wouldn't want to use objects and a proper domain model nowadays. Modern PHP is moving away from arrays and towards type-safety. To not use objects is questionable.
Dont forget Mockito
"very early stages of development". Last commit was Jul 17, 2017. Sorry, but it's clearly dead.
The best simile that I've seen compares the two languages is, "Java is to JavaScript, like car is to carpet." ES6 brings some syntactic sugar to make JS look more like other OOP languages (specifically the 'class' keyword and better variable scoping). Aside from that, JavaScript's "everything is an object" model may be difficult to adjust to coming from a strongly typed language like C++ or Java.
I find I typically have to do more work in IntelliJ vs Eclipse to make a project run (Mind you I haven't used Java in a couple years).
Look outside and it [perhaps misleadingly, perhaps due to branches](https://github.com/jython) says 9 days ago
Cool! What does the algorithm look like?
This! I started out in Netbeans and when I switched companies I had to use Eclipse with the rest of the team. I now can use whatever I want and still use Eclipse, because I don’t feel like having to go back and learn Netbeans all over again...though I really did prefer Netbeans over Eclipse. The perspectives kills me, and too many buttons in too many places.
Opp, what kind of "Java web dev"? Using Spring server-side doesn't tell us much as there are a bunch of API sets under the Spring umbrella now. Are they using Spring MVC with React and Angular? Are they using JSF which is more like ASP.NET web forms? Are they using ..... 99 other options? Java is Java, and normally if a shop is using Spring, they are at least using Spring dependency injection. They may also be using Spring Boot. Shops usually use Hbernate and/or JPA with those, which are like Entity Framework. Anyway, having a few months or so of Java under your belt is certainly not going to hurt you. Being flexible around these things is a great strength. Just don't make the mistake of thinking that Java is "just like C#", or vice versa. Respect their differences and actually train up on your target Java version (hopefully at least Java 8+) and target APIs e.g. Spring, etc.
I should have been more clear with my request. The project is using Spring MVC and Spring Boot. I did find some good articles (mainly the documentation section of spring.io) that I can read up on. But any type of documentation will help
Yeah, while reviewing the current code of the project, the previous developer was using JUnit for testing
I used WebStorm, and I absolutely loved it. But anytime I switch to new divisions, I have to reimage my laptop, and I always go to Visual Studio Code for JavaScript.
Humanity doesn't deserve such programming gods as this guy. Watched through the two videos posted and I am grateful for this
Could you perhaps tell about the differences between the openjdk and the redhat jdk? I thougt redhat taking leadership of the openjdk project would mean these two jdks are the same. Am i wrong?
Thanks! Is Apache Sling an out-of-the-box headless CMS, or is it more of a web framework that lets you build your own, custom headless CMSs?
Thanks! AEM is out of my budget, but will look more into Liferay.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I recommend Pluralsight courses. Ask your employer to buy you a subscription for 6 months.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
From the video description: [Original C Source](https://github.com/Mrrl/GrailSort) [Video's Java Source](https://github.com/MusicTheorist/JavaGrailSort)
You can check out Processing
Java Concurrency In Practice (JCIP) is a good starting point - [http://jcip.net/](http://jcip.net/)
The tutorial trail, and recommended reading will see you quite far. [https://docs.oracle.com/javase/tutorial/essential/concurrency/further.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/further.html)
If 3D is a requirement there is WorldWind. If just 2D there is OpenMap and Geotools.
I'd also recommend a course from John Purcell on Udemy called "Java Multithreading" to get you going, and for depth can vouch for "The Art of Multiprocessor Programming" by Herlihy &amp; Shavit.
Thank you.
Take a look at Quasar, Akka and LMAX Disruptor, as well as having a read about the upcoming OpenJDK Project Loom.
If you are a visual learner try Java Concurrent Animated : [http://jconcurrent.com](http://jconcurrent.com)
Thanks!
Thanks!
This is a perfect book for Concurrency and Threads in Java, explains pretty neatly.
Ah, I meant garbage collection, how it works (at least its basics). If you don't know the basics you can write some stupidly inefficient code.
https://github.com/leventov/java-concurrency-checklist
You added a link with anchor at the very end of article.
Thanks!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Check out this book. This is pretty concise and to the point book on the subject. [https://www.apress.com/us/book/9781484216996](https://www.apress.com/us/book/9781484216996)
Sling is a set of frameworks that sits on top of JCR (usually Jackrabbit). It provides a really well-thought-out restful API onto JCR, and an easy "out of the box" way to address and query that content as trees of JSON or XML. The nice bit is that you can also upload renderers to it that will transform nodes and subtrees of the JCR into arbitrary new representations. The most common use case is mapping trees of content into HTML fragments for presentation, but just for giggles I made a renderer that takes any image that Java can parse, and produces scaled/reencoded versions on-demand.
Thanks!
Thank you.
Why not?
umm..I haven't been able to get ahold of you on discord or anything, what happened?
Iirc is written by JDK lead developers, so they should know their shit. .:)
String is immutable and it creates a new instance everytime you change the value. StringBuilder is mutable meaning that once we create it, you can perform any operation that appears to change the value without creating new instance for every time. If you want to merge texts in different time in a function, or class etc. Use stringbuffer and build it in the end. There is also StringBuffer. If you are to choose StringBuilder, your 2nd question might be StringBuffer vs StringBuilder. The difference is that StringBuilder is faster because StringBuffer is thread-safe which makes it safer and slower.
Use it especially in loops and when you have to concatenate multiple times. When your code is compiled, a simple string concatenation is transformed in a StringBuilder by the compiler. It will create a new instance at each concatenation, that's why you should really use it in loops.
Also consider `String.format` over concatenation for simple use cases.
I think it USED to be that StringBuilder used less resources and improved performance when using it instead of Stirng concatenation. However, I *think* more modern versions of Java fixed that so that it doesn't make a difference anymore. Anyone else with a better memory on the issue care to chime in?
I've had a similar situation during my most recent project. I found a library on github called [JEP \(Java Embedded Python\)](https://github.com/ninia/jep). There is very little documentation for it, but it's very easy to use. Being easy to use was my top priority because this is only a temporary solution on my project and during the summer it will be replaced by native Java implementations. Hope I could help.
Google on "Java Decompilers".
That's an awesome list. Thank you.
If you have multiple strings in your source code separated by \`+\`, then the compiler performs the + and puts the string in the class directly. In that case, using \`+\` is better than StringBuilder. If you have string concatenation in a loop, javac can rewrite your code to use a StringBuilder. So you can do it explicitly, but you don't have to. Possibly your loop can become too complicated for javac to rewrite your code to use StringBuilder.
Taming of concurrency: https://deadlockempire.github.io/
FYI, String concatenation is often turned into StringBuilder code by the compiler: https://dzone.com/articles/string-concatenation-performacne-improvement-in-ja
Chapter 22 (Multithreading) in *Big Java: Late Objects* is available on the publisher's website here: [http://bcs.wiley.com/he-bcs/Books?action=resource&amp;bcsId=9848&amp;itemId=1119056446&amp;resourceId=39297](http://bcs.wiley.com/he-bcs/Books?action=resource&amp;bcsId=9848&amp;itemId=1119056446&amp;resourceId=39297)
Unless you are building strings in some kind of loop you probably want to go with string concatenation, as it has much better performance then StringBuilder on never JVMs, at the cost of a little longer startup time. u/[cl4es](https://www.reddit.com/user/cl4es/) just posted an article about it last week [https://cl4es.github.io/2019/05/14/String-Concat-Redux.html](https://cl4es.github.io/2019/05/14/String-Concat-Redux.html) which provides the details.
As several others have stated, when concatenating repeatedly in a loop, `StringBuilder` is more performant. Everything outside of that is compiler optimised to the point that concatenation is just fine. I don't have a source handy, but I'm also pretty sure `String.format` is by far the most inefficient of any of the options. All that said though, usually these days these are micro optimizations when compared to things like reducing database calls or network latency.
\&gt; String.format is by far the most inefficient of any of the options. For now... JEP 348 is looking in to changing this. See [https://bugs.openjdk.java.net/browse/JDK-8205637](https://bugs.openjdk.java.net/browse/JDK-8205637)
Can anyone elaborate on why Java with threads, locks, synchronized etc should be used for concurrency when there are clearly more sane options in other languages?
Ops! Thank you, the correct one is obviously https://filippobuletto.github.io/eclipse-shenandoah/
Good distinction, thanks. And that improvement looks interesting, will be cool when that comes in
I thought it was the other way around. String concatenation is currently compile-time optimized, and JEP-280 wants to make it runtime optimized. https://openjdk.java.net/jeps/280
I think this information is out of date.
String[] means “an array of strings.” It is just a list of arguments or parameters that you can pass to your program. So if you run your program via the command line and enter any text after the program name, that extra text will be what is in the args array. You can enter any number of arguments, separated by spaces.
Java has convention (like C) that it will call your class's entry point if you name it `main` declare it `public static void` and it will pass you the arguments from the command line as an array of String.
Ok thanks
Thanks so much this finally makes more sense
SERIOUSLY? YOU CAN’T TRACE THE METHOD CALLS??!?!
Java itself also has higher level concurrency abstractions. Can you provide an example of what you are comparing it to?
No I can't. Give me a break I'm a beginner at programming
Thank you!
Thanks!
This site is brilliant. Very imaginative.
SonarQube tells us we should do StringBuilder instead of concatenation IIRC.
Please, ask programming related questions in /r/javahelp. You already got good and spot on answers, but there is another meaning to the term *argument(s)*: When you write a method, you declare *parameters* in the method header, like `public static void main(String[] args)`. Here `args` is the *parameter* of type `String[]` - an array of `String` values. When *calling* a method, you pass in *arguments* - the values for the parameters are called *arguments*. TL;DR: You *declare* method *parameters*, but call a method with *arguments*.
Google nashhorn if you're on java 8-9 and graal.js if you're on 10 or 11
It's not JavaScript Engine, it's Java ScriptEngine Check this link https://docs.oracle.com/javase/7/docs/api/javax/script/ScriptEngine.html
Google for "Java ScriptEngine" (as the *proper* name of the class is) reveals *plenty* tutorials and lots of information. Some random samples: + https://www.programcreek.com/java-api-examples/index.php?api=javax.script.ScriptEngine + http://www.java2s.com/Tutorials/Java/Scripting_in_Java/0040__Scripting_in_Java_eval.htm + https://www.codota.com/code/java/methods/javax.script.ScriptEngine/eval
Java concurrency is incredibly difficult to implement correctly even for the people who literally wrote the book on it. There is a completely different paradigm for solving the problem called Software Transactional Memory or STM, the most known implementation of which can arguably be found in Haskell where it has been used pretty extensively and successfully for over a decade now. Turns out there may be some attempts at porting that to Java though: https://en.wikipedia.org/wiki/Software_transactional_memory#Java
[this should help](http://lmgtfy.com/?q=What+are+the+benefits+to+the+StringBuilder+class+and+when+should+it+be+used+over+String+concatenation%3F)
Please, ask programming help questions in /r/javahelp. **Removed**
And you are sure it is not in a loop? long bar = System.currentTimeMillies(); return "foo" + bar; Should not be flagged
This isn’t a help question why did it get removed? This is asking about the fundamentals of java
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Java programming Tutorials: [https://blog.gceasy.io/](https://blog.gceasy.io/)
Mergesort is also stable, in-place and O(n\*log(n)) in the worst-case. So?
Actually, that's wrong. Merge sort is most often out-of-place, and in-place variants sacrifice both stability and n*log(n) time.
Is there ever a reason to use SST with .jsp rather than use React?
Superset?
There is no way a JRE built in the past could know what would be supported on a JDK made in the future. But it’s very easy for a JRE built today to know what was supported on JDKs made in the past.
https://stackoverflow.com/questions/15492948/javac-source-and-target-options
Project Loom looks targeted to Go or Erlang. Fibers are like goroutines and he specifically mentions channels as something that can be done on top of Fibers.
 [https://jdk.java.net/archive/](https://jdk.java.net/archive/)
Try from here: https://adoptopenjdk.net/index.html
use https://adoptopenjdk.net/?variant=openjdk11&amp;jvmVariant=hotspot or https://developers.redhat.com/products/openjdk/download (ctrl-f 'OpenJDK 11')
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
www.adoptopenjdk.net for direct downloads or www.sdkman.io if you want a neat command line tool for downloading and managing java versions (and other java related stuff)
&gt; I was under the impression OpenJDK 11 was a LTS release? OpenJDK doesn't have support, and as such no LTS either. Oracle and other vendors do have, including AdoptOpenJDK, Azul, RedHat, etc.
Would be good to put something into the sidebar about this here...
Yes, changes to implementations such as Jersey, Mojarra, Tyrus etc is of course allowed. I'm not 100% sure if it's just the JCP process being slow. Likely it has more to do with the IP and rules for an RI, EG, spec-lead etc.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hmm, only two links there, and one is [https://jdk.java.net/archive/](https://jdk.java.net/archive/)
Try Amazon corretto
AdoptOpenJDK.org
OpenJDK has "support" it's just not the kind of support you'd get fun Oracle. There are community security updates and patches. The OpenJDK code base is shared by all those vendors, Oracle has some special APIs nobody ever uses that they add IIRC, but otherwise OpenJDK is effectively the same as Oracle JDK.
The builds on jdk.java.net are OpenJDK builds. They are built by Oracle and are free.
&gt; There are community security updates and patches. Yes, the vendors push patches upstream, but it's not really support from OpenJDK themselves -- in a common sense of support at least. :) The patches are again built and distributed by the vendors, as OpenJDK doesn't even provide binaries.
Thank you.
It's possible, sometimes there are false detects, will check that next time I'm in there, thanks.
A lot of context in this video: [https://www.youtube.com/watch?v=94tQ4bEwa6o](https://www.youtube.com/watch?v=94tQ4bEwa6o)
OpenJDK isn't an entity, it's a project, the different vendors are part of that project and they provide their binaries
I second this
_Elegant Objects_ is controversial at best. It espouses a number of practices that are _not_ idiomatic in the Java community. It is a bag of ideas that are kind of out of left field, to be honest. The author has been around online for awhile. I can't speak to his motivations but I can tell you that the impression I get is that he is trying to build a personal empire online more than anything. I don't get the feeling that he's actually trying to help your code get better.
Before reading _Elegant Objects_ I would recommend going through the Java tutorials, _Effective Java_, and _Clean Code_.
From a technical standpoint, no, not really. I only mention it because there are a lot of legacy web applications out there, and it's good to know in case you run into them. However, you do have to consider your team's expertise when choosing your stack. If you have a team of Java developers who haven't done any Javascript or React, maybe it's better to just stick to JSPs to reduce time to market and tech spawrl.
Haha, thanks! I can't believe I left that out. I think maybe it's because I actually don't know what the .NET equivalent is. I guess that says a lot about the .NET projects I've worked on.
Nice! I'd use that.
Are you planning to compare them with [value objects](https://openjdk.java.net/jeps/169) (recently renamed to inline objects)? You can download the early access build [here](http://jdk.java.net/valhalla/).
I could give it a try, thanks.
No problem!
Netbeans and I have a long and storied history. After they suddenly dropped support for Swing, after promising to support it, I moved to other IDEs, notably Eclipse and IntelliJ. I then went deeper with IntelliJ 'Android' edition. Recenly I tried using Netbeans for some Java stuff but they dropped C/C++ support. I'm kind of on the fence with Netbeans. It's my first love but the fact is, IntelliJ is a better IDE. Such a pity, they just don't respect their users. That's just my experience.
AdoptOpenJDK doesn't backport fixes or fix bugs themselves. They are completely dependent on jdk11u or jdk8u to make changes. AdoptOpenJDK only make binary builds available.
OpenJDK and the Oracle JDK are completely functionally identical. There are no extra features in the Oracle JDK. There are several small cosmetic differences.
Sorry, what? Mergesort in Java 6 is [stable and n\*log(n)](https://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(T[],%20java.util.Comparator)).
https://stackoverflow.com/questions/1834826/it-is-a-bad-practice-to-use-suns-proprietary-java-classes Are these not a thing anymore?
No, firstly, every `.class` file encodes a class file version number in it. Java 12 is 56, Java 8 is 52. A class compiled with a particular class file version will not run on an earlier JVM. You can compile classes to target an earlier release, so you could compile a class with Java 12's `javac` and generate a class file version 52 class, but you will not be able to use any API that has been introduced in later JDKs.
Such questions belong in /r/javahelp. **Removed**
Not if you use the module system as they should be inaccessible. Any useful functionality has been moved to supported APIs. The classes themselves are still part of OpenJDK. https://hg.openjdk.java.net/jdk/jdk12/file/06222165c35f/src/jdk.unsupported/share/classes
Interesting IIRC these use to be in SunJDK now OracleJDK only.
Have you tried JNR: https://github.com/jnr/jnr-ffi This has a lot of similarities with regarding to direct memory access and structures.
I will check it out, thanks!
No, they are in OpenJDK. They have been since Java 6 https://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/sun
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That guy has such a calming voice. Nice video.
"Functionally identical" is the lawyerly language. Oracle JDK and Oracle's OpenJDK builds are both builds of the source project called OpenJDK.
It's not in-place, there's nothing in the documentation that says that. Java 6 used a modified merge sort for objects, and the space complexity for merge sort is O(n), not O(1).
Does it use DirectByteBuffers for everything (I see from the samples they are used for arrays)? They do impact performance if allocation rates are high. The direct byte buffers need to free the underlying native memory, and they do that using the finalization mechanism (not `Object#finalize`, but the JDK 9+ `Cleaner`). This mechanism impacts the GC, making the possible allocation rate of such objects way smaller than for regular objects that don't use the cleanup (in some of our microbenchmarks we've seen an order of magnitude difference in throughput).
&gt; Nashorn brought the flexibility and beauty of Javascript to the JVM. beauty and Javascript... nope.
The latest version of the JDK is 12. Unless you have a good reason to use 11 -- which means learning exactly what LTS and non-LTS mean *in the context of the JDK*, rather than assuming based on the name or other projects -- that's the one you should use.
I think Javascript is gorgeous :)
each his own I guess
Currently, a struct access directly accesses memory via Unsafe, new struct array is created via allocation with Unsafe. DirectByteBuffer with native order can be converted to a struct array by calling Mem.wrap function which reads the buffer's pointer. Currently, struct array native memory is freed with finalize. At the moment, I am rewriting to use PhantomReferences instead. These also have the advantage that automatic memory deallocation can be made optional, but enabled by default.
In two's complement arithmetic, the difference is well defined even during an overflow. What happens is that the value first becomes a large number, then flips sign, then reaches 0 and goes up again, in theory. It would obviously take very long time to happen. I'll illustrate the behavior using Perl as an example: $ perl -we 'use integer; $x = 1&lt;&lt;62; $y = 1&lt;&lt;63; print join " ", $x, $y, $y - $x' 4611686018427387904 -9223372036854775808 4611686018427387904 If it's not clear, the first value is just some handy big number, 1 &lt;&lt; 62. The value 1 &lt;&lt; 63 is double the prior one, and just at the point where the sign flips. Mathematically, the calculation's result looks like nonsense, but it overflows and the provided value is still the true difference between the numbers assuming monotonous increase. Similarly, it still works even after overflow happens, e.g. going from largish negative number to zero or some positive number: $ perl -we 'use integer; $x = 3&lt;&lt;62; $y = 0; print join " ", $x, $y, $y - $x' -4611686018427387904 0 4611686018427387904 $y = 0 is what happens when we reach 1 &lt;&lt; 64, but that value overflows so it will just be 0.
If you subtract `Long.MIN_VALUE-Long.MAX_VALUE` you won't get a negative number, you'll get 1.
In addition to other distributions which have been mentioned above, you could consider [Liberica JDK 11](https://www.bell-sw.com/pages/java-11.0.3). This is produced by Bell Soft and passed TCK. In addition to the 3 major platforms (Win, macOS, and Linux), they also provide Linux ARM and Solaris. Liberica JDK will be another option you can consider.
If you are using Linux, check your repository. It may be there. In Fedora, you can install it like `yum install java-11-openjdk`
This also comes in handy on embedded systems like Arduino where the time is just a counter since startup like nanoTime. If you want to do a behavior intermittently, rather than doing “if time &gt; previous time+ 1000”, you can do “if (time - previous time) &gt; 1000”.
&gt; Red Hat can also backport fixes from newer OpenJDK versions to older supported versions when a fix is not provided in the older upstream version. https://access.redhat.com/articles/1299013 The real problem about AdoptOpenJDK is their built without passing TCK. They tried to get the TCK from Oracle, but it seems not success yet.
Shouldn't [https://github.com/TehLeo/junion/blob/master/junion/src/theleo/jstruct/Mem.java#L153](https://github.com/TehLeo/junion/blob/master/junion/src/theleo/jstruct/Mem.java#L153) be [https://docs.oracle.com/javase/9/docs/api/java/lang/ref/Reference.html#reachabilityFence-java.lang.Object-](https://docs.oracle.com/javase/9/docs/api/java/lang/ref/Reference.html#reachabilityFence-java.lang.Object-) ? Reusing a field in Thread is pretty hacky and I found no best alternative to it myself [https://github.com/TehLeo/junion/blob/master/junion/src/theleo/jstruct/hidden/Mem0.java#L231](https://github.com/TehLeo/junion/blob/master/junion/src/theleo/jstruct/hidden/Mem0.java#L231) My best workaround is to create an interface like: ~~~ interface ThreadHasStructStack { Stack getStack(); } ~~~ And a Thread subclass: ~~~ class StructThread extends Thread implements ThreadHasStructStack { Stack getStack() { return new Stack(); } private final Stack stack = new Stack(); } ~~~ And implement `stack` to call it and fall back to a ThreadLocal otherwise ~~~ public static Stack stack() { Stack stack() { var current = Thread.currentThread(); if (current instanceof StructThread) { return ((StructThread)stack).getStack(); } if (current instanceof ThreadHasStructStack) { return ((ThreadHasStructStack)stack).getStack(); } // possibly log a warning return THREAD_LOCAL.get(); } } ~~~ There is no need for Unsafe in https://github.com/TehLeo/junion/blob/master/junion/src/theleo/jstruct/hidden/Mem0.java#L355 if you can refactor it to obtain an bytebuffer or byte[] reference because you can use a VarHandle https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/MethodHandles.html#byteArrayViewVarHandle-java.lang.Class-java.nio.ByteOrder- which is likely to be much more optimizable. I'm not a fan of rewriting the source code and find the approach incredibly hacky. I also have a suspicion you might be able to make good use of the invokedynamic bytecode to good effect if you switched to bytecode rewriting.
1. Generalize. Something like Kubernetes/AWS/SQL which is uh... kind of an apples/oranges/other oranges list of things, but that would be my vote. Becoming an expert in a narrow field or a specific framework isn't really profitable, most places assume if you know Spring Boot you can figure out Dropwizard or if you know Mesos really well you can figure out K8S. That said, ML is hardly a narrow field. I work in ML though and it gets kinda boring after a while, in five years everything you'd need to do with ML will just be an AWS service. Also, Java is not the right language for it. 2. Do something you actually like. Game dev seems like it'd be fun, maybe not as a job but as a hobby.
https://www.reddit.com/r/java/comments/brdgx5/what_to_focus_on_after_4_years/ I assume this poster is just a bot reposting content. This post itself is a direct copy of another user's self post from 2 days ago. Their post history over the last 3 days shows a ton of posts and them claiming to be both male and female and a handful of different ages in a variety of professions and includes stealing another user's/r/loseit progress post.
I've been telling people this for years during the Oracle v Google. I don't like Oracle, but google did a lot of wrong here. They essentially fragmented the java ecosystem so that 95% of code for the Android platform is not Java portable. &amp;#x200B; Many of these fragmentations were deliberate rewrites of core java api's, e.g. serializable vs parcelable. Android could have just provided serialization helpers, and used the java standard api's, but they decided to re-invent the wheel. Like you really going to tell me the concept of a Bundle needs android framework api's? They didn't think about making Pojo libraries for this stuff? However, some good has come with it, if it weren't for Oracle V Google, we probably wouldn't see such a huge investment in Dart and Flutter, despite the criticism and jokes, It's super promising, and I work for an App that has millions of mau, and we are already silently integrating flutter components without anyone really noticing. We have IOS and Android sharing components, and significantly improved developer workflows. I'm certainly not complaining with where things are going.
/r/learnjava
Sure thing Ofcourse I did Google the term out and got these links I just wanted to see if someone here has self implemented it so I could get a better insight. Thanks for help though.
Just copy the array, no need to put it into some stream only to have to parse it back out.
Huh, an 8 year gap in posting, then a lot of hanging out in CryptoCurrency... guess where this is going?
oh they already gave up on value types ? sad..
what's in a name
There is one possible error. When comparing Integers, it's not the values that are compared but the objects. When comparing small numbers you are comparing Integer objects from a cache, that's why it gives true. See for example: `Integer i = 77; Integer j = 77;` `System.out.println(i == j); // true` `i = 127; j = 127;` `System.out.println(i == j); // true` `i = 128; j = 128;` `System.out.println(i == j); //false`
Noo, they must be copying me. Programmers are always so boring and sceptical. hmm
Please, post *programming help questions* in /r/javahelp. **Removed**
If I remember correctly, that is a SCJP test question. Up to 127, the ints with the same value point to the same object in memory.
Thank you for your feedback. &amp;#x200B; Yes, reachabilityFence​() would be ideal, but requires Java 9. I suppose the ideal would be to create Multi-Release Jar to support pre-java 9, and Java 9 features as well. &amp;#x200B; Regarding the Stack, I have tried many alternatives, the main problem with Thread subclass is that you cannot subclass the main thread, neither awt thread or any other thread you don't have access to. &amp;#x200B; I tested VarHandles and they indeed seems to perform well. Once again they require Java 9. One advantage of VarHandles is that I could wrap byte\[\] to structs as well. However, there are issues: Currently a struct can by passed by reference to a method. This is implemented by passing a long value. If I used VarHandles, the object containing the data and the index would have to be passed. Due to this, I think passing by reference would be much slower if implemented with var handles.
They most certainly have not, what are you referring to?
it depends on where you live. in silicon valley there is one rate, in bumfuck alabama a completely different rate and in india it's almost free.
The rate will really depend on where you are from because taxes are different everywhere! Do some research to see if a junior could be enough to help you out too, those are a tad cheaper. Rates for Java developers van be very steep! ( steap? damn you English language)
Check with /r/forhire.
&gt; whats the typical rate to hire somebody for a small project ?? That can be 10 or 20 dollars an hour for a poor student who wants to earn some extra money to well above 100 dollars an hour for a real software developer. I don't know how extensive the tweaks are, but assume that a proper developer will calculate at least 4 to 8 hours per tweak (regardless of the actual needed time, even for a one-line-change) to account for general tasks like understanding the problem, understanding the application, communicating with you, testing and submitting the result, in addition to all the potential paperwork (contract, tax, ...) and so on. And that's on the low side.
Yes, theoretically, if the app ran long enough, it could wrap around. Good news is that the sun will swallow the planet before that happens. System.nanotime can start with any value, so it's not in contravention of the contract for it to start with `Long.MAX_VALUE - 1`, but in practice, it will probably start with either `Long.MIN_VALUE`, zero, or some number related to epoch millis. With these, your program will never actually run long enough for it to wrap.
Link to project - [http://floreant.org/](http://floreant.org/) IMO none of the comments on location effecting price are sound unless you NEED someone onsite to articulate your needs, demo the work, etc. The rate is determined by the competency and availability of the engineer. Further the challenge with professional development for something that runs your business (and I assume a POS app is important for your operations) is no JUST the change. Anyone doing the work will need to be able to correctly build and deploy the software, test (preferably automated tests) the changes, test for regressions (new changes break existing working features), and also keep up with upstream patches. For a FOSS project an engineer who can submit patches back upstream so your changes become part of the upstream project is also worth considering. So do you just need a coder to change code or a full on engineer to help with the complete life-cycle? Students and interns or random contractors can do that work, some can do the full litany of little-things that need doing, some wont have a clue, and others will need constant and explicit direction. You should also solicit the maintainers of the project. They know the project and some will take contracts for specific changes. Can you or have you articulated the changes or questions you have as posts to the open source forums? At a minimum, that will help you articulate your problems clearly and the feedback will help you get a sense of how tough the request is. Ideally, someone will post back and tell you its a config change or theres a fork that has what you want.
Couldn't have said it better.
Only relative difference has sense. Note that it is not safe to compare the results of System.nanoTime() calls between different threads. go for System.currentTimeMillis() [https://stackoverflow.com/questions/351565/system-currenttimemillis-vs-system-nanotime](https://stackoverflow.com/questions/351565/system-currenttimemillis-vs-system-nanotime)
&gt; You should also solicit the maintainers of the project. +1 for this in particular. IMHO this is really the obvious, no-brainer first port of call: these people already know the codebase and will be getting *much* more done per billable hour that an external contractor who's never touched the project before.
u/desrtfx thoughts?
Good plan. Can someone please summarize the whole in a short paragraph so that I can put it in the sidebar?
Yes, I will work something up tonight.
Thank you.
Dude, best answer ever ( everybody was great ). Really i need four things, of which two i think are bugs. The other two are just adding a new buttom ( feature i guess) and one its a tweak. Bugs: after adding a new custumer info in delivery i cant edit costumer data, like the address,after saving. Buttons are there to be able to edit. They do nothing. In product item selection i can repeat things as long as they dont have the option to select a modifier. If i add the the option ( not adding anything, just saying a modifier can be added) lt will not let me repeat the same order again or even with the same modifiers. Example: three cans of soda. No modifiers would select one: 1 soda Them repeat (+) three times. 3 sodas And so on. This is way more helpfull on other dishes with the same modifiers. Just a simple example. With the option to add a modifier, like add a to go option, but not selecting or adding anything, the ( + or - cant be used anymore ) So i would go like : 1 soda 1soda 1soda New feature: add a quantity button: if i want say a carne asada ( grill meat, we r latinos) with rice and beans i want o be able to add the quantity instead of having to repeat the order say 6 times. Quantity&gt;6 ( or whatever quantity). And lastly a tweak on modifiers, u can add a modifier that comes included on the dish at no cost, or add whatever cost with anything extra.....but in some cases our modifiers make it cheaper, but i cant add a negative amount to a modifier. Need it to drop the price. And some times, thats a good thing. Now, i know the paid version its not that expensive, and developers make money. Im just following the open source part of their project with them. I do want this to become part of the upstream. Additionally, i tried searching for a forum, but theirs its under construction with no time table as to when it would be back. And to report a bug its out of working order as well. I know the software is " as is" so o thought it would be a good project to jump into myself. Now not trying to piss anyone here, just looking for help, imma try look into the coding and learn some java, is this program more or less like a gui for a database?? it uses apache derby. it can be use for a single workstation or shared. Dishes are into the database and the gui makes it easy to order. I know there is way more to it....but the advanced features we dont really use at all. We already have another pos system and multiple workstations, but they are staring to give us trouble and their costumer service has been shit. Ive done this before, setting them up with the whole menu and settings before. Im just looking for something new that cant dump too much money into while learning something new, and actually trying to help some people along the way.
No, not with Java unfortunately. If you really want pure Java maybe lwjgl could be an option. It works for Minecraft at least :)
Learn the basic with Reactive Streams and JDK9 java.util.concurrent.Flow first. The key of those library are non blocking push pull hybrid data flow with back pressure. Generally, most old-fashioned way program are IO bounded. We can get very noticeable performance gain by warping IO bounded work into reactive stream. Find any reactive stream wrapper around IO bounded work and interoperate between them with Java 9 Reactive stream interface. &amp;#x200B; For traditional database connection, you should have a look at R2DBC from spring. For mongoDB, have a look on mongo-java-driver-reactivestreams. As you use Spring boot, you should pick Spring Reactor for serving HTTP request.
Oh, I didn't know you were restricting yourself to lower than Java 9. That makes things much more difficult. Any particular reason why? I doubt passing a reference to the context around will really cause performance problems but if it really does you might be able to get away with a page based model although without a lot of work it'd probably be slow. I did an experiment in that area [https://github.com/sstewartgallus/heaps](https://github.com/sstewartgallus/heaps) that did that sort of thing (not for perf but for compatibility with a flat memory model) but couldn't get it to vectorize so I abandoned it. But I don't think you need vectorization for your purposes. The basic idea is to have one big page tables object ~~~ static private final byte[][] PAGES = new byte[8][4096]; static int getInt(int ptr) { var pageId = ptr &gt;&gt;&gt; PAGE_BITS; var ix = ptr &amp; PAGE_MASK; var page = PAGES[pageId]; return (int)AS_INTS.get(page, ix); } ~~~ But the trick to get it working at all performantly would be to use invokedynamic and to use high level operations instead of only primitive gets and sets. Consider a simple get: https://github.com/sstewartgallus/heaps/blob/master/com.sstewartgallus.peacod.examples/src/main/java/com/sstewartgallus/peacod/examples/ExampleApp.java#L72 There are a few different things you would want to specialize on: the heap used (or context as I called it), the pointer page id, the pointed to page type, the pointed to page and the pointer page index. I got overwhelmed with tracking all the different types of things to specialize on but it shouldn't be difficult just fiddly and annoying. I feel like with the higher level working with structures you do you could better than that. Right now, https://github.com/sstewartgallus/heaps/blob/master/com.sstewartgallus.peacod.runtime/src/main/java/com/sstewartgallus/peacod/runtime/ContextImpl.java#L344 I just specialize on the mapped in page type. But for many callsites the exact pointer should be a stable constant and so it can be optimized to be as fast as a constant array index. The heap model would be the most flexible one but it's the hardest to get working fast or correctly. If at all possible I would simplify things more.
JFoeniX http://www.jfoenix.com/
Loved the looks Hated the name
if your screen/window isn't 1500px wide, the documentation on that site is cut off :/
Yes, but you can look at the github page https://github.com/jfoenixadmin/JFoenix
I second that
There is a JEP for that for runtime detection. https://openjdk.java.net/jeps/8208520
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Use only one IDE if it is possible. Try to divide your services by their functionality. Like these services for security stuff, these for client UI, these are for 3rd party. If you want to run lyour services locally create a docker-compose file for local env and put there as much as you can and run manually only apps that you developing
Intellij is the way to go. I rarely find myself needing anything else outside it to manage Docker containers and uservices. Intellij (I'm using Enterprise not sure about community vers) should be able to detect all your Spring Boot applications and create a Run Dashboard for you from which you chose which service to start/debug, ... And once that's done and you want to deploy, a docker window shall have all that you need.
I know of: - FB [Infer RacerD](https://fbinfer.com/docs/racerd.html) - [vmlens](https://vmlens.com/)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks!
Thanks!
Yes: `s.replace("ing", "");`
Here is what I came up with. Let me know what you think: **Where should I download Java?** With the introduction of the [new release cadence](https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence), many have asked where they should download Java, and if it is still free. To be clear, YES — Java is still free. If you would like to download Java for free, you can get OpenJDK builds from the following vendors, among others: - [Oracle](http://jdk.java.net) - [RedHat](https://developers.redhat.com/products/openjdk/download/) - [Azul](https://www.azul.com/downloads/zulu/) - [AdoptOpenJDK](https://adoptopenjdk.net) - [Amazon](https://aws.amazon.com/corretto/) Some vendors will be supporting releases for longer than six months. If you have any questions, please do not hesitate to ask them!
I wrote a Java chatbot that did this sort of thing about nine years ago. It's pretty rough though and has a limited dictionary
I would also add some text explaining that if you create another post asking “where to download Java, lol” we reserve the right to hate you deeply and already do even without the right being reserved.
I've never heard of one, but this would be an awesome project! I think I'm going to make this! Lol
Sounds like a natural language or stemming problem. Maybe Lucene has something for you?
In Natural Language Processing this is called stemming, which might help your search. [Here is some source](https://github.com/stanfordnlp/CoreNLP/blob/master/src/edu/stanford/nlp/process/Stemmer.java) code that does that. [Here is some documentation](https://opennlp.apache.org/docs/1.7.2/apidocs/opennlp-tools/opennlp/tools/stemmer/PorterStemmer.html) for an Apache OpenNLP API.
https://developer.oxforddictionaries.com/documentation Look under lemmas
What are you using JavaFX for, out of curiosity? I wrote something with it at a previous jobs when Java 8 was new but it seemed like it was pretty much DOA
I'm making a podcast app with Kotlin and TornadoFX, which is a JavaFX wrapper for Kotlin. https://github.com/StaticallyTypedRice/PodKatch, if you're interested.
Probably not out of the box, because the kind of stemming needed for text retrieval doesn't need to produce actual words. For, for instance, "bake" and "baking" will stem to "bak". I suppose if you have a list of known words, you can fix the stem by looking for an entry that starts with the stem.
You can use various flavours of CSS in your JavaFX app to create themes like I did in my word game here - https://github.com/gravetii/wordagam. Then, there's also JFoenix if you like material design.
I manually made a few [here](https://github.com/BlueGoliath/GoliathCSS). Only "Goliath-Envy" is actually being used/worked on but you can probably use it as a base if you want. It looks like [this](https://imgur.com/a/PdduZpa).
That actually looks really nice! I'm a sucker for flat UIs. I might fork it and add to it if I end up using it in my app!
Community version sucks
You code exceptionally well for a "hobbyist." App sounds cool, good luck!
Thank you! I try hard to research what the standards are and conform to them. This is my first time using Kotlin!
God in need a girlfriend. Its 1 am on a Friday and I'm legit interested in peoples responses
https://i.imgur.com/rQuWMMV.jpg With the kind of mobile presentation not sure I’d trust them
Stemming will split compound words.
I could be wrong but I thought that postgres fulltext search also supports stemming
Google for lemmatization. Starting point : [https://opennlp.apache.org/docs/1.7.2/apidocs/opennlp-tools/opennlp/tools/lemmatizer/LemmatizerFactory.html](https://opennlp.apache.org/docs/1.7.2/apidocs/opennlp-tools/opennlp/tools/lemmatizer/LemmatizerFactory.html) However, it won't be easy to use. Especially if You want it internationalized
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Not sure if there is some issues with my browser setting but I can see what the components look like. Like here I only see text. [http://www.jfoenix.com/documentation.html#Rippler](http://www.jfoenix.com/documentation.html#Rippler).
I also, the components you can look at the github page [https://github.com/jfoenixadmin/JFoenix](https://github.com/jfoenixadmin/JFoenix)
Perfect, thank you! Already in the sidebar in both, old and new reddit view.
You’re welcome!
If you're having a "lot" of services open at the same time you're all working on at the same time, I think the biggest issue is either choosing the wrong architecture or not splitting up the work correctly. That's not a problem an IDE is going to fix for you.
Good to read keep on posting new blogs related to Oracle in 2019
Maybe NLTK can do it. https://www.nltk.org/ But that's Python.
I'd use Java 9+ for feature I could make use of, otherwise Java 8 support can be included. &amp;#x200B; For varhandles and method definition, such as: `static void mult(Vec3 a, Vec3 b, Vec3 store); //ends up as:` `static void mult(Object a, int aI, Object b, int bI, Object store, int sI);` Compared to the current approach: `static void mult(long a, long b, long store);` &amp;#x200B; A quick test, a single vector multiplication in a hot loop, struct: \~448ms, var handles \~548ms, for paged test I created a favourable test: `public static final Object[] obj = new Object[3] {a,b,store};` `static void mult(int index);` which took \~549ms. &amp;#x200B; I think the currently used finalize/Phantom for automatic cleanup could use an improvement. And this is all because of Eg.: for code such as; static void m() { Vec3\[\] arr = new Vec3\[100\]; Vec3 a1 = arr\[1\]; //last reference to arr //... so some task with a1 //arr can be garbage collected //to prevent gc add References.reachabilityFence​(arr); //or free manually Mem.free(arr); } If a user forgets a call to References.reachabilityFence​(arr)/Mem.free(arr). The array can be freed prematurely. This is, however, a general problem in Java with external resource management.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have a feeling you might be testing VarHandles wrong. They're pretty tricky. In order for VarHandles to be properly inlined they basically have to be `static final`. Can you show me the precise code? This might be basically how I would implement mult. ~~~ static void mult(byte[] a, int aI, byte[] b, int bI, byte[] store, int sI) { int aVal = (int)AS_INTS.get(a, aI + ALIGN_OFFSET); int bVal = (int)AS_INTS.get(b, bI + ALIGN_OFFSET); AS_INTS.set(store, sI + ALIGN_OFFSET); } private static final VarHandle AS_INTS = MethodHandles.byteArrayViewVarHandle​(int.class, ByteOrder.nativeOrder()) private static final int ALIGN_OFFSET = ByteBuffer.wrap(new byte[0]).alignmentOffset(0, 8); ~~~
&gt; You will require things like renaming, refactoring, jumping to declarations and definitions, jumping to use points. all editors have lsp protocol interface nowadays. You just have install lsp server for your language.
Hm I did not know that.
Go with Java Web, if you are interested in using any framework, checkout spring. STS has good support for spring.
If you are aware of maven or gradle you can make a maven or gradle project they help manage the dependencies (importing jars required for the project) Or you could create a java project here you'll have to download and include the jars required in the java build path To build restful services you'll need a framework like jax-rs or spring-boot Let me know how it goes, even I am a junior developer learning these things
Thanks, I managed to fix it, passing of extra arguments is not a problem now, and I get comparable performance to Unsafe if I optimize index calculation. &amp;#x200B; I checked the implementation of VarHandles, and it does plenty of checks, also it uses UNSAFE.getIntUnaligned, and still manages to be fast on my CPU. I suppose I'll try to reimplement it using var handles. Optionally I can implement both and then compare. Passing an extra argument on stack will also solve the finalizer/cleaner problem.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bsvqdq/arraylist_in_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What part of **do not post tutorials here** is unclear? **Removed**
You ever use Eclipse or Intellij?
What do you think using a IDE or code editor?
nope I didn't
I prefer code editor with other langauges but with java I notice everyone I know uses IDE.
Almost like there is a reason for it.
It doesn't matter what tools one uses. All that matters is the end result.
You should definitely try one of those. I'm a big fan of Intellij but Eclipse is a close second when it comes to writing Java
Netbeans and VS Code are not comparable. The former is a full fledged IDE, the latter a text editor with plugins. They cannot compete. For Java, I'd rather use Eclipse (my personal favorite because I've spent most time with it) or IntelliJ (Community Edition is free). I never liked Netbeans.
I work on a large (\~2 million lines) Java application and I usually use IntelliJ. I tried Visual Studio Code with the Java language server thing and it... did not run well. It took like 30 seconds for autocomplete and \~2 minutes for "Go to Definition", both of which are instant in IntelliJ. I can't speak for how it runs with smaller projects. &amp;#x200B; This was several months ago, so it might have improved since.
I’ve tried to use VS Code to replace IntelliJ for me, but that idea didn’t last more than a day. It just does not compare to a full fledged IDE. - It doesn’t have great debugging support - The refactoring was lacking and not feature complete - No auto importing or quick importing of packages - Doesn’t look up versions and artifacts for you while editing your POM - Autofixing of certain compiler issues or inefficiencies is lacking This was months ago, perhaps I missed certain plugins or maybe these features are available now but honestly, all of that is available out of the box in IntelliJ, I imagine it’s the same with NetBeans or Eclipse.
Sorry but what a stupid comment, you could write a full application in the windows notepad editor and compile it in a terminal or decide to use a decent IDE/code editor. Would you still argue that the tool didn’t matter for the end result?
Quite an extreme example but I suppose I would. I just get tired of the elitists who look down on others for their method of choice.
Download IntelliJ and Eclipse, decide between those two. I prefer IntelliJ, I pay for the Ultimate version and their support is very good overall. I think the features and overall usability is superior to Eclipse (I switched 5 years ago after being an eclipse user for 10 years). Eclipse is a very good IDE, but it can take a very long time to have anyone even look at a filled issue (my 2 filled issues are still open 7 years later, ymmv). That aside, you probably won't have any issues with either, so pick the IDE which feels better to you.
If you install the Java package for VS Code, it most definitely will import packages and autocomplete pom artifacts. It is definitely lacking in other ways, that’s for sure.
Good to know if I try it again. VS Code is a great editor, but it’s young. I imagine it will be improved with time.
I haven't used Netbeans on a regular basis in a long time, but I have tried VS Code as a replacement for IntelliJ. To all the "VS Code isn't an IDE" comments, it really is at this point, but perhaps not quite as feature complete. I used the [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack). Loading a maven project was fairly straight-forward. No complaints there. Attaching the debugger to GF took a little work with the config. Debugging a command line app was fairly simple. The debugger has the basics covered, but outputting the command line wasn't intuitive. Inspecting variables at a breakpoint works fine. Running tests is actually kind of neat. I was using testng on my project, and it found the tests w/o much effort. You can run individual tests from the file or the whole file (like you can in IntelliJ), and IIRC, you can run in debug from there too. Each test when run will show the pass/fail at the test's location with a green checkmark or a red x. This was one of my favorite features. I like the VIM emulation in VS Code wayyyyy better than IdeaVIM. It will act as VIM when you want it to and get out of your way when you don't. I still can't figure out how to rename something with IdeaVIM enabled. Renaming in general in VS Code works fine, but if you rename a class, the file and the filesystem get in a weird state where the file won't save. You can work around this, and while a pain, it wasn't a deal-breaker for me. Creating Java files in VS Code isn't great. There's probably a way to set up templates, but I pretty much had to create classes from scratch with little help from the UI. Code completion is pretty much on-par. The hints are very similar as well. I like the colors better on VS Code. IntelliJ started officially theming recently, but I still run into bad colors for things. I don't want anything looking brown or a pukish green. My biggest complaint and the reason I'm not still using VS Code for Java is the class-inheritance hierarchy navigation. You know, when you have an interface with multiple implementations? How do you navigate through that? I have to use VS 2013 for other stuff at work, and it also sucks at this, but at least there are extensions -- or you can kinda find your way around looking at references. [I couldn't find a way to do it in VS Code](https://github.com/microsoft/vscode-java-pack/issues/152). IntelliJ has this nailed in a way I haven't seen anywhere else -- and in the free Community Edition no less!
For my office work I had to use eclipse but for my personal work which involves more java, I tried eclipse and netbeans and didn't like them both. Then I tried IntelliJ and it's perfect for Java. Lately, I have been trying to use vs code for Java and it's quite good but not up to par with IntelliJ. The remote debugger is horribly slow and you cannot navigate by symbols in a decompiled file. Other than that it's pretty neat.
No shipilev.net?
for android dev intellij is fine but for serious multi projects workspace with 1000s of classes. eclipse incremental compiler is a must. cannot live without it. and NO it does not work on intellij well at all. eclipse perspectives rock. eclipse problems views rock because of split second incremental compilation. i hate per project views. workspaces project mounting is sooooooo much better.
Yeah, most if not all of those features are available using the official Java plugin suite. I use vscode as my main editor, even for Java, and absolutely would not if I couldn't do these things. It even supports remote debugging, which I was doing to a jboss server just yesterday. The maven support could be better, but due to some firewall issues at work that I've never been able to figure out properly the completing of artifact ids and whatnot doesn't work in intellij either. It can be a bit slower than intellij to do auto imports and method completion, but it makes up for it by being faster overall, being a better text editor, supporting more languages. It's also orders of magnitude faster on my home pc compared to my work laptop because it's not a very fast laptop and the antivirus is a bit overzealous at times. It could use more warnings in code about things like deprecated methods or better ways to write code (e.g. Use string builder instead of string concatenation).
No, not really. Was working on a ~150k LoC project yesterday and ended up getting tired of waiting. Just switched to intellij for it. That being said, I much prefer vscode for much smaller projects. Anything less than about 50k LoC and it handles it great. We have a lot of small projects at work that I end up switching between a lot, and intellij makes that painful.
For smaller projects, there is nothing wrong with using VSCode. Like if you are just doing one or two source files. Or like 10 small source files. But for serious Java projects, I would use IntelliJ/Android-Studio. I use Vim for everything except Java/Kotlin. IntelliJ is just so nice. You need more RAM for it, than for other programs, but VSCode and Atom(which I prefer to VSCode), also use more RAM than I'd like, so using IntelliJ is still fair.
what is the necessity of incremental compiling? it's radically better than just cacheing (e.g. gradle v5.4)?
Never had any problem with incrementally compiling in intellij and I use it professionally for many years.
I highly recommend IntelliJ
Yeah this comment is nonsense. Intellij is built to deal with many tens of thousands of classes flawlessly. Good luck trying to do a find or refractor in a project the same time in eclipse.
For java: IntelliJ &gt; Eclipse &gt; Netbeans &gt; VSCode. I so desperately want VSCode to have all the functionality required to write full-blown java. Its just not there yet. Skip straight to IntelliJ and wait a little while for VSCode catch-up.
Our members are involved in 8u and 11u upstream though - we have a 'fix' upstream policy :-)
The op asked about tools.
That only addresses the code navigation part of it. There's also debugging and profiling, integration with source control, and some editors have collaborative editing now.
I think unless you are also tying into Microsoft libraries, like you have Microsoft c++ in the chain it’s a weird choice. Netbeans isn’t even considered the top ide by use, jetbrains IntelliJ and eclipse are vastly more popular, I would use one of them first.
Apps that use data from other websites is a pretty big and open-ended space. Can you imagine a more specific kind of data or websites to focus on? A project is going to be most successful if it focuses on something you’re deeply interested in. Whatever problems you would encounter along the path toward completing the project would be solved, by you, purely out of interest. It’s the best way to learn.
Terrible comment
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; That only addresses the code navigation part of it. it addresses all &gt; There's also debugging and profiling, integration with source control, and some editors have collaborative editing now. most editors have it. Definitely Emacs and Vim discussed here do have it.
&gt; it addresses all &gt; What language(s) do you program in? Did you see what IntelliJ offers in terms of static code analysis for example? How do you get that in Vim or Emacs?
I program mostly javascript, python and Kotlin/Java. I use mostly VS Code and Android Studio. It is very comparable in features.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The best thing is to use Eclipse instead of NetBeans. Also go for IntelliJ Idea Community and than switch to it's paid version if you need more options for web and enterprise development.
OP is not asking for stemming. Stemmers will not always output actual existing words, sometimes just garbage, but the same garbage for various derivations of the word. If you need a base form, then you want something which can handle lemmatization - in my admittedly limited experience you need specially prepared dictionaries for that.
I would take Eclipse or Intellij over netbeans and I would definitely take those two over VS studio code for Java. Intellij and Eclipse are just so strong for Java.
I can't recommend IntelliJ Community Edition strongly enough. It was pretty easy to transition to it after having used NetBeans for years -- there's even an option to set up NetBeans-style hotkey mappings. FYI, if mobile dev is something you might be interested in, Android Studio is just IntelliJ under the hood.
VS Code is slow AF.
Unfortunately voice recognition is quite a complex task. Most software that does it well will be utilizing the google speech API or something similar and proprietary. Stuff they won't let you just have the code for.
I've tried it a few months ago and I could say it was pretty annoying. Three weeks ago I gave it another try and I could see how much it improved and now I've un installed all my other IDEs.
How much money are you willing to spend? There are great voice recognition libraries out there, very capable, and if you have a decent computer they may even be usable in real-time. Not free though. If you're rich then check out Nuance's offerings.
Lol. I like vs code. But even tho I work for ms I use jetbtains Rider for c#.
Can someone tell me why eclipse generates it's own binaries for maven projects? I don't understand why it can't just her the target director for a module like a goddamn sane compiler
Intellij all the time, all the time.
I expected to see [Java Annotated Monthly](https://blog.jetbrains.com/idea/tag/java-annotated/) somewhere
PocketSphinx is the go-to offline speech engine, but it's pretty flaky with loud environments. I developed a NodeJS speech recognition library called [Norman](https://github.com/ajbogh/norman), but I never got it working as well as I would have hoped. I would need much more time or someone smarter than me to help.
this is reddit and it's illegal on reddit to say that eclipse is good
If you're making some big breaking change to a large module, it can let you compile and run some test while ignoring errors on files you haven't finished with yet. That said, you can easily use the eclipse compiler (or several other options) instead of javac in intellij by just changing a setting.
I can not recommend Intelij enough. I have used VS code, although not to write Java but it was really good for Xamarin. I would like to know why Intelij is not suited to you or your project?
I had some successes with Microsoft Speech SDK, but that's for .Net and Windows-only. Do you need arbitrary dictation, or do you have a fixed grammar?
Dude, my current Eclipseworkspace has 337 projects. (projects, not classes)
Uh, it does for me. Remember to import a maven project, not just a java project.
I can't imagine that'll work very well. Also, why not just use intellij idea? It's also completely free.
Actually there is an ”Implementations Code Lens“ setting that, when enabled, will show you a link to the implementations above an interface declaration. Also, Type Hierarchy support is planned and coming soon.
Obvious omissions include &amp;#x200B; \- [https://shipilev.net/](https://shipilev.net/) \- [https://stuefe.de/](https://stuefe.de/) \- [https://cl4es.github.io](https://cl4es.github.io)
Why is extracting code into a separate method (or benchmarking actual code, for that matter) a bad thing to do? The code in the method should be inlined into the benchmark very early during the warmup.
Why do you worry about 2GB of RAM? I was used to work on 8GB and quickly extended to 16 and new laptop is with 32GB for Vagrant/Docker/K8s labs.
Hi, it's not about extracting code into separate methods but about loop optimisation. &amp;#x200B; You can find detailed description here of this pitfall here: [https://github.com/Valloric/jmh-playground](https://github.com/Valloric/jmh-playground)
With intellij you can have several projects open in one intellij window. I’m not sure if other ides support this though.
The examples in your blog post ([Good.java](https://Good.java) and [Bad.java](https://Bad.java)) should be identical after inlining. &amp;#x200B; I think the valid argument made about loops in the jmh playground you linked there is different to the point you are trying to convey. The point made in jmh playground you need to be very careful benchmarking unit operations within loops and dividing measurements by the number of iterations, but because the loops get optimised, so the cost of the loop is smaller than the sum of the costs of its parts measured in isolation.
Definitely give intellij a try! Community edition is fee.
Thanks, I'll update my post with clarification.
&gt; upgrade to the latest version of Java (12) and be prepared to upgrade every six months; or upgrade to the latest LTS (11) to give yourself up to three years to think about your next upgrade. One very important thing to point out is that the six-monthly "upgrade" and the three-yearly one are of a very different nature, and are both very different from the old upgrade model, because the feature release path is more gradual than the old model, and the LTS path is less gradual than the old model. Upgrading every three years will be much harder than under the old model. The LTS updates do not generally include what was known as a "limited update" under the old model, which prepared the ground for big features in the old major releases, and that themselves were big features (G1 was introduced in a "limited update" release). Moreover, the OpenJDK development process ignores LTS (which is a service offered by some companies), and so the deprecation process works as if they didn't exist. Deprecated features can be removed after one version with a warning, but that version is most likely *not* LTS, so features can disappear without warning between LTS versions. This was not the case under the old model. Therefore, those who wish to upgrade from one LTS version to the other should expect a less gradual, and a more difficult process than before. The feature release path is designed to be the cheaper choice, for those who cannot plan difficult upgrades long in advance, and wish to spend less effort on upgrades. While there is nominally an "upgrade" every six months, this is an upgrade most people are already used to from the old model, as the new feature releases are similar in size to the old six-monthly "limited update" releases. And because the new feature releases spread out not only implementation features but also spec features, the process is even more gradual, and the result is that if you follow this path you will never have to do a major upgrade again. What is also important to understand is that to remain secure, *both* upgrade paths require that you update your JDK every few months, and those updates -- be they feature releases or patches -- absolutely require full regression tests. There is nothing that suggests that these tests are more required for a feature upgrade than for a patch, as their probability to break your program is [roughly the same](https://www.reddit.com/r/java/comments/ba79hh/beware_of_computation_in_static_initializer_much/ekb4s3s/). The most important thing to know is that the *meaning* of feature releases and LTS cannot be understood by comparison to other projects or to the old model. It must be learned by actually studying what the versions in the two different paths contain. Choosing not to follow the default, cheap path of the feature-release "train" is an important decision, and it best be made after spending a day or two to understand what the two new upgrade paths actually mean in the context of the JDK.
It's unnecessarily in another language (Dart) from Google with optional static typing. Nope...
Google Dart is a big downside as far as I'm concerned.
I see, PhantomReferences will definitely help if the client code frees the native memory explicitly. If they don't — the penalty might be even worse than with \`#finalize\` (it was in our measurements. Also, IIRC, \`Object#finalize\` has been deprecated in 9, so not worth to rely upon).
I would be more concerned about React Native than about Flutter.
I'm still on a 4GB system unfortunately.
I recently developed an app in Flutter. Static typing is no longer optional in Dart and non-nullable types are coming. I'm really looking forward to it, because right now it's like Java without primitives: even booleans can be null. What Dart does well is concise and readable construction of data structures: optional \`new\` keyword, named parameters, collection literals, multiline strings, cascade operator (apply many operations to a given instance), [spreads and element syntax](https://medium.com/dartlang/making-dart-a-better-language-for-ui-f1ccaf9f546c). That concision is an official goal, since Flutter has no templating language, all UI code is written in Dart. The API would have to be different for Java, losing some of the appeal. There are some warts though: Some APIs feel like leftovers from the optional typing era, the ecosystem is small, enums suck in comparison to Java, no reflection because of AoT compilation, reified generics get in the way when reading nested JSON without up front code generation (can't just cast to the appropriate type like in Java, have to copy everything). Flutter is nice because Google reimplemented all of the Material Design spec in Dart (and recently some iOS widgets). So platform independence essentially only requires a window to draw things in. I'm personally not a fan of material design for desktop apps though (lots of empty space), but that will depend on the domain. I'm not an expert in JavaFX, but the binding model felt very complex to me, Flutters React based approach is much nicer to work with in my opinion.
Jetty HTTP 2 support.
ZGC/Shenendoah low pause garbage collection. Pauses are a giant headache for operations, especially if microservices are in play where the odds of a customer request hitting a pause in SOME microservice that the request fans out into go up.
I don't think they made a clear enough point of the drastic changes in licensing JDK 11 and onwards, and possibly even recent updates of JDK 8 for any production use. Elsewhere: &gt; [So again, bottom line: if you are using Java for production purposes (whether "commercial" or not), the new limitations apply to you. You cannot use Oracle's Java 8 updates beyond Jan 2019 for free, and you cannot use Oracle's Java 11 (other than the openJDK implementation) for free.](https://www.carehart.org/blog/client/index.cfm/2019/1/1/how_oracles_java_change_applies_to_any_production_use) It seems the only safe path is to never use these affected releases of the Oracle JDK. Instead, be positive to use the OpenJDK, or possibly another implementation, and of course check the terms of whatever you choose.
Do y'all pronounce it "deck" or "DQ"?
Not having to do it later. Keeping up to date in small jumps is better than one massive leap later. Especially at larger companies, I can get a JVM update in production easier if I do it more frequently.
What do you do for MS
Best way I saw so far to implement fallback logic. Cache is empty? Refresh from live service. Is response empty? Try to simulate it. Not possible? Show error message &amp;#x200B; [https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Optional.html#or(java.util.function.Supplier)](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Optional.html#or(java.util.function.Supplier))
DQ
Because `jlink` only works properly with modules. Modules don't solve any problems we're currently having. They impose a ton of pain on an otherwise functioning codebase. But we're going to have to go through all of that shit if we want to be able to continue shipping a combined executable, as support for all the other approaches goes away.
Deck
The article's use of raw types annoys me.
&gt; Microsoft Speech SDK A related mention, which supports Java (and other programming languages) and runs on Windows, Linux, mobile is Azure's [Speech SDK](https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-sdk).
Not enough SQL for my taste
Yes. Oracle has recently open sourced the entire JDK, so that now Oracle JDK is an OpenJDK build. This means that the JDK is, for the first time ever, completely free and open source (before JDK 11, it used to contain some proprietary and commercial features, whereas now it's 100% free). So the JDK is offered under two licenses and two names: the non-free Oracle JDK for Oracle support customers, and OpenJDK for everyone else.
just use jjwt: https://github.com/jwtk/jjwt lite and easy to use
 New http client seems nice.....
Unescaped `&lt;Integer&gt;` was interpreted as HTML tag
It looks like in your [submission](https://www.reddit.com/r/java/comments/bta3i5/jmh_microbenchmarks_for_slf4j_logging_using/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
yes
Somebody who makes more money than I will tell me to do so.
For me it was out of the box container awareness
The most annoying thing, by far, about ArrayDeque is that it has no .get(idx) method. It could have. It would be an O(1) one-liner. But it doesn't.. ???
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My guess is that making random access to a deque is antinomic to its purpose. It's a safe guard against misusing a deque. You could see it as a kind of negative api.
Americans: DQ Brits: Deck
Just curious; Do you use CI for this? And if so, do you also test early access build this way?
Canadians: deck eh
Thanks for bringing a fresh perspective into this discussion!
I'm British and I wouldn't call it 'deck'. It's a double-ended-queue, so I'd shorten that to de-queue (or 'DQ' as you've written.)
Seems like it would be breaking the abstraction.
I was just playing on the pronunciation of cheque :).
Isn't it defined somewhere in specs? AFAIR, I learned to pronounce it as deck while I was reading some official docs.
Yes, it is mentioned [here](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Deque.html).
Project Valhalla probably will.
Security updates
But you already have that in Java 8...?