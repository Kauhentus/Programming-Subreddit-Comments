Inside the CPU registers; sure. But NOT in memory. Its easy enough to test: check memory usage of your process right before and after allocating a large array of shorts vs a large array of ints. 
You could choose [wkhtmltopdf](http://www.findbestopensource.com/product/wkhtmltopdf) 
If you select any link, then license and other details are displayed.
So i would just use the copyValueOf method to convert the array into a string, or would i convert into a string in a different way?
Cannot seem to take the c array and convert it into a string
There is more. A lot more. Keep in mind that e.g. "John,Smith" is a single column - it's a text column where the text happens to have a comma in it. But without the quotes John, Smith is 2 columns. For extra fun, remember that a text column can even have newlines in them, and consider how to handle a text column where the text also contains quotes. As .csv files are often exported from other tools, e.g. Excel (and you would not believe all the oddities and garbage people write in their Excel spreadsheets), based on the locale and other settings, you might get various encoding in the actual text, and even the .csv file might not be comma separated but instead separated with a semicolon. Existing libraries might not handle all the caveats, but they will handle more than your own code. **Finally, Please read** http://tburette.github.io/blog/2014/05/25/so-you-want-to-write-your-own-CSV-code/
The problem is that it has to be converted inside the mult method, bc that is where c is
Purchased my upgrade this morning :)
In GB/s, [Zero-allocation Hashing](https://github.com/OpenHFT/zero-allocation-hashing) CityHash impl processes 5-6 GB/s.
I think they're fine for stuff like if (i == 0) return; In any other case, especially if there is nesting going on, I use brackets all the time every time. 
Keeps saying 'you have the latest version' on my 'check for updates...' :(
&gt;The debugger, a core tool of every developer, has also been improved in a number of ways. Now it shows variable values in the editor right next to their usages. It also offers a new Show Referring Objects action, and supports lambda expressions in the Evaluate expression dialog. YAY
The most important thing to know is that CSV is a "de facto" standard, meaning there's no global standards organization publishing an official CSV standard. So you might export your file using commas as delimiters (the C in CSV), but another might expect ; or | instead. Also, as others pointed out, you need a way to escape your delimiter if it appears within a value. And some CSVs use the first line to write column headers. There's no "magic" to CSV, but there is a bit more if you're really wanting to dive into it. A library like Apache tries to deal with all possible ways to write and read a CSV.
Does this get major upgrades? IntelliJ kinda auto-magically upgrades little releases, but big releases are always a pain.
Java is a real programming language while Python is for kids and shell scripts
* Library support - Java has been around for a while, and there are *tons* of matured, well documented, libraries available. * Community support - Lots of Java devs out there to help. * Business acceptance - Not to say businesses don't use Python, but you won't be building any large applications with it. * Acceptance of the latest versions - (This is more of a jab at the split between versions of python)
thank, very helpful
i play minecraft from time to time, but im not pleased with its performance, i know its java and not my laptop..
ohhh snap! thank anyway
Yeahâ€”but games with better performance are written in C++, not Python.
You will get some more detailed answers but basically for a simple one man website Java is not what you want. When you get into a large enterprise web application (database, forms, lots of user interaction) then Java shines. It makes it easier to work in a large team as well.
Well, "weak" and "complicated" are subjective and vague, so I'd ignore them. Java isn't "awesome", but that doesn't matter. Here's a dirty little secret for you if you're at all interested in writing software for a living: You will seldom be in charge of what technologies you use on a project someone else is paying for. 
It's nonsense, by the way. Python has some very real application.
Sweet deal. I just got my team here to upgrade to 13.1.5, time to upgrade again!
Thanks! I am using Hibernate 3.3, C3P0 and Stripes. I have been planning to upgrade to Hibernate 4 and expecting huge problems.
If something is "complicated" it usually means that it has more capabilities than what you're comfortable using at the moment. 
I saw that, but didn't find a good OGM (Spring Data OrientDB seems dead, not commit since 2 years). 
JVM is awesome, Java is not.
I just pay the $99 yearly subscription and get the upgrades whenever they come out. $100 isn't much considering how much physical time I spend working in IDEA each year...~~plus my company pays for it~~
woooooot. can't wait for that inferred nullable chunk for other methods. that's going to be awesome. 
So first of all when you have limited experience with a particular tool set or tool chain its easy to make generalizations about any language and you should try to avoid doing that unless you can state specifically the issues you have with a specific language. I've been a professional software engineer in aerospace for more then a decade now and the language you use almost always comes down to the kind of problem your trying to solve, the budget you have, what already exists and the experience of the team. Also realize that the important part about being a software developer is to develop good problem solving skills, learning proven design patterns and good software design because these things you can take with you to any language or framework that you end up using. Now to answer your question, Java is a great language for a wide variety of problems especially on the server side. It has a great set of IDE's, a huge library of frameworks and api's to accomplish just about anything and the platform independence is an added bonus. So first take a look at what your trying to do or what type of work you want to be involved in professionally and that will help you better understand if Java is something you should learn or not. 
You are looking at the site for the old version of the plugin. The new one is here: http://tomcat.apache.org/maven-plugin.html I'm not sure when they are planning tomcat 8 support though. 
Hmm, the console output when a program finishes no longer works, anyone else have this issue?
Java is neither weak nor awesome. Java is a useful tool, and one that has let me pay my mortgage for many years now. It is a solid tool for expressing many object oriented design patterns, and it enjoys wide support. Performance is adequate or more than adequate for the vast majority of information processing purposes.
You could try that. I'm not familiar with that method but if it takes in an array and returns a string of the elements then it should be good :) 
I think you meant to reply to /u/geodebug...
Going mostly from memory here, but I think if you change unpackWARs and autoDeploy attributes of the Host tag to both be true then the wars will be unpacked and deployed as soon as they are detected. See the [Tomcat documentation](http://tomcat.apache.org/tomcat-7.0-doc/config/host.html#Common_Attributes). I don't see an actual question here though, so I'm not sure if this is what you're looking for.
&gt; $100 isn't much considering how much physical time I spend working in IDEA each year...plus my company pays for it. This is a license violation.
Then Youtube and Reddit are not large ;)
Hmm, ok, well then I simply won't turn it in for reimbursement. I've been an IDEA user since almost the start in 2001, both as an independent contractor and as someone working for a company. My current company doesn't force tools on me so I can use whatever I want.
There is something called Titan... it is open source and runs on Cassandra and HBase and berkelyDB http://thinkaurelius.github.io/titan/
https://github.com/StartTheShift/thunderdome provides some sort of OGM...
You're a script kiddie. Stick with Python for that. Most of java's disadvantages for throwing something together quick become advantages once you reach the scale of huge codebases worked on by dozens or more programmers. 
Orangesapples7: Please post an example of how you see your completed program running. For example, what prompts are displayed to the user and what does the output look like after the program processes the inputs. Visualizing what your completed program looks like before coding it will help you better understand how to develop your code.
YouTube's written in python? Didn't know that. Do you have a source?
Scala programmer detected. :P
Relevant: http://www.reddit.com/r/java/comments/2kviab/zeroallocation_thoroughly_tested_implementation/
I can only post links to /r/programming. I cannot post questions. I dunno if that is everyone or just me.
google it
I was going to recommend this site. I just finished the tax calculator program. Maybe if you write that program we could compare our code. 
Disclaimer: I'm 100% in the static side. Let's play dynamic devil's advocate * You type a lot less when you can skip type declarations for variables and objects (Java, specially before 1.7, is incredibly verbose. Haskell, Scala, F# or even C# are more statically typed than Java and have less verbosity) But in any dynamically typed language you type less code and read less code. * Metaprogramming is way more flexible, clean and powerfull and you can skip lots of code duplication using a dynamically typed language. Do something like "copy all fields with the same name from object A to object B" is horrible in java, trivial in javascript. * Personal anecdote here: I was introduced to TDD in a talk given in my university by two guys doing the same thing (test-fail-fix-test-fail-fix...) at the same time, one using Java-Eclipse, the other one in some Smalltalk environment I can't remember. I love Eclipse, but it really looked like the dumb brother. I don't know if Smalltalk can ever be used by normal people in a normal business application, but the speed of development, the lack of pauses....you need to see it. Nothing like that exists in the statically typed world. That said, I agree with you, I prefer static typing, even for little projects. But you should really ask someone on the other side, this is Java. Ask in /r/ruby or /r/python or even in /r/clojure and people will give you more and better reasons. They are wrong, of course, ;-) but can make a point or two. 
&gt; In Java you find yourself doing a lot of casting to keep the compiler happy. For example, ((Map)((Map)a.get('b')).get('c')) instead of a.b.c That's not because of static type systems, that's because the types you're using are bad.
As a person who programs in Python for a living: I have no fucking clue. Some pros of Python, not all strictly related to dynamic typing: * Metaprogramming is really easy * Very nice, clean syntax (multiline strings, map/'dict' literals, array/'list' literals) * Deploying doesn't require compliation, which means while in Java you might shell out for JRebel licenses to 'hotswap' code while you're developing, in most Python frameworks it just kinda comes with the territory for free * Very easy to learn and get started, no scary compiler errors * Very active and social communities (check out /r/python or /r/ruby or even /r/perl, which generally have interesting discourse, compared to /r/java which is usually like "How do I do for loops" or an article about JAXB with zero votes or comments) * Very focused on clean syntax, including supporting tools (i.e. something like Maven, while nice, would get heavily ridiculed for the overly verbose syntax in pom.xml) * Again, metaprogramming. It's trivial in Python to write a function that loops over the attributes of an instance or introspects the docstring (Python equivalent of Javadoc) for a given thing. * Very specifically Java vs Python: Python, although slower, is much lighter weight. The Python SDK is much smaller, python.exe is tiny and starts much faster than the JVM. This makes it much better suited for scripts (which may sound obvious, I know, but nowadays since it's used for everything I figure it bears repeating). The whole Java compilation/release cycle is heavyweight for what might end up being a 40 line utility that you leave in `~/bin` That said, here are some cons: * As mentioned, IDE support is spotty at best * Your function signatures can be next to worthless. `frobdicate(*args, **kwargs)`? Hmm guess I'll play around with pdb for an hour trying to decipher this undocumented mystery function's various purposes and combinations. * If you don't catch typos in unit testing/QA, they will live on into production, which in my opinion is pretty laughable, honestly * Packaging Python *apps* is never straightforward. Packaging libraries for release on PyPI isn't so bad but Python has no equivalent to `.war` * Seriously who wants to work in a 100k+ line project where ANY line of code can arbitrarily modify the "layout" of any class!? You can do some absurdly dumb things in Python (although that's true of Java and any other language, I suppose) That said, in writing this and reflecting a bit more... Ultimately I think what really makes dynamic languages so popular right now is how easy it is to get started with them. Even with a good grasp of JavaSE, if you don't know the Java ecosystem very well, it will be a WHILE before you really understand how to get a simple "Hello world" MVC webapp going, complete with persistence and modern templating and all that jazz. Meanwhile in RoR or Django, you have all that and more and are busy working on whatever fun features you can think of within an hour or two. Only a few months and 20k+ lines of code later will you realize what kind of hell you've invented for yourself.
&gt; If you don't catch typos in unit testing/QA, they will live on into production, which in my opinion is pretty laughable, honestly Just wanted to jump in and say, with JS, you can do JSHint/JSLint, which will catch a lot of static errors for you, without unit tests.
I write a lot of JavaScript and C# and Java. I think there are a couple of reasons I prefer working in JS: 1. The lack of stuff like go-to-definition encourages you to focus on good, concise architectures and clear and logical APIs. 2. The time-to-functioning-code is very low because there is virtually no setup time/boilerplate to worry about. 3. Debugging code is simpler 4. JS has very simple notation 5. Building custom types in JS is easier 6. JS is better positioned than any other language for web interaction. In static type languages you have to sometimes do quite a bit of legwork just to get something like JSON&lt;-&gt;Object mapping Finally, I'll add that there are many good JS text editors that are basically IDEs. I have Sublime Text setup with some plugins that integrate testing and build tools to the point that it's basically an IDE, it just doesn't support code completion of your variables across files. I feel like with Java or C# I have lots of tools but I need all those tools to function effectively, whereas with JS you can give me a text editor and I can do anything.
I'm having that issue too. You should be able to work around by submitting via http://www.reddit.com/submit
&gt; Very active and social communities (check out /r/python[1] or /r/ruby[2] or even /r/perl[3] , which generally have interesting discourse, compared to /r/java[4] which is usually like "How do I do for loops" or an article about JAXB with zero votes or comments) This is very interesting, I'm not familiar with those communities myself but does anyone have theories on this? Is it really because of the language that there are less "interesting" things to talk about? I'm not saying this isn't true, I love Java but it is quite... straightforward (or boring). Could it also be that the users involved in Java are different demographics? One thing that kinda sticks out to me is that Java is such a broad platform, I do EE7/JSF/Primefaces development everyday but I see almost zero topics on those, most people asking questions seem to be college students drawing JFrames or some other totally useless assignment.
Because people don't like being told they are wrong. They would rather be wrong and not know than to be wrong and be warned by the type checker. Ignorance is bliss. 
I have worked more than 10 years with C, Java, C# and ActionScript (static typed languages) but in the last 3 years I have been working with Ruby. These are my "counterpoints": &gt; Conversely, the more dynamically typed the language is, the less I am using an IDE and the more I am using a text editor This is a personal choice of yours. In the case of Ruby, I've used RubyMine for 2 of the 3 years I've been programming in Ruby, and it is *really* good. &gt;. Of course, my productivity plummets at that point. Refactoring becomes more difficult and more reliant on unit tests to ensure they are done properly. Refactoring via grepping is a joke. Refactoring is quite simple with RubyMine it supports class, variable and other method renaming. It also supports extraction of code to separate classes and several other (Copy, Extract Constant, Extract Field, Extract Method, Extract Module, Extract Parameter, Extract Partial, Extract Superclass, Extract Variable, Inline, Move Refactorings, Pull Members up, Push Members down, Rename, Refactorings, Safe Delete) &gt; Also, following code paths gets more difficult as well because I can't simply "go to definition" with a single key combo. No problem doing that in RubyMine. Additionally I can "search usages" and other similar operations. &gt; Lastly, dynamic code is probably always going to be at some sort of disadvantage speed-wise because it is dynamic. That's definitely true. Another disadvantage that I have seen while coding dynamic languages is that there is absolutely no way you will survive without unit tests. Basic stuff like a simple variable typo, or worse yet (in ruby) a symbol typo would not get detected until it is too late. It is alway pretty comforting to see your code is compiled to have a "basic sanity check" (the syntax checking of dynamic languages is not the same) Nevertheless, what I have experienced is that with Ruby i have faster development times, it allows for some really interesting metaprogramming which makes a lot of programming constructions very easy. It is only after you "grok" a dynamic language that you can see their advantages, which are more related to what you can *do* with them vs how "comfortable" you feel while programming. I still miss some of the "security" of Java or C#
One thing I've heard is the idea that people use Java at work and then come home and want to work with python, ruby, go, etc. Java isn't as "fun"
Not sure. I'm 100% in the static typed side as well, this is #java. I guess it comes down to more effort upfront vs more effort down the line. You'll put more effort into getting v0.1 of your Java app up and running vs v0.1 of your python app. Less boiler-plate code, less verbosity, etc. So lots of people will hate Java and love Python just because of that. Static typing will save you headaches and catch lots of errors at compile time though. I don't imagine how I could develop anything with dynamic typing. Maybe with TDD and extensive testing I'd be able to, but just write and run- there's no step to tell you if you screwed up until you run it, and that to me is just scary. On the other hand, Java, especially v6 is VERY verbose. And I wish there was a way to do Map constants in Java. You can work around that with Builder pattern, but well, it's still a work around.
Yet another problem created by OSGI, rather than solved.
Youtube: http://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html And the reddit source code: https://github.com/reddit/reddit
I think it's because many (not all) dynamic languages focus on getting things done quickly and simply. It's important for code to be expressive and quick to run directly from source. This makes developers feel very productive when WRITING small to medium sized programs. (Debugging is another matter.) This focus influencies not just the language, but also the standard library. OTOH, many (not all) static languages focus on power, quality, and maintainability. Build time and a convenient to use library is not as important. It's more cumbersome to write quick-and-dirty utilities and programs. WRITING takes longer but DEBUGGING is easier. I think it's possible for a static language to have the benefits of today's most popular dynamic languages. Go and Nimrod languages are a great start. Languages like Python, Ruby, and Perl are dynamic because it makes WRITING code them a little bit easier. Adding static typing, however, more than pays for itself. 
That's nothing, try to make a good use of a composite key... the implementation with the annotation can get very funky sometime.
hotswap development is free in Java. I use it in Eclipse all the time and it's friggin awesome. I can be stepping through some code, find a bug, make the change, save, and the code restarts at the beginning of the current method and runs through the new code. Great when you are doing something that the initial setup to get to the code you are working on is long (i.e. parsing a large file, pulling something from a network location, etc)
for metaprogramming, a good library, which there exists many, can fix most of those kinds of issues. Copying all fields by name is trivial using Apache Commons libraries and Reflection.
Agreed, you can put out small project code very quickly, medium project code a little faster, but the code tends to be of far lower quality than what you would write in a statically typed language, and for large projects, it just turns into a clusterfuck
Yes, that is a terrible example. With generics, I almost never have to cast. Has Nick not seen Java since 1.4? Also, maps of maps? Yuck, in any language.
To be clear, I'm not saying popular dynamic languges are more productive because they are dynamic. I'm saying they are more productive because productivity was the design focus. Making them dynamic was one of the many decisions made to meet the goal of productivity. I believe if the designers had chosen to make their languages static (with type inference), they would still have made very productive languages. (They wouldn't have been *quite* as productive for writing code, but they would have been much more productive for maintaining code.)
&gt; This compiles fine on JDK8, but JDK7 complains about an undeclared Throwable in main. That's very interesting! Thanks a lot for the research. Perhaps, this subtle change was a prerequisite for some lambda expression edge case.
Having used Python as my main programming language since I started a Cloud Computing class this semester, I have to say not all IDEs suck when it comes to supporting dynamic languages. I started using PyCharm right after Jetbrains made their tools free for students-- and it's amazing given the dynamic nature of python.
&gt; However, I feel that the killer high-productivity, low barrier-to-entry, well-supported static language hasn't shown itself yet Why doesn't Scala fit that category?
As a long time Python developer, every single thing you said is completely true. I wrote a large desktop application in Python and Qt. Started as a fun project, ended up being fairly commercially successful and had about 40k lines of code. Long story short, it was fun at first, but an enormous pain as it grew. I contemplated porting it to C# so many times... So many bugs... "oh, you wanted a string here? Well too bad, at some point *somewhere* you made it an int" Sigh.
I believe PyCharm has pretty good support. Although I haven't used it that much. I've only played with it from time to time. 
From personal experience you can make really complex programs really beautiful in Ruby or Python for instance that in Java or C#. Mostly because C# and Java relies on configuration-over-convention whereas in Ruby it's the other way around. This of course has its implications however I believe that makes it that much easier getting up and running. 
He's talking about hot swapping in a server environment. Something that isn't possible in vanilla Java. Without JBoss for instance if you want to deploy a new war you have to compile the war and then upload it in its entirety whereas with JBoss you can swap simply the part that has changed. Correct me if I'm wrong :)
Dynamic typing is like fast food: Fast and delicious but bad for your health in the long run.
I agree with you, and how I tend to think of it is that dynamic languages are like the approachable ditzy girl at a party, easy to get into her pants but down the line you realize she's bat shit crazy and unmanageable, almost impossible for her to change or see your line of view or respect your wishes for change etc. On the other hand, statically typed languages (like java, my mistress of choice) is the girl that is smart, complex and naturally, harder to get in bed with. She makes you work for what you want but in the end, after years of being with her and a long relationship (large code base), you start to appreciate just how sensible and open to change and manageable she is... Er guys.. I think I'm in love with a programming language :/
Nice, what is the CPU you tested on?
I did try that once.. When I did it I needed to rename the file.war to ROOT.war, so when Tomcat auto-deploy it, it creates the ROOT directory, but when I deploy a new WAR I'll need to remove the old ROOT.war, after seconds of removing the old one the ROOT directory will be removed too by Tomcat.. In that case all directories and files under the ROOT directory will be lost.. Including uploaded files and images (via the WebApp)..
I'm like this, but not because Python is more fun. At home (and particularly during my commute) I just want to open vim and write code, rather than waste any of my limited spare time playing with an IDE. At work it's the other way around, I have the time to wait for Eclipse to load or Maven to do a build, so I'm happy to take advantage of their benefits. If Python had static typing, that would help a lot and I could still use vim on the train.
nope, what?
I think to some extent, what people really like about dynamically-typed languages is the simplicity of the code structure - it looks elegant and best allows you to translate your thoughts into code. The less you have to type to clearly explain your thoughts the better. Emphasis should probably go on "clearly" there, Ruby's: 123456.to_s.split('').to_a is actually really easy to understand if you know that to_s is the equivalent of toString() and to_a turns it into an array. (If I'm right, the output is ['1','2','3' ... etc]. -- I only have a rudimentary understanding of Ruby.) You can still write horrible code in Ruby - it's a very popular language for code golf on stackexchange. Compare say, writing lecture notes with a pen and paper, with typing them in a word processor. Sometimes you want to draw a diagram to better explain a concept but that isn't something that comes naturally to a word processor -- even if it makes your notes look neater and easier to edit in the future. Now, I think there's still scope for improvement in statically-typed languages. C++11's "auto" really takes a chunk of verbosity out of that language. (It's been a while, forgive me if it's not quite correct) for ( std::vector&lt;std::string&gt;::iterator it = vec.begin(); // ... becomes: for (auto it = vec.begin(); // ... and finally, another C++11 trick (though java does it too): for (auto &amp;val : vec) Suddenly, every-day code could have a big face lift -- less typing, more expressive.
You are 6th Semester student and still need babysitting? Ask your friend to change it if he was kind enough to provide you with his sourcecode.
dude , he is not here thats why i am asking you guys, If you can change it then change. why argue?
Even if you get somebody to change the file for you, it's still **cheating**. Normally, Universities and Colleges have anti-cheating systems in place that are able to compare code and track down cheaters. So, even if you were able to submit the changed file, you'd still be flagged as a cheater and would fail.
can you help me regarding this topic? to change it (content) **PLEASE**
Just to make it clear: Your request is immoral and against the policy and the purpose of this sub: &gt;News, Technical discussions, research papers and assorted things of interest related to the Java programming language This sub is not for homework help and even less for cheating. Post removed.
I use java for work + home as well. I love it. Although I am about to learn scala, so may be my 'fun' may change.
I've had to do this in order to read json from an external API where you don't have control over what is returned. You don't know if a JSON structure will contain a string, integer, or another map or list for a given key. How else do you handle that except via a `Map&lt;Object, Object&gt;`? I have to say that json handling is pretty painful in java, except when you design the api yourself and reliably know that a certain key will always be of a certain type.
&gt; You ALWAYS have to rely on unit tests for refactorings. And you don't in dynamically typed languages? If anything, refactoring is a hundred times easier in static languages vs dynamic
&gt; low barrier-to-entry Also, performance is a concern
I looked for that information in the link, but I didn't find it. I understood the need to change its name, but why did you choose "uai"?
I am thankful for static typing in serious code intended for a deliverable. Dynamic typing lets me go fast without thinking too deeply about the structure, which is handy for prototyping and casual experiments. I can definitely see they both fill a nice niche, and I wouldn't ever want to completely give up either of them. I do have a personal rule of thumb: if a project goes over 200 lines of code, it's time to get out of Python and into something else!
&gt; Debugging code is simpler Lol &gt; Building custom types in JS is easier Lolol &gt; JS is better positioned than any other language for web interaction. http://www.gwtproject.org/learnmore-sdk.html 
&gt; Eclipse's: Show Call Hierarchy is simply gold! What's the equivalent for intellij?
Comma's are very common in any form of text so you need to enclose those strings with quotes. And then you also end up with strings that have quotes which then have to be escaped. And instead of reinventing that particular wheel (and running into those edge-cases later on) you just use a standard wheel.
&gt; From personal experience you can make really complex programs really beautiful in Ruby or Python for instance that in Java or C#. Mostly because C# and Java relies on configuration-over-convention whereas in Ruby it's the other way around. You're talking about Ruby on Rails here I'm assuming? Because as a language Ruby doesn't assume anything more than Java. So in that case it would be more 'fair' to compare a rails-like framework in Java (or on the VM) to RoR. I am personally a big fan of Grails. It's very much like RoR, used Groovy for most of the glue and you can use any Java code since it runs on the VM. Best of both worlds IMHO.
My 0.02â‚¬: Dynamic typing is popular with people who think the "typing" (as in, punching keys on the keyboard) is what takes up most of your time when programming. I.e.: beginners. You actually spend more time reading code than you spend time writing it in most situations; having all the extra information the verbosity Java gives is very helpful for anyone experienced with the language. For a total beginner all the "public void" stuff is just confusing so they prefer a language that doesn't require this.
&gt; no response in R/programming That's because /r/programming isn't a sub for programming help, it's a sub to discuss programming matters. For help you're better off in /r/learnprogramming. Aside from that it's important that you make your problem description clear and make your code easy to read. Your post is formatted horribly; for me that's typically reason enough to go 'meh' and close the tab.
&gt; I had never known that this was possible until recently. It's considered a bad practice. It's very easy to make mistakes when you add a line and forget the braces. So that's why I'd typically advice against doing this; in our project our code checker refuses to let you build with this construct.
Here are few open source graph database projects [http://www.findbestopensource.com/tagged/graph-database](http://www.findbestopensource.com/tagged/graph-database)
AMD Phenom II 1090t 3.2 GHz
I have work pretty heavily with C# and Python. For the most part I find the strong typing of C# makes life a lot easier but as long as you don't approach python like you would C# or java you can do some quirky things that can really help you with certain problems. Duck typing in python can be really useful in cases where you are working with objects of a api but also need to mix in some of your own data. Since it only cares if you have the method or attribute being used at that time, doesn't care if they objects are of the same class. But really language choice usually isn't based on what you want to work with but rather what you need to work with.
I remember being able to refactor code very easily in the Smalltalk IDE, writing whatever whatever code I wanted, and when the program halted with a doesNotUnderstand, I could copy the offending code into a method header, make some slight edits, write whatever code looked right, and proceed. The edits could be done in the debugger, taking effect immediately. I could move code around easily from header to code, adding local/instance/class variables, without having to make a decision or make edits to specify which class these things belong to. Some people would probably think that you can't create a big working system in this way, but we did.
&gt; (like java, my mistress of choice) Java is more of a dominatrix, but yes
You may want to take a look at tcptunnel which is a simple proxy server for TCP: https://github.com/vakuum/tcptunnel You can also check out stud which is an TLS termination proxy for TCP: https://github.com/bumptech/stud
As both a Java and Python user I don't believe dynamic is at all popular because people are worried about keystrokes. Its more so that you don't have to do things like create interfaces and adapters everywhere that leads to a significant decrease in amount of code and complexity of it. You pay for those conveniences later on as many people in this thread have pointed out but sometimes the short term gain is worth the risk. Get the product to market faster and rewrite it later.
The GSON library is very nice and allows you to define custom deserialisers so you can programmatically determine the type and return the right object. I mean, unless the API is literally returning string or int randomly with no way of knowing which it is....
&gt; As both a Java and Python user I don't believe dynamic is at all popular because people are worried about keystrokes. Its more so that you don't have to do things like create interfaces and adapters everywhere that leads to a significant decrease in amount of code and complexity of it. That has nothing to do at all with dynamic vs static typing. Interfaces are an OO construct. And there is no need to use them 'everywhere' at all. &gt; Get the product to market faster and rewrite it later. We all know that "it's just a prototype, it's not going into production" is hardly ever true.
Performance is not a concern.
Ctrl+Alt+H, "Call Hierarchy". It's under the Navigate menu.
I'm a ruby/rails/java developper 1. whatever your stack is, you can write bad code, and have bad time while maintaining your app 2. once in dynamic typing keep your good habits (naming, composition, test, ci, code reviews, automatic code review Ã  la sonar : pullreview.com codeclimate) 3. refactoring with a good test suite is just ok in dynamic languages (just like in java) (dynamic language are often less verbose/boilerplate : not so much places to string/replace, or just launch the test to discover the missing one) 4. you don't often choose between dynamic vs static, you pick a stack ! From my point of view the level of reuse is way much better in dynamic languages, the component target often only one framework and embbed web ui / db migrations / command line with them: - quartz scheduler (cron and runnable) vs sidekiq (background job with ui console, redis backend, multiple plugins,...) - spring security (declarative/aop) vs devise (mail confirmation, various web forms, oauth providers,...) - .... In java, dropwizard looks in good shape to achieve this by assembling great working frameworks/librairies and pushing the testability of the code you produce. 
Not particularly. I'm not arguing an objective advantage in either language, I am simply speaking from my own experience. If you find JS objects hard to work with and Java types easy, then that's that. I've got a lot of experience all over the JS and Java realms and they're incredibly different from one another. I simply find JS to be less cumbersome in most respects. 
elaborate?
that's pretty much the case in some external apis. E.g in some cases, they return an object and its attributes, and an attribute could either be a string, int, or a list/map containing sub-attributes.
But surely there's a specification or contract of sorts to determine what should be returned? Otherwise even your Map&lt;Object, Object&gt; is unusable because you don't know which keys in the Map are the ones you're interested in.
There are at least two reasons: * hashCode() *should* be faster * hashCode() returns an integer. You can use it to sort Objects in Datastructures. It is probably also used to manage Objects in the vm. But now im just guessing.
HashCode is one of my biggest design complaints in the Java API. It was added for supporting hashtables. My opinion is that is should have been a separate interface that would be used on items that actually had a concept of equality. hashcode has a few uses. * it's meant to be a quick equals comparison. By comparing the hashcodes, you can determine if calling the equals method is required. * it is required in the hash table/map/set items to divide the objects in to buckets. This allows the efficiency of a look up by grabbing the hashcode, and knowing which subset of items needs to be searched. It is able to ignore the rest because the hash code does not match, so it will never be equal.
I think the main answer is that a lot of people judge language solely on verbosity. Less typing = best language. The number one complaint of java is how verbose it is.
I've probably done 50/50 static and dynamic in my career and this is exactly my experience. Dynamic languages can get a lot done very quickly and concisely but the code becomes obscure quickly even if it's well-factored.
JRebel is a lot more advanced than the built-in debugger hotswap. For example, you can't change class or method signatures with the built-in hotswap. You're basically limited to replacing method bodies. Often that's good enough, but it's still pretty limiting. 
Java 8 has demonstrated that it's possible to have your cake and eat it too. Boilerplate code is greatly reduced by the new method reference and lambda features. In fact, each new version of Java has steadily chipped away at useless verbosity (autobox, foreach, generic type inference, try-with, etc.).
IMHO, the key to dynamically typed languages is that it's a totally different mindset than static typing. It's not just a feature checked off on the back of the box. The best way that I can describe it is that, to me, dynamically typed languages place much more emphasis on writing and naming. To write well in a dynamic language, names have to be more precise, documentation needs to be more clear, and you need to have code with a much narrower scope. You mention the fact that 'go-to-definition' is difficult to implement in dynamic languages. If the semantics of a function are tight, the name accurate, and the documentation complete, then it becomes a lot less important to be able to jump to the definition of a function. (I don't know if I want clients spelunking around the implementation anyway. For statically typed projects that maintain strict separation between interface and implementation definitions, you might not be able to jump to the real definition in the first place.) &gt; I have noticed that when using statically typed languages I get all kinds of IDE support. That IDE support makes me really productive. It also really helps me to move stuff around without breaking things too badly (i.e. refactoring). Compile times are usually sub-second due to partial compilation. That's been trivially easy to achieve in dynamic languages for decades. Paste a definition into the REPL, and there you go. You might not even need to restart your program.
Interesting. I didn't know that. I guess /r/learnprogramming would be more appropriate then :)
This is not material that any 5 year old would understand. HashCode is a 'helper' function that allows collections like HashMap to guess where they stored an object. Lets say you have a list of strings (apple, analog, bee and data) and you want to 'test' if the string "cider" is in that list. With a simple list you would have to, worst case, check all the items in the list. In this case 4. Hashmaps/sets use the 'trick' that objects can give a short number that is calculated from their contents. Lets say we simply use the alphabet position of the first character of the string. So apple and analog would be 1, bee would be 2, data would be 4. We would then create a bunch of lists based on those codes. We would stuff apple and analog into list 1, bee in list 2, data in list 4. If we were then to test "cider" which would have code 3 we would not have to check any list because we know there isn't even a list with code 3, let alone any strings in there. Same if we wanted to test "art": we know it also has hashcode 1 so we only need to test a list of 2 items instead of all 4 items. This is as simple as I can explain what a HashSet / Map does and why it needs a hashcode. In reality how it decides to create these internal lists and how a hashcode is made is a bit more complex but it essentially works like this.
I agree Java 8 has come a long way and its been doing a great job of adapting to the changing landscape, but I'm not ready to call it "have your cake and eat it too". Scala has been ahead of Java in these features for at least 5 years and I still think that I am more productive in small projects with Python than Scala.
Python is great for anything less than a 1000 lines. Beyond that, it is very painful.
[Javascript strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) fixes a lot big complaints associated with Javascript. I'm surprised more people aren't taking advantage of it. 
You can setup key bindings to eclipse layout somewhere in settings under a dropdown menu. 
Yeah. Also, while it's great, it's wise to be cautious and to only "use strict"; your own functions - doing it globally will break d3.js, for example. Found that one out the other day (a library I use had it in global scope).. not a good time.
That's fine, at least you didn't ask for help writing your own :-)
Static types are essentially compiler-enforced unit tests. They validate that you're using the expected types. And go to implementation works great in IntelliJ.
Type inference is available to statically typed languages too. C++ has the auto keyword and Java does limited type inference in generics. Scala does a lot of type inference within methods. Having to type the type of an object in not an inherent feature of statically typed languages, just a limitation of the current languages we use. This talk on the topic is great: http://youtu.be/fDTt_uo0F-g Duck typing is also not a feature of dynamic languages. Structural typing is the statically typed equivalent. 
Honestly I agree with you; I love Java. It just seems like that's the general consensus about things.
Spring is poison.
&gt; I understand that. My point is just that apps in the 2001 timeframe that were using servlets to serve results using http methods were basically RESTful services. The web is basically a RESTful service. I don't know where you're getting the impression that it's a 'hype'. The dissertation linked was published in 2000.
I think anonymous brought up something significant in the response mentioning the [checker framework](http://types.cs.washington.edu/checker-framework/). Basically, more general mechanisms for richer compile time type checking behaviour over annotations is far more useful than just a nullness checker by itself, since we can also use it to add things like const correctness, currency type checking for primitive values, and all sorts of other domain specific things. Why add the syntactic complexity of entirely new language features when we can achieve the same and much, much more simply by adding to the expressiveness of the syntax we already have? If the checker framework could one day integrate with vanilla java/javac I would be so ridiculously happy.
Python has similar tools, like pylint and pyflakes, that will catch most typos. However once you start using metaprogramming (which Django does heavily in its orm) these tools are less effective
Its not necessarily less typing. More code = More places for bugs to hide. I once saw someone make a mistake in a setter in which they recursively called the setter. Passed code review by two developers because they glazed over getters and setters as they are typically all the same and bug free. Or put another way getters and setters are a bunch of noise that gets in the way of seeing bugs.
Over the course of your career/life as a coder you will almost certainly need to become well-versed in working with both static and dynamically typed languages. Learn to appreciate both for different reasons. I think it comes down to which you've spent more time in as to which feels more natural to you. One could argue that dynamically-typed languages don't go far enough in preventing runtime errors. On the other hand one could argue that statically typed languages put undue burden on the user to hold the compiler's hand. I find the choice to be relatively minor when also weighing other factors for a given project. Use the right tool for the job. In my current job I find that this is typically a dynamic language (Python to be specific), but I don't pretend that would be the case for every situation. For me personally, the benefit of a statically-type language is usually in performance gains more so than catching typing bugs or editor/IDE convenience. I usually default to choosing dynamically-typed languages, and when I need to code something performant, I evaluate whether a statically-typed language is appropriate. This happens less frequently than one would think (at least for my line of work). There are definitely times when programming "in the small" where I miss language-feature-x whether it is dinking around in pdb tracking down a type or value bug or wading through lines and lines of Java code that could have been expressed with greater readability in Python. With Java in particular I sometimes feel like I'm being distracted from the problem I'm trying to solve. Sure there are benefits that come with helping the compiler, e.g. performance, but they come at a cost that isn't always justified. A common process is to turn to some sort of pseudocode before diving in with a statically typed language. With a dynamically-typed language, you aren't very far away from pseudocode anyway. To be fair there are statically typed languages that aren't as verbose as Java. I also find that after investing some time learning &lt;insert your favorite powerful text editor here&gt; one can be as or more productive with dynamic languages than working with a powerful IDE for a statically-typed language.
I see. It simplifies some stuff, but it's quite limiting in other ways (e.g. performance).
Those are just cons of python, not dynamic languages. And for the record, python is statically typed, as in it knows what the type is of every variable, but the compiler doesn't check this at 'compile' (generating byte code) time, because it also uses the concept of duck typing, so instead of implementing some interface to 'be a file like object' you just write the methods open() read() seek() tell(), pretty much exactly how objective c works with informal protocols (interfaces), although they have moved away from tjose
Good explanation but how does it tie in with equals()s? If you override one, you have to override the other (apparently).
I mean, isinstance() is a thing, and the standard library uses that a lot in places
You don't have to override hashCode() if you override equals(), but it's recommended that you do so, as both are sort of a test of equality. When we decide how to implement equals(), we determine exactly what attributes of two objects have to be the same in order to consider them to be equal. These same fields can be used to calculate the hashCode() of that object, since they are, by definition, some attributes that uniquely identify it.
I rarely use instance of or do manual casting in python either, the only times I get caught having a sting rather then an int is like reading from a file or from some external input (especially POST/GET params in web server apps, gets me every time...) , I guess it could be a problem but I've never seem to have much of a problem with it as they tend to show up pretty fast
Strictly spoken you donâ€™t have to implement `hashCode` in a class thatâ€™s not intended to be used as a key in a `HashMap`/`HashSet`, especially if it doesnâ€™t represent any straightforward factual value that would have a meaning towards the `equals` method either.
If you would like to hear more about a particular feature, or have any pressing questions you would like to ask Andrey or myself, feel free to post here or on the blog and we'll try to cover it in our webinar. Thanks!
It doesn't have one. It has 'Find Usages', but as far as I know Intellj doesn't try to trace calls the same way Eclipse does.
Generates a uniquish number for use in hashtables that utilize the bucket hash method. In simplest terms, you allocate an array of arrays. The outer array is indexed by hashcodes and the inner arrays (buckets) are just lists of every object that has that hashcode. Outer array lookups are constant time, buckets are linear. When 2 objects have the same hashcode that's called a collision. Choosing a hash function with fewest collisions creates a very large outer array with very short inner arrays. That is fast, but memory intensive. Lots of collisions means you can pack the data tighter, but you'll have larger buckets so slower lookups. That's why large scale applications need to design hashcodes carefully.
Azul specialises in high performance JVMs that offer zero pause GCs even with massive heaps. If you have to have a large heap but can't afford to ever have "stop the world" GC pauses then they're pretty much the only option at the moment AFAIK (other than things like simply throwing enough memory at it that you can guarantee the job will complete and the JVM will terminate before GC occurs). There are at least a couple of good reasons to go for OpenJDK that I can think of - if you need to fix something in the JDK and can't wait for Oracle to do so or want to extend then JVM itself.
Do not make notes. Whenever you are through with a chapter, put the gathered knowledge to a practical use. This will also make it easier to remember what you just read, making the notes obsolete. You do not learn to program by memorizing a book. You learn it by programming.
Am I in crazy town right now? Specifically about unit testing. Even in Haskell, calling `head` on an empty list type checks but throws an exception at runtime. 
I feel like Stephen Colbourne probably knows how good the GC is and what it's limits are.
&gt; Java: (Sorry if I get the anything wrong, it's been a couple years since I've done a lot of Java) We've come a long way, baby: java.util.stream.Stream.of("Hi", 3, "75").forEach(System.out::println);
Neat! Still ugly though ;)
ok, then he understates it?
Can you implicitly cast an int into an Object? 
&gt;Um, my complaint is that hashsets shouldn't blindly accept any Object. It should only except things that implement Hashable (or some better name). That way, devs would have to be conscious of what's it doing and more likely to implement it correctly. You should really be able to store any kind of object in a collection. If the hashed collections (such as HashMap, HashSet, etc.) would only support an interface, you couldn't use them for objects where the developer forgot to implement the interface or didn't know about it. 
&gt; Generates a uniquish numbe No, it's not uniquish at all, it's very common to have collisions. And it really doesn't matter much, als long as you spread out your hashcodes over a large enough set of values. Typically a modulo of a hashcode is used to index into a list of buckets; otherwise you'd end up with 2^31 lists. 
&gt; You don't have to override hashCode() if you override equals(), but it's recommended that you do so, as both are sort of a test of equality hashcode is not a test of equality at all and should never be used as such. The **only** thing it is is a 'hash' that's used to separate objects into buckets, nothing more, nothing less. In that regard it's comparable to a 'crc' of a file; you would not compare 2 files based on their crc either. 
Agreed. That's why I said "sort of a test of equality" and went on to qualify that statement later in the comment.
i know i could probably look this up somewhere, but since we're on the subject, is jdk8 open source as well? is it just a matter of time before openjdk catches up or are newer versions released by Oracle currently feeding into their paid JDK stream?
I dont think openJDK really has much new stuff going on. Really just what oracle releases.. which is everything - the paid stuff (and right now, not sure there is even much paid stuff coming down the pipe). ya openjdk8 source is at: http://openjdk.java.net/projects/jdk8/
/u/momslatin_dadsasian elaborates on my point perfectly. http://www.reddit.com/r/java/comments/2lezw9/why_is_dynamic_typing_so_popular/clukp5n
I agree with basically everything you said. I agree that features like refactoring and find declaration work more frequently with static languages than dynamic languages. My point was simply that it doesn't work 100% of the time with static languages either. However, my casting quote was taken out of context. I was saying that when dealing with arbitrary json in java you find yourself doing lots of casting. /u/momslatin_dadsasian elaborates on my point perfectly here: http://www.reddit.com/r/java/comments/2lezw9/why_is_dynamic_typing_so_popular/clukp5n &gt;However, I feel that the killer high-productivity, low barrier-to-entry, well-supported static language hasn't shown itself yet. I agree here too. In the meantime, we have to deal with what we've got. 
About "go to implementation" in IntelliJ. I've never used it so this is an honest question. If I have a member variable that is an interface and the instance is injected in using spring, when I "go to implementation" in IntelliJ does it jump to the Interface definition or does it check spring to see what type is injected and jump to the Class that implements the interface? This is the situation that I'm referring to that comes up a lot with me working with java spring projects.
I'm working a lot with JavaScript for the browser as well as node.js. My IDE is WebStorm and I have absolutely nothing to complain about. It reports unused or undefined variables, syntax errors and provides me with a list of methods on all my classes and libraries. Also I can click on any function name to go to its definition. Same goes for PHPStorm for PHP and PyCharm for Python. They're all JetBrains IDEs and they're fantastic. TL;DR get the tooling right and dynamic languages are a charm to work with
Welll there are cases like Idris where the tye system is so strong that it can no longer be inference.
Code Hentai!. Nah, you are cute :).
If there is one implementation, it goes right there. If there's more than one, it pops up a list to choose from. The IDE can't know which runtime implementation is chosen unless it's running. You certainly can set a breakpoint and see which implementation is being used whenever the breakpoint is hit. If it's annotation-injected and it can determine reliably which component is being injected, it can link through to it. I'm not doing a Spring project atm, but I'm sure I did it on my last project.
The openjdk project is where oracle (and some other contributors) does most development of java. From jdk7 onwards, an openjdk release is actually the reference implementation for a particular java version. What oracle releases as javase binaries is built from 98% (an arbitrary number I just made up but is probably close to the actual number) the same code as what is found in openjdk repositories. A very small number of things are replaced with non-open implementations. In a way, it is not that openjdk needs to catch up to javase, but the other way around, since you can get the source, build and run with newer features and bug fixes, long before oracle releases binaries.
Care to explain?
Obviously useful for frameworks to be able to override it that way. For me as end user it is not useful. I also never really inject nor use facescontext directly in my controllers anymore. I have two classes like it wrapping it and others and those classes are used here and there. One wrap FacesContext, RequestContext (primefaces static ugly), Ajax (Omnifaces static uglier) and expose some of the functionality found in those classes. The other one has the contextPath, currentPage, currentPage siblings (for navigation), closest parent folder and permissions found on that page. All of that is static information saved in a map basically and the key is the current page and for now that is extracted from facescontext but will probably be changed into using @Inject @Deltaspike @HttpServletRequest. Also the producer for FacesContext was pretty trivial but still it's very nice to see that it's getting integrated with CDI 
So, optionnal for null is like the new constructor for a (non)-instance that may or may not be static? Honnestly, if they start implements this, I don't see why they wouldn't allow override operator like +,-, etc or allow multiple inheritance, etc. Sometime limation are good.
&lt;golf_clap&gt;Epic Post&lt;/golf_clap&gt;
This is dead on, I fall in the last few lines of realizing the hell I created for myself by using Python for a fairly large project. I've contemplated moving it to Java quite a few times... But deadlines and other things keep coming up.
Yeah, porting a big project is always a bit of a risk. If you're dead set on doing it one thing I contemplated was using Jython to let me usually port piece by piece (although eventually I decided not to go through with it). Of course that has a risk of leaving your project in some kind of horrifying hybrid monstrosity state for a prolonged period, making it even tougher to get new team members
Yeah wrong word my bad!
I actually just experienced this earlier this year. I was overhauling a very poorly written, procedural library in JS - but before I finished I was moved to another division... So an intern got the project in that awkward in between stage where I had written the OO wrapper around old calls and was in process of getting the old calls out as people were migrating. I probably did more harm than good in the end (though the intention was good). At least the interface to use the old and new version of our client were the same, so it was a partial win.
Does JRebel support Java 8 yet?
It really depends on what you are trying to do. Each JDK implementation has strengths and weaknesses. First, OpenJDK is the reference implementation of [Java 7](https://jdk7.java.net/java-se-7-ri/) and [Java 8](https://jdk8.java.net/java-se-8-ri/). Both the proprietary Oracle JDK and the Azul JDK take OpenJDK and add/replace things with their secret sauce (and what they see as benefits). Basically OpenJDK is the baseline and other implementations try and offer enough add-ons to convince you to use them and not OpenJDK. OpenJDK is Open Source and Free Software. You get the usual Open Source benefits - you can see/study/modify the entire source source code for everything that is part of the JDK. Want to understand how a ClassLoader works? The source for every single ClassLoader implementation shipped with OpenJDK is avaiable. Want to see how sun.misc.Unsafe is implemented in native code? Use the source. You want to modify the JDK so it can perform really well on a few tasks specific to your company? Feel free to do that. [Twitter does](https://engineering.twitter.com/university/videos/twitter-scale-computing-with-openjdk). I know Red Hat is working on a low-pause GC for OpenJDK but it's in development right now and far from ready for production. And if you need support, you can find a company and pay them, whether they are a small contractor or someone your company already has a contract with. Oracle adds a number of serviceability tools (especially things like Flight Recorder and Mission Control) and tools that integrate better in an Oracle environment. As far as I know most of the useful features are not free (requiring either a commercial contract or a support contract). They happen to contribute the most to OpenJDK too and probably have the most expertise to fix the harder of bugs if you have a support contract with them. Azul focus on the Virtual Machine itself and getting a GC that is fast. By fast, I mean has few stop-the-world pauses for GC. I have not run their JVM personally - this is information they put out. But again, I believe you need a contract with them to run their JRE in a commercial setting. They had an Open Source version that was much closer to OpenJDK too but I am not sure if that is something stable enough. In other words, all of them should have almost the exactly same API and facilities for running code - you should not see any behavioural differences (modulo bugs). What you will see a difference in are in *performance* and what sort of tools you can use to monitor and tune your JVM. Full Disclosure: I get paid to (sometimes) work on OpenJDK. 
PyCharm is actually a very good Python IDE. It's basically just Intellij IDEA modded for Python support. On the packaging side PyInstaller works great for shipping binaries. It's really easy to work with and I've used to to build binaries for Windows, Linux and Mac. But on the bad side I've absolutely run into dynamic hell on a Python + Qt app. My GUI inputs were Qt QStrings, which turned into strings on the file side but would bug out at runtime due to unicode issues when the app hit a character that didn't want to translate cleanly. This is the kind of thing that enforced typing wouldn't caught and had me handle in the design phase of the app, rather than hacking fixes after the fact. 
This is where my Java knowledge gets real spotty. When doing redeploys ala `mvn jetty:run` I generally find Python reloading to be faster. That said I'm starting to look into compile-on-save hot swapping... It seems both faster than Python to the point of being near instant, but also buggier where certain changes do require a full, slow redeploy. But to be frank I'm still quite new to this stuff and don't know the best practices or state of the at quite yet. I know JRebel is highly regarded and have also seen references to DECVM, but haven't tried using either, yet.
i'm a few months into learning java myself... i started writing notes, but now i just write detailed comments in all my test and example code that the books give me and whatever i experiment with... it combines note taking with actual practice, and when you feel like reviewing you'll have a bunch of well documented noob code to look over as well.
It's also an entirely different (though often related) concept. `def foo(a, b, c):` The 'compiler' can never know the types of *any* of the variables in this signature. `x = foo()` The 'compiler' can never know the type of `x`. `x = 'hello'` The 'compiler' doesn't know the type of `x`. Rather, the runtime will know that `'hello'` is a `str` and it will know that `5` is an `int` and when you try to do `'hello' + 5` the `+` implementation will deduce that adding a `str` to an `int` makes no sense. Even if you spell it as `x + 5` instead of `'hello' + 5`. But in x = 'hello' y = 5 z = x + y The 'compiler' has no idea that the third line is not valid. It *will* generate perfectly fine bytecode, that will get executed and then throw a runtime error when the `+` sign can't figure out why you're giving it a `str` and `int` at the same time. *Strong* typing means that Python at least *does* know the types of variables. Unlike, say, Tcl, where literally everything is converted to a string, and it's up to any subroutine to figure out how to read strings for whatever purpose it's trying carry out. EDIT: Another point against any notion of Python being statically typed: &gt;&gt;&gt; class Foo: ... def bar(self): ... print("Hello") ... &gt;&gt;&gt; def do_foo(f): ... assert isinstance(f, Foo) ... f.bar() # phew, we're safe! ... &gt;&gt;&gt; my_foo = Foo() &gt;&gt;&gt; do_foo(my_foo) Hello &gt;&gt;&gt; my_foo.bar = "don't call me" &gt;&gt;&gt; do_foo(my_foo) # whoops Traceback (most recent call last): ... TypeError: 'str' object is not callable &gt;&gt;&gt; do_foo = 3 &gt;&gt;&gt; do_foo(my_foo) # oh dear Traceback (most recent call last): ... TypeError: 'int' object is not callable &gt;&gt;&gt; do_foo = lambda a, b, c: a + b + c &gt;&gt;&gt; do_foo(my_foo) Traceback (most recent call last): ... TypeError: &lt;lambda&gt;() missing 2 required positional arguments: 'b' and 'c' So, no, at no point in Python's life did it ever care that `do_foo` was even a function. Of course, at one point there was a function bound to the name `do_foo`, and that function cared that it was a function. But that's something that happens at runtime. At compile time (i.e. statically) not a single hoot is given. 
If some of those seems a bit too much, from Redhat you might want to tear apart Weld/CDI and see if you can fix some bugs. It is a little bit more manageable and the authors are pretty active within the community. The JAX-RS reference implementation, Jersey, would be another suggestion. You could fix bugs or work on non-standard enhancements (Jersey MVC, oAuth, etc). JAX-RS documentation generation and integration with things like Swagger could be another option.
Have you looked in your web.xml file and seen if it has any strings like myapp-v1.4.5? Also, what does the pom.xml file for the project look like? What does the plugin &lt;execution&gt; in there look like?
By default, Tomcat will set the context path of the application to the base name of the WAR, as you are seeing. You need to [configure the context container](http://tomcat.apache.org/tomcat-5.5-doc/config/context.html) to set a different path. In /META-INF/context.xml, specify something like this: &lt;Context path="myapp"&gt; &lt;/Context&gt;
i made a mistake it was 7 am, i meant strongly typed
I am using ant actually but I think if I use the suggestion below it'll work.
I'd start by checking out the [IRC protocol specification](https://tools.ietf.org/html/rfc2812). The [sockets](http://docs.oracle.com/javase/tutorial/networking/sockets/index.html) tutorial might also be helpful.
Awesome, brother. I'll check it out.
This sounds like a great project. I'm actually inspired to write one in Haskell, since I do Java as my day job and it would be nice to try something completely different.
Yea - i'll see how it goes. I always found building a chat program a fun way to learn a language. Although I don't want to get ahead of myself but i'd like to do something similar to Trillian where it can connect to various types of messaging APIs.
Thanks - looks very handy. I'll try the basics first through the Oracle tutorial and then probably move on to this library. It's going to be interesting trying to get a nice GUI for this aswell.. ha ha.
You could be right. From [another blog entry](http://blog.joda.org/2014/11/optional-in-java-se-8.html) of his: &gt; As a side note, one reason not to use it in this way is that it creates an extra object for the garbage collector. If used as a method return type, the extra object is typically short-lived, which causes the gc little trouble. But when used in a Java-Bean, the object is likely to be long-lived, with a memory/gc overhead. I was bitten by something very similar to this about 13 years ago, and I can categorically say that for server systems running at scale, you don't want lots of little object boxes within your beans. Interestingly, if Optional becomes a value type in a future Java version, then the memory/gc issue goes away. So what he's saying is that for short-lived values (e.g. return values) it's a fine structure, but if you put it as a field in a bean, it's just sitting there eating a tiny amount of space for the lifetime of the containing class. I suppose he does have a point. I was only thinking of the direct-in-scope consequences, and not so much the long-running pool of objects where Optional is a field in all those objects. That does put the article in context, I can see where that would be handy.
Checkout sIRC on github
what's your level of electricity knowledge? you need both programming and hardware knowledge to do raspberry pi / arduino projects 
I have some fairly basic electricity knowledge, nothing real extensive but I could also probably learn anything I needed to from the internet if it wasn't really intensive.
Use Netty. Excellent event based network wrapper around the core java socket stuff. Perfect for something like IRC.
Yes, it does support Java 8. 
Nice one, cheers! 
the semi-colons are valid statements, that become the no-op body of the if statements. take out the semi-colons. edit: plus posttype = a is an assignment, not a comparison. i assume you meant if ( posttype == a ) { ... } where are a and b defined? edit: or did you mean // did i get character a if ( posttype == 'a' ) { ... } there's a lot wrong with this code....
Well it's some of my first real code.
I think what you want is closer to this, apart from me not speaking Danish: package pkg2; public class Post { public static void main(String[] args) { java.util.Scanner tastatur = new java.util.Scanner(System.in); System.out.print("Pakke A eller Pakke B? "); // there is no such thing as nextChar() on a Scanner, we have to take // the first char of the first String token entered char posttype = Character.toUpperCase(tastatur.next().charAt(0)); System.out.print("Hvor meget vejer pakken? "); double vÃ¦gt = tastatur.nextDouble(); System.out.println("VÃ¦gt:" + vÃ¦gt); System.out.println("Posttype: " + posttype); switch (posttype) { case 'A': if (vÃ¦gt &lt;= 0) System.out.println("Du har ikke intastet vÃ¦gt"); else if (vÃ¦gt &lt;= 50) System.out.println("Prisen er 9.50"); else if (vÃ¦gt &lt;= 100) System.out.println("Prisen er 18.00"); else if (vÃ¦gt &lt;= 250) System.out.println("Prisen er 28.00"); else if (vÃ¦gt &lt;= 500) System.out.println("Prisen er 38.50"); else if (vÃ¦gt &lt;= 1000) System.out.println("Prisen er 49.00"); else if (vÃ¦gt &lt;= 2000) System.out.println("Prisen er 60.00"); else System.out.println("Du har ikke intastet vÃ¦gt"); break; case 'B': if (vÃ¦gt &lt;= 0) System.out.println("Du har ikke intastet vÃ¦gt"); else if (vÃ¦gt &lt;= 50) System.out.println("Prisen er 6.50"); else if (vÃ¦gt &lt;= 100) System.out.println("Prisen er 14.00"); else if (vÃ¦gt &lt;= 250) System.out.println("Prisen er 22.50"); else if (vÃ¦gt &lt;= 500) System.out.println("Prisen er 32.00"); else if (vÃ¦gt &lt;= 1000) System.out.println("Prisen er 45.00"); else if (vÃ¦gt &lt;= 2000) System.out.println("Prisen er 53.00"); else System.out.println("Du har ikke intastet vÃ¦gt"); break; default: System.out.println("Ugyldig posttype!"); } } }
Yes I was thinking of RoR when I wrote that :) I haven't personally had a chance to try out Grails.
if you want your code to be more DRY (Dont Repeat Yourself), you could do something along the lines of this. Excuse the probably bad english translation of your variable names and error statements.... import java.util.Scanner; public class PostExample { private static int[] weights = { 50, 100, 250, 500, 1000, 2000 }; private static String[] pkgAPrices = { "9.50", "18.00", "28.00", "38.50", "49.00", "60.00" }; private static String[] pkgBPrices = { "6.50", "14.00", "22.50", "32.00", "45.00", "53.00" }; private static String getPrice( int weight, String[] pricesArray ) { for ( int i = 0 ; i &lt; weights.length ; i++ ) { if ( weight &lt;= weights[i] ) { return pricesArray[i]; } } return "We dont accept weights that big."; } private static void log( String str ) { System.out.println(str); } public static void main(String[] args) { Scanner keyboard = new Scanner(System.in); // prompt for package type log("Package A or Package B? :"); String packageType = keyboard.next().toLowerCase(); // prompt for weight log("How much does it weigh? :"); int weight = keyboard.nextInt(); String[] prices = "a".equals(packageType) ? pkgAPrices : "b".equals(packageType) ? pkgBPrices : null; log("Weigt :" + weight + " Package type :" + packageType ); log(prices != null ? getPrice(weight, prices) : "You didn't enter a valid package type"); } } 
Take a look at all the various accessories for RPI one must give you some inspiration I'm not sure if anyone has made a jni library for accessing the gpio pins, actually I should look might make a nice project for myself!
I'm not sure I understand what you want to do ; but have you considered looking at an open-source Java debugger ? I feel that what you want to achieve is typically what they do. You'd "just" need to find the right place where they pull out the data from the Thread to represent what is happening as a debug view.
This is awesome dude! thanks alot! didn't think about useing cases, it seems way more viable 
As java.util.Optional is a value based class, wouldn't JVMs have the option of storing these similar to a primitive - on the stack or inline if being member of a class, instead of adding another level of indirection via a reference, which would put additional pressure on the heap 
He has a point when he says it's a language-level problem. But im not sure it can have a solution at this point. New languages can introduce all these fancy new operators because they don't have to care about backwards compatiblity nor the last astonishment principle. This kind of things claims for a new language (Java3, Java++, whatever).
That is unless the structure of the class was changed. Also does this mean that your production server is running in debug mode? Are you kidding me?
I think you got some useful feedback already about how to get your code working. Only thing I can offer that may have helped you debug your own issues is a slightly more iterative approach to development, especially at first. So for example, write the main method with like the Scanner and a system.out to verify that worked. Then the if statement, write the if statement with your condition and if true printout like hello its true and put an else in and print out hello this was false work. Then poke that if statement with different values to verify your code paths are working. It sounds a little retarded, but the idea but when you write something small / verify it works as expected you know it either works or doesnt work, and if it doesnt then you only have 1 thing to degug / figure out rather than a page of code. This is more in a TDD (test driven development) kind of vein. TDD is pretty cool, I'd read about it. 
&gt; That is unless the structure of the class was changed. Sure, but most bugs can be fixed (or rather hacked) without changing the structure. &gt; Also does this mean that your production server is running in debug mode? Are you kidding me? This was a few years back in a company I no longer work for ... Of course to be able to do this, it had to be running in debug mode. I think it wasn't running in debug mode all the time, but I don't really remember the details ...
it dosen't sound retarded at all. Actually aprocahing it step by step seems way better. Thanks man.
Can you recommend a book(s) for the electronics part?
I'm super new myself, but I've got this one: http://www.amazon.com/Make-Electronics-Discovery-Charles-Platt/dp/0596153740 and its pretty good so far. Starts you from the very basics.
NetBeans has a really cool feature to deploy Java to PI. So you can write Java code on your desktop and then run on pi. We wrote a quick tutorial on our blog at https://blog.idrsolutions.com/2014/08/using-netbeans-remotely-deploy-projects-raspberry-pi/
I've only done a few small things, nothing too cool or involved worth bragging about. I've been struggling with ideas for the several I own recently. 1) time lapse camera that uploads to imgur. My company is doing construction on a new building and I wanted to capture the process. 2) vpn/ssh server in a network I trust. I know how easy it is to sniff data, so I'm probably overly cautious on public networks. 3) I started a CI monitor that would control a traffic light for various stages of our deployment pipeline, but that's in the early stages and is on the back burner for the time being.
Symlinks work as well, assuming you're using *NIX. myapp.war -&gt; myapp.vX.X-X.war will expand to myapp/
no nix :( ...it hurts to say that!
Oh! At first I thought the rest of your post expressed some kind elaboration on the idea that Python is statically typed, that the compiler has all the types but simply doesn't check them so it can allow for duck typing... But re-reading the post again, that entire interpretation doesn't make any sense if you replace 'static' with 'strong.' My mistake!
Can you expand on what you mean by 'information radiator'?
I am trying to visually represent the stack trace with a map of method nodes and a link between them whenever there is something called. I am also trying to show a counter of how many objects have been instantiated. This is for a school project, hence its useless nature.
Yes the eclipse tools that I have used work quite well in showing me whats going on, but I actually need it to be outputted in my program because I will use the stack and object count data in maps and graphs
"An information radiator is a large, highly visible display used by software development teams to track progress. " https://www.atlassian.com/wallboards/information-radiators.jsp
For Arduino, sure, but it's not as important with a Pi. The Raspberry Pi is more high-level, you can run linux distros off it just fine and use it basically as an underpowered desktop
One way to think of this is that a.hashCode() compared to b.hashCode() is a very quick way of checking if object a and b are NOT equal. (to be precise it's ONLY quick if the hashCodes are pre-calculated ) Meaning, if the comparison is not equal, you know the values are not equal. However, if the hashCode values ARE equal, then the two object MIGHT be equal. So if the hashCode values are equal, the code should proceed to use the equals method. This is why you need to override equals when you override hashCode. 
I would look into using processing.org It's java with a few features removed, and a nice library added. There is also a nice javascript version using the same language.
I got it working by getting rid of all of the extraneous methods instead of trying to pass a bunch of variables around all over the place.
[Woomp Woomp](http://i.imgur.com/NLj6a13.jpg)
isn't the point of it to build hardware projects? if you wanted to just do cool software projects, you could already do them if you're a programmer
Fairly proficient? Amazon Echo, make a version of it that plays music and searches wikipedia for you via voice commands.
7 is installed in /Library/Java/Java Virtual Machines
Try: /Library/Java/JavaVirtualMachines/{Insert desired version here}/Contents/Home Shouldn't the latest Java 8 work too?
Potentially, yes. I'm not actually sure how clever javac is wrt optimizing the bytecode. I was assuming a naive implementation (POJO with private final &lt;T&gt; value field) but you're absolutely correct that the compiler may have built in optimizations specifically for this type. That may explain why it's not marked as Serializable. That's a really good question, I need to go do some digging now.
I'm on mavericks, so not sure it'll be the same, but it's here for me after installing: /Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk/Contents/Home
That's actually a really good idea! What book did you use?
Thanks, I'll definitely check out that site. How did you teach yourself Java?
Oh youre right, the do output the same thing :S I dont know how I managed to get init to show before then... since getting the stack trace through Throwable and Thread both dont output init. Maybe it was Exception e 
i'm using [Java: The Complete Reference by Herbert Schildt](http://www.amazon.com/Java-The-Complete-Reference-Series/dp/0071808558) for syntax and general overview of the language and it's packages and such... I'm also going through [Stanford's CS106A](http://stanford.edu/class/cs106a/) which is a programming methodology class that uses Java 5... there are about 28 lectures with transcripts, assignments, handouts, exams and all that available at that link. there is a lot of redundancy in the two resources i'm using, but the book is concise with it's progression through the language, while the methodology lectures are a bit more pragmatic. 
You should keep an eye on the RaspberryPi blog as they always have loads of suggestions http://www.raspberrypi.org/blog/
I understand its generally considered bad practice, but I prefer this, and do it all the time (been developing Java since 1.1). This frees up space, and has less clutter. Look how compact and clutter free that block is now. The indentation tells us everything we need to know about which statement belongs to which condition. I'll sometimes use a block if it makes it clearer e.g. the statement is very long, or it is another another conditional. It's all about what is easier to read. Easier to read == less chance of bugs. 
I would create a static method somewhere called printStackTrace(). Then you could just call it whenever you wanted to print a stack trace. You could write it like this: public static void printStackTrace() { try { throw new Throwable(); } catch (Throwable t) { t.printStackTrace(); } }
The Java machines folder is there, but not the 1.7.0 folder. Just the 1.6.0 one. 
Based on your comments, I'm convinced you're looking in the wrong folder. You need to open up a terminal and "cd /Library/Java/JavaVirtualMachines". That's the folder. Source: http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jdk.html 
Yea, basically. They're fine as return types. I wrote something using Guava's Optional that stored the Optional&lt;T&gt; as fields without thinking about the memory implications. Bad idea. I had to rewrite a bunch of classes. I love being able to do things like map() on Optional return types... makes writing Adapter/Transformer code somewhat pleasant.
Ok, it shows up in Terminal but not in my finder. :/ Here's the Terminal and Finder: http://imgur.com/MyXKbgn Am I looking at a different Java Machines folder in my finder? Is there more than one? 
Oh, wait - there is a different Java Machines folder. One in the root, and another in the System/Library. Got it! Thanks so much for your help! :D
Thanks for the encouragement mate. Yea I'm really looking forward to getting started on this. I plan on writing up a design document/plan this weekend and then start on it next week. I imagine my first version will be simply a console application with nothing but join a channel and chat. And from there ill look into doing a basic GUI.
Here's my TODO list of ideas: * Door opener/closer for our dog. Push button to open. Don't allow out if neighbors' dogs are outside. * Wifi doorbell. Allow visitors to leave a message. Send recording as email attachment. * Unlock front door with phone (Wifi or bluetooth) * Boat drone to deliver beer/food from beach. An old smartphone + arduino might be better solution. * Bittorrent server, so you can get tons of credit for uploading. * Personal [cloud server](http://www.instructables.com/id/Raspberry-Pi-Owncloud-dropbox-clone/). * '80s game emulator with old style joystick ports. * VPN proxy, to stay safe when on open WiFi away from home. * Just by itself and Dropbox. When visiting relatives w/o my laptop, I prefer to bring my own OS. * Tor proxy. * Media center for Internet TV. Useful at cabin with WiFi but not cable. * Kiosk for graphs and reports. Reboots to kiosk UI w/o user intervention. * Tomcat w/PsiProbe for running simple sites. I've done a few of these. I wish I had time to do them all! 
Not sure what are the limitations of your school project but one way to do it is to use something like aspectj to instrument byte code. Have a look here: http://mathewjhall.wordpress.com/2011/03/31/tracing-java-method-execution-with-aspectj/
A stack trace wouldn't show you constructors unless your code was called from a constructor some point. 
This is great for newbies of Java 8. Be aware that when using the parallel streams they all share a common pool. Here is the solution to overloading that pool: http://stackoverflow.com/questions/21163108/custom-thread-pool-in-java-8-parallel-stream
At what point are you stuck? It looks like everything is laid out in detail.
I dont understand how to make a subclass or use constructors.. So I am stuck at 2..
This is what I have for 2) but I dont know what to code inside public Circle() [which I am sure is also incorrect]. public class Circle extends geometricObject { public double radius; public Circle() { //something goes here } } 
Well, it's a start. You have made a constructor, but it does not accept any parameters. It needs one parameter, which will be the radius of the circle. That means putting a variable definition in the empty set of parentheses, which you will use to set the value of 'radius'. I wish you good luck with the rest of this assignment. Everything is put out there in a great deal of detail, and it should be achievable. Heck, even what I wrote in the other post about Circle extends GeometricObject turns out to have been right there in the instructions.
You, sir, are awesome. Seriously so clutch. Much love broski!
Im new as well, working through Head First java 2nd Edition and find myself adding //notes in my code examples that the book gives me. I DO wish there were more examples (especially when it comes to inheritance, polymorphism, and overrides) however thats what this subreddit is for, right? An excellent point was brought up earlier too: I find that I don't get what the book is talking about UNTIL I actually write some code (as I said usually the exercises the book provides) and THEN it clicks. Adding my own annotations/notes at that point is easy, because I can point out exactly where in the code the concepts apply. 
Welp... you're boned. Did you even bother to pay attention at all in class?
I think a major advantage is environment consistency and ease of setup. It's nice to not worry about OS X breaking your dev environment because of an Apache upgrade.
Do yourself a favor and search for a youtube or otherwise online tutorial on OOP. This sub is for people who want to learn, not for those who want to get a good grade before Monday. Just FYI, the world's not going to end if you fail this test. Here's a 5 minute tutorial on youtube. Hope you pay attention this time. https://www.youtube.com/watch?v=T7Es2C-z0NM
That really doesn't matter much when we're talking about **Java development** right?
Also class names should start with caps 
The example in the article exposes the app server directly, but it's common practice to use Apache/nginx to serve static assets and only send requests to the app server when needed. I mentioned Apache only because that's the most recent example that came to mind. Most environment setup can be accomplished with build tools like maven and gradle, but alone they don't give the isolation and consistency that docker does.
What? http://i.ytimg.com/vi/uVD3KPUnKHk/hqdefault.jpg
Definitely use services as /u/sh0ruguru pointed. Install the minimum and treat the installation as an engine, not engine + config + WebApp files. You are advised to keep the configs separate &amp; tell Tomcat how to look for it. You could also configure multiple instances of Tomcat running in multiple service (eg multi-host), each instance called using a different configuration file. Hope it helps.
You don't just do "java developpement" in docker. You deploy your jvm, servers, databases, file systems, messages queues, scripts, resources... In one well defined environement. That virtually eliminates the need for custom configurations per environments.
http://www.java-gaming.org/
Precisely. 
Erm... Cool project to do, but i'm not a big fan of having a metric ton of interfaces named like "ObjObjObj2Obj", only to not use most of them. Creating them is really painless, IDEs do that for you...
Honestly this is as bad as interview questions can be. Will tell you nothing about his programming skill, only the 'knowledge'of buzz words
Does your app just run from a jar and have absolutely no external dependencies? Then fine, don't develop with Docker. Are you totally siloed and don't give a shit what anybody does with your app once you toss it over the wall? Then fine, don't develop with Docker. But a lot of people develop apps where they need access to a DB or RabbitMQ or an Apache/Nginx server for static assets. So you Dockerize all that stuff along with your Java app, and now your local dev environment is an exact copy of your CI environment is an exact copy of the production environment. And that gives you assurance that anything you develop will work in prod, on top of getting the Ops guys off your ass when you push a change that required extra configuration steps you forgot to document on your Wiki. Because now, instead of breaking their Puppet modules with your change, all the extra config is already captured in the Docker image. Basically, there are devs doing Java work that doesn't resemble your Java work. I don't know what you actually do, so it's entirely possible that Docker isn't a solution for the problems you face. But it does solve a lot of hard problems that cause headaches for a lot of other people.
I think i can answer 1/3 to 1/2 of those questions. I can't answer the remaining, because I never worked with those technologies. But I am a college student with zero professional experience. I would assume, a senior dev should know much more? 
I wish polymorphism and covariance were buzz words. 
I've been doing java ee for 15 years and have never touched concurrency. I remember the concept vaguely from college. For what I do, if you're messing threads, you're doing it wrong.
By the way, this is the first time I've interviewed a senior candidate. I usually interview entry-level or mid-level candidate.
I think what you're missing is a judge of aptitude as most of what you're asking is very much focused on retention of book knowledge. Even the why pulls from that same context. You'll find people who at least conceptually 'get' the tech stack you currently use, but I don't think you'll get a good picture of whether or not they can apply that knowledge or learn new things as the work evolves - which is really what you want. In interviews I've been a part of on either side of the coin I find that drawing from experience leads to a better understanding of a persons knowledge and future capabilities. Even entry level Java devs should have some experience with challenges in projects (school, internship, side project) that they can feed from to give examples of problems they have faced, overcome and learned from.
&gt;Obviously useful for frameworks to be able to override it that way. For me as end user it is not useful. Ofcourse you don't have to override, but if you want or need to the option is there ;)
We've hit deadlocks and race conditions without even using threads. If you're doing enterprise integration of any kind of complexity, concurrency is a huge deal. Normally, I would say that you should never do manual lock management and just use java.util.concurrent, but sometimes you don't have that luxury. An interesting problem we faced was due to multiple readers on a cluster reading from the same queue while concurrently modifying a database, which is a shared resource. We were seeing data corruption due to a race condition. This cannot be solved by java.util.concurrent because the readers are running in separate processes. The "correct" solution would be to use queues, which requires infrastructure setup in our production environment which my manager wanted to avoid due to the tight release schedule, so we ended up using a dbms lock.
If you're talking about a **senior** Java developer, these questions seem wholly reasonable to me. I've been our company's Lead Software Engineer (first full-time dev) for 3 years. Before that, I had very little Java experience. Now, I could answer all of these questions *(edit: oops, not the Weblogic or SOAP stuff)*. Familiarity with them is a natural result of actually using Java day-to-day in a big web development project. That's what you want out of a senior engineer who ticks all these boxes on their resume. This would be a terrible interview for an entry-level or novice programmer. If you're just trying to find another contributor, they don't need all this knowledge. But if you're looking for a good **senior** Java developer, they should be able to speak about the vast majority of these points. That said, I am giving you the benefit of the doubt and assuming that: - you're trying to start a discussion and aren't getting hung up on terminology, - a candidate who could speak fluently to 90% of these would be considered excellent, and - you're expecting to pay this person a commensurate salary (certainly over $200K in the Bay Area). **Edit:** We typically have 50-100 applicants and 5-10 interviewees for every new hire we make. Don't get too down that one person failed your interview.
Actually, those weren't chosen at random. I was asking about technologies that we are actually using and technologies that he said he worked with in his resume. I didn't really even care if the guy knew the answers, but I thought I would ask. I actually cared more about his reasoning process. The guy gave me textbook answers to many of those questions, but when pressed on "why?", the guy couldn't give answers that showed any understanding of the tools he claimed to use. That's what bothered me most about the guy.
Fairly standard JEE questions although I'd have problems with some acronyms like HATEOAS. Depends on how anal you were about answers e.g. Weblogic JNDI configuration, what if someone never used Weblogic but can give you an answer from Tomcat. I'd add - Few harder questions would be nice e.g. basic GC tuning, JVM monitoring or Hibernate performance optimization approaches. - Few broader questions e.g. "How would you implement a shopping cart". That way you would see if they can put their knowledge to work, which matters most. 
Actually he had a lot of knowledge of the buzzwords, which matters little to me. I wanted to know if he actually understood the technology and the reasoning behind the buzzword, but it sounded like he only had buzzword knowledge. If he didn't know half the things I asked about, but showed understanding in the other half, that would have been fine by me.
I never said that they were chosen at random, but that they **sounded** like they were.
&gt; We've hit deadlocks and race conditions without even using threads. If CPU processes only one stream of instructions you can't get deadlocks/race conditions which by definition require concurrency. Am I missing something here? 
This is good food for thought. My manager asked me to make sure that we get a good senior candidate because we deal with very critical software in a very complex environment. We've gotten senior guys before that really sucked. I had to work extra hours to fix the code written by this so-called senior guy because it was so terrible. We had to eventually let him go. So, I'm under a lot of pressure here. I think I might try the more conversational approach for the next candidate, because having written all the questions out, I can see that it might be intimidating.
He says that this was a phone interview. If you need someone to work on this stuff, this seems like a good first step for a senior hire. I have to assume that a follow-up would involve actual programming.
Multiple CPUs. This is a clustered environment, where the multiple instances of the software are running on multiple servers.
Yes, threads are only one tool for concurrency. Any system call can block. That block can last forever if resource acquisition is not done intelligently.
I'm an engineer. I don't know anything about how our company recruits people or how it goes about finding the "pick of the litter". My team has a set of requirements in what we need from a senior engineer and now I have go see if the candidate will meet the requirements. However, my company does pay very well. I work for a bank. Actually, sometimes I think for the amount of pressure I'm under, I'd rather take a pay cut and work an easier job. But then again, I do get to solve a lot of interesting problems.
Theses questions are ok.
Is it one if you touch it you'll get a shock??
Just curious... I am a senior level Java Developer in the midwest and make nowhere near $175k. What city do you live in where this is the norm? I might be seriously underpaid.
These questions are terrible, so much of this is hard to answer in an interview but extremely easy to do in practice.
I can answer about 70% of these without using google. I find these type of questions "What is decoupling?" much harder than these "Why are loose-coupling coupled classes desirable?". It's alot easier (for me) to reason about problems, than to remember the definition of words, specially as i almost never talk about programming using those kind of terms at work.
Hard to answer in interview, but easy to do in practice.
I am a junior dev with 6 months of experience, and I feel like I could get this job just because I've read Effective Java and Concurrency in Practice recently. In 5 years, when I have real experience, I probably *won't* be able to get it because I've forgot about it all. 
Why did you post asking if your questions were too hard if you don't care to hear the answer? People are giving you constructive feedback and the only thing you're doing is disagreeing and telling them why their opinion is wrong.
I guess that's a difference in style, for me I'd rather not waste their time bringing them in if they can't give that info. If they are local its not as big of a deal, but for anyone remote it's a bigger investment. In person, at least for me, is more of a cultural fit and how they interact with others on the team and gauging their interpersonal skills.
i'm a programmer with 25 years in the industry. i think the questions are crap. but, that doesn't mean anything. do you understand the type of programmer you will find with questions like this? is that who you want to work on your projects? 
I'm trying to understand and trying to explain my reasoning. Why do you assume that means that I am not listening to what people have to say? Is it because I don't say "yes, yes, you're right"?
*I think i can answer 1/3 to 1/2 of those questions. I can't answer the remaining, because I never worked with those technologies. But I am a college student with zero professional experience.* There's something in that. They do feel to me more like tough questions devised for students who've done their revision than for a senior role with responsibility for architecture design, development methodologies, etc. May depend on the organisation though, maybe a senior developer is just a better coder there.
That is actually a very interesting question! Ultimately, it depends on what I would have to teach you to get you up to speed. If you don't have a lot of Java experience, but have a lot of related experience and actually understand the kind of problems we solve, I probably wouldn't have to teach you much at all. You would probably figure out most of that stuff yourself. For the most part, Java is just another programming language. I wouldn't mind working with you. But then again, would you really want to work in Java?
I agree, I had to think for a minute when I read "what is decoupling?" but your rephrasing of the question I could answer straight away.
Cool! Is there any examples of this? Right now I have them set up as engines but have a context configuration on each machine that I placed there manually. I also deployed the webapps manually. Is there a much easier way to do this when everything is clustered together?
These questions are aggressive at best. I would have walked out of the interview.
Been a Dev, Sr. Dev, and now PM at big companies. I had to look up what REST stood for. I've Built an Enormous REST service on top of 8.5m lines of COBOL. I know REST Architecture. Still had to look up what the Acronym stood for. This isn't a piece of knowledge you need. 
Which is exactly the sort of work I was looking for. Which I thought was obvious by my posts. But ignoring that and looking at it from only one's own perspective shows the arrogance I'm talking about.
Thanks for putting things in perspective! It sounds like php would give more work along what I'm after. On the other hand, I assume it wouldn't allow me to write an entire independent program like Java would.
I didn't ask what REST stands for, and given the claim of your experience, I would hope that if I asked you what the HTTP verbs are and how they are used, you would be able to answer that question off of the top of your head. That is fundamental knowledge for building REST architectures.
Thank you. Much more helpful to put things into perspective.
That makes way more sense. I was skimming your thread, as I'm not a Java guy, mostly working in .NET these days. Get/Post/Head/Delete/Trace/Put/Connect/Options? I think that's all of them.
Shit, you know more than I do. We only use GET, POST, PUT and DELETE in our REST API. I used HEAD once to implement polling. I couldn't even tell you what the other verbs are used for.
There are ways to tell if the person can code their way out of a paper bag, and these questions don't do that. You're asking if the questions were too hard. You got your answer: yes. You need to work on your interview skills. If you can't take criticism, then I can't imagine what coding for you is like. Truth hurts and it separates the good programmers from the bad ones.
Are you kidding, I love criticism. It only sounds like I don't like criticism because I love debate too. I love it when people take a shit on my code. In defending my decisions, and sounding it out with the critic, I come to a better understanding of both my decision making process and better approaches to the same problem. Saying "Oh shit, you're right" is one of the best things in the world for me. The problem is that I understand technical stuff better than I do people stuff. I know I need to work on my interview skills, but it doesn't really interest me at all. But, I'm on the line here to find a good candidate. So, here I am asking the question and trying to understand the way I understand technical stuff. The downvotes seem to indicate that my approach may not be working. 
And why would you need that consistency as a developer? In fact I'd say it's the exact opposite, ideally I'd rather have my products tested under multiple environment setups and develop with the kind of transparency Java and other established standards can give alone, not some golden hammer configuration.
I hate questions that you can "google" the answer (which all of them are). The question is really around how they approach problems. So I would ask..... tell me some difficult problems you had to solve and please tie that with the technologies you've listed in your resume.
All of this looks like sysadmin considerations that I couldn't care less about. If people can't use the jars or wars I produce by reading the doc, it's really their own problems yes. Actually, if you can run what I produce in Docker, well good for you, I just don't see why I should be moving my entire development under this environment.
I've been a dev for 25 years, currently manage a team of really great java developers. I doubt most of my guys would do very well on this test (aside from the general concepts). However, there is no question that every one of them could form original and insightful answers given a few hours to research the topics at hand, and I absolutely know they could implement these technologies correctly if asked to. They would spend some time on Google, maybe read a book or reach out to a colleague, and do a fantastic job of it. I think these questions just aren't an effective way to assess a candidate. In the "real world" we encounter new tools and frameworks all the time. Great developers are able to master these as needed. Bad developers memorize the patterns of a select few over time. Your questions would favor the latter. 
Based on what you say you wanted, you picked terrible questions. 
We cut our releases in docker containers now. We used to have developers complain when a test would fail on the CI server but not on their dev box. Now they can run the tests using the same docker image the CI server uses and figure it out for themselves. They won't use docker for their regular dev work, but they will use it to replicate the CI environment.
These aren't "tools," they're buzzwords. That's what everyone is telling you. 
I didn't mean concurrency wasn't happening. I mean for the most part, the framework handles those concerns. I've never written a thread for work. Very rarely I have used a synchronized block. Vast majority of concurrency concerns are abstracted out of my hands so I can focus on business logic.
You figured out why? No offense, but it just doesn't sound like a sane CI/Testing environment to begin with and I wouldn't call using this same image to test a solution. ;)
I thought Display.update() serve to write all data from the draw calls that was once in buffer on to screen. Have you tried to draw any quads in the application? 
What's the difference? Hibernate and ORM aren't tools? I use so called "buzzwords" because they are precise and I have difficulty verbalizing the concepts contained in them using other words. What else am I supposed to call ORM but ORM? I think I would need a lot more time and a whiteboard, at least in my way of thinking. This was a phone interview. I understand that they are also used by marketing people and recruiters too for a different reason.
Don't worry, reddit is full of self learned coding gurus - this is how all these sort of questions get handled - no matter what. If you dare to ask somebody anything that is from the CS field and not from the applied CS field then you're toast.
ORM's not a tool. http://en.wikipedia.org/wiki/Object-relational_mapping
A techinque isn't a tool for solving a problem?
Personally that would clearly be classed as concurrent in my experience. Can't have resource contention without concurrent access.
I see the issue not being with the knowledge that these questions test, but the way they are presented. A senior Java developer that meets all of your requirements will have dealt and understand the practical application of the knowledge the questions intend to reveal. The problem is that a QA format technical interview is an incredibly unnatural environment for testing such knowledge. All or most of these questions should be re-tooled into talking about specific code examples if you don't want to turn away people that have the skills but can't make the connection from exam-like questions to practical application while under pressure. If you are hiring for Google, Amazon, Netflix, Facebook, etc. and/or you offer compensation well above and beyond industry standard, continue on, as the questions in their current format shouldn't be an issue for the best developers in the business. As someone who is *not* among the best in the industry, I would hate being interviewed by you. ;) Instead of testing if your candidate is good at passing University-style exams, provide them with real-world code problems that are encountered at your place of employment for the knowledge you are testing for. Instead of structuring it in a way that it's a QA, talk through the code together. Your job is to guide the interviewee to prove he/she understands the concepts in a way that feels natural to them. After all, you are looking for a professional developer, not a comp-sci student.
I'd say the CI environment is pretty sane, and docker has made it even more sane by allowing us to do every build in an identical container. It's the environment on the dev boxes that gets crazy. Remember that not all developers are senior. Most often, the issue is them changing something in .m2/settings.xml or doing a local mvn install of some dependency. Occasionally, they will do something really stupid like hardcoding a localhost address, but fortunately those are the rare cases. In the old model, they would contact me and say something must be screwed up on TeamCity because mvn verify passes on their box but fails on TeamCity. It would then be on me to show them what's wrong with their commit. I'm old and don't context switch as quickly as I used to, so every time this happens it costs me at least 30 minutes. With docker, I can just give them a link to the instructions on how to figure this out on their own and move on with my day. 
There are many indian java sweat shops that pretty much gets every programmer ready for these questions. They make them memorize packets that have same questions you provided. 
Just did, thank you :)
This is how it works. 99% of your down-voters couldn't answer your questions, ergo your questions are stupid.
The questions listed here can be memorized and that's an issue. It won't necessarily tell you whether the candidate knows how to program and lead a project. I think you want to ask more broad concept questions to a senior than just complex knowledge details. For instance, you have no questions about patterns (programming or enterprise) in your list and a senior should really be a master of many of those. Some Java knowledge questions are good though. Type erasure is the usual question that indeed brings blank stares ;)
I think these questions would serve only to identify those developers that have spent an exceptional amount of time reading the official Java doc. There's very little in here that can test whether the candidate can actually code. Off the top of my head I couldn't list the full api of a concrete implementation of List for example. But certainly most will know the common collections interface methods. Rather than this, ask them to do something that requires problem solving. As a simple example, rather than asking about the specifics of the Map interface, ask someone to determine how many keys point to null, or to return a sorted set of its keys, or some such thing. Reverse a list, de-dupe it, whatever. These are trivial, but my point is that seeing if they can think algorithmically, even in psuedocode, is often more valuable.. After all, on the job, they'd have access to the docs, and in all honesty your IDE of choice would likely autocomplete method names anyway. 
Junior level folks in San Jose and most of the rest of silicon valley can often suck in 90-100 base plus stock and bonus. So a total comp for early twenty year old can easily push 130. Senior engineers and engineering managers at places like Google or Adobe will often have total comp numbers in the 200-300s.
"Hammering" isn't a tool. A hammer is a tool.
If you were to ask a candidate all these particular questions, it really, really, really should not be in a phone interview. 
You're either a) completely inexperienced and unaware of it, or b) in an industry niche where you don't have to *interact* with things outside your walled garden (like research, or BI), or c) a poor guy in one of these six-sigma megafirms where you have to fill a form to create a database table. I hope it's b. If that's so, just understand you're not the target demographic. 
Truly shocking. Stop touching code. + That will actually help you do these kinds of interviews better ( Memorization of likely questions and answers from some java interview question website ) 
He's probably in San Jose or some tech oriented city. I live in Ontario and most CEOs don't make 350k here.
Yes and no. I think that you have some good questions in your list. I think some of the questions require pointless memorization. A search engine is typically used by us to jog our memories of the minute details. A senior Java person is typically juggling a lot of knowledge in his or her head. I would ask whether the candidate utilizes unit tests, integration tests, and load tests. I'd check what IDE's the candidate uses. I'd ask about SCM. It's basic stuff, yes. Still, it's prerequisite knowledge that's a big part of the job. That being stated, I would suggest the following... Take a more conversational aproach. See how the person thinks. Inquire about the person's past and get a feel of the person's thought processes and problem-solving skills. If you catch a whiff of BS, then certainly dive down the questionnaire rabbit hole a little bit to save yourself some time. I'm a senior developer, but I've also conducted interviews. I can't believe the audacity of some people who have placed buzz words on their resumes and then waltzed into a technical interview for a senior level position. Those are the SOB's that I grill and make feel awkward for a few minutes here and there throughout the interview before I end it early. Just be honest, candidates! Life is a learning process. There's a good chance you don't match on paper but actually do (or will) fit the position.
I have 10 experience in all platforms of java and I can't even explain/answer all questions. If I do an interview my most important questions are: what do you do at home? What are your hobbies? If there is a click and he seems resourceful I am happy... Anybody can use Google and most of my code is also copy/paste... 
I've never hired anyone, but I think the best approach would be to give him a real problem you guys faced and see how he tries to solve it. My only problem with the questions is some of them are just definitions and someone with practical experience may not know them. For example, HATEOAS is no where near being widely used in modern development, it's just a nice idea of how a RESTful web service should work. But, no one in practice actually uses it and therefore may not know what it is.
Did you put them infront of a keyboard or just ask questions?
This exact thing happened to me during an interview. I was being interviewed by three developers and the first couple of questions I kind of struggled on. Sometimes it also the way a question is asked, for example I was asked to describe HttpSession. Certainly I understand httpSession, but do I know each and ever part of it inside and out? No, so it felt awkward because I didn't want to say something incorrect. Also, make sure **YOU** (OP) thoroughly understand the topics you are asking questions about, as sometimes there is more than one right answer. Again with the above mentioned interview they had me write a query to join two tables and average the result (by group) for one of them. I use SQL frequently, never advanced stuff, and a lot of time I forgotten some of the technical terminology along the way. So to join the tables I did a where id = id on them (paraphrasing obviously), I forgot that is referred to as a inner join, so when they asked why I didn't do a join, well I stumbled saying I don't use them much (even though there is a example staring us all in the face). Additionally with my, oracle background, to av the column I did avg(age). When they were reviewing the query I wrote they told me I didn't call the average function properly. In actuality the query I wrote was pretty much correct, I was missing a couple of group bys, but for writing it down on paper, well I was clearly on the right path. 
Exactly 
Are you interested in finding out if he knows trivia on your current application stack that he'll pick up in the first month if it's important, or on figuring out whether or not he'll be productively solving the problems that you'll have one year from now? A senior developer is not one who knows one area deeply - it is one who understands a broad range of problem domains and can find the right tool for the job.
These questions seem to value knowing the specifics of the Java language (or websphere, shudder) over being a good programmer. For example there is very little about algorithms or problem solving, but you ask questions about things like notify that most developers are rarely ever using. Would you ever consider hiring someone with tons of great experience but who needed to learn (or brush up) on his or her Java? If the answer is yes, you should focus less on asking about Java The Language. You might also want to think about the type of impression these questions give to the interviewer about your company. For instance, asking what the different types of SQL statements are might make someone think that either you thought they were an idiot, or that your definition of "senior" is quite elementary. I don't think I would want to work at a place where the interview was mostly about proving that I know how to insert data to a database. 
I think questions referring to specific frameworks don't really have to be asked. Any competent developer can pick up and framework within a few days, given they have a strong basic knowledge and an aptitude to learn.
Php wouldn't be an option for a stand alone, outside of the web choice. While you can do some [command line things with php](http://php.net/manual/en/features.commandline.php), that role is largely inhabited by perl and python. There is nothing wrong with knowing multiple languages and choosing the right one for the right task. Learning one of the jvm languages (Java, Scala, Clojure, Groovy) can be very beneficial; but as I said it often comes with the 'large infrastructure supporting it' that makes it harder for the independent to do. Java is often used for building "big things" more than "small things." This is in part because Java takes a fair bit of ceremony (for lack of a better word) to get everything set up to where you can start working. On the other hand, I can write a perl Dancer or php page in a fraction of the time it takes me to hook the servlet into the container, set up the routes, write the jsp, create the beans to transfer the data around, etc... If it's a project that I'm going to spend a year on, that additional day or two of ceremony config isn't a big hit. If it is something I'm going to spend a day on, well, all that extra code is 'wasted' time in terms of the ability to get a product out the door and do it cheaply.
Mid-level programmer here; I feel that many of these questions focus too heavily on 'gotchas, 'domain knowledge, and "define-this-term" questions. If I spent a week reviewing "java interview questions" I could probably ace this, but it would probably do you little good in determining where I'm at. I would also likely be extremely bored (or nervous) in such an interview, and not walk away with a great impression. Ideally, interviews should create a discussion, and through that discussion, you should be able to get a good idea of where this candidate is at. For example.. *"Let's talk about interfaces; tell me about several good and bad uses of interfaces, how they're useful, how they're abused, and perhaps one-or-two ways you've used them."* This is an open-ended question, but any mid-level java developer should be able to answer this one adequately, while senior ones should be able to express high-level architecture and design. For multi-threading, I'd probably ask another open-ended question, such as... *"Tell me about threading. Why do you use threading? What are some of the drawbacks &amp; gotchas of threading. Tell me about frameworks you've used to manage threading? How do you manage data which needs to travel across threads? What about error handling?"* Any mid-to-senior level developer should be able to participate in this discussion, and through it you should be able to get a clear idea of where they're at. *"Tell me about clean code principles."* Again, an open-ended question, which any competent candidate should be able to go on for hours. Code reviews, extracting methods, minimal parameters, minimal side-effects, separation of concerns, single purpose principle. Keep probing the 'why' question to discern if it's just something *"they've been told" or whether they actually understand the value or reason. In other words, try to rephrase your questions in such a way that they create a discussion.
Of course it's often hard to remember things in an interview that you would normally just google quickly. One thing i've tried is writing a bunch of terrible code, let's say about 20 lines worth, and asking the candidates how many problems they can find. I also like to mention some well known coding advice and ask why do we do it that way, e.g. why make data members private? Why do we synchronize some methods? Why do we reactor common pieces of code? 
Where'd you pull that number from?
Humm, interesting, I just made a demo application drawing almost nothing. I got 400fps with i7-2670qm and gt525m. You should be fine.
I don't agree. I think if you accept that the person interviewed might not know some of this simply because they never needed to know, and instead listen to how they reason around the questions, it might work. Yes, there's quite a few buzzwords, but it's not that bad. A lot of this is just the nuts and bolts of programming. And you have to ask about *something*, so why not this? Together with reading the interviewee's code this might work. (Ok, some of the questions are bad. "How do you configure a data source in Weblogic?" is not something you want to spend time asking. What do you want to them to say, anyway? Which buttons they need to click?)
Some data, no idea how reliable: http://www.payscale.com/research/CA/Job=Chief_Executive_Officer_(CEO)/Salary
There is even [PATCH](http://tools.ietf.org/html/rfc5789). 
One reason for that is that the J2EE/EJB specs basically forbids you from creating threads, but didn't come up with a standardized way to acquire them before version 7. 
I'm sure you may not intend it that way, but in general the attitude of throwing things over a wall instead of working together has been the cause of so much pain in our industry. EXACTLY the attitude of "I couldn't care less about ..." from the developers side and "you are not allowed to touch anything, unless you fill out this six page form" from the ops side is what is crippling our industry. If you have been in anything else than a 1 or 2 person shop for anytime longer than a few months you must have come across this practice. MONTHS... MONTHS on end of delay caused by opening, closing, re-opening, re-closing... of issues, discussions, phone calls, you know what because "something" doesn't work in production and requires a single extra parameter to be provided somewhere. Developers "couldn't care less" and say ops has to configure something. Ops doesn't have a bloody clue. The big brained architects in their ivory tower decreed that ops has to manage the thread pools for an application server on the basis of that the thing is called "application SERVER" and ops must have the ultimate power over all servers, but ops has no idea at all what parameters are important for the code since they don't wrote the bloody code and for them the application and frankly the entire AS is just a black box. So Ops can't fix it since they don't know what the fix and close the issue. But someone does wants it fixed so re-opens the issue. Developers couldn't care less so close the issue again. But someone does wants it fixed so re-opens the issue. Developers still couldn't care less but some angry manager somehow forces them to care. But developer can't do anything since only ops may touch the AS. So developers re-assign the issue to ops, who promptly close the issue again since they still have no bloody idea what to do. But someone REALLY does wants it fixed so re-opens the issue. But, #(*^(# Ops just doesn't know... they just don't have the knowledge. They can't fix the issue even if their live depended on it. So they re-assign the issue to development. Developers still couldn't care less, but since they are forced to care eventually scribble something down that ops has to do and re-assign. Ops try to parse what the developer scribbled down and try to find any corresponding setting in the AS they have to manage but know little more about than invoking "/etc/init.d/jboss restart". So they switch something somewhere that they think is what the developer intended. And... close the issue. Issue is tested, and nothing has changed. New issue is created for ops. Ops don't have a bloody clue and never will, so re-assign to development. Development couldn't care less and say they have already provided instructions on what to do and close the issue. But someone **REALLY** does wants it fixed so re-opens the issue, AGAIN. --- This repeats for months on end --- Eventually someone higher up the chain gets incredibly pissed. Storms in, literally grabs a developers, pushed him in the ops office and screams at the top of his lungs; developer FIX THIS NOW! ops, GIVE THIS DEVELOPER THE ACCESS NEEDED, NOW! The issue is then fixed within the minute and everybody is happy The insanity of this all, the sheer insanity of this deluded dance performed by deluded people is what Docker tries to prevent. 
If you need the guy to be able to code, ask him to code on the interview. Make it low pressure, use a shared web text editor like etherpad, let them access references. Work through some simple problems with them and see how they approach problem solving. No 'gotcha' questions. This has worked out decently for me.
I think most of the questions are definition based, typical of the type of questions the school system tends to throw at students in tests. I have been coding for a very long time, and have used mostly ArrayLists, HashMaps and HashSets in 99.9% of the code I wrote. I could not name three implementation of each collection type, and I work in an architecture team. Its the kind of things you will almost for sure never need in real live and more of a Java certification exam question, it only says the candidate spent last night reviewing collections API because he was tipped off by the recruiter. What are generics its the typical definition question. The fact that a developer cannot articulate clearly such an abstract definition does not mean he does not know perfectly how to use them. Contervariance and covariance the same: these are opaque academical terms that mean nothing. He might perfectly be capable of using extends and super while writing generics without being able to make a formal definition of these terms. notify vs notifyAll are low level API of the thread API, are you planning on having the developer write multithreaded code? If its a Java EE developer the rule number one is that he should not write his own threads, the container generates them for us. Asking if a Spring singleton might have non autowired properties would be a better question: it would show if the Java EE developer understands threading issues without asking about an API that he should never have used. The Database questions the same, these are definition questions. Its not because someone can put together a nice definition that he is a good programmer, those are two completely different skill sets. These are the types of questions that you study for a test, memorize them and forget them the next day. Your Hibernate questions are quite OK, try to apply the same to the other areas. Concerning the Java EE questions, the guy might have been 5 years working locally in Tomcat and a WAR gets deployed into Weblogic without his knowledge. Not knowing how to do administrative tasks in a web console does not say anything about the individuals capability as a developer. The Spring questions are OK, so is SOAP vs REST. For OOP: let the guy in a room with a project with a couple of classes and ask the to "clean them up", then discuss the result with him. You will quickly see if he understands those concepts: loose coupling, high coesion, etc. Overall is a definition intensive interview style, that will give the upper hand to academic/definition minded persons, a lot of great developers which would be a great fit would be filtered out by this style. Most persons would not perform well if they where not tipped off by the recruiter. I don't think the questions are filtering the candidates the way you expect. An half an hour exercise, and questions focusing on the Why of things: Why do we need ORM, why is dependency injection useful, etc is more interesting. 
This looks and sounds like a a test or an exam I would have had to study for. Reminds me of the time when I was still taking classes. On that note, some of the worst people in my class at completing assignments (actual work that required thinking) would do very well on tests simple because they could remember things reasonably well. When it came time to actually use those things however, they usually just dicked around on the internet instead.
The biggest issue I see is that you're asking for a guy that knows everything about your environment already. You're setting the interviewee up to fail because they haven't used your stack. That's why you need to account for a couple months of "ramp up" time with a new hire at any level. When you're hiring senior people, they're coming from a different stack of technologies, but probably doing the same thing. If you want to elicit thinking-type responses, ask high-level, vague questions based on end-results. For example: "How would you provide data from a database?" Following up with questions like: "What are the biggest pitfalls with that solution?" And "What other solutions can you think of?" If you only ask five questions and talk for half an hour, you had a good interview.
An idempotent REST service! wow that's a nice buzzword to stump a chump.
&gt; Describe SOAP Evil incarnate :)
Using an apache or nginx front end to java was an interesting technique about 15 years ago when apache was clearly faster at doing this task. Today with a non-block NIO type system, I doubt there are significant performance advantages, and there are certainly penalties on the complexity side. I would also consider a fronting httpd in the case where you have a heterogenous programming environment and people want to run PHP or some such.
There are several maven docker plugins. It would be awesome if the POM could literally do ALL the work for you. so you're more like git clone XXXXXXX mvn package (which would build docker image ) docker run image file I would also like to see a clear way to make sure that the docker image is versioned in much the same way that a WAR or JAR file would be versioned. In larger environments version is super critical. 
It looks to me like you know these were bad questions and are now looking for some reinforcement to not feel bad.
Good questions. Missing algorithm line of questioning
You already have plenty of answers I see but I'll respond anyway. I may be going on some interviews so this is relevant for me. Like others I'm not a big fan of these questions or this type of interviewing. Personally I don't remember a lot of buzzwords as others have called them. I get them mixed up all the time. It's no that I don't know how to program I just don't always remember which is which. Let's take ACID for example. I never really remember what it stands for. I remember A is Atomic meaning all transacitons happen or none happen, D is durability meaning the data is stored permanently...and now that I've looked up C and I it sounds familiar. That's all well and good but what's really the point of asking this question. If we're using a common database all that is taken care of for us. It's nothing I think I really need to worry about. I don't care about SOAP because basically everyone says SOAP sucks and use REST instead. I know nothing about SOAP because I don't see the point in learning something I won't use and will just forget anyway. What are you hoping to get out of this. Is this a phone screen? A first in person interview in a series of interviews? Knowing the answers to these questions does not make you a good programmer any more than not knowing them makes you a bad programmer. You could read a couple bullet points the night before an interview the same way you would cram for a test. That doesn't mean you implement what you've crammed.
I've spent years coding. I'm not the best, don't have much professional experience, but have pumped out some pretty complicated and neat projects. I would fail this interview so hard that you would think I didn't know what a computer was. Why be so definition-based when you could pick at how someone's brain works? why not give them a task and have them try to solve it, or describe an approach?
Many of these questions are facts I consider important for an API or meant for a trivial Google search. Interview questions should not... 1. address that which would require memorization 2. address syntax beyond the basics 3. require environment or configuration specifics Do you want to hire a programmer or a developer? Instead questions should... 1. Ask about high level process interactions 2. Ask for some insight on design considerations for hypothetical architecture arrangements 3. Ask for an overview of processes when implementing a particular system in such a way your interviewee may demonstrate the "senior" part of the developer position. If I were interviewing for your position, I would be concerned in your inability to frame questions around the skill sets the job description claimed you were after. A senior java developer can get up to speed on these trivial specifics the first day or two in office. What that individual cannot do, however, is suddenly design and maintain an existing system within an environment they do not fully understand. --- Below I have copy pasted your post below and **~~crossed out questions~~** I felt inappropriate and commented on others. All items below addressed should be in **bold** and/or **[brackets]**. Hope this helps and best of luck! --- I wanted to make sure I asked in-depth questions that would demonstrated in-depth knowledge about what we need from a developer and the points I saw on the guy's resume (Java, Java EE, Spring, OOP, Hibernate, etc.). I had more questions in each section, but I had to skip past stuff because I wasn't getting answers I liked out of the guy. Do you guys think these were reasonable questions to ask in an interview? I was really more interested in the candidates reasoning than knowing exact answers. This was a phone intervew. The guy gave me good "book" answers (sometimes seemed like he was reading from a book, hmm). But when I started asking "why?", he couldn't give good answers. Some basic platform stuff: - List three Collections interfaces and the basic contract of each. List concrete implementations of each, how they differ, and performance characteristics in space and time. - Describe the contract of equals and hashCode. Why is it important that if you implement one, that you implement both? - What are generics? What is type erasure and what are the consequences? What are variance, covariance and contravariance? If blank stare: why can't you assign a collection with a generic type binding of a sub type to a reference to the same collection type binding of the super type? How do you specify the type binding of the super type to allow this? How do you specify the type binding to allow type-safe insertion? Concurrency - **~~Explain how notify and notifyAll work, and the difference between the two.~~** **~~Why prefer notifyAll to notify?~~** - What is a deadlock and how do you avoid it? - What is a race condition and how do you avoid it? - ~~**What are some of the high-level concurrency classes provided by**~~ ~~**java.util.concurrent and how do they work?**~~ Database - What are the different statement types and why would you use each? - How do you prevent SQL injection attacks? - What are transactions? **~~What is ACID?~~ [Might be a good question, I do not have enough experience to say]** Hibernate - Give an overview of Hibernate and ORM. How do you load objects into the session? What does the session do with the objects while in the session? What is the difference between getting a persistent object from the session and querying for persistent objects? - When is it better to use plain SQL instead of ORM? Java EE - **~~How do you configure a DataSource in Weblogic to make it available~~** **~~using JNDI?~~ [Ask about environment instead and why X lives in Y and not Z instead?]** - What are some ways for the client to obtain a reference to the DataSource from the app server? (Spring is not the answer I am looking for) Spring - **~~Give an overview of how Spring Dependency Injection container works.~~** **~~What is the purpose of DI? How to specify bean definitions? What are the~~** **~~different scopes? When do beans of each scope type get instantiated?~~ [might actually be a good question, I do not have enough experience here to say]** Web Services - What is the difference between SOAP-based web services and REST-based web services? - Describe SOAP and WSDL. **[stop using SOAP lol]** - What exactly is REST? What is **~~HATEOAS?~~** What is the purpose of each of the HTTP verbs? What is idempotence? What is content-negotiation? OOP - What is decoupling? Why are loose**[ly]**-coupled classes desirable? What are some drawbacks? - What is cohesion? Why are highly cohesive classes desirable? What are some drawbacks? - Describe polymorphism. What is the importance of contracts between interfaces and concrete types? Why is polymorphic code desirable? What are some drawbacks? - **[Describe to me a design pattern you used in a past solution and why that approach was appropriate.]** ... **[Perhaps a question or two on the webstack and why the industry standard breaks down an environment in this manner. (Justifying industry standards with a *why* will act as a good filter in your search!)]**
This is a very silly set of questions... you will not know anything about the candidate's actual skills. And if I were interviewing, I'd think my interviewer was either junior or an imbecile.
The very best question is this: "You have technology X on your resume. Tell me some things you DON'T like about that technology." That question is key because it drives out unique experience. Explaining how a technology is SUPPOSED to work merely shows they have studied. The question above drives out evidence of true experience.
Concurrency, databases, OOP, REST, are NOT Java minutiae. 
In my experience, a person who gets concurrency is typically a pretty solid developer. It's one of my favorite things to ask about. Not necessarily language constructs or anything like that, but I'll put up some code and just ask them to explain what concurrency issues there are and how to go about fixing it, then quiz them to make sure they understand their own solution and aren't just throwing "synchronized" all over the place.
Exactly. In all my profession experience, I've *never* run into problems around concurrency, coupling, dependency injection, or database transactions! What's he asking about that esoteric stuff for?
Depends on what you are looking for. But the generak rule is: B players work with B and C players, however A players work only with A players. I classify myself as an A player (cto currently, 25yo) and I would have been able to past this test even thought I am not much profiecient in Java. For me, those are good questions If you add some coding puzzle as well.
You are demonstrating exactly the problem with these questions. By your own admission you have zero work experience, and thus are quite definitely not the sort of candidate that the OP is looking for... and yet you could answer most of the questions. Yet many people who *are* senior Java devs with plenty of real-world experience are saying they couldn't answer the questions. What this means is that if the OP uses these questions to filter candidates, he is more likely to end up with someone who has recently studied Java academically (and thus actually remembers the answers to these questions off the top of his head) that someone with actual, useful real-world experience (where being able to answer these questions off the top of your head is completely irrelevant, and thus many people will not have retained the information). It's kind of like hiring an author based purely on how well they can diagram a sentence. You'll end up with a recent high school graduate, because who else remembers that? Using trivia to screen candidates is a terrible plan, as candidates knowing the answer to trivia questions tells you *absolutely nothing* about their real-world abilities.
&gt; My manager asked me to make sure that we get a good senior candidate because we deal with very critical software in a very complex environment. We've gotten senior guys before that really sucked. I had to work extra hours to fix the code written by this so-called senior guy because it was so terrible. Interesting. You have a problem on hands, real concerns from the past and somewhat requirements for an engineer. Still, in your list you have zero questions testing for these specific concerns and requirements. 
Ok, so let's pick a specific example: &gt; What are some ways for the client to obtain a reference to the DataSource from the app server? This is a particularly terrible question. I'm a senior Java dev. I have spent the past five years writing software which works with DataSources it gets from the app server. And yet if you sat me down at a blank screen without access to Google and told me to set that up, there is no way on earth I could remember exactly how to do it off the top of my head. This the sort of thing you generally do *exactly once* in a given project and then never, ever need to look at again. If you *do* need to remember how to do it, Google will answer the question in seconds. So given that, why would I bother to waste brain cells remembering exactly how to do it?
Throw stateless and scalable in there and the table will start vibrating.
Yeah, there's a reason there are no algorithm questions on a senior EE dev interview.
Interviewing is definitely a skill that not everyone has. Recognising that you're got a weakness in that area is the first step to getting better, obviously. I'd highly recommend the Manager Tools podcasts if you want to learn about interviewing (along with lots of other management topics).
He may have moved on to Akka.
Explaining why Java needs it and functional languages don't seems like a more interesting question.
guys, he isn't being closed minded or insulting. He is only explaining why he did what he did to get a better understanding. You don't need to downvote him into oblivion.
Quite true, those are good question areas. Notify vs. notifyAll, type erasure, variance, covariance and contravariance... probably not so much unless you are looking for a language designer.
great feedback.
It gets used by Hash[Insert Collection Here], for one. However, I think what you're asking is more along the lines of "Why is it that when I override equals() it is considered good practice to additionally override hashCode()?" Let's use String comparison as an example. The equals() method iterates through each character in the String and makes sure they're identical. This is costly, especially for very long Strings. Imagine you have a very large List&lt;String&gt;, called "myList", containing lots of very long Strings and you try doing something like "myList.contains(reallyLongString)". Most Java novices expect that contains() just calls equals() on every String in the collection. It doesn't, however, because this is a very computationally expensive task. Here's where hashCode() comes in. The purpose of hashCode() is to provide *fast* hashing, but not necessarily collision-free hashing (but if you can get both, go for it). That is to say, you should be able to call hashCode() and get a hash which identifies the object upon which you've called it *relatively* uniquely. In simpler terms, if hashCode() calls on two different instances of an object do not return the same value, those objects are **NOT** equal. If they *do* return the same value then *maybe* they're equal. So, then, when you call contains(), contains() is actually calling hashCode() on every object in the List. If it finds an object whose call to hashCode() matches the result of the call to "reallyLongString.hashCode()", *then* it calls equals() to make the final decision. This is why hashCode() is important, it prevents you wasting time on calling equals() on lots of things that are not equal. Edit: Actually, I am a ponce and this only applies to hash collections. Stuff like ArrayList will just call equals(). Still important, though.
It's worth noting .contains() included with Java's Collections will call hashCode() as a weak equality check before calling equals(). If you consider a very large List&lt;String&gt; containing very large strings, you can see why this is preferable to just calling equals() on everything. Create a thin wrapper object around a String where its equals() calls the equals() of the String it contains, but where hashCode() always returns 1 or something if you'd like to see the difference in action. Edit: Actually, I am a ponce and this only applies to hash collections. Stuff like ArrayList will just call equals(). Still important, though.
I think questions about how someone works, how they manage multiple projects and priorities, and how they track progress are more important. Most of the questions you asked could, as you said, be read right out of a book or Googled quite easily. Not to mention Eclipse IDE can not only identify numerous compile-time issues instantly, it will also be able to fix many of them in one click. However, if the job posting said "Knowledge of SOAP, REST-based web services" then I think it's fair to ask a more specific question about those technologies. I guarantee the word "covariance" isn't anywhere on the job listing though. Also, you should pose these questions to current developers first. If they can't answer a question you might rethink asking it to an interviewee.
Maybe a good question would've been, "What do you do when you're confronted with a problem you don't know how to solve?"
Maybe it's a regional thing but I'm not sure I've ever heard the term "HTTP verb" before. I've always referred to them as HTTP methods. You're not fishing these questions out of a textbook are you?
This guy knows what's up. 
Can you give an example that isn't better solved by the existing BiFunction?
No. Singletons are an anti-pattern. Also, the third example is incorrect: &gt; public static Singleton getSingletonInstance() { if (null == singletonInstance) { synchronized(mutex){ singletonInstance = new Singleton(); } } return singletonInstance; } It's not even the naive double-checked lock. Do you know what `synchronized` does? Multiple threads can still run line 4, just not simultaneously. So multiple instances can be created. The synchronization is completely useless; this is no better than the first example. Even if you insert a second check between lines 3 and 4, this implementation is not correct in Java, because [a second thread may see a partially initialized instance](http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java).
You should look again then.
It is commonly better to use DI and an IoC container (Spring) and let it enforce the lifetime and scope of the object (including singletons). No one should be wasting their time implementing singleton on their own unless DI is just not an option. Also, as others have pointed out with the linked example... most devs screw it up anyway.
You can watch [this](http://www.youtube.com/watch?v=mKjvKPlb1rA&amp;list=PLqq-6Pq4lTTZTYpk_1DOowOGWJMIH5T39) with me if you like.
Not Java at all really. Just things you need to know in addition to at least one actual language.
Best explanation yet, thanks!
The checked exception interfaces really improve code readability, though.
Why would you want to omit algorithm questions?
Impenatrable Indian accent. No thanks.
Agreed. What's interesting is the lack of questions about testing. If I was conducting an interview I'd honestly care more about if the applicant can write a simple unit test rather than if they can implement an algorithm. If they demonstrate they know how to write a clean/effective test you can usually surmise that they have an understanding of how to write clean/testable code.
Look into Java 2-D, jMonkey, LWJGL, Espresso3D, Ardor3D, and Jreality.
Thanks 
Do you have local filesystem access to the virtual machine? (Direct folder mounting, SMB, NFS, SSHFS, etc) I'm using Netbeans, there you can add paths to different JDK installations and then you can set the JDK Installation per Project. For Intellij I found this: http://wiki.jetbrains.net/intellij/Setting_up_a_project_in_IntelliJ_IDEA#Specifying_a_JDK_to_Use Seems like you can choose per project when you haven't configured a JDK Path in the IDE Settings.
IntelliJ has its own UI designer for Swing, and JavaFX has SceneBuilder. I've tried out JavaFX and it's easy to use.
Yeah but what I'm trying to know is which app are using which UI solution. For example I want examples of apps using Swing, Java FX.... I want to know what solution OpenOffice is using (if it still is in Java as it was) But thanks :)
What kind of company are you CTO of? I'm interested to know your career path to get there!
@zeringus why would the second thread enter the synchronized(mutext) block because the instance is already created meaning its not null. Please post this as a comment there. let people also analyse it. 
double push Ctrl, keep Ctrl pressed, use arrow up/down - seems nice, only mentioned on twitter, I wonder what else there is...
Uncheck them?
Have a 2nd read of that installer. "By clicking next and installing..." basically it *will* install the toolbar, whether I want it or not, and all I can do is to not set it as a default search provider.... I'm trying to avoid installing the damn thing, seen as it's working that hard to get onto my computer, I'm having doubts that it will leave peacefully.
If you have difficulty understanding what he's saying, all the more resason to listen. His accent is very light (to my ear), being able to communicate effectivly across cultural boundires is a useful skill. 
[These?](http://imgur.com/6Jsv0ep) Which lead me to [this,](http://imgur.com/GmNfUiA) Which again lead me back to the first screenshot in the original question...
Yes well, tell that to my bank... they've yet to go away from using Java for authentication purposes (haha, I know... T_T) Edit: it's a good bank, and the new system is on the way.... soon^TM
If you install the JDK instead of the JRE, you shouldn't get those nags at all. (IIRC, I've not installed java on windows in a while).
Nope, same box, same options..
Advanced Options &gt; Uncheck all stuff &gt; Install If it is already installed you obviously need to deinstall it first.
OP should take note of the "/usr/libexec/java_home -v 1.x" command. It eliminates the need to remember which root paths to browse after install or upgrade.
Why? What do you mean with "to mess with my local installations"? A project should not modify the Java SDK!
Install from ninite.com, that doesn't install the toolbar.
There are no advanced options any more it seems...
It means it proceeds with the rest of the java install process.
Where did you download that. Link please.
the OO gui is not in java (and it never has been?). jDownloader probably uses Swing, you should check that out. SAP uses java for its client afaik. 
I'm watching [this](http://www.youtube.com/watch?v=4XpnKHJAok8). not directly about java but related. 
http://java.com/en/download/index.jsp
Oh you installing the JRE? Haven't installed that in ages.
Denmark?
Seems like you're going through more effort to not install the toolbar than it would be to simply uninstall it after.
I know Im not a great dev but i know Im not a bad dev either. I feel like this explains my lack of ability in answering questions in seconds.
Close, Norway.
I know one reason I would like to do this is that for all my cs classes we use java 1.7, but the school computers only have 1.6. The computers in the cs lab have what I need but it is extremely loud in there during the day. So if I could use the library computers, which I need admin permission to install on and already have eclipse with 1.6 with the 1.7 jdk from our cs server that would be great. 
It says "By clicking "Next" **and** installing the Search App...". If you uncheck both boxes, it will not install the toolbar. I have installed Java on more occasions than I can count, and I have never seen the Ask toolbar on my systems.
I didn't mean it modifies the JDK. I just like the self-contained nature of it. I like to keep my 'personal' side of computer clean and neat without development dependencies because they pile up over time across many different projects. With a virtual machine I can create or destroy it at will no matter what version it is and how many things it depends on and all that.
I think in Eclipse these are per Workspace ... maybe even per project?
If you want to develop for Java 7 you need JDK 7 installed locally. Period. Depending on the OS and permissions you might be able to install a JDK inside your user directory without admin rights. Java (and the common IDEs) don't support "remote" JDKs because 99% of people never need this (don't confuse this with remote debugging which is something completely different).
I have gone the full spectrum on the value of unit testing. I have come to find little value in your garden variety unit test that is so full of mocks that it tests very little. The only testing I accept as valuable anymore are full-on integration tests. So many times I have been on teams that spent lots of time studiously writing a pile of unit tests--costing us lots of time--only to see those tests eventually get skipped because they are no longer relevant or because later developers didn't have the time to fix them following changes to the code base. If all you want is to verify that someone can write a few unit tests, then I think you're setting the bar too low. Also, I am not suggesting that any interviewer ask someone to write an algorithm. But in the hothouse environment that is an interview, I do think you can determine if a developer has any sense of the computer science behind their code. For example, you will never be exposed to the concept of Big O or Big Omega or Big Theta unless you have delved into the computer science fundamentals of your craft. In two minutes you can answer the question: "Has this developer just been a code monkey or have they cared enough about their profession to dig deeper?"
Thanks a lot for your examples I was not sure about OO so thanks for the clarification. 
I just installed the jdk last week. If you uncheck them you don't get the toolbar.
I always tell my team that "I don't know" is a perfectly fine response as long as it is followed by "...but I can find out". My ideal interview technique might be giving the candidate a short project to do in a language they've never seen, or even work with them on something we both have never used before. Sort of the opposite approach from OP. Not sure, just a thought. 
Recently a friend of mine asked me for newbie Java book recommendations, so I bought HFJ to give it a read. It's still plenty relevant as it really only covers the basics, things that haven't (and won't likely) change too much. As an intro book, I think it's pretty solid once you get over the awful pictures/jokes and just focus on the content. After that book and a little more Java experience, I'd highly suggest you read Effective Java.
A couple off the top of my head. http://jshot.info/ http://www.sweethome3d.com/ 
use Linux and install using apt-get or yum.
Thanks
You should post the code! This isn't /r/TicTacToe, after all! ;-)
I don't think it would be interesting though, really messy after all 
Thanks. I didn't manage to find any freely available libraries but decided to write my own simple engine. I'll post it here once I'm done. @red_derkh Thanks for the link to the CA subreddit!
How would you then get feedback on it, as you originally posted? All your language points to qualifying your work and desiring feedback.
good point, have some trouble with my graphics though... I think I might've posted this too early
The stupid jokes/pictures are exactly what elevate this book over its peers. Kathy Sierra has studied cognitive science and concluded that silly images and puns enhance knowledge retention.
Hey, I'd be happy to see your code
http://sourceforge.net/directory/environment:ui_swing/
Awesome thank you !
Source Code: https://github.com/TheMejmun/TicTacToe
it's online! Don't blame me for the mess 
I don't really understand the question. A BiFunction accepts two different Object arguments and returns and Object. If you want 3-argument functions, or you want to avoid boxing primitives, you can use my library.
I don't consider those things as "buzzwords to be memorized" but rather as "names of things a competent dev will know about." And I think it's very reasonable to expect a senior dev to know the vocabulary, so to speak, of our profession. All professions have specialized lingo, and for good reason. A doctor wouldn't object to being asked to define a metatarsal nor a plumber about a mortise and tenon. FWIW, in my own technical interviews I also ask candidates to just write code. It's less ambiguous that way. I don't have a good one for DI, although I do have a fun one around breaking dependencies that typically leads someone to DI - few people get that far, as they don't understand how to work with legacy code (not that there's a whole book written about that or anything...) I should add a straight up DI one though. 
If you're looking for a more rigorous approach for newbies, might I suggest Sedgewick's "Introduction to Programming in Java: An Interdisciplinary Approach" http://introcs.cs.princeton.edu/java/home/ This is the same author of the excellent "Algorithms" book, which is a less dense alternative to the CLRS text, and would be the logical next book after completing the Java book to enhance your skill on the theory side.
Your `zipWith` and `enumerated` ideas both work fine with the existing `BiFunction`. Can you give an example of a use case where I would want to use a three argument function?
The point is that knowing the names of things isn't enough. Being able to put it into practice is what matters. Put another way, it's debatable whether or not knowing these terms is *necessary* but it's definitely not *sufficient.* And the debate of whether or not it's necessary is obviated by the fact that you can just measure what matters instead.
I know you asked Java related and these are not, but I still post these. I've really enjoyed all of them and think they are perfect "bedtime videos". 1. [Brain: Searching for the first PC virus in Pakistan ](https://www.youtube.com/watch?v=lnedOWfPKT0) 2. [Scott Hanselman, "Virtual Machines, JavaScript and Assembler"](https://www.youtube.com/watch?v=UzyoT4DziQ4) 3. [Mikko Hypponen: Fighting viruses, defending the net](https://www.youtube.com/watch?v=cf3zxHuSM2Y) 
I think the problem with filling your book with puns and jokes is that different people have different tastes. Some people will love it some people will hate. Some will like different type of jokes and on and on. I for example really enjoyed dipping my feet in the java world using that book but that approach isn't for everyone
I'm sorry, *what*? You based **ALL OF THAT** on a few typos!? You don't know him, or what his situation was... He could've been typing on the phone, which can cause a few typos... I mean, I'm sure you've made typos before...
Thanks a lot for your answer and your work on that. It's really hard to illustrate with popular apps as indeed Java seems to be mainly used for company apps. Your research is a precious source of infomations. Thanks a lot again.
Quick question - if I paste this into Eclipse, do you know why it wouldn't be compiling in there?
I'm not familiar with this particular book, but for Java there's a pretty easy rule of thumb that's still relevant. Generics were introduced in Java 5, released in 2004. This was probably the single most important change to the lanuage thus far. If generics are not an integral part of the book, then the book is definitely outdated and not worth reading. 
You are probably missing my image files
Thanks!
Sadly, probably the most well known JavaFX app is Dirk's FlexGanttFX. 
You could try something like Docker, no?
Thanks, Java FX is so new I couldn't find anything. It looks nice BTW
Listen, dude, he's just trying to drum up views on his youtube videos. I am not alone in being sick of thick Indian accents of people who want to step in and feed their egos by acting like they have some special knowledge. Just move along if you don't agree.
Copy the jdk on a flash drive. In intelliJ add a new JDK and point to it.
I remembered a site listing 10: http://java.dzone.com/tips/ten-amazing-java-applications
You are well spoken. I'm not and I accept it. I am a fat white systems engineer. The only YouTube videos I have are of me farming in Rift. Possibly of note I've lost nearly 200 thanks to /r/keto My point is the accent in this video is minimal, if it is difficult, it may help you in life to watch and get accustomed to other dialects. You are free to watch whatever you want. 
Head First Java Second Ed. was released in 2005 I think and covers java 5.
Yeah, it makes the whole line really inconsistent as well. Like, I enjoyed Head First iOS and Head First Design Patterns, but I found Head First Java completely insufferable.
Yeah its unfortunate. I thought it would have more adoption by now but QT/C++ is so entrenched for desktop apps and JavaFX for the web is a waste of time, IMHO. I'm currently building a corporate enterprise app with it and I quite like it though. Some of the APIs need work but its definitely usable. 
Fantastic
Interestingly, it doesn't work with JRE 1.7 (at least on linux) - this seems to be the way to fix it: http://stackoverflow.com/questions/10382929/unsupported-major-minor-version-51-0 It seems a little difficult to find stats but I feel like 1.7 would still be pretty common. 
A brilliant one is CA APM Workstation. Formally Wily Introscope. One of the best enterprise software applications I have ever used let alone being completely written in Java Swing. 
I want to put this post on a giant stick and just run around in circles with it waving it around in everyone's faces. I'd also like to add that the days of being just on the dev side of things or just on the ops side are disappearing very quickly. The whole devops movement makes sense for pretty much everyone involved. Developers can own, maintain, and fix their code because they have the knowledge and trust to do so. Ops can monitor, mitigate, and plan infrastructure needs well into the future because there's a high degree of understanding and trust. The business is happy because shit is getting done, better than before in many cases, and usually a lot faster. I'm going to send this little girl to torment vokiel http://www.developermemes.com/wp-content/uploads/2013/12/Worked-Fine-In-Dev-Ops-Problem-Now.jpg
Using the same software, configuration, versions, and env. doesn't sound like a sane testing environment? Wut?
Head First Java introduces most of what's covered on the current Oracle Certified Java Associate exam (albeit pretty briefly), plus a bit more (the author, Kathy Sierra, wrote the OCJA exam's initial draft, so she knows her stuff). It's a great introduction to some of the very basic features, and gives you enough of a taste of everything that you'll have some idea of where to go next. After you finish HFJ, you'll want to progress to something more comprehensive, but it's a solid start *particularly* if you have little to no programming experience right now (which sounds like is the case).
We've come to a very similar model using Vagrant + Puppet for our developers. The first thing that's asked now when someone has a problem is if they did a clean checkout and a new vagrant up to remove many questions about their environment. We have a couple of people working with Docker now, it would be interesting to see if we could get a similar setup going with Docker. 
Thanks for the comment! I already ordered it so I'm excited to get started soon. Maybe I'm jumping too far into future, but what would you suggest after HFJ? Any books? Just working on personal projects? Maybe code challenge sites?
If you have a many-item stream, and you're enumerating the items with their indexes, you are creating a Long object for each item in the stream if you use a BiFunction. An ObjLongToObj avoids that boxing. The same applies if you're using zipWith on an IntStream. But let's not judge a library before it's even written!
Java 1.5 came out in 2004, so you won't be too far behind using a 2005 book. If it works for you, go for it.
Yes and no. You install a local JDK, usually the latest to run your IDE. For Java Web Projects (JSP,JSF,Servlet,SpringMVC,JAX-RS,etc) the IDE deploys the project to an application server to run it. Some IDE + app server combinations support remote application server deployment.
Article should be renamed to 'How to use Maven'
I didn't expect that... Well, that's disappointing. I'll have to do something about it 
Looks like a pretty easy fix - just a compilation option. 
The problem might be that I'm running java 8 only on my PC
I posted a question a few months back - http://www.reddit.com/r/java/comments/29f3ul/why_is_spring_mvc_better_than_servlets_jsp/ . The replies I got was things like "Spring MVC is a higher level abstraction" or "Spring is more like a structured way to use Servlets and JSP. " - These are not good reasons!! - in fact the only reason I can see is so that developers who would have originally developed using standard JEE, will instead now be locking themselves into Spring and the more people using Spring the more consultancy work Pivotal can get. 
yeah, but if you recompile with javac -target 7 {.java filename}.java then it'll work on java 7 and newer. It'd probably just lose a few efficiency improvements or similar which are only available in 8. It works perfectly well with Java 8 here too.
https://www.youtube.com/watch?v=KkMDCCdjyW8
I don't think a small program like this one will have efficiency problems though 
[Absolute Java 5th Ed.](https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#safe=off&amp;q=absolute%20java%205th%20filetype%3Apdf) is what i'm using now to learn. I think it's great so far.
Definitely not - I was just saying that generally that'd be the only downside to compiling with J7 support. 
Yes this is very easy to follow and clear
JDK 7 vs 6 isn't that significant of a difference, especially at the level of school projects. Unless you're heavily relying on something like NIO, it would be trivial to just develop against 6 and port some of the code over to 7 later (using try with resources, multi catch, etc).
Nice listing thanks! 
Thanks I'll also look at it! 
The big long box you shove URLs into.
Glad to hear that. I'm planning a big application after my paper. I learned so much about JavaFx that I'd like to use it. But seeing so few projects around it worried me a little bit. Is your RAM usage not too heavy? That is my only worry based on the few demo apps I made for illustration purposes on my paper. 
&gt; Java (and the common IDEs) don't support "remote" JDKs because 99% of people never need this I'm still trying to think of a reason that anybody would ever need this (versus just wanting it for whatever weird reason). 
i would recommend IT crow.. it is no related to JAVA directly but to IT "world" at least. :c) have a funn
I don't know how you mean. My problem is to get the IDE to use a remote JDK (not necessarily for running the application, but for things like compiling and syntax checking, etc).
You don't know you need this until you use it (and until you work in reasonably large teams). I use Vagrant with a lot of workflow automations and having remote interpreter/SDK feature is an important part of the workflow for our team. We have done it with non-Java projects before and it has been amazing. Everything is running in VM including the compiler infrastructure which means you don't have to install developer crap, manage environment variables and multiple versions on your system and everything related to a given project is self-contained and can be reproduced and created and destroyed at will. A new developer simply does "vagrant up" and everything they need is there, right versions, right builds, right configurations, consistent across all members of the team. And if something goes wrong, "vagrant destroy", "vagrant up" and you are back on a clean slate. 
&gt; neat without development dependencies because they pile up over time across many different projects. That's what your local Maven (or Gradle) repository is for. Sharing of libraries between projects is a good thing!
I think this is an X-Y-Problem: http://mywiki.wooledge.org/XyProblem
The [Java Tutorials](https://docs.oracle.com/javase/tutorial/) are well-written, up-to-date, and free.
You're trying to solve a problem that shouldn't exist in the first place. You have polluted your environment by making everything global and now you're trying to fix it with a feature that doesn't exist. You should use correct scopes for your tools. Any sane operating system will allow you to install several versions of a tool in parallel (e.g. database). Don't put everything into the system PATH and don't assume that PATH always contains the correct version of a given tool! Don't write into globally accessible directories - each project should have a separate working and data directory, separate database user etc. These are not workarounds! These are normal development practices. Alternatively (or in combination with the practices described above) you could * Use different OS users for different projects * Use Docker.
We use the virtual machine which is similar to using Docker. We have sophisticated projects with lots of different bits and pieces databases web servers proxies version control hooks job processing web crawlers database change management, bash scripts you name it. It simply is not worth trying to setup everything on your actual machine when you can have it neat and tidy inside a virtual machine managed by vagrant. Before we did that it was really difficult. It would take new developers 2 days to setup their environment. Just recently we had a new developer coming in, we had installed Vagrant and VirtualBox previously so I asked him to run "vagrant up" and he was up and running within 10 minutes. So we have an incentive and like to keep as much as possible inside the VM and not have things 'leaking out'. Having to install and use a local JDK/JRE is a 'leak' from that perspective, we'd rather have that sit inside the VM as well, like everything else. So we can maintain the "run vagrant up and you are good to go" method. Not have it turn into "run vagrant up, but make sure you have JDK version x.y.z and adjust your Java paths, etc..." 
I posted a question a few months back - http://www.reddit.com/r/java/comments/29f3ul/why_is_spring_mvc_better_than_servlets_jsp/ . The replies I got was things like "Spring MVC is a higher level abstraction" or "Spring is more like a structured way to use Servlets and JSP. " - These are not good reasons!! - in fact the only reason I can see is so that developers who would have originally developed using standard JEE, will instead now be locking themselves into Spring and the more people using Spring the more consultancy work Pivotal can get.
So your basic problem is that your project configuration is way to complex. You might want to work on that regardless of this issue, otherwise sooner or later you'll end up with a maintenance nightmare.
Perhaps you could try this tool: https://code.google.com/p/apachecat/ I think its for Linux, but it should not be an issue porting over to Windows.
It's not unreasonably complex, the nature of the project itself is complex and it's a large project. We can provision a fresh host from scratch to a fully working environment using configuration management software in 10 minutes. The problem is we don't want to spend time configuring personal environments for 20 people over the span of years. We also don't want to burden people with having to install specific software on their main OS when we can easily have it in a self-contained virtual machine. Now if we tweak something we push it to version control and we can ask everyone to run "vagrant provision" and they will have their environment immediately updated to everything it should have. Before it would be ... "guys ... update your nginx version to x.y.z ... err .. that doesn't build on Mac OS X ... yeah I can't get it on Windows ... there's a problem with cygwin .." yadda yadda .. And people are working on multiple projects at the same time they can't risk screwing up their main OS because of one project. VM gives us a safe playground where we can do whatever we want without fear of fucking shit up and worst case scenario you run 2 commands and your environment is back up and running like day one. So we're getting all these benefits out of this except the limitation with IDE (which is a solved problem with PHPStorm and PyCharm).
The memory utilization is high. It's not so high that it's a deal breaker for me. I'm also a bit unclear on how the Java 8 memory model works and what part the JVM itself is playing in that high memory use. It's hard for me characterize my app to because it inherently is going to use a lot of memory--I use an in-memory cache solution and my app processes a fair amount of data.
Idea requires a local compiler. PHPStorm and PyCharm don't because there is no compilation. Idea is tightly integrated with the Java compiler which means it has to be local and not remote. Same goes for NetBeans and Eclipse. As of execution, Idea supports deployment to many local or remote application servers.
So clearly on an environment where battery would be important that's still not the best solution? 
Does memory utilization have a tangible effect in power draw? I always thought that was more tied to CPU usage. To be honest I've never really researched that before nor done any meaningful profiling with that frame of reference. I know the JavaFX guys really want it to to be a successful platform on embedded devices and I've seen demos of it running on Raspberry Pis and things so I think its still a viable choice but I lack dedicated research on the subject.
I agree with you but being anti-spring will not make you many friends in the Java world. Java devs drool over everything with the name Spring and never analyze if its actually worthwhile.
A few years ago I had a job renovating a web site built back in 2000 using servlets. I converted it to Spring MVC while learning Spring MVC at the same time. Servlets are deliciously simple, but they are only easy to use producing for the most extremely small, low feature, web pages. The difference between building a web site with servlets versus Spring MVC is like the difference between clearing your driveway of snow using a shovel versus a using a spoon. Both will work. 
I have been a developer for 30 years, and a Java dev for 10, and have used spring for a few years myself. The one thing I have noticed is that regardless of the technology, there will be divisions. C64 vs Spectrum. Amiga vs PC. Microsoft vs Apple. Java vs PHP. Spring vs JEE. And people are passionate in their beliefs. Its almost religious. Well, pointing out that the world could be round used to get people hung for heresy, but without the brave few who dared to challenge the establishment we would still all be in the dark ages. Spring religious clerics. look at the scientific evidence I present before you and make your own mind up! 
A servlet from 2000 would have needed to be defined in Web.xml. Also, there was no CDI back then. I am not comparing 2000 technology with what is available now. I am comparing Servlets V3.1 / Jee 6 with Spring MVC.
&gt; "Spring MVC is a higher level abstraction" or "Spring is more like a structured way to use Servlets and JSP. " These are not "reasons" at all, indeed. Here's a bunch of actual features (that i'm actually relying on, so probably only a subset) : * Inline parametric URL binding (eg /foo/bar/{paramId} ) * Seamless integration with spring security and generally the spring ecosystem * Zero boilerplate - just create a spring boot project and you're ready to deploy * Better template framework integration. Non-natural templates systems like JSP are a recipe for crappy UI and using something else requires glue code. * Trivial REST support * Simpler lifecycle management (beans vs container managed servlets) If you don't care about those, fine, don't use spring MVC. But OP is comparing "hello worlds" and drawing conclusions on the technology, it's pretty embarassing. 
Spring Religious Nut! &gt;Parametric URL binding (eg /foo/bar/{paramId} ) Can be achieved using Jax-rs, also part of JEE &gt; Seamless integration with spring security and generally the spring ecosystem So? - Servlets can have seamless integration with servlet security and the rest of the JEE ecosystem. &gt; Zero boilerplate Compare your WEB.XML for a spring app, to a similar JEE app. There is nothing in a modern JEE web.xml, no references to the spring request dispatcher servlet. You need spring boot to hide all this config away from you. Oh, did I say that a full JEE webapp including dependency injection, Transactions and persistance could easily fit on a 3.5" floppy. &gt;Better template framework integration. Non-natural templates systems like JSP are a recipe for crappy UI. Really? whats non natural about putting ${myData.name} into a HTML doc ? Also, what do you have to use for templating? Apache Tiles? SiteMesh? why not JSP Tags? &gt;Trivial REST support JSR 311 &amp; JSR 339 - part of JEE &gt;Simpler lifecycle management (beans vs container managed servlets) whats this supposed to mean? Gah - get back to me when your spring based web app can boot in a second, and can hot deploy without the permgen errors &gt;But OP is comparing "hello worlds" and drawing conclusions on the technology, it's pretty embarassing. *sigh*. Give me just 1 use case, where Spring MVC will do the job EASIER and SIMPLER than a Servlet, or JAX-RS (in the Spring world, it does appear that Spring MVC does a combination of the two). Show me the code! 
I'm going to make some research on this. I have a project for an app which is more supposed to be a background app. So I don't want it to use too much ram for the user. I'll study the problem. But yeah if it works on the pi the use of resources must be small enough
As it stands, your article has no value. It has no real content, your intent is now unclear (are we talking spring mvc vs. servlets, or spring vs. J2EE ?) and you're burning straw men ("Big Pivotal wants your money"). Not to mention the fallacy of "locking yourself" in a platform. **But** i'm not saying you, as a person, are a "nut", since based on your previous asnwer, you are capable of argumenting with facts. Facts that should be included in articles like this. For the record, I completely agree that a lots of things that can be done in Spring can be replicated in a similar fashion using JEE. However writing "Spring MVC == Servlets/JSP" is factually false, as you recognized.
&gt; This question was voluntarily removed by its author. So, you removed the StackOverflow page but didn't delete this post? :/
&gt; Simply replace that with "void", and it won't complain. FTFY
Yeah, the reason is that the Servlets 3.0 annotations were basically copied from Spring. Same way dependency injection made it's way into Java CDI. Spring 4 is going to be Servlets 5 in a few years.
I don't think it matters, having used both technologies and having done a lot of web development. A lot more writing, and writing that is hard to organize has to happen when doing a web site with servlets. Thanks for bringing up the interesting subject, nobody has talked about servlets in years.
Hey pal could I have some help?
Have a look at "How to Use GridLayout" (see [here](https://docs.oracle.com/javase/tutorial/uiswing/layout/grid.html)). Also don't forget to call [*revalidate()*](https://docs.oracle.com/javase/7/docs/api/javax/swing/JComponent.html#revalidate\(\)) on the JPanel using the GridLayout when you add components in it.
My Spring webapps have no web.xml. You should be using a WebApplicationInitializer class which then registers any JavaConfig classes where you declare component scanning and initialize any beans that will need to be injected. There simply is no XML config anymore. Additionally, Spring Hateos and Spring Data JPA are leagues ahead of anything provided by JEE for easily creating database backed REST services that follow HATEOS principals.
Of course restarting the app will solve your deadlock. It must've not been occuring very frequently, and it's good they decided to rewrite the app, because this is definitely beyond a hack. It's the equivalent of 'letting Jesus take the wheel.'
&gt; Better template framework integration. Non-natural templates systems like JSP are a recipe for crappy UI and using something else requires glue code. Care to elaborate on this? What's 'non-natural' about JSP with EL and JSTL? What would you use as an example of a 'natural' template language? (Only using quotes because I've never heard that used as a way to describe template systems) 
Well, let it not be said this article didn't have an accurate title: The "ultimate" something "workaround", just programmatically "have you turned it off an on again"
A "natural" template is a way of saying that you can just open the template file with a browser and it will display without a server generating the markup. For instance, the following example from the Thymeleaf quickstart. &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th th:text="#{msgs.headers.name}"&gt;Name&lt;/th&gt; &lt;th th:text="#{msgs.headers.price}"&gt;Price&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr th:each="prod : ${allProducts}"&gt; &lt;td th:text="${prod.name}"&gt;Oranges&lt;/td&gt; &lt;td th:text="${#numbers.formatDecimal(prod.price,1,2)}"&gt;0.99&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; If that table markup is in an HTML file, you can just open it up and see a table with headers for Name and Price, and one row with Oranges and 0.99 for the Name and Price, which allows a designer to work on the site without the back end. In real operation, when you return that View with an attached model the engine will replace the text values (specified by the th:text attribute and "${}" format expression) with data from the model. In contrast, the following jsp would not be considered a "natural" template. &lt;table&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Price&lt;/th&gt; &lt;/tr&gt; &lt;c:forEach items="${allProducts}" var="prod" varStatus="count"&gt; &lt;tr&gt; &lt;td&gt;${prod.name}&lt;/td&gt; &lt;td&gt;${prod.price}&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/table&gt; While I'm not sure that sticking with JSP dooms one to a crappy UI, it sure is a hell of a lot easier to implement something decent when you can separate front end display and back end code. 
The important part of Spring and most any other web framework is the MVC part. This allows you to organize your code in a more maintainable way. The best way to understand this it to write a smallish app purely with servlets. Once you've hacked around in your 10th servlet doing mostly the same thing as the other 9 servlets and you're struggling trying to organize things into ways you can re-use code, you'll begin to understand how MVC fits in and it's value in development. 
I've been developing for 20 years. VB, Delphi, C#, Java, Objective-C, C, etc. Can confirm all of this. You have the basic technology acceptance curve going on constantly. http://www.pewresearch.org/files/2014/08/FT_gartner-tech-hype-cycle-640px.jpg
Yeah, that was totally worth writing a blog post.
Visit my profile for the new post!
&gt;I'm going to send this little girl to torment vokiel *lol* Once saw the opposite one, something like the entire place coming down, with a sys admin sitting before the servers with a dog and a shotgun yelling: "But no developer comes near my servers to fix it!" (or similar words) 
Probably realistically, the only tutorials that go through all the boilerplate and trivial stuff are game dev guides. 
I'm not sure about how outdated is but I can recommend without doubt Java How to Program by deitel &amp; deitel. It's very straightforward and you can choose if you want an early introduction to objects or don't. PS: no promo here just that I found it's a really good book to start with java
I don't know if this meets your criteria, but I created a tutorial on using the Java library where you create a very simple notebook app. I admit it's not full-fledged software, but I think it can give you a start. It requires membership, but you can use coupon code `LearnByDoing` to get started. [The Java Library](http://www.learneroo.com/modules/26/nodes/184)
Solve your problems and make your life easier with 1 change. If you constantly change computers- make your IDE portable by storing it and everything it uses on an external drive or USB. Now, note that reading/writing to it will be slower- but on a decent computer you shouldn't notice anything big when simply coding.
No, this is covered by project/module "language level" settings in IntelliJ and the -target option of javac in general (which is also exposed through Maven/Ant/Gradle as well through various ways). Another thing might be to set up a CI server (Jenkins/Hudson) with the specific JDK you want and always pull builds from that.
Stop spamming your website/articles.
Sure
and how to install a 3rd party binary library... We got 3 issues on the repo about how to do this...
This is not working for me :( I am using tomcat 7. Is there anything else I can try?
You already have the fundamentals it seems. Useable software is a broad term e.g there are games, compilers and interpreters, messaging system, editors, web apps. What you need to do is use google. If you want to make a game for example, type something like "Game programming in java". If you find an online tutorial or book. Try to find out information about the tutorial, people's review and its authors if they are qualified. Good luck. 
It's the first line where I mainly have the question. I'm understanding the recursion portion just fine.
Just for you to know, you can get the nth Fibonacci number using this function: double fib(int n) { double phi = (Math.sqrt(5) + 1) / 2; return Math.floor(Math.pow(phi, n) / Math.sqrt(5) + 0.5); }
Much better explanation. Also, you can get an idea of the difference by looking at the exception class hierarchy. ClassNotFoundException is a ReflectiveOperationException while NoClassDefFoundError is a LinkageError.
I did not think of that before. Thanks!
Okay that makes sense. Is there a way to change the array size?
Array sizes can't be changed without creating an entirely new one and copying each item over. Very inefficient. You can try using an ArrayList object for that functionality.
So, had to take a minute and look over the code and the question to convince myself that this post isn't from a student taking my Java 2EE class. OP isn't in my class, but damn if this doesn't look like someone trying to get help on their homework. It's about the right time in the semester for all this stuff too (JPA, etc). Other parts of this post just scream "student assignment" to me too. This is the kind of thing to ask the prof or a TA about. 
How long have you been an asshole?
Starting small is a good first step, but syntax doesn't teach best practices. I've met programmers who are well-versed in a language, but whose code is downright atrocious; naming inconsistencies, poorly optimized logic, and just a lack of overall eloquence. It's like a woodworker learning everything about his tools, but never being shown how to build furniture. For example, I didn't understand the concept of OOP until I saw it in a real-world application. I knew all about the language, but the idea of objects never really 'clicked' until I saw them being used in a way that makes sense to me. But that's just how I learn, maybe your learning style is different! 
As far as I know ArrayList are implemented using raw java arrays, if there is a copy, wouldn't it behave as slow as a raw array copy (because, it is indeed a raw array copy)? 
Thanks! One last question related to java, but not arrays: can a switch work with multiple values. example switch(a,b){ case (a &lt; 5 &amp;&amp; b &gt; 38){ //code for something } }
Haha no judgement yet! Just a question!
Yes. This is why it is generally recommended to set the initial capacity to a reasonable size upon instantiation.
Here 2 books on game programming in java: http://fivedots.coe.psu.ac.th/~ad/jg/ http://fivedots.coe.psu.ac.th/~ad/jg2/
If you want to see this in action, make an object that's a thin wrapper around String. Something like this. public class WrappedString { private final String myString; public WrappedString(String aString) { myString = aString; } @Override public String toString() { return myString; } @Override public boolean equals(WrappedString toCheck) { return myString.equals(toCheck.toString()); } @Override public int hashCode() { return myString.hashCode(); //return 1; } } Go make a HashSet of a bunch of these with really big strings in them. Then, call contains(). It should be relatively speedy. Then, comment out the line that says "return myString.hashCode()" and uncomment the one that says "return 1". Then, try the thing with the HashSet again. I bet it's a lot slower. Now you know why!
Thanks bro!
I reached the maximum numbers of chars so I'll just let you download it instead :P https://mega.co.nz/#!GQlwnISS!-mjGmA4aNCWdRmDVMtvlK0GrBjVboXIQraM4g2tcP9k as earlier you do need the SimpleWindow.java and Square.java saved in the same folder as the game but you already have those in the comments :) Now as you can see we got the red square which you're perfectly able to move around the level grid which is made up of these 9 big blue squares. You should also see the green square which is supposed to change it's direction whenever it reaches a crossing in between the blue squares or a corner. I made it so let's say the green square reaches the bottom right corner it only moves up or left becuase if it moved down or right it would leave the game window. Now this should work perfectly fine but if you try playing the game the green square starts bugging out after some time and go in undesirable paths that it shouldn't be able to move in. That's not the only problem.... the game window constantly flickers and I'm wondering if there could be something wrong with the placement of my w.clear(); also if you're able to (no need if you don't want to cus you've already helped me enough) I'd really appreciate it if I could have the green square move according to a timer so it doesn't just move when I move my red square. :) //Kim
NoClassDef is also an Error, something you can't recover from, whereas ClassNotFOund is an Exception, which you can catch and handle gracefully 
If you need help and or critique please upload your project somewhere so we can build ourselfs. Nobody sane will run a random jar from someone on the internet, you can never be too paranoid these days.
You did but I'm stupid and suck at programming so I have no idea how to implement the timer to the movement of sqMove2
What's the advantage of building microservices using Spring Boot and Apache thrift as compared to using java-rx?
What are you doing this project for and where are you learning Java? Your code indicates you haven't been introduced to pretty simple concepts like arrays and classes.
Well, ok I understand your concern. Stupid idea, I have a Git Hub account, thing is it's using mostly FXML and very little code at the moment. If you download it, it's 2.13 MB or something like that and just open it up in WinRar or something and you can see my files. It's not like some kind of super virus that will infect your computer and steal all of your accounts info and keylog your computer. I was just looking for some genuine help.
We can never be too sure. Runnable jars are not to be trusted!
I think everyone here probably believes you, but alas this is the age of the internet
Just yes.
I'm doing 2nd year high school in sweden. Our teacher introduced us to java as soon as we started 2nd year and now he's given us this task to make a game in like 6-8 weeks.
Wow, okay that explains a lot
&gt;I was just looking for some genuine help. Then you should follow other's advice and adhere to common procedures if you are told to do so. Even if you ensure us that the content of the jar is not malicious, very few people will want to put it to the test. It's the normal procedure to present the code to get help or criticism.
Yeah haha
You can recover from a NoClassDefFoundError. In fact I need to write code to recover from this occasionally to ensure backwards compatibility with older versions of [the univocity-api](https://github.com/uniVocity/univocity-api): For example, for uniVocity 1.1.0, we are adding support for advanced data migration from database dumps (here's a project that puts our snapshot version to test - https://github.com/uniVocity/load-mysql-dump/). So our API for version 1.1.0 is getting few new classes, for instance [MySqlDumpFormat](https://github.com/uniVocity/univocity-api/blob/develop/src/main/java/com/univocity/api/entity/dbdump/mysql/MySqlDumpFormat.java) In the actual implementation of [univocity](http://www.univocity.com/pages/univocity-downloads) we have to read your configuration. However, you might be using the univocity 1.1.0 (which reads newer configuration classes) with univocity-api 1.0.0 (which does not have the latest configuration classes) so you can upgrade with zero risk of breaking your code To enable this we have this piece of code somewhere in our implementation classes: Object tmp; //for newer configurations tmp = null; try { //DumpLoadConfiguration - introduced on 1.1.0 tmp = config.getInitialDumpLoadConfiguration(); } catch (NoClassDefFoundError e) { //ignore } ... //and later if(tmp != null){ //DumpLoadConfiguration - introduced on 1.1.0 DumpLoadConfiguration dumpConfig = (DumpLoadConfiguration) tmp; //do stuff } 
With JTA the app server searches all classes with a @entity annotation automatically. Therefore you shouldn't specify your entities in the persistence.xml
[Learn about design patterns.](http://www.tutorialspoint.com/design_pattern/) [Learn how to write unit tests.](http://junit.org/) On paper, design the app you want to make. (Flowcharts, etc) Write unit tests for the app you wish to make. Write your software to pass the tests. Refactor, debug, rinse, repeat, release, debug **PS: Learn how to use a Version Control system ([Git](https://gist.github.com/lucio-martinez/11277737)/Mercurial/etc). Get in the habit of using it for everything. Even your smallest "Hello World" app.**
Compiling and running random code from github is much safer ;)
afaik intellij does not support connecting to a remote JVM via the usual means like you can with python or php or ruby. Would a vagrant synced folder possibly do the trick? It would contain the JDK/JRE files and be accessible to both host and virtual machine. I think vagrant can also execute shell scripts on the host so you could put together something to setup PATH variables, etc, so your IDE's could find the JDK/JRE, when you do "vagrant up" It's certainly an interesting problem, and I am sort of surprised Intellij hadn't come up with a way. **Edit:**. It seems intellij can connect to a remote debugger, but I am not sure that's exactly what you're looking for. https://www.jetbrains.com/idea/help/run-debug-configuration-remote.html
&gt; Very inefficient. You can try using an ArrayList object for that functionality. Which does exactly that whenever it's backing array is too small. Array copies are not "very inefficient" really; they're damn fast. They use the underlying OS to handle the actual copying. 
You ended a sentence with a preposition. Imma call bullshit.
Do you have an example of building micro services with java-rx, really wanted to try java-rx out for a while now and never got around to it. 
Looks very nice. A couple of things I noticed while skimming through the code: Your main class already extends JFrame so creating another JFrame inside is redundant. Your field variables are all uppercase which is kind of confusing and violates Java syntax conventions. Furthermore there's no need to call frame.invalidate(); frame.validate(); frame.repaint(); before you set your window visible. Lastly you could also create your MouseAdapter inline with an abstract class definition like so: MouseAdapter adapter = new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { /* event handling */ } }; You would have to declare the variables of your main class final though. But that's just a matter of preference. You could also collapse the logic for checking when a player has won to a single if block like so: if (field1.getIcon() != imageBlank &amp;&amp; field1.getIcon() == field2.getIcon() &amp;&amp; field1.getIcon() == field3.getIcon() || /* ... * other conditions */ { clicked.setIcon(turn ? imageCrossWon : imageCircleWon); won = true; } Happy coding!
Thank you! This was my first JFrame experience so this very helpful
Synced folder is a possibility but as I have said we're trying to prevent leaking things out of vagrant and band aid patching things together. We already use Puppet to provision the vagrant machine with all sorts of software including web server and database. So if Intellij worked with remote JVM/JRE we could just do a 'sudo apt-get install default-jdk default-jre' with Puppet on the vm and be done with it. JDK/JRE would be out of direct view and would be contained in the VM, all in all a very elegant solution. No remote debugger is not what we're looking for. We want IDE to use the remote JDK for the actual build/compile process as if the host doesn't even have JDK installed, it already does it for Python and PHP and probably Ruby too. Despite the complex architecture we have kept our developer workflow to 'run vagrant up' and you can start working immediately and that's very valuable and we don't want to break that by adding exceptions to it. Messed something up? No problem, vagrant destroy, vagrant up, back on a clean slate. At this point I was thinking of even including Intellij on the VM and doing a X11 forward to get the GUI over SSH. Would probably be a bit slow. 
CHECK MY GAME AGAIN YOU ASSHOLE! HOW DID YOU NOT NOTICE THE GREEN SQUARE GETTING OFF TRACK?
You can use [Shapes](http://www.reddit.com/r/learnprogramming/comments/2lxy8h/javahelp_removing_an_object_in_an_array_using_a/clz8lgc?context=3) to solve collision checks for objects, and regarding your zone checks: Maybe instead of just inverting the ball's direction, you should explicitly set it to positive or negative (with the help of Math.abs()), otherwise I can imagine that the ball might start to flipflop in place without ever getting anywhere.
The code you've pasted is hard to read without setting a syntax for the paste, but to me it doesn't look like it would compile at all. Did you just copypaste parts of it to the pastebin? 
Great explanation for many problems I've seen (and been guilty of). Thanks for this.
[Try this](http://stackoverflow.com/questions/4945178/cannot-run-eclipse-jvm-terminated-exit-code-13) Edited for formatting because its too damn early
Checkin' it out right now... thanks
I editted the eclipse.ini file, but sadly still get the error. I do see alot of people saying that their Java and Eclipse had differing version (32/64bit). I am under the impression that both my Java and Eclipse files are 64 bit, as I just redownloaded them this morning, but I'll go ahead and check that again.
Really not trying to be pedantic, but why? 
You've implemented [xkcd#927](http://xkcd.com/927/).
let me guess... The Todd developed this?
I guess block level highlighting might be a neat feature(?) I'm in the camp where I leverage syntax highlighting as much as I can to help me visually sort through code. I know many people in the other camp where they just want grey text on a black background and they'll figure it out in their head, but I like all the added visual cues. I'll play devil's advocate and say, why not?
You left out part of the class. Please resubmit your entire class and also please set the syntax highlighting to Java.
Exit Code 13 means that java was started but an exception occurred somewhere during startup. Normally, you should see a message saying so and giving you the location of the log file. You could look for the log file, it may be under C:\Program Files(x86)\eclipse\configuration or maybe %HOMEPATH%\\.eclipse. The fact that the launcher did not display a message like this suggests it was unable to get the message back out from java, the likely cause of that being a 32/64 bit mismatch. You could try running "C:\ProgramData\Oracle\Java\javapath\java.exe -version" to see what it says there.
Here you go: http://www.vogella.com/tutorials/REST/article.html
Hi I'm interested on why do you avoid Spring? Care to elaborate?
Your transaction type is JTA therefor your transactions are managed by your application server. This means you shouldn't define your entities in your persistents.xml. PS: put your source code on something like github. Nobody is going to download your zip, especially if your arrogant. And next time do your homework yourself. 
Kinda funny that you posted this because I just started a project that relies heavily on SpringMVC and AngularJs. As far as I know Single Page Applications (SPAs) are still no where near being used in the real world. They have very interesting features, but there is a lot of problems with them. The alternative is to have certain pages be like min-SPAs and use Angular's data-binding for performance and dynamic calls to the server. Obviously angular does so much more as well.
I actually am doing this in a project myself. Basically completely split up backend (Spring API) and frontend (AngularJS SPA), so they can even run on different servers. That way I can still offer static resources (SPA pages, images, etc) while the backend service is down, so the "homepage" doesn't go down. If you don't work with a user login system (or you'd seperate that too) you could even consider using offline storage in your SPA that waits for the backend server to go "on" again, and send the changes to there.
It is highly customizable. You change it so it only displays a vertical bar http://imgur.com/BMU3JQj
Thanks for the suggestions, going to try that as soon as I get home! I'll get back to you
Todd the Big Dog
Here's one of the first ones I watched, and still one of my favorites. https://www.youtube.com/watch?v=uL2D3qzHtqY 
yeah that's what i meant with SPAs having problems. Security becomes really difficult to implement once you have a skinny server side. Also, SEO is really tricky.
oracle's crappy licencing conditions prevent it from being included in most linux distros' repositories. still, i've been using idea and eclipse with openjdk and haven't run into any problems. 
&gt; download jdk from [oracle] ... and configure it manually. There is nothing to configure besides setting `JAVA_HOME` and adding it to your `PATH` - and both of these steps are optional. Using Oracle's JVM is just unzipping it into a folder and execute it's `java` binary. &gt; but will there be problems with say eclipse or idea if you use openjdk? You can configure IDEs to use whatever JVM that you like. &gt;Which jvm servers use in production and how they intall and update jvm/jdk if it's oracle version? Keep in mind that production servers - I'm talking about servers for large corporate business applications - typically employ a different update schedule - often none at all. You get your application to run with a certain JVM, tune its parameters to this JVM, and then you *keep it that way* as long as possible. &gt; Which jvm/jdk do you use in dev and prod in linux? My team uses Oracle JDK and IBM's J9 for dev &amp; prod (you wan't to develop using the same JVM that you'll later run the application with). Someone also uses OpenJDK for developing.
google something like "Java chat program tutorial/Java address book tutorial". Check out the tutorials in www.dreamincode.com, I personally hate the site and tutorials but they have some gems here n there 
Interesting project. Based on a quick look it is quite well written, but the claim about its simplicity and common sense design is not true. Consider this line: DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); Why is holder for DbThreadSession is not called DbThreadSessionHolder but ThreadDbSessionHolder and why is not it type safe? Plus methods like DbThreadSession.getThreadSession() are not simple. It will look at the holder and return that session, if it is set. If not, then it will create a new session, but will not set it to the holder, because session's constructor does that. I would not call it simple and common sense driven design. Again, good project, worth a better look. But definitely not the silver bullet.
http://jodd.org/doc/madvoc/ &gt; Above action class defines action method HelloAction#world() that is mapped to the following url: /hello.world.html. The resulting view for dispatching is: /hello.world.ok.jsp. &gt; mapped to the following url: /hello.world.html &gt; hello.world.html why
I don't get the need for Petite when there is Spring, JEE CDI, and Guice... Already full of features, none of them particularly heavyweight AFAICT, and all in wide use. EDIT: The more I look at this, is this whole project basically just a re-implementation of Spring...?
http://jodd.org/doc/json/ &gt; Let's see how it looks working with Json: Book book = new Book(); String json = new JsonSerializer() .include("authors") .serialize(user); Book book2 = new JsonParser() .parse(json, Book.class); Uh, what!? What is this even supposed to explain...???
Try running it from the command prompt as eclipse -vm "c:/thepathto/bin/javaw.exe"
where I'm at we use OpenJDK for both dev and production. I have not ran into a compatibility issue between the two in a long time. Now if you are doing JavaFX stuff you will find that no body packages OpenJFX even though it can be complied and installed on OpenJDK. 
The issue is finally solved. I think it might have been, as you said, a 32/64 mismatch. I redownloaded the JDK, JRE and Eclipse in 32 bit version and Eclipse is finally working again. Thanks a bunch for the help!
The issue is solved, but thanks for the input anyway!
If you insist on stateless REST I agree. If however you allow an Auth session, this is no less secure than the way we've been building web systems for decades. An intermediate option is to put the "session", encrypted, in a cookie. Since you are only storing the minimal auth info this need not be a large blob of info. SEO continues to be a problem, but it appears that google will soon start running JS on the scraper side. I expect the remaining search engines will follow suit. In the long run this is a non-problem.
YES - confirmed by /u/DEEP_ANUS
Netbeans provides built-in support for Spring 3.x and 4.x, according to [a quick Google](https://netbeans.org/kb/docs/web/quickstart-webapps-spring.html). Personally, I never liked Eclipse for Spring development, and chose IntelliJ over it. I can't speak for Netbeans though.
The lack of proper support in this behavior is why I built the "DynamicDelayQueue" for my priortiy based thread pool in Threadly. This is not a generic "PriorityQueue" but does work for "Delayed" interface items. http://threadly.github.io/threadly/javadocs/3.2.1/org/threadly/concurrent/collections/DynamicDelayQueue.html The key in the implementation to making it performant was the use of the "ConcurrentArrayList", which allows a ceap call to reposition items in the array in a thread safe way: http://threadly.github.io/threadly/javadocs/3.2.1/org/threadly/concurrent/collections/ConcurrentArrayList.html#reposition%28int,%20int%29
Jackson is better documented, and I find its documentation terrible.
No plugins in NB are needed. In the project properties you will find a Spring tab, where you can detect spring xml files and if you check them you will get autocompletion in XML. I see no reason to use Eclipse or STS for Sprind dev instead of NetBEans.
MVC framework but no support for any sort of security that I could find....
If you have a **specific problem** with your code, ask about it in /r/Javahelp. What do you want to achieve with a code review? Is it not working as expected or do you just want a pat on the shoulder and a "well done"?
Why would you start a new project with AngularJs at all? It is a framework that has already been deprecated. There is a version 2.0 comming out in a couple years but it is no backwards compatible and will be very different. As for Spring MVC it works okay, but it is so much easier to do it with JSF and CDI. 
Netbeans works well with Spring.
Very good question. I was stumbling across this site by accident. I was searching for something similar to the [Decora](http://jodd.org/doc/decora/) and I'm now adapting it to fit my needs. Seems the head developer of Jodd doesn't like the existing frameworks/libraries... ;)
Debian seems to have OpenJFX in sid: https://packages.debian.org/sid/openjfx
I'm wondering why you are getting those downvotes. It sounds like a sensible reply.
As always, try both and use that what you think feels better. Never betray your guts. And you should not choose tutorials based on the IDE. What can be done in one IDE should be done in some way or another in the other IDE.
At least you get to look at it first :)
Thanks for the reply! My gut says Android Studio and I know I'll eventually transfer over my Eclipse stuff anyway. But it IS nice to have the same IDE as the youtuber. =p
This is great, thanks!
jax-rs is basically used to build a war file. you have to configure your web.xml, set up the endpoints, add all your annotations, and it compiles to a .war file. Then you load that into a container (tomcat, jetty, etc). Spring Boot creates a standalone JAR file that you can "run" with java -jar. It also includes jax-rs inside of it, but the unique part of spring boot is the packaging structure. The reason you'd want to do this, and the reason I used to use DropWizard a lot, is for your deployment model. We are using containers (was lxc, now docker). Those container styles really like to have a single foreground process with all output going to stdout. Spring Boot handles that perfectly. In addition, there is so much less boilerplate with Spring Boot. It's not that it's a super unique library -- it's just a smartly done glue-together of a bunch of existing components. 
As far as career goes, from what I've seen, it really doesn't matter. What matters is that you understand the concepts that each Java EE API implements. For example, JPA implements [ORM](http://en.wikipedia.org/wiki/Object-relational_mapping). The key is not necessarily to learn JPA, but to use JPA to gain a deeper understanding of how to effectively use ORM. I would say the particular app server doesn't really matter either. Just pick one that's easy to install and get running. I had no trouble with Wildfly. As far as learning goes, I would say go with stock Java EE. If you install an app server like Wildfly which implements the full stack, you won't have to configure as much. That will allow you to focus on the concepts, not how to configure them. You could skim the table of contents of the [Java EE 7](https://docs.oracle.com/javaee/7/tutorial/doc/) tutorial. But as you can see, Java EE is huge. I would say don't learn Java EE. Rather, focus on one API at a time. Each API leads down its own rabbit holes. IMHO, of course.
&gt;An unbounded priority queue based on a priority heap If the PriorityQueue is actually based on a priority heap, it is inadvisable to change the elements of the queue. A priority heap maintains a loose ordering on its elements, and if you change an element and violate a heap invariant, you will break your heap.
2014-11-11 14:01:14.533 INFO 64263 --- [ main] sample.tomcat.SampleTomcatApplication : Started SampleTomcatApplication in 2.718 seconds (JVM running for 3.149)
What? 
Your entities are persisted, by JPA, and so do belong in persistence.xml. And JTA doesn't mean that your app server us definitely managing your transactions (with a clear distinction between providing transactions and managing them), Google JTA bean managed transactions.
If you go with Java EE, I definitely recommend learning Wildfly (JBoss), it is much more marketable skill than any other Java EE 7 server out there.
This is similar to idea. I'm okay with this haha 
Why or how is it better? 
That article was better than I expected. I've been conducting interviews lately and it's a tough process. My favorite kind of question to ask is "I see you have this technology listed on your resume. I'm not familiar with it. Could you explain it to me?" It's very enlightening to hear someone explain a new tech to you.
I've been doing it for years. No plugins. No problems.
Why?
Absolutely. You can really tell a lot about someone based on whether they can explain or teach in a concise manner. It's good to pretend you don't know a tech sometimes too just so you can see if they're correct too!
I would start with an IDE. It will yell at you when you make a minor mistake (underline it with a red squiggly)...for example when you forget a semicolon. You'll make enough mistakes starting out, and I'm of the opinion that you shouldn't also have to worry about perfect syntax at the same time.
Because JEE is harder to make work as a 12 factor app http://12factor.net
Thanks, helped a lot
I appreciate the response. Should I just use Android Studio? Or is it not necessary to use it since I haven't actually started Android development?
So simple it can't even show any of the JSON input or class definitions in the example? Even making up fanciful definitions for everything not shown, I'm having trouble figuring out how you can get a `Book` instance from a serialized, uh... `User`... or .... `Author`...? Or `List&lt;Author&gt;`? I don't even know EDIT: Imagine if you saw a library like so... &gt; Check out my sweet commandline parser! It's so easy. MyOptions opts = parseArgs(args, MyOptions.class); I dunno about you but I would wonder what the hell this is trying to tell me, and then ask why they decided to leave out, I dunno, maybe the other 95% of relevant code to this tiny example...
dzone.com infoq.com
Lets say you define your int by saying: &gt;int i = 5; You can *reassign* your int through the statement: &gt;i = 6;
In what sense do you mean Java EE? Common Spring apps will certainly use Java EE APIs but manually assemble implementations of those APIs instead of relying on a standardized distribution.
Thanks!
Professionally so far I have seen about 95% Spring and 5% Jersey. That's not definitive stats as my exposure is somewhat small (a few companies in the Midwest), but for my area Spring is a solid bet. I think the major reasons why Spring wins out is the history (jee took many ideas from spring), versatility (can deploy to various server containers such as Tomcat or Jetty) and the overall library (Spring MVC, Security, etc).
Strict 12 factor is hardly end-all-be-all. Deployment automation with Java EE is pretty easy with virtually any configuration management solution out there, chef+wildfly have been a great combination for me personally.
Honestly if it was me I'd jump straight into Android Studio. If you don't want to deal with Gradle just yet then use IntelliJ Idea (this is basically the same as AS anyway). Above all else don't use Eclipse, a lot of people start on it but it's awful compared to IntelliJ.
Use Eclipse just because a lot of tutorials use it. It'll be easier for you to navigate through it. Once you know the language, up to you.
You need a condition inside the inner loop: for (int i =.... )..... System.out.print(brush); for (int k = 1; k &lt; width-1; k++) { //leave first and last spaces for the border if (i == 0 || i == (height -1)) System.out.print(brush); else System.out.print(" "); } //then one more brush to close the side border - //only once per row: System.out.print(brush); System.out.println(); //newline } 
What's your qualification for saying that your HTML parser is the fastest vs others? I do love the parser syntaxes though. Are they your own creation or built on top of other parsers?
\#yolo
Without actually looking it it, you need a cert from a trusted authority. Verisign is the gold standard but what is important is that the authority is in the browser's trust chain. You can check for trusted authorities by browser to save some money. You'll need to use import the cert into a java keystore and then sign with the jarsigner tool. Keystore and jarsigner are both in the jdk. Apologies for anything that is incorrect. The above should be enough info to Google for the exact tools, commands and steps. Good luck!
Thanks. It's given me some things to look up further :)
Make it so the green square don't bug and I'll buy you gold
http://stackoverflow.com/questions/3133650/android-intent-to-open-users-preferred-browser something like the code on this page but inside an onClickListener.
I like Eclipse :( But yeah, IntelliJ is better.
Yikes. I thought you just wanted to get the hang of Java (using NP++) for a while before moving on to an IDE. This practice I cannot recommend highly enough. Discipline and all. However, if you are thinking of developing for Android using NP++, stop thinking! Bad idea! You will go mad. Please spare yourself that agony and just go right ahead and install AS.
I would recommend Android Studio as that will be the future for android development. Again, use both and see which one suits your needs.
The two are technically interchangeable, altough spring seems to have the upper hand and java EE is constantly playing catch up. Several EE standards likevbatch and mvc are an exact copy of spring. Check which one is more prevalent jobwise, you dont want to invest heavilly in Spring if everybody in your area is doing java EE and vice-versa. I would say leArn first the mos used on your area and then learn the other because its unlikelly that you will never have to use either one. Personally i prefer Spring, its more up to date and its a de facto standard. Java EE specially EJBs where a way to try to tie companies to expensive app servers which are unnecessary technically. Most projects use the app server aS a servlet container and ditch the java EE that ships with it that is only a source of deployment problems. 
Just to make this clear: I'm not related to this project. Just found it and wanted share it with you...
Mate I'm a professional programmer, climbing through your code cleaning it up would be worth a lot more than the couple of dollars gold costs.
Both if you have time, Java EE if you don't. Java EE is comprised of standards. While some people will say Java EE plays catch up to Spring that isn't exactly true. Standards can only be reached once a technology space has reached a certain level of maturity. If you look back at J2EE 1.2 and early versions of Spring, Spring was really pushing the boundaries of how you created enterprise Java applications. If you look at the older mission statements for Spring, Java EE has caught up to everything Spring was created to do. A good example is dependency injection frameworks, there were several of them while the space was evolving such as Spring DI, Seam, etc. Now we have CDI (Weld is the reference impl). If you learn CDI you learn all the concepts of any dependency injection framework AND you learn the API to a DI framework that is guaranteed to be available in multiple application servers for years to come. With other DI frameworks they might change or be abandoned requiring you to either learn new APIs or refactor code but the concepts should still apply. The bad thing about standards is sometimes it takes a while to get them created but since you'll be stuck with them forever you really don't want them created too soon. The fact that people have the Spring vs Java EE conversation means that Spring is not as innovative as it once was but that doesn't make it a bad thing. A lot of people like Spring MVC for example, while you can do MVC with Servlets/JSPs it really isn't the same. Jersey MVC is the closest thing that might one day evolve into a standard. TLDR; Learn Java EE, it'll give you a good solid stable foundation for years to come. Learn Spring (and others) to become knowledge about how Java development is evolving.
Upgrading of spring-based application - easy as a piece of cake. Upgrading of jee application - oh my... I just finished jboss4 to wildfly upgrade. That took a while. 
Personally I find development far simpler and quicker to use spring than JEE. 1 Thing I have not seen mentioned in the comments is that it has been far easier to test your spring components than JEE. JBoss did release arquallian(Finally) to assist with testing, but I struggled a few years back with maven dependencies. Having said all of that, you will prolly need to make use of EJB's, MDB's, JNDI so it will be worthwhile to familiarize yourself
I recommend working your way through https://docs.oracle.com/javase/tutorial/
just download them and try them out. They are free.
I suggest you try IntellJ IDEA, imho its the best IDE for Java. Besides AndroidStudio (Googles IDE for Android) is built from IntellJ. Or you can just continue using IntellJ for Android, as it's fully supported.
Start by reading the thinking in java book.
I only use editors without intellguess, while a bunch of technologies will look great they do make you lazy there is no substitute for properly understanding and API Keep going with the text editor - nothing wrong with coding like that and may well help improve your learning skills...
spring can be pretty tricky to upgrade also, i have been working on an old spring2/struts application for about a year now, in order to get it to be upgradeable to spring4/java8. If you have alot of dependencies to different subsystems that have been deprecated it will take time with spring also.
because JEE 7 has everything Spring has. For example cdi, mvc... 
Best decision you'll make. I find it completely baffling that we're in 2014 and people are telling you to program without an IDE or without intellisense. It has absolutely nothing to do with laziness, and everything to do with productivity. I may know that String has a concat method but not remember the parameters right now and it doesn't matter. It's so unimportant. The IDE will give you javadoc and will help you. What's important is learning how to compose applications properly which is where the skill is. If I'm really struggling then I'm pretty sure Google isn't going anywhere. I advise going all the way and taking the time to learn some of the better shortcuts in IntelliJ. It'll make your life a lot easier. Best of luck on your journey. If I can be of any help at all then drop me a PM.
I am using NetBeans and it works fine for me. Eclipse will work too. Just try some and decide what works best for you!
Thank you for your feedback :)
But aren't most jobs still calling for spring more than Java EE? And by the time Java EE 7 gets rolled out in the major app servers it will be behind Spring again because Spring will continue to innovate faster?
`&lt;obtuse&gt;`You can't change an integer. All Java primitives are immutable.`&lt;/obtuse&gt;`
http://www.jenv.be/ is waay better if you're juggling multiple JDK versions
It really does not matter much. There is still a bit more work in Spring but Java EE has really taken off in popularity in the last five years. It goes back and forth on which is easier to work with. When Spring came out it was a huge leap forward. Today it is much easier and more productive to build things with Java EE in most cases. Java EE follows a convention over configuration model. This means that settings are automatically set to the most common choices. this makes is easier to get up and running with minimal configuration. Spring is trying to compete with this by using additional frameworks like Spring Roo or Boot which try to make Spring projects easier to configure. Java EE also offers a clear path on what to use for the front end JSF. Check out PrimeFaces.org to see how it works. They have a demo that includes all the source code.Spring does not really provide anything for this. There are many different options available though. As far as servers go Glassfish would be fine to start with. Once you learn one others are pretty similar. You could also go with Tomcat. You can easily add the Java EE jar files to Tomcat in the same manner you do with Spring. TomEE is another option from Apache that has Tomcat already including the Java EE stuff. I would suggest you do the NetBeans tutorials. They have a simple overview of both projects that are pretty quick. You can install the IDE on widows with just running an .exe that will also install and configure Glassfish and Tomcat if you choose. www.netbeans.org 
You could check out + [Codingbat Java](http://codingbat.com/java), + /r/DailyProgrammer, + /r/ProgrammingPrompts, or + [Project Euler](https://projecteuler.net/) Or you could just hang around /r/Javahelp or /r/learnjava, or /r/learnprogramming and help out there. (By solving other's problems, you'll quickly do "rust removal".)
Haha, this is brilliant advice. One of the things I intend to get around to writing is the fact that as a candidate you're interviewing the interviewer too. If they're asking you really obtuse "how much does Everest weight" type questions then I think it's important as a candidate to ask yourself whether you want to work for someone who values that sort of question.
I'm only seeing this in the context of embedded development for Pi...but you can setup a remote platform for execution in Netbeans: https://netbeans.org/kb/docs/java/javase-embedded.html http://www.youtube.com/watch?v=oRJ7v-1iw8w
Are apps based on Spring more portable because they can run anywhere that has a JVM? And Java EE apps are always configured with things that are specific to an app server right?
Are you high on something? Spring 4 is way leaner than JEE.
Just try making stuff. Make a simple ticket system in Spring or image viewer in JavaFX or something
Sometimes but not necessarily. With Java EE you have a choice. 1) You can use a full Java EE server where the server has the Java EE files built in. This is slightly less portable although since it is a standard you can switch to another Java EE server but it could be a little bit of work. 2) You can include the Java EE jar files in your application in the same manner as Spring. This is more portable but may require some minimal configuration. Many people do not seem to realize this option exist.
I disagree with your premiss. It is hard to prove but I think more new projects are going with Java EE. Having used both I can tell you I can build a standard web application much faster with Java EE (JSF, CDI, JPA) than I can with Spring. There are still more Spring applications in use since it was the best thing going for a while. Java EE is currently ahead of Spring in terms of usability and features in my opinion. As I explained in my other comment you can use the Java EE stuff in the same fashion as Spring. I know because that is what I do. I use Standard Apache Tomcat and just include the Java EE jar files in my project. I could easily move my project to another server if I had the need. I have never switched servers on a project so I think you are putting a bigger weight on that than really exist. 
First question would be debatable but not the second. Java EE will by design be behind the curve only because for the most part they wait for defacto standards/trends to emerge in the industry before including it. If ability to innovate or keep up with the innovation in the industry is a high priority then your better off going with Spring (and other technologies/libraries).
You will get better/ more answers at /r/javahelp
I was hoping my comment would spark a discussion and ask people to take a better look. I am sorry if it turned out negative. I was trying to say that they need to change the tagline, that is it. There is nothing wrong in being convoluted in framework internals. Just don't claim that you are not. Google Guice is like that and we are using it :)
I work on the Spring team at Pivotal, so my leanings should be clear. I hope you'll consider Spring. Java EE is, as many others have incontrovertibly stated, by definition behind Spring. You can learn the basics of Java EE (JMS, Servlets, JPA, etc) and those skills can still serve you with Spring. I would argue that Spring's got a richer crayon box - more solutions for more domains. Spring 4 is a wonderful technology, but what I would really recommend is that you look at Spring Boot. Spring Boot builds upon Spring 4 but integrates the rest of the Spring platform as well. http://start.spring.io - go here, check JPA, Web, etc., then click generate to get a Spring MVC app that uses Hibernate 4.x and JPA 2 that lives (by default) on embedded Tomcat but that could just as easily use embedded Jetty or a full on application server like Wildfly. http://spring.io/guides - guides on how to build various solutions using Spring (REST, Hadoop, JMS, RabbitMQ, Facebook, Twitter, Neo4j, MongoDB, Redis, security, WS, etc., etc.). Each takes 10-15 minutes and assumes absolutely nothing (except that you have a JDK and an editor / IDE, although it stipulates even that upfront). Most of these are written in terms of Spring Boot. I did a vJUG session some months ago on using Spring Boot. I think you might find it very interesting. https://www.youtube.com/watch?v=eCos5VTtZoI Many large players - like Alibaba, TicketMaster and Netflix - use Spring (and, increasingly, like with Netflix and Ticketmaster, Spring Boot) at scale. I hope this helps, and good luck on your journey! If i may be of help, ping me here or Twitter (@starbuxman). :)
Thanks. I think Spring is still more dominant in the job market than Java EE, which is important to me. Do you have any data or reporting of any kind that shows that Spring is still more popular than Java EE (even with Java EE 6 and 7)? I want to pick either Spring or Java EE as my focus and I really need to see some data that shows me which one is doing better in the "market"..
No. The whole point of the Java EE standards is that you have code that is portable. Yes, you could use some vendor specific library but in modern applications you rarely need to. In modern EE apps you might have a small vendor specific XML deployment descriptor that needs to be replaced if you change application servers but for many apps they are unneeded or very small. Most application servers are written in Java so they can also run anywhere there is a JVM.
&gt; I am using NetBeans and it works fine for me. Eclipse will work too. Just try some and decide what works best for you! I was under the impression that NetBeans didn't have easy Android support. WOuldn't it be better to adopt Eclipse or IntelliJ?
&gt; I only use editors without intellguess, while a bunch of technologies will look great they do make you lazy there is no substitute for properly understanding and API &gt; Keep going with the text editor - nothing wrong with coding like that and may well help improve your learning skills... I strongly disagree. You skills with your IDE and your platform of choice will significantly impact your productivity. Using things like code suggestion and templates will make you at least 2.5x more effective than somebody who uses a plain editor. That being said, I often go in with vim to make minor changes for a quick fix/unit test cycle and keep my IDE focused on larger projects or hairyer problems
I can easily see Red Hat start to participate in this community and might even find a way of integrating .NET into the JBoss ecosystem of products. Perhaps, even allowing .NET applications to run inside of JBoss.
&gt; Java EE is currently ahead of Spring in terms of usability and features in &gt; my opinion. I think this is a narrow viewpoint, informed by what the Java EE spec currently offers. Spring goes much further than this into other areas that the standard doesn't cover very well. For example, how well does JAX-RS support HATEOAS? How well does JPA support web services? How well does JSF support Netty? What about big data? Java EE may catch up to Spring in these areas as industry usage becomes more standardized. 
CodeEval is great for this :)
It won't. There is a lot of overlap, I do not see what a java dev would want from .net and vice versa.
JSF? Seriously? Anyone forward looking would avoid a 15-year-old architecture.
My thinking exactly. I don't see this being a huge change in the state of affairs for Java unless .NET offers something compelling over it. 
The web frameworks seemed destined to the yet-another-web-framework, but I like java to have library options, and if SOMETHING can offer an alternative to the two separate subpar http clients in apache... I'm for it. Really, why isn't there a near-equivalent of curl in java? It basically has a fluent interface that's well tested just sitting there in the open. 
This doesn't attempt to make a universal standard, which was the salient point of that xkcd. Alternatives aren't a bad thing always. Compression, codecs, sorting algorithms, etc. 
I agree that spring MVC's purpose is not to build REST type APIs. Despite allowing this functionality it's really aimed at traditional multi-paged apps. So if you're going pure SPA, you will be hauling around a lot of stuff you do not need. If you are going to go down the SPA pathway, your server should be speaking REST+JSON (or something darned close to that ). This actually removes many layers from your server leaving just DB + serialization + auth. Server load is reduced to small requests (for example, mine responses from 1kB to perhaps 20kB ). I'm pretty comfortable saying that I can handle a much larger number of users with fewer machines. I would recommend dropwizard as a serverside framework for SPA. It has the right mix of things to do what is needed. (JHipster might be as well, I've never used it ) People made a huge stink about the Angular 1.0 -&gt; 2.0 transition, but it's not really clear why. Were they truly concerned that an open source project would just stop cold ? Or were they "haters" from other framework camps jumping on an opportunity to dump on Angular ? I don't know. Does anyone remember the huge stink when apache https moved to 2.0 ? it was necessary for important features, and today virtually everyone who still uses apache is on the 2.0 codebase. AngularJS 1.0 continues to be a completely reasonably technology choice. The 1.0 code base works fine, and there are tons of directives available for it which work great. I'm guessing that community necessity will continue to maintain the project in sufficient form. If you are building today, there is no good reason not to use it. As for the Angular 2.0 swap up. Why? Well I'm not a guru, but my understanding is that the goal is to be able to use polymer and angular together, and the 1.0 code base and syntax won't allow that. If the goal is reusable components, then polymer or something like it is the way to go. If angular were to stay with the 1.0 stuff, it would eventually be cutoff from what appears to be an important evolution of how we build web system. And no, I'm not looking forward to someday moving my stuff to angular 2.0 (answer, I probably won't ) I AM looking forward to building new stuff with it once it's mature enough to do so.
Much more open source seems to be built around Java because of how dependency management is handled. I've only done a little c#, but afaik there is no real "maven" equivalent. It'll be a while until the .Net support is truly cross platform as reliably as Java is, and since the tech world doesn't stop - it would be a hard sell to start using anything .net for a new project . It really only helps those that are on current code bases that want to get support on other platforms (other than windows, that is).
Do people want to run in JBoss? Seems like the world is moving away from giant web servers and going with a little embedded netty or such.
Well people might want to write web apps in C# without having to be forced to use IIS.
&gt; ASP.NET are examples of where it's difficult to hold the disgust back. Not when the alternative is JSF with Websphere or Weblogic, as it happens on our projects.
&gt; I've only done a little c#, but afaik there is no real "maven" equivalent. NuGET
I think I mostly agree with you. I do believe there are some edge cases where Spring is ahead. I also think Java EE shines for the type of web applications that the vast majority are developing.
I would recommend using IntelliJ for that, for what i have seen they have easier Android support yeah. For Java applications and JavaFX projects it doesn't really matter, it's just what you're used to
To start you are misinformed. JSF 1.0 was released 10 years ago. It was not great. It was not really widely adopted until JSF 2.0 in 2009. JSF 2.0 is fantastic for developing web applications. You are kind of proving the point though. While it continues to evolve it has stood the test of time and will likely be around in the future. It is not like AngluarJS which is being abandoned after a year.
True, but Nuget + MSBuild == Ant + Ivy. Plus I always favoured using Ant than the enterprise pom.xml files I have to deal with.
That's maybe 1/8th of the functionality that maven/gradle provides, not at all an "equivalent". Granted, pom.xml files are quite gross - the utility is worth it (though also why I have been switching to grade).
&gt; I do believe there are some edge cases where Spring is ahead. That's the thing though. Spring HATEOAS and Spring Data JPA aren't addressing edge cases, they are addressing key needs in what is becoming modern web app development. JSF represents the old style of web application, centered on the server, while the trend has been towards RESTful backends and JS-heavy client applications written in frameworks like ExtJS, Angular or Flux. How you are describing Java EE is exactly why Spring still has continuing relevance.
I don't think it's necessary to understand all of Hibernate, or all of the various XML config you can do with it. I'd say if you understand what an ORM is, how to use JPA, as well as the criteria api, and even HQL, you're probably off to a good start. Most interviews have been limited to "Have you used Hibernate?" "Yes" "Okay" Although, I did get asked to compare/contrast JPA config vs XML once.
Spring. Now, the following is a rant from someone who worked with JEE exclusively since 2006 (remember OC4J, EJB2, xml hell and 1 hour to deploy you app, just to test it?) until 6 months ago. JEE is a pain to configure, to test and to debug. It's common to see people using the guess oriented development paradigm with JEE with a bit of faith-oriented programming Try to unit-test your JEE code. I haven't worked anywhere where people managed to unit-test past the DAO layer, if that, and poorly. Why? Because your code is dependent on a fucking container and a shitload of mocks that don't make sense. You have to do all sorts of gymnastics to test your code and in many cases you hit a wall. It's frustrating and slow. In fact, over time it gets mind-numbing. It gets exponentially worse depending on how old the project is. If you're after JEE because of it's market share, be warned: you may end up not liking your job, especially if you get a legacy project where things are not as efficient as you'd like them to be. Moving on from JEE 6 to JEE 7 feels like upgrading your iPhone. The features you get today were available for a long time by the competition. It feels like a "great" improvement for the ones who had to live with a painful way of doing things. I've seen people bashing spring without even trying. I say go on and try for yourself. Create a simple app and unit- test your code with spring. Then try to implement the same thing with JEE. Remember to time how long you spent on google trying to find out how to configure stuff for your JEE app until it works.
I disagree you are talking about a very short term trend that is more talk than reality. I see a lot of talk about these things on blogs but the adaptation in Enterprise systems is limited. Maybe things will move to more JS heavy client applications or maybe not. I suspect they will not but no one can say. I can say that choosing a Java standard that has many implementations ensures that it will not be gone in a year. JSF can be used productively in either environment. Frankly the state of JS heavy development is a mess. The frameworks are sprouting up and disappearing almost faster than you can get a large enterprise system up and running. I doubt people who choose Angular for large projects will have happy clients when they find out their brand new system is built on a framework that is being abandoned. I have a 5 year old JSF project that has required only minimal updates and I expect to get another 5 years out of it if not more. That is what makes enterprise clients happy.
you can run c# web apps even on linux now with vnext. It works great.
I think a lot of people are holding quite a bit of disillusionment here. Java's claim to fame, and a reason a lot of people pick it and still pick it, is cross-platform ability. And with this, that advantage is gone. It's a huge deal. The timing is incredible with the Google/Oracle court fiasco. The general consensus is that Java is behind the times. It's being left in the dust, and a lot are not content with how Oracle is managing it and what they are doing with it. Most developers would prefer C# over Java most of the time, but still stick to Java because of the cross-platform and library support. And it just suffered a huge blow with that here. It's not going to happen immediately, because this pretty much effects projects going forward. We're going to find that for new projects, people aren't picking Java as much any more. More libraries will develop for C#, thus even creating a bigger pull. That, or Oracle gets their mess together and start changing for the better. But looking at what they've done, I seriously doubt it at this point... I mean, they're still bundling crapware with their stuff. Either way, it's wins all around for developers in any sense.
&gt; I disagree you are talking about a very short term trend that is more &gt; talk than reality Perhaps, but this is essentially the bread and butter of Spring. Spring scratches itches, providing tools for what developers are doing now. If it exists in Spring, it is because enough developers want it (or wanted it at one point). &gt; I see a lot of talk about these things on blogs but the adaptation in &gt; Enterprise systems is limited. We just migrated our apps to ExtJS and our services to REST, adopting the firm wide standard. This is not a use case for where JSF would make any sense. There's a reason why ExtJS is so popular in enterprise. Spring features don't come into existence out of a vacuum. If it were just talk, the features wouldn't exist because no one would be using them.
Ant macros solve most of the uses we get from Maven and I can use a debugger instead of reading piles of logs. &gt; That just sounds broken, either because the pom is crap, or the project is too tiny to matter So broken, that I was part of a project to get a Maven build system running that took around one year to complete, as we were fixing Maven plugins. Since then I only touch Maven when I have to. Still it is way better than Graddle, I have to admit.
And that's a bad thing? __Ducks__
Maven isn't opinionated, it is dictatorial. There's a reason people are abandoning it for Gradle, despite gradle's flux issues. But Maven is great for those single-jar library builds. They nailed that... but war or anything else? Not worth it.
if they don't bundle the Ask Toolbar, Java is fucked /s
I would start with Java EE. Get yourself the newest [Java EE version of netbeans](https://netbeans.org/downloads/index.html), which comes prebundled with glassfish (the referenc implementation of Java EE), install [maven](http://maven.apache.org/) and [create your first project with a minimal pom.xml](http://www.adam-bien.com/roller/abien/entry/setting_up_java_ee_7). Now what speaks for Java EE7? * It's the standart * Is supported by major businesses: Oracle, Red hat, SAP, IBM, Credit suisse... * Lot's of application server support, especially Java EE6 with something like 15 official servers. And to people how argue that you could run spring on these app servers aswell -&gt; you're right, BUT you shouldn't. Why? You would get too much overlap. Running Spring DI and CDI on the server doesn't make any sense (@Inject for example is used by both frameworks) and the whole point of the Java EE is that you get one compact bundle, whereas in Spring you get to put your preferred app server together by userself -&gt; complicated and error prone (Java EE app servers get tested) * Spinning up a project is really easy * Your really productive (Only applies if you aren't already proficient in the other framework) Now ending the Java EE fanboyism, because there are certainly pros to Spring: * Spring is more cutting edge in terms of technology. I mean look at [all those projects](http://spring.io/projects)! But the one which don't have Java EE implementations yet are mostly corner cases, which you, especially as a beginner, won't face. * Spring pays more attention to other JVM languages -&gt; Grails with groovy is a first class citizen in the spring ecosystem. * The Spring team is a lot more active in the community (You even got an reply by one of their core members!) and you can find a [lot of official tutorials](https://www.youtube.com/user/SpringSourceDev). PS: @starbuxman (aka Josh Long I would really appreciate a multiple videos long tutorial on creating a whole web app in Spring boot [Authorisation, Authetification with roles etc., basic CRUD, Admin accounts] implementing something like a blog with a comment system, please :D) But in the end, all my point don't really matter because your main motivation to learn one or the other technology is to get a job and for that you should simply look at the job postings in your area and adapt yourself to the market. And if your interested in Java EE you should really look into [adam bien](http://www.adam-bien.com/roller/abien/) and his [online talks](http://tv.adam-bien.com/). I personally really like [this one](https://www.youtube.com/watch?v=p4uSu_NvwCE).
Oracle's JDK itself isn't open source, this isn't the problem that you think it is. Oracle doesn't have a great track record either, with particulars already stated, so I'm not sure why you've decided to trust them and not Microsoft here. Apparently your argument is that because Microsoft dropped previous projects (I'm not sure why you think this is unheard of in large companies, but whatever) you seem to think that a massive move like this is that strengthens it to... what exactly? Might be dropped later? IT'S NOW OPEN SOURCED! So... Uh... Also, .NET is basically their bread and butter, on an entirely different scale than your given examples. Actually, I'm not really sure what your argument is exactly. Seems almost entirely irrelevant ad hominems against Microsoft.
No one needs another server side language. Python, ruby, Go, Java, PHP for web, Node, etc etc etc. They're a dime a dozen and new ones pop up monthly. NET dominates the Windows desktop though and I could see it catching fire if there was movement to make the client side portable. That'd be a really big deal. I'd also expect JavaFX to gain traction as it gets more optimized. For cross platform work it seems like you either have C++/Qt or Java which used to be pretty damn horrible. Qt is wonderful, but C++ not so much. JavaFX being decent and a pure library should gain some traction even if people aren't completely excited by the desktop anymore. 
Yeah, this is right. I conduct a lot of interviews these days and this is the right answer. I don't personally like ORMs, Hibernate or otherwise, but I *do* expect a competent developer to be able to explain it high-level... but I don't care if they know every last detail of this library or that because they change so often... all I'm interested in is are they basically competent and can they demonstrate the ability to learn as they go. So, I would just stay high level, make sure you know the concepts, and if they ask for details give an answer like "I'm not really sure, but because I know the basics I can certainly learn as I go and be effective in short order". Any place that you'd *want* to work would accept that as a good answer (assuming you can demonstrate that you *can* learn as you go of course).
I think knowing native JPA is probably enough. I will say in practice I find some of the Hibernate specific syntax cleaner and easier to work with. Specifically I really like Hibernate Criteria query. 
I don't quite think you actually know what programming languages looked like in the 1990s. Java 5 itself came out over 10 years ago. The JVM was *incredibly* popular and very innovative, especially among what I guess you consider "hipster" developers. Java used to be the language other people were catching up to in certain ways. C# is basically Microsoft's response to Java, and a lot considered it inferior to Java for quite awhile after it came out, and they competed with improvements for quite a time after that. Oh, how times have changed... In the end it seems like you're agreeing with me, and yet at the same time trying to argue with me over it. I don't get it.
&gt; So broken, that I was part of a project to get a Maven build system running that took around one year to complete, as we were fixing Maven plugins. For what type of application?
I know a few top tier corporations (Fortune 100) that are almost 100% Windows shops.
Thanks. I think it's easy to find out how prevalent Spring is in a job market, but I don't know how to compare it to Java EE because Java EE can show up in job listings under a large number of different key words (and terms are misused a lot etc.) What are your thoughts on that? By the way, I'm in the Washington DC area job market ...
How? I thought Hibernate is an implementation of JPA.
OpenJDK is now the current reference implementation for Java SE 7+
So far it's only a marketing gag or where can I download the .NET VM for Linux?
It is. JPA doesn't do anything. Using the EntityManager instead of the Session, that's probably a better idea. In case you wanted to switch to EclipseLink or use whatever is installed on the app server.
Yes, I'm aware there is an inferior open source alternative, just like there has been one for .net (Mono) for that matter. Doesn't change anything.
Its not "an inferior open source alternative" it is *the* official Oracle reference implementation for 7+. According to Oracle the "Oracle JDK" is the OpenJDK with a few extra non-open libraries and a couple of open libraries (like Rhino) pre-bundled. https://blogs.oracle.com/henrik/entry/java_7_questions_answers
I'm afraid you don't have a point that is relevant to anything I said, or isn't a strawman. There are reasons Java is now everywhere, and I gave some of them myself. You should understand a big reason corporations moved away from C++ (and that's not entirely true in the first place [Microsoft languages actually have the lion share of demand altogether right now], but whatever) as what I mentioned above. You were blatantly incorrect trying to say Java has never been innovative, and outside of you just stating you know why you've given absolutely nothing that actually shows that. Java brought a lot of innovations, and that is why it is now everywhere, but that is back then and we're talking now. Times change. People are starting to avoid Java when possible, especially with Oracle pulling stunts. Used to be a time when Java was on almost every box... now, well, if it isn't people wish it wasn't. Of which, language features like closures can be of tremendous value to developers, often saving a ton of time and making code clearer and easier to maintain. These kinds of things are considered when making language choices on a corporate level. Furthermore, it is the very "hipster" leads that pick languages based upon fit and ability to solve a problem well, and these features do play a big role. Also, not only will they, they already have. C# has gained popularity and taken a large chunk out of Java demand for the past 5 years. You might be stuck in a bubble if you think otherwise. Java demand is down, C# is up. Also a few others. I'm sorry, but at large at corporate level, Java isn't looked upon kindly.
Open JDK has been known to be far less stable than the official JDK. It is, also, as you just pointed out, behind, not the latest version, it is inferior even in that regard. This is exactly the same kind of thing with Mono and .net. This isn't an argument against anything I said, I'm not sure what your point is besides not reading what I'm putting down. This will never make Oracle's JDK open source, as I said, way back in my first comment.
Actually i need to do that in an XML file
Try actually saying exactly where, because there are none in my post. The conversation was pretty much over the moment you decided to basically ignore me over and over again, not that you care. In fact, I'm not even sure there was a beginning as you haven't dealt directly with anything I said (and haven't bothered to even back up any of your claims to boot) in any of your posts. Or delete all your posts, whatever.
[Develop for it? I'll piss on it](http://www.cnet.com/news/steve-jobs-and-next-genesis-of-the-new-apple/)
Which means this doesn't really effect them. .Net already runs on windows.
Explain what you mean.
I mean Microsoft is saving us from Java for cross platform desktop UI development. Hallelujah! 
From my link: &gt;Q: What is the difference between the source code found in the OpenJDK repository, and the code you use to build the Oracle JDK? &gt;A: It is very close - our build process for Oracle JDK releases builds on OpenJDK 7 by adding just a couple of pieces, like the deployment code, which includes Oracle's implementation of the Java Plugin and Java WebStart, as well as some closed source third party components like a graphics rasterizer, some open source third party components, like Rhino, and a few bits and pieces here and there, like additional documentation or third party fonts. Moving forward, our intent is to open source all pieces of the Oracle JDK except those that we consider commercial features such as JRockit Mission Control (not yet available in Oracle JDK), and replace encumbered third party components with open source alternatives to achieve closer parity between the code bases. Oracle JDK is behind OpenJDK. Oracle says so themselves as they pull from OpenJDK when they put out a new build. Oracle's JDK is OpenJDK plus "closed source third party components like a graphics rasterizer, some open source third party components, like Rhino, and a few bits and pieces here and there, like additional documentation or third party fonts". There is nothing about the core JDK that is different.
Sure but I don't do desktop apps, so pooy.
There is now a real and serious contender in the world of multi-platform "enterprise" languages. And with Microsoft releasing and [Android emulator for Visual Studio](http://blogs.msdn.com/b/visualstudioalm/archive/2014/11/12/introducing-visual-studio-s-emulator-for-android.aspx) also today, while Oracle is suing Google, I think the attack against Java is quite clear. Maybe the greed has clouded Oracle's judgement too much and they won't react, but I think it will motivate them to evolve the language more rapidly to catch up with C#. They have significantly eroded developer good will with the Android suit however, and Oracle's reputation has never been stellar among developers, so merely catching up may not be enough. I'd like to see stats of Java vs C# adoption among new developers coming out of school.
&gt; Yes, I'm aware there is an inferior open source alternative Where the fuck do people get those arguments? Google uses OpenJDK, put that up your ass.
Because it's not? If I go to Oracle's page and click download JDK, which version do I get? They're not the same thing. Is that what you guys are trying to argue?
Is "very close" the same thing or what? "Nothing" about the core JDK, except, you know, the "bits and pieces here and there"... "Moving forward" is not the same as we're there now either.
As of JPA 2.x there's really not much that is Hibernate-only anymore. Used to be that you sprinkled Hibernate classes and annotations everywhere but now it's pretty much fused with JPA. 
I wouldn't call it lightweight, but [jHipster](http://jhipster.github.io/) is a yeoman generator using Spring Boot and AngularJS. It's pretty easy to get started, definitely worth at least checking out, even if a bit more than what you're looking for.
That was in 2008...
Fairly sure none of the UI stuff is included in the open source offering. 
You seem to do a lot of speaking for other people here, and you don't back up much of this with any kind of tangible reasoning. I know very few people who would select C# over Java for anything but writing Windows programs. The only reason C# has maintained the base that it has is because it has such strong ties to such a prevalent OS (and by extension the web and database servers they hoist on you via tight OS integration). I think you've got it completely backwards -- they're admitting defeat here. They are going to give non-Windows users a castrated C#. Feel free to explain to me how giving people a watered down subset of your platform is going to help it defeat the most popular platform in the world. 
And? Is YOUR OWN SOURCE not recent enough for you anymore?
*eyeroll* My point was "moving forward" was referencing from 2008. As in from JDK 7 and on, OpenJDK is the official reference implementation by Oracle and Oracle JDK is a derivative thereof. Not at all like Mono.
I backed up everything far more than what you've done here. You don't know many people? Great, obviously, that totally refutes everything I said... oh, wait a second here. You mean, people chose C# over Java for Windows programs? Huh, so you're telling me, that as long as cross-platform is not a target, that people chose C#? Woh, tell me that again. Now wait, how does that contradict my first post at all? Now, pay attention here... now that .net is going open source, and thus cross-platform functionality is not going to be a feature of C#... 2+2 here. Also, sorry, Java is not the most "popular" platform in the world by a long shot. I still believe that title goes to C. Just plain C. Not everybody is up to date, lot of legacy programs out there and old ways. That would be your wish, and I'm not even sure where you're pulling that from. What do you mean, by "popular", exactly?
And that's been a solved problem for a while now. SWTs. Not perfect, but the get the job done.
Okay, so, you think your own source is not accurate enough to be quoted. Good. Great. Fun. You get to quote your source, I don't. Also, "official reference implementation" doesn't, again, change that Oracle's JDK is not open source. Again. Funny that.
Yeah, but WebSphere is also in the running with IIS for "most secure by downtime".
If people abandon Java, it won't just be to .NET. They will go to Node.js. They will go to Python. They will go to Ruby/Rail. Go. D. Scala. Groovy. .Net isn't the only OSS game in town, and it is just now getting an OSS community of note. The next 2-3 years will likely be security auditing and bug fixes. While everyone else develops features.
Java has been leaking people to all of them for the past couple of years. The topic however, was about the .NET open source event, and how that would effect things. And it will definitely increase the rate of this occurrence, by mainly appealing to the people who only use Java because it is cross-platform and pretty much open source.
No, how about you think about it this way: The President will occur future trips in Canada. Does this say that all the previous trips were to Canada? Great. Now, welcome to my point. Going forward does not mean everything already in place has changed. It hasn't. You guys got your panties stuck in a bunch because the word "inferior" was used. Yet that's a common way to speak of versions that lack things from another. I didn't say you wouldn't use it, that it wouldn't be good enough, or so forth. And it is. No, OpenJDK is not Oracle's JDK. They are separate. Regardless of how you feel about the differences, the differences are there. Again, "very close" is not the same thing. **It's why they are different**. What is so hard for you to understand about that? How sad that such a basic concept is beyond most of you. But instead of dealing with actual points I said, you nitpick word choice and act superior for it. Get over it. The sad part? I was defending Java here, saying that Oracle's JDK not being open source is not a bad thing. Ironic.
I second this. Agile empowers your team to the point where they're actually helping you manage the project. Agile also teaches your to trust your team. Tool them up as much as you can, aim for an MVP, and start with 2-week iteration, keep an eye on the trends, use the first 3-5 iterations to determine the teams velocity and it should be smooth sailing after that. You don't really need to know any java at all, just learn to monitor the flow and watch out for anything that's blocking your team/project and then \*help\* them overcome it. And remember: Being agile &gt; Doing agile
Spring is still very relevant. Hibernate is too except for the global trend away from SQL databases.
OpenJDK is Oracle's JDK. It has been since 7. You can deny it as much as you want. This would be like Microsoft saying from now on Mono is the reference implementation and we will make our non-open one by extending Mono. At this point you are just trolling and I have better things to do.
Yet. But they were hinting as much at one of the talks today.... 
[No significant difference in performance versus the "Oracle" one.](http://www.ilsistemista.net/index.php/linux-a-unix/37-openjdk-vs-oraclejvm-a-look-at-java-performance-under-redhat-6-3-with-specjvm2008.html)
It's also essentially a nicer, more modern Java in terms of language features...
Communication, requirements, scope, schedule. Those are your job, not learning Java. Next, become a quality cheerleader! Nothing kills like poor quality. This means you need to be testing the product yourself -- constantly Next, become a product expert. Really use it and get to know it. Learn what EVERYTHING means and what they are for. Finally: knowing when to be a dick and when not to is the hardest skill on earth. I typically start by not being a dick to see how people will abuse the situation. If you hired good people, they will want to get things done. If you hired bad people...you are in trouble no matter what.
Not necessarily lightweight but there's [Play](https://playframework.com/). Then again, anything is lightweight compared to Spring. What Play lacks in lean-ness it makes up for in fun and ease. There's [spark](http://sparkjava.com/) if you want something anorexic. You can always just set up a web.xml, create a JAX-RS servlet, throw the war in Tomcat and clock out for the day, but that depends on what you actually want your web app to accomplish without forcing you to roll your own features or fall back on AngularJS and/or a ton of JS in general. Building off of JAX-RS at least gives you the satisfaction of your view being 100% decoupled from the server..
What's the error?
http://www.javasight.com/
A former employer used [stripes](https://en.wikipedia.org/wiki/Stripes_(framework%29) (not stripe the payment authorization - stripes) which did feel quite a bit more light weight than Spring's setup. There's a whole [host](https://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#Java_2) of 'em out there though (and they're all quite full featured).
Spring MVC is still solid. 
JAX-RS backend, some type of JavaScript frontend - backbone, angular, ember, backbone, foundation, etc.
Listen to them. The engineers are the experts. They know what they're doing technically. They need leadership to guide them in focusing their talents on specific projects. As another post here said, trust them. It will be likely obvious if someone is really a bad apple. Give them goals, give them encouragement, give them guidance, and give them feedback. Feedback is huge, especially for software engineers. They thrive on constant, real-time feedback from their IDE's and QA, why should that be different with their boss? I can't stress this enough, though one must be wary of going too far and micro managing. Tell them what to make, not how to make it. The best way to know why a project is behind is to stay informed. Go to status meetings, solicit feedback, look at backlogs, ask how things are going at the coffee machine. It's okay to ask for estimates, but only if the tasks are well defined. If you disagree with the estimate, don't say, "Why is it going to take so long?" That's very negative and accusatory, and puts them on the defensive. Instead, you could say, "How did you come to that estimate?" They're engineers. There was a deliberate process, I'll guarantee it. Not all, but many engineers have introverted tendencies to one degree or another, and often putting them on the defensive means pushing them into their shell. They will become more resistant, quiet, offering fewer ideas and contributing less. Help them be proud of themselves and their work (even better - show them how proud you are in it, both monetarily and otherwise) and they'll increase velocity, the office will be a healthier place, you'll have less turn over and higher quality software. If an engineer doesn't seem to be performing well, make sure you have all the facts before confronting them. This includes their side of things. It may not be easy to ask them about their progress at times, but that's why they pay you the big bucks. If you make it normal to have periodic 10-15 minute private chats, then it's easier to keep/get back in touch with what their day to day is like without starting a rumor mill about so-and-so getting disciplined. Remember how hard programming can be, then remember that you're likely making more than the programmers, and they know it. Don't patronize them or condescend, they're smart and want to be treated as such. Practice servant-leadership and do what you can to make their jobs better, and they'll be excited to do what they can to do a better job. Wow, this got long. Best of luck! tl;dr - Listen to and trust your employees, give and take feedback, leadership instead of management. Basically, try to be Captain Picard.
Yes, when .Net actually becomes a viable cross platform engine. What I was pointing out is that Linux and Mac Ports don't happen overnight, whereas something like node is already cross platform. 
Try /r/javahelp for these kind of questions. Make sure to read it's posting guidelines. "won't let me add" isn't a good description of the problem you're getting: be as precise as you can when describing your situation.
I still have to encounter a project, except for the pet store or similar logic-less CRUD, that can be fulfilled using only JPA and not relying on its underlying implementation. By that I mean avoiding using native query as you loose 95% of the interest of an ORM, but rather modelling entity relationship properly (i.e: not just following the spec but finding you way around the vendor lack of support for it or subtle deviation) and generating real-world complex queries that imply more than a simple inner join between three tables. Being Hibernate, EclipseLink, DataNucleus or ObjectDB, none of them implement JPA properly, the spec is unclear on too many aspects (e.g.: what should happen when you call close() on an EntityManager), plus they all want to have their "added value".
From my view, it is a less readable version of Java, just like Scala.
Agile is great, but please be very careful if you hire consultants to implement it. Especially if you have a big organization. Most developers are perfectly capable of designing their processes, which is what being Agile is all about. Most consultants tend to overcomplicate things because it secures their job.
I use DropWizard Jersey-based backend with a FreeMarker/Bootstrap/AngularJS front end. Here is a simple site I made with that technology stack: [https://bitcoinium.com/](https://bitcoinium.com/) And some other getting-started with DropWizard example code here: [https://github.com/timmolter/XDropWizard](https://github.com/timmolter/XDropWizard)
You're right with the confusing job descriptions. Sometimes it even gets so far that they write Java EE but actually mean Spring. But don't worry about stuff like that - apply anyway. Learn the concepts of developing java enterprise apps like dependency injection and orms. An employer won't really care if you learned the other framework especially when you're an junior developer. You will learn most things on the job. Spring or Java EE doesn't make a difference for a junior. Just learn concepts. The implementation you can learn on the job. 
1) If your ArrayList variable is indeed named "ArrayListTest", please rename it so that it begins with a lowercase character, because that's well-reasoned convention. 2) If you get an error with the line you're showing, two possible reasons spring to mind: I) i-1 or i-2 are less than 0 or are &gt;= the list's `.size()`, and II) the ArrayList variable has not been instantiated while stating a type suitable for mathematical operations, namely e.g. Integer, Double, or Long. So, instead of `final ArrayList&lt;Integer&gt; arrayListTest = new ArrayList&lt;&gt;();` you probably just wrote `ArrayList arrayListTest = new ArrayList();` (The final is irrelevant here, but I keep telling people to use that goddamn keyword, because it's there for a good reason.) So, in your case, you'd be trying to mathematically add Objects, which the compiler completely disagrees should be done.
Spring boot has my vote, I never really got into spring before this but by golly, boot makes making web apps almost too easy I'd add a link but I'm on my phone
As a developer, no. 
I used to use stripes, I really liked it. Recently though the lack of support for html 5 drive me towards the spring stack, specifically spring boot 
If you want something lightweight, then [Spark](http://sparkjava.com/) is your best bet (that's what we're aiming for at least). A lot of people use [Spark](http://sparkjava.com/) with Angular. If you want something a little more feature rich (but not at all lightweight), we recommend [Play](https://www.playframework.com/). It has built in Closure and LESS support and lots of other goodies :)
Dropwizard is great for something lightweight enough to get up and running fairly quickly but still malleable enough to build a powerful backend. Check it out at [dropwizard.io](http://dropwizard.io/). Its also a pleasure to work with, unlike other Java backend frameworks that make me feel like I'm building a restaurant but all I really want is a burger. 
Are you ever concerned by the amount of magic being done? I like boot, as my introduction into spring. Yet, I wouldn't know how to change certain defaults such as port it runs on.
Put node.js in front of it. Java makes for a pretty terrible Web stack actually. 
In some ways. Some things are not as nice. Enums are crap iirc, and their value types are very problematic imo (though java obviously doesn't even have that until we get valhalla). Anyway, this isn't really about the languages, it's about the platforms primarily, and the JVM is miles ahead of .NET in about every way which counts, *including* that there are better languages on the JVM than on .NET.
Note that you can use spring (core and Ioc) with play. We do it for one of our project, that's nice :-)
&gt; to see how people will abuse the situation Not "if" ppl will abuse? You mean that there are no ppl who do not abuse kind ppl? 
C# has a lot of nice language features, that java doesn't have. However I'm not sure that MS Office support is such a big deal. For example, the old VSTO APIs are wrapped over native office APIs, and typically have 15-20 parameters. C# has a nice solution for that with 'named optional parameters'. Outside of that scope, that's just a solution for bad API design. The java ecosystem has it's own solutions for office documents(not for Office plugins, but that's a niche market).
Blogspam. The linked page http://www.waratek.com/news/virtualization-review has a few lines of the full article http://virtualizationreview.com/articles/2014/11/04/containerization-security.aspx and links to it at its end with the text "Read the full article". Reported.
What?! Oracle already opened almost all the source code already, see OpenJDK. NetBeans and Eclipse are all open source. What more do you want?
There's nothing stopping you from returning text/html from a JAX-RS resource method. You could implement your own MessageBodyWriter or use something like the [MVC/template feature in Jersey](https://jersey.java.net/documentation/latest/mvc.html).
Is there a full list of everything people are using these days for web dev ? I'm going to build a website somewhat similar to lad bible(but with decent content) and wanted to weigh up all my options for what the best front/back end would be to use. This is just my first real attempt at a website so my current knowledge is next to nothing except html, a little cs, a little sql and some java.
I seriously hope nobody considers leaving java for node.js. 
It's not exactly lightweight nor a complete stack, but for building a web application UI have a look at Vaadin: https://www.vaadin.com/ Vaadin lets you write your app and UI completely in Java. It's based on Google Web Toolkit. Demo desktop application: http://dashboard.demo.vaadin.com/ Demo mobile application: http://demo.vaadin.com/parking/ Short intro video: https://www.youtube.com/watch?v=2AxwiojJoFg Longer hands-on intro video: https://www.youtube.com/watch?v=yWrkinZkKjI
Spring MVC -- Hold the Hibernate
Just to mention another options, there is http://vertx.io/ and also you could make use of the Java EE using https://www.jboss.org/developer-materials/#! ( https://github.com/jboss-developer/jboss-eap-quickstarts )
In my experience the two most widely used are JSF and Spring Web MVC.
If it didn't happen in early 2000s, it probably won't happen now. But a larger deployment range for .net would probably grow the community quite a bit. 
IDE's are religion to some, and nothing but tools to other. To me it is tool, but a tool I'm pretty religious about. I have 3 years of shortcuts quirks and kinks in my fingers, and I do not want to learn all that all over by changing IDE. Some like a hammer with a rubber handle some like it with a wood handle. This boils down to exactly that. 
&gt; I do not see what a java dev would want from .net and vice versa. There's lots of C# stuff i miss. Damn type erasure. Sometimes I feel like a 2013-20014 JPA 2.1/Hibernate is crappier than a 2003 ADO.net.
Mod who removed your post speaking here. Just to be sure, I don't care much for or against spring. I did *not* remove your post because it showed anti-spring sentiment, I removed it because it was reported as [spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) and looking at your reddit history at that time did not show otherwise. Since then, you've been more active, commenting on your and other posts, so I'd be willing to reconsider the removal. Edit: By the way, there's always the option of mailing the mods, as you did. Sorry for the late reply, I was sick with the flu and am recovering at the moment.
Such a shame. Spring is terrible. One day the masses will realise too my friend, one day.
Play is pretty awesome, but I found that it was really geared lot more toward Scala than vanilla Java.
Controversial posts will be reported as spam by zealots who disagree. As an admin, llogiq, you should be the final ref if a post is removed or not, and judge that post by content and relevance....... not by my (or anyone else's) previous posting history! I don't really care... I have better / more profitable things to do than have to argue to admins to reconsider anything, when I haven't done anything wrong. I'm out of here! 
What are your skills (can you develop JavaScript) and what are your requirements? a) Are you building web PAGES? I.e. are you going to produce static-ish HTML? b) Are you building interactive web APPLICATIONS to be used inside the company over fast low latency intranet? c) Are you building interactive web APPLICATIONS that face the public with slow high latency internet? If you need to do A, then you are OK with spring+hibernate or any traditional MVC frameworks will do the job. If you need to do B, look at GWT and VAADIN. You can develop with these frameworks in pure Java. Maybe you can do C with GWT and VAADIN, but you'd need to be quite careful. If you need to do C, you'll need to learn javascript, write all your HTML client side part as static using one of the Javascript frameworks. And write your server-side as a REST/JSON server, again using one of the many lightweight REST/JSON server frameworks. And your HTML+JS clientside/UI will interact with your server via AJAX.
It is a matter of what version you are allowed to use. Clients using Websphere and Weblogic as JEE servers, are very traditional and might still be on JSF 1.x. Already the first pain point. Then JSF itself cannot do much, so you are forced to go for an extra JSF framework like PrimeFaces, RichFaces, IceFaces and many others. Traditionally you could not mix them, so better chose one that can cover all project requirements. This if the customer allows you to chose the framework. If the application needs to be exposed as a set of Portlets, better have one that can work with the CMS system as JSF PortletBridges bring their own set of compatibility issues across JSF frameworks. Finally prepare for lots of discussion fun with the customer while trying to make those Photoshop mockups pixel perfect in JSF, as s/he won't pay for the project otherwise. With lots of meetings discussing technical details why the chosen JSF framework cannot behave like that cool application X. 
Can we get this garbage post removed too, please? Political BS has no place here.
Yes
Many tools also have their own sites and there are lots of Java evangelists doing lots of good stuff. A personal favourite of mine is https://blogs.oracle.com/geertjan/ for Java/NetBeans related stuff.
It already was reported as spam. At best it could facilitate a meta discussion on how to moderate this subreddit. And it has allowed /u/tonywestonuk to show his true colors. However I completely understand that most of you don't want to read it. So yes, I'm going to remove it.
Have you actually seen this happen in large scale production? I have been hearing about how great No SQL databases are for over a decade but have yet to see a successful large project using one. EDIT: okay, okay I give. I work mostly internal applications and just have not seen the demand. I take back the large project comment but I am still not buying the idea of a global trend away from SQL databases.
No sql databases are definitely used on the large scale in production. They have their place, but relational dbs definitely still have their place too. 
Aren't some parts of spring actually J EE compliant? Which parts?
From https://blogs.oracle.com/henrik/entry/java_7_questions_answers "It is very close - our build process for Oracle JDK releases builds on OpenJDK 7 by adding just a couple of pieces, like the deployment code, which includes Oracle's implementation of the Java Plugin and Java WebStart, as well as some closed source third party components like a graphics rasterizer, some open source third party components, like Rhino, and a few bits and pieces here and there, like additional documentation or third party fonts. Moving forward, our intent is to open source all pieces of the Oracle JDK except those that we consider commercial features such as JRockit Mission Control (not yet available in Oracle JDK), and replace encumbered third party components with open source alternatives to achieve closer parity between the code bases." The Oracle SDK is based on the OpenJDK -- its not a side project. Again, this could have been learned with 5 minutes in Google.
Depending on how you handle it you could be toast, quite honestly. They will try to give you technical explanations for why things are delayed/not working and you wont be able to understand them. 30 persons is too much you wont be able to scale. My advise is DONT learn Java, and work in full delegation mode, delegate everything to a 3-4 well respected seniors, divide things in modules and create subteams. Avoid micromanagement at all costs, and NOT learning java is a good anti-micromanagement measure. depending on your people skills it might work. You will know in two weeks/one month, good luck.
How does type erasure in Java adversely affect you in real world code?
I am sure it is done somewhere. I am not sure I believe it is a global trend.
I work at a major bank/credit card company. We're in the process of rolling out mongo as a system of reference for our rewards website. It (or it's cache layer) will be hit by millions of people every day. But it's pretty much just a suite of de-normalized configuration data...
If by success do you mean, we have customers whose data resides in a NoSQL database who pay us money that I use to pay my mortgage and feed myself, I would say that we're successful.
It is definitely a global trend. I've worked at a few companies who at least use Redis. Most large projects use multiple no sql data stores.
JPA Criteria API is different than Hibernate Criteria API. Also, mapping is difference, too. 
Who did that? 
I would not really call it a success unless you have beautiful women throwing themselves at you for your knowledge of NoSQL. :) I did not mean to say it cannot work only that I have not seen it used. I was questioning the assertion that it is a global trend. Maybe it is and I should learn more about it. I just have not seen a demand for it at the places I have worked. I would get looks of shock for suggesting anything other than Oracle.
Vert.x is pretty cool (http://vertx.io/). And i also agree the previously mentioned Spark is nice micro-framework (http://sparkjava.com/).
Kinda, unofficially. I've done a bunch of projects where we used an indexed search and/or a persistent cache in place of a relational database. I have not seen many enterprise clients switching to mongo although it is happening at a few.
Competition is good. I'm hoping the announcement encourages Oracle to get a little more bold with the language improvements. We'll see how this plays out. I make my bread and butter on JVM technology but I'm pretty excited. C# and F# are fantastic languages.
I'll message you about my scripts. There is really not much to it. Scripts are all Windows BAT files. It's mostly the whole technique. Learning how to put the whole thing together. 
Here is another favorite. Release Engineering as a Force Multiplier www.youtube.com/watch?v=7j0NDGJVROI 
&gt; roblem with a shared memory server is, having to run an extra server at all tim Yes the session id is stored as a cookie. All the browser ever sees is a session id. Any other session information you want to keep, you keep on the server. You keep as little of it as possible -- ideally none. This is because every single Http operation needs to take the session id, and retrieve the session data from somewhere (memory, database, etc). And making the session information available across a cluster of tomcat servers means the session information must be in a database or memory cache accessible to all of the tomcat servers.
This is pretty normal. Every team at my company has a non-technical PM and a tech lead/architect whose job is to set the technical direction, ensure quality, validate estimates as well as produce some code. The job of the PM is manage the timeline and resourcing, remove blockers and keep the team motivated and on task. The tech guys are the experts, so don't second-guess their estimates. They'll tell you when something is hard or easy. It's your job to make sure they work on things in priority order and that they have whatever specifications they need to adhere to. The only time I'd press a developer on their work is if you suspect they are trying to something personally interesting instead of something strictly necessary. Some developers (I was one of them in my youth) will spend a lot of time manicuring my beautiful algorithms and never bother putting the nuts and bolts in place to actually finish a task. I've personally had really good luck using Agile/Scrum methodology. There's a lot of dogma that you can take or leave, but the key is to have a prioritized backlog of user stories. Each story has a well-defined (by a BA or whoever) set of criteria for completion of a given feature from soup to nuts. Everything is worked on priority order and every time a story is 100% completed (that should include QA and deployment) it's ready for release. It gives the PM great visibility into what the team is doing and let's the team work very independently.
There is also http://ninjaframework.org and for web services only there is http://rest.li/ , http://spray.io/ also I found http://jodd.org/
JPA is better than Hibernate, in the same way that... An animal is better than a dog. A fruit is better than an apple. A java.util.List is better than a java.util.ArrayList. 
I kinda like using Spring since Spring 4, boot, and Spring Data JPA released. It's rock solid and highly testable while still remain simple.
I have never seen this. Thank you for pointing it out.
Honestly I code 80% scala, 20% java... do not want for any c# features while in scala.
Google uses bigTable, Facebook Messaging uses HBase, I think Netflix uses Cassandra for their streaming database and twitter uses it for analytics, Accumulo was originally created by the NSA and they seem to have a successful project or two that uses databases. There's definitely lots of very successful uses of NoSQL.
Believe it or not, I've seen a bit of a trend back to plain, ol' JEE. JSF/Primefaces for shops that don't know JavaScript well, Angular for those that do. EJB3/CDI and JAX-RS in the middle and JPA on the back end. Just got done with an engagement for an organization that switched from Spring.
spring boot
That's a good point about cross-platform nature of the JVM. I don't know how business folks look at it, but every person I have spoken to so far has been pretty 'meh' about Google-Oracle fiasco. 
Those APIs don't do anything. It is the Hibernate implementation that processes the annotations and configurations and actually performs the persistence operations. This is not an academic distinction because the JPA API has gaps that require additional implementation specific configuration. EDIT: Are you literally saying JPA is better than Hibernate, or are you saying it is better to prefer the JPA configuration and API for Hibernate where the option exists?
We use [Grails](https://grails.org/) extensively. It's basically "Groovy on Rails" (hence the name). You use groovy to tie the simple stuff together but still can use Java (or whatever JVM language you want) to build the services. 
Didn't know about that one until now. I've used Flask extensively to build simple Python webapps and this seems like something that's just as easy and fast to use. Nice!
Actually, it probably is better to use List than ArrayList in an API because it gives options to the caller and the implementor of the API. I can't tell you how many times I've had to covert from one type of collection to another because the API specified ArrayList or HashMap.
&gt; I have been hearing about how great No SQL databases are for over a decade but have yet to see a successful large project using one. My two cents: I've recently been involved in building a system with a custom content-addressible NoSQL datastore running in parallel with an Oracle SQL RDBMS. As crazy as that sentence sounds, we've been able to use the alternative storage layer very effectively to solve some problems that would be intractable with the SQL database itself. 
Depending on what you're trying to accomplish, Spring MVC might still be a good choice. It has the benefit that it's been around long enough to be well understood and supported, there's ongoing active development, and a large community of other developers that understand it well.
C# is more polished and has had good features sooner than Java. However the Java / JVM ecosystem and portability advantages have vastly outweighed the polish and features of C#.
&gt; "Why is it going to take so long?" That's very negative and accusatory, and puts them on the defensive. Instead, you could say, "How did you come to that estimate?" This is amazing; simply reading the former comment caused me anxiety. The latter is genius, though estimating time for tasks is something I'm weak at. My current metric has been "estimate the time I need and double it", and I think it's working out. It's amazing how such a little problem/incorrect assumption could even consume an entire day. 
Also you can use jboss forge
&gt; Most consultants tend to overcomplicate things because it secures their job. Very frequently our clients have 3rd parties implement our product, and we see this infuriatingly frequently. The worst are the bug reports. I'll get unreproducible and vague bug reports, then when we push back and request more information invariably it's "oh, it was something else". I wish I could charge them for the time I spent on a non-existent issue. 
For example Spring adapted the @inject annotation. So @autowire and @inject do the same thing. Spring also uses the JPA specification. You can also use some Spring projects in J EE like spring JDBC-templates.
Tldr: use TomEE The second option doesn't make sense. Why would you put together your own application server? If you like tomcat that much, you could just use TomEE, which is a official certified app server (passed all test) build on top of tomcat. Just dropping the J EE jars into tomcat and expecting that everything just works is just dangerous. You should watch a presentation of one the TomEE guys explaining the difficulties they ran into. 
&gt; its not a side project What is wrong with you guys? Their official JDK is not open source, and has things Open JDK doesn't. That's simply the reality of the situation. I stated a fact. You guys don't like that fact for some reason... I don't know why.
Also estimates are just a guess based on experience and gut feeling, its not science. In some places estimates are made with cards, several persons submit an estimate, an average is taken and thats it, this avoids discussions based on personal impressions. As a manager, either take the estimate as they are or estimate yourself but dont engage on lengthy discussions about them.they are just educated guesses that you wont really be in position to discuss. More useful is to ask to more than one person but separatelly (not on the same room at the same time ) or by mail. 
It's target platform... is now not just Windows. SURPRISE! You're full of it, is what it is. People chose Java because it was the best choice for cross-platform code. Now there is a serious contender. And your naive to think at least some people aren't going to pick C# over Java now here? You haven't even developed anything in C#, have you? I was raised in Java, programmed games in Java, and pretty much picked it for all my hobby projects simply due to the cross-platform nature appealed to me and I could release it anywhere. But C# is a vastly superior language not behind the times by half a decade. As for, your "popular" claims, it's hilarious how you look at those tables and then completely ignore the implications of them. In fact, it's hilarious that in your 3rd link, the most popular is **C**, and Java comes second (did you not bother to pay much attention)? So, apparently we're both right given a source. But the part I want to highlight is C# is in the top 5 of ALL of them, and it just got official cross-platform support. I'm saying it already came through, you aren't paying attention to it because you're blind to anything not Java apparently (can't even read your own links), and your not even accepting the reality of the situation.
The estimation poker worked out quite well for the team I worked with in my previous job. It was not only a helping to avoid gut feeling, but also if someone knew very well what needs to be and their estimate was the lowest they were supposed to explain why is it so low (same for the highest estimate). This often helped to propagate knowledge and the person taking on the task was better prepared.
Ok, make sure to catch back up with me when C# is on top. Lol. 
What did I just read?, and what is that graphic supposed to represent? It just looks like that whole article could have been a sentence or two long.
My god, that doesn't contradict or counter **anything I said, at all**. What is wrong with you people? It does not mean they are the same. It does not mean Oracle's JDK is open source. It does not mean Oracle's JDK doesn't have additional goodies and some different parts of code (your own source states such). Everything I said was right. Again, I stated a fact, and you guys don't seem to like it for some idiotic reason. "But... but... but it's the REFERENCE IMPLEMENTATION!?!?!?!!!!!11!!!1!!!" **SO WHAT?** Did I say it wasn't? C'mon, use that thing in your skull for 5 seconds.
Swing was nice, but required proper skils to take advantage of it, which very few did. The Rich Filth Clients blog series were a proof of what was possible, if one knew how to properly use it. On our enterprise customers it seems to be WPF on pure Windows and Qt/C++ when UNIX and Mac OS X desktops also matter.
It will drive more competition. I'm happy about that.
Yes try and catch ArrayIndexOutOfBoundsException
I'd second that. Dropwizard is dead simple, easy to use, and very easy to debug if you hit any problems. A lot of the other frameworks mentioned here go way overboard with reflection and/or global state.
 nice Java interview questions for beginners on visit - javatpoint.com
I've tended to see them used in production in addition to a traditional relational database rather than INSTEAD OF on large successful projects. Although there are of course projects that use no relational databases. I'm just pointing out that it doesn't have to be a one or the other type of deal. 
now, there is no need for make a theoretical notes of java. you can learn java via online by JavaTpoint
BlueJ is the simplest program for compiling Java. I used it when I was learning. When you are good enough, switch to NetBeanz. When you are an expert, switch to Eclipse.
exactly this. there is data that is inherently relational, works well with relational access patterns even at scale, etc. usually once you hit a certain size though there is lots of data that you don't need relational access patterns atop of, and using something like cassandra to store this makes a lot more sense (and performs tremendously better). just because you hit the size that you have the latter doesn't mean you no longer have need for the former. 
Absolutely make sure you have senior developers managing subsets of that team, 30 is way too many for one person. With good senior engineers you shouldn't need to know java, mine doesn't. Frankly I'd be insulted if he felt the need to start digging into the code or get briefed on nitty gritty technical issues (outside him writing sections of documentation for us since he's awesome) because that means I haven't been doing my job right. I provide him with estimates and discuss tasking/workloads in a way he will understand. A senior engineer should be able to discuss all these things and explain them in a way that requires neither an intimate understanding of the technical matters nor completely blind trust either. Choose these people right and you'll have nothing to worry about. It's important to set goals and priorities and then stick to them or be willing to re-balance the workload when priorities are changed. But if there's an official experienced manager already that your supporting I doubt you'll have to worry about implementing any of this stuff yourself. 
Yup exactly. 
I thought GWT was dead as disco since Google stopped maintaining it... 
I am with you. Using PrimeFaces is so much more productive than any alternative I have seen.
I like Play! but it gets little love on reddit.
Deader.
Spring Data Jpa definitely is great! Havent looked into boot myself yet though. Spring Security is a bit of a pain to customize so rolled my own for that.
You're not wrong, just in the wrong subreddit.
IMO, just build something a little complex in JPA and see what you can do with it. You may run into a case where you need/want to use a hibernate specific annotation or method. This would give you the ability to know JPA as well as discuss something that JPA doesn't do where you needed to drop into the hibernate when interviewing. That would be enough for me if I was doing the interview.
Exactly. fruini can't answer you since he's a paid Microsoft troll. 
When Google left the steering committee I left it for dead. To be honest, it wasn't my favorite framework anyway. It felt clunky, verbose and monolithic. 
how is the jvm performance wise, compared to c#?
OK, explain it to me. Say I want to write a cross platform app. With java, I know that I can just start a thread, and the thread will run the same way across windows, OS X, and Linux. And its performance will be very high across all these platforms. Same goes for File I/O, task bar icons, window management, memory management, etc. Explain to me if that's the same case in C#.
A text based adventure! Great way to use the scanner and practice if statements, and maybe as you feel more confident you can create a way to store the users current location.. Twas what I went after when first learning if statements. Best of luck! OR.. Or.. What if you made a coversion calculator like Fahrenheit to C or maybe even have the user input their weight and give them a selection of planets to choose from that would tell them their weight while on that planet..?
I do agree pure GWT is a bit clunky, but then there is GWT based Vaadin, and GWT based technology is still the only way to develop web-apps without having to write Javascript. Hmm, steering committee? http://www.gwtproject.org/steering.html 2 guys from Google, 1 guy from Vaadin, 1 guy from RedHat, 1 guy from JetBrains (IntelliJ guys). I think the situation is different than you remember.
Any reason why your organization haven't considered JavaFX? It would seem to work nicely across all platforms.
I'm part of designing the architecture for a new project, I'm using Clean Architecture as my blue print. I don't know what the hardest part will be, I've never been part of a project at such an early stage. My current project is also based on clean architecture, and I can see the benefits of using it. If you've done it before and have knowledge to share, please do.
 Java or rather openjdk has been open source for some time now, so that doesn't really effect Java. JavaFX is also in the same open source mode as well. They've already gotten rid of most of the non-specific source that was included. The Java community, Oracle and the jcp have gotten much better and quicker so that may also be a non issue. Think this is an attempt to open up more to the community in hopes of getting more development for the platform given the competition in the phone and table space. Might help .NET some but only time will tell. 
What documents did you read that make you think Docker is a web server? It is not, and is not even related to that so dump that from your brain (but answer my question so I know). Docker is an application container, but it doesn't matter the application type. If you think of your physical computer, then a VM is a virtual computer running on that physical computer. Docker is like a VM, except that it isn't virtualizing the hardware but it's setting up a specific environment that your application expects. It's basically a way of saying "take this core system, apply these changes, and run this app" without having the overhead that a full VM incurs. If you are familiar with chroot jails then Docker is more like this than it is like a VM. IF you are not, then just ignore this part. Let's try this: If you think of your base operating system (Windows, Linux, etc), when you add a virtual machine you are booting an entire new computer with its own memory management, process management, etc. When you add a Docker app you are only "booting" the differences between what your app needs and what your base operating system provides. Docker is lighter weight than traditional virtual machines. That is, if you have a specific set of hardware you should be able to run more Docker apps than VM-based apps because of the overhead of a VM. It's like running 50 Tomcat instances for 50 apps versus deploying 50 WAR files in to 1 Tomcat. In the first case resources cannot be shared, in the second they can be. However, Docker ensures that those 50 WARs in one Tomcat cannot interfere with each other (and as such appear isolated). They act independently even though they can share resources. I hope I helped, I know there are some technical details I glossed over, but I was trying to get the gist across. I'm not super deep in to Docker myself but I've read about it quite a lot so I'd welcome any corrections.
i'm not the best to answer this as i'm still new to it myself... bu its so much more than "another web server". docker is a full container. you can deploy everything you need into it and its packaged and ready to deploy anywhere that supports docker containers. for instance.... you build a web app... you build a rest API... html/js front end... backed by a database. what you can do is create a docker container, provision it to have the db in it... your web server... your app server... and have it all packaged together. now you have a docker container. host it locally. host it on amazon. host it on google container engine. host it on redhat. it doesn't matter. you have a self contained package of your application. now that example is kinda silly. and not exactly how it works. but i think its a rough enough idea of what you are looking for. its not a web server, its a way of packaging your application so that it is self contained and portable.
Docker is not a web server at all. It provides a nice interface for linux containers with a few bells and whistles. You can think of a linux container as a very light weight VMs. VMs are heavy since they each have a kernel and a hypervisor. Containers don't do any kind of virtualization. Containers don't have a hypervisor and they share the kernel with the "host". Containers are more of a namespace system (They're not really VMs). Processes in containers run like any other containers on the machine. The only difference is that they are in their own file system namespace (think chroot) and their own process namespace (processes in a container can see all the processes in their container but not any processes outside of the container). One way, of using docker is to have one service per container. Let's take a web java web app for example. With docker, you would ship your app in a container. In that container, you would have some version of java, some version of tomcat, your app and it's other dependencies. Having all your dependencies in your containers gives you a certain guarantee that you app will run. If your app runs on your machine it should also run on the ci environment, the staging environment and the production environment. This is just the surface. Docker has some really cool features that make life for dev and ops people a lot easier.
&gt; provision it to have the db in it... your web server... your app server. That actually makes it seem less scalable if you have to make your db share resources with the rest of the application. In most cases these days, the dbs run on their own VM, separate from the rest of the app.
It's more diverse than regular VMs. A docker container can contain an application in many more languages than say, a JVM. As a developer, that gives you more flexibility in what tools you use. And I know *VERY* little about Docker, so what I just said may be totally wrong. Correct me someone if it is.
VMs let you run multiple systems isolated from each other to more fully utilize the underlying hardware. Containers like Docker let you run multiple processes isolated from each other to more fully utilize a VM.
I've never seen it referred to as "Clean Architecture" before, but yes, pretty much all of the well designed systems I've seen follow these principles.
In our consulting world, customers are the ones choosing the technology, not us. Plus what I forgot to mention, customers also want solutions that eventually can be ported to mobile OS and there C# and C++ al ready won as Oracle doesn't provide implementations for iOS and Windows Phone.
As long as IntelliJ CE supports Gradle or Maven, then there's no reason not to use Spring Boot. Spring Boot is public static void main, by default, and so requires no app server to work. (Java EE or even more prevalent web servers like Apache Tomcat or Jetty.). It's just public static void main and unit tests. Works in any IDE that can compile and run basic Java code like emacs, IntelliJ, vi(m?), STS, Eclipse, Netbeans, JEdit, etc. you want. DISCLOSURE: I work on the Spring team at Pivotal.
That's... kind of a really strange question to ask. Yes, you'd program code, and it would run the same across platforms as long as you aren't trying to use any Windows specific code bases outside of the .NET core (the same as Java). Which makes your remarks kind of funny to me, because GUIs in Java are often a lot of time slightly off between OSs and it can take a lot of work to make it consistent across all. C# also uses an intermediate bytecode and then use a just-in-time compile executor to native code. You could directly compile it to native code though. We won't know the performance for awhile. The core was just open sourced and the implementations for Linux/ios are still coming, and then they'll take a little bit for testers to test it. But you can expect at least the quality of Mono, and yes, Mono does all you stated and the performance is very high.
&gt; Docker lets you, the developer, say "my app needs XYZ and then it will run perfectly" and you can create, debug, and deploy the exact same container so you eliminate a lot of the environment mismatch that quite often plagues QA/Staging/Prod style configurations. Can you be more specific about what you mean by XYZ here? I.e, I can already run the same config that's going to be run on the server on my dev machine, and then this becomes a non-issue. May be this would be useful for desktop apps where people will run it in a variety of configs, but on a web backend, you generally have control over the server environment, and run the same env on your dev machine. Edit: Also, we're talking java here, whose point is 'write once run anywhere', so it shouldn't even matter where you're developing, it should already run everywhere
&gt; aren't trying to use any Windows specific code bases outside of the .NET core (the same as Java) How's that the same as Java? All of Java's OS specific code runs across all OS's. What about the specific things I mentioned, like threads, file i/o, running shell commands? Do all they run on all OS's?
Your app needs to manipulate images. Java is just slow as sin doing this, so you need imagemagick. But, uh, the JNI bindings are for version 2.3.7, though the Ubuntu apt-get version installs 2.2.8. Oh, your ops team installed Ubuntu Horny Hedgehog? Shit, now you have imagemagick 1.2.ohsnap. Write once, run anywhere still works in Java. Until you try to do something quick (like scale an image). Did your dev machine get the latest shellshock patch that changed how BASH works? &gt; but on a web backend, you generally have control over the server environment I want to work for this company. &gt; run the same env on your dev machine I've never had this happen. That's why Docker is pretty cool.
I gotta go for the text adventure too, but go for more textual analysis than just verb/noun For example!e hit the door with the axe, smash the door with the axe etc should all be recognised but without special door/axe cases.â€¦. 
From your comment, it sounds like Docker is like Python virtualenv, but with the ability to virtualize hardware piecemeal. Is this accurate?
Well. You can do interesting stuff with just text. Just a text adventure based on a written story with individually written/programmed rooms. Or the more advanced version, where objects you can find are not always in the same place, and where rooms and their descriptions are at least in part procedurally generated (meaning that a tamed random generator defines the world). You can also add RolePlayingGame elements, e.g. experience points, levels, hitpoints, etc. You have probably heard of Roguelikes. Now, you might think that this can't be done with text alone (even though they usually use text characters to draw a visual image of the world), but you have to think outside the box. Text output is very fast. When you move the player location from position 45,23 to 45,24 you do not need a text output system that can do this in place - you can instead just print a lot (like 50, but could be adjustable) empty lines to clear the screen and then print the new view of the screen. This can well be fast enough to not look like some irritating up-scrolling screen but instead like a change from state 1 to state 2. And if you'd go that far, you can even do real-time action. If a state is shown for half a second or less and then changes in the above described way, you can have a gameloop like this running in one thread, and then have another thread read the Scanner(System.in). This *does* work and is still quite simple. 1) You need three threads for this. No, it's not as complicated as it sounds. The main thread, which you get automatically when the program starts with `main` runs an infinite loop, using Thread.sleep(500) or something like that to give a pulse. Whenever this has happened, you use SwingUtilities.invokeLater (Not necessary, but a good trick to keep things simple.) to call one of your own methods. That method will then execute on the AWT event thread and do the screen content update. That's two threads already, wasn't complicated so far, right? 2) Now you need to create your own new thread, which also runs an infinite loop. It uses Scanner(System.in).nextLine().trim(); to ask for user input. Whenever the user has entered a command, you use SwingUtilities.invokeLater to send this command to the thread in which your *actual* game takes place: The AWT event thread. So, you will not have multithreading issues, because all logic takes place in the same thread. There's a downside, though: The user will need to just press ENTER to tell the program that it shall pause its realtime activity for a moment, or the user can't see what they are entering. Then you continue once the command has been entered. This is a dirty crutch, even dirtier than the screen-scrolling text output thing. But if you're willing to put up with the two of these, you can make action games just like the big guys, using only text and the console.
I'm not super up on python virtualenv but from what I read it's similar. virtualenv is on a higher level than Docker, squarely in the python toolchain. Docker is more abstracted from the specific language because it's more about setting up the environment as a whole compared to the language quirks much like rvm lets you set up a bunch of different versions of Ruby, but they all kind of interact. if you know about virtualenv you should know about chroot jails and that's really the abstraction you are working toward.
Nice, thanks.
Docker really shines with something like coreOS or kubernetes and a micro service architecture. You could have one service written in Java, one in node.js, another in php etc, then use a private DNS system to let them communicate without having to know exactly what machine each other is on in your EC2 cluster. It wouldn't make sense to have a whole other VM for each microservice because they will be inactive for a majority of the time, so you get more efficient usage of resources having multiple containers per VM (in addition to the reasons other people mentioned like stopping processes having conflicting dependencies)
All right, those are actually some interesting use cases. Thanks. It remains to be seen though if its worth doing those when you can just write a bash script which can download the correct version of imageMagick or update something to patch for ShellShock. I don't think the process will be quite as auto pilot on docker either, if you had 40 nodes running &amp; had to update them. 
It's a little hard to find good benchmarks, but everything I've seen shows the JVM beating the CLR by a comfortable margin. Hell, I've even seen benchmarks showing *mono* to be faster than CLR...
&gt; You could have one service written in Java, one in node.js, another in php And you would be an idiot for writing node or PHP if you know java.
Have a look over at /r/ProgrammingPrompts for inspiration. Most of the prompts there can be done (and are designed) to be made in text mode.
[Check this out](https://plus.google.com/communities/116543000751323604177/stream/8278da9c-36b2-4496-a56b-469fb4da0df7.) Seems like stuff going on. Version 2.7 RC1 came out on Oct 30th. http://gwtdaily.com/ 
&gt; Maybe you wrote an in-house MyJavaFramework library, and you have 2 apps that run on top of it MyFrameworkApp1 and MyFrameworkApp2. You can create a Docker image for MyJavaFramework, it would require jdk-7, and then you can create another Docker image that contains just MyFrameworkApp1 or just MyFrameworkApp2. You can then easily configure computer #1 to have Linux + Java + MyJavaFramework + MyFrameworkApp1 and configure computer #2 to have Linux + Java + MyJavaFramework + MyFrameworkApp2 (but not MyFrameworkApp1). Isn't that what Maven does? Except with this, if you made a change in MyFrameworkApp1, sounds like it would be a pain to update it on all the other dockers using it.
Isn't that what already happens? You compile something and the same thing you compile is what gets deployed? 
&gt; The latter is genius, though estimating time for tasks is something I'm weak at. I haven't met a single developer who's 'good at' time estimates. Creating software, especially new stuff you haven't done before, is almost impossible to predict. The only thing that happens when you demand estimates is that your developers give you grossly overestimated periods that sometimes they don't need (and they spend the rest of the time slacking off) and sometimes still don't make because they ran into unexpected problems. In our project we got rid of estimating stuff. We just do as much as we can in a sprint.