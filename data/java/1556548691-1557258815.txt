**Defaulted to one day.** I will be messaging you on [**2019-04-30 14:38:09 UTC**](http://www.wolframalpha.com/input/?i=2019-04-30 14:38:09 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/bio04c/essential_intellij_shortcuts/em2729r/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/bio04c/essential_intellij_shortcuts/em2729r/]%0A%0ARemindMe! ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Seems like it has been fixed finally !
It would probably be a better fit to redirect them to /r/javahelp and ask the mods at /r/javahelp to put up such a sticky.
I have a set and I remove the element 8 from the set. The data structure is consistent (here my set) if after the removal, the value 8 is no longer in the set. I do not postpone any operation.
That's because we're all waiting in line for this feature to be finally released
TL;DR: **install the Key Promoter X plugin** For us OSX users (or anyone using a different keymapping set), this is not too useful. The plugin is a nice idea.
You haven't told me any reason to ever use `LinkedList`.
Off topic, but I found the most useful thing ( aside from my personalized git cheat sheet ) is to set the editor to nano instead of the default vim.
Did you try the [search function](/r/java/search?q=learn+more&amp;restrict_sr=on&amp;sort=relevance&amp;t=all)? Or reading the sidebar?
CDI events could be useful to you. They can also be processed asynchronously.
This comment says it all. ;-)
Hi, I am a second year student and about to finish the basic java subject. I quite like java and would like to work as a java developer in future.
Hi, I am a second year student and about to finish the basic java subject. I quite like java and would like to work as a java developer in future. I read your comment and wanted to know a couple of questions: &gt;make a new project with dependencies &gt; &gt;If you can deploy it I obviously have no idea what you are talking about in the quoted lines. **How how do I proceed further (after having finished basic java subject) to learn about dependencies and the other things you mentioned?**
No this is not atomic (there is no multithreading here). However, I understand the problem: LinkedList is just a bad implementation, because you do not have access to the internal data structure. This implementation is just done to remove element throught iteration. So, the removal of an element at position p takes O(p). If the array is large it will be worthwhile. The problem with your post is taht it tends to show that linked list is a bad data structure and that array should be prefered. This is absolutely false. Here the LinkedList is just a bad implementation. However, the solution is not to use an array it is to write your own list
I like the spring framework guru tutorials. I would suggest you start looking at some of those. But to roughly explain something to you. When you build a full application, you don't write every line if code involved. You often use already developed libraries of code in precompiled projects called jars. You can use a build tool like maven or gradle to get these jars from online repositories or even private ones that you have at home. Those external jars are what I am referring to as a dependency. It is a very important tool and you will need to learn about that if you want to be a professional developer.
Can I dive into spring frameworks, straight after basic java course or I should take other courses first such as databases, java script, Html , CSS ?
Shift+Alt+J (I think? Otherwise Ctrl+Alt+J) to mark every occurrence at once, which is also often useful for me.
I guess that is up to you. You can choose whatever path is best for you.
Cool, Thank you :)
But how do I search my scratches?
I wonder what the performance hit of this reflection and lambda use is. Even though they consider performance a goal, it still matters for how much it's even worth if maybe nobody will use it because it'll be too slow.
Ooo that's even better. I knew you could do alt shift j to reverse but had no idea there was a select all. I'll have to try that out
So it looks like they're actually moving old downloads once they get out of the 6 month cycle. They're actually on another page, with what looks to be different links https://jdk.java.net/archive/
I think a simple flowchart would help. Something along the lines of "Are you developing commercial software" Yes/No, etc
The posts are appearing in this subreddit.
&gt;No this is not atomic (there is no multithreading here). I said there was ("concurrent access"). &gt;Here the LinkedList is just a bad implementation. However, the solution is not to use an array, the solution is to write your own list Maybe. But I think there's a problem with any general-purpose linked list class, which is that the link nodes are additional objects which are external to the stored data. That adds overhead. When the linking is *internal* (trivial `next` field pointing from each object to the next), the overhead disappears, and linked lists become competitive. I have written linked lists of that kind (very rarely) when they are faster than arrays. However, that's ugly, because it breaks the encapsulation between the implementation of the objects and the implementation of the list storage, and means that each object can only be part of one such list.
It's useful until you try it in any other program. Then you will remap it.
 !remindme
Is ctrl alt V the same thing as typing .var at the end of a statement and letting it create the variables?
Happy to agree with you.
For sure! `Ctrl+W` closes tabs in most programs. I was pissed off by Mac OS X key bindings... How is that possible to maintain completely different keyboard shortcuts for different OS? I tried to pass my knowledge of effective work in Idea for Mac dev and I failed!
Well for one thing, that's not really a determining factor. I've worked for many companies, large and small, that didn't pay for any Oracle licensing at all. So you can certainly be "developing commercial software" yet not bother with the Oracle paid builds. I think what you're really trying to ask here is, "*Do you want to pay for Oracle proprietary features and support?*". Even then, it wouldn't be a very useful flowchart. "DO YOU WANT TO PAY FOR ORACLE FEATURES AND SUPPORT?" * YES: Okay. Then use the Oracle JDK. * NO: Choose one of AdoptOpenJDK (HotSpot or OpenJ9 flavors), Amazon Coretto, RedHat JDK, Azul, or some other option. You don't really need a flowchart, so much as you need a newbie-friendly guide for that swamp of options under the "NO" fork. My proposal would be something like, "*Just download AdoptOpenJDK if there's no reason otherwise, and your architect will tell you to download something else if there is*". At any rate, I do agree with the general proposal to have a sticky post or sidebar content on this. The newbie crowd REALLY needs some education and guidance for our community to maintain grassroots mindshare. I've had at least three interviews in the past month where I've asked a junior candidate, "*Are you aware of any new features in Java since version 8?*", and received a response like, "*I dunno, didn't it stop being open source after that?".
It can be done extremely fast [https://github.com/forax/exotic/blob/master/src/main/java/com.github.forax.exotic/com/github/forax/exotic/ObjectSupport.java](https://github.com/forax/exotic/blob/master/src/main/java/com.github.forax.exotic/com/github/forax/exotic/ObjectSupport.java)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for the summary. Since the latest major version I got to love the `CMD/CTRL + SHIFT + E` shortcut that show the last visited places. Navigating with that is super neat and fast.
This is interesting. Are you using a lib, or is it a pure java implementation?
Good idea!
what was the fix? Setting a CORS header?
Thanks, works now
Find Usages is Alt + F7
Pro Tip: install IdeaVim plugin
 [https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA\_ReferenceCard.pdf](https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf)
[Lombok](https://projectlombok.org/features/EqualsAndHashCode) is pretty cool at this.
Yeah, I remap most of IntelliJ's shortcuts. Changed this to `Ctrl + E` for extend. Also changed delete line to `Ctrl + D` for delete.
JavaCV (OpenCV). Tried JavaFX but it played very few formats, was slow, clunky and could not even out perform the old JMF library.
needs ctrl-q imho (quck documentation)
Regardless of license changes, there is a vast amount of code base that just doesn't switch overnight to something else. As a career option Java is a solid choice.
As the document mentions quite some possible issues in equals/hashCode implementations, I think it's worth linking a cool test kit for them: [EqualsVerifier.](https://jqno.nl/equalsverifier/)
Just figured out that's `Ctrl + G` on Mac. Thanks for the tip!
I noticed that JDK 12 with OpenJ9 does not support `--enable-preview` so you might want to reconsider that.
This is what annoys me about IntelliJ, which is otherwise a wonderful IDE ... but they go a little off-the-rails with their keyboard shortcut. In any other app, `Ctrl-W` closes the tab/window... in any other app, `Ctrl-N` makes a new something-or-other. And how about `Ctrl-Q` for showing the JavaDoc of whatever the cursor is on??
This is the true magic sauce to productivity
Does anyone know if there’s a way to place one cursor on each line in a selected block? In sublime text for instance, you can select a block and press ctrl + shift + l
Java handles garbage for you - iirc
C# does as well.
I didn't remember correctly haha
Are you confusing C# with C++?
Yes haha that's why I stick with python and java
Yes. Thanks for pointing that out!
Not to mention autoboxing
`if (this == o) return true;` is pretty common at the beginning of equals
When facing the same issue, my aproach is: just get yourself to it... Try to do the things that were or are still difficutl to you on c# You will catch up the differences fairly quickly. And you will get familiar with the tooling available while doing it... My point is, dont follow a book aproach... Lest be honest more than 90% of what we (need to) know came to us by experience... Besides, dont worry too much about the language, remember they are hiring a developer... As a developer (when hiring) I know knowing the language is important, but i also know that the syntax of the language is the least important... If you can write it in 15 mins in python i am certain you will figure out how to translate it to (almost) any other language in minutes...
JavaScript is OOP through and through. It's just not statically typed and isn't class based. It's dynamically typed and prototype based. Dynamic typing and prototyping are widely accepted to be OOP.
It is really useful. I remap it to ctrl+shift+q/w to avoid os mappings and its easier to press together as well
Thanks makes sense. You are right, experience is most important. I do like Udemy courses though, I'm now learning CSS properly as I've taught myself the hacky way without fully understanding it.
Another useful one: press Ctrl twice, then arrow keys up and down to edit several lines at once.
But there's no reason to learn the new stuff if it just goes the way of shit like Kobol or Fortran
Hazelcast will do that as well.
Not exactly the same, but close: put the cursor where you want it first (i.e., in the first column of the first line), then "double-tap" the Ctrl key to switch to "multiple cursor" mode (the second time, I think you have to hold it down), then hit the down arrow (while still holding Ctrl down) and it will put cursors on each line that you "down-arrow" to. When you're done, let go of the Ctrl key and do your thing -- it will apply your keystrokes to every cursor.
You can download OpenJDK from all the providers you mentioned, but I want to point out -- this may or may not be a factor for you -- that there are, indeed "official" OpenJDK releases, in the sense that you can directly report OpenJDK bugs against them. If you use other OpenJDK distributions, you will need to report bugs to the organizations from which you downloaded the JDK, and they will then reproduce the bug against the "official" versions and report them. The reaons for this is that some JDK providers are very small contributors to OpenJDK, and OpenJDK contributors (which are for the most part Oracle employees, and in some cases Red Hat and SAP employees) work with certain builds. So there are certain distributions that are sanctioned by OpenJDK contributors more than others. For the current OpenJDK version (now 12), this distribution is Oracle's OpenJDK at [jdk.java.net](http://jdk.java.net/). For OpenJDK 8 and 11, these are Red Hat's "upstream" builds, which you can find [here](https://adoptopenjdk.net/upstream).
Great idea. Hopefully the scope stays just equals and hashCode
Yeah - I'm actually using a CORS proxy website corsanywhere.herokuapp.com, which is a little flakey (going to replace it with my own I've decided) - sometimes I get CORS errors down stream. I've ignored the errors for now so you don't get all the rss feeds in Firefox.
If you're that impatient, programming isn't for you.
So you’re using Maven, but getting ClassNotFoundException’s? Are you sure you’re building fat jars?
That actually makes more sense. Anyway, eventually, I've given up and use a combination of src.zip and javafx-src.zip with decompiled jars within lib/ and jre/lib/ instead. Because I've found that the JDK source code doesn't have some classes like ByteBuffer (which requires pre-processing).
Thanks for the reminder. I'm not using it. I'm building a tool around Java and notice that my tool can find certain classes. That's all.
I'm not a beginner in programming, I've been coding for years. Competitive programming, personal projects, college. C, C++, Java, Python, JS. Everything works perfectly when you're inside a comfortable IDE running on a decent PC. CMake for C++, Maven for Java...everything works. But the moment you try to do something out of the ordinary, on a different platform, on anything that isn't a single-file application on Java, all hell breaks loose. Why should it be this way? I don't think I can be considered impatient since I tried to get this whole thing to run all day. It's 1 AM where I live. I woke up at 9 AM yesterday.
Damn sure I am. Even though Maven is probably trying all it can do to keep me from doing that. `mvn package` doesn't build a fat JAR and I had to look around Maven docs and StackOverflow for info on how to build a JAR with all dependencies inside it. Why, why, why? The code is there. It works. Why cant't it just run??
Comparative programming is a thing? Also Java is a great language for building software. The JRE and the way it optimized is different from JRE to JRE. For instance, corretto is optimized for web and cloud solutions.
&gt; Why should it be this way? Because you tried to do something out of the ordinary, on a different platform, on anything that isn't a single-file application on Java, and then all hell breaks loose. Duh.
Good good, let the hate flow through you! Now, download Gradle and use that. It's not a story the jedi would tell you.
So you think we should all develop for a single platform, using the same language, using single-file applications only? What a wonderful world would that be! /s
Google IOI or ACM ICPC. I'm not hating on Java, I like it as a language. I'm just ranting about the woe it takes to get something to build compared to C, or Python.
Yes, we should get this sticky on top https://shop.oracle.com/apex/f?p=DSTORE:PRODUCT:::NO:RP,6:P6_LPI,P6_PROD_HIER_ID:132208700202541131633052,123775488249871532594385
Run s/Maven/Gradle/g on my post and somebody would've told me to use Maven...
I mean. I can understand that, I get your point then. Luckily at work I don't have to worry about builds.
Good good, let the hate flow through you! Now, download Gradle and use that. It's not a story the jedi would tell you.
Everything in Maven is done through plugins; it makes things really flexible (which is cool), but also really complicated (which is not). If you aren’t using the correct plugin — I think its called ‘maven-assemble-plugin’) and getting a jar that ends with “-jar-with-dependencies.jar”, you prolly ain’t making a fat jar. I can’t remember the exact syntax for it — hopefully someone else can chime in?
Everything in Maven is done through plugins; it makes things really flexible (which is cool), but also really complicated (which is not). If you aren’t using the correct plugin — I think its called ‘maven-assemble-plugin’) and getting a jar that ends with “-jar-with-dependencies.jar”, you prolly ain’t making a fat jar. I can’t remember the exact syntax for it — hopefully someone else can chime in?
Java projects work perfectly fine when you are inside a comfortable IDE running on a decent PC. If you are not doing that, you better understand really well how the JVM classpath works, how to write shell scripts, and how to package your own JARs. If you do understand, then you won't have any problem.
In all seriousness though, using any IDE's build system is the first step toward premature balding and erectile dysfunction. It's maven or gradle from the get go. Choose your poison so to speak.
JDeveloper is no longer maintained by Oracle. You'll find your life much happier with a supported IDE that has an active community. Try IntelliJ Community Edition or NetBeans.
Action menu is the most important shortcut. It helps me learn the rest
I was using maven-assembly-plugin and making a jar-with-dependencies. From there the second part of the post begins, with `FileNotFoundExceptions` because of fxml files and input files which are not searched for in the same directory even though the path syntax is the same...
I can write shell scripts and understand how a classpath works (i.e. just like $PATH). I can package a JAR and write a manifest. However, how am I supposed to know that fxml files go into `src/main/resources` while input files read with `FileReader`s go...somewhere else I didn't quite get yet? Reading the docs and Googling? Yeah, I spent all day doing that! Should I have had to? Hell no!
Reading [this](https://stackoverflow.com/questions/46987666/java-8-store-lambdas-in-list) might help.
 String hi = new ArrayList() { private String g() { return "hi"; } }.g(); System.out.println(hi); Kappa
I don’t think this is what they’re asking for. They seem to want to store references to methods in an `ArrayList`.
If you want to use reflection, you can set up a `List&lt;Method&gt;` and invoke the `invoke()` method on each element. The JavaDoc for `Method` can be found [here](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/reflect/Method.html).
I've had linters tell me to do this `getClass() != o.getClass()` instead of `instanceof` in implementing `equals` because it violates symmetry, but the solution eliminates polymorphism. Is an `ArrayList` with the same contents as a `LinkedList` equal or not? I think they should be, because the type of `List` shouldn't matter. Reference equality of classes says that they shouldn't be equal because they do not have the same class. Josh Bloch [favors](https://www.artima.com/intv/bloch17.html) `instanceof` when implementing `equals`.
Option up arrow for expand selection
You have to draw the line somewhere and the only consistent place to draw it is getClass() == o.getClass(). If you do anything else you've got an exotic use case that needs extensive documentation.
You store a [functional interface](https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html) and use [method references](https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html) to initialize them. class Foo { static int smethod() {...}; int method() {...} static void main() { Foo foo = new Foo(); ArrayList&lt;IntSupplier&gt; data = new ArrayList&lt;&gt;(); data.add(Foo::smethod); data.add(foo::method); data.get(i).getAsInt(); } }
I think you familiarize yourself with the syntactical differences (which are not huge) and then use your instincts to try to code it. You know a thing -can- be done, because you can do it in C#. So try to do it in java and if you get hung up let google and stack exchange get you the rest of the way.
&gt; Class should be at least as important as a measly field. Class isn't any ordinary field though in an OOP language, since subtyping means that subtypes are substitutable for the base type. &gt; If you do anything else you've got an exotic use case that needs extensive documentation. It's not really an exotic use case, at least in an OOP language, under [LSP](https://en.wikipedia.org/wiki/Liskov_substitution_principle). Under LSP, equality is a property just like any other. The subtype must maintain the same equality conditions as the supertype. Which for example, is clearly defined in the [List interface](https://docs.oracle.com/javase/8/docs/api/java/util/List.html#equals-java.lang.Object-) of which both `ArrayList` and `LinkedList` are subtypes. Otherwise, you end up with logical inconsistency in the object model, which is the consequence of an LSP violation. Consider Josh Bloch's argument. If you do this: void foo(List&lt;String&gt; a, List&lt;String&gt; b) { System.out.println("equal? " + a.equals(b)); } Should the result be different if you do any of these: foo(new ArrayList&lt;String&gt;(Arrays.asList("a", "b", "c"), new ArrayList&lt;String&gt;(Arrays.asList("a", "b", "c")); foo(new LinkedList&lt;String&gt;(Arrays.asList("a", "b", "c"), new LinkedList&lt;String&gt;(Arrays.asList("a", "b", "c")); foo(new ArrayList&lt;String&gt;(Arrays.asList("a", "b", "c"), new LinkedList&lt;String&gt;(Arrays.asList("a", "b", "c")); foo(new LinkedList&lt;String&gt;(Arrays.asList("a", "b", "c"), new ArrayList&lt;String&gt;(Arrays.asList("a", "b", "c")); Since it is a fundamental principle of OOP that subtypes are supposed to be substitutable for each other, it shouldn't matter what actual type of `List` is passed in. But `equals` behaving differently based on the type of the LHS makes the subtype of `List` relevant. From an OOP perspective, I find this disconcerting.
**Liskov substitution principle** Substitutability is a principle in object-oriented programming stating that, in a computer program, if S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e. an object of type T may be substituted with any object of a subtype S) without altering any of the desirable properties of the program (correctness, task performed, etc.). More formally, the Liskov substitution principle (LSP) is a particular definition of a subtyping relation, called (strong) behavioral subtyping, that was initially introduced by Barbara Liskov in a 1987 conference keynote address titled Data abstraction and hierarchy. It is a semantic rather than merely syntactic relation, because it intends to guarantee semantic interoperability of types in a hierarchy, object types in particular. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Lombok is absolutely how this should be done. Runtime performance, ease of writing classes, and the ability to delombok when you need finer control.
The arraylist is storing IntSupplier type objects? Is that a typo? Or can you explain how that came into play
https://docs.oracle.com/javase/8/docs/api/java/util/function/IntSupplier.html?utm_source=share&amp;utm_medium=ios_app Both methods stored in the List return ints, hence are IntSupplier objects.
&gt;JavaFX GUI &gt;I'm using a Pi 3 B+ There is no aarch64 JavaFX. JavaFX uses native gtk binaries. You're trying to run X86_64 binaries on aarch64 hardware. Try swing. Netbeans runs fine on my aarch64 laptop.
The simple answer is [SDKMan](https://sdkman.io).
Just to be clear, there is no such thing as a "function" in Java, as you would have in a functional language. In Java, you have what is called [target typing](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#target-typing), where a lambda resolves to an interface type which has one method (SAM type - Single Abstract Method). Thus, you have to define an interface with one method (or use an existing interface with one method) that matches the type signature of the function you want to use, and make that the generic type of the list. Then, you can add a function (lambda expression or method reference) to the list and call the abstract method with your input arguments.
I've wished for a similar interface in that past, but for a different reason: to use a custom equivalence object for classes like \`HashMap\` the same way \`TreeMap\` uses \`Comparator\` objects. If such a feature had been a part of Java from the start, \`IdentityHashMap\` would never have been needed!
Your argument is self-contradictory because if types were one hundred percent substitutable with subtypes then there would be no possible way to tell them apart programmatically. If one has the property `.class.getName().equals("Object")` and one has the property `.class.getName().equals("Throwable")` they are not substitutable. We're talking about effective Java here, not some academic semantic theory. Java isn't 100% OO. It has primitives. It has all sorts of things. Pure hammers don't have a claw on one end.
LSP is simply incompatible with using subclass polymorphism to implement an equivalence relation. Your choices are either to violate a principle almost as old as OOP, or violate a principle almost as old as mathematics. If you try to argue purely from principles, you're stuck. If you argue based on historical precedent, `getClass` is the clear winner. If you want to argue based on practicality...well, that argument could go on for a very long time.
&gt; Your argument is self-contradictory because if types were one hundred percent substitutable with subtypes then there would be no possible way to tell them apart programmatically. Your argument isn't with me, it is with Barbara Liskov. You can use `instanceof`, but it is an anti-pattern for a reason. &gt; We're talking about effective Java here, not some academic semantic theory. It isn't about academic theory, it is about logical consistency, which is the point of the theory. If types aren't substitutable for each other, you can't write generic code. You would have to litter your code with `instanceof` checks, which defeats the whole point of polymorphism. &gt; Java isn't 100% OO. It has primitives. Java has primitives for performance, which are not OOP. But the `equals` method is on the `Object` type. That is obviously OOP. The reason why the equality contract exists at all is so that objects can be used generically, as in collections. Bad things happen if you improperly implement the equality contract, because generic code expects substitutibility of types. That is LSP.
Sounds like your right on track. A good YT channel I've found is Java Brains: [https://www.youtube.com/user/koushks](https://www.youtube.com/user/koushks) Focus on Spring boot (which couples well with Angular) and spring data (which usually uses Hibernate as it's implementation).
I assume you use this.getClass().isAssignableFrom(o.getClass()) in your supertype? Polymorphism is a feature, lol. It's *entirely* optional. Sometime's it's useful and sometime's it's not. Constant namedropping doesn't change that. My generic code doesn't rely on equals. Nor does it rely on getClass(). Arrays are objects. I don't see how you're going to 'fix' their equals method. You can't operate generically on List implementations because they're not all the same. Some aren't even modifiable! You want to banish unmodifiable lists from Java? From all new OO languages from now on?
&gt; LSP is simply incompatible with using subclass polymorphism to implement an equivalence relation. Why? A clear counterexample to this assertion is lists. An equivalence relation in OOP is a property on a type. For a thing to be a list, it must have an equivalence relation as defined in the List contract. &gt; violate a principle almost as old as mathematics This is the fundamental mistake people make. OOP isn't mathematics. For example, in mathematics, all squares are rectangles. So, mathematically speaking, you could say that the `Square` class is a subtype of the `Rectangle` class. A fundamental property of `Square` is that the sides are equal length. But, if `Rectangle` has a `setWidth` and `setHeight` method, you could end up breaking `Square`, so you might think of changing the height if you change the width, and vice versa, to preserve the contract. However, if you pass a `Square` to a function expecting `Rectangle`, which is allowed by polymorphism, you are breaking their expectation that the thing you are passing has sides that can have different lengths. OOP is about behavior. The goal is not represent a mathematical relationship, but to share behavior. So, you have to be careful how you subtype, otherwise the behavior of your types will be unpredictable. In this case, the goal is that you want to share the behavior `getArea()` or `equals()` between a `Rectangle` and a `Square`. But since `Rectangle` and `Square` have incompatible properties, they cannot be subtypes of each other. So, you can define a supertype `RectangularShape` which defines `getArea()` and `equals()`, and define `setWidth` and `setHeight` in `Rectangle` and `setSide` in `Square`, maintaining consistency. &gt; If you want to argue based on practicality...well, that argument could go on for a very long time. You can't argue based on practicality in general. Because it depends on the situation. For example, there is an equivalence relation on `List` that applies to all its subtypes (so you would use `instanceof List`), but there is no equivalence relation on `Number`, and specific `Number` subtypes are only have an equivalence relation to each other (so you would use `getClass`).
It is pretty logical to me that since you decided to use Maven, then you are supposed to know that fxml files go into `src/main/resources`.
Thanks! Will have a look.
The default behavior for Java is `return (this == obj);`. Is that an abomination? You're just off on a tangent about a paper you read on languages which has nothing to do with Java.
&gt; I assume you use this.getClass().isAssignableFrom(o.getClass()) in your supertype? I'm assuming this is some weird variation on `instanceof`, and yes, to satisfy the equivalence relation the way it is defined in Java, where the RHS is `Object`. You wouldn't need an instance check with `Comparable`, where the RHS is bound to the generic type. This is a bit of Java's ancient history, which came before generics. It's also why `HashMap.get` takes a parameter of type `Object`, instead of `K`. &gt; Polymorphism is a feature, lol. It's entirely optional. *Exactly*. Which is why am arguing against the generic wisdom, especially and frustratingly codified by linters, that you should always use `getClass` instead of `instanceof`, and which is especially relevant to this topic, where we are talking about automatically generating `equals` methods. Also, in Java polymorphism is opt-out (you have to mark the class `final`) and not opt-in (like C++ and C#, where you have `virtual` members). Unless you mark your class `final`, you can always subtype. In fact, many frameworks (like CGLIB) depend on polymorphism to create dynamic proxies of concrete classes. So, in effect, by restricting `equals` with `getClass()`, you are breaking potential subclasses that you might not know about. &gt; My generic code doesn't rely on equals. No, but the entire `Collections` API does. That is why the `equals` contract is so important. And `List` having a generic `equals` implementation is very useful. For example, in unit tests, I can use `Arrays.asList` to generate an expectation, and compare it against whatever `List` type my method under test actually returns. &gt; Arrays are objects. I don't see how you're going to 'fix' their equals method. Are you talking about the primitive array type? Yes, they are an object, but they inherit primitive reference equality from `Object`. They are not a `List`, so there is nothing to fix. Other than, use `ArrayList`. &gt; You can't operate generically on List implementations because they're not all the same. That is fundamentally not how the Collections API was designed. &gt; Some aren't even modifiable! This is a serious design flaw in the Collections API. At least the `List` contract says that mutation methods can throw `UnsupportedOperationException`, so you have to depend on your program blowing up to know that the generic code does not support the way you are using it, signifying a logic error. Terrible, terrible design. Scala and Kotlin do the right thing and define `List` and `MutableList` as two different, but related, types. &gt; List is just an interface anyway. Not even a class. Why is that your example? That is irrelevant. It is still a *type* and defines the *supertype* of `LinkedList` and `ArrayList`. However, neither `LinkedList` nor `ArrayList` implement `equals`. Each inherits `equals` from the abstract class `AbstractList`. &gt; So LSP depends on the details of the actual program you're running. Uh, yeah. That's the contract of the type, which is a part of the program. &gt; If the program doesn't break upon substitution then LSP isn't violated. That is observable evidence that your types are consistent. Of course, logical proof that your types are consistent is also nice.
Being in the same position with you, I would highlight couple things. Other than better lambdas and properties, syntax is almost the same (get used to f()s not capitalized though!) More important part is the usage of the framework. Determine what frameworks are in demand in your area whether it is Spring, Hibernate, Jakarta or OSGi, focus on them. It was osgi for me and that was the real pain-ish.
&gt; Is that an abomination? No, why would it be? That is a very good default. What is the point of `equals` in the first place? It defines an equivalence relation. For many types an equivalence relation makes no sense. Would you ever want to check if two controller classes are the same? Would you ever use a controller as a key to look anything up? In other cases, such as JPA entities, for performance and integrity, you would not define an equivalence relation. That is because the JPA entity manager manages the instances that get created. So, `entityManager.get(&lt;id&gt;)` is guaranteed to return the same instance on the heap for the same ID. So, reference equality is the equivalence relation you would want to use. JPA entities can be used as keys and members of sets because of the guarantee of how they are managed. In other cases, specifically value types like String, it makes sense to implement `equals`. In which case, you need to implement the contract correctly. Value types can be used as keys in a map or entries in a set. But, if you don't implement the equals contract correctly, bad things happen. Exactly as LSP predicts. If you use polymorphism at all, in Java or really any language that supports polymorphism, LSP is critical to the logical consistency of your program.
Look into Consumer, Supplier, Runnable, and Function. A consumer is a method reference accepting an argument. A supplier returns something but has no params. A runnable has no params and no return. A function both accepts a parameter and returns something. Both are capable of being generified.
I'm looking forward to this syntax making it into a release: public boolean equals(Object other) { return other instanceof Foo that &amp;&amp; EQ.equivalent(this, that); } That would remove like 99% of my remaining casts.
Reflection is slower and harder to use than just a list of lambdas/functional interfaces.
Correct. The questioner wasn't very clear on what they wanted, so I thought I would offer another solution.
`TreeMap` uses `Comparator` because it is an ordered collection, so a total ordering is required for all keys in the map. `HashMap` is unordered. You could always use a derived key value with the required equivalence relation, but I can see why it is annoying the Collections API imposes a single equivalence relation per class, although I've never run into a situation where that's an issue. I like how `IdentityHashMap` has a giant warning telling you not to use it unless you really, really need to.
Programming help should go in **/r/javahelp**. **Removed**
I'd love to see flow based typing in Java, like in Typescript or Ceylon: void foo(Supertype x) { if (x instanceof SubtypeFoo) { x.fooMethod(); } else (x instanceof SubtypeBar) { x.barMethod(); } }
The teacher of that course also has a modern Spring boot course, you can pick and choose parts from that. There's a major difference between learning the basics of a new language compared to becoming skilled in a framework...
It doesn't affect it in any way. Canonical will continue to provide support for 9 months or 5 years, depending on which Ubuntu distribution you install.
As a debugging aid, I suggest that you build jar, then list its contents using "unzip -l", and then you can see what got included in there. It would help figuring out where mvn build puts files. You just have to know that stuff, though, it's the official maven project layout.
The syntax differences are insignificant compared to the API differences. Learning the JDK and other common libraries will be the biggest challenge.
Reddit has a wiki for each subreddit.
Completely disagree. Consider a real life usage of polymorphism. `class Duck implements Animal` `class Horse implements Animal` Should you have a function `equals(Animal, Animal)` that would return true if one was a `Duck` and one was a `Horse`? As Pammy has said above, it would certainly be less surprising to implement a separate function `equivalentTo(Animal, Animal)` for this purpose, rather than expect a builtin `equals` method to equate the two.
&gt; Consider a real life usage of polymorphism When has this ever been a real life example of polymorphism? &gt; Should you have a function equals(Animal, Animal) that would return true if one was a Duck and one was a Horse? Does an equivalence relationship even make sense in this hierarchy? Forget polymorphism, does an equivalence relationship between horses even make sense? You're also missing the point. Why do you define an equivalence relationship at all?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Eclipse build system with incremental compilation is awesome for dev work.
You just install the openjdk build from your distribution. Oracle license doesn't matter at all. Currently upstream support is done by Oracle and Redhat, but you shouldn't worry about that as your distribution should support their Java package as they should support every other package in their repo.
I hope your eyes adapt quickly. &amp;#x200B; For fun, I tried to do some C# 10 years ago. I could not handle capitalized method names. For some dev its a huge issue. I have read some Android code by some C# guys with cap method names. He even wrote in comment he was used to cap method names. Reading the code i got a headache.
I don't mind :) in JS it's lower case as well. Not a big deal.
Yeah Spring and Hibernate seem to be mentioned a lot so will start working with them. Don't mind the casing of function names, I'm used to both.
Current solution: class Point { final int x; final int y; Point(int x, int y) { this.x = x; this.y = y; } @Override public boolean equals(Object other) { if (!(other instanceof Point)) { return false; } Point that = (Point) other; return x == that.x &amp;&amp; y == that.y; } @Override public int hashCode() { return Objects.hash(x, y); } } Proposed solution: class Point { final int x; final int y; Point(int x, int y) { this.x = x; this.y = y; } private static final Equivalence&lt;Point&gt; EQ = Equivalence.of(Point.class, p -&gt; p.x, p -&gt; p.y); @Override public boolean equals(Object other) { return EQ.equivalent(this, other); } @Override public int hashCode() { return EQ.hash(this); } } Difference: 1 line and we still have to maintain the field list. While the proposal idea is good, it doesn't save you much in the way of boilerplate code but instead just moves it around and wraps it a little nicer. I'd rather have a reflection helper like this: @Override public boolean equals(Object other) { // Name should be better, obviously. return Objects.fieldBasedEquals(this, other); } @Override public int hashCode() { return Objects.fieldBasedHash(this); } And then I could hand exclude lists, or even additional conditions to those: @Override public boolean equals(Object other) { // Name should be better, obviously. return Objects.fieldBasedEquals(this, other, new Exclude(Class::x, Class::uninteresting)); } No need to invent a whole new class structure. And I know it's just an example, but can we please stop declaring package-private variables in examples just because it is less to type?
Gradle complicates things a lot. I spent 10 times much in debugging `.gradle` files that writing them. They constantly break API each major version. Better stick with Maven for simplicity unless you understand why you need complexity )) Gradle doesn't magically solve build problems.
How far would you take that List example? If the ArrayList had 5 elements, and you put those same five elements into a double-linked list in the same order, are the two lists equal? What about a Queue? A Skiplist? A Tree?
&gt;Why? A clear counterexample to this assertion is lists. An equivalence relation in OOP is a property on a type. For a thing to be a list, it must have an equivalence relation as defined in the List contract. Define a new list `ArrayList` subtype `MagicList` with some additional state that's visible from the outside. The `equals` method must take the new state into account in order to fulfill its contract, and it must not compare equal to an `ArrayList`. Suppose you have this: List m1 = new MagicList(); List m2 = new MagicList(); List a = new ArrayList(); m1.setMagicState(1); m2.setMagicState(2); Now, `m1.equals(m2)` and `m2.equals(m1)` both return `false`. But if `ArrayList` obeys LSP and uses an `instanceof` test, then `a.equals(m1)` and `a.equals(m2)` must return `true`, so mixing `MagicList` with `ArrayList` breaks not only the symmetric property of `equals`, but also the transitive property, both of which are necessary for an equivalence relation. &gt; The goal is not represent a mathematical relationship, but to share behavior. Equivalence is not a behavior. It is a mathematical property. If you want to be an OO purist and require everything to be defined purely in terms of behavior, you can't define an equivalence relation as a method of the objects you're comparing, and for objects with state that can't be queried, you can't define an equivalence relation *at all*.
Yes, they refer to instances. One of our both english must be super bad. And once again, the type of one is not the same type as tow, and both are subtypes of Numbers ... can't really be so hard to grasp. I already explained several times that they are not "typenames" but that they are instances of their own individual subtype. &gt; claiming that instead they are "types". This is untrue. No I did not claim that, that is what you misunderstood.
Here is where you claim that enums in Java are *not* modelled as consts: &gt; People in our days still insist that members of an Enum are written with all CAPS, like ONE, TWO, THREE, insisting that they are "consts" not understanding that this marker style writing only was used because Java lacked enums, and the closest thing was a static final constant This is incorrect. Enums in Java are absolutely modelled as consts. It's right there in the spec! Check the chapter titled "Enum Constants" ;). And here is where you claim that enum instances are not exposed as static members. And you also appear to claim that "[enum instances] are singleton nested classes" which doesn't even make sense: &gt; Enum instances are not static members of the "enum" class. They are singleton nested classes or singleton subclasses of the enum class. This is untrue, enum constants **are** modelled as static final members. And they are not singleton subclasses unless they declare a body, and normally are just a single shared subclass of `Enum`. In your earlier example they would be instances of the `Numbers` class. &gt; And once again, the type of one is not the same type as tow, and both are subtypes of Numbers ... can't really be so hard to grasp. This is wrong. Yes it's a simply concept to grasp, but it does not reflect reality. I have told you many times that they are only modelled as subtypes when you declare a body. You can confirm this right now in seconds. I just did it myself! I compiled this: public enum Numbers { ONE, TWO, THREE {} } And the only classes outputted by the compiler were `Numbers.class` and `Numbers$1.class`. Because `ONE` and `TWO` are instances of `Numbers`, whereas `THREE` declares a body and so must generate the anonymous class `Numbers$1` of which it is an instance. Exactly like I told you it would work. Why would the compiler generate a bunch of superfluous classes that all share the same state and behaviour?
/r/topmindsofreddit
I have Guava EventBus and Redis PubSub in my messed service, Kafka and MQ is just too overkill and higher initial cost. &amp;#x200B; Guava EventBus run internally, it is very very very easy to implement. \- EventBus classes are Marked @Beta "Might Unstable" quite a while already. \- 0 exception happen in this implementation so far. &amp;#x200B; Redis have capabilities to scale horizontally, service mesh communication, and caught up the "distribution" fashion, also there is only ONE PubSub in ONE Redis Instance, differentiate via channel. Overall: \- Event Pushing ([PubSub](https://redis.io/topics/pubsub)) or Polling ([POP, PUSH, +Blocking](https://redis.io/commands/brpoplpush)) \- Exception always occur when connection pool exhausted, not sure why it can not recover from Thread.setUnhandleException() (HELP Needed) \- Dedicated thread to listening PubSub, logic handlers in another worker pool \- Require 3rd-party tools to debug PubSub message \- In the end design a RESTful-Like internal URI, instead of using "command" \- Consider as Async, and it is broadcasting \- [Essential Features](https://redis.io/documentation), as i said PubSub is just a plus point
Except at 3AM, yesterday, I finally made it run, and it worked like a charm, JavaFX GUI and everything.
&gt; The Oracle OpenJDK will require upgrades every 6 months (or have to pay Oracle). Both staying on the current OpenJDK feature release or on an LTS release require updates at least every 6 months if you want to stay secure. They are just updates of a different nature -- updating to the current feature version is a gradual update path (more gradual than the old model), and updating to "LTS" patches is a non-gradual path (*less* gradual than the old model). So *neither* are the same as the old update model, and *neither* are major releases (Java has switched to "Chrome versioning" where small updates receive a new integer version name). If you think that the feature releases have a significantly higher chance of breaking your application, then [this is incorrect](https://www.reddit.com/r/java/comments/ba79hh/beware_of_computation_in_static_initializer_much/ekb4s3s/). Unless you have a very good reason, stay with the default path of using the current feature version. It's meant to be the overall cheapest update path.
&gt;As a debugging aid, I suggest that you build jar, then list its contents using "unzip -l" as jar files are just renamed zip files, and then you can see what got included in there. It would help figuring out where mvn puts files. If you don't like maven, you can even replace that with manual invocation of javac to build class tree, have jar command put a dummy MANIFEST.MF in, and stick the resources at root of the jar, and you're good to go. (When I started out with Java, I used nothing but a simple shell script to build my projects. Java compilation is really super fast and simple, almost anything goes when you're just starting out. In the end, dependency management of maven was why I updated to it and have stuck with it since.) I turned to maven exactly to avoid doing that! I wanted to be able to publish my project on GitHub and have any random person just be able to download it, run `mvn package` or something and run it. Why can't I do that? &gt;The maven-dependency-plugin will help you get a fully runnable runtime out of your maven project. If you aren't using it yet, I suggest you look it up. You'll get your own target/foobar.jar and all the dependencies neatly placed into some target/lib directory (or whatever you want), so you can then ship all the jars out of your build to target device and have it actually work with just "java -cp 'lib/\*:foobar.jar' so.me.MainClass" style invocation. I'll look it up, but still - why is this whole mess needed to make a portable project consisting of less than then files? &gt;Also make sure that your jre at RPi3 supports JIT compilation. It will be painfully slow if interpreter is all you got. I remember that some OpenJDK did not yet come with ARM support, so I had to install official Oracle JDK to get competitive performance. That was with java 1.8, though, and I'm not sure what the situation is now. My experiment with RPi was too rough on the edges to rely on it; I ended up buying the twice more costly NUC hardware instead for deployment. Oracle JDK has many ARM-focused optimizations and runs fine on the RPi. I'm not sure about OpenJDK, to be honest.
I'd be fine with that since the docs mention it. What I'm not fine with is that other input files, for some reason, don't go in the same directory.
People will not check wiki before posting...
I use sdkman! on Ubuntu to easily instl and switch between different JDK versions and distributions, works like a charm. It offers a wide range to choose from. Usually I get the Hotspot and OpenJ9 AdoptOpenJDK versions.
Kotlin is probably closer to C# than Java. Java is playing catch-up, but because of its legacy and backwards compatibility, it moves at a much slower pace. For instance data classes and auto properties are in Kotlin, not in Java (yet). There is Lombok as a workaround for those missing features.
You say that like they'd check a stickied post :)
Canonical will provide security updates for the JDKs they ship according to their own support policies. If you install your own JDK then you're on your own.
People won't neither check the web nor a sticky post
Does that mean that sdkman doesn't verify the tls certificate?
Do you have any sources on how to control GPIO pins on the rpi with java?
&gt; The equals method must take the new state into account in order to fulfill its contract, and a MagicList must not compare equal to an ArrayList. Then `MagicList` is an improper subtype of `ArrayList`. Simply put, if you design your type to break the equality property of the type you inherit from, there is a price to pay in the LSP violation if you pass `MagicList` anywhere a `List` is expected. &gt; If you want to be an OO purist and require everything to be defined purely in terms of behavior, I'm not talking about encapsulation. I'm talking about how OOP abstractions are defined. Specifically, how a program *behaves*. Equivalence may be defined as a mathematical property in the super type, fine. But that means every subtype *must* have the same mathematical property in order for the program to behave properly. That's what LSP refers to in the *substitutibility* of types. &gt; for objects with state that can't be queried, you can't define an equivalence relation at all. Think about the types which have meaningful equivalence relations: String, List, etc. They are value types, which don't have a "state" that is meaningfully encapsulated by an *identity*. On the hand, the `Number` type doesn't define an equivalence relation, because it includes subtypes with mutable state, like `AtomicInteger` which is mutable and does not define an equivalence relation, unlike `Integer` which does.
I use cmd + up and cmp + down in rapid succession to navigate to the class start. Quite useful when you're working on big classes and need to go tweak the fields.
Class.getResource() uses resources on classpath and the url/path is relative to the class's package. Everything else uses normal filesystem paths.
You should lay on the floor and have a tantrum now. Then give up.
&gt; How far would you take that List example? This really isn't a difficult question. &gt; you put those same five elements into a double-linked list in the same order, are the two lists equal? Does the doubly-linked list implement the `List` interface? Then yes. &gt; What about a Queue? No, because a Queue [does not have a subtype relationship](https://docs.oracle.com/javase/7/docs/api/java/util/Queue.html) with `List`. Since a skiplist and a tree are not a part of the Collections API, I couldn't tell you. But, are they subtypes of `List`? That will answer your question.
Small typo in Ctrl+D: &gt;In my experience, a lot of people are still selecting the line with their mouse, copy it, and then paste it. Ctrl Y is a time saver: just press it and it will duplicate the time. And if you have multiple lines selected, it will copy the whole block. Says Ctrl Y and should be D. Also I'm thinking time should be line. Great list, though. Thanks for putting it together.
You are close, its called the [assembly](https://maven.apache.org/plugins/maven-assembly-plugin/usage.html) plugin. But personally I prefer the [shade](https://maven.apache.org/plugins/maven-shade-plugin/) plugin instead, it does the same thing in a slightly different way. I do feel though that this is a bit of an issue with Maven. Building a fat jar is extremely common these days yet I still need to include a plugin to get that work done. Would it really be so bad if maven provided a `&lt;packaging&gt;assembly-jar&lt;/packaging&gt;` or a `&lt;packaging&gt;shade-jar&lt;/packaging&gt;` configuration and then just configure them using properties? It should be noted that the existing packaging tag already supports a large number of different formats.
http://www.pi4j.com
Thank you, I’m feeling stupid for not googling myself, but I think someone with more experience than me also knows good resources.
TLDR. I can't figure out how to use stuff. Please do it for me.
Yes, but Canonical don't actually have the means to support OpenJDK, so [they do it indirectly](https://www.reddit.com/r/programming/comments/bip6ho/graydon_hoare_on_21_compilers_a_wander_through_a/em4k5z2/). "On your own," here is backed by those who actually maintain OpenJDK, and on whom Canonical, too, relies.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Dig into Analytic Combinatorics. If you prefer visual learning material check this out [https://www.coursera.org/learn/analytic-combinatorics](https://www.coursera.org/learn/analytic-combinatorics)
&gt;Analytic Combinatorics Thank you.
Finally a website which doesn't require account. Thanks!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_m_arathi] [Streaming Java CompletableFutures in Completion Order](https://www.reddit.com/r/u_m_arathi/comments/bj3mwt/streaming_java_completablefutures_in_completion/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
tl;dr: My duties are engineering and coding. Please allow me to do my job.
If I remember correctly in the new 2019.1 release of IntelliJ it will actually ask you if you want CTRL+W to close the current tab or use the other behaviour the first time you press it.
I'm loving the recent development of JVM + native compilation. The JVM is a lovely bit of kit, but sometimes I just want a small-ish executable with no dependencies.
Bad things can always happen. That's not much of a prediction. Say you have two implementations of Key. SymmetricKey and AsymmetricKey. You really think those should be comparable? You want an equivalence relation? Or between supertype Cipher and Subtype NullCipher? Between TestCipher and AES? YAGNI. You should actively discourage users from comparing unlike types. LSP will never be satisfied because supertype.getClass() will never == subtype.getClass(). So the point is moot.
Again. You don't understand your tools. mvn package was never intended to build a fat jar. mvn isn't trying to stop you from doing anything. &amp;#x200B; The title of your post is java sucks. And then you complain about VS Code, which is not java. RTFM.
Said the limp dick bald man.
How it came into play: 1) Identify the signature of the functions I want to store. In this case its functions that take no arguments and returns an int. 2) Look through the list of [functional interfaces](https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html) and find a class that matches the signature. In this case that's `[IntSupplier](https://docs.oracle.com/javase/8/docs/api/java/util/function/IntSupplier.html)`.
&gt; Gradle doesn't magically solve build problems. uh....that was my point, they both are necessary evils. Your assumption one is better than the other is an inherent effect of your lack of reading comprehension (which certainly doesn't help when trying to decipher either build systems docs.)
The title of my post is "the Java environment sucks". Not Java. And VSC was what I complained less about. Learn to read.
Hum... this might be my first real reason to switch to another vendor for my JDK.
&gt; Bad things can always happen. That's not much of a prediction. Bad things can happen when you don't maintain logical consistency in your object model. Obviously that not much of a prediction, it is a statement of fact. &gt; You really think those should be comparable? Why would they be comparable? You haven't specified an object model in which comparing them makes any sense. Do you want to allow storing `Key` instances in a set? Do you want to allow using `Key` instances as keys in a map? If you're never going to do any of those things, and there is no utility in an equivalence relation, why would you define one? In which case, just use the default equivalence relation that comes with `Object`. That trivially satisfies LSP. In ordinary applications, there is usually no point in defining an equivalence relation, until want to take advantage of behavior that requires it, such as useful set membership. Only then implement it. If you're developing a library, then it helps to predict the kinds of usages you expect for your type. For value types, like `String`, it makes sense. In fact, if you're using Lombok, you can put `@Data` on your types and generate a sensible equivalence relation (by the way, using `instanceof`). Most types, like `StringBuilder`, which are "utilities" and not values, it doesn't make sense to define an equivalence relation.
There's nothing illogical about `new Dog("Papillon").equals(new DeadDog("Papillon") == false`. What happens when you call bark() on both of them? LSP must be really mad that such a subtype would exist.
I imagine you didn't build OpenJFX from source to do that. I will guess you either are using an older [unsupported JDK 8](https://www.oracle.com/technetwork/java/javase/jdk-8u33-arm-relnotes-2406696.html) with JavaFX included, or you are using the [armv6hf](https://gluonhq.com/products/javafx/) version. I'm still holding out for an aarch64 build. [I ask](https://www.reddit.com/r/java/comments/b06yk7/announcing_javafx_12/eicu9rm/) every time they make an announcement here :) Glad you got it working. Congrats.
&gt; What happens when you call bark() on both of them? LSP must be really mad that such a subtype would exist. Depends on how you define the object hierarchy. In fact, its exactly the same thing as lists. You could do something as the horrible `List` API that comes with Collections API, where `bark()` throws a runtime `IAmDeadException` on a `DeadDog` instance. Or you could do something sensible like `List` and `MutableList` in Scala or Kotlin, in which case, you would have to ask yourself what behaviors do you want to keep in common between them, and push the different behaviors into the subclasses. Like the `bark()` method doesn't exist on a dead dog.
That's nonsensical because `MutableList` would not have an is-a relationship with `List`. Talk about least astonishment! You would have to rename List to `ImmutableList`. But that's like renaming `Dog` to `LiveDog`. Completely strange and unnecessary. The real world doesn't follow LSP.
&gt; That's nonsensical because MutableList would not have an is-a relationship with List. Why should `MutableList` not be substitutable for a `List`? If `List` provides an immutable interface to list behavior, then passing a `MutableList` interface to a `List` parameter type, the type system is guarantees to the caller that the `MutableList` won't be modified by the callee. That's actually pretty cool. &gt; You would have to rename List to ImmutableList. Why? Kotlin defaults to immutability. &gt; But that's like renaming Dog to LiveDog. No. It depends on the semantics of the object model. Like Kotlin defaults to immutability, whatever this object model is we are discussing can default to living animals. &gt; Completely strange and unnecessary. Only if you do strange things, as you are proposing. &gt; The real world doesn't follow LSP. The real world depends on LSP for polymorphism to be used to write generic code. Such as with the Collections API (not the best example), or Kotlin and Scala (much better examples, which learned from Java's mistakes).
But they are subtypes of Collection. I don't really see why you restrict equality to List, but not Collection.
That's what the API says. But it makes sense. [Lists](https://docs.oracle.com/javase/8/docs/api/java/util/List.html#equals-java.lang.Object-), [maps](https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#equals-java.lang.Object-) and [sets](https://docs.oracle.com/javase/8/docs/api/java/util/Set.html#equals-java.lang.Object-) all define an equivalence property, allowing different implementations of each to be compared. However, `Collection` is a very generic class and defines behaviors at a very high level. The equivalence relation is very specific to the collection type. For example, it doesn't really make sense to compare a set to a list. A list has sequence and duplicate, a set does not.
“Evidently Oracle has chosen not to build Shenandoah. They aren’t doing anything strictly wrong by excluding it, but something doesn’t feel right to me. These builds aren’t supported by Oracle—you need their commercial binaries to get support—so why exclude Shenandoah?” Aren’t they suggesting that their commercial and OpenJDK builds are nearly identical? Don’t see why they would bother offering more options in their OpenJDK.
So how long until the Java community forks openJDK and stops supporting Oracle?
How would that be different than what we already have?
Ah, I see. I forgot that those interfaces define an equivalence relationship in the docs. Now I'm wondering if it should be defined in code somehow. Like a final equals() method on List or something.
The third edition of *Effective Java* was published in 2018 (covers Java 9), and every Java programmer should read it. It's excellent on general principles like dependency injection, but has practically nothing to say on specific enterprise frameworks.
That's all well and good, but Java will never work that way. `List` specifies add and remove. Assuming that subtypes will always have a superset of the supertype's functionality is dangerous and wrong. By the real world I mean the physical world and natural language. Neither follows LSP. The LSP thing sounds like a cult, like "pure" functional programming. The whole point of subclasses is customization. You get to pick and choose what properties to keep, what to override, and what to add. No one will use an inflexible language.
They’re completely identical
You realize that Shenandoah is in the openjdk repo right? Oracle just didn’t use the build flag to include it in their build of openjdk
When the community contribute as HALF as Oracle, then we can start talking about that: &gt;Of the 2,468 JIRA issues marked as fixed in JDK 11, 1,963 were completed by people working for Oracle while 505 were contributed by individual developers and developers working for other organizations.\\ While developers employed by Oracle resolved 80% of the JIRA issues during the development of JDK 11, 20% were fixed by developers working for other organizations. Developers working for the five next largest contributing organizations, SAP (7%), Red Hat (5%), Google (3%), BellSoft (1%) and IBM (1%), collectively fixed 17% of those issues. Independent developers contributed 2% of the fixes in JDK 11. [Source](https://blogs.oracle.com/java-platform-group/building-jdk-11-together).
Possibly a dumb question since I've never used any of this but I've always been curious. What if the function I'm storing in the list both takes in and returns an object I made myself. Would I need to write a supplier class like IntSupplier? Thanks for the info though!
Yeah, exactly. Though, watching redhat and oracle have a spat is pretty entertaining from the peanut gallery.
when you control the repos, you control what gets added. it's that simple.
Or maybe people love to hate Oracle and disregard any positives/look for non-factual arguments just to justify their belief system. This article, if you have read it, supports openness of OpenJDK: &gt;When we [RedHat] first proposed to contribute Shenandoah to OpenJDK, Oracle made it clear that they didn’t want to support it. That’s fair enough: OpenJDK is free software, so you don’t have to support anything you don’t want. We told Oracle that we’d work with them to design a really clean pluggable garbage-collector interface that allows anyone easily to select the garbage collectors to include in their builds. We did that together, and Shenandoah went in to JDK 12.
So who "controls the repos"? There are over a hundred committers to the JDK project, and there's an open, democratic community process for nominating and voting on contributors to become committers. Are they all engaged in a sinister, Oracle-sponsored conspiracy to refuse other people's useful contributions and reimplement them from scratch at Oracle? And how do they manage to keep the conspiracy secret when all the development work is discussed on public mailing lists?
Stock JDK included with latest raspbian.
As far as I know, there isn't really a single resource which covers the diverse aspects in an enterprise setting. If you are looking specifically for books, I would recommend: * Clean Code (for maintainable and readable code) * Effective java (for idiomatic Java) * Gang of Four Design Patterns Book / Head First Design Patterns (whichever style suites you better) * Spring in Action (if everything in the company is running purely on Spring Boot and you don't want to spend too much time on this, the guides that apply to the company on spring.io would suffice)
Here is the list I use: &amp;#x200B; &amp;#x200B; &amp;#x200B; Adopt Open JDK [https://adoptopenjdk.net/](https://adoptopenjdk.net/) [https://github.com/AdoptOpenJDK](https://github.com/AdoptOpenJDK) &amp;#x200B; [https://github.com/ojdkbuild/ojdkbuild](https://github.com/ojdkbuild/ojdkbuild) &amp;#x200B; Open JDK [http://openjdk.java.net/](http://openjdk.java.net/) &amp;#x200B; Azul Systems Zulu [http://www.azul.com/downloads/zulu/](http://www.azul.com/downloads/zulu/) &amp;#x200B; Amazon [https://aws.amazon.com/fr/corretto/](https://aws.amazon.com/fr/corretto/) [https://github.com/corretto](https://github.com/corretto) &amp;#x200B; Eclipse [https://www.eclipse.org/openj9/](https://www.eclipse.org/openj9/) [https://adoptopenjdk.net/releases.html?variant=openjdk11&amp;jvmVariant=openj9](https://adoptopenjdk.net/releases.html?variant=openjdk11&amp;jvmVariant=openj9) [https://github.com/eclipse/openj9](https://github.com/eclipse/openj9) &amp;#x200B; Red Hat [https://developers.redhat.com/products/openjdk/download/](https://developers.redhat.com/products/openjdk/download/) [https://access.redhat.com/articles/1299013](https://access.redhat.com/articles/1299013) &amp;#x200B; SAP [https://github.com/SAP/SapMachine](https://github.com/SAP/SapMachine) &amp;#x200B; BellSoft [https://bell-sw.com/java.html](https://bell-sw.com/java.html) &amp;#x200B; &amp;#x200B; Oracle JDK -- supported for a limited time unless you pay [https://jdk.java.net/11/](https://jdk.java.net/11/) Oracle Binary License Agreement - DANGER Will Robinson! [http://java.oracle.com/](http://java.oracle.com/) &amp;#x200B; &amp;#x200B; See: &amp;#x200B; Time to look beyond Oracle's JDK [https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html](https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html) &amp;#x200B; Java is Still Free 2.0.0 [https://medium.com/@javachampions/java-is-still-free-2-0-0-6b9aa8d6d244](https://medium.com/@javachampions/java-is-still-free-2-0-0-6b9aa8d6d244)
Maven is superior for tooling as fixed model helps IDE to reason about project. Gralde support by IDEs is pure. Healthy project shouldn't use advanced features of build system. What do we need? To convert `.java` to `.class` and package into `.jar`. Every IDE is able to do this. Extra requirements complicate things and break tools by unsupported "smartness".
They are absolutely interchangeable, but not exactly the identical binaries. There are very minor differences that hardly have any practical impact, but suggest that they are built separately with some different options.
&gt; For instance, corretto is optimized for web and cloud solutions. It's nice marketing, but as far as I can tell Corretto just has some backported patches to support Amazon Linux 2 and Amazon doesn't specify how they build it to result in any kind of optimizations.
I agree with the author that it is not wrong but somewhat unfortunate, and this changed my view of these builds. I initially saw them as “the” OpenJDK builds, the canonical ones or at least the default ones. Now I view them as just another vendor build that I might or might not use.
Not a dumb question but quite possibly a lazy one; did you expend any time looking through the list of [functional interfaces](https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html) that I have linked to in each of my previous comments?
I'm not marketing. That's just the information I got from their presentation on it. I did research for our shop to see what we were going to start using.
I'm not saying _you're_ marketing, I just wanted to point out that Amazon's claims of optimization are not substantiated. Not that there's anything wrong with Corretto - it should be drop-in replacement just as Azul, Redhat, AdoptOpenJDK, etc. are.
I hadn't. Was just just reading this thread on my phone while walking. I see Bifunction and whatnot now. Thanks
Yeah, I guess it comes down to having to take care of less things with Loom. No (obvious) cues, schedulers, indirection, event dispatching. Loom's gonna keep that under the hood for you I guess. Also you won't need any additional libraries. So, I've been saying this and that, but it's still kinda early to make concrete statements. It's just my understanding of them using fibers. My guess is, that Loom is gonna take away a couple of usecases from RS, and you won't miss RS that much. I guess RS is going to stay relevant in Android space, since they are still a couple of Java versions behind.
Out of curiosity... $java -version ?
try python.
code in build files = mortal sin.
I'm not one to assume bad faith on Oracle's part (re: Java, anyway), but this is the sort of thing that perpetuates FUD about the licensing change. Kind of tone deaf.
At least 99.9% of the time, avoiding this for performance reasons would be premature optimization.
Another approach is guava-testlib's [EqualsTester](https://static.javadoc.io/com.google.guava/guava-testlib/21.0/com/google/common/testing/EqualsTester.html). Ours still wants the user to provide the examples and thereby assert what should and shouldn't be equal, while the one you link to seems a little more magical (which may or may not be what you want).
In what sense does it fail? It respects array equality the way array equality always works, and you can pass in an extra `Arrays::deepEquivalence` parameter (or whatever it gets called) to get the other behavior. Moral of the story, though: however hard you're working to try to avoid using arrays in your code, keep working harder. :-)
In the meantime, you have to use something like Guava's [`Equivalence.wrap`](https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/Equivalence.html#wrap-S-); the down side is an extra wrapper for every entry, but on the plus side, you're not violating the `Map` contract so you're safer from bugs and confusion.
Note that most of the time you'll probably just use a record. This library will be for the less-common cases where you don't fit the record profile in some way. To me, the value of the proposal lies more in the bug prevention than even the boilerplate savings.
If that's the case then modify this code to compare y byte by byte and hash y byte by byte: class Point { int x; byte[] y; private static final Equivalence&lt;Point&gt; EQ = Equivalence.of(Point.class, p -&gt; p.x, p -&gt; p.y); @Override public boolean equals(Object other) { return EQ.equivalent(this, other); } @Override public int hashCode() { return EQ.hash(this); } } And trying to write a hash function without using arrays is crackhead territory.
We could have that today with flow-sensitive typing if it were only implemented. I'm all for pattern matching, and I look forward to using it for cases that are simple to complex and nested, but I'd prefer if your example didn't *need* a `that`.
I think you're speaking of the \`andThen\` overload that accepts an extra parameter. That parameter is of type \`Equivalence\`, which has methods for both \`equals\` and \`hashCode\`. Does it make more sense now? To me, using an array for a cryptographic hash function still counts as having "worked hard" to avoid it. The benefits are just overwhelming in that kind of case, therefore you are willing to suffer all the pain that arrays cause. If my point was to say "never ever use arrays", then I would have just said that. I'm not sure if I was supposed to be insulted by the "crackhead" and "craziness" comments, but I can pretend to be if it makes you feel better.
Liam intends to avoid boxing as well, or fall back on adding then said \`andThenInt\`-style methods.
I see how it could work for byte arrays, but in any case it will we more complicated and deceptive than the current auto-generated methods. The whole concept almost begs you to pass in an array and expect it to be handled correctly, whereas `array.equals(other.array)` is obviously wrong. This just creates yet another api that people will have to learn, it will be slower, less flexible, and inconsistent with Java's imperative style.
Java FP is sad and needs to be shunned
Wait until you make it work, then you are gonna love it.
What are some tips to make games using Netbeans IDE?
Any idea if [ExecutorCompletionService](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorCompletionService.html) implemented in a similar manner?
True, graalvm native-image is super cool and I am very excited about it. IMHO, the concerns are, 1. Native-image generation can take a very long time, especially for complex projects. 2. No plans to support cross-compilation (like in go) 3. Windows and JDK11+ support (Hopefully this will get resolved soon)
You have to know the difference between reading files from the file system and reading resources from the classpath. By convention maven puts things in src/main/resources on the classpath, if you package into a jar maven will put them in the jar file where they are available to be read from the classpath. This way the exact code works whether running locally in an IDE or running when packaged as a jar. FileReader reads things from the file system, not the classpath. Don’t blame java for your ignorance. This type of knowledge comes with experience in the ecosystem.
With both maven and gradle building is really easy. Not sure why you are having issues.
What do you think maven plugins are? Code in build files.
This is the dumbest thing I have read in a long time.
Enjoy your salad days.
COUNTRY ROADS! TAKE ME HOME!
Not really - it wraps an old-school Java future into it's own wrapper that puts the result in a queue after getting executed - that queue becomes the source of computed values in completion order
Shenandoah is not language feature so it is up to a vendor to include it or not.
Con is reserved filename on windows as far as I know, but Con.class shouldn't be. What will it do?
I would add “Add tests for code you’re going to change”. I can’t count how many times tests have saved my projects during optimization and refactoring
You can't create the file on Windows (without abusing WSL Bash), and you can't compile it using javac. It's possible to create the class itself but it has to be wrapped inside another class.
Programming help should go in /r/javahelp.
Vertx eats node.js in the breakfast
20$
Actually AOT compilers exist for Java since around 2000. The only difference is that you can get them gratis now.
Yes, that should actually be a precondition for any refactoring :) Fortunately, the subject of my refactoring ([Gradle Modules Plugin](https://github.com/java9-modularity/gradle-modules-plugin)) has a pretty extensive [smoke test](https://github.com/java9-modularity/gradle-modules-plugin/blob/master/src/test/java/org/javamodularity/moduleplugin/ModulePluginSmokeTest.java) (not many unit tests, though — and I don't know what's the overall code coverage).
Um what?
Lol... "Hey guys can any of you do this work for me? I'll play dumb when you ask for money"
We've all been there... &amp;#x200B; Unpopular opinion: building software sucks and at times is almost unbearable
it's "really easy" until it isn't
This person has no idea what they are talking about.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bjfy4d/java_vs_kotlin_which_is_the_better_option_for/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Previous discussion: /r/java/comments/bgqnw6/flogger_a_fluent_logging_api_for_java/
Dude yoy shouldn't complain, programming on java cards is where the real pain is located. JavaME isn't as well supported as other platforms. Here with your raspberry pi you are all super confy and fine. Sounds like your just too lazy to check the documentation at this point.
The following books are interesting on the topic: * Spring in Action * Spring Boot in Action * Cloud Native Java
Hi r/java, this is a talk from GOTO Copenhagen 2019 by Rod Johnson, creator of Spring and co-founder and CEO at Atomist. I have pasted in the talk abstract below for a quick overview: Rod will discuss how developing Java applications has changed and simplified over the past 15 years, and what may come next around automation and collaboration. What comes after convention over configuration?
I'm not entirely sold on a fluent API. It's more verbose than the existing APIs. From what I can tell browsing the sources, it doesn't support runtime logging level configuration.
Google usually delivers great additions to languages e.g. Gson, but what is the real gain of yet another logging framework? Handling library imports depending on different implementations of logback, log4j, native util logging is already a pain, there isn't really a need to divide the market share even more. &gt;These improvements include reducing the cost of disabled log statements, increasing overall readability, and allowing extensibility. The only advantage might be the cost of disabled logs, but when profiling disabled log messages have never been the top priority to look for optimization. Readability: logging boilerplate code shall stay as minimalistic as possible. it is used at so many different places and as you have said it is much more verbose. This will bloat up source and no one can tell me that [log.info](https://log.info) isn't as readable and expressive as [log.at](https://log.at)(INFO). Extensibility is largely given at the other frameworks as well.
this guy should learn how to give talks. No slides ... nothing in 2019 ...
Yeah, so which logger is best now? xD
Same thoughts here. It's already a bit irritating how many mainstream lobs exist for such a simple thing. Talking about general logging not niche logging with extra stuff.
The hardest part about logging is separating the log declarations from the actual logging part. Slf4j was a massive step forward in that regard. Log4j2 annoyingly came along and wrote their own interfaces, but that's fine -- it doesn't hurt too bad to since slf4j wasn't really pushing lazy logging (aka \`log.warn("{}", () -&gt; expensive());\` ). I still use slf4j apis myself, but I can understand why someone might want the log4j2 interfaces for that reason. There is no need for a fluent api IMHO. For starters, it's a step back in the direction of separating the logging declaration from the log saving/reading. I guess you could make a fluent set of interfaces, but the api isn't really set in stone yet without years and years of established products using it. Nothing beats \`log.warn("something");\` . I see nothing wrong with wrapping it in your own debounce method if that's what you need... logging frameworks don't need to know how to debounce IMHO.
Your job is to also understand the tools you're using. But I just think you're a troll so it doesn't matter.
Okay, so: 1. they use their bazel instead of community spread gradle/maven 2. they create another logging api, so when some library will use it, we have to include in our project another `fck_google_logger_sl4j_adapter` And this is without real issues with `slf4j`. They should keep fck_google_logger inside google Good job, google! (No)
What we really need is a JEP for a logging interface in Java proper that can be implemented similar to JDBC.
I've created a very thin [Kotlin wrapper](https://github.com/nfrankel/slf4k) on top of SLF4J to allow for laziness. It's a no-brainer to do the same in Java.
I've not worried about performance since SLF4J got placeholder support. I'd like them to get `Supplier` support too.
We don't need another logging framework, please no! Also, with their fluent API (which are overrated) a single line log statement now clutters up the code by adding multiple lines. WTF?
`System.err` ;)
...is this a joke comment?
I will do for 10$
Please, ask programming help questions in /r/javahelp. **Removed**
Thanks, we've used \`NullPointerTester\` from guava-testlib, it was helpful! EqualsVerifier is definitely more 'magical' because it relies on reflection to get the list of fields in the class, but that relieves the test developer from picking the equality groups themselves (which in case of classes with many fields might be difficult to do properly and then review and maintain); it also allows the library to check some other properties (e.g., that all fields are included in the comparison — any such check can be suppressed), and provide brilliant error messages. If EqualsVerifier encounters a field of an unknown type, it will also request to provide two seed values to use, no particular magic here. We've been using EqualsVerifier in a medium-sized project for quite a while and haven't bumped into any issues (except with our equals/hashCode).
&gt; This use of varargs results in additional bytecode, particularly to allocate an Object[] for storing the varargs. While additional bytecode doesn’t typically warrant concern, it becomes particularly important in applications with very fine-grained logging statements or logging statements that occur in loops. Someone will hear this argument working on an internal, 10 user web-application where it isn't an issue. Because pre-mature optimization is route to all fun.
Excel files are just zip files. Decompress the file and use an XML parser on the appropriate files.
&gt;pre-mature optimization is route to all fun Oooh, I've been saying this wrong for years, I guess.
Is [Apache POI](https://poi.apache.org/) restricted to use? Because it is powerfull tool and perfectly fits your needs (parsing xlsx).
Yeah, little fyi, don't just google flogger while at work.. Was not expecting to see stuff about BDSM while searching for Google Framework..
One of the joys of working remotely...
How to Choose a Java Experts syntax error
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Programming help should go in /r/javahelp. **Removed**
i want realy want java 7 release 59 to be exact i need this to be able top controll some IDRACs i have and all later versions of java just say NO you cant run this no matter if i disable as mutch protection as posible but again java disabled that you can turn this off....
any pointer?
Oh thank God another logging framework
Have you benchmarked it or noticed any real difference in usage (that is not placebo) ?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I was hoping to see this too, but to be fair with the OP, i couldn't find any benchmarks of ZGC on the internet. The closest I could find was this: &gt; So how does it perform? Stefan Karlsson and Per Liden gave some preliminary numbers at their Jfokus talk earlier this year. ZGC’s SPECjbb 2015 throughput numbers are roughly comparable with the Parallel GC (which optimises for throughput) but with an average pause time of 1ms and a max of 4ms. This is in contrast to G1 and Parallel who had average pause times in excess of 200ms. https://www.opsian.com/blog/javas-new-zgc-is-very-exciting/ the numbers look good. now, are they achievable? no idea (im still on 8)
Trump supporter lol
No benchmarks sorry, but seems like I'm not the only one feeling it snapper: https://twitter.com/stekarmatrik/status/1123645593476325382
See also: https://dzone.com/articles/java-garbage-collection-3
What in the world? I do not think Trump is in anyway involved in the JDK policy. I doubt he even knows what it is?
Yea but u support trump
First off not that it matter but I do not. Second this is a Java JDK forum. I think you may be confused who you are replying to.
- Excelsior JET - IBM WebSphere Realtime - IBM J9 - IBM JVM for IBM i (former OS/400) - Android since version 5 (although it isn't proper Java) - Aonix (now owned by PTC) - PTC - Aicas - The nowadays abandoned GCJ, since the developers lost interest around 2009, eventually dropped from GCC.
no I am serious. This is talk is not prepared
Throw it on the pile! I'm sure someone will use it.
thanks. I didn't known some of them
This could become a real problem for Java as things may branch further over time. The Java JDK should be a set that means something. If they are all different it will lead to splintering and more confusion.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bjkpyx/need_a_help_with_easy_app/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Nice to see Eclipse able to run on 11! The improvements with using concurrent GCs for IDEs feel real. I have been using 8u + Shenandoah GC with CLion for JVM development and IDEA for regular Java development for a few years now, the pauses are routinely below 5 ms. The downside for non-generational collectors like Shenandoah and ZGC is that sometimes you would spend more CPU cycles doing GC than young-gen STW collector, but in regular use that does not seem to matter. With decently-sized heap, GCs are rare, and when they happen, IDE does not freeze.
&gt; slf4j wasn't really pushing lazy logging (aka `log.warn("{}", () -&gt; expensive());` ). Slowly, slowly. There is [SLF4J-371](https://jira.qos.ch/browse/SLF4J-371) and seems to find its way into v2. But slowly. That issue is years old. I'm totally in for lazy logging, but nothing beats a classic `if (logger.isDebugEnabled()`. Unfortunate placed lambdas might result in unexpected high GC pressure.
So ugly lmao
Logging is a performance issue quite often. I think it's good practice to use cheap logging methods. But I have to say it's a shame that we have to trade convenience for performance because of such low-level details even nowadays.
Just use SLF4J API and include the implementation you like in the classpath. This is doubly true if you are releasing a library.
Nice work on Shenandoah! Congrats! I'm looking to do the same post but for Shenandoah on 12!
Nice work on Shenandoah! Congrats! I'm looking to do the same post but for Shenandoah on 12! https://i.imgur.com/tBOI89A.jpg
Windows is already supported on OpenJDK via jatoc, it just requires the Windows SDK to be installed due to linker support, or do you mean something else? Cross compilation in Go only works with pure Go code without any use of cgo.
Reddit doesn't detect basically-the-same URL if it's http vs https? https://www.reddit.com/r/programming/duplicates/biolxb/how_many_type_parameters_can_a_java_method_have/
lol tdd
..and then a bridge to send logging from that interface to slf4j :) &amp;#x200B; (you do know we've had java.util.logging since jdk 1.4, right?)
It's java.util.logging: https://openjdk.java.net/jeps/264 However slf4j is more commonly used.
People release open-source code all the time that I wouldn't want to use, but I would never argue it's wrong for them to release it, which is what you're doing here.
&gt; do you mean something else? Yeah, for the graal native-image generation support on windows. &gt; Cross compilation in Go only works with pure Go code without any use of cgo Agreed, as they say, cgo is not go. The number of libraries which uses cgo is minimal compared to pure go one. So having this feature is very useful for many applications (especially simple command line tools which use go std library)
On top of that, don't Log4j 2 and SLF4J both have quite some overloads in order to not require varargs and boxing in cases when the number of arguments is small, hence have zero overhead as well? It isn't ideal for the developers of these APIs, but for users there is no performance hit in case the logging is disabled.
I guess this works as well as the search function... /s
it's not in your build file. it's in an extension to your build system. huge difference.
You do know java.util.logging isn't an interface, right? It's a concrete implementation. What would like would be for everything to be an interface where you could provide an implementation similar to how we do it with JDBC using class.forName.
Yea Google really made up for axing Hangouts and Inbox here
see my other reply https://np.reddit.com/r/java/comments/bjfw9a/google_releases_new_java_logging_framework/em9fzf4/
Their [anotomy](https://google.github.io/flogger/anatomy) page provides some information on design decisions, but it certainly made me wondering if vararg array creation is that significant? Can the optimizing compiler avoid allocating the array and pass the arguments on the stack to the log method (if both the callee and the caller are get to be compiled)?
can I create a wrapper for your wrapper?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
+1 for Camel for this use case. Great little framework.
Funny enough, I was working on a system recently where the culprit in their performance issues was indeed generating log statements that they never actually log out. They generated about 5GB/hr of log statements on this system that they kept. I think we estimated it at 20GB/min of garbage that was being created then collected. Needless to say, upgrading to log4j2 and lazy evaluation gave us a massive performance boost, even for a tiny app like ours :)
I believe they do. I was wondering this as I read the story too. Honestly I only log most of the time 1 argument maybe 2 rarely do I log a ton of parameters so this seems like a moot point.
You need a mix. The more black box your tests are, the easier it is for a change to have broken something without your tests noticing. "In theory" testing at the outer layer can test all scenarios, but in practice a lot of stuff falls through the cracks. The opposite is no good either. You can both over specify your implementation and also miss the component interactions. But if you're going to have to cut corners, I'd rather have tests that call the whole stack even if it means things are more opaque.
An extension written in java code. The mere existence of maven plugins shows that builds are in fact not declarative and requires logic/code in most cases.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bjp44m/new_to_java_cant_get_javac_to_work_properly/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Log4j2 already unrolls the args up to about 10. Logging is a common performance bottleneck, and this one results in unnecessary garbage objects without it.
How long until Google drop it again?
Can’t compile user class, log4j4slf4j4log4ffactory missing implxmlparserbuilder
Hopefully not too many libraries will start using this, don’t need yet another logging implementation on the classpath. Inevitably many will because everybody likes to think they have the same problems google has lol
shit i commented before scrolling down to this. this is exactly what I was thinking: will library maintainers start using this thing which can’t be excluded when importing them? I guess we’ll see haha
Am I the only one who thinks the new Flogger code is less readable? Also seems like it may be less performant given the sequence of method invocations...
&gt; if (logger.isDebugEnabled(). Man that's bringing back some nightmare. Worked on some legacy code that was written pre 2010 and every damn debug statement was wrapped with that. I honestly am still confused by it. There wasn't even that many in the entire web application. Like maybe a dozen or so.
It does defer to log4j2 and others so you can use the existing bridges etc to make all logging go to the right place.
It really depends on what app you're building. Is it a simple proof of concept? Then you can let a few bugs slip. Is it some "mission critical" software? Then you better test it the best you can, even if this impacts maintainability. Here's my list of testing strategies, from those that catch the highest amount of bugs to those who help with corner cases and integration. If you want to skip something, start with the bottom of the list: * Unit tests - obviously, you want as many as reasonable * Integration tests between multiple components of the same application - this is where you set up your context * Tests that produce contracts - or contracts that produce tests * External tests for development environment - if it's an API, write tests that send real requests to dev environment, this will catch any connectivity or integration issues you've missed earlier * External tests for stable / prod - preferably manual as testing on production well wihh automation is tricky, they are here to make sure prod works like dev does If you find any bugs, make sure you have a regression test for it. I once had all of the above and although development took some time, we delivered a very robust product for some big players (:
In my team we are doing some unit testing for components that have non-trivial logic (subjective), and we put a lot of emphasis on integration testing (what you mention as component testing). In the latter we automatically spin up local docker containers with full database and messaging implementations and an http mocking server. During a complete packaging build these Ase spin up, the tests run, and then they are spun down. This happens during CI builds too and if they are green, they get deployed to the staging environment, where a smoke test suite runs against the complete environment. We also have a small set of idempotent tests that continuously run on production on well-known data.
Then there is very little to gain versus Java portability.
I beg your pardon. What’s wrong with TDD? :)
I hate static logging
Semi-related, [this slide deck is golden on this topic](https://www.martinfowler.com/articles/microservice-testing/).
It's a buzzword cult that says tests are more important than real code. Only works if God hands you the spec on a stone tablet and tells you to forget about performance and design considerations and focus obsessively on behavior. They want you to go no more than ten minutes at a time without updating your test, rewriting it and forcing it to pass for every incremental change in the interface or behavior
Hijacking this: &gt; "In theory" testing at the outer layer can test all scenarios, but in practice a lot of stuff falls through the cracks. This theory falls apart quite fast too. To cover all the paths in a function you need to poke around with all the variables in the function. For a function with only one parameter and one output, you still often need multiple tests (happy flow, what happens if I input an invalid value, etc.). The more parameters the more tests you need. If you test the entire application at once, which is basically one big function with many parameters, the amount of permutations simply becomes too big to cover. This is why a typical unit test tests more or less all the permutations but integration tests tend to only test happy flows and some common error flows. People who advocate for only writing integration fail to recognise how incredibly hard it is to create good coverage with them.
This is what you get when you hire smart people and have them do trivial stuff. They get bored and start reinventing wheels.
From what I understood, it should be good to be pragmatic. We should be focused on the value the tests add, and don’t make them too strict and pervasive, otherwise for every change we would have to amend tons of tests. It should be a compromise between the time you spend maintaining the tests and the possibility to apply changes that don’t change the behaviour of your system.
&gt;We consider testing our Microservice environment using mostly 'component testing' &amp;#x200B; If you focus on the environment, then it's imo okay. But the intention is more about being sure about application server, libraries/dependencies, OS and so on. We use those to ensure, that when we change our environment, our expected behaviour considering the changed component of our system, is still the same. &amp;#x200B; If that's not the intent of those tests, you add complexity to those tests and more execution time. IMO the goal should be, to validate your software as fast and as early as possible. Executing 1000 tests within 1-2 minutes during build time is just more enjoyable than waiting an hour until your pipeline finished the component tests.
Seems like every software development ideology tries to take human judgement out of the equation. It's the endless development and enforcement of shallow rules instead of the sharing of wisdom. They would be better off going full-time into AI and letting us humans alone. But it's easier to sell a book on tdd than ai.
Tks for sharing HighMaxFx
Why would lambdas cause high GC pressure?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I was just thinking to myself, "Java doesn't have enough logging franeworks." At least we have frameworks to manage logging frameworks.
no but you can google "google flogger" and you get it right ;)
A few thoughts: **(1) Focus on this from the beginning.** When my company first moved from a monolith application to microservices... we had unit testing, and end-to-end tests across multiple microservices that we called "AAT's" or "tracer bullets". Very brittle and flaky, very difficult to maintain. I do think you need *some* tracer bullets to periodically test the health of your system in production, but they are not a substitute for component/integration tests. Multiple teams went through an unpleasant exercise of moving our tracer bullet tests somewhere else, pruning out the ones that weren't necessary, and writing a new integration test layer from scratch. Wish we had started out correctly to begin with. **(2) Locate your integration tests with your code under test.** Maybe you put them under `/src/test`, or maybe you setup a new `/src/integration-test` or `/src/it` source folder (easy to do with Gradle or Maven). But we initially had the thought to put ALL these tests (for all micros) in a dedicated shared library, so they could be run from the micro or from a dedicated "AAT" micro. Unnecessary pain to maintain. Just place your test suites for a repo in that repo. Largely so that you can... **(3) ... make the integration tests part of your build pipeline.** Trying to make tests runs a post-deploy thing was the wrong direction. If you're writing them correctly, they should be zero-dependency and able to run from Jenkins (or whatever), so that the build and deploy doesn't proceed if they fail. **(4) Architect your application to allow for low/zero-dependency testing.** There are a lot of resources available for supplying realistic-yet-fake infrastructure dependencies. You can use an embedded H2 database instead of your real relational database. Spring provided an embedded Kafka instance, so you can test message-driven services without a full Kafka environment being available. There are embedded HTTP servers for testing REST calls. Etc. While these are useful and great, you want to think in terms of how you can test the most stuff without any dependencies. If your micro makes a REST call or consumes a MQ message, separate responsibility so that one piece of code handles the external communication and de-serialization of its payload, and another piece of code actually applies your logic to that de-serialized payload. That way, you can mock or skip over the communication layer to more easily test the real logic. **(5) Use a framework that provides meaningful information to non-developers.** This one might be a little more contentious, but we had complaints from our QA people that they didn't trust the automated testing in our CI/CD pipeline because they didn't really understand what it was testing. If you use something like Cucumber or JBehave, then you can have Gherkin-based test descriptions that are readable (or ever writable) by non-developers, with the devs providing the actual implementations for what Gherkin calls for. Cucumber also provides "pretty" reports and graphs that QA and managers like to look at, making them feel more comfortable with your test coverage.
"With great power comes great responsibility". Before releasing such projects, influencers, should think about impact on industry. At least teach people that this `f(ck_google_)logger` shouldn't be used in libraries, etc.
`java version "1.8.0\_65" Java(TM) SE Runtime ENvironment (build 1.8.0\_65-b17) Java HotSpot(TM) Client VM (build 25.65-b01, mixed mode)`
Premature optimization is route to an application than can run on a modest hardware within single instance and still runs circles around non optimized one that requires a cluster of multicore oomph - servers.
Are you planning to add google code style support for this plugin? (With the IDE's in-built formatter)
Sure, you can visualise almost everything you want visually including the structure of an API. - What exactly is your question?
Depends on who designed the API. If they used RAML or similar there are tools that map it out.
Well, never heard of that one! Thanks for sharing!
APIs should NOT be eligible for copyright protection. That may seem off topic. But if an API is eligible for copyright protection, then any visual representation derived from it is a derivative work under US copyright law. And thus use of the derivative work can lead to a claim of copyright infringement from the copyright holder of the API. Ah, stretching the meaning of copyright just to get ten billion dollars from Google -- no matter the collateral damage. Thy name is Oracle.
It might help if you described the way in which it fails to work. Can it not find the path to the JDK? Does it upchuck an exception? Does it launch but somehow operate incorrectly?
Yes. I came to say the same thing. We had such a shortage of logging frameworks, we can only think Google for helping to fill in the void.
The JDK profile is Red in the profile list in Jcreator. When going to compile it tells me: --------------------Configuration: Test2 - JDK version -12.0.1 &lt;Default&gt; - &lt;Default&gt;-------------------- Exception in thread "main" java.nio.file.InvalidPathException: Trailing char &lt; &gt; at index 13: src_test2.txt at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:191) at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153) at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77) at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92) at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:229) at java.base/java.nio.file.Path.of(Path.java:147) at java.base/java.nio.file.Paths.get(Paths.java:69) at jdk.compiler/com.sun.tools.javac.main.CommandLine.loadCmdFile(CommandLine.java:129) at jdk.compiler/com.sun.tools.javac.main.CommandLine.appendParsedCommandArgs(CommandLine.java:72) at jdk.compiler/com.sun.tools.javac.main.CommandLine.parse(CommandLine.java:103) at jdk.compiler/com.sun.tools.javac.main.CommandLine.parse(CommandLine.java:124) at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:215) at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:170) at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:57) at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:43) Process completed.
r/lostredditors
Where? I only see the inheritance chain at the beginning at https://docs.oracle.com/javase/7/docs/api/ What I want to see is a visual diagram with squares in a more visual way to see the big picture. Of course you cannot represent that in 2D and it would take a lot of work... Just asking...
Swagger/OpenAPI automatically generates REST API docs and interactive HTTP requests etc. Not sure if there’s a tool to auto-generate a structure visually like you mention. Might be worth searching GitHub in case someone else has solved it
Imagine a 3D representation of all clases where each class is a box and there are links to represent inheritance and even methods are written inside each box (or you can just deploy by right-clicking). And you can also see to what subpackage belongs each class with some kind of "color atmosphere" and same for packages grouping subpackages... It sounds insane but I would love to see that interactive representantion.
I don't know if there is a visualisation of the Java API. - I was confused because API is a generic term and simply means Application Programming Interface, and a lot of things qualify as API. What type of information to you hope to get from a visual representation that you cannot get from reading the docs itself?
JEP 264 is ‘System.Logger‘, not ‘java.util.logging‘. It’s basically a logging façade that can easily be configured to use another logging back end. The primary uses are from within the JDK itself, though I suppose applications or libraries could use it if they don’t want to have a dependency on an external logging façade.
Cool! I've been stuck on Java 8 too long. :(
Google has a responsibility to prevent third parties from writing code you don't like just so you don't accidentally use it as a dependency? It's a logging library FFS, not radioactive waste.
Haven't seen anything with REST. But GraphQL can be represented like a class diagram with Voyager. I found it cool with relationships between your queries(alternative to endpoints) and data structure(DTOs). Would be good to come up with a similar controller to represents the Restful APIs
Yes, there's things like [yDoc](https://www.yworks.com/products/ydoc) that provide a javadoc plugin, aka a "doclet". There's also JGraphT if you are looking for general purpose graphing.
A different perspective tends to bring new knowledge/comprehension.
I think the jdk disk structure changed too much after java 9+ so tools need to be updated to support jdk after version 8.
Take a look at the open api specification
Swagger-ui
Old, but looks newer than I expected. Thanks for checking.
https://www.youtube.com/watch?v=x6y14yAJ9rY might be helpful to get a base to stand on I guess
Hey Reddit, I worked quite a bit on Flogger's API and am partly responsible for the decision to open-source it. Inside Google, this is the canonical logging API, with hundreds of thousands of usages. For us, it's been successful at its goals (making disabled messages effectively free; high performance generally; accommodating cross-cutting features without massive combinatorial blowup; API-extensibility; and preventing common bug patterns). And our developers seem to be quite happy with it. I hear clearly how much everyone here would like there to not even BE another Java logging API. So then imagine for a moment how much we didn't want to WRITE another logging API! You can believe it was greater; engineers don't enjoy writing code, we enjoy solving real problems. Unfortunately, we couldn't convince ourselves we would get the benefits we needed from any existing API. So we put a lot of work into this, and again, for us it's paid off. I can also hear that many of you don't like fluent APIs. Well, we actually don't "like" them either, so we evaluate designs based on their concrete benefits and drawbacks. To our surprise, we found that a fluent design directly contributed to all five of the goals I listed above. I had the opportunity to prevent its open-source release. I couldn't think of any logical reason to block it, and I still can't. It works great for us, and we're letting you use it too if you want to, and we're not asking for anything in return. If anything gave us pause it's that we knew the community would mock us for adding another logging API to the mix. Avoiding ridicule just didn't seem like enough of a reason. Flogger's benefits might or might not be things you need, and we assume you won't use it if they aren't. But we thought you should be able to decide that for yourselves. Happy to answer questions.
What have you already tried? What did your searches for a solution turn up and did any of those solutions change the outcome?
I googled searched the problem but I'm only receiving answers for android and jdk 1.8
We do not need another logging framework.
There was a serious conversation once about changing the name, but we opted for a sense of adventure.
problem solved, just had to right click and select fix all errors
You can start at r/learnjava :)
What I would love is such a thing where methods are represented by small little spheres, grouped by their classes, classes group by their packages, etc, and everything kind of transparentish and you watch it while the system runs and as a thread passes through a method, the method sphere flashes. And so you can sit and watch your code as if it's a brain watching the messages get sent around, connections get formed each time the thread passes from one method to another, and they get thicker the more used, etc. And you can see your app as a sort of brain.
Help the next person who comes along with the same issue. First - Don't post images of error messages. Where practical list the exact text of the error so it shows up when someone else has the same problem and can find your thread and the solution! &gt;The original error was "No IDEA annotations attached to the JDK 11 (C:\\Program Files\\Java\\jdk-11.0.3), some issues will not be found." &amp;#x200B; Second - You said you right clicked and selected "Fix all errors". What did you right click on? I'm not trying to be mean to you here, I am making these suggestions so that you can get faster answers to your questions and also help the next person who has the same problem.
Do you mean something like [this](http://www.java2uml.com) ?
That is called a class diagram. I don’t know about 3D and color atmosohere though. I’m pretty sure IntelliJ has built in functionality to draw basic class diagrams.
Maybe, but 3D, with packages included.
You get my point.
Lol, 3D programming allowed by VR. Very interesting future. Instead of usign 2D tabs and a little window to see a tiny fraction of code, to see everything condensed, the big picture. Who knows if this is the future, but it looks amazing.
&gt; Is it possible to represent API in a visual way like a Diagram/Chart/MentalMap/Tree? yes it is possible.
Thanks for stepping in. I'm interested in knowing why you just didn't write a simple wrapper above SLF4J (or directly use Log4J 2). This is a no-brainer, it takes no time and it gives you essentially free disabled messages.
Nice. Somebody actually answered my question.
glad i could help
Why are you using JCreator? as you noted the product has not been updated. IntelliJ, Eclipse, Netbeans and even Sublime are effective replacements.
Honestly, and no offense here, seems to me like OP doesn't really understand most of these concepts they're talking about...especially APIs...
I was a huge EMACS fan in college. You do not need to know EMACS. The only reason to learn VIM is that it is included in every *nix distro so if you ever need to edit text files in the command line, with no GUI, it might be useful. I would not use it for Java. For doing Java as a professional programmer, it behooves you to use an IDE like Eclipse. For learning Java, a simple text editor like Gedit or Plume is actually better. That will force you to learn how to compile and run Java classes with command on the command line, as well as how a few other basic things. A basic, GUI based, easy text editor is fine for the examples you will need to code in the process of learning Java.
Coding in Java or C# without an IDE is a really bad idea
It depends on what you're gonna do. It doesn't make sense to boot up a resource hungry IDE to write single classes with &lt;100 lines of code. On the other hand, it's probably a bad idea to develop a bigger project in a text editor.
Work long enough with something, and you will realize that these visualization crutches are getting in the way more than they're helping. Don't look at something, [grok](http://catb.org/jargon/html/G/grok.html) it.
Desktop applications are frequently built in Java. Useful for big data processing and AI/ML.
If you use Mac a lot, vim is pretty useful when you just want to write some short programs to see if a certain algorithm works the way you want it to, or your computer has too low of a battery but you still urgently need to work on something. Writing long programs in vim is pain though (especially for Java).
I do grok with the universe thanks to shrooms and meditation.
I don't really know how to engage with "why didn't you just X, it works" questions. I explained flogger's benefits; it would be been hard or impossible to achieve them in the way you describe. Our goal was to get our company's gigantic codebase unified behind a single choice of logging API, and we did what we had to do to achieve that. We think the result is pretty good, but if your alternatives seem just as good to you, then maybe you don't need Flogger.
You are right in the Java doesn’t really prevail or own the market share of any of those areas. But java does all of those things. If you are an enterprise looking for a tech stack, java is a good fit because it can do anything. So if you hire good java devs, your enterprise can handle all of its own development needs. And then if one use case rises as a critical need, you supplement your stack with additional frameworks/languages. But from a cost perspective, java is one of the best for an enterprise. Same with C#.
Long. Running. Processes. So none of these. Sure, there are faster languages to develop in and get something running, but they *aren't* seeing the actual systems performance benefits. Your best places are usually doing long running batch jobs, server-side software, and that kind of thing.
The real answer.
So why isn't your post titled "VSC" sucks? Learn to have a consistent message.
Honestly had no idea JSF was still in development. I thought they had axed it years ago.
Ok, let's be blunt here: If you want to earn money with software development, forget about all the sexy stuff. You will be like everyone else and you will be developing corporate web applications. You will be developing them in the language prescribed you by the company you work for, and in all likelihood that is going to be Java. The fact that you cannot "see a place for Java" is nothing to do with Java, but is monstly your limited vision.
I am old-fashioned and learned to code Java with a text editor and a command line. I also think that every developer worth his/her salt should be able to do that. And then discard that nonsense, and use an IDE, if for no other reason that real applications contain hundreds, if not thousands, of files and managing those using regular file system tools is just too time consuming
Solidity is garbage. Only reason Java blockchain clients are slower is because they are unoptimized, because they have had less development because developers care more about new/sexy than results. &gt;quicker development time For toy programs, proofs on concept, sure. Not for anything large
 http://www.class-visualizer.net/overview.html
That is nice looking... But who would choose JSF in this day and age?
What would you choose for a business web app?
Using both Gedit and Pluma. Both work great. Have syntax highlighting and everything.
If a potential developer mentions taking pride in not using an IDE, I immediately lose interest. It matters more that you can work efficiently with a team, than do things your own preferred way because of pride.
A RESTful architecture with a JavaScript framework for the UI (Angular, React, VueJS, etc.)
Sounds lime you're doing it wrong.
Is kotlin 'faster to develop in'? Enough to matter? Are other web dev frameworks? &amp;#x200B; I have yet to see any scenario where 2 companies are facing off, both peddling a highly similar product, and the company that wasn't using java, but something 'faster to develop in', won due to that being a competitive advantage. &amp;#x200B; Perhaps the conclusion is: Either java is not 'slower to develop in', or if it is, it doesn't matter. &amp;#x200B; In the mean time, java has tons of libraries, it's easy to find programmers or help, there are many examples, as a language it is proven, and the community is solid, and prefers things like 'lets not break existing code because not every actively used program out there still has a dev team that's upgrading to the new nightly version of every library they use'. &amp;#x200B; The point is: You can write that backend code in kotlin, java, C#, python, and many other languages, and it'll all be \_fine\_, the difficulty is setting up a solid team, finding the right deps to ease development, setting up a good toolchain (with CI integration and all that jazz), and most of all, boiling the market / problem down to a good application or library to serve it. Of all these difficulties, 'oh no I have to type a few semicolons' doesn't appear to rate as relevant in any way or form. &amp;#x200B; For desktop dev, AI dev, game dev: I strongly advise picking a toolchain (including language) that is a popular choice amongst the community, and in these communities, java isn't particularly popular. So, yeah, think twice before picking java for such projects. &amp;#x200B; But, as a counterpoint: The most successful game by many metrics is minecraft, written entirely in java. Which further goes to prove my point, perhaps. The hard bit is thinking of a good game and being a skilled programmer capable to bring the idea to fruition. Language is a distant also-ran aspect.
If I can bring another example to the fray: &amp;#x200B; In twitter's early days, they told everybody that wanted to listen that using ruby on rails gave them the development speed to get something up quickly and turn it into a success. Which may well be true, but the fail whale was a very common sight. Twitter decided there was no way to fix the system they had, so they started over from scratch, and chose scala for the job. &amp;#x200B; With twitter's rise, so did scala rise. Twitter runs (ran / initiated and supported) BASE, a recurring meetup for scala programmers, and gave it legitimacy. In a relatively short period of time, twitter switched to this new system and the fail whale turned into a very rare sight. &amp;#x200B; That was, what, 10 years ago? &amp;#x200B; Twitter has 400+ developers in-house if sites like techcrunch are to be believed, and what have they delivered in those 4000 manyears? The clients they bought from solitary capable programmers (like tweety, written by just Loren Brichter) – so clearly not that. &amp;#x200B; Entirely anecdotal evidence, but clearly, if this team chose to rewrite twitter in java instead 10 years ago and stuck with it all that time, twitter would be.... pretty much in precisely the same spot now, no doubt. &amp;#x200B; Also scala kinda died. If anything twitter'd probably be in a \_better\_ position today. But probably not in a way that really matters.
I don't do it at all, just like i don't do headstands
Anything but JSF
You can put a JSF presentation layer on top of a RESTful architecture as well.
You could, but more people know react, angular and veu. Also these frameworks are actively developed and supported by big companies so both of those arguments adds up to better future proofing. IMO
That’s an interesting idea actually. Might start mocking something like this up this weekend.
&gt; Does it make any sense to use Java without an IDE? No. Use an IDE. Eclipse is free and widely used.
OK, it was weird you talk about RESTful architecture because we are comparing presentation frameworks (or specifications). JSF is part of JEE specifications and exists since 2004 (but it was not so good back in these days...). You should be less confident with "Big companies". I remember Dart or AngularJS... Talking about primefaces and React/Angular, you can also use their Angular/React components (PrimeNG and PrimeReact).
Ah yes, "blockchain development," one of the six pillars of software.
So is runescape
While PHP is famous for spaghetti code, Java has a tendency towards “lasagna” code. Layers and layers of unnecessary code. Refactoring lasagna code is very easy with IDE’s and such a pain in the ass without it makes you refactor the unnecessary layers out. I personally never use IDE’s as I feel they don’t encourage discipline and good coding style. I do use emacs with JDEE though.
Plenty of Fortune 500 corporations.
try this http://www.java2uml.com/ only works with up to 20 files so far but it's effing great.
There are still plenty of Fortune 500 corporations using JEE containers.
I feel like many developers forgot why `slf4j` was invented, history recur
Short answer: no Long answer: noooooooooooo I'm a long time developer and vim lover, but sometimes you just have to admit that there's a better tool for the job. For Java, honestly, _nothing_ compares to a modern IDE.
Hehe, thank you. I see that in the case of Java the common opinion is very clear (an what I expected). It is interesting to me, how different language communities have different opinions. I ask the same question on r/cpp and for C++ Vim/Emacs has many followers. Java was built with tooling in mind and the whole community is built around that. I like it.
Thanks. So you say that I rather should replace my text-editor instead my IDE?
Thank you. As I started to read your post, I thought you would recommend using an IDE later. Does your whole them follow this approach (it is not bad imho)? Does JDEE provide some automated refactorings, that are actually usable?
Thank you. I agree and I would never recommend a newbie learning Java in Emacs. I can't imagine the cognitive overhead
Thank you. It is a wise way to go
Not in general, but unfortunately placed. A lambda, if it captures variables, will create a new object, which is bad for the GC. E.g. this in pseudo code for (int i=0; i&lt; 10000; i++) { log.debug("{}", () -&gt; i); } will create always 10000 objects, regardless if the debug is enabled or not. A better approach would be here to use the classic `if (logger.isDebugEnabled())` which would then only create those objects if debug is enabled.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bk5jug/question_about_this_output/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;that's bringing back some nightmare. Worked on some legacy code that was written **pre 2010** Sweet. Spoiler: In some, not too far future a guy will sit on the code you wrote today and will have very similar sentiments towards it. That guy might even be you.
It’s a case by case situation. For a corporate site, why not. For a consumer one, which theoretically aims to a broader audience, definitely arguably, since with a JS client one should achieve more performance.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bk5r0e/spring_vs_hibernate/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Does it make sense to develop Java without the features of an IDE? Not really. Incremental compilation, completion, docs, refactoring, navigation, finding references etc. are all such useful features when dealing with any large project that it just doesn't make sense to give those up. Having said that you will find quite a few people working on things where IDEs have not worked well (for example on the standard library or the language itself) and they will often use emacs or vi. Also Eclim (which turned Eclipse into a headless server which could then communicate with an editor) and now [language server protocol](https://microsoft.github.io/language-server-protocol/) have completely changed the game. I now use lsp-mode in emacs for my day to day work on a very large project and it's working extremely well for me, especially as I can use the same editor and interface for multiple languages. If I'd started out using IntelliJ then I'd probably try and do everything in that, but since I've been using emacs for 25 years it's nice have the features of an IDE in there.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Here are some companies that do most/much of their work in Java: Amazon, Google, Netflix, Apple, eBay, Twitter (not to mention your bank, your power company, and your airport -- much of the software we rely on in the day to day is written in Java). Java shines on the backend, where it's a true leader. Also, forget about Blockchain.
They're all orthogonal, so yes, they work combined. From my poor experience. TDD is most widely adopted and you can do it on your own regardless what the rest of the team does. Personally I highly recommend DDD, but this works only if the whole team is invested as well. BDD I tried a few times on my own, but professionally I didn't see that yet. It shines when the PM is writing the stories in Gerkin and you would provide the tests for that. I don't see that happen without too much overhead.
That’s my question. I wonder if someone practically used them combined.
We're not using Java at work, but yes! TDD is basically a core part of our work style, we can't work without it. BDD, we have flavours of it, but we're not using it in a "classical" sense. DDD, not consciously.
I have used them in a previous job and, combined with hexagonal architecture (ports and adapters), it is my preferred way of working. BDD or more specifically Specification by Example really helps connect software development, the Agile process and the XP idea of building quality in.
I employ TDD myself, especially when fixing bugs. I write a test that fails (and therefore verifies the existence of the bug) and then adjust the code until all tests pass again. In my previous project we employed BDD approach to our project. It really helped to flesh out the features properly before we started developing and it was always pretty clear what we are doing and what we are supposed to accomplish. In my current, non-BDD project, it's not always clear what we are trying to accomplish or what is "done". I've tried to steer the team's way of working toward BDD, with little luck.
Well, we have and do to some extent. I'm not an expert though. The way I see it, you might have better time seeing all of those as collections of separate good (and probably bad) ideas. Take what seems advantageous for you and your team and skip the rest. I think it's safe to say that whatever you do, do not consider any of them as a stone tablet type word of god law :). In my experience, and this is very subjective, there is much utopia in these methodologies. But then again, there's a lot of good things that you can apply to your work. In the end it ultimately depends on the project and the people doing it.
Because, as I just stated, the problem is not VSC but the Java building environment, and I didn't complain about VSC at all. You still haven't signed up for that reading course, have you?
I'd actually say the opposite: newbies are perhaps the *only* people who should be coding Java in Emacs. At least, this is how I prefer to do things myself. If I'm learning a new language, I'll always start off with a text editor rather than an IDE and set up a manual build process, just so I can gain an understanding of the nuts and bolts. Of course, once you want to start doing real work you should switch to an IDE. But I think it's important to try things out by hand first, so you have some understanding of what the IDE's doing for you and know how to fix things when (inevitably) something breaks.
Is aspectJ still a thing people might use for something like this? Or is it all Spring AOP now?
I was not clear. I agree with you, but I would rather use sublime text or geany instead of emacs.
I pray for your QA engineers and anyone else that might have to work on your code base.
I use BDD/DDD approach in work. TDD is not easy to apply to real dev process because requirements are changed a lot than people think. DDD with XP is a great approach in most work. Not only for development. For clean code, communication, writing docs and dev speed as well. Actually, DDD is not a methology, it is a thought to integreate all of the things which produced in dev process from planning of a product. But, one thing hard to make is that the team should know what is domain and ubiquotous language. A developer should lead the dev culture for DDD. I always try to share what is DDD, pros and cons for a good result in work.
To paraphrase a colleague of mine: Why don't you just don't? On a serious note, I guess this is acceptable because the Java syntax is quite strict, so whenever a type is expected you normally never get a variable and also not the other way round. Though I have to question whether softening the rules is going to help with the (perceived?) shortage of keywords which can be used. Are there really going to be so many new keywords in the future? Additionally, I'm sure that a few people will come up and argue that they also want to use these characters in class and variable names... &gt; A future version of this JEP may suggest notions of compound keywords other than hyphenated keywords, such as keywords joined with + or : delimiters. As the JEP itself notes, this all might lead to ambiguity which might be hard to sort out. Even though many people complain that Java is verbose, I'd argue that *that* is one of its strength. If you increase complexity of a language, you decrease maintainability to a certain degree, and when I'm looking at what Java is being used for all around the world, we already have too little maintainability.
I wrote java in emacs for 10+ years, because I disliked eclipse. It was rather slow on my machines. I bought a new machine with a quadcore and 16gb of ram and eclipse became somewhat usable. Still use emacs, when possible.
Kotlin uses a mix of "hard" keywords and soft keywords/modifiers that are only treated as keywords in certain contexts, outside of which they can be used as identifiers. https://kotlinlang.org/docs/reference/keyword-reference.html
there is no single javascript framework ok for an enterprise project. Usually lifespan of an enterprise application is 8 years the minimal is 6, there is no JS framework that have survived that long, that is why people still use JSF
Yes, that was mentioned in the proposal and has been used in the past. That solution is not great for IDEs or compilers. As stated, though, it is a tool in the toolbox.
I have the same luck with TDD in my new Team, as you have with BDD. I had to write new Service, and i wrote it TDD style in pair working with an Colegue. Test first, no compromisses. It is only Service we have (from 23) that has "okayisch" test coverage (about75%) The rest is about 0-10% After 3 Months i just gave up ... i still work TDD style, but the rest rolls with "yeah, we know we have no tests..." The resistance was to big .. kinda sad ... kinda sucks ...
No one knows what the future holds. This proposal opens up the door for future features that may feel the need to add a new keyword.
All three of the major IDEs are free, Eclipse, NetBeans and IntelliJ Community. IntelliJ Ultimate isn't extortionate if you're working full time in Java. I'd possibly even add VSCode to the list.
I tend to find myself using vim and my ide about 50/50 for editting `pom.xml` but I hardly ever edit Java in vim.
In particular, this is how we got `var`. It's not a reserved keyword, but a reserved type. And we only got away with it because starting a type with a lower case is universally considered "icky".
Yep! It was a clever implementation.
Way too many people today are overly dependent on their IDE and have lost the ability to truly understand the code they are writing. Look around you and point out the folks with the greatest skill at debugging a misbehaving system. Are they able to do that by logging into a server, firing up VI or Emacs, reading log files with stack traces or do they have to use an IDE and spend time trying to get networking team to ease segmentation rules between prod and development space so they can figure out how to remote debug the server because the current issue only happens in production? There is nothing wrong with team standards for using an IDE but your attitude towards someone who is comfortable without that crutch is one I would not want to work with. It is highly likely you're passing on some very skilled developers who truly understand how to write code and how the systems work. I literally had a long time friend headhunter reach out to me about a year ago asking for help in figuring out how to hire developers that could work without an IDE because the space he was helping recruit for had requirements to be able to work on code through an SSH connection to remote boxes and they couldn't tunnel an X session. Additionally the environment had strict controls on what could be pulled into a project and the default project files created by most IDEs added stuff they needed to be removed. He eventually found some old greyhairs like me who could do the job.
What is the relation with java?
With Java you have reasonable execution time ( 20% slower than C/C++) with a faster development time than C/C++. Therefore, if you want to quickly have good performance/maintanability this is a good choice. If you don't care about performance and have a small program to write then you can try Python.
I've wanted something similar to this as well, where you can watch a piece of data flow through sort of how you described. One thing I have found that is almost like this is an IntelliJ plugin called Flow. You start it up with your program (for my job, it starts up with my jboss application server) and then you tell it to start recording when you want to, then perform whatever process you want, stop it and you are presented a pretty awesome view of what all classes and methods were called during whatever you just did. It shows them in a timeline-type view and will show what called what, etc. You don't see any of the data that flows through but it is still super helpful, especially on huge projects that you didn't fully design yourself and need to find where each thing is being used when and by what.
Awesome!
An IDE doesn't program for you it just makes you more productive. Of course you can type in every single character but an IDE will save you over 90% of keystrokes and every single one of those not only takes time but it is also a potential source of mistakes. Especially with java and all that boilerplate and ceremony that comes with it.
We are using none of them. And I think thats a good thing, I don't think TDD, BDD or DDD are at all beneficial.
When isn't it possible for you?
Should or does? Do you have any benchmarks or other figures to objectively compare performance?
 I use VScode for everything where I don't use an IDE. Simple Syntax highlighting alone will save you an incredible amount of time.
&gt;where I don't use an IDE. Simple Syntax highlighting alone will save you an incredible amount of the same goes for me these days. But with enough plugins you can argue, that VSC is (nearly) an IDE these days
Even if it's a small class booting up IntelliJ is worth it after like 10 lines of code. Autocompleted code not only takes less time to write but it also doesn't contain any typos.
Your choice of IDE doesn’t determine your skills as a software developer. All of my team can program on vi and have had to do that in locked down environments. The ones that choose to work without an IDE when it is available don’t make it very far.
Yeah but Intellij is still an order of magnitude better when it comes to working with a lot of classes and so on. But for quickly editing code of just one file VSC is better with it's fast startup and things like Multicursor and so on. I would still get a basic knowledge of vim because sometimes you just want to edit things in a terminal and vim is installed erverywhere. But thats only a matter of hours and I wouldn't focus on it too much.
lol
In most of my career, each developer was allowed to work in the way that best suited them. JDEE does a lot but mostly what I use it for is the auto-code generation (Wizards) and debugging small modules.
Thanks for praying for me https://github.com/esaulpaugh/headlong/
We're sometimes developing algorithms where the computer needs to make a good guess or decision depending on input data. I can't say what exactly, but it's similar to guessing a person's gender based on the name for example. In such cases we first design a very simple and crude algorithm, collect cases where it gives a good/bad result and then write test cases for the cases where we manually check/determine the correct result. Then we tweak the algorithm until all the tests are green or at least as many as possible. (Sometimes it's impossible to get the right result as the input data is limited or ambiguous). Obvious we write tests for everything else, too, but mostly after the fact, so not really TDD.
completely 100% agree, specially when learning - its good to know the ins and outs of java files, packages, classpath, compilation, etc &amp;#x200B; and them, once you know it all, throw it all away for a real IDE for real life
And yet it works and people can make quite a good living off it.
I think a lot of people forget that you can do HTML5 applications with JSF.
There are a lot of factors to consider. The main one is that usually one deploys the backend on an host, the static js app is usually served by another host (ngnix mostly). In this situation the static requests are made to a separate server, this should lead to the backend (a rest api?!) just managing the http requests, hence faster. TLDR: industry is going (gone) there, especially for high scalable sites/app.
I think that abandoning immediately the javax namespace and move to the jakarta namespace would be the best thing for everyone. Otherwise there will be confusion forever about wich package to import. I would even create maven packages to backport the jakarta namespace to Java EE 7 and 6 .
Please explain.
What does this have to do with the new `switch` expressions? Aren't they reusing the `switch` keyword?
For building enterprise applications (which are often crud based), you are more productive with JSF than the Javascript frameworks.
\&gt; Are there really going to be so many new keywords in the future? &amp;#x200B; Yes.. no.. who knows? &amp;#x200B; That's not the point. The point is twofold: \[1\] How many new features will be introduced in java in the future, and \[2\] How often will it feel awkard that you can't introduce a new keyword as part of the syntax for this feature because that wouldn't be backwards compatible? &amp;#x200B; Presumably the answer is: \[1\] Very many, and \[2\] often. &amp;#x200B; Without this draft JEP, then the very many new features which will often feel a bit awkard due to not being able to introduce a keyword will just have to make do, and find a way to make it work without any keywords (which will presumably be less readable syntax, lead to a language where syntax errors result in esoteric and usually wrong error messages (like scala!)), or if truly it requires a keyword, a compiler/parser architecture which becomes a spaghetti mess of weird exceptions for keywords which are sometimes supposed to be identifiers.
They want to use `break-with x` instead of `break x` to break with a value.
They couldn't just use `return` or something? Or really, what's wrong with `break x`?
Do you intend to support the v4 graph api?
Weird flex but okay.
Android development as an example. Ok, in theory I could call all the android tools from commandline, but I'm too old and lazy to do this. &amp;#x200B; Mixed language projects is my next example: I have a project, in which I code a crypto exchange in C++ and a trade app in Java, and eclipse handles this really great, as I have to admit. I can start the server and the desktop app from within eclipse, can trade and see all the debugging output from both components in eclipse. That is really convenient.
It can be confused with `break label_name;`.
Oh man I had no idea that was even a thing. That's a really useful feature. All these years I've been breaking out of nested loops totally wrong.
The front page for the project says [exactly why](https://github.com/google/flogger#yet-another-logging-api) Google felt a new API was necessary, and they wrote a [detailed comparison](https://google.github.io/flogger/anatomy.html) of how and why flogger is different from other common APIs (note: plural) like slf4j. It's almost like they know exactly why slf4j was invented have used experience gained over the last 14 years to learn from its mistakes.
Labels are allowed, but `goto` is not. It is a keyword, though.
Not for github, but for other graphql API's I've used the graphql android tools to generate java clients that specifically lined up with the queries I was using - it's a pretty slick workflow. Basically you put the queries you are going to run in a file, then have it generate the types / client code to use them. [https://github.com/apollographql/apollo-android](https://github.com/apollographql/apollo-android) Don't let the "android" part of it throw you off - it works quite well with normal java
It has its advantages, but disadvantages too. Doing multiple REST requests from a JS file on the client can lead to more overhead vs doing an (AJAX) requests that on the backend does multiple server 2 server requests and blasts everything in one go to the client. Serverside frameworks can be lighter on the client too, as the predominantly server ready to render HTML.
Weird neg but okay
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Is there a comparison between this and Intellj?
And the reason why these companies use Java is not because it is sexy, but because it has longevity and a good ecosystem. If you construct something right in Java (or most JVM languages), you wont have to rewrite it for a long time, and you will have plenty of mature libraries to choose from.
This is not about the Eclipse IDE, but the OpenJ9 JRE maintained by Eclipse Foundation. You would know that if you had actually read the article...
And also because it's the most technologically advanced runtime for server applications in existence. No other runtime gives you this combination of performance and monitoring/management/observability.
Development time matters. Getting to market faster matters. If you're optimizing for bytes and cpu cycles by using C/C++ then you're doing it wrong. Optimize for dollars. If you get to market faster, your boss doesn't care if you need an extra 64 GB of RAM.
It isn't all about the software development. I've worked with developers who had no idea how to configure an application server locally to test their code, they were totally dependent on the IDE to manage all that for them. Then when something didn't work when actually deployed to an installed app server, which often happened because the IDE was adding classes to the classpath that hadn't been setup on the application server install, the developers had no idea had to fix it. I've had a situation where a developer totally messed up her git environment and had no idea had to correct it, she just kept saying the IDE wasn't allowing her to check in her changes. Took about 20 minutes using the git command line tools to repair the damage without losing her work. She didn't know what to do without the IDE. I've looked at projects where the tutorials are all "fire up IDE X, install plugin Y, then generate your project", libgdx was that way for quite a while. The problem with that is the developer doesn't truly understand how to do a headless build of the projects. IDEs have gotten better and generating build files that work headless but there was a time when that wasn't the case. So please don't think I'm saying don't use an IDE, there is ample productivity gains in doing so, but do not become overly dependent on them either. A developer who can work without an IDE can easily pick up an IDE, though they may not like all the bells and whistles (I personally dislike things like auto-close strings or auto-insert closing parens) but those can be configured. However a developer that only knows how to work in an IDE has a harder time when being thrown at a command line shell to get something done.
If the design is similar, the number of calls shouldn’t differ that much. Please note that many responses (jsf stack) contain html code, not all of them are Ajax. By the way, I used to work with jsf and I think it’s still valid (otherwise why it’s in jee spec). But still, it’s a case by case and for high volume apps I don’t know how much is suited
Yeah, I should have said "your favourite text editor" which in my case is Emacs, but it's definitely not to everyone's taste.
&gt; This is not about the Eclipse IDE, but the OpenJ9 JRE maintained by Eclipse Foundation. OpenJ9 is not a JRE; it's a JVM.
&gt; exactly why Because they can, lol. Like with monorepo or bazel - they have very specific requirements. In the world, where most of projects uses slf4j (because it's unified all possible loggers) we just got another API, which will hurts performance because of GC pressure of all objects created by builder api and then passed to slf4j bridge.
Is OpenJ9 source and binary compatible with the latest OpenJDK (11, 12)?
Sounds like an archetype of sorts
I think they are both useful just in different circumstances
Yes, you can download OpenJ9 runtimes for 8, 11, and 12 at [AdoptOpenJDK.net](https://adoptopenjdk.net/?variant=openjdk11&amp;jvmVariant=openj9).
It's pretty damned ugly, but they're boxed in a corner. So, after a while it will seem normal.
Some perf details are here - https://youtu.be/7cWiwu7kYkE?t=940
Yep. Just rip off the band-aid. Search and replace imports and you are converted.
It's not TCK certified.
The fact that Java 9 and to lesser extents 10, 11, and 12 have broke a few things, it would be a great time to switch. But seriously they should just toss out the entire spec, start from scratch and incrementally push the changes. The specs are like a puzzle and a serious case of NIH syndrome (I don't really know what came first in most instances). Great example why do I need 4 annotations on a mapping method for JAX-RS.
&gt; One of my favorite features of OpenJ9 is the ability to do class sharing. The OpenJDK JVM (HotSpot) [also has class sharing](https://blog.codefx.org/java/application-class-data-sharing/) -- one of the features that Oracle recently open sourced. &gt; With the shockwaves and confusion still reverberating around the Java world from Oracle’s recent changes to how it licenses the commercial OracleJDK, having options for running Java where you can have total confidence that you don’t have a potential lawsuit looming in the future over unpaid licensing costs can be very comforting. The change to licensing has been this: Oracle has open sourced, for the first time ever, the entire JDK. Instead of a mixed free/proprietary/paid JDK, Oracle distributes the same JDK under either a completely free license, or under a commercial one for those seeking support. The licensing change has been widely lauded. Not only is OpenJDK just as free as OpenJ9, 80% of OpenJ9 JDK is from Oracle's OpenJDK, and bound by *the same license*. I don't understand the fears about lawsuits, but Oracle owns the copyright on both OpenJDK and the OpenJ9 JDK, so I can't see how they would be different in that regard.
It is important for people to be honest with themselves when picking a technology. Building an app that will scale to Facebook size generally isn't important and a JSF application can be developed quickly and serve thousands of simultaneous users. For may sites that is more than enough.
Whatever OpenJDK distribution you use, they're all mostly developed by Oracle. There are indeed distributions that are more official than others, in the sense that you can only directly report OpenJDK bugs against those distributions -- for the current JDK release those would be the Oracle builds at [jdk.java.net](http://jdk.java.net/), and for 8/9 those would be the "upstream" Red Hat builds [here](https://adoptopenjdk.net/upstream).
Agree. Than maybe if required update to scale. In the mean time, to start, is more than acceptable.
Hold on, but, it is not responsive?!?
My favourite one is Ctrl + W, and you can horizontally scroll by pressing the shift button and move the mouse wheel.
I used to use all of them at prior companies and in various forms over the past 20 years. When used well and will attention paid to the folks involved, they can greatly increase the quality of communication and reduce deployed bugs. I also use these techniques in my live coding stream to great success. [https://jitterted.livecoders.dev/](https://jitterted.livecoders.dev/).
I second the recommendations here and would add Martin Fowler's "Refactoring" book. Even though the first edition is old, it's still applicable to modern Java development. The 2nd edition was released not long ago, but the language switched to JavaScript. The concepts are still useful, so up to you to see what works for you. I also recommend [Modern Java in Action](https://www.manning.com/books/modern-java-in-action) by Raoul-Gabriel Urma, et al. You can see my other recommendations here: [https://www.welltestedlearning.com/references/books/](https://www.welltestedlearning.com/references/books/)
&gt;OpenJDK also has class sharing -- one of the features that Oracle recently open sourced (along with Flight Recorder and ZGC). As of JDK 12, CDS is enabled by default, and a pre-recorded archive of the system library is included in the JDK, which has contributed to the reduced startup times in JDK 12. Yea I am planning on doing a blog article soonish (very elastic term, June at the earliest) comparing the two different implementations of class sharing. I will say that, outside a containerized environment, enabling class sharing is SUPER easy as all one need do is add `-Xshareclasses` and you are good to go. Though in a non-trivial use case, you will probably need to pass some additional arguments. &gt;The change to licensing is this: Oracle has open sourced, for the first time ever, the entire JDK. Instead of a mixed free/proprietary/paid JDK, Oracle distributes the same JDK under either a completely free license, or under a commercial one for those seeking support. After an initial confusion, the licensing change has been widely lauded by the Java community. Yes you are absolutely right that you can use OpenJDK Hotspot for free. In my article I specifically refer to OracleJDK. While both OpenJDK and OracleJDK are both fully capable of running Java binaries, OracleJDK does come with additional features not available in OpenJDK. &gt;Not only is OpenJDK just as free as OpenJ9, 80% of the OpenJ9 JDK is copied from OpenJDK, and covered by the same license. Whatever the fears about lawsuits, Oracle owns the copyright on both OpenJDK and most of the OpenJ9 JDK, and Oracle is the company that does 90% of the development on all OpenJDK distributions, and a significant portion of the development on the OpenJ9 JDK, so I can't see how they would be different in that regard. I'm sorry that doesn't grok with my understanding of OpenJ9. OpenJ9 was developed from a smalltalk VM called K8. Unless you are talking about the full JDK, i.e. including things like the javac, javadoc, and so on, the JVM itself (which is what I'm talking in my article) has a discrete lineage from Hotspot. And again, referring specifically to the *OpenJ9 VM*, IBM does almost all the work on that as can be seen in the [commit log](https://github.com/eclipse/openj9/commits/master).
&gt; OracleJDK does come with additional features not available in OpenJDK. This is not true. OpenJDK and Oracle JDK are the same JDK distributed under different licenses. &gt; That doesn't grok with my understanding of OpenJ9. You cannot use a JVM by itself. You need a JDK. The OpenJ9 JDK copies the libraries and tools from OpenJDK. So IBM does all the work on the JVM part of that JDK.
I had heard of spaced keywords (as in "enum class") in other programming languages, but hyphenated keywords are new to me. I think it's a clever and aesthetically pleasing solution. They look much better than C's _New_keywords.
If you're just starting out, I think using vim is a good idea, it's a powerful tool that can definitely be helpful, and every programmer should know how to compile and run their program from the command line. Now that I'm working on projects with 20-30+ files, thinking about managing all of that without and IDE sounds very anxiety-inducing.
That's because of licensing issues Oracle has with the TCK. If you find a problem out in the wild that is related to OpenJ9 not meeting the Java spec our runtimes team would love to hear. But I'm confident when seeing tweets like the one I [linked to in my article](https://twitter.com/headius/status/1095564187609325569). Users aren't going to run into many issues. That said, I would probably still recommend doing A/B testing. Have most of your instances running your current JVM, whatever it might be, and seen some requests through to instances running OpenJ9 and make sure the behavior/business meaningful resultsw are the same.
&gt; That's because of licensing issues Oracle has with the TCK. That's because OpenJ9 hasn't licensed the TCK. The TCK is freely available for OpenJDK, but not for other JDKs.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bkdt1f/does_adding_preexisting_objects_to_an_array/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;This is not true. OpenJDK and Oracle JDK are the same JDK distributed under different licenses. They differ only in their version strings, and a few other cosmetic features. Ok gotcha, I didn't realize that all previous commercial features were added to OpenJDK starting in 11. &gt;You cannot use a JVM by itself. You need a JDK. The OpenJ9 JDK copies the libraries and tools from OpenJDK. So IBM does all the work on the JVM part of that JDK. Ok cool, but this is literally how I start my article: &gt;Often when the **Java Virtual Machine** is discussed in a presentation or article, it is described in very monolithic terms, i.e. **“the JVM”**. This can give the mistaken impression that there is only **single JVM** implementation to choose from. In reality though there are actually several **JVM** implementations to choose from. Knowledge that there are multiple **JVMs** available is becoming more common with the highly publicized GraalVM and Amazon’s Coretto. There is however another **JVM** option that has been around for some time, Eclipse OpenJ9. I don't know how I could be more clear that I am making a comparison of JVMs. I mean the article wouldn't really make sense if I was comparing JDKs as the entire article is about comparing runtime performance and the cost associated with running Java workloads in a production setting.
...like I said a licensing issue. TCK-certified and binary compatibility as it would generally be understood are two different things i.e. can I run my same Java artifacts in a OpenJ9 environment without issue? And the answer would be in the overwhelming number of cases yes.
&gt; I mean the article wouldn't really make sense if I was comparing JDKs as the entire article is about comparing runtime performance and the cost associated with running Java workloads in a production setting. But the section about licensing doesn't make sense if you're talking about a JVM, which is a central component in a JDK, but not something that is used alone. OpenJDK and the OpenJ9 JDK are equally free, and share much, if not most, of their code, which is under the same GPL license, and copyrighted by Oracle.
With this changes is more likely that developer would stop using it and switching to other frameworks.
It's only my own experience, but I had a lots of issues with the Debugger when using Eclipse on OpenJ9.
[Repost](https://reddit.com/r/java/comments/bk6w7b/draft_jep_keyword_management_for_the_java_language/)
Search on github
Most enterprise applications do not need responsive UI. If it is the case you can use: [https://www.primefaces.org/showcase/ui/misc/responsive.xhtml](https://www.primefaces.org/showcase/ui/misc/responsive.xhtml)
Oopsie
I work at a fortune 100, we'd laugh you out of the room for suggesting jsf.
Whatever, I’m on a mobile and would have been nice
&gt; Doing multiple REST requests from a JS file on the client can lead to more overhead vs doing an (AJAX) requests that on the backend does multiple server 2 server requests and blasts everything in one go to the client. This is the purpose of API gateways. &gt; Serverside frameworks can be lighter on the client too, as the predominantly server ready to render HTML. For a site with low interactivity, server rendered HTML with jQuery or similar is fine. That's typically not the kind of application that JS frameworks aim for.
You don't need to tunnel X to run the debugger in an IDE. You can attach your local IDE through ssh (to a remote port on your remote JVM). Doing java-development using a text-editor is very inefficient (but doable of course).
interesting point of view. Not always true but interesting
I still use emacs to actually write Java code, mostly out of decades of habit and comfort. For a large project where I'm not really familiar with the details I'll *also* fire up Intellij to take advantage of its search and analysis tools. I have it rigged so that ctrl-rightbutton in Intellij will send the file to emacs and drop me right at the line+column I clicked on, and then simply moving the mouse back into the Intellij window is enough to trigger it to re-read the file and re-do its analysis. It makes it pretty easy to go between them, the main catch is making sure I don't accidentally start typing emacs sequences while the mouse is still in the Intellij window, because they tend to do other [unwanted] things.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Fine, there are still 99 other ones.
Here is case that I did recently: Iterate through a list, and remove elements that fullfil a predicate. The number of elements removed is expected to be a low number compared to the size of the list. O(n) for array list (if using your technique) and linked list but which is actually faster?
I guess this is what happens when a tech company employs too many lawyers!
I'd like to see your studies that show doing java-development using a text-editor to be very inefficient.
I guess this is what happens when a tech company employs too many lawyers!
I'm never installing Visual Studio Code you M$ shill.
I have done java-development för many years (starting with emacs). I always have emacs running for editing text. When working with java a good ide (like intellij) saves a lot of time (navigation, refactoring, code completion, background compilation, quick-fix-mode (to fix small errors)). See full list here: https://softwareengineering.stackexchange.com/questions/20950/what-justifies-the-use-of-an-ide-versus-a-standard-editor I found no study of this but it saves any developer a lot of time (less typing). See more here: https://www.youtube.com/watch?v=GSKERVTMWqs
I've been doing Java since the early 90's (Java 1.0.2) and C++ and C before that. Started with a text editor called Brief that was licensed by my employer, switched to Emacs when I needed something of my own (never really grokked VI), so text editor based development is what I know. Note that the stackexchange link you posted was closed as being primarily opinion based. What you think of as adding efficiency by allowing developers to type less I consider disruptive. Constantly having windows popup on the screen while I type interrupts my thought processes, auto fill of functions, closing quotes, closing parens and even code folding interrupts my typing flow so even when using an IDE I have to disable those. Macros for things like auto-generation of getters and setters, or cleaning up imports or providing boilerplate for the implementation of an interface are very useful, but I have that capability with Emacs when I choose to invoke it. So I'm just the reverse of you, Emacs is the primary environment, I tend to fire up an IDE like Netbeans when I want to use something like a builtin GUI builder.
Just realised this sub isn’t help-focused. Not sure if this is a request for help or a general discussion on how to containerise properly? Will delete if this isn’t allowed
This would probably be better in /r/javahelp. What you want is some form of docker in docker to build in a machine-independant way. I use gitlab ci pipelines with a docker gitlab runner for this. The idea is to have a container which has the source code and build tools which runs ./gradlew build and then a Dockerfile so you can run docker build and docker push.
Thanks! I understand that's great for a CI/CD pipeline but I was thinking in terms of spinning up a system locally and ensuring consistency across machines. I've created a post in r/javahelp now :)
It's actually great and it works in Linux too.
 I'd just like to interject for a moment. What you're referring to as Linux, is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux. Linux is not an operating system unto itself, but rather another free component of a fully functioning GNU system made useful by the GNU corelibs, shell utilities and vital system components comprising a full OS as defined by POSIX. Many computer users run a modified version of the GNU system every day, without realizing it. Through a peculiar turn of events, the version of GNU which is widely used today is often called "Linux", and many of its users are not aware that it is basically the GNU system, developed by the GNU Project. There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine's resources to the other programs that you run. The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system. Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux. All the so-called "Linux" distributions are really distributions of GNU/Linux.
I have the same background as you (have programmed for 38 years). Brief is very nice ;) .The link i sent was only to show what features is nice to have in an IDE. I can also agree that popups are irritating. To give a better example: consider that you work on a large project (1000:s of classes). Any simple refactoring like rename of a package or changing an interface would involve looking up all places where it is used. That is done automatically by an IDE (making the change in seconds for ALL files). You even know it compiles. Doing that change in emacs would take hours. I am sure there are plugins for emacs for doing the same thing (but then you are using an IDE with a text-interface). Intellij never pops up windows when you type (just in very special cases). Intellij is bad for plain text-editing (you can't even search in the console-window in a good way (like in emacs)).
Oh I agree completely on the refactoring, ironically that is what caused the developer I mentioned previously to fully fubar her git repo. I've never hit a situation where 1000's of classes needed to be refactored, but have hit a package with a fewer number. If I couldn't handle it quickly with macros or a script I fired up an IDE to do it. Fortunately that is a very infrequent activity.
Like Eclipse, IntelliJ and Netbeans have done for 20 years. Call me when M$ actually innovates something.
Well, just a rename of a package would create lots of changes. I have done that a few times. The quick-fix command is the one i use most (for creating the types for any new variable), create-method, extract-method. emacs is much better in many ways as an editor (tags-query-replace is very powerful).
Shouldn't matter where you build the jar
You can do it with docker build stages, but why bother? All our release candidate builds come from the CI server, not a developer laptop.
You said: &gt;However, this contradicts the whole idea behind using Docker because building on my machine will not necessarily be the same as building on a colleague’s machine. Um... not really with Java. If you're running a specific version of java locally, a jar built on your local OS should be the same as a jar built on docker, unless you're working with native artifacts somewhere. Unless you've native code, there's really no reason to build \*in docker\* for deployment on docker, apart from a local deployment process like "we use CI" or whatever.
It's a great text editor
Typescript ?
FagScript?
So is Notepad. Actually it's not.
What keeps you from applying the tutorials to a CI build? Tutorials are a starting point, you need to transfer the knowledge to your needs. There is a guide to build Spring Boot docker images on the Spring website, I recommend looking there first before you resort to random tutorials. https://spring.io/guides/gs/spring-boot-docker/
You don't need to install a JDK and maven, just install these three other things instead! I think the author has completely missed the point of the functionality that they are reviewing... SDKman takes care of that just fine.
You can build it like this: https://gitlab.com/rynr/bullet/blob/master/Dockerfile
My life is so much more enjoyable with sdkman! Especially with the JDK since there are so many distributions and I like to easily try different ones.
Docker is about running something the same on every machine, not necessarily about building something. And for building you usually use a build system like Jenkins, Bamboo etc. That way there is one designated and trusted system that builds your application, wraps it with a Docker image (I use Jib for this) and uploads it; the Jar to a Maven repo such as Nexus and the Docker image to a Docker registry. Sometimes for testing you want to be able to have a reproducible build, you can use Gradle or Maven wrappers: small batch files which download and run the predefined version. Or you can make your own build script which builds from a Docker image.
Java is mostly used for backend systems to pass data to other backend systems or frontend systems. They often provide a REST interface so you can interact with them. I used to work in the medical sector and it was about combining medical data from a heap of other systems so doctors and patients could use it effectively. Java is a super productive language for these middle tier solutions which have some external data, do something useful with it and provide it in another way.
No, Microsoft needs to release a free and open source Windows OS. /s
Our CI has a docker image than run the build and runs docker to build the target docker image and push that image to our internal image registry. But the result is exactly the same as running `gradle build` on my laptop. Gradle (or maven) will take care of the dependencies. At the end of the day, the docker image is built by saying gimme a openjdk base and copy that jar file in /opt/myapp.
You can tell this is shill sponsored content by how much I get downvoted. Useful idiots.
I use Ubuntu and was looking for a Notepad++ esque text editor, a colleague recommended VS Code and it's pretty decent!
At my current job, I'm writing a new service and writing a lot of unit tests, I threw some integration tests in there just to check whether messaging and REST were working on a technical level. But our team has the luxury of 2 dedicated testers that work from a different submodule to do all of the black box testing, i.e. preloading data, put stuff in at one side and see what comes out the other side. They use Wiremock and some Docker containers for stuff like the database and message broker. This way we have the service covered on the lowest level with unit tests and on the integration level. The best thing about having good testers is the discussions you can have with them. They have to understand exactly how the service needs to work functionally to make their tests do they are great sparring partners during implementation.
I am currently using OpenJ9 in production and have loved it so far. The low memory consumption is the reason I chose it and it has not disappointed. Was using the jit cache until a weird issue with it getting corrupted somehow which caused a crash loop because of the way I had the service installed. But 1 out of 80 or so installs with only that as an issue seems like a win to me.
I’m a random guy sitting in a Starbucks in Manhattan and you’re being downvoted because you’re acting like an ass. Nobody’s forcing you to use a Microsoft product. Chill.
That's really great to hear. For the issue that you ran into you should definitely fill out an issue report our runtimes team would definitely want to know about it: https://github.com/eclipse/openj9/issues
That's interesting. I know one major point of interest is improving developer tools for OpenJ9. If you are able to describe the issue, could you fill out an issue report? https://github.com/eclipse/openj9/issues The runtimes team is interested in resolving bugs and improving the experience of using OpenJ9.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
TL;DR: the article gives pointers on how to needlessly complicate one's life
I don’t use SDKMan* but the big advantage of using containers is at any time you can do a docker system prune to get rid of all the crap you installed trying to get some new code built and run. But I sure wouldn’t want my primary development environment in a container. * SDKMan.io SDKMAN! is a tool for managing parallel versions of multiple Software Development Kits on most Unix based systems. It provides a convenient Command Line...
Like how Oracle did right? /s
[the world is passing you by](https://insights.stackoverflow.com/survey/2019#development-environments-and-tools)
https://headcrashing.wordpress.com/2019/05/03/negotiations-failed-how-oracle-killed-java-ee I don't know what this blogger's source is, but I'd be curious to know if it's accurate.
Well this is a goddamn disaster. Nice going, Oracle lawyers! You probably just killed Java EE in the long run. I think Jakarta's most pragmatic option at this point is to fork all javax types under their umbrella to their own namespace, but include all the existing javax types alongside theirs in the spec. For a time, Java EE implementations will have to support both sets of APIs concurrently, until people have had enough time to make the switch. Or maybe they just fork the API and make a clean break? None of the options left are great. I'm of two minds about Oracle's stewardship of Java, and that largely resolves around what appears to be two factions within Oracle: the Java team who actually evolve the language, and the lawyers and executives who want to squeeze Java for every last penny. The Java team are doing some heroic work, but as long as the lawyers stay in control, the future of Java is in question.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I tend to do two steps. I build inside a docker container to generate a jar file. This is done in my `Jenkinsfile`. I then copy that into a docker image to be deployed. I believe there a modern magic way for doing that just in a single `Dockerfile` now.
The main benefit is that your builds are insulated from the build server's configuration. It also means that your developers can be a little bit more confident that if it builds on their workstation it will build on the build server and they can replicate any build issues. They can also control the build environment without having to get a sysadmin to update the build server with the new dependency. It also allows for conflicting dependencies between different projects.
Excellent work. You preserved a small slice of history and documented how to do it in a way that helps the next archivist. This could even be used in a CS or DBA course as a project.
&gt;The main benefit is that your builds are insulated from the build server's configuration. Why would I want that? The build server configuration is part of source control like any other config, and every build agent wipes all state before each build. Our build configuration is the way it is for a _reason_. &gt; It also means that your developers can be a little bit more confident that if it builds on their workstation it will build on the build server and they can replicate any build issues. Are you also going to put your local maven cache in a container volume? Your workstation’s network config? It’s been about a decade since I saw a project that built inconsistently on different machines and wasn’t down to one of those things. Still, workstation builds are uninteresting. If it fails CI, it’s a broken build. Whether or not it builds elsewhere is irrelevant. &gt; They can also control the build environment without having to get a sysadmin to update the build server with the new dependency. The build server retrieves and proxies new dependencies automatically. The time to decide if a new dependency should or shouldn’t be added is in the PR, not some sysadmin requisition form. &gt; It also allows for conflicting dependencies between different projects. Why do you need a dockerized build for that? Any artifact repository can hold multiple versions of any given dependency.
I'm talking about installing the right version of Maven or gradle or JVM or npm or node or python or what ever other tool the build needs.
Yes? That’s all in our build server config. You can do this with docker, but you don’t _need_ docker for that.
You don’t have to use an IDE to work efficiently with a team. Everyone on a team doesn’t have to be exactly the same and work exactly the same. If you can’t see the value in diversity of thought, you have no business making hiring decisions for a team.
I'm not trying to defend Oracle here but I think the intention here is if another company like Microsoft and Google comes around that tries to call their incompatible virtual machine "Java" there's no courtroom argument like "hey look they are allowing some one else to use their trademark without a license why can't we judge" lawyer shenanigans.
Dont be afraid to ask questions. Like any other idea or development platform you always need to be learning to keep the results getting better :)
You can use Java without an IDE, and I do so at work effectively. I think you should try a few editors and use whatever you like. IDEs have some nice features for generating code, but you might find snippets to be just as useful. It’s really a matter of choosing the tool that works for you. In my work, we use specialized build tools, and I don’t like the IDE integration available for it. You may find that an IDE works better for the work you are doing. If you’re curious, I use TextMate because it’s convenient to use over ssh.
It is not useful to give an answer with 0 justification. Even if you’re right, you’re encouraging people to trust you rather than think for themselves.
You don't need it, but it isolates your build further from your build server and gives control to developers, not sysadmins.
So do I, and I’d never laugh anyone out of the room for any suggestion.
We already covered this. I don’t want to isolate my build from my build server, that’s why I have a build server. And it’s under dev control, not sysadmin.
On that contrary I'd like them to go out and find out for themselves why it's a bad idea.
Thanks to shills like you. Fuck off.
Thank you... I am glad to hear you liked it.
Guys, I got a hold of about 4 TB (compressed) worth of Usenet discussion backups that cover the period from 1991 to 2019. So essentially at this point, I have all discussion posts ever posted to Usenet (with exception of binaries) in the past almost 40 years (1981 to 2019). I am talking tens of thousands of groups and several hundreds of millions of posts. I am thinking of making it available online, as that would be a delightful walk down the history of the internet. But hosting a such a huge site could be a challenge financially and also technically. I think a lot of Usenet posts are archived in Google groups, but it doesn't appear that all of them are there. I've done a Google search on some of the text, and a lot of what I have briefly tested is not indexed anywhere. Any ideas as to what could be done with it?
Check out Dejanews. They found most of Usenet and made it freely available. It was bought by Google and became Google Groups, but it's far from what it used to be. I don't know what Google did to it, but it stopped becoming an invaluable resource.
Thanks, but there are actually many perspectives to this functionality. I explored one. Other common scenarios to benefit are: - projects can have with a .devcontainer folder with the setup. Once checked out and opened into VS Code, the environment is ready to go, with the necessary toolchain (e.g. JDK, build tools, etc) as well the needed VS Code extensions - useful for training and hands-on labs - useful for open source projects quickstarts - useful for LOB projects (instead of the usual VM, or even worse a Word document with instructions to set up the dev environment) - useful for devs working on multiple different projects and versions The functionality extends to allowing devs to connect to remote machines over SSH to use the dev environment hosted in there. Imagine using a Chromebook or a Surface, and having a powerful VM in the Cloud to run compilation, testing, or hosting DB for you (or all of that). Sure I could have explored all that. But I thought of focusing more on one particular perspective. Cheers mate.
Did you try using Java with and without an IDE and come up with specific complaints and an understanding of the tradeoffs? If so, why shouldn’t you share your experiences to save others time and help out? Everything you know is based off of the experiences of those before you, and the learnings that came from that experience. And you won’t contribute your own learnings to those that come after you?
How did you start to this adventure? Is math skill really required when building a game like this?
Well like most people would say I started with an idea. I enjoy programming and learning more and I thought what better way then do a much bigger more in depth game then I've ever done before and then I started :) been learning all the way and math has been a pretty big help. At the moment none of it's crazy math since theres no 3d (done that too and math is super super important for that)
Well done. What library are you using to create this? Is there any documentation you read?
Everything that's currently being used is either written by me or is a standard java library no special engines or anything :). I've read a bunch of documentation in the last while, a lot is to help me better understand how images are rendered to the screen to help improve efficiency and framerates and such.
Impressed. Good job! :) Can you please share those documentation you read? I am also interested in building some games.
[removed]
That's release 1.3...I screwed up the title, sorry.
I'd like to take the moment to name the very good libraries I depend on and thank the creators and contributors very much! Without you this would have been either be impossible or a lot more work! * [EvalEx](https://github.com/uklimaschewski/EvalEx/) for evaluating expressions. * [picocli](https://github.com/remkop/picocli) for processing arguments. * [jline3](https://github.com/jline/jline3/), a line reader library, for the TUI. * [Lanterna](https://github.com/mabe02/lanterna), a TUI library, for the more advanced (but experimental) TUI2.
jMathPaper ([screenshot](https://gitlab.com/RobertZenz/jMathPaper/raw/master/screenshots/01-main-view.png)) is a calculator that works like taking notes on a sheet of paper, or like a one-column spreadsheet. Please have a look at the [README](https://gitlab.com/RobertZenz/jMathPaper/blob/master/README) for everything it can do and the [examples should also demonstrate its capabilities quite nicely](https://gitlab.com/RobertZenz/jMathPaper/tree/master/examples).
Stop relying so heavily on your IDE for a start. Try installing an alternative IDE (Eclipse is better IMHO) and see if the problem persists. It may be an IDE bug.
Just happened to see a series of tweets regarding this by Josh Long. I'm out of the loop. Can someone ELI5? I work for a tech firm and we have several Java web applications deployed on AWS and GCP. Should I be concerned?
&gt;text editor and a command line I did that in C++. Never Again
Distribute it via bittorent?
Hey, not entirely a bad idea, until my first bandwidth bill arrives 😉
You could contact Jason Scott from [http://textfiles.com/](http://textfiles.com/). I heard about his project in [this talk](https://www.youtube.com/watch?v=KSWqx8goqSY), he describes what it's all about in the first few minutes.
Perhaps you could start making this into a tile based game engine API? Create tools to make game development with your engine easier instead of touching the raw code e.g. map editors, tile designer, etc.
Will do. I have almost no idea what caused and haven't been able to replicate it. For want to help though. Thank so much
If those java applications are using Java EE and you are actively maintaining and updating them, sometime in the future the programmers updating your software will have to change import statements from “javax.*” to “jakarta.*” in the future. I wouldn’t be too worried in the near term. Looks like Jakarta EE 8 will still be able to use the javax namespace, just future iterations and improvements will have to change.
As a Java EE developer since EE 6 the move to Jakarta actually feels like a great change towards openness and ease of contribution. All we are talking about is the imports changing and if they do it as one swoop it shouldn't be more than an afternoon to convert my my applications and shouldn't be much more of a change than from moving from EE7 to EE8
Thanks for your answer.
That's an interesting project. Watching the intro now, thanks for sharing.
I realize it's a bit off topic for here. But, how are able to use GitLab as a host for release artifacts? I'm somewhat familiar with doing links in a release but not how are you uploading files to GitLab to link to?
Try posting this to /r/datahoarder this right up their alley and I'm sure a lot of them would love to their hands on this.
This is actually something I've thought about! If theres enough interest for its definatly something I'll do in the future :). I really appreciate suggestions like this because it helps me see what you guys want :)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You could also try reaching out to the University of Toronto library to see if they have any interest in it. Though I wouldn't be surprised if much like the Zoology department the cost ends up being too high as most libraries have fairly small budgets.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Credit where credit is due. VS Code is genuinely a good tool.
If you need local infrastructure (DB’s, supporting services), I’ve made this for my personal needs: https://github.com/evenh/dev-infra
As someone who use java for his projects i'm the only one who doesn't see any profit from Docker? WTF isolation mean i never got problem from deploying from CI server. it's seems to me just another headache to me, does enhance security? no, does make your deploying process easy? no, Fast no. I believe Docker is googd for languages that tend to break stuff with bazillion frameworks like nodejs.
Some developers doesn't have the will to rewrite their front end each 6 months.
They think enterprise apps get rewritten each 6 months.
Wouldn't archive.org be interested?
Bittorrent?
Well, I've pressed the "Attach file" link in the right corner of the edit box.
Thanks for sharing; looks like a fun project! Something seems a bit odd with the unit conversions (or with my understanding of them), though: $ java -jar dist/jmathpaper-1.3-full.jar -u tui ------------------------------------------------------------ &gt; not saved #1 5m in cm = 500 length length = 5m = 5 #2 length in cm = 0,05 *&gt; I was expecting 500 for "length in cm" after defining "length = 5m". Other comments: 1. It would be useful if the command-line help option listed the allowed value for `--ui`. 2. Personally I'm not a big fan of dropping your third-party dependencies straight into the repository as jars; if you don't fancy the leap from Ant to Maven or Gradle, you can always use Ivy as a low-hassle dependency manager.
 &gt; I was expecting 500 for "length in cm" after defining "length = 5m". Expressions don't have units attached to them, they know nothing about them, the results are only numbers. The unit is only part of the expression to get the result you want. So "length" is not "5 meters", it is "5". This is an ambiguity I've introduced with [#53](https://gitlab.com/RobertZenz/jMathPaper/issues/53). So what is happening is this, "length = 5m" calculates what "5 meter" in their base unit would be like, which happens to be meter, and puts the result into "length". "length in cm" replaces "length" with "5" and calculates what it would be like in its baseunit. Now, there is a bug, because "a in cm" should not be a valid expression in my opinion, especially not as it assumes "oh, you mean a cm in m". I've logged that as [#65](https://gitlab.com/RobertZenz/jMathPaper/issues/65). I know that there is quite a lot of ambiguity with [#53](https://gitlab.com/RobertZenz/jMathPaper/issues/53) in place, but I really like the idea to be able to write "1 Gibi" and see the number that it is. I'd be very happy about suggestion how to mitigate this. Additionally, attaching units to expressions would raise further questions, for example: a=5m = 5m b=6l = 6l a+b = ??? And so forth. I mean, my system could treat it as "11 m+l", but that's wonky as fuck. &gt; It would be useful if the command-line help option listed the allowed value for --ui. True, [#66](https://gitlab.com/RobertZenz/jMathPaper/issues/66). &gt; Personally I'm not a big fan of dropping your third-party dependencies straight into the repository as jars; if you don't fancy the leap from Ant to Maven or Gradle, you can always use Ivy as a low-hassle dependency manager. I understand what you mean, but I fail to see any upside to using Maven or Gradle. Currently somebody can clone the repository and has *everything* they need, without having to fetch dependencies first from a third-party service, which might go away some day (or the packages, left-pad anyone?). That is quite important to me, because I hate it when I want to check something out and it comes with a big list of "you *just* need to do x, then y, then z, then z1, then z2, and you also need m and n installed...oh, we forgot about h and i, by the way". I *hate* that. So my repositories are all self contained, all you need is this repo, not more, you get the whole deal with it. Also the build script is actually easily readable and the build takes less than 10 seconds for *everything* on my machine. Yes, having managed dependencies *does* have its upsides, but I fail to see how it would improve or help this project in any way.
Nice job but as Yoda says "Do or not do, there is no try". In your case with a command line utility, if a connection fails or you have an IO or other exception you should just throw. In Main just indicate thows exception and you don't need to pollute your code with dozens of try/catch for no reason.
I don't want to fail entire entry of one of the pieces of expected information inside the headers is missing, that is why you see multiple entries.
4TB is not extreme. Check out Google Drive: &gt;Paid plans start at 100GB and end at 30TB. They’re not all good value, but the 2TB plan is because it only costs $9.99 per month. If you pay for the year in advance, you get a discount, too.
&gt; Expressions don't have units attached to them, they know nothing about them, the results are only numbers. Ah, that makes sense then. I confess I didn't read many of the docs, I just dived in, so it's possible that this is already made clear somewhere but I didn't see it. &gt; Now, there is a bug, because "a in cm" should not be a valid expression in my opinion Agreed. &gt; a+b = ??? The only sane thing to do there would be to raise an error IMO. &gt; having to fetch dependencies first from a third-party service, which might go away some day (or the packages, left-pad anyone?) Serious question: do you know of any cases where something comparable has happened for a package in maven central? As far as I know they take a [pretty uncompromising line](https://central.sonatype.org/articles/2014/Feb/06/can-i-change-a-component-on-central/) on this: ‘Once a component has been published to the Central Repository, it cannot be altered. This rule is in place to preserve the stability and compatibility going forward.’ &gt; That is quite important to me, because I hate it when I want to check something out and it comes with a big list of "you just need to do x, then y, then z, then z1, then z2, and you also need m and n installed...oh, we forgot about h and i, by the way" I take your point, but least with Ivy, you wouldn't introduce any more steps: Ant is already needed to build it, so you just add a new Ant task which downloads Ivy if it's not already installed. Nobody needs to install or run it manually. &gt; Yes, having managed dependencies does have its upsides, but I fail to see how it would improve or help this project in any way. As I said, it's a personal preference, and I certainly wouldn't presume to tell you what to do with your own project :). Good luck with its continued development.
 &gt; &gt; Now, there is a bug, because "a in cm" should not be a valid expression in my opinion &gt; &gt; Agreed. Aw crap, I just realized this happens to be a valid expression, "a in cm" as in "a inch to centimeter"...it just so happens that "in" wins as a keyword in this expression. Well, back to the drawing board. I guess there will be a little bit more work in there, and more confusion. I need to figure out a way to make sure that the user realizes *how* the expression is being interpreted. &gt; The only sane thing to do there would be to raise an error IMO. Thinking about it a little bit more, that would require extended expression parsing, bordering on me writing my own expression parser, see [#11](https://gitlab.com/RobertZenz/jMathPaper/issues/11) for a similar feature request. Writing my own parser is one of these things I'd like to avoid as long as I can. But I see where this could be going, it would be nice to have. &gt; Serious question: do you know of any cases where something comparable has happened for a package in maven central? No, doesn't mean that it doesn't happen tomorrow. I *know* it is unlikely. &gt; As I said, it's a personal preference, and I certainly wouldn't presume to tell you what to do with your own project. As I said, I fail to see any upsides besides "we don't have jars in the repository".
 &gt; visually pleasing I really wish people would stop putting that as a tag line for software...because to me, that looks like crap.
Yeah, you're prolly right actually. Come to think of it, there's not much in there in terms of style per se. I'm just excited that I built something though. Got to see what I can do to justify that tagline. But nah, it ain't going nowhere crumpy old pal.
Very helpful collection of best practices, thanks!
Are You talking about those archives: https://archive.org/details/utzoo-wiseman-usenet-archive?
Are You talking about those archves: https://archive.org/details/utzoo-wiseman-usenet-archive?
I used them, when they were hyped around the industry, and came to realize good old unit tests and integration testing are the best approach, specially when developing GUIs.
Ctrl twice does 'run anything' in the newest version of IntelliJ (2019.1)
I used to have this one printed and tapes to my desk :-)
Why since the last major version? The shortcut has been there for a long time, did something change?
.var ? I've never tried that. How does that work?
It's true many people have a "hate relationship" with testing and that's especially aggravated when the conclusion is "your code is hard to test, because it's bad". It's begging the question: "no good code is hard to test, because good code is defined as code that's easy to test". It's also brushed aside that all code is possible to "test" in general. But not all code can be *automatically tested*. The fact you can't automatically test something doesn't mean it's untestable. And some code is genuinely not (well) testable automatically as the consumer is not a machine, such is the case with UI code. All in all, we can repeat "SOLID" until we're blue in the face (and by God, we do!) but we're not having a honest conversation yet. A honest conversation always includes both sides of the coin. Everything has pros and cons. Even going to the doctor too much (assuming you have infinite money) can be detrimental as you'll be overly tested, overly diagnosed, overly treated, which would unintentionally lower your quality of life and maybe even shorten in when assuming some real world scenarios like high risk procedures and medical mistakes. Yet for some reason in computer code we keep chasing after silver bullets. Your code is good only when it's testable, you're only doing SCRUM properly if you're productive, and so on other bullshit no-win situations where someone is telling you to go their way or you suck for some vague reason. How about situations where making code "testable" genuinely makes the design of your code more complicated and worse? Everyone has had situations like these. You're being coerced into thinking "if I'm doing it for testing, it means I'm improving the design even if seemingly I'm making the design worse" which is bullshit. How is exposing internal details of a class for testing purposes improving the design, for ex.? How is decoupling a simple unit into two *more complex units* improving the design? How is messing around with a class internals via reflection, thus coupling your tests to implementation specific an "improvement" upon anything? You can overtest. And we're not talking about that. Until we do, color me skeptical about this entire discussion.
I'm not OP, but I believe that for any significant project, coding without an IDE is a waste of time. You will require things like renaming, refactoring, jumping to declarations and definitions, jumping to use points. It makes navigating a new code base much easier. Not to mention other things like debugging and profiling.
&gt;How about situations where making code "testable" genuinely makes the design of your code more complicated and worse? Give me an example of that
I agree with some of your points regarding testing and there is always a need to balance things. Your tests should ideally only test public APIs and you should not have to rely on reflection for testing. Also, decoupling a unit into two should make those simpler. That's because you should be splitting it into two different abstraction levels, which should make each one simpler to understand independently. It sometimes takes some time to get this right, and things usually don't end up perfect. The main point of the article is the importance of decoupling, which helps not only with testing but also makes the code easier to maintain. Even if you have a part of the code that you don't want to test, such as UI, by decoupling the code, you can test the rest of the system independently, which is better than not testing anything at all.
Look into Eclipse Che if you're into reproducible, remotable containerised workspaces.
The biggest fallacy to address in your response, I believe is the idea that splitting something in two makes for two simpler parts. This ignores the fact that designing universal and stable abstraction takes a lot of time and skill, first. Second, abstraction has a cost. Adding abstraction levels doesn't make code simpler, quite the opposite. Third, if your goal is reducing the surface of public APIs, then every time you split a unit in two, you're doing the exact opposite - introducing more public APIs (to be testable, they have to be public, after all). So it's really not that simple. For example, you're a unit. A human being. Tell me how I can split you into simpler parts without the exercise turning into a nightmare. There's a reason why interacting with your whole self requires no diploma, but if I have to open you up and "refactor" you, it damn well does.
Making a service independently testable of its persistence implementation requires splitting those up, immensely complicating your service, introducing more public API surface, and most of the time introducing inefficiencies born out of the limited abstraction you have to constrain yourself to. Not sure how deep I have to go into my example, because honestly explaining this into detail is undue burden for a web comment. Maybe you can give me an example where making something testable makes it better and I'll follow that format for a counterexample.
There is a [famous article](https://dhh.dk/2014/test-induced-design-damage.html) about this topic that covers some examples (in Ruby) in detail. In my personal (and probably unpopular) opinion, a lot of the tenets of "good design" are often premature optimizations. Making a component easier to reason about at the expense of making the system harder to reason about is not always a good tradeoff.
\&gt; Making a service independently testable of its persistence implementation requires splitting those up. Do you see no need to split up logic of writing SQLs (or whatever the persistence implementation is) from the business logic? My point is that it is always beneficial to have (unit) testable code. Testable code roughly means a code which * does one thing/does multiple things at the same level of abstraction * has easily switchable dependencies * open for extension * etc etc, Keep in mind, even if I didn't write tests, I'd still want my code to be testable, because such code is easier to maintain, read and add new features to.
also, I recommend this presentation: [https://www.youtube.com/watch?v=2vEoL3Irgiw](https://www.youtube.com/watch?v=2vEoL3Irgiw) to anyone who doesn't like unit tests - can be mind opening
&gt; Do you see no need to split up logic of writing SQLs (or whatever the persistence implementation is) from the business logic? Depends how you write SQL. I may have a library for interacting with the database, but it doesn't mean mocking that library is practical or even possible (you can mock it call-by-call in which case you're literally testing if the mocks do what you just told them to do, which is testing nothing, which is what many tests do). To make the persistence layer abstract in testable way, you need: - Something which is not exposing implementation details from the underlying persistence technology (no ORM does that). - Something which has a fully featured, fully capable and working test double (not practical, unless you have lots of free time on your hands and your boss too much money on theirs).
I agree with you. You do not need docker when you use java. Why run a virtual machine in a another virtual machine ? Sure it adds more isolation (but i have so far not needed it). You start with a pure platform-independent file (a .jar). If you deploy it on docker you have removed that platform-independence. You must specify a JVM for a specific cpu when producing your docker-image. This just takes time/resources.
Thanks for that. Actually, any code is testable with https://anystub-guides.github.io
See, there's a subtle distinction I'd like to make. I don't dislike "unit tests". I write tests (unit, integration, whatever) every day. But what I don't like is the overly simplistic, ideologically charged, borderline or outright zealous way that unit testing is promoted and written about. Honestly I believe the way we speak about unit tests gives unit tests a bad name they don't deserve.
I wouldn't know it's a famous article had you not told me - there is a lot of words and weird phrasing without too much substance in it. &amp;#x200B; I can't even understand his definition of unit testing: testing a "unit" free of dependent context and separated from collaborators What the hell is dependent context and whats the difference between dependent context and collaborators? Would 2 files tested together, but without IO/DB be a unit or not? Can 10 files/classes be a unit? &amp;#x200B; He argues that "\[unit\] testing causes damage to the design, usually through needless indirection and conceptual overhead.". I disagree with both: \- the indirections are necessary \- the conceptual overhead is a tradeoff to give a clearer picture of what the system does &amp; makes the system easier to work with &amp;#x200B; Instead of providing a concrete example, he just wrote a paragraph with some big words: \&gt; To achieve this, the simple controller is forbidden from talking directly to Active Record, now it has to go through the Repository. And the action itself is hollowed out to extract a Command object, which then has to call back into the controller through the Listener pattern. which out of context mean nothing. Depending on the scale of the application whatever he described might have been or might not have been the right decision
&gt; I may have a library for interacting with the database, but it doesn't mean mocking that library is practical or even possible. This is the first mistake of mocking, mocking something you don't own. &gt; (you can mock it call-by-call in which case you're literally testing if the mocks do what you just told them to do, which is testing nothing, which is what many tests do) This is a terrible use of mocking, for precisely the reason you've stated. Mocking is a way for the system under test to design a *contract* for dependencies, in its terms, with the test case setting *expectations* which define the terms of the contract. That's why I think mocking concrete classes is not such a good idea. Having defined the contract for the dependency, you can implement the dependency as a separate *stub*, which can be tested *independently* in an integration test, verifying that it conforms to the interface. &gt; Something which is not exposing implementation details from the underlying persistence technology The ORM itself is an implementation detail of persistence. Instead, you use something more abstract like a [repository](https://www.martinfowler.com/eaaCatalog/repository.html), which defines a simple interface in possibly CRUD terms. &gt; Something which has a fully featured, fully capable and working test double This isn't necessary or desirable. Why create a simulator, when you can write a real integration test? &gt; You're testing nothing, except your tests No, you're defining a contract. You absolutely must back that up with an integration test for the implementer of the contract.
&gt; Depends how you write SQL. I may have a library for interacting with the database, but it doesn't mean mocking that library is practical or even possible (you can mock it call-by-call in which case you're literally testing if the mocks do what you just told them to do, which is testing nothing, which is what many tests do). Of course I do not want to test the library &amp;#x200B; I do not need to have the whole persistent layer abstracted away. I want to have a trivial dummy implementation for the persistence interface that my module uses. E.g., lets say I have a *pricing* module - I wouldn't let it interact with a generic DB interface, but with an interface which has methods like *savePricing, getTrends, getDiscounts* etc It's then trivial to create a dummy implementation of the *repository* and *unit test* the module through it's API: you can write hundreds of such tests (if your logic is complex enough obviously) because they are IO free
So, DHH's objection really isn't to unit testing, but to extreme decoupling, and in a way, his article misses the point entirely. His complaint is that in the pursuit of testability, Jim Weirich introduced the Hexagonal Architecture. But testability is not the purpose of the Hexagonal architecture. It is one way to remove Rails as a dependency on the application logic, following the principles of [Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html). You don't have to design the code in that way, simply in the pursuit of testability. The style of testing promoted by Weirich is the so called [London Style](https://softwareengineering.stackexchange.com/questions/123627/what-are-the-london-and-chicago-schools-of-tdd) of TDD, promoted by British developers Steve Freeman and Nat Pryce in their famous book [Growing Object Oriented Software Guided by Tests](https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627). Whereas, the Chicago Style popularized by [Martin Fowler](https://www.martinfowler.com/articles/mocksArentStubs.html) (who ironically, is an Englishman), promotes testing with real objects, and test doubles as necessary for behavior verification. which correlates more closely with Kent Beck's [original conception](https://www.facebook.com/notes/kent-beck/unit-tests/1726369154062608/) of unit testing.
Lambda functions are complicated to test??
Uh?
&gt; E.g., lets say I have a pricing module - I wouldn't let it interact with a generic DB interface, but with an interface which has methods like savePricing, getTrends, getDiscounts etc. A significant part of your business logic then unintentionally ends up in this "generic DB interface". So now you need to test that. Now what. Let's split again!
 public void writeUserName(int id, Writer writer) { this.userDatabase.getUserName(id); writer.write(userName); } I know it's fairly pseudo, but the assignment to String username vanished.
Thank you for pointing that out! It's now fixed.
"I've been learning Java for the past two years because it's the language that my schools CS program... I've gotten to a pretty advanced level with Java" lol
&gt; It's begging the question It's not begging the question. "Good code is easy to test" is a *heuristic*. &gt; And some code is genuinely not (well) testable automatically as the consumer is not a machine, such is the case with UI code. That's precisely why you separate the UI code from the domain model. That way, you don't have to test the domain model with functional tests driven by the UI. By making the domain model *automatically testable*, you are employing a heuristic which guides you towards a layered architecture. You don't need unit tests to create a layered architecture, but testability pushes you that way. &gt; so on other bullshit no-win situations where someone is telling you to go their way and like it or you suck for some vague reason. Dogma exists, of course. Management is sold on methodologies. What does that have to do with testability as a heuristic? The flip side of the coin is that just because shit rolls downhill doesn't mean that some shit is really good fertilizer. &gt; How about situations where making code "testable" genuinely makes the design of your code more complicated and worse? Everyone has had situations like these. Testability is a heuristic, it is not a replacement for proper architecture. That's why Agile doesn't say, do TDD and you don't ever have to think about architecture ever again. That is insanity. Any book on Agile will tell you to subdivide problems with the focus on iterative *delivery*, and accordingly at each iteration, gather requirements, design an architecture and then use TDD to *validate* that architecture. &gt; How is exposing internal details of a class for testing purposes improving the design, for ex.? Why would you ever think that is a good idea? You should never expose internal details to the test. That is a flashing red alert that you are doing something seriously wrong. &gt; How is decoupling a simple unit into two more complex units improving the design? It depends on what you mean by complexity. Sometimes, you create a separate class to promote internal cohesion. If a class is getting too big, it might make it hard to test. That is a *smell* that the class might have too many responsibilities, and you should *think* about how to further refine your domain model. Which means you have to go back to the architecture. Or, you want to separate a class from its dependencies. There are two ways to accomplish this, depending on if you are using mocks or behavioral testing. Mocks promote hexagonal architecture, and if that is the architectural choice that you are making, mocks are very useful for establishing boundaries. This allows you to directly plug in dependencies into classes through "port" interfaces. Or, if you are doing behavioral testing, you are triangulating between concrete classes, such as managing state using ActiveRecord (validated using integration tests) and passing data through method calls and constructors to collaborators with well defined responsibilities. That is just ordinary OOP, nothing fancy.
How do you define business logic? For me, that's the logic that describes rules of business as if the software didn't even exist. \&gt; Constraints not sure about what kind of constraints are you talking about, but business constraints are handled within a module (e.g. you cannot have two overlapping activities in a schedule for a single day) &amp;#x200B; and for the others.. my business doesn't deal with JOINs, caches, or denormalized data. It processes the input from the user, computes something and then outputs it. If my business rules require a repository with \`getTrends\` method which in turn requires a couple of JOINs in SQL - that's fine, but lets keep this detail out of the business rules. If \`getTrends\` becomes slow, we might add a cache here and there to speed it up. Business rules are still intact. &amp;#x200B; Keep in mind different architectures work for different kinds of applications. In most of the web apps for example, reads are much more common than writes and they are also much simpler to implement. It often makes sense to have a very simple 2 layer app for reads and a ports-and-adapters architecture app for writes.
&gt; It's not begging the question. "Good code is easy to test" is a heuristic. Heuristics are not always correct. They can literally be correct just 51% of the time. Yet "good code is easy to test" is fed via blogs and presentations as if it's a 100% golden rule of good code. So which one you choose, up to you. But both end up with the conclusion that "well, sometimes good code isn't testable (automatically).
 [https://github.com/ddd-by-examples/factory](https://github.com/ddd-by-examples/factory) this is one of the rare examples of ddd+ports-and-adapters approach which I use
I'm aware, but calling the same problem by a different name (using DDD terminology) hardly solves the problem I posed.
&gt; Heuristics are not always correct. Of course not, that's what makes them heuristics and not algorithms. &gt; They can literally be correct just 51% of the time. That isn't a proper way to look at a heuristic. A heuristic *helps* make decisions, it doesn't give you step-by-step instructions. &gt; Yet "good code is easy to test" is fed via blogs and presentations as if it's a 100% golden rule of good code. Of course. That's why you shouldn't take anything you read at face value, and actually think about it. Hey, that's another heuristic! &gt; But both end up with the conclusion that "well, sometimes good code isn't testable (automatically). Yes, but good code isn't a monolithic thing. We are no longer operating in first generation languages which provided no opportunities for modularity or abstraction. Modern languages let you divide different kinds of code into separate modules which can be developed (and tested) in different ways.
&gt; not sure about what kind of constraints are you talking about, but business constraints are handled within a module (e.g. you cannot have two overlapping activities in a schedule for a single day) Let's use a classic example "you can't have two usernames be the same". Now solve this for me outside the "persistence layer".
[https://www.reddit.com/r/java/comments/bkw767/writing\_testable\_code/emkm9uy/](https://www.reddit.com/r/java/comments/bkw767/writing_testable_code/emkm9uy/) \- I've written here that we probably disagree about what is business logic &amp;#x200B; &gt; Because a honest-to-God parallel I/O app under load can't just naively process requests serially and compute everything from raw data (or store everything in RAM) all the time. I don't require it to! The modules in the example app I linked are stateless. They can be run in parallel, they can be made to react to events, they can be fully reactive - it's just a matter of how will you wire up the business logic
That's a business rule for a \`registration\` use case. 1. User tries to register with username X 2. Fetch user with username X 3. if user exists, signal error
With that approach you end up with a race condition. In this case, I think it should really be done at the persistance level, but you can make that part of its contract and test it with integration tests.
If you want it to work in parallel, then you need to make adjustments, sure. Either by serializing the work or making the repos interface fancier. That's the role of the model - it specifies the interfaces it uses and the implementing code has to comply.
The best examples of this is using AOP. Using annotations/frameworks can make code a lot simpler. Take hystrix for example. Building an abstraction over circuit breakers is burdensome and makes code very verbose. I think there are many times you have to balance the flexibility and benefit from building an abstraction against the ease of using annotations and frameworks. Another example can be seen in cloud agnostic frameworks that provide flexibility but cannot leverage the benefits of individual cloud providers to their fullest. I generally agree that testable code is something to strive for but there needs to be a point at which code is testable enough or at which you start getting diminishing returns.
That's a really basic beginner's error. You just introduced a race condition in your code: 1. Thread A fetches user "foo". 2. Thread B fetches user "foo. 3. Thread A gets "no such user". 4. Thread B gets "no such user". 5. Thread A creates user "foo". 6. Thread B creates user "foo". Now you have two users with the same name. Honestly, I expected someone who argues about proper architecture wouldn't fall into the most basic example of race condition I could think of... This is why we use SQL and other databases. They resolve conflicts you can't resolve with "business rules" that are outside the I/O process that works with your app state.
Yeah well, [that](https://www.reddit.com/r/java/comments/bkw767/writing_testable_code/emku0s6/) kind of ruins your premise a bit.
&gt; Either by serializing the work or making the repos interface fancier. So the very premise of what I said was "you can't require that an app under load performs all tasks serially". So the first option is out. And the second option, making the interface of the repos "fancier", if you dig into it, means you move this part of your business logic in the repository. So we're back to square one here.
Now serialise that work across multiple processes... Push solutions to problems to where they are best solved, like the database in this case. Stop trying to abstract away the capabilities of the services you depend on because you heard somebody say that you should, and start thinking for yourself. Your test coverage may drop 5-10% (and you should definitely still write \_lots\_ of tests) but you will start to design more fault tolerant (and ultimately correct) systemsm which make better use of the systems you depend on.
I can't be the only person who's worked with CompletableFutures and thinks they're a trash heap can I? 1. Java 8 - and a brand new interface is throwing Checked Exceptions. What? (and some sort of unusual but understandable reason for this) 2. Haphazard method naming 3. You have a CompletableFuture, it's always confusing what you actually have. Results from a single operation? Multiple operations? 4. You want to get the results, but the get() method blocks until finished. Is it finished already? Will it be blocking and waiting? Not sure there's a way to even know. Given a choice I find the original Thread/Runnable paradigm - while not perfect - a heck of a lot easier to understand than CompletableFutures and just a better way to do it.
&gt; Now serialise that work across multiple processes... queuerttf
Yep let's bring in a new infrastructure dependency so you write your code in a way you have been told makes it testable...
I didn't say you have to do that, lol. There are alternative ways of achieving what you want, but if you already use queue and serialize part of your workflow - go ahead
And then you need to drain that queue before you persist the user in the database... Maybe in this process or maybe in another? To fix a race condition that only exists because somebody told you that you need to abstract persistence away from business logic, rather than express the business logic where the semantics most closely meet the requirements...
&gt; So the very premise of what I said was "you can't require that an app under load performs all tasks serially". I was pretty clear about this. So the first option is out. You don't need to serialize every thing. &amp;#x200B; &gt;And the second option, making the interface of the repos "fancier", if you dig into it, means you move this part of your business logic in the repository. &gt; &gt;So we're back to square one here. Which was "a lot of your business logic in complex I/O apps ends up in your persistence layer, so now you need to test it as well". All the business logic resides in the model. The act of calling a method saying "save this new user data, make sure that this email field is unique" is business logic. The generic act of persisting entity with unique fields is not business logic, its a technical requirement for the infrastructure layer which can be tested, as you said, with integration tests.
Please see [https://www.reddit.com/r/java/comments/bkw767/writing\_testable\_code/emkwe1y/](https://www.reddit.com/r/java/comments/bkw767/writing_testable_code/emkwe1y/). I said "queue" just to answer your question about serializing the work across multiple processes. I don't advocate using queue in the use case we talk about, sorry if that wasnt clear
see my other answer to this topic
I think this video answers a lot the points from your OP, gives a much broader definition for unit testing and gives a reasonable explanation on how to do integration tests. But I agree, an article would be better!
OK. It was an asinine remark, in any case, and a flawed solution to an invented problem.
I would rather give up on the distinction of what is business logic and what isn’t, because this is not the core of the issue here. The core of the issue is, that it is some kind of a logic. Which has to reside in the persistence layer, and which is substantial to the application working properly. And this contradicts the advice that you commonly hear with DDD and hexagonal architecture, that you can isolate the persistence layer and make it really simple and dumb. Well that won’t happen in real world parallel/distributed apps. That layer is going to stay quite complicated and highly specific to your app domain (not generic at all). At which point the premise under which we isolated it starts to make no sense. I.e. we isolated it so we don’t have to test it. But now we need to integration test it. You might as well integration test it with the business logic and not separate the “business logic” in the first place and achieve the same end result with less effort.
Yes. The "recent locations popup" is new in the 2019 edition. See here: https://www.jetbrains.com/idea/whatsnew/ Maybe you mixed it up with just `CMD + E`
&gt;And this contradicts the advice that you commonly hear with DDD and hexagonal architecture, that you can isolate the persistence layer and make it really simple and dumb. Well that won’t happen in real world parallel/distributed apps. That layer is going to stay quite complicated and highly specific to your app domain (not generic at all). &gt; &gt;At which point the premise under which we isolated it starts to make no sense. Sure, but I don't know whether this premise starts to make no sense, unless your business rules are veery simple. I guess we could get into why do we want to have the domain isolated and decoupled from specific technologies in the first place.. &gt; I.e. we isolated it so we don’t have to test it. But now we need to integration test it. You might as well integration test it with the business logic and not separate the “business logic” in the first place and achieve the same end result with less effort. We might also need to unit test in that layer.. :D But anyway, there is a (initially small) cost of integration testing the infra layer + models vs just the infra layer. Your amount of integration tests would skyrocket with the first approach and they would be too slow to run in a large app (e.g. 30 seconds after each change is already too slow) &gt; **EDIT:** To add... Because if we do isolate it and we focus most of our attention on the remaining "business logic", we're focusing on testing some very simple (comparatively) validation rules and if...then logic, while mostly ignoring the essence of the application that we put in the persistence layer. I find it hard to agree with it. The models are the core of business. The system will work without caching, it will work with file as a database, it will work with an in memory database, it will work with occasional race condition. You will be able to create a PoC with what matters (business rules) way faster and show it to the business people. You will be able to seamlessly switch a database if current one becomes too expensive, you will be able to switch frameworks if current one stops receiving support. More over you will be able to refactor the business rules without fear because you have written a ton of ultra fast \`unit\` tests... etc etc &amp;#x200B; &amp;#x200B; &gt;This, BTW, is where microservice/modular architecture comes in, so we can still slice the app vertically in services, rather than horizontally in layers, and keep that test run from turning into "days". &gt; &gt;But if we do split layers so we can feel good about testing the most trivial parts of our app, and ignoring the complex core, then this is precisely one way that dogmatic unit testing leads us astray from the goal of high quality software and productive development. &gt; &gt;Talking of which, how does one "unit test" for race conditions? You can't. Sometimes when you focus on units too much, you lose the forest for the trees. If Einstein was a programmer, he'd say, paraphrasing "keep your units as small as possible, but not smaller". And practice sometimes leads to bigger units, counter to what every article teaches us. I'm learning from nature. Each separate animal in an ecosystem, each separate human in society is a very very complex system. But the "public API" (our communication and actions) is comparatively brutally simple. There's a lesson in there. microservice/modular architecture works perfectly well with P&amp;A. yup, that's why we would like to "design out" all nondeterministic actions from our code, it's hard though obviously, whether you use P&amp;A or not &amp;#x200B; would you be interested in joining some kind of a discord channel for architectural discussions?
&gt; 30 seconds after each change is already too slow See, that's precisely the attitude I'm afraid of. Speed can't take priority over accuracy and completeness. When you do that, unit testing becomes the literal translation of bike-shedding as a development process (i.e. let's ignore the nuclear plant melting because that's not an Isolated Concern, and let's hold multiple short discussions on the color of the bike-shed instead, ideally under 30 seconds). Running all your tests after every change is neat, all other things ignored. Of course it is. But it's not *necessary*, especially at the cost of pointless abstraction/refactoring/and cargo cult tests focusing on the convenient-to-test code only. You can write changes all day and then test once and deploy once. It's not the end of the world, honestly. And if something fails, from personal experience you know which change did it. In the rare case you don't - binary search through your changes gets to the issue very quickly. &gt; I find it hard to agree with it. The models are the core of business. The system will work without caching, it will work with file as a database, it will work with an in memory database, it will work with occasional race condition. Oh my. That's not at all close to "will work" for me. That's honestly, I'm cringing. &gt; that's why we would like to "design out" all nondeterministic actions from our code I agree that *we would like to*, but again, we can't just constantly submit to things we'd *like* to do, rather than things we *have* to do. We might like stateless code, but many services are stateful, and state is deep into their function and value. Some projects are stateless, say a compiler, or a parser, you have input (compiler flags + source), output, nothing else matters. The ideal "unit test" project. Well most are not like that. And as I mention, we might like tests under 30 seconds, but this doesn't mean everything can be adequately tested under 30 seconds. &gt; More over you will be able to refactor the business rules without fear because you have written a ton of ultra fast `unit` tests... etc etc No honestly, if our tests don't care about the things you mentioned above (1) persistence (2) caching (3) race conditions etc. I think we should be really really afraid of refactoring business rules. Having no fear when the tests only *seem* to cover everything but they have an incredibly narrow focus due to forcing our entire methodology on "stateless" and "fast", is akin to treating high blood pressure with painkillers. We'll boldly go forward without headache, but we're still killing ourselves. &gt; would you be interested in joining some kind of a discord channel for architectural discussions? Can't commit, sorry + timezones etc.
C# also uses contextual keywords
Thank you. very informative and just on time
&gt;Let's split again? What's the alternative? Implement caching/math/aggregation in a single "business" module?
The senior on my team said they’re untestable because they’re undebuggable
In our University, we still use Java 8
We still use Java 8 at my school (Purdue). We’re hoping to upgrade over the summer. I use the [JDK 13 EAB](http://jdk.java.net/13/) on my personal machine.
The lack of full backward compatibility is a turn off. I tried switching a few times but simple console apps that worked fine in 8 would throw errors. It also caused issues with some installed tools that use jdk. I don't need to write Java code often so not really motivated to spend the time migrating things.
Nope, still on JDK8, will be on for the forseeable future :| Unless it is a new application, then we use the latest LTS version of JDK.
JDK 11 and 8, still working on migrating a few applications to 11.
Java 11 because my distro doesn't have 12 in repos
I use it as a runtime but still use Java 11 as the language because of Eclipse. I know Eclipse 2019-03 is supposed to support Java 12 but I hit a show stopping bug and had to roll back.
Eclipse only supports JDK11, why should anyone else?
Any reason to use this over 12? Curious
Our company migrated few products from JDK 11 to JDK 12 couple of weeks ago. Everything went without any major problem except we needed to update few frameworks (Spring and Spring Boot mainly for ASM support) to the latest versions. Everybody will have different experience according to the frameworks they are using but given we migrated from JDK 11, our upgrade experience was relatively pleasant.
Nice
Ty
No, it just helps out the developers if I run into any bugs or crashes.
Ah, I see. Thanks
No problem!
Same, JDK8 at work. And Kotlin for personal projects.
For the CompletableFuture*
You can use a tool like sdkman! to manage your JDKs.
We have migrated to JDK11. Although this have been done for six month, there's still some fallout. We will skip the non-LTS versions, because we rely on external build tools. By the time those are adapted for the new java version, the versions is deprecated and we can start migrating again. I still wonder who though short release and support cycles are a good idea. I'd like to meet those in person.
That's worse in Ubuntu 18.04. There's a package named openjdk-11, which contains \*drumroll\* Java 10. Bet you didn't expect that.
They got that by promising to replace it when 11 comes out, they've really failed to deliver and people are mad about it everywhere.
I wouldn't say that it's strictly necessary to do your complete build inside of Docker. With that said, for my personal projects, that's exactly what I do. I deploy my containers on a barebones Azure VM and I don't want to worry about which Java version or whatever is installed. &amp;#x200B; There are multiple ways to do this, but the method I'm currently sticking to, is multiple staged builds which copy the artifacts from the first build step. A Dockerfile and docker-compose file from one of my projects: [https://gist.github.com/MathiasBulte/f272cab74bd5aed32b2075f090c2ccce](https://gist.github.com/MathiasBulte/f272cab74bd5aed32b2075f090c2ccce)
Kotlin is greate!
That was fixed three weeks ago.
how do you calculate the upper bound for JIT compile time
I downloaded Java 12 right after I read about Switch Expressions. They look way better than the old switch statements
Kotlin != Java Try /r/Kotlin
Yes, I am always on the latest version unless project requirements state otherwise.
12 by default and in production. 13 for early testing. I also keep 8 and 11 for bug reporting purposes.
We're stuck on Java 8, but I wish we weren't. The reason is that it was the last (Oracle) version of Java that supports Windows 32-bit. Some of our users of our commercial product are still using Windows 32-bit and we're not brave enough to stop supporting them.
Mostly I'm still using JDK8, since some things are plain easier with it, like JavaFX. Maybe moving to JDK11 in the next years.
Java 11. Why would you upgrade? Java 11 is the lts Version. We Stick with 11 until nov
They are debuggable and testable... Even if you couldn't debug them you could still test them.
This was maybe the most stupid idea they had in a really long time.
I prefer having always the most recent released versions of software so I upgraded to 12 last weekend. Also the switch expressions looks badass.
The alternative to splitting things endlessly for testing purposes is to split only for the purpose of the application and design the tests around the architecture. Instead of designing the architecture around the tests. Some projects will require an isolated persistence layer. More than half do not. This, again, doesn't mean wiring raw SQL queries all over your services, it just means not writing an abstraction with a public API around your persistence logic (i.e. using Hibernate or jOOQ doesn't mean you isolated your persistence layer).
Isnt jdk 8 at end of life
Basically .. not using the commercial one, but started using OpenJDK 12. So far it's going smooth with it. I can use NetBeans 11 with OpenJDK 12.
yeah, that caught me as well...
Same. Last time I looked (a week ago) Hadoop still didn't officially fully support anything beyond Java 8.
That sounds like a race condition waiting to happen. What if someone is concurrently registering the same username at the exact same time this code is running? It might not exist when you check it, but exist by the time you get around to persisting.
That's weird because going from 11 to 12 to 13 etc should not cause issues compared to going from 8 to anything else.
Isn't Robert Sedgewick, Kevin Daniel Wayne - Algorithms 4ed, 2011 the best introductory one? It uses Java for illustrations + accomplished with MOOC https://www.coursera.org/instructor/~250165
tutorials are always simplified, the very basics and for learning only - rarely recommended for anything production. build with containers, also use "docker in docker". pack everything into 1 build-deploy-tools image (jdk, maven, docker, ..) container. "never-ever" use local builds in production - use a build system and a repository. deploy immutable artefacts from your repository. i don't know any tutorials, but a good way to learn for me was CI with gitlab pipelines and docker
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Nope, there is plenty of time to stay on Java 8: https://www.oracle.com/technetwork/java/java-se-support-roadmap.html
How is the migration going? Did you have any applications break?
Can I ask what kind of company you work for / what the application is?
Yes and no. There's no free updates from Oracle for commercial use. Non commercial use on desktops is supported until the end of next year. OpenJDK's jdk8u project is a community effort to provide updates, so if you can find a non-oracle OpenJDK build it will be updated with at least security updates.
Upvote for SDKman, life saving tool!
It made sense to have Java 11 in their LTS release, but the timings of Java 11 release wasn't in Canonical's favour. They perhaps could have handled it slightly better though.
I’m not a developer but if I understand this article correctly, they identified these attacks and increase the cost. More discussion here: https://blog.aion.network/aion-virtual-machine-avm-why-not-wasm-5d044c0010f4
Impressive
I have a pet peeve when it comes to code coverage. For some reason people have decided that 100% code coverage is necessary and must always be reached. So what happens? Since some code is really hard to test we turn it into configuration. Now half the codebase is framework, xml, annotations or what not but because it is strictly speaking not 'our' 'code' we can say with a straight face we have 100% 'code' coverage. Let's all forget now that configuration can have bugs too. And of course I need to know every esoteric configuration option and framework feature because we are using all of them now. I like code, I want to read and write code. Why won't the industry let me.
I don't know about those, but most linux distros come with the OpenJDK instead of Oracles Java.
At work we still use 8, but for my own private projects i am always on latest release.
Yeah no kidding, he’s a clown
Oddly enough, you're right. I've been following [the issue](https://bugs.launchpad.net/ubuntu/+source/openjdk-lts/+bug/1796027) and seen no activity on it. Apparently all the actual activity was moved to [another issue](https://bugs.launchpad.net/ubuntu/+source/saaj/+bug/1814133), which was opened later, has no followers and is on an unrelated package. That's another stupid move...
Looks like it's suffering a lot from 'stitching', here, read more about it: https://en.wikipedia.org/wiki/Z-fighting
**Z-fighting** Z-fighting, also called stitching, is a phenomenon in 3D rendering that occurs when two or more primitives have similar or identical values in the z-buffer. It is particularly prevalent with coplanar polygons, where two faces occupy essentially the same space, with neither in front. Affected pixels are rendered with fragments from one polygon or the other arbitrarily, in a manner determined by the precision of the z-buffer. It can also vary as the scene or camera is changed, causing one polygon to "win" the z test, then another, and so on. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Yes. Plus the idea having line coverage means you have covered all possible scenarios is trivially proven false. It honestly is nothing but a crude heuristic.
That is happening, thanks for the read!! It's also because I had the screen recorder at a weird FPS and the game is rendering at a weird FPS
I've seen the 100% code coverage pipe dream fail more than once. There's a project at my current company that set out from day one to document EVERYTHING, and have 100% code coverage for everything. The day their app hit production, it immediately failed. Their documentation is shit, and 99% of their tests are asserting that the mocking framework does what it is supposed to.
Can you elaborate? Do you mean something like this https://www.sourcetrail.com/?
good bot
UML Class Diagrams? UML Sequence Diagrams?
[Adopt OpenJDK](https://adoptopenjdk.net/support.html) shows continuing support for JDK8 thru 2023.
&gt; I have a pet peeve when it comes to code coverage. For some reason people have decided that 100% code coverage is necessary and must always be reached. I've never met one of those developers that sees code coverage as a goal instead of just a tool. Where are you guys finding these people? Code coverage tools just show you the paths you missed. I haven't met a single Java dev ever that disagreed on that.
&gt; But what I don't like is the overly simplistic, ideologically charged, borderline or outright zealous way that unit testing is promoted and written about. Not disagreeing with you at all, but if it comes to zealotry the "integration tests rule everything" crowd is in no way better. No matter what, IMHO it's inexperienced developers with too strong an opinion that tend to end up at either extreme.
Are all of the JEE javax.* packages mimic'd in the jakarta.* packages, is it as simple as a change to the imports?
&gt; It's true many people have a "hate relationship" with testing and that's especially aggravated when the conclusion is "your code is hard to test, because it's bad". It's begging the question: "no good code is hard to test, because good code is defined as code that's easy to test". We're not having a discussion here, we're just being held at a gunpoint: "your code should be testable, or else". I think you're misrepresenting or at least compounding some issues here. If code is hard to test, you either have to spend too much time testing it, or it's lacking tests because you could not bothered. And I think most of us know that while there might not be a direct causation between 'bad code' and 'lack of tests', the correlation is often strong. So yeah, code should be testable. "How" you do it, well, that's up to you. If your team prefers to have extensive manual test scripts that you work through every release; that's up to you. It's not a team I'd want to work on, but I'm not the boss of you. But I don't believe you can be successful long term with no tests unless your software is trivial. And most software grows to a non-trivial size. &gt; All in all, we can repeat "SOLID" until we're blue in the face (and by God, we do!) but we're not having a honest conversation yet. A honest conversation always includes both sides of the coin. Everything has pros and cons. It sounds like you have had mostly conversations with dogmatic developers instead of pragmatic experienced developers. It's quite a common pitfall for devs to end up as [expert beginners](https://daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/) that have very strong opinions and see their way as the Only True Way. &gt; How about situations where making code "testable" genuinely makes the design of your code more complicated and worse? Everyone has had situations like these. I've been a Java dev for 15 years and can't imagine any application I worked on where the code would have been so much more complex that it outweighed the benefit of automation. You don't need 100% test coverage. You need "good enough" coverage. What is "good enough" is decided by your team. &gt; How is exposing internal details of a class for testing purposes improving the design, for ex.? How is decoupling a simple unit into two more complex units improving the design? How is messing around with a class internals via reflection, thus coupling your tests to implementation specific an "improvement" upon anything? It's pretty hard to follow what you mean here because the examples are quite contrived. I don't see any issue with giving a static utility function default level access so you can write a unit test for it, *if* testing that function in isolation makes sense. If not; the unit under test is the class, not the individual methods. There is nothing wrong with being pragmatic in testing. The goal should be writing good software. I don't believe anyone sees the tests as the goal. Tests, like any code, are a liability.
I feel like an idiot, I don't know how I've missed that this entire time...
&gt; That's another stupid move... ubuntu in a nutshell. why people put up with it, i'll never know. it defies logic and common sense.
For an earlier project (thankfully it is no more) we had a plugin that would calculate the code coverage in the maven build and if the coverage was below x% the plugin would fail the build. Effectively this meant the coverage would slip to the configured percentage at which point whoever did the last commit would take the road of least resistance. You could delete some untested code, write a test, turn code into configuration or change the percentage setting. Followed, of course, by debates on what the 'correct' way of dealing with the problem was. The above was still the honest way of dealing with the issue. A less honest way to deal with it was to write some unused code and then write a test for said code. That bumped the code coverage percentage up, but did nothing. Second option is to write a simple test that passes through the code but triggers an exception somewhere very late in the process, this increases the line count but doesn't do much. And third option you could find some code that was so simple it couldn't fail so no one bothered to write a test for it (getters and setters), and then write a test for it. Yeah the percentage goes up but you won't find or protect against any bugs that way.
This looks great, well done! May I ask how you started a project like this and where others should begin if they are interested?
Still in love with java 8..
&gt; Effectively this meant the coverage would slip to the configured percentage at which point whoever did the last commit would take the road of least resistance. This is a culture problem, not a problem with code coverage itself. You can't fix with tooling (which is why someone probably set the tooling to break on a low percentage) what is basically a people problem. &gt; The above was still the honest way of dealing with the issue. At least you dealt with the problem. The alternative would've probably been that no one would have noticed the coverage slipping. I really don't get why the "but you can fake coverage" argument gets brought up against code coverage. Sure. You can fake a lot. That just makes you a crappy dev.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
AdoptOpenJDK do not backport changes into the OpenJDK repository. They only build and distribute binaries. They are dependent on the community effort to update the jdk8u tree.
A few of our applications are using Java servlets 2. A lot of our stuff broke. 🍿
How Java 17 (next LTS in 2021) will be handled if Ubuntu 18.04 is supported until 2023?
Running/compiling with JDK 12 on my development machine, but targeting 11 at runtime.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;split only for the purpose of the application and design The main argument is that code being difficult to test should, in general, alert you to the fact that it might be poorly split for the purposes of "application and design". Some code naturally belongs in the infrastructure layer and will be mainly tested with integration tests. Other code, what is usually defined as a "domain" or "business" logic is not dependent on any specific type of infrastructure. When you find implementation of the domain code (that doesn't logically depend on any particular type of storage) requires a sql database in order to execute a test, that is a flag that your code is poorly split "for the purpose of the application and design". &gt;This, again, doesn't mean wiring raw SQL queries all over your services Why not? I believe a reasonable answer to this question should generalize to Hibernate and jOOQ as well.
I agree that it is a culture problem. But so what? What happens in practice is that someone says a higher code coverage is good, then this heuristic gets put into a mandatory check, and then the code gets less good because people start rewriting the code to conform to the rule. Many of my colleagues agreed with this assessment and would have loved to solve the issue, but none of us had the political clout in the company to get the change made. And it's easy to see why, you are advocating for removing a code quality tool. People start thinking that you want to get away with writing lower quality code. Properly used code coverage checks can certainly be helpful, I just see that in reality they won't be used right. And don't get me wrong, code coverage isn't the only tool that is misunderstood or poorly applied. This is just one that was glaringly obvious to me from a previous experience. Current experience.. well.. things are not improving much in the IT world.
Just use sdkman.
That would be the idea indeed, as it's one of the proposals. Some proposals are to incrementally update, so you have to constantly be aware of which imports to change and which not, which could take a decade or more.
Seems really useful But not for me right now
@Query(nativeQuery=true,value="select ...") is a thing, you know. what you wrote there works too and there are cases where one needs the composite interface. but if you just need a native query for some reason, you don't have to go there.
Docker isn't really necessary or sufficient for reproducible builds, Creating an ACTUALLY reproducible build is extremely complicated and probably not useful for ordinary development. I invite you to investigate [https://reproducible-builds.org/docs/](https://reproducible-builds.org/docs/) though if you want to use it for a build server. Personally I like building inside docker containers for downloading/building build dependencies easily. I want building my project to just work across all the different Linux distros even if I have to patch and recompile build tools. But I don't usually find the need for that sort of stuff with Java.
Just don't write updates with jdbcTemplate on entities you've obtained through jpa. And one more thing: `jdbcTemplate.query(..., new BlogRowMapper());` I just hate it.
I don't see it as a real problem. The only real issue here is whether specific command line flags used in startup scripts work or not (which is really a minor issue). From a compatibility perspective, there is no difference. A build of OpenJDK without Shenandoah should pass the TCK, just the same as one that has it. OpenJ9 from IBM and Zing from Azul (who I work for) both have different internals that support different GC, JIT, etc. They are still compatible, as they pass the TCK.
Well as I noted in the article, the use case isn't a good example for when to use native SQL in-lieu of JPA. The purpose was to promote that Spring Data JPA offers the ability to create composite interfaces, and provide a straightforward and concrete implementation of how to use it.
May I ask how do I get started in something similar and which libraries used?
nice minecraft clone
On my real job I'm stuck with java 8, at least for a year or two more. But I'm using java 11 for my side projects. I'll stick to LTS versions anyway, both for work and personal projectts.
Great Article! Congratulations! Thanks!
&gt;First of all, the JVM will run the JIT on the same code, multiple times, if it keeps running it, increasing the effort it is willing to expend in optimization, since it wants to avoid this cost, where possible. This means that such an attack would incur a high cost to the attacker. And an even higher cost to the network. &gt;Secondly, we have complete control over the incoming user code, based on our instrumenting transformers. This means that we could identify problematic idioms to change/reject them, in the future. Lol static analysis is a heuristic. have fun with the halting problem
True, they even state that on their site that the builds will be maintained as long as the upstream is updated. But they were the first I saw putting out builds with the security patch Oracle released in April.
Me too
It looks like in your [submission](https://www.reddit.com/r/java/comments/blew6c/javafx_cant_build_project/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
they finally delivered in april 19: [https://blog.ubuntu.com/2019/04/19/announcing-openjdk-11-packages-in-ubuntu-18-04-lts](https://blog.ubuntu.com/2019/04/19/announcing-openjdk-11-packages-in-ubuntu-18-04-lts)
I liked the implicit suggestion of lombok in User.class :) . It looks sooo strange when authors use getters/setters/hashcode/toString in the articles .
Hadn't heard of these, so thanks for the heads up. They're looking like a great bit of kit, and I should double the life of my b, r, e, a, k keys.
I didn't use any libraries pure Java... I would first research how we perceive the world around us mathamatically, as well as that understand 3d math
It looks like in your [submission](https://www.reddit.com/r/java/comments/blfq6w/java_for_forum_site/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks! It started like this https://youtu.be/f3ZDBI1IuFk I have no videos from before that, but the goal was to be able to draw a cube. Then several cubes. Then turn your head left and right, then up and down, then move around. After that it was how to get the cubes to be filled in, how to make them draw back to front, optimization because it was laggy as hell, then basic physics (which aren't done in mine yet)
That’s pretty inspiring, I’m just learning java and now I want to try this.
I was thinking about doing a YouTube series about it, would you be interested if I did that?
Definitely! Keep me updated if you do!
I bet a lot of people also didn't except that. Image your code runs fine, and bam suddenly you are missing `jaxb-impl`.
Except the very title is "JPA or SQL in a Spring Boot Application? Why Not Both?" . That's not about composite interfaces, is about native queries. The contents may be about composite interfaces, fine, but then you should change the title.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We still target 8 in our libraries, but plan to move apps to 11 as LTS. Run all tests on 12 (and 8, naturally).
Let's say you are asking for this: for(int i=0; i&lt;n, i++) { for(int j=0; j&lt;m, j++) { for(int k=0; k&lt;v, k++) { ; // Do something } } } (Deal with the inconsistent tabs, lol) The for loop is telling you that it will execute whatever it is between the brackets n times. This "whatever" is another for loop, that will execute m times whatever-the-fuck is inside its brackets. And it happens that "whatever the fuck" is another for loop that will "Do something" v times. It does not matter how many for loops there are nested, the execution order is secuential, and the program will just find another for loop to run through. Maybe this could help you, as the code up there would be equivalent to this: public void function main() { for(int i=0; i&lt;n; i++) { secondLoop(); } } public void function secondLoop() { for(int j = 0; j&lt;m; j++) { thirdLoop(); } } public void function thirdLoop() { for(int k = 0; k&lt;v; j++) { ;//Do something } } And, as always, and taking into account that you look like a newbie, if you have some kind of problem with these topics, *write the program and debug it*, so you can see, line per line, how the program is running. Hope this helps.
I wouldn't say it's without an IDE, those two choices are just Terminal IDEs vs. Graphical IDEs.
Actually, we had to hold on this, we moved to EKS and now have planned to use AppMesh in the next month or so, sorry I don’t have any feedback on Istio at this point. We decide to don’t move on after one the guys saw a report with memory issues or something like that.
Programming help should go in /r/javahelp. **Removed**
We run JDK 12 in production without preview features. It greatly helps if you try to kick out as many dependencies as possible before migration (it is a good idea anyways but major version incrementations are a good time to do cleanup).
That was literally what I was looking for. So yeah my problem all this time was that for example those excersises printing a triangle using a double for loop, they were always mentioning how the inner for loop would execute eg 5 times for the outer loop and then the the triple nested loop came and I lost it all. Thanks!
Surprised Arch still hasn't updated jdk-openjdk package to 12. Had to manually build.
What did you use to render on screen? JavaFX? Swing?
Did you use swing of JavaFX? I am planning to do on something similar as learning experience. Regarding the math bit, is it just basic matrices and vectors operations (Including the transformation stuff)?
&gt; Microsoft is launching a new command line app for Windows, dubbed Windows Terminal. It’s designed to be the central location for access to environments like PowerShell, Cmd, and the Windows Subsystem for Linux (WSL). Microsoft is adding multiple tab support alongside theming and customization for developers who want to tweak the Terminal app.
Do you have this on GitHub ?
From my limited experience as both a c# dev and a java dev I have a few items to consider. C# shines in aspect of syntax and sugar. It is a really well designed language. However I personally really dislike the ecosystem. As a linux user C# has little use for me that is solved by other languages (java for example). Often it seems many folks disregard the ecosystem of a language before falling for it. As if syntax is everything. Which it definitely matters but it lacks if the ecosystem isn't very good. Tooling and libraries matters Documentation too. C# is a very Microsoft heavy ecosystem (duh haha) and so the tools are very Microsoft focused and contained. The maturity of the language is only starting to grow in the open source world so the available frameworks and libraries really pales compares to java. Im a java fanboy. I admit I am heavily biased. But that's because the tooling and ecosystem suits my personal needs very well. Mileage obviously varies per user.
Avalonia is an attempt at cross platform XAML style UI. This is open source 3rd party. WinForms runs on Mono/Linux.
I very much agree about the syntax and sugar. One of the features that I really loved at first has now become a huge annoyance....async/await. It does greatly simplify things as you aren't chasing callbacks. However, once you use it in once place, you have to use it everywhere. Couple the annoyance of boiler plating everything with all the extra overhead of saving/restoring the stack PER await operation and it just got old, fast. I feel that Java fibers will be a much better solution.
I wasn't aware of this. I thought that only applications written in GTK # ran cross platform.
I honestly doubt this news will change much. The strength of Java is not the language but the JVM ecosystem. It has momentum and mature open source libraries. Projects like GraalVM and Kotlin will further extend that ecosystem. &amp;#x200B; .NET 5 is just another attempt by Microsoft at trying to figure out open source and Linux. There is nothing in .NET 5 that you can't already do in the JVM world.
Don't forget the Task Parallel Library. Sometimes it is better to just kick off a Task and run it using synchronous code.
You don't have to deal with Oracle's licensing agreements if you don't want to. Java is still free, and it will remain free. You can get OpenJDK builds from [Oracle](http://jdk.java.net/), [RedHat](https://developers.redhat.com/products/openjdk/overview/), [Azul](https://www.azul.com/downloads/zulu/), and many others. Most of these builds use the GNU General Public License. Java won't be taking a hit. It just seems that people are not educated about the changes, which the community as a whole should spread awareness about.
Yeah but the whole idea of XAML as compiled XML is sociopathic. So there's that.
It looks like this is going to be the default console for WSL too. Is that..... Norton Commander I see in the image? Oh I do hope it is... I've missed Norton Commander soooooooo much!
JavaFX is much nicer than WPF/XAML. You don't need xml and you can style with CSS rather than yet more XML. Fucking XML is so 2002.
Not really for consumer usage. Use your distribution's package if available though as it will give better integration than manually downloading from XYZ website (Oracle or not). If you have to download manually, do so from AdoptOpenJDK
Beats html.
https://en.wikipedia.org/wiki/Midnight_Commander
**Midnight Commander** GNU Midnight Commander (also known as mc, the command used to start it, and as mouseless commander in older versions) is a free cross-platform orthodox file manager. It was started by Miguel de Icaza in 1994 as a clone of the then-popular Norton Commander. GNU Midnight Commander is part of the GNU project and is licensed under the terms of the GNU General Public License. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
If they could bring WPF / XAML GUI desktop GUI framework to .NET5, that would be amazing.
Personally I use ConsoleZ with tabs for cmd, powershell and wsl. No complains there
It's bizarre how little the command line has changed in the last 25 years. Emojis seem to have been the most significant upgrade. You'd imagine someone could have thought of something better by now.
They will have a linux kernal running on a vm soon...
I'm definitely with you that the ecosystem matters. The C# ecosystem does feel a bit too Microsoft-focused, but part of that is that it was a closed, Windows-only ecosystem for so long. Even then, technologies like Unity (Gaming) and Xamarin (iOS/Android) popped up. But there often isn't the same amount of cool, random projects that Java has from its longer open-source history. However, there's a lot of good things in the tooling and ecosystem. `dotnet watch` just works for hot-reloading of code. Yes, there kind-of are implementations in the Java world, but they all feel buggy and like they don't completely work. Microsoft's announcement even mentions it so it seems they're committed to making it great. Microsoft has put a lot of time and effort into the language server specification. This shows a huge commitment to developers (and not just C# devs). Language support in IDEs/editors has skyrocketted since a community can implement code-intelligence once and have it used by so many editors. Likewise, Microsoft's investment in VS Code is a big thing for the community. They want to support developers. Java has some pretty unfortunate things right now. The lack of a concise POJO is pretty bad in 2019. You end up choosing between code-generators which often generate code that isn't quite compatible with the rest of the Java ecosystem or creating a verbose class where it's hard to tell if it has special behavior or just has so many lines for boilerplate. Even if your IDE generates that boilerplate, it's very easy to add a field and forget to alter the equals/hashCode. CompletableFutures are ok, but can create callback hell, make error handling hard, etc. Microsoft has also provided some great tooling for web development. Java can truly be a pain to get running. ASP.NET is so easy to get up and running. Part of that is that a lot of Java web stuff treats many things as add-ons (literally NinjaFramework calls database connectivity an "advanced topic"). Microsoft is also investing a lot in Blazor (basically being able to build client-side apps using C# and the Razor template engine with that getting compiled into web assembly - plus the ability to render that server-side). I use Java every day. It's a good language and the JVM is a good ecosystem. Microsoft is investing heavily in C# and .NET and they're leaning into a developer-first, open-source mindset. Even if you're uninterested in C# and .NET, Microsoft's efforts on the language server specification, VS Code, and other projects will help a lot. But Microsoft is really working hard to make life easy for developers with C# and .NET, even if they're uninterested in Windows. Unity is very popular. ASP.NET is just a breeze to get developing with. Their Docker directions get you in a container with minimal effort. Their support for Mac and Linux is quite good and their documentation lets you toggle between seeing the command-line way of doing things or the Visual Studio GUI way. Microsoft is putting their money and effort into making something great for developers. The JVM isn't going anywhere, but I think C# and .NET are going to do very well over the next few years.
About time, I can't stand Powershell. Love WSL. I will keep my Git Bash on Windows though and of course real Bash on Linux.
What html? It's all JavaScript.
Ah, I missed the 'SHIFT' part! I'm going to have a look at this one, thanks!
Doubtful because of the amount of legacy products already build on a flavour or java or atleast running on the JVM. Microsoft has a lot of catching up to. I prefer C# personally to Java but professionally Java has been more lucrative.
My experience with JavaScript, first with callbacks and later with promises, is that making asynchronous operations explicit is a lot less error-prone than using threads, but it's literally impossible to wrap asynchronous code in a synchronous API without exotic features (e.g. continuations) that very few languages support. With `async` and `await` primitives, you can at least write async code that looks a lot like synchronous code, which is a huge improvement over older techniques.
I've only just started experimenting with Windows 10 - CmDer seemed like the terminal everyone was using, how much different is this really? ( other than being GPU based rendering )..
Like this? https://www.geekwire.com/2019/together-last-microsoft-will-ship-linux-kernel-windows/
thank you
I'm not one to blow my own trumpet but... toot toot!
Exactly! I was honestly shocked to win. I can't wait for next year's competitions.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [1st Place At BPA NLC! Java Programming!!](https://www.reddit.com/r/programming/comments/blmuwo/1st_place_at_bpa_nlc_java_programming/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I for one welcome this change. I wish them to finally unite the .NET brand, because for somebody who is not invested deeply into their eco system its a maze. You have ADO.NET, .NET Framework, .NET Core, .NET Standard. Secondly, I really hope they succeed on being able to: &gt;"target Windows, Linux, macOS, iOS, Android, tvOS, watchOS and WebAssembly and more." For me, this stemps from belief that we should *improve* our existing technologies rather than jump to new shinny thing.
Thanks
&gt; I understand that companies can't and aren't going to switch tomorrow. They're not going to switch ever. There's only risk and no reward there. And while C# might be a bit of a 'nicer' language, if you want to switch to a nicer language going from Java to for example Kotlin is a lot easier and more or less risk-free. You can't use the extensive ecosystem of Java libraries and frameworks in C#. &gt; I know we aren't mind readers and I know that there will be people who are always against .NET because it's owned by Microsoft however, if we're all really honest, do you feel that the market will start to shift? I have nothing at all against C# or Microsoft. I did a lot of programming in it back in the days and if I ever had to build a desktop application for Windows I'd probably use C#. But people have been 'predicting' C# 'winning' since at least '98 and since then it never really took off.
Yeah, emojis and colors! But screen multiplexing apps like [tmux](https://en.wikipedia.org/wiki/Tmux) have been nice additions though.
**Tmux** tmux is a terminal multiplexer for Unix-like operating systems. It allows multiple terminal sessions to be accessed simultaneously in a single window. It is useful for running more than one command-line program at the same time. It can also be used to detach processes from their controlling terminals, allowing SSH sessions to remain active without being visible. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
&gt; Doubtful because of the amount of legacy products already build on a flavour or java or atleast running on the JVM. It's not just legacy products. Companies have hundreds (if not more) Java developers working / being accustomed to Java tools, libraries and frameworks. What would the benefit be for those developers? Or the company? They're not going to be a ton more productive suddenly , it'll only cost productivity (split codebases) and come with risks (you can't force hundreds of devs to use C#).
It looks like in your [submission](https://www.reddit.com/r/java/comments/blnqsf/how_to_disable_hibernate_logging/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What I dislike about mixing two approaches is that mapping has to be unified. For example, I may have Hibernate configured to handle date, array, enum or JSON types in the way it suits me. I will then have to ensure that RowMapper does the same, which may be tedious. That's why I would prefer using one tech - either Hibernate, JdbcTemplate or MyBatis.
I'd say Cmder already can do everything this terminal can do (apart from the rendering) but it requires an additional tool to be installed. It's great when you connect to a remote machine and find a usable terminal without having to install or copy anything.
True that - never underestimate the power of a standard install.
&gt; especially with Oracle's new licensing agreement? Can someone explain to me why the new licensing agreement -- that people are generally extremely happy about -- scares some people? The new licensing agreement is that Oracle has open sourced, for the first time ever, the entire JDK. Instead of a complicated part open/part proprietary, part free/part paid JDK, you can get the same JDK free or paid if you want support. What is there not to love here? Do people not realize that Oracle JDK and OpenJDK are *literally the same software*?
&gt; It's bizarre how little the command line has changed in the last 25 years. Emojis seem to have been the most significant upgrade. So basically just like human speech. The only new thing is the flood of memes in everyday expression.
Do you mind if I ping you in the following months to ask how satisfied are you with AppMesh? :)
Congratulations bro!
Sure, no problem at all. =)
Oh that's great.
If you do this, would you share it in the post? I am very curious and would love to hear more about what you've done.
Windows is the new Linux /s
Interesting, such approach seems even more useful if you need to install something more specific (like a couple of native libraries) for Java devolopers don't usually have problems managing a couple of VMs :-) People have already managed SDKMAN, there is also [jenv](http://jenv.be/) that helps to switch between VMs easily.
MS has github, VS code, and now this. What has Apple done for devs lately?
I find macOS much easier to develop on, but there isn't much else that is proprietary that they have done - still struggle to find programs that are free/stable/functional for basic stuff tbf
Awesome job. Congratulations, and keep at it!
Congrats
I say go with option 1 the Big Bang. Get all of the changes in at once, let projects absorb them and then move forward. Doing the incremental model would be an endless series of updates as different people would be asking for additional migrations.
Much easier how? Out of curiosity.
Very interesting read. It's good to know (especially now that the 64bit operating systems and JVM more or less the standard) that there are viable alternatives to try out if you need to run huge heaps.
Not a huge fan of the Jarkata name. Java is such a better name. Rolls off the tongue. That being said, I am not looking forward to this refactor.
Only cons I see for proposal 1 seems to be "Java EE user" costs related. But I kinda struggle to see where it will really cost. Don't we just need to make a "Replace All" occurrences of javax. to jakarta. ? Anyone could share a situation where it will costs tens of thousands of € and if it's important comparing to the revenue of their business ?
The Big Bang is the only solution, and can be done with a replace all, which is a small cost. All other options you have to be careful what you replace and have to keep replacing things, so costs much more.
this is awesome. Is it mainly for highschool students? How did you prepare for the competition?
Big bang does not work with binary libs.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Maven Shade?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you!
It's a student organization for both highschool students and adults. I prepared by just creating many random programs prior to competition and reviewing the code and seeing how I could've done things better. I learned a lot!
Thank you!
Thank you! I plan on it.
The whole internet. In my experience, you can post your code literally anywhere, and people will find it, and **will** tell you why it's shit. Even if it's not. Btw Just found r/roastmycode by pure guess. Seems inactive though.
It's basically all the advantages of a Linux OS with a much, much better user interface. Swiping between application windows and having the extra keys is so much more intuitive. I've also not found laptop trackpad that can come near what the MacBook has. I'm by no means an Apple fan either.
Yeah, PowerShell was the only serious attempt I can think of.
&gt; The lack of a concise POJO is pretty bad in 2019. ... CompletableFutures are ok, but can create callback hell, make error handling hard, etc. Both of those are being addressed (Amber and Loom), and while I'm very biased, I think that the Java solutions are better than the C# ones.
Are there still a lot of advantages with Linux? Doesn't the new terminal for instance fix any of that?
"Renaissance is a modern, open, and diversified benchmark suite for the JVM, aimed at testing JIT compilers, garbage collectors, profilers, analyzers and other tools. Renaissance is a benchmarking suite that contains a range of modern workloads, comprising of various popular systems, frameworks and applications made for the JVM. Renaissance benchmarks exercise a range of programming paradigms, including concurrent, parallel, functional and object-oriented programming. Renaissance is completely open source, with the code available at GitHub, and is designed as part of an ongoing, collaborative effort to determine a set of modern JVM benchmarks."
StackOverflow will probably give you a good roasting, LOL
I think there's a CodeReview StackExchange for roasting that is (hopefully) constructive.
Rewrite .class files at your own peril.
I'm in favor of Option 1 (Big Bang) for the simple fact that it reduces the cognitive load on developers. If we go with Option 1, it's pretty simple - anything that was javax.* is now jakarta.*. We don't need to think about it, it's just a 1:1 mapping. Another selling point for Option 1 is that shops can move to Jakarta EE 9 without making any functional changes. Imports only. This is huge for some larger organizations that ship infrequently, and are willing to absorb less risk. Shipping a functionally identical bridge release is a huge plus for some groups.
http://thedailywtf.com/
[https://meta.wikimedia.org/wiki/Cunningham%27s\_Law](https://meta.wikimedia.org/wiki/Cunningham%27s_Law)
TDWTF is amusing but hardly a good objective review of code. One of the stories I remember from there is some day trader and a coding mistake somehow leading to a barge of coal literally being delivered to a day trading office that happened to be on the riverfront. It was a fun read and taught a good lesson to developers, but it had to be fiction.
There are ways to prevent async/await from spilling over into every line of code in your project. I tried to write an [article](https://github.com/jehugaleahsa/artifacts/blob/master/2018/async-patterns.md) about it one time and I think David Fowler did as well, but honestly I am not sure it's within reach of the average developer. It's often easier to just async/await all the things. By trying to hide the asynchronous nature of the code, developers stop being careful and run into all sorts of unexpected issues down the road. I recently looked into Kotlin's new co-routines... I am not sure there's a silver bullet.
I have to agree about Project Loom; I'm extremely interested in it and think it'll be far superior to async/await.
Not especially - it's still significantly easier to develop on a Unix-based system due to similarities with the deployment environment (unless you're using Windows server), as using VMs can be problematic (especially with resources).
Is bash actually better or do you just have those commands memorized?
Well emojis I don't think are the point here. It's Unicode support that's important, it just doesn't make a good headline.
We are currently working on XAML compiler that immediately converts XML to an [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree). Same AST can be built from any other markup style. I was thinking about something QML-like for UI markup and something CSS-like for styles (our styling system is CSS-like anyway).
&gt; TDWTF is amusing but hardly a good objective review of code. But then, OP is asking for a "roast", which is not meant to be objective, but comically insulting. TDWTF does fit that category, I think. &gt; It was a fun read and taught a good lesson to developers, but it had to be fiction. I used to read it regularly. I recall that they acknowledged at some point that most of their tales are "inspired by a true story" rather than actually being true. Which is a shame, because those kinds of stories are mostly only interesting if they're true.
Uhm, yes?
&gt; Not a huge fan of the Jarkata name. Me neither, but Jakarta is okay ;)
Good point on the roasting. OP is specifically asking for some shenanigans.
Maybe the StackExchange Code Revjew board?
TIL! This is the best thing I've seen since [Betteridge's Law](https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines)
&gt; My last question on SO was answered pretty painlessly by someone helpful The people that ask questions on SO have my undying gratitude. They are a brave group of people. Although I know they did undertake an effort recently to make it a less toxic place to, you know, actually ask a question.
Ok, they got me at the multitab.
https://en.wikipedia.org/wiki/Goodhart%27s_law (people do whatever it takes to meet a metric rendering the metric worthless)
Maybe they liked it, like me, but it's complex, I don't remember 1% of the commands in powershell, and if you learn stuff related to powershell, it's specific to powershell. This is different from Unix shells, which are relatively simple and universal. Indeed, powershell is a great tool, but not used too much.
Do you also assume the compensation clauses if the rewritten class files happen to bring down a server in production?
The big bang makes the simple case of finding and replacing everything into a bash one-liner. Please do that.
Once upon a time, focusing on bytes and cpu cycles WAS how you optimized for dollars. And that habit is hard to break. Hardware was expensive, programmers were cheap. You could pay many man years of salary for that expensive computer. Now for two months of a single developer's salary, you can buy a very sweet server. Hardware is cheap. Developers are expensive. Optimize for developer productivity, not computer efficiency. Unless, you're independently wealthy, not running a business, not concerned about profit or shareholders, etc.
The blurb at the end about Clojure performance was interesting. That he mentions high frequency trading a couple of times is interesting.
Ah, a sociopath. Why not instead work to port JavaFX to .net?
Is there anything published about that? I'm curious about how they would have approached it.
Only because it's a good example of a problem that people may have heard of before, and which has very strict latency requirements. Disclaimer, I don't encourage nor suggest using Clojure, Shenandoah, or Java for HFT :).
I've been using the Maven Shade plug-in before, and you could like, you know, test the app with the rewritten class files? Can you finally put those hundreds to thousands of tests you've been building up over the years to go good use. I mean, you do have all those tests, don't you?
I don't get your point. If the provider doesn't offer support for Jakarta EE then you either drop the dependency, stay using the "old" application server or do things at your own risk (like using Maven Shade). That has always been the caes when the provider only provides binaries and doesn't care about supporting new frameworks/runtimes/etc.
One idea - 4TB isn't a lot of data in modern terms. Would you be willing to receive an SSD, load the archives to it, and send the SSD back out? Even if you charged a nominal fee for your time, that could be attractive to amateurs or professional archivists. It would meet your goals to get the data out there. It would not be as elegant as a searchable site, a public DB, or a torrent but it works around the bandwidth question pretty handily. I did some casual number crunching, I assume 4TB compressed is about 40TB uncompressed since its mostly text. That'd cost $800 a month to store it on cheap, slow storage on a popular cloud vendor. It'd be a trifling cost on a modern hard disk. I'd also expect modern search tools to deal with the large blocks of text pretty well. It's all manageable but there are very real costs in dollars and time involved.
Can the Graal JIT compiler be used in combination? There was some videos posted by a Twitter employee about Graal's ability to optimize allocations via better escape analysis with Scala
&gt; Most of these builds use the GNU General Public License. *All* OpenJDK builds use GPL+CPE. The only one that does not is Oracle JDK (the JDK for Oracle subscription customers). Azul's Zing (not to be confused with their Zulu JDK) is not OpenJDK, but is based on OpenJDK, with major modifications. They can do that because I believe they licensed the JDK from Oracle for proprietary use.
Thanks for the clarification!