You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; One commit per change. isn't it one change per commit ? 
So this is only applicable to databases with native reactive drivers though right? This isn't a wrapper for a MySQL synchronous driver?
I would suggest to look in to Spring Boot in Action and Mastering Spring Boot 2.0 [https://dzone.com/articles/top-5-books-to-learn-spring-boot-and-spring-cloud](https://dzone.com/articles/top-5-books-to-learn-spring-boot-and-spring-cloud)
That’s exactly right, sometimes a little util can can be totally unexpectedly useful in different context. Once a one-off search/replace function in C++ helped me build a neat syntax coloring plugin. 
Thank you for offering but there is no specific project. I just like digging into various utils. Like [NASA open source software](https://code.nasa.gov/) . I don’t need to process orbital data or control satellites but I found a lot gems in there that my team and I used in projects over time. 
Don’t forget to check the reference that’s provided. [Spring boot link](http://spring.io/projects/spring-boot#learn)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Maybe this tutorial on creating an agent might help: https://zeroturnaround.com/rebellabs/how-to-inspect-classes-in-your-jvm/
They aren't as good as what's in Java 11 and still have OOM issues. 
Anybody kind enough to gather the last couple years' predictions and tell us how right/wrong those were?
You don't really need a book. From my experience the spring framework has one of the best reference documentations out there, with a huge and active community which basically provides at least one example for every part the framework covers (became a spring certified professional this year. Not once have I used a book for learning what I needed to know) Also, try YouTube. Many live demos, online tutorials, conference talks can be found there. Ultimately i would advise doing some small projects on the side in your spare time. It allows for experimentation without the risk and you'll be able to get a feeling for how the framework works &gt; if you can (and that style of learning suits you) then try going for "learning by doing" :) 
It seems so. Also, it is not reccommended to be used in production, so it is either asynchronous or SQL atm as far as I can tell.
Exactly. That's the introduction: right now, it's only available for Posgres, H2 and one I don't remember.
From the books I know: Spring in Action 4th and 5th editions, Spring Boot in Action, I'd recommend to a beginner Spring in Action 5th edition. Unlike the 4th edition, it covers Spring Boot directly. The material is better structured and is easier to follow and understand. IMHO Spring Boot in Action assumes previous Spring knowledge and covers topics like the use of Groovy/Grails that are not that common and doesn't go deep enough with concepts that each developer will use. Check the reference documentation after reading the material in the book and practicing a little. As others have mentioned, the reference documentation is comprehensive and is helpful to become familiar with it, but having it as a first read for a newcomer to Spring could feel overwhelming. For Spring MVC [https://github.com/spring-projects/spring-mvc-showcase](https://github.com/spring-projects/spring-mvc-showcase), with simple examples might be a useful reference to have. Good luck!
You might also be interested in [this method](https://developer.atlassian.com/blog/2015/03/emacs-intellij/) of opening a file in Emacs from IntelliJ.
Frankly, the tutorials you will find on [spring.io](https://spring.io) are really all you need.
Yeah! They really are comprehensive. Thanks
Just started Spring in action. Seems really good! 
The javabrains videos on YouTube are very good the 28 mins to learn videos on udemy are good too. 
Check some info about the [rotation](https://en.wikipedia.org/wiki/Rotation_matrix) matrix. It's a transformation that when acted on a vector, it rotates it by an angle theta. As for a proof of the transformation, you can find one [here](https://math.stackexchange.com/questions/53143/how-do-we-prove-the-rotation-matrix-in-two-dimensions-not-by-casework).
In linear algebra, a rotation matrix is a matrix that is used to perform a rotation in Euclidean space. For example, using the convention below, the matrix
Basically (and to simplify a bit), spring boot is designed to be beginner-friendly (and quick to dev/deploy) so tutorials pertaining to your particular use-case are more than enough. If books are really what you want, it's Spring itself that should be the focus of your studies.
These posts have really been annoying me because there's nothing to gain. In fact, you're the only one who gains anything because you get views and coding tips. You have inspired me to start my own channel but with a different video format. Thanks :)
Spring Boot In Action or more preferably for specific topics [Baeldung](https://www.baeldung.com/spring-boot) and [Spring.IO](https://spring.io/guides) 
I suggest 11. We've been working on recent projects with Spring Boot and Hibernate using JDK 11, and it was pretty smooth. Some older, lesser known dependencies needed work to migrate but everything works on 11 now.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank's, I'll try. About one month ago I was in a similar situation and I choosed Java 8 but now Wildfly 15 and SpringBoot 2 has JDK 11 support, so the choice is probably safer.
If you're able to choose the JVM, then go 11. Spring Boot is fully compatible. But if you are hosting using one of the cloud web services (Elastic Beanstalk, etc.), make sure to check what version of the JVM they provide. Since you said "Enterprise" I am guessing this doesn't apply.. but if it's a small project and you just want easy hosting, then it might be a concern.
I can use whatever JDK with free commercial use. The only limit I have is that I cannot use docker.
No, this is a private fork. But with a little effort you can apply the mentioned pull request locally and have something similar.
I've never read a book about it. &amp;#x200B; The company I work for pays safari books online. &amp;#x200B; There is a course [Building microservices with spring boot](https://www.oreilly.com/library/view/building-microservices-with/9780134678658/) which is very good and production ready course, I strongly recommend, here We have more than 50 microservices and the architecture is pretty similar to the one they teach on this course.
IMHO, no - because you're allowed to refactor a variable name through the entire source tree with a single change. That's changing a lot of files, but it's one commit.
Just use the Spring tutorials. I found that the books try to push additional stuff while covering the basics. IE Lombok, Thymeleaf, Reactive. But if you are still interested Learning Spring Boot 2.0 by Greg Turnquist. Author may be misspelled 
Just my 2 cents. I think you should learn Spring Core and Spring Framework first. Once you understand those, you can start to learn Spring Boot. Because Spring Boot itself provides lots of "magic configurations" out of the box. When you want to expand and customize it, it will become very troublesome for you. 
My suggestions * Always there will be unknowns and lot of things to learn. No need to worry. * To survive in a Job, both technical and project knowledge is required * Learn your project architecture * You may asked to work in few modules, debug and understand existing modules. * Learn things around your tasks / modules so that you can complete and deliver it. 
Well, let's say you are working on one of the modules of this large project. Let's say this particular module is for making advertisement posters for print, and it does some fancy QR stuff and therefore you need the [zxing](https://github.com/zxing/zxing) library as dependency. The whole point of modularizing large projects is that the only consensus you really need to do this, is for everybody involved in the 'advertisement posters' module to agree, but that's where it ends. You need to set up your build system (maven etc) so that you just add the dep there and not anywhere else. The jigsaw module system already lets you do this trivially: 'require' it in this module and that's the end of that. But now let's flip things around a bit: At the project onset, or perhaps later but with all module leads present, you all agree that guava is something you will all be using, and you'll just talk across module boundaries considering guava types to be perfectly fair game (i.e. your cross-module calls might, say, transfer com.google.common.collect.Table objects to and fro). Using the above concepts, you'd have to put the guava dep in ALL the maven poms of ALL the modules, and you'd have to add 'require guava' in ALL the module-info files of ALL the modules. When the day comes to upgrade it all, everyone needs to scramble to coordinate the upgrade to a new version together. Ugh. Bad idea. So, use a hierarchy. Make one mostly-do-nothing module that all the other modules depend on, and THIS module contains the 'agreed-upon by all module maintainers are central to the entire project' stuff, mostly, dependencies like guava. Use `requires transitive` in this base module which 'exports' the dependency to all modules that depend on it. (all the modules of the project should directly depend on this base module). Don't start treating this as a dumping ground for random stuff (if you start making packages named 'util', think a bit about the impact on the future before you go down that road), keep it nice and simple, because anybody who wants to work on this codebase will have to understand the base before they can move on to the actual module they are interested in. Maven, gradle, etc. offer similar hierarchical setups. 
Use /r/AnEmortalKid's link to the zeroturnaround inspection tutorial for starters. instrumentation's major power is that you get to run some java code BEFORE the VM calls the `public static void main` method, and anytime any class is loaded for any reason, the raw bytecode of this class is handed to you. You can do nothing, you can look at it, and you can even rewrite that class file, but you too have to talk in terms of raw bytecode (specifically, you can return a different byte[] which the VM will read as class file). The class file format is very complicated, the task of trying to interpret them, let alone write them, is many manmonths worth of work. So don't do that, use existing libraries like BCEL or objectweb's ASM library. invoke is mostly completely unrelated to instrument. It's a slightly different take on reflection, really; the stuff in invoke are tools designed for dynamic languages to use. If you don't grok the difference between languages that use python/javascript-style dynamic typing, it'd be quite difficult to even understand why the things in this package work why the work. it's like trying to explain to someone what the parts in a car are for to someone who has no idea that cars are meant to move things and people around. It's gonna be a looong slog and you have no idea why things are that way. So, pick up on dynamic languages first, perhaps. 
We all know Java is the future. He's probably developing the web browser, the backend infrastructure and the front-end in the form of Java applets - Java is the future!
I'd go with openjdk 11 right now. However, I would target it for 1.8 still so I wouldn't have to change my production servers JREs. If your project is going to run on its own machine or container then you don't need to worry about that.
For reference, the post has been republished on [DZone](https://dzone.com/articles/transformer-pattern).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
ah, okay. I understand. thanks 
AFAIK wildfly is not certified for Java 11 yet, so my advice would be to go with Java 8 for now. You can test it later on Java 11 when you are finished. Because probably your application in itself will not be the problem but rather the dependencies.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Wildfly 15 supports Java 11.
I would suggest to go through PRO SPRING BOOT 2 ( 2 Edition). That one is a really a good one. Also go for Spring Boot 2 RECIPES to try things one by one as per the recipes provided int he book. 
In my opinion, Spock is among the best testing frameworks out there - not just in the JVM ecosystem. The parametrized tests alone make it worthwhile, even if you are not using Groovy anywhere else in the project. With the `@Unroll`/`where` syntax combined with the amazing IntelliJ support (auto-formatting of parameter tables), Spock parametrized tests are some of the most readable ones I've seen so far, and I've worked with quite a bit of languages. Mocks are also incredibly easy to set up once you learn the syntax - even the complex ones are much easier to create than with Mockito, for example. While I'm not a huge fan of Groovy in general, I think Spock also shows that there are legitimate uses for scripting languages that aren't, well, scripts. Again, personal opinion: I'll take a statically typed language over dynamically typed one if I care about the long term maintenance of the project, but I have nothing against using one to write the tests. If I wanted "a better Java", at this point I'd use Kotlin rather than Groovy, but I have to admit that Kotlin has no testing framework that comes close to Spock, and I still occasionally use Spock to test Kotlin code.
Aha sorry if your annoyed but I'm proud of what I've been able to accomplish really enjoy doing this work and want to share it. I'm glad I inspired you, what's your channel name? I'd love to check it out :) 
Those interested in the potential evolution of hashing in Java should probably look [here](https://openjdk.java.net/jeps/8201462).
Note that Oracle JDK 11 requires a paid commercial license for production use. See [https://blog.joda.org/2018/09/do-not-fall-into-oracles-java-11-trap.html](https://blog.joda.org/2018/09/do-not-fall-into-oracles-java-11-trap.html).
Thanks! I wasn't aware of [JDK-8201462](https://bugs.openjdk.java.net/browse/JDK-8201462) :)
I'm using the AdoptOpenJDK build.
Spock is fantastic of course. There’s also https://github.com/cuppa-framework/cuppa which has so much promise. That said 11 months since the last commit :-(
It may sound exaggerated, but I agree with everything you said :) Although I'm only starting using Spock (I wrote my [first spec](https://github.com/tlinkowski/UniJ/blob/08c5e0bef026aa424060478dc9e78419ab37c9a0/subprojects/unij-test/src/main/groovy/pl/tlinkowski/unij/test/provider/AbstractUnmodifiableListFactorySpec.groovy#L30) two days ago), and I have much less insight than you in this regard, it's hard not to appreciate how neat &amp; concise Spock specs are compared to JUnit + Mockito tests.
While Cuppa most likely possesses certain strengths that I'm unaware of right now, at first glance its syntax looks quite similar to [Spek](https://spekframework.org/)'s. And I must say I'm not very fond of Spek mostly due to this syntax, which I find somewhat confusing (but perhaps it's only a matter of getting used to it).
Ah, I didn't realized that wildfly 15 was out. I already had a hard time making arquillian work with wildfly 14.
Happy New Year! On brief viewing, without getting into details, it appears that your code is very repetitive with lots of long lines copy / pasted. It seems your code would benefit from the "Extract Method" refactoring. Also, you seem to have a lot of code in (one?) big class(es). It might help to organize more into classes that each have narrower responsibility. I also wrote a game (board game with drag&amp;drop and sounds) in Swing and would appreciate if you took a (critical) look: [https://github.com/odoepner/bagh-chal](https://github.com/odoepner/bagh-chal) The project uses DIY (do-it-yourself Dependency Injection) and tries to be very object-oriented and free from copy/pasted code. :) 
There is a lot of copy pasted code, I've been going through a lot last week, and still working on it now to try and deal with a whole bunch of that stuff and just generally tidy it up. I would love to take a look at your game once I get back home mind if PM you to talk about it?
Spock can also be compiled statically.
Good for you.
How well does it work with spring tests?
I'm aware of that, but I still prefer Kotlin over statically compiled Groovy. A couple of Kotlin testing frameworks with a decent Mockito wrapper and assertion library are perfectly usable, but I still think nothing comes close as far as parametrized tests go. I find Spock DSL the most readable and intuitive.
Using a different language for testing can introduce more trouble than benefit. For example, we use Gatling for testing and while Scala is technically a "superset" of Java the differences are large enough that it causes problems. Most Java devs don't know enough Scala to be proficient, etc.
&gt;I'll take a statically typed language over dynamically typed one if I care about the long term maintenance of the project, but I have nothing against using one to write the tests Tests are something one doesn't have to maintain!?\^\^ I have no idea why test code should be different from the rest of the project.
Agreed, although to be fair - Groovy is a lot easier to pick up for Java developers than Scala.
You do, but then again - I don't think it's that simple and it comes down to a few issues: * The development speed. It's much easier to develop comprehensive test suite when the tooling is not standing in your way. Parametrized tests were such a pain to set up properly in JUnit 4 that it lead to unnecessary duplication of test cases in a few projects I've seen. And don't get me started on more complex method mocks that have to intercept the parameters. Spock tests are often simply faster to write. * Tests as documentation. Tests are supposed to show you how to use the tested APIs. Spock test suites are often well structured (`given-when-then`, `where`) and very easy to read - without the ceremony, duplication and visual clutter of JUnit. The code is shorter and easier to go through. We found that rewriting JUnit tests to Spock usually simplifies and shortens the code, especially when mocks are involved. This also helps with the maintenance. * Production code does not _directly_ depend on the tests. What I mean by that, is that the test suites do not have APIs that are consumed by your production services. Tests are very important, but they are not the core of your system that other components depend on. You can cut a few corners and use dynamic typing where reasonable to improve the development speed or readability, without having to worry about the rest of the project becoming hard to reason about. This is not something you could do to the rest of the code without sacrificing the predictability of the application. I have no metrics to share and it's very subjective, but I honestly think Spock is one of the best choices as far as JVM testing frameworks go. Parametrized tests DSL alone makes it worth giving a try.
I put it into a project that I've not yet released on GitHub, and orchestrated unit, service and selenium tests in a single phased/gated execution. It was really lovely to use. The only think I couldn't do, but wanted to was right click on a node in Intellij and execute tests there and deeper. I wish it had forward impetus.
That works as does Amazon's JDK and Oracle's OpenJDK. Basically the only one not free is OracleJDK.
Agreed. 
This post looks at Spock and gives JUnit 5 alternatives. I'm sure there are some features that you can do in JUnit 5 that are harder in Spock. Also its missing a few things: * **Conditional test execution**: Rather than assumptions you can use annotations derived from interface [`ExecutionCondition`](https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/extension/ExecutionCondition.html). E.g. `@TestOnLinux` or `@EnabledIf("2 * 3 == 6")` is already available amongst others. Of course you can create custom annotations. Links: [Junit 5 Conditionals Guide](https://junit.org/junit5/docs/current/user-guide/#writing-tests-conditional-execution), [CodeFx](https://blog.codefx.org/libraries/junit-5-disabled-conditions/#A-Custom-Condition-EnabledIfReachable) * **Data-driven tests**: There is not just `@ValueSource`, but also @EnumSource, @MethodSource, @CsvSource and @CsvFileSource. Then there's `@ArgumentSource(MyClass.class)`, a custom annotation implementing the `ArgumentsProvider` and argument converters. You can have all sorts of input sources. Links: [Parameterized Tests](https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests), [CodeFX](https://blog.codefx.org/libraries/junit-5-parameterized-tests)
I am curious, could you please share what those 'very approved approaches' are? I know that visual studio uses partial classes to separate gui code and user code, but effectively its the same thing. GUI builder has to keep track of user code and auto-generated code, either in the same file or different files. 
Agree 100%. Also, tech changes so fast these days that the nitty gritty details in books can't be trusted. You can understand the core principles from articles, tutorials, videos and spring's very thorough documentation.
MSSQL has a driver.
I am a bit tired of replying into some kind of *fan boy* topic - obviously lots of readers are just downvoting as I have a different opinion (and experiences made!) But I will give it a try: As you said the approach by the VS Winforms editor is to separate user code by automatically generated code by using the *partial class* approach. It is imho not the same thing as generating *one piece* of code, as there is a physical barrier for devs that keep them from editing the wrong file. The Studio itself hides the GUI part quite well too by not showing it in the project tree on class level. Then there are the approaches to store and use external descriptions (mostly in some xml dialect) as source in order to generate code or generate runnable code at runtime. Xaml for WPF or Fxml for JavaFX generated by the Scene Builder are examples. Qt takes a similar approach since the end of the 90ies. With the PyQt bindings you could even omit a static code generation step and create the ui components from that file at runtime (this is possible with JavaFX too iirc). If you generate code from such a description you can prevent users from editing the wrong file by simple mechanisms: First of all the file will be overwritten at every build task, so even the dumbest dev will get it soon, that he should better take off his hands from those files. Then you are forced to *use* the generated component by using composition or inheritance (or a mixture of both). I had no problem at all in projects with the separate ui description file I can remember. Even with the Winforms approach I often ran into trouble as sometimes undo actions don't clean up the ui part or the event handling declarations. So you must revert the changes or manually repair the mess. The Swing project I was involved (which is 10 or more years ago to be fair) used an editor as it is described by the OP. It was a mess! So often the editor couldn't keep up with the manually changed sections and then you had to grasp, what went wrong or how to change the structure of the code. Also it misguided some inexperienced devs to integrate too much logic into the GUI class - that was of course primarily due to their experience level, but the other approaches would probably made it harder to abuse ui code. I believe that other devs have made similar experiences and that those has led to approaches that favour an explicit description. Qt does this since 20 years, WPF and javafx approximately since ten years. The praised approach of the swing world is surely older besides qt probably. Are there counter examples of newer date, that favor the "code as ui description" for GUI editors?
Go with 11! You’d save yourself a terrible headache when going from X to 11 later. Besides that, there are numerous performance optimizations(string concat, g1 even more parallel, ...), cool language features, modules, graal and much more
I don't watch the show, but Java is primarily used for web servers. So I would say it would likely be server based applications for the infrastructure.
See also: [https://aws.amazon.com/fr/corretto/](https://aws.amazon.com/fr/corretto/) [https://github.com/corretto](https://github.com/corretto) &amp;#x200B; [https://adoptopenjdk.net/](https://adoptopenjdk.net/) [https://github.com/AdoptOpenJDK](https://github.com/AdoptOpenJDK) &amp;#x200B; [https://github.com/ojdkbuild/ojdkbuild](https://github.com/ojdkbuild/ojdkbuild) &amp;#x200B; [http://www.azul.com/downloads/zulu/](http://www.azul.com/downloads/zulu/) &amp;#x200B; [https://jdk.java.net/11/](https://jdk.java.net/11/) &amp;#x200B; [https://developers.redhat.com/products/openjdk/download/](https://developers.redhat.com/products/openjdk/download/) &amp;#x200B; [https://github.com/SAP/SapMachine](https://github.com/SAP/SapMachine) &amp;#x200B; [https://bell-sw.com/java.html](https://bell-sw.com/java.html) &amp;#x200B;
I agree that using different languages for main and testing has certain drawbacks. However, I believe that with Groovy it's not that bad because Groovy is much more similar to Java than Scala is (to the point that nearly all [valid Java code is also valid Groovy code](https://en.wikipedia.org/wiki/Apache_Groovy#Features)).
Yeah, that's a common problem with tooling : * do you choose something you like most, but it's not very popular yet (so you risk that it won't be developed actively), * or do you choose something you like a bit less, but at least it's quite popular?
Unfortunately, I don't know - I have never used it with Spring.
I really liked JavaBrain's tutorial series for a quick start to Spring Boot. It's a few hours long, but a great way to get your toes wet.
Java 8 wont receive any improvement but bug fixes! Java 11 modular is the way! 
I'm glad they pulled raw strings from Java 12 - better that they get it right the first time than have something that limits potential features in the first due to backwards compatibly issues. For me, including the ability for string interpolation like what's in Kotlin or Ruby should be a top priority. It's an incredibly-useful feature compared to the two options of building up a string piece-by-piece or the awkward syntax in String.format() that Java has available right now.
Interesting insight, thanks! I searched and found that Spock also has conditional test execution ([@IgnoreIf](http://spockframework.org/spock/docs/1.2/extensions.html#_ignoreif) and [@Requires](http://spockframework.org/spock/docs/1.2/extensions.html#_requires) annotations), although when it comes to data-driven testing, I have not found functionality like `@Enum/Method/CsvSource`. In any case, you're right that the blog post would've been even better if it had covered those aspects. &amp;#x200B;
Agree - string interpolation is far more useful than not having to write escapes.
 Oh I hate String.format. Even without the better syntax they could at least have not made format a static method. 
Doesn't Elastic Beanstalk allow you to use docker images in which you cna put whatever you want? Including jdk 12 if you feel like it?
My fav is Perl's qq(). You can do `qq( one two);` 
I can't agree more. My first job was in EE (Wildfly) and while I knew I could pickup Spring relatively easily for my second gig, I unfortunately had to dive into an already existing Spring application, which made it difficult to really understand just WTH Spring is doing under the covers, really understand how Spring Profiles works, understand the dependencies, etc. My current job gave me the opportunity to start a Spring Boot application from scratch and build it up however I saw fit and while I am by no means a Spring guru, I'm far better with Spring than I was at my last job in only 3 months.
String.format was once a headline new feature though in Java ;) We all awed at that Java could now finally do something like that too.
When I was younger, the former.. nowadays the latter 
The idea was certainly nice, but I get the impression the people that implemented never used it a few hundred times to see how awkward it was for a developer to use. 
This. For a thorough understanding of the spring framework it's a good idea to start with the core and take a look at spring boot later. 
What is awkward about it? It's basically the traditional printf format, known to every programmer since 1970. Wouldn't re-inventing the wheel have been more awkward than adopting a de-facto standard? I don't see why all other forms of string interpolation are somehow superior. 
Not OP, but two things which are frustrating: 1) is simply the method call to Strings.format() adds clutter, and 2) positional args is cumbersome after a while It's not a huge HUGE deal, but it adds up over time. Having inline string interpolation would definitely reduce total lines of code for us, and it would make templating (namely templating our test mocks) easier. It's not the end of the world either way. Just makes code fresher and more pleasant to read, in my opinion
&gt; At first blush, the simplicity of the Rust approach is attractive; just let strings span multiple lines, with no new syntax. The obvious counter-arguments are pretty weak in the current age; if you code in IDE, as most developers do, it is not easy to accidentally leave off a closing quote, and the syntax highlighting will make this obvious in the event we do so anyway. But, if we look through the lens of our use cases -- such as JSON snippets -- we see that this approach fails almost completely, because you _still_ have to escape the quotes, and almost all multi-line snippets will have quotes. So, let's cross this off too. The same applies to using a letter prefix for multi-line strings; it doesn't address the primary use case. But if "raw" and "multi-line" are orthogonal, as is discussed at length, then this counter-argument makes no sense at all. If they're orthogonal then crossing off a solution for the latter on the basis that it doesn't solve the former is just complete nonsense.
It should work just fine [https://github.com/kkapelon/java-testing-with-spock/tree/master/chapter7/spring-standalone-swing/src/test/groovy/com/manning/spock/warehouse/product](https://github.com/kkapelon/java-testing-with-spock/tree/master/chapter7/spring-standalone-swing/src/test/groovy/com/manning/spock/warehouse/product)
What's wrong with String.format? I for example would love to be able to write regexps without all those escapes.
There are so many things wrong with it. First of all it's a DSL embedded in a string, you don't get compiler support for it. Then it's super fragile, when your have a string with 4+ parameters it becomes awkward to add an additional parameter and assign it at the right position in the variables list. Also the whole concept of dynamically defining parameters in a string and then supplying them after the string is just awkward to use. Inline string interpolation like seen in Scala (and others) suffers from none of these issues.
I wasn't born in 1970 and I wasn't familiar with the printf syntax. Therefore the String.format was always weird to me.
Having got a bit bored with Java over the years I wouldn't re-write it in Java. If you want it JVM based I'd use Kotlin. If it can run under node I'd use Typescript, which having spent years hating Javascript, I've surprised myself by quite enjoying. &amp;#x200B;
There's not a direct link between the string and the variables you want to place in it. First, you have to indicate how *a* variable is to be transposed into the string, then you indicate *which* variable is supposed to get placed in that position. This can be the source of two errors: 1. You put the wrong marking in for the variable (e.g. a %d for a string variable). 2. You mix the order up, writing String.format("Foo: %s, Bar: %d", bar, foo) when you wanted to write String.format("Foo: %s, Bar: %d", foo, bar). The Java compiler will happily compile the logic error without any indication that something's wrong. Compare this to something like \`\`\`Foo: $foo, Bar: ${bar.toNumber}\`\`\` - much more straightforward and with less risk of logic errors. &amp;#x200B;
It's awkward because static methods are shit for API discoverability in IDEs. There really is no good reason for it to have been static. Should have been an instance method.
Nashorn is basically complete and stable at this point. Java 8 isn't going to disappear anytime soon - it will be around for years and years to come. So why not wait and see? If GraalVM becomes a success you could consider migrating to that if you want, but why do you need to do anything?
When you say "Nashorn could die soon", what do you mean by "soon"? Nashorn in JDK 11 is deprecated, but it's not gone. Oracle will be supporting JDK 11 until September 2026; at that point, maybe Nashorn will die, or maybe it will continue to be maintained as a third-party project. Rewriting your entire codebase right now in a different language because Nashorn \*might\* become unsupported nearly eight years from now seems... rather extreme. In your shoes I'd wait a couple of years before committing to that amount of (possibly unnecessary) work. Maybe GraalJS will do the job, maybe Nashorn will be continue to be developed, maybe another option will appear. I somehow find it hard to imagine that we'll actually end up at a point where there are \*no\* viable options for running JS on a JVM.
It'll be "terminally deprecated", but it's likely not being removed soon. Personally I'd just stick with the last JVM before it was deprecated 
These are advanced topics and not suitable for novice programmers. To do anything useful with java.lang.instrument you would need to be able to handle bytecode manip and rewriting. This is best done with a library - so maybe learn a library (maybe ASM - [http://www.javamagazine.mozaicreader.com/JulyAugust2018/Default/39/0#&amp;pageSet=39&amp;page=0&amp;contentItem=0](http://www.javamagazine.mozaicreader.com/JulyAugust2018/Default/39/0#&amp;pageSet=39&amp;page=0&amp;contentItem=0) ) first
What are your goals? This sounds like it was a skunkworks project wherein you purposely chose a novel technology. If you want to turn it into a platform that's stable, long-term, rewrite it in vanilla Java. If you want to keep it as a testbed for interesting things, fiddle with GraalJS, or port it to Node, or experiment with (insert your preferred novelty here).
The project depends heavily on JAIN-SIP which is only available in Java. I could look into alternative in other languages but I doubt the will be anything as mature as JAIN-SIP.
Originally I build the project for pure fun, but since many people actually liked the idea I'm thinking on taking seriously.
Kotlin works very well w/ Java libs. You could also write it as a Kotlin multiplatform project, have expect/actual class/interface separation, then have a simple JVM impl that uses that Java project (Kotlin works very well with native Java libs). Then if you move to another lib or go another route, ala Kotlin JS or Kotlin Native, you just have to impl that abstraction. Granted with something so heavily IO based, probably not much benefit to doing this abstraction prematurely.
It looks like in your [submission](https://www.reddit.com/r/java/comments/abyjn3/what_is_your_plan_for_java_support/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Our team is migrating to OpenJDK on all existing and future projects moving forward
All good points. I seems that it makes more sense to stick with Nashorn for as long as possible. 
That's just, like, your opinion, man. :) When String.format was introduced, most programmers would have long been familiar with the printf syntax, so they didn't need to learn a new DSL. String interpolation, the groovy way, has sometimes caused me problems with what is known at compile time, and what at runtime. Also, when I change a variable name, I now also have to change the format string. In any case, this isn't a feature that I use so often that I completely understand the emotional reactions to my post. For formatting of larger text, you generally use a templating engine, not string literals, and for log statements the SLF4J interpolation syntax. 
It's better than nothing. But, which of these seems more natural? `String.format("%s went to the %s to buy %d things", name, place, qty)` or `s"$name whet to the $place to buy $qty things"` Start adding some logic to the values and interpolation wins hands down.
It actually wasn't the printf syntax that bothered me (although others have pointed out valid problems with it). It's the fact the format method is static. Rather than String.format("the string") it would have been so much better as "the string".format() 
You're thinking of something like "I have %2.2f foo".format(amount) instead? I think they did it this way to make the syntax as close as possible to printf. It was actually a requested feature at the time. 
Thanks for the detailed reply, I appreciate it. Personally I don't mind either approaches, when I used Gtk, Glade has similar approach of generating ui at runtime, which I also enjoyed working with for one of my tools. My only problem with most of the other tools is the time it takes to setup. Like downloading source code, mingw, etc and compiling them in Windows (my work laptop has windows). One nice thing about java/netbeans is it has 'batteries included' feel and setup takes only minutes. Nowadays everything is 'going cloud', which sucks as the newer languages don't have good support for GUI like java has with swing. I experimented with go, rust, D etc and using a browser as front-end, but boy its not as simple as whipping something quickly in netbeans :) &amp;#x200B;
Changing the variable name doesn't really affect anything. IDE refactoring will automatically change all references to the variable (including in string interpolation).
I can imagine printf was a requested feature, but I'd be surprised if people specifically said it mustn't be an instance method. Java has syntax that is more programmer friendly than C.
If you are looking for a light weight code editor, Visual Studio Code with Java Extensions from RedHat does a pretty good job.. And, if you are looking for a full fledged IDE, you can go for IntelliJ Community Edition from JetBrains or Eclipse..
I respect your opinion and will do some more reflecting/thinking on it, thanks for writing this out.
There are many reasons for raw strings. It's not black and white. For example, looking at the actual needs, being able to avoid having to escape a single double-quote character is something you need rather a lot (comes up if you want to put XML, HTML, JSON, and arguably SQL into java strings). Being able to avoid having to escape a backslash... that comes up a lot with regexes, and not much else (windows paths and some pretty exotic strings-in-json-with-quotes-inside-java-strings recursive stuff). If it's hard to cater to them all with the same language construct without introducing other downsides... perhaps the right move is to not try to cater to them all. Perhaps cater to the notion of wanting to avoid having to escape quotes separately from the need to write regexes. 
It's more concise, and also ensures you're passing the correct number of arguments at compile time. It's possible to have both - for example, C# allows you to use `$""` for an interpolated string (embed expressions directly), `@""` for a raw string (no escaping needed), and even `@$""` for a raw interpolated string.
Piggie backing. I like IntelliJ, have been using that and Eclipse lately. Also Netbeans isn’t too bad. I would suggest whatever IDE you choose, find a tutorial video to follow a simple project in that editor. Just look for a Hello World example with that IDE, it will help. And if you get errors - google the exact error and you should be able to fix it.
The only issue with the C# way is that it performs worse. String.format simply replaces but interpolation requires scope access etc. 
Just happy that the are probably moving away from the dead-key backtick (means certain keyboard types wait for further input to complete a character for instance to get a è).
Highly recommend IntelliJ
What? It literally [compiles to](https://sharplab.io/#v2:C4LglgNgPgAgDAAhgRgNwCgYGYkCYEDCCA3uguUjjACwICyAFAJQlkXsqIDOCAvAgBIARADsA9gHcEYHsQAiAQ2ABTACpgAtsoB0AOUkBfIRnYH0BoA=) a `string.Format` whem used as a string.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Just think about it for a second or 2. Do the math. 
Could you help me understand what you mean? How does it perform worse when the two are literally the same after compilation?
Is string interpolation not a goal?
This. Purchasing their full product pack for last 3 years, best investment ever. 
Also amazon has an OpenJDK called Corretto. I looked and jrunscript is happily there.
Worse performance by the compiler. Haven't you noticed that C# compiles way slower than Java?
Extremely great IDE, absolutely love IntelliJ compared to Netbeans and Eclipse. Going from Notepad to Eclipse (I was 13 I had no idea what an IDE was!) already blew my mind, going from Eclipse to IntellJ blew my mind almost as much! That's when I got in to college, and the student license is a saver... I do more personal work in Kotlin, but all my class work in Java (because thats what mr professor wants) and IntelliJ is the perfect IDE for both.
What
String interpolation is not the cause of c# compiling slower than Java. 
Disagree, though I see where the advice is coming from. I think it's beneficial to start with a super small Spring Boot project and work backwards to override configuration &amp; learn about what's going on under the covers. That way you aren't ever that far away from a working project.
My emacs\\vim friends disliked intellij for the same reason, and I pointed them to the emacs and vim plugins, and now they love it.
Definitely recommend starting with visual studio code and using the Java extension pack. IntelliJ and Eclipse are amazing tools, but they have a learning curve all their own. Vscode will get you VERY far and it's much easier to get started with. For the medium-sized Java Spring projects I develop on at work my daily driver is vscode. So if you're just starting out, I promise you you'll do just fine with it.
Why don't you and u/jCuber put your money where your mouth is and write your own implementations rather that living in a delusion and then report your results here. You're a grown-up right? I'm sure you can spend a weekend or 2 doing the experiment. 
Im not sure why you're so upset about it, but it's pretty much common sense. Do you really think that of all things, the one thing that is going to slow down a compiler is string interpolation? And not the fact that C# is compiled at a much lower level than Java, using IL rather than JIT compilation via the JVM?
GrailSort is a stable, in-place merge sort in O(n log n) worst time. Available here from its original author, Andrey Astrelin's GitHub page: https://github.com/Mrrl/GrailSort. A bar graph visualization is available here: https://youtu.be/xoR-1KwQh2k?t=375.
No matter if you're right or wrong, taking such an extremely condescending tone just makes you look like an ass and personally makes me assume you have no idea what you're talking about. 
I'd put my vote in for Haskell, adding that the purity it espouses has helped me work more comfortably with immutable data structures, which goes a long way toward thread safety. 
I really dislike the raw "state" path with the \`\\-\` and \`\\+\` switches, I would prefer the \`R\` prefix (or actually better the small \`r\` one similar to python).
They say why in the linked document. It burned a character and it was un-Java like. Many people had valid concerns about it. Allowing newlines in strings is an obvious decision.
This is the worst solution possible, suddenly your string has to know every visible variable - PHP style. Better solution is to provide a map: \`"$name went to $place to buy $qty things".interpolate(Map.of("name", "John", "place", "London", "qty", "2")\`. &amp;#x200B;
That's because Corretto is only Java 8 right now. Java 11 support is incoming.
Yes, that's what string interpolation means. Many languages have it, including Groovy, Scala and Kotlin.
You're the reason 90% of software is shit. So thanks for that. Toddler.
Not currently. But they haven't ruled it out in the future.
Why Nashorn and not just plain Java?
Right now we develop on jdk11 and ignore module system. If you want or real version is unclear, can use 1.8 as target compile. &amp;#x200B; HotSpot vs OpenJ9 - if you dont know then you dont need to worry about it. 
Isn't the proposal in [http://cr.openjdk.java.net/\~jlaskey/Strings/RTL2](http://cr.openjdk.java.net/~jlaskey/Strings/RTL2.pdf)irst, [.pdf](http://cr.openjdk.java.net/~jlaskey/Strings/RTL2.pdf) in a bit of opposition to Brian? &amp;#x200B; &amp;#x200B; Brian says: "\[...\] let's try to avoid focusing on our own personal preferences, or be distracted by unfamiliarity \[...\]" &amp;#x200B; Jim says: "\[...\] This concept is unfamiliar to Java developer \[...\] Familiarity is key to feature education \[...\] If you buy into the familiarity argument, then double quote is really only choice for a delimiter \[...\]"
It wasn't, it is named "Raw String Literals", so it is quite opposite to interpolation, not even orthogonal.
Yeah, and I think it would be prohibited by coding style in major projects. It was discouraged in PHP also, python style that I showed above with a map argument is less "script-like".
Yeah, but that arguments are not that good for me. OK, burning a character is maybe a valid one - but this will come up with each new feature and we will end up in 50 years with a backtick that is not used in Java :) As for valid concerns from other people, I've seen only one - unicode escapes.
I'm still hoping the syntactic token will be changed to `“string content”` or `«string content»`, for a bit more of a literate feel
What need is there to wait? GraalJS is already fully ECMAScript 2018 compliant, which is more than Nashorn could ever say, and is higher performance too. GraalVM and GraalJS are considered production-ready. Perhaps you don't want to gamble that Graal will take off just yet, which is not entirely unreasonable ... but even if development stops today you at least won't be worse off than sticking with Nashorn. Anecdotally from talks etc. Oracle appear to have high hopes and big plans for the long-term future of Graal so I don't expect it to go away any time soon. By all means wait for it to mature and better establish itself if you're worried about wasting time. But since you mention in another comment that you were doing the project for fun, well you at least won't lose anything by converting, and it might be fun to gain access to the more modern language features etc. Personally if I were considering the switch for a hobby project I'd just jump right in at this point.
I am pretty sure this is the wrong subreddit for your topic because the value is unrelated to Java or Programming in any common sense. I think you have better luck to find an OpenCV professional in those specific subreddits regarding OpenCV or in that specific math area. &amp;#x200B; There is 100% correct threshold value because it depends what you want to achieve. In the end, you could brute force the values and compare the results.
And you are the kind of engineer that I'd never hire, calling someone "toddler" after this interaction is, at minimum, ironic... Grow up, dude.
What is the issue with having a closure of scope that is carried when doing the interpolation? It's 2019, we want QoL improvements that other languages have had for decades now... If your code needs better performance (memory or CPU-wise) you just carry on doing the techniques available today, on the other hand the other 80% of developers that don't need to care about your constraints have a much better idiomatic way to do it. Java is still verbose as fuck to do some stuff.
The string hasn't got to know shit. The compiler does. You can just transform it to regular string building.
Offtopic but just try different threshold values to see if and how well they work, it's not rocket science. Another protip: Hough transforms don't work too well in practice, they expect the shapes to be quite idealistic, so don't be surprised when it doesn't work out.
And I wouldn't hire a crybaby toddler like you. Go have a timeout.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have a question: which application server are you using? I'm trying to use Wildfly 14 but I'm encountering a lot of issues with SpringBoot 2.1.1.
One app uses a separately installed tomcat, and another uses the embedded version from Spring Boot. I've found the second is definitely easier, but both run Java 11.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[You really love to use that line, don't you?](https://reddit.com/r/JordanPeterson/comments/ac18x4/_/ed4lox3/?context=1) Yeah, I'd NEVER hire an engineer that posts in /r/JordanPeterson, rofl. Incels...
Project much? Incel.
This is a common artifact of aliasing. From the `java.awt.Graphics` docs: &gt; Coordinates are infinitely thin and lie between the pixels of the output device. Operations that draw the outline of a figure operate by traversing an infinitely thin path between pixels with a pixel-sized pen that hangs down and to the right of the anchor point on the path. ... So, if you want to rotate a shape, you must compensate the fixed down-right bias of the drawing algorithm. Or just enable anti-aliasing. Or use image maps and stop drawing shapes at runtime.
Man, this is impossible to read on mobile. Lines are fixed length and some are like 2000 characters long and doesn’t soft wrap, even in “readability” mode...
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
So this is the reason. &gt; ...hangs down and to the right of the anchor point on the path... I tried anti-alising, but the difference is still visible and look a little bit weird. I can't have image maps because the size of block can be different. I think my solution is to &gt;compensate the fixed down-right bias of the drawing algorithm. &amp;#x200B; Thanks! &amp;#x200B;
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
But *this* pile of dog doodie has *glitter* on it!
Kudos to the Java team for really thinking this through and pulling back when they realized more was needed. Frankly, I wish they'd done this with other features (Java Modules for example).
Good luck. This is annoyingly hard to get right. 
I know :( Thanks!
A backtick is a much cleaner delimiter than triple double quotes!
So just like any other lambda?
&gt;It's awkward because static methods are shit for API discoverability in IDEs Seems like it wouldn't be very hard for IDE's to provide intellisense for static methods that could be applied to your current object, almost like assuming an implicit import for all possible static methods when building the list.
I originally started kind of as a hobby but now other people are starting to use the project. I guess that another option is to fork the project and do some work with it until I’m comfortable switching.
I really hate reading backticks. Depending on the font it can be VERY hard to tell it from a ' at first glance.
Amazing. I will have a look at it. I Recently used some days as well setting up a JSF project. I just love the way the java community keeps sharing with eachtoher. The fact that you used time so the rest of us can save some is fantastic. Thank you. 
I think the perl syntax is much more readable than the triple-double-quote, e.g. String s = &lt;&lt;"END"; some "quoted" text here END and without interpolation String s = &lt;&lt;'END'; some "quoted" text here END 
Maybe a backtick is too subtle in some fonts (but I haven't noticed that). But triple double quotes is too huge and ugly. A main point of the raw strings is more compact code - """hello"""" doesn't do that.
Have you checked out [badass-jlink-plugin](https://badass-jlink-plugin.beryx.org/releases/latest/)? Custom runtime image, modified Gradle application plugin launch scripts, a nice experience overall.
Why would you triple quote a single line string. Raw strings are about usability and ease of understanding, not about fewer chars.
No, but I use maven. but I'm sure the tooling will adapt when more people have to deploy on java 11.
Lambda requires a variable to be final (practically final), so no, not like lambda.
Yes it lacks some features, but I think that string interpolation is not that important considering other things that can be added to it (basically anythin from amber is more interesting for me, but I don't add more than 3-4 items in String.format).
That's here-doc syntax which Brian Goetz essentially kiboshed in his email yesterday &gt; I think its reasonable to eliminate here-docs from consideration as these are more typically associated with scripting languages.
Java Modules were designed and re-designed for about a whole decade.
&gt; quires a variable to be final (practically final), so no, not like lambda. Why not? String interp could require the same. &gt; function evaluation also or some other scripting feature. I like it :-)
&gt; I jumped into this feature fully enamoured with the JavaScript equivalent and, "why can't we have this in Java?" I wonder why this particular approach is the goal? If we want a blob of text in a program, why not use a different trick from javascript? import someQuery from './query.sql' add IDE support for ctrl-click and it would be very tidy. I'm puzzled why we would want to litter java source files with string resources, when those belong somewhere in /src/main/resources/
Dude, no one's been using JSF for years!
It's Oracle, nobody is paying them when you browse to their site so they don't care. 
I used to think that Oracle couldn't really be like this. After sitting next to a DBA who spends much of her time fighting with Oracle support, I've realized it's true. If it doesn't generate revenue this quarter, Oracle is uninterested.
https://old.reddit.com/r/java/comments/8vltdg/can_oracle_please_update_the_home_page_of/
Thanks, it just seems like oracle are a big corporation who don't really care much for their users experience. They really do need to rebrand themselves.
That looks like a sexy UI for most Enterprise companies
Oracle wants you to contact them directly, so the sales guy can work you....
How is life with DB2, and why is it so damn expensive?
You know those stories about the guy who wrapped himself in newspaper every day to keep warm instead of having heating or a jumper, and when he died it turned out they had 11 million dollars to leave to the Budgerigar Dating Service? That's Oracle. They don't spend money, they make money. Unless Larry wants a new boat. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No? Why do polls, surveys and customers say something different then? Huh?
Because Oracle considers backward compatibility to be important. :-) Just look at the mess Python has with 2.x vs 3.x. Apparently even between different versions within each of 2.x and 3.x. *Trust Store: (noun) A place where untrustworthy people can stock up on trust.* &amp;#x200B;
My main complaint is what they've done existing libraries that use reflection. The entire community was unhappy with it and Oracle did it anyway for their own reasons. 
Guess whose website is this http://www.berkshirehathaway.com/ 
Because the developers are occupied trying to squeeze in a feature or bugfix their DB. [Unimaginable horror](https://news.ycombinator.com/item?id=18442637)!
In my opinion that is a really weak argument. It might be that the scripting languages found out how to do multiline quoting best. His argument is really: &gt; - Those that use user-supplied nonces (C++, here-docs). These can render 100% of embedded strings, with the costs that come with nonces: annoying to write, and imposing cognitive load to read (as nearly any sequence can be a nonce.) but he never shows why they should be more difficult to read than tripple-double-quotes, and why this is so bad that he ignores the advantage of using anything as delimiter. In perl there is a solid tradition for using uppercase words (as in my example) which makes it easy to see where the text ends. They should also add variable interpolation, e.g. ${varname} as it's otherwise becomes clumpsy to insert variables in the middle of a multiline string. So you need both raw, normal and interpolated quoting string types.
Yeah but that actually gets the info you need. It's charming. 
Why do they need to rebrand? It's working for them. Their typical customer probably isn't browsing Reddit.
There are more people using COBOL than JSF, what about those polls and customers?
I hope managed CockroachDB drives their database out of business...I guess a typical software architect is not going to care whether the API pages and tutorials are flashy, but it does add up. Entry level engineers will be moaning not being able to use node, python, or go more.
it works. it's fine. really. nobody cares (not even oracle). the most important thing is that it's not pink with flying unicorns. 
In my experience its not the architects/engineers deciding to purchase oracle.
Intellij of course , community version is free and all you need for now 
In all honesty, if you're going onto Oracles website for anything that isn't installing Java, you really aren't the target audience for Oracle. Enterprise customers will be used to these sites, Beans knows I am. Look at IBM, or AWS. Even RedHat have a crap website. And, entry level engineers moan about everything. I certainly did. I mean, I still do (and lets be honest, if an engineer isn't moaning, they aren't really an engineer!)
Something about oldschool nerding and linux and stuff.
Good ol calm before storm. We have seen quite few companies get rekt this way. lets see what this year brings us.
They started an Oracle Fusion based upgrade of the web site but five years later they are still are still working on installing and patching the software. 
&gt; DB2 IBM is ok. For the times I've had to sit on a call with IBM it doesn't feel as bad as the stories of Oracle. 
I think that you're mistaking some commenters on social media for "the entire community," but in any event, there was no choice. Without modules there was simply no way to keep the JDK maintainable and secure in the decades to come.
I still prefer Oracle wasting all their resources on java. Java is big enough to not need all those flashy sites! As Oracle says... submit your patch! HAHAHA
That's actually a pretty good responsive site. https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Fwww.berkshirehathaway.com%2F
better than a mobile phone type of UI with oversized buttons forcing you to scroll a couple pages to get something simple done.
I like it
write your base triangle on a BufferedImage then, write that image using transforms, mirror and rotations. There are 8 affine transformations possible.
why do you like Eclipse? I can't get to use IntelliJ outside work where i have to use it. for my own projects, i keep using eclipse because of the incremental compilation. People says IntelliJ has incremental compilation.. but we tried it at work and its shit. IDE bugs out.
If it ain't broke don't fix it.
Yeah, it follows the motherfucking website design paradigm quite nicely 
They’re already doing a massive rebrand. They’re attempting to push their new cloud offerings hard. Larry’s constantly ragging on Bezos about AWS and cloud. And for the most part the UI looks a lot better than E business suite and such. SaaS products like ERP look decent. They have a managed Blockchain, chatbots, CICD, and a ton of PaaS offerings. They’ve had blockchain based on hyperledger for a lot longer than AWS for instance. Businesses are moving their services to the Cloud. Oracle knows they need to hit that market and good user experience is key. But Java download pages arent depending on UX.
I find eclipse marketplace helpful for different work I’ve been doing with rest and hibernate, as far as setting up my project. Intellij config can be tricky sometimes, and it isn’t always clear what needs to be done to set up your project how you want, plus intellij ultimate is expensive as shit. I used it at my last job and found no issues really... I do remember we ran into a bug with one update, something to do with a file path not being read correctly(ie “Program Files” would cut off after Program cuz of the space, I think), but the intellij team was very helpful in resolving and patching quickly. Eclipse is easier for simpler projects in my opinion, but if you can get Intellij set up correctly, it can be great to integrate a number of technologies into a single project. My project had vuejs, node, java, rest, hibernate, and more.
GraalVM is cool and all but the fact that it's based on Java 8 still is a major no-go for me personally.
We could've had modules without nerfing reflection. The list of complainers with what was going to be released was very large and include many of the major players in the JVM ecosystem.
&gt; 17 - Avoids an excessive DOM size 154 nodes ✅ &gt; Browser engineers recommend pages contain fewer than ~1,500 DOM nodes. The sweet spot is a tree depth &lt; 32 elements and fewer than 60 children/parent element. A large DOM can increase memory usage, cause longer style calculations, and produce costly layout reflows. 
Because they don’t need to impress the user. The typical user going to Oracle’s website isn’t going by choice. By then the check has already been written by the higher ups.
 Larry’s constantly ragging on Bezos about AWS and cloud. &amp;#x200B; He's constantly ragged on everyone throughout the last 40yrs. &amp;#x200B; I had to use a view oracle products, the UX is terrible everywhere. I actively avoid anything related to oracle.
&gt; excessive DOM Kinkshaming our websites in 2019 smh
There are too many different Java websites ;) * https://java.com/ * https://go.java/ * https://www.oracle.com/technetwork/java/javase/downloads/index.html * https://jdk.java.net/
Who cares? It's a tool for developers: all it needs to do is have the relevant information and to hell with how it looks. I'd be happy with zero stylesheet for maximum efficiency.
Just curious why?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oracle
Meh, you can do [better](http://bettermotherfuckingwebsite.com/).
&gt;It's working for them. Is it though? Everyone I know hates them and a lot of companies are trying to get away from them right now. Hell, my company (which is fairly large) is now going with Azul for Java support. And we're talking about ditching them for our databases and using PostgreSQL. Fuck Oracle.
Maybe they get their inspiration from their subsidiary, micros. That point of sale system is ugly as fuck and a PoS. 
FWIW oracle did scale when we needed it to. And holy fuck did it ever. I'd never use it again because fuck oracle, but the product was good. 
they are making money hand over fist
I hope your wrong on this one. I want it there before the long term 14 release.
lol yeah that won't continue once they lose all their customers. They are in a decline right now. I know someone who recently worked there. He gtfo for a reason.
Its been like that for years.
That's good to know. I've been hearing about us potentially switching, but haven't looked at it yet.
I can answer this. Fancy JavaScript Ajax filled website requires much much more UI testing with each change. There risk is even higher especially internal facing business critical tools. UI testing sucks balls so it's to everyone's benefit to have dumber UI with minimal hits to functionality.
I think a small company named Digital used to make money hand over fist.
The value not base on Ux or UI actually. Totally focus on optimisation and performance. 
&gt; yeah that won't continue once they lose all their customers. Do you know how long this has been repeated?
Funny story, back in the late 80s my dad worked for DEC in Massachusetts. Early 90s, they relocated him to Arizona, then promptly laid him off. Fast forward a few years, I moved to Arizona as well, ended up working in a call center doing support for a credit card processing network. One day as a dust storm rolled in, I took a picture from the loading dock out back and put it on Facebook. My dad commented something like "wait a minute, where do you work?" Turns out it was the same building. I went spelunking in the basement once, which was pretty weird for a call center, but made sense for an electronics manufacturing plant, all kinds of pits and troughs and unlit hallways that led to nothing but emergency exits... Down one of those halls was a plaque on the wall with the Digital logo.
Oracle's been in "fuck you, pay me" mode for at least two decades. I wouldn't expect much change soon. 
 Java so far has given a step-up to many of the light-weight programming platforms, as for Eclipse, Java Development Kit (JDK), the Oracle JDeveloper, as well as the Eclipse and other Open Source Applications. Let us take a look at the technology trends in Java – What To Expect In 2019? [https://www.fingent.com/blog/where-is-java-headed-to-a-complete-list-of-java-trends-to-roll-out-in-2019](https://www.fingent.com/blog/where-is-java-headed-to-a-complete-list-of-java-trends-to-roll-out-in-2019)
Amazon used it forever for a reason I guess
Interpolation is a compile time construct, you don't know what you're talking about.
There is a blog from Oracle stating, JDK 11 will be released under GPL. [https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later) &amp;#x200B;
I'd rather scroll down a bit than having to click through a maze of links to find what I want.
The style isn't the most important part, it's how hard it is to find what you want. You shouldn't have to click through a maze of links to get where you need to go. And they're a huge fucking company, they have the money to make a great website.
I read lots of Oracle doc for my job. I’d rather have a reliable website where I can always view the content than a flashy one that fails to load content constantly or has lots of wasted space.
I don't know anything of Amazon in specific, but I can imagine that it had some issues, but overall worked well. I think Amazon was smart to realize that it would become a bottleneck in multiple areas and ditch it before it was too late (hopefully? no clue)
That looks good if I have same size all the time(or i'm wrong?). But I don't.
I would love to use it, as I just got to a point where my project could use the polyglot functionality, but most of the project right now is using Java 11 features
It depends on implementation no one mentioned if it will be compile time or runtime.
Since reading your suggestions, I've given spacemacs a try (with Emacs editing mode). In develop branch, lsp is a standard layer and lsp-java is super easy to set up. So far, it is a very nice experience.
I am glad to hear that I can save you time :)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
So, I bought Master microservices with Spring boot and Spring cloud on udemy. The course is very basic in my opinion but the instructor is really good and takes you step by step. Moreover, I am also reading spring boot in action. Overall, it has been 2 days and I am feeling confident now. Thanks reddit 😁
Why not? Everything else about Oracle is obsolete, why should their website be modern?
If I were a potential client of theirs, I'd find it perfect. No BS,all the info is there. A typical client of Berkshire doesn't care too much about fancy images and JS on websites,focus is on numbers..
If even Oracle won't keep up supporting their "new" releases, it reminds me to the Python 2/3 fragmentation. Pessimistically one could argue there is more money in paid legacy support than developing an up to date programming language.
you are wrong. if you need a different size, write different size triangle on a new sized BufferedImage, draw image with an horizontal flip and voila. dispose of image. repeat with other triangles. All triangles will all be shaped exactly the same. try it and share your result :)
to get your started i copy paste my method from the Graphics Extension. You can easily adapt it your setup &gt; public void drawRegion(IImage srcx, int x_src, int y_src, int width, int height, int transform, int x_dst, int y_dst, int anchor) { ImageSwing src = (ImageSwing) srcx; // may throw NullPointerException, this is ok if (x_src + width &gt; src.getWidth() || y_src + height &gt; src.getHeight() || width &lt; 0 || height &lt; 0 || x_src &lt; 0 || y_src &lt; 0) { throw new IllegalArgumentException("Area out of Image"); } java.awt.Image img = src.image; java.awt.geom.AffineTransform t = new java.awt.geom.AffineTransform(); int dW = width, dH = height; switch (transform) { case IImage.TRANS_0_NONE: { break; } case IImage.TRANS_5_ROT90: { t.translate((double) height, 0); t.rotate(Math.PI / 2); dW = height; dH = width; break; } case IImage.TRANS_3_ROT180: { t.translate(width, height); t.rotate(Math.PI); break; } case IImage.TRANS_6_ROT270: { t.translate(0, width); t.rotate(Math.PI * 3 / 2); dW = height; dH = width; break; } case IImage.TRANS_2_MIRROR: { t.translate(width, 0); t.scale(-1, 1); break; } case IImage.TRANS_7_MIRROR_ROT90: { t.translate((double) height, 0); t.rotate(Math.PI / 2); t.translate((double) width, 0); t.scale(-1, 1); dW = height; dH = width; break; } case IImage.TRANS_1_MIRROR_ROT180: { t.translate(width, 0); t.scale(-1, 1); t.translate(width, height); t.rotate(Math.PI); break; } case IImage.TRANS_4_MIRROR_ROT270: { t.rotate(Math.PI * 3 / 2); t.scale(-1, 1); dW = height; dH = width; break; } default: throw new IllegalArgumentException("Bad transform"); } // process anchor and correct x and y _dest // vertical boolean badAnchor = false; if (anchor == 0) { anchor = TOP | LEFT; } if ((anchor &amp; 0x7f) != anchor || (anchor &amp; BASELINE) != 0) badAnchor = true; if ((anchor &amp; TOP) != 0) { if ((anchor &amp; (VCENTER | BOTTOM)) != 0) badAnchor = true; } else if ((anchor &amp; BOTTOM) != 0) { if ((anchor &amp; VCENTER) != 0) badAnchor = true; else { y_dst -= dH - 1; } } else if ((anchor &amp; VCENTER) != 0) { y_dst -= (dH - 1) &gt;&gt;&gt; 1; } else { // no vertical anchor badAnchor = true; } // horizontal if ((anchor &amp; LEFT) != 0) { if ((anchor &amp; (HCENTER | RIGHT)) != 0) badAnchor = true; } else if ((anchor &amp; RIGHT) != 0) { if ((anchor &amp; HCENTER) != 0) badAnchor = true; else { x_dst -= dW - 1; } } else if ((anchor &amp; HCENTER) != 0) { x_dst -= (dW - 1) &gt;&gt;&gt; 1; } else { // no horizontal anchor badAnchor = true; } if (badAnchor) throw new IllegalArgumentException("Bad Anchor"); java.awt.geom.AffineTransform savedT = graphics.getTransform(); graphics.translate(x_dst, y_dst); graphics.transform(t); graphics.drawImage(img, 0, 0, width, height, x_src, y_src, x_src + width, y_src + height, null); // return to saved graphics.setTransform(savedT); } 
 public static void drawImage(Graphics2D graphics, int dx, int dy, BufferedImage image, int x, int y, int width, int height, int transform) { java.awt.Image img = image; java.awt.geom.AffineTransform t = new java.awt.geom.AffineTransform(); 
Doesn't mean it has to look like wank though. Or have horrible navigation.
Chuck a couple of decent font's in there, maybe some pictures, and that would be magical.
Way too small font on mobile. 2 columns don't collapse to 1. Not responsive 
Good to know! Any issue, report it to emacs-lsp @ github! :D
Couple of decades nobody has been doing much. These years technology is taking leaps like it was nothing. I bet somethin really fucky is going to happen like google buying oracle.
I've definitely seen mention of GraalVM eventually getting into JDK 11 or 12 or something, so it won't always be a separate product. Obviously it would then support those newer versions.
GraalVM Dev here. We are heavily working on this and most components are already ready for jdk 11. Will probably provide both jdk 8 and 11 versions for a while. As usual it is difficult to give a reliable ETA, sorry.
There are some scenarios where Graal.js behaves differently from Nashorn, here's a \[good starting point\]([https://github.com/graalvm/graaljs/blob/master/docs/user/NashornMigrationGuide.md](https://github.com/graalvm/graaljs/blob/master/docs/user/NashornMigrationGuide.md)) to figure them out. However, chances are your code would work on Graal.js with no or minimal changes. Especially since it sounds like you control both Java and JS parts of the application, so you can tweak both if required. I'd check if your code works on GraalVM and if it does, you can safely do no rewrite and wait until you get convinced that GraalVM is a good platform for your server. After all, as others have mentioned there are builds which contain Nashorn and will be supported for several more years. &amp;#x200B; &amp;#x200B;
upvoted for use of _fucky_
The design picked was one decided on, thought, and re-thought over a decade of public discussions. No other treatment of reflection was possible while still fulfilling the requirements (in particular, that of strong encapsulation). If you follow the history of the discussions, you'll see that those who complained were people and organizations not familiar with the issues or simply those whose suggestions were rejected, after consideration. You'll also see that virtually every public comment made over that time -- including those on Reddit -- were considered. I don't think there's much of a point relitigating this issue, but it's very problematic to form an opinion based on high-profile complaints without familiarizing yourself with the history and context of this change, certainly an opinion that says "it could have been done differently."
Nice! What about keeping with the JDK release schedule? Making versions for everything after 11 should be relatively easy right?
Thing is, most modern "flashy" websites, are probably more reliable than java's site. I have a terrible internet connection, but most websites load within a couple seconds the first time, then basically instantly every other time. They could make so many improvements just by adding a few lines of code in a style sheet. They're a huge company, aren't they? Surely it wouldn't hurt to just make it a bit more readable. If it wasn't for a search engine, it would be hell to find what you want on java's site. If you want the jdk, you have to hit "download", then at the small print "all downloads", then on the sidebar right out of the way "want the jdk?", then you have to read the first paragraph the see the small link "jdk downloads", then scroll through and try to figure out which version you need to download. It's pretty horrible. I know java is probably in decline, but that doesn't mean they shouldn't make the website nice to look at. If anything they're helping it decline. I might copy all of the java tutorials and put them on a github pages website. Even plain html with hardly any style would look better than what they're doing right now.
The latest versions of Safari, Firefox and Chrome (probably Opera as well, are there other browsers?) have all dropped support for the Java plugins. The Java plugin posed a massive online security risk and always has. Flash is probably next on the list (although that one is hanging on longer than I would have hoped). &amp;#x200B; If you can find an older version of Firefox or Chrome you might be able to get it working again (I doubt you can downgrade safari - but I'm open to correction)
Netbeans 10 \- free \- easy \- many tutorials have step by step based on NetBeans -&gt; [Java Platform, Enterprise Edition: The Java EE Tutorial](https://docs.oracle.com/javaee/7/tutorial/) &amp;#x200B;
Yes we hope this gets easier over time. But we will probably only be able to update for LTS releases only. If you only need Graal as a Java dynamic compiler it is directly part of the jdk. That part gets updated with the jdk release schedule.
Palemoon supports java on Ubuntu Linux and probably other distros IE and Palemoon on Windows But I cannot find a Palemoon or something similar on MacOS X
&gt;But we will probably only be able to update for LTS releases only. Do i'd have to choose between a newer JDK version that potentially has new features I'd like to take advantage of and GraalVM. That kinda stinks. &gt;If you only need Graal as a Java dynamic compiler it is directly part of the jdk. That part gets updated with the jdk release schedule. Does it offer all the benefits for Java then? How does one enable this in JDK 11?
I'm not too up on it. But the biggest reason I hear for people ditching oracle is the price. And at Amazon's size that would've been hefty. I think the advent of "good enough" free databases that could be tuned for specific workloads has a lot to do with it too.
&gt; Does it offer all the benefits for Java then? How does one enable this in JDK 11? Use this VM options to enable it: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler It replaces current C2 compiler with Graal compiler. For what it does I suggest you watch some videos from people at twitter who are running this in production: https://www.youtube.com/watch?v=PtgKmzgIh4c In short: they had +15% increase in performance of their services. We're testing this with our own product and we're seeing increase in 5-10%. Still good enough for a simple command line switch.
I one of the current lsp-mode/lsp-java/dap-mode maintainers (I did the Spacemacs layer too). &amp;#x200B; Just want to mention that I am currently working on [https://github.com/emacs-lsp/lsp-java/issues/50](https://github.com/emacs-lsp/lsp-java/issues/50) which will bring Spring Boot support to lsp-java. Be sure to check it out once it is ready. Also, if you have some specific questions you may ping me here or in gitter. There are a lot of features that are planned and I am prioritizing them based on the users' requests. JDT LS team is very active too. 
I would really advised against distributing applications applets these days. There's little life in the technology long term. If you want a web interface use JavaScript. If you want a Java application use JNLP or frankly an embedded JRE type experience.
My project still uses JSF 1.1 - Talk about a nightmare when it comes to UI changes. I'm trying to get our team to move over to Angular/HTML5. Uphill Battle.
Been there :(. I'm not even a UI developer. But I do some UI work for out backend apps. The hardest part for me is to get other devs to back the play. There are a lot of old Java devs that don't like anything new :/. Back in my day we used nothing but JSP's and were happy about it!
My 30" monitor and mobile device both disagree.
Out of curiosity: why are you trying to run applets?
&gt; But we will probably only be able to update for LTS releases only. This sounds like awfully long-term speculation. Does this imply that GraalVM will *always* remain a separate project/product from the main-line JVM? Or is the ultimate goal that all your work is eventually merged into OpenJDK? I'm sure I'm not alone in hoping for the latter!
Because th Oracle database engineers are too busy convincing management to change the website to Apex instead of hiring UI UX engineers
Look into projective geometry and the camera matrix. To understand that, you'll probably need some linear algebra and trigonometry. 
Bingo. Oracle has one primary concern and that is dolla dolla bills yall. All other concerns are very distant seconds.
I mean, are they wrong? 
It will definitely take some work. I had to use the \`jvm-npm\` to enable npm packages and babel for ES6 support. In any case, I will definitely begin experimenting to see how fast and can migrate the project. &amp;#x200B; Thanks a lot for the advice.
My team is in the process of porting all of our JSF 2 apps to Spring Rest Services on the backend and Angular on the front and I'm not super shit hot about Angular but almost anything is preferable to JSF. JSF is just a dog on resources and even simple stuff in our current applications move like molasses in winter time. Spring is pretty great too; they're site has tons of samples, tutorials and their documentation is first rate and their Maven/Gradle plugins are super helpful. Now if we can just finish upgrading our weblogic servers to 12c I can start using Java 8 instead of 7 which means Spring Boot 2.x which has a bunch of neat features (especially for testing) that I'm anxious to try out. 
Holy shit. Is that legitimately their site or is this a joke? And I'm thinking of the correct Berkshire Hathaway that is the largest hedge fund on the planet?
In this case, OP should develop with JDK 1.8. The library got some new APIs. Few truly novel things, but it would s**k to backport calls of `Map.of(...)` and friends.
My junior year of college I was working part time for a small company that had me spin up and maintain several apps to assist whoever needed some help and 6 months into that gig the company decides to do an ERP upgrade and after 3 demos from SAP, Microsoft Dynamics and Oracle our execs chose Oracle (JD Edwards.) I didn't see the demos and had no experience with any of them so the choice didn't bug me. But then Oracle hooks us up with one of their "trusted business partners" to actually do the install on behalf of Oracle and these guys were the keystone fucking cops of tech people. The partner firm committed to giving us 4 consultants full time for an ERP install that was to take 9 months. That was my first clue I was in for a wild ride because the place I interned at also used JD Edwards and it took them almost two years to do their install and it was still frought with issues after go live. Like the consultants should have told us that our timeframe was not feasible but they were worried we would back out on the deal if they protested so they just went with it. The following 9 months were absolute hell for me. They would set stuff up and do the minimal amount of config and tailoring of the system and it's interfaces and reports to be able to say they did it essentially. Then I would come in behind them and pick up their work and fix it because they weren't programmers and all of their reports and stored procs and the like had no error handling and never a concern for efficiency nor were any tested beyond the most nominal of conditions. All the while when I would get hung up on something I had to jump through 9 flaming hoops to talk to the Oracle support guys that came with the project and to make a long story slightly less long at the end of the day the overriding concern always was fucking money. If I called Oracle too many times they would go bill my boss for the support hours without telling me that I had exhausted the support hours we had already paid for and yaddy yadda. That entire project was a cluster fuck and now Oracle keeps bugging the shit out of my boss to let them move the system into "the cloud" and my boss and I have agreed that there is no fucking way that is happening. But I'm sure they'll only ask another 57 times before they take a hint. 
Yeah, I think a lot of people forget in the late 90s and a ways into the 2000s nothing scaled like Oracle and had quite the complete tech stack to go with it. The being said most of the competitors have caught up at this point for most of the workloads that count and Oracle hasn't really gotten much better. 
That would open a can-of-worms having to do with file access, locations, permissions, etc. to make it a language level feature. Loading text from a file can already be done with existing APIs.
Warren Buffett. All you need to say.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/acjq3q/news_apache_maven_support_coming_to_gradle/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm looking forward to it. I've been playing with GraalVM on JDK 11 and noticed [some performance inconsistencies](https://www.reddit.com/r/graalvm/comments/a3j7j3/graalvm_10rc10_release_notes/ec1x2uz/), but overall the examples I've tried all appear to work on JDK 11. I'm now in the process of trying to get a build working with the maven-jlink-plugin. Do you know if/when jlink and jmod will be moved into the java.compiler module or some other module of their own?
We had a very narrow escape from having Oracle foisted on us. It's not just that it's expensive, we got quotes from three authorized Oracle VARs, and the three quotes were *wildly* different. If you go for the cheap one, you risk being sued by Oracle. If you go for the others you're probably spending too much (and still face some risk of being sued by Oracle). We saw another company close to us get sued by Oracle over licensing, and the problem is once you start using something as expensive as Oracle you want to get your money's worth by using all the good features of the product, and by then you're completely locked in - so Oracle knows you can't drop their product in retaliation for being sued. 
Any ERP upgrade is going to be a shitshow FYI. We use Dynamics AX and we switched from Great Plains. 
Hi, great extension. Could you create simple rest api with implementation of it?
What about [`Files.lines`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#lines-java.nio.file.Path-)?
With Microsoft, I noteced that they store documents on Github. Their document pages and blogs are static page. This helps them focus on improving the UI as well as the quality of the document without having to worry about security.
I know this is meant to demonstrate various approaches to file handling, but I feel an opportunity was missed to leverage the OO aspects of java. The various file loaders could implement some sort of an Iterator/Streamer interface. The tasks could done by various TaskHandlers. The general code would look something like: for each element in iterator for each handler in taskHandlers handler.handle(element) for each handler in taskHandlers show handler.result Where each element is a line from the file with context (row number, etc.). With maybe some methods for getting at particular parts of the data (columns/names/etc.). Performance testing could then be done on either just the various iterators or using the entire implementation with the various iterators swapped in. And then another article could be written about stream handling and implementing custom streams. Something like *There is a Files.lines option that was missed in the original article. I've exposed the previous three as Streams and here is a stream based implementation with performance numbers for all four approaches*
bOOOOOOOOOOOooooooks &amp;#x200B; &amp;#x200B;
This is exactly what is discouraging me from getting started with Java....
The Buffered construct is a critical point of this as it ensures that your code isn't bouncing back and for from Java to io interrupts constantly. As shown in time reports. Another (interesting) way to speed this up is to operate on a compressed file. This shifts workload from disk io to memory/cpu load. Out of the box Java supports gzip compression, including as a inputstream. Lastly for even more speed move processing on to a separate thread with suitable thread safe data structure between them. This is heavily dependent on the transform you are doing on the data. Java 8 provides streams (see parallelstreams) which can make this happen without lifting a finger. There are existing solutions to rapid load of data but require more infrastructure. See Apache Storm. I am sure there is high performance people in the crowd that could describe even better solutions. Don't forget hardware can also radically improve speed.
It’s to simple to write blog post about this. Sorry 
TL;DR: &gt;"In the end, buffered streams and custom file read libraries are the most efficient ways processing large data sets in Java. At least, for the large text files I was tasked with reading." If you're wondering what the reason for this performance difference is: &gt;"In genereal: An InputStream only provides access to byte data from a source. A Reader can be wrapped around a stream and adds proper text encoding, so you can now read chars. A BufferedReader can be wrapped around a Reader to buffer operations, so instead of 1 byte per call, it reads a bunch at once, thereby reducing system calls and improving performance in most cases." &gt; &gt;[Source.](https://stackoverflow.com/a/38346462) &amp;#x200B;
3.5 GB is not a really, really large file. It would even fit in the RAM on average machines.
I asked her on Tweeter if she could complete her article with a Files.lines benchmark. I will let you know if she answers me. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Note that the Graal team is \*not\* part of the Java product organisation and instead is part of Oracle Labs, a completely separate part of Oracle. They are separately funded and do not share reporting lines until very high up. It would take a major re-org to align them with the main-line Java products. One thing which is important from an Oracle standpoint (&amp; probably doesn't matter in the slightest to anyone outside) is that Labs and the product group have very, very different expectations for how much revenue and profit they should be generating.
Simply by wrapping a BufferedInputStream arround the FileInputStream the performance should be increased a lot. &amp;#x200B; &amp;#x200B;
Awesome, I'll definitely let you know if I run into any issues. Thanks for all the hard work, it's very much appreciated.
&gt; The Java plugin posed a massive online security risk and always has. Javascript does too. Someone wins lots of cash every year at pwn2own. Firefox was so insecure in 2016 they wouldn't even award prizes for that browser. The entire JS supply chain is a broken mess as well. But you're honest :) I doubt anybody at r/javascript would throw JS under a bus so fast and be top voted post in the thread.
"If it fit in your laptop is not big data"
The counting bits could also be done as the data is being processed. The new(ish) `Map#compute` or `Map#merge` methods work well for this. Map&lt;String, Integer&gt; nameCounts = new HashMap&lt;&gt;(); ... nameCounts.merge(name, 1, (oldValue, newValue) -&gt; oldValue + newValue); or more concisely nameCounts.merge(name, 1, Integer::sum); 
&gt; "with its compilation, its need to declare every single variable type" This is why Java is great and JavaScript is the scourge of the Earth. Also, reading in mega files can be done using buffering so you can page forwards and backwards very fast. 
READING a large file . . . not a problem. **Holding** that entire file in memory? *That* might be a problem. Or holding some kind of model built from reading the large file. (XML, JSON, custom data model, etc) &amp;#x200B;
I havent readed a lot about GraalVm, but why didnt you use crated a Java frontend for LLVM? 
The scope of GraalVM goes beyond the JDK as it's a polyglot VM targeting many languages while also being embeddable. Some components of it are and will be integrated in Oracle jdk and openjdk. Lots more info on our website graalvm.org.
My dude, don't be discouraged. You really only need 2 of those links when first starting. As you get more knowledgeable you'll ask questions and find out about the others. 
Never really had any use for more than one and even that went away as I moved away from Windows...
How is this different than exporting preferences using the built-in way and importing them back, I'm curious?
Sure I get that and I understand that there's a wider scope. But that's kinda my point, I think there's a pretty strong argument that those features are useful enough for the JDK to expand its scope to facilitate/host them itself eventually. Well, I also understand if that's not a priority, was just wondering.
&gt; probably Opera as well, are there other browsers? Opera, Vivaldi, Brave, and soon Microsoft Edge, are all just Chromium forks. Mainstream browsers are now reduced to Chrome(ium/forks), Firefox, IE, and Safari.
It's ok dude :) I will look over it, next days. Really THANKS!
The spring Microservices in action book is great 
Oh god how much evil can you pack into one IDE? 
To learn the Java language you need a book. Technical documentation of the Java class libraries you find at [https://docs.oracle.com/en/java/javase/11/](https://docs.oracle.com/en/java/javase/11/) &amp;#x200B; assuming you want to use the latest LTS release of Java. &amp;#x200B; &amp;#x200B;
One of the reasons I was never fond of Eclipse - it's "amazing" workplaces. Before IDEA I stuck to NetBeans…
The GraalVM project is not dependent on a particular artefact. It can be emedded (JVM, Databases, ...) or shipped as e.g. Ruby VM standalone binary(without a JVM). You can also generate (using native-image) your own VM with JavaScript and Python, for example. Or ship a VM native binary with warmed up application. Lots of things are possible, the JVM embedding is really just one use-case. Similary you could ask to merge GraalVM into the CPython interpreter distribution. GraalVM is envisioned to replace all the language runtimes out there. One VM to rule them all is our original theme from 2013[1] ;-). [1] http://lafo.ssw.uni-linz.ac.at/papers/2013_Onward_OneVMToRuleThemAll.pdf
or syncing them with oomph?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Miglayout seems so confusing to me... I know how to use the layout managers that are built into swing easily though. GridBagLayout, GridLayout, BoxLayout. They all have rules you need to learn, but I feel like they make sense.
that method allows you to draw any region of an image with one of the transformation. what you want is exactly what i needed to do in one of my project. I had to draw triangles and other stuff and the draw the same with exact symmetry. 
It allows you to clone preferences to all workspaces with a single command, so you don't have to open up each one and manually import.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sad but true. Huge companies won’t invest resources into something which will not return money back. 
Most of the stuff that broke with modules was, IMO, of dubious value. On the flip side, what modules enable is quite impressive. I think jlink will ultimately be one of the great boons of Java as more people start designing with the module system in mind. Particularly, in the new containers environment that we are entering in, I think it is practically a necessity.
Glad they aren't burning backtick for RSL. I personally would like to see it used for string interpolation. Though, honestly, I just want to see interpolation in any form, even with ugly prefix/postfix stuff (`I"Just want ${interpolation}"`).
Could this be GraalEE performance nerfing?
I think that parts of it are already there. Last I read, there was some thoughts of maybe swapping the hotspot jit for Graal's jit.
No, it's fast in some cases, slow others. Seems more like a bug somewhere.
Pretty nasty on desktop. I ended up just copying and pasting it into a word document to get wrapping.
I've seen it in a few places where they say that interpolation is dependent on RSL... I've always wondered why that is. The closest I've come is that the approach and tradeoffs they'll make will probably be similar. I'd imagine that people would want multi-line interpolation right off the bat.
I'm using [fernflower](https://github.com/fesh0r/fernflower) for now. I was planning on maybe writing an abstract bytecode processor which can feed data into custom language decompilers (like decompiler with plugins, JVM craves this) which might maybe be too complicated for me but at Java will be working.
&gt; That being said, I do make an effort to get better at Java and the other shortcomings I have by not having a traditional computer science degree. Thats commendable. You get better with time. Right now your Java code has slight oddities and the perfomance could easily be improved a lot. E.g. with multi-threading, less copying datastructures, iterations, correct use of datastructures, ... For a similar benchmark, check [this](https://github.com/juditacs/wordcount/blob/master/java/WordCountOptimized.java) out (note, its highly optimized). Also study the JDK a little more. E.g. use `map.putIfAbsent`, `Map.merge`, `Arrays.asList`... 
Oh wow, a lot of people want to contribute already. I would give you a [link](https://github.com/LunarTeam) but the code I currently have handles mostly GUI and is broken (I was testing something). I'm planning on writing mappings format first (Moonlight) as [fernflower](https://github.com/fesh0r/fernflower) does that very well for now. I was thinking about bytecode-level patching to allow creating legal patch files where code sources can't be distributed.
There's a link on the post now. I created just bare bone project structure which I'll work on piece by piece. [\[here\]](https://github.com/LunarTeam)
Use BufferedInputStream for better performance. 
In 2001? History proves no. In 2019? Hell yes. In an era where companies live and die by mass adoption, there simply are not enough guns to hold to the heads of all of the companies needed to sustain and grow a company the size of Oracle because the companies they do have “locked down” will either lose market share to the smaller players who are not being held hostage or will have to find a way to maneuver around Oracle. AWS’ primary concern is customer experience and beat the “customer obsession” drum like nobody’s business. If you go on the AWS forums, it’s riddled with examples of personnel responding to users and having to say “sorry, it doesn’t do that”, but then asking the user to explain their use case so that it can be evaluated by the product team for possible implementation. It doesn’t always get done but you don’t see Oracle support even asking the question. Also, ever accidentally overspent on AWS by provisioning a database or instance (or many) and forgetting to shut it down? I have....just contact support and ask for an “oops I did it again” refund. Finally, I direct your attention to Oracle’s current market cap at about $170 billion vs Amazon’s market cap of about $930 billion. And if you want to split AWS out from Amazon, analysts late last year predicted a trillion dollar market cap for AWS alone by 2024 while Oracles stock price is down close to 52 week lows. All due to how they treat customers? No, but I’d argue that the myriad of reasons for it are all related to the arrogance that goes into how they treat customers. 
I thought they said 'lucky' at first
[removed]
You can use `appletviewer` to run applets instead of a full browser on macOS, including Mojave. Provided you've got the HTML for the applet you can just launch it from the command line. Here I assume your HTML is "something.html" and your current directory is the location containing the HTML and applet's jar. appletviewer something.html You'll have the `appletviewer` tool if you've installed a JDK from Apple (the old Java 1.6 JDK), Oracle, or AdoptopenJDK. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You know nothing. I won't even get into why comparing Amazons market cap to Oracle's is so fucking stupid. It's Ike you just earn a new word. 
Didn't read it as a newsletter, and thought we started going on about bugs like we do about old jokes. Ha! That good old 653.
Ok Larry....
Wow, great! Just have read that " 2 January 2019: EDSDK 13.9.10 is released to download by members of the developer programme. PowerShot SX70 HS is supported by EDSDK. Remote control, remote shooting and power zoom control are available on SX70. For futher details of this SDK, please click [**here**](https://www.didp.canon-europa.com/developer/didp/didp_cfg.nsf/webpages/EDSDK+v13.9.10+Information). " And tried to find wrapper for Java and here it is! :) Thanks a lot! BTW PowerShotSX70 is a super zoom with x65 optical zoom! Sounds as exiting spy tool :)
It's just another language. IMO, it would be worse if you stick with just one language. Polyglot is the way of the world. The sooner you jump into that world, the better. 
C# has largely prepared you for Java. Things might seem weird and different, but you understand the concept of OOP and that's what's important. Syntax is easy to learn; concepts are harder. You've already done the hard part.
on a scale from 1 to shit i'd say "it depends" .. e.g. it depends on how much experience do you have building software? &amp;#x200B; if you're a 1 / 2 year junior then this might get a little tough. java and c# are very similar though, at least syntax wise (from what i've seen.. never used c# myself) and considering you applied for a master's program i'd expect a deep enough understanding of OOP core concepts (ideally augmented by the capability to interpolate / infer / abstract) so this shouldn't be too hard. &amp;#x200B; now, i'm not exactly sure how to take that recommendation. is it that you spend at least 15 hrs/week on a project? where are the requirements for the project coming from? 
You'll be fine ... the syntax is very similar and as long you don't have to do a whole lot of deep "java-esc" coding you can muddle your way through. 
The two languages are very similar. change foreach to for change Dictionary to HashMap change =&gt; to -&gt; change mystring == “foo” to mystring.equals(“foo”) Those are the ones I remember off the top of my head. You’ll probably spend more time learning a new development environment than learning the new language.
I'm just nervous about my experience level, but thanks for the words!
I do want to learn more than one, maybe this will be good.
The next hard part is going to be time, lol.
I don't think the course goes too deep into it. 
I don't know any specifics, but my advisor interviews students during and after the course and that was the average time spent on the course work. 
I may.. 
Should be fine then, it's similar enough.
Besides, Java has been in the top three for jobs for over a decade. If you have to learn one, it's a good choice.
change first letter of method names to lowercase and use egyptian braces.
Picking up Java coming from C# should be pretty easy, I wouldn't be concerned. It's good prep for the real world as well, it's not uncommon to jump between jobs/languages in your career.
Try a "Java in 24 hours" or similar book. C# and Java are similar enough that you should feel comfortable with the language after reading it. Google the rest
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
C# to java will be an easy transition. But whatever you do please don’t use the hideous C# naming conventions in your java code. On a side note how can you be going into a masters program and only know C#? Are you going straight from undergrad to a masters program?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/routr] [The following conversation took place @ r\/java, and it was an interesting one: My project depends on Nashorn but will soon be deprecated. Should I wait for GraalJS or rewrite the entire thing with Java?](https://www.reddit.com/r/Routr/comments/acvi7w/the_following_conversation_took_place_rjava_and/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
... and forget properties, value-types and lots of other stuff :) 
It’s harder to type though. It is faster to type 3 double quotes than it is to type one backtick.
Here-doc syntax makes no kind of intuitive sense. I would never remember that ridiculous syntax.
You really have 3 choice: IntelliJ, Eclispe, and Netbeans. Try them all and see which one you like best. My personal recommendation would be IntelliJ.
Very. Now go do custodial work which is more suited for you.
Looking like wank is something most people can get past. But your right, poor navigation is not an excuse. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If you know C# and Java, you can basically work at any large enterprise.
You are fucked bitch 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's a Master's of IT. I am doing networking and security but there is a core Java class. 
Ahh ok, makes sense. Thought it was comp. sci. and I was a little concerned you were doing a masters in that but hesitant about a new language.
Haha, no, sorry about that. I should have brought that up
Absolutely. And you picked a good second language too since you already know C#. As others have mentioned, C# and Java are very similar in terms of syntax and philosophy. One advantage Java has is that it has more presence in the Linux world. You can open up an opportunity to learn more about Linux later on. It also is used in popular open source data processing projects like Apache Beam.
Unless you are on visa I wouldn't bother going to any place that offered a 'masters of IT.' 
“foo”.equals(mystring)* ;)
As a side note, [value types](https://openjdk.java.net/jeps/169) are in the works for Java. You can download early access builds [here](https://jdk.java.net/valhalla/).
Wouldn't it make it easier to update individual modules like that, rather than dump everything into a single war?
There's this one, that no one visits though: [https://go.java](https://go.java)
Use [https://php.net](https://php.net) instead. Because, only one web site
EAR files are a superset containing WAR files and JAR files. This post is a little too left field and doesn't make sense without wrapping it in ... if you are using WAR files and have a ton of jar dependencies ... EAR files make sense. 
It wouldn't perform better it would just use significantly less memory. Unless the JVM was garbage collecting a lot for some reason. Still should be used just don't believe it would improve performance much.
the c# version of k-nucleotide includes some optimizations that weren't in the java version. i added them, and it resulted in it running 35% faster https://github.com/nqzero/k-nucleotide i'm going to make a full post tmrw
Reading from a blockdevice will be significantly faster... Or at least, was some years ago 
Everyone working with Spring just saw their job prospects jump through the roof. 
 To be fair it doesn't change much as it's already industry standard. And for good reason as well as it's evolving better and better by all aspects.
&lt;sarcasm&gt;Can't believe they chose spring over dropwizard&lt;/sarcasm&gt;
Most people just use "/s" at the end but you're completing it with begin and end tag like it's going to be judged by the W3C validator
This is /r/java of course they are going to use XML
I was tempted to write that but I didn’t want to make things more confusing.
As stated in other comments, they're pretty similar languages. One thing I'd advise: when you begin the learning process - read up on Java generics, paying special attention to how type erasure works. If C# was your first and only language then Java generics are going to feel awkward to you. Probably best to set some time aside to wrap your head around it early.
I'm a reddit noob. Good tip, thanks
You're welcome!
I have never used Spring but I use Dropwizard at work. What is wrong with Dropwizard?
Cobol doesn't show up in modern polls. https://snyk.io/blog/jvm-ecosystem-report-2018-platform-application/ 19. Which Web Frameworks do you use? JSF is at the third place there.
Ah I think you are right, I thought the file inputstream would read it fully in memory by default but doesn't appear to be the case. Not sure why I thought that.
What problem are you trying to solve? Why is dumping them all in lib not acceptable? If you wanted to split 3rd party libs from internal ones you could use something like the maven dependency plugin and have it filter based on module names and output those to a different directory. I don't think you would gain much from this though.
Nah dude we use annotations nowadays
It looks like in your [submission](https://www.reddit.com/r/java/comments/ad0b9l/any_good_log_viewing_applications_for_log4j/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Ummm this was not coding help.
So what does this mean? What is oss? What is springboot? I'm clueless to what this mean thank you for answering. :) 
Some advice on web api docs mentions focusing on tutorial style usage of the API initially. Maybe you can use a similar approach. Take some sample objects and methods, and walk through a typical flow of calls to achieve a key task. You can drill into the implementation of those methods from there. Wash, rinse, repeat.
OSS: open source software Spring Boot: Spring is a complicated Java web framework — Spring Boot abstracts away a lot of the complexity of Spring, thereby making it easier to get your web app up and running. Please correct me if I’m wrong as I’m not a Java dev!
Spring is so much more than a web framework!
Actually ran into this at work. It (not going to give too much detail, sorry) shortened what we were doing from 9 min to 5 min.
A class/interfaces association graph perhaps? 
If all you're building is a REST/http API then nothing, it's the perfect tool. Anything else though is better with Spring Boot.
So java is going to get even more popular?
It depends on what you are hoping to do with the project. If it's to enhance your job prospects, a Java EE app (or Spring) will help the most. If you're doing it to be part of a community, join an established open-source project. If you're doing it for your personal pleasure, then whatever rocks your boat--look around you, identify a problem you have or a need for which you can't find a good solution, and build that. Good luck!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
\*buys a 8TB storage laptop with 128GB RAM\*
Eh, I enjoy JavaScript as well as Java
Yes it doesn't show up because it's a poll about Java technologies
Duh, not the point! The point is this shows up in a poll what devs in the Java landscape are currently using to build apps, and it's in the third place.
kotlin is supported too
I think this exactly what Truffle and Polyglot does. For more info, take at a look at Oracle’s GraalVM
Why is it reposted? It was posted originally by Oliver Gierke [/r/java/comments/a7drrz/netflix\_oss\_and\_spring\_boot\_coming\_full\_circle/](https://www.reddit.com/r/java/comments/a7drrz/netflix_oss_and_spring_boot_coming_full_circle/)
If you consider a contribution to OSS software, take a look at https://up-for-grabs.net. Otherwise, cool ideas are always hard to come by - and obviously, most of us would do it ourselves if we had such an idea ;-)
That sweet sweet /r/java karma, that's why.
It reads byte wise... That's why it is so slow without a buffer. 
Let's be honest here. When it says "spring" or "spring boot", that means server-side Java and some non-Java framework on top of it, like Typescript or Angular. So those two make up 76% of the JVM ecosystem. The remaining are all legacy systems. To be honest we also have a few websites built on top of JSF. They were built in 2005. The only reason we still have them is because we didn't have the resources to replace them, but we are working on it. No one develops a brand new website based on JSF.
Is it me or the filtering on that website isn't working?
&gt;change mystring == “foo” to mystring.equals(“foo”) Does this mean that C# isn't using references?
I used to hire java developers (and now I am a trainer) and lets me give you a piece of advice. * Swing is dead (even JavaFX is taking the path of the Dodo). Ok, it is not entirely gone but a zombie. It's easy to spot a novice on Java, he says about Swing. Trust me; it is tough to land a job if you only know Swing versus, if you know Spring boot and/or Java EE, you could land a nice job in a couple of weeks. * If you want to land a job, you must learn (**that it is not the same to know Java**) Java EE and or Spring Boot, and now the market is biased to Spring Boot, so if you could pick one of them, then select Spring Boot. * **Java is for boring enterprise projects**. You could program a game, but it is not the reason why you pick Java. However, you could achieve both — for example, a management game and it must be web!. * Java Android is a different beast. You could be an expert on Java Spring and a noob in Java Android. For example, let's say that a company wants to hire a Java Developer, they could write something like that: &gt; Help Wanted: We need a java developer that manages the next technologies, Java EE 1.6 or higher, EJB, JSF, JPA, HTML, JTA, JAX, CSS, SQL and Oracle, Primefaces, Eclipse (I prefer IntelliJ or Netbeans), JBoss, Ant, and Maven. or &gt; Help Wanted: We need a java developer that manages, Spring and Spring Boot, Oracle, Maven, JPA Hibernate, JDBC, Spring-Core, MVC, Web Services and Thymeleaf.
Are you still using Java Applets?. 🤔
Also https://www.jcp.org
Baeldung is a life saver!. While StackOverflow works for some small problems but Baeldung is more guided.
I believe that in C#, string is a class that overrides the == operator.
Nothing wrong with it. Spring Boot just has the bigger community and ecosystem.
Another one: https://helpwanted.apache.org/
&gt; If you want to land a job, you must learn (that it is not the same to know Java) Java EE and or Spring Boot, and now the market is biased to Spring Boot, so if you could pick one of them, then select Spring Boot. I have been a Java developer for 8 years and never used JavaEE or Spring. There are many other alternatives for smaller frameworks like Dropwizard, spark, etc. &gt; Java is for boring enterprise projects. A very large portion of Google, Amazon, and Netflix's codebases are Java they aren't necessarily boring.
Awesome!! Thanks alot!
&gt; I have been a Java developer for 8 years and never used JavaEE or Spring. There are many other alternatives for smaller frameworks like Dropwizard, spark, etc. Java is larger, for example, struts, seams and so on but Spring Boot and Java EE are a safe bet. &gt; A very large portion of Google, Amazon, and Netflix's codebases are Java they aren't necessarily boring. Trust me, we will never be the Party Guy, or stories are boring. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [A hard look at the state of Java modularization](https://www.reddit.com/r/programming/comments/ad78lp/a_hard_look_at_the_state_of_java_modularization/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Albeit repeating myself a bit, check out: [https://www.marcobehler.com/guides/java-intermediate-learning-path-1](https://www.marcobehler.com/guides/java-intermediate-learning-path-1) It's a fun little project, which will expose you to a variety of libraries in the Java universe (although not a game or Swing)
Artificial Intelligence is a very complex field. You basically have to turn the reasoning that you use to select which move you would use into a computer program. The simplest thing you could do is see if you have a move that's super effective against the opponent's Pokemon and otherwise choose one at random. I think wild Pokemon _do_ always pick a move at random, though.
It seems that it will take a little bit of doing to migrate [Routr](https://github.com/fonoster/routr) to GraalJS. GraalJS offers several interesting features, like support to es6 and native-images, but the current support for [multithreading](https://github.com/graalvm/graaljs/issues/30) is a deal breaker. I will revisit the this in the future. Thanks all for the comments.
No, not really. I was just lazy and didn't check if it was already posted. I thought the automod would automatically remove my post anyway if it seems to be a repost.
I have decided to make chess in raw java.
Yes, you’re right that it’s not completely at random. I know, at least in the older games, that the CPU will select a move based on the passed event in the battle and assigns percentages to its attacks based on that. So if it’s the first turn, let’s just say each move has 25% chance of being selected. Then after that turn is played out new odds are assigned to the moves based on the previous turn. So maybe turn 2 one move has 75%, one has 25% and the other two will not be selected. Maybe you can use this as a way to code the sequence of attacks by the CPU. As someone else said, AI can get pretty complicated and this could turn out to be a mess of If statements, but who knows, maybe you can get this to work well.
You should be fine. Get a good Java IDE (IntelliJ), or maybe manage with VS.Code for now, if it's familiar. Grab a book or two to help you learn the differences - "Head First Java" or maybe "Java in a Nutshell (7th Edition)", and \*definitely\* a copy of "Effective Java (3rd Edition)" - you need that one, but it's not enough by itself. Be realistic about the fact that you'll have to put in some extra hours and it's going to take effort &amp; you need to apply yourself, but you got this - and it's going to look great on your CV when you start looking for jobs.
Thanks for the encouraging words!
Why do you focus so much on the libraries people use? Swing, Spring, Spring Boot, Java EE, Android, etc they all use Java. Just get good at programming in Java, whatever library you may be using that day.
[http://wiki.pokemonspeedruns.com/index.php/Pok%C3%A9mon\_Red/Blue/Yellow\_Trainer\_AI](http://wiki.pokemonspeedruns.com/index.php/Pok%C3%A9mon_Red/Blue/Yellow_Trainer_AI)
Not sure if this applies to a pokemon game, but the following works for tic tac toe and was used in the first computer chess games: Let the computer calculate the result of all moves he can make. Then let him calculate the result of all moves his opponent can make based on the moves he made. After n rounds let the computer select the best outcome. Or better: Search for tic tac toe ai, to find a better description :-).
Consider using some boolean flags accesible by the enemy, to make sure the move they pick is effective at all. For example, after using growl a few times, it becomes completely ineffective. However, a pokemon such as magikarp can (usually) only use splash, so you need to make sure that in the case that all moves are ineffective, it just picks one anyway. For the chance to use a move, make a calculation based on the accuracy of the move, the accuracy stat of the user, the evasion stat of the defender and optionally the attack, special attack of the user and the defense and special defense of the defender. You may also want to take type damage into account. So, whenever a water pokemon is up against a fire pokemon, the logical choice would be to use a water type attack. However, make sure this is incorporated into the regular choice formula as a modifier, and not just a rule to use the most effective one. For example, if the move is super effective based on the type of the defender, multiply the chance of using that move by 1.25 or something. Also appropriately decrease the chances of the other moves. For switching out pokemon, you could base it on the chance of the enemy pokemon dying after x amount of turns if the attacker used the best possible move. Make sure to only check for that condition every so many turns, otherwise the enemy would get stuck in a switch-out loop. Usage of items such as potions can be controlled in a similar manner as switching out. If using a potion would get the chance of survival over x turns higher than the runner-up, then use the item. There's no right or wrong though. These are just some ideas.
There's lots of comments about "real" AI on here (rulesets generated by neural networks, etc) and that's probably the best way to go about it... But we've had CPU players in games long before these fields became practically applicable. I would just build a ruleset for the CPU based on how you would play, such as selecting attacks strong against the opponent in question, etc - you can also give the CPU perfect knowledge of the opponent and all relevant stats to make it harder to beat. Then throw in some random noise.
Roll 1d4 for the move. Never switch out. Use healing item if health under 20%. There you go, super realistic pokemon AI.
Let's say that you are a woodworker, you won't say **"I know wood" or "I know chisel or saw"** You could say, **I know how to do furniture or engraved or even a boat builder or wood walls**. Even if you say "I know how to use the chisel", then the next question could be: "what you could do with it?" It is the same with Java, Java, as a language is easy, but to do something with it (other than a simple console application) requires to know a library or framework. And some of them are harder to learn than Java. Businesses will hire devs if they know **how to do the job** not if **they know Java**. 
&gt; You basically have to turn the reasoning that you use to select which move you would use into a computer program. and maybe perhaps write a program to both experiment with options/attacks and learn from the outcomes of experiments. This raises the wonderful question of 'what is a successful outcome?' It's wonderful that you have a vision and interest that will be the reason you delve into such territory. Enjoy!
the are like 4 possibilities calculate each outcome use most damage one.
That's too complicated as there's as nuch as 4 possible moves a pokemon can make, as well as the possibility of using items. Could result in 10^10 possibilities aafter just two turns
One option often used in games are "behavior trees". They may be overkill for this use case, but are in general a good tool to know when trying game development. They can be used to build rather complex "AI" in your game, while still being programmed by yourself. [Here is a nice writeup if you want to know more.](http://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php) By "blocking off" some parts of the tree depending on the enemy type, you can give different trainers different playstyles. For example, one trainer type may have the part of the tree unlocked which tries to use a "super effective" move. Another trainer may have the "buff first then attack" part unlocked. And a third trainer may have both parts unlocked.
Why are you comparing Oracle to AWS? They're not even in the same market. AWS competes with the likes of Microsoft Azure and Google Cloud.
Since we're on the subject of redesigns and you linked to old.reddit.com, is it just me or does Reddit's new design use a lot of [Mystery Meat Navigation](https://en.wikipedia.org/wiki/Mystery_meat_navigation) as well as hide options that used to have their own links in drop down menus now?
At this point, you don't even go to Oracle's website to install Java. Since you're going to have to use OpenJDK on your servers anyway, you might as well use OpenJDK for your development stuff too.
This Unlike Java, C# allows classes to override operators.
\&gt; Let's say that you are a woodworker, you won't say **"I know wood" or "I know chisel or saw"** You could say, **I know how to do furniture or engraved or even a boat builder or wood walls**. Well, that's exactly what I mean. Nobody cares that you know how to use Spring Boot, or whatever. They care what you can build. You shouldn't say you know Spring Boot any more than you would say you know chisel. You say you can build applications that do X, or Y, or you can achieve Z. Businesses will hire dives if they know how to do the job, not if they know Spring Boot - exactly what you said!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I was drawing parallels between the two companies' customer focus and their market dominance. Of course customer focus is not the only factor, which is why I made sure to stipulate as much. And it could be argued their markets are overlapping more and more (e.g. AWS has created their own database product and Oracle does offer cloud services). I don't think it would be a reach to make the claim that if Oracle had the customer focus that AWS does, their products would be far more ubiquitous and I'm not even sure they would need to compromise on price to do so.
The blog post makes it look like you can just drop JAXB on the module path and require it, which is not yet the case because [JAF lacks a module descriptor](https://github.com/eclipse-ee4j/jaf/issues/13). Also, OSGi had about 18 more years to establish itself, which includes better tooling to generate module descriptors. Not a fair comparison in my view.
&gt; (even JavaFX is taking the path of the Dodo). What makes you say/think that?
I like it. Looking forward for matching project.
you have a 404 on your own project https://gitpals.herokuapp.com/projects/github.com/danmoop/GitPals 
Wow this is actually incredible. /thread
It looks like in your [submission](https://www.reddit.com/r/java/comments/ada3u3/problem_with_logic_in_rock_paper_scissors_game/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How do you figure 10^10 after two moves? If there are 10 possible moves on a turn, thats only 100 after two moves, not 10,000,000,000 (which would need 10^5 possible moves at each level. The way to approach such a problem of combinatorial explosion is a [min max tree](https://en.wikipedia.org/wiki/Minimax) with [alpha veta pruning](https://en.wikipedia.org/wiki/Alpha–beta_pruning). Doing this in a 4 ply search on a 19x19x5 [m,n,k game](https://en.wikipedia.org/wiki/M,n,k-game) game only took a few seconds ~20 years ago - and that was with some 300 possible positions to evaluate at each level ( 8.1 * 10^9 -- still smaller than 10^10 ).
Yeah, my mistake. Probably closer to 10^4, 10^10 is definitely too much.
10^4 says that there are 10^2 (100) different positions at each move. Not unreasonable... and also trivial to all of the positions even without considering a min-max tree or alpha-beta pruning.
Create a metric for the "success" of an attack. Then use the attack with the highest value in that metric. Depending on how simple your game is you can do a simple damage simulation and then pick the attack dealing the most damage.
The AI is literally a bunch of if else statements... we've come full meme circle.
What were you expecting? Some sort of online, deep linked, neural net running on a gameboy?
[it's a meme](https://i.redd.it/57gmyswprqm01.jpg)
I'm assuming the OP has been edited, cause nowhere is AI involved here
The problem they are trying to solve is inherently an AI problem. 
I would have a look at deeplearning4j. Probably you will need to dive a bit deeper into the details but it should be possible. There is discussion about example code for face recognition here: https://github.com/deeplearning4j/dl4j-examples/issues/389
OP has asked for the behavioural pattern for entities in an existing game, not how to make his own. As Pokemon doesn't use AI, and they said they are making a &gt; simple text-based Pokemon game and simple programs don't use AI. Therefore AI shouldn't have been mentioned. KISS
Thanks but I was looking for a solution to implement this in OpenCV. I can't find FaceRecognizer class for it. I did it using JavaCv with 5 images/subject and the output is great but my server keeps on crashing every now and then saying "Failed to write core dump. Mini dump not available".
Looks like it. I just tried searching for java and it returned nothing, which I find unlikely
Thank you. A beginner highschool student doesn't need to be inundated with proper AI. 
Doubt you'll find anything reliable for free, but if you have a minimum of sysadmin skills you can use a $5 DigitalOcean server?
And the truth
Suggestion: allow the `add` method to accept varargs so you can use `model.data.add("Peter", "39", "Hong Kong", "789.432");` instead of `model.data.add(new String[]{"Peter", "39", "Hong Kong", "789.432"});`
So you’re saying like turn 1 has a certain procedure, 2nd turn has a different procedure, then different procedures for a few more turns, then reset the cycle?
I think varargs would actually support both styles so this is a solid improvement 👌
or an ec2 t2.nano instance on AWS. its pretty cheap.
Yes, but like, dependent on the last turn. First turn, there’s a certain percentage for each move, then based on what happened in the last turn i.e. how much health is left, which move was used, what type is the opposing Pokémon, the next move used by the CPU is determined by certain factors. Something like if the turn counter is 1: this move is used, if turn counter is &gt;1: what happened last turn? If health is &lt;25% use this move, if opposing Pokémon is grass type use this move. Somewhere along these lines. Just a complicated tree of if statements. I’m not good enough to explain exactly, but I imagine this is somewhere along the lines of what is needed to be done.
Indeed dot com, Us of A. (it is not complete but it marks a trend). * Javafx: 81 * Dropwizard : 143 * Java swing : 365 * **Spring boot : 4122** * **Java Android: 6083 (it's mixed with other results).** * **Java ee : 1619** * Java all : 7410 
pretty sure heroku has a free tier
I suppose it's where you draw the line. I'd argue the opponent is emulating what a human would do and is therefore artificial intelligence. Like I wouldn't call a sorting algorithm AI because it isn't trying to be human in its actions, it's just solving a problem optimally. This is solving a problem sub optimally so that it appears more human and is artificially exhibiting intelligence. 
Suggestion, instead of exposing the fields of the text table encapsulate the configuration options and provide a builder for them. 
OP only has to change patch version since this is backwards compatible
* If you work for a big business (for example a multinational, a bank, a mining company or other company under SOX), then we (developers) don't pick the technology, the technology is here and sometimes it's old technology, we don't do the call. Right now, I am working for an insurance company (the company of Snoopy, I want to steal one of those plushies). * Platform IBM (yuck) * Java 1.6 (As usual) * And we spend 3 months in bureaucracy. And sadly, this project is anything but special, it has no logic or challenge but configurations. This company is moving toward C# but not this project and again, it's not our call, we couldn't pick the technology. 
AI is a very broad term. In its simplest form, an AI is a program that makes decisions to perform tasks (like selecting the best moves to win a Pokémon battle). That is what OP is trying to make.
You could try with Openshift https://www.openshift.com/products/pricing/ 
You don't have to go super sophisticated here, a simple if-elseif block would suffice. Just try to write out how you would play and derive some basic rules out of it. Type advantage is a huge mechanical aspect of pokemon as are accuracy affecting moves and stuff like harden that seeks to minimize/nullify the effectiveness of moves. And course there are the effects: burn/poison/sleep.
Core dumps are typically all of the allocated ram. Do you have a ton of disk available on your server for the jvm to write the core dump?
Can you share a little more about the specs of the machine/instance you're testing on?
tbh, [https://openjdk.java.net/](https://openjdk.java.net/) isn't that much better. If you're wanting JDK8 (which, lets be honest, majority of the world is still on this release), you still have to go to the oracle website.
For my own personal use. Not for anyone else. I love java
if (face1 == face2){ // Add your code here }
Java or programming in general?
I’m new to programming in general. 
Different people learn in different ways. Some people learn by reading and some by following along with a YouTube video. Then there are others like me that are in school taking courses for Java, have read the books, have followed the videos, and went through multiple online training sites and feel like he's barely starting to grasp it! With that being said, try them all and if younfind you just aren't getting it, then try something else. In the end, I think it really comes down to practice. The more you use it, the more comfortable you will start to become with it. Start by understanding the concepts and fundamentals of what programming is meant to do and how it gets accomplished. Then as you begin to learn the language, realize how the language is applying those concepts. Just don't give up! Good luck!
Java and C++ are horrible first languages as learning OOP adds a lot complexity to programming. I would start with Python. 
Thanks! 
I second this idea. This kind of library is perfectly suited for a builder
I completely disagree. Java is a perfect and easy first language. 
Thanks for the information :) Seems weird they went from 3.9.0 to 13.9.10, or they did a typo... I will wait a bit and update the bindings if necessary, should be released in version 1.2 of the framework.
In the release note of the JDK 11: [https://www.oracle.com/technetwork/java/javase/11-relnote-issues-5012449.html](https://www.oracle.com/technetwork/java/javase/11-relnote-issues-5012449.html) there is a this change: * `In Windows and macOS, installing the JDK in previous releases optionally installed a JRE. In JDK 11, this is no longer an option.` * `In this release, the JRE or Server JRE is no longer offered. Only the JDK is offered. Users can use jlink` `to create smaller custom runtimes.` &amp;#x200B; If you need it, you can download and install the JRE11, there is an installer for it.
Oh! Thanks a lot!
Yeah don't use Java for that.
RemindMe! 13 hours "cert value"
I will be messaging you on [**2019-01-07 20:20:29 UTC**](http://www.wolframalpha.com/input/?i=2019-01-07 20:20:29 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/a9emil/ocpjp_8_employers_what_does_the_certification_say/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/a9emil/ocpjp_8_employers_what_does_the_certification_say/]%0A%0ARemindMe! 13 hours ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Hello?
If you want to focus on Java, head over to /r/learnjava and read the *sidebar* there (old reddit only for now) - there you can find a section "Free Tutorials" that lists some of the best Java tutorials. If you ask about learning programming in general, head over to /r/learnprogramming and spend some time reading the FAQ there. They are quite extensive and list many good resources for many languages.
AWS is always more expensive. You need to add storage too. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It was in the top of /r/java as well as /r/programming days ago. 
&gt; (like selecting the best moves to win a Pokémon battle) Which is not what the Pokemon games are doing. They're more or less selecting random moves while excluding some super-stupid moves with some add-on logic. While you're technically correct that you could still call that "AI", today "AI" is mostly used in contexts such as machine learning and neural networks and you definitely don't need these here.
Yeah, it has definitely become an umbrella term, we used to just call everything algorithms. But the distinction here is video game opponents intentionally don't use "ai", the aim is to be simple and predictable, not to win.
But it's not emulating a human, a human would try to win optimally but fail, a game opponent is designed to be challenging yet predictable enough that the player can learn the pattern they use in order to win.
because the data is stored into TableModel, so better to let user to build their own table model with their own add method
thx
You can use Haar Cascades in OpenCV for face detection
App engine is pretty cheap
Can we stop for a moment to laugh at that title? 
This may come in handy at my job. Does this feature scale well on different consoles widths?
why?
Just ignore the technical for a second. We're talking about a fucking *elastic beanstalk*.
If you're just doing configuration and no logic then that sounds more like operations than development.
I dont think when Oracle made that move they were after subscription but to let community JDK projects to take care of LTS versions. While Oracle focus on Java itself! 
You are new in Java for business, are you? 
Ha ha no.
It might be good to provide a flexible default though, not ask every library user to implement their own or copy `MyTableModel` from the tests. If you make everything the user's job, one could just implement the single useful file you provide from scratch as well, no need for your library. The point of a library is to make it easy to add to any project and immediately start using.
The dependency on swing for the table class hierarchy feels slightly weird.
Is this true for openjdk too? I could have sworn I saw that it had a JRE included there.
I doubt OP is looking for an AI solution for his problem. Seems like he just wants to implement some simple behaviours; or a basic/hard coded AI, not something that is capable of learning or actually being an intelligent machine.
What’s wrong with EB?
They are similar enough that knowing one should make you familiar with the other. If you are looking into Android apps, Kotlin is the way to go. Anything else, go for Java first.
If you're new to programming, I suggest Java because of the volume of examples and because it's a little more explicit about what is happening. Also, it'll be more usable outside Android development. 
I think he's talking about how silly the notion of a literal elastic beanstalk is, not EB as a product
java, it is basis of kotlin if you know java you know kotlin (or at least you are able to learn it fast), if you know kotlin you do not really know java (same thing for java and groovy) also you will find many jobs for java developers (and well paid at that, banks, huge corporations, basically anywhere) but bar to none for kotlin (unless you want be android developer)
I'd recommend learning Java first Kotlin seems a bit more...involved. Also a lot of places you'd go to work they will only have Java devs who don't know Kotlin. 
BeanShell, Clojure, Groovy, Oxygene, JRuby, Jython, Kotlin, Scala are all "JVM" languages... but underneath you still should understand how "Java" works -- it's power and weaknesses. After, you can switch to one of these offshoots to make your life easier and reduce some of the complexity/java's long-windedness that in inherited in Java. IMHO best examples were Scala and Groovy but Kotlin seems to be a really good choice. I also like that Gradle is advancing the use of Kotlin.
You should use Java which is where the jobs are. Once you're comfortable you can play with Kotlin and the many other JVM languages out there. 
Monte Carlo methods should be simple and should work fine here.
I downloaded the openjdk 11.0.1 for windows here [https://jdk.java.net/11/](https://jdk.java.net/11/) and the zip file don't have the JRE.
Typical Oracle move
Thanks!
If you're new to programming, you can pick either one. Choose the one that feels more fun to **you**. Or that your friends or people you know are using (so you can ask for help). &amp;#x200B; &amp;#x200B;
Well written, would enjoy more in depth and advance setups with this format. I came here expecting a simple "spin up RDS, browse to jar file, profit." 
To clarify: Use OpenJdk 
Thank you for letting us know.
This is just a change of the license terms for the **commercial build**. They still release the entire platform for free, and you can download and use OpenJDK builds under the same terms as always. This was also discussed *extensively* on this sub six months ago when it was actually still news.
Oracle open-sourced Java with OpenJDK, while also offering a version for which they provide support for money. Many companies before Oracle used that business model in some form (e.g., Red Hat). So it's not really an Oracle-typical move. 
I understand but there's no way for me to make *something* that imitates AI, at a simple level? A pseudo-AI based on if-else statements maybe? 
Thanks guys, Ill go with Java, 1st since beginning :) Just wasnt sure!
ye
Oh I've already taken care of stat changes and effectiveness, I also have a "determineEffectiveness" method that determines... effectiveness... based on types
good point
super good point, let me make a default
This is a great idea. I don't think I'll be able to pull this off exactly as you describe it but it gives me the idea to make methods like "goodAI" , "mediocreAI", "defensiveAI", etc.
i tested it in mac and windows, from 1920x1080 to my 5k imac, it works well.
This is a great idea. Thanks!
u/Er_Coues M$ shill 
That's awesome thanks
Unicode [Box Drawing](https://en.wikipedia.org/wiki/Box_Drawing) can be used to draw normal lines
Learn each of these briefly (2-3 days), to get exposure to basic concepts in isolation: golang, elm, rust. Then, dive deep into java for a while.
Precisely. 
Spring Boot is NOT a web framework. That would be Spring MVC.
Seriously. How can one not laugh at this combination of words.
Awesome! &amp;#x200B;
Give it a rest, man. 1. This is ancient news. 2. As everyone and their dog has already pointed out, your spin on it is misleading alarmism. 3. This is blatant spamming for your blog and company ("a third-party evaluation like UpperEdge’s baseline assessment takes just five minutes and is worth considering."). 4. You've also spammed the same link [round half of reddit](https://old.reddit.com/user/er_coues/posts/) over the past three weeks. (javahelp, learnjava, technology, webdev, coding, programmerTIL, programming, learnprogramming, AskProgramming, etc. etc. etc.) 5. You ALREADY got smacked down for this when you [last spammed it to this sub 18 days ago](https://old.reddit.com/r/java/comments/a7zl4a/help_is_java_no_longer_free_under_the_new/). 
I'm the lead of Apache Curator and we haven't done anything on modularization yet. We're dependent on several upstream libraries that haven't modularized yet. It's Catch-22.
great stuff, let me enhance it, thanks
&gt; I would like some more arguments More arguments than what? What arguments do you have already?
It depends. ;)
I would prefer JavaFX without the fxml. In some departments, Swing is kinda unpredictable? I also like the UI style a lot more. On other hands, swing has probably more documentation and stackoverflows.
Only like the basics. I only learned swing in school, it seems like it is the most used overall. But as I haven't really used it in a practical way I'm in need of some examples and experiences from other users
Say you would like to build a very simple GUI. What would you use?
Maven is just one of those tools that I have no idea why it is popular. If someone told me I couldn't use Gradle and instead had to use Maven or Ant I would choose Ant over maven without hesitation.
Would you describe JavaFX as more modern than Swing?
Just convert your applet to a desktop app, package it up with a runtime (if you are using java 1.8 can use jpackager): https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javapackager.html Should be as easy as changing your top-level container from JApplet to JFrame.
You do know you can use java for standalone desktop apps right? No applets needed.
Ask jetbrains. They built intellij with swing.
JavaFX is to Swing as LCD is to CRT monitors. Ain't no OLED, but looks better and is a least decade younger.
“Good” is a relative term, compared to what other languages? Realistically there’s very little native GUI work in Java these days. Almost everything is either web based or mobile oriented (Android) which has other toolkits. 
In my paper I wrote about what makes a library good. Stuff like being versatile and keeping up to modern requirements in design. Good means how well you can build a GUI that pleases you
if its simple then just write an HTML file...
Came here to say this, most are moving towards the Electron framework if they are building a native desktop app.
How would I get in contact with them?
All you have is Swing is used most overall? You need to spend sometime with a search engine and search like "Swing verse JavaFX" or "What are the differences with Swing and JavaFX?". Also, with your post why not actually spend time making it instead of just throwing it up? Why don't you explain your thought process, its too bad you can't reword the title because that also doesn't make much sense. Of course Swing is good for GUI building; now if you were to ask which is the best GUI library in Java and what are the differences between each that's a different story.
Java, I love Kotlin, but if you learn it first you won't appreciate it or Java. There's also a lot more information, guides and help for Java.
Just surrender to reality, electron is the present and future of desktop gui
IntelliJ started well before JavaFX became a thing, so they didn't really have a choice to begin with. It just shows that Swing is flexible enough (if you implement your own controls like IntelliJ has), but not how Swing compares to JavaFX.
Are people still making GUI's with Java? Why would anyone do that to themselves? Correct me if I'm wrong but Java has transitioned to be almost all server side applications a while ago.
Implementing those rules in the link I gave is an if-else AI. If you want to play around with a more proper AI, you can do the sample projects at [https://gym.openai.com/](https://gym.openai.com/)
Kinda depends on what you need. I like the simplicity and universal support of swing, that is to me its strongest side, but it only works for desktop applications. If you are asking about the best gui overall across multiple languages, Id look to the web frameworks, or native UI on mobile. Java is not used that much for GUI compared to other languages/platforms.
Dont for get to delete the RDS if you are over the 1 year free plan. Otherwise it will cost $$ for run time
Isn't it a bit early to be wearing spring boots?
Spring Batch isn't doing anything. Spring Batch provides a bunch of components which can accept data sources, such as database item readers and item writers. You can wire them up yourself using Java config or XML config, or you can use [auto config](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java) with Spring Boot. Spring Boot will automatically create a DataSource if one doesn't already exist. Without any information about how you are configuring Spring Batch, you're not going to get useful answers. Are you're using Spring Batch [like this](https://spring.io/guides/gs/batch-processing/)? `@Qualifier` will definitely work.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
HTML
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm pretty sure this was retorical question.
See Kotlin.
I think that 13 is going to be pretty dull. The biggest change will likely be RSL preview. If we are fortunate, 13 will see switch expressions moving out of preview or expanded. I think 14 and 15 are going to be where we start seeing movement on projects like Valhalla and loom. 2020, I'm predicting, will have a much bigger impact on the way we dev with java.
It looks like in your [submission](https://www.reddit.com/r/java/comments/adnhs3/java_code_work_in_progress/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I highly recommend you to try out Vim, not necessarily as an editor/IDE but more like a method to navigate through and edit your code. You could install a plugin for VS code. Just google vim on YT. Good luck mate! ;)
What about it? 
Okay why? Why is it easier than a language like Python?
It's flying under the radar..
If your paper is about what makes a good 'library' and your focus is on Java.. does it have to be a guide library? As other users have stated... Gui development is best left to other frameworks and languages. Look into something like the Apache commons libraries (pick one..) or Google guava? These libraries do simple things extremely well and used everywhere for that reason
Is it finally going to be almost half as good as .NET 3.5?
This is huge. I have been using Gitlab for my free private repository needs till now. I guess I will move them over to Github now.
Good guy Microsoft. God its weird saying that.
Been using Bitbucket. I actually like the interface of Bitbucket better, but the CI/CD/etc tools of Github are just way better I think. Better integrations and options.
Well.... that sounds interesting, but some of Microsoft has a long past of... copying/borrowing code from other projects. So I wonder what will happen if they... borrow some of your private code and (obviously) you aren't Apple. Just saying :)
Why would you say without FXML? I started using it and I think it's kinda comfortable, you just need the right scene builder version (the one that doesn't crash). 
I understand your pain...
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I always make sure to write low quality code so the jokes on them.
Eh, so the obfuscation is on purpose!
I also use bitbucket bc i like mercurial more than git /unpopularopinion
Noiiiiiice!
Bye bye Bitbucket :D
I'm a huge Kotlin fan but there's simply a lot more beginner info available on Java. [This Java MOOC](http://moocfi.github.io/courses/2013/programming-part-1/) is a great start.
Good God man what is wrong with you. ;)
Any serious projects are already paying for hosting so this only affects tiny private repos, which I doubt Microsoft will care much about beyond attracting more new users.
hahhaha i dont know, learned mercurial first and it clicked with me , never ever felt the need to use git :p
Why without fxml? I come from dotnet background with XAML experiences, FXML let me picked up JavaFX very soon
Mercurial was keeping me on Bitbucket too, and I still prefer it to git. Nevertheless I've gradually moved all my stuff over to git and github over the past year or two -- really only because git's what everyone's using (so more marketable when job-hunting) and github is also what everyone's using (so more/easier collaborations on projects and more visibility for me as a developer). I wish VCS and project hosting weren't such a monoculture, and that I didn't have to consider these "social network" factors in my choices, but that's life :(.
We eventually moved away from using JAXB within Hibernate Validator. (STaX was good enough for our purposes) Unfortunately, the removal of JAXB in JDK 11 is causing a considerable amount of friction.
Perhaps ModiTect ([https://github.com/moditect/moditect](https://github.com/moditect/moditect)) is useful to you. It lets you add descriptors to existing JARs based on some metadata/configuration. Obviously one shouldn't publish such patched modules, but using them internally is fine, e.g. for testing whether your library/app works on the module path or for building modular runtime images (jlink) with your inhouse app. Disclaimer: I'm working on ModiTect
Thank you very much for your answer, I realized that my way of writing was leading to a dead end and that I have to change up a few things. 👍🏻👍🏻 
Doesn’t change much form me ... I have more then 3 people on a private repo . Gitlab for ever. Still nice to see the effect of competitors on a market 
I’ve been paying for a monthly subscription for the private repositories feature? Is there any benefit at all to still keeping the plan?
I've done this before in Spring Boot 1, just by following the docs for multiple datasources with Spring Data. However, in Spring Boot 2, it's a shitshow to setup multiple datasources with the Spring Data repos, so we went another route. 
its good to hide test code projects and unfinished code
More than 3 collaborators if you need that.
FXML is one of the biggest advantages of JavaFX, keeps the application code a whole lot more clean and nicely separates UI design and logic. Besides, you can use JavaFX completely without FXML already.
Well if there is one company that does not need charging money on their service is Microsoft, they do earn more on other stuff. Can you imagine Apple owning Github?
It looks like in your [submission](https://www.reddit.com/r/java/comments/adsxye/new_to_wsdl_is_it_possible_to_create_wsdl/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes, even Swing had the look n feels but it was always kinda awkward
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I needed this today. It was a good tip and works! 
.NET is garbage in comparison. Sorry. You lose. 
if you want to play with a blockchain.. you could install PascalCoin, sync the chain (10 minutes). Create a Maven project with jPascalCoin dependency and you will be able to make RPC calls to the daemon in Java. Its fun.
Thank you for your answer. I will give it a try
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/adtrfh/help_with_java_8171/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
As a library writer, why should I even care? What's the benefit to me or my users to add a module descriptor. If we do nothing, our library can continue to be used as always. What am I missing (note: I haven't spent a lot of time fully understanding JPMS).
How's Microsoft related to this?
Github is too behind gitlab in term of private repo. Gitlab had it for years and also provided pipeline and private pipeline runners that made a perfect ecosystem for small team for almost no cost. 
It's a trap.
They bought GitHub laat year.
They own github
Did you guys think about why Microsoft bought Github? I think because there is a lot of code resource here. They can use them for AI, ML. And 10 years later, Microsoft will release a platform can write code automatically. They provide a free private repository for this. All of the code on the Internet are storaged on Github.
You can't bind that to an array or anything like that, but there are plenty of event-based xml parsers. You can do whatever you want with those. It just takes more steps. Why do the tags look like that? Do you control the structure of the documents? If so, just make them all be named value and then the binding is trivial, at least in JAXB.
Aw, that reminds me of how I taught myself programming using QBasic on DOS with the built-in help. So many boxes drawn.
I’m still salty you have to own a Mac to post an app to the App Store without using weird backwards methods.
They are named like that in a system that need to be like that for years :( Just working with what i Have. Im using JAXB, i have found these guys on the subject: https://dzone.com/articles/map-to-xml-dynamic-tag-names-with-jaxb But im using java 6 so i dont have access to stream as i'm using java 7. (also gotta work with that) 
Whenever i encounter that, i always think about the time Microsoft got sued for anti-trust/monopoly for bundling IE in windows by the govt. How times have changed
Bitbucket and GitLab are giving free unlimited repositories and bunch of other tools for free. I don’t see much sense to stay on Github ‘cause its functionality price per feature is far below the market
Oh i didn't know this. I hope they didn't make bunch of crap like they made with Skype.
Microsoft's track record has improved immeasurably in the past 10 years. Case and point Visual Studio being the greatest IDE ever (imho) and it being free. Honorable mentions are open sourcing dotnet and VSCode as well. 
[https://media.giphy.com/media/3ohzdIuqJoo8QdKlnW/giphy.gif](https://media.giphy.com/media/3ohzdIuqJoo8QdKlnW/giphy.gif)
What about from java to c#?
What about from java to c#?
 What about from java to c#? Thanks!!
 What about from java to c#? 
I need also c# for the master of vfx and games. So its easy from java to c#? Thanks!!
And IE is still bundled :D
At least, not difficult.
I don’t use gitlab on a daily basis, but god I love that they exist and make such a good product.
I know right? when did "coding" became a "facebook" like activity :/
GitHub is where you go when you want your work to actually be seen and used by others. I'm not saying popular things don't exist on the other providers, but the community aspect just pales in comparison.
Somebody from FB told me they use mercurial. It's better for gigantic files, according to him. 
I don't know as I don't know C#. However, as I understand it, C# is fundamentally similar to Java in terms of syntax and memory management. I would think the transition would be relatively seamless and involve learning a new set of core library functions. I don't know if there is as much FOSS out there in C# as there is in Java, I suspect not. Aside from syntax and memory management, one of the key skills in Java is understanding what body of 3rd party work there is out there, particularly frameworks, to avoid reinventing the wheel. Java has evolved to an integration exercise rather than solely a programming language. I think this is nearly unique to Java, at least in scope. So, writing in C# and Java, as far as getting something to compile and do what you want it to do, is probably a relatively easy transition. Really being effective in the ecosystem is a bit more complex. It's like the difference between speaking a language (like French, Spanish, whatever) in class and watching a movie in that language. There's so much more that's required to fully understand a movie, in terms of culture, history, etc.
Yeah I mean compared to other big tech companies they really are the kings of open source and as such have developed a bit of a mantra for giving stuff that people want for free lately
Huh, TIL about @XmlAnyElement. So yeah you can use that. Or you can use an event-based parser. I didn't say anything about streams, don't know what you're talking about. The Streams API doesn't give you any new functionality, it just allows you to express certain things more cleanly.
Typescript too.
Seldom do we think about things from the perspective of the makers of the language. Nice read!
Maven is popular because of it very mature ecosystem and robust dependency system. Gradle is far from on par with Maven feature-wise. Eg. there is no (good) EAR plugin for Gradle. Which is a blocker for many enterprises. There is more than raw compile speed..
telaust, I am talking about face recognition not detection.
DexalinPlus, I am using 64 bit Windows 10 with 8 GB RAM and i5 CPU @2.30 GHz processor
Girlanda still offers more features than GitHub. TravisCI doesn't work for private repos, the same with wikis and something else. Gitlab is still winner when comparing features and 3rd party services.
Is adding a GPU possible? I'm certain that would substantially improve performance for any kind of deep learning or image processing task, assuming your software can leverage it. I haven't used the CV solution you are working with, but I would be very surprised if it couldn't make use of the parallel compute power from a GPU.
Apple isn't a monopoly, and they're not leveraging a monopoly to pressure hardware vendors (they don't deal with any) to *not* bundle Netscape. It's a ridiculous comparison.
it's just a syntax difference. nothing special. all languages have similar implementation of data structures and other stuff. you just have to learn frameworks specific for C# and then it will be mostly the same work
An interesting solution to the issues of new keywords (especially given that new keywords are often the best solution to adding some new language constructs in a way that doesn't promote a return to hieroglyphics). Such an approach would offer a convenient name to a feature I'd love to see Java grow (once value types land) - a special flavour of enum similar to Rust enums (maybe `variant-enum`) (that is, a cheaply tagged union of record classes that supports pattern matching). One use would be to use value-passing as an alternative to exception-handling in the increasingly stream-based APIs. Using hyphenated keywords is nice as they feel related to enums (a set of values you can exhaustively match over that want first-class identifiers) but also different (in that 'instances' are value-capturing and support de-structuring in pattern-matching). I miss Java enums in Rust and miss Rust enums in Java... sigh. &amp;nbsp; ...and maybe `full-switch` rather than `exhaustive-switch`
What is so bad about maven?
I've not built EARs. What's the problem with the gradle EAR plugin? https://docs.gradle.org/current/userguide/ear_plugin.html
Idea: Come up with some candidate keywords. Build a 'lint' type tool which identifies them. Build an ignore-warn-fatal switch into the java compiler, even in Java 8. This gives developers an easy way to locate these future wannabe problems long before they become problems. Refactor renaming tools in modern IDEs make it easy to rename these exactly and accurately. Developers should avoid identifiers that could be potential keywords in the future. It's just good future proofing to avoid: * var * value * method * function * yield * extended * mutable * immutable * quadruple I could continue to speculate on possible keywords, so that's why it would be good for the language experts to propose such a list earlier rather than later. Once some identifiers need to be claimed, then Deprecate them as early as possible so that everyone knows the changes are coming. We don't want to have the kinds of upheavals as Python and other languages have experienced causing fragmentation. So semantics cannot be changed. Identifier to keyword fixes can be implemented, but even that is a big deal considering the sheer amount of and economic value of Java code. &amp;#x200B;
It might not be a trap. But unlike the hipsters who don't know any history, I developed a distrust of Microsoft in the 80's that only got much deeper in the 90's. It might not be a trap. But I just don't trust Microsoft. Maybe one day I will. But not today.
&gt; What's the benefit to me or my users to add a module descriptor Main advantages to me are a) clearly defined APIs and b) ability to build modular runtime images. As a library author I appreciate that I can clearly communicate which parts of my library I intend to be accessed by users and which ones not. Of course one could do that before, too, e.g. via naming conventions, but preventing access to internal parts by means of the compiler is clearly better. Modular runtime images (as created through jlink) are very useful to distribute small, self-contained application images. jlink doesn't work with automatic modules, so that'd be an incentive for a library author to add module descriptors, enabling their users to use the lib in such way. Whether it's a good idea or not to just sit back and do nothing to adjust your lib to JPMS essentially is a bet on whether JPMS sees widespread adoption or not. If it does, doing nothing might impact your usage, as people might begin to look for alternatives that have done the move already. We'll see :)
If your porpoise is trying to communicate more clearly, then eschew obfuscation. &amp;#x200B; *even if your porpoise makes no attempts to communicate.*
No, now I'm going to use value and function even more. I will literally riot if you break those
Might be true, but git has LFS for that, and also, you should be skeptical if you’re versioning giant files (often those are media assets where line/text based versioning makes no sense)
&gt; It's just good future proofing to avoid: YAGNI. No need to that "future proofing". Well except `var` because thats released now. Though you will probably not have issues with it, as it is a restricted keyword. 1) These are all bad variable, class, ... names anyway 2) Refactoring would be so easy even if it collides in the future. 
Nobody stops you from making public repo on GitLab for instance and be noticed by other developers or at least by me 😋 From the other point GitHub is a standard for open source projects, I don’t see other benefits.
There's a solution that seems pretty obvious to me, although I've never seen it implemented: add a declaration at the start of each source file saying what version of the language it's written in. That way, new keywords can be added with reckless abandon, and nobody's code would break. It opens the door for other changes, too, like removing obsolete features or changing the semantics of existing features. I've seen some variations of this idea: "use strict" in JavaScript, "from __future__" in Python, and a pragma for every not-yet-standardized feature in Haskell. Java, C, and C++ are getting close from the opposite direction, with most major compilers supporting a flag to select a specific language version. None of those languages go far enough, though. JavaScript's "use strict" declaration did to little and has been made obsolete by ES6. Python's "from __future__" declarations are for things that are meant to become the default, so the absence of one can mean either that the new behavior is not wanted, or that the file assumes it's the default behavior, which is not very helpful. Doing anything with compiler flags complicates build files, especially when mixing language versions in a single project. The main objection I can think of is that it would require compilers to implement a ton of obsolete language versions, adding to their complexity. I think that argument is backwards, though. Many compilers already support many language versions, and there's nothing stopping a compiler vendor from dropping support for obsolete language versions. Having a declaration in each source file just gives compiler writers the *option* of supporting multiple language versions in a transparent way. The only other objection I can think of is that it adds verbosity, but considering how much boilerplate code ends up in any nontrivial program, I think one extra declaration per file is a very small price to pay for letting a langauge evolve freely while ensuring old source code continues to work with no changes for as long as the compiler vendor wants to support the old language version.
Yeah, private repo is something you make "to actually be seen and used by others"
Micro trap. 
well to be fair, without IE it would be pretty hard to access the internet otherwise...
You are joking but I need it for work because it's the only one that supports pretty well ActiveX...
If you have a .edu account you can get the full version of IntelliJ. Pretty much owns every other IDE in existence.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[javac](https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javac.html) already allows to choose which version of Java source code you want to compile. You specify the "-source &lt;version&gt;" option. I specify the source/target versions in Gradle/Maven, if necessary. IDEs/the compiler will then give you the behaviour as if you were using that version's JDK. Java grows with a constant focus on backwards compatibility. I believe Brian Goetz mentions it in [this talk](https://www.youtube.com/watch?v=4r2Wg-TY7gU).
https://rule1.quora.com/Use-Maven-Not-Gradle
I mentioned that already and explained why it's not ideal.
I've proposed this on coin-dev years ago, in the form of: source 1.8; shot down at the time due to the notion that this would require adding the precise definition of each and every java variant to the JLS. This response makes little sense to me - but in general nobody was particularly excited. Separate from that problem, it won't help much here. Let's go back to the 1.4 days and lets posit that you want to introduce the 'assert' keyword. Yes, folks can now upgrade without breaking their test libraries, but once you take off the training wheels and opt into 1.4 mode, the library is still broken. You'd have to first upgrade your use of the test library to an update that does not use `assert` as a method name, and only after that transition can you upgrade your code to 1.4. This is slightly less painful than how the introduction of assert went down, but still painful. With Brian's proposal, new keywords that can clash with existing identifiers simply cannot happen. Your proposal is a little different but no matter how you slice it, you aren't solving the problem: [1] In order to use assert as a keyword, you have to add something like 'import feature assert;' _FOREVER_. Soon all java apps start with a list of about 85 different import feature lines because people just want to use the new stuff (assert is rarely used, but most introduced features, especially in the past few years and the stuff being discussed on amber-dev and such, are intended to be used lots) – or the IDEs sort of assume it, which means you have to look at import statements being added and removed in your git changelogs. This sucks; python's model can work (where you need the import statement at first but eventually its just part of the language), but then you haven't solved the 'oops that keyword is also a popular method name' problem, you've merely made the transition slightly less painful, leading to... [2] there's a transition period, which still hurts (less than introducing keywords with commonly used names, but, still). [3] You use my trick of not talking in terms of features, but talking in terms of language version. But now you have to opt into ALL the features or NONE of them. Unlike option #1 adding a 'source' statement to every single last one of your source files is acceptable hardship, but you eventually have to deal with the fact that you need to remove all usages of `assert` as a keyword before you can move on, and until you do, you can't use any new features at all. Don't get me wrong, being able to track the target language feature set per source file is still a great idea because you CAN now get rid of exotic features, for example, and it makes compilation more reliable; also, the ability to opt into experimental features can be useful to test stuff again without creating a tight coupling between your source files and the build script which needs some -XX:UnlockExperimental flag or whatnot. But it's orthogonal to what Brian is trying to accomplish with this move. 
But Brian highlighted the problem with this approach in the linked article. This idea of pre-reserving potential keywords only works if the keywords you have in mind are more or less 'free'. And the problem with that is: The really good keywords that very aptly describe precisely the feature are apt and nice for a good reason. So good, any library that implements the feature as an API will also have used it. That's precisely what happened with `assert`. That was precisely the right word. It was such a good word, every library out there used it. Take, for example, `method`. When you create an instance of j.l.r.Method, you tend to name it `method`. This is fairly normal. Pre-reserving it will reduce the pain some, but it doesn't take it away: You still have to go through your code. For a very simple and obvious example of why this can't really work: Thread.yield is an actual method. You'd have to deprecate it, create a newly named variant, spend 5 java releases phasing it out, and eventually old code that isn't updated much still breaks. This is all fixable (some tool that automatically finds deprecated code and replaces it with the new way to do it comes to mind), but _it hurts_. Brian's proposal puts some pain on the shoulders of everyone who writes java parsers, once (because being able to tell that non-null is a keyword, but a-b is 'subtract b from a' is slightly tricky), and that'll be that. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/ae2czx/java_lambda_expressions_with_single_parameter/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; There's a solution that seems pretty obvious to me, although I've never seen it implemented: add a declaration at the start of each source file saying what version of the language it's written in. That way, new keywords can be added with reckless abandon, and nobody's code would break. It opens the door for other changes, too, like removing obsolete features or changing the semantics of existing features. Rust does something similar but at the crate (package) level. If you opt in to the new edition, you get the new keywords and the associated features. If you don't you still get the new features that do not require those new keywords. You can freely use other crates that did or did not opt in.
No it’s not the help, it’s knowledge sharing
You seem to be contradicting yourself between points 1 and 3. All you have to include forever is a declaration like `source 1.2` (or higher); if you don't need to do any major work in that file, you can leave it that way indefinitely, at least until the compiler vendor decides to drop support for versions less than 3.14. I disagree about there being a transition period, because with a version declaration, the transition never has to end. You can start doing new development using the latest features, and you might want to immediately update the files you spend the most time working with, but updating old modules can be put off until they need major revisions for some other reason, which means a lot of old code may never need to be updated, either because it still works fine decades years after being written, or because it became obsolete before anyone got around to updating it. When the only change we're talking about is keywords, it's especially easy, because you can build a very simple conversion tool that only has to be run once on your old code, and everything is instantly fixed. You don't even need to worry about renaming anything if you adopt my final suggestion and create a syntax that allows arbitrary strings to be used as identifiers. Obviously if a library is getting a lot of use, you wouldn't want its core APIs to require special quoting, with versioning and quoted identifiers, changing a library to use new names becomes a matter of convenience rather than a potential showstopper. I'm neutral about opting into individual language features. I don't see it as necessary, since updating a single source file is rarely difficult, and if you really need to use a new feature but can't bear updating a whole file where you need it, you can just put the new code in a separate file. Opting in to individual features also doesn't solve the same problem as a version number, because the point is to enable language evolution, and languages evolve as a linear series of versions, not arbitrary bundles of features. There's never any pressing need to support someone who, for instance, wants to start using generics but has an irrational hatred of the `assert` keyword.
That's good to hear. I don't see why it's restricted to crates, but if the crate system is a de facto part of the language, versioning at the create level is almost as good as doing it at the file level.
&gt; adding some new language constructs in a way that doesn't promote a return to hieroglyphics That's it! Just use emoji for all new keywords!
If you did it at the file level you'd have to annotate every file. Then when you want to upgrade you would need to upgrade all your annotations. Most files won't use future reserved keywords anyway so you can just change the edition once at the crate level and if the compiler doesn't complain about it, you're done.
Does anybody know of a more mobile-friendly way of reading these mailing list posts, with line wrapping etc.?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Start off by reading Sam Newman’s book on the subject, it’s a great introduction. Then worry about the particular implementation based on your requirements and time/budget constraints. Have fun!
For an enterprise project i would still recommend jdk8 as libraries have not het migrated to jdk11. For example, you will run into split package issues while using jpa libraries with eclipselink or hibernate. You will run into reflection access issues with most libraries (javafx,...) Of course there are workarounds however, for the maintainability of your project in the corporate world where every man-days must yield a return on investment, I think it is best to stick with jdk8 and migrate later when all your dependencies have. 
Try Jhipster, their sample app is configured with a few systems for deploying microservices, docker and k8s.
You'll want to look at Spring boot if you're doing microservices. I did a Udemy course to get up to speed.
Hey I am already done with Spring Boot and webservices
Shit I read your post and the brain didn't work so well. I need to go to sleep. 😆
In technical perspective, microservices are not rwally complex i think. You can easily find good resources on docker, redis, kafka etc. implementations. However, architecture is what really matters. Some simple operations can be pain in the ass due to bad design. There are many videos on youtube where people shares their success and failures. I highly recommend to go over some of them
There are charts which show how many libraries in Maven Central have either module-info or Automatic-Module-Name: https://javalibs.com/charts/java9 
Oh yes and check Netflix Oss github pages and documentation. They made school in microservices with a pretty well made working implementation of this architecture.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Or `match` 
Page is broken on mobile :(
Well I was presuming the constraint of not using otherwise valid identifiers by using hyphenation with existing keywords. Otherwise yes, match is better.
Take "assert". All your test code would be stuck on "source 1.3;" indefinitely. Unless junit breaks their API, which is a bit painful.
I bought a really good course from udemy by 21minutes that went over microservices in depth
Is it Master microservices with Spring boot and Spring cloud? Because I am doing that too! 
If only there was a single standard place... https://m.xkcd.com/927/
Subscribe to the list ;-)
It looks like in your [submission](https://www.reddit.com/r/java/comments/ae6c9e/b_is_returning_null_can_someone_help/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Microservices without the correct infrastrucure is not possible. A "Microservice" in itself is just a small app with limited responsibility (at its core). It's the coordination of microservices with Api Gateways, security, CI/CD, discovery, etc. that is the complicated part, and it is also mandatory for successful projects. Spring has a set of projects for deploying services on the Netflix stack (Spring Cloud), and you can use these as a starting point of what you need to familiarize yourself with. 
I add the article to Instapaper and open it in the app. 
I can recommend watching Josh Long's talks about Spring Cloud (e. q. https://youtu.be/SFDYdslOvu8) , as well as his Cloud Native Java workshop on github (https://github.com/joshlong/cloud-native-workshop) 
In order to develop their UI’s and not getting blocked by Swing/AWT issues, they ship IntelliJ with their custom, tweaked, Java runtime.
Can you use crates that build with the newer version of the language, while your code uses an older version?
Check out the Microservices with Spring Cloud course by Ken Krueger on Udemy. It's good.
Yes, as long as your compiler is recent enough to understand the code you are importing.
Rust does this on a per-crate basis with ["editions"](https://doc.rust-lang.org/book/appendix-05-editions.html).
There isn't a single point in this screed that is valid and the exact same arguments the author is using against gradle can be used against maven.
It is totally inflexible and if you want to do anything outside the very strict box they put you in you absolutely have to write a plugin. Maven proponents like to point out you don't have to write code for the build, but that is totally false. Once you are outside the Maven box you write those portions of your build in Java (or use an existing plugin someone else wrote). Gradle is much more flexible. You get the benefits of convention over configuration but if you need to extend your build there is a DSL available with the full power of the Java SDK behind it. If you think someone else may need/like your functionality you can package it up in a plugin and share it if you want. But you don't have to have a plugin to extend Gradle. Maven did introduce dependency management to java builds so I will give it credit for that.
Here's a link to their [docs](http://manifold.systems/docs.html) and to their [github](https://github.com/manifold-systems/manifold). Anyone got any experiences with their framework? It's so not Java and I love it! Thinking that this could replace our code generator we have in place for Hibernate entities.
`Thread.yield` is an excellent point. I did read the example about `assert` in the article. As for refactoring, I had proposed a compiler option and possibly lint-like tool that assists you in finding code that uses future reserved keywords as identifiers. So you don't have to "go through" your code in the sense of searching it by hand. Perhaps such a tool could also have an input file with a list of identifier substitutions. All identifiers that are X become Y. (A tool that analyzes the code as an IDE does, not just a stupid search/replace tool.) Such a tool would have utility even beyond the pre-reserving of identifiers. People who do not use IDEs could exactly and precisely rename identifiers without errors. If some library, Foo, were to change the name of a method in its API it could issue a suitable name-replace file for this tool to edit client code that calls the Foo library's API. (Not that I think this is actually a good idea to arbitrarily rename methods in a public API.) Just to venture into a different line of thought, and one which the article gets at, suppose you make the syntax work using some new word that is not reserved as a keyword. Maybe the better idea (back in the past when Java was designed) would have been not to have *any* reserved keywords. The Dragon Book (ancient compiler textbook) mentions a language that would allow . . . IF IF = THEN THEN THEN = ELSE ELSE ELSE = IF &amp;#x200B; &amp;#x200B; &amp;#x200B;
Do you have any experience? If not Python can be easier to start with, it is very close to English. But principles are same, mostly the syntax are different, especially with the basics. I also have started to learn coding with Java. Either way I can recommend codeacademy is a good resource to begin with. It’s pretty normal to feel confused or overwhelmed during the way but stackoverflow is your friend. Have fun mate!
You are trying to solely **spam** your blog. This is against the [**reddit rules for self promotion and spam**](https://www.reddit.com/wiki/selfpromotion) which roughly set 10% as acceptable threshold. Despite common belief, reddit is not a self promotion, nor a blogging platform. Also, this subreddit is not for tutorials, historical facts, etc. of any kind. Learn to properly format reddit posts before further participating. This mess is also unacceptable.
[https://www.codecademy.com/learn/learn-java](https://www.codecademy.com/learn/learn-java) have fun :)
Yes, this is a really good course.
[1] The tool that goes through your code for upgrading purposes is excellent, but the notion of having the flexibility to know what language spec version a source file is targeted at plus the ability to write tools to automate as much as possible is _orthogonal_. No amount of automated tools are going to take the pain away when you claim, say, `get` as a keyword (`get` is used as method name in various java libraries, including the core libs for e.g. Paths.get) – big projects cannot casually upgrade their deps in lockstep with their own code like that. I'm not saying: "Therefore you should NEVER claim a keyword". I'm saying: "_IF_ you can add a feature without eminent-domaining a keyword, that'd be good" – and I guess as followup on that: "Introducing a big list of words such as `method`, `yield` etc as pre-reserved for future purposes is a bad idea". [2] Rewriting the langspec so that there are no keywords is a non-starter. Java is what it is, the applecart upset would be gigantic. Even if we're heading down a hypothetical path where we're designing a brand new language, I doubt that is a good idea: that feels like it leads to a language where parsers (and syntax highlighters and refactor scripts, etc) are much trickier to write and as a consequence, the way your compiler, editor, etc deal with syntax errors becomes much worse. Exhibit A: The scala compiler. It is very slow and if you make a mistake, it gives you 18 ununderstandable cryptic error messages, none of which pointing at the line you actually made the error on.
Don't think this type of question is allowed on this sub?
**Sidebar** -&gt; **NO programming help, NO learning Java related questions!** If you want to learn Java, head over to /r/learnjava and read the **Sidebar** there (old reddit view only). Look for the **Free Tutorials** section. **Removed**
You should probably be making these posts on javahelp rather than on java. 
Travis CI and wikis aren't enabled for free private repos.
Let me look into that.
Looks like there's an overlay with a dialog I should be able to dismiss, but can't see any dialog. I'm on Android.
while the discussion is fascinating, I don't envy Brian's job one bit. It must be tough trying to juggle so many developers with varying degrees of investment, knowledge and backgrounds and coming up with something that the least amount of people hate.
property syntax, delegation of functionality similar to Kotlin's "by" keyword, and const would be nice. &amp;#x200B; Package private needs a keyword, I agree. Package private makes me uncomfortable and I dislike using it greatly as you can never tell whether the first dev forgot their modifiers or whether it is designed to work in a poorly encapsulated way.
I think the first time I see emojis on a source code, will be the day I resign from coding - and I fear this day is coming fast
First off, I have never used emacs. However. [https://emacs.stackexchange.com/questions/38421/how-to-compile-and-run-a-c-file](https://emacs.stackexchange.com/questions/38421/how-to-compile-and-run-a-c-file) seems to suggest you can invoke commands such as GCC from it, or Make. Simply find the location of your IntelliJ executable (idea.exe or ./idea.sh) and add it to your PATH in your environment variables. &amp;#x200B; Then run \`idea.sh\` from emacs.
I'm talking about "Run Configurations" in IntelliJ. I'm not trying to start IntelliJ, I'm trying to use the existing run configurations (in the form of XML files generated by IntelliJ) to compile and run a Java program.
I'd use Visual Studio Code for Java but I'm just too comfortable with the powerful linting, autocompletion, and other feedback mechanisms offered in Eclipse. Tbh, I should just move to Visual Studio Code anyways seeing as I do all my building and directory navigation through CLI instead of with the Eclipse buttons. 
&gt;offered in Eclipse &gt; &gt;The Language Support for Java extension brings Java support through the use of the Eclipse Language Server Protocol. This would suggest that most of the functionality should be present in VSCode as in Eclipse. (Not sure, as I haven't tried yet.)
Tried to use vscode for a large java project but switched back to Intellij almost immediately. I use vscode for all the NodeJS and React development. 
404
It's actually 200 with 'Page not found'
I get the actual page.
&gt;Rewriting the langspec I did say "back in the past". &amp;#x200B; Basically you're arguing with every point that there is no good solution. Which the article is about. And I agree there is no good solution. But some things, could be done in order to make it easier to claim a few new reserved keywords. &amp;#x200B;
No, it wouldn't. And I explained why not.
Perhaps one day we'll have some sort of machine that can automate repetitive tasks...
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Feels like your first and second point contradict each other, how would moving to vs code change your way of working with a CLI?
Vs code can’t compete with eclipse or IntelliJ 
It would be nice if the article summarised the drawbacks with using VS Code for Java development instead of Intellij or Eclipse.
Why would you do that? You should be using a build tool like maven or gradle anyway, so then you'd just invoke that
Of course not, VS Code is a text editor, not an IDE. But for some developers, a text editor that understands Java is sufficient, especially if it is faster.
So what happens if you introduce a new access modifier? How will crates from older versions treat code that use that modifier?
It sounds a lot like permazen, which is a really nice and well written library.
The older version gets the new modifier too, it gets all the non-breaking changes. Using that new modifier wasn't legal before so no old code is broken.
How is it a non-breaking change if it's a new keyword and I have old code using that word?
Either it would be accepted only if it's at the modifier position (which would make the parsing more complicated) or you could only use it in new code. In the latter case it would not change syntax at the call site so it would be no problem to call it from the previous edition.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's just somewhat useless to have an IDE if you do most everything through CLI anyways. 
I have some [bad news](https://www.emojicode.org/) for you.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I work at BigCo, and I'm not sure how much sense this makes. When we use open source libraries, we mostly clone them into our own private repo. Bug fixes might make it upstream but this is a nice-to-have and is often more trouble than it's worth, since we are often fixing bugs that are specific to our use case or scale. None of this is done maliciously, it just doesn't make sense to do it any other way. If I need to release a feature and I find a bug in Guava/JodaTime/whatever, I can either (a) push a two line fix locally and be done with it, or (b) contact the maintainer, submit a PR, fight about style/philosophy, then pull the changes back to my local fork. Relying on other people's code is a liability, but relying on other people's processes is a non-starter.
I shudder to think how much work it is to upgrade any of those dependencies. I am an advocate for running an interal Maven Repo that proxies to Central or similar for protection against things like NPM and leftpad.js, but every lib I need having its own interal fork seems like a whole ton of work that just isn't necessary. And if you need to fix a bug asap then fork and push to your repo while submitting the fix back. Hades forbid you do something to help along a project that is saving BigCo time and money.
Screed? I wrote it you know. I thought I was reasonable. Oh well.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
All of this tips about performance to me sounds like javafx is way too expensive/inefficient, the things being displayed are not that complicated, you shouldn't have to drop to canvas for every little thing or "don't modify the scenegraph because everything gets recomputed". Sounds much inferior than a browser in rendering capabilities.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This looks similar to [https://www.jooq.org/](https://www.jooq.org/)
Micronaut. Very similar to Spring Boot but offers compile-time DI like Dagger.
Micronaut. Very similar to Spring Boot but offers compile-time DI like Dagger.
How many dependencies do your projects tend to have? How many of those are "customized"? What do you do when you need to upgrade them?
Why? Best tool for the job. And for writing Java IDE's are simply the best tool.
No
Take a look [here](https://and.digital/blog/how-to-use-testcontainers-for-hassle-free-integration-testing/) if you're interested in my approach (: Took quite some time but it has finally been published.
You can just use Spring's DI container without using Spring Boot. You can just use `spring-core` and `spring-beans` but you probably want `spring-context` too.
JOOQ is just SQL translated into java. With SQL or JOOQ you still have to deal with columns, foreign keys, joins and other SQL-specific internals. JOOQ is definitely not an API to work with entities and relationships directly. &amp;#x200B;
Oh, that's pretty close, thanks for the link
Looks nice! I would add a uniform background to your item bar. I don't like that it is transparent.
&gt; I have experience using other projects such as Apache Commons Configuration, and seeing other projects like Lightbend Config and C4J, but these projects all seem like they take so much more boilerplate to get working. Both Apache commons config and lightbend have composite configs as well as configurations for all the requirements mentioned. So it's about 4 lines of code to build the composite config that supports what you want. Is that really too much boilerplate? Lightbend also has some conventions where if you follow them you get a prebuilt config with pretty much everything you want with a single line of code.
Make the walking animation a little bit faster, it looks like he is walking on ice, but you did great work there
Ignoring the database internals is going to lead to a very slow application at scale. The database internals are one of the most important parts for a performant system.
Nice try Microsoft
This is coming along great! It seems like you really like the feel of it as you walk around, would that be correct? Definitely good that you already like playing your game! What are you using to make the art assets and lay out the world? Do you have this on github or anything, or do you plan on making the code public?
Kotlin is just "Java fixed". Start with Kotlin, ignore java as much as possible. Java has many design failures that creates bad habits. (Null pointers, checked exceptions, non-safe collections, over-complex syntax, ...) Kotlin get rids of all them. Java is just needed if you need to work on long-standing Java projects. 
Completely disagree! Kotlin is just a better Java and is more usable inside and outside Android. I use it in many tasks that have nothing to do with Android. Take for example kscript: [https://github.com/holgerbrandl/kscript](https://github.com/holgerbrandl/kscript) It's the nicest way to work with big-data I'm aware of. What's the reason to keep with all Java bugs when Kotlin get rids of them for free.
Complete false! Kotlin and Java just share the JVM running enviroment. (Kotlin also works on the browser and natively). Kotlin is just the right way to write JVM code in 2019! If you know Kotlin you will get aware of many design flaws in the Java language (nulls, buggy collections, checked exceptions, ...) and will become a much better java developer.
No, no, no!!! Don't do it. Kotlin is way better. Do you think Google deprecated Java for kotlin for no reason? Other big-ones software house are also changing java for kotlin each day. Java are two things at the same time: \- The JVM, that is great. \- The Java language, that is awful and in deprecated-state.
The art is all pulled from free sources online (currently working on a credits page for the menu) and the world is a tile set that I assembled using photoshop. Not on github or anywhere as of right now, is the source code/ playable versions something youd be interested in?
The art is all pulled from free sources online (currently working on a credits page for the menu) and the world is a tile set that I assembled using photoshop. Not on github or anywhere as of right now, is the source code/ playable versions something youd be interested in?
Thanks :) I'll definatly speed it up it looked fine to me but now that you've mentioned it I see it XD
Thanks! And yeah I agree I've been thinking the same thing just too weird seeing everything behind it 
I would definitely be interested! I don't want to throw you off track though, so if making a jar or putting it on github is too much trouble, I wouldn't worry about it for now and just keep doing what you're doing. I know for me, if I get distracted I can lose steam. Are you using any kind of version control at the moment? And how are you running it? From NetBeans I'm guessing?
I can definatly pop out a jar or toss you the code if youd like :) Not much in the way of version control right now, you are correct it's just running from netbeans at the moment 
The code would be cool! I could generate a jar from it.
Sure! I'll send you a link to It a bit later once I'm home :) 
One other proposal I didn't see listed would be to express new keywords as language-defined annotations. This would e.g. work for modifiers `@publicread int myInt;`. Brian expressed concern though about this being very confusing, as one now has two kinds of annotations, "regular" ones and language-defined ones which affect the language semantics. It's a fair point of course. Although I'd say that lower-casing "keyword" annotations combined with IDEs rendering them as keywords instead of regular ones could make this manageable in practise.
How ever big is that house compared to your sprite! It looks nice though
I check reddit infrequently and just saw your comment. Feel free to PM me when you have a chance. :)
Yeah the Sprite is small compared to everything was a mistake at first but it's kinda grown on me :) 
Well then you might want to scale down some of the other assets. That house and hay bales seem **huge** by comparison.
Thanks for the feedback! I agree some of the proportions arent great and the trees are a bit off havent found quiet the right asset yet. As for the item bar it was mostly just a place holder to have some representation of the inventory working, havent decided if its going to be a bar or popup box yet, leaning towards the box right now though. 
Exactly! Databases are leaky abstractions and that is the problem. They tend to pollute application code with lots of storage issue details. The advice for most performance issues is to avoid premature optimization. Measure first and fix the small % of code that is truly slow. I am not sure if that is possible, but i like velvetdb and think that for many apps it'll be a good approach.
Reducing DOM manipulations is a very standard bit of browser programming advice. ReactJS and friends advertise reducing the amount the DOM is changed as a primary benefit of their entire framework! The FX scene graph is not particularly slow but like changing the DOM in a web app, if there's a ton of elements on screen it will cost you.
&gt; What's the reason to keep with all Java bugs when Kotlin get rids of them for free. What "Java bugs" could you be referring to? If there are any "bugs in Java," they'd be in the Java Virtual Machine since that's the runtime executing the bytecode, so Kotlin doesn't get rid of them since it also compiles to bytecode and runs on the Java Virtual Machine.
&gt; Do you think Google deprecated Java for kotlin for no reason? Google didn't deprecate Java. Don't spread falsehoods. Google supports Kotlin as a first-class language in the Android SDK alongside Java. Aside from that, Google uses Java for everything under the sun. They have [a ton of Java libraries and projects open-sourced on Github](https://github.com/google?utf8=%E2%9C%93&amp;q=&amp;type=&amp;language=java). It's worth noting they probably use every other language at Google as well. It's a big company. &gt; The Java language, that is awful and in deprecated-state. Again, another falsehood. Java is actively maintained and releasing new versions every six months.
I would be curious to take a look at the source as well, just from a learning perspective as I know Java very well and have always wondered about game development with it. If you start giving out access to the source though you may want to put thought into a license for it. If you are intending this to be totally free/open source, then doesn't really matter too much.
Well you can think whatever you want but the fact that Google decided to reimplement most of java standard libs in Guava gives you a hint!
I'm going to try and figure something out tonight for how I want to handle this, but I'll let you guys know what I can do :) 
No inmutable objects by default. Checked exceptions. Null pointers everywhere. Crappy standard lib. Pitfall JEE. ...
If you were going to make some story about being just a simple man (or small man in a bug world) then I think it would be a cool way of expressing that. 
It's hard for me to imagine a Java project that doesn't benefit from Spring Boot. Dependency Injection and autoconfiguration is pretty universal. Got any examples? Am curious.
Noted! Thanks for the feedback I might actually head towards that I kinda like the idea :) 
&gt;No immutable objects by default. Checked exceptions. NPEs. &amp;#x200B; These are not "bugs", they are a part of the language specification. You don't like them, but that doesn't make them "bugs". Now I personally do prefer Kotlin's approach to these issues, just like you, but I still wouldn't call them bugs. &amp;#x200B; &gt;Crappy standard lib &amp;#x200B; You clearly have very little experience with many other languages if you think the Java standard lib is crappy. It is one of the most robust out there. Yes, Kotlin has additional features in its standard lib, specifically tailored to the shortcomings of Java, but that doesn't change the fact that its standard lib is incredibly robused. &amp;#x200B; &gt;Pitiful JEE &amp;#x200B; I'm really not sure where you are going with this one. Yes, JEE is not the most robust solution it could be, but there are many incredibly powerful and valuable pieces (JAX/JSONP, JAXWS/RS, servlets, etc). However, when you look at the community around Spring, Java has some of the strongest enterprise solutions out there. All of which is fully compatible with Kotlin, by the way. &amp;#x200B; I get that you are a huge Kotlin fan, but this level of hate towards Java is unnecessary. The fact is, there are far more resources for learning Java than for learning Kotlin, simply because Java has been around so much longer. Once someone knows Java, it's incredibly easy to learn Kotlin. Moreover, there are far more Java jobs than Kotlin jobs at the moment.
Stil with Java, ignore licenciado. his fanboying is utterly embarrassing to look at. &amp;#x200B; personally, I love Kotlin, and for personal projects I choose Kotlin over Java 100% of the time. Nevertheless, I am a professional Java developer, with plenty of experience on both sides. Java will be easier to learn, it has more resources to help you with problems, and there are WAY more job opportunities out there for it. Once you know Java, transitioning to Kotlin is a piece of cake.
&gt;Brian expressed concern though about this being very confusing, as one now has two kinds of annotations, "regular" ones and language-defined ones which affect the language semantics It's all a big mess already anyway. `Closable` and `Iterable` are ordinary interfaces with special semantics. `@Override` and `@FunctionalInterface` are ordinary annotations with special semantics. `var` is an ordinary type name with special semantics.
Yeah, it is their company code. After getting a certificate you have to wait one or two days for it to appear in your user profile in certification service! It's insane, taking into account how much money they have from the exams and how serious they are about databases.
I currently build Spring Boot microservices for work. I've done many Udemy courses, and my personal belief is that Guru is the best one hands down. The downside is that it doesn't cover the security and cloud modules.
75% of Amazons profit is from AWS. 
&gt;These are not "bugs", they are a part of the language specification. You don't like them, but that doesn't make them "bugs". Yes, they are bug in the specs, that just make things even worse. They are bugs because they introduce errors at runtime. &gt; I get that you are a huge Kotlin fan, but this level of hate towards Java is unnecessary. I'm a huge Kotlin fun because it fixes many bugs in Java. i do not hate java at all, I'm just reallistic about the burden of trying to keep backward compatibily in the language for more than two decades. &gt;Once someone knows Java, it's incredibly easy to learn Kotlin The opposite is also true and kotlin newcomers to java will be trained to avoid common java bugs right from the scratch.
Properties -&gt; getters and setters
Same here am interested for learning
I really do recommend putting this in some kind of actual version control such as git (not Dropbox or the like). Getting started with GitHub or GitLab is really easy these days.
If the game is for wide screens I would consider moving the items bar to the left and make it vertical. As for the transparency I would leave it but change the opacity. Cheers
&gt; obviously Dagger would be the most performant Depends what you mean by performant. For the run-time stuff, the performance hit only really hits at startup time.
I'm actually really considering getting away from the item bar in favor of a more backpack like screen, but if I do keep it I'll definalty move it to the side I think thatd nake a big difference as well as changing the opacity. 
Yeah I've used git a few times in the past for other projects and version control is actually something that's on my list to get delt with tomorrow and saturday. 
Hey okay! But the quality is of replies here is very good but I'll do it the next time 
I'm not sure if there's a way to do it in JPA, but it may just be easiest to store in a local collection and then batch insert once you have those events. But be aware that the approach of wanting a certain instance to collect a set of events is not very scalable since if you eventually need to scale horizontally (which you should always account for with APIs), you likely need to put some kind of load balancer in front of your service and that would cause events to be split up to multiple instances. Depending on what you are doing, using a queue as opposed to a REST call may be better to send those events to your application since you don't have to worry about things such as retry logic that way. I usually prefer them when streaming data like events and log messages. Plus with this approach, you could make sure a certain instance takes the messages it needs from the queue and either throw ones it doesn't want back on or avoid them altogether by using temporary queues for each instance, or even sets of events.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'd say that I want operator overrides in Java but it feels like leaving them out reinforces object types a little more. Hard choice to make.
Yup! I've used this before. What turns me onto Spring Boot though is the easy application profiling and configuration that I haven't seen a way to get just through Spring Core? I very well could be missing some simple docs on it!
Yup! I've used the composite configuration with Apache Commons but am not the biggest fan of the extra work to put in place. I admittedly haven't used Lightbend Config but it's intentional since it doesn't have yaml (the common format I'm using for a lot of stuff with my team).
With respect to run time, yup. Unless I'm misunderstanding, Guice and Spring DI has a reliance on run-time DI hence starting up the DAG for dependencies then instead of handling it during compile?
Build a bean that can be shared across your REST APIs in your service. You can determine your own best data structure and logic but it will be something as follows: * The bean will have a Queue of log DTOs. * As messages come in: * If there are more than X depth to the queue, drain the queue to an array of values and write it using a bulk or batch execution. * If it's been more than Y seconds since the last drain/insert, perform one (eg, don't wait for hours to get to 100 logs.) * Depending on the data structure, you may need to synchronize it so you don't end up losing or duplicating messages. * Bonus points for making X and Y properties. * Bonus points for making a scheduled task that runs every few minutes to drain/insert (eg, if there are no new logs, dump the existing ones so you don't have stale stuff sitting in the queue). You may have to deal with retries or resiliency such as writing to disk or something if the database is down.
I get the pragmatics of it. Nonetheless, you can both make your edit/fork and submit the PR. That way at least the original author knows about the problem and your fix. I think this is a minimum return favor for someone who saved your org enough time that you adopted their library/tool.
It looks like in your [submission](https://www.reddit.com/r/java/comments/aerkgf/what_is_your_opinion_on_code_academy/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yep. Then once that start-up sequence is gone, performance is the same as Dagger.
Dynamic proxies can be up to 2x slower, but this won't matter for most beans you're likely to write in a typical enterprise application where the overhead of a method call is minuscule compared to waiting on IO.
I thought I was good in java. But looks like I’m wrong. Is this Java 23? /s
Profiles are in Spring Core. The config stuff is Boot, but isn't too hard to replicate yourself.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It really is. JavaFX can't even keep the app content in sync with the window width/height without graphical glitching. Web browsers have done that for years without issue.
Those new keywords are sure fancy!
**Removed** This subreddit is **English only**
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Any simple in memory queueing mechanism is going to suffer from potential data loss, which may or may not be an issue for your use case. Otherwise, you're probably not going to get much better than something simple like`ConcurrentLinkedQueue`, although this will still require some sort of synchronization policy to handle draining the queue and persisting the data.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I did try, but its a pretty awful dev experience. Minimal documentation on understanding how their API's work and the whole PSI system. Whenever you want to do something half useful I had to waste time and scan existing plugin projects on github until I found something that could be useful to what I wanted to achieve. Love jetbrains products, just a real bitch to develop plugins. 
lol. "Hideous C# naming conventions" Okay that's just stupid. C# has the best of practices for naming, like adding I to interfaces...etc
I never said that 
Are you using any game framework / library and how is your experience so far? I’m considering using godot or libgdx. 
I'm not using any frameworks or library's. Everything I've done has been done by me :) 
Thought about developing the Filesynch plugin from Eclipse but it is probably harder than just using a script.
It’s really ironic that the best IDE for Developers is this bad for Developers developing for the IDE itself 
There is an "extended persistence context" which allows transactions to live across requests. Don't use it. I used it in one application and never again. Any solution mentioned in other comments will be better. 
Totally agree, I've written two plugins (for internal use on my team). Getting the ide setup to start working on a plugin in a nightmare and difficult to reproduce the correct setup on IDEs with different patch levels. What little documentation that does exists is outdated and miss-leading. It's so sad and unfortunate when you contrast that with the high quality of the Jetbrains products. What a shame. :) (I've been a Jetbrain user for about 12 years now)
What do the plugins do?
They help with some internal code logging/analysis to help us discover and remove unused code from our legacy code base. It's an age old story of a once large monolithic code base having it's functionality slowly parted out to new systems but never getting the proper care and feeding it needs.
&gt; like adding I to interfaces I have seen people do this in Java as well. I don't do it, but don't care of other people do. In C# method names start with a capital letter, so do properties. That is hideous. 
For anyone who was looking for the source code you can find it here - [git link](https://github.com/dribbleware1/TinyFerdinand)
Discovering unused code is a pretty useful function; I’ve never found the existing analyses in IntelliJ (or anywhere else) to do that particularly well.. Is it something you could publish, or is it very tied to your existing code base?
Really, there are something more difficult but not a problem at all. You see, I know several JetBrains developers and can ask anything. So, you can ask me if interesting to meet you and mentonied people
They're specific to the codebase, application server &amp; logging aggregation system we use. I saw a many existing plugins that offered code analysis, but none really worked as we needed in our environment.
I wrote a few Eclipse plugins in my time. The API was horrendous. The abstractions and the level of "generalicity" of the eclipse ecosystem is really out of this world. I do not wish on my worst enemies the experience of writing eclipse plugins. In this light, I thought that writing IntelliJ plugins would be awesome. The IDE itself is junk, but maybe writing code for it is worth it. I guess this now answers that question.
Hi, if you want to help, can you star the project on Github? I need to pass 100 stars. Thank you
This is what I was planning to do along with `@EnableScheduling` to have a background thread that flushes items to the db. I am worried about resiliency now and I don't want to lose the events when the node crashes. I could be wrong, but think Kinesis client library uses a similar method where they have a local buffer where the events are collected and the pushed to the remote.
The more I think about it, using a queue might be the best option for scaling and resiliency. I don't want to lose these while they are in memory.
&gt; No reactivity: our block of code is imperative, emitting only a single event. Unless your *services use blocking drivers, which is highly likely. Rx is neat but still largely uninteresting for many applications.
I love IntelliJ also, and haven't tried writing a plugin yet, but I _have_ written templates (like for auto generation of the `equals()` method, etc.). It's almost impossible to find documentation on that too; took tons of trial and error.
Nice article about a difficult task: client-server communication using two programming languages. Well written, starting with an overview, followed by 5 steps and a gif of the final result. And the github project actually works on my machine. Impressive, congrats!
It is definitely true for OpenJDK. The directory layout changed back in JDK 9 and is covered in JEP 220. From JDK 9 onwards there is no separate jre sub-directory. As mentioned in another comment, the intention is to use jlink to build a custom runtime for your application that only includes the modules (both JDK and app) that are required for your application.
Why is IntelliJ junk in your opinion? I've never really done serious work in Eclipse so the comparison would be insightful.
what do you want? a one liner or a doctorate treaty?
The TL;DR ;)
it provides nothing that other ides (eclipse and netbeans) do not already have. and it asks money for it.
Thanks!
If you opt for a simple in memory queue don’t forget to flush the queue on app restart
What would be the argument of using vaadin over a more traditional thin API and stand alone front end app (in react or vue)
That's wrong and somewhat wrong. IntelliJ has a Community Edition that is free and open source which already has a ton of features that neither Eclipse nor NetBeans have. 
such as .... don't keep us hanging....
To be honest the thing I miss most when not using IntelliJ are the intentions. They are like quick-fixes just that the code you apply them to isn't necessarily wrong or broken. I think the default shortcut is `alt + enter`. It allows you to e.g. flip if/else statements or simplify expressions. So if you stumble upon the code your sleep-deprived coworker wrote last night: if(condition) { return false; } else { return true; } IntelliJ will provide you the intention to simplify that statement to `return !condition`. It's a rather simple feature, but I just love that satisfying feeling to just push a two buttons and suddenly the code is improved. Feels like cheating sometimes. Another cool feature I really miss in Eclipse is hidden in the inspections IntelliJ provides. Eclipse (and a lot of other plugins like ~~find-~~sport~~-~~bugs) can find problems in your code, but the IntelliJ's inspections provide a lot of fine-grained insight I never got from any other tool. A good example for that is that it checks (out-of-the-box) if links in your Javadoc comments actually resolve to something. I often go through code my colleagues have touched in more than a hundred commits and still my IDE shows me that the Javadoc is wrong, which never occurred to my colleagues. Are three features enough? I'm not exactly big on typing. I mean you could just use google like any sane human being would. Anyways - a nifty feature that Eclipse just doesn't have PERIOD is the [Stream Debugger](https://plugins.jetbrains.com/plugin/9696-java-stream-debugger). It's a little graphical tool to debug Java 8 Streams, which are inherently hard to debug. Unlike the other two points where there are other tools around that do sort of the same thing (but arguably worse), AFAIK this one is unique to IntelliJ. And as it's a plugin that AFAIK isn't installed by default, (at least in my experience) not a lot of IntelliJ users know about it. Bonus: All the features I listed are part of or can be used with the FOSS community edition of Intellij. Yes, Apache License v2. *DISCLAIMER: I am not currently nor have I ever been affiliated with Jetbrains. I was not paid to write this comment. I just enjoy using their products for many years. As someone who has professionally developed Eclipse plugins for years, I can assure you, that my opinion is not superficial.* Second Bonus: This may be rather personal and is obviously subjective, but I just don't want to use any other dark theme apart from Darcula. I tried a few, but none could compete. The default Eclipse dark theme is just an eyesore (for me). I've been using VS Code for a while for Typescript/Angular development and after two weeks of using the default theme I just gave up and installed plugins to get Darkula and the IntelliJ icon set in VS Code. I also made a couple minor manual adjustments, but unlike Eclipse, that's pretty easy in VS Code.
When I started the business around jOOQ, there were dozens of these platforms. One went bust after the other. I probably earned a whooping total $23.57 through them. Then switched to commercial licensing. Now making some very solid 6-figure ARR in licensing for the 5th year in a row. I mean, come on. An estimated $400/month for Hibernate, one of the most impactful Java libraries? https://tidelift.com/lifter/search/maven/org.hibernate:hibernate-core Tide doesn't seem to lift too high. Is that still expected to grow significantly? Most other Java libs don't have any price estimate at all, not even junit. You surely couldn't even afford 1h of /u/vladmihalceacom consultancy for that price. :) I wish you luck, nonetheless, /u/jodastephen. Sure hope you'll post an update in a year or so!
Underscore-java can convert xml to a Map&lt;String, Object&gt; structure. You need only static method U.fromXml(string). I am the maintainer of the project.
To me, Rx Java seems to be a solution looking for a problem. Yes, in some workloads makes sense. Sadly so do streams, but look badly they've been been misused. IMO, Rx code should be considered harmful in all but the most niche cases. The programming idiom is hard to read, hard to debug and hard to reason about. This makes it expensive, thus an interesting academic exercise but totally unsuitable to production code. 
I've posted a response to this article that shows several performance optimizations: https://stuartmarks.wordpress.com/2019/01/11/processing-large-files-in-java/
It looks like in your [submission](https://www.reddit.com/r/java/comments/af2px3/looking_for_a_cli_arg_parser_that_supports/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This article is a response to an article previously posted and discussed here: https://www.reddit.com/r/java/comments/acjsh1/using_java_to_read_really_really_large_files/
&gt; The IDE itself is junk What IDEs are better, in your opinion?
Genuine question, why is that?
The whole solution in Java. Easy frontend - backend integration.
&gt;Reducing DOM manipulations is a very standard bit of browser programming advice. Which stems from the standard bit of programming advice "Don't use more resources than you actually need". That isn't anything new. &gt; The FX scene graph is not particularly slow but like changing the DOM in a web app, if there's a ton of elements on screen it will cost you. Compared to a web browser it actually is. 
What do you mean?
Recently there are so many JVM languages and also so many VM languages copying more or less JVM...
Because they think Java is not as good as they expected. Though most JVM languages they invented are worse than Java in actual.
Java is just old Kotlin.
It's almost like one of the strengths of Java is having a fairly straight forward way of doing things...
 Different people have different opinions of what features are important in a language I guess. Also different languages are often good at different jobs, so its good for java that it can easily interact with them so you're not forced to only use java in your projects. 
I'd also say that verbosity and simplicity is very much a strong argument for Java. I think it largely reduces your cognitive load that you don't have to account for language features which can be implicitly present. E.g. Operator overloading (like C++), Properties (like C#)
I dont know. When I need a VM language I always use good old Java. I've tried Groovy and Kotlin but could not get along with it. Didnt like their ergonomics. Java is a well designed language in my opinion. 
Kotlin is just another Java-killer no one will remember soon! 
Because Oracle is messing with the rules around enterprise use of Java? 
Ask Jeeves
I don't think so especially on android. Ofc spring ecosystem is a different thing. Kotlin is not groovy or scala. It's clearly just a java 2.0 with backwards compatibility and doesn't want to be more.
I would have just said YouTube. I like Derek Banas.
Because Java has some glaring ~~issues~~ inconveniences. Kotlin, Groovy, Xtend, Ceylon, etc (and Lombok for that matter) mostly try to make Java less verbose by removing some boilerplate. Null-safety is also a big point. Taking [this for example](https://www.baeldung.com/kotlin-data-classes): data class Movie(var name: String, var studio: String, var rating: Float) That one line is equal to roughly 86 lines of trivial Java code. You don't lose precision, you don't introduce ambiguity. It acts completely the same. You just don't have to define the constructor, getters, setters, hash and equals function explicitly, which no serious dev does by hand anyway. That's what your IDE is for - which means that you don't have to put in actual work to write this boilerplate, but people have to read it, which is just a ridiculously humongous waste of time. At least in my opinion
Innovate or die...
It's a very convenient way for die-hard Java developers: It is possible to build a Web UI using only Java (the server side Vaadin components) code. It is hassle-free because you don't have to worry about Ajax and other UI - Server communication because that's all taken care of the Vaadin framework in a secured way. 
I doubt Google new OS will use Java as first class citizen, but Web Languages as Dart...