A brief explanation: `javax` is a namespace reserved for JCP standards, but Jakarta doesn't wish to operate within the JCP, and for good reason -- standard bodies move too slowly. You can be a standard and innovate slowly, or not be a standard and innovate quickly, but you can't have it both ways. If Jakarta (rightly) doesn't want to be a JCP standard but an ordinary third-party library, it shouldn't be able to appear as if it were a JCP standard. Otherwise, it would have an unfair advantage over other third-party libraries, like Spring. Spring doesn't get to change the APIs in `javax`, why should Jakarta?
checkout the meta site. Lots of info about mods and how they deal with shit
The two things you gotta think about are 1: Make sure your post is going to be helpful to someone else. Stackoverflow is made and (their "perfect end goal") is that no one asks questions, everything is already there. 2. Getting a question marked as duplicate is not a bad thing! There are hundreds of different ways to phrase a question, and you've now covered one! Even if there's already an answer, someone like me has a better chance of finding it. 3. Being nervous to post is also great! Too often are there CS 101 students asking what a `for` loop is. If you're worried about coming across as a "newbie" and having a "dumb question", you put a ton of effort into making a *good* question with what you've tried, what works and what doesn't, narrowing it down as much as you can as to not waste the great answerers of stackoverflow's time Honestly, 90% of my posts on stackoverflow are discarded when I solve my problem while making myself write a really good question.
For most customers budget for unit tests is the bullet point right after the documentation one.
You know how Sun used to make Java, then Oracle did... Now Red Hat do.
Not using the Oracle OpenJDK builds then?
Oracle JDK builds don't ship Shenandoah yet. OpenJDK 12 includes Shenandoah as experimental (https://openjdk.java.net/projects/jdk/12/).
Yeah that was the joke
Not yet, because Graal is Oracle's project, and Shenandoah is developed by Red Hat and hasn't hit the mainline Java yet. But once they converge, there is nothing preventing them from being used together.
I feel like I've seen this exact title 4-5 times
If I wanted something like that, I'd go to my senior dev.
Which version are you trying to install? And on what OS?
Fantastic post!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You should go to r/minecraft
God forbid you get a timely PR review though.
Get a cool name for it and start it. I suggest www.amiashitcoder.horse
Windows 7 Ultimate and the most recent version
I wouldn’t download the Oracle builds. If you want to use them in production, you’ll need to pay Oracle. I recommend downloading the free OpenJDK build [here](http://jdk.java.net/12/). Instructions for downloading it on Windows can be found [here](https://stackoverflow.com/questions/52511778/how-to-install-openjdk-11-on-windows). The process is the same as JDK 11, just with the number 12.
Ok thanks, i just didnt know where to go cuz i posted this allready on r/pcmasterrace and on r/gaming and i didn't get any response.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Anyone could share a situation where it will costs tens of thousands of € and if it's important comparing to the revenue of their business ? In situations where you have multiple services running, each having some shared codebase that depends on Java/Jakarta EE. It's hardly feasible to transition all of the services to Jakarta EE at once, so there will be added cost to do the incremental transition -- fork and maintain the shared codebase, and do a lot of extra testing. Until now Java EE has been amazingly backwards-compatible, so that during an upgrade to a new version the shared codebase could just be kept at the older version until everything has been migrated.
I do. Fix it now.
https://stackoverflow.blog/2018/04/26/stack-overflow-isnt-very-welcoming-its-time-for-that-to-change/?cb=1
&gt; Stackoverflow is made and (their "perfect end goal") is that no one asks questions, everything is already there. How do the questions get there in the first place then?
Github. Open a PR on a popular project and prepare to cry.
I’ll try that again tomorrow, but I’m wondering if I’ll have the same issues as the other download I made and just freeze at one point. I hope not
Or just not work
Open up command prompt in the directory of your server, Then run the command: `java -jar server.jar` Reply with what it says. If you could also post what running `java -version` in command prompt says, that'd be helpful too.
Well the OpenJDK builds do not include an installer. You just download a folder. The instructions will walk you through the process.
It can take quite a long time sometimes on some machines. Go grab a coffee?
Too much feminist bullshit on that blog.
The Eclipse Foundation is being coy regarding the details of the ongoing negotiations with Oracle, but Oracle was definitely willing to allow Eclipse to use the javax namespace. Neither party seemed particularly concerned about the JCP or "fairness" topics you mention. In exchange for the limited use of the javax namespace, Oracle wanted to impose limits on the Eclipse Foundation's ability to distribute non-Oracle Java SE packages. Besides Oracle's representative on the Eclipse Foundation board, no other board member was willing to sanction this trade-off. The suspicion is that this was an attempt to kill OpenJ9, but the board worried about the impact to the Eclipse compiler (ecj), Glassfish, and the non-profit status of the Foundation itself [1]. In the end it was this or kill the project, and the Foundation chose to salvage what they could. Some think it has died anyway [2], but time will tell. [1] https://www.eclipse.org/org/foundation/boardminutes/2019_03_26_Minutes.pdf [2] https://headcrashing.wordpress.com/2019/05/03/negotiations-failed-how-oracle-killed-java-ee/
&gt; the rewritten class files happen to bring down a server in production? surely you don't do the change in production. jesus. you test beforehand. come on, dont be obtuse.
You said it, man.
Just become a jr dev anywhere.
This subreddit is not for Java troubleshooting, nor for help with Java programming. + /r/javahelp is the place to go for *programming help* + /r/techsupport is the place for generic tech support questions - as yours + /r/minecraft is the place for all things related to minecraft **Removed**
This subreddit is not for Java troubleshooting, nor for help with Java programming. + /r/javahelp is the place to go for *programming help* + /r/techsupport is the place for generic tech support questions - as yours **Removed**
Java, much like Cobol, Fortran, C, etc, will be around for a long time just because there is so much existing code in use that really can't be replaced in any reasonable time frame. .Net will likely start to take some marketshare for newer projects, but really the bigger threat to Java (as opposed to the JVM) is Kotlin. In 2 years Kotlin has gone from "we now support it as an option" for Android development to Kotlin is now the preferred choice, will be supported first for new features. This will have a more immediate effect in the number of developers that will learn Java, or maintain their Java skills, than .Net will.
Just 30 minutes! It takes me that long to create an element on a swing gui properly... Needless to say I stay away from guis!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes, before you install IDE or any other tools, you need the core tools of the language such as the compiler/interpreter and libraries or any other tools. The least you'll need in case of Java is the JDK's SE or EE version. You can use EE (Enterprise Edition) if you plan on doing web development using EE tools, or otherwise just the SE (Standard Edition). EE is usually recommended. If you are on windows, the ideal place to download it is [Oracle Java Website](https://www.oracle.com/technetwork/java/javase/downloads/index.html) to the best of my knowledge. Maybe someone can recommend other alternatives too.
What are you doing where it's not remembering your position within the file? Everything I tried just now within a file is creating navigation history items, letting me use back/forward as expected. Or do you mean that your immediate history point is in some other file, but you want to skip it and any others to get back to the closest history point that is within the current file?
It looks like in your [submission](https://www.reddit.com/r/java/comments/bm1go0/plants_vs_zombies_in_java_greenfoot_api_with_code/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Java is actively being used in the HFT space as we speak and a lot of these features rolled in because of it
What about Android Studio is actually required? Can you not do everything with vim and gradle if you wanted? How is `apk` packaging (with or without play store) not a standard way of installation? There are alternatives to play store as well (fdroid? and something else that may be forgotten by everyone by now). This is a weird complaint post and I don't even develop android apps (although I've tried a few times - before and after Android Studio came to be).
Just because it is tested in QA it doesn't mean it won't happen in prod.
Fuchsia is Google's answer, most likely in combination with their current trojan horse for the system, Flutter. Better start learning Dart. :-P
I walk around different classes using \[CTRL\]+\[ALT\]+\[LEFT\] and \[CTRL\]+\[ALT\]+\[RIGHT\] quite a bit (doesn't work on some laptops through..)
Apk is in open source Android and the full toolchain is open source. Nothing stops you from building a fully working app with just vim and the toolchain on the cli. No Android Studio required. The danger is currently that most of the good stuff is moving out of the operating system and into Google Play services. Making apps without linking to Play Services becomes harder each year but it can be done. I’m curious what will happen to Android once Fuchsia is released but it is too early to tell
/r/reviewmycode
&gt; but Oracle was definitely willing to allow Eclipse to use the javax namespace. Yes, and I think this was a mistake. Oracle was willing to do this in exchange for Eclipse committing to another JCP standard, Java SE. &gt; Oracle wanted to impose limits on the Eclipse Foundation's ability to distribute non-Oracle Java SE packages. This is not true. The limitations were to *non*-Java.[1] &gt; Besides Oracle's representative on the Eclipse Foundation board, no other board member was willing to sanction this trade-off. Certainly IBM wasn't, as they've been fighting Java standards in every forum they can. &gt; The suspicion is that this was an attempt to kill OpenJ9, This is highly doubtful given OpenJ9's numbers, which don't even pose a threat to Azul. OTOH, IBM fights Java standards tooth and nail in every forum they can. &gt; and the non-profit status of the Foundation itself This was brought up by the representative of some particular company (look up which). [1] &gt; Some think it has died anyway, but time will tell. Some [think otherwise](https://mobile.twitter.com/mmilinkov). [1]: https://www.eclipse.org/org/foundation/boardminutes/2019_03_26_Minutes.pdf
Try using bookmarks, that's what they're for.
Ctrl + End, it's a standard non-Intellij-specific combo.
&gt; What about Android Studio is actually required? Can you not do everything with vim and gradle if you wanted? &gt; &gt; It can be, but the process is too cumbersome for a learner or even an average dev. Consider how easy it is in java to simply run `javac filename.java` to build class files and even jars.
https://adoptopenjdk.net/ Download jdk 11 from there, should be an installer for mac. Don’t use oracles site.
VS code is just the IDE and you'll have to setup the tooling needed for development (in this case the JDK). &amp;#x200B; Most devs are moving away from Oracle's Java distributions since there are open source alternatives (OpenJDK) are available. I suggest [AdoptOpenJDK](https://adoptopenjdk.net/installation.html).
You're not comparing it fairly, though. Try making a Spring MVC app (without Spring Boot) with just vim and javac - no maven either. That's probably not going to be very productive or fun, even though it's doable.
View &gt; Recent Locations (Ctrl+Shift+E in my keymappings) might be useful? Also bookmarks might help (Ctrl+Shift+\[1,2,3..0\] to set/unset, Ctrl+\[1,2,3..0\] to jump)
I think you looking for ctrl alt right/left arrow
Of course, it is! What I mean is don't take my word for it, use your own judgment and seek professional advice :).
Two days ago I created a small Android app. I have Nokia 3.1 Plus on Android 8.1 and it was very easy to compile &amp; debug my apk on the phone. I have pc from 2011 and sometimes it's hard to develop in VS/IntelliJ because it need more RAM, better processor or something else. As for me, Android development is easier than for ex. desktop or web, because I just need Android phone (my computer will die if I'll start Android emulator on it) and Android Studio. There is amazing documentation and simple (as for me) XML + Java code. I cannot understand your position. For new devs Android Studio is very friendly. And Android &amp; iOS, I think, will push out development for the PC one day.
`Ctrl+Alt+Backspace` navigates to last edit position. `Ctrl+Alt+←` and `Ctrl+Alt+→` navigate to last cursor position. `Ctrl+Shift+E` shows a popup with a list of recent locations for you to choose. `Alt+↑` and `Alt+↓` navigate to previous/next method. `Ctrl+E` shows a popup with a list of recent files.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bm25c7/apache_poi_and_vscode_problem/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Go to File -&gt; Settings -&gt; Keymap -&gt; Main menu -&gt; Navigate, the options you're looking for are called Back and Forward.
My impression is that Android development is becoming more difficult due to crushing technical debt of the platform. There is an opportunity for a cleaner system to replace it, preferably without Google's kinda random administration as well.
That won't filter to the last place in the *same* file, only the last place in the whole project
It will, I use it for this all the time
You are right about licensing, Oracle's street cred is already decreasing day after day ever since they indulged in that ugly patent battle with Android to claim a free ride on Google's innovation. To add licensing to an open source platform is a sure-shot way to alienate all but the most die-hard and cult-like fans of that platform. Nobody will step in the java ecosystem to build a new app today, except under duress.
If you have a back button on your mouse it's pretty slick.
Wrote an XML parser, put it on github, no one cares.
I'd be interesting if Android's runtime could be benchmarked alongside the open jdk.
Indeed there is: https://codereview.stackexchange.com
Full disclosure, I work for Azul. Zing is only a modified JVM, the rest of the JDK is built from the default OpenJDK code. Zing replaces all garbage collectors with C4, a truly pauseless collector. We also replace the C2 JIT with Falcon, based on the LLVM project to get more heavily optimised machine code. We do indeed have a license from Oracle so we can do this within the terms of that contract.
Scroll up, scroll down. If your file is too large and make that inefficient, you have too much code in that file.
Do you also assume the compensation clauses if any new jars/libraries you add to your application happen to bring down a server in production?
Yes, that is why legal has to certify any new library added to most projects.
That's the process of reaching the end goal.
I you use IDEAVim you can use double backtick. Similar to how Vim works. I don't know if there is a similar shortcut/action in regular IntelliJ.
You should use IntelliJ IDEA, it provides the best experience for Java out of the box, by far. Setting up VS Code is an unnecessary hurdle for a beginner, you can always switch back later on. On macOS, installing Adopt OpenJDK is as simple as `brew cask install adoptopenjdk`.
https://www.jworks.io/essential-intellij-shortcuts/
r/badcode
 &gt; Is there something similar to r/RoastMe but only for criticizing code? Yes, that would be me. &gt; It can be helpfull, for example where I have the wrong architecture or what is better to change Go to [CodeReview Stack Exchange](https://codereview.stackexchange.com/), mind the rules, though.
Back/Forward buttons on my mouse.
Thanks
I have 2 error messeges Error: could not create the Java Virual machine. Error: a fatal exception has occured. Program will exit.
When working on something, I usually bookmark the methods) with F3, and use Ctrl+F3 to go back to that points
then why do you test in the first place if the testing itself has no bearing on the outcome? you just said testing is useless. WTF?
The current OpenJDK build can be found [here](http://jdk.java.net/). No need to install, just set `JAVA_HOME` (on Mac) to unpacked-directory`/ContentsHome`.
You forgot to mention the fact that OP needs to have Homebrew installed (which I’d say they should, but not a necessity) and that homebrew instructions are [here](https://brew.sh/)
Oracle products/tools normally require login to download. Looking at you, ojdbc!
I don't that's a useless binding. Try end or start of the line.
Lol. Yes. I type about 120 to 130WPM. Most of the time my fingers work faster than my head. But it all worked this time.
You're thinking of [this TDWTF article](http://thedailywtf.com/articles/Special-Delivery. The article sounds like BS. Most futures contacts are cash-settled, and the few that specify physical delivery will only allow delivery in a very specific fashion. For example, here are CME's terms of delivery for light sweet crude: &gt; Delivery shall be made free-on-board ("F.O.B.") at any pipeline or storage facility in Cushing, Oklahoma with pipeline access to Enterprise, Cushing storage or Enbridge, Cushing storage. Delivery shall be made in accordance with all applicable Federal executive orders and all applicable Federal, State and local laws and regulations. &gt; At buyer's option, delivery shall be made by any of the following methods: (1) by interfacility transfer ("pumpover") into a designated pipeline or storage facility with access to seller's incoming pipeline or storage facility; (2) by in-line (or in-system) transfer, or book-out of title to the buyer; or (3) if the seller agrees to such transfer and if the facility used by the seller allows for such transfer, without physical movement of product, by in-tank transfer of title to the buyer. If you did accidentally enter into a physical delivery contact, you could get out of it by simply entering into another similar contract to transfer the delivery to someone else who actually wants it.
Wow, legal no less. So how does that work for all those popular OSS libraries 99% of the Java developers use. You're going to hold Apache or Eclipse etc responsible if something fails, because legal certified it? :O Are your legal guys really hardcore devs who are aces in assessing the stability of code?
Great read. Thanks for sharing (Y)
 I would add fori in the list of the most useful expressions. The difference in the naming between live templates and postfix completions is really confusing.
&gt; fori Thanks for the feedback! While I agree that fori is indeed handy, I find that when I do functional programming, I hardly use for loops. Do you have an example when you use this?
 [https://blog.usejournal.com/visual-studio-code-for-java-the-ultimate-guide-2019-8de7d2b59902](https://blog.usejournal.com/visual-studio-code-for-java-the-ultimate-guide-2019-8de7d2b59902) &amp;#x200B; [https://code.visualstudio.com/docs/languages/java](https://code.visualstudio.com/docs/languages/java)
You take issue with trying to make sure everyone feels welcome? I can't even imagine someone having this mindset.
What UI framework are you using? JavaFX or swing?
No, I take issue with the feminist bullshit displayed on the blog.
To me it is better. Powershell is on Linux now if I'm not mistaken. I've tried other shells over the years, Bash makes the most sense or I'd be using something else. Powershell is just weird in so many ways, unnatural. The Windows Cmd shell is 100 times better to me than Powershell as feeble as it is.
 \&gt; Garbage collection is by no means a solved problem. It can't. Having a GC without any bug is an undecidable problem, so we will never solve this problem.
I believe the equivalent shortcuts on Mac at least are \`Cmd+\[\` and Cmd+\]\` for back and forth respectively.
Swing has one thread for dispatching events and drawing. https://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html
Easiest possible way is [https://sdkman.io/](https://sdkman.io/) $ curl -s "https://get.sdkman.io" | bash $ sdk list java $ sdk install java 12.0.1-open &amp;#x200B; Switching to Java 8 (J9), then back to 12, for example: &amp;#x200B; $ sdk install java 8.0.212.j9-adpt $ sdk use java 12.0.1-open
My understanding is that UI frameworks generally run single threaded.
Doing the same
The UI is single-threaded, but that may not be the same thread as the rest of your app is running on.
In JavaFX they are listening on the JavaFX thread (the one from Platform#runLater)
Hmmm, SE, I somehow didn`t think about this.
Actually it's two threads. One for event bus.
I agree with the contents of this article, but I think it uses way too many words to convey its point: Write unit- and integration tests to detect when library updates break something. (/r/savedyouaclick)
&gt; a different Thread than the Thread that **registrated** the Listener? The thread performing the initial registration doesn't matter here. It might be the same, or it might be different. The registration was in the past already; set it aside. What's important is the thread *on which the event occurred* versus the thread where the listeners are called. And the answer is almost always "they are the same thread". Depending on what your listeners need to do, it may be appropriate to simply perform the work right there. Or maybe to spawn off a parallel thread from the listener; the new thread performs the work, and the listener immediately returns so that the UI stays responsive.
That certainly the point of the article distilled down to its raw essence. However it was written towards an audience that might still need convincing on writing automated tests and/or see how it would actually catch such issues. If you are already onboard with automated testing, then yea, the article is rehashing what you already know.
The latter obviously.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
so there's a couple ways to do this and a couple concepts to grasp. learning UI programming can be complicated. most UI frameworks have what's called the UI thread or the main thread. that's where the UI is drawn and events are processed. in general, it's a single thread because things need to happen in order for every frame. consume events -&gt; respond to events -&gt; draw UI. the "consume events" part is usually handled by the UI framework (although it's possible to get events directly from the OS, but you usually won't do that). then you write code to handle those events, whether through callbacks or directly in the event loop, the main loop of the UI thread. in the case of `keyDown`, etc., those are callbacks that the UI framework will call at the appropriate time but still on the main thread. internally, the UI framework is building a hierarchy of `Components` or `Containers` or `Views` and running the event loop for you to make things "simpler" for you, the programmer. onto the meta. Swing was old when i was forced to use it in college in 2010. if this is a personal project, you may want to switch to something like JavaFX. i personally don't like Java for UIs because C++ is better for performance and Python is better for convenience which leaves Java in the middle with few benefits. if you're trying to learn Java for professional reasons it might be better for focus on something like Spring.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You should add `for` too then. However `var `is probably what I use most. It’s just more natural to type `new Something().var`. You can See all available postfix completions in the settings in case you didn’t already know that.
(I understand this comment is a joke, but:) If I read the post correctly, /u/ayakushev uses the OpenJDK 8u with Shenandoah backport, available either in Red Hat produced OpenJDK binaries, or in nightly builds from Shenandoah project.
Shenandoah+Graal support is planned, but there is no firm ETA yet. It needs some non-trivial work on Graal side to implement parts of GC interface (since Graal only supports Serial/Parallel and G1 at this point), plus implementing some Shenandoah barriers, plus some optimization. Making sure all this works on 8u or even 11u would be even more "interesting".
A suggestion (of personal preference) on top of this. I use mouse4 and mouse5 as binding for navigating to last cursor position, just like you would in a browser to go backward and forward. I use it all the time and it has saved me a **lot** of time
Your UI might want to spin lengthy tasks off onto a different thread so as not to block the UI. For example, you have a button Calculate Foobar. When this button is clicked, you would disable the button and start a new thread which calculates the value of foobar. You could also have an animated spinner or something. Or even a progress bar, but that is beyond what I'll cover here. When your thread is done, it needs to update the UI: 1. to show the value of foobar 2. to re-enable the Calculate button Your thread can invoke `SwingUtilities.invokeLater()` with a class, or anonymous class instance. [https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingUtilities.html#invokeLater-java.lang.Runnable-](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingUtilities.html#invokeLater-java.lang.Runnable-) The run() method you pass to `invokeLater()` will execute on the Swing event dispatch thread, so it is safe to mess with the UI. SwingUtilities.invokeLater( new Runnable() { public void run() { // from here it is safe to mess with the UI btnFoobarCalculate.setEnabled( true ); txtFooberValue.setText( foobarValue.toString() ); } } ); When your thread calls `SwingUtilities.invokeLater()` it enabled a piece of code to run later, and safely alter the UI. And by "later" I mean at the soonest possible instant in time when there are no keypresses or mouse clicks happening. Like right in between keystrokes for example, your foobarValue might update, and the calculate button re-enables. If your thread wanted to update a progress bar, then occasionally (like no more often than 1/2 second) execute a `SwingUtilities.invokeLater()` that updates the progress bar status from 35 % complete to 38 % complete. Using the `invokeLater()` with an anonymous class instance is almost like coding your UI operations inline within your thread. Except they are pushed to the Swing event thread at happen "later" at the soonest possible instant in time -- while your thread continues calculating. I've done all this and more before, but I'm going from memory here and it's been a while back. Hope this helps.
Good advice! Despite years of Java (both Swing, and Web) I have not yet been involuntarily committed. At least, not so far as I can tell. :-)
Just to offer one more, I have personally also had good luck with this one: [https://www.azul.com/downloads/zulu/](https://www.azul.com/downloads/zulu/) Also: Don't use Oracle's site!
I have gotten to the point where I do not "install" java any more. I simply have multiple various OpenJDK folders lying around. (Different "vendors", different versions, etc) If you don't need to have multiple JDK versions / vendors available then you probably don't need to read any further. Anything I run with Java is configured to point to a specific OpenJDK I want to run it with. For example in Eclipse, I edit the eclipse.ini file and use the vm option (must be first line) to specify which JDK to use. For other things I may start it with a "dot bat" file (Windows) or .sh script (Linux); and preset the JDK\_HOME environment variable to point to a specific JDK. If the script must execute something, then I may typically have a pattern like: JDK_HOME="E:\foobar\RedHat\OpenJDK-x.y.z" JRE_HOME="%JDK_HOME%" JAVA_EXE="%JRE_HOME%\bin\java.exe" "%JAVA_EXE%" RubberBabyBuggyBumpers.jar -meow 15 -mix 21 Or a similar script on Linux. Slightly different if it starts Tomcat, or installs / removes Tomcat as a service.
I dabbled with Android development some years ago. You will need the Android SDK (whatever they may call it now) but you don't necessarily need the Android Studio (development tool). Your own workflow would involve calling command line tools from the Android SDK to build your APK file. And you can use the Android Desktop Bridge (ADB) tool to load your APK onto an actual device. And the SDK includes an emulator so you can test your APK in an emulator on your desktop without using an actual Android device.
Pure speculation: I suspect Android will need to support Java for quite some time due to the sheer size of the Android ecosystem. Actually support JVM bytecode rather than "Java" the language. And that's not a bad thing. A JVM to Dalvik translator. And run Dalvik, even existing Dalvik binaries under Fuchsia.
I'm mainly a dotnet developer, professionally. Recently I started to experiment with spring framework (like two weeks ago) privately. I found Java to be verbose as compared to C# also initial setup is hard (at least for me) compared with Dotnet core. I haven't done advanced database stuff yet but I didn't find anything comparable with LINQ in Java (yet). But yeah, I don't think JVM is going anywhere though at work I see projects moving to dotnet core from dotnet standard. But I haven't seen any Java projects moving to dotnet core except one where the manager was an asshole with Dotnet experience.
I don't use Spring Boot. I DO use BOTH JPA and SQL. I use JPA for interactive web operations. A responder for a particular HTTP request is much easier to code using JPA. Write JPQL (actually HQL) queries, get back objects. Update objects. Remove objects. Easy. For reports, I use SQL. Execute a query, get back a ResultSet, hand it off to JasperReports library, or other reporting library of your choice to generate output, such as PDF of report pages.
Windows 32 will probably go away by attrition. You must be having to deliver your code to the end user who runs it on their own equipment. So obviously not a web application. I was so thrilled to start on web apps a decade ago instead of desktop apps. Zero install, zero maintenance. All they need is a browser and a PDF viewer. A whole lot of technology problems just go away. No support calls about tech issues generally. Such as "Jane can't print!". The web app produces the PDF. The user prints the PDF themself -- if they even want it on paper at all.
My plan is to mostly stick to the latest LTS, so 11. Unless a new version adds some compelling new feature that makes life easier / cheaper.
I was too. Nothing against it. Now that I've moved to 11, I've done the hard part. It's easier to continue to move upwards now. And by hard part, it's not that hard.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
JavaFX is far from dead/dying. Don't know where you got that, but it is seriously wrong. JavaFX is in active development.
I'm almost the same; a professional C# dev who has started looking into Java. The setup is interesting and a little confusing. I'm still experimenting and trying to figure out some stuff. For example, I have a solution with multiple projects but Java IDEs, from what I can tell and please correct if I'm wrong, don't seem to have a notion of a solution. Which makes me wonder how to setup something like: Amber (solution) [Amber.Services](https://Amber.Services) (project) Amber.Web (project) Amber.Shared (project) &amp;#x200B; etc, etc. As far as other features are concerned, I'm fine without LINQ...honestly, I don't use it anyway. I'm not much on the whole functional paradigm. I do appreciate and use some function things, like lambdas when and where they can benefit but I don't ever see myself using a lot of the functional languages features that C# has nor do I see myself using a functional language. Time may change my mind though.
Well this is the thing. I looked to move away from JavaFX to something like Electron or WPF, but I couldn't find anything that was as powerful and easy to use. For rich desktop UI development, I really don't think there are that many contenders. I've chosen JavaFX as my framework of choice for my software, but I do see people saying that it's on the way out. I don't know why, because I think it's great, but I have seen it on a couple of forums.
I wish javafx had some way to setup the stage in a way better for Spring/Guice/Dagger. Practically demands what's ultimately a very complicated singleton. Redman no likey
Java fx is much newer than swing and awt. Those two from what I remember are still maintained so I’d think that javafx will be around for some time.
I was struggling with the exact same thing yesterday. Spend whole day figuring it out. It turns out Java world has Maven modules. So maven module is like a project within a solution. Though I'm doing Spring framework so I'm not sure if it's applicable to whole Java world. This URL has more details specific to spring https://spring.io/guides/gs/multi-module/
These rumors come exactly from the "everything JS/Electron" people who'd love to see everything programmed in actually web technologies (because that's essentially what Electron is) so that it would become fairly easy to transfer apps to the cloud and sell them as SAAS.
Yes, I hope so too! I'm not sure how it will play in to the whole commercial element being introduced to Java, but we shall see.
Well I don't think it's there yet. I do a lot of web development and tried to implement my app with electron, but it doesn't have the level of native integration you need to really get things done. I think it's good for things like Github Desktop where it's basically just a website but on the desktop. However, for my needs, I require simulation of keystrokes, integration with low-level processes etc. that Java is much better suited for.
Awesome! I appreciate the link. Will definitely check it out.
Can you give a concrete example of why this is necessary? Like what specifically do you find yourself writing with Schedulers.
Wow have you done all this with javafx?? You used SceneBuilder, didn't you? And with which IDE?
Well let's say I have a List of elements that need extremely heavy processing done per element. I don't want to do them all at once, but splitting them into 1-2 second intervals where it does 2-3 keeps the overhead to that task at a minimum. It's really easy to eat a lot of CPU time doing these things in another manner. Doing them async helps, but I might eat up all the cores until the task is done and hurt the rest of my application. &amp;#x200B; It would be especially convenient if the Iterable collections in spring repos would support such a method.
maybe most of the people think that because almost all are following the trendings, however I have been working a little bit and tried some kind of library for games and I can say is a good tool to work with, if is dying or not I cannot say I hope it can be changed to another team that can make it grow like happened with Jakarta EE.
Yep it's pretty much all with JavaFX. The only bit which isn't is the intercepting of numpad keystrokes, which I use an AutoHotkey script compiled to an executable for. The executable is still called and managed by java though. I used Eclipse as the IDE and I decided to move away from SceneBuilder. I used it in the earlier versions, but as I got used to using HTML in web design, I found that writing raw fxml was more comfortable and was a bit more transparent than the magic of SceneBuilder.
Yes I'd agree with that, I'm not very informed on the current development status, but just having used JavaFX, I think it's a great technology and I hope it continues to be supported and improved.
Did you use raw FXML?? Wow that's awesome. Is it easier or more difficult that writing JavaFX by raw code (using javafx language libraries not importing fxml)?
I would say that writing it using Java code (rather than FXML) is easier to start with, but leads to a lot more code and it gets quite messy quite quickly. If you can learn how to create each of your dialogs separately in FXML and then load them when you need them, it makes a really big difference. Especially for large applications where you need to keep it tidy. Hope this helps :)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
who is developing it, and why?
# Optimizing an SQL insertion using a for loop in java This code will allow you to insert an Array of objects into a database in a more efficient way, Using a for loop to construct the query, in order to insert thousands of rows using only one insert query; here is an example of the console results: * Inserting 1000 rows.. * Time taken insert All Once: 0.263 seconds * Time taken one by one: 48.777 seconds * Inserting 10000 rows... * Time taken insert All Once: 7.808 seconds * Inserting 15000 rows... * Time taken insert All Once: 28.57 seconds * BUILD SUCCESSFUL (total time: 1 minute 27 seconds) &amp;#x200B; /\*\* \* Beginning of the query, that will be appended to all the objects \*/ String query = "insert into company (name, shareNumber, sharesSold, sharePrice) values "; for (Company company : list) { String name1 = company.getName(); int shareNumber1 = company.getShareNumber(); int sharesSold = company.getSharesSold(); double sharePrice1 = company.getSharePrice(); &amp;#x200B; /\*\* \* Create query string with the attributes \*/ String add = "('" + name1 + "', '" + shareNumber1 + "', '" + sharesSold + "', '" + sharePrice1 + "'),"; /\*\* \* Combine main query with this object query string \*/ query = query + add; } /\*\* \* Remove ',' from the end of the query \*/ query = query.substring(0, query.length() - 1); /\*\* \* Save all companies with one query \*/ result = [db.save](https://db.save)(query); &amp;#x200B; Heres the full project: [https://github.com/Jonathanmedhed/SQLInsertOptimization](https://github.com/Jonathanmedhed/SQLInsertOptimization)
https://openjfx.io/
Its the same :) type new A().var, then Ctrl Space, effect will be same as selecting and pressing ctrl al v
Swing is the one that’s dead, JavaFX is still maintained. Also, Cool app
See ScheduledExecutorService https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html
Cool software!
Plugging in something I built exactly for that. Far from perfect and doc is only for simplest use cases atm but allows you to access spring context naturally from basically everywhere in your JavaFX app https://github.com/Tristan971/EasyFXML/blob/master/README.md
this seems to be equivalent to saying that because maven is a program that maven xmls aren't declarative.
I too thought JavaFX is dying, so I stopped from switching from Java swing/awt to JavaFX. I learned swing in school and it was easy/had the cool nerdy look. But as I came across JavaFX I thought "wow that looks nice" but also "wow that looks not easy". Mainly I my problems are (even with swing) that I don't know how to properly build a Layout etc...
I'd not heard of WPF but **for the love of all that is good in this world do not switch to Electron!** There are some cases where Electron might be an ok choice but those are few and far between. JavaFX isn't without it's own faults but in general it's pretty great, especially once you start to understand it's core principals.
.net developers ;)
Event bus runs on the UI thread. So just one thread. That's because the event bus very frequently issues draw calls which have to all be issued from the same thread.
Use AdoptOpenJdk
As mentioned below, you can use ScheduledExecutorService. Throw all heavy tasks into a queue, then use ScheduledExecutorService to poll tasks from that queue every N seconds.
Very different from collection based methods. I already use this
This would be a shortcut to that
I think that would be too much for a single method: it will have to iterate over the given collection, create a Scheduled executor service, create a queue, then schedule tasks. Personally, I have never encountered such a task in my career, not sure about the others. Scheduled executor is quite simple to use, doesn’t require much additional code and gives flexibility.
Are you planning to package the runtime with your game? If so, is there a reason why you’re restricted to Java 8? Java 9 and newer includes a tool named [jlink](https://docs.oracle.com/javase/9/tools/jlink.htm), which lets you create your own runtime image with you can package with your game.
I probably will switch to Java 9, but nonetheless I can’t seem to find the installer for JDK 9+ SE on oracles website or java.net
There won't be an installer with the OpenJDK builds. It will just be a folder. What OS are you using?
Windows 7 atm
Follow [this](https://stackoverflow.com/questions/52511778/how-to-install-openjdk-11-on-windows) tutorial then. It will be the same process with the most recent version, just with the number 12.
Thanks
No problem!
Just a heads up, OpenJDK builds generally don't contain JavaFX. You could use the ZuluFX build by Azul, which is based on OpenJDK and also free. Java 11 JDKs never contain JavaFX, so if you update to Java 11+, you'll need to add JavaFX as a regular dependency.
Why not just run in the ForkJoinPooo executor? Then its just submitting a repeating task with termination and batching
Take a look at [Kweb](https://kweb.io/), this is almost exactly the itch it was designed to scratch.
Link it
I'm learning Java and this is really cool Curious...does it not work on anything other than Windows because of issues related to keycodes on other OS's?
[removed]
 Take a look at Kweb, this is almost exactly the itch it was design"
[removed]
[removed]
The semantics are maybe a bit incongruent to me. Is it synchronous? Seems like it would be long running. If it's asynch, does the collection become immutable while it runs? &amp;#x200B; I've seen your response to others suggesting a `ThreadPoolExecutor`, but I'm not sure I get your concerns with that. You can constrain the impact on system resources via the thread pool size. The only other thing that seems to be missing is some for of `execute` for a collection? &amp;#x200B; That would be trivial to add via extension or just a static util method somewhere. &amp;#x200B; Based on the above, I suspect there's maybe something I'm not understanding.
After having written 10 applications on javafx, about different things, the non fixable situation with text and rich text makes it so I'm really really hating it. And lately I updated my OS and now am hitting [this *6 month old bug*](https://github.com/javafxports/openjdk-jfx/issues/287) that makes all of them not work. I'm super happy about this.
Active development? https://github.com/javafxports/openjdk-jfx/graphs/commit-activity My personal projects have more activity than that average of 5 commits a week... Here you have for comparison an active project https://github.com/electron/electron/graphs/commit-activity
[https://adoptopenjdk.net/](https://adoptopenjdk.net/)
\&gt; The semantics are maybe a bit incongruent to me. Is it synchronous? Seems like it would be long running. If it's asynch, does the collection become immutable while it runs? &amp;#x200B; Mmm good point maybe it would only be a thing on thread safe collection like CopyOnWriteArrayList and ConcurrentHashmap and such? &amp;#x200B; &gt;\&gt; I've seen your response to others suggesting a ThreadPoolExecutor , but I'm not sure I get your concerns with that. You can constrain the impact on system resources via the thread pool size. The only other thing that seems to be missing is some API for execute for a collection of Runnable s? Obvious current solution but a simple 2 methods to push it into a provided ThreadPoolExecutor or by default the ForkJoinPol would be nice no? &amp;#x200B; &gt;That would be trivial to add via extension or just a static util method somewhere. It's not a ton of work but I've done it so many times...I'd kinda like a method for it.
You cannot take the amount of commits as an activity measure in a *mature* codebase. The more mature a codebase becomes, the less need for changes and thus the fewer commits.
.net, winforms or WPF and why?
Swing has [guaranteed support until at least September 2026](https://www.oracle.com/technetwork/java/javase/javaclientroadmapupdate2018mar-4414431.pdf), and Oracle intend to hand it off to third-party maintainers (as they already did with JavaFX) after that.
&gt; the non fixable situation with text and rich text makes it so I'm really really hating it What does that mean?
Oh okey tysm!
Very interesting and good writeup. &gt; However, if you are writing any kind of a real-time application (be it an API or a website), GC pauses become much more impactful. I know that the term "real-time" is used quite liberally, but at no point have I ever heard of a website that has anything close to real-time requirements. Also, when it comes to hard real-time requirements parallel/background garbage collection is actually out the window completely. I might be wrong, but I believe that is even the case for soft real-time requirements. That said, I've never heard of a real-time application being written in Java, only ones with extremely high throughput.
Electron is not wrong (not only in some cases, I'd say in most nowadays). There are lots of Electron apps that perform better than most "native" java/net/etc. I see how VS Code runs full of extensions, discord, spotify, etc, and then look at programs like eclipse, dbeaver, jasperreports, etc and can't understand how those can be slow, messy and sloppy in comparison, being done in desktop dedicated toolkits and a compiled language. Web tech in desktop is not a mistake.
Isn't that simple AHK
 &gt; JavaFX is far from dead/dying. Well, it sure looked like it, or at least it had one hell of a ride. A short, biased history of JavaFX over roughly a decade or so: * JavaFX is created. * JavaFX is being pushed as Swing replacement. * JavaFX is being integrated into the JDK because the JDK release cycle is much better for JavaFX and you want it to be available by default anyway. * One of the main JavaFX developers quits. * Oracle drops JavaFX on mobile platforms. * JavaFX is being removed from the JDK because a stand-alone release cycle is much better for JavaFX and you want applications to bundle it with them anyway so that every application has its own version of JavaFX (yeah). * Oracle drops the JavaFX project as whole (but not really, kinda, they "donated" it to the community or something, I lost the track here at some point). * Gluon is now developing JavaFX (but not really, it's actually the community, or something). And then there's the thing that some of the controls are still quite shitty compared to their Swing counterparts. But sure, if you want something 3D somewhere and a few shadows here and there, it's nice.
Generating code during the test phase is actually quite clever and has a few advantages, even if it feels wrong at first.
Yeah, it's the most liberal usage of the term you can get :). I use "real-time" here as the opposite of "batch" or "deferred" (when you are computing on your own schedule and nobody is waiting for the result). If you can suggest a better term, I will gladly change it. I'm pretty sure nobody would use Java or any other non-deterministic GC language in "real" real-time systems. Neither they would use a non-real-time operating system like Linux. I have an amateurish take on this here: http://clojure-goes-fast.com/blog/latency-tool-jvm-hiccup-meter/
Switch to openJDK.
I'm working on an identical program and also in JavaFx ;) Great job!
You should switch to openJDK. Oracle JDK requires fees in commercial use ( when you bundle Oracle JDK with you game or something similar). For bundling jdk with game you can use packr ([https://github.com/libgdx/packr](https://github.com/libgdx/packr)). It create executable for windows, linux and mac.
Your scheduled executor has a thread pool that you can control/configure. If some random collection methods were creating threads it would have very bad consequences for predictabilitiy of performance of your application. So, no, terrible idea. It wouldn't scale at all.
Replaced "real-time" with "interactive". You know, ten years ago I had a professor at the university who winced every time someone used "real-time" not in the context of hard real-time systems. He probably had a point :).
The important thing is that the license for Oracle JDK 8 \*has not changed\*. Oracle changed the license for the Oracle JDK (the one you download from [java.oracle.com](https://java.oracle.com)) as of JDK 11. Rather than being the Oracle Binary Code License for Java SE, it is the Oracle Technology Network License Agreement for Java SE (naming is clearly not their legal department's strong point). For the \*Oracle\* JDK 11 and later you can use it freely for development and testing but require a Java SE Subscription to use it in production (refer to the license text for how 'production' is defined). If you want to move to JDK 11 then there are, as people have said, alternatives to the Oracle JDK. Azul (who I work for) provides a free, community edition of our Zulu OpenJDK build that also bundles OpenJFX (JavaFX). You can get that here: [https://www.azul.com/downloads/zulu/zulufx/](https://www.azul.com/downloads/zulu/zulufx/)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I wrote some swing long long ago and making resizable layouts got a lot easier when I discovered GroupLayout and the Jigloo plugin for eclipse. Some combination of BorderLayout and GroupLayout made up pretty much all the panels. I don't write desktop apps anymore and every time I look into any technology that does anything visual I just hate the whole thing. Don't like JavaFX, don't like HTML, don't like CSS/SASS/LESS, don't like vue, don't like angular, really hate react, don't like android. Thank god I get to do backend.
Honest question: what's it used for nowadays? Is there any niche for JavaFX desktop applications in the industry? I haven't heard about it, but that doesn't mean anything, I haven't heard of many things that are relevant in the industry...
Here's the blog that explains everything. It was written by a number of Java champions. https://medium.com/@javachampions/java-is-still-free-2-0-0-6b9aa8d6d244
The ForkJoinPool isnt that easily overwhelmed and there could be an overload taking an Executor just like the CF API. It's literally just a shortcut that saves 5-6 lines of code which would be pretty nice.
There seems to be this odd association of JavaFX was removed from jdk = JavaFX is dead, which is not true.
You, as a user, cannot work around the issues around the bugs or what's missing in this front. You have to wait until the situation improves with nothing to hold on to.
Yeah it's a good point, and not something I've figured out yet! I mean the general trend is towards the web - it's easier to access, easier to maintain etc. For me, desktop apps are required when you need to work more closely with the hardware on your computer. Either for native interactions (like the keystrokes in my app) or for things like CAD software where they need the resources and responsiveness of your computer. It's a niche for sure, but I certainly don't think desktop is dead like some people will say - it just has a different use-case.
I really hope you don't believe that to be true, neither that "a mature codebase" takes less commits, nor that javafx is a mature codebase... Otherwise, I invite you to go take a peek at "mature" codebases, like, firefox, chrome, linux, electron, etc, and see for yourself.
Thanks! and I hope JavaFX continues as I've backed it as my framework of choice! It's always a bit of a gamble in software...
Appreciated!
Thanks for the question/interest :) It will work on other operating systems as 95% of the code is in Java which is cross platform. However, I'm aiming at Windows for now to try and do one well, rather than several badly. There is the native keystroke element that needs to be specified to the operating system, but also things like how you compile, packages and install the application. I'm not especially familiar with OSX either which doesn't help.
Yes and no. The keystroke part of it can be done with AHK, with scripting for a specific use-case. However, the whole visual part is a lot of work. There is a whole engine I've built that allows you to combine drag-and-drop blocks in any order and then execute them. It's completely flexible and you can change it in 10-40 seconds. Also, for people who don't want to learn scripting, it's a much nicer introduction to automation. If they then choose to graduate to AutoIT or AHK, then good on them - I'l have done my job well!
Cool! Good luck and let me know how you get on :)
Sound Cool
Short and concise. I like it. I suppose the same goes for JavaFX? As pointed out in other answers, it does make sense as to let an expensive task that gets triggered by an event not block the rendering.
For UI that require both fast data updates and high responsiveness (think trading apps), a native solution is the way to go because a key aspect is being able to offload tasks to non UI threads rather than block the main UI thread. This is the big win for JavaFX, and even more so WinForms/WPF/Xamarin (last one being xplatform) due to the fantastic threading model that .net offers (async await/TPL). I would stay away from Electron for those apps mainly because it doesn't have a threading model. Its single threaded, and it achieves parallelism via multiple processes using IPC for callbacks. This is grossly inefficient for any serious UI application. Plus the memory footprint and CPU is not commensurate with what an electron all achieves. That said, Electron is fine for text editors, like VS code.
I think you've hit the nail on the head - good summary :)
&gt;Wouldn't it be convenient if it was built into Collection? Yes, Collection.serializeToJSON() would also be convenient, but this does not mean that it is a good idea to add it to the API. I'm sure /r/java could come up with hundreds of convenient methods we could add to Collection. What would the result be? An incomprehensible API with lots of weird dependencies.
There isn't any difference for you between VS code (text editor), Spotify (music player), Discord (communicator) and other programs you have mentioned? I have never used dbeaver and jasperreports but there are far more better IDEs then Eclipse and I would never decide to use VS code instead.
Ah my mistake.. a colleague had told me it was fully obsolete, I didn’t bother to verify. Well that’s great news then!
For anyone wondering what kafka is in relation to the more well known activemq: [https://stackoverflow.com/a/44792914/5411388](https://stackoverflow.com/a/44792914/5411388)
I've been years working with java projects, and after trying netbeans, eclipse, intelliJ and vs code, the only two I could stand are intelliJ and vscode. IntelliJ is really good but still isn't as fluid/snappy and clean as vs code. And up to date I haven't encountered a situation where I need to use and IDE because vscode can't do something. Really, people should try. I didn't come here to do marketing. Just to tell my experience.
I can highly recommend [mvvmFX](https://github.com/sialcasa/mvvmFX). It has a [guice extension](https://github.com/sialcasa/mvvmFX/wiki/Dependency-Injection#guice-support) you might wanna look into. It uses convention over configuration for loading the FXML files, so [no more manual fxml file path configuration.](https://github.com/sialcasa/mvvmFX/wiki/FluentViewLoader)
Good job, it looks nice! I have a question though: how do you deal with people using laptops or desktops using keyboards without numpads? Does it work on the number keys aswell?
Any OpenGL tutorial series will cover this. In Java you can use JOGL or LWJGL
Yeah programing is basically only editing text files so you can use any text editor and achieve exactly the same thing - but IDEs make it a little bit easier and faster. Modern IDEs are far more complex then vs code and this is the reason why it is more snappy and "clean" - that is the price of features which they provide. I'm not saying that Vs Code is useless because it is still very good text editor - but it have slightly different use case and shouldn't be compared to modern IDEs.
I set it up with Dagger in a project a year ago. I found a helpful youtube series on it, including navigation. Essentially you provide your own Controller factory and use Dagger to inject the controller.
Feels like you're using some very old software. Everything I use scales automatically (IntelliJ, NetBeans, Android tools, etc). Update your apps.
I downloaded the latest java version from java' site some days ago:\
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
With the mouse
This is quite a complex issue with many variables in play when i googled it a few months back. In most cases it seems to solve itself when updating java, windows and sometimes even graphic drivers. I would suggest surfing to stackoverflow and look at the many DPI scaling problems.
Do you mean the latest version from http://java.com/ ? Because that will only get you the rather old Java 8 (the last version for which Oracle produced a JRE). In that case, you should try Java 11 instead. Various providers are offering Java 11 distributions -- I think [Azul Zulu](https://www.azul.com/downloads/zulu/) is one of the friendlier ones to install.
Cmd/Ctrl+G (for go to line) and enter a reasonably large number :)
I don't mean "editing files" when I say I can do everything in vscode. I literally mean that I don't lack any search/refactoring/code generation/autocompletion/launch-debug/testing/VCS features and a long etc. Not only that, but actually the editing features are miles ahead any of the other IDEs. I don't miss, literally, any functionality. VSCode is more of a modular IDE than a "code editor".
I'm not taking about Java VM, I'm taking about the apps you use which don't support scaling.
I would upgrade to Java 11 as a first step; that may well fix the scaling problems without having to modify the applications themselves.
Another nice demo with PrimeFaces https://www.primefaces.org/sapphire/
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
`public static int minOps(int x, int y)` `{` `if(x==y)` `return 0;` `if(x&gt;y)` `return 0;` `if(y%2==1)` `return 1+minOps(x,y-1);` `if(y%2==0)` `return 1+minOps(x,y/2);` `return 0;` `}`
&gt; I see how **VS Code** ..... look at programs like **eclipse** ...comparing a text editor to an ide
I wan't to throw up each time I have to use Spotify... tried VS Code and it was slooooow...
Yeah although the lack of a consistent strategy isn't exactly helpful...
Yeah it does - there are four ways to control it: - Using a numpad built into your keyboard - Using an external numpad you've plugged in via USB - By using the on-screen interface with your mouse - By using keyboard shortcuts, documented here: https://numpadsuperpowers.com/docs.html You can also hook up an existing macropad/shortcut keypad if you want by making it do the keyboard shortcuts that in turn control my app.
Are them safe?
Safe, as in "is Azul a reputable company which won't infest my computer with trojans and spyware?". Yes, it's safe. But if you'd rather use a Java distribution from a bigger name (Amazon, Red Hat, SAP, etc.), there's a list [here](https://old.reddit.com/r/java/comments/biowk1/can_we_get_a_stickypinned_post_at_the_top_of_this/em5wcpf/).
If you think it is a "text editor" you haven't used it enough, or never. It's closer to an IDE than to a code editor.
&gt;This is, in contrast to annotations, which are an interpreted, not-typesafe, non-composable mini-language embedded into Java. There are annotations that are never interpreted (RetentionPolicy.SOURCE). They are thrown away during compilation and never make it into java byte code.
i've just downloaded java from zulu, but if i check version of java it returns me version 8. How can i set java from zulu as default?
Electron is heavy as hell and not the most refined tool, but to be fair it technically is capable of running things in a separate thread. As with most other things in JS, the exact implementation is uncertain and certain browsers before Electron came around seem to have historically used processes instead of threads because why not..., and if you design your JS multithreaded app like a Java one, you’re going to be in a world of pain. But the principle remains the same in both contexts when you want fast updates and responsive UI - offload stuff away from the main thread.
The type of annotations required for mapping HTTP routes and processes by Swagger need to be available for runtime introspection. Source only annotations are mostly useful for compilers and code generators that have access to the compile-time AST.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bmnfhj/how_can_i_take_my_object_orientation_even_further/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How is the progress on Loom going? I'm really looking forward to it, but can't find a roadmap on the official wiki
&gt; This is, in contrast to annotations, which are an interpreted, not-typesafe, non-composable mini-language embedded into Java. What does the author mean by "non-composable" here?
 &gt; Replaced "real-time" with "interactive". Better. &gt; You know, ten years ago I had a professor at the university who winced every time someone used "real-time" not in the context of hard real-time systems. He probably had a point :). Why I try to point it out and avoid it myself, is because I feel like it dilutes to a certain degree the work of those that *really* do real-time development. It is like with Voxels and Bloxels. I *love* to use Bloxel for [this kind of stuff](https://i.imgur.com/PN996Zj.png) because, yes, these are voxels, yes, I've written [a voxel engine basically](https://i.imgur.com/40Bb5Pd.png), but it really is just "bloxels". Because compared to [work like this](https://techreport.com/review/27103/euclideon-preps-voxel-rendering-tech-for-use-in-games) my engine is bullshit. And the same goes with real-time.
&gt; I have an amateurish take on this here: http://clojure-goes-fast.com/blog/latency-tool-jvm-hiccup-meter/ Also a good writeup, and a very interesting approach to measuring the stalls.
Took me some time to realise that moduliths.module != java.lang.Module I think I would avoid using the name module, you are going to cause a lot of confusion down the line.
I recently stumbled upon some quite substantial performance differences between OpenJDK and J9 when making heavy use of nested lamdas, so this seems quite nice. But I think it's lacking a more real-life example of using lamdas which almost always become a megamorphic callsite ( [https://shipilev.net/jvm/anatomy-quarks/16-megamorphic-virtual-calls/](https://shipilev.net/jvm/anatomy-quarks/16-megamorphic-virtual-calls/) ) in real scenarios which makes them horrendously slow as nothing can be inlined by the JVMs. There are some other areas that I would like to see a JVM optimizing its mega-morphic API-designs (looking at you, ArrayList, SingletonList, EmptyList and ArrayList$ArrayList) which could be another great benchmark to add! Great idea overall :)
The biggest issue I have with the new faster release cycles is the little time big libraries like Mockito and all the byte-code libs have to support each version :( I do wonder if anything could be done about that as I always have to wait for all of my dependencies to support the new java version before migrating, which can be quite a big amount
CDI has a limited form of composable annotations via its stereotypes.
I’d love to, but we develop web apps, and we’re still waiting for a version of Weblogic that supports anything above Java 8.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Gradle
Maven
Maven or gradle, basically. None is worse than the other, both work fine.
If you develop in Java or other Java platform languages (rather than JS or Ruby), the most relevant version of Graal is the one included in OpenJDK. You can use it with recent OpenJDK versions simply by adding the flags: -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler
There is still no comparison between the threading model offered by Java/C# to that via web workers. The latter mainly focuses on kernel threads which are rather expensive since you'll need one thread per async task. On the other hand C#/Java offer threadpools and executors that can be used to efficiently balance asynchronous work using fewer threads (&lt;=number of cores), i.e. one thread maybe handling work from asynchronous tasks.
GraalVM contains more than the Graal compiler that is shipped with OpenJDK. It contains native image for aot compilation and libgraal (an aot compiled Graal compiler). Don't forget language implementations like javascript, llvm, Ruby, R and Python with tooling.
Couldn't crosspost from /r/programming, will happily answer any questions :)
Maven is the preferred tool for 'enterprise' java developers but there are several alternatives. ANT with IVY, or Gradle etc. If you're coming from Python you'll probably be XML averse.. so perhaps choose Gradle. But if you intend to 'be' a java developer, then use Maven because it's the right tool for the job.
Of course, but Java developers will find the Graal compiler as part of OpenJDK is to be the most relevant (e.g. Twitter is seeing some nice performance boosts with Graal in OpenJDK on Scala workloads). Graal native image (SubstrateVM) may also be of interest. Promising usage include [a natively compiled javac for faster builds](https://medium.com/@john_freeman/native-javac-with-graalvm-ddcc18a53edb), and some may want to experiment with native images and [Quarkus](https://quarkus.io/), for cloud applications that want to trade off peak performance for a faster startup.
Thanks! Very helpful!
You can use Ant, but really, just don't. You'll thank yourself.
We expect to have early access builds in a couple of months (that's not to say we're getting ready to ship, but it does mean we're getting ready to receive feedback from a wider audience). There is no official roadmap, but ideas about more aspects of the design should be added to the wiki in the coming weeks.
Why Java 8? Why not 11 or 12?
We are actively working on 11 support. 8 is currently the version most widely used in production.
Make sure your environment variables are set properly to point to the new installation location.
Java developers will likely use Graal in OpenJDK (as Twitter does); Graal is included in JDK 12 (and 11).
I've been messing around with writing an IRC bot in Kotlin. For dynamic plugins, I've been experimenting with GraalVM to dynamically load Python and JavaScript plugins. It's worked much better than I had ever expected -- all languages are able to interface with each other relatively seamlessly.
You can indeed create a lib folder in your java project and call them as an import. If using Maven you will also add it to your pom.xml file. That part was not 100% straight forward, you HAVE to have a version number as part of the JAR file name (that part took me a bit to figure out).
\&gt; For example, we’re planning on keeping up with the ecosystem and releasing releases with the updated versions of the platforms regularly. JDK 11 based builds &amp;#x200B; JDK 12 is out already... is JDK 11 still the target? by next year, JDK 13 or 14 will be the current release.
JDK 11 is an LTS (long-term support) release and will be supported though 2023. Non-LTS releases, like JDK 12, are only supported for about 6 months.
Just to be sure, you want an Oracle build of the JDK? If so, you can download an OpenJDK build [here](http://jdk.java.net/).
It sounded more like they wanted the JRE, but the JRE hasn't been a separate product since Java 10 or so.
It amazes me that after all these years no one has created a command line tool to manage Maven's POM files or Gradle's build.gradle / settings.gradle files for you. At least most IDEs have tools for these.
Yeah, the wording was a bit weird so I just wanted to make sure.
Maven has archetypes, exactly what you described built in. Dunno about gradle but I would imagine it has similar
Speaking of native image: The blog post confused me a bit. It seems to be now an add-on component. Is there any statement about maturity? Hope it will stay open source ...
Must be trolling. Who writes shit code like that.
I have tried out native image and love it, but man Oracle makes me uncomfortable.
[https://jdk.dev](https://jdk.dev) Note: Liberica JDK is tested with TCK
this is the closet solution.
Does this mean that the version shipped with OpenJDK doesn't support the same version of Java?
It's simply a *demonstration*! So no *shit* code but destilled and focused. There is no need to put a real world domain example as envelope around this problem.
Can you help me about that?
https://youtu.be/5Zw4PIcjVNg?t=33
This is pure FUD, nobody with a bit of experience writes Java code like that. The mistake with adding a number to a primitive variable is literally Java 101. I am sure that picking up on the basics of Java is as easy or even easier than picking up the the basic syntax and conventions of Clojure.
What the article *actually* says is "immutable collections are conceptually simpler than mutable collections". Fair point, but shame about the clickbait title.
Also here : [https://adoptopenjdk.net/](https://adoptopenjdk.net/)
&gt; the JRE hasn't been a separate product since Java 10 or so Oracle certainly don't offer any JREs for recent Java versions, but AdoptOpenJDK and Azul do. (Not relevant for OP though, since they specifically want Oracle.)
Upgrading from Java 8 to JDK 11 (which was released 5 years apart) is a much bigger task than upgrading from say JDK 11 to say JDK 13 (which is being released 1 year apart). Modules, MethodHandlers etc. are all non-trivial to add.
Okay, everybody saying that the Big Bang is "easy because it is just a global find/replace" might miss a bigger picture here. Yes, technically it is only a find/replace over the whole code base, but it still is a change to the whole codebase. So it is not like the migration is done within 5 minutes, depending on the project several *weeks* of building and testing can follow. That does not take into account if you have a large base library which is used by many applications and/or services. You need to figure out a way that allows you to either migrated all of these at once, or have different versions of the same base lib which are incompatible to each other. Last but not least, if you depend on such a library which you don't have the source to, what are you doing now? It most likely is also be under a proprietary license, so you are not allowed to change it either, and then? Yes, you might have just done it to your "average sized project" and it was completely painless and that easy, now do that again on a 20 year old codebase (which of course was constantly extended) on which a complete business depends upon and one day downtime is unacceptable. I agree that one clear cut is the best solution, but saying "it's cheap because it's just one find/replace" is completely missing *everything*.
That's not how you use Maven. It looks like you're trying to get maven to comply to your notion of how a project should be laid out, and that's definitely not a good idea with Maven. Maven will download dependencies for you. There is no reason at all, for dependencies that are on maven central (or other repo's), to add them to your own project yourself.
&gt; "If you enjoy this kind of interactive articles would you consider a (small) donation💸 on Patreon " JFC. The audacity.
The Java example code is deliberately written to support his argument, not to compare two real world but distilled examples.
It is written to show how carefully one needs to understand mutability, yes. I don't consider this to be a bad idea nor to blame him on not using real world code for this example.
Maven Archetypes or if you use Spring Boot, then it's covered with start.spring.io
&gt; It is written to show how carefully one needs to understand mutability, yes. If that is the goal he should have used a title that matches the goal. Now it's just crapping on language X to push language Y.
Some Java IDEs have workspaces that contain projects and Maven/Gradle support building a project that has sub-projects, but neither are really a solution in .NET terms.
I don't understand. GraalVM is a modified OpenJDK with the latest and greatest Graal features. Currently we base on OpenJDK Java 8 we will provide a second distribution based on 11 to support Java 11.
Early Access is not about maturity but about possible future changes to the tool that you should be aware of. It will stay open, don't worry.
I assumed from Ron's comments that a version shipped with OpenJDK distributions.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We are using this in production and I can strongly suggest that you also include newer version of graal compiler (using --upgrade-module-path) as the ones included might be much older and have some... interesting issues.
For those interested you can find the abstract here &amp;#x200B; Everything is reactive. Your application reacts to the click of a button, an incoming message. But also to the result of a database query. Between these events, you want to process other tasks. Being reactive needs a complete approach. Let’s look at the state of reactive programming in Java. Which frameworks are available? Do we have everything to build enterprise grade reactive applications? How to we produce readable and maintainable code? We will explain which framework we use in our microservice platform for a cryptocurrency trading application, why we chose reactive programming and which issue we ran into. This is the complete overview of reactive programming in Java.
Congratulations on making the software. In my experience, there are also businesses out there that could do with software based on this to act as an interface to data input on legacy software, where it is not possible to automate programmatically.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No. Graal supports whichever OpenJDK version it's a part of. GraalVM is a product that's aimed less at Java developers (more to JS/Ruby etc.), but also includes Graal native image, which Java developers my be interested in trying, but supports only a subset of Java.
You know Oracle is the company that develops and owns OpenJDK, too, right?
Open a command prompt (`cmd.exe`), and `cd` to the location of `java.exe` or `javaw.exe` and run them from there. What does it show?
Its [here](https://github.com/codemonstur/simplexml)
Very useful, thanks. Still slower for me: 5-10%
Yeah, YMMV, but it will keep getting better. It won't replace C2 until it's on par or better in most things.
If I run java.exe it shows lot of raws of commands inside the CMD. If I run javaw.exe it accept the command but nothing happens
And here I am, stuck on 6.
M$ shills. FTFA
And here I am, stuck on 6.
Neither.
Native image are 3 times slower for me
AOT compilation usually suffers in peak performance compared to JIT (plus, Substrate's GC isn't as good as HotSpot's), but it has other benefits, especially for short-lived programs. For example, [this](https://medium.com/@john_freeman/native-javac-with-graalvm-ddcc18a53edb) talks about using an AOT-compiled javac to speed up builds. Others are interested in native images for "serverless" but I know little about that use case.
At first glance: Looks pretty nice. Easy to use, nothing overcomplicated, definitely a win from me
I assume the AOT can't adapt to changes in usage patterns like the JIT can?
Yes, but the power of JIT compilation comes mostly not from being able to adapt to changes in usage patterns, but in being able to do aggressive speculative optimizations (this is possible in AOT, and is done in gcc, I think, but to a much more limited degree), meaning that even though the compiler can't *prove* that an optimization is correct (and compilers can't prove lots of interesting things), it can still give it a try, and if it's wrong, it can deoptimize and compile again. So, for example, if you're looping over an array of objects of type Foo calling method `Foo.foo`, and there are 10 different implementations of Foo but so far you've only encountered one, you can optimize the call and inline it. This is something that an AOT compiler can't do because it can't know for sure that that will always be the implementation of Foo the program encounters in that loop, even if there is never a change in behavior and that is always the only implementation encountered.
My preferred one is Maven. I gave gradle ago some time ago, mainly because i had to do stuff with android, but it was kinda slow (even with all fine tuning like multi core things). It might have improved, so i would suggest to give them both a go and use what you like.
How would the jit see that it needs to deoptimize? E.g. the 70th call would actually be another foo method? Does it compile a less costly check ?
In general, yes, but in some cases it can rely on even cheaper mechanisms (in the same way that often there are no null checks, but a SIGSEGV is trapped and handled). For example, if there is only one implementation, a new one can be encountered only if it is loaded; when that happens, HotSpot can even asynchronously trigger a SIGSEGV in a thread other than the one that's loading the class. Of course, in this special case, an AOT compiler has a closed-world hypothesis (no dynamically loaded classes), so it can also do the optimization, but this is how a JIT can do it even in an open world at no additional cost.
How does the title affect your comment about the code? We probably both dislike the title, but you argued against the example code - the latter is completly independent from language bashing. The author has his intentions of course, but primarily he demonstrates \*common pitfalls\* when dealing with mutable collections in Java. And his examples are simple, yet powerfull enough to understand the problem.
I had the same issue but didn't know about the multi core features. I really wanted to like gradle because it appears to be laid out like JSON which I strongly prefer over XML
that's exactly why I am worried about the future of OpenJDK too :)
So you've been worried ten years; you can be worried for ten more.
Diane Craig Davis talks about the Duke’s Choice Award-winning Deep Space Trajectory Explorer, a JavaFX-based trajectory design and visualization software package that features a mix of custom 2D and 3D visualizations. She demonstrates the art of the possible when using modern Java toolkits to build high quality, high performance applications for Science and Aerospace industries. Diane Craig Davis is an astrodynamicist and principal systems engineer with NASA and USAF aerospace industry leader AI solutions. She designs spacecraft orbits with the Gateway trajectory team at Johnson Space Center in Houston, TX, and previously navigated spacecraft to Mars and comets at the Jet Propulsion Laboratory. She is the lead researcher for the Deep Space Trajectory Explorer.
https://www.reddit.com/r/java/comments/bmy0ha/otherworldly_java_gateway_to_the_moon_and_beyond/ JavaFX is used for a lot of space mission support tools because of its hardware accelerated graphics UI coupled with access to modern Java language capabilities and ecosystem.
Yeah but there are other implementations of the JDK
Which? The Zing and OpenJ9 JDKs are at least 80% OpenJDK code.
Point taken, though I am not sure that is true about J9
It is. The OpenJ9 JDK has the OpenJ9 JVM, which is completely separate from OpenJDK, but the other 80% of the JDK are copied from OpenJDK.
\+1 for the transcript. Although a timestamp here and there referencing to a spot in the video would have been nice.
I guess my point is that I will feel more comfortable when there is a second distribution of GraalVM
I took a quick peek at google and it was called "parallel execution", this can speed things up when you have multiple modules (which most projects have). The default (was back then) to compile them one at a time, using one or maybe 2 cores. In my experience you don't mess often with maven xml, you get the dependency xml from google, and the build/compile/deploy stuff you write once and copy &amp; paste to other projects.
Maven, it's solid.
Well it can, in a way. One use case is to AOT compile your application and then bootstrap tiered compilation later on. I think this was one of the earlier usages of AOT provided by Graal. There is a presentation about this technique by Valdimir Kozlov and is also mentioned in some research papers by the Graal guys. Somehow it succumbed to the `native-image` hype. By the way, OpenJ9 does something similar, that is to AOT compile with an outlook for tiered JIT compilation at run time.
Finance... It's really nice when you have lots of tables/charts and multiple monitors... Web does technically "work", but it's not as nice/fast. The traders all want "Excel-like" functionality/speed.
I think using the term "monolith" to describe applications not breaking its functionality up into microservices is incorrect. An application can separate it's concerns well and aggregate functionality in a single place without being labelled a "monolith." That term usually implies that functionality is coupled tightly together; it's more a description of the code base itself and not just that an application does many different things. Modularity and separation of concerns is an architectural form that doesn't necessarily require a specific network topology.
I almost always ask on reddit or irc.
I wish I knew about TDWTF when I found a 600 line return statement in 2017. It was something written under the guise of functional reactive programming, so it looked kind of like Lisp code in C#, but even most Lispers compose their functions properly. I left that job ~ a week later.
What that guy said is nonsense, we all can agree there. But I think he was maybe trying to get at the part of your build cycle where you can add additional resource files or directories in the src/main/resources directory of your project? That case is valid but its a totally seperate step to dependencies and I doubt he understands any of this anyway
Consider yourself lucky, you don't have to deal with the unreadable nightmare that is lambdas.
Maybe it's worth checking out stack overflow or some other Slack or Discord chat group for Java development :)
TIL about JDBC\_PING.
I like lambdas, on Javascript they're pretty readable to me.
Is there a way for me to use this for JavaScript/node without having to swap from open jdk to GraalVM? I'd like to migrate a project away from using Rhino.
Intellij also supports Python as a plugin, you don't need separate PyCharm installation. But CLion is not available as an Intellij plugin AFAIK.
Hey this is the first article in what will be a long running series I will be/have been working on. If you have been wanting to learn how to build and deploy Spring applications in a cloud native environment then I hope this series will be a help to you. I have always learned best by following concrete examples with clear step-by-step guides that also take the time to explain what is happening in every step. So I designed this series with that in mind. The series aren't purely how-tos, so I will also mix in practices you should be following (for example automated testing) as I am working through a concept. Because I want to provide something concrete I am using a specific cloud platform, IBM Cloud (disclosure I am an IBM Developer advocate), but while the implementation details might vary, between the platforms (the amount will vary somewhat depending on how we have implemented the feature on IBM Cloud) the concepts generally shouldn't. Happy to hear feedback and let me know if you have any questions!
Eclipse is free of charge, and supports all 3 via plugins. Typically when you download Eclipse you pick the version pimped out with a set of plugins for what you work in the most. Then you install more plugins as you need other things. Different people &amp; projects produce different plugins. The funding and enthusiasm varies between those projects. Not all language/platform plugins are equal. I've been very impressed with the Java support and slightly disappointed with the Python support.
Emacs It's great for c÷÷ and python. It is not the best for Java but it really depends on what you're doing with the language
Eclipse is brilliant. I've used it for Java, python, and C, but C++ is supported too. It is not the most user friendly or the fastest, and some of their UI/UX decisions will leave you wondering wtf the developers were thinking, but it is so damn flexible and since it can integrate with pretty much all major languages, version control systems, and middleware like databases and webservers, I always end up going back to using it. Once you make it work the way you like, it's difficult switching to a different IDE.
**Sidebar**: **Do not post tutorials here!** **Removed** Also, you need to read and follow the [**Reddit rules for self promotion and spam**](https://www.reddit.com/wiki/selfpromotion)
I haven't seen the word 'modern' used for in the same context as JavaFX for a while now.
Awesome. Thanks for the reply!
Hijacking for a bit more information: The main difference between the big two (Maven, Gradle) is that Mavens roots lie in 'convention over configuration' instead of being able to implement anything you want in an ad-hoc manner in your build script. That aside I have had times where i specifically told gradle to do clean rebuilds and then being greeted with inconsistent results as it in fact did not properly cleanup the output directory :( It's boasting about incremental compilation speeds is the same: more often than not it straight up doesnt work as it didn't recompile all needed files (this is especially true for applications using big frameworks like Spring). The IDE integration for Maven is great, even in Eclipse and Netbeans supports it natively too. Maven is a bit cumbersome at times (when you want some highly custom stuff in your build process) but you can always just implement a custom build plugin.
I managed to get native-image working on Windows and it's great. I compiled an 11 MB jar (written in Scala) into a 38 MB executable. Launching it without parameters (so it just displays a single error message) takes 0.07 s, as compared to 1.91 s with OpenJDK. Even at decent workloads the exe takes about 35% less time to finish. (Disclaimer: the benchmarks were totally unscientific. Also, I'm not sure if I configured the reflection completely, it appears to work so far, but it might crash in other contexts.)
To the best of my knowledge, the msi installer associates jar files with javaw.exe, so that jar files can be executed with a double click. Also, the installer probably also sets the JAVA_HOME environment variable. None of these are necessary for intellij.
Thank you. So the necessary steps are just downloading the standalone JDK into a folder and then pointing IntelliJ to it when I start a new project?
I found a solution on YouTube.. Basically I had to modify a key inside regedit.exe file. Environment variables or kind of word like that
It looks like in your [submission](https://www.reddit.com/r/java/comments/bn2vrq/free_mentoring_in_java_python_c_c_or_c_discord/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
good article, though it has nothing to do with java in particular.
Do they implement threading differently?
You do understand that JavaFX is the most modern UI framework out there right? Please point me to something better. Winforms is 1990's - WPF is 1999.
And something that might surprise you is that some of us are just now upgrading to Java 8 or SharePoint
"Too many people experience Stack Overflow¹ as a hostile or elitist place, especially newer coders, **women, people of color, and others in marginalized groups.**" Not sure I buy this part. I've gotten criticized/challenged a few times, and I'm a white male. My username on SO is pretty ambiguous as well.
That caught my eye too because you don't use your real name on SO so no one knows a poster's gender or race. However, in general SO was getting hostile to posters.
There's a basic UI in Eclipse for Maven, but is it really necessary? The XML is fairly simple. Once you have your templates, it's basically copy/paste and change the values. A tool would just make it more limited and cumbersome, especially since Maven plugins are hyper-configurable.
They are mostly readable in JS, groovy, kotlin, etc. However, in java they are pretty bad for readability in a lot of cases.
Some modern frameworks/libraries *do* use codegenerators instead of runtime reflection for better performance ([Micronaut](https://micronaut.io/) must be the most prominent, and, as more specialized examples, MapStruct, Protobuf).
I do understand that you don't know what you are talking about. Stating your uninformed opinion and listing .net tech as if it were for Java. "Modern" is leveraging javascript and whatever the latest MVC framework is.
And if the OP is real serious about Java, I'd recommend ["Maven by Example"](https://books.sonatype.com/mvnex-book/reference/index.html) introductory book — it is smallish yet covers some important things as working with multi-module projects.
Does IT?
You can vs code a try too.
WPF is old and garbage. Just like you.
LOL. javascript. You are an idiot monkey.
You cannot use Node without GraalVM atm, but you can use the JavaScript engine and consume it using Maven. It runs on any JDK, but if you run on JDK11, the JavaScript code is also optimized with Graal. For speed on JDK8 you need to use GraalVM. &amp;#x200B; You can find the maven profiles necessary for that in our example project here: [https://github.com/graalvm/graal-js-jdk11-maven-demo](https://github.com/graalvm/graal-js-jdk11-maven-demo)
&gt;You must be having to deliver your code to the end user who runs it on their own equipment. We're stuck on Oracle 8 for the same reason at /u/stevoski111. You're right about it being a desktop app, but it's nothing to do with the host OS but rather some dynamic libraries (drivers) that are 32-bit only...
We use JDK 6 and 8 at work. I use JDK 8 for my side-projects (fun and commercial). Not enough tooling is ready for JDK 9+ IMO.
I guess that settles that argument.
Yeah, let's write an app in a single threaded - non typed baby language shat out in a weekend by brenden eeech which has new "mvc" frameworks pooed out every month and then deploy the whole thing inside a large fat browser which still doesn't give you near native performance. It's the definition of a primitive monkey brain.
Thanks!
I work on a huge (over a billion dollar contract) military software suite that runs with a Java 7 backend and a Java 8 Swing-based frontend. A small portion is web-based running on Tomcat.
I've worked for two of the top 10 E-commerce sites in the last 4 years and can confirm both had many many projects still using java 1.7, grails 2.3.x, Scala 2.11, old Hortonworks HDP versions(2.2 - from 2014). It's hard to upgrade if you don't have a budget or the time and technical debt is seen as a joke by project managers and management. Normally only "new" development gets the latest and greatest versions, sometimes that's even constrained by bullshit restrictions that require you use application servers of a certain version.
Interesting. Mind posting the link?
If you want a single editor to all these 3 languages, right now VS Code is what will suit you best. But it will be "good enough".
Oh shoot, did you take it down? I didn't get a chance to watch it.
Buy a bigger hard drive.
It might be prunent to use separate instances of Eclipse, or at least different workspaces, for each language. Unless you have to work with projects that include multiple languages, e.g., Java and Python, you can get a more performant experience.
Isn't that the default in IntelliJ?
This style of managing JARs is completely discouraged by the Maven documentation. It also is absolutely not the way dependencies are managed by modern package managers. Why? * It blows up the size of source code repositories. * It decentralizes management of the build process. The POM is the single source of truth about the project's build process, and everything relevant should be reflected there. * What will you do if your project is a dependency of another project that brings a different version of a dependency of your project? Maven can help you diagnose and manage most of these situations, but only if you work with it. Xerces hell is one of the cases that Maven can't resolve, precisely because it is packaged with the JVM (ergo, apart from Maven) and because its authors didn't care about integrating it into the Maven ecosystem for too long. Even in the case of libraries that are not on Maven Central, the "Maven" way to do this would be to either define a local Maven repository or to host a Maven repository in your company's network, and put the JARs there.
google: we're retiring openjdk for dartvm microsoft: openjdk's installer on all platforms now includes ads for candy crush saga
I have a massive project that consists of Java and Python. 1 Eclipse instance, 1 work space, no problems. I have a lot of RAM, but you would want that for Eclipse ( or anything else that does Python as many Python IDEs are written in Java ) anyway.
I worked with Sharepoint in a gov project. That *thing* was abysmal.
Final is dealt by compiler only, same as it for private/public. Using reflectivity you can do whatever you want with Java
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It never meant final at runtime. Reflection can circumvent it, as do many forms of deserialization. Doing so however is dangerous as final fields could be aggressively cached and inlined, and later modification of such a field may not propogate at all.
Javac and JVM can assume that final fields are final, only exception to this rule are the standard input streams in System class. You can try to change them if you want but this can cause unpredictable behaviour. IIRC originally final fields were allowed to be changed during runtime, but the Java specification was altered so that JVMs could optimize final fields more aggressively.
Maven
JVM behaviour regarding `final`s described in details in these 2 articles: [JVM Anatomy Quark #15: Just-In-Time Constants](https://shipilev.net/jvm/anatomy-quarks/15-just-in-time-constants/) [JVM Anatomy Quark #17: Trust Nonstatic Final Fields](https://shipilev.net/jvm/anatomy-quarks/17-trust-nonstatic-final-fields/)
Agreed. I don’t like it much either. It originated from modularity in general and the idea of keeping a monolithic application modular over the course of its lifetime. Open for suggestions but haven’t found anything that’s close enough for people to connect but far away enough from JDK modules.
We moved to SharePoint from another product last June and I'm being told that there will be another move soon.
I agree. Monolith usually refers to the fact that your deploying a single artifact that contains a broad set of functionality. What I even more agree with is that the term does not imply any structural quality. I guess that’s why I don’t shy away from using it. 🙃
It looks like in your [submission](https://www.reddit.com/r/java/comments/bnd7ne/mentoring_discord_for_java_c_python_developers/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yeah, not saying it wouldn't work. But I ran into issues when I turned Eclipse into a Swiss army knife, at least on older versions. And I still get annoying GC pauses even if i just use Java. Let's hope ZeroGC in Java 12 improves things...
&gt; Using reflectivity you can do whatever you want with Java . Kind of. A [Security Manager](https://docs.oracle.com/javase/tutorial/essential/environment/security.html) can place restrictions on what reflection is allowed to do.
I dont find the link. &amp;#x200B; I insert what to do: &amp;#x200B; search bar -&gt; regedit.exe move into **HKEY\_CLASSES\_ROOT** \-&gt; **jar\_auto\_file** \-&gt; **shell**\- &gt; **open** \-&gt; **command** &amp;#x200B; then double click on the only file it displays: you now can watch the folder's link for example for mine is
The JIT will not inline final fields. This is because of reflection. There has been talk of allowing the JIT to do this, but so far, it has not been done.
The Hotspot JIT doesn't constant-fold final fields by default, but there are some options to enable it, and there is a JDK-internal annotation `@Stable` that will enable it in specific cases. I believe the Azul Zing JIT will constant-fold final fields and will deoptimize if they're changed. See Anna Thomas' talk at [JVMLS 2018](http://openjdk.java.net/projects/mlvm/summit2018/). https://www.youtube.com/watch?v=2HfnaXND7-M
The popular and good ones are Intellj IDEA and Eclipse. Intellij is usually seens as the best and I agree, it has a free and a commercial variant. Eclipse is popular in schools and universities and needs more plugins to get the same functionality as IDEA.
Thank you, I appreciate your response.
The correct answer is it depends. You need to find an IDE that suits your workflow and has the tools you want. Personally I use vscode with the java extension pack. But thats not going to work for everyone. I would try out a few and see if you can find one you like. I would recommend trying intellij, eclipse and netbeans. Alos dont be afraid to try a few other editors like sublime text, and atom as well.
This is a very controversial topic lmao. However I'd say 90% of answers will be one of three: Eclipse, IntelliJ, or Netbeans. Personally I prefer Eclipse, but it's shooters preference.
The big three IDE (Eclipse, Netbeans, Intellij) all have the same basic features at least like pretty good autocomplete, debugging, bare bones refactoring, and getter/setter generating shortcuts. Try out them and decide which one feels right for you. I personally use Eclipse because I like working on multiple projects in the same window.
Keyword final is removed from source code during compilation, it doesn't exist in byte-code. It's a thing for compiler only, it even makes sense to be a compiler-only thing as `final` variables can still be modified using reflection.
All 3 major ones will get the job done I used Eclipse for 10+ years. It's highly customizable, with plugins for everything. The interface may be a bit confusing and counter-intuitive at times, but just needs some time getting used to it. I've recently switched to the paid version of IntelliJ, and it's great, but not cheap. I can say it's worth the price. It looks great, the interface makes for a well-rounded package, and also has a good amount of plugins. I briefly used the community edition of IntelliJ. It's not bad, but felt a bit limited. Good if you only need to do simple Java programs. For web development you will have to start your server outside of the IDE and do remote debugging though. I used Netbeans for a very short while. It's a bit more bare-bones than the other two, but also felt a bit lighter than both. If your purpose is an IDE to learn Java or write simple programs, I would go for Netbeans or IntelliJ Community Edition. For more professional programming I would go for IntelliJ Ultimate Edition if you can afford it, Eclipse otherwise.
As a counterpoint to that, I've developed large and complex Java EJB apps in the Community edition without issue and didn't use much in the way of the features from the Ultimate Edition. Anyway, as other have said, try all the free ones and see how you get on.
Until someone builds a mechanism to change that manager with reflection. It's turtels all the way down
I think the joy of using IntelliJ is part of the reason why I'm willing to even do paid work in this field.
Thanks!
Just to clarify: there is a free and a paid version. Both can be used for commercial work, it's just that the paid version of IntelliJ has more features.
I know not everyone finds the same things expensive or cheap, but in case anyone's confused by IntelliJ's price, make sure you look at the "personal" license. The other, more expensive one, is for when a business buys a license rather than a private person or reimburses you for the license. You can use the personal license at work, the employer just can't reimburse you for it.
Correct, and the free version is open source (like Eclipse) and good enough for anything. The paid version just has some additional features that are mostly useful for enterprise development, like some additional buildin plug-ins for java ee and webserver stuff and some additional languages or a plug in to detect duplicate code.
Like everyone else says, the top three to checkout: NetBeans, Eclipse and Intellij. I use Intellij Ultimate at work, but for all my personal projects I use NetBeans 11.
&gt;Keyword final is removed from source code during compilation, it doesn't exist in byte-code That's not true. Try doing Modifier.isFinal(Field.getModifiers()) on a final field.
&gt; it doesn't exist in byte-code untrue, see https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.5-200-A.1
It's worth pointing out that the python plugin gets features later than PyCharm. I believe Jetbrains have an option to get all their tools for cheaper than getting several individually.
Why the down votes, Emacs is great for C++ and Python and with JDEE it does quite well with Java too. Is this down voted because it doesn't have all of the in-your-face popups that most IDE's have?
For those who may not know, if you’re a student you can get all of Jetbrains’ products for [free](https://www.jetbrains.com/student/).
RuneScape also runs on Java (though not the new NXT client, which uses C++).
[Equilinox](https://store.steampowered.com/app/853550/Equilinox/) is also a game that is made entirely in Java. You can also check on Youtube the developer of the game.
Someone needs to ban these farm accounts (and the accounts they are linked to).
&gt;I've done it so many times I'm so curious about what you're doing it for.
What lib did he use? I mean the api for displaying grpahics like LibGDX etc.
&gt;This is super common in backends that do a lot of data processing Pausing between units of heavy work is a somewhat bizarre and indirect way of managing resources within an application. If you're worried about saturating cores you can do the work in a thread pool constrained to use a smaller amount of threads then the number of cores available. Alternatively, separate the latency sensitive part of your system from the processing heavy part of your system. I'm assuming your concern about eating about CPU time has to do with responsiveness. Otherwise, what's the point in keeping CPU utilization low, you're going to have to do the same amount of work in the end anyway.
Minecraft, runescape
He used LWJGL.
Java isn't popular for games because of its garbage collection.
The free MMO [Spiral Knights](https://www.spiralknights.com/download.xhtml) was made in Java, as far as I know.
https://store.steampowered.com/app/328080/Rise_to_Ruins/
Psycho Starship Rampage is another. Steam: https://store.steampowered.com/app/386560/ Interview with the devs: https://www.spacegamejunkie.com/featured/psycho-starship-rampage-qa-paranoid/
Medical data (ORU RO1 message data) sent twice a day to the tune of many gigabytes of data which needs to be serialized and inserted into the database. Plus several components on both the front and backend.
Very interesting. So why are you concerned about taking up CPU time when that happens?
Fairly certain that 'Slay the Spire' is used with libGDX
It will cause the frontend searches that run queries which search an extremely large dataset to be slower. We have something like 14-15 tasks running in the application, so we can't just give one a couple cores and leave it be. Just pushing these operations to a thread pool did not work out very well. &amp;#x200B; Basically there's no big hurry to finish any of these tasks, so time is a resource we have in great supply while CPU time is not. We're effectively trading time for CPU time, and it works pretty well. There may be better ways to do it &amp;#x200B; Crude time slicing essentially I suppose. &amp;#x200B; A consideration that's currently being worked on is distributed processing as opposed to one monster server, but that's a great deal of work. My proposal is using Hazelcast distributed maps to hold incoming messages in memory then using the distributed executor system built in. Then our scaling issue is the db which we'll probably offload to EC2 or something.
Project zomboid: https://store.steampowered.com/app/108600/Project_Zomboid/
Honestly I think it's because I misspelled c++ with c÷÷. When I was writing the comment it was super sunny and could barely see my keyboard. But this is my attempt to rationalize it :D
Such a good game
Excellent game!
does this have the same license as with openjdk? The last time I checked, I remember someone mentioned that the license is very restricted and it is meant for paid customers of Oracle only. you could only use GVM in a non production context.
I think it *does* stop other classes from modifying the field at runtime through normal code (see the top response's UPDATE section). However, because of reflection and class-loading shenanigans, it doesn't completely guarantee that it can't be modified at runtime, meaning the JVM can't be guaranteed to do certain code optimizations for final items right away. The Hotspot JVM will notice if a class is truly final through other means. The keyword should still be used where applicable and it will still enforce that the field isn't modified, meaning the JVM can *potentially* do more runtime optimizations, if that's something you're interested in.
\&gt; there are some options to enable it, Could you please give some of them?
Minecraft is probably the biggest
A SecurityManager which does not restrict reflectively changing the SecurityManager would merely be misconfigured.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Gradle Does Have A Command Line Interface And It Works Pretty Cool. Here Is The Link https://docs.gradle.org/current/userguide/command_line_interface.html
Android Is Backed By Google. And It's Also One Of The Popular Smartphone Operating System. I Have Been Developing Android Apps For More Than A Year Now. And I See More Job Opportunities. But It's True That With Tools Like Flutter, React Native, Kotlin, The Community Is Shifting From Using Java As Their Primary Language To Write Android Apps. So I See Java Loosing Some Share In The Language Used To Develop Apps. 😄
I’ve used it, it’s awesome! Key is that your application name (spring property), deployment, configmap, and secret are all named the exact same so the library can find everything it needs. Once you get it up and running it’ll be super easy to replicate for all your apps
My setup is spring boot + minikube + fabric8 maven plugin. I can actually deploy my application but my problem is the configuration in pom.xml for the fabric8 plugin. I think there are a lot that can be setup in it, it's just that the documentation is not that great.
There is also [Jib](https://github.com/GoogleContainerTools/jib), which seems much easier to use. I haven't tried both of them, but I would consider jib first. See also [](https://cloud.google.com/blog/products/gcp/introducing-jib-build-java-docker-images-better)
I never did any configuration in the pom. Add the dependency, name you app, deployment, configmap, and secret to the same value, and the library uses service discovery to find everything it needs at startup. I admit to not using with minikube though, I’ve never found a use for it and rather have a dedicated dev instance of k8s instead
I also didn’t use it for any kind of deployment, but a way to connect the k8s properties and secrets to my app dynamically at runtime
Fabric8 is way to much magic. Jib is less magical. Add Skaffold to it and you have something that isn't directly tied to a library in your code. That is my biggest problem with fabric. Keep the deployment stuff separate from your application stuff.
Do you have some insights/predictions into what may happen from this decision? Would jakarta's progress be merged into oracle java ee's spec from time to time, or the oracle one will stall in development? Which one would application containers support, will it depend on the app container in question?
I think the spec is the JCP's, and the JCP is the body that can evolve it, but the people who like EE don't want to work inside the JCP because it's slow. I don't know for sure, but I don't think Oracle wants to be involved in the JCP over EE, either, especially as there are non-standardized open source projects that seem to be doing better. If people don't want that space to be standardized, then it won't be.
Because someone screwed them up. So now I have to write a unit test generator to see how many of them are broken. Turns out that 1% of the thousands of properties have a defect. -- Me, ten years ago, Silverlight project
But unit tests aren't *supposed to* test the API at the module boundary. They test the implementation. *External consumers* might not know that a class is just a POJO, so from their perspective it might look like the class needs a test, but testing isn't their responsibility in the first place. *Internally* to the module we do have enough information to decide whether something is just a POJO or whether it performs computation or storage, and this is where unit tests should be defined. Alongside the implementation. In fact if the class is not a POJO and is backed by some computation or storage mechanisms, there are probably internal classes and methods relating to these mechanisms which need tests written for them! Clearly we need to apply our private knowledge of the implementation in writing these tests, so there is no reason why we shouldn't *also* apply our private knowledge of the implementation in deciding which classes are simple enough not to need tests. If you're testing against external API then you're not writing unit tests you're writing integration tests. Well that's the way I see it anyway.
This seems silly. Good luck explaining to an employer that it’s necessary to bill people to test POJOs when universally it is regarded as a waste of time.
\&gt; Pojos \[...\] are often serialized \[...\] into SQL &amp;#x200B; Never saw that in my life. And I'm done with that article.
What you can do is to use a frontend webserver like Apache or nginx to combine your apps. This is pretty easy to do as long as the link structure of your app is pretty simple. For example, `/profile` is implemented in nodejs, and `/forum` is in Java EE. As long as the visual style is the same, visitors will be none the wiser. What you also can do is to split your app into multiple components. Let's say a frontend and a backend component. If you do this as fine-grained as possible, then you get Microservices. Now, the beautiful thing is that each of the components can be implemented in another language, as long as they can talk to each other, usually via REST, SOAP (for the masochistic) or gRPC.
Which is why I could see someone making the argument to test the .equals method, but getters and setters? No that seems like a waste of time.
A far better solution would be if Java got off it's ass and just added properties to the language directly so it would become impossible to screw up simple properties in the first place. Since Spring Boot has support I use lombok for generating the getters/setters/equals/hashcode, and it's nice they all just won't and I don't have to worry about if someone added a property but didn't add it to the other methods.
If you're writing Java now, just use lombok. Seriously, it can save you thousands of lines of code and comes with no runtime cost. It generates the necessary code at build time, so it has no impact on the size or performance of your jar. Any new project I start automatically gets lombok as a dependency. The only downside is that many editors don't understand it, so you have to grab a plugin (which exists for all major editors) to get autocompletion and no errors.
Just want to clarify - Apache can handle node.js ?
I take a wild guess and say that you used relative paths in your code. This won't work as at runtime the project's directory structure doesn't exist any more. If you put the resources into `src/main/resources` it should be possible to access them via the classloader. For example, via `App.class.getResource()` and `App.getResourceAsStream()`. The path `/` stands for `src/main/resources`. A class `a.b.C` can access a file `text.txt` in `src/main/resouces/a/b` either via `/a/b/text.txt` or via `tex.txt`.
Most of the existing Maven plugins are "ancient", sufficiently declarative and battle-tested. It is worth knowing what exactly a Maven plugin does and which tools it calls in the background. But most people never get to check out the source code of a Mojo though, let alone write one.
It's available [here](https://www.jetbrains.com/store/#edition=personal) if anyone is interested. If I remember correctly, the price should also go down the longer you stay subscribed?
[Records](https://cr.openjdk.java.net/~briangoetz/amber/datum.html) are currently being worked on.
Yes i totally get you and yeah I right clicked on the error itself and selected fix all errors.
I believe java agents are ran before anything (just after class loading though), so we could always rape that security mgr ?
Writing specialized tests just for POJOs is dumb. What is the POJO *used for*? How you test the POJO depends on *why you created it*. If the POJO is a DTO type, you'll be naturally testing the setters and getters when you are verifying behavior. You can automatically test equality by comparing DTOs directly in the assertion. If you added logic to a POJO, why did you add it? I think the reason why questions like this come up is because people think you should have a unit test per class. When in fact there's a reason why in unit testing, it's called a *system under test*.
I serialize POJOs to/from SQL all the time. I'm pretty sure what the author means by that is the bean binding mechanism of libraries like MyBatis or the Spring JdbcTemplate bean mappers.
Good stuff! But as a word of caution for any adventurer heading down the Spring Session JDBC path, be aware of a critical bug affecting MySQL: [https://github.com/spring-projects/spring-session/issues/1027](https://github.com/spring-projects/spring-session/issues/1027)
Awesome thanks for the follow-up. Sorry if I was a hardass
Could we please not trivialize "rape" by using it to mean "bypass a piece of software"?
_subject_ under test
I'm using [Martin Fowler's definition](https://martinfowler.com/articles/mocksArentStubs.html).
Sure, sorry :o
I used to have this same philosophy. Then I switched from a java team to a python one at work. While the plug-in did an ok job, it just didn't seem to handle venv as well as needed so I ended up switching to vscode for most of my work and that worked out pretty well.
Yes, would definitely work on tomcat. We had the problem that our app was deployed under server.com/app. That fucked with the (relative) CSS links etc though so keep that in mind.
Yes, would definitely work on tomcat. We had the problem that our app was deployed under server.com/app. That fucked with the (relative) CSS links etc though so keep that in mind.
I've seen plenty of tuto to make a domain link with a webapp but nothing to make many domain link to the same webapp. Also it look like to add domain you need to modify xml file, that mean you cannot add a domain without restarting tomcat?
You can map paths to you war IIRC, but I don’t know if you can apply the changes without a restart.
Yes same license as OpenJDK for the community edition. CE is free to use in production.
I have a test util library that makes it one line of code per pojo. If you make it easy for your team there’s no excuses for picking and choosing what should or shouldn’t be tested. Keeps arguments down to a minimum
I’d easily explain that one line of code to test a pojo takes less time than having pull request after pull request arguing over what should or should not be tested
Second vote for Jib.
If your unit test for any class is one line of code, then I can almost guarantee you it’s not a useful unit test. You are just writing that line of code to artificially inflate your code coverage numbers, which is actually worse than doing nothing at all. It can’t be doing any useful testing on any functionality for a class in one line of code. Unit tests shouldn’t be used to give your manager a code coverage number. They should be driving development, and forcing people to understand the code they are changing if they need change something. Writing unit tests for pojos does the opposite by impeding and slowing down development unnecessarily. Even if it’s one line of code, I and my entire team still needs to import and get familiar with that package, which adds almost no value to me as a developer.
You could use an http proxy with virtual hosts and rewrite rules
This is essentially what we do, it works well, just have to have solid and clear rules
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
When one line of code can prevent arguments on your team during a PR process about what should or shouldn’t be tested because of something arbitrary like pojo vs non-pojo, I’ll opt for one line of code all day. Speed of delivery includes everything, not just how long it takes you to create a PR.
I really don’t hope this comes off as rude, but if your management and coders actually have had this problem of arguing about whether or not to test pojos to the extent that you had to find a library that helps this, then you have bigger problems. Even if for some odd reason management wanted you to unit test pojos, using a one liner test that auto generates useless unit tests is not only dishonest, but the wrong way to unit test something. The role of unit tests is to test things. Not to prevent arguments. Just my opinion.
Your job as a development team is to provide business value as quickly as possible, if arguments happen it slows down the process. There’s also the issue of junior developers and how to get them up to speed as quickly as possible. It’s far easier to just say test everything, and here’s some tools to make the tedious pieces less so than to go through back and forth PR processes that take up the time of your sr developers, who could instead be producing top quality code. The simpler you can standardize, the more you can get done. This conversation is proof that one line of code can be more beneficial to delivery time than discussing the merits of testing POJOs
Useless unit tests don’t provide any business value though. They actually take away business value because even the time importing that library and writing that one line of code for each pojo could have been used to do something that actually adds business value.
You’ve spent at least 20 min on this thread alone arguing with someone headstrong. Is it that hard to believe that someone like that might be on your team? That instead of the 2 min it would take to write the tests, you’d spend an hour arguing over the merits of said test? I’ve tried it and found having a standard practice of test everything you write to be much easier, with faster delivery. YMMV, but for my team having straightforward standards with fast ways to get it done have worked the best to streamline the process. There’s no business value in code not in production.
Unfortunately I’ve argued with people on reddit for much longer that I should have. But that’s a completely different point. You have yet to address how useless unit tests offer business value, it seems like because you don’t have an answer. If you aren’t going to write proper unit tests that actually test things and provide value (don’t just serve as a stupid anti argument snowflake shelter), then don’t write them at all for pojos which is what 99.999% of Java developers do. Your argument basically comes down to, it’s better to straight up lie to management by telling them that you have useful unit tests in order to avoid a argument that probably would never happen in the first place. So you put a stupid one liner to lie to them to tell them everything tested, when all you’ve done is artificially inflate numbers. It’s so, so wrong. Just tell them that writing unit tests for pojos is a waste of time, and if for some reason they insist then write actual unit tests, not useless auto generated ones that will pass literally no matter what. Might as well write a test that just asserts 1==1 to “avoid an argument” according what what you’re saying. I honestly don’t care whatever practices you use. I just offered my opinion. You keep doing whatever you want, but I’m calling it a day now that I’ve stayed up to watch game of thrones for night. Going to bed and moving on with my life. There’s no value in reading further comments.
Probably not. What I meant was to use `ProxyPass` to map certain path to a nodejs server and others to a Java EE server. Similar for nginx.
Very cool. Just watched the vid. Solid UI and overall feel of this game. What did you use to make it?
I really like the look and feel of it.
When will we begin to start testing comments?
That guy might be one of the only architect type people I can actually stand to listen to. I listened to about half the interview and it was actually enjoyable, rather than the usual cringing every few seconds. But on that particular point I simply think he's wrong. He says making one choice would be the worst because the group behind the other choice would be upset - we'd never gotten anywhere with that philosophy. Fact is any time there is a change there is always someone upset. Just because someone wants to spaz out over "what do properties mean, really?" doesn't mean you have to be hijacked by them. There's really only 2 options: - user.getId() - user.id They should chose one and move on...
While we won’t be getting properties right now, we will be getting records, which I linked above. The name of the accessor method will just be the name of the field.
Is that Krillin
Did you make the tree assets and character asset yourself or did you get it somewhere?
I would love a post or video with explanation of how you started doing it and what you would have done differently when looking back at your development. Also, how do you keep yourself motivated?
For crying out loud when will we have data types and this POJO / JavaBean madness will finally end
I wish this was researched further. For example, there is a request for comparison between these convention-based "modules" and Jigsaw modules. Also, wondering why not implement "modules" with, well, Maven modules (Gradle subprojects).
I just use Undertow directly. Don't see any value in a servlet framework, or any framework on top of the servlet framework. BTW the small memory footprint and performance of Undertow are for me secondary considerations. The main reason I use it is because it has the best API design. Everything else just looks poorly designed by comparison.
Visual Studio Code. It can be as powerful or as basic as you make it. I use the MS Python extension, the Java extension pack, and the MS C/C++ extension. You'll need the associated dev stuff to be installed as required, of course. Each individual extension will state what it needs.
For anything but hello-world applications or large-scale (100+ servers) deployments, the server impementation really does not matter much. All three are stable and fast enough nowadays. And from the API standpoint, you won't notice any difference either. Servlets and a layer of Spring hides all the details. Don't invest too much time in this. If you really run into problems with servlet container X, you can always switch to a different one. That's the beauty standardized abstraction layers.
Panama does not seem to be fast enough yet (at least at this early stage) see [https://github.com/zakgof/java-native-benchmark](https://github.com/zakgof/java-native-benchmark)
Please, ask programming related questions in /r/javahelp. **Removed**
And importantly, Spring Boot makes it really quick to switch implementations. Just exclude Tomcat and include the replacement starter, and you've switched. If you've customised some properties, you might need to find replacement configuration options.
you write code against undertow directly? now that's a lol.
Care to explain why? Works much better than anything else. No matter which technology you use you have to write code against some API no matter what.
It has nothing to do with management. My manager doesn’t give two shits about unit test coverage. It’s about time spent during PRs and easily defined standards for a team. The easier the standards, the easier the PR process, the easier the onboarding process, the less time your team is spending on determining what should or should not be tested, it provides baseline standards across all your apps, and a faster PR process. If you don’t think those things are providing business value, I’m not sure what to tell ya. I’ve been leading teams for a long time and have done it both ways, one line of superficial code for POJOs so you can have the standard to test ALL your code has worked best for the teams I’ve led. It wasn’t even my idea, I had a contractor who came in that suggested it in order to create standards across our apps. Being agile we gave it a go, and have never turned back.
Gore. Lots and lots of gore.
It's all written in java using the standard libraries :) nothing fancy
Thanks! I do too it's just enough that it's nice to look at but still looks cute and isnt over the top :)
I did not make them myself they've all been pulled from opengameart.org. (I'm definatly not a graphic designer and I would like to do more of the art in the future but for now I'll settle with this)
I could definatly do that! As the beginning of this video said I was just redoing the trees all week because when I did them originally I was kinda shooting myself in the foot with how I set them up so I'd definstly change things like that and some other things. As for motivation, this is just something I enjoy doing so I like to work on it then all of the positive comments and suggestions I get from all of you guys actually help a lot too :) its nice to know that I'm not the only one who's enjoying it.
Motivation is all about making something a habit. You can't be motivated all the time, but if you force yourself to code every day, even for an hour or two, it will eventually pay off!
Exactly! There are days and tasks that i really don't feel like working but putting even just a little bit in will make it easier next time!
Depends on the implementation, Map.size &amp; Map.isEmpty are just abstract methods defined on an interface. For the JDK implementations HashMap &amp; TreeMap they're O(1). You can easily figure this out by yourself using IDE with the JDK sources.
https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html One's based on [red-black trees](https://en.wikipedia.org/wiki/Red%E2%80%93black_tree), one on how good the [hash function](https://en.wikipedia.org/wiki/Hash_function) shares things into buckets. Test them yourself? The tree should be able to determine isEmpty in constant time.
O(1). Their sizes are stored in an internal field and updated after each insertion or removal.
**Red–black tree** A red–black tree is a kind of self-balancing binary search tree in computer science. Each node of the binary tree has an extra bit, and that bit is often interpreted as the color (red or black) of the node. These color bits are used to ensure the tree remains approximately balanced during insertions and deletions.Balance is preserved by painting each node of the tree with one of two colors in a way that satisfies certain properties, which collectively constrain how unbalanced the tree can become in the worst case. When the tree is modified, the new tree is subsequently rearranged and repainted to restore the coloring properties. *** **Hash function** A hash function is any function that can be used to map data of arbitrary size onto data of a fixed size. The values returned by a hash function are called hash values, hash codes, digests, or simply hashes. Hash functions are often used in combination with a hash table, a common data structure used in computer software for rapid data lookup. Hash functions accelerate table or database lookup by detecting duplicated records in a large file. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Alright. So map.isEmpty() is better than map.size() == 0 or both of them just take same running time ?
What approach should give better performance at run time ? : map.isEmpty() or else map.size() == 0
Surprised WindowBuilder wasn't on that list; it makes creating Swing GUIs sooo easy.
&gt;figure this out by yourself using IDE with the JDK sources.
If you want to know whether or not it's empty, use `isEmpty()`. If the most efficient way of implementing `isEmpty()` was `map.size() == 0`, then that's the implementation they would've used.
We've been using jetty with Spring Boot apps built with Kotlin. It has been working nicely. We chose jetty for less memory consumption when running multiple containers with web servlet.
Yes to both
My RAM cares alot, Electron is just terrible VSCode and slack are enough to slow my system down. Sadly Qt framework should be dominating but I guess we are in an everything JS era.
That would largely depend on the kind of game you want to develop. A browser MMO would need a completely different set of libraries compared to a card game, a text-based RPG, a 2D bridge building game or a 3D racing game on Android for example.
Great point, let me edit my post.
I follow a simple rule, if my pojos contain business logic (doubful, they're pojos) then test the business logic, if they don't, then don't test them. Could I see some gray areas, like maybe a copy constructor, yes. I don't unit test copy constructors, but I'm not going to mock (heehee) anyone who does, especially on a large team where there's a fear that someone else might change the pojo hastily without realizing they need to update the constructors as well.
Java's builtin 2D capability provides all the core functionality a top down tile based game would need for the graphics and I/O part but you'd need to develop most of the framework around it. [Libgdx](https://libgdx.badlogicgames.com/) is often touted as the go-to for this type of Java game development. Or if you were so included you could go the OpenGL route with [lwjgl](https://www.lwjgl.org/) or an engine like [JMonkeyEngine](http://jmonkeyengine.org/)
Oh ok, awesome. And no worries - I’m up for a good project. I’ll definitely check those out, thanks for your help!
PixiJS has been perfect for me when developing a 2d top down browser mmo. Easy to use, many examples and an active project. For 2d games I'd say the browser is a much easier platform to develop for than desktop with awt etc - which always gets messy, positioning elements etc. In the browser you can just use html elements for the GUI. Browser performance is good when webgl is available. The drawbacks of browser games are that they run much slower on mobile devices and scaling is a bit hard to get right - at least it works. Also you won't be able to use UDP from the browser, only websockets. Websockets are easier to use and to secure anyways. Highly recommend pixi with spine 2d for animations. A reactive backend is very nice to have, with some event bus for passing messages.
I hadn’t really thought about making it a browser game, that’s something I’ll need to consider. Also, would it be possible to use PixiJS in Java? I’m afraid that I’ve only ever dealt with Java, not JavaScript. If it is, I’d love to become familiar with it. Looks pretty powerful from the quick glance I took. Thank you for your help!
You should always use isEmpty(). There are datastructures where counting the elements is O(n): some of that datastructures in java.util.concurrent are like that.
IntelliJ Ultimate supports Java and Python (if you have ultimate the pycharm functionality is available as a plugin). Going to be hard to find one that also does C++. Jetbrains has CLion but that is separate from IntelliJ.
How many developers are in that project? What is the ramp-up time for a new dev? What's the integration time for a third-party library/component?
Game development is great, you video reminded me of my first game which is quite similar to yours: [https://gfycat.com/@tinustate](https://gfycat.com/@tinustate) (specially this one [https://gfycat.com/dimwittedidlebarnswallow](https://gfycat.com/dimwittedidlebarnswallow) chopping and planting trees) One tip if i might: speed up your video with a movie editor, most viewers only watch a few seconds and leave, so you have to cram as much stuff in these few seconds, see above for example. &amp;#x200B; Keep up the good work and enjoy!
I thought random was already pretty easy in Java
`isEmpty()` is clearer to read and unless you have discovered a serious performance issue with a profiler you should prefer readability over micro-optimisations.
This is a really awesome start. I like the solid UI and looks like a fun little game. Keep it up!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have some practice in java core 2d games; &amp;#x200B; you can use API 2d in java ,basically is to render the game inside a Canvas, lately I am using javaFX this seems to be more efficient and reliable nowadays, and the approach with java FX is like if you are using javascript canvas.
I can ask the writer to add it in. Any others?
Which Panama branch did you use? Afaiu from (very casually) following the mailing lists, there is an experimental back-end called linkToNative which I believe currently lives in a separate branch. If you're not using the linkToNative backend then performance isn't really expected to improve on JNI, especially in the case of Windows. But I'm not an expert so if you're interested in why you might have got those results, and how things might change in the future, I'd recommend asking on the mailing list! Edit: I found an old discussion on an earlier benchmark which mentions the linkToNative thing: http://mail.openjdk.java.net/pipermail/panama-dev/2018-September/002652.html
The branch was *foreign*, build 70 as referred by the page [https://jdk.java.net/panama/](https://jdk.java.net/panama/) The actual openjdk build link: [https://download.java.net/java/early\_access/panama/70/openjdk-13-foreign+70\_windows-x64\_bin.zip](https://download.java.net/java/early_access/panama/70/openjdk-13-foreign+70_windows-x64_bin.zip)
There are other providers of 32-bit binaries. E.g. Liberica JDK 8 and 11 is available for Windows 32: [https://www.bell-sw.com/pages/java-11.0.3](https://www.bell-sw.com/pages/java-11.0.3)
&gt;How many developers are in that project? One. I would love to have a project where there are more but that is uncommon for my employer. Most projects have only a single backend developer who gets to make the decisions on technology stack. Occasionally the customer mandates the use of something which usually ends badly. So far I've been able to use this for three projects spanning about 2.5 years of development in total. &gt;What is the ramp-up time for a new dev? For the first project where I decided to set things up this way I held a presentation for about 6 other backend developers (we wanted to make sure other people could take over in case of the bus factor). They all understood the basic setup in about 15 minutes. Actual participation of another developer on a project has so far happened once for a short time. He had no trouble understanding the setup and spent essentially no time figuring out Undertow and all his time working on the feature/bug. &gt;What's the integration time for a third-party library/component? This is simply not a factor. There is no framework, there is nothing to integrate. When you want to use a library you copy paste the dependency configuration from maven central into your pom and off you go. The only thing Undertow does is listen on a port, parse the request, call a method you defined, and deal with sending the response. What you do inside that method is entirely up to you. You can use no libraries or all libraries under the sun. Personally I have a set of libraries that I like to use; MySQL or PostgreSQL JDBC driver, HikariCP, JOOQ, Gson, Flyway, Jedis, Failsafe, Guava, and some apache libraries here and there.
1. Study as much as you can 2. Get a good night's sleep the night before 3. Read the questions carefully, word by word, like a lawyer looking for a trick. 4. Read your answers *carefully,* word by word, pretending you are the compiler looking for an error.
is there a plug in to colorize local variables and parameters names based on their characters IntelliJ has this natively and its very nice
``` char grade = 'A' ```
You must be doing something really wrong because I can run 4 (or more, I haven't tried) whole workspaces (in separate windows with extensions and all that) with between 8 and 40 java projects in a pc with 8 GB RAM, alongside Chrome, Firefox, Internet Explorer, PGAdmin, Discord etc and never had a problem. You must be doing something more resource expensive. Probably is Slack, but that is Slack problem and not Electron. Slack is always that way even if you had 4 times the ram you have. PS: if JS is dominating instead of Qt is because maybe Qt is overkill for almost every desktop app. Those apps where done in Qt because of lack of better things for the average project. That's why JS mobile apps are also dominating. Because using the native kit is overkill if you are not going to take advantage of platform exclusive features or hardware. That is because this is the JS era. Is the easiest cross-platform tech stack. You don't need Qt for a chat, weather app, mail client, editors, and a long etc.
Hi. Thanks for the demo. Why did you put it in Java sub reddit? I'd love to see the sources to learn something new
random is easy, and then there is that library...
Probably knowing java would help
Out of curiosity, I went and looked at some of the question formats. If a data structure is involved, draw a picture of the structure and fill/modify it along with the steps of the program. Draw multiple if you need to. If a loop is involved, write out the iteration and the value or variables at the end of the iteration. Looking at the questions there's a lot of crap that probably nobody would ever write so I assume their intent is to confuse and trick people. So take your time, write out things on paper as your form of memory. Like.. I just saw a question about a loop on a list that removed items from the list while reading the loop. This is most likely a very bad idea to do, but it's on the test because it's a tricky scenario. In code review we would tell a guy to make a new list and dump stuff into it, not modify the old one. Such are tests. Good luck. I assume you've looked at some practice questions.
If you are into game development I would highly recommend using "Unity" or unreal engine. I am a professional java developer for over 12 yeara and I am doing games in my free time and I would never use java for the front end of a game. Edit: unity and c# are very easy to learn and see results, which is motivating. Plus you get a mobile client ;) Reasons against beeing: - deployment for a real application is an issue, nobody runs a jar file - limited hardware support ( when you get to 3d even worse) - limited media capabilities - slower performance - though strong modelling capabilities and good frameworks, not ment for game development - easy to do bad design Reasons pro: - good for understanding how more complex engines work: blitting, animation phases etc. - allows you to address every issue (asset management, game loop) etc. The way you want to
you forgot the semicolon
&gt; Though JRebel is a fairly expensive service (550 USD for an annual license), many Java developers swear by this plugin and can’t work without it &gt; 14 Useful (and Free) Plugins for Eclipse IDE You keep using that word. I do not think it means what you think it means.
Error next line broken for random reason
ah, I've been spending too much time in clojureland
I put it in java because it's written in java :) theres a link to the github repository with the source code in the description of the video!
If I was using a framework that completely hid the underlying implementation then I'd probably go for the default one. If I was trying to produce the smallest set of dependencies then I'd go for Jetty. If I had to interact with the embedded webserver then I'd use Undertow which has a nice programming model. Maybe try the three out and pick which ever one starts quickest?
Thanks!! I really like comments like these :)
Thanks for the advice and the kind words!! I really appreciate it and I cant wait check our your stuff
Okay — I saw this method in a few different websites, I’ll take another look. Thanks!
Oh no lol, that’s not good news... what language does unity prefer? C#/C++? I’d have to learn them but I wouldn’t mind. Seems like the cons really outweigh the pros, which sucks. Despite the challenges I’m still going to try to code a little something in Java, but I’ll seriously consider making something in Unity for my next serious dive. Thanks, I really appreciate your response!
&gt; Out of curiosity, I went and looked at some of the question formats. Where did you find a copy of that test, for OP's class?
Its c# some core concepts are similiar to java and some are not. But it will be better fort serious game dev and it is not that hard Trust me.
Oh ok. My dreams have vanished :’( but I’ll certainly take a closer look. I’ve always had this fascination with building my own game 100% from scratch and not based off an engine but it seems like that’s that best option
Don't get me wrong it is certainly possible, but if you really want to create something, you should use the tools that are around. They are for a reason. Moving a few sprites or doing a tetris or pacman is easy in java too. But that is only interesting for educational purposes I guess.
i just googled ap java exam. https://apcentral.collegeboard.org/courses/ap-computer-science-a/exam https://secure-media.collegeboard.org/digitalServices/pdf/ap/ap-computer-science-a-course-description.pdf that pdf has some examples on page 23. It's an AP test so it has to have national credibility. There's an organization that handles that. Unless OP is not in the US. (https://ap.collegeboard.org/)
That’s a good point, I’ll do a serious dive into learning C# soon, seems like that language is very useful in a lot of different areas. Thanks for your responses and help :)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Now do intellij
Please do this!!!
If you're not using sdkman you're doing it wrong.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[https://blog.codota.com/21-best-intellij-plugins-for-2019-100-free/](https://blog.codota.com/21-best-intellij-plugins-for-2019-100-free/) :)
what's wrong with brew?
Nothing! Brew is great also (although for java stuff there is just much more on sdkman). Sdkman also allows easy switching of default for multiple installations and stuff like that. But downloading versions manually, unpacking, moving to common directory and creating all env variables yourself (as article suggests) is a sure way to never upgrade version you're currently running on
Not sure, but there's a plugin to colorise local variables, instance variables and parameters based on their figures. Not exactly the same, but close.
Raw HTTP performance is often not the most relevant factor in application performance. Also the article uses older versions, numbers might have changed. It also doesn’t look like a comprehensive benchmark with different scenarios. If it turns out that server performance is a concern, you probably have to test yourself with your application, switching is so easy that this should not be too difficult. I’ve used Tomcat for about 15 years, and can’t remember any major problem. As it is the default, most Spring Boot apps run with it. I’d start with that and wait to see if any reason comes up to switch.
You're absolutely right. Passed it along to the writer and she changed it for a free Jrebel alternative
\&gt; For anything but hello-world benchmarks or large-scale (100+ servers) deployments, the server impementation really does not matter much while that is true, I've found it rather annoying to boot up tomcat over and over in development / testing so I prefer jetty when possible (I say that, but in production, we're still running tomcat because its always been there)
There's probably a simple explanation for this. Did you contact the developers on their mailing list before calling out the performance of what is still a work in progress?
&gt; are there opportunities out there for ordinary, underachieving CS students? Ordinary yes, underachieving I don't know. But maybe don't describe yourself that way to potential employers. Java's useful for back-end software engineering positions. Any company willing to take on an entry-level programmer will also be willing to develop that programmer's skill set. That said, it's pretty incredible that you've managed to get all the way through a computer science degree with only one language, and it's Java. Don't they teach lower-level languages in CS anymore?
you're probably lucky the work force needs bodies, but i wouldn't expect you'd find a job easily. it doesn't matter that you graduated - some of the best devs i've met didn't. what does matter is your ability to code. given you define yourself as an underachiever, i would find it unlikely you could easily find something in a good company. there are probably tons of crappy jobs
&gt; ordinary i don't know if you should be making yourself feel better by calling yourself ordinary. i don't know many ordinary people who graduated and are an underachiever. you are just an underachiever then
Also have a look here https://www.reddit.com/r/scala/comments/awwywj/wayland_mcwayface_a_simple_wayland_compositor_for/
I would keep learning. If you want to do Java you can get away with being back end only, but in that case you need to at least understand basic SQL, and learn some good frameworks like Spring.
I managed to *get by* in computer science classes knowing just Java. I was introduced to other languages but I've only been interested in Java. Java is what I would like to specialize in but I have this fear that I'll have to know more than Java in order to get a job. I wonder what entry-level programmers have to do on a daily basis.
Have you thought of trying something else in the field, outside of development? With Java you'll be fine doing QA work.
Anecdotally my Uni program has focused more on underlying principles, algorithms, and data structures. The main language of choice has been Java, but some teachers would allow us to code in any language and there have been electives for other languages - I chose C# and C++ and 2 other courses. Apart from that we were taught SQL and various frameworks such as some NoSQL query languages. On top of it all most also work on personal projects in their off time - personally I've worked a lot with scripting and Lua (WoW addons), and now Python for my Bachelor's thesis. So, I guess it depends on your school. This is in Sweden, and maybe it differs from country to country.
Maybe I used bad words. By ordinary, I guess I mean like not really interested in going "above and beyond", or not exactly lazy but not ambitious either, somewhere in between, if that makes sense. I would (probably) be satisfied with a 40-50k salary doing grunt work in a small company. I'm okay with not making a big salary. I just want to experience working in the CS field. Basically I'm wondering, are there CS opportunities for a guy like me somewhere?
The work in progress is published as the Early Access builds for user evaluation, and here it is. Performance is not listed in Known Issues section, but the link from @eliasv's comment seems to clarify the matter a bit. I did not contact developers regarding this.
But see, Spring wasn't something that was taught at my college. Would an employer expect a fresh college graduate to be familiar with a framework like Spring? I guess I could learn some basic SQL before I graduate. Would being competent in Java and having basic knowledge/familiarity with SQL and Spring be enough for me to acquire a job in the field?
If there are positions for QA work, I would give it a go. I would just need to know what I'd be doing on a daily basis.
With java you can learn to build Android apps.
Is Java not a lower level language...? It's what I'm starting with and is the only language I'm taking atm. The only other experience I have is with GML.
First of all that GPA number means squat. Like somebody mentioned, even the fact that you graduated is not very relevant at all. It's easy to feel this kind of imposter syndrome that you are not as good, but don't fool yourself. You are good, maybe you are not a genius like Einstein, but believe me, there aren't many geniuses walking around and they're not your competition. If you put in the smart work (not HARD, smart work), study often, focus on producing good code and get your code out there so that people can see it, you will get results. College is just a short guide to get you introduced. Just to show you how to learn by yourself, which is what you are going to do from now on until the end of your career. That's right, 30 years from now you will still be learning a lot of stuff every single day. Here's what you should ignore for now: - Reading a gazillion of tech articles about all the new, flashy and shiny frameworks that will solve all the problems in the universe. Here's instead where you should focus all of your effort: 1 - Get better at solving algorithmic problems. Use Codility and HackerRank as your guides, try to solve at least one problem per day. 2 - Create small projects and publish on your github profile. Build a small spring backend for a coffeeshop or a video rental or whatever. 3 - Go on Udemy, find that very long course about Spring with over 40 hours and follow it, coding while watching from beginning to the very end. If you get any new ideas for small projects, also make sure to add it to your github. 4 - If you apply to a job and the company asks you to do a coding challenge, upon their permission make sure to publish that coding challenge code to your github as well. That's about it. Create projects and push to github, study algorithms and data structures by solving real problems on codility (forget books). Focus on Spring and Java and SQL/Hibernate. Before you can land that big in office job, also go ahead and sign up for Upwork to try to find projects to work on and get experience. Try to join the Toptal network, even if you fail you will learn so much from the experience. There are many opportunities for coding from home, though the pay is initially low it's a way to gain entry to the market. Last but not least, remember you are unbeliavably lucky to be in the best IT market there is.
I can't speak for the whole universe of employers out there, but for one thing being able to say you learn useful material on your own outside of school is a big plus in itself. Also I would say a basic understanding of SQL is mandatory for a back end Java dev, unless the company specifically needs zero SQL - this is rare IMO despite the prevalence of NoSQL databases these days. In fact I give prospective Java devs (and other devs as well) a basic SQL quiz. I originally wrote it for interns but I now give it to all interviewees. Those who ace it are definitely given bonus points. As for Spring, a lot of companies use it so if you know it you'll be more useful as an employee. (It's probably more complex to learn than basic SQL though.) Of course I'm assuming you want to do back end work. :) And SQL/Spring are just two things I named off the top of my head that are vital to know at my company. YMMV and there are plenty of other languages/tech to learn out there.
Do a crash course on SQL. Its the most bang for your buck. Get to where you can design how you would lay out some simple projects. In particular get to knowing when to use association tables. Plenty of companies are willing to hire students who had poor GPAs and only really know server side coding. The front end world moved incredibly rapidly over the last decade. Plenty of enterprise companies are using older front ends or don't care that you know all the technologies as long as you show an aptitude to learn and approach problems in an intelligent manner.
Strange question. Clearly any Map implementation where `isEmpty()` was slower than `map.size() == 0` could be trivially optimised by rewriting `isEmpty` to use `map.size() == 0` as the implementation.
I can understand that you’re apprehensive about starting your career. The best lesson you can learn is to take a risk and bet on yourself. It’s not about what you do every day - it’s about the attitude that you bring to it.
I graduated 2 years ago and didn't really take any classes to learn a specific programming language other than some introductory courses that hit on multiple languages like C/Java and Python. I felt that it was only to teach things like "what is a function," "what is a class," "what is an inherited method," etc. My courses mainly focused on academic principles of computer science like algorithms, complexity, and automata, which aren't language specific. Personally I felt that that was more beneficial. It makes it easier to think of every language as trying to do the same thing differently. In the corporate world you're gonna have to learn the specifics of the way companies do things anyway.
I imagine you wouldn't have to take a QA role. Look for Java back-end development role. On average it takes college grads 6 months to find a job, so just keep putting your resume out there. Finding my second job after working the first for 1.5 years was much easier and less stressful. I had a 3.0 GPA and nobody asked about it. I considered myself an underachiever as well, but, in my experience, underachieving in an academic place had nothing to do with becoming proficient in a programming language.
I got a degree in electronics, but self taught myself Java whilst at university. Once I finished my degree I applied for literally every single entry level Java developer position I could find (there are lots). I used all my spare time to either apply for jobs or prepare for interviews. Eventually I had a few offers and took the one I liked the most. Once you start working in an entry level position you will be able to learn the other languages and skills you need to be a good developer. SQL is not that complicated once you understand the basics, git is your friend and all the other tools you may come across are there to make things easier. For now continue to focus on mastering Java, and try to prepare for the interview process, there is a lot of help online for this. Then apply for everything, you don’t have to accept the first offer you get so don’t be too picky about what you apply for, at the very least you will gain interview experience and more importantly confidence! Good luck!
If you're in the midwest US you should be able to find a 55k + benefits starting job. Leverage being able to stay on your parent's health insurance if you can. It seems like a lot of companies like going through recruiting companies for junior talent.
What area of the country do you live in? (I'm assuming you are in the U.S.)
Learn SQL
Java is definitely a high level language. BASIC, Rust, C and C++ are some low level languages. Just think about all the abstractions away from the hardware Java gives you!
Google “java interview questions” Study
I've used all three as embedded containers in Spring Boot. We tried Tomcat, but for whatever reason it didn't work for us (we had resources in a dependency jar and for whatever reason we couldn't load them - didn't look too far into that since both Jetty and Undertow worked "out of the box"). &amp;#x200B; I didn't really see much difference between Jetty and Undertow performance-wise. At the time I think Undertow had some extra features and had less configuration for what we needed, but both worked just as well. &amp;#x200B; I'd say that you shouldn't worry about it too much and just pick one.
&gt; I wonder what entry-level programmers have to do on a daily basis. Mostly basic plumbing: get data from a request and put it in a data store; get data from the store and provide it to a user. There are plenty of entry level programming/engineering jobs out there. You should check in with your college’s career services department.
Some application of these principles in more than one kind of language is helpful to show potential employers and should be what good programs are teaching. I’d think at a minimum one high level language and one low; one compiled and one interpretive.
If you don’t have to think about how your hardware is wired, it’s a higher-level language.
If you're coming from a CS degree perspective and going into QA, you can be VERY valuable. Most developers run away from test automation as fast as their fingers can type up a resume, but dedicated QA automation engineers can make a good salary (it doesn't scale as well as a traditional developer, but you can break 6 figures with a few years experience). &amp;#x200B; You're going to want to learn about [Seleium](https://www.seleniumhq.org/) \+ [POM Model](https://medium.com/tech-tajawal/page-object-model-pom-design-pattern-f9588630800b) testing if you go this route.
As below.. if you do get interviewed by a 'techie' they all ask the same standard java questions. Like, what does the Java 'final' keyword do when used with classes, variables and methods. Look up that list of standard java questions. Also find out a bit about the company itself. The history of it, who its clients are etc. Anything you can. HR (non tech) questions are all the same too. Like : "What is your weakest aspect", "Why do you want to work for us", "What do you see yourself doing in 5 years". Look up the 'Right' answers to those questions. Don't sweat it.. You're not going to get a senior position, you might not even get this position. But if you sound like you actually want the job, and you don't sound like an ass hat, you're 70% there. Be humble, keep your answers short and to the point.
if it’s a junior position, make sure to emphasize you love learning new things (which u do since you know coursera and udemy). Understand how threads in Java work and concurrency best practices. This is the bread and butter of backend programming. Sure there are lots of framework you can leverage (netty, spring), but nothing beats knowing the basics. Instrumentation might come up, monitoring your server app.
Don't lie. If anyone in the room know anything about the job (not hr with sheet of paper full of answer/questions), they will probably notice straight away. In case you will be interviewed by the developers: if you don't know the answer, ask for the solution. It's good to see that the candidate is into programming and eager to learn.
In three days, while simultaneously preparing for the Java aspect of the interview? Really interested to know if that's possible.
I don't understand why your answer got downvoted
Most likely there is some sort of load balancing / reverse proxy / security +++ in front, so in all likelihood that shouldn't make to much of a difference for most use cases.
&gt;Understand how threads in Java work and concurrency best practices Oh boy, I know nothing about either of those things. So funny story, there was a Java Developer job available but the guy who referred me put me down for the Back-End Engineer position; which is probably harder to achieve for a guy with zero experience lol.
Entirely possible. Don't learn useless, advanced stuff. Learn how to write an insert, update, select statement, along with an inner join, say you have really basic skills in sql and it will be fine. Also, learn what a foreign and primary keys are, and what constraints are.
Just be honest. Say that learning new things #1 is on your priority list. If they ask why should we hire you, say you have a strong analytical skillset and you love learning new things. If they ask if you've ever had a conflict with a teammate say "not really".
For christ sake it is called an Early Access build for a reason. I think it is unfair to call the performance disappointing, when performance has never been the goal of these builds. &amp;#x200B; Take a look at this talk [https://www.youtube.com/watch?v=M-FPNBFAoSo](https://www.youtube.com/watch?v=M-FPNBFAoSo) There are some examples, with getPID(), getting 4-5 times better performance than JNI.
I like how they put some thought into the solution instead of blindly copying what other languages did: * Automatic indentation inference solves the issue of string literals looking out of place. In Python or C# you need to align your literals to the left and it looks awful – especially annoying in Python, as indentation is syntactically significant. Scala has a nice trick with `stripMargin`, but that only causes unexpected vertical bars pop up in the string after editing it, and it's also a runtime feature, making it unnecessarily slow. * Requiring a new line after the opening quote solves the issue of the string literal starting with unnecessary whitespace. Your literal can now look exactly like it's supposed to look, with text columns in alignment with each other. Perfect for embedding ASCII art, as long as it contains no backslashes. For comparison, Python's: def f(): return """ aaa """ returns `"\n aaa\n "`, while future Java's String f() { return """ aaa """; } will return `"aaa\n"`.
Besides the basics of OOP, know the uses and how to implement polymorphism, inheritance, and interfaces.
Check out the basics of web service request (REST) and JSON object de/serialization.
what quirks did you find in the GraalVM NodeJS implementation?
Finally!!
Most job postings put a lot of requirements hoping to cover everything but usually they just need most of those. The assumption usually in software development is you learn new things, and using them properly. New languages, new frameworks, new design paradigms. This industry is way too fast. I remember blinking for a couple of years (tried a different career trajectory) and ECMA 5/6 and containerisation flew me by. I had to catch up really quick. &amp;#x200B; IMHO, you have the right mindset going in as someone new. Not all companies want rockstar programmers, they are not Google. But basics and thirst for learning is first class. &amp;#x200B; Give this link a couple of hours. If it's too tough, don't sweat it, don't get bogged down. Tell them you are on it. [https://docs.oracle.com/javase/tutorial/essential/concurrency/index.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/index.html)
Overall is much better than Nashorn and other implementations. My main issue was with the support for multithreading. Note: I'm not using graal-nodejs, just graal-js.
This looks great.
You're writing a servlet, against the servlet API. no need to ever touch undertow directly. spring-boot took care of absolutely everything for you. changing from tomcat to jetty to undertow to tomorrows wonder, is a simple pom.xml edit. i mean, wtf kind of question is "why?"
For those who may be curious, the discussion about this feature regenerated with [this](https://mail.openjdk.java.net/pipermail/amber-spec-experts/2019-March/001057.html) message from Brian Goetz, and continued under the thread `String reboot`. The mailing list archives, starting in March, can be found [here](https://mail.openjdk.java.net/pipermail/amber-spec-experts/2019-March/thread.html).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have loved watching this feature evolve in the right direction. They've made some great choices and tradeoffs along the way.
The southeast, close to Florida.
Random is easy. Creating test objects with random values not so, unless you use something like EasyRandom.
&gt;For now continue to focus on mastering Java, and try to prepare for the interview process, there is a lot of help online for this. Thanks, I will. I do believe it's possible to get a job if I like master so much Java and prepare well for an interview.
&gt;I had a 3.0 GPA and nobody asked about it Amazing how nobody (*almost* nobody??) asks about GPA. I guess I'll try and seek Java back-end development jobs.
Basically everything described here is put into a few small cheat-sheets here: http://www.sqltutorial.org/sql-cheat-sheet/
&gt; Oh boy, I know nothing about either of those things. Get [this](https://www.amazon.com/gp/product/0321349601/) book pronto. It's essential.
Less costly if correct, more costly if wrong (deoptimization is triggered). The check can be very cheap compared to a vtable call if you manage to guess the target class correctly most of the time.
The only issue I think I can see with the indentation process is that you can't represent a string that has a non-zero indent and does not have a trailing newline. But in that case you can strip off the newline at run time.
Great, this has been sorely missed. Is it slated for any specific release yet?
The best answer to questions about how you would use threading: 1 - I would avoid it 2 - If I absolutely couldn't avoid it, use the highest level of abstraction possible and immutable data structures (i.e. no shared mutable state) 3 - if I had to have shared mutable state, be extremely careful and probably get someone else to look at it and see if we could avoid it.
No, not yet. I don't think it will make it in Java 13 since Rampdown Phase One begins on June 13th. It will likely preview in 14 or 15.
Gradle is much faster now. What I like about it is that build.gradle’s for common use-cases are really small and it’s easy to read and understand what’s going on ([example](https://gist.github.com/sit/3606537)). [Polyglot Maven](https://github.com/takari/polyglot-maven/blob/master/README.md) has similar goals but it’s not quite ready for prime time yet.
Sure you can! Just escape the last newline, and indentation relative to the closing quote is retained :).
what s the name of that plugin? (i have been looking without success, maybe the wrong search words in google) Anything similar will help. With colors my eyes can spot parameters uses in a method much faster
&gt; BASIC, Rust, C and C++ are some low level languages. BASIC? Heck no...
have you looked into adding graaljs capabilities to a stock openjdk? https://github.com/graalvm/graal-js-jdk11-maven-demo
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No that's the exact opposite of that I want. I want: " Indented 4 spaces\n. Also indented 4 spaces" If I use String str = """ Indented by 4 spaces Also indented 4 spaces """; gives " Indented 4 spaces\n. Also indented 4 spaces\n" But if we remove the last newline by using: String str = """ Indented by 4 spaces Also indented 4 spaces"""; Then you lose the indentation: "Indented 4 spaces\n.Also indented 4 spaces"
Sure, but I didn't say to *remove* the last newline, I said to *escape* it. Indentation stripping is performed before escape processing, so as to preserve the intuitive notion of embedding the string in the source. String str = """ Indented by 4 spaces Also indented 4 spaces\ """; Gives the result you want.
No, that's a compile time error. https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-3.10.6 Nothing in the JEP changes 3.10.6.
Correct
The JEP is still a draft, and is not necessarily the *only* JEP that will be proposed. I assure you that the most recent discussion on the mailing list has made it very clear that escaping of newlines is planned! So, either this JEP will be updated to discuss them, or a later JEP will be proposed to add them after the details have been hashed out. It's worth noting that they are also considering allowing newline escapes to normal string literals, so they may in fact be a somewhat orthogonal feature to this JEP, in which case it is perhaps not the appropriate place for them to be proposed.
The arugment here is "test pojo in case you made a copy/paste fail in the getter or setter" But your tools should autogenerate those ... mosts IDEs do.
Right, so my point about this JEP currently being deficit is valid. And other people on the list have noticed it too.
Okay, if you'd like. I'm not criticising your comments, I'm just giving you some extra context information you might not have been aware of. I thought you'd like to know that they're aware of your concerns and that they will be addressed! If a JEP doesn't cover all the desired parts of a collection of features, that doesn't make the JEP deficient. It's a perfectly valid approach to design and engineering to split a collection of features up into a series of separately-deliverable JEPs.
I'd suggest finding a place that has government contractors (Jacksonville?) and start there. The government does a lot of Java development. I'd also brush up on NodeJS and Python.
 x = """ \040 indented with 2 spaces"""; Everyone forgets about octal escapes.
That sort of defeats the purpose of having text blocks, but it's a creative solution. One of the discussions mentioned having a `\s` escape for a single space.
FYI: We had an issue with tomcat on a prod system which resulted in a busy-wait on the nio-poller-thread (100% CPU core usage). Switched to NIO2 and problem went away.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/boi60b/oracle_jdk_8_to_openjdk_11_gotchas/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Your tools in these interviews are the language data structures, and their API. Focus on ArrayList and HashMap, be able to write code with them on the fly (as in, create instance, add elements, remove elements, get elements etc). Don't get stuck on "I'm not sure what's this method called in Java" etc. Make sure you understand how those data structures work behind the scenes. I've been asked on phone screens about the difference between equals() and hashCode() and how they apply to HashMaps, just to see that I understand the significance of each method. A lot of the time the questions you're asked are similar to other questions that are available online. Solving a lot of questions before the actual interview will help you recognise things you've seen before and reach a solution faster. Don't be afraid of offering a trivial solution. "Well, obviously we can iterate over all the elements and find the answer, now let's see if we can do better", etc. It definitely beats having no solution to the question, and it lets the interviewer know you understand the problem, or they can correct you if they see you misunderstood it. Ask questions about what you're allowed to do and assume. "Can I assume this variable will never be null? Is this always an integer, or can it be a float? Do I need to take into account negative/long values?" are good questions that can simplify the solution for you significantly. Also, be friendly. The interviewer will also want to get a feeling that you're a pleasant person to work with. Talk calmly and try to be articulate. They want to see that you can convey ideas verbally and not just solve problems. Good luck!
A new and nice one is FXGL. https://github.com/AlmasB/FXGL He has a yt channel with demos and tutorials https://www.youtube.com/channel/UCmjXvUa36DjqCJ1zktXVbUA
The tutorials are definitely a plus! Thanks for the recommendation, I’m definitely going to take a look.
You don't understand what I am saying and have a wrong understanding of the world. So to be clear: It is simpler and easier to write code directly against Undertow. Spring-boot and servlet frameworks add complexity. They do not make my life easier. They certainly don't 'take care of absolutely everything' for me. They create problems. Second, the swapping out argument makes no sense, if you could write an HTTP server that has zero overhead your implementation would still be slower than my setup because you are tugging along a servlet framework and spring-boot. From a feature point of view swapping out the HTTP server also doesn't make sense because everything is hidden away by spring, if it were to add something it would just not be available to you. This whole you-can-swap-things-out argument is the same non-sense you hear in the logging debate; theoretically possible but no one ever does it.
It looks like in your [submission](https://www.reddit.com/r/java/comments/boifo9/switching_from_oracle_to_corretto_issues/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Some javax dependencies, some libraries that used Unsafe, minor performance regressions
The First problem i had wad with the third party livraria. Some are not supported yet.
Anything that caused you to refactor your code?
It's not about programming, it's a technical issue running a java file, not programming it. It's a " Technical discussions". I will however move to the other subreddit.
&gt; I have one for testing and when I try and open a JAR file, nothing happens. The problem is the way how *Windows* (not the command line) handles `.jar` files. This is a setting in the *Windows Registry* that most likely points to the old, Oracle JRE. The key in question is: HKEY_CLASSES_ROOT\jarfile\shell\open\command On my Laptop (company provided) it has the content: "C:\Program Files\Java\jre1.8.0_201\bin\javaw.exe" -jar "%1" %* This value will need changing.
My HKEY\_CLASSES\_ROOT\\jarfile\\shell\\open\\command is: "C:\\Program Files\\Amazon Corretto\\jdk11.0.3\_7\\bin\\javaw.exe" -jar "%1" %\* &amp;#x200B; So this seems like it's right?
That's more of a function of 8 to 11 than Oracle to Open though isn't it?
&gt; I personally use Eclipse because I like working on multiple projects in the same window. Which Netbeans can do as well.
I'd probably learn basics for now for the interview. If you don't get the job you need to learn SQL in depth...mongodb too (as well as map reduce and such) &amp;#x200B; You really need strong SQL skills to do backend dev. &amp;#x200B; Do you know anything about entity models? Hibernate? Spring? You're gonna need all of that.
Yeah, the question is somewhat confusing. * Migrating from Oracle JDK to OpenJDK by Oracle or AdoptOpenJDK or zulu or ... -&gt; we never had issues. * Running code compiled for 8 on 11 -&gt; some issues, easy to fix with some extra command line arguments * Compiling codebase previously made for 8 on 11 -&gt; non-trivial job (we probably postponed this too long, most of the issues are from the 8 -&gt; 9 transition)
Looks about right. Also check in the same line `.jar` - should have the (default) set to `jarfile`
&gt; It is simpler and easier to write code directly against Undertow. What about writing tests? Spring Boot has a well-documented test framework. &gt; ... your implementation would still be slower than my setup because you are tugging along a servlet framework and spring-boot. Really? Because in my experience, the bottleneck is usually in the database. Spring Boot gives you some annotations which allow you to easily cache database calls. &gt; Personally I have a set of libraries that I like to use; MySQL or PostgreSQL JDBC driver, HikariCP, JOOQ, Gson, Flyway, Jedis, Failsafe, Guava, and some apache libraries here and there. And you like manually tracking all their updates and ensuring they all work together? Because the Spring Boot team does this for me, and allows me to avoid writing boilerplate, by supporting auto configuration in properties files. If you find dealing with all these issues yourself, fine. However I think a much more productive use of time would be to use Spring Boot, which pools the efforts of many people to save time.
irrc you can use Unsafe in java 9+, it's in module "jdk.unsupported"
I think it's because if OP cannot learn and achieve in a highly structured environment designed for learning, where is he going to find motivation to learn on his own? Maybe GPA and graduating doesn't matter but it sure is a good indicator of past performance...and usually past performance is a good indicator of future performance.
&gt;we probably postponed this too long, Welcome to the club brother/sister. You want coffee or beer?
The biggest changes are the jump from 8 to 9. Once you have your code ready for 9, the jump to 11 is nothing. The biggest one for 8 to 9 is the removal of JAXB from the JDK (if you use it). Will need to include it has a dependency.
&gt;Compiling codebase previously made for 8 on 11 -&gt; non-trivial job Are you including modularization in it? When we migrated from 8 to 10, we had only few minor issues with compilation, but we didn't bother with modules, because we wanted to avoid any extra issues.
It's a long complicated answer: we use non-java jvm languages, we use osgi, we still needed a working java 8 build.
&gt; The biggest one for 8 to 9 is the removal of JAXB from the JDK (if you use it). The java.se.ee module (which includes JAXB) was only removed in 11, though marked deprecated (and not loaded by default) in 9 and 10.
1. Update your dependencies. Some dependencies might require switching to different packages, like Eclipselink `org.eclipse.persistence:eclipselink` to `org.eclipse.persistence:org.eclipse.persistence.jpa` 2. Update your tools, like Tomcat, Gradle, Maven. 3. Remove unnecessary uses of deprecated API's, like `com.sun.*`. 4. Clean up your code from unused imports. 5. Add necessary libraries that were removed from the JDK to your project (things like JavaFX, JAXB, JAXWS, things that are in the `javax.` package etc.) As for cacerts, I found this to be a solution for Debian Stretch: https://forums.pokemmo.eu/index.php?/topic/77048-networking-failure-for-updaterclient-with-openjdk-10-on-ubuntu-1804-with-error-re-trustanchors/
\&gt; we People neither you nor I, more likely. Attributable to *Conway's Law* leeking out of services and into infrastructure and platform.
I just got it, I think. After deploy I run `assoc .jar=jarfile` `assoc jarfile=Executable Jar File` `reg add "HKEY_CLASSES_ROOT\jarfile\Shell\Open\Command" /f /ve /d "\"C:\Program Files\Amazon Corretto\jdk11.0.3_7\bin\javaw.exe\" -jar "%1" %*` &amp;#x200B; and it appears to work
Yes.. I think that's going to be a problem :(
Thanks. Do you know how the Jackson library is affected? Are later versions still working ok? You're CACERTS link looks very useful!
Not today. I'll wait for Java 14. Thanks
Just go to OpenJdk 12. There m’s an assert bug in 11.0,1 that I found really frustrating.
We're using Jackson in production on OpenJDK 11 and it works fine. The only thing we had to change is using fully qualified name for `com.fasterxml.jackson.databind.Module` (as it clashes with `java.lang.Module` now).
and for whatever libraries you depend on. they need to support 9 as well.
The problem is 12 doesn't have long term support to my knowledge?
We also have a java 7 OSGi application running in Karaf. We've got that to migrate potentially. Though we abandoned OSGi after what we considered to be a 2 year failed experiment. So the hope it it can remain on unsupported Oracle JDK7 until we've migrated it into our newer systems.
Do tell us how the interview went...
Thanks again.. the fix you linked to was perfect. If you combine it with the usual maven switches to ignore SSL errors...
I thought that as well... but we’re not using Oracle so does LTS actually mean anything to us?
&gt; EDIT : My first issue seems to be to do with differences in the CACERTS between Oracle and OpenJDK? If Ubuntu's anything like Fedora, OpenJDK will be using the system-wide cacerts. Oracle will be using its own copy of cacerts. Use the standard certificate commands to manipulate Ubunut's OpenJDK cacerts system.
&gt; If you're testing against external API The article doesn't say that but of course I would agree with you. That's an integration test. I'm not sure why that's relevant? &gt; unit tests aren't supposed to test the API at the module boundary. If by "module boundary" you mean the class or interface, why aren't unit tests supposed to test that API? I actually think that's what unit tests do. I have a great quote I've kept around: &gt; Unit tests are the first client of the code being tested. So why wouldn't you write some unit tests that verify behavior the client / calling code will expect. Unit tests can also be white box testing where they are aware of implementation but this also makes tests brittle and they break when you refactor, which I think shows why unit tests tied down to a particular implementation are generally opposed to good test design.
Biggest issue I had was with module-info, but that has nothing to do with Oracle/OpenJDK and more with Java 8/9.
Well I think eventually Red Hat are taking over providing fixes to Java. They've marked a few particular builds as LTS, and those are the ones we really want to stick to. I'm not sure that's going to pan out, but that's our hope.
That depends on what distro you *are* using. For instance AdoptOpenJDK guarantee Java 11 support until at least September 2022, and "will continue to build binaries for LTS releases as long as the corresponding upstream source is actively maintained", but they only support Java 12 until September 2019. I would guess that a lot of Java distros are following a similar scheme.
I can tell you that it was a full week of debugging to migrate to spring 2.1 (to be compatible with java 11). Also ran into some issues with libraries compiled with java 8. The Java version itself was not an issue though, especially because we don't use reflection all that much ( I think that was one of the bigger possible issues)
Oh hell... our code is FULL of reflection!
True, but you have to deal with it regardless. Either by adding it as a dependency or temporarily use --add-modules to add java.se.ee. Although if someone is jumping to 11 the -add-modules way isn't an option since, as you noted, that module no longer exists in 11.
We're in the process of moving away from OSGi as well. OSGi is a wonderful idea, and it works really well if you're lucky enough that your direct dependencies' transitive dependencies are simple, but in The Real World it just turns into a big ball of mess. We were using OSGi to bundle microservices so we could make them pluggable inside of one running JVM, but in the end we're simply going to roll one docker image per microservice and host them in a cluster. I makes the hosting more expensive and there's a performance cost, but the development productivity boost of not having to manage your dependencies so closely is worth it.
I'm looking into that combine with Jlink to distribute the application.
I've got problems getting maven to build some projects. Some projects can't have their javadocs generated because I used markdown as it's cleaner. Until now no one has upgraded the plugins handle javadocs written in mardown syntax so I'm stuck generating them using Java 8 while building the rest of the project with Java 11. My only suggestion is to upgrade every single dependency (including maven plugins if you use maven) to their latest versions. I've been hearing that moving from 8 to 9 is the biggest challenge but then from 9 to 10, 11 or 12 would be seamless. That is mostly true, but I just upgraded from 11 to 12 and the maven compiler can't build my project again (due some internal jdk bug it seems). So far I'm underwhelmed because every update comes with some sort of bad surprise whereas prior to java 9 I never had any trouble upgrading to a more recent JDK. It used to be upgrade and forget and now it is upgrade and wait for the tools to catch up.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Editors still don't handle JPMS perfectly, sadly... [Example](https://stackoverflow.com/questions/54993710/the-package-com-google-inject-is-accessible-from-more-than-one-module) of a problem I got.
Am hoping to get some hilarious / interesting responses to: **Consider a piece of class-level documentation that you have recently read.** **If possible, please provide a link to the documentation or the name of the documented class.**
Try asciidoc doclet plugin
So it's no longer useful in single-line cases (e.g. Path.of/Pattern.compile) like in the older proposal?
Thanks for the suggestions. I'll definitely try this as it seems to be simple to just do a plain text search/replace from markdown to this doclet syntax than adopt javadoc's syntax which would be hell (I got a few mbs of javadoc alone to update)
* "java.version" system property parsing to detect Java version will be probably broken - use Runtime.version API instead * Font rendering in Swing may be slightly different in some fonts (e.g. Consolas font is shifted up which makes it unusable in UI) * cacerts file is usable for me since OpenJDK 12
*gordian knot* Yup..
Seems so, I wonder if they completely cancelled raw string literals (the JEP is marked as "withdrawn"), or just delayed?
But, depending on your situation, upgrading 11-&gt;12-&gt;13 may not be much harder than upgrading 11.0.2-&gt;11.0.3-&gt;11.0.4 (as Java no longer has major releases, but gradual feature releases), and in that case you will have saved yourself the pain of doing another major upgrade ever again. Unless there's a real problem of doing that, keeping up with the current OpenJDK version is the easiest upgrade path (once you go 9+).
&gt; deployment for a real application is an issue, nobody runs a jar file Most Java games these days are shipped with their own runtimes and launches. Nobody has to run a jar file to run a Java game.
There are many games written in Java that have been published on Steam: https://www.reddit.com/r/gamedev/comments/77zzfm/java_games_on_steam/ https://store.steampowered.com/app/99900/Spiral_Knights/ The only dealbreaker with Java gamedev is console support, which is none.
This is just the first course of many possible others. See [here](https://mail.openjdk.java.net/pipermail/amber-spec-experts/2019-March/001057.html).
Is there a nice library that has a function that looks like: boolean isPojo(Class&lt;?&gt; clazz) that tests that: – there is a zero-argument constructor – all fields are mutable – all methods with names starting in `get` or `is` are getters to appropriately named fields (and those starting in `is` are boolean) – all methods with names starting in `set` are setters to appropriately named fields – whatever other properties you want from the properties, like non-nullability, identity preservation and so on ?
Only on arm64 and i386. ARM and PPC packages are still Java 10: https://packages.ubuntu.com/bionic/openjdk-11-jdk
Funnily enough C is one of the first higher languages. Iirc everything that has a compiler that does more than transpiling and linking you've got a high language. I know what you mean though, and java is definitly 'more higher' than C .
German student here, currently doing my masters degree. Only really learned java in courses. In OS we had to learn enough C to write simple snippets and understand the man pages of functions. It was enough to enable me to learn most of the popular languages though. I have done some toy projects in quite a few different ones.
If you use Spring, then boy oh boy are you using reflection!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
oh, you wanted to be a full-blown hipster and it didn't work out so well? yeah ... it happens.
indeed ;)
[Java is still free](https://medium.com/@javachampions/java-is-still-free-2-0-0-6b9aa8d6d244), v. 2.0.3, summarizes the state of affairs. I wish we could get it stickied.
&gt; OpenJDK is maintained now by Red Hat OpenJDK is developed and maintained mostly by Oracle. As has been the case with the previous four versions of the JDK, Red Hat takes leadership of backporting bugfixes from the current version (done mostly by Oracle) to old JDK versions. &gt; Google started to favour Kotlin over Java for Android app development. Android has never been Java. It has used an old version of the Java language with a mix of Java and other APIs. While some skills, some code, and some tools are partly transferrable, Android has never been a part of the Java ecosystem; it's got one of its own. &gt; I don't know if I should continue to learn and develop any kind of application using Java anymore and that worries me a lot. Whether or not you choose to stick with Java is up to you, but you shouldn't worry about the state of the ecosystem. Over the past few years Oracle has open sourced the JDK (the JDK Oracle develops is called OpenJDK, and while in the past Oracle, and Sun before it, had some closed source bits, they've all been opened) and innovation in Java hasn't been this active for a long time, with projects like Valhalla, Amber, Graal, Loom, and Panama.
That's why you have to upgrade spring too, the new versions are updated to stop using the deprecated methods, I think (:
That's an excellent answer. Thank you very much!
&gt; This whole you-can-swap-things-out argument is the same non-sense you hear in the logging debate; theoretically possible but no one ever does it. are you 10 years old? or just stupid? jesus fuck, what a bunch of nonsense. go away. i hope i would never meet you or see or touch the fucking pile of shit you're making.
Octal? I haven't used octal since 03677.
There are plenty of gotcha's if you're using libgdx.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This one hit me yesterday. I was converting some builds to gitlab + docker using the docker image `maven:latest` and one of my projects failed to build because of some javax annotations that weren't present in Java 11 anymore.
What are the performance regressions?
It looks like in your [submission](https://www.reddit.com/r/java/comments/bore4c/spring_keeps_returning_could_not_verify_the/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Now we just need a way to convert lambdas into named classes, in case they're needed for reuse.
Observable has been [deprecated](https://docs.oracle.com/javase/9/docs/api/java/util/Observable.html) in 9. If you are using it, you can switch to [PropertyChangeListener](https://docs.oracle.com/javase/9/docs/api/java/beans/PropertyChangeListener.html).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I use spring boot and have been leaning towards micronaut lately. Just wanted to say that you don’t deserve the heat these guys are giving you. Not wanting to deal with the annotation driven convention over configuration programming paradigms that come with spring is actually pretty common. Sometimes you just want to write some code and choose the dependencies that suit you. I don’t see anything wrong with that.
You can start with test server setup having most recent OpenJDK 12 and try to run the minimalistic version of your product ... And then enabling other features to test it fully. The most important is Jakarta EE for web app.
The article repeatedly calls Java a scripting language.
Same here, I think it's fair to point out in question like this. I had never heard of the java 9 module system before moving from 8 to 11, and eventually had to study quite a bit to get things properly in order.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sorry for off-topic but bot has removed my post I am in need of fast solution. &amp;#x200B; I am a student who is (or was?) learning Java Programming Language. My JDK was installed about 8 months ago, but I wasn't using it, as I was trying to get rid of my lessons first. Anyways, after a while I started to learn, reading Oracle's official book and applying in Net Beans what I learn. But things happened and I had to format whole my laptop. Now I wanted to download and continue my Java and Net Beans learning, but Net Beans didn't work with JDK 12. I googled and found out that I need JDK 8. Then I uninstalled everything and tried to install JDK 8 but alas, it needs membership (and payment probably) now. I asked my teacher about other environment to work and he said that others don't give the whole opportunity like Net Beans. &amp;#x200B; So, what should I do? What would you recommend me?
Site address is [blog.panopoly.io](https://blog.panopoly.io). I wonder what's the purpose of this... Ah, there it is. Apparently Panopoly ranks #1 of the paid products. This seems very unbiased and objective.
&gt; This seems very unbiased and objective. Just like all those other links to the same blog that OP's been spamming across dozens of subreddits. Reported.
String processing, java 9 string compression isn't entirely free. It's minor though, &lt; 5%.
We are using AWS lambdas at work. God I wish we were using Java 8, this stuff is horrific.
Don't see anything wrong with calling Java a scripting language. Just means you can write script with it...
I had a really specific one, Oracle uses a custom Font renderer that's not available in OpenJDK. This made some letters a bit wider, causing some pixel perfect tests to fail.
If you need a fast solution, make your own post about it with concise information. If you really need a fast solution, remember, your problem is not the redditors' problem, so **you** need to make a good effort in order to get a quick answer.
Kinda agree
Whats a pure function?
Makes me feel clean and healthy, as if I was eating a salad and going to the gym daily.
Pure anything is dangerous. "Happy medium" "It depends" "Ying-Yang" "We sick an' tired of-a your *ism-skism game" Evaluate things on their merits in the context in which they're used. And also evaluate their counterparts. Perhaps "OO" is better than "functional" for certain stuff ? What are your goals ? testability? speed ?
Not necessarily pure but you should at least use dependency injection for everything that can cause side effects so the classes are testable. In general it is a good idea to keep everything as pure as possible and avoid mutability.
As pure as possible and no more.
A function that has no side effects and whose result does not depend on anything except its parameters.
That would be the goal yes, but we're living in the real world, writing real applications and we have real deadlines. There is absolutely nothing wrong with having "impure" functions for our domain logic. But if you can help it, pure functions are preferable. As with everything: it depends, use common sense, never say never (or always). The world is not black or white.
Grow up, you petulant little child.
Not a great idea. Java is not a functional language, and if you insist on pure functions, you'll end up writing a lot of unidiomatic code that will confuse other developers. You also don't have the infrastructure for pure functions - neither the standard API nor most of the commonly used libraries support a purely functional style.
In that case I don't see how it would be worth the effort, or possible, to *always* do that. Having a method, only depend, on its parameters as much as possible, when possible AND has a return value is a great thing if you ever want to use unit testing. It also would make debugging easier as you wouldn't have to worry about what the state of the object is. You can go a long way to doing those things most of the time, if you are coding from scratch, but even then, at some point you have to get dirty.
Kotlin also uses `trimIndent` and `trimMargin` extension functions on `String` to solve the problem. As of Kotlin 1.3.40 (out soon), when the receiver string is a constant the operation will be performed at compile time instead of at runtime which is nice.
I was not a fan of the earlier raw string literals proposal, but this looks like a thoughtful, useful addition to the language. I'll be happy to see it appear in a release.
I'm not OP and was only answering your question. I personally wouldn't advocate a purely functional style for Java code (see my reply to OP for why), but the advantage that code is easier to understand and debug is really, REALLY massive. Especially because it also completely eliminates race conditions in multithreaded code. If you program in an environment that really supports a purely functional style, it is very much worth the effort. Unfortunately, Java is not such an environment.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's a good intent but java offers very little help. You can try to use [https://www.vavr.io/](https://www.vavr.io/) , it's a functional library for java!
Is it me or is 215ms for a few String concatenations appallingly terrible?
This entire post is about JVM startup time. Most of that 215ms is spent generating classes that would later perform the concatenation.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My workstation isn't the snappiest machine in existence. :-) There is some context missing in that the posted numbers are the full runtime; bootstrap times regressed in JDK 9, but we have improved in every release since (see [https://cl4es.github.io/2018/12/28/Preview-OpenJDK-12-Startup.html](https://cl4es.github.io/2018/12/28/Preview-OpenJDK-12-Startup.html)). The overhead for the concatenation expressions in the example was more like 129ms, and that has dropped to 46ms. I updated the post to include the overheads.
Couldn't agree more
To me it makes sense to use pure functions only when the language has extensive support for it. The major advantage being that pure functions Improve testability. Java is OO language, so I couldn't figure out why some devs/architects insist on pure functions only. I find it very hard to write pure functions especially when 80% of codebase is OO.
Good joke
a couple depending on your system: &amp;#x200B; 1. Dependencies will likely need to be updated 2. Build tooling may need to be updated (gradle, im looking at you) 3. com.sun.\* imports cleanup (life finds a way though) 4. The removal of lucida fonts. 1. to us that was a big one for i18n. This will either matter to you a lot or it wont 5. The classpath is dead. Long live the classpath 1. don't try to migrate everything to modules during your upgrade if you have a big codebase. do it later
My approach is somewhat in the middle. I try to identify what is impure and isolate those parts so that I can more easily test my code. It's not pure in the sense that haskell has pure functions, it's more that I isolate impure dependencies behind opaque interfaces or methods. What I try to recognize are methods that change only because of externalities. Say I'm writing a report service that needs to hit a few REST APIs. Those calls go behind interfaces that can be mocked easily, and usually I'll unify what errors they can throw as well. From the point of view of the report builder, everything appears pure. It's just calling a method and getting a result. Sometimes I might also need instance variables. I try to avoid them where possible, stateful code is always hard to reason about. In those cases, I aim to hide the variables behind accessors that will set them up on first call (or they're set up in the constructor). The state is then effectively hidden, and the complicated code can be reasoned about or debugged without having to keep that fact front center. Another phrase for this style of programming might be separation of concerns. I don't care about purity as much as I care about the code being easy to reason about. It should be understandable to any reader. Separating concerns is one good way to help ensure that.
so neither getters nor setters are allowed. lol
That’s not too clear given the timing are after a very short sample code.
Ok. I should have added a note and some profile data to back this up, but time to execute the MHs is negligible relative the bootstrap cost in this example.
The timing is for an entire Java program, not for a particular method after warmup.
You can do so many cool things with method handlers. The only thing keeping me from using them. Is the uncertainty of how much of the spec will be supported by the Substrate VM ([https://github.com/oracle/graal/issues/955](https://github.com/oracle/graal/issues/955), [https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md#invokedynamic-bytecode-and-method-handles](https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md#invokedynamic-bytecode-and-method-handles)).
This may also help, if your are using Intellij supposedly the AsciiDoc plugin can convert, I use the plugin and never knew that functionality existed. [https://github.com/bodiam/markdown-to-asciidoc](https://github.com/bodiam/markdown-to-asciidoc) &gt; Currently the conversion library is used in the [IntelliJ AsciiDoc Plugin](https://plugins.jetbrains.com/plugin/7391) to seamlessly convert between from Markdown to AsciiDoc.
When I'm hiring recent graduates or interns, I don't expect them to know java (or any other language) inside out (although its certainly a plus), but I need them to understand logic and be able to learn a language. If your college gave you a solid base, everything else should come naturally
people don't write Java code on Notepad++, you can't fat finger setters and getters because they are automatically completed via IDE or Lombok, as they should. Equals, hashCode and toString maybe, since those are human written sometimes and have logic. The same way I don't write tests for the libraries I use and the JDK and JVM and the OS I run it on in the particular hardware setup that I have, I don't write tests for POJO's. It's 2019, use Lombok and an IDE for the sake of humanity.
How do you decide who and who not to hire?
I think trying to compete with GraalVM in the long run would be a losing strategy.
Is there a publicly available proof link behind this? Quick Googling does not show up relevant results, and Excelsior site is on maintenance.
Where do you get this from, your ass?
I only have an email from [sales@excelsior-usa.com](mailto:sales@excelsior-usa.com), as my company paid for a full version of excelsior jet.
Aha! It would be better to wait for the public announcement, I guess, otherwise it looks like a hearsay.
Have a look at the Red Hat Application Migration Toolkit. It's a free tool that runs static analysis on a codebase based on a set of rules - there are rules in there for migrating from Oracle JDK to OpenJDK. They might give you some insights on what you need to refractor, if anything.
This bug is already fixed in the RC version, according to one answer.
We have a (very) basic questionnaire just to filter out most of the people that have no clue and them I interview. Usually it involves some imaginary assignment and how would they complete it. We don't require any coding during the interview but most people decide to just "write" a program instead of trying to explain or aiding in the explanation. I'm more interested in how a problem would be solved rather than knowing the best algorithm or library. Finally, we ask some questions about the solution presented (usually complexity \[which most students or recent graduates present in O-notation\]) and if / how it could somehow be improved. That is the gist of it and while its far from perfect, I can tell you that I luckily never had to fire anyone due hired this way (say, some 20 or 30 programmers) so I think it has some merit.
I then tried a nightly build version (with this error fixed) and got a new error. I gave up. I mean, look at the dates: Java 9 was out for a while and there were still JPMS errors impossible to work with. Maybe now everything is magically fine, good! But I'll still wait a couple of months before trying again.
That's really great.. thanks!
oh, you're just as an idiot as that guy. lol.
What are some reasons you had to fire someone?
JPA offers caching layers, while native SQL does not. If you mix the two paradigms, it may happen that the state of the DB as seen by JPA vs native SQL won’t be the same, which would lead to challenging problems. To avoid this risk, you could turn off caching in JPA, which can result in a performance hit if, for instance, you perform the same query repeatedly. If you believe caching would be helpful for performance, I suggest to use only JPA. It adds a pretty thick layer of abstraction from native SQL, but this abstraction gives you the power of caching. If caching is not important, then you can consider native SQL. Using both is risky, and may be a decision you regret later.
website is down for maintenance, probably coming soon...
I always try to write "pure functions" when I can, but sometimes opt for obvious and clearly stated side effects when it makes things easier for both me and the people I work with
If your code is as bad as your English, I pity anyone who has to work with you.
yes, because i'm the one writing against an implementation then wondering why can't said implementation be changed easily. moron.
It looks like in your [submission](https://www.reddit.com/r/java/comments/bp6it1/scalable_200m_pairs_mapstringint_implementation/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
did they say why they are quitting?
Doesn't the standard way of embedding double-quotes collide with this if we wanted to embed quoted CSV text? """ """Quoted Text""", 1, "Foo, Bar" """ Should give the string: """Quoted Text""", 1, "Foo, Bar"\n I feel they should have supported the variable length opening-delimiter (three or more `"` characters followed by arbitrary whitespace and a neline) and then require a matching closing-delimiter (with IDEs able to appropriately recommend reducing the delimiter to three when longer is not needed) Otherwise the JEP doesn't look too bad. I hope they eventually have String methods for `joinLines(String)` and `indent(String)` with compile-time handling of these when you have constant arguments so that more control over the assumptions is possible without runtime cost. eg String s = """ indented with 4 spaces and carriage-returns """.indent(" ".repeat(4)).joinLines("\r");
Assuming this is even true, there's GraalVM for any server-side app you want to compile natively. The community edition is open source and free of cost, and will soon support Windows. For Java desktop apps... well, that's kind of a rare breed these days in the first place. But `jlink` and `javapackager`, included with the JDK by default, have more or less rendered solutions such as Launch4j more or less obsolete. You can now bundle an embedded JVM with your Swing or JavaFX app, in a package smaller than an Electron app.
You're pathetic. Go back to sucking your mom's tits you whiny fucking baby.
I'm a customer and got the email as well.
&gt; You're pathetic. Go back to sucking your mom's tits you whiny fucking baby. lol. angry much? for calling your absolute lack of programming skill out? look who's whiny here. projecting, i see.
Any ideas for a way to launch without a heap limit? (My JavaFX program makes very large images and has lots of data... and it is for regular users--not IT experts.) The nice thing about Excelsior was I didn't have to set a -Xmx flag. I'd love an alternative that has an option like that. The closest I'm seeing is some runtimes now let you declare a heap based on the physical memory size (so if the machine has 16GB, and I declare that I want to have 1/2 of the memory, I'll get 8GB, but on a machine with 4GB I'll get 2).
I didn't think \`javapackager\` was out yet? If so - awesome. \`jlink\` looks promising, but with not supporting automatic modules kinda made it hard to experiment with on the various things I wanted to ( at the time, havn't tried since the 12 release ).
Is ITC optional on JVM &gt; 8? can we get back 8's behaviour? On many types of programs, I'm more concerned about memory footprint than peak performance, hence my question.
&gt; "please keep your Excelsior JET installation packages and updates safe and secure, as the downloads will become unavailable as soon as mid-June. And if you own multiple licenses for one platform, please take care to protect your license file as well, as we shall be unable to reissue it." So.. Oracle, we no like you, so fuck you all too! This is a shitty move.
I have used Launch4j and seems to solve my issued well .. but yeah having a professional team with commercial support is a good option .. sad to hear this news ...
You can always target 8 in your project to get the old behavior. If you want/need to target 9+, but really want to opt out of ISC, there \_is\_ an unsupported/undocumented javac flag to revert to the old behavior: \`*-XDstringConcat=inline\` (disclaimer: might only work on OpenJDK javac, might be removed and/or break at any time, etc...)*
Checkout the idea "Functional core, Imperative shell". The idea of using immutables in the core.
I don't quite get your point. Why do you think Oracle did anything to cause this decision? Except open sourcing and promoting GraalVM of course, which I have a hard time considering is a "shitty move".
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
By following other impls blindly we would get it much earlier. It is a joke that this feature is still a THING in Java. :(
Setters are definitely a no-no for pure functional programming, getters would be OK if your data is immutable.
Pretty much the best compromise, and as it happens the most pragmatic.
Optimizations of this kind affect footprint as some complex function of the program size. Usually, *data* has a far bigger effect on footprint, and that's better handled with GC configuration. But note that *as a general guideline* OpenJDK prefers peak performance to footprint. After all the core idea of a tracing GC is trading off footprint for performance.
yet functions such as `Integer.parseInt()` is a pure function. you seem to confuse pure functions and functional style.
Fuck google.
The best answer to this is probably: It depends. But generally, pure functions make everything simpler. Simpler to test, simpler to understand, simpler to maintain, simpler almost everything.
Hmm... looking further into it, this is interesting. `javapackager` has been out for AGES. It originated pre-JDK 8 as a JavaFX thing, under the name `javafxpackager`. However, `javapackager` is the exact same thing, simply renamed, and was included in the Oracle 8 JDK years ago. However, this was apparently NOT one of the JDK components that was open-sourced, and Oracle even removed it from their JDK's after version 10. So now there's a JEP to re-introduce it with OpenJDK 13... https://openjdk.java.net/jeps/343 ... and apparently some workarounds, for using the version from older Oracle builds with non-Oracle JDK's for now: http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-September/022498.html But the bottom line's is that this tool is in currently in a weird limbo state, where it's BOTH: 1. Been around forever 2. and yet still "waiting to be released" in the next version. So Excelsior's timing here is weird. I can see why they're exiting the JVM, because with GraaVM and `javapackager` the free tooling is catching up with and taking over their target audience. Yet still, we're always a couple years away from that really being the case though.
You can absolutely learn the "basics" of SQL in an afternoon. The rabbit hole goes a lot deeper than that, of course. But 90% of the time, a "difficult" SQL interview question simply revolves around understanding the concept that there are "left", "right", and "full outer" joins in addition to the default "inner" join type. Even though you'll probably never write a non-inner join outside of an interview context.
I've done libGDX in the past. How does that fit/compare with JavaFX? Will I be able to run these on Android?
Makes sense, thanks!
Thanks.
You seem to have overlooked the word "always" in the title and misunderstood my comment to mean that pure functions *in general* are not a good idea in Java.
Remember the time Microsoft forked Java and made it harder to do cross-platform development? We still hate microsoft for it. Google is doing the same thing now, and we're ok because "at least not oracle"?
It’s fine because somehow google managed to create a cult of fanatics who will defend it regardless of the atrocities committed.
Anyone can and should be able to "fork Java" as long as they don't brand the result as "Java ™ ". Microsoft broke these rules and later named their fork J++. Google followed the rules (Dalvik != Java ™ ) and Oracle pushed their "APIs are totally copyrightable LOL" dumbfuckery.
Yeah. Watch the video - he explains it.
&gt; as long as they don't brand the result as "Java ™ " But Google don't pretend this isn't Java, they call it as such.
Listening now. I don't usually ask questions before watching the material, but didn't imagine he'd be that specific about something like LibGDX.
Does the installer make it possible to execute Java programs (like a normal end user) or am I mixing something up here?
I appreciate Jake's comments here. I've been frustrated with the way Google has dragged their heels introducing Java features. My uninformed suspicion is that it's to encourage the adoption of Kotlin.
If the recent browser-war revelations have taught us anything, it's that Google will break the law to stymie competition in the hopes of driving people to their products and just hope they don't get caught until after they've won a majority market-share. Oh look, Kotlin is fully-supported...I wonder who sponsors that?
I believe Google, after being sued by Oracle, has dropped their fork and all versions of Android after 9 will use OpenJdk.
Excellent little overview of FXGL by its creator, Almas. I've been following the library for a while and think it's pretty well designed. Great job, Almas!
I never had to fire someone
That is why I eventually switched to Oracle's side and started calling Google's Java as Android J^++.
I bet if I search for Java on https://developer.android.com/ I will find plenty of results.
Google could have bought Sun if they were so keen in having Android J^++ be the future of Java. Secondly, plenty of OEMs have their own JVMs without issues, because they play by the rules of Java community. https://en.wikipedia.org/wiki/List_of_Java_virtual_machines#Proprietary_implementations
&gt; It’s fine because somehow google managed to create a cult of fanatics who will defend it regardless of the atrocities committed. I was Google's supporter for a long while, but my "love" with the company started to deteriorate with time, mostly due to dropping of Reader and gtalk/xmpp… and then it was just downhill with more and more stupid moves. Now I actively discourage people from using google services and tools…
It is back online and it is official.
"java.version" property in Android is `"0"` which indicates the level of compatibility with actual Java platform ;)
 1) Yes, it's definitely possible 2) Yes, it's possible, but it depends on underlying the system 3) Yes, it's possible 4) Yes, it's possible but almost impossible to reproduce and it depends on the underlying system 5) Spot on, it's not possible! 6) No, it is possible according to the documentation Excellent way of introducing interaction in an artcle, makes me want to read the entire thing.
I must admit when a video is posted i rarely watch the thing, it just takes up a lot of time. If i may suggest maybe a transcript? It allows the scan the content more quickly and jump to sections that are interested. Or maybe a TOC which includes timestamps, less writing but still very handy for the impatient ones.
What does Google gain from pushing Kotlin?
Yes. That is what I was trying to say with my previous message.
Android does not use the JVM. Openjdk has all these features, even oracle ships Openjdk code.
Could you let us know how the interview went? What questions were asked?
&gt;Functional core, Imperative shell Uncle Bob approach then :)
Thanks! Initially, the content of the post was a talk, so I tried to translate the "interactivity".
**Sidebar** -&gt; **Do not post tutorials here!** **Removed**
Untethered from java only compile target (it compiles to is) maybe? Idk that would be a pretty radical change
Distance from Oracle, I guess. Pure speculation on my part.
Google wishes to dump Android altogether and has roadmapped it out of its life over the next five years to be replaced by the Fuchsia OS which you need Flutter IDE which requires Dart language. Confusing the android landscape further only creates a better premise for a 'fresh start' approach with Fuchsia. You can bet one more twist of fate for android developers to salt the earth; perhaps providing kotlin but not java support on Flutter then dropping it.
Google already said that Fuchsia is no more than a concept OS to "push the state of art" and just try lots of things that could end in one or more OS. It will not replace anything but will give birth to new ideas that would initially seem too "breaking" for the current systems.
Pure functions are great. Theres a reason functional programming makes such a big fuzz about them. Pure functions are easy to reason about - both for a compiler, a static analyzer and a human being. They are well testable and easily debuggable. Its a blessing for multi-threading. There is benefit to be gained by removing unnecessary side-effects and trying to make functions pure. Striving towards pureness usually improves code readability and maintainability. Pure functions work *extremely* well with immutable classes and together with immutable classes, they bring great benefits. However, as with all advice, if its applied too drastic it becomes bad advice. If you write pure functions just for the sake of writing pure functions, the code will suffer. Java is not a functional language, and thus shoehorning Java into being that isn't the most productive thing to do. On the other hand, using well-working patterns from other languages is also worthwhile. there is a reason why modern programming languages move towards being multi-paradigm: to reap in in the benefits of multiple styles.
By default the latest JVMs will set mx to 75% of the memory of the machine. Just don't set it yourself.
This is a great idea, you should explore this and do this more often ;)
Google also said "Do no evil" Google hates android because its so fragmented. They covet what Apple has, a total ecosystem they can control with impunity.
If this had been about a TV show, I would call your post a spoiler....
Another point against fushcia is the license. The kernel is no longer GPL.
Ok I see, thank you!
Nothing much of note really, but thanks for posting as it brought OmniPersistence and OptimusFaces to my attention!
A point against from who's perspective? People with no power to tell phone makers what to make?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
From the users' perspective, obviously. Do you know what copyleft is?
Sincerely didn't know about that. Still learning the rules. Sorry!
It's the other way around. Kotlin papers over the VM changes Google doesn't want to invest the time in implementing. Internal to the VM method handles and dynamic calls are no small task to implement. &amp;#x200B; JetBrains amortizes the cost by doing language research and JB gains mindshare by doing the work for Google. It's truly a win-win-win.
I think your speculation is wrong. If the appeals go poorly for Google (and remember, they won two separate jury trials the judges overruled on appeal, which still boggles my mind) look for a Dart/Fuschia push instead of a Kotlin/Dalvik push. Dalvik is what is getting them in trouble. Dart/Fuschia is a much cleaner push.
They use some marketing phrases like "You use a Java toolchain to develop Android Apps" - They never say Java is in Android but it is true you use Java tools to develop.
No, just some of the class file stuff is sourced from OpenJDK (pretty much any class you would see in OpenJDK that is also in Android). It's still compiled down to Dalvik further down the toolchain.
&gt; I can run 4 (or more, I haven't tried) whole workspaces (in separate windows with extensions and all that) with between 8 and 40 java projects in a pc with 8 GB RAM, alongside Chrome, Firefox, Internet Explorer, PGAdmin, Discord etc and never had a problem What in tarnation, I find this really hard to believe. How big is your page file?? Just running Firefox and Chrome (each with ~10 tabs) on my windows 10 laptop results in 6.8GB usage.
I would argue that 5 is possible. A local system could incorrectly believe and report that it is 1956 and any Java application would have to deal with the reported time. If you've worked long enough you've had to deal with a computer with a wildly incorrect clock usually as a result of a failed real time clock. Just because you believe we are in 2019 doesn't mean that there isn't a computer somewhere that thinks otherwise. On quite a number of systems I've included an RTC check in the startup code, if the system clock reports a value older than a particular value the program refuses to run, usually to avoid contaminating databases with bad timestamps.
There is an engine called the jmonkey engine. It can handle 2D and 3D game development. There is extensive documentation and tutorials online. The jmonkey engine has all the plugins and libraries you'll need. Its an adaptation of the best IDE, netbeans.
This hurts Kotlin as well though, no?
There has already been some discussion about this [here](https://reddit.com/r/java/comments/bhf0jq/jep_353_reimplement_the_legacy_socket_api/).
Users don't care nor do they know what GPL is. Wake up.
That's right - I recall it originally being part of JavaFX, and an older version of it moving to the JDK when JavaFX was bundled, and removed again when JavaFX was split off. I've followed loosely the mailing lists for the current dev stream of javapackager (the JEP you mention). I'd read of several people (mis)using the javafxpackager to build Mac OS/X Appstore bundles for their applications in the past. You can download binary versions of the JEP version to experiment with ( and since it can package jlink images made from a released JDK, maybe even ship to production with it if you're crazy ;p ) from http://jdk.java.net/jpackage/
Just what I’m using! I’ll certainly take a look, thank you!
It is mentioned that FXGL is higher level than LibGDX. Slides have two examples of what it means by high level code. It's all in the first 10 minutes so no need to be scared of the length of video.
Yet you seem to miss the "implement your domain logic" part. IMO, the domain logic is generally the best part to use pure functions. You generally don't want side-effects in the same place as your domain logic.
Yeah, I watched the video. I was really surprised to see someone had mentioned LibGDX specifically. I guess I hadn't realized how small the Java game engine ecosystem is. I meant to update my comment but haven't had the chance yet.
what is typical language today in your mind for desktop apps? I've been using Java + Excelsior JET for 17 years for a Windows app, and now thinking about a change in few years. appreciate your help.
Oh, I still believe that Java is highly competitive in this space. JavaFX is an amazing modern framework. And even with the current evolving landscape with OpenJDK, it sounds like there are still paths to packaging a JavaFX app for easy distribution. But in terms of "typical"... it looks like most of the activity and hype are around: 1. Going all-native. That is, writing separate front-ends with .NET for Windows and Objective C/Swift for OSX. Hopefully with some shared backend code if possible. 2. Electron (although this is the most polarizing path) 3. For bleeding-edge projects or future planned work, perhaps a web/native hybrid such as React Native or Flutter. Still a couple of years away (at least) from being truly viable for production quality desktop apps.
Someone who is familiar with the inner workings could maybe help me understand this? In our internal libraries, we have a decent amount of reflection and casting, translating objects around and such. The converter methods return an Object, which is then cast to the correct class. If Object is abstract, would this still work? Or would the converter methods need to be changed somehow? (generified maybe)
It would work just fine, as the actual object is not an Object, just the type of the reference. The return value could be an interface type, too.
Why wouldn't it? If you can successfully downcast the Object to any other class, it was never really just an Object in the first place.
Whats the deal with RefObject and ValObject?
Project Valhalla plans to introduce [value classes](https://openjdk.java.net/jeps/169) (recently renamed to inline classes). Instances of a value (inline) class would be a subtype of `ValObject`. All existing instances that extend `Object` would be transitioned to extend `RefObject`. And all future reference (identity) classes will extend `RefObject` by default. This hierarchy would allow code to specify that it works with value (inline) types only, reference (identity) types only, or both. For instance, a method signature that specify that it only accepts reference types like so: void foo(RefObject ref)
Part of Value Types being implemented under Project Valhalla
Yeah, lots of times people would create a new Object(), the use it to synchronize() {} on. Seems like it would break backwards compatibility.
The compiler would emit warnings about that in upcoming versions of Java. The plan is to transition uses of `new Object()` to a static factory (possibly `Object::newInstance()`).
Would it not be easier and better for backwards compatibility to just introduce a new type to be the parent of `Object` and `ValObject`? (Since that's basically what they're already doing, except they're also changing the name of `Object` to `RefObject` and calling the new parent `Object`?)
This is just one proposal, so we'll see what they end up with. The point their trying to make, though, is that instances of a value class are still objects. It could cause confusion in the future when one sees `Object` in a method signature and expects the method to work all object instances.
What about all the code that synchronizes on a new Object() field?
As I said below, the plan is to transition uses of `new Object()` to a static factory method (possibly `Object::newInstance()`). Current code that uses `new Object()` would get a warning at compile-time.
Most of the time, when the word "Object" appears in Java source, it's a *type* - e.g. when calling a method reflectively, you pass in an `Object[]`, and it returns an `Object`. If value types get implemented then these kinds of uses need to become a type that's inclusive of boxed values. Using the Object *class* explicitly via `new Object()` is much rarer. So a lot less code will have to change if `Object` becomes a top type and the existing `Object` class is renamed to `RefObject`.
So in other words - Yes, you are completely breaking backwards compatibility. What exactly is gained by giving a "f u" to backwards compatibility? Are we gaining anything of any importance at all, or is it just a bunch of fluffy words they'll be able to throw now by moving things around.
Note that this is just an idea. Nothing is set in stone right now. From reading the discussion, the designers want a hierarchy that makes for a nice mental model. They are factoring compatibility into the equation, though, as they have always done.
The submission title takeaway is not what was meant to be conveyed by the post. It's not even clear how "complete" is defined. I think it's actually subjective. The next article in the series talks about how language features of Java 9, 10, 11, and 12 already work (because they don't use new bytecodes). New bytecode features like nest mates are also handled properly now by desugaring into the old access bridges or by modifying visibility/inlining code as part of whole-program optimization). And new bytecode+API features like StringConcatFactory are properly desugared into StringBuilder. The Bazel-like API desugaring mentioned in the post was announced as coming to D8 last week at Google I/O. The posts were not meant as direct commentary, but more to spark feelings inside of its readers so we can individually decide how we feel about the state of support of Java 8, 9, 10, 11, and 12 language features, APIs, and bytecode features. I remain more critical than most of Google in this area as someone who works on a lot of libraries for Java and Android. Oh and I also work at Google, on Android, and on things like languages, libraries, and the desugaring toolchain. THE CRITICISM IS COMING FROM INSIDE THE HOUSE!
There's sweeping, uninformed generalizations, and then there's your comment. Holy shit.
&gt; From reading the discussion, the designers want a hierarchy that makes for a nice mental model. That...is the worst possible reason I can think of for breaking backwards compatibility. That's what it sounds like to me, and that is absolutely awful.
There are other reasons as well. You'd just have to read the mailing list archives [here](https://mail.openjdk.java.net/pipermail/valhalla-spec-experts/2019-April/thread.html). They are under the thread `RefObject and ValObject`. There have been other ideas, such as treating `new Object()` as an alias `new RefObject()`. As I mentioned above, this hierarchy would also allow constructors/methods/generics to restrict the set of types that they accept. If a method wants to only accept reference types, they could have a signature of ``` void foo(RefObject object) ``` They are still trying to hash some things out to make sure the feature doesn't look bolted on the side. Also, don't forget that the architects have broken backwards compatibility in the past, often for good reasons. Two examples are the addition of `assert` statements and enums.
[removed]
The converter methods **should** be generified as soon as possible. Returning plain Object is an antipattern all on its own.
&gt; There are other reasons as well. You'd just have to read the mailing list archives here. The discussion is under the thread RefObject and ValObject. There have been other ideas, such as treating new Object() as an alias new RefObject(). &gt; &gt; As I mentioned above, this hierarchy would also allow constructors/methods/generics to restrict the set of types that they accept. If a method wants to only accept reference types, they could have a signature of &gt; &gt; void foo(RefObject object) So...they're trying to destroy the java language for some reason? Creating a nightmare of subtypes around objects sounds just awful. &gt; Also, don't forget that the architects have broken backwards compatibility in the past, often for good reasons. Two examples are the addition of assert statements and enums. Interesting that you listed one complete failure, and an ok but not widely used addition, as "good reasons". It will be interesting to see if most of the java world just stays with jdk8 as the breaking changes after it are to onerous for companies to deal with, especially if new "language features" turn development into a bit of a nightmare.
If you have objections, you can state them on the [valhalla-spec-comments](http://mail.openjdk.java.net/mailman/listinfo/valhalla-spec-comments) mailing list. I, for one, like the direction that they are going, but some will not. I doubt companies will just stay on 8 forever. Valhalla will aid in performance and expressiveness, such as finally being able to generify over primitives.
&gt; such as finally being able to generify over primitives That's a more interesting reason than anything else mentioned.
It's all part of [Project Valhalla](http://openjdk.java.net/projects/valhalla/).
I started with Eclipse. However, NetBeans is better for starters, because it is the official Java IDE plus other things. After you get more advanced, use Eclipse.
I prefer IntelliJ over both.
Nah, just watch the video. It's only about an hour long and the guy talks really slow.
For people freaking out on this about backwards compatibility in this thread. It would be binary backwards compatible because new Object() would automatically be rewritten to new RefObject() by the runtime whenever encountered.
That is one idea they've considered, but they've also considered adding warnings in upcoming releases that suggest the use of a static factory method as a replacement (possibly `Object::newInstance()`).
I prefer IntelliJ IDEA as well. It doesn't matter in the long run what IDE you're using. I think, you should try some out and then settle for one. If you are going to work as a software developer in a bigger company, it is likely that they will "suggest" a specific IDE.
The binary rewrite is for existing code (.class). You can't pull it off without it. The warning works at the source level (.java). So these are not either or.
This is weird advance, you want to relearn an IDE, relearn hotkeys? Just choose on of the 3 (intellij, eclipse, netbeans) deliberately and stick with it for a while. I use intellij and i like it very much, don't have much comparison though, but why would i change? ;)
I see what you mean. Yes, I assume that's the solution they'll use.
No breakage of backwards compatibility. If the class file version is older than the version here this gets introduced, then the JVM is going to rewrite the object instantiation to a method call. And yes, you get value objects, which are a stepping stone towards records and embeddable flattenable objects.
&gt; value objects, which are a stepping stone towards records and embeddable flattenable objects So like we'll get a charmander and a charizard every time we write a new java object?
[removed]
Heck no, introducing a new top type is a much bigger change, that was the first thing they tried and it was super complicated. This change is actually surprisingly simple.
Go away, troll.