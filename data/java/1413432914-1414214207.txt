First thing I thought when I saw the title, and I may or may not be wrong, I have no idea: 1. Abstraction (the Java community really likes this lol :P) 2. Control 3. Overriding (combined with the above) Edit: Oh, and please correct me if I'm wrong.
Stupid question, why do you compare null to valueList instead of valueList to null? I know many languages have some nuance related to this, I'm just unsure of the nuance. Edit: So many responses! Thank you! 
Check out the templating engine that I'm working on called [Pebble](http://www.mitchellbosecke.com/pebble). It has integration with spring, it's fast, easy to read syntax, and it's inheritance features helps with creating complicated layered views. 
It's one of the pillars of OO, encapsulation. Hiding your implementation details from the consumer lets you change those implementations without the consumer having to change or even be aware tat a change occurred. For some languages (C# and Java included) it's especially important to start out with a property (getter methods) because re-factoring toward properties after having a public field can cause breaks. So, in the end it's best to start with the property even if that property is a "pass-through", so that if in the future you need to do something else you can without breaking the consumers.
Thanks for the tip, I might try Eclipse link
https://grails.org/
I will try this. I will also not use the eclipse plugin for gae this time, as I thought it would make things easier, since I didn't have to deal with commands, but I wouldn't be surprised if it unnecessarily complicated things. Thanks.
What do you mean by "redefining" the class?
I find that IDEs are a lot easier to work out than the problems that get thrown up by things like Lombok. Sure it reduces some clutter, but why not just use a different JVM language if verbosity is that much of a problem?
I am not sure if this is in the Java coding conventions. I think it is just one's style of writing.
I think in the case of comparing null, there isn't exactly a practical reason. But there is a reason for comparing objects for equality that way. Let's say you have a *name* variable, and you want to check if *name == "bob"*. If *name* is null then you will get a null pointer exception. If you instead write it as *"bob" == name*, then you will never get a null pointer exception because the equals method is being called on *"bob"* instead of *name*. I would think that OP just does this universally for consistency's sake. It's easy to just remember that if you have something known, then it should go on the left.
You can't modify the reference, but your could change the state of the object. For example, you could add to a list that is final.
Not for Java beans
Very true, also a good example of when getters/setters can do more than just basic access: It is generally advised that you do a list copy on get/set instead of just maintaining a pointer to some collection that an outside entity can screw with at whim. Also a good reason to make object's fields final whenever possible, to avoid deep modification by anyone who happens to have access to it. In practice though, I often find this is more trouble than it is worth.
It is convention, and if you don't follow it, a number of useful libraries and tools that assume you do may not work properly. Hibernate for example, or many jsp taglibs, anything that relies on beanutils, which is more than you may realize edit: for the nay sayers: Your bean's state is not immutable if your fields are private, but they have public setters. And it's not for encapsulation if all your fields have public getters and setters. Then why follow this convention, and not only use getters and setters if you want additional logic around changing and querying state? Because libraries, tools and 3rd party software all work together smoothly as long as your code follows conventions such as this one. This is also why your getters and setters should follow the conventional form "getFieldname" and "setFieldname", and not use something unconventional like "get_fieldname" or "setFieldnameTo". BeanUtils, which is incorporated in a lot of liberaries and tools, uses reflection to look for your private fields, but then queries the content by calling a method called "get" + capitalize(fieldName). You will bump into this when you try to use properties like the .length of an array or .size() of a List, and find that your JSP tag looks for getLength() or getSize() instead. 
== doesn't care if either side is null; the .equals() method requires the object it's being called on to not be null.
It's a practice named Yoda conditions - see http://en.m.wikipedia.org/wiki/Yoda_conditions. There's no real benefit to it in Java, but in languages where assignments are allowed in if statement conditions it can prevent nasty bugs from cropping up if assignment (=) is used instead of an equals check (==).
It's a defensive coding technique (not sure if that's a term, but you know what I mean). If you make a mistake and enter: if(newValue = null) { etc... } everything continues just fine, and maybe you don't realize the mistake you made. But if you use if(null = newValue), the compiler stops you from going any further :)
Oh that's right, I can't believe I forgot that.
A lot of this is something that can be done with the type system. For example, if you want a password, you could define a Password type and enforce the constraints like length in the constructor.
I asked the exact same thing in his thread 3 months ago and he basically dodged the question. I signed up to check and there's nothing there that would entice me to mentor people. So I tried to delete my profile and guess what; there is no "delete profile" option. There is also no matching going on at all: it's just a list of people that they match on 'tags' and not very well either. I've signed up some time ago and I did not get any mentoring requests. So they're asking me to not only sign up but then actively search for people to contact to help? Like hell I am. I'll just stick to answering questions on /r/learnprogramming. An open forum is much more suitable than closed off 1-on-1 communication anyway in my opinion. You never know how 'good' the teachers really are, some might even teach students horrible parctices they'd then have to unlearn.
There's a bunch: * [Hibernate Validator](http://www.hibernate.org/412.html) * [Apache Commons Validators](http://commons.apache.org/validator/) * [Spring DataBinding API](http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/validation.html) But that should not keep you from doing this for fun :) Heck, people might even prefer your solution over the existing ones. If no one ever thought "hey, this can be done in a better way" we'd all still be using Ant ;)
Performance is a side effect (and final is not some magic "go fast" switch), the reason you make classes immutable is that it makes it much easier to reason about them and to build correct code using them in a multithreaded environment.
The inability to understand maven's scope for a dependency. We usually find out when we have compilation problems when our unit tests are run Jenkins. What happens is that a developer will include a class, that is unfortunately only in test scope for the project, in the application part of a component. Eclipse don't notice the difference between a dependency in test scope or not and simply assumes any dependency can be included. 
It's cargo-cult OO, IMO. You should rarely define setters and getters and rather think about what kind of abstraction / service are you trying to achieve. If you just need to group data into a record type, you might as well make all fields public. IOW, an instance of a class should be best understood as a "mini-server" which provides services to its clients. The service *contract* (this is important!) is upheld only through public methods. An example is a bank which allows you to deposit money to some account, withdraw (but not overdraw!) from an account and to query the state of an account. So you have a class like class Bank { private Map&lt;Int, Account&gt; accountDB; public long query(int account) { ... } public void deposit(int account, long amount) { ... } public bool withdraw(int account, long amount) { ... } }; Modifying the state of an account is exclusively under the bank's control; notice that there is no set method for setting account balance to an arbitrary value. If the accounts database were public, chaos would ensue because any client would be able to set the balance on any account to any value. Note that implementing a method like public Account getAccount(int account); would **totally obliterate the point** of having the accounts database as a private field. In that case you would lose all the control a bank is supposed to provide. It would amount to walking into a bank, getting the clerk to open your account and thenk asking him to walk away while you "just edit it a bit" on the computer. (Assuming that the Account class is a simple value class, i.e., it only knows about its owner and balance.)
Yes, but GWT gave technological underpinnings of VAADIN, which is actually decent from what I heard. Besides, with GWT you can build cross-platform HTML5 apps that will run on PC, tablets and mobiles. So I would argue it has it's uses. I'd probably still use GWT or VAADIN if I had to build an web-app, especially one for company intranet where latency is low and bandwidth is plentiful. Oh, and GWT seems to be pushing out new releases every year, so I doubt it's dead.
I'd encourage you to read the referenced section of Effective Java. Josh Bloch would argue otherwise, and I'm inclined to agree with him based on previous experiences.
I have used Vaadin/GWT and one of the biggest problems with them is that if you want to change the UI / Theme from what was provided out of the box then it is really difficult. IMHO it is not worth the effort if you are going to implement it for Internet facing websites. However if you have internal dashboards/admin UI etc. that you need to support then it is good.
That's an old convention from my days as a C coder who came up from BASIC. There is no difference at all between 'null == value' and 'value == null'. However, it does protect one from the possibility, however remote, of using 'value = null' because one made a typo, or forgot that in this language one uses '=='. That is not really a mistake I make anymore, I've been developing in languages with this syntax for a long time now. However, I've allowed it to remain part of my style.
The problem with JSP is that it's too easy to mix business logic and presentation logic, and that's why JSP is frowned upon. If you keep your logic separate and in normal Java classes or servlets, and only use JSP as a presentation template, I don't see much problem with it. Also, traditionally JSPs gave very confusing error messages and it was hard to trace error message back to original JSP file. But web-servers have improved since then and this should be less of a problem now. Good alternative? There are lots of web frameworks with lots of template based presentation layers. If you are building ADs for the masses- I'd say stay away from GWT- it's designed more for single page heavy Javascript applications, not pages.
Btw. the dark theme still does not work on LUbuntu (dark panel, otherwise completely default) - some configuration becomes completely unreadable (black on black is oh so stylish…), and even the code view is hit-or-miss. *However*, ranting will not do any good. Submit bug reports, raise your concerns in #eclipse and let them know that we users want them to stabilize their product. This may mean e.g. requiring modules to conform to some test suite (e.g. installing+uninstalling+diffing: The uninstalled module should leave no trace) before adding them to the marketplace. The problem lies as much in the development process as in the code itself.
Although both Eclipse and Maven definitely have their flaws, I'm quite happy using them. Especially Maven is a good idea with a horrible implementation, but the alternatives are even worse.
Lots of great points in this thread, but I haven't seen anyone mention Security. By keeping your fields private you can ensure that they are only changed via setters and getters. If you don't want a field to be changed because it could break some other parts then you can avoid a setter and anyone working on the codebase in the future can't do so.
When creating a class, you want to expose as little of its inner workings to the world as possible, making the user of your class play by your rules. If the field is public, it can be changed from outside the object by referencing it directly, bypassing any e.g. validation or logging, and changing one small piece of the state of the class instance, possibly putting the object into inconsistent state. Sure, at first it doesn't look sensible to create a getter and/or setter that only returns/sets the private field, but later, when you want to make the field read-only, or want to add some behavior (calculating the value of some other dependent fields in the setter, for example), you'll find that the refactoring takes a lot less time with the getter and setter already in place.
You know that you can **delete** obsolete posts, don't you?
&gt; I've signed up some time ago and I did not get any mentoring requests We only went public on Tues so you were part of the beta (where messaging wasn't active). Feel free to not use Askadev. Nobody's forcing you to and the delete account feature will be there soon. 
SO makes $30million per year. Your willingness lines their pockets. Askadev isn't for you, that's cool. 
Yes
Did it (or java) perhaps update itself without you noticing? Usually those kinds of problems originate in something like this.
Another reason not mentioned here is that sub-classes can't access private fields but could access methods. You can define methods to be final which makes sub-classes less likely to break things by accessing private data. You should generally favor composition over inheritance anyway. 
If that's quite literally ALL it does then it brings no tangible immediate value. If you never go back and change it then it may bring no long term value either. If, on the other hand, you have any reason at all to insert a 'hook' to be invoked when reading the value, suddenly it's hugely valuable. If you want to refactor that variable out of your class, either to storage in a different format (Properties, for instance) or to a helper class, it also becomes quite valuable. So the tradeoff is a couple of extra lines of code and extra parentheses sprinkled through your program vs. more difficult refactoring and modification. To me, it's worth occasionally bloated syntax to simplify future changes, because I hate it when my job is more difficult than it needs to be.
Not everyone can be as good as you think you are. Lots of companies insist on just throwing more idiots at a project, believing it will get done faster. That's not going to change. Lots of companies also insist on buying licensed, supported software only. The other thing I notice is that most developers are very myopic. Their limited experience is not enough to characterize trends in the software industry at-large, yet they still insist on doing just that. 
JSF 2 brought facelets, which keep JSF, but discard JSP. Oracle recommends facelets.
it often is. check out spring boot for an easy way to get applications running
A context that gives you access to external things?
If what you are making is essentially a struct, and likely to remain so, there is *no harm whatsoever* in exposing the struct's members directly as public fields. Easily 90% of the getter/setter methods in the universe of Java code are pointless IDE-generated wrappers providing no-questions-asked access to the values of fields that never needed to be private in the first place. This isn't "encapsulation" - precisely nothing is encapsulated by doing this. Structs aren't very OOP, but structs wrapped with getters and setters are exactly as non-OOP as unwrapped structs. If the class is really a struct, don't bother with getters and setters. (Ideally, make the fields public final and initialise the entire structure in the constructor). If it's not really a struct, consider getters and setters a code smell. The Java Beans specification was originally intended for things like UI components, whose properties should be exposed to, and manipulable by, an editor. Somewhere along the line they mutated into "Entity Beans", which were essentially structs representing database records, wrapped with getters and setters for the benefit of persistence frameworks (if a value's wrapped with a getter, you can subclass the bean and make it lazily-loaded, for example). Outside of these contexts they should be considered an anti-pattern.
Why do you think Gradle is worse?
I'm not sure I totally understand the problem, but what is stopping you from running your removal again and again? Some pseudocode if I'm understanding your problem correctly: while(myList still has E characters in it) { loop over myList and remove E's } n will probably have to change or you'd be stuck in situations where n=3 and your list is like E,E,F,E,E. But I might not totally be understanding your problem.
My team started using Eclipse with JBoss Tools 3 years ago. But it was so buggy we had to switch to Netbeans 1 year ago. That was the best decision I could make. Netbeans improved a lot in their last iterations.
I'm having a hard time understanding your requirements here. That being said, if you want to go back to the beginning, you can just set the index value manually for (int i = 0; i &lt; max; i++ ) { if (someCondition) { //Start again from beginning, note I had to use -1 because the i++ will still happen i = -1; } } This is a case where the for() loop works against you a bit, since you can't bypass that increment. A while() or do/while() loop might be a better bet since you can simply loop until some condition has been met. boolean done = false; int searchIndex = 0; do { if (someCondition) { done = true; } else if (someOtherCondition) { searchIndex ++; } else if (yetAnotherCondition) { searchIndex = 0; } } while (! done); 
I'd be interested in hearing the answer to this too, because I am just about to switch from Maven to Gradle. I'm tired of the XML Hell, and I'm tired of reading documentation that seems auto-generated (although, sadly, I'm quite sure it was written by a human being). The Gradle documentation and tutorials—tutorials! imagine that!—seem head and shoulders above Maven's, in terms of user friendliness. 
NetBeans has very good Maven support out of the box. It was voted users favourite feature in a recent survey on NetBeans website
I have a paid copy of IDEA13 and NetBeans. NetBeans gets far more use. IDEA has some very powerful features but its Mercurial support is not as good and I prefer NetBeans for day to day coding as I get more done.
They pay for their advertising, presumably.
I like the JSR-303 (Java Bean Validation) but if you like a different API, knock yourself out. (Of which at least Hibernate Validator is an implementation.)
I tried Gradle, but found the documentation about it to be quite minimal (at the time I tried it about 6 months ago), so I couldn't achieve what I was trying to do. I use Maven for a J2EE Webapp for the following tasks: - Specify external dependencies from the Maven Central Repository (common ones like Apache Configuration, Google Gson, etc.) - Specify local dependencies: Local library JARs I compiled/gathered myself which aren't in any repository, just in my project folder - Compile and package my Java sources and other sources into a deployable WAR - Deploy this WAR on my local Glassfish instance for some quick tests In Eclipse, I created a Maven Run option to "Package and Redeploy" my WAR. If there's any way to do all this with Gradle, I'd sure like to read about it. :) Also, if another colleague wants to make some changes, he can just get my stuff from SVN, run mvn:package and create his own WAR and everything just works.
OP should at least post his request to /r/javahelp instead of /r/java.
If you're ever using WSIT-stuff, Netbeans is basically your only choice to create those complex WS-Policy WSDLs which Metro uses.
&gt; It's cargo-cult OO Sometimes it probably is, but I think it's worth to remember that those getters/setters serve a *function*: To decouple the public-facing interface from the implementation and allow the latter to change without disturbing clients. &gt; … implementing a method like `public Account getAccount(int account);` would **totally obliterate the point** … Not if Account was only an interface that would allow me to query and offer transactions. In your example, `Bank` is a god object.
I rally like IDEA, but you can't compare the IDEA support of Maven with the NetBeans support of it
I use gradle at work and am quite happy with it...takes very little effort to achieve what I need...and there is massive amount of flexibility
That's akin to saying "JEE is really good for views, if you use JSP" The two are unrelated other than the fact that one uses another. Freemarker is completely unrelated to Dropwizard other than in use. I realize this is pedantic; however, if you want go down that road... Dropwizard uses freemarker for its views by default. You can use other view technologies, including your Spark's Mustache, with dropwizard. In fact, you could use JSP with Dropwizard!
I love that IntelliJ does have all kinds of plugins imaginable and use it most nowdays. However, Netbeans built both internals on Ant and Maven itself for their respective support. It's just amaizing compared to Eclipse or IntelliJ. (Your project has changed, do you want to reload the project? @ IntelliJ)
Copy on get can be expensive. What you should do in a method which returns a Collection is use an unmodifiable type which simply wraps the existing collection without a full out copy. e.g. return Collections.unmodifiableList(listAttribute); If the caller wants to create a copy of it for their own purposes then nothing stops them from doing this. After doing this, you then provide interface methods to remove/add to this list if desired. This makes it much easier to track down where these lists are being modified versus some business logic utility grabbing the list, passing it into some other business logic method and three levels deeper you find where somebody is changing this list.
I love that logic. Since it is easier to develop an application with JSF those who use it are just mediocre. We have to try and prove how smart we are by using older technology that is more error prone and takes more time? No, Thanks I am much more productive with JSF and it keeps my clients happy so I think I will stick with it.
it's = it is, you're looking for its
I actually would prefer something like this to the complex behemoths out there
A pragmatic reason I haven't seen here yet (although the others are all arguably more important): it's easier to set one breakpoint at the top of your set() than to set them everywhere that accesses the field.
Wow, this is EXCELLENT! Great job!!!
I honestly wish they would just refactor this for a micro core that did straight java to javascript. It would be a huge move but it would setup a base that would allow people to target other js envs besides the browser.
JSP is just templating. With an obtuse library namespacing scheme, broken object graph access, and missing language constructs... Use a templating "technology" of your choice. 
&gt; Reminds me of this: http://www.nicolasbize.com/blog/the-best-ide-in-the-world/ So true
&gt; Why do you think Gradle is worse? * Code in build files is a bad idea, I'd much rather see maven plugins with a clear lifecycle * Large multi-module builds become far more tedious to deal with than with maven * Maven has far more plugins
&gt; I don't see why anyone wouldn't use IDEA. It is clearly a better solution. * Breadth of plugins - by far blows IDEA away * FOSS - Don't care about the community edition since it's insufficient for a working engineer
The fact that I have to stop and register an account *before I get any information at all about how your site works or how I get help* is a major turnoff.
Why is 1 on 1 help hidden behind an account wall better than public help from multiple different sources who may have different yet useful insights into a problem? I'm trying to understand the logic behind that design.
/u/HandDisco replied to this elsewhere - I believe a refresh of the home page is in the works.
Are those arguments for, or against IDEA? IDEA's base (i.e., Community Edition) is FOSS. IDEA has a rather large set of extensions. I really like NetBeans (though I've been using IDEA lately, since it fits my use case better right now), but IDEA is easily the most polished of the three IDEs (though each has its own areas of strength).
Well, that isn't quite what I am saying. I use JSF, have contributed to Trinidad and was on the ADF team, and it is how I make a living consulting. I blame the way Oracle positions ADF partially. It's more difficult than marketing makes people believe. I get a lot of work helping them out once they find it to be more complex. 
If I need that then I can add a private method at a later date. This violates the YAGNI principal (http://en.wikipedia.org/wiki/You_aren't_gonna_need_it)
If nearly 30 years of professional software development has taught me anything, it's that you probably are gonna need it. Just can't predict exactly where. I like some of extreme programming's principles, but not all of them. Test first? Yes. Code just enough to pass the tests? Yes. Make more work for myself later by being lazy about accessor methods now? No.
true, but it's been a long time since I've heard anything about it. Considering that the 2 web technologies that Google is pushing most these days are Angular.js and Dart, I am not sure how much effort they are still putting in GWT.
How often do you get to make this choice? Usually the implementation is dictated by the app server you're using. 
That seems like a large category of things. What kind of stuff is normally accessed with it? (JSF noob)
&gt; Your project has changed, do you want to reload the project? @ IntelliJ Or you could just enable auto-import and never get prompted again.
It's running on servers in data centers, doing the real work behind the web applications pinguyn mentioned above. For example, for Netflix, when you request a list of shows, your web browser sends a request to a server running a Java application. That Java app builds the list and sends it back to your browser. You select one to watch, and another request goes back to the Java app on the server, which then starts streaming the video back to your browser (or TV or whatever).
Many web services are built using Java or other languages that run on the JVM, as /u/pinguyn noted, so mostly used on servers. More on the client-side world, Android uses Java (although with a different JVM, system libraries, etc), as well as many TV/cable boxes. 
Stupid Mongolians!! 
Java is definetly being used on the desktop. If you look at project's like avian they allow you to distribute java applications without needing to have java installed (just a simple .exe, you would have otherwise been none the wiser it was java).
Matlab
And all Blu-Ray players.
Client-side stuff might be PHP; can't say I'm an expert in their full architectural stack. Sources regarding Java usage: http://www.quora.com/What-is-the-backend-infrastructure-like-in-Netflix-Which-Server-side-language-do-they-use-Do-they-stream-videos-from-Amazon-S3 Looks like they're starting to move towards Python from Java, actually: http://techblog.netflix.com/2013/03/python-at-netflix.html 
LibreOffice www.libreoffice.org / OpenOffice www.openoffice.org 
Pretty much every app written for the Android operating system is written in Java (though the compiled code does not result in regular Java bytecode)
The most well known would be MineCraft. There are other, less well known, games that are also Java applications: Anything from Puppy Games, like Revenge of the Titans, for instance. Also Puzzle Pirates, Spiral Knights, and versions of RuneScape before RS3. In developer circles, many of the most used IDEs are Java applications. These include Eclipse, NetBeans, and all the IDEs from JetBrains (IntelliJ IDEA, WebStorm, PyCharm, PhpStorm, etc.). Vuze (previously Azureus), the BitTorrent client, is also a Java app. And, of course, most Android apps are written in Java (though they run on either the Dalvik VM or ART, rather than the JVM). Finally, many Java desktop applications embed their own private JRE, often with a native launcher. In these cases, an end user would typically have no idea that the apps were written in Java.
&gt; You will find VERY few startups or large applications running PHP. It only leads the internet in terms of small business websites that nobody visits and a handful of major sites, like Facebook or Wikipedia who use it basically as just a template engine. Java's performance in server applications is unmatched by anything other than C/C++. That's a bold statement my friend. Edit: Not soliciting downvotes, I took your comment very seriously. I wanted to find out whether your opinion was widespread or not among other people outside of the Java scope 
I didn't say it wasn't true...just that is pretty bold. I mean, it seems like a ballsy thing to say.
PHP seems like a very good language to me, with many features, etc. I thought it was a language that could be taken seriously even at an enterprise level. 
That doesn't mean there are many enterprise level websites written with it, or that whatever Caminsky said is false.
You posted my comment on /r/PHP and you're telling me you're not trolling? 
Care to name some big Java websites? besides the 4 listed above
What's wrong with that? That isn't trolling. I took it seriously. 
How is this trolling? Nothing he posted makes me thing "trolling". Hes looking for opinions.
So, 7 on that list? That doesn't seem like very much. I'd love to see the research you did, and your credentials. There are plenty of large websites that run on PHP, and just saying there aren't doesn't make it true. 
There definitely are quite a few enterprise level websites written with it. Just for the record.
In addition to PHP I have been trying to master Cakephp. My main area of knowledge is visual arts so I have been shifting gears towards the internet by learning PHP and frameworks, I have gathered a lot of knowledge on my own to the point in which I can make a basic website on Cakephp (that includes setting up a database, building models and associating them). Yes, it has been a long time (6 years) but that has included me working on other projects, family issues and also working on non programming development jobs. Ultimately my intention is to develop a good set of skills in which I can blend my artistic knowledge with my ability to use computers as a medium through the building of apps, websites and the manipulation of them. If one day I can afford going back to school and get credentials and certifications then I will. 
&gt;I truly thought PHP was a programming language to be taken seriously. You're not wrong. Just make sure that's not the only language you know.
Also, SIM cards and smart cards run Java.
I haven't tried it myself, but most likely it is a browser plugin thing, and not so much a Java itself thing. You probably already allowed the old version, but forgot about it. You don't mention which site or which browser your are using, so it is next to impossible to help you.
http://stackoverflow.com/questions/1913098/what-is-the-difference-between-an-interface-and-abstract-class See here.
There's a bunch, I'm not sure if you're seriously asking what the actual differences are or strategically, why would you use one over the other. But in my view, it's basically all about the following. You can use multiple interfaces but only inherit from one abstract class. So, basically, you use abstract classes to make a superclass that other classes can inherit and share a design. An interface describes a set of methods that can be called on an object, but does not provide concrete implementations for all the methods. Once a class implements an interface, all objects of that class have an is-a relationship with the interface type, and all objects of the class are guaranteed to provide the functionality described by the interface. 
You mean generating getters and setters? 
The decision of having Ant and Maven as the Netbeans project formats was a great decision.
I've used eclipse for 10 years across many different organisations, projects. While I agree it's not the best IDE ever (intellij being much more streamlined and well designed), it's not THAT bad, and I've yet to see *one* instance of workspace corruption, or maven plugins "fighting" against projects (especially since Kepler). I can only suspect people are incorrectly packaging their plugins instead of relying on standard distributions, or moving around project metadatas between differents versions of the ide ? 
&gt; In these cases, an end user would typically have no idea that the apps were written in Java. Except by slow, ugly UI, slow loading and insane memory consumption. :)
Using maven natives plugin and then shading a jar (so it packs the natives with the jar) should work :)
You can't. Modern operating systems prevent you from randomly messing around with another process's memory. Also, different languages organize memory in different ways, so yes, it is also a problem that the languages are different. You would have to create an interface between the two programs that allows you to send instructions to the other program to get it to do stuff or provide you the information you want. Roblox might already have such an interface. Or, you would have to create one, with one side written in Lua and the other side written in Java. 
what kind of interface do you mean i want to create an autopilot for a game, this requires access to walking and ,for the lack of a better word, "action variable" commands how can a roblox interface help me with that.
In terms of code, they're very similar, which often raises confusion like yours. Conceptually, I think of it this way. When you inherit from an abstract class, you're saying that you *are* a type of the class. You have the same *attributes*. When you implement an interface, you're saying that you *do* the things that that interface does. In one sentence, abstract classes allow you to inherit state/variables/data, interfaces allow you inherit behaviors. 
The roblox client software and the roblox server software communicate with each other, so that what you do in the client gets reflected in the game world on the sercer and what happens in the game world on the server gets reflected on the client. The "rules" for this communication are the protocol, and the interface is what lets you communicate using the protocol. If you can communicate using thr protocol, you might be able to do what you want to do.
We've switched nearly all our projects (&gt;100) to Gradle, and love it. I keep hearing people complain about code in build files, and while I get the sentiment, it's really a matter of following best practices. Yes, gradle allows code in the build files... But most code you'd actually write there can easily be written in a fairly declarative way. Groovy's use of closures coupled with Gradle's lazy container objects makes it easy. Moreover, it's all groovy code, which means you can iteratively extract common logic into plugins fairly easily, unlike maven (which has a notoriously awful plugin API). In other words, with Gradle, we'd start by implementing some bit of build logic in the build file to get things rolling, and then extract that logic into a plugin for reuse.
An abstract class with all abstract methods is only semantically different from an interface. Other languages don't draw a real distinction. C++ has the "pure abstract class" instead of an interface. The real practical difference is that an interface will *never* have implemented methods while a pure abstract class might.
knrz, what's your social security number?
Use the Java and War plugins to create the war file. Gradle lets you specify all kinds of dependencies, including raw jars in the local filesystem. Just like with maven, your project should follow standard Java conventions unless you've got a really good reason to deviate. I don't have much experience with Glassfish, so I don't know how straightforward deployment would be, but the rest of what you described is supported out of the box in Gradle. 
how do i find these protocols are they set by roblox or is it standardized in lua also how would i get my program to communicate with the interface 
I have worked on various projects and large applications that use PHP, for a variety of startups and huge corporations. Uber made their first $25 million on a PHP/CodeIgniter stack. I know that because I now work for their ex-CTO. He loves PHP. What the actual fuck are you talking about.
Not to mention almost all the major banking, insurance, and healthcare systems. 
Do you know how to write classes and instantiate them?
Yes I do, it's just that I don't know how to create a Node. 
The protocols are set by robolox, and you'd have to dig around for the documentation, if they've made it public. Otherwise, you'd have to figure out the protocol yourself. Read [this](https://www.samba.org/ftp/tridge/misc/french_cafe.txt) and perhaps be enlightened.
The angle brackets indicate generic type arguments, so that might be a good place to start.
What do you know, then? What's your best guess?
That's a bold statement, but hey, at least you gave examples. So thank you!
This is a good question. One of the main advantages of using an abstract class is reducing the amount of code you have to write. For example, say you want to create two different bike classes: a road bike and a mountain bike. If you create an interface called Bike, you can define all your common methods, like pedal() , shift(), and break(), but you'll have to implement those methods in both MountainBike and RoadBike. Seems redundant no? This is where an abstract class is useful. With an abstract class you can write the implementations common to all bikes, such as pedal(), shift(), etc and then declare that MountainBike and RoadBike both inherit Bike. You now have access to all of Bike's methods without having to implement them individually in each of the subclasses Edit: In case you want to read up further: http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html
I appreciate the time you took to write all of this out for an Internet stranger, but I'm going to hijack your comment to go on a bit of a rant. There's a masters student new to my research lab that asks the most basic questions all the time. And this is okay, because I understand that this person was educated abroad which might be a factor, and regardless, joining a new project is hard for anyone. The problem is that her questions never improve. This person's not gaining significant understanding or knowledge of the project or the tools we use. This person doesn't know how to troubleshoot problems. If something doesn't work for this person, (s)he doesn't google, trace the code, or open a debugger. This person either randomly changes things or immediately asks someone else. I'm not saying that everyone who asks questions like this is as bad as this person, but in my particular case, I try and avoid this person in class and my other lab mates increasing work from home. When I find myself in the lab with this person, I often end up reading documentation and tracing code with her (to set an example) when this person should be perfectly capable of this on his/her own. I end up neglecting my own duties in order to try and get this person up to speed. /u/BeefWellton, I don't know you or your goals in life, but if you want to be a programmer at any level or most anything else, you need to learn to research your own questions and solve your own problems. /u/sloth514 is a kind soul, but this is a simple enough assignment that you shouldn't need someone to post the code for you in order to solve it. Something that's helped me tremendously in the past and even now when I'm unclear about the nuances of Java are the [Java Tutorials](http://docs.oracle.com/javase/tutorial/). You would also do well to become familiar with the APIs. This doesn't mean read them through as that would be a bit like reading the dictionary, but any time you want to learn more about a class you should instinctively google "java 8 api &lt;class name&gt;". Internet forums like this and StackOverflow are also good and useful, but you should never ever go to them with uninformed questions. In this particular case, you should've already tried something and come with code or clearer ideas. If you find all this offensive, overreactive, or belittling, that's fine, no skin off my back, but know that in my short programming career, I've seen enough to know for certain that the best programmers are always the most independent. &lt;/rant&gt;
Thanks for your helpful input.
IDEA regulates its "FOSS." Ie, you cannot get together with a bunch of other people and essentially regurgitate the professional version of IDEA using the community edition - they won't accept those commits. However, the reverse is true, and to me that isn't FOSS, but a commercialized model.
Websites running on Scala * Twitter * LinkedIn * Foursquare * Netflix * Tumblr * The Guardian * precog * Sony * AirBnB * Klout * Apple * Meetup.com * Remember the Milk * The Swiss bank UBS * The BBC's Linked Data Team * IGN * Janrain * Ask.com * AT&amp;T * Bloomberg * eBay * The Weather Channel * ValueClick * Xerox * Novell * Autodesk * Etsy What's your point? I'm sure every one of them has some PHP, Python, and Ruby running around somewhere too. They probably even have a ton of C# running their internal web applications. Do you even know how businesses or large scale applications work? I think you may not have any clue what you are talking about. ##Edit This has nothing to do with the post above and I was simply satisfying my own curiosity of how some of these use Scala, but I ran into this little bit I thought you would enjoy. &gt;Tumblr started as a fairly typical large LAMP application. The direction they are moving in now is towards a distributed services model built around Scala, HBase, Redis, Kafka, Finagle, and an intriguing cell based architecture for powering their Dashboard. Effort is now going into fixing short term problems in their PHP application, pulling things out, and doing it right using services. &gt;The theme at Tumblr is transition at massive scale. Transition from a LAMP stack to a somewhat bleeding edge stack. Transition from a small startup team to a fully armed and ready development team churning out new features and infrastructure. To help us understand how Tumblr is living this theme is startup veteran Blake Matheny, Distributed Systems Engineer at Tumblr. Here’s what Blake has to say about the House of Tumblr: http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html
I've always tried to adopt NetBeans but it just seems like everywhere I go is really big on Eclipse or a version of Eclipse like STS and just now IntelliJ is getting big.
Really guys? We're gonna do another installment in the weekly IDE wars and then follow it up with feeding a language troll? For fuck's sake. I come here to learn about java, to talk with people who are working on interesting projects. Not a pissing contest about subjective bullshit. I don't give a fuck if you use Eclipse or Netbeans or IntelliJ or motherfucking TextPad. If you're writing interesting code I want to see it. And if you like PHP - go fucking nuts. Who fucking cares. Now can we get back to talking about the Java *language*. Fuck. Doesn't someone have some homework we need to be doing for them? /rant
Zeringus u r right. I should have gone on to explain. I was in a good mood so i figured to b nice. But i have helped a bunch of friends and ppl. I usually teach them why not the how. But I didn't have the luxury. The &lt;&gt; are called generics google that to learn more. A node is like u said I defined a class with a data/value and a next node. A linkedlist u shoukd b able to google that. But it essentially is just contains one node called the 'head' and u can iterate through the nodeS. But that code literally took me 2 min to do even without an IDE.
You are correct that "essentially" you would have the same thing. Some of your confusion comes from not understanding the history. Firstly, abstract classes pre-date interfaces so at first that was all you had. As interfaces first came into the industry they were only used for cross-application (read that as mainly cross-language) communication and formed the contracts of those divisions. Principally in COM, DCOM, CORBA, etc. This meant that, at first, interfaces were not used as a design mechanism but as a generic IPC (inter-process communication) and RPC (remote procedure call). As things matured interfaces started getting used as design tools (beyond their other function). In traditional OO, without interfaces, an abstract class gave you your inheritance chain (thereby defining some of your public contract) but sometimes also gave you some of your default implementations (code sharing). The code sharing was a big plus and inheritance is nice for some things but the forced contract at times could be constraining. Especially in languages which did not support multiple-inheritance... when you have only one choice of your parent it's hard to be forced to chose one due to contract rather than for other reasons. Over time things moved to using interfaces more and more, lessening the need for abstract classes. More ways came into being to physically separate parts of systems (web services, etc) and interfaces were naturally used as the contract lingua franca. Which brings us to today: use interfaces for contract inheritance, but object inheritance for code sharing (abstract or otherwise) when needed. I'm sad (but proud) to say I'm old enough to have lived through the entire ordeal. :-) 
My point was that, /u/madfrand statement of &gt; You will find VERY few serious hobby projects, startups, or large applications running on PHP Is completely and utterly incorrect. I am aware that there are tons of large applications/businesses/startups/hobby sites that run on java. That was not the point I was trying to make. &gt; Do you even know how businesses or large scale applications work? I think you may not have any clue what you are talking about. Yes, i do. But it should be irrelevant, if you followed the thread here. It honestly seems like you didnt read the whole context.
&gt;My point was that, /u/madfrand statement of &gt;&gt;You will find VERY few serious hobby projects, startups, or large applications running on PHP &gt;Is completely and utterly incorrect. You understand that much of your list are none of these things, don't you? The large bulk of what you listed are simply web pages that happen to get a lot of hits and a few simple (yet large) eCommerce sites. Only "a small handful" of them are full blown applications and all of those were developed over a decade ago. It seems that you have helped to further strengthen the original point, no? &gt;Yes, i do. But it should be irrelevant, if you followed the thread here. It honestly seems like you didnt read the whole context. Oh, I read it all. Including several people's post histories.
Show us your best attempt and we'll help you. We won't be doing your homework for you.
I saw your downvote, waited a few minutes for a reply and it seems that you just ran away. Judging by where you started and where you are now, it seems that you have learned a lot about the industry outside your PHP bubble today. Congrats, this is a good thing. Now the next step is to go out there and pick up an random language and build a website in it. I suggest Python/Django or maybe even Scala/Play if you're feeling brave. But any of the other majors ones will do, the list is bigger now than it ever has been before. 
 public void drawBarGraph() { for(int row = 0 ; row &lt; numberA; row++){ System.out.print("*"); } System.out.println("Number of A's: "+getNumberA()) ; for (int row=0;row&lt;numberB;row++) { System.out.print("*"); } System.out.println("Number of B's: "+getNumberB()); for (int row=0;row&lt;numberC;row++) { System.out.print("*"); } System.out.println("Number of C's: "+getNumberC()); for (int row=0;row&lt;numberD;row++) { System.out.print("*"); } System.out.println("Number of D's: "+getNumberD()); for (int row=0;row&lt;numberF;row++) { System.out.print("*"); } System.out.println("Number of F's: "+getNumberF()); } 
No point in having a discussion with a person who thinks they are superior to everyone else on the planet. Waste of my time. Crazy how much of a superiority complex some of you java developers have.
Another approach is to use builders &amp; immutable objects. I'm not 100% sold on this yet, but having used this model recently, I'm finding it more and more useful.
Well, I'm not a Java developer I am a Software Developer and I work in Scala as of lately. I have also done real world work in Ruby, Python, Java, PHP, and C#. I am not a language snob, every one of them was created for a purpose. You have made it very clear through your posts you have spent a disproportional amount of your time working in PHP and are ignorant to the outside world. And you're right, I look down on anyone like you. I really don't care what language they work with.
IDEA CE is Apache 2.0 licensed. If you want to fork it, and build a competing Java IDE on its base that matches IDEA Ultimate (good luck with that), then there's nothing but time, skills, and motivation stopping you. Pretty damn nice of them, I'd say, not to mention gutsy. I appreciate that, along with the considerable taste and care they apply to their product. That's why I pay for my own UE license, even though 90% of my current work can be done just as easily with CE. No, they won't accept just any commit into their official source tree for IDEA CE. And yes, I'm sure that includes patches that duplicate Ultimate Edition functionality. How the hell does that make it not FOSS? By that reasoning, neither is gcc, nor Linux, nor GNU emacs - none of those will accept just any commit, either. 
Lombok has excellent Eclipse and IntelliJ support. Not sure what problems you're referring to with Lombok, but it's been a breeze to use in the 3 or 4 projects that I use it in on a daily basis. &gt;why not just use a different JVM language if verbosity is that much of a problem? Seems rather drastic. Lombok solves the problem elegantly without the host of problems involved with getting another language involved in with my projects. 
I'm having a hard time understanding the assignment. Do you have a link with a more detailed description? 
If this is a first, don't start with GWT. It's the best browser-based client-side technology I know, but you need to understand a lot of stuff about a lot of stuff before you could possibly make sense of what is really happening. Vaadin is even worse in that respect (and I personally don't like the way it's working, but that is beside the point). If I were you, I'd do some JSF with some REST for dynamic calls and learn how the browser's single threadedness impacts things before trying anything as ambitious as GWT. I spent countless hours teaching people about GWT and it was ridiculously hard. Learn from the ground up. 
It's not that they won't accept any commit. It is the reasoning behind not accepting those commits. Ie, making CE a competitor of UE.
There's essentially no runtime memory cost to extending a class or implementing an interface. Obviously if you extend a class your objects will have all the fields of that class so that takes memory, but presumably you're using those fields so that shouldn't be an issue. http://stackoverflow.com/questions/23948009/whats-the-size-cost-of-java-inheritance
Please repost at /r/techsupport.
These days you most likely create a REST backend (use any framework you like) and use any of the usual JS framework suspects for the client side. Note that you can well create a REST endpoint using JSF or even JSPs, but there are also libraries that will easily wrap your methods, doing JSON marshalling etc. on the fly.
GWT generates megabytes of javascript- hand written JS + HTML probably ends up being smaller. And it uses AJAX to load all data displayed in pages, and if you are not careful, that ends up being multiple AJAX calls per page, which is very sensitive to network latency and your server response times. And in general GWT is designed to build Single-page applications: http://en.wikipedia.org/wiki/Single-page_application So if you need a web SITE, i.e. multiple pages, that are searchable, load quick, faces the public, has to work on slow lines or be accessible from entire world and has limited interactivity, you are better with some other framework and less AJAX. If you need an APPLICATION that uses a browser as a thick-client, GWT is the right tool.
It's mature. You don't often hear much about mature projects, people usually don't consider them very sexy. Java isn't considered "sexy" yet people it use it just as much as ever. There was a talk about future of GWT and GWT being more relevant than ever because of GWT app cross-device cross-platform portability, but I cannot find it. I think original developers are back on it and the pace of development is getting faster. And in the talk they said that comparison between GWT and Dart is apples to oranges- they fill different niches. I don't know dart so I cannot comment on this. Also, I understood Google ad-sense is using GWT. I assume it's used for administration/backend, Google probably has something hand-crafted for displaying ads. This would mean GWT is going to be maintained in perpetuity, as ad-sense is way too mission critical for Google to mess it up. And then there is Vaadin Ltd which can probably take over GWT development even if Google fails it. I think as a framework, it has decent enough backing. --Coder
Ok so I don't know if it has the right output, you didn't provide enough code, but I'm going to assume it does. Do you see the large amount of repeated logic? for (int row = 0; row &lt; numberA; row++) { System.out.print("*"); } System.out.println("Number of A's: " + getNumberA()); Can you tell me how you would change your code so that you only have this block of code once? Also having the 5 methods getNumberA(), getNumberB()... is quite redundant and can be done with only one, unless I'm misunderstanding what they do, I think a parameter is what you want to condense them. There is one more optimization I can think of, but I'll need to see your updated code to explain it.
 public class gradeFreq { public static String stars = new String(""); public static int countStar(int num) { if(num!=0) { stars = stars + "*"; return countStar(num-1); } else { System.out.print(stars); stars = ""; return 0; } } public static void main(String[] args) { int a=3,b=8,c=12,d=3,f=1; int total = a+b+c+d+f; System.out.print("Total number grades = " + total + "\n" + "Graph showing number of each grade:\nA "); countStar(a); System.out.print(" " + a + "\nB "); countStar(b); System.out.print(" " + b + "\nC "); countStar(c); System.out.print(" " + c + "\nD "); countStar(d); System.out.print(" " + d + "\nF "); countStar(f); System.out.println(" " + f); } }
[Freemarker](http://freemarker.org) is a powerful alternative (that also supports tag libraries). JSF is a bad practice in my POV, because it tries to break the request-response scheme of the web. Good web applications are built by following the [ROCA style](http://roca-style.org).
The team I am working with all use eclipse in some form IE: JBoss dev studio. They all have issues WRT maven, SCM and oddly enough being the sole netbeans user who has declared 'I will not use eclipse' I receive all the questions :) Personally I do not like: # File system changes are not reflected, you have to refresh the project in eclipse for external changes to be picked up. # Maven always seems to be an issue when building. To be fair if I have to use eclipse I can, but frankly too much goes wrong, and it's not from inexperience on my part I believe, I have used it for 6+ years and I do ask other devs how I can optimize my usage of it.
I fail to see the connection between 'learn from the ground up' and then telling him to try JSF ? Agreed GWT is much too low level for a beginner.
I don't hate anything that I can get for free. Having said that, and to be constructive, almost all of your issues are solvable. Don't have time to go through all of them but:- * Always back up your eclipse program folder before installing a new plugin. Eclipse plugins aren't like the Apple App Store, anything could happen. Best backup before trying. Would also backup workspace and check your code in before you install too. * Run configurations remember your settings like JVMs etc. If you switch JVM in your workspace your config won't change it. How does it know that you want that changed for configurations too? I'd give it a break on this. Delete the configuration and re-apply. * Importing. Never had a problem with this. I use File|Import then General|Existing Projects into Workspace. Never had a problem with this although don't use it that much. I usually checkout a new copy from version control if I use a new workspace. Keeps everything segregated. * Not sure what the problem with class tabs is but if you're looking for Most Recently Used behaviour, see http://stackoverflow.com/questions/12578197/eclipse-tabs-repositionning . I agree that's annoying!! * Pasting code into Eclipse. CTRL-SHIFT-F. That should format the code to YOUR formatting standard. Not happy with that, go and edit your standard formatting or download the rules others have posted. Hope some of the above helps. I get annoyed with Eclipse too but I've learned to deal with the problems I face and have customised Eclipse to work for me. Especially loving Java templates for quickly typing out JMock syntaxes right now! Best of luck with your journey!
I like Eclipse but RAD? *Shudder*
GWT seems a good choice for what you mention. GWT has good support for REST, just don't use GWT-RPC but use RequestBuilder instead. The community seems active, there is version 3 around the corner, there is a port of Angular to GWT and there are several libraries built on top like GXT or Vaadin. Primefaces would also work but JSF in general does not integrate well with REST, it can be made to work tough but its not convenient. I went through this path and got to the conclusion that its better to just learn HTML/CSS/Js, because its not that hard and we end up hitting the limitations of these frameworks really soon. So Play with some frontend framework would be a good way to go.
I have used it since 2002. Back then I really liked, specially given that the alternatives were the old architecture model from Netbeans, that requiring mounting directories in the workpace. Or using the likes of Visual Cafe, JBuilder, ... The story with the metadata corruption might have been only related to the specific organization I used to work for. However it did happen quite often. After a while it became quite fun to see someone loudly complain about Eclipse, just to see the Eclipse advocate come by, messing with the metadata directory contents and leave with the remark "See it works now, nothing special". As for Maven, it irks me that while Netbeans and InteliJ are able to use maven without any extra effort. Eclipse requires the use of m2e plugins for its project cycle and good luck when a specific Maven plugin doesn't have a m2e correspondence. Or how Eclipse gets schizophrenic with Ant and Maven builds that generate Java code, while the other IDEs are perfectly happy with it.
Agreed. And on first load it will download a whole bunch of javascript so your first hit is always going to be incredibly slow over the internet. 
There are arguably better frameworks to build cross-platform internet apps like Twitter Bootstrap. I am a Java serverside guy but Twitter Bootstrap is amazingly easy to work with and I prefer that if i want to develop a quick internet facing application. You can see some of the beautifull themes : https://wrapbootstrap.com/
Not in every situation. Yes, as a rule for beginners, that's probably not too far from correct, but you cannot e.g. enforce a contract using an interface.
Retrofit.
Basically the main difference is that, with Java 8, abstract classes can contain state and interfaces can't. 
What do you mean?
Java should not get rid of primitives. It has been tested and reference types are much slower than primitive types. What we need is easier conversion between the primitive types and their respective reference types.
Some banks / credit cards. Sun always made a big deal out of when NASA used java, but that doesn't mean it ran in a normal VM. Probably not power systems. Probably not anything directly connected to critical medical devices.
No need to perform any tests to come to that conclusion! But yeah, take a look at project Valhalla, which was also mentioned in some questions. This is the direction java should be - and is likely to be - heading in wrt primitive/value types.
If you mean the language, dynamic typing. The JVM already supports it
In addition to multiline strings I'd love to have the safe navigation operator from Groovy.
I really like the cunning logo!
In no particular order: * Perspective transform in Java 2D. It's the only transform missing from that library. * The ability to target a platform and output what looks like a native app (to the user) with a hidden reduced JVM that only brings the elements needed for your specific code. I already use exe makers and such but I wish I could shrink the JVM based on my needs. Do I really need to send my 1MB app along with an 80MB JVM every time? I know they should just install Java but people these days don't seem to want to do that. * Pure and native Java support of all sorts of USB input devices (controllers running without external files). * The return of video performance gains while running in full screen exclusive mode. It used to be great but now I find it doesn't compare to running in an undecorated full screen window. Edit:typos
There's no information whatsoever to be found about the actual project. 
You're chronically delusional and this is misinformation.
You're right. I've already had a look at the source code but didn't realise that documentation is completely missing, so far...
Semantics are different, here's how I choose when designing Java code: Interface defines a contract with the outside world, "I provide the following properties, thus can be used in these cases" Abstract defines a contract within the class itself, "I provide an implementation for the following properties, thus fill/complete the class"
* Remove checked exception (it is proven to be a failure) * Value type * Jigsaw (hopefully no more delay)
If you want to get the job done with little frustration than stick with PrimeFaces. It is popular so if you have an issue you can find the answer. I think Play is kind of a dead end that is not used much by professional Devs. They switched to focus on Scala instead of Java. It is certainly good to evaluate all of your options though.
God, after writing python then going back to java I'm like fuck private variables and all these getters. You're public, you're public. Even though I just right click to get those methods, I despise their existence
I want java nine to write my code for me
Multiline strings Named parameter constructors Properties == used as equals()
Down-voted because I think that's the wrong way to approach the question, Interface and Abstract have different constraints -&gt; they support different designs. Ok, you can solve the question by trying constructs until your idea can fit. A better approach would be to understand each idioms they support and designing with one that helps. Else you're just trying different types of saws to hammer a nail. (hint, always pick the heavy one).
Elvis and Other Null-Safe Operators originally proposed in Project Coin: http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/000716.html Would love to do this: return person?.getName()?.getGivenName(); Additional discussion on [StackOverflow](http://stackoverflow.com/questions/4390141/java-operator-for-checking-null-what-is-it-not-ternary) edit: [Explanation of why it was not included in 7](https://blogs.oracle.com/darcy/entry/project_coin_final_five)
A unified type system does not mean getting rid of primitives. It only means that primitives should look like objects and not treated as a parallel type system.
That is a missconception. If you look how Scala handles it, you will see almost no difference to primitives because of compiler optimization.
Use Lombok. It fixes all of these issues where Sun/Oracle had dropped the ball.
10 other people have already given your answer. If they had not given those answers, I would not have given mine. I feel it's very important to know the actual constraints on each.
Fix type erasure. Leave out jigsaw.
Was going to say exactly the same.
What do you mean with flow? If you just want the stack trace that's very easy to obtain (e.g. in log4j the %throwable pattern will call printStackTrace internally). Apart from that I remember a simple logger implementation that would keep the last 10000 messages on debug level and basically defer debug logging until an error so that at least the last &lt;10000 debug messages on the path that lead to the error would be available.
&gt; reference types are much slower than primitive types two words: VALUE TYPES
From Java 8 difference between abstract class and interface has got blurred, as now interface can also contain method implementation in form of static and default methods. I have blogged about this important topic in my blog as well, http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html, you may find it interesting. 
Oh, yes, named parameters would be nice. And default values for parameters! That would get rid of all those overloaded convenience methods.
Yes, but that's too much work for a quick glance :-)
How about just a syntax for regexes?
Java 8 have covered this use case in a different way with the Optional type: return person.map(Person::getName).map(Name::getGivenName); http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html
Lombok, Lombok, Lombok. Make it part of the language finally, please. 
Having many getters and setters is a code smell, and trying to hide it with annotations or properties or whatever does not fix the underlying design problems. Sometimes you might be forced to use them due to a dependency to some legacy or poorly designed framework (e.g., JavaBeans), but that should not drive language design. You rarely see getters and setters in Java codebases that follow modern best practices. First, you should make all your classes immutable by default, establishing the state in the constructor. This means there will be no setters. Setters mean that your class is mutable, which in turn makes it very difficult to use it in a multithreaded environment etc. Having getters means that your class API consists of querying small pieces of internal state of the class. A well designed class should encapsulate some functionality, and the API should reflect that. I.e., the methods should consist of making the object carry out the functionality it is designed to do, not to read small bits of its internal state.
Try this link instead then: https://github.com/rocketscience-projects/javaslang/tree/javaslang-1.0.0 
That's helpful. Odd to see "map" there, but it works.
Safe navigation operator. It's just syntactic sugar, but I want it.
Don't know why this got downvoted without at least some argument against. Lombok is a great find and I use it in several projects.
Weld http://weld.cdi-spec.org/
Structs (Custom data structures) and support for custom operators for structs (and maybe class based 'structs' which we are forced to use for now). Seriously I hate using class based vectors and such, if I only could just type "vec3 v = v1 + v2;" in java... Edit: why would anyone downvote this? Please, tell me...
A bit extreme. Immutability should be favored, but this can't apply to *all* classes in any serious application without making the code ridiculous.
why? i've been a java developer for almost a decade, and i'm not sure i understand the issue with multiline strings.
can you explain named paramters - what they are, what issue they alleviate?
Like I said, it should be the default approach. It requires a different mind set than what many Java programmers were taught, but once you get out of the mutable-by-default mindset you quickly realize how much simpler and easier everything is when you can reason about immutable objects (and simplicity along with immutability often translates to better performance, not to mention fewer bugs and more correct code). Not everything can or needs to be immutable, but the vast majority of classes can be made immutable in real world applications.
then use the upvote button instead of writing a useless and distracting comment.
Either stop expanding the standard library or split it from the language definition. These two things should evolve separately. By splitting them, it becomes much easier to make breaking changes and removals from the standard library (which it desperately needs) without preventing people from moving up a major language version.
I know how reddit works, genius.
It's probably someone who doesn't use Lombok so he probably hates those of us that do and save ourselves hundreds of lines of code. Been using Lombok for 4 years now, refuse to work on a Java project if it's not included. It's as crucial for any Java project as the JDK itself.
How about immutable classes with public final attributes?
Because state should not be mutable in most cases,
that's a broad assertion. why should state not be mutable? that makes little sense to me. if an object represents the state of an application, or part of an application, and the application's state changes, then the object would need to change as well. to be clear, i'm asking for an *explanation* of your thoughts and ideas here, not a regurgitation of rules you follow.
For instance if a method takes three arguments of the same type but one of the last two are optional. Or just for clarity.
Hipster, I approve.
While OSGi can be a bitch, I'm not seeing what jigsaw contributes beyond what is already available, besides OSGi being a bitch.
is this something that varargs can be used for? public void do(String arg1, Object/int/String... args) { // something }
i'd love a 'C#'s var' equivalent
Those finals are also important, do that everyday.
* **var** although I know most people don't agree with me on this I just really think it makes for cleaner code to write var foo = new List&lt;String&gt;(); var bar = new HelloWorld(); over List&lt;String&gt; foo = new ArrayList&lt;&gt;(); HelloWorld bar = new HelloWorld(); * **null-coalescing operator** so instead of return (foo == null) ? "N/A" : foo I can just use return foo ?? "N/A" * **partial classes** another thing a lot of people don't agree with me on, but I think they are really useful * **properties!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!** show me one person who claims they prefer writing private String foo; public String getFoo() { return foo; } public void setFoo(String value) { this.foo = value; } over public String Foo { get; set; } and I'll show you a liar. edit: added some examples edit 2: * **Please, for the love of everything decent, please add empty catches** I know this is "bad code practice" but sometimes, for very specific situations, I really want to write try { // do something } catch { // do nothing } without having to have the completely unnecessary exception try { // do something } catch(Exception ex) { // do nothing } 
SQL, JQL, fragments of XML all become a lot easier. Even if it was just for within tests. They are such an easy syntactic feature the question should really be why not. executeQuery(""" select a.id from app a order by 1; """); 
But the cost/benefit ratio to add them is high. We didn't need underscore numbers in project coin. But they are nice to have and now we have them. No JVM or class file format changes needed. 
&gt; They're a new programmer and don't like typing I guess. Not sure what it has to do with typing. Care to expand on the issues?
&gt; The ability to target a platform and output what looks like a native app (to the user) with a hidden reduced JVM that only brings the elements needed for your specific code. I already use exe makers and such but I wish I could shrink the JVM based on my needs. Do I really need to send my 1MB app along with an 80MB JVM every time? I know they should just install Java but people these days don't seem to want to do that. I think the mentioned project jigsaw is about this. It should allow you to only include certain modules of the JVM.
Are you serious? Diving into this immediately. Thanks ;)
&gt; verified log4j and it doesn't have this feature. Log4J "has" the feature. You don't have to use the built in appenders and can [write your own](https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Appender.html) that does what you need. &gt; how to print the DEBUG messages of the other thread or all threads &gt; for that matter ThreadLocal. 
I don't understand what people find so terrible with checked exceptions. Is it out of your control? Yes? Its a checked exception and not handling it makes your software unstable in nature. Is it? No? Then make sure it isn't thrown in production (ie unit tests etc) and it is unchecked. 
I agree that immutability should be default. But I don't see the problem with getters. Look at Scala's case classes, is that a code smell? Sometimes you need classes with only state and no (or very little) behavior.
Mapping entities to a database in the Hibernate / JPA way is by it self a bad design. 
You have that in several other languages, such as Scala and Python.
What is partial classes?
I think we should get inspired from Scala's case classes rather than from C# when it comes to properties.
* Jigsaw * Value types and tuples * Reified generics
man you guys are serious
Don't really see how that's much of an issue, sure it's nice when your IDE doesn't have a separate representation of your project but as long as it's functionally seamless to use an existing maven/ant/gradle/sbt/whatever project I don't see how it's much of an issue.
Because littered SQL to update a column is good design? // Contrived example and schema with some obvious problems... But I'm illustrating a point for (Item item : retrievedItems) { Shelf shelf = item.getShelf(); int totalQuantity = shelf.getTotalQuantity(); shelf.setTotalQuantity(totalQuantity - 1); } Is so much worse than... // I don't even know how you retrieved these values unless you manually mapped them to a result set yourself // thus reinventing the wheel of an entity mapped model // -- of course, this could be done via a loop over a ResultSet, but this would get even uglier fast for (Item item : retrievedItems) { Query query = buildSQL("UPDATE shelf SET totalQuantity = totalQuantity - 1 WHERE id = ?"); query.setParameter(1, inventory.getShelf().getId()); } ---- Oh, wait, but what if you have multiple items that point to the same shelf? We're now sending a query to the database multiple times... So let's optimize this to reduce our trips to the database (which our entity mapped model gives us for free due to delayed flushing!). // Let's update this map of total quantities for each shelf and then update each shelf once... Map&lt;Shelf, Integer&gt; shelfQuantity = new HashMap&lt;&gt;(); for (Item item : retrievedItems) { Shelf shelf = item.getShelf(); Integer newTotal = shelfQuantity.get(shelf); newTotal = (newTotal != null) ? newTotal - 1 : shelfQuantity.getTotalQuantity() - 1; shelfQuantity.put(shelf, newTotal); } for (Entry&lt;Shelf, Integer&gt; pair : shelfQuantity.entrySet()) { Query query = buildSQL("UPDATE shelf SET totalQuantity = ? WHERE id = ?"); query.setParameter(1, pair.getValue()); query.setParameter(2, pair.getKey().getId()); } ---- You're right, that's so much better than a simple entity mapped model. 
It's awfully specific, but I'd like to see a cleaner way for adding an integer ID to an enumeration. I used to just use ordinal for such cases, but recently learned that's considered bad practice as ordering can screw everything up. Basically, if you want to make an enumeration with an integer ID attached to it, you have to do a lot of boilerplate stuff like this: public enum MyEnumeration { A(1), B(2), C(5), D(7); private final int id; MyEnumeration(int id){ this.id = id; } final static Map&lt;Integer, MyEnumeration&gt; enumById = new HashMap&lt;&gt;(); static { for(MyEnumeration me : MyEnumeration.values()) enumById.put(me.id, me); } public static getValueById(id){ return me.get(id); } } It'd be cool if IDs could be specified by a much shorter syntax. Perhaps something like this: public enum MyEnumeration { A : 1, B : 2, C : 5, D : 7; }
&gt; I know they should just install Java but people these days don't seem to want to do that People probably don't want ask toolbars and other random crapware on their machines, not to mention having "an update is available!" bullshit popping in their faces every 50 seconds.
ITT: Be more like c#. I really wish c# had better cross platform support, otherwise I'd move to that camp in a heartbeat.
ITT: Be more like c#. I really wish c# had better cross platform support, otherwise I'd move to that camp in a heartbeat.
Sorry, typing on their keyboard... sb.append(...)
Who the fuck would down vote that comment?
Have you seen Slick?
Yes, case classes are code smell in many instances.
No, its not a broad assertion. Having immutable state allows for much easier to test code, less issues in multithreaded systems, improved ability to scale. There are cases for mutable state, but I rarely use it anymore. The best example is Java's String class. Works great, is immutable.
Because those nice to have features take time away from bigger issues. Going back to Java projects from Scala makes me a little frustrated, and I'm always glad to get back to Scala projects.
Because I clearly think it adds to the discussion, unlike your meta comments, if you don't think I added to the discussion use the down vote :)
C and C++. http://www.youtube.com/watch?v=3SdSKZFoUa8
I have no social filters and have opinions, but rarely hold a grudge.
Thanks! I've used a compare &amp; contrast table format a few more times in the book, whenever it made sense. Do let me know what you think of the rest of the book.
Light-grey on white background? Sorry, not going to read that
Though plenty of the ground based systems are Java.
Why write it for 2.7?
Rich Hickey [discusses](http://clojure.org/state) the idea of immutable state for Clojure. Essentially, you treat the entity as an immutable snapshot, a value representing of one moment of history. Changing the entity means creating an entirely new state. This has the benefit that all threads in the system retain indepedent views of the entity's history and unlike mutable state does not have to be synchronized to maintain proper consensus.
I mention this in the book: &gt; Since 2.x is still the most widely used version of Python, this book will cover Python 2.x features and syntax, calling out any differences with 3.x from time to time.
Thank you! :) How advanced would you say are the contents? I mean, I just clicked on the Hello World portion and I'm not sure it's not aimed more towards beginners. Or should I approach this as more of a book of analogies in a sense "this is what you do in java, this is how it's done in python"?
The book assumes that you are a Java developer and then gives you a good-enough overview of the Python language syntax, tools &amp; library ecosystem so that you can get started writing Python code. It'll not make you a Python expert but my aim is that it'll accelerate your ramp-up phase to learning Python.
&gt; Or should I approach this as more of a book of analogies in a sense "this is what you do in java, this is how it's done in python"? I do use this pattern to explain several concepts, language constructs and tools. But if you are looking at a more specific "this is how I sort a list in Python vs Java", then perhaps http://rosettacode.org/ would be useful?
1. Learn to crawl - the very basics of Java - Classes, Objects, Language, Inheritance, Conditional statements and much more 2. Learn to walk - intermediate Java - Threads, concurrence, GUI 3. Learn to run - advanced Java - frameworks and more Once you are through these steps and also through countless hours of practice and despair, you can think about creating games like notch. **But seriously:** take a look at the /r/Javahelp wiki as there are plenty tutorial resources listed. A good starter tutorial is [Java for Complete Beginners](https://www.udemy.com/java-tutorial) by John Purcell, free on Udemy.com Also, you should take a look on [Derek Banas' Youtube channels](https://www.youtube.com/user/derekbanas). He starts also from very low and reaches quite high levels. Never forget the [Oracle Java Tutorials](http://docs.oracle.com/javase/tutorial/) and learn to use the **Oracle Java documentation**. Apart from that, Google needs to become your new very best friend. 
Woops you are right that this is too complicated. This is just the first example of encapsulation that came to mind.
This is great! Poll is good enough for my needs, but I'll give the second option a chance too. Thank you so much!
I didn't knew about Spring boot. Thank you for the heads up!
I find that lombok is pretty transparent in it's code generation. It's doing the same thing that the IDE would, just in a way that is documented in the code and makes the code more expressive of my intent.
I am a big fan of TestPaymentServiceImpl so when I ctrl-shift-T and type "Pay" in Eclipse all the JUnit tests don't clutter the results.
JEP: sugarized Pattern.compile Pattern p = /\da*b/;
Thank you all for your answers ! I think that JSF will do the job (again). Now I'm hesitating on the stack to use with JSF : - Server : JBOSS, GlassFish, Tomcat, GoogleAppEngine ? (Already tried GAE, it is nice, free and provide a lot of stuff but also a lot of constraints) - IDE : Eclipse or NetBeans ? (Preferably NetBeans for better JSF integration, but Eclipse for GAE plugin). - ORM : Hibernate or something else for NoSQL like Objectify for Google Data Store (I want to use MongoDB or something similar to learn new stuff). - WebServices : JAX-RS or something else ? (I want preferably to have something like a Hybrid Bean, which can be exposed in a webservice and also working normally in the code). If I can add something else (injection or I don't know which magical stuff we can do these days), please tell me. I also maybe want to use EJB (because of a periodic job that my app will need in the background), so am I constrained with JBoss and Glassfish for this ? I'm so lost with ALL those technologies.... too much choice. Thanks for you help !
thanks OP.. just when i was going to pick up a python book. Will give it a read and post back feedback
&gt;You develop with Java. You are a java developer. Don't be asinine. I develop with Scala currently. Before this I was developing in Ruby. I have not touched a line of Java in probably 2yrs. And if my next project required me to have a small idle memory footprint or needed to be deployed on a large number of user's servers (such as myphpadmin or WordPress), then I would develop in PHP. Or if I had no restrictions and no hard requirements, I would probably build it in Node necause i think it's interesting. Which is sort of the same way I found myself in Scala. Every lanaguge has a purpose and there is a right tool for every job. 
You are also a scala developer, and a ruby developer. Stop being so dense. &gt; Every lanaguge has a purpose and there is a right tool for every job. And stop repeating yourself. Saying that doesn't make you a genius. We all know this.
I think default methods are still very different from methods in an abstract classes. They don't have access to any state. interface Addable&lt;T&gt; { void add(T t); default void addAll(Collection&lt;T&gt; ts) { ts.forEach(this::add); } } addAll isn't making any assumptions about the implementation. It's only able to use public methods of the interface. It's just makes writing convenience methods a lot easier.
Nope, I'm just a Software Developer. I can develop in anything. Programming is just programming, any software developer should be able to sit down with any normal language and be productive in at most a couple days. Though, I admit Scala took me a couple months before I felt comfortable, but it's quite a bit different than everything else.
Lombok is great. It would just be nice to have this common sense capability built into the language.
JPA dominates complex web applications and relies on getters and setter. JavaBeans also require them. What is your alternative? I have not seen anything that works particularly well on a complex large scale web application.
I would recommend Netbeans (The PrimeFaces team does too). If you want to use EJB you could use TomEE but Glassfish would work fine too. Hibernate dominates the ORM field so it is your best bet. You can do Injection with CDI. It is included in JBOSS, Glassfish and TomEE. You can also just add the weld Jar file to standard tomcat.
Thank you for making this.
rofl. Finally realize you were wrong?
I honestly haven't worked much with Scala, though I'm familiar with functional programming. I watched the Slick intro video on their website and it looks pretty neat, but there's still problems with a fully immutable model when talking about database mapped objects. For example: Let's say you have two entities which contain a mapping to the same object. Let's go with a non-ORM approach which handles mapping the ResultSet to an entity for you and you're required to invoke an update query manually whenever you change an object. e.g. Foo { Bizz bizz; } Bar { Bizz bizz; } You read in both Foo and Bar and they both contain a reference to the same 'bizz' record. Let's say you modify the 'bizz' object on the Foo record. In an immutable model, you get a new 'bizz' record back and have to inform the database of the update (via some mechanism). Later, you're working with the Bar object which was already read in and populated. Your 'bizz' object is the previous state rather than the new state... JPA will guarantee this bizz object is the same and, thus, has already been mutated. In an immutable model, your prior update isn't going to be seen unless you re-query that object. I understand the power of immutable objects when you're dealing with non-persisted entities (I've used this pattern myself when dealing with non-persisted objects in complicated code where mutable state would've made my life hell, but even that code also had objects with mutable state where it made sense). My point is there has to be a trade-off. You can't broadly say immutability is always better anymore than you can say everything should be mutable. Look at the problem and figure it out the best approach to make the algorithm work.
Only thing I'd suggest is to have some form of side headings with the table. I could guess what the individual cells mean but that shouldn't be needed.
If this were c++ I would use a double reference to an immutable state. Record&amp;&amp; so the first reference points to a entity reference in your orm layer. That points to the immutable object. If it is updated, then a new state is created and a pointer swap is performed, replacing the old state with the new one, however Java doesn't support double references outside of the gc. So this can't be done cleanly. 
[Professional Java for Web Applications](http://www.amazon.ca/Professional-Java-Applications-Nicholas-Williams/dp/1118656466/ref=sr_1_1?ie=UTF8&amp;qid=1413583905&amp;sr=8-1&amp;keywords=professional+java+for+web+applications). I've read that book cover to cover a few times and it's phenomenal for really understanding Spring in the context of real world Applications (You build a customer support application). They cover core Spring, Spring MVC, Spring Security and Spring Data (and hibernate). The [spring docs](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/) are great too, but they are extremely verbose (even for documentation) and you'll have a hard time getting up and running as fast as possible with them. But, they are perfect for checking up on little details later on.
This is awesome! Thank you. Is there a pdf version? Because I know there will come a day when I hit that link and I get a page not found. Happens to a lot of good stuff in my bookmarks :(
but google is my best friend :(
Thanks a lot for the information. I'll follow that guide later on today and see how it turns out for me.
String is exactly an example that shows immutability is bad in many common situations. If you have a String and want to change a single character then you have to create a whole new String object and take time to copy the chars across, before gc'ing the old String. String is a great representation of characters that cannot change. As a representation of the very common problem of changing sets of characters it is horrible preciesly due to its immutability. Hence the extra helper classes it needs to be useful: StringBuffer/StringBuilder; and the built in compiler optimizations added for "this" + "that" + "something".
Thank you! I have to jump into Python from time-to-time and it always takes me some time to get up to speed, since I don't write it in it regularly.
sorry, i'd have to disagree. first the OP needs to learn how to program (any language, java is as good as any, but others may be a bit simpler to start with, such as python). then, after a decent grasp of programming concepts is achieved, learn few languages (java can be one of them, but there are many others around). then learn about 3d math (and from there 3d graphics). then .... try to make a game (i'd start with simple pong at the beginning, just 2d, no fuss, then maybe tetris, then ... whatever your heart desires). 
I very much enjoyed Spring MVC Beginner's Guide http://www.amazon.ca/gp/aw/d/B00LB6DIVK/ref=mp_s_a_1_1?qid=1413590399&amp;sr=8-1 Not quite head first-y (I.e. not the same humor) but very beginner friendly and gets you off the ground quickly.
But wait... do you know why Eclipse was able to run it right off the bat with no additional steps required?
Caucho's CanDI, associated with the Resin app server
Great idea! I'll do this in the next revision to the book.
This is essentially another CDI implementation...
&gt; Teaching it to newcomers seems counterproductive. I agree. But on the other hand, RHEL 7 which was released just a few months ago, ships with Python 2.7. I imagine a large proportion of my audience is enterprise Java developers. It would be disappointing to prototype something on Python 3.0 and then find out that you can't deploy it in production :-( &gt; It's very well formatted and the parts I've read so far are concise and cleanly written. Thank you!
Thanks. Looking forward to your feedback!
Eclipse apparently knows how to launch an applet container.
In other words, a browser applet container has a "main" method which will call the applet init, start, paint functions. If you run an applet class in net beans as an application, it will look for the main method. When you run it in eclipse,I suspect it launches the applet viewer (which acts as the container).
First they describe a horrid practice in Java, and then they proudly proclaim that they're doing it themselves? WTF? If an interface will have a reasonable default implementation that will be used in 99% of cases, it should probably be a concrete class, not an interface. “Code to the interface” is an abominable perversion of the language's design and capabilities. Sometimes `Impl`s are unavoidable, but they often aren't, so avoid them. If you have an interface and an abstract class implementing it, and 99% of implementations of that interface will extend that abstract class, you are doing it wrong. Stop that. Either have just the abstract class, or use Java 8 interface default methods.
It helps if you require all projects to have: &lt;jsp-config&gt; &lt;jsp-property-group&gt; &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt; &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt; &lt;/jsp-property-group&gt; &lt;/jsp-config&gt;
Thanks smadge, this is valid and very important point , and this is one reason why you still use abstract class. 
I don't really see much disagreement in your comment besides the fact that you are language agnostic. Obviously, you have missed two points here: 1. Op clearly stated that they want to learn **Java**. 2. Op posted in **/r/Java** which is another indication that the whole topic is about **Java**.
Google easily becomes best friends with people... (seems to be a fickle friend)...
I do much the same, but I've gotten away from the \*Impl suffix. Primarily because I have two different categories of concrete classes; if there's only one reasonable implementation, it's named Default\* (and likely final). If it's more or less complete but subclassing is not unreasonable, it's named Base\*. I've come to view \*Impl as the flip side of naming all interfaces I\*; it adds nothing to the description of the type, but merely serves to disambiguate the name. May as well name all interfaces \*Contract and not use prefixes/suffixes on the classes. I'm also partial to pluralizing a class name for associated utilities instead of the \*Utils suffix. Have to cut down on Java's verbose tendencies somewhere. And I totally agree that the tests should be named after the concrete class, not the interface. Excepting Java 8 interface default methods I suppose.... I guess everyone who named their tests after the interface will have to rename the existing tests, or add three more words to the new tests - \*DefaultInterfaceMethods\* - hehehe;
Quite hard to acctually see the text, maybe try something else than grey on white.
&gt; If you have an interface and an abstract class implementing it, and 99% of implementations of that interface will extend that abstract class, you are doing it wrong. Stop that. Either have just the abstract class, or use Java 8 interface default methods. Likely it will be 3 years after WebSphere gets updated to run on Java 8 before I can use default interface methods; until then I am stuck with not even having the diamond operator, try-with-resources, or multi-exception catch blocks. So what do you do with that one case where you need something different, but you have to pass the instance to a 3rd party library that only takes the abstract class?
&gt; First they describe a horrid practice in Java Not sure what you mean. There was no judgement in that practice, just a bit of a humourous description of the status quo. There are reasons why things have evolved this way &gt; “Code to the interface” is an abominable perversion of the language's design and capabilities That's your opinion. As stated in the article, other languages have much cleaner separations of specs and implementation. You shouldn't drive your application design in a way just to avoid any "abominable" `*Impl` suffixes based on the mere fact that you find them "abominable". Cleanly separating specification and implementation is often a very good practice in application (and most importantly in API) design &gt; and 99% of implementations of that interface will extend that abstract class, you are doing it wrong People are always *"doing it wrong"* in the eyes of *some* people, but rarely are claims of *"doing it wrong"* accompanied by actual arguments or proof. Publishing API through abstract classes, which can contain state, and whose "implementations" can only implement a single contract, has proven to be very limiting from an API evolution perspective. The JDK developers have never pursued this practice, luckily for the rest of us. Of course, the question here is if we're talking about a dog/cat/petshop application, a "real world" application, or a public API. Maybe, you could show the superiority of contract-by-abstract-class via concrete examples? The article listed these as examples for contract-by-interfaces: - Collections - Streams - JDBC - DOM
&gt; it's named Default* (and likely final) That's interesting, so "default" really means "default-and-complete" in your case. I like the fact that (by coincidence) the `Default*` as described in the article semantically matches `default` methods in Java 8 interfaces - [where `final` has no place...](http://stackoverflow.com/q/23453287/521799) &gt; I've come to view *Impl as the flip side of naming all interfaces I* That's true. Unfortunately, there's no "flag" as in Ada / PL/SQL to say that this part is the specs (interface), and that part is the body (class), allowing for two objects with a single name.
&gt; Unfortunately, there's no "flag" as in Ada / PL/SQL to say that this part is the specs (interface), and that part is the body (class), allowing for two objects with a single name. You can, sorta; put all classes in a subpackage named 'impl'; but this is so ugly I don't like admitting that I once considered it.... import com.pany.project.module.component.service.AccountService; .... AccountService accountService = new com.pany.project.module.component.service.impl.AccountService();
You need to provide more information about your world and turtle classes. They are from a third-party (course specific) library, so it's difficult to really say from where the problem originates. **EDIT:** One more thing: This post is better suited for /r/Javahelp.
https://tapestry.apache.org/ioc.html http://wiki.apache.org/tapestry/Tapestry5HowToIocOnly http://tapestryjava.blogspot.fr/search?q=guice 
May be my explanation is not clear. Added an example in the question and I hope now it is clear. Log4j has the feature to implement custom filter and achieve my requirement. But the question was for built-in feature in any open source applications. How ThreadLocal can be used as a trigger to print DEBUG messages of other threads? Can you elaborate?
It is broken as far as I know. A recognized and not yet fixed bug with no priority and yes it is a bottleneck if 1000+ files get compiled everytime i hit build button instead of just 5 or even 1.
Thanks to your information, I created a Tapestry 5 example: https://github.com/vibe-project/vibe-examples/commit/086bb4490014cf6713f3ffc28a1010e08915bfe4
* It's a bitch when you use it with lambda. * It will mess up your API. (See JDBC for example) * If you code without knowing the critical part of the program (which should be put inside try-catch block) then you're doing it wrong. Checked exception don't give any benefits here. 
Google around for 'smart logging' - I remember someone has already coded this up.
The append method of the appender will receive LoggingEvent objects (including debug messages) from all threads. The ThreadLocal can buffer messages by thread, if you want to keep them separate.
Thanks, done: https://github.com/vibe-project/vibe-examples/commit/26c191d8efd27a8db6f302a156da238f0bec2f91
Watson.
I know, it doesn't work very well this way...
I think, from a design perspective, its a great example. You're also the first to mention reuse (capability of abstract class). And you describe the situation where the inner working of the server code (it could be in C++) is not defined by the client, for which there are a number of design patterns: Adapter, Facade, Bridge, Decorator. See http://c2.com/cgi/wiki?HandleBodyPattern
[here](http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx). The new (open sourced under Apache 2.0) ASP.Net (reworked from scratch to decouple from Windows/IIS) will be officially guaranteed to work under non-Windows platforms. The C# compiler has also been reworked and open sourced under Apache 2.0, and has been demonstrated to work on Linux just fine. That said, in the arena of mobile, C# already has way better cross-platform support than java, and really good tooling where java is totally lacking.
Depending on the project this might introduce major performance problems. Generating a log message can be mildly expensive e.g. if the objects have complicated toString methods that are invoked. Secondly, logging is inherently a synchronised object, each caller to the log framework needs brief but exclusive access to the log data stream so that log messages do not arrive at the same time &amp; get jumbled. If you have a heavily threaded system e.g. a busy web server then this can create a lot of unnecessary object locking where each thread is constantly trying to take ownership of the lock. This is why a lot of projects wrap log debug/trace messages in something like: if(logger.isTraceEnabled()) { logger.trace(complicatedObject.toString()) } As with this form the lock is only obtained when TRACE logging is active which is normally not the case in a production environment. This doesn't affect all projects and it depends on how they've done their logging. But it is something for you to keep an eye on.
Let me introduce you to neat little thing called XPath: http://docs.oracle.com/javase/7/docs/api/javax/xml/xpath/package-summary.html http://www.w3.org/TR/xpath/ Makes hunting for stuff in XML worlds easier.
Bad example, since that will result in additional nodes. Appending 3 text entities will also confuse someone new to XML. ;)
&gt;Hello? I'm saying the people sending you XML will do this with no advance warning. Well Met! If you regex against &lt;&gt; you don't need to worry about encoded entities. Even if it makes us cringe.
This is where import aliasing (or similar feature) is really nice. Groovy: import com.pany.project.module.component.service.impl.AccountService as AccountServiceImpl; accountService = new AccountServiceImpl(); Scala: import com.pany.project.module.component.service.impl val accountService = new impl.AccountService 
yes, that is the problem. all my functions work by array, can i do a workaround by making it a dinamic array? i only made it static because i was getting an error.. 
an ArrayList is a dynamically sized array. Arrays you cannot be resized, you have to make a new array if you want a different size. But no, you'll just have to make sure you fill up your array all the way. 
Isn't this the same exact thing as http://maven.apache.org/maven-release/maven-release-plugin/update-versions-mojo.html ?
Yeah, its a bitch to work with interfaces that has the possibility of failing. But such is the nature of filesystem's, network streams etc. Should we instead ignore them and pray the user doesn't encounter them? No. If you don't want to use checked exceptions where they are due, you don't have to. But you are literally making the explicit decision not to handle a scenario you know could occur and are inheritly making your application less stable. That, or you are handling all failure With a blanket catch, which usually doesn't solve the problem and tends to leave the application quietly failing with a generic error message and a meaningless stack trace for the user to look at. Pointing out failed applications of checked exceptions doesn't help your argument. I could find tons of terrible APIs and attribute that to a number of different things. You're last statement makes no sense IMO. Checked exceptions are a form of self documenting code. Its a means for ensuring all possible scenarios are handled. If your making an api, it is _very_ important to use checked exceptions. The reason being "safe" code is not compatible with "unsafe code." In the sense that an application which uses unsafe exception handling can leak their "checked" exceptions through causing unexpected crashes in the host program.
Spring is probably the most commonly used java web framework, and is definitely worth learning. That being said, I've never enjoyed working with it, and you won't want to marry yourself to one framework - I would recommend sampling a bit of each, then when it comes time to find a career, go with the job that you hate the least.
I work in a java shop with dozens of other java devs. Everyone is strongly encouraged to know basic Spring dependency injection, but outside of that-- Spring MVC, Spring Data, Spring Boot, Spring Integration-- it's up to the developer to choose what they think is best. Personally, I wouldn't write an app without Spring dependency injection, and after using web frameworks Spring MVC is a breath of fresh air. It's not nearly as invasive as Tapestry or JSF. Spring Integration has also grown on me. However, Spring Data seems too 'magical' for my tastes and I'm not a fan of annotation-based configuration. These are just my opinions. 
arrays
Dear god, multiplying two numbers stored as human legible strings into a string result would be so slow. Why not just use an array of ints or bytes even 
Try to avoid nulls in arrays/lists unless it makes actual sense for the application. Use lists ALWAYS instead of arrays unless you have good reason e.g. you know the size will never ever change. Arrays are also useful if memory is tight or you are trying to make something run very fast. Most of the time this isn't a concern. Pretty much all of your problems are from this, arrays are harder to work with and easier to make a mistake on. An ArrayList would have had none of these issues. All of your methods are public; that's bad. Try to only expose methods that make sense for the object. Doesn't really matter much here but it's good practice. 
Java is a string-based language? Are you high?
Why on Earth would you *want* to?
Of all the Java frameworks out there, Spring is probably the one that's been relevant the longest and still continues to innovate. They practically invented inversion of control (dependency injection). Absolutely, from a career perspective as well as a rapid development perspective, it is worth learning. You can take as much of it (whole stack) or as little (just Boot) as you like in a project. They also don't try to take over your whole environment but work to complement standard technologies (JPA, JMS, JDBC, etc, etc). 
Spring Data is great for data repositories, worth checking out further. Cuts down on so much boilerplate BS when working with stuff like JPA. 
+1 for dropwizard.
Jersey, specifically, is pretty slick. 
Spring boot is much nicer, IMO, than dropwizard. Same idea, but with spring boot you can get it to get out of your way quickly if you need to do something differently.
Unless you are just defining a bean/entity in which there is no internal state per se. 
Even our projects have this conditional check. I missed it completely, thanks for pointing it out.
Is speed really the most important metric in CSV parsing? I'd be much more interested in how well each CSV parser can handle malformed and odd edge cases that most CSV parsers run into. I'd happily trade parsing time for a parser that was more likely to correctly parse a weird input. 
Just be glad you're in java and not C :D
JAX-RS is a also perfectly acceptable option, especially if you pull in spring-data-jpa to handle the boilerplate to work with your JPA entities.
Spring and Java in general lend themselves very well to enterprise development because strong typing and uniform standards make for easier maintenance. I've used Spring on at least a dozen successful web projects. It's perfectly usable for a small project as well, but something like node (or Rails or I'd go with Python+Flask personally) is a lot quicker to bootstrap if you're a one-man band. Spring Boot is pretty slick though.
You didn't provide the entire context for your code, so there may be details I'm missing, but is there any reason you can't just return the a new object via it's constructor using the original object's fields as parameters? Seems to be the easiest way to do a very general "clone" method, IMO.
spring-data-jpa even has a portable CDI extension, if you're a Java EE guy like myself it's still a great tool to use, it eliminates a ludicrous amount of boilerplate when using JPA.
How does the decompiler compare to [JD](http://jd.benow.ca/)?
I've used it... I just don't see what it does better than Eclipse other than having less bloat
I use it a lot, but you gotta be careful. Dynamic queries generated at runtime can cause a lot of trouble later on. Fortunately, Spring Data allows you to use an ORM like Hibernate as well.
For working as a Java developer Spring is essential for many jobs. Lot for all as in many places EJB3 is used as an alternative, but Spring still seems to be the dominant framework. It also depends on where you live or where you are planning on working. In many parts of the world you cannot start a career as a Node.js developer yet. I like node and I think it's ideally suited for building the backend of web applications, in the Java world I prefer to build everything around Spring. So to answer your question, if you plan on becoming a Java Developer then really learning Spring is important, its still probably the number one framework on the Java space.
Set it to C:\Program Files\Java\jdk1.8.0_25\bin
Same error. Why is it that it's telling me it's not set at all instead of an invalid path? 
Do you have Java Dev Kit (JDK and not JRE) installed? If you have it installed, where? Set JAVA_HOME to that location. If not, you'll need to download and install one. Then set JAVA_HOME to that location.
http://zeroturnaround.com/rebellabs/the-2014-decision-makers-guide-to-java-web-frameworks/ They also have a part 2 with use case scenarios for different applications.
I have jdk1.8.0_25 in the location specified above.
Hmm, ive had a look at dependency injection with Spring, im a new developer(only 1 y, 2 months) into programming. And i newer quite understood what it was used for, where do you use it ? and to which extend? i thouth it was for testing purposes? i thouth it was hard for other programmers to find out where an object was created if it was just a single line somewhere being Spring initalizeing something, it felt like breaking architecture... 
+1 for not checking binary files / dependency jars into git.
I worked very long with Java and used dozens of different frameworks. I don't really like Spring. If I build an application on my own I don't use it. As I often work in teams I often do use Spring. Most projects I come across that use Spring, someone convinced the team to use Spring without proper knowledge. This often leads to slower development as there are multiple xml files with Spring configuration. Terrible misuse. I like Google Guice more. Using the Spring annotation is also better but I haven't seen it in use yet. Most used argument for using Spring is also not a correct argument, I always hear people say that u you should use Spring to avoid vendor lock-in but when you use Spring you can not switch to something else as you are locked to Spring.
Not to mention that you have a good and solid upward upgrade path if your Spring boot app grows out of its kiddie shoes..
Tapestry is pretty invasive, as you say, but their IoC container is pretty damned sweet. As is Guice, but I don't have as much experience with that. Given a choice, I'd choose the above two over Spring any day.
I also worked with picocontainer and it was released to offer IoC without the weight of a large framework like spring. It did not predate spring IoC.
When I took a look at Spring Data repositories, it used to parse interface method names and generate implementations based on it e.g. from: List&lt;Order&gt; getOrdersByCustomerAndDate(Customer customer, Date date) Yeah, I don't want to touch this.
Personally, I don't hate Eclipse. It was the first thing I worked with after a decade of (work-related) Visual Basic 6. Then I started with Java, so I got Eclipse. Worked with it for at least a year, the experience wasn't bad (though I *and* a colleague had a nasty Eclipse bug that wasn't fixed at least half a year, no reinstall helped, and I had the same bug at home on a completely different machine; no one on the Internet seemed to have the same problem, though). But then I invested a day to try out IntelliJ IDEA. I never looked back, I am in a different world now. Apart from the hundreds of things that are better about it (for a Java programmer), it is also a lot easier on the eyes (for a DTP person / typographer). But Eclipse was and is made not specifically for Java but for many languages, it is very modular and has a *lot* of plugins available. I don't hate it, but I guess some of those who do have their reasons. But like all things Internet, not everybody who claims to have an opinion actually has one.
Personally I don't like it just because I never really got the hang of using it to make an executable jar, or packaging libraries into it. None of the guides on how to do this were straightforward enough. I realize this is a stupid reason and I just don't know what I'm doing, but it's still why I don't like it and found it easier to just switch to Netbeans.
I don't hate it, but it does have issues. On a clean install, on a clean OS, it still hangs quite often. That's ridiculous. 
No one can tell you what IntelliJ is, you just have to experience it for yourself.
Making an executable jar is really easy though: Just go into the export dialog and choose "runnable jar". Use the following dialog's defaults (mostly) and you're done.
yes, I was just lasy in the begining of the class and now i had to build everything arround it... the methods are public because I call them from the other classes... Still, I have much "work ethic" to gain...
Similar to a recent post here: http://redd.it/2jcets
Your theory about how the "developers think their way is the correct way" is contradicted by the experience at my company. People we hire are generally eclipse users because many places are too cheap to buy intellij licenses. Some of them have used eclipse for years. Almost all of then eventually switch over to intellij. Usually because eclipse had an update that broke everything for them or the maven integration in eclipse is rather poor. Eclipse has a lot of weird user experience things going on. The "perspectives" thing is more a hassle than a convenience. The fact you have to go to the "help" menu to update or install plugins is another head-scratcher. Eclipse is pretty slow to add good new features. In intellij 14 they are adding auto-detection of code that could throw null pointer exceptions - that's pretty cool. I don't recall ever using eclipse and saying "oh, that's awesome!" But in intellij that happens pretty regularly.
As to why the eclipse community doesn't fix things, I think in part its because eclipse is broken by design. There isn't an overarching body that can make things consistent - its a hodge podge cluster of plugins written by different groups. It was designed to be some kind of global ide thing. Also... As an individual developer which is a better use of your time - working on making a tool you think sucks better or switching to a better tool you think sucks less? 
Personally it's my favourite Java IDE. This may be because it was the main one I used at University and then for the first 3 years of work. I tried switching to IntelliJ for a couple of weeks but I think it annoyed me because of the muscle memory build up from years of Eclispe shortcuts. Also, Eclipse is leaps and bounds ahead of JDeveloper in terms of stability/usability.
Looks good, but I'm getting a lot of nop //actually an unimplement opcode, please contact Konloch and message boxes popping up saying ReferenceError: "importPackage" is not defined in &lt;eval&gt; at line number 2 for every class file I open.
But Avalon (specification for Excalibur) is older...
I'm pretty new to Java. I hate Eclipse because I tried to do the tutorial, only to find out that I need to install some kind of package (no instructions on what I need or how to do it, or even a mention that I'm missing it -- I just get an error message when I try to compile the code that I copied from the tutorial.
I'm not crazy about eclipse but I do think it's one of if the the best IDE for Java. It's the steep learning curve that can put people off, but when I see power users on it, it's makes everything really fast. 
I think that's going to take a commit log and comparison with Rod Johnson's initial publication.
I started using eclipse more than 10 years ago and still do to this day. At some point I bought the ultimate version of idea and tried it for a few weeks, but it just didn't do it for me. Its probably because I know most of eclipse inside out and what doesn't suit me I can configure so that it acts like I want it. But it blows my mind how fanatic people can get about a product. Just use whatever you like as long as it does the job well for you. And keep your opinion for yourself. Thank you. It probably is just the nature of small minded people to treat everything like a religion... IOS, android, windows, osx, Linux, I don't fucking care. /rantover
I tried eclipse several times. Each time my initial thought was - "Why did I abandon it? It looks to be a good tool". After that I start to program and realize that I need some additional things, like maven integration and other stuff which I don't really remember. And for sure - there are some plugins to satisfy my needs. And that's the point when my problems usually starts. This doesn't work, that is not compatible and another thing causes some crashes. After some struggling I abandon it in favour of Netbeans. Again. Probably the situation has changed - I haven't been working in eclipse or netbeans for 3-4 years(Intellij Idea the culprit of that), but if I need to use some free tool again I would first try netbeans and only then eclipse.
You can set intelliJ to use Eclipse shortcuts. 
I don't hate, but Eclipse always looked to me like a end-all-be-all ultra-editor framework without much UX thought put to it. Sure the features are there (or the API to create new features), but it felt clunky, over-engineered, not pleasing and (I've used pre-3.x mostly) very, VERY buggy. Simple problems such as a lost internet connection during an update of a plugin could render the whole thing unusable. About that time I've started using IntelliJ IDEA which in comparison was faster, aesthetically pleasing, feature-packed and simpler on the surface. To be fair, I imagine Eclipse has evolved and matured a lot, but it's (unfortunately) a prejudice that sticks. Much like Java, sadly. When people used Java in early days they've memorised the bad aspects of it: ugly, slow, etc... No matter how much the JVM improved, people still kept this notion.
&gt; many places are too cheap to buy intellij licenses This drives me up a wall. I've finally landed at a place where they understand that spending a few hundred dollars a year on software licenses and hardware boosts developer productivity provides a return on investment. No one in IT bats an eye when we ask for IntelliJ, JRebel, YourKit or anything like that. We work faster and deliver a better product and the licenses are peanuts compared to our revenue.
&gt; ... and the licenses are peanuts compared to our revenue. Also compared to your salary. That's what I never got. If a £300 SSD makes a £40,000/yr developer 0.01 * faster (rather conservative).. you're still quids in. Same for software licences, chairs, anything you can throw at the fuckers to make them happy!
IDEA has eclipse shortcuts built in.
Well, TIL. Shame I'm forced to use JDeveloper atm though.
The same can be said of IntelliJ IDEA though. I also started on Eclipse, then later on migrated to IDEA. In my case the migration was because I was coding in both Java and Ruby (Rails), and it made sense to just have the one IDE for both. If Eclipse had a Rails plugin at the time I didn't find it. The paid for version of IDEA allows the IntelliJ Ruby plugin to be used, which basically turns IDEA into RubyMine, which I had tried a colleague's copy of and liked. I believe there are also plugins for certain other languages, both official and third party. Since getting used to IDEA I wouldn't go back to Eclipse even if I were only coding in Java, though I admit I migrated a good few years ago so Eclipse may have improved in the interim. But IDEA just seems so much nicer to use day to day. I still don't hate Eclipse though. If I joined a team that all used it for consistency I'd cope, even if it wouldn't be preferred.
Same here. I've tried IntelliJ several times and while I didn't hate it, it never "wowed" me enough to want to switch. I do have an Ultimate Edition License - I just don't use it. I've used many IDEs/editors over the years including vi, emacs, SlickEdit, IBM VisualAge for Java/C++, Visual Studio, NetBeans, JDeveloper - Eclipse just works for me. 
I agree
I don't think it's true that "everyone" hates Eclipse. Some prefer IntelliJ, some NetBeans, some like other tools altogether. Like any tool, the goal of using Eclipse is to improve productivity. If you find yourself more productive using a different tool, use that, instead. It's a matter of opinion, and everybody is entitled to his or her own. The debate of whose opinion is "correct", though, is endlessly engaging to some folks. This is, of course, not limited to things like IDEs, but can also be seen with religion, politics, etc. In the end, though, that's all it is: a debate about whose subjective opinion is the objective truth. Try them all. Use the one you like best. Get on the Internet and argue with complete strangers why you're right and they're wrong. And write some code in your spare time.
I'll happily write few more lines just for the feeling that renaming a method won't break my code. Also, JPQL is no good (no type safety, no static compilation - it's just a string). Querydsl is what Critera API should have been from the start.
Did it work on some other ide and not eclipse? This seems like an issue being new to java and how the classpath works, not anything specific to eclipse.
The Java compiler produces the same byte code regardless of what IDE/editor you are using, and I think it's safe to question the intelligence of anyone who would suggest otherwise. After hearing comments like this over the years, I've decided that people say these things because they are trying to reinforce their confidence in their own decisions. They feel a compulsion to tear down another approach/tool/language to self-sooth themselves into feeling like they didn't make the wrong choice when they didn't agree. It's childish shit and you should ignore it and evaluate the technology yourself. Eclipse has a big market share largely because it's stable and highly featured for most general purpose Java projects. 
Since the beginning of this year I dropped Eclipse as my main development IDE. Mainly because of stability issues. I still love the perspective and workspace ideas behind it. I switched to NetBeans and I love how it integrates with maven. My colleagues all use IntelliJ but I declined the offer of the licence. NetBeans does what I want and does it well.
Funny I use it all the time on both windows and linux machines and it never hangs.
Why does it even matter, if you use a build tool like Maven or Gradle on the back end, you can use Eclipse or Intellij or nothing as you see fit.
That's kind of it though. I've reinstalled the same version on the same machine many times. Sometimes it hangs sometimes not. Same version different machines... Sometimes hangs sometimes not. Different versions... Etc. It feels moody at times is all.
What? You say eclipse would be perfect with less bloat. Then say intellij has less bloat. Then say intellij sucks? Can you explain a little bit?
My biggest issue with Eclipse has alway been around its plugin system. If I wanted to install a new plugin it almost always failed to install because it or some dependency conflicted with some other plugin. And plugins are required to make it useful. It really seems like they built a framework that does a little of everything rather than a IDE that's really good at one thing. Once I discovered IntelliJ, I saw all of the quirks of Eclipse and realized that is possible to have a java IDE that is really good at handling Java. It just so happens that IntelliJ has somehow managed to make handling other languages inline with Java in such a way that they don't feel like second class citizens. 
I'm guessing that's a similar story to most intellij users. Eclipse is a great IDE for being free. It's great that it's open source and has loads of plugins. But it does come with the trade off of minor quirks and some stability issues with using lots of plugins. After dealing with those minor issues after a while I, and lots of others, felt that the cost of intellij was worth getting a more polished product. Eclipse is great. I don't think everyone hates it. But we just get tired of dealing with its finicky behavior after a while. Some just have more patience than others. Edit: this is true of all tools though. You use it until it no longer fulfills your needs or something else can fulfill them better. Eclipse gets the most flak because it has the latest market share and being free, is easily accessible. I like that there are many options for developers to fit different needs and preferences.
I had one glaring issue with it, and it wasn't clear to me I could take it seriously without a reasonable solution to this problem. I tend to work on applications that store data in text files. I often give them extensions that indicate the type of the data(hard-work.job for instance). Eclipse cannot really handle files with extensions it doesn't recognize. All I wanted was to open them in the editor, but I had to manually set some configuration for *EACH* file. Not each file type, each and every file itself. Everything else was pretty ok. The whole workspace notion is super broken and annoying IMO. Also it is kind of ugly, but that isn't very important. Finally the whole compiling using JDT(IIRC) instead of javac sketches me out. I have had coworkers write java that compiles on Eclipse but not javac, which isn't cool since most automated build/deploy/test stuff uses javac. IDEA has the option to use Eclipse to compile or javac, and javac is fast enough on current machines that I just use javac.
Small reasons why I hate IDEA: ctrl+K does not work as in Eclipse, this is highlight a word then ctrl+K to search next occurence, then continue typing there. Hovering the mouse over a class name does not show you its package like in Eclipse. In IDEA you have to press MORE keys.
Shortcuts don't work the same way as in Eclipse.
this. Good people can switch jobs at any time - having them complain about old equipment or a shitty chair, rather than having them recommend your place within their network certainly won't help your business in the long run.
I'm not picking on ya, but it doesn't hang on most of my machines -- tho they are relatively powerful. I also turn off automatic content-assistance, using the hotkey instead, and this makes it somewhat more responsive.
Eclipse always had the feel of being designed by committee. 
If you don't like Eclipse, there is a version called MyEclipse that costs $50 a year and that makes sure all of the plugins work perfectly. There is also the SpringToolSuite which is a free version of Eclipse that works beautifully. Certainly, if you're used to it, IntelliJ is fine but, again, it costs * $199.00 for Individual Developers * $499 per copy for companies Certainly for students it's free, under the same theory used by Crack Dealers. Personally, I would rather spend $499 on a MacMini or anything rather than IntelliJ. 
Keep in mind zero turnaround surveys are limited to the small portion of the community that visit their site or use their products.
Or maybe hose Java devs actually have a lot of experience with various tools and so have built their opinion based on actual real-world use. One of my final straws was when the Eclipse project decided to completely change their XML schema plugin to not be as useful (never understood the reasoning). The more you depend on Eclipse features, the more risk you take on because at any moment, those features can be completely changed, broken, or removed regardless of what users want. I lost count of how many times I would get random, nondescript errors and where the IDE would freeze or just hang for no apparent reason. Finally got fed up with all the issues, switched to IDEA and never looked back. EDIT: grammars
They're both ancient. Use a real decompiler like Procyon.
I used it for my AP CS class. I preferred it over netbeans, which is what everyone else used. I don't have much knowledge of other IDE's though, so I can't say much. 
That's the way it's supposed to work, but for whatever reason it never has for me. I spent a long time trying to figure out why and at this point it isn't worth revisiting.
I hate to sound ungrateful for free stuff... but not being able to chromecast or download does make this kind of useless for me.
This. I have been looking at [Google Trends](http://www.google.com/trends/explore#q=Eclipse%20Java%2C%20NetBeans%20Java%2C%20IntelliJ&amp;cmpt=q) to try and get a good picture of how the situation is today, but I am not sure whether it shows a good enough representation of the current situation. Therefore I decided to start this thread to get an image of roughly what people think.
No, it was something that I had to download a package and add stuff to the project, etc. Not a DLL, but it may as well have been an API call, or something like that. I'm sure a competent developer would have had no problem figuring it out, but it completely prevented newbie me from going forward. Searched google and found the answer, although again written by and for someone who was already very familiar with Java and Eclipse, so it took quite a bit of effort to figure it out. I'm sure Eclipse is powerful, and that some people like it, but it wasn't very newbie-friendly, so it's not the IDE I'm going to learn with.
If you go thru this list of comments, you find that most of the issues are from userland and not from the Eclipse product itself. Just like any other IDE, it's not going to be perfect, people will have trouble with it, but the ones who spend their time learning will benefit and more than likely have a positive outlook towards the program. I've used eclipse, intellij &amp; neatbeans and always run back to eclipse, my home away from home. Why? Because it's what I'm more experienced with and that I don't have any of the issues mentioned by the others here. Eclipse(especially) Luna is quite stable in itself, others that don't know what's happening in an application usually tend to speculate rather than gather evidence about the issue to resolve it. This subject is tired, people will be prejudice against the unfamiliar and be especially biased when it comes to praising things they hold in high regard. My conclusion, pick what works for you. Any IDE is going to take time to learn, if people encounter bugs early, they will hate it and call it a shit program, even if the bug is on their end.
Eclipse is fine. I've always found it to be a little too heavyweight for my purposes, but free is free.
I don't know. I've used all of the three (NetBeans, Eclipse, IntelliJ), but I like eclipse the best. It's just a tar/zip I download and it runs. With intellij, I bet I could get better hang of it if I tried for longer, it looks really nice. What I haven't resolved and can't get past with IntelliJ (or NetBeans for that matter) is the way the fonts are rendered on linux. I've read numerous articles about how to fix this swingAAfont issue, but none works. I can't look at it. Eclipse doesn't suffer from this issue obviously.
It *does* indeed have a dark theme. But you may compare Eclipse's [dark theme](http://i.imgur.com/mvKG36p.png) it with the [Dracula theme in IntelliJ](http://i.imgur.com/OhtRYPV.png). Did they even try and implement a dark theme? I would be grateful if there was a proper dark theme for Eclipse as there is for IntelliJ as even [some of the UI components in Eclipse becomes unreadable] (http://i.imgur.com/b8dBqOx.png). I have reported it as a bug to the Eclipse bug tracker. 
Well, that seems a bigger portion that "most people I talk" :-) And if those are the same people who say that Eclipse programmers have "no respect for their code"... come on, that sounds pretty childish to me.
That's about right. My first IDEA release was 7.x if I remember correctly. As I said, I'm sure Eclipse is quite different, but I simply never needed to come back to it. Even when compared to "official" IDEs (Android, Dart, etc...), IntelliJ has quite good support.
I used to use eclipse until I found Intellij. I think I was using a 3.x version of eclipse and I remember it feeling sluggish, the ui felt overly complicated with the tabbed views (I forget what they were called, but the tabs in the upper right hand corner for ever language/tool). So in general the way eclipse did things didn't mesh with me at the time and intellij did and still does. So its like chrome vs firefox or Audi vs BMW, they both do things in their own way and I just don't prefer the eclipse way.
Yes, that is a valid point, regarding the per-hour developer expense. (*Yet, try to tell that to an accounting department that is looking to trim fat in every corner they can. I'm betting that would lead the CFO to make the argument that they were paying too damn much for their developers...*) Another valid point is: "It's a sorry carpenter who blames his tools." I have used Eclipse, IntelliJ, Visual Studio, RubyMine and Eclipse over the years and my productivity and the excellence of my code never depended on the tool I was using. 
I've used Eclipse for more than 10 years, and I switched fairly recentlly to IntelliJ. Personally, I used to love Eclipse, and felt very productive with it. I had toyed with IntelliJ in the past, but never made the switch as I was never serious enough to use it consistently and learn all the little ways it makes you be more productive. However I was growing a big resentful of how slow and buggy the latest versions of Eclipse felt in my setup (Linux, with some plugins). I know for a fact that the problem was with some of the plugins I had to use, but in general, it made the IDE experience much less enjoyable, so I decided to install IntelliJ, and use it exclusively for a few weeks. The first few days I felt like I had two left hands, but once I developed muscle memory for the basic shortcuts and the refactoring tools, I got relatively quickly to the same level of productivity I had with Eclipse, and surpassed that soon after. I definitely don't hate Eclipse, but I like IntelliJ even better.
Don't get me wrong, I prefer IntelliJ over Eclipse and want to understand your issue, but that doesn't really answer the question. Was another IDE more newbie-friendly and it just worked for you there?
There are a few problems with Eclipse that come up over and over: * The plugin architecture it uses can easily allow plugins to conflict and become unstable. * The plugins are not controlled by any central organization and there is huge variation in quality. * The most common distributions of Eclipse include project management plugins that very, very few people use. There are huge and contribute to some of the instability issues.
Fair point, but where do you see an official notice of it being dead. The most recent release was Dec of 2013. Not that far back.
I started using Eclipse around 2001, back when the alternatives were JBuilder, VisualCafe, JDeveloper, Netbeans. Eclipse was surely the best among those options, specially in resource usage. After a few years of being back in C++ world, I returned to Eclipse in 2006 and used it since then. However in the meantime InteliJ appeared and Netbeans had a new architecture that fixed many of the issues that plagued the Netbeans I knew from 2001. So what makes me not like Eclipse vs alternatives? - Workspace concept, whereas the others have simple project files - Requires plugins for Ant and Maven, whereas Netbeans uses them as its native project format - Maven plugins require M2E plugins additionally - Workspaces metadata tends to get corrupted every now and then, forcing me to re-create the whole worspace. - Eclipse gets schizophrenic with build systems that generate files during the build process - Preferences are part of the workspace and require importing/exporting them - It has a strange work mode of linking projects with the current UI state - Not all plugins are that stable - Lacks the ability to offer completion across the whole set of files in a project. For example, getting CSS or Java completion when editing a JSF file or doing live static code analysis in JavaScript code - Profiling tools lacking in terms of capabilities - ... 
I love eclipse. I really don't have much to complain about it. Plus, its pure, untainted FOSS. Its great. I can work on xslt, json, XML, java, python etc all in one ide.
What you're talking about is broken tools. You must have an underpowered machine. At work I use Windows 7 (8GB RAM) with MyEclipse and at home OS X (16GB RAM) and I *never* encounter a hang. It's not the tools, it's the machine they're running on. MyEclipse on OS X has *never* crashed on OS X. I can't recall a crash on Windows 7, either. What kind of machine are you running on?
Your premise is wrong, I've been using Eclipse for eight years and I love it.
Cause IDEA.
FYI, IntelliJ is also re-skinned and sold for several other languages by the same company. PhpStorm is essentially the same UI as intelliJ but is for PHP, and they also have a javascript IDE, and probably other language IDEs as well. So the fact that 'Eclipse is not just for java' is not a very good excuse. 
You get the same BS from programmers that prefer one language or stack over another. They'll also complain about how nearly everyone but them is a "bad developer". A lot of developers have an ego problem and I'm not sure why. All I've noticed is it's worse in this field than other fields I've worked in.
Earlier versions of Eclipse were slow, buggy, and unstable, but improvements to Eclipse coupled with the fact that most people have faster computers now means performance has improved significantly. Personally, I've used Eclipse and intelliJ, and I've found Eclipse to be much faster and more reliable, plus it has the advantage of being free. 
Fair enough. JAXB it is. Thanks.
I used eclipse for three years. It's pretty good, but towards the end my open editor tabs would just disappear randomly and I would have to restart it to get it to work again. Sometimes it would totally fuck with the way I had laid out all of my views in my perspective (I think I got those terms right). A lot of my co-workers were using Intellij so I decided to give it a go and after I got used to the key bindings I loved it. I found it to be less buggy and I really liked the dark theme. Been using it for 2 years now and never looked back. There is really nothing wrong with preferring eclipse though. The smartest guy I have ever met uses it. It's just a tool to help edit/navigate source code.
This sub and college students tend to hate eclipse more than the "real world" in my experience (professional dev).
Eclipse is a professional tool. As a result it has a pretty steep learning curve and a lot of features that most people never use. It is a total resource hog, but it makes up for it by implementing a ton of stuff you never knew you needed. Templates and re-factoring functionality alone make it pretty awesome. Not to mention the billion+ plugins to do a ton of other things. I'm sure IntelliJ IDEA does most of these things, but when your boss says that the department won't pay for IDEA, you code in Eclipse. &gt;people who would use it has "no respect for their code". People who talk like this concern me a little. The whole "coding as an art form" idea is pretty cool. However, when you are coding functionality into a 10 year old piece of software that is ugly as sin, (Large blocks of commented out code, 10 levels of nested if statements, complicated conditionals) what you aren't looking for is respect for the code, you are looking for a way to keep your stress level down while you get the thing working and reasonably cleaned up. There is a lot to be said for a developer who can do this and it is hard to criticize them because they use a tool that someone doesn't like.
I would love to see an example snippet of something that compiles in JDT but not javac.
/sadface, JDeveloper
I remember researching this and i couldnt find a definitive guide that would get me up and running in less than a day. Can you provide resources?
Okay, I looked it up, since it's been a while and I couldn't remember the exact details. Here are the instructions I got hung up on (it's to create a Hello World SWT application -- literally the second tutorial, after creating a Hello World console application): &gt;Open the Import wizard from the main menu via File &gt; Import..., and select Plug-in Development &gt; Plug-ins and Fragments. Click Next. &gt;On the Import Plug-ins and Fragments page, select Import from: The active target platform. Plug-ins and Fragments to import: Select from all plug-ins and fragments found at specified location. Import As: Projects with source folders. Click Next. &gt;On the Selection page, Add org.eclipse.swt.{platform}.{os}.{arch} (for example: org.eclipse.swt.win32.win32.x86 for win32) to Plug-ins and Fragments to Import: list. Click Finish. &gt;This will create the org.eclipse.swt.{platform}.{os}.{arch} project which we will need to compile and run the application. Apart from the fact that this tutorial was clearly written for an earlier version of Eclipse (tabs and buttons weren't always named as indicated, but I was able to figure that out), the necessary plug-in isn't part of the default Eclipse installation; you need to get it from the Eclipse Marketplace. Of course, the link to the Eclipse Marketplace is intuitively located in the Help menu (I mean, where else could you possibly keep a link to a source code plug-ins repository?). Nothing from the previous tutorial even suggested that there was an Eclipse Marketplace, or what it might be used for. Like I said, it's nothing that someone already familiar with Eclipse wouldn't be able to figure out easily, but there were enough omitted steps that encountering this in the second tutorial was enough to stymie me. As for which one is more newbie-friendly, I was a lot happier with IntelliJ IDEA. The [JetBrains tutorials](https://www.jetbrains.com/idea/webhelp/creating-and-running-your-first-java-application.html) did a much better job of explaining what things were, what they did, and why they were necessary.
Are you looking for help past an interesting error, or trying to get us to do your homework for you?
&gt; A lot of developers have an ego problem and I'm not sure why. Not sure why? How about the fact that an ego problem is something a lot of people in general have? Turns out developers are people, so by extension a lot of them have ego problems.
Free version of IDEA doesn't include Tomcat support, but Eclipse does.
i was actually thinking something like project euler, but instead people frmo the reddit community sends in the questions. homework questions would go to http://www.reddit.com/r/homeworkhelp no?
As a GNU/Linux user I don't understand why people don't just code in a normal text editor then compile in terminal with javac /path/to/you/file.java * You don't need to learn a new interface for each new language * IT TELLS YOU WHICH LINES IT HAS A PROBLEM COMPILING (just like any other compiler) * It's lightweight and free * NO BUGGY CONFUSING INTERFACE * You can program on pretty much any system with a terminal and text editor Plus you don't waste any additional disk space with 3 or 4 IDE's customized for different languages.
I've spent 10 years working as a Java developer. Never been forced to use any IDE but tried them all. Rarely have I seen the majority of a team choosing to use anything other than Eclipse. Eclipse isn't just used by Java devs though and anyone else perceives Java as slow. Eclipse can be slow - default memory settings often need to be changed from the conservative defaults for anything substantial but generally I find it acceptable. Netbeans is fine, used to be far better than Eclipse when everyone was making Swing apps. Intellij... meh. Much of a muchness, not worth paying for. The only other editor I'm likely to use is vim.
You could always post something like this to /r/Programmingprompts as long as they are not homework related. Unfortunately, this sub is relatively dead. Neither /r/Java, /r/Javahelp, nor /r/learnjava are appropriate for that kind of posts.
Typo in the second code example: Function&lt;String,String&gt; concat = x -&gt; x + 1; -&gt; Function&lt;String,String&gt; concat1 = x -&gt; x + 1;
This might help? https://www.jetbrains.com/idea/documentation/migration_faq.html
**Please don't post screenshots of code ever!** They are difficult to read and even worse: nobody will take the time to retype them to check for any errors. Reddit has built-in code display features for shorter code, or use pastebin.com for longer-single-file code, or gist.github.com for multi-file-code. Be sure to turn on Java formatting in pastebin.com or gist.github.com. **Also:** your question is better suited for /r/Javahelp. (Be sure to read and follow the [posting guides](http://www.reddit.com/r/javahelp/wiki/posting_guides) there!) By following the simple rules, you will receive quicker and better help. To give you a hint: you need to draw the bar **inside** the while loop, not outside as you currently have.
It is slow, especially the source indexing when working on large projects… .
switch to intellij idea and dont look back
Have you checked out the mediator pattern - http://en.wikipedia.org/wiki/Mediator_pattern? This guy does a good job at explaining it - https://www.youtube.com/watch?v=8DxIpdKd41A
Except when the old version of the plugin is not compatible with the new versions of Eclipse. Making your users download source and fix the many issues with Eclipse is not the best argument for using Eclipse as a tool to develop software...
&gt; It really seems like ... Well it seems like that because its true. Eclipse isnt an IDE. Its a presentation framework with a plugin infrastructure. It just happens the default package of eclipse includes their java ide plugin. Eclipses primary goal was to make all its various panels interact with each other so you could have hyperlinks in a side bar that integrate with its other features (see the tutorials for examples). Being an IDE is an afterthought
Thanks will check it out. Honestly its just 5 years of muscle memory and knowing all the weird little Eclipse quirks that prevents me from adopting new IDE's
Except that half of the shortcuts don't work correctly. For instance, Ctrl+shift+I to inspect a highlighted chunk of code, Ctrl+n doesn't bring up a dialog of any kind, instead you have to use arrow keys to navigate a menu that isn't even highlighted after you press the shortcut. F2 doesn't rename things, they only support alt+shift+r... There are some things intellij does well, but I'm not a fan of their shortcut emulation.
Because IntelliJ
IIRC, Eclipse 4.4 works with all plugins built on any 3.0+ version of the platform. Which is, for all intents and purposes, all of them. Sure users shouldn't be asked to build their own plugins, but it sure is nice to have the ability to if you really just can't stand the way they changed their XML schema plugin.
For a Java internship I typically ask general OOP questions and some sort of FizzBuzz programming question. Some examples: * Composition vs. Inheritance * Difference between Interface, Abstract Class, and Class * List vs. Set (name some Java specific implementations and pros/cons of each) * General algorithm questions (sorting and searching) * Understanding IoC and DI is a plus for an intern. For me, the biggest thing an potential intern can do is have a public github/bitbucket account with code samples they have written that we can talk about. Good luck! 
Shitty plugins make it crash like crazy. I'm an IntelliJ man nowadays but a bare install of Eclipse runs pretty solid.
I think the paid version of IDEA more than pays back through the productivity gains.
Depends on how high-level it is. Will it be about Java, or about Algorithms or what? Know the Java Collections: * List --&gt; ArrayList * Set --&gt; HashSet * Map --&gt; HashMap * Know why Hashlist is old and bad. * Know why Vector is old and bad. If it's going to mention algorithms Kinds of sort, the difference and what they mean: * Bubble sort * Selection sort * Insertion sort * Merge sort * Heap sort * Quick sort Know about trees. Also all the things that mdatwood says are correct. Good luck! 
equals and hashcode Generics New features of the language that are useful... 7 or 8 (multicatch etc) 
Like I love Blender, but starting out, it seemed completely unintuitive, unnecessarily complicated, and had a very steep learning curve. Eclipse was kind of like that, but slow and I could write Java just fine with any text editor. The speed and complexity left me with a bad impression that's never gone away, and with plenty of alternatives I didn't feel the need to keep going back until many years later.
&gt; quids Oohlso, compared to yor salree. Vat's whooht i neveh got. If a free hoondred pound ssd makes four'y thousand dollah peh yheeah developer ziroh *point* ziroh whuhn toimz fhasteh (rother conserva'ive)... your still quids in, m8. Same for software licenses, chezz, anyfing you can frow at the fuckers to make them 'appy. Sorry.
Having given many interviews for my company, I look at how you answer a question you don't know just as much as how many questions you do know. Trying to BS your way through a technical question that is out of your depth is the kiss of death for me. I'd rather you be honest and just tell me you don't know. 
It seems worse in this field, that's part of my point.
I second this. I've recently had a number of candidates that insist garbage collection was done with reference counting and that a cyclic dependency would *definitely* stop objects being collected. It's *much* better to say you don't know and would have to look it up. However, if there's something you stumble on in the first round, make sure read up on it as I'd likely ask you about it again in the next round. 
If you've never had a Java interview before, then it's highly unlikely that you're "pretty experienced" in the language. Maybe I'm wrong and you've managed to get a decade of professional Java experience without sitting a single interview, if so I'm impressed! Otherwise, you need to approach it with the attitude that you're a junior dev looking to learn. 
I guess this is because in programming a lot of the "knowledge" can't be backed by objective studies, for example how much should you comment your code, how much should the code be tested etc. This combined with the natural tendency of people to equate strong opinions with being right leads some developers to hold on to extreme opinions, since they think they'll seem more knowledgeable. The more programming I've done, the more I've started seeing these kind of extreme opinions as a red flag. They seem, more often than not, to be an attempt to oversimplify complex problems, sometimes stemming from inability to think think about problems critically.
Cool story bro.
Because javac isn't sustainable for a large project on its own. The fact that you said that madness it obvious that you've never worked on a project with any appreciable number of files and dependencies. 
Just curious why u would choose more complicated spring DI over standard CDI. I get why someone building a Spring project would but it seems uneccesary otherwise.
I had a class where a student asked the professor whether Windows or Mac was better. The Prof's replay was "That whole debate is stupid. Use whatever you want and leave me out of it."
I've studied this problem for quite some years, been designing software for about 35 years and noticed this about 2 years in. One of my earliest observations on the subject seems to hold true. It is a hidden god complex (well, not always so hidden) caused by the tight response loop/positive feedback created when a computer does exactly what you want it to do. There is a heady rush of dopamine or endorphins or whatever that comes along with discovering this power and it can really warp a kid although it happens to some degree with those who learn later and earlier in life it seems to be worse when someone learns in their teen years. 
Why is vector old and bad? What collection would you recommend for a thread safe List implementation? 
Its always funny when a developer will state that some tool or language is better than the other. As an adept developer you should be able to use any tool and any language for what ever purposes they were designed for.
Vectors are bad because every method is synchronized. The regular collections classes are superb. If you need synchronization, they have a special way to do that instead of synchronizing everything by default. For example: List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;String&gt;()); In general, you should avoid synchronization unless you need it: Synchronized Collection Methods of Collections class Collections.synchronizedCollection(Collection&lt;T&gt; c) Collections.synchronizedList(List&lt;T&gt; list) Collections.synchronizedMap(Map&lt;K,V&gt; m) Collections.synchronizedSet(Set&lt;T&gt; s) Collections.synchronizedSortedMap(SortedMap&lt;K,V&gt; m) Collections.synchronizedSortedSet(SortedSet&lt;T&gt; s) 
Slower than Netbeans, ugly dark themes. When you're coding every day dark themes = less headaches. 
For some reason Jave 8 gives that message box issue, I'll need to look into it. The Bytecode Decompiler isn't finished, I have to add support for more opcodes.
I just went through a bunch of interviews. The three most common questions I got were: Linked List vs Array Stack vs Heap Interface vs Abstract Class Every single interview asked at least one of those.
My understanding of concurrency isn't as strong as I would like it to be, but looking at the Java 8 implementation of SynchronizedList (the instance returned by Collections.synchronizedList) synchronizes all methods on a "mutex" object. What performance increases does that yield versus simply synchronizing the entire method?
1.2 adds 2 more Java decompilers (Procyon and CFR), so if one fails you have the ability to use another without switching applications.
The funny thing is that if something does the trick for you and a fanatic can't convert you, they label you as a fanatic for the other product. Idea evangelist at your office? He'll call you "mucsun, the Eclipse guy", guaranteed.
Yes, its slow, buggy and unstable but i love it
I absolutely hate reading shitty code.
I think your premise is wrong - people don't hate eclipse because they haven't used it. Pretty much every java developer has used it a lot, because it's so ubiquitous, and free. Many others have used commercial IDEs based on it, such as IBM's RAD. Eclipse is not just an IDE, it's a platform for plugins. Some of those plugins don't work well, or don't work well together. A hand full of them that I really need for my work (m2e, WTP, GWT) are plagued with mysterious bugs, that can be very frustrating and show little improvement over the years. I wonder if the developers you've talked to who hate eclipse actually hate WTP and m2e. As long as my boss pays for the license, I'm using another, commercial IDE. 
AFAK, you won't be able to use Hibernate w/ an Oracle Database, if you use the Google Data Store. Thought, if you really want Hibernate, maybe you can look this [project](https://code.google.com/p/hibernate-gae/), but it doesn't look updated. For the GUI builder, start by doing thing manualy first, then if you really want a GUI builder, seek for a plugin in your IDE. If you dislike google, you can probably try Heroku, OpenShift or Digital Ocean with [a discount](https://education.github.com/pack)(if you're a student), etc.
Step 1: Learn the difference between Java and JavaScript.
Hi there! I have detected a mobile link in your comment. Got a question or see an error? PM us. http://en.wikipedia.org/wiki/Attribution_bias
Intellij idea. I've been using it to learn jsf and it's very well integrated and solves a lot of problems for you. It's also free for students. 
Exactly.
Purely due to what my co-workers use.
Cheers. Added to the list..
Hmmm. I don't remember Apache Wicket being XML intensive!??!
fuck m2e
Yes, your problem is null elements. Besides making sure that you have no null elements, there is another way: Create a Comparator class (you can also make your Population class implement Comparator&lt;Organism&gt;) and let its `compareTo(…)` method handle null items. That way, you can (and should) still deal with null items (to help this, you can log them from the comparator), but your program won't fail if you happen to have them. Especially if you have multiple orderings, using one Comparator per ordering makes the code much more readable.
I'm with you on that.. As a 'Senior Developer' (whatever that means) I have been using it for years and years, and bar a couple of niggles and a few random things I really like it. It works well, we produce code for a Enterprise global product that is a good solid robust tested bit of software.. No-one here moans about it.. I also tend to think its people that just don't use it day to day that have issues.. For me its just a tool of the job, not a religion. 
&gt; IntelliJ IDEA How do I set a target-platform in IntelliJ? For RCP development etc?
Some answers here ... http://www.ihateeclipse.com/
It can be nice to have some kind of library / framework to assist with RDBMS access, but Hibernate / JPA does too much.
It's been a number of years since Spring required XML for configuration. Now it's one of three options: you can configure Spring using XML, annotations, or Java classes. Annotations have been an option for quite a while, but the Java config alternative is newer.
I have no idea, but Google gave me this: [Using IntelliJ IDEA for Eclipse RCP development](https://www.jetbrains.com/idea/documentation/usingIDEAforEclipse.html)
I would say that it is a good thing that you have to do database updates explicitly.
As a developer who works productively with the JSF/ADF stack daily, my two cents: * IDE: [NetBeans](https://netbeans.org/) provides the best overall integration of the most common services. If you plan to use something more modern, I recommend [IntelliJ](https://www.jetbrains.com/idea/). [JDeveloper](http://www.oracle.com/technetwork/developer-tools/jdev/overview/index.html) is only necessary for ADF development and has many issues itself. NetBeans 8 has some new features for visual development which are of course nowhere near JDeveloper. * Application Server: [GlassFish](https://glassfish.java.net/) if you just start out or a preparing for a project which uses [WebLogic](http://www.oracle.com/us/products/middleware/application-server/index.html) (and you don't have access to it). In the long run I suggest [WildFly](http://wildfly.org/). * JPA provider: The default of your server as it shouldn't matter with the latest API, especially if you just want to start a project for the first time. * DB: Oracle if you want to dig into the Oracle-stack enterprise world, otherwise it doesn't really matter. I prefer [PostgreSQL](http://www.postgresql.org/). * I use PrimeFaces and don't think there are viable alternatives with equaly rich features. For more Java EE inspiration outside of the JSF box, you could have a look at the [miles2run](http://blog.arungupta.me/2014/09/log-your-miles-and-community-runs-java-ee-7-real-world-experience/) stack. Keep in mind that [the development paradigma](http://blog.primefaces.org/?p=3035) changed a bit towards 'native' HTML5/CSS3 with JSF 2.2 (and will continue to change with 2.3). For a general overview of libraries you can have a look at [this list](https://github.com/akullpp/awesome-java), e.g. Shiro for authentication/authorization.
Hi there, Oliver from RebelLabs (ZeroTurnaround). Just to follow up: we literally invited close to 100,000 people through half a dozen channels - including many RebelLabs subscribers from every continent - to take part in this survey (which donated 50 cents to charity for each completed in order to get the word really out there). A total of 2164 developers took part and margin of error was 2.1%. Just sayin' :-)
It's not the tools you use but it's the person who uses them and how he uses them. Anybody can get used to anything, heck I could get used to writing java in notepad and compiling manually using a terminal if I had to. Well then, does eclipse encourage for learning "bad habits"? I would say no, but then again that's just my opinion. I've always used Eclipse, I tried Netbeans once but uninstalled it the same day just because I wasn't used to it so it felt alien and I felt like Eclipse is all I need so I just went back to using it. So, as it has been said hundreds of times in this thread already, use whatever you prefer, it doesn't matter that much.
**Please don't post screenshots of code ever!** They are difficult to read and even worse: nobody will take the time to retype them to check for any errors. Reddit has built-in code display features for shorter code, or use [pastebin.com](http://pastebin.com) for longer-single-file code, or [gist.github.com](https://gist.github.com) for multi-file-code. Be sure to turn on Java formatting in pastebin.com or gist.github.com. **Also:** your question is better suited for /r/Javahelp. (Be sure to read and follow the [posting guides](http://www.reddit.com/r/javahelp/wiki/posting_guides) there!) By following the simple rules, you will receive quicker and better help.
I've done a lot of interviews as Java programmer over the years, and not once has anyone asked me specific java or Computer Science 101 factoids. Especially if you're interviewing for an intership, they don't really expect you to know very much yet. What they typically ask about are things on your resume: "did you really do those things and did you understand what you were doing". If your resume states you wrote your thesis on a certain concurrency problem, you'll definitely have to talk about concurrency. If it says you're a committer on an open source project, you'll definitely have to talk about that project. In short, if there's something you'd really like to talk about in the interview, make sure it's very prominent on your resume. I had Spring experience on my resume, so they asked me about IoC and DI. It also helps if you're not afraid to say "I don't know, I'd have to look it up" instead of guessing or making something up. 
You know developers aren't real people right?
I noticed that nerds like getting into fights about trivial thrings. Somebody has to be right and someone has to be wrong.
To understand why someone would love or hate a tool, you have to understand what they're trying to achieve. If they can achieve what they want without too much effort, they will love the tool. If not, they will hate it. **My situation** I mostly create J2EE Webapps to be deployed on Glassfish (or Wildfly). I use a Maven run configuration to build and deploy my application, mostly because Eclipse can only deploy to the "eclipseApps" folder of Glassfish (annoyance #1) and I need it in the "applications" folder (because of some path issues). I have some JSPs files, mostly to serve as an admin frontend to do some testing after deployment. These are written in HTML5 and Eclipse's HTML 5 support for JSP's is actually pretty bad (annoyance #2). Eclipse also has a tendency to close some nodes in its tree view of my project (annoyance #3). Still, I don't hate Eclipse. It gets the job done. It gives me some auto-features (code completion, import suggestions) (requirement #1) which makes sure my code can be actually compiled before I try compiling it. A colleague of mine uses VI. He has to manually run 'ant' only to find out there is a little typo or missing import in his 50th class. Also, the SVN-integration of Eclipse is pretty OK (requirement #2), although it's strange there are 2 camps: You got the SVN-guys making an Eclipse plugin and the Eclipse guys making an SVN-plugin. I have tried Netbeans and found it to be too much of a magic wand. I don't mind manually configuring a lot of stuff if I can easily find how to do it. I use a lot of XSLT's and with Eclipse I can easily test them with an internal transformer to see what the result will look like and I severely missed something like that in Netbeans. What I'm trying to say is this: I'm an all round developer, Eclipse is an all round tool. It helps me with Java, but also with XMLs, XSLTs etc. We have an old codebase made in Progress OpenEdge for which there is an Eclipse-based editing tool, so I don't have to make a huge switch. I once developed a small proof of concepts app with the CodenameOne framework and used the Eclipse plugin for it. So whatever I'm working on, I can always use Eclipse, and that's the main reason I use it. Word to the wise: Try to keep your Eclipse installation as lean and mean as you can, only install necessary plugins and be sure to tweak your settings (JVM stuff mostly).
You can always check out /r/dailyprogrammer
We tried Guice for a while but found there were memory leaks affecting our components - so we moved to Spring.
It's also worth looking into [XQuery](http://www.w3schools.com/xquery/).
That's globally true, but when your tool spits NPE everytime or that you have to learn a lot of shortcuts, come on. If you can keep the tool you're used to, you will.
I used Eclipse for some time (around Helios/Indigo versions) but it was already after I got familiar with Netbeans. I considered Eclipse buggy because sometimes there were weird errors, getting a project to recompile required manually removing the build directory, sometimes the project would not load properly, in a moderately large project code suggestion would work in a way that was not satisfying for me. Then there was a very subjective matter of the IDE feel. Something in Eclipse that just didn't feel right to me, the way it ordered code suggestions, default colour scheme, responsiveness, debugger, the graphical part of interface didn't feel right to me. I was not obliged to use Eclipse and I preferred to tune Netbeans to fit the project rather than tune Eclipse to fit my needs - it was probably less work too. In next jobs the only choice I had was between Idea and Eclipse, so I decided to see how the Idea works for me. It occurred to be quite close in the "feel" aspect to Netbeans, so I chose it over Eclipse. There were still some problems related to project, but on term of bugginess it was not worse than Eclipse. To me the Netbeans/Idea feel more natural and ergonomic therefore I'm less frustrated than when working with Eclipse.
Sure, when you're doing complicated updates that span hundreds or thousands of rows. But you should encapsulate that logic in some sort of a DAO with a well defined interface rather than in-lining it. But for updating columns inside of transactional business logic, as I illustrated above, you quickly find that littered SQL makes code much harder to understand. And the code gets even worse when you attempt to mimic the same sort of performance which delayed flushing gives you for free. It all comes down to what sort of system are you working on. Are you working on a system where your tables are good candidates for actual objects (versus pure data storage)? Is the majority of your code base business logic based on a nearly limitless number of configurations which need to be checked and considered? Does your entity structure fit nicely within your system's domain model? Logistics systems, which I have many years of experience working on, are an easy 'yes' to these questions. In these scenarios, JPA mapped entities are very nice. In other systems, such as end-user applications or web based systems where your RDBMS is not directly storing the state of real world objects and, thus, you don't have a well defined domain model then perhaps JPA isn't the best call. As I already said, it's about looking at the problem and figuring out the best approach. Not broadly painting strokes about a tool being either "good" or "bad."
That's an interesting observation. I didn't learn a programming language until I was a young adult. I didn't *really* learn to develop until I got a job after a long stretch in school. I didn't even major in CS.
See for yourself :) http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/java/util/PriorityQueue.java/
That seems pretty accurate. But its fault is also its strength. You can start from a bare IDE and add just the features you like/use. There are just a lot of different developers out there, so anything that it's must-have for you might not be for someone else. And it's gotten better since then. I started using Eclipse around the Europa/Ganymede time and plugins were abysmal back then. Trying to fix a bad plugin usually meant doing a clean install. Nowadays, it's a lot more user friendly and less error prone.
Thanks so much! I was looking everywhere for something like this but I couldn't find it :D
+1 for GrepCode. It's great.
&gt;An unbounded priority queue based on a priority heap. &gt;... &gt;A priority queue is unbounded, but has an internal capacity governing the size of an array used to store the elements on the queue. From the [javadoc](http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html) Also, "this implementation provides O(log(n)) time for the enqueing and dequeing methods" should be enough. If it has the same performance guarantees as the heap implementation, you shouldn't have to know it was actually made out of fairy dust and pixie farts.
Wow your answer is like perfect, thanks ! I just noticed that I have 100$ credits for DigitalOcean from github (I'm a student) so I can use it instead of app engine. I would have liked to use an MVC framework instead of JSF (I really want to use Play! framework) but I'm so bad at front end development and I don't really have time to learn it (I prefer to learn back end development for now). So here's an updated list of what I will use : - IDE : Netbeans 8 - Server : WildFly ( or Jetty ? I'm not sure if I will use EJB ). - DB : Postgre for SQL with Hibernate or EclipseLink, but I also want to use a NoSQL db (probably MongoDB, but I'm searching for an ORM for it, I have found MongoLink for now). - Framework : JSF with PrimeFaces. - WebService : RestEasy ? is it possible to make my app hybrid (JSF+Rest+EJB) ? (I want to make my app usable on other clients). - Auth : Shiro - Web Scraping/Crawling Library : Apache Nutch (too heavy) or JSoup or Jaunt. Basicaly, my app will do the following : - User creates an account - User logins - User goes to his dashboard. - User adds some data to be processed with some preset filters that he will choose - A periodic job (I only know to do that with EJB with @Schedule) will process the data (by crawling some websites and filtering data). The periodic job will do that for all the users at the same time to not have 1 job per user which is stupid. - The processed data will be saved in a DB (probably the NoSQL one because it is not really structured data). - A notification (email) will be sent when the data is processed. - User can login again and check his dashboard with the processed data and also add some other data to process. In the future, I'll maybe do some mobile apps that will use my webservices (so I will learn to make mobile apps too). Am I on the good way ? 
I think the best and most universal answer is, "it's the little things." Since Eclipse is usually the first professional-grade IDE that Java developers try, it's kind of got the reputation of being everyone's first steady relationship. And while the many small warts and imperfections might be really trivial or easily overcome in the long run, the boredom of dealing with a rather stagnant programming language at the same time (pre-java8) magnified the interface issues into ugly, disgusting reminders of how quickly we had *settled*. But this was just the obsessive churning of immaturity, unwillingness to explore the depths of her true personality, a shallow desire for something prettier... more put-together... Eclipse isn't just an IDE, she is a platform--a *project*. You only get as much out of her as you are willing to put in. Of course, a lot of IDEA users (myself included) will be able to retrospectively identify something we just couldn't live with, something intolerable...unfixable... But the truth---what is so hard to admit--is that we were simply not ready for the responsibility of a relationship built on reciprocity, forgiveness, and committment to mutual growth. Instead, we decided that we were too good for that; that she needed us more than we needed her; that whatever it was that an IDE was good for, we might as well just pay for it, one year at a time, no strings attached. I wake up next to IDEA every day now, and sure, both of us are productive and happy. But are we happy together? I look at her license panel and try to dismiss the inevitable realization that she is seeing other developers. Why shouldn't she? It's not like this is a committed relationship. I've been using vim on the side for years, and have even installed the IdeaVim plugin because it's the only way I can code anymore. The shame of it all makes me just want to end it sometimes--just throw it all away and start over on a tropical island with emacs and a dynamic language or something. To run away from all the reminders of my cowardice and erect an even bigger shell to insulate me against the pain of my regret. I'm sorry... I am so sorry... my Ganymede, my Luna, my Eclipse... We had something... something awkward and sometimes painful, but it was real--and I threw it away. I wish I could roll it all back to the beginning, back in that dimly-lit cubicle in 2007, when we were both innocent, not trying to prove anything to anyone, both of us excited to try to get someone else's Maven 1 project to build on Maven 2. I see now that the frustration I felt and allowed to grow unchecked and that I ultimately blamed you for was really the result of my own inadequacy. I was a liar--a coward, and I never had the balls to apologize to you, and instead I distanced myself from you. I have no right to expect you to take me back. I don't deserve it. Just... just, please, don't hate me... Don't condemn me for eternity just because of the foolishness of my youth. I have to believe that there is still hope for me, that I'm not yet doomed to feel empty inside for the rest of my career. That I can be fixed, polished, and that maybe one day, someday far away, I can be made worthy of seeing your heavenly splash screen greet me in the morning once again. 
In the field I don't really see much greenfields, I often see older Spring applications that require extensive refactoring if the team would want to use annotations. An upgrade to a newer Spring version is often not that big of a deal but migration 40 xml files to annotations is.
I don't really consider my short example list factoid questions. All of them are open ended and should lead to further discussion. I've done a lot of interviews and so many people do not know anything. I am amazed how many people can't pseudocode a simple FizzBuzz or handle a left join when SQL is on their resume. On one hand I don't want to insult people, but on the other I have to make sure there is at least a basic level of understanding. I definitely agree with your other advice.
Since Eclipse 2 it's not even designed as an IDE anymore. The IDE is a configuration of different plug-ins itself. Nobody can really explain what the Eclipse proper is. It's everything to everyone at the same time and yet nothing specifically. The Eclipse homepage is about all kinds of things except the IDE. 
&gt;Also we are using Java 7 feature named try with resources Not according to the source code you're not. Looks like a spam blog posting assembled by someone with no idea what they're actually talking about.
Lmao Thanks! Yea a lot of Java seems to be comprised of said fairy dust and pixie farts.
Eclipse Kepler was a godawful unusable heap of crap. Fortunately, Luna is quite usable and has reasonable performance again. Plus, they finally implemented split windows. I also hit a problem with IntelliJ IDEA where it stopped showing warnings properly, and nothing I could do would make it start listing them all again. So I went back to Eclipse.
* They're all close enough that they're essentially the same when you've been in one for a long time. * An IDE will tell you what lines have compile errors in real time, without having to exit or switch to another window. * don't care about light weight as hardware can handle it * It's not that bad * Can but don't have to. When I have to do that, I do. 
&gt; Not according to the source code you're not. Their "try with resources" is used correctly. I would only get rid of the lame "Integer c" and use Files.newXX API to create reader/writer.
Good to know!
Or you could rightclick the chrome tray icon and uncheck the box for allowing chrome to run in the background...
&gt; Personally, I would rather spend $499 on a MacMini or anything rather than IntelliJ. Except you would be paying either $0 or $199 instead of $50/year. Also why would you rather pay $499 for someone to throw your computer off a bridge rather than a popular development tool which happens to not fit you/your workflow?
Dude, you have not made any sense. Please try again. I would like to respond to your jerimiad but it unfortunately does not comprise a point that I can address. If my company spends that kind of money then I consider it money out of my own pocket, if that's what you meant. I am not a student and therefore cannot get it free.
Who is still running Java in a browser?
I don't know about running `jstack` programmatically—seems kind of hacky to me—but setting thread names is an interesting idea I hadn't thought of. It might be wise to set the name back in a `finally` block after you're done, though, since threads are usually in pools.
Eclipse isn't libre
It's an honest question. Who is doing this and why?
Search "Java Games".
LibGDX FTW!
The Free Software Foundation has said that both licenses are free software licenses, but are incompatible with the GNU General Public License (GPL).
&gt; it might be best to not even tell people that Java is used. If Windows, they'll probably realize anyways, because of the totally crappy, uncanny UI.
What are you confused about? Yes you can get it for free through the community edition which in a lot of cases is more then enough. It seemed that you were trying to make the point that jetbrains charged an unreasonable price for for IDEA while 'forgetting' that myEclipse charges you also (you tout a paid version of eclipse a few lines before you negatively write about IDEA being a paid tool). So I was pointing out (with a slight troll twinge) that you were a little exaggerated (as I don't consider your company spending money as you spending money). If the whole bridge thing confused you, it was a friendly troll at your statement "I would rather spend $499 on a MacMini or ***anything*** rather than IntelliJ." 
yahoo games
With the recent changes to permission levels basically nothing runs anyway.
Cool, I didn't know that!
Your machine is slow.
Edit: spelling I'm currently working on a primefaces 5 app at work. Our app server is Jboss EAP 6.1 and we are using the Jboss Developer Studio version 7.1. Jboss Developer Studio is really just a bunch of plugins for Eclipse. I have found this stack pleasant enough to work with. Eclipse can be trying at times, but it's so ubiquitous out there that I think just about every Java developer will use it at some point. For continuous integration we are using Subversion, Maven, Jenkins, and Nexus. We heavily enforce that all builds and deployments MUST be automated and performed automatically (except for the production environment of course). As far as supporting libraries, that will depend on your project. We have some internal dependencies that we need, but then we have a lot of other things we are using as well like a JSON library (org.json), apache httpclient, and the D3 javascript library. As for a GUI builder, I find those to be annoying and I haven't found a single one I have liked. Jboss Developer Studio has one, as does JDeveloper. I recommend you try them out. If you like them and feel that they make you more productive, then use them by all means. Also, the last time I used Jdeveloper (a few years now) a found their Maven integration to be really lacking. That would have been in version 11.1.1.2. So things may have changed by now, but if you're looking for tight integration into Maven from the IDE I would check that out. The other annoying thing about Jdevloper + ADF + Weblogic is the use of this horrific little thing from Oracle called ojdeploy. A lot of their deployments to weblogic really need to use that tool. I have hacked together quite the horror show of ant scripts to get that thing to work properly. I recommend staying far clear of ojdeploy if possible. 
For the purposes that all of us need--a free and fully functional IDE, Eclipse is perfectly free and open source. You can look at the source anytime you want. To draw some asinine distinction about the fricking license is just being a jackass. "incompatiable with the GNU..."--pound sand.
Not worth the $499 for the full version. Use MyEclipse for $50 or Spring Tool Suite for free. IntelliJ is just hype. I've used all of them. UnitedHealth group once spent *$8,000 per seat* for WebSphere Studio Application Developer, Integration Edition, and it was just Eclipse with some chrome added. You're deluded if you think that the price of your tool makes you a a better engineer. Your knowledge, skill and intelligence are all that matters. If you need IntelliJ to be a great developer, you are coding on crutches.
Living up to your username. I'm perfectly capable of developing in eclipse or vi or VisualCafe like I did in the 90s but IntelliJ is better. I don't think that's hard to understand.
intellij runs fine
I have no idea as I've been using IntelliJ IDEa since 1998. (I don't even think eclipse was a thing back then...)
Visual Cafe--that was a truly unpleasant IDE. Second, no one has said that IntelliJ is a bad IDE. The question is not over bad or good but whether it's worth the money. You are free to spend your own or your employer's money on IntelliJ if you like. I, for one, have concluded that it's not worth the expense and would prefer to have my employer's or my own dime be spent on other things than an overpriced IDE. Hence, my reference for the unnecessary expense of Websphere Studio Application Developer Integration Edition or Rational Application Developer. They were not worth the money. All of these options--Visual Cafe excepted--are acceptable development environments. The quesiton is if they are worth the money. I say no. YMMV. (As for the username, that makes sense since I first chose it.)
Thank you for sharing your work environment. It is good to know that there's a GUI builder in Jboss Dev (I know it's not good, but I think it can help me visualize easier the UI and the data associated)
IntelliJ survives only because people have the mistaken belief that something that is free can't be worth it, while at the same time thinking that something that costs a lot of money--intelliJ Ultimate must be worth it. The only valid comparison is: * Eclipse with Community IntelliJ (the cheaper of both) * MyEcipse with Ultimate IntelliJ. I would take Eclipse in both cases. 
&gt; Sorry I just can't understand Let me help you with a [link](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) that will hopefully clear any misunderstanding. I have removed your postings from /r/java. We don't want people to promote their websites here, because unfortunately otherwise we get flooded with sites of low quality, but with high ad-content ratio. Note that the litmus test is not the content of your site, but your activity on this subreddit. If you are an active and helpful member, we may well decide to allow you to post your blog.
&gt; Let me help you with a link that will hopefully clear any misunderstanding. Thanks a lot for clearing it in the beginning. I will keep all the points in mind and will follow them. But where are the links now that I have shared till now.. Are they listed in any subcategory or they are just like vanished away from the reddit :( 
I have removed them, so for now they are not visible to anyone but the mods (and believe me, we don't look at the stuff we remove too closely).
For those who want to remove Java completely, [JavaRa](http://singularlabs.com/software/javara/) could come in handy.
Ask.com(tm) toolbar is only compatible with Windows-based smartcards. EDIT: Have you tried jQuery?
Don't worry it will install itself.
That's a very ambitious architecture for a student, It's basically what my company sells. If never used JSF without an application server though, since the entire Java EE stack was requested. I'm not even sure if this would be a good idea for a beginner. Of course you will need to choose the implementation of the JSF specification, either Mojarra or MyFaces and other features like Dagger for DI. Of course it is possible to provide a REST API but it will be separated from your JSF layer. Very simple periodic jobs can be done with @schedule, complex ones require something like [Quartz](http://quartz-scheduler.org/). E-Mail notifications can also be done with Quartz. I wish you good luck.
Smart cards are running JavaCARD which is tiny subset of JavaSE, because of size restriction on such small micro-controllers like those inside the card.
Wait a second, we're not in /r/shittyprogramming. 
He completely doesn't get it. http://www.reddit.com/user/HituGarg
...Why do you want to?
I know. As long as he keeps to /r/programming or /r/learnprogramming, I'm not too much affected. Should he be insolent enough to spam /r/java once more, I will ban him without second thought.
Companies still have a lot of applications that are run in a browser. Sad but true.
Not really, it's Java. At work I use Win7 and deploy to AIX. At home, I've been using Ubuntu for the last year and a half or so and I deploy to an Ubuntu Server and to Heroku, but my new Mac will be here Friday and I'll be switching to that. I've never had a reason to even run VMs like I have with Python and PHP. Though, I guess I suppose I should. *edit* To echo what /u/user3141592654 said, Testing Environments should be nearly identical to production environments. This is critical no matter what language or stack you're working with.
What kind of apps do you develop? For the most part it makes no difference at all, but there are some platform differences, and the number of those is slowly growing... At my work, we do Spring MVC based webapps that run on Tomcat, so that is pretty much exactly the same no matter the platform. I can imagine a few scenarios where the platform does matter though - native components for something like LWJGL being an obvious candidate, but then things like SWT for GUI development too, or some of the new NIO2 features...
This is a nice effort for a beginner. I would like to give some feedback though. First of all the following snippets are unused code: public static void scan() throws InterruptedException { usrAnswer = (" "); ifAnswer = false; scanCheck(); } -- public static void scanCheck() throws InterruptedException { if (ifAnswer == true) { } else { Thread.sleep(10); scanCheck(); } } -- /** Determines if output has occured. */ public static boolean isTainted() { return TAINTED; } Your code is poorly formatted at times and your not always following conventions like for instance class names always being upper case. But those are formalities. Some other things I noticed: JScrollPane scroll = new JScrollPane(console); JPanel outerPanel = new JPanel(new BorderLayout()); JPanel topPanel = new JPanel(new BorderLayout()); JPanel mainPanel = new JPanel(new BorderLayout()); JPanel bottomPanel = new JPanel(new BorderLayout()); I don't think you need to create that many panels. The root pane of your window acts as *your* outer panel already and the only controls you would need to put into a separate panel are the JTextField and JButton to get the desired layout. So basically you could do the following: frame.add(title, BorderLayout.NORTH) frame.add(scroll, BorderLayout.CENTER) frame.add(bottomPanel, BorderLayout.SOUTH) to achieve the same layout. frame.pack(); frame.setSize(600, 400); This is a little redundant as setting the size of your window will in most cases undo the previous call to *pack()*. Also I don't know if your TextAreaOutputStream class will get more elaborate, but you could just as easily add the following lines to your main class: System.setOut(new PrintStream(new OutputStream() { @Override public void write(int c) { console.setText(console.getText() + (char) c); } })); Finally you're using static methods a little too much. Why not create a ConsoleView class that extends the JFrame class and create a proper object when it is used in other projects. It could be invoked like so: new ConsoleView().setVisible(true); [Here](http://pastebin.com/gW1JtYxz) is how I would have done it. Happy coding!
Well. *Maybe* he deserves a second thought. http://www.reddit.com/r/learnprogramming/comments/2jvho6/this_is_why_strings_in_java_are_immutable/clfg116?context=5
I've mostly worked all linux, though I've also done development on windows with no test/deploy environments. The dev OS is mostly based on what project you're on here. It's more important that your test environment mimic your deploy environment, assuming you know what the deploy environment will be.
Fixed that for you. package glenn; import fedora.*; public class HelloReddit { public static void main(final String[] args) { System.out.println("Hello!"); System.out.println("My name is Glenn Frasik, I'm a teacher of Java, as you can see (Java code)."); System.out.println("I mastered the language of Java and its various uses in society."); System.out.println("But I have a problem... you see I got this fedora.. but I have no friends with fedoras... all my students says it's ugly. They also don't like my humor."); System.out.println("I wonder if anyone here wants to be my fedora friend, we can talk Java and such because that's the only thing I know about... and fedoras... ofc...=)"); System.exit(0); } // You can find me on facebook and FindLove.com... my profile is Glenn4Hire //I tip it for you. M'Gentlemen }
We do almost all of our local development in OS X and deploy to Jetty on our CentOS machines for prod. OS X provides all the command line conveniences of unix and a nice UI, all of our tools play nicely with OS X as well. We've got a handful of test/dev environments that are near full copies of what we have on prod, except disk size / RAM may be slightly less. 
We judge people by their actions, not their words.
Do you deploy to paid versions of Linux (Red Hat etc.) or does Debian, Ubuntu LTS and others suffice?
At our company the devs use windows laptops for their personal dev environments, where all of our deployments (qa and production) are linux. I find Linux easier to administer for these deployments, which is why I prefer that over windows. As far as each developer's own machine, it doesn't really matter which they choose. As far as IDE's, we all use Eclipse but each dev is free to use whichever they choose. As long as it integrates with the source code repo, then that really doesn't matter either. 
You should never use anything else but RHEL/Windows Server for production environment (mainly because of support) unless you really know what you are doing. However, at work we have a number of servers used for internal testing and development running CentOS because it is as close to RHEL as you can get.
Anyone who uses Juniper or Cisco AnyConnect VPN. 
There is [Spring Data JPA](https://blog.openshift.com/restify-your-jpa-entities/). But it must be configured with Java code. Interfaces, annotations and JPA. It uses REST, not SOAP, so no WSDL. But it is HATEOAS and gives you HAL.
We have several Java developers at work. I use Win7, another colleague uses a custom Linux distro and yet another uses Mac. I have a local Glassfish-installation for quick testing. Our production servers are RedHat Linux so we deploy to Linux. You have to make sure to code platform independently if at all possible. For instance, don't use "\" as your path separator, but use File.pathSeparator.
Do you find you use tools the typical unix tools outside of what Eclipse provides? Do you standardize on a Linux distribution? Does paid support matter?
Interesting ! I will look at the article. But as you said it is configured with Java I'm looking for something that is configured via UI. 
 throw new IllegalStateException("wtf is this?")
It's a mixed bag. Some Java, some flash, some html5...
This might be of interest then: https://plumbr.eu/blog/most-popular-java-environments-in-2014
That's a very good point. I've encountered a lot of odd CSV files over the years. It would be nice to have a corpus of weird-but-valid and weird-and-invalid-but-common CSV files (semicolon as delimiter and comma decimal separator being the most common) to see how the parsers handled them.
If you have genuinely good systems administrators on staff you can use whatever they like. You have to make sure you don't lose them but they are going to support you far better then another company ever will. We use Ubuntu without support and it works fine. 
Yes, this as well hence the "unless" :) @enlighten_andrew : This is really about your or your client's preference. I suggest you look into all of your options, incl. budget, and pick one which suits your needs best. However I would not recommend using Ubuntu for servers because it is pretty heavy, try Debian instead :) 
I use XUbuntu with Netbeans for the IDE and jVi. We deploy to RHEL hosted on Rackspace. I work with some guys who use Macs and 1 who uses Windows 7. As long as it builds and deploys on our application server, it doens't really matter... It's a matter of whatever you're most productive on. The Linux environment for me is more productive because of the command line and the fact that I've been working in it now for over 10 years. I also find that it's easier to ensure that certain java features like JNI or cases where you need to invoke a native command are better tested and developed on a system that works the same way as the deployment target. Support isn't an issue for the developer workstations, but support is something we care about for our servers. We've never had a support incident with Red Hat, but it's nice to have it. 
OSX/Linux is ubiquitous in tech-based companies, in my experience, specially since 5 years ago or so. If I find myself restricted to Windows', I'd rely on VMs. Linux as deployment environment is a must, considering web-based development. Windows filesystem (named, file locking) and service management can be troublesome as opposed to running "nohup" and tailing logs in linux, for instance (I can't picture troubleshooting a Java app running in a windows server, a devops nightmare...)
Isn't the upcoming Android release supposed to support Java 8?
Yes. Preferably instead of the pointless JSON API. We already have two fantastic well-adopted JSON API's in the community (Jackson and GSON). 
I use ubuntu for my desktop, and we deploy to some different debian targets. It helps to keep the development and deployment env's similar in my experience.
Is it? I know you can do trickery right now to get some java 8 features such as lambdas, but it is hackery at best. I haven't seen any announcement for Java 8 support. I don't know that we will see it just because of the current oracle / google legal battles.
Just be happy with Java 7 support, you know how long it was on 6?
Sounds too early to use and is just a meta-compiler. "The Final Evolution of the Database" is just hyperbole.
Every job and client I have worked for uses Windows for both development and deployment. When I have searched for jobs in my area Windows is dominant with a little bit of Linux and OSX barely registers.
And those deploying to WebSphere. The latest version supports Java 6 and 7 but defaults to 6. So yea
Develop on Kubuntu. Deploy on Amazon AWS with headless Ubuntu. --- Used to deploy to RHEL instances; but I dislike CentOS so much that I have moved us to Amazon AWS and have never looked back. --- I do not like Windows for development, ant/maven issues always manage to creep up that are caused by CMD and their weird path issue (yes you can use cygwin and git shell but at that point what are you getting from Windows that you do not get from linux?) I usually run VirtualBox and install linux VM and allocate max resources to it and use Windows as a dumb host (this is where IT does not allow anything else). --- YMMV
since you are just starting out, you should pick a flavor of linux and go with that, it will make you a lot more marketable in the future if you have linux experience and java (since most likely you will be deploying to linux). Get VirtualBox (it's free), download an ISO file, create new VM and point it to the ISO file, it will install the OS in a VM on whatever OS you are on, try it out and see if you like the distro, if not try another distro. It's that easy. I recommend Kubuntu if you are coming from Windows, Xubuntu/Lubuntu if your current machine is a bit slow. Fedora if you prefer the CentOs/RedHat feel. Try a few and see. Try OSX if you can afford a mac, they are nice too. I would also recommend IntelliJ as a dev env, it's really nice once you learn the shortcuts. I use both IntelliJ IDEA and eclipse at the current place and having compared both I notice many shortcomings of eclipse which IDEA just does not have (especially if you are planning on developing web applications). I used eclipse for about 10 years before I tried IDEA and don't think I ever want to go back unless I have to. But you may like eclipse over it. Try them both, see which you like.
This survey - who was surveyed and what is the error rates and confidence intervals? Does this thing even represent an unbiased sample?
Have you looked at Scala? I've heard their is tooling for android, but am not sure if it's worth the time.
Latest versions? You lucky dog. We'll be on WebSphere 7 until IBM officially EOL's it. 
Wasn't really sure what to say honestly. Unfortunatly, the creative guys are in charge of the look of the website. I definitely gave them the above opinions (which i share) but can't promise that the font is going to change. Had there been any spring batch related questions I would have been much quicker to answer.
reminds me of this guy http://www.welovetheiraqiinformationminister.com/images/07-minister.jpg
Hey thanks for responding. I had a virus on my pc. When i cleaned it everything went back to normal. Apparently it corrupted exe files and made them work incorrectly. Thanks a lot
I have. Tooling wasn't there at the time. I do most of my work in android with maven so I don't want to become even less golden scenario. 
And we're just sitting here with Java 6. Streams would make my life so much easier. T_T
WebSphere 6.1 checking in. *cries*
Java 7 is only for the lucky ones that wish to ignore 4.3 and below customers. The other ones still have to live with try/catch/finally boilerplate.
I feel your pain. This year I transitioned from a project using SpringMVC/JBoss/Java 7 to Webspere 6.1/Java 6, after being free from Webspere for 3 years. The pain... Luckly it was just one month long.
I used Android studio with the Scala plugin, scala Android gradle plugin, and of course gradle. It's pretty easy, just create a new project template normally in Java, add a few lines in the build.gradle file, and you're done. If you already have an Android java project, you can even port your project class by class. The interop is really good. You can mix java and scala code in any proportion.
Sorry, I don't think it'll catch on...
I feel your pain, mate. Working for big companies... they take so freaking long to move forward. If only I could use Java 7...
...And, fabienbk, I'm glad you brought up prevayler. One thing we realized is that we didn't want the focus of Hierarchy to be an object repository. Hierarchy does allow you to store Java objects, but we wanted to focus on really being a database replacement, meaning it's focus is more on storing what you'd typically databases like strings, integers, ints, and booleans (but also allow you to store things like Date and TimeStamp objects and some of your own custom objects). The reason is we find we didn't need to store application objects in the persistence that much, and what we really needed was to be able to work with standard content and data in a transparent manner with almost no regard to performance. Thanks ps - In an aside, we believe this is also what is hurting the NoDB movement. They should focus on being database replacements, not object repositories whose performance and usability is only okay when working with data (as this is the most important use-case). And please provide your own thoughts on this! 
Same. I think this dev/deploy split is very common. Dev on OSX and deploy to an Ubuntu image running at EC2.
I think, that for lack of a better set of words, your idea is dumb. Specifically this whole "meta-compiler" idea. There is a reason that when other people write a jvm language, it compiles to java bytecode. The problem with your meta-compiler is that exactly one person can do that. If any other library also used a meta-compiler, they would be completely unusable with one another, because one of the meta-compilers would see the other's syntax as invalid. You should write a library. Yes, its sad that java doesn't allow operator overloading, but if you want to gain serious traction, dump this concept of "we made our own language". Consider the counterpoint of jOOQ. jOOQ is a DSL for querying that lives inside of java perfectly fine, yes, there are issues with a lack of operator overloading, but concise and expandable syntax, combined with a utility class made to be statically imported solves that.
Coming from someone who works mainly in C#...Streams will make your life so much easier, until they make your life harder. Not to say I don't love my Generic Collections and LINQ, but there's a learning curve before you don't constantly murder performance, or accidentally side effects in your deferred execution or something nasty like that.
query.addCondition(marq.column(marq.creationDate).month().is(3)); How the fuck is this better than SQL? This seems like a pretty half-assed pseudo-ORM.
Hey, spammer. Go away. sincerely everybody
Interesting feedback RogueFighter, thanks for the input (really). Yes, I too wish Java had operator overloading for my situation, it would have made everything easier. But... ... In practical terms, meta-compilers can be successful because they are very rare as they are tough and lots of work. Having such almost no competing products means that the chances of a dev needing to use two for the same language are pretty small. And, there is a model for metacompilers being useful as one that comes to mind, as you may have thought of, is CoffeeScript. Also, the hope is that also Hierarchy can be an inspiration for mainstream Java. the JCP moves so slowly (only now do we have Lambdas) that there needs to another organization pushing the language forward without all the corporate bs. Thanks for the feedback, appreciated.
Oh, and actually RogueFighter, we considered using the techniques of Domain-Specific Languages (DSL) and we still find them extremely interesting. But the reason Hierarchy did not use them is the realization that for things that are actually _less domain-specific_ (like data), we felt this need to be promoted to and would be better served as a full part of the language. Also, I'm not an expert at jOOQ, but from my understanding of it, it really is a variation of LINQ, which is also following the same belief (with a different solution, focusing more on query) that data needs to be apart of the programming language. Thanks
Everything on unix is Ant-driven, and w have a handful of cron jobs that start up some standalone java apps for various purposes. If we wanted to switch our deployment environment to a Windows box it wouldn't be much of a hassle at all. At that point it's just a matter of which kind of environment will it be easier to maintain and monitor. For me, linux is the best candidate.
Udacity dot com - Java is awesome, it has a real professor from an accredited university and you don't have to pay for anything. I am on lesson 2 currently and learning a ton - including projects. It costs NOTHING to use this online resource. At the same time I am also using the Java for Dummies book - the dummies books have fantastic reviews especially for beginners like us. The Udacity course also covers some things that most people fail to teach beginners like: how to setup a problem, think in terms of the way code will execute and organize your problem into chunks and individual steps. This thought process has been invaluable and the main thing that has been missing from all the other courses. 
thanks for this!
I'd say a prayer for you, but it is clear that the gods have turned their sight from that forsaken place. 
It'll be interesting to see if this is updated for JDK 8 or not. (I know for a fact the Java textbook from college I have doesn't as JDK 7 was the newest version then so if this covers JDK 8 then I'll be very happy.)
This thread has been linked to from elsewhere on reddit. - [/r/mistyfront] [Why does everyone hate Eclipse? (/r/java)](http://np.reddit.com/r/mistyfront/comments/2jywdl/why_does_everyone_hate_eclipse_rjava/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
The book is from 2009, so it's not yet updated. The JDK version, the the Author refers to is: JDK 1.5.0_04. The Author uses BlueJ and JCreator as IDEs.
Why people try so hard to avoid SQL? SQL isn't bad thing at all if you work with relational DBs. Personally I prefer such things like [MyBatis](http://mybatis.github.io/mybatis-3/) - everything is under you control and you have the whole power of SQL.
The most practical way forward was to extend the existing MVC framework in Java EE (JSF) with action-oriented capabilities. This already happened in JSF 2.0 and JSF 2.2, and they could just continue that trend. More than a few people suggested this, but they just HAD to go forward with the separate second framework. No matter how good this second framework will be, having two frameworks in one stack that do the exact same thing is really confusing.
Thanks, never is to late to learn something new :D
Assuming [this site](http://www.bluepelicanjava.com) is legit, it looks like they don't care...
I think there's a philosophy that having an entire project be in one programming language is best. We try so hard to force different technologies together that sometimes we end up making more trouble for ourselves. Look at how popular NodeJs/Angular/MongoDb is because you only have to use javascript and JSON. The problem is we end up losing a lot of the strengths of things like SQL because we want everything abstracted away. 
Does anyone run some Linux distro under Virtualbox as their development environment? I need to use Windows Office tools quite much and I've tried this option but I'm struggling with performance issues. Virtualbox 3d acceleration with Ubuntu seems to be impossible to get working with my setup. 
Develop Scala on Mac, deploy to ubuntu. We have many many test environments. A set of 8 for different feature teams to work with. A QA environment. A load test environment, and then of course production. LT is as close as possible to Prod. Whats cool is that we can move hardware from LT to prod when necessary because of this. 
&gt; The book is from 2009 [...] JDK 1.5.0_04 Now we know why it's free ...
Collections and Generics were introduced with 1.5 so except for Lamdas you're not really missing out that much.
The type setting and formatting of the code examples are a little off putting IMHO. Other than that the Chapters about data structures (hash maps, linked lists, binary search trees, etc.) seem pretty good.
We develop, among other things, three cross-platform (Win/OSX/Ubuntu) Eclipse-RCP-based products. We develop primarily on Windows, but will often use Eclipse on OSX and Linux for various reasons. We use Bitrock Installer for packaging because it can run on all platforms and target all platforms, so each of us can produce installers locally via our Maven build. We recently migrated our CI server from Windows-based Jenkins to Linux-based Bamboo with few problems. We are obviously using Eclipse because our products are based on it, but it does provide a very consistent environment across platform, which is very useful when creating cross-platform products with UI.
PDF version for answers is not available anymore ( hard copy only), anyone happens to have it ??
Check out [Yank](http://xeiam.com/yank-example-code/). You can create a properties file with your SQL statements such as: BOOKS_SELECT_BY_TITLE=SELECT * FROM BOOKS WHERE TITLE = ? And call via Java: public static Book selectBook(String pTitle) { Object[] params = new Object[] { pTitle }; String sqlKey = "BOOKS_SELECT_BY_TITLE"; return DBProxy.querySingleObjectSQLKey("myconnectionpoolname", sqlKey, Book.class, params); } There are other methods to return lists as well and the `params` variable can be filled with any number of values. the question marks in the SQL statements get populated with the values dynamically (prepared statement). With some modifications, you could create a generic method that takes any SQL and params and executes it. Good luck.
1 - looks like query dsl, how does it compare to that? 2 - what's wrong with jdbc and sql?
I can write hibernate queries pretty damned fast compared to writing queries and resultset mappers. For easy CRUD operations, it's great. For more advanced operations I will use jdbc cause hibernate can blow at those.
if you google "java &lt;class&gt; source" it shows up
yeah, it's just text. And databases are consistent, centralized storage systems that we use to store every other piece of data. I'm sure you can work out a table which stores those sql queries which can be accessed by some other sql queries which probably wouldn't need changing.
What do you (or other users) miss from security features? Constant problems with security come almost exclusively from applets ...
Are you going to code the parameters directly, or dynamically generate them? The key point here is that when your DBA makes a new query, are you going to do any coding to make the query "live"? I store most all of my queries in a .SQL file in the file system, and load them up at runtime, but most of my code knows about the parameters already and simply loads the SQL, sets the parameters, and executes the query. I don't do this because I have a DBA writing my SQL, I do it because I can open the SQL file up (inside the IDE) and run it directly with zero extra formatting. Any tweaks to the query are saved to the SQL file so I'm not copy-pasting changes. 
Thanks!
Android does not have a lot of the Java 8 language features yet so keep that in mind. The biggest issue with Android development though, is that you have to remember you are working with a resource constrained embedded device. Server java can create and GC many small objects for nearly free. Android on the other hand incurs huge object creation and GC penalties. The place to start Android coding would be here: http://developer.android.com/guide/components/fundamentals.html
accessing databases is trivial and it provides a central place to store them. And databases are well managed, understood, backed up systems. Better than passing a file around. I get where you're coming from-- I'm sure in school or some book it said to not have tests depend on some external systems-- but ideals are great and all to talk about, but sometimes not practical in reality.
SQL seems to require a level of intelligence and ability that falls beneath your average enterprise coder. So architects love these things that "remove" SQL from the picture. I guess it will work for 90% of cases, and then use SQL for the other 10%. It's the same reason there is no enterprise coding in Lisp or Haskell.
And now it's downloaded to my phone. Not what I wanted.
Braces can you your friends, use them properly. Since no braces are use to create a block only one line is seen as part of the `if` statement: if(Type.equalsIgnoreCase("offensive")) System.out.println("Which is your favorite: shotgun, bazooka, or flamethrower?"); // The following is no longer part of the `if` statement: String Gun = scan.nextLine(); You last `else` is not attached to any `if`, hence your error.
Your "String Gun = scan.nextLine();" like statements need to be inside the curly braces. Specfically, swap lines 5 and 6, 13 and 14, and 21 and 22 and it should work.
Your curly braces are all in the wrong places. The opening curly brace should be **after** the condition of the **if**, not before the entire **if** block. import java.util.Scanner; public class Teaeffteu { public static void main(String args[]) { Scanner scan = new Scanner(System.in); System.out .println("Do you like to play an offensive, defensive, or support class?"); String Type = scan.nextLine(); { if (Type.equalsIgnoreCase("offensive")) { System.out .println("Which is your favorite: shotgun, bazooka, or flamethrower?"); String Gun = scan.nextLine(); if (Gun.equalsIgnoreCase("shotgun")) System.out.println("Your class is\n :: Scout ::"); else if (Gun.equalsIgnoreCase("bazooka")) System.out.println("Your class is\n :: Soldier ::"); else if (Gun.equalsIgnoreCase("flamethrower")) System.out.println("Your class is\n :: Pyro ::"); else System.out.println("NEIN, follow directions"); } else if (Type.equalsIgnoreCase("defensive")) { System.out .println("Which is your favorite: grenade launcher, minigun, or sentry?"); String Gun1 = scan.nextLine(); if (Gun1.equalsIgnoreCase("grenade launcher")) System.out.println("Your class is\n :: Demo ::"); else if (Gun1.equalsIgnoreCase("minigun")) System.out.println("Your class is\n :: Heavy ::"); else if (Gun1.equalsIgnoreCase("sentry")) System.out.println("Your class is\n :: Engie ::"); else System.out.println("NEIN, follow directions"); } else if (Type.equalsIgnoreCase("support")) { System.out .println("Which is you favorite: medigun, rifle, knife"); String Gun2 = scan.nextLine(); if (Gun2.equalsIgnoreCase("medigun")) System.out.println("Your class is\n :: Medic ::"); else if (Gun2.equalsIgnoreCase("rifle")) System.out.println("Your class is\n :: Sniper ::"); else if (Gun2.equalsIgnoreCase("knife")) System.out.println("Your class is\n :: Spy ::"); else System.out.println("NEIN, follow directions"); } else System.out.println("NEIN, follow directions"); } } } You should get used to proper Java formatting and indenting. This avoids most of the errors related to placement of braces. 
Please don't deploy to windows! Crappy automation, crappy update processes, crappy administrative ability, overall just a crappy experience. I prefer Ubuntu LTS and while I don't think it's necessary in most cases, it's nice to support canonical if you want that insurance policy.
&gt; When I have searched for jobs in my area Windows is dominant with a little bit of Linux and OSX barely registers. It's the exact opposite as far as windows/Linux on the west coast. Linux servers are by far more popular. While OSX barely registers for target environments on the west coast, it's used as a dev environment quite often. 
stored procedures are the answer a DBA would tell you. That way if the table changes , he as only place to update and all clients will get it. you would then just pass parameters to the SP.. so no real logic lives in your code. JPA using hibernate is another solution that was a pretty easy to use
It be great if you can add the feature to the open source h2 console (the server console that can connect to any database not just h2) and contribute back. It does a decent amount of the work you probably want to do.
There are even coding Guidelines for Java: + [Oracle Java Coding Conventions](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) + [Google Java Code Guide](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html) The above are the commonly accepted code standards. Especially, the placement of curly braces is important. Generally, the true and false parts of **if** statements should always be encompassed in curly braces even if there is only a single statement in that block.
... and, to answer you bigger questions. First, Yes, we haven't had time to add in support for Eclipse or IDEA yet. And, we agree, this is critical for something like this to be successful, which is why we need further funding (on our "Join" page of our website, Eclipse support is listed there as one of our future dev tasks) Dealing with our database claims, again, *good catch.* On the intro page, it should read "This *will* make Hierarchy both the easiest and one of the fastest database-solutions in the world" (as it is only a work in progress). We'll fix this. And, sorry we didn't have time to back this claim up on the website, too many things to take care of. But, the reason it will be "*one* of the fastest" is because not only will it be an In-Memory DB, it will be one with the least amount of overhead, because you don't have to go to a separate process, grab your data, and copy it back it. Since your data is already in your application, all that overhead is gone. Again, (as we say on our website) this is definitely a future claim as our persistence is in no way production ready. We need a lot more help from the open-source community on persistence (this is why we're running the Kickstarter right now, to gain more funding). Urquan, again thanks for point these all out (truly). If you notice anything else we need to address, just let us know.
It's not really so much as avoiding SQL as trying to address the mismatch between relational and object-oriented models. The problem is that you have two representations of the same model stored in completely different ways, and changes on each side have to be synced with the other. You take a projection of rows from the database and map it to a bunch of objects, and then you change those objects. Modify object fields, add objects to collections, remove objects from collections, etc. In order to sync the object model back to the relational model, what is the full set of INSERT, UPDATE and DELETEs that you have to do? SELECT is the easy part of ORM and the least important part. Thin wrappers like DbUtils can easily map result sets to objects. However, the ORM session keeps track of the changes you make and calculates the correct updates when you flush the session. That is the tricky part. DbUtils won't help you there. You can sync by hand or you can use an ORM to automate the process.
I've been actively looking for people to work with, and not one has followed through I'm not sure what I'm doing wrong because i'm just looking for people to work with. I have no clue how this is spam, I've been actively looking for people all over the web yet not a single person has been stable enough to help please do not ban this post because i'm in desperate need of help on this project.
all i'm trying to do is connect with others that would be interested in the same thing and it's an extremely small field to begin with. If you know of where I should ask please point me in the right direction 
You have made 3 unsuccessful attempts at /r/Java and some other in some other subreddits. This should tell you enough. Either it's the task at hand, or it's because of your lack of willingness to participate in reddit. If you are not known to the reddit community, people tend to ignore you. So it works as a two way process: you give to the community (by helping, commenting, posting, etc.) and you get from the community. For now I keep the post removed. Give to the community, participate actively, and we will see.
you guys should try posting over at /r/hadoop too.
All I've been doing this year is try to find a programmer. Is that so hard to ask. I just need one other person than myself to help out yet it's not happening. People have started but got busy working on their own projects. Not the scale of mine. Is it really that hard to find one other person to help me with this. Please I'm asking can you unblock this I've been looking for so long and need help just one person. 
There have been so many question asked on this sub about the exact same thing. I recommend you try each for a week and see which one you like best. For me, I like IntelliJ. 
Ah not this again.. 
Okay, one last chance. But I have very little hope that you will have any more success than with your previous posts. After all it's the same people reading it. No matter the results, this is your absolutely last chance.
You might not be on Reddit every minute of every day, but you could just search for previous threads to find your answer. It isn't like there is a shortage of them.
What a stupid question. We already know the answer is vi-macs, duh!
Still learning, thanks for the advice :)
That was exactly my opinion 3 years ago. Personally I think it the most successful and proven language in computing. Unfortunately, for whatever reason, a lot of programmers just don't like it. 2 years ago I started into a large, complex, beautifully designed, but pathologically named database. That workload and schmea were too much for me to cope with in SQL so I looked for an alternative. None of the database abstraction layers worked as I liked so I wrote my own. It literally saved my sanity. Hopefully it'll help someone else too.
You should include more information. Your post basically reads as "Hi, I have this huge project idea, and I need people who will do work for me." Some example questions you should answer (and you should think of more): - who are you? How experienced are you? What references do you have? What technologies and languages do you know and to what extent? - what are you actually trying to achieve? - is there any (semi-)formal specification or concept for the project? If you can not answer this questions properly, no one will even try to work with you. YOU need help - why should I bother asking you HOW I can help? If you can answer the above questions s: - how many people are you looking for, and for what exact positions? - at what state is the project currently? - what's about licensing and the final product? Open source? Commercial project? 
The aim is to produce a database abstraction layer implementation that avoids: magic strings, XML, generated code, and as much SQL syntax/thinking as possible. Most products suffer from at least one and usually several of these. Proactively the implementation should allow the IDE to help the programmer as much as possible, all essential configuration should be easily available, and reasonably safe from errant fingers.
A Java developer is not an android developer. It's one thing to know a language, but it's a whole different thing to understand and know how to use a framework. I'd suggest picking up a book specific to android. 
Single table SELECT is a relatively easy part of the process, but it becomes very complicated when you try to write SQL that works for all databases and includes joins, outer joins, row limits, expressions, etc. A good programming tool should make all the complexity disappear so the programmer can focus on the unique aspects of the project.
hi I'm Scott Keutzkamp, I'm currently a student at college for creative studies in Detroit studying animation. I have been teaching myself programming for a year or two now and am mainly a technical artist. focusing in unity and aniamtion. A year ago I took on a project that incorporates augmented reality. It was fun and enjoyable. Ever since then I have wanted to utilize augmented reality into our daily lives as a replacement for the screens we use today. to do this I need to create an operating system that scans the environment and creates augmented content in our daily life. here is a small video for proof of concept along with some demo pieces I have made myself using vr. https://www.youtube.com/watch?v=TycBm5Mu2_A https://www.youtube.com/watch?v=EZplFLuxXac https://www.youtube.com/watch?v=4BA9Vdo87xc video of concept https://www.youtube.com/watch?v=nnHLhNPYh14 I need programmers that can help with communication between devices as well as can program for games and UI we will need about 5 programmers to begin with for a kickstarter project. This product will be for Commercial use once we get the funding if you would like specifics on hardware and api used we can discuss this once you're on the team otherwise I cannot share said information with you. 
the last time i posted something like this I was flagged as spam so i stopped posting in such detail and gained many more people responding to the post. 
I'm no expert, and still learning java myself. But as far as reddit goes you'll probably get more responses in /r/javahelp. Hope you find what you're looking for! :)
What about JAAS? I am using it in a new application and find it is a decent solution. There are things that could be better but I found it easier to work with Spring Security or Shiro.
Thanks :) 
JDK 5? Ouch. Yeah, the textbook we used for my intro Java class (written by Y. Daniel Liang, we used the 8th edition of the book but I'm pretty sure a 9th edition exists as well as we had to all ask our Advanced Java professor to please use the old edition so we all didn't have to THEN go buy the textbook AGAIN).
Seems to be a weaker version of jooq. edit: didn't want disrespect, I should have said, seems like a clone of jooq.
Your best friend: http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html
... btw Urquan, the website text and image loader have been fixed (the image loader has been disabled). Also, I forgot, but in the Benefits page, it describes why the performance of Hierarchy will be "one of the fastest" - this text already existed, but I also tweaked small amounts). Thanks
Where did you get the setup file? I recommend you download the setup again. 
More importantly (in my opinion), the truth is that since you're still talking to a relational database, you're not actually gaining anything. In the end, you're still going to need to learn sql. So why go through the hassle of learning a frameworks way of doing it and also learning sql on top of that? I like tools that automate repetitive tasks like copying sql results into objects. But I just don't see that there's anything gained (and instead additional issues are created) by trying to not use sql, when you're just going to end up having to learn sql anyways.
What you are looking for is [Type Inference](http://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html) final Stream.Builder&lt;String&gt; builder = Stream.&lt;String&gt;builder(); or, as per your other requirement: final Stream.Builder&lt;List&lt;String&gt;&gt; builder = Stream.&lt;List&lt;String&gt;&gt;builder(); This is one of those obscure Java specifications. Edit: good question by the way! I found it hard to come up with a way to demonstrate the usefulness of type inference, but I'll definitely use this now.
Beautiful, thanks a bunch. I was trying Stream&lt;String&gt;.builder and failing. I didn't know how to go about invoking a generic method. Cheers.
Except I know senior developers at a national research institute that "try to avoid that". The horrible reality of programming is that not many coders wants to use SQL so they need something else. Something that doesn't even look like SQL.
try downloading again or from a different source.
In case OP's link was not Oracle, here are the proper links: JRE 8: http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html JDK 8: http://www.oracle.com/technetwork/java/javase/downloads/index.html If you install the JDK instead of the JRE, you have the advantage that 1) it won't nag you for updates (Though it's a matter of opinion if that's an advantage.), 2) it will not ask you if you want to install the Ask Toolbar (It's not contained.), 3) it will not install the browser plugin (the only reason people think that Java is insecure; some people want/need the plugin, though). ... If OP's download link was proper, maybe there's some software that tampers with their data transfer or their downloads. Maybe it's just an antivirus-gone-wild issue.
I don't have a polite response to that, it sounds like an overeager sales rep to me.
The forced specification of the generic is generally only required when you are using a complex generic specification, i.e. List&lt;String&gt; rather than String. This is to do with Java's type erasure specifications. To reiterate, if you use, StreamBuilder&lt;String&gt;, Stream.builder() should infer the proper type, but Builder&lt;List&lt;String&gt;&gt; looks like Builder&lt;List&gt; when it tries to infer, thus defaulting to Object. I think that made sense...
Old account burnt, new account with almost the same name? I don't even. http://www.reddit.com/user/Sukanth (Spammer.)
If you have a collection of `Object`s, they could be any kind - `String`s, or `Animal`s, or `Cat`s. Lets say you are looking at a particular instance - Java only knows it is an `Object`, but not which kind: Object iKnowItsAnAnimal = ...; If we know it is an animal (with the `move()` method, lets say), but Java doesn't, we can't call `move()` on it - we would get an error. But, if we tell Java "trust me, I think this is an `Animal`, let me call `move()` on it: Animal animal = (Animal) iKnowItsAnAnimal; animal.run(); Now it is legal. ---- We don't always need to cast to treat it like a different object - if we are calling `Object`'s `toString()`, we don't need to upcast. We only need to cast to get to a *more* specific type, never a less specific type. (That said, its not actually an error, its just not required). ---- Finally, there are invalid casts. We know, for example, that `Cat` is a subclass of `Animal`, and *not* a subclass of `String` (the `String` class is `final`, so cannot be further subclassed). This, Java will not permit us to cast from a `String` to an `Animal`, etc.
The dev kit zip archive is invalid : &gt; $ ls -l "Hierarchy_beta2 - v1.00.06.zip" -rw-r--r-- 1 urquan urquan 1428756 Oct 23 05:36 Hierarchy_beta2 - v1.00.06.zip $ unzip -t "Hierarchy_beta2 - v1.00.06.zip" Archive: Hierarchy_beta2 - v1.00.06.zip End-of-central-directory signature not found. Either this file is not a zipfile, or it constitutes one disk of a multi-part archive. In the latter case the central directory and zipfile comment will be found on the last disk(s) of this archive. There is also no licence at all that I can see now, note that legally the absence of a license means that nothing is allowed. You should put the licence of your choice in the github repository as well, at the root so that we can know right away what we're dealing with. Talking about the github repo, the last commit was done on Oct. 23, 2013. Why the Kickstarter now ? &gt; the Benefits page Ah, I had missed this the first time around. So the persistence layer does not exist yet then. The main selling point of your project is that "It extends Java with a new language for persistence!" with the caveat that persistence does not work. What can I say, it's a bit disappointing. Thanks for taking these comments the right way, there's sometimes a fine line between being honest and being rude, I try not to cross it too much.
 Say you have a generic function from an abstract class that serves to return a value that you don't know of yet. For instance, in a hypothetical vetinary class you have a function that returns a certain pet: public Pet getPet(){ return this.pet; } And you can call this method from a different class where you know you will be getting a Cat returned from getPet() So this is where you cast the Cat object as the returned value since you want to be able to call cat only methods on thisCoolCat. Cat thisCoolCat = (Cat) VetinaryClass.getPet(); So at this point you should notice you have a generic function that returns a Pet but since you casted Cast to the getPet you'll be able to have better control of thisCoolCat since it is a Cat instead of only a Pet which was originally declared. Hope this makes sense, I'm on my mobile so it's hard to type but let me know if this is clear or not. 
And the next one is already here: http://www.reddit.com/user/byron78
\#2 only applies to the online installer. If you download the full offline installer, it won't have Ask. The path is from java.com: download, offline, all java, and choose windows offline. [Here's the page](http://www.java.com/en/download/manual.jsp).
I think I understand the last two points you made but not the first. Casting should be used when you have a collection of objects you defined because Java does not know what type it is?
I would say that that is kind of bad design, much better to try to keep it type safe with generics. Something like this: VetinaryClass&lt;Cat&gt; vetinary = new VetinaryClass&lt;&gt;(); Cat thisCoolCat = vetinary.getPet(); A more resonable example for when you need casting in real life in java is when you are implementing old interfaces that came before generics existed, i think implementing the equals(Object obj); method is the most common. a standard way to implement it for the Cat class would be something like this. public class Cat { private String name; boolean equals(Object o) { if(o instanceof Cat) return name.equals(((Cat)o).name); return false } In most other cases where i encounter casts, it's just a effect of sloppy coding or lazy design of the program structure.
You can always ask questions in /r/Javahelp. Before you post there, please read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) and probably use the search function to see if other people have similar questions.
java ee is roughly equivilent to asp.net. IIS server is the web server that youll use if you go the full MS stack. its comparable to glass fish etc. razor + cshtml files are used for html templating and is comparable to JSPs. there are two types of controllers MVC controllers that generally hook into chstml files to create web pages and Web Api controllers which are usuallyused w/ webapis(obviously) go download the free version of VS and create a sample project. you will feel right at home. C# is a fantastic language
.NET is a huge C# framework by Microsoft. MVC for frontend, Web API for REST, Linq for ORM... tons of other stuff for other tasks. Typically C# web applications are hosted through Internet Information Services (IIS), Microsoft's web server, but there are tons of ways to build standalone web apps that use native .NET functionality. 
for ORMs you can either go the fat orm route with Nhibernate or if you like writing the SQL your self with just a touch of easy model binding check out dapper. i like dapper a whole lot
asp.net has two possible ways of writing controllers. Eirth you go with the "MVC" controllers that tie into CSHTML files for server side html templating or you use you use "Web Api" controllers if you want to to go the RESTFUL + JSON thing. technically they are two entirely seperate MVC frameworks that both run inside asp.net which runs on IIS servers(microsofts web servers). although technically you can "self host" asp.net and run it as a stand alone application.
If you are new to Java then choose NetBeans ...
Here's to unexpectedly learning something about a method I've used time and time again.
Awesome! I think I've got a pretty good idea what's going on then. Just to double check, for me to then get going with web development in .NET I'll need the following: 1) Windows Operating System 2) Visual Studio Express 2013 update 3 for web 3) IIS 4) MS-SQL ....? Btw, why gods green earth is visual studio a 4.4GB download??
Create your JFrame as usually, except add myFrame.setUndecorated(true); somewhen before setVisible(true); because this has to happen before the Frame has ever been made "displayable". An example: http://kodejava.org/how-do-i-create-undecorated-frame/
Thank you, always great to hear! We're actually looking for another developer to join the project too, so if you're interested you could contact Per. His contact info is on our [contact page](http://sparkjava.com/contact) :)
I'll try to address this point by point: * magic strings – you mean as in SQL/HQL/Query Strings? Note that those are shorthands (which will get you quite far with a small amount of code) but there are other options (e.g. JPA's CriteriaQuery) * XML is not really necessary these days, or only for setting up the data source * generated code is a useful optimization technique. What is your motivation to avoid it? * SQL syntax/thinking – as in relational thinking? So are you going against the grain of the relational database? Again, what's your motivation to do this?
Virtually all web frameworks will automatically route simple end points.
You may want resharper, from your friends at jetbrains.
OP did say 'practically' and I think Spring did open up the majority of minds to the idea.
Ok let me try :] First of all, Java is "statically typed". Which means before we can run a program, the compiler needs to know the type of each and every variable we're using. We have to declare it explicitly: String word = "word"; Cat stimpy = new Cat(); etc. If we were later to try something like `stimpy = word;` the compiler would give an error because the type Cat is incompatible with String. We also cannot cast String into Cat and vice versa, the compiler will yell "inconvertable types" because these types, in fact, are completely different and not at all related. But what is "convertable" then? See it gets a bit tricky when you use inheritance. Let's say we have two subclasses of Cat - Tiger and Munchkin (omg they're so cute). Then the following statements become legal: Cat tiger = new Tiger(); Munchkin cute = new Munchkin(); tiger = cute; A few things happen here. If you noticed, `tiger`'s _static type_ - the type we declared on the left - is `Cat`, which is a superclass it extends. But it's _dynamic type_ is Tiger, in other words, the type of class we're actually instantiating at run time. But guess what - Java will only find out about it - that's right, at run time. Until we run our program, the only thing compiler knows about `tiger` is its static type. Which means if our Tiger class has some added methods specific _only_ to that class, the compiler won't let you call them on `tiger` at all and you'll get a compile-time error. (In other words, calling `tiger.killAGuy()` will not be legal at all because Cat class doesn't have it defined). Hope this part is clear. Now you as programmer _know_ that `tiger`'s real, dynamic type _will_ indeed be Tiger when its instantiated. Which means whatever Tiger's methods you call on it will be implemented and working fine. So you _cast_ (or more specifically, "downcast" the `tiger` variable to its dynamic type at compile time by adding it in parentheses: Cat tiger = new Tiger(); (Tiger) tiger.killAGuy(); //legal But what happens when we assign a `Munchkin` instance to the `tiger` variable? Munchkin cute - new Munchkin(); tiger = cute; The compiler will be happy to oblige again but for a different reason. See casting only works for the line it's used, meaning it doesn't change the type permanently. So for all we care, the static type of variable `tiger` is still Cat even after we might have cast it earlier. And both Tigers and Munchkins derive from the same superclass, - and the rule is that _a sublass instance can always be assigned to a variable whose static type is its superclass_, either directly, or higher on the line of inheritance. It's called "upcasting" and it's implicit (you don't have to add parenthesis or anything, Java will figure it out on its own). All the following examples are implicit upcasts: Object o = new String(); //String derives from Object Car car = new Nissan(); //assuming Nissan is a Car subclass Cat kitty = new Lion(); , etc. But now we have our variable named `tiger` pointing to an instance of Munchkin. (ie, it's runtime, or dynamic type has changed, even though its static type remains the same type Cat). What happens when we want to call Tiger's methods on it now? Without casting, compiler will give an error (Cat's cannot `killAGuy()`). But what if we forget and cast it again to `Tiger`? tiger = cute; //variable typed Cat now points to instance of Munchkin (Tiger) tiger.killAGuy(); //oops The compiler will eat it up, but at run time you're going to get a `ClassCastException`. Which means "You lied to me! you told me your variable was of type X and I believed you, but in reality it's of type Y and they're incompatible. How could you?!" (Side question: why are they incompatible if they both derive from the same superclass? - Simple. They are _siblings_, not a parent and child. Sibling classes cannot be cast into each other. A child type is cast implicitly to its parent, and a parent can be cast explicitly to its child type, but if they are on the same level of inheritance or inherit from different lines along the way, those types are incompatible. **Well shit, why is it different from the "inconvertable type" error we mentioned above? Couldn' the compiler warn us this time?** - No. Because this time it doesn't know that at run time our `tiger` will point to `Munchkin` and not `Tiger` instance. All it knows that its type is Cat and we _can_ indeed cast Cats, which is a superclass, to any of its direct or indirect children. Read it a couple of times, it's confusing at first. Apples cannot be cast to Oranges but Fruit can be cast to either of them - but if in runtime your Apple turns out to be Orange you'll get an exception). So **to summarize** - _casting &lt;temporarily&gt; changes the static type of a variable that was declared to have some other static type_. And it will _only_ work if that other static type is either direct or indirect parent of the type of the variable we're casting. tl:dr - casting == "I know the compiler won't let me call child's methods on a variable whose static type is its parent, so I promise it that at run time that variable _will_ reference an instance of the required (child's) type". edit: a little exercise. Assume we do this: Cat tiger = new Tiger(); Munchkin cute = new Munchkin(); What about the following statements: 1) cute = tiger; 2) cute = (Munchkin) tiger; 3) tiger = (Tiger) cute; Will any of them work? Why or why not? And if not, will it be compile-time or a run-time error? 
Coding time! Now let's assume we have a person class like this: public class Person { private String firstName = null; private String lastName = null; public Person(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; } public String getFirstName() { return this.firstName; } public String getLastName() { return this.lastName; } } And let's assume we want to store that person alphabetically by its last name. So we could write an comparator like this: import java.util.Comparator; public class PersonComparator implements Comparator&lt;Person&gt; { @Override public int compare(Person p1, Person p2) { return p1.getLastName().compareTo(p2.getLastName()); } @Override public boolean equals(Object obj) { return obj.equals(this); } } Finally we will store this in a collection of type [ArrayList](http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html) like this: ArrayList&lt;Person&gt; addressBook = new ArrayList&lt;&gt;(); addressBook.add(new Person("Christopher", "Nolan")); addressBook.add(new Person("JJ", "Abrams")); addressBook.add(new Person("David", "Lynch")); addressBook.add(new Person("Tim", "Burton")); Now if we list the address book with: for (Person p : addressBook) { System.out.println(p.getLastName() + ", " + p.getFirstName()); } we'll get an unsorted output: Nolan, Christopher Abrams, JJ Lynch, David Burton, Tim But luckily collections do come with a sorting mechanism. All we have to do is providing the logic for comparing two items: addressBook.sort(new PersonComparator()); and we get a sorted output: Abrams, JJ Burton, Tim Lynch, David Nolan, Christopher Now with Java 8 you even can skip the step of implementing a [Comparator](http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html) and simply use a lamda expression like this: addressBook.sort((Person p1, Person p2) -&gt; p1.getLastName().compareTo(p2.getLastName())); Full [example here](http://pastebin.com/7Wd6S9Be). Note that there is a subreddit (/r/javahelp) for questions like these! Happy coding.
Regarding that last line in Java 8 you can write that even shorter as: addressBook.sort((p1, p2) -&gt; p1.getLastName().compareTo(p2.getLastName())); Because the compiler can infer the types of the elements from the collection itself. But anyways thats a great explanation of a comparator with an example.
Nice. I didn't even know that. Thanks!
&gt; ((Animal) animal).run(); //ugly but we're ok! Alt. method is: Animal.class.cast(animal).run();
http://www.ihateeclipse.com/
Even better: addressBook.sort(Comparator.comparing(p -&gt; p.getLastName())); edit: `List&lt;T&gt;.sort(Comparator&lt;? super T&gt;)` is new in Java 8. Use `Collections.sort(List&lt;T&gt;, Comparator&lt;? super T&gt;)` for older versions.
When you say &gt; You can implement the Comparator method on a class in order to enable alternative sorting or searching methods through the java library. Does it mean that one can define a new algo for sorting or searching through a collection? If that is possible, can you provide an example, please?
Wow, I had no idea that `String String = "bla";` (and the like) works! What the fuck were they thinking. Not only does this allow hard to fix coding errors, it's even entirely unnecessary: All variable or field names are to follow the `camelCaseFormat` (if they are not `STATIC_CONSTANTS`), all class names follow the `CamelCaseFormat`. This means that whenever a variable name happens to be identical to a class name, ideally a compilation error should occur. :( Good article.
I've yet to find a solution to the Ubuntu 3D acceleration problem, maybe they've fixed it in 4.18. I've managed to get Mint 17 to work. Cinnamon works with VBox Additions ISO, MATE works out of the box. Install them on a SSD if possible.
&gt; What about JAAS? JAAS is not the universal standard you think it is ;) See http://arjan-tijms.omnifaces.org/2014/02/jaas-in-java-ee-is-not-universal.html &gt;There are things that could be better but I found it easier to work with Spring Security or Shiro. Like many people, you may be calling something JAAS that is actually not JAAS. For some reason that I've never really understood people think stuff like web.xml's security-constraint, EJB's @RolesAllowed and the JBoss specific auth modes is all JAAS, but it isn't, really. JAAS is a low level Java SE infrastructure for securing your machine from untrusted code, e.g. for Applets. It barely exists in Java EE. security-constraint is Servlet, and @RolesAllowed is EJB. Both have nothing to do with JAAS. Some more pointers: * http://raymondkng.sys-con.com/node/171477 * http://java.sys-con.com/node/1002315
This is convention and not enforced by the compiler. You are free to camelCase your constants, create lowercase classes, etc. Enforcing this would have placed a burden on languages compiling to Java (e.g. DSLs/CompilerCompilers) – in the early days, there was no ASM. This restriction has stayed with us for backwards compatibility reasons. Anyhow, no one forbids you to run PMD or CheckStyle on your codebase.
Thanks for the explanation and also for the tips: Just installed the PMD and CheckStyle IntelliJ plugins, both of which work (which isn't self-evident). (Had the FindBugs plugin already, before you mention it.)
"Nice" to hear that I'm not the only one with this problem. Mint 15 worked pretty well too, but I got occasional crashes with it. Do you know if there is good Virtualbox Mint images available somewhere on the net? 
is "http://docs.oracle.com/javaee/6/tutorial/doc/gjrij.html" still valid, because it just cost me some IQ points? :( Magic strings are an anti-pattern. It's just embedding another language awkwardly in Java. This is true whether it is SQL, JavaScript, LaTeX, or whatever. If the above link is valid, I don't want to use JPA CQ. Their first example, one with 10 lines, is db.get(new Pet()).setAllowBlankQuery(true) in DBvolution. XML is OK as a transport format between disparate systems but is just magic strings on illegal steroids when used as configuration. I think Maven is awesome but the config files are a pain even with IDE support. Generated code is, in my experience, difficult to work with, unmaintainable, and not generalisable. It also seems to be required because of an unwieldy or obtuse API. Hiding the relational concepts, or at least reducing them to higher level ones, allows the end user (developer) to continue working in the familiar environment and stick with the context that they are most productive in. If they were most productive in SQL they would be a DBA, so why force them to context switch into SQL? It also allows the abstraction layer to move beyond the SQL and create things that don't exist, like auto incrementing primary keys in Oracle 11.
Or Comparator.comparing(Person::getLastName) :)
You're welcome. &gt; Had the FindBugs plugin already I thought so, or else I'd have mentioned it.
The current version is Java EE 7, not 6, but that's besides the point. &gt; Magic strings are an anti-pattern As with every other (anti-)pattern, there is a cost-benefit relation at work. Just because someone deems something an anti-pattern in one situation does not invalidate its usefulness elsewhere. Regarding this particular use, you write: &gt; It's just embedding another language awkwardly in Java It's *the only* reliable way to embed a language in Java that doesn't fit into its syntax. That's why it has its use here. Note also that the Checker Framework can even provide syntax-checks for SQL embedded in strings, which makes things decidedly less awkward. &gt; Generated code is, in my experience, difficult to work with, unmaintainable, and not generalisable. I doubt you can get away in today's Java landscape without inadvertently using byte code generation – even if the generated byte code just lives at runtime. It allows for some powerful techniques that are impossible with static byte code. &gt; Hiding the relational concepts… Abstractions leak.
What newer architecture would you suggest to look at then (with links if possible) ?
I agree with you that it is not universal but it works quite well on my Tomcat web applications. If were standardized across application servers it would be much better. I also agree with the point that it would be a much better area of focus instead of creating another MVC framework for Java EE.
Some people do the one function per controller method, but I think that stems from the old, old spring mapper that mapped requests to controllers. I like to group similar actions into one controller-- like all the user profile actions in one, maybe all the checkout actions in another. I much prefer longer classes than having 200 classes in my controller package-- easier for me to navigate. There's no best practice or this way will be better, just user preference.
I'm new to Java and I'm loving net beans. It's really come a long way since I last used it.
&gt;I agree with you that it is not universal but it works quite well on my Tomcat web applications. If were standardized across application servers it would be much better. I assume that here you're refering to the JAAS login module? Tomcat doesn't use JAAS at all really. Where Java EE servers use maybe 1% of it (the Subject can be requested via JACC), Tomcat uses 0% of it. The only thing that Tomcat offers as far as JAAS is concerned is a bridge from its native Realm type to a JAAS login module (http://tomcat.apache.org/tomcat-8.0-doc/realm-howto.html#JAASRealm) Interestingly, this HAS in fact been standardized, since that is what JASPIC (in a way) is! Tomcat even mentions this: &gt;JAASRealm is prototype for Tomcat of the JAAS-based J2EE authentication framework for J2EE v1.4, based on the JCP Specification Request 196 to enhance container-managed security and promote 'pluggable' authentication mechanisms whose implementations would be container-independent. But then nobody ever talks about JASPIC, and Oracle doesn't test it, etc...
Microservices http://martinfowler.com/articles/microservices.html http://microservices.io/ 
It's not a new algorithm in the way that you are probably thinking. The collections will still use quick sort by default. What you provide is a new way for the already in place sorting algorithm to decide what moved and what doesn't. 
The point was for you to see and learn. Typing more than you need is unnecessary.
An empty varargs invocation definitely corresponds to passing an empty array and not a null array. What kind of sadistic language designer would come up with this?
You can simply call it like this: Stream.Builder&lt;List&lt;String&gt;&gt; builder = Stream.builder(); The compiler can infer the type parameter of the `builder()` method from the assignment alone (i.e. the type parameter depends on what you assign the result to): Stream.Builder&lt;Object&gt; objectBuilder = Stream.builder(); Stream.Builder&lt;String&gt; stringBuilder = Stream.builder(); objectBuilder.add("foo"); //OK objectBuilder.add(new Object()); //OK stringBuilder.add("foo"); //OK stringBuilder.add(new Object()); //compile-time error
Microsoft actually has two options for the front end (a couple more if you're including WCF for desktop applications): ASP.NET WebForms and ASP.NET MVC. WebForms is like JSF and MVC is like Spring MVC. Edit: ASP.NET includes [four web programming models] (http://www.asp.net/web-forms/what-is-web-forms).
There's no direct equivalent because JEE is a specification with multiple implementations. In .NET world you have the .NET framework, ASP and or ASP MVC and IIS as your "app" server. In terms of running any of this on another platform like Linux is a crap shoot. There are many differences but from a feature stand point they do basically all the same things but you should mention to your PHB that the cost of ownership with .NET is much higher than Java.
GAs a .NET guy explained to me, the Microsoft equivalent to JavaEE is really the server operating system. The servlet container is IIS, JNDI is Windows Directory, resources like mail and data sources are registered in the control panel, etc. Actually this same guy claimed that much of JavaEE are ripoffs of Microsoft technology which came first. JSP is a ripoff of ASP, JSF is a ripoff of WebForms, etc.
Visual Studio is Enterprise Ready!!! Also pick up Resharper especially if you're used to intellij or webstorm. In general microsoft has awesome documentation. http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/introduction 
I actually prefer your method as well but I'm having serious problems with integrating my application with Spring Security. Maybe it's just me though...
Can you add an explanation what the numbers mean? Is it execution time or operations / second? 
&gt; stored procedures are the answer a DBA would tell you. Yeah. To a carpenter any problem looks like a nail ;)
"A database", not "the database". We use embedded ElasticSearch and Cassandra instances in our project for example to do exactly this: unit testing.
Have you looked at [Java for Python Programmers](https://www.cs.cmu.edu/~mjs/121/Java4Python.pdf)?
I didn't even know it existed. Goodness, thank you.
I've tried it and it sucks. Disk access speed is dog slow, which makes builds take substantially longer.
sure, it was there at some points but must have deleted when updating the data. It's in us per op where an op is reading the csv file
Make sure you use an IDE like intellij or Eclipse. This will help you with the syntax. I started by converting my python apps to java. Do you have any specific questions?
I did this in college, taking 2 years of Python then 2 years of Java. I ended up starting all over. However, Eclipse was my saving grace for Java. 
I agree with /u/bluntzfang: Use an IDE. If you want something like an interpreter (for .java files) I can post this bash script: RunJavaFile --help 'RunJavaFile' runs the Java compiler on the, supplied, java source file and, if successful, runs the compiled file with the Java interpreter. Usage: 'RunJavaFile [Path]SourceFileName[.java] [List of runtime arguments]'. 
I'm using Eclipse. I think I'd prefer Intellij IDEA because I was pretty comfortable with PyCharm, but I know Eclipse is powerfull and free, and I know the free version of Intellij is limited in some ways. &gt;I started by converting my python apps to java. I'm planning to do the same as well. &gt;Do you have any specific questions? What's the best way to work through a problem when you get stuck? I mean, in Python, if I hit a wall on something, I'd paste it into the interpreter or import the file, and play around with it until I came to the solution. Is there any way to do something similar in Java? Are there "interactive" tools for working with Java code? Because without being able to test something I don't understand in a live fashion, I tend to get frustrated when I can't make it work. Also, in terms of the IDE, is it me, or do jetbrains' IDEs have better problem checking? Is it just personal preference in how the information is displayed? (I really like the green/yellow/orange/red bars to the right in PyCharm, makes it easy and quick to scan for issues as you work) I notice in eclipse, error checking in the IDE doesn't seem as robust, but I wonder if that's because it's a compiled language and if it wouldn't be the same in intellij.
&gt; What's the best way to work through a problem when you get stuck? I mean, in Python, if I hit a wall on something, I'd paste it into the interpreter or import the file, and play around with it until I came to the solution. Is there any way to do something similar in Java? Are there "interactive" tools for working with Java code? Because without being able to test something I don't understand in a live fashion, I tend to get frustrated when I can't make it work. Utilizing the debugging tools in your IDE. You are able to make break points which will stop your code execution at that line. I had this problem when I start coming from python, as you could just open IDLE or run the interpreter in the command shell. If you make a break point you can also open a console window that will allow you to execute commands at will, which is what I think you're looking for. For example, you could check the attributes and method returns of a class by typing them in the console instead of using a print method and running the whole application. http://www.jetbrains.com/idea/webhelp/debug-tool-window.html &gt;in terms of the IDE I'm not familiar with Eclipse. I use intellij and I would suggest that if you're used to PyCharm. Since you're a beginner it will be best not to get hung up on IDE context changes and PyCharm and intellij are very similar. 
Seconded. Been reading this book for awhile and came here to recommend it. 
&gt; Are there "interactive" tools for working with Java code? Because without being able to test something I don't understand in a live fashion, I tend to get frustrated when I can't make it work. In IDEA run in debug mode and just modify the code. IDEA (and maybe eclipse but I haven't used that in awhile) will reload the currently executing code with your changes. So if you've got a block of code that's not working as you expect, you make a change to the code, save it, re-deploy (doesn't require a restart most of the time), and then check your app.
Okay, I'll give it a try, I'll probably be happier with it given my experience with PyCharm. My main goal is to be writing Android apps in the future, and will likely include working with libgdx. Will either of those pose a problem with Intellij? Also, will I need to use the Android Studio, or can I keep working in Eclipse and Intellij as I learn more as long as I have the Android SDK?
Thanks. Pretty neat!
Okay, this seems to be another vote for Intellij, I'm just going to download it because PyCharm community edition really made working with Python code a dream. I should have given it a shot to begin with, but I thought Eclipse was the industry standard if I ever wanted to work with Java in a real dev environment so I went with it.
FYI Android Studio _is_ IntelliJ so switching between the two variants should be easy for you particularly given your PyCharm experience.
Yes. Quoting from the [docs](http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html): &gt; A comparison function, which imposes a total ordering on some collection of objects. Comparators can be passed to a sort method (such as Collections.sort or Arrays.sort) to allow precise control over the sort order. Comparators can also be used to control the order of certain data structures (such as sorted sets or sorted maps), or to provide an ordering for collections of objects that don't have a natural ordering.
Add the following libraries to your toolbox: Lombok http://projectlombok.org/ This cuts down Java verbosity by 80/90% in most cases. If you can go to Java 8 and get lambas, then everything clicks together.
I can confirm that Eclipse also has this feature.
I have the same exact setup. Windows on the Desktop and Ubuntu 14.04 in Virtualbox as my main development environment. What I did to get around the 3D issue was install the old GNOME 2.0 environment. That was done by installing the gnome-session-fallback package (sudo apt-get install gnome-session-fallback). Make sure you choose the right desktop environment in the login screen.
The Java for Python Programmers book is very helpful, but honestly, it's sort of intuitive after a while. Java is strongly typed which at first is difficult to get over, and the container objects are a little less dynamic, but outside of that it isn't all that much different and really becomes intuitive to work with. Definitely like Python more though. Get an IDE, it helps dramatically with the syntax learning curve.
Try skimming through the [Java EE](http://docs.oracle.com/javaee/7/tutorial/doc/home.htm) tutorial.
Yeah, I also prefer Python. I think when I've done all I want to do with Java and Android, Python will still be my main language while I learn others. I did some Python code last night, copying and modifying one of my existing scrapers to pull images (comics really) from a webcomic I read. It was a blast, I probably got more enjoyment out of writing it than I will from actually reading the comics. I haven't felt that joy with Java yet.
Not for Android dev, you can only use Java.
&gt;Part of it is the highly verbose syntax, This will make your code far more maintainable as you work on multiple projects and come back to this one, or new team members onboard. However, it could be that you're not leveraging the appropriate libraries. You can get yourself some libraries that abstract the ceremonies for some behavior. Things like Lombok, Google Guava, Apache Commons, etc... Java has a finer grained native library which means you can do more things and override default behavior. For example, if you don't want to waste memory using a BufferedReader don't... &gt;the lack of the interpreter to test ideas and methods is frustrating A REPL is being talked about for Java 9, but it's not a sure thing yet unlike Project Jigsaw &gt;which makes it feel much slower to put together something functional, If you're not learning the power features of your IDE (Eclipse, IntelliJ, NetBeans) like templates and shortcut keys then this can easily be the case. &gt;but also the lack of the interpreter to test ideas and methods is frustrating There are two equivalents here. The most important is to load the appropriate IDE plugin ( Eclipse: http://moreunit.sourceforge.net/ ) that lets you * Switch to the Unit Test (create it if it doesn't exist) with one Keystroke * Run the Unit Test with one keystroke The second is to use something like Jenkins to run the test suites for you as you continue working. This is less interactive but great when you're slinging lots of code for a completely new system. &gt;and resources for learning Java seem much more scattered Could be the sheer amount of resources?
What do you want to develop? Back-end stuff? Web-apps? Android apps? Games? Desktop apps? What you need to study depends heavily on what you want to do. If you have core Java- I'd say study SQL and databases and JDBC/JPA next. Then Dependency Injection frameworks. Then messaging. Then probably rest of JavaEE. These things are nice to know even if you are building non-server side stuff.
So the sorting algorithm will decide how to compare the two values? 
What about that last else statement?
So, where is a question? Anyway, your calculation is wrong, correct formula is 0.5 * mv^2
Am I wrong to think that a microservice can be developed using the "classic way"?
The debugger will help you a lot if you learn to use it. You can step through the execution of your program, peek at the values a variable contains at a certain point in your program, tell the debugger to stop at certain lines so you can inspect the state of your program, tell the debugger to stop if certain variables become set to certain values, etc. The debugger is a very powerful tool and learning how to use it will make fixing errors in your code so much easier.
You've got some good suggestions, so I thought I might offer another direction: have you looked at the [Pygame Subset for Android (pgs4a)](http://pygame.renpy.org)?
See also: [How To Write Unmaintainable Code](https://www.thc.org/root/phun/unmaintain.html). Not everything there works with java, but a good part of it does.
For the types of unit tests the average neophyte will be running, Jenkins is extreme overkill. I haven't used MoreUnit for eclipse, but since his preferred IDE is IntelliJ, he should be pretty happy with the JUnit test runner in there. 
My advice: pick a piece of software you want to have and then build it. Learn what you need to know along the way. Done right, this will give you a hopefully useful program, some practical experience, and you'll learn aspects of Java that you know to have utility.
You might also try scala. It is a language that is compatible with java that is much less verbose. For example: //java example long fibonacci(long i) { if(i &lt; 2) return i; else return fibonacci(i-1) + fibonacci(i-2); } //scala example def fibonacci(i: Long) = if(i &lt; 2) i else fibonacci(i-1) + fibonacci(i-2) //an infinite stream with the fibonacci numbers val fibs: Stream[Long] = 0l #:: 1l #:: ((fibs zip fibs.tail) map (x =&gt; x._1 + x._2)) val sum10 = (fibs take 10).sum // returns 88 from adding together the first 10 fib numbers oh, scala also has a REPL.
I know, you wrote mv*mv, but that is not correct as that gives m^2 * v^2. And you want m * v^2. Also, it doesn't meter that you can or can't write x^2 as that is just a different way od writing x * x. Kinetick formula can be written as 0.5 * m * v * v
&gt; (a, b) -&gt; a.age - b.age PSA: Don't compare int values via subtraction (or long/short/char/byte values for that matter). If the two values are more than Integer.MAX_VALUE apart (which happens 50% of the time for any two random integers), there will be an overflow and the comparison will be wrong. Use either of the following instead: (a,b) -&gt; Integer.compare(a.age, b.age); Comparator.comparingInt(p -&gt; p.age);
Ok thanks that is what I was trying to figure out appreciate it. 
I'd choose IntelliJ over Eclipse any day, but I have to correct something: IntelliJ's ability to just compile (some, not all) changes into a running application is something Eclipse can do, too. Not only have I seen Notch do it with Eclipse back then, I also did it myself in both IDEs. (Use IntelliJ, though. It's so much better.)
If you feel that you're comfortable with the core components of Java, then the next step isn't to learn some other API. Your next step is to write some code. Lots of code. The books will only take you so far. Do read Effective Java, though, if you get the time.
One more thing System.out.print("Please enter the velocity (in meters)"); Velocity is not measured in meters.
Should also be in curly braces, but it is not strictly necessary since there is only a single statement following the ELSE, same as the two above.
Given that many enterprises tend to go with Websphere, Weblogic and friends, the cost is debatable.
No, the Comparator decides how the two values are compared (hence the name). Sorting a List/Array is just by far the most common usage for Comparators, which is why it's always used as an example. The compare() method of the Comparator returns an int, but really there are only 3 different possible outcomes: * If both values are equal, the compare() method will return 0 * If the first value is greater than the second value, the compare method will return a positive number (usually 1, but any other positive number would mean the same). * If the second value is greater than the first value, the compare() method will return a negative number (usually -1, but any other negative number would mean the same). As an example, this is the "natural order" comparison for integers straight from `java.lang.Integer`: public static int compare(int x, int y) { return (x &lt; y) ? -1 : ((x == y) ? 0 : 1); }
Sorry to hear that. I've been using java professionally for 10 years now. I am picking up Python and would feel the same thing you do now. Java is too verbose and strict type. I didn't appreciate it much until I picked up dynamic langs like Python and Ruby. Those language make reading/writing the code a nice thing. But I often found that refactoring in those langs is a pain. I hope you get over this hump soon! Hang in there, we can help.
Yes that's my bad it's meters per second. 
I'm hanging in there. It's frustrating, but I really want to learn this, and other languages over time as well. I guess it's just off-putting because the "batteries included" ideology of Python made a lot of things very easy. I'll get it eventually. For now I'll start by changing IDEs, because I honestly feel like whatever I do manage to get done, I do it in spite of Eclipse instead of with Eclipse. I should have stopped using it sooner, and now I know I can.
&gt; Jenkins is extreme overkill Disagree, it's trivial to set up and a big benefit. Especially since he's planning on rewriting all his Python to Java &gt;but since his preferred IDE is IntelliJ He actually didn't say that, he said he's having a tough time with Eclipse. I suspect it's simply unfamiliarity which will happen with any IDE. Does the JUnit runner run the unit tests specific for a class or does it run all unit tests? 
Just because he wrote "Press Enter to Continue". The last scan.nextLine() is waiting for that enter.
First: Did you check the docs for what the method actually does? E.g. http://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html#nextLine-- If you don't understand that it's a different question. Second: Have you been introduced to debugging? Have you tried setting a breakpoint on the line and watch what happens? TL;DR: That line waits until you pressed enter on the System.in.
Based on the parameters required for the query, I will be displaying some textboxes to users where they will be able to submit values for these parameters. 
I would like to thank all of you for your inputs. You all definitely have given me some options to try, which I will. Thanks again. 
Very handy tool for generating JUnit based tests for Android apps and games. 
Read and train in design patterns. Gang of four. Read Martin Fawlers website. It's more important to be good in design patterns than in JEE specs. Those things you pick up in the field. 
I learned a good tip from a former coworker. Always have a "playground" project open in your IDE where you can copy-paste code you're curious about. So if there's something you'd want to try-out in an interpreter, make a new class in your playground project, dump the code into the main method, and run that class. It's not as good as having an interpreter (which might be coming in Java 9 or 10!) but it's a pretty fast process in most IDEs.
Seriously man, literally every ide I've used in the past 4-5 years has this feature. Netbeans, eclipse, idea, visual studios.
Eclipse is and most likely will remain industry standard for a long while.
I'm a professional (wellllll...getting paid as as) Java programmer for 10 years now and I'm currently using Netbeans. Gave up on Eclipse several years ago. Worked on a project that another team made using Eclipse and it's maven support is beyond horrid. I don't know how people use Eclipse+Maven. I've never used IntelliJ so won't comment but I'm perfectly happy with Netbeans.
This is a good tip, I'll keep it in mind.
&gt;but also the lack of the interpreter to test ideas and methods is frustrating Go grab [IntelliJ 14 EAP](https://www.jetbrains.com/idea/nextversion/). It has support for [scratch files](http://blog.jetbrains.com/idea/2014/09/intellij-idea-14-eap-138-2210-brings-scratch-files-and-better-mercurial-integration/), which should make the process a little less painful.
I'm just reinforcing what some have said. After 2 years with Python as my first language I recently switched to Java. IntelliJ is definitely the way to go. It's code completion beats Eclipse for sure. Resource management is a bit more strict in Java than in Python, optimization has been the area where I have most struggled, but that quickly improves with a small amount of practice.
scratch files is interesting, I use 14 and never noticd that. but more importantly is what you see in the java scratch file at that link http://blog.jetbrains.com/idea/2014/09/intellij-idea-14-eap-138-2210-brings-scratch-files-and-better-mercurial-integration/ it's using the IDE's built in stuff to automate writing all the java verbosity, this makes it much more tolerable to work with. 
When I was very young I started with Basic and eventually moved on to try to learn Machine Language, this was on an old C64 in the 80s. I had very few accessible resources in my isolated and rural town. I could at best write a short program that drew a multicolored raster bar that bounced up and down on the screen while a low rumbling noise played; the standard for "warez" intros back then. I hit a wall and could not progress, gave up on programming for 20 years. Here in the last few years I started with Python and now Java and get to write internal apps for my company. I look back with my friends at how we struggled back then, we joke about trying to learn Machine Language like when we were kids... but the dog needs to be walked, and bills, and living. I just don't have the mental investment capability I had at age 11.
Where are the BeanIO results? It looks like code has been added but I don't see it in the list of results? Is support for it not complete or does another run need to be executed? We're currently using BeanIO but performance is becoming a concern, so this is timely. Seeing this quantified would really help us make a decision. I should probably grab your code and use it with one of my input files.
Hiya, don't know if helpful to you, but http://www.bluej.org helped me very much when just starting out with Java. It allows you to just execute methods of any class, inspect an object's members as you go, without actually running a whole program.
Looks interesting, but looks like I'll need to wait for the official release. There's no Linux version I could find for the 14 EAP. That's okay though, it's supposed to be out soon anyway.
the original benchmark made by Jeronimo Backes has some results form beanio https://github.com/uniVocity/csv-parsers-comparison#processing-3173958-rows-of-rfc-4180-compliant-input and it was the last of the test, unfortunately that benchmark is only on java 6 and for a big file. I'll see if I can get some results for beanio java 7 to compare to the others
&gt; A REPL is being talked about for Java 9, but it's not a sure thing yet unlike Project Jigsaw In the mean time, things like JRebel and spring-loaded let you try out your code with a low barrier to entry time wise. 
IntelliJ does that very well and does it everywhere, this has been touched on in other posts. The main issue (and the one that OP seemed to have trouble with) is that trying out a random Java snipped is way more trouble than it should be. Scratch files ease that quite a bit. On a side note, I wish I could already use 14. I did for a while, but it seems to have a nasty indexing bug for me. A bunch of the source files aren't indexed properly and all search related features essentially stop working. A huge bummer, because I love love love inline debugging, scratch files and the new hg push dialog.
In a pinch I'll sometimes throw something into the unit test package(s), which frequently ends up becoming a real unit test anyway. This is especially useful if you're going to depend on something else in the project.
FYI- IntelliJ community edition is free for everyone; not just students. It is also [open-source](http://www.jetbrains.org/). 
Odd I have had very little problems with it. Might try it again. there were some indexing problems in some of the builds around a month ago i think. 
My playground is a set of unit tests. Takes away all ceremony around running and validating them. 
Not quite accurate. System.in is typically cooked input - the input can be edited with backspace, for example. None of the input is passed to the Scanner until &lt;Enter&gt; is pressed. The nextLine call consumes all additional characters on the line as well as the eoln character(s) . Sets the program up to read the next line from the start without leftover characters from this line. 
&gt; Part of it is the highly verbose syntax, which makes it feel much slower to put together something functional You IDE should help a lot here, I see you're using Eclipse which is functional but NetBeans and IntelliJ have much more intuitive interfaces, and IntelliJ's code-assist cannot be beaten. Thankfully you are coming into the age of Modern Java, where annotations and POJO's are the norm, you get to ignore the dreadful history of Factory classes and all the joy that they bring to code verbosity. &gt; the lack of the interpreter to test ideas and methods is frustrating, I really leaned on the interpreter whenever I had a problem in Python, and I'm not sure if there's a similar resource I can use for Java. Unit tests are typically my tool of choice for exploitative programming in languages that lack a REPL. In fact, you can make them a little more useful for this purpose with [infinitest](http://infinitest.github.io/) - which, while a little buggy, is extremely handy.
No one is just going to write the code for you. You have to actually put in a little effort and help will be given. Also posting on /r/javahelp would be more beneficial.
Most of these are a result of the language allowing you to do stupid things that no one in their right mind would do, or just following bad practices. Most IDEs will warn you if you reference a static method from an instance instead of from the class definition itself...and for good reason. Sure it's legal, but it's misleading and bad practice.
Well, properties files and environment variables are completely different things. Properties files are supposed to a static list of key/value pairs. The Java property file loader is not designed for substitution in mind. You could do some post processing after loading the properties file, replacing special tokens with the environment variables. Kind of like what Maven does with resource files at build time with property filtering.
I bet a lot of us could help with this. Which part do you need help with? What's your code currently look like?
Honestly I need help with the whole thing, I really don't know how to start, I'm just completely lost. 
You can declare environment variables at startup with "-D", but what do you mean by referencing them in a properties file?
I'd start with getting your factorial into an array, so, prompt for an integer, then start with the multiplying. for each iteration of your code, you'll expect your array to look like: 1,0,0,0,... 2,0,0,0.... 6,0,0,0.... 4,2,0,0... 0,2,1,0... 0,2,7,0... and so on until the iteration equals the number you passed in when prompted. Your array's going to have to be pretty large to handle up to 100 factorial though. You're basically supposed to handle it as if you were doing the math by hand, but writing it to an array backwards, because it'd be really hard to pad 157 zeroes to the front of your array and read through all those zeroes unnecessarily. 
I learned Python first also, but Python actually made _more_ sense after I started learning Java. Heh.
Yes there is. I have to go to sleep so i cannot write longer and more helpful answer. You could use JNDI. Read more about it here http://tomcat.apache.org/tomcat-7.0-doc/jndi-resources-howto.html. Here is how to configure date source trough JNDI with spring http://stackoverflow.com/questions/9183321/how-to-use-jndi-datasource-provided-by-tomcat-in-spring. 
I see what you mean now. You can get the value of the variable from the OS environment and set it using: export JAVA_OPTS="-DDocumentServer=$(DoumentServerVariableDefinedAsEnvironmentVariableOnTomcat)" but that's going to be as ugly as whatever you're trying to fix. 
Why embed the language at all? Why not make Java do the work for you? I'll check out the Checker Framework, thanks :)
Before you go too far with that I'd look at starting with Java 8. The streams, lambdas, and concurrency APIs will give you some of the stuff you are probably missing from Python. It's better to use that stuff off the bat than go learn stuff the "classic Java" way and then have to relearn all the new paradigms. 
http://libgdx.badlogicgames.com/community.html Join us on the LibGDX IRC.
For Java, the ideal 'playground' is typically a JUnit test. Not only does it offer you a playground to try out things, but when you're done, you'll have unit tests to CYA when you break something later.
Ah, missed that. Guess that's the trade off of using an imitation. :)
Can you query/ping the document server and get it's version number?
Sort of. I installed Linux and then ran Windows in virtual box for the few times I needed it...
That's the idea.
If you want to deploy the same war and maintain a single tomcat config everywhere, (which is way better for failover, scaling, etc.) You could ping the document server, get the version and then use the matching implementation.
I stand corrected, you make good points!
&gt; Machine Language Cracking games, eh? :)
Use [a library](http://json.org/).
No, there are cases still where it may matter. Lets say `Animal` has a `getHome()` method, which returns a `Place`. But for a Cat, it could return a `House`. Then, if we have *some* animal, but are not sure which one, we call `animal.getHome()`, and get a `Place` back, and aren't certain if it is a `House` or not - we can do an `instanceof` to check, and a cast to change it.
GSON if your friend
I remember using SharePoint in C#(with ASP.NET). It's like a framework to make all sort of workflow. But yeah, I hope to never use that technology again, thought I don't remember of anything as big as that monster in Java.
&gt;Why embed the language at all? Why not make Java do the work for you? Because Java is perhaps not the best language for each and every task?
Java has IntelliJ IDEA, in my opinion it is better than Visual Studio.
I don't remember. I think it was because a friend owned a manual for that. Likely someone older convinced us that was the thing to do.
Yes, you can set variables also. Are you by any chance using spring in project? 
http://www.vogella.com/tutorials/eclipseide.html
Am not using any spring in this application. But it could possibly be integrated. What can I do with spring for something like this?
I would say that it removes 95% of all casts. If you find yourself casting alot, i would take a step back and rethink the structure of the code.
I'll keep that in mind.
My comment was in response to the "monolithic" aspect. Separation of concerns and choosing the right layers for the right case is of course as valid as ever.
From the book: "If you know Java, learning C++ is easy". Right :)
Not really, surveys point out that home build Java EE stacks on Tomcat and furthermore JBoss continue to dominate the landscape, with TomEE rising (although due to a lack of Java EE 7 it's now stalling a bit again).
.NET Framework itself is the closest thing to JEE, with some obvious differences. I did a 'career switch' from .net to java a while ago and used to joke that early java versions were made BY lazy people, while .net was made FOR lazy people. What most Java guys don't really know is that .net is a HUGE framework, covering both JSE and JEE types of features(and probably more). On the other side .net guys are not really aware of the size and diversity of the Java ecosystem and community. That being said, there's also another JEEesque thing called [Enterprise Library](http://msdn.microsoft.com/en-us/library/ff648951.aspx) developed by an independent MS team.
Just added bean io results in the table in the quoted section as the non quoted it can't handle it has the worst perf. It does worst then genjava csv.
There isn't a built in way to do this, but I've been using a utility function that does this that might be of value. The code works pretty well looking for patterns in strings of ${xxx} and then doing a lookup either in the provided property object or System.getProperties to fill it in. static String CONFIG_PATTERN = "\\$\\{(.*)\\}"; static final String adjustedValue(final Properties p, final String val) throws Exception { if( val == null || val.indexOf("${") == -1 ) return val; Pattern pattern = Pattern.compile(CONFIG_PATTERN); Matcher matcher = pattern.matcher(val); StringBuffer buf = new StringBuffer(); while (matcher.find()) { String replaceStr = matcher.group(1); String prop = p.getProperty(replaceStr); if( prop==null || prop.trim().length() == 0 ) prop = System.getProperty(replaceStr); if( prop == null ) { logger.debug("Failed to find property for {} ", val); } else { logger.debug("Found {}", prop); matcher.appendReplacement(buf, prop); } } matcher.appendTail(buf); String result = buf.toString(); //this allows nested replaceable parameters, //just return the string if that isn't necessary return adjustedValue(p, result); } You have two choices on using this. You could either replace where you are pulling properties out of the property file with a call to this function or after loading the properties file, you could loop through all of its keys and call this method to get a replaced value then update the property in the Properties object. 
I'd say your professor is an asshole, 100! is 9.5*10**157 is a big ass number. Cause you can't do this the naive way because you can't do int k = 50 * 10,234,324,423,523 or whatever the hell 49! is. But here's a quick hint as I don't have much time right now, you have to simulate how you would do multiplication by hand, but you can't use the exact values as they're too large to store. So when you start getting up to numbers like 5,000,000,000 (a number that doesn't fit in an int), instead you know that 5 that goes in slot 10. or perhaps 7,543,259,897,534. you're like ok 4 in slot 0, 3 in slot 1, 5 in slot 2 and so on. so you simulate carrying over values as you work form right to left, and only multiply the individual digits one at a time time, and just place values in the array as you calculate that spots new value. Arrays give you direct access, so it's not too bad.
Not exhaustive (only covers lambdas): http://www.drdobbs.com/jvm/lambda-expressions-in-java-8/240166764
I only have secondhand experience with it, but JSF is a modular infrastructure for binding HTML UI components to beans on the J2EE server side, along with the server side plumbing needed to handle that binding. The design goal is to do stuff like display a complex form and, as a user interacts with the form, the data is updated server side via automagical AJAX, and all the developer has to do is design the data model and write the UI using JSF's taglib. And I gather it's modular enough that you can do stuff like XUL UIs as well as HTML? I would say it's completely disconnected to jQuery/HTML5 practices because it does so much for you. Frankly it seems overengineered to me. I worked with some guys who were using ICEfaces' JSF implementation and they seemed to like it, but our company's UI guys have found that implementing our own JAX-RS REST services and hooking them up using simple jQuery is the easiest and most flexible approach to doing J2EE data-driven UIs, and then the REST services are reusable by other parts of our architectures (which we do take advantage of).
Definitely NOT. JSF is a component-based web UI framework like ASP.NET for J2EE, except it's not the mainstream, not so popular and not too capable, and not too many 3rd-party extensions due to being unpopular, not easy enough for beginners' RAD either. If you want to do powerful stuff you'd need a JS-centric design as mindsound recommends. If you want rapid prototyping you'd have to find something else.
I'm working on setting up something like this. I've installed Linux Mint, but haven't really set it up to be usable for my work yet. I have got it working with my three monitors though. Fortunately, we have pretty decently powerful desktops that can handle virtualization but I've run into 3D acceleration issues also.
I used jsf on a project at my last employer. I agree with pretty much everything you said. If you do use it, would recommend using it with Icefaces or Primefaces, as this will make things a bit easier. If you are struggling with anything https://jsf.zeef.com/ is a nice collection of links that will help with most things. BalusC on stack overflow seems to be one of the key experts in the community. Edit: late night typos
JSF is the predominate java standard for web development. It's geared towards Java developers and thus barely touch JS and CSS. It works well to produce functional sites for enterprise clients where flash and pizzas is of no concern. Having said that, one could use JQuery and Bootstrap to do certain things that the framework and component library do not support out of the box. Take a look at http://primefaces.org/ by far the best component library for JSF. Additionally, there is richfaces and icefaces as well as others such as tomahawk from apache if i'm not mistaken. As a front end developer, I'd reckon you don't need to get caught up with JSF. Much of the world is moving to pure js front end with the advent of AngularJS and similar frameworks and relegated Java to produce RESTful services. However, JSF is not going away and it's still heavily used in the industry.
JSF is a great framework that is very flexible. The main advantage is it provides components, state and communication between the browser and the server. Component libraries like PrimeFaces use jQuery so they are certainly compatible. You can use prebuilt components or just use standard HTML, CSS, JavaScript for the front end. It is easy to learn and popular for professional Java development. www.netbeans.org www.primefaces.org 
I am not sure why you think it is disconnected to jQuery/HTML5. They are completely compatible with JSF. You can use components (many of which are built with jQuery/HTML5) or just use HTML5 and jQuery manually if you like. Most people choose components because it is quicker to use something that has been built and tested across browsers than write you own. Still the option is there to just write your own front end if you want.
Sure, they're compatible, but they're orthogonal and tend to have separate enthusiast communities.
&gt; I don't remember. I think it was because a friend owned a manual for that. Likely someone older convinced us that was the thing to do. That must have been a nightmare! I'm surprised it didn't turn you away from computers. You either write it correctly the first time, or you have to change all the of the binary from the point at which you messed up. At least in Assembly you make a change and recompile the source.
It works with bootstrap, check this example http://blog.primefaces.org/?p=3035 . It works also with jQuery, the Primefaces Javascript part is based on jQuery. The most common use of it seems to be to try to use the XML based components as much as possible, and then write your own components for the last 5-10%. The key thing to be aware is that to be able to build your own components you need to be familiar with technologies that are very different that Java and XML: HTML, CSS, Javascript and HTTP. If you try to use as much as possible the default functionality that comes with the out-of-the-box Primefaces components you will get the most productivity benefit. Also its better to avoid Richfaces, JBoss has abandoned it officially. 
It's a combination, but there's your personal world and circle as well. I once did a job for an industry/field where basically everything was always done in PHP. People in that field where utterly convinced that 99% of all code was PHP. They just about knew that Windows was not in PHP, and that some weird nerdy sites out there may use something else, but that wound maybe be 0.5% of all sites, max. "Normal" people used PHP and "normal" people had Windows. If you used anything else you were just a crazy minority nerd. Then I did a job for a firm in another industry (interestingly, related to the previous one), but they largely used ASP.NET. Every company they dealt with and any contractor etc always used ASP.NET. They knew Java was used as well, but everything else was just script kiddy stuff. They were honestly convinced 80/90% of all sites used ASP.NET or Java.
Have you tested the program? Is this a homework assignment that you're relegating to this subreddit? Also, the question is not very clear.
the question is that what does java do if give the constructor call like above,as you said i should try it in an compiler and see what error it throws and should figure it out by that error.And thank you for your advise.
I tried today install Mint 17, but same 3D acceleration issues there again...
If you try to instantiate an object via a constructor that does not exist, the compiler will tell you that it can't go ahead like this.
Honestly, and you may know this already, but it may be better to just look at a angular front end + spring boot REST backend architecture. Enables you to spin up a backend very quickly with Spring integration.
I wouldn't worry about backwards, because it's forwards when it comes to keeping an RIA working. Java 8 Update 25 doesn't have a medium setting anymore, and most people are being forced at Firefox, Chrome and now IE to update their Java instance to the Critical Patch Update that's released Every Jan, Apr, July, Oct. The other thing to keep an RIA working, is a deployment ruleset, but the rules of making that JAR is the same. Manifest, Code Signed. 
Also, avoid using any version prior to 2.2. It will drive you crazy. Hey deathpax, hope you're doing well.
I'm trying to be as flexible as possible to my users, as I do not have control/influence their workstation set up and cannot gauruntee all may have Java 7. However this *should* not be the case.
JSF 2.2 and its HTML5 features makes using any client side solution quite easy these days. Just use the facelets ui tag library with JSF 2.2 HTML5 friendly features and any client side technology of your choice to build applications. Using components, in my opinion, are optional these days. 
comma between json files? What?
Hey! Fancy seeing you around.
Yes, this has been confirmed with my team. 
Please stop spamming your website and read the [Reddit rules](http://www.reddit.com/rules/).
Doesn't look like anyone mentioned using groovy's gui console as a REPLish environment. You should check that out. 
I am using an ArrayList to make a json file. How do I form the comma between json files? Even with some proof reading I don't think I understand what your looking for. I think you are confusing each key:value pair in a single file as a JSON file? 
a precise answer would require you to provide us with the version you are using. Anyways, try to find something related to the settings of your "content assist". You can disable it or increase the latency for it to popup... http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fpreferences%2Fjava%2Feditor%2Fref-preferences-content-assist.htm
&gt; JSF is the predominate java standard for web development. Ehh... it's the "blessed" standard that Oracle promotes. I suspect that JSP's (or various template engines like FreeMarker, Velocity, and Thymeleaf) are predominate in actual *practice*... and that using JAX-RS to expose RESTful endpoints for client-side frameworks will become the predominate approach soon.
It's hard to diagnose a problem like this without knowing all the details of how exactly you created the jar file. If you have tested your code inside of jgrasp or command prompt (assuming you're using windows) and it runs with no errors then chances are the problem lies within the event of creating your .jar file. Hopefully this helps you out. Sorry i am unable to directly solve your problem.
No that helps a little bit.
I'm assuming he hilariously misspelt "pizzazz", as in flamboyant or artful design.
Where pizzas are a concern, Java Server Faces can be pockmarked. Thanks for explaining the homonym typo.
That's a strange thing to say while moderating the Java reddit.
Paste the code, we have no idea what you're talking about.
The issue is that the cube called sqSmall only moves when I perform a keyboard action. How would I make it so it moves all the time non depending on whether I use the keybaord or not? **MAIN CODE** import java.awt.Color; import java.util.Scanner; public class SpelMain { public static void main(String[] args){ SimpleWindow w = new SimpleWindow(500, 500, "Game"); w.setLineColor(java.awt.Color.BLUE); w.setLineWidth(10); Square sqMove = new Square(0, 0, 60); Square sqSolid = new Square(260, 260, 60); Square sqSmall = new Square(10, 400, 30); sqSmall.move(5, 0); sqMove.draw(w); sqSolid.draw(w); sqSmall.draw(w); int dx1=0; int dy1=0; while(true) { w.waitForEvent(); switch(w.getKey()) { case 'w': dx1 = 0; dy1 = -10; break; case 'a': dx1 = -10; dy1 = 0; break; case 's': dx1 = 0; dy1 = 10; break; case 'd': dx1 = 10; dy1 = 0; break; } if (sqSolid.getY() &lt;= sqMove.getY() + sqMove.getSide() &amp;&amp; sqMove.getX() + sqMove.getSide() &gt; sqSolid.getX() &amp;&amp; sqMove.getX() &lt; sqSolid.getX() + sqSolid.getSide() &amp;&amp; sqSolid.getY() + sqSolid.getSide() &gt;= sqMove.getY()) dy1 = 0; if (sqSolid.getX() &lt;= sqMove.getX() + sqMove.getSide() &amp;&amp; sqMove.getY() +sqMove.getSide() &gt; sqSolid.getY() &amp;&amp; sqMove.getY() &lt; sqSolid.getY() + sqSolid.getSide() &amp;&amp; sqSolid.getX() + sqSolid.getSide() &gt;= sqMove.getX()) dx1 = 0; if(dy1 == 0 &amp;&amp; w.getKey() == 'w' &amp;&amp; sqSolid.getY() + sqSolid.getSide() != sqMove.getY() || w.getKey() == 'w' &amp;&amp; sqMove.getY() + sqMove.getSide() &gt;= w.getHeight()) dy1 = -10; else if(dy1 == -10 &amp;&amp; sqMove.getY() &lt;= 0) dy1 = 0; if(dx1 == 0 &amp;&amp; w.getKey() == 'a' &amp;&amp; sqSolid.getX() + sqSolid.getSide() != sqMove.getX() || w.getKey() == 'a' &amp;&amp; sqMove.getX() + sqMove.getSide() &gt;= w.getWidth()) dx1 = -10; else if(dx1 == -10 &amp;&amp; sqMove.getX() &lt;= 0) dx1 = 0; if(dy1 == 0 &amp;&amp; w.getKey() == 's' &amp;&amp; sqSolid.getY() != sqMove.getY() + sqMove.getSide()) dy1 = 10; else if(dy1 == 10 &amp;&amp; sqMove.getY() + sqMove.getSide() &gt;= w.getHeight()) dy1 = 0; if(dx1 == 0 &amp;&amp; w.getKey() == 'd' &amp;&amp; sqSolid.getX() != sqMove.getX() + sqMove.getSide()) dx1 = 10; else if(dx1 == 10 &amp;&amp; sqMove.getX() + sqMove.getSide() &gt;= w.getWidth()) dx1 = 0; w.clear(); sqMove.move(dx1, dy1); sqSmall.move(5, 0); sqMove.draw(w); sqSolid.draw(w); sqSmall.draw(w); } } } **YOU NEED TO PUT THIS CODE IN THE SAME FOLDER AS THE MAIN CODE FOR MAIN CODE TO WORK** public class Square { private int x; private int y; private int side; public Square(int x, int y, int side) { this.x = x; this.y = y; this.side = side; } public void draw(SimpleWindow w){ w.moveTo(x , y); w.lineTo(x , y+side); w.lineTo(x+side , y+side); w.lineTo(x+side, y); w.lineTo(x,y); } public void move(int dx, int dy){ x = x + dx; y = y + dy; } public int getX(){ return x; } public int getY(){ return y; } public int getSide(){ return side; } public int getArea(){ return side * side; } }
Done. :)
**THIS ONE ALSO GOES IN THE SAME FOLDER** //package se.lth.cs.ptdc.window; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.awt.image.*; import java.util.concurrent.*; /** * A simple window to draw in, used in "Objektorienterad programmering och * Java". * * @author Per Holm (and several others in earlier versions) * @version 2.0 (2007-05-03) */ public class SimpleWindow { public final static int MOUSE_EVENT = 1; // mouse click event type public final static int KEY_EVENT = 2; // key pressed event type private static int nbrOpenFrames = 0; // number of open frames private JFrame frame; // the frame private SWCanvas canvas; // the drawing area private AWTEvent lastEvent; // the last event (mouse or key) private BlockingQueue&lt;AWTEvent&gt; eventQueue; // a queue for events private int eventType; // type of last event private int mouseX; // x-coordinate, mouse click private int mouseY; // y-coordinate, mouse click private char key; // key event parameter private MouseEventHandler mouseHandler; // mouse event handler private KeyEventHandler keyHandler; // key event handler /*-------- Public window operations --------*/ /** * Creates a window and makes it visible. * * @param width * the width of the window * @param height * the height of the window * @param title * the title of the window */ public SimpleWindow(int width, int height, String title) { frame = new JFrame(title); frame.setResizable(false); JFrame.setDefaultLookAndFeelDecorated(true); frame.addWindowListener(new WindowEventHandler()); JMenuBar menuBar = new JMenuBar(); JMenu fileMenu = new JMenu("File"); fileMenu.setMnemonic(KeyEvent.VK_F); JMenuItem fileQuit = new JMenuItem("Quit"); fileQuit.setMnemonic(KeyEvent.VK_Q); fileQuit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.CTRL_MASK)); fileMenu.add(fileQuit); menuBar.add(fileMenu); frame.setJMenuBar(menuBar); fileQuit.addActionListener(new MenuEventHandler()); canvas = new SWCanvas(width, height); frame.getContentPane().add(canvas, BorderLayout.CENTER); mouseHandler = new MouseEventHandler(); keyHandler = new KeyEventHandler(); eventQueue = new LinkedBlockingQueue&lt;AWTEvent&gt;(); frame.pack(); open(); } /** * Returns the width of the window. * * @return the width of the window */ public int getWidth() { return canvas.width; } /** * Returns the height of the window. * * @return the height of the window */ public int getHeight() { return canvas.height; } /** * Clears the window. */ public void clear() { canvas.clear(); } /** * Closes the window. */ public void close() { if (frame.isVisible()) { frame.setVisible(false); nbrOpenFrames--; } } /** * Opens the window. */ public void open() { if (!frame.isVisible()) { frame.setVisible(true); nbrOpenFrames++; } } /*-------- drawing operations --------*/ /** * Moves the pen to a new position. * * @param x * the x coordinate of the new position * @param y * the y coordinate of the new position */ public void moveTo(int x, int y) { canvas.moveTo(x, y); } /** * Moves the pen to a new position while drawing a line. * * @param x * the x coordinate of the new position * @param y * the y coordinate of the new position */ public void lineTo(int x, int y) { canvas.lineTo(x, y); } /** * Writes a string at the current position. * * @param txt * the string to write */ public void writeText(String txt) { canvas.writeText(txt); } /** * Returns the pen's x coordinate. * * @return the x coordinate */ public int getX() { return canvas.x; } /** * Returns the pen's y coordinate. * * @return the y coordinate */ public int getY() { return canvas.y; } /** * Sets the line width. * * @param width * the new width (in pixels) */ public void setLineWidth(int width) { canvas.lineWidth = width; } /** * Sets the line color. * * @param col * the new color */ public void setLineColor(Color col) { canvas.lineColor = col; } /** * Returns the current line width. * * @return the line width (in pixels) */ public int getLineWidth() { return canvas.lineWidth; } /** * Returns the current line color. * * @return the line color */ public Color getLineColor() { return canvas.lineColor; } /*-------- mouse-related operations --------*/ /** * Waits for a mouse click. */ public void waitForMouseClick() { do { waitForEvent(); } while (getEventType() != MOUSE_EVENT); } /** * Returns the mouse x coordinate at the last mouse click. * * @return the x coordinate */ public int getMouseX() { return mouseX; } /** * Returns the mouse y coordinate at the last mouse click. * * @return the y coordinate */ public int getMouseY() { return mouseY; } /*-------- Event handling --------*/ /** * Waits for event (mouse click or key press). */ public void waitForEvent() { canvas.addMouseListener(mouseHandler); canvas.addKeyListener(keyHandler); canvas.setFocusable(true); canvas.requestFocus(); try { lastEvent = eventQueue.take(); } catch (InterruptedException e) { System.err.println("Internal SimpleWindowError: " + e); } if (lastEvent.getID() == KeyEvent.KEY_TYPED) { eventType = KEY_EVENT; key = ((KeyEvent) lastEvent).getKeyChar(); } else if (lastEvent.getID() == MouseEvent.MOUSE_PRESSED) { eventType = MOUSE_EVENT; MouseEvent mEvent = (MouseEvent) lastEvent; mouseX = mEvent.getX(); mouseY = mEvent.getY(); } else { System.err.println("Internal SimpleWindowError: " + " unknown event type, " + lastEvent.getID()); } canvas.removeMouseListener(mouseHandler); canvas.removeKeyListener(keyHandler); } /** * Returns the type of the last event. * * @return the event type (KEY_EVENT = key, MOUSE_EVENT = mouse) */ public int getEventType() { return eventType; } /** * Returns the key that was pressed on a key event. * * @return the character code for the key */ public char getKey() { return key; } /*-------- Delay --------*/ /** * Wait for a specified time. * * @param ms * the number of milliseconds to wait */ public static void delay(int ms) { if (ms &gt; 0) { try { Thread.sleep(ms); } catch (InterruptedException e) { } } } /*-------- Event handlers --------*/ class MouseEventHandler extends MouseAdapter { public void mousePressed(MouseEvent e) { eventQueue.offer(e); } } class KeyEventHandler extends KeyAdapter { public void keyTyped(KeyEvent e) { eventQueue.offer(e); } } class MenuEventHandler implements ActionListener { public void actionPerformed(ActionEvent e) { System.exit(0); } } class WindowEventHandler extends WindowAdapter { public void windowClosing(WindowEvent e) { nbrOpenFrames--; if (nbrOpenFrames &gt; 0) { frame.setVisible(false); frame.dispose(); } else { System.exit(0); } } } } /* The drawing area */ class SWCanvas extends JPanel { private static final long serialVersionUID = 1; int width; // width int height; // height private BufferedImage img; // image where all drawing takes place int x; // pen attributes: current x int y; // - current y int lineWidth; // - line width Color lineColor; // - line color public SWCanvas(int width, int height) { super(); this.width = width; this.height = height; img = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_INDEXED); setBackground(Color.WHITE); setDoubleBuffered(true); setPreferredSize(new Dimension(width, height)); setMinimumSize(new Dimension(width, height)); x = 0; y = 0; lineWidth = 1; lineColor = Color.BLACK; clear(); } public void paintComponent(Graphics g) { g.drawImage(img, 0, 0, this); } public boolean imageUpdate(Image img, int infoFlags, int x, int y, int width, int height) { repaint(); return true; } void clear() { Graphics g = img.getGraphics(); g.setColor(Color.WHITE); g.fillRect(0, 0, width, height); repaint(); } void moveTo(int x, int y) { this.x = x; this.y = y; } void lineTo(int x, int y) { Graphics2D g = (Graphics2D) img.getGraphics(); g.setColor(lineColor); g.setStroke(new BasicStroke(lineWidth, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER)); g.drawLine(this.x, this.y, x, y); moveTo(x, y); repaint(); } void writeText(String txt) { Graphics g = img.getGraphics(); g.setColor(lineColor); g.drawString(txt, x, y); repaint(); } }
Please format it correctly
How??
Code has to have four spaces at the start of each line to be recognised as such. http://www.reddit.com/wiki/commenting
Looks good. Would it be too much to ask to put it on GitHub or even just a zip file so I don't have to copy-paste a bunch of code?
sure gimme a sec
You probably want to use a [Timer](http://docs.oracle.com/javase/7/docs/api/javax/swing/Timer.html) object. This will call the function you provide it however often you want. Set it to run, say, 25 times a second and in the event function test whether W/S/A/D are being held and react accordingly. Bonus points for reacting to combinations such as W+A moving the square down and to the left.
Oh cool. You still want the zipped code? Thanks btw
I mix jQuery libraries with JSF 2.2 &amp; PrimeFaces 5+ using native HTML 5 tags/syntax...none of the bullshit where my xhtml page looks unrecognizable by front-end developers anymore. There are a lot of people who spent time with the older JSF versions, and they have completely written off the technology. JSF tags are a thing of the past for the most part. These days, I pretty much only use a few Primefaces tags on a page. The tendency lately is to load everything on the front-end. The pendulum could swing back the other way one day. I say aim for balance. Don't rely too heavily on the back end or the front end.
Meh, only post it if you have followup questions. Good luck!
Thanks for the help, appreciate it! :)
Ok I'm sorry but I have no idea how to implement a timer to my code...
I've updated the code for you, how should I share it? EDIT: Here it is, reformatted the code and was too lazy to remove the IntelliJ module and project structure https://mega.co.nz/#!xZRwlQ6B!Il69J_Q-TzrsEZRTRSx7pR50xwDuS1alBhNs8c6wdhA
Omg I love you! Thank you so much!!! &lt;3
No problem, feel free to ask further questions if you don't understand my changes.
Looking at our RIA usage stats, there's a TON of Java 6 users out there still. You're of course free to ignore them, unless your boss tells you otherwise. Mine was pretty clear in telling me we can't abandon well over 10% of users just because they have shitty corporate IT that never upgrades anything.
What's the advantage to this approach over just removing the primitives in favor of their wrapper classes? I would prefer removing primitives, replaced with their wrapper, and then replacing autoboxing with a more natural "operator overloading", similar to String -- being able to use math operators (+, -, /, *, etc.).
Or alt f4/ cmd q
Kinda, woulda been better to have those other methods be in their own class. Usually you want the driver class to stay super small and delegate responsibility to other composable classes that are easily testable. Technically you can instantiate the driver but like nobody does that in real life 