* Versioning of the service * Authentication * Support for all of the HTTP Verbs - including the lesser known ones like OPTIONS * Support for error responses as HTTP Status Codes with a useful payload * i18n * Complex search criteria - allowing boolean operators and complex sorts.
&gt; Add one package, and it'll automatically mark dozens of others, sometimes one will end up with several parallel versions of the same package either. That's in a way true for Spring modules too ;) Check your calculated pom dependencies (if you use Maven) what happens if you just add Spring MVC. &gt;and now it also has started to follow the annotation-based no-XML path either, It does, and it's great isn't it? Java EE actually sort of started the trend to be honest with (can you believe it) EJB 3 among all technologies. One of the first things to have very lightweight annotation based definitions (all the way back in 2005).
And here I was hoping that somebody would actually link a public api of place they think did it right/did it best. 
Java core tutorials are debatable (as on any youtube channel), but "Code refactoring" and "Design patterns" tutorials are pretty damn good. I would always recommend him instead of TheNewBoston. To see how desperately TheNewBoston is bad, watch C# tutorials.
If you want to make a proper RESTful web service, make sure you properly follow the *uniform interface* constraint of REST, which almost no-one does. Following the uniform interface constraint means that clients should be able to interact with your web service without knowing anything more than HTTP, your data-type, and your entry-point URL. * Use HTTP as the protocol. Don't make a pseudo-protocol on top of HTTP using custom headers, fixed URLs, stateful authentication, or anything like that. Remember that HTTP is a stateless protocol; if you're using sessions in a RESTful web service, you're doing it wrong. * Make sure that URLs only refer to *things*. REST means REpresentative State Transfer, the point is that the data that gets transferred in requests and responses is supposed to *represent* the *state* of the resource. Don't add URLs like /thing/delete, that's what `DELETE` requests are for; don't make a URL like /thing/state/setActive, instead, allow users to send a `PUT` request to /thing/state, or a `PATCH` request to modify the *state* variable of *thing*. * Hypermedia As The Engine Of Application State (HATEOAS). This is the big one that is rarely followed: it says that state transitions within the web service should only be provided by hypermedia (links between data). You should define fixed relation names, but their links should be expected to be dynamic. For JSON, you can use something like [JSON-HAL](http://stateless.co/hal_specification.html) or [JSON-LD](http://json-ld.org/) for linking data. There are various libraries that support consumption of these data types with ease. * Authenticate using the HTTP `Authorization` header and declare your authentication mechanism using `WWW-Authenticate`. HTTP already has a built-in mechanism for authentication, use it, and remember that it's stateless! Some other things to bear in mind: * Support as many verbs as appropriate. You should *always* support `OPTIONS`, on *every resource*, as that allows a client to query which other verbs are available on the resource. You don't have to support any others, but make it clear which ones are supported in the `Allow` header in a response from `OPTIONS` and when throwing `HTTP 405 Method Not Allowed`. * Define your own data-type in the `application/vnd` (vendor) or `application/prs` (personal/vanity) space, and declare that you're using that data-type in responses. * If you follow HATEOAS properly, and well-define the data type served by your web service, you can shift versioning to be an aspect of the data-type, not the code. Then clients can request which data-type they want using the `Accept` header on a `GET` request, or the `Content-Type` header on a `POST`, `PUT` or `PATCH` request; the server should then respond appropriately based on the version of the request. * You should support ETags and other conditional request mechanisms for `PUT`, `PATCH` and `DELETE` requests (and `GET` requests too, then you can throw `HTTP 304 Not Modified` rather than re-sending data unnecessarily). More reading: * [RFC 7231: HTTP Semantics and Content](http://tools.ietf.org/html/rfc7231) (this obsoletes the more commonly-referenced RFC2616) * [RFC 7232: HTTP Conditional Requests](http://tools.ietf.org/html/rfc7232) * [RFC 7235: HTTP Authentication](http://tools.ietf.org/html/rfc7235) * [Roy Fielding: REST APIs must be hypertext-driven](http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven)
Does something maybe install a network proxy for debugging purposes?
Fucking native language (Spanish) ruining my internetz reputation.
That's fair. We all need to decide what is best for our time and development needs.
I believe Groovy was approached from the Java side moving toward Ruby while Mirah is more of a hybrid in the middle, putting JRuby as more of Ruby moving toward Java. At least that's the conversation I had with the Mirah creator prior to writing the blog. There may have been drinks involved.
/r/scala 
/r/garbage
Another vote for processing. The Android support is pretty good, and will be a good way to get started writing apps. This book is good, and has a free online version. http://natureofcode.com/ And if you want to write processing code on your phone or tablet, there's this IDE https://play.google.com/store/apps/details?id=com.calsignlabs.apde 
If the OP doesn't like using frameworks and/or DI, 99% sure he doesn't write tests, and uses notepad to write his code :D
The AWS api is hands down the best rest api I've ever worked with. http://aws.amazon.com/documentation/
We are mainly an integration house, we write middleware and some User facing apps. If it needs to run on Windows as a client app, needs to run as a windows service, or the only library to connect to a piece of hardware/server is .Net then it's written in C#, otherwise we write it in Java. Until recently I was the only C# dev in the team, though and I also mainly work in Java, the rest of the team work exclusively in Java. It's fairly easy to cross train a grad from Java to C# and vice versa, because usually at the level of knowledge they'll have they are essentially the same language apart from some quirks, and since one major University in the area seems to have sold it's CS degree to Redmond a lot of our candidates have C# as their OO language.
you can build what ever you want...yes it is possible. But you must wonder why? It's going to be a ton more work than just learning one of the frameworks.
In core Java you can listen on a port, read bytes, and write bytes back. So yes, you can.
Java is Turing-complete. So, yes, you can.
Turing complete has nothing to do with accessibility to sockets and certain system resources. For example, I'm pretty sure that applets did not have the capability to read/write to the network, therefore, you could never write a web server in applets because the security policy doesn't allow it.
see, that was my point. I know nothing about wildcard generics, and that's why I asked -- though english not being my primary language, I don't think I was too clear.
https://github.com/NanoHttpd/nanohttpd
:) You don't need a DI framework to use dependency injection. Constructing and managing your own objects is not that difficult. You are right I hate tests haha, but I will write them for complicated logic, but far from 100% coverage. I dislike frameworks that force you into doing things a certain way. I am however a huge fan of open source libs. I prefer taking a bunch of specialized libraries and hooking them together on my own. My current plan. This does not use any annotations for request routing or filtering. No dynamic proxies using reflection (I don't think they are bad but I find the code much less readable and more difficult to debug). * Web server - http://undertow.io/ (Huge fan of this so far, one of the cleanest approaches to non blocking I have seen and has very readable straight forward code) * Validation - Hibernate validation * Config - http://commons.apache.org/proper/commons-configuration/ * Metrics/Health checks - http://metrics.codahale.com/ * JDBC connection pool - https://github.com/brettwooldridge/HikariCP * SQL - http://www.jooq.org/ (Just started looking into this) or http://jdbi.org/ (A little more manual but I prefer to write my own sql rather than let ORMs do it) * Json - Jackson I think hooking these all together is fairly straight forward and at the same time any of the components could be easily swapped out. EDIT: I use Eclipse :)
See comment above for the libraries I would use. I'm not crazy it wouldn't be 100% from scratch. But I really dislike all of the annotations in the current web frameworks as well as the dynamic proxies. I would use a web framework but not something as heavy as Jersey or Spring.
The vanilla JRE networking package includes a full HttpServer: http://docs.oracle.com/javase/7/docs/technotes/guides/net/index.html http://docs.oracle.com/javase/7/docs/jre/api/net/httpserver/spec/index.html It gives you all the tools to operate in HTTP space (methods + uris) but you have to layer your own content type handling on top of that. You could parse XML with core JRE classes, but you would have to roll your own JSON parsing (for now - coming in 9 I believe) You are still learning a framework - it just happens to be part of the core library, and nobody uses it for realz anywhere so it would be a fairly pointless exercise. 
Yep, it is so good. I just wish they would have something like that for JavaScript also.
Open-source libraries
The library performs runtime-analysis of bytecode (of lambdas) to translate Java code into SQL, since LINQ-like expression is not supported in Java at language level. The approach seems far more complex than usual AST-to-SQL and might be more difficult to extend (custom functions/SQL expressions); Would there be a simpler way, I wonder? 
It's just Java EE now. The best place to start is with the [official tutorial](http://docs.oracle.com/javaee/7/tutorial/doc/home.htm). 
Don't.
A Java rest api framework is still built in java. So, yes.
It's still not "view source". (And if the code has been obfuscated, as is the case with most commercial apps, you won't get very far.)
The Netbeans tutorials are really good and most are pretty quick. You have to use the Netbeans IDE but it is a simple .exe install that will also install your application server. www.netbeans.org
Right. Sorry for stupid question. 
Of course. REST is just an architectural style to build web services with. All a framework like Jersey or Spring does for you is provide ways to enforce that style and gives you some tools to make it easier to implement and stay consistent with that style. There's no reason you can't also implement it using a broader tool like a regular servlet or anything else even outside of Java that lets you define and deploy a web service.
Look up a tutorial on how to set up a web server like Apache Tomcat. Create a simple web application using a servlet or JSP (which are basically the same thing but don't worry about that yet). Deploy that app as a WAR to Tomcat and demonstrate that you can browse to it and see a response from your app. That's really the most basic place to start. After that you probably want to look into other topics like: - JSPs and Servlets, what they do and how they differ - JSF - JDBC and how you connect to a database - Some general design paradigms (view -&gt; web services -&gt; business logic -&gt; data access -&gt; DB, that sort of layout and it's variations) - Dependency Injection - Automated Testing - Third party frameworks and what they provide over JEE (Spring is a big one you'll hear about but there are lots of others) There is lots and lots and lots and lots of stuff out there related to Java web dev, try not to get overwhelmed. Just take it a step at a time, there will always be information and tutorials about whatever step you're currently interested in.
The Effective Java book includes type safe heterogeneous containers because there are applications for them. The Person example is a contrived introductory example, so perhaps I should make a note of that. Unlike that introductory example, generic containers cannot be mapped to an object because the set of keys is open. Examples of this are Favorites in item #29 of Effective Java, and SymbolBus in my article. 
&gt; Strings consume a lot of memory in any application. Especially the char[] containing the individual UTF-8 characters is contributing to most of the memory consumption of a JVM. No… Strings are not saved as UTF-8. They’re saved as UTF-16.
I finally worked it out, I downloaded Firefox and installed Java from the main site. There seems to be a problem with downloading and installing Java from the chrome browser. 
I think Jersey is a very good framework I have used it quite a bit. I dislike being forced to use Dependency Injection and I'm not a huge fan of how the configuration works. I spent a lot of time digging through request proxies, filters, and exception mappers which I think can now be solved in much simpler ways. Dropwizard is a very cool framework also. However its a wrapper around an abstraction that sits on top of any number of web server implementations. I feel like thats a bit much. Its just a personal preference I'm not saying any other frameworks are bad. Clearly they are all very popular and not going anywhere. I'll post a sample service on github when I get a chance. Feel free to rip it apart.
RuneScape! How did you learn Java? What resources did you use?
I have 11 years of Java experience and have yet to find a situation where I'd need to implement this pattern.
Our company does for production. It's embarrassing.
The use cases I've encountered are: * A generic container for parameters, settings, or configuration. This is the idea behind the Favorites class in Effective Java, and behind my article's use of SymbolMap for parameters, and behind my article's parsing of configuration files. * An event bus where event types are heterogeneous. [Guava's EventBus](https://code.google.com/p/guava-libraries/wiki/EventBusExplained) seems to follow Effective Java's technique, while my [SymbolBus](http://stevewedig.com/2014/08/28/type-safe-heterogenous-containers-in-java/#symbol-bus) employs symbols. * A component dependency graph, where the components are of heterogeneous types. 
Until today, I was under the impression that ALL strings are automatically interned by the JVM. I was incorrect. Sadly incorrect. Here's some code to show off when String interning is automatic and when it isn't: public class StringTesting { /* * executed on the command line as: * javac StringTesting.java &amp;&amp; java StringTesting hello; */ public static void main(String... args) { String s1 = "hello"; String s2 = "hello"; String s3 = args[0]; System.err.println(s1.equals(s2)); //true System.err.println(s1 == s2); //true System.err.println(s3.equals(s2)); //true System.err.println(s3 == s2); //false } }
Damn !!!! Looks awesome man !! When I get home I will surely try it out
&gt; Java EE I think that's what I meant. I've just stated looking into all these frame works, and all the different terms are a bit confusing. Anyways,I was going to start with the official JEE 7 tutorials as daedalus_structure suggested. 
But when deduplicated will s1 == s2 ? 
Indeed. If they used UTF-8, it would consume less memory.
But accessing the `x`th character would be a lot slower. (At the moment, it’s a trivial operation to get the `x`th `char`, at the cost that the result is wrong if you’re outside the BMP afaik.)
Let's try without: I have not needed this. Does that statement sound equal to the previous I made?
Just a couple of response points: You certainly don't *have* to use a framework for DI, but why would you spend longer than you have to thinking about managing that type of thing when you can just reuse well-test and well written code that is already available to you. "I dislike frameworks that force you into doing things a certain way. I am however a huge fan of open source libs. I prefer taking a bunch of specialized libraries and hooking them together on my own." So here is one thing I will comment on for sure. Not all frameworks necessarily force you do things their way but convention over configuration is a *good* thing. As a corollary to that statement though, I think you *should* be forced to adhere to the convention. From a team perspective, where you may be creating new code, or supporting old code, having some standards in place makes your life so much easier. When a ticket comes in, instead of trying to figure out where this JDBC connection came from (/u/dartalley created a new one in his dao class, and /u/huntsvillian is a lazy bastard and let spring manage and inject it for him) we (the organization) know that data source is managed by spring and we can find the configuration in the appropriate place. As you mentioned, its easy to just make it work (DI isn't hard), but making it work, keeping it maintainable and understandable, that's a little more tricky. The less time I spend having to relearn a coding style the better. (as an aside, from a sql perspective look at mybatis 3, its pretty nice) "I use Eclipse :)" Not a personal attack, but if the Washington Monument was an enormous penis, coated in barbed wire and sulfuric acid.... it would still be one quarter of the dick that eclipse can eat. Just as an example of what I normally what I come across (I'm a big fan of spring) in code reviews, are developers that are creating connections in their dao class (or inheriting from a parent class, or using a util class etc). Setting up explicit commits and rollback states. Basically a lot of repetitive code to handle common interactions. With annotations and spring (DI and transaction management), a few annotations and about 30 less lines of code and we're achieving the same thing. I prefer the brevity (and for me, the clarity that follows) if the shorter annotated classes. 
This is a fantastic way to learn about REST, HTTP, Webservices, etc. When you actually want to make a thing, use a framework, but the framework will always be a bit too magical if you don't have some experience in the nitty-gritty. 
All of them. 
Yes...It's called JAX-RS and it's already a standard API.
You should probably check your class notes. The answers to your homework are probably in there somewhere.
this may become the first MMO i've ever, ever played.
The answer is you do not allow main() methods or textXyz() methods in any production code. Period. Ever. Proper unit tests are their own classes. Typically projects are arranged such that Unit tests and application code reside in two different source directories however this does not prevent the test classes from actually being in the same java packages as the classes that are their test subjects. You only deploy code from the application directory, not the test class directory. There is that issue solved. Now if you want to test private methods from your unit test classes you have a couple options. Use of reflection APIs is one possible way. Another option is to raise private methods visibility from private to package-friendly/default access so that they are visible to the unit test classes in the same package. (There is much debate about whether it is suitable/acceptable to have the need for testability dictate code design/architecture) There are probably as many ways of doing it as there are opinions out there about which way is best...I'll leave that to you to Google.
Absolutely agree that convention is a good thing. If I were to use Spring I would follow all the Spring conventions. However, if I don't use it i'm not going to try and force spring conventions on my project just because they are widely used. I think it also really depends on team size. The majority of the teams I have worked on were under 5 engineers on the same code base. I think if I worked on a much larger project Spring would be a better choice. For personal projects I like to experiment with new things quite a bit. I will check out mybatis 3. The only problems I have ever had with eclipse was running the internal tomcat server, worst plugin ever, the config files never got copied to the right places. Generally all my new stuff runs embedded servers so no war files to deploy. Just a single executable jar and I run via a main method. I haven't run into any eclipse problems since doing this. I do use Intellij at work a bit also.
What's wrong with DI? I thought it was unanimously agreed that DI is better than lookup.
Since deduplication is handled by the garbage collector, even if the object references were modified, it's not something application logic should or can rely on. It's strictly a memory usage optimization.
I would say I definitely fall into the category of someone who uses REST incorrectly. My services would be better classified as RPC over HTTP. I have an extremely unpopular opinion that every request should be a POST with a JSON body (but i don't actually do that for fear of being murdered in my sleep). Getting, creating, searching, updating everything. I think that would be significantly easier than plucking data from cookies, headers, query params, path params, and request body. I have used RabbitMQ for RPC on a project and endpoints were as simple as Function&lt;Request, Response&gt;. I know thats a losing battle so I won't even attempt to argue. I have done a bunch of reading on HATEOAS but never actually used it. It seems like an incredibly powerful concept if you implement it correctly. REST makes perfect sense for the general resource cases GET, PUT, POST, PATCH, DELETE. I tend to have difficulty when it comes to things like searching. i believe the correct way is with a query string? GET /users?firstname={firstName}&amp;age=10 But not all searches are that easy. How would I handle a case where I want to search where 5 &lt; age &lt;= 10. or maybe search locations within a polygon with 100's of geopoints. I would would probably want to POST this search as JSON but does this no longer follow REST? I like Elasticsearches API quite a bit but it generally POSTs a lot of queries because they can be quite complicated. To me it seems like everyone bends the REST rules a little here and there. I have no idea when it is or is not ok to bend them. Then people argue for 5 hours over whether something should be a PUT or a POST and that just frustrates me to no end.
I don't think anything is wrong with it. At least in some projects I have worked on it has been grossly abused. If you have 10 objects being injected into a constructor something is wrong. Now thats a user problem not a DI problem, but I think the DI frameworks make it much easier to just gloss over these poor designs and continue to make it worse. When you do it by hand and you get in that situation it becomes very tedious work so you are almost forced to refactor to a better design. Here is my example. public class ConfigModule extends AbstractModule { @Override protected void configure() { bind(Config.class).to(MyConfig.class).in(Singleton.class); } } public class Config { private static final INSTANCE = new Confg(); public Config getInstance(); // add a setter if I need to be able to use mocks or something in testing } I don't see a huge difference here personally. I think the code can be equally as modular either way. Depending on how I construct objects everything can still be fully mocked in unit testing. There is definitely a little more boilerplate but I think its equally as easy to read if not easier. Someone coming right out of college could understand it in less time than learning a dependency injection framework. Also there would be less runtime errors when DI is not configured correctly. Only recently have I used the Intellij plugins which seem to make DI coding a million times better but I'm still not 100% sold.
Could you tell me more about it? Is the performance or functionality make it not as a good option as PostgreSQL/ MySQL does?
The source is already split, but some of the main code was written with self-test routines and we didn't want to have to maintain two files in parallel instead of one. I guess we'll live with it. 
Good work man that's awesome
Functionality is fine and performance is barely passable. What's embarrassing is: Customer: "I see you're using Derby. We have Oracle/MSSQL/DB2 that's managed by an experienced DBA, so can we configure your product to use that instead?" Us: "No." Customer: "..."
What does the compiler tell you? If you are having trouble with the basics, see [here](http://docs.oracle.com/javase/tutorial/getStarted/cupojava/win32.html) or [here](http://docs.oracle.com/javase/tutorial/getStarted/cupojava/netbeans.html) and especially [here](http://docs.oracle.com/javase/tutorial/getStarted/problems/index.html).
Test code should be in entirely separate classes from the real code being tested, and kept under 'test' source trees that do not get built into the main product. If you have any code in your main source files that is used only for testing, you should delete it as soon as you can.
A list of about 21 errors.. haha Identifiers expected and illegal start of type. are the two ones that repeat over and over
 public static void main(String[] args); That's a declaration. In other words, you declared a function but didn't define it, while you kept putting executable statements in your class definition. So the following variables: int age; double annualPay; Ended up being class MEMBERS. Clearly we're missing something here. What you want to do is: public static void main(String[] args) { int age; double annualPay; // Insert the other statements here } Now THIS is a definition, because we're putting our statements inside the function.
Based on the article, no. The string objects remain distinct, but rather than each pointing to a distinct `char[]`, they end up pointing at the same `chat[]`. In other words, after deduplicatoon `s1 != s2` but `s1.value == s2.value`. (`String.value` is the private `char[]` field.)
I wish I could make something like this. How much experience do you have with Java and programming?
[Say J2EE One More Time](https://i.imgflip.com/bn0r3.jpg)
Also if you use -XX:+UseCompressedStrings the JVM will store strings as ASCII in memory if possible. For most webapps a majority of the strings they encounter are pure ASCII which can save a significant amount of memory.
Definitely my first thought too. It has that vibe. Grats, OP.
OP here. I should probably have been clear. Java is easier to understand for me because I am already familiar with for loops, else if statements..etc. Add to the fact that I know OOP way, it's not hard for me to grasp the tutorials. Having said that, it is one to to understand how something is done but it's another to build something yourself. I know I have only scratched the tip of Java. I am looking forward to start building software/app in Java. Best way to learn is to just do it.
It is possible to build a class filter that drops all methods annotated with @Test (if you want to do so, look into [ASM](asm.ow2.org), but this would a) not necessarily mitigate your risk, as the classes may contain other test-related functions, b) add the risk that an annotation gets misplaced. What is usually done is to separate the test code from the main code. I've seen a) projects with separate main/ and test/ source directories, e.g. maven usually sets projects up that way, b) completely separate application / test projects.
Not really related to your problem, but you should know that class names in Java should always start with capital letter. You should rename personalInfo to PersonalInfo. Happy coding.
This occurs in a separate thread, there is no GC pause. This takes some CPU time however, so the overall CPU consumption of the JVM process will increase.
It's G1 only (overall G1 performance has been improved in 8u20), and it adds a phase to the GC cycle which could cost some application both throughput and latency. Generally, the decreased footprint and improved cache locality for commonly used strings should be a net benefit for most real world applications. Only way to make sure if this helps in a specific case is of course to measure using realistic loads. 
Truly an inspiration. Maybe it has a *bad presentation*, but here we are programmers and we care about other things. And you must have worked hard in those things.
The Netbeans docs can get you started with Jersey: https://netbeans.org/kb/trails/web.html
&gt; JVM currently uses surrogate pairs Yeah, that’s what I mean. The 1000th true unicode character isn’t necessarily the 1000th `char` in the internal `char[]` – you have to go over the entire array, keeping count of the true characters you passed. And the character doesn’t necessarily fit into a `char` either.
https://dropwizard.github.io/dropwizard/ should be all you need.
30 blocks aren't enough to explode computers. Probably the problem resides in another place.
Oh wow haha, didn't realise it was there! Thanks :)
I've tried running my Intellij 13 using G1GC with deduplication. Seems like small hiccups occur quite often. Previously, I was using CMS and no slowness at all. Does anyone else have a benchmark on 8u20 G1GC compared to the CMS? edit: * Using G1GC + deduplication on my Intellij idea 13 for mid size Python project: 1.4 GB - 2.5 GB memory with lots of hiccup * Using Concurrent Mark Sweep GC: 900MB - 1.1GB. No hiccup at all. I guess it's either concurrent mark sweep is superior for desktop application or G1GC+deduplication is not yet ready. I'm sorry if this all is only based on observation because I don't have time yet to setup proper benchmark.
UseCompressedStrings was removed in Java 7. 
Yes. Op, Jersey is the way to go. 
You may also be getting an error for setting your double to a number with no decimal point, I think. 12000.0 instead. EDIT: I'm wrong
It's awesome! You always change textures and animations in the future, but with working engine and net-code its really really impressive for one person project. I'm already at level 3. I loved the quick registration option
I always try to fix the first error and compile. Sometimes, this will take care of all of the errors. At least it should reduce the number.
Good choice, they're the best! Oh, but it's not JEE 7, but Java EE 7 ;)
Another thing that may help: public static void main(String[] args) does not get followed by a ; but rather another set of {} to write your methods in. That may even be most of your errors since it thinks the rest of the main method doesn't exist. (may not be the best explanation, sorry, but I hope it helps) 
Take a look at this blog which will explain the progression from isolation and multitenancy to security: http://www.waratek.com/blog/june-2014/waratek-application-security-launch-day
To add to what others said, it is probably not the best idea to include your personal information (like full name and age) here. For your privacy.
What u/midknightsrose said. You need to remove the semi-colon following your main statement and add a {. Then you need to close your main statement after your System.out.println() with a }.
1) Even though you are drawing 30 blocks, only a handful of those faces are actually visible. This is something that an algorithm like [Marching Cubes or Surface Nets](http://0fps.net/2012/07/12/smooth-voxel-terrain-part-2/) can help with. 2) You didn't give us any details about how you are drawing. So I will assume you are rendering with immediate mode(glBegin/glEnd). This is going to be incredibly slow. You need to send your geometry to the GPU ahead of time if you want any performance. This means display lists, or VBOs(vertex buffer objects), or VAs(vertex arrays) and shaders.
No. This is not a problem at all.
I thought the whole point of a double was that it has a decimal point. Is this not an issue because Java auto sets the decimal place if its not defined?
Java will automatically upcast primitive number types, but not downcast. Also it usually is better to use the 'd' or 'D' suffix to indicate a double (12D, 14.272D, 12d, etc). Java forces you to use F/f for floats anyways, so it makes things somewhat more consistent. 
You already tell the Java compiler that your value is a floating point number by using the `double` keyword. Adding `.0` does nothing, as 123 and 123.0 are equal values.
&gt; but you could always have a write-only collection called 'searchqueries' and a read-only collection called 'searchresults', if you absolutely insist on using POST when searching using very large query parameters. Interesting, I never thought of it that way. Thanks for the info I am going to check out JSON-HAL
I have had good experience using JTidy to clean up HTML and parse it into a DOM, then use XSLT to filter and restrict elements and attributes to an acceptable subset.
Man it's just AMAZING!!! Remembers me the Old Runescape, so look where is runescape now man, a great game with million of players. I Love making games and i love playing them, i'm a bit new to java and i'm studying every single day, if you want some help with your game i'd be so pleasured to contribute. You share your knowledge about making games with me and them i work tottally for free to help to build this amazing piece, if you want this please contact me :D
There's a really cool and easy to use Java encryption library called Jasypt. I use it myself and it is quite nice.
1 - public static void main(String[] args); Here man, the Main function must have a body ({}) and the other things below this declaration must be inside this body! Example: public static void main (String[] args){ //your code here } 2 - When you will declare a variable set the value in the declaration as you did when declared the string variable, example: int age = 25; double annualPay = 12000; 3 - The print you did have a "," you can remove this or remove from the declaration of "name". 4 - Your class name must start with a capital letter ALWAYS!! public class PersonalInfo{} Finally, to work, your code should be like this: // This is my Personal Info public class PersonalInfo{ public static void main(String[] args){ int age = 25; double annualPay = 120000; String name = "Alex Marczynski"; System.out.print("My name is" + name + ", my age is" + age + " and I hope to earn $" + annualPay + " each year"); } }
This could mean that you have the wrong version of Eclipse installed (32-bit instead of 64-bit or vice versa). Could you tell us what operating system you're using (Windows, Mac, etc)?
The basics of JEE (Don't say J2EE anymore hehe) are: - Serlets - JSP (Java Server Pages) - JDBC (Java DB Connection) - JSTL (Java Standard Tag Library) I recomend the official tutorials and the "Head First JSP and Servlets" book After this if you want advanced knowledge some topics are: - JPA (Java Persistance API) - Hibernate (An implementation of JPA) - Spring (Have many modules, Scurity, MVC etc...) - VRaptor (Amazing MVC and Dependence Injection) - REST (All today is about restfull software) - Maven (Amazing repository) - EJB (Enterprise Java Beans) And much much muuuuuch more... Good Luck!
I was reading through some forums and this came up so I'm going to see if switching eclipse versions is the answer.
congratulations!
Depending on your particular use case, you might tackle this one level higher than Java. You can add the `Content-Security-Policy` header to all of your responses. There are two benefits: 1. you can white list the origins of the `js` scripts you allow to run, and 2) you *cannot* have inline `&lt;script&gt;` tags, which **eliminates** XSS attacks. Here is a good article talking about CSP: http://www.html5rocks.com/en/tutorials/security/content-security-policy/
Because the libraries are not always needed?
Instead of hard coded the color as `Color.green` instaed change it to a variable (ie `Color circleColor`). Modify the color as desired in your listener, then call `repaint()`. Also, this is better suited for /r/javahelp and include 4 additional spaces at the beginning of each line of code so that it formats properly.
To prevent namespace pollution.
If accepting HTML is your only option, Antisamy is your best choice. Using a markup language (bb code, markdown, etc) is another decent option if accepting HTML isn't a strict requirement.
&gt; The basics of JEE (Don't say J2EE anymore hehe) The basics of Java EE (Don't say JEE anymore hehe) :+ 
[provided the browser supports content security policy...](http://caniuse.com/#feat=contentsecuritypolicy) CSP should be a defense-in-depth technique and not be relied upon as your only defense.
Best to copy and paste the error Into Google whenever something like this happens.
If i paste it in Google it says no resoults..
I suggesting using Spring. Core will help with dependency injection, and Spring MVC will allow you to create JSON based RESTful controllers. If you ever need to write a web front-end, Spring will make it easy to do that. I've used it with many projects, it's a learning curve but worth it. http://spring.io/. Alternatively, I've recently built REST service with Node.js, but Node is still fairly new.
http://stackoverflow.com/questions/860187/access-restriction-on-class-due-to-restriction-on-required-library-rt-jar
There's still `-XX:+UseCompressedOops`, which can give a non-negligible memory savings at a minor efficiency loss, but I'm fairly sure it's generally the default for 64 bit JVMs at this point. Application code is probably the better place to look memory savings when it's necessary.
May I make a suggestion? [Watch this guy's videos.](https://www.youtube.com/watch?v=Sc2atFv_h_I) I learned a decent amount about REST and HATEOAS from this. If you aren't interested in Angular.js, you can stop at around tutorial 6 or 7. 
One thing to make sure is that you actually downloaded a JDK (the development kit) and not just a JRE (runtime environment). I also like to explicitly download my jdk to a specific directory and set my JAVA_HOME environment variable to point directly at the install. Put the %JAVA_HOME%\bin at the start of your PATH environment variable. Do make sure that you use the x64 bit jdk AND the x64 Eclipse distribution. 
Erm, the very short stint I had with .net was with vb.net and there was just as much importing. Is there something I am missing? Most ides handle it for you with a hot key set anyway.
I think you want to get a handle on if they know how to use a debugger or not. Pre writing code that is either broken or has a full in the blanks style thing might be a good way to go. Or, instead of a full blown program, ask them to create a class that fits in to your program, or a program that uses classes or a library you've made in a way you specify. If they start hacking away without asking for the javadoc, probably a good sign they aren't ready for the big leagues.
Java does not have the ability to use separate namespaces. There's only the one and having a lot of the (incredibly big) standard library imported would make it difficult to find names for members and methods.
Actually, that's not true at all. The only reason to go 64 is if you want to go above the 32 bit jvms memory limits. 
&gt; Now if you want to test private methods from your unit test classes you have a couple options. Use of reflection APIs is one possible way. Yeah, those kinds of methods are why some of the testing code is in with the main source. We'll probably end up using reflection. &gt; Another option is to raise private methods visibility from private to package-friendly/default access so that they are visible to the unit test classes in the same package. (There is much debate about whether it is suitable/acceptable to have the need for testability dictate code design/architecture) I really wish Java supported 'friend' classes, specifically for this kind of thing. 
I don't understand your question. Are you asking why Java doesn't have as much stuff in a global namespace by default...?
I don't know if I'd consider using Node as a "Java best practice "
Hey man, I'd be interested in talking with you. I sent you a message about it.
I'd be interested! I'm 23 though :/
Hey man, that's fine. I pmd my skype info 
Sure things! Could I send you my skype info? 
Sweet! Thanks. 
I'm down too if you need any help. Not really a beginner but I'm not an expert either. Message me your skype!
yeah pm me
Yet another site that is nearly unreadable on mobile because of a fixed banner.
I'm 18 and in the same boat. I'd definitely be interested in talking and helping each other out.
Also if he has 32 bit browsers installed then he'll need the respective java for them.
The more I think about it, the more Akka just seems like a glorified type-safe producer/consumer composite mediator pattern with colleagues that extend some threadable interface. Am I wrong? I really don't know much about Akka except what the buzz tries to say about it. I don't really see why people are treating it like some silver bullet. You could tinker around for a weekend and design the framework yourself if you have even a moderate understanding of OOP. It really isn't the best solution for every problem.
Just another quick tip while passing, I'm new to java as well and something I like to do is add a value to your variables when you declare them to clean up your code a bit. You can do it like this: int age = 25; double annualPay = 120000;
Quite surprisingly the CPU usage is pretty low for Intellij with G1GC + deduplication compared to CMS albeit higher memory usage. It seems that CMS provider better responsiveness (at the cost of CPU usage??? Even on idle it consume 10% - 20% CPU usage while G1GC consume 0% - 5% idle).
Hey, I'm just heading to bed. I'll PM you my info and then accept it tomorrow; we can talk then. 
Yes*.
I've heard a lot about Node.js and Mongo working well together and speeding up development, but yes, I'd prefer to use Java for this project since I already know the language and basic environment.
You can try to set GC pause goals to balance for responsiveness, which is one of the primary use cases for G1 (`-XX:MaxGCPauseMillis=n`).
It would be useful to extend this framework for cross machine parallelism. 
I started with java 2 years ago but am still a programming noob. 19 btw. 
Actors provide a closer to life implementation of concurrent processing. Ie just like object oriented is designed to resemble objects in the real world actor are designed to "look" and "feel" like parallel tasks.
But most tutoriales teach GL11, and if you are working with an old computer, you really have no choice (besides buying a new one).
Sure, hit me up @bucial11 - I've been developing in Java for 12~ months now, recently starting working with LWJGL/OpenGL so I may be of some use
We won't be doing your homework for you. Give it your best shot, show us your code and ask questions where you're having trouble. You won't learn anything by being spoonfed the answers.
+ 0-day account + only an image posted (which is not even clearly readable) + non-descriptive title + no efforts shown ----- + Good luck with getting help - that's not the way to post asking for help. This sub is absolutely not for doing your work. Show some efforts, formulate a proper post and you could get help - also - better post questions like these (with your own efforts) on /r/javahelp 
I'm still here. I haven't looked at the API much, but I will soon. 
It's interesting to me how much the lingo in Java has been co-opted by the web development crowd. It's as if people don't know that Java is even used outside of the web services context. This isn't an API testing tool, it's a REST API testing tool. Not that it isn't useful, but it's way more limited than the title would suggest.
Awesome! I pm'd you my skype info 
Given the abilities of modern IDEs to "understand" code, I find this to be a useless abstraction. I suppose in the early days of C++ this might have been an occasionally useful abstraction. 
Some are already handled by project [lombok](http://projectlombok.org/) such as [Sneaky Throw](http://projectlombok.org/features/SneakyThrows.html) and [class properties](http://projectlombok.org/features/Data.html). Project lombok didn't do any bytecode manipulation or any crazy reflection. It just generates the extra boilerplate during compile time. As long as your IDE/text editor support project lombok, integration is a breeze. For multiline String, I don't think there's such thing as multiline String library in Java so far. There was some [proposal](http://blog.joda.org/2008/01/java-7-multi-line-string-literals_594.html) for it though
It's been a little since my java days, but one reason I might use the object's getter/setter in internal methods is so that you uniformly use that access interface (not Java Interface, but interface as an OOP pattern) across all use-cases. Imagine if you were to have some post-processing logic in the getter (e.g. string formatting), if you use the attribute directly you would miss the post-processing logic. I suppose it *probably* doesn't matter which way you do it (though I bow humbly to any java-guru's advice on the matter), but regardless you want to be consistent in the implementation. 
Glad that helped :). Just a heads up, the architecture for G1 is very different than CMS (I wasn't able to find the original whitepaper I read years back). It may give other improvements (lower heap fragmentation was one goal), but there could be drawbacks depending on heap usage (increased CPU cache miss for example). Just be aware, it's probably a good idea to test thoroughly if you're planning to use it in production.
As long as you are not calling non-final or non-private methods from the constructor, it probably only matters if you are adhering to some OO design. When you can annotate a method to include logging or other pre/post conditional calls, it makes more sense to use a getter/setter instead of field access. 
I don't mind either variants, but they must be consistent. Variant 2 for me is broke, because it's a mixture of access.
This might seem like a troll answer, but it's not intended to be. As someone who worked with eclipse for nearly ten years, switch to IntelliJ before you get too comfortable with eclipse. The free community edition is more then enough for most Java developers, and if it starts to be worth it financially, the Ultimate edition is arguably the best IDE out there for any language.
Getters and setters are for encapsulation, to protect the inside of the class from classes outside. By calling getters and setters from the inside, you're literally protecting yourself from yourself.
If you can afford it - IntelliJ. IMO it's the best IDE hands down. If you cannot afford it, maybe the Community Edition will be enough.
Top contenders are IntelliJ, Eclipse and Netbeans. Download each one and try each out, go with the one you like best.
Are there any particular reasons why anyone should switch?
It's not java but it's a solution to the REST problem.
IntelliJ Idea. Ex eclipse / netbeans user, look no further
Intellij Idea. If you are a student you can use the community edition for free. 
Java is cross platform and support of various operating system is actually more of a VM business. As long as you don't use external libraries relying on exclusive OS features, you don't have to think about OS. 
In my opinion [IntelliJ IDEA](http://www.jetbrains.com/idea/) is the best one out there, the community edition is free, the ultimate edition is really nice too, and you can get a free ultimate edition license if you work on a FOSS project, though the main benefits to the ultimate edition are support for JavaEE stuff and web development (think PHP and Servlets), and oh my god if you do SQL stuff it has wonderful syntax hilighting, suggestions, and other stuff for SQL, it has wonderful type checking and other tools built in, for example tools for testing REST web APIs from the IDE without the hassle of writing code to send stuff with the same headers and whatnot, it looks wonderful, and is a great IDE all around, it can also (with some plugins) emulate most of the features of other IDEs jetbrains offers (ie php and stuff like that does pretty much the same as phpStorm), there's a plugin for pretty much *everything* Edit: how do i markdown?
Don't use getters and setters inside the class. A class owns its own fields. Getters and setters, along with access modifiers, exist to define the interface to the world outside that class. If you need to transform data entering or leaving through that boundary the getter and setter methods are the place to do so. But inside the class you should be working with the actual field. If you need to modify field contents every time you use it internally that is a code smell that you are not storing the correct piece of state in that field. The fields *length* and *width* will always refer to those private scoped backing fields. The getter and setter methods are virtual and may be overridden by a subclass of Rectangle. So you can easily demonstrate a case where a subclass of Rectangle overrides the getters, perhaps for display purposes, and all of a sudden getArea() isn't calculating correctly. Example: public class StrangeRectangle extends Rectangle { StrangeRectangle(int length, int width) { super(length, width); } @Override public int getLength() { System.out.println("get length subclass"); return 4; } @Override public int getWidth() { System.out.println("get width subclass"); return 4; } } public class Main { public static void main(String[] args) { StrangeRectangle sr = new StrangeRectangle(2,5); // We put in 2 and 5, and did not override getArea. // The expected answer is 10, but we get 16 instead System.out.println("Area : "+sr.getArea()); } } 
* Format the code with 4 spaces so it is more readable * Add more code and context, because this is useless as is
Started java just 2 weeks ago as part of my CS study, learning very fast, pm me if you wanna talk. 
No. There are a few different cases when handling IO because of file system disparities but otherwise there aren't any differences. Java's cross platform.
Use NetBeans. It's free, has "everything" (profiler, maven support, versioning, multiple languages, ...) out-of-the-box, has an easy to learn and use UI. If you go with Netbeans there is a good chance that if you go in future for example to JEE backend java coding, or HTML5 frontend coding, or maybe C++, or PHP, that you will be able to stay with netbeans. If you will be familiar with the IDE, then new technologies will be easier to adapt. 
Community is still better than Eclipse for sure. Ultimate is worth the money though.
Sure, if you need any of the functionality it offers. It's not a "must buy no matter what".
Community is free for everyone. Ultimate has various discounts for open source projects and academia or non-profits.
well that wasn't all the code just part. i fixed i hadn't put a bracket
I'll octuple-endorse IntelliJ. Not just because it's great for Java, but because it's also a pretty slick editor for JavaScript, CSS, Sass, grunt, XML and everything else.
I think the way you are looking at C might not be the ideal means. In C there is a standard library, which includes functions such as fopen, fwrite, printf, etc. Those are the same on all platforms. When you are talking about "a lot of differences in coding on different operating systems", what you are really using are APIs that are provided by those operating systems. In Java, you have an extensive standard library, that in all honesty blows my mind in its scope. So much of the API differences are embedded into the implementation details. There is one little thing on the mac that is special about UI - it is the look and feel of the application regarding menubars. But for the most part you don't have to even know about it. 
Yes but if you expect help from people you should learn how to properly ask for it.
The biggest issue is Oracle's support for OSX. You'll have to some work just to install it. Or alternately use OpenJDK instead. If you are on equal versions of the JDK, it should work almost exactly the same as on Windows. Java on Linux works perfectly well.
Ahhh. You're right. I thought the community edition was limited to only non-commercial projects.
So far I have not seen a single person who would want to go back to Eclipse/Netbeans after using Idea for a while.
Making a thread (in the wrong subreddit) yelling for help, is not going to get you any. Unformatted code is really hard to read. Please use code blocks. But since I'm in a helping mood, you're missing a closing bracket right before you check if K is down key. 
I'm not sure what best practice is but my guess is that this has probably evolved with the introduction of proxied objects via Technologies like AOP and javassist For example, I know for a fact javassist proxies will not be initialized / accessed when accessing a field directly within the class. If you have a lazy loaded (proxied) associated object and do not access it via the accessors then javassist will not have a chance to do its thing. This has caught me numerous times when using JPA with hibernate resulting in things like lazy initialization exceptions and null values for field members which is a PITA when debugging issues with hash codes and equals methods.
&gt; Variant 2 for me is broke, because it's a mixture of access. What do you mean by that? It's using the getters. Sincerely, Richard Nixon 
I've been using Netbeans for quite a while - it's free, works really well, and is full featured.
There's dozens of solutions to 'the REST problem' in various languages with various frameworks. Suggesting Node in an /r/java post with "Java" in the title seems a bit pointless.
i say its a 50/50 judgement call and completely situational ordinarily i don't 
It's a waste of time to learn an IDE then switch to another one.
&gt; I think this falls under the common fallacy of oversimplifying things. Fair enough, akka does a lot of things that I don't think a single person could implement in a crunch. From the outside it does look complicated, but when you isolate the problem itself (relying on blocked threads) it's pretty simple. Master/Actor, Master/Worker, whatever you want to call it pattern already exists as Mediator/Colleague, except your Colleagues are threads. Why give a new name to an existing solution? Observer Colleagues wrap Observable threads that handle blocking requests, leaving your Observer Colleague unblocked. When your Colleague is notified of a result it can be produced to your Mediator immediately. Now give your mediator a BlockingQueue that Colleagues can put and take from and what do you get? Now it's a thread safe producer/consumer pattern with only a few lines of additional code. Put some generics in your interfaces and it's now typesafe. That's about 15 minutes of work. &gt; create work that will be resolved at some point, promises, and will only block threads when actual work happens. There you go. Anyone who's versed in GoF patterns now knows exactly what you're talking about. No need for new definitions to old problems/solutions, no need for a 3rd party framework. This is all stuff you can find on Google and YouTube and write yourself, it's super simple. I agree akka does have superior exception handling and thread regeneration that isn't as fundamental to code (though Callable and ExecutorService do make it pretty damn easy). [Future is the real problem](https://www.youtube.com/watch?v=L-rKLSdPEMs). Both patterns are even used to describe solutions to similar problems (widget communication on a GUI is the generic Mediator example, but we're talking about when an ActionListener would be blocked... just make it Observable). Does one more layer of abstraction really warrant an entirely new design pattern that has its own proprietary framework simply because it uses threads? Is it really that big of a deal that we now have to define this "reactive programming" paradigm? A lot of people seem to think so, but I'm old and in the way I guess.
Message me your info, I'm just getting back into Java for the exact same reason you are, ha.
I'm not a Java expert but I'm downloading the book, and I'll see if I can help!
There are few little things that are different depending on OS. As far as I remmber: 1. Getting the default toolkit can be frobidden on some OS. 2. Windows and linux have different sequences for button press events. 
Your analysis is akin to comparing the practice to wearing a condom while masturbating, but I don't think this is fair. For simple setters and getters examples given above, it is overkill and overhead. However, for more complex setters with input validation, or getters for complex data models including partial/dynamically-loaded subsets of a large data model, it makes a LOT of sense to me to use them to reduce complexity. So in the sake of uniformity, I have my IDE generate them for me, and I use them everywhere. It makes it easy when I have to go back and change a big chuck of the data structure to only load as needed.
When are you going online?
Don't use the overhead argument as a reason for not using getters from within your class. This is pre-mature optimization and the difference is very small if it's anything. The JVM is very good at noticing these kinds if things at runtime and can recompile the running code to eliminate the additional function calls. If it makes sense to use them because they encapsulate some logic (like input validation) then by all means use them to have DRY code (Don't Repeat Yourself). The one benefit I have found from using getters is that the underlying data structure can change and the rest of the code in the class doesn't have to change. 
This is true. I have to admit I was thinking more in C++ than Java where there is no virtual machine. But you are correct. 
I just use vim and plugins 
it's the same as windows nowadays EDIT: without the annoying ads and adware 
[This is the page you want](http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html) Their general archive [is at this link](http://www.oracle.com/technetwork/java/archive-139210.html)
Why? Is searching for this-&gt;something is easier than searching for this-&gt;setSomething ? EDIT: I guess you don't have to type this-&gt;(set|get)Something, but then you have to remember to call a input validation / loader function before you access the variable, every time you access the variable. That is messy IMO, but I'm a young coder ;)
Eclipse icon just loads the launcher, which does some configuration and launches eclipse as a java application, so it wouldn't show any jumplists. You might be able to shortcut the JVM executable, I haven't tried that though. 
*raises hand* I bought intellij in the "end of the world sale" a couple years ago. Tried it for a couple projects, didn't like it, went back to netbeans. Eclipse can rot in hell as a java ide.
Always this advice, for IDEs, editors, or many other types of tools; keep in mind that any tool you're going to be using for 4-12 hours a day for next several years is going to be being used a *lot*. It's worth investing a couple weeks trying and really learning each, to figure out which you like and which will be your best way to get work done.
It really depends. You might have some business logic or various other things that you may want to ensure run when using within a class. The real answer is simply "use your judgement"
I tried IDEA for a few months, couldn't stand it. Went back to Eclipse. Sure, it has its problems, but at least the font rendering is not done with a potato.
Twitch is for video games only, I think. Try Youtube streaming.
There are far fewer differences than C++, but they can be significant. Paramount among them are related to file locking semantics of Windows. When you use memory-mapped I/O in windows, expect file locks to hang around for a ridiculously long period of time. Also, expect that real-world deployments on Windows will involve fighting the wretched file-locking behaviour of your client/university/mom's antivirus software. Otherwise, crap related to architecture-specific primitive widths and similar stuff is a non-issue.
I tried it, loved it, but I cannot for the life of me get used to the different terminology and menu locations. Slowed me down waaaay too much to be productive unfortunately.
getX won't give you false positives for local variables named X. And when you really want to know who might be fucking up the value of a field, you can search for setX, and unless someone is setting it directly, you're sure to find the culprit.
A C++ compiler will typically inline simple accessors anyway.
IntelliJ IDEA .
The Amish of the software development community.
Today I learned: learn more. 
That's more than what I hoped, but also a lot to change when new versions of Java and IDEs come out... Regarding the multiline string, the entire JCP, all the proposals/forums is the reason they're never going to get anything done. Anyway I fixed that myself by disabling one annoying check in Eclipse JDT compiler.
Can you explain a little more? What tools did you use with the ultimate version, and why did you stop using them?
Landmark?
I like eclipse best, but IntelliJ is also popular. 
Java is designed to be easy to use, easy to read, fast, and maintainable language. Verbosity and minimum features might be its side effect. However, for the main application development, nothing beats the long term maintainability/stability of Java. I guess you're better off with other language if you're into shorter line of code / cool features. I myself using Python alongside Java for tooling, small IO oriented batch application, and testing.
&gt; However, for more complex setters with input validation, or getters for &gt; complex data models including partial/dynamically-loaded subsets of a &gt; large data model, it makes a LOT of sense to me to use them to &gt; reduce complexity. YAGNI &gt; I have my IDE generate them for me, and I use them everywhere. [Getters and setters considered evil](http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html). Overuse of getters and setters breaks encapsulation because they leak internal state.
Unless your CS work involves a lot of JavaEE I doubt you'd use too many of the Ultimate features. However if you get an itch to make a webapp you'll probably enjoy it
&gt; getX won't give you false positives for local variables named X. This is not something I worry about with a modern IDE. &gt; And when you really want to know who might be fucking up the value of &gt; a field Getting rid of getters and setters will go a long way towards tightening encapsulation and reducing the number of culprits that could be fucking up the values inside your class. Getters and setters [leak state](http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html). Getters/setters should be used sparingly when absolutely necessary.
If you want more less stuff, you need to evaluate the equation: 0 = more &gt; less
&gt; Download each one and try each out, go with the one you like best. I echo this. In places like reddit you'll get a lot of folks shouting IntelliJ IntelliJ at you. But the truth is that IntelliJ fans are a distinct minority of Java developers. A very big majority of Java developers choose Eclipse, though&amp;mdash;naturally, being in the majority&amp;mdash;they're not as vocal/zealoted about it. They're both great IDEs for writing Java, with _very, very_ similar feature sets as far as the Java editor goes. Try them both out and see which you like best.
Basically the images act as 2d arrays of data. Each pixel corresponds to a different block. IF you look at the `com.mojange.escape.level.Level` class, you will see the following method which converts the pixel data to the corresponding blocks: protected Block getBlock(int x, int y, int col) { if (col == 0x93FF9B) return new SolidBlock(); if (col == 0x009300) return new PitBlock(); if (col == 0xFFFFFF) return new SolidBlock(); if (col == 0x00FFFF) return new VanishBlock(); if (col == 0xFFFF64) return new ChestBlock(); if (col == 0x0000FF) return new WaterBlock(); if (col == 0xFF3A02) return new TorchBlock(); if (col == 0x4C4C4C) return new BarsBlock(); if (col == 0xFF66FF) return new LadderBlock(false); if (col == 0x9E009E) return new LadderBlock(true); if (col == 0xC1C14D) return new LootBlock(); if (col == 0xC6C6C6) return new DoorBlock(); if (col == 0x00FFA7) return new SwitchBlock(); if (col == 0x009380) return new PressurePlateBlock(); if (col == 0xff0005) return new IceBlock(); if (col == 0x3F3F60) return new IceBlock(); if (col == 0xC6C697) return new LockedDoorBlock(); if (col == 0xFFBA02) return new AltarBlock(); if (col == 0x749327) return new SpiritWallBlock(); if (col == 0x1A2108) return new Block(); if (col == 0x00C2A7) return new FinalUnlockBlock(); if (col == 0x000056) return new WinBlock(); return new Block(); } 
You can stream what ever you want: paint drying, typing a document etc. 
This article contains all sorts of assertions that are deeply arguable. And put together they just don't support the slightly absurd conclusion. &gt; A fundamental precept of OO systems is that an object should not expose any of its implementation details. This way, you can change the implementation without changing the code that uses the object. It follows then that in OO systems you should avoid getter and setter functions since they mostly provide access to implementation details. Well, no, getters and setters aren't "implementation details". Since they're methods, their implementation can change. What does "mostly" here mean anyway? As far as I can see it means "don't always". &gt; One basic principle of OO systems is data abstraction. You should completely hide the way in which an object implements a message handler from the rest of the program. There are different levels of data hiding appropriate at different levels of abstraction/granularity. Even if the class itself doesn't completely abstract its representation of "data", the package or module might. People get into all sorts of problems with they equate "objects" with "modules". No, these are at least one level of granularity apart, perhaps more. &gt; That's one reason why all of your instance variables (a class's nonconstant fields) should be `private` ... If you make an instance variable public, then you can't change the field as the class evolves over time because you would break the external code that uses the field. You don't want to search 1,000 uses of a class simply because you change that class. ... Getter and setter methods (also known as accessors) are dangerous for the same reason that public fields are dangerous: They provide external access to implementation details. This is a misunderstanding. In Java, access to public fields is problematic because: - public fields aren't polymorphic, and - they can't be replaced with functions. Getters/setters exist because they don't suffer the above problems. (Some other languages don't suffer this problem, FTR.) &gt; This implementation hiding principle leads to a good acid test of an OO system's quality: Can you make massive changes to a class definition—even throw out the whole thing and replace it with a completely different implementation—without impacting any of the code that uses that class's objects? This sort of modularization is the central premise of object orientation and makes maintenance much easier. Without implementation hiding, there's little point in using other OO features. Yes, if you make "massive changes" to the definition of an important class in the system, that's going to affect a lot of code. Duh. Whether that code is sitting in the same class i.e. file, or in a different class in the same package is almost irrelevant. &gt; The lack of getter/setter methods doesn't mean that some data doesn't flow through the system. Nonetheless, it's best to minimize data movement as much as possible. My experience is that maintainability is inversely proportionate to the amount of data that moves between objects. Though you might not see how yet, you can actually eliminate most of this data movement. The author gives us no reason at all to think that this might be true. Sure, you can _sometimes_ minimize "the amount of data that moves between objects" by packaging more functionality into the class that defines the data model, but it's not clear why this would make the code more robust in the face of change. You're still going to have essentially the same code, just in a different file. Well, this is a little too easy, and I'm bored, so I won't continue with the rest of the article. I do think it's worth pointing out that if I wanted to make life difficult for a programmer new to OO, then this is _exactly_ the kind of thing I would make them read. A bunch of dubious assertions that really only serve to make the programmer uncomfortable with the kind of code they will inevitably need to write from time to time. 
Tried it, went back to eclipse. Could not find the tab/enter after auto brace option that eclipse had and that slowed me down far too much.
Edit: Nevermind, this guy put it much better http://www.reddit.com/r/java/comments/2f53tv/getters_and_setters_considered_evil_counter_to/ck611ye Tl;dr: The article is questionable and getter/setters are not "evil".
Another Eclipse / IntelliJ / Netbeans user reporting in. Depending on what project I'm on, I'll use any of the above, though I always seem to return to Eclipse.
That's idiotic.
Did you save the broadcast? I'd watch it when I have some downtime. 
News at 11.
Holy crap that article is old. 
IntelliJ IDEA 13.1.4 Ultimate reporting in.
&gt; Well, no, getters and setters aren't "implementation details". Since &gt; they're methods, their implementation can change. Getters and setters are methods, yes. But, they don't exist to tell an object to do something (they are not behaviors), so what exactly is the purpose of getters and setters? &gt; There are different levels of data hiding appropriate at different levels &gt; of abstraction/granularity. Of course, which is why getters/setters have a purpose. For example, data binding. &gt; People get into all sorts of problems with they equate "objects" with &gt; "modules". Let's stick with objects and programming with objects. Unless Alan Kay is wrong, isn't OOP about messaging and retention and hiding of process state? About modeling the flow of behavior (messages) rather than the flow of data? Why is retention of process state important? &gt; This is a misunderstanding. I think you are misunderstanding his objection to getters/setters. The author is equating the flow of data into and out of objects to the leakage of implementation details. &gt; Yes, if you make "massive changes" to the definition of an important &gt; class in the system, that's going to affect a lot of code. Isn't the Liskov Substitution Principle a cornerstone of OOP? &gt; The author gives us no reason at all to think that this might be true. Perhaps so. But if getters/setters expose data about an object to its collaborators, do they not increase the coupling between them? Doesn't increased coupling between objects make classes less robust in the face of change? Tighter coupling isn't always bad, such as in the case of data binding between a template and its backing object. Which is why getters/setters aren't always bad. &gt; You're still going to have essentially the same code, just in a different &gt; file. But isn't the location of the code and its organization what differentiates paradigms? Why do classes bind data and methods? If not to localize data and the responsibility decision making based on that data? If data spreads, does not the decision making responsibility on that data spread? Isn't that the problem with violation of encapsulation? This is the idea of both the Law of Demeter and principle of Tell, don't Ask. Also, there's the principle of Command/Query Separation. What is the point of these principles? Are you opposed to these principles, or not consider them good guides to developing object-oriented programs?
More often than not, when someone overrides an accessor they *want* the parent class to use the new method. In your example above, 16 seems like the least bad result for sr.getArea(). If you don't want someone overriding your methods, declare them as 'final'.
&gt; But, they don't exist to tell an object to do something (they are not behaviors), Good object-oriented code usually doesn't consist of lots of methods that tell objects to "do something". As the FP community well knows, code that evaluates functions and produces values is often much more robust, easier to understand, and easier to reason about. Sure, there is, IMO, a place for objects with methods that "do things", but that isn't the role of data-model classes like `Person`, `Address`, etc, etc. &gt; so what exactly is the purpose of getters and setters? They exist to provide a thin level of abstraction between the fields of the class, and its clients. The problem with fields is that they aren't polymorphic (and so can't be overridden by a subclass), and they aren't functions, so their implementation can't change if the implementation of the class changes. &gt;&gt; People get into all sorts of problems with they equate "objects" with "modules". &gt; Let's stick with objects and programming with objects. No, let's not. Objects are part of the picture; they aren't the whole picture. That's why programming languages offer higher granularity constructs like packages, and even modules. &gt; Unless Alan Kay is wrong, isn't OOP about messaging and retention and hiding of process state? About modeling the flow of behavior (messages) rather than the flow of data? Why is retention of process state important? That's a _very_ old-fashioned, _very_ imperative view. It's not the modern view, and it's not what modern OO programming languages encourage. Modern languages encourage the use of objects with _immutable state_, and methods which compute values based on that state. P.S. And I also don't accept that this is a fair characterization of Alan Kay's view, nor do I think that _appeal to authority_ is a very effective argument technique ;-) &gt; The author is equating the flow of data into and out of objects to the leakage of implementation details. Which is, um, simply _incorrect._ &gt; Isn't the Liskov Substitution Principle a cornerstone of OOP? Well, sure, I suppose, in the sense that it's a basic definition in the type theory of OO languages. In particular, it's the definition of what it means for a type `X` to be a subtype of a type `Y`. Getters and setters don't violate it, of course. &gt; Perhaps so. But if getters/setters expose data about an object to its collaborators, do they not increase the coupling between them? Sure. If objects need to collaborate, they are going to be coupled. &gt; Doesn't increased coupling between objects make classes less robust in the face of change? Tighter coupling isn't always bad, such as in the case of data binding between a template and its backing object. Which is why getters/setters aren't always bad. This is deeply wrong. What matters isn't coupling between _classes_, per se. What matters is coupling between _code which computes stuff_. If your choice is between several small classes which are tightly coupled via getters and setters, and a single bloated class that hides all its state, the first design is very often "better". And the code in it is no more coupled. Of course, you can always hide your several small classes behind a facade, or within a package. &gt;&gt; You're still going to have essentially the same code, just in a different file. &gt; But isn't the location of the code and its organization what differentiates paradigms? Um, no. The definition of OO has nothing to do with what file the code is defined in. Otherwise a bunch of functions in a file would be a class. But it's surely not. &gt; Why do classes bind data and methods? If not to localize data and the responsibility decision making? The two main benefits are: - to enable the use of subtype polymorphism, and - to avoid passing long lists of arguments between related functions. There are, of course, popular languages commonly considered to support object-oriented programming that _don't even have private members_. So data hiding within a class can't possibly be a fundamental part of the definition of "object oriented". Note: I'm not saying that data hiding within a class is always a bad thing. Indeed, it's often a good thing. But it's not always appropriate, and it's not the only way to control dependencies between code. In particular, for a class like `Person` or `Address`, hiding the "data" of that class is an absurd idea, and of course nobody does it. &gt; This is the idea of both the Law of Demeter and principle of Tell, don't Ask. Also, there's the principle of Command/Query Separation. Are you opposed to these principles? Yes, and I also eat babies. FTR: - the so-called _Law of Demeter_ is not a law, is not always appropriate, and is without theoretical foundation, - _Tell, don't Ask_ is rejected by most modern thinkers about programming, and certainly by the entire FP community, and - _Command/Query Separation_ is good, but is not violated by getters/setters, since a getter is clearly a Query, and a Setter is clearly a Command, and they are separated. 
Yes, the correct answer is "it depends". Use getters/setters internally when it makes sense and not as a general rule. Common sense, people.
But there are jump lists shown in one of the screenshots I posted. http://i.imgur.com/hwK4rkD.png
Cool! How do you handle the networking? I recently started a small 'fun' sideproject with Netty and your post really inspired me to do more with that. 
&gt; Yes, and I also eat babies. Wow, what a hostile response. I was merely asking probing questions to get an understanding of where you were coming from. I didn't bring up Alan Kay's definition as an appeal to authority, but as an appeal to common understanding. I brought up all of those heuristics (yes, I realize that the the Law of Demeter is not a law of the universe) to try to understand where you are coming from. It seems like to me you're coming from a data-oriented FP point of view and don't consider hiding of process state as all that important to what it means to be "OOP", but rather what is exported through modules and other units of code organization. Surely you must acknowledge that your point of view is not the only point of view of what constitutes good OOP, and especially OOP coding practices *in Java* which promote state retention (in a language with access modifiers designed for that purpose). And whether or not *in Java*, getters/setters help or hinder state retention.
People are so eager to help that despite some comments about this terrible style of asking, he got his answer anyway. As long as people keep helping posts like this there's little incentive for OPs to improve their posts, is there? 
Jeez, it's a heuristic not a moral commandment that one must follow or run afoul of the OOP gods. To further quote Fowler: &gt; If we're looking for a simple rule of thumb, the one I prefer is one that &gt; I first heard from Kent Beck, which is to always beware of cases &gt; where some code invokes more than one method on the same object. &gt; This occurs with accessors and more reasonable commands. If you &gt; ask an object for two bits of data, can you replace this with a single &gt; request for the bit of data you're calculating? If you tell an object to &gt; do two things, can you replace them with a single command? Of &gt; course there are plenty of cases where you can't, but it's always &gt; worth asking yourself the question. The idea is to reduce coupling, that is all. Getters (as traditionally described to encapsulate public fields) are far finer grained than what Martin Fowler is talking about.
I haven't used Netbeans for many years but I heard that it got a lot better recently. Idea CE isn't really usable for Java EE. That's what Ultimate is for. And it's worth every penny.
I've been using IntelliJ Community for years, don't need Ultimate unless you're heavily into Java EE. Community is perfect for SE/Android. Shameless plug, /r/IntelliJIDEA. Needs more quality posters and welcomes people asking for help.
Hi everyone! Could you please provide us with your feedback about the JAVA courses available on Sharplet? We need your feedback, comments and thoughts on how to improve so don't hesitate to tell me what you think about our content and service! You can also share your thoughts directly on /r/Sharplet. Thanks a lot! 
Well, coming from the guy how made the infamous JavaBeans nearly mandatory thanks to its ORM framework (and now his new language where properties are praised), I would be more that cautious about his words.
I don't find anything to disagree with in that fragment, and I don't think it contradicts anything I wrote, or remotely supports the view that getters are, _a priori_, "evil". To reiterate: &gt; _Of course there are plenty of cases where you can't,_ but it's always worth asking yourself the question. (My added emphasis.)
I recommend IntelliJ IDEA. Code navigation is fantastic, refactorings are great and the static code analysis is far beyond the competition. My second choice would be NetBeans. Avoid Eclipse, it is a mess.
Java EE could be overwhelming. I tried to learn J2EE a few years ago and wanted to learn every single technology, what was a very bad and frustrating idea. I suggest you to start with a little, but real, project and to pick some important Java EE APIs. Maybe you could write a web application based on JAX-RS, CDI and JPA. Only three APIs, but a lot to learn. If you focus on a small subset, you avoid spending to much time with unimportant stuff. Working code is important for your motivation. Each of the APIs above come with great documentation for the (reference) implementations: * [Weld](http://docs.jboss.org/weld/reference/latest/en-US/html/) (CDI), * [Eclipse Link](http://www.eclipse.org/eclipselink/documentation/index.php) (JPA, actually I like the hibernate documentation better), * [Jersey](https://jersey.java.net/documentation/latest/index.html) (JAX-RS). Try to stay away from application servers, [application servers are dead](http://de.slideshare.net/ewolff/java-application-servers-are-dead).
&gt;&gt; Yes, and I also eat babies. &gt; Wow, what a hostile response. OK. I thought I was being ironic. &gt; I didn't bring up Alan Kay's definition as an appeal to authority, but as an appeal to common understanding. Ah well, then I apologise, indeed, _argumentum ad populum_ is a distinct logical fallacy :-) &gt; Surely you must acknowledge that your point of view is not the only point of view of what constitutes good OOP, and especially OOP coding practices _in Java_ Well, getters/setters are an almost _universal_ OOP coding practice in Java. So while there are surely some folks who would disagree with elements of what I wrote above, I think it's clear that most developers ultimately arrive at the same conclusions. And I certainly think it's clear that "getters are evil" is terrible advice for novice Java programmers. That is to say, if you want to help people develop code which is more cohesive and less coupled across module boundaries, then this is a _terrible_ thing to focus on.
Which plugins? I'm a big vim fan but I miss the ability to automatically add imports, and to automatically jump to a class definition too much to use it for Java development...
No, the test fails, but getArea() calculates correctly. What has failed is your assertion that 1. you should be able to alter the behavior of the getArea to respect a time difference just by overriding a getter, despite there being no contract stating that this should be the case. 2. it is even proper to extend Rectangle in this case since it appears the only thing GrowingSquare wants from Rectangle is to use it's getArea method; i.e. it doesn't use the state encapsulated by the class. 
I disagree. While you should always be careful of not overusing design patterns, they are still the **optimal** way of doing **some** things. Using MVC or MVVC or any other big design pattern is more or less necessary to avoid messy code in a medium/larger project. Learn about design patterns, decide if you need them, then modify them to suit your needs.
Why would you use netbeans instead of IntelliJ and jsf instead of play or spring is a mystery for me
No offense, but I hate this argument. In my experience, which may be a reflection of the type of programmers I work with, most of the time when I see getters and setters I see what I call useless getters/setters. All they do is provide access to a member variable. No validation. Minimal hiding of the implementation. (E.g. return type is List vs. ArrayList) In other words, they are nothing more than less convenient ways to access the members. The only reason I see people do this is for consistency, with other useless setters/getters. So, just because you use getters and setters doesn't mean you're protecting the inside of your class. If you want to protect your class, you need things like validation and not providing direct access to the data specific to the class.
Yep. Just to echo what you are saying; we have developers using Linux and Windows to developer our in house app. The code is exactly the same for both platforms. For the most part, the only differences are cosmetic (There have been a few WTFs with GUI event handling differences, but nothing major).
quick update: Twitch doesn't allow me to save past broadcasts forever so I have set up youtube streaming. I'll post something again later today whenever I'm ready to stream. I also recorded the past broadcasts locally so possibly I can upload them to youtube if ya'll want to watch
&gt; No, the test fails, but getArea() calculates correctly. No, the test fails *because* `getArea()` calculates incorrectly. &gt; What has failed is your assertion that you should be able to alter the behavior of the getArea to respect a time difference just by overriding a getter, despite there being no contract stating that this should be the case. By that argument, all related code is equally correct/incorrect, because there is no contract whatsoever. E.g. in your example, you assume that `getArea()` should return the product of the private fields `width` and `length` despite there being no contract stating that this should be the case. Besides, which do you think is the more sane contract? 1. We guarantee that `getArea()` is the product of two private fields that you shouldn't know about. 2. We guarantee that `getArea()` is the product of `getLength()` and `getWidth()`. &gt; [What has failed is your assertion that] it is even proper to extend Rectangle in this case since it appears the only thing GrowingSquare wants from Rectangle is to use it's getArea method; i.e. it doesn't use the state encapsulated by the class. See http://en.wikipedia.org/wiki/Liskov_substitution_principle Inheritance should not be based on "Do we use the encapsulated state?", but should be "Does this sub type obey the contract of the super type modulo covariance and contravariance?"
Yeah people are funny about design patterns. They start to equate design patterns with software engineering. Many times people forget that they are general tools for general problems. I have never had a general problem. I tend to have very specific problems, often times a specific answer(perhaps flavored by the knowledge of a more general solution) is what you need.
I use nekohtml to put order to html files. My .m2 version of jtidy says jtidy:jtidy:4aug2000r7-dev
It's very difficult to answer your question in a single post. You should know the basics of Java of course but what you will be able to do will be limited by what you know. I suggest picking up a book and using online resources and just jump in, get started! You'll learn along the way. Book that helped me a lot: http://www.amazon.com/Professional-Android-4-Application-Development/dp/1118102274/ref=sr_1_1?ie=UTF8&amp;qid=1409582592&amp;sr=8-1&amp;keywords=professional+android+development and Android development ground zero: http://developer.android.com/index.html 
Go learn the core APIs in Java 7, excluding AWT and Swing. Then go get a good book/tutorial on Android's user interaction model, and how it thinks about resources. Once you've read all this, get an ide and the Android dev kit, and do a "Hello, world." tutorial. Get ready to be frustrated for a while; it's pretty damn strange.
http://i.imgur.com/PSxekGR.png
Looking forward to JavaOne, see you all there. 
Here is my hight level summary: Android applications are huilt in java with some convenience classes to help support mobile devices. You have an Activity lifecycle for handling mobile applications, with a lot of "callbacks" familer to any java programmer, but designed with an app lifecyle in mind ("pause, go back, rotate device, launch a new activity, sleep, ect..) . Async tasks are designed to support simple concurrent mobile operations like a newtwork or file loading. Memory management and use of bitmap caching and optimizing is more crucial on a mobile device than in other java development environments. Reources (Layout xml files, images, media (video or audio) are divided into specific folders to support multiple types of devices. 
Thanks for the link, that development is a bit surprising to me, I thought he multi tenant jvm had a lot of potential, this application self security sounds like a lot of nonsense to me (IMO).
Hahaha. But seriously, I've heard that knowing AWT and Swings is pretty essential, as your app is basically just one Listener window. As for the Dev kit, don't get me started. Eclipse is easy enough to use, but when Android comes near it, it loses its shit and/or contracts herpes.
Could you elaborate on the "callbacks" part? I'm not getting which part of Java you're referring to. And Async management?
callbacks are a basic form of communication in object oriented programming. For a more sophisticated approach, see something like the "observer pattern"., but callback are often easier to get started with.Both are just approaches to OOP (which itself is aimed at making large applications simple to manage), not specific to java , but are often used in java architecture. Basically, to use callbacks, you need to define an interface with a series of important events (in our android app, the common ones are events you can predict will happen such as onPause, onTouch, onResume, etc.. Since this is in an interface that our Activty class implements, we are essentially forcing every Activity to "handle" each of these events (IE have a method for this event to be processed). In android apps, much of the architecture has been done for you. The Activity class has a series of callbacks hardwired into it's interface to make it easier for the programmer to get up and running quickly. All you have to do is implement (IE write code ) for what happens when these callbacks are triggered by the device. 
not really specific to javascript but used in many languages. By async we just mean (do this task in the background because We know it will take some time and I want to keep doing stuff while it is going on)
Forgot to say thank you. I just couldn't find that page. 
&gt; So just learnt Design patterns and now I am trying to get my hand dirty with some real world problem statements to practice. Which have you learned? Which do you understand? Which don't you understand? It's bad practice to run around with a "solution in search of a problem," this leads to pattern nepotism and will convolute your code. ie: At work a lot of people really like adapters so they use adapters for all sorts of problems they're not meant for. Our repo is completely polluted with adapters, it really is insane. It decays into creating these concrete classes "SomeRandomAdapterImpl.java" that aren't really adapters at all and code becomes harder to maintain and understand.
You could try and see if this fix applies to you. http://brianreiter.org/2010/07/15/pin-eclipse-helios-to-windows-7-taskbar/ Looks like if you make eclipse.exe aware of the jvm, it can pass the jumplists through for you. 
Please do upload them! 
 Manifest-Version: 1.0 Sealed: true Main-Class: com.TTT.Main To be honest I didn't even transfer the Manifest the first time around. Did it now but still no luck
Presumably batch (jsr 352) support is on its way soon? Also anyone know what version of myfaces this has? Last time I looked at liberty it had an old bug ridden version. I couldn't understand why they'd not keep this up to date with each release. 
Why don't you go and study up then? There's no point in asking other Java programmers to tell you what you should know if you already seem to 'know' what's important. There are almost infinite resources available on the internet to learn Java. Focus on getting the basics right. Learn datastructures, object orientation and java syntax. If you know that go ahead and pick up some projects you can build. The android developer website has everything you need to know about Android dev. Also, get intellij or android studio as ide (they are near identical with the exception that intellij is also for regular java programming w/o android. 
Error is "Cannot find main class com.TTT.Main. Program will exit". Main won't help much I believe: package com.TTT; import com.badlogic.gdx.backends.lwjgl.LwjglApplication; import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration; public class Main { public static void main (String[] args) { LwjglApplicationConfiguration cfg = new LwjglApplicationConfiguration(); cfg.title = "Tic Tac Toe "+TTT.Version; cfg.resizable=false; cfg.foregroundFPS=60; cfg.width = 900; cfg.height = 900; new LwjglApplication(new TTT(), cfg); } } 
... is this going to be a FactoryBeanInterfaceDefinitionFactoryDefinitionBean jokefest?
Ah, libgdx. My hunch is you do not have all the dependencies available at runtime, the classloader fails to properly load Main and execution fails as a result. I've never packaged a libgdx game for desktop distribution, so unfortunately I can't help with that, though you should be able to ask over in /r/libgdx
Will do. Much obliged.
However, why would it work on my machine and not on another if it's a dependency issue? I'm not a programmer, so I don;t get all the subtleties of it.
If it's your Dev machine then you probably do have the dependencies available, even if they aren't packaged into the jar
Ah, so the jar is getting them from where they are saved on the workspace. Wouldn't changing the name of the project folder in the workspace screw that up if that was the case? I tried it and it didn't.
AWT and Swing will do nothing for you in the Android world.
There are plenty of variables here, so I can't really speak to how your machine is configured.
Lot better. Just joined an IT firm as a Java developer. Love it. Better than eclipse, at least IMO. Haven't used IntelliJ but can't wait to try it out.
And it runs on The Rapsberry Pi (really cool deploy feature in NetBeans IDE)
`net.sf.jtidy:jtidy` matches the `pom.xml` in the svn repo, looks like `jtidy:jtidy` was what they were using but they renamed in 2010. The project looks pretty dead, no svn commits since late 2010. 
I dont think its essential but I've found many similarities to Swing, JavaFX and many MVC web frameworks.
You don't know what you're missing. The most basic thing that's killing me is the lack of support for other web languages like HTML, CSS, JavaScript, JSP and the OOTB support for running your web app in all the popular containers.
There are so many visualization libraries out there that I'm sure there will be quite a few that meet your needs. If all you need to do is parse a text file and graph it, in a web browser, you may want to look at JavaScript visualization libraries: Here's a pretty good list (there are more!): http://www.creativebloq.com/design-tools/data-visualization-712402 and in order to parse the text file: http://blog.teamtreehouse.com/reading-files-using-the-html5-filereader-api 
There a few main best practices that come up in real-life cross-platform Java development that will help everything go smoothly: - Use File objects instead of path strings, and use the File constructors to create paths (i.e. use new File(parentFolder, "filename.ext") instead of new File(parentFolder + "/filename.ext")) - When writing to files meant to be consumed by humans, use of PrintWriter's println() methods will cause the correct text new-line sequence to be used on each platform (OSX/Unix="\n", Windows="\r\n"). - Use temp folders or areas inside the user folders via library methods rather than hardcoded paths for a platform (Apache Commons FileUtils is good for this). There are a few UI-related things that will come up from time to time, but while making some old code cross-platform over the last few months, the three items above came up over and over again.
Can't argue about NetBeans vs IntelliJ, but JSF is a clear winner and much nicer and with better performance than Play and Spring. Play wouldn't even be an option for me with all the Scala stuff going on.
Everyone wants to be the number one. I mean c'mon dude, would you settle for being number two? Right!
Would you mind posting your code?
And as long as you code in a way that's safe for multiple types of filesystems. You'll get bitten by hard-coding paths and path separators when you switch between Win and Mac/*nix. 
Wow, you're right, that was it. Thanks, I didn't even think to check that out. Do you know if there is anyway to have the window open in front of the IDE?
summary: terrible language, slow runtime, and google is trying to do everything in their power to try and help...like renderscript, and recently AOT (art) etc. buggy tools etc..its a fucking awesome time
Awesome! Congrats on the 1.0 release.
Interesting, but this seems like a lot of code to solve a small problem. You can do pretty much the same thing with Spring's `JdbcTemplate` and `RowMapper` classes, if you just manually define the mappings in code. Reflection seems a bit overkill for that case, especially if you don't have very complex POJOs.
It isn't. That's the point. The regular RNG is somewhat predictable, as we can see here, but it is fast. This makes it okay for, for instance, single-player video games. The [CSPRNG](https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator) provided by `SecureRandom` is slower, but cryptographically secure, i.e. extremely difficult to predict. Use them where appropriate.
I used callbacks the other day in c++ robotics programming. It just happens that most javascript programs are event based.
* /r/javahelp * Please please please read its sidebar &amp; posting guidelines * Please format your code properly (see sidebar of /r/javahelp for details - or any "formatting help" link under comment and submission fields) * Please state *the problem that you're having*! "No idea what's wrong" doesn't help you nor us to help you. It's actually pretty shitty of you as you seem to assume we'll just guess whats wrong, debug your code and/or do your task for you.
The over use of cheap stock photos everywhere made the site appear amateurish to me. And why do you ask me to sign up to get to the content? Personally there's no chance I sign up for something unless I've used it for a while and found it useful. Forced up front signup just makes me abandon the site immediately. But that's just me.
While that's true in theory, in practice you need to test on every platform you intend to support. That's because JVM is just software, and all software has bugs. We've been bitten by these a bunch of times, just go to the OpenJDK bug tracker and look at all the platform specific bugs. The other source of differences is due to the platforms themselves. For example, Windows is very picky about closing files while UNIX(ish) operating systems tend not to be. In many places the Java API does not specify the exact behavior, and the implementation maps directly to the underlying platform, exposing the platform differences to your Java code. The networking APIs are full of this, for example.
Note that using `ThreadLocalRandom.current().*` is faster than `Math.random()` (which uses a shared `Random` instance), and [XorShift](http://xorshift.di.unimi.it) has a generator that is even faster.
As a new Android developer with reasonably good Java skills before starting, it has been like this: 1. The IDE generates a huge project for you before you start. 2. There is a lot of magic from a long inheritance chain of which I know nothing about. 3. Even if you decide to override one of the existing methods, you usually still have to call super.yourSameMethod(). 4. Shit is super buggy. The IDE and emulator are extremely slow, sometimes the drag and drop for screen building doesn't work at all. That's not ideal if you don't like typing out a million lines of XML. 5. Oh right, everything related to building the screen, making config changes, or wiring beans together is in XML. 6. There a cool annotation called @JavascriptInterface where you can directly access your Java methods from JavaScript. It allows you to use HTML/CSS/JS to make most of your app instead of using native Android XML and Java. This is useful, but you may as well have used PhoneGap/Cordova.
It would be nice to see no fluff just stuff on the calendar: http://nofluffjuststuff.com/home/main 
I usually just have the jar extract the dlls at runtime and deleteOnExit
tl;dr – it isn’t.
One might use and abuse most everything. For example, someObject.setVariable(someObject.getVariable() * 2); someObject.variable *= 2; The first is no better than the second in most of the cases. Some asks "what if one changes the type of the variable"? The answer is simple, one should use one's chosen IDE tool to find the occurrances... So in this case, the accessor and mutator methods are abused. If that's so from outside, that's even more emphasized internally. Use the getters/setters only if they give some kind of logic, if they simply store and retrieve the variable, then it's unnecessary to use them. But the best way is to have immutable objects, all fields are final, and if any field is an object, that object is also immutable. Then the setters might return with new instances: public Rectangle setWidth(double newWidth) { return new Rectangle(newWidth, this.height); } But even if the object is immutable, still the getters should be used outside. Then, if one has to, the getter might be overwritten (e.g. the HorizontallyExpandedRectangle might return N times the width of the underlying Rectangle (N is stored in the only field of HER), hence preserving the original object, and adding only the "expand" feature. Inside of Rectange, the this.width is safe to use, and the HER should override all of the methods where the parent's width is not safe to use any more (e.g. getArea should be overridden too). If the child is the HorizontallyTransformedRectangle, then the area is still calculated by width * heigh, although the width - if that means the outer box's width - is different. Consider also the following simply example: public class Rectangle { private final double width; private final double height; private Rectangle(int width, int height) { this.width = width; this.height = height; } public static class Builder { private Double width; private Double height; public Builder withWidth(double width) { this.width = width; return this; } public Builder withHeight(double height) { this.height = height; return this; } public Rectangle build() { if (this.width == null || this.height == null) { throw new RectangleBuilderException("neither width nor height might be undefined"); } return new Rectangle(this.width, this.height); } } } And use it: Rectangle myRectangle = new Rectangle.Builder() .withWidth(1.5) .withHeight(1.6) .build(); Further, use composition instead of inheritence. If you need replaceability, use interfaces: public interface Rectangle { ... } public class RectangleImpl implements Rectangle { ... } public interface HorizontallyTransformedRectangle extends Rectangle { ... } public class HorizontallyTransformedRectangleImpl implements HorizontallyTransformedRectangle { ... } And the later has two params for its constructor, a Rectangle which is transformed, and the amount of the transformation. Now you are safe and will have no side effects, but for what cost... 
Pseudorandom is the word you're looking for :) It's designed to be fast, but not at all secure. Cryptographically secure random number generators are slower but are pretty much guaranteed to be random, and should always be used when you need numbers in the context of security critical code. 
The article says 'So I started digging through java.util.Random’s source and found that it is just a linear congruential generator' like he is some type of hacker. This is the type of shit that proliferates the 'java is insecure' mentality'. insecure compared to what? your web browser? any adobe product? Microsoft windows as a whole. 
Yes it solve a small problem, that's a choice. It only focus on the mapping betwen a ResultSet and the POJO ie the JdbcTemplate RowMapper - which btw is now explicitly implemented via the RowMapperFactory. It sure would be overkill if you were to rewrite it every time to map one class. But it's value is at scale. Some the benefits - it uses column index which faster that column name - column index in manual rowmapper are harder to maintain - - it handle the .wasNull so you don't have too - it makes it easier to change your query or your object. - it now handles inner object - kind one to one relationship - auto map for enums Is it the full solution to the problem? No, would be nice to have a query generation mechanism but that's totally a different scope. maybe later. 
The article is nice and all, but nothing shows how predictable "random" numbers really are like this short piece of code: public class Main { public static void main(String[] args) { System.out.println(randomString(-229985452) + " " + randomString(-147909649)); } public static String randomString(int i) { Random ran = new Random(i); StringBuilder sb = new StringBuilder(); for (int n = 0; ; n++) { int k = ran.nextInt(27); if (k == 0) { break; } sb.append((char) ('`' + k)); } return sb.toString(); } } Source: http://stackoverflow.com/questions/15182496/why-does-this-code-using-random-strings-print-hello-world
&gt; Asking relies on the callee maintaining some form of mutable state to be able to respond in a meaningful way. That's not right at all. State!=mutable state. I really wish people would stop conflating the two things. That an object holds state doesn't imply that it holds _mutable_ state. In any functional language a list or tuple clearly holds state, and I can clearly write functions which "query" that state. Likewise with methods of an immutable object.
Great job posting and formatting your code, Ace! I'm glad you bothered to put in the error message you're getting as well so that we don't have to look very far to see what's wrong with your code. So I get the following when compiling: $ javac Theatre.java Theatre.java:1: error: &lt;identifier&gt; expected import java.util.; import java.io.; ^ Theatre.java:1: error: &lt;identifier&gt; expected import java.util.; import java.io.; ^ 2 errors So how can you possibly **not know** what's wrong with your code? You're missing an asterisk for wildcard imports, duh! Maybe you should learn the language basics first before taking on any challenges. Good luck!
drag and drop gui plug-in! It's a revelation. We'll call it the Microsoft Studio's of Java
I'm pretty sure you're mocking it, but at least it generates standard Java SE code with no required extra libs and it makes it fairly easy to mock up a GUI that resizes gracefully which is more than I can say for a lot of people doing it by hand. You still need to wire everything up and implement all your *Listeners, it just helps cut down on the boilerplate you have to write.
I'm sure someone will take the time to give you a full explanation of where the words "lambda" and "closure" come from and what they really relate to, but it seems like the simplest and best answer to your question is to not focus on these particular terms, but on what most people use them to mean in the context of programming languages. When most people say "lambda" or "closure", they're talking about a thing that is more correctly called an _anonymous function_. I prefer this last term because it very precisely describes what the thing is: it's a function without a name. For example, if I write in Java: btn.setOnAction(event -&gt; System.out.println("Hello World!")); Then `event -&gt; System.out.println("Hello World!")` is an anonymous function. The above code is almost exactly the same as this: void hello(Event event) { System.out.println("Hello World!"); } btn.setOnAction(MyClass::hello); The difference between these two code fragments is that in the second fragment, the function has a name, `hello`. Both fragments pass a reference to a function that prints `"Hello World!"` to the method `setOnAction()` of `Button`. I say "almost exactly the same", because a wrinkle of the Java language is that even though I can define an anonymous function directly nested within another method, I can't define an ordinary named function directly nested within a method. So the second code fragment doesn't quite compile as written. (In more regular languages with cleaner support for first-class functions, there is no such restriction.) HTH 
&gt; Presumably batch (jsr 352) support is on its way soon? You would think that this had been already there, seeing that the Batch RI comes from IBM. &gt;Also anyone know what version of myfaces this has? Probably the scariest oldest version they can get away with. Where getting away with means passing the TCK, and then not caring how bug ridden it is. But MyFaces can't pass the TCK anymore (since Apache has left the JCP over Harmony), so how IBM is goig to solve this is anyone's guess. &gt;I couldn't understand why they'd not keep this up to date with each release. Because they are a complex enterprise company they felt the need to modify MyFaces. Anyone can tell you that effectively forking a release means the burden of maintaining it with updates now rests on your shoulders. IBM clearly went overboard with their own modifications and thus likely couln't easily update it anymore later. Why this modifications were needed in the first place it also everyone's guess. Probably because: F*ck! Wer'e IBM, that's why!
A lambda is a function defined in some execution context using a special "simplified" syntax. Closure is the execution context (e.g. local variables) captured by the lambda. So lambda is a sort of "detached" function which can be _invoked_ at any time anywhere in the program code but has access to the local scope at the point where it was _defined_, which is said to be its closure. Before Java had lambdas you could achieve the same effect using anonymous classes (e.g. new Runnable(){...}). They too can refer to variables in their defining scope. Closures are not specific to lambdas and are e.g. widely used in Javascript where they are the only possible way to achieve encapsulation (at least before version 5).
Netbeans is great for teaching but not really because of the reasons in this article. It is great because it is a very simple install that does not require you to download any plugins or Application server separately. Just run the executable and you are up and running. The interface is very intuitive. You do not need to worry about figuring out perspectives. They also have some great quick tutorials on just about everything.
Lambda is the complex where Dr. Gordon Freeman fought aliens, the military, and ninja assassins. Closure is what Half Life and Half Life 2 won't have without a Half Life 3. I hope this helps.
Thanks for your comments! Will definitely look into it!
and the questionmarks will be removed shortly! thanks!
There's three somewhat overlapping ideas at work here, so let's take them one at a time. 1) "First-class functions" means the ability to treat functions as values. This means that you can store a function in a variable, pass it as an argument to another function, or return it from a function. Prior to Java 8, this was possible in a limited way through so-called "functional interfaces" - interfaces that only declared one function, like Runnable or Swing's listeners. You'd create an instance of a class (usually anonymous) that would hold the function you want to pass around, and that object would represent the function. First-class function support means that you can do that without wrapping it in a class, just by referencing the function in some way. Java 8 supports this directly through [method references](http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html), but anonymous functions are also very commonly used like this. 2) "Lambdas" are a shortened name for anonymous functions, which are simply functions without names. In some languages, that's literally the only difference - but in Java, lambdas also bring along some [shorter syntax](http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html) for defining functions so that you don't have to write out the whole verbose Java method syntax. Defining a function that adds one to a number can be as simple as "(x) -&gt; x + 1". This saves a lot of boilerplate code, particularly when you only need the function once to pass as an argument to another function. 3) "Closures" are functions, anonymous or not, that have access to the variables in the environment which they were defined in. The obvious example of this is when you define an anonymous function inside another function and return it. That function would have access to the arguments and local variables of the function it was defined in even after that function returned. Java's closures are more limited than many other languages in two important ways. First, Java closures are read-only. Second, Java closures can only access variables that are "effectively final" - variables that do not change while the function they're defined in is running. These three ideas aren't strictly tied to each other, but they're so useful together that most languages that support one also support the other two to some extent.
No. You just don't understand what random means. You can have a function that returns the same sequence of numbers, but those numbers can still be random. Randomness is a property of a set of numbers. It doesn't matter how often the set is "repeated". 
But it will also have an independent stream of random numbers per thread. If both threads are seeded with the same seed then you will get the same sequence of numbers. This may be important(desirable or undesirable) or it may be unimportant. But you certainly could not make this change without thinking about the implications. They are not functionally equivalent.
I love how people have this spectrum of RNGs and at some point they place a threshold and say. Past the point of combining this many things, we are no longer a PRNG. Sorry guys. All we have are PRNGs. But this gets into religion territory, as I just do not believe in true randomness. Merely processes we do not yet see/understand.
Lambdas in Java were added by popular demand, but it was actually possible to achieve the same result using an anonymous `Callable` or `Runnable`. Consider a lambda to be an implicit implementation of one of those two interfaces and the invocation to be implicitly calling `.run()` or `.call()`
Check out JavaFX or, if you want to mess with a web app, PrimeFaces.
True that. On the other hand creating a dependency between threads is not something I'd wish my code to have just to have numbers that are a little more random (in theory). ThreadLocalRandom is a fair enough choice for performance (though XorShift is even faster, and has a much larger period and less statistical failures than both Random and ThreadLocalRandom). Btw. as of Java 8, ThreadLocalRandom employs a different algorithm than Random. TL;DR: You don't want to use Math.random() for performance-critical task nor for security-critical tasks.
&gt; So anonymous functions were never supported in java 7 and below? Java 7 and earlier have no support for anonymous functions. They did support anonymous classes, which can be used to achieve a similar result in most circumstances, but with substantially more boilerplate code. Java 8 added the special lambda syntax with direct access to the enclosing scope (including `this`) and type inference for arguments. &gt; Also can I use the term 'Anonymous function' and 'lambda' interchangeably? They mean the same thing in general usage, but some people may use "lambdas" to refer specifically to Java 8's implementation of the concept as well. &gt; I think part of the reason why I can't grasp these concepts is because I just can't see any real world use for them, at least right of the top of my head that is. That's a bit of a chicken-and-egg problem. If you aren't used to using functions as values, the other bits seem useless. Fortunately, Java 8 also added some APIs that make great use of lambdas. Let's take a look at [Stream](http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html). The example on the page uses two lambdas: int sum = widgets.stream() .filter(w -&gt; w.getColor() == RED) .mapToInt(w -&gt; w.getWeight()) .sum(); You could do this without lambdas. The equivalent code in Java 7 would have generic `Filter` and`IntMapper` interfaces, and you'd have to instantiate one of each, define the appropriate methods and pass the appropriate objects into `filter` and `mapToInt`. Even if you use anonymous classes, that's a lot of typing for something that's so simple and direct with lambdas. Having access to lambdas makes it much more practical to build APIs like Stream that rely heavily on passing around functions. Closures are mostly useful as a way to "power up" lambdas. In the example above, what if the color you wanted to compare to was stored in a local variable? That's no problem with closures - even though the anonymous function will be called somewhere else, `w -&gt; w.getColor() == favoriteColor` would still refer to the `favoriteColor` defined in your function, not anyone else's.
While not exactly the same, Lambdas are essentially anonymous inner classes with single methods. They are more than that, but functionally that is the basics of them. So the very brief 5 minute comparison this Runnable r = new Runnable() { public void run() { System.out.println("Haldo"); } }; r.run(); // Haldo is the same as this Runnable r = () -&gt; System.out.println("Haldo"); r.run(); // Haldo
&gt; So anonymous functions were never supported in java 7 and below? Correct. They were added in Java 1.8. The way Java 1.8 supports anonymous functions is a little strange (they are a syntax sugar for an anonymous implementation of a single-method-interface). That's a consequence of them having been added so "late" to the language. &gt; Also can I use the term 'Anonymous function' and 'lambda' interchangeably? Sure, at least when you're discussing Java. &gt; I think part of the reason why I can't grasp these concepts is because I just can't see any real world use for them, at least right of the top of my head that is. Take a look at the new [streams API](http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html) and it will all make sense :-)
Quantum mechanics says that certain things, at that level, are truly random. Clear back in the 1980's there were expansion cards for computers that generated random (not psuedorandom) numbers by measuring the noise on a reverse biased diode, or something like that. The laws of quantum mechanics guaranteed that the results were truly random. One of the biggest misconceptions that people got in the 20th century, due to graphic pictures of electrons 'orbiting' a nucleus, is that electrons are distinct particles, with a definite position in space, and in motion about a nucleus in the way a moon orbits a planet, or a planet orbits a star. In reality, and yes I mean _reality_, actual reality, a particle has no definite position. It's position is a probability curve. It has the highest probability of being at a certain location, and a lower probability of being not quite at that location, and an even lower probability of being a bit further away, etc, out to infinity. There is a higher than zero (but very low) probability that the electron can be at any location in the entire universe. The probability of the polarization of photons, and statistics over large numbers of photons, explain how polarizers work. Turn one polarizer ninety degrees to another polarizer, and there is a zero percent probability of photons getting through. But stick another polarizer in between those two, at 45 degrees, and suddenly some photons get through. Why? Some years ago at my public library, I read a fascinating book, IIRC, it was titled: Shrodinger's kittens and the search for reality. It explained this and a lot more.
&gt; The numbers are still random though, aren't they? No. They are not random. They are psuedo-random, which means basically, NOT random. &gt; They are just predictable and random... Does that make sense? They are predictable, which means they are not random. But they _seem_ random due to the difficulty of predicting them. In practice they are more than 'random' enough for plenty of practical applications -- EXCEPT for security applications requiring unpredictability. Need to write a software program to deal a hand of cards or simulate a slot machine? This is probably random enough unless very very large amounts of money are involved -- which brings us back to security. 
Already posted several days ago: http://www.reddit.com/r/java/comments/2exitf/string_deduplication_a_new_feature_in_java_8/
Yes, lambda's didn't make it into the formal java language until version 8. They're primarily a construct you see in functional languages like lisp, ml, haskell, etc... They've been available in a number of other languages for some time (c++, python, perl, etc...). The name is a reference to Church's [lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus). Since a lambda is a function with no name, it can definitely be referred to as an anonymous function. Since lambdas are defined in the same lexical scope as the call referencing the lambda, it's best to use them for simple things that are closely related to the task within the lexical scope. A simple example would be a predicate for a list... boolean safe = true; for (X x : xs) { safe = safe &amp;&amp; x != null; } With a lambda, it's less verbose, more flexible, and may even perform better... boolean safe = xs.stream().allMatch(x -&gt; x != null); 
What makes you certain security Random is not predictable?
They aren't "pure syntax sugar" because they have different scoping semantics than if you were to implement a functional interface manually. In particular, `this` is bound to the `this` of the enclosing scope rather than to the anonymous object that's only created as an implementation detail. As to the rest, the fact that a lambda is actually an object is completely irrelevant to what I was saying. My point was that you-the-programmer don't have to wrap the function in a class in order to pass it around, not that the underlying system doesn't, and certainly not an assertion about the existence of function types in Java. I'm sorry if I was unclear about that.
Thanks so much, I'm looking at tutorials on it now
Thanks for the info, I didn't realize that web apps could read computer text files these days
&gt; I mean if we wanted to get all pedantic, then every single non-static method is a closure, since it closes over the local declarations of the class it belongs to. Yup. This relationship between classes and closures has been recognized since at least the 1980s. Another bit of Java that looks like closures is non-`static` inner classes, like `Bar` in this example: public class Foo { private final Whatever someField; public Foo(Whatever something) { this.someField = something; } public Bar obtainBar() { return new Bar(); } private void printStuff(Whatever blah) { System.out.println(blah); } public class Bar { void someMethod() { // `Bar` can access private final fields and private methods // of the enclosing class. printStuff(Foo.this.someField); } } } 
This.. was published in february 2013. While I admire the amount of effort people will go to in order to declare java 'dead', this is practically historical artifact at this point. 
&gt; They too can refer to variables in their defining scope. (as long as they were declared final! aka they were "closed") 
&gt; Lambdas can't have instance variables or methods due to the restricted syntax, so the this reference does not need to be disambiguated from its enclosing instance, unlike an anonymous inner class, which not having syntax restrictions, requires disambiguation. Nothing has actually changed with the scoping rules. This is completely false. It's not a matter of ambiguity, lambdas [don't create a new environment](http://www.lambdafaq.org/what-are-the-scoping-rules-for-lambda-expressions/). If you try to use a lambda parameter with the same name as a local variable in the enclosing scope, you'll get a compile-time error. This is completely different scoping behavior than anonymous inner classes. If you still don't believe me, you're welcome to read the [design documents](http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html) for Java 8's lambdas, which goes into detail about how they're different from inner classes. Edit: I'm not going to continue bickering with you about whether lambdas are syntactic sugar or not. They have unique scoping rules that aren't possible to emulate with Java 7 syntax, and that suffices to prove that they are not "pure syntactic sugar" regardless of whether they meet your standards or not. 
Thank you for your comment. Currently we're quite an early stage start-up and thus have limited resources to make a policed service just now while the service is still free. But we're improving the site all the time. And regarding the point you make about providing the service without the need for signup is very good and actually something we plan to implement in the coming months. If you have other comments feel free to also send them to info@sharplet.com. 
Why Another MVC? Does "JSF Sucks" count? I know it's a subjective comment, but I never did like JSF while in the midst of using it. Seemed like extreme overkill with little value. Edit: To be fair, I may not have given JSF a fair shake - it was pretty well screwed up by our company's extensions. But that's where it really fell apart in my book... extending it was a pain. Edit Edit: My perspective is JSF 1.x - it does sound like JSF 2.x was a great improvement. But first impressions don't always magically improve with a new version number.
To be 100% consistent to Haskell naming, zip should return a list of pairs (which, of course, is not immediately possible in java). What protonpack implements is zipWith. But who cares... A very nice library (I wrote my own unfold a few days ago). Will you (assuming you're the author) put it on maven central?
Interesting that JSF will implement this. I think the name will be confusing. It should be called Action MVC since Java EE already has an MVC framework.
&gt; It's not a matter of ambiguity, lambdas don't create a new &gt; environment. ... which is why there is no ambiguity. &gt; This is completely different scoping behavior than anonymous inner &gt; classes. Lambdas only create a new lexical scope because they cannot create a new instance scope by design, unlike anonymous inner classes, just as I stated. &gt; which goes into detail about how they're different from inner classes. Which does not address the original argument as to whether or not Java's lambdas are syntactic sugar or not. Of course lambdas are different, just like enhanced for loops are different than regular for loops. Syntax sugar refers to a syntactic structure which eliminates boilerplate but doesn't substantially change functionality or expressive power. Java's lambdas are not equivalent to first class functions. It is very significant fact that they merely implement an interface. Even though Scala represents lambdas as objects, lambdas in Scala are not mere syntax sugar because Scala is able to manipulate lambdas *as functions*. For example, how would you use Java's lambdas to implement currying or partial function application? This is the test of whether or not lambdas are more than syntax sugar.
Because SecureRandom is based on truly unpredictable things. Which keys the user will press on the keyboard, and when. Which direction the mouse will be moved, for how long and at what speed. When the mouse button will be pressed, how long it will be held, and when released. And other real world inputs that are unpredictable. (Or at least unpredictable enough.) CPU temperature. Fan speed. What point in time packets are received over the network. All of this is called 'entropy'. The entropy is mixed through complex functions to generate the random output. Also, there are hardware products that rapidly generate random numbers based on physical phenomena that are guaranteed to be random (eg, due to the laws of quantum mechanics). 
Which version of JSF were you using? 1.x was a nightmare to work with, 2.x with the usual extra libraries (Primefaces, OmniFaces) is extremely easy to work with.
Yes. You could even have a repeating set of just one number. Remember the famous (XKCD comic, IIRC) function: public static int random() { // This number was determined by a fair roll of dice and // therefore is guaranteed to be truly random. return 4; } It is truly random. But not useful. Your short sequence of random numbers is not useful either. While psuedo random number sequences do eventually repeat, one of (but not the only) measures of how good a psuedo random function is, is the length of the sequence before it repeats. The above function returns a truly random number, by your definition. But it is not useful. If you're using the random number generator to select which screen saver to display, then you're always going to see the same thing. 
It was a while ago, so probably 1.x. We moved to Spring MVC and it all seems much more intuitive. I think my biggest beef with JSF was the amount of configuration required to just wire everything up. Maybe they've improved things with annotations. But it sure seemed like we all at become professional XML wranglers to make it work.
I would have agreed with you with JSF 1. With JSF 2 requires very little configuration.
Yes, a proper release is imminent.
my first thought? so someone can charge for certifications.
Fantastic! Even as someone completely new to all this functional-style stuff, was utterly baffled by Java 8 not having some of this functionality. You the author? Cheers for this, will definitely be using it as soon as I see it on maven central ;)
If you are only programming in Java and the other languages/protocols directly supported by Oracle (Javascript, CSS, and HTML5) then I recommend Netbeans. It is full featured, has a great debugger, remote operations is built in, and has plenty of documentation. It does everything that a Java IDE should. The only thing that Netbeans wont do that jGrasp does is the CSD diagramming inline with the source code and the fancy data visualizations. If you program in other languages on a regular basis, you may be better served by IntelliJ or Eclipse. IntelliJ is more polished in areas, but Eclipse is free and works *almost* as well. EDIT: In the end it's all personal preference (Don't let anyone tell you otherwise). I agree with Sh0rug0ru's advice of trying all three (Netbeans, Eclipse, and IntelliJ) and picking the one you like best.
Syntax sugar is a syntax sweetener. It allows replacement of nasty but essentially equivalent syntax with a sweeter, more concise form. Other than the syntax, what do Java lambdas offer beyond anonymous inner classes? What makes Java lambdas not trivially swappable with an anonymous inner class? On the other hand, functions are not trivial replacements for GOTOs. The compiler does more than change the instruction pointer, it builds a stack frame. The two forms are not trivially swappable for each other. Thus, functions are not syntax sugar for GOTOs. That doesn't stop you from implementing recursion with GOTOs however, it just takes more effort being hobbled by less of expressive power.
&gt; Maybe they've improved things with annotations. They sure did. Annotations were introduced in 2009 for native JSF managed beans. CDI (which has been fully annotation based from the start) has been a mostly transparent replacement for JSF native managed beans for a long time now. For most JSF users, large and complicated XML wirings have been gone for at least 4 years. 
So I am pretty new to the whole Java ecosystem but I understood that (roughly) JavaEE is a project that is standardizing on industry best practices. But Jersey is a reference implementation of a JavaEE spec (JAX-RS).. so is this really incestous or is there so much leeway in implementing a spec that this kind of innovation is possible?
The term syntactic sugar is amorphous; there is no authoritative or quantifiable definition (which may be why people continue to use it to demagogue languages). Ultimately, I think the question that should be asked is whether better code can be written using the syntactic structure. In the case of java lambdas, I personally think the answer is *yes*.
An excellent name for a library that handles Streams.
Any implementation is always free to implement things that are beyond the spec. There's nothing new there. Java EE even facilitates this a little by having various unwrap methods on things that return vendor specific implementations (requiring a down cast of course) and several parts of the spec have generic key/value properties that are intended to set provider persistence things. Hibernate is a particular well known example that does all these things. JAX-RS has been a little, let's say power hungry. Because supposedly users want to run JAX-RS on plain Tomcat and don't want add another jar, they have included things that are already in Java EE. JAX-RS has its own DI, its own security system, its own filters (in the spec) and Jersey in particular has had its own MVC framework because (I kid you not) "Tomcat users want to have a MVC web framework and don't want to install one and they have already added JAX-RS". What's new is that something that clearly duplicates things that are already in Java EE, but come from a competing spec makes it into the main spec. Maybe the Hibernate team will use the same reasoning. It's a known fact that many Tomcat users have installed Hibernate. Those Tomcat users don't want to install an extra jar, but they do need a RESTFul framework. Therefor Hibernate and by extension JPA should include a RESTful framework (duplicating what JAX-RS already does, but in a slightly different way).
I think using YouTube would get much better results as its difficult for people to catch you at the right time on the stream. I'd be interested to see part 1 
Syntax sugar has a well known definition. See [Wikipedia](http://en.wikipedia.org/wiki/Syntactic_sugar). If you google the term, you'll see results consistent with the Wikipedia definition. I've never seen the term used any other way. If you have found it used another way, I'd be curious to see the context. Syntax sugar could be seen to have negative connotation, like putting lipstick on a pig. I like the lambda syntax. Just like the enhanced for loop. It makes code look less ugly and less error prone. I also know it doesn't add any real functionality to Java (as lambas and anonymous inner classes are easily exchangeable, with one form being more legible than the other).
&gt; Therefor Hibernate and by extension JPA should include a RESTful &gt; framework (duplicating what JAX-RS already does, but in a slightly &gt; different way). You just described Spring Data REST, which provides a RESTful interface over data sources, including JPA, built on top of Spring MVC. This has actually been quite a successful Spring project.
I can figure that, because it builds on top of Spring MVC. But now imagine that it doesn't build on top of Spring MVC, but implements its own nearly entirely from scratch, or at least NOT using Spring MVC. And imagine that it doesn't stop there. People run Hibernate on Tomcat and don't want install a DI framework, but they do want to use one. Some let's Hibernate implement its own DI framework as well. But 2 can play that game. Weld now retaliates and uses the same reasoning. People have installed Weld on Tomcat, and don't want to add another jar for Hibernate. Thus Weld will include its own persistence engine (completely independent from JPA and heck, let's make it independent from JDBC as well). And because they reckon people might need an MVC framework as well, but again don't want to install that jar, Hibernate will also include its own MVC framework (completely separate from JSF or any other existing implementation as well). Now JSF is not old school either, and because actually three can play that game, will include both a RESTful engine and a persistence engine (completely separate from all other efforts) and will revive its own managed bean system and gives CDI the finger. ...
This could all happen in some crazy doomsday scenario, if there are enough crazy people to make it happen. But ultimately, Jersey implemented a feature that answered their users needs. Projects and platforms should be accountable to what their users ask of them, and we can standardize when the dust settles. Personally, I rather like Jersey's MVC and I hope that those who implement the MVC JSR look to Jersey for inspiration.
Really nice work on this project! This is a bit out of scope, but it would be cool to be able to use the same methodology to interleave streams by using data from the stream. Round-robin of course requires no knowledge of a stream's content and just picks each in succession, but if I had, say, a Stream&lt;Priority&gt; where Priority#getPriority() returns some numerical priority value, I could implement simple logic to pick the stream with the highest-priority object, and fall back to round-robin for equal priorities.
I'm comfortable characterizing it as syntax sugar because it doesn't: - change the type system of Java (for example, it doesn't introduce true function types to the language), nor - in any way increase the overall expressive power of the language. Everything you can express with lambdas in Java 1.8 could have been previously expressed with inner classes. It was just uglier before. That doesn't make this new feature bad or useless. On the contrary, it's clearly very useful. In general, there's nothing wrong with syntax sugar.
Does your boss know you're here you incompetent slob?
Thank you so much! That pointed me in the right direction. I'm pretty sure this code causing the error: // validate unique user name if(existingPerson != null) { if(isCreating || !existingPerson.getId().equals(myEntity.getId())) { throw new ServiceException(ErrorUtils.getNativeCode( ErrorCategory.duplicateKey, PersonEntityNew.class, ExtendedError.DuplicateUserName)); I know you can't know the details for sure without the function definitions, but can you tell what this error check is doing? Particularly at !existingPerson.getId().equals(myEntity.getId())
Well you're a downer, aren't you?
Since you described creating a new Person, I suspect **isCreating** is true, so the second part of the conditional is never evaluated (because boolean || is a *short-circuit* operator; see: http://en.wikipedia.org/wiki/Short-circuit_evaluation). Otherwise it's just comparing the id fields (returned by getId()) for **existingPerson** and **myEntity**. Look at where **existingPerson** is initialized and it should point you to some underlying data structure (again, probably a database). Have a look at the ID fields and see if you can think of any reason they should be the same.
&gt; But first impressions don't always magically improve with a new version number. EJB is another great example of this...
We plan on using a Chrome Book to run everything through. Do you think this would fit our needs or do you think Raspberry Pi(s) and Arduinos would serve us better?
Oh and also I wasn't trying to be derogatory with using 'crude.' I just meant sort of 8-bit, voxel based.
Does chrome OS support java?
Not that I can tell from my preliminary searches. I guess I should've looked that up before posting. Do you know program that can run Java within it? Kind of like a VM? Or would a Pi/ Arduino do a better job at this? 
An arduino is way underpowered for what you want to do. A raspberry pi would work, although java on the pi tends to be a bit slow since the ARM JIT is not as optimized as it is on Intel or AMD CPUs. But for this project a pi (or a higher powered spin-off) should work fine.
I've seen multiple Pis networked together to show how super computers work by splitting loads up. Do you think that it would optimize a bit more if I had, say, 3 or 4 networked together?
I think you should just stick with one. If you and your group don't know how to program, then how would you guys be able to split the load between Pis? 
The problem is people can argue both for and against language features being considered syntactic sugar. Even reified generics could be considered syntactic sugar. Take for example the switch statement, or more specifically the `String` switch statement added in version 7. It can be trivially implemented using an *if-else* chain. However, the compiler can generate non-trivially more efficient code by eliminating the branches in the code and using a jump table based on the `hashCode()`.
Good example, but Consumers return void just so you know.
&gt; confusing the fact that it's such a huge improvement with the fact that it just came second. Right. Java is 20 years older, and it still struggles to get basic stuff in place, such as allowing you to have a `List&lt;char&gt;` without resorting to all that retarded useless bullshit of boilerplate. &gt; Plus, why are you even in the Java discussion subreddit if all you're doing is creating accounts to be an asshole? You're right. I should have been more polite. I apologize for sayin your code sucks. It is a very smart WORKAROUND to compensate for being written in a retarded language. I guess your life is really exciting and you're really busy and have fun writing such workarounds instead of actual useful code? I'm fine with that. Maybe PHP is on the same level as java.
Cool things you're saying, man. I'm not exactly sure why you even decided to start this because I'm not switching languages. Java master race C# sux Microsoft can lick muh balls and ^so ^can ^you!
&gt; Microsoft LOL. Why do people bring Microsoft when discussing languages? are you so poor of arguments that you have to bring that up? Is oracle really doing any good for you? by suing google and crippling java on Android, and by introducing java 9 with stupid irrelevant bullshit such as a JSON API rather than real improvements? I don't give a fuck about microsoft dude. java sucks. The reason there's more java jobs in the world is because it takes 10x the amount of effort to write anything in java versus modern languages.
Because Microsoft designs and maintains C#... I guess that's somehow irrelevant. What exactly are you looking to get here? I'm not just going to switch to a different language because another asshole on the internet said it sucked. I don't think it does. I guess that bothers you so much that you decided to create an account just so I could do this: *I don't care what you think^^TM.*
Aw. Thanks. I'm still learning the new Java 8 stuff :o
&gt; Microsoft designs and maintains C# That's right. they design and maintain C#, and also [submitted it to ISO](http://www.iso.org/iso/catalogue_detail.htm?csnumber=36768) for standardization, [open sourced it's compiler](https://roslyn.codeplex.com/) and [large parts of it's framework](https://github.com/aspnet), [legally promised not to sue alternative implementations](http://www.microsoft.com/openspecifications/en/us/programs/community-promise/default.aspx) and is in fact collaborating with third parties [1](http://xamarin.com/pr/xamarin-microsoft-partner) [2](http://blogs.unity3d.com/2014/05/20/the-future-of-scripting-in-unity/) who provide implementations on non-Windows platforms. I guess all of that's somehow irrelevant. Contrast that to the ongoing oracle (who OWNS java) versus google affair, or the fact that java still bundles crapware with it's installer/updater.... No Comment. &gt; I'm not just going to switch to a different language I don't care. I'm not expecting that. I just merely point out java's [retardedness](http://www.reddit.com/r/cscareerquestions/comments/2epm1f/whats_the_advantage_of_c_over_java/ck2e89z) and poor quality and lack of professionalism, or the fact that [java is legacy](http://www.reddit.com/r/cscareerquestions/comments/2epm1f/whats_the_advantage_of_c_over_java/ck2yhns) and it feels good.
Not quite, because `w` isn't bound to anything when you take away the lambda. It'd have to be: .mapToInt(Widget::getWeight) assuming that the objects coming out of your stream were instances of class `Widget`. That's the syntax you use to refer to either a static method or a method on an arbitrary instance. In this case, we need the arbitrary instance because we don't have an actual `Widget` instance handy. It's worth noting that even though we're saying "use the `getWeight` attached to `Widget`", the method reference is actually polymorphic - if you have subclasses of `Widget` in your stream that override `getWeight`, it'll still call the correct subclass method.
&gt; You're not wrong Thanks. &gt; you're just an asshole. I know. &gt; OP also doesn't understand streams. You don't need a supplier to do this shit. Can you show how such thing is resolved in java in an elegant, beautiful way that doesn't require a bunch of horrible useless boilerplate?
I do understand what random means. The code example demonstrates exactly your point, random number generators that are simply code are not random, but use a pre-determined list of numbers. This goes contrary to what most people would expect from a random number generator. Yes, programmers know this, but at least to me seeing how this can actually be (ab)used was quite an eye opener.
The best explanation I've seen is [this article on lambdas](http://www.drdobbs.com/jvm/lambda-expressions-in-java-8/240166764) by Cay Horstmann of "Core Java" fame. 
 //////////// Init char[] charArray = new char[1024]; Arrays.fill(charArray, '#'); //////////// Code List&lt;Character&gt; charList = new ArrayList&lt;&gt;(); for (char c : charArray) charList.add(c); 2 Lines of code, still Arrays could implement some utility like Arrays.toList(). But Valkyries will bring some goodies from [Valhalla](http://www.infoq.com/news/2014/07/Project-Valhalla): &gt; Project Valhalla will explore a new apporoach to generic typing, and hopes to produce a new form of generic typing that allows developers to use generic collections of primitive types. The aim will be for types such as List&lt;int&gt; to be valid Java in some future release of the JDK. This feature, known as generic specialization, is already present in some other JVM languages and Java developers have been asking for it since generics first shipped with JDK 5.
If OP likes wrapping arbitrary code in functional interfaces, he's going to love stuff like DoubleStream.generate(Math::random).limit(100).sum();
Thanks. &gt; 2 Lines of code That looks much better than the OP's. Still lags behind C# which requires exactly 0 lines of code to perform the same task, not to mention it doesn't suffer the valuetype versus class dichotomy where you can't really call methods or otherwise operate on `char`. (I had a sudden reminiscence of StarCraft). &gt; bring some goodies from Valhalla Ahh... the project oracle embarked on as a desperate attempt to keep pumping money out of java's rotting corpse, I almost forget. That which is promised to be shipped by 2016, except it won't and will probably be delayed a couple of years ahead, say 2018, just like they did with java 8. Seems that by around that time I'll have to say congratulations to java for catching up with C# 2.0 from 2006? Also Seems like oracle is really good in bringing really "useful" stuff such as the JSON API promised for java 9, but has a hard time doing anything serious such as lambda expressions or non-retarded generics or value types? &gt; generic specialization How does this compare / differ from REAL generics such as the ones you find in C#? Does it allow `var instance = new T()` or the like?
Keep learning op, one day you will make us proud.
"Pairs" can be modelled with `Map.Entry`...
It's for libraries like this Java should support some sort of "extension" methods.
Haha what I meant was...if you want to split up task between Pis then you will probably have to to split up the code base. Like one for the game engine and one for the animation. But yea, I believe in you.
No in this case it really isn't. If you aren't sure what language to use and are only aiming for crude 2D graphics parallel programming is somewhat out of your grasp (not to mention completely pointless). The biggest problem with using a low powered system like a Pi is that its ARM chip while its has a similar clock speeds to x86 chips do not provide the same processing power, combine this with the overheads that java has and you are going to have trouble getting a stable framerate. You could easily do this on a low powered device, (you could even do it through a chromebook chroot although this makes the project overly complex). If you need to use lower power devices (especially chromebooks) what I would recommend is instead using html5 canvases, or probably the best idea as ByteArray suggested make stuff on desktop first, then play with low powered systems. Anyway hope this helps somewhat.
Ok, deleting it.
You don't typecast lambda expressions per se, because lambda expressions do not have an intrinsic type; they only have return type, parameter arity and types. The language/VM morphs them into something that you can use - instances of a specified functional interface.
https://www.jcp.org/en/home/index
I think OP wasn't hired for this shit.
Yup. Sometimes you get stuck with a shitty job. If I were him I'd walk.
RE: LOC count, have a look at a [previous post](http://www.reddit.com/r/java/comments/2fbmph/a_cool_syntax_example_with_lambda_expressions_and/ck7vu7t). Generic specialization will allow you to do that, yes. And value types are currently being implemented.
I can't even get my head around when I should use a normal stream over what I know already. Never mind using parallel streams over single streams. NetBeans is all like "USE STREAMS" and I'm like "...maybe?".
Not really, since distributed computing requires that the apps be custom-written to split apart and communicate with itself across multiple machines. Unless you plan to have multiple games going at the same time 1 pi would be best. However if you want more performance you can get one of the many pi spin-offs that are much more powerful, or you could even get an old laptop and remove / reverse the screen.
Hello. How did you uninstall Java, using the bundled uninstaller or using Add/Remove programs? The bundled uninstaller would have left a lot of stuff, and Add/Remove would have left some stuff. I would recommend using CCleaner until the Registry cleaner comes out clean. Tell me how it works!
Awesome, thanks for clearing that up and giving me the some background info.. 
Because while JSF is nice it's still a poor solution for many types of applications, anything public facing is a nightmare since viewstate is invalidated every time you restart your application server, wheras an action-based framework can use a remember-me cookie to log a user back in and continue working like always. Actually, that brings up a big gripe of mine. Why do even @RequestScoped beans give viewstate errors when restarting the application server, especially when I have client side viewstate saving on -_-
`java.util.Random` is good for randomness that needs to be *fast* and is *not* security relevant. For other cases, there is `java.security.SecureRandom` which is *extremely* slow in comparison, and in addition you also have `java.security.SecureRandom.getInstanceStrong()` which returns yet a different PRNG (in my Windows 7/8 Java 8 test). All are / extend java.util.Random. The latter two can't be seeded, according to my tests at least: They don't produce the same sequence of numbers after you call setSeed(), the original Random however does.
AFAIK, log4J2 took inspiration from Logback (whose author was dissatisfied with log4j development and thus created his own framework), and SLF4J, less from log4j and none from java.util.logging. Note that with async loggers, whatever you log needs to be safe to access from multiple threads. E.g. mutable collections should not be logged directly with async loggers, because the collection could be mutated while it's logged, causing ConcurrentModificationExceptions. The criticisms are unfounded, IMHO. Of course, if you don't log a lot and have fast disk space, you may get away without log contention. However, even then - given the fact that Log4J2 has API bridges for all the big logging frameworks, moving to the current best-of-breed system for new projects (or for projects where logging has a non-negligible performance impact and where performance is important) should be a no-brainer. And for those applications that *do* encounter log contention, switching to log4j2 will give a welcome performance boost. I speak from experience here. That there is not one, but 5 packages has to do with the idea that log4j2 should be suited for low-power systems (like Android phones), where program size is a factor. Thus, the kitchen sink approach would not work for everyone. A uber-jar with all dependencies would be nice, but as log4j has so many targets and other optional dependencies, that jar would be so vast and load so many things "normal" users don't need, it may well doom the whole approach. 
The only examples given are moot with Java 8. Are there other reasons other than the ones given? Genuinely curious here.
VoxaAeterna, a valid point. I have a couple of thoughts in response: 1.) In my opinion Java 8 lambdas have a much uglier and inconsistent syntax than Scala and additionally misses out on a lot of functionality that Scala can utilize that Java 8 still cannot. 2.) This was meant as a very early introductory article. There are hundreds of features in Scala that make it a compelling alternative to Java, but it would have turned into a book if I had tried to show them all. Having spent sixteen years as a Java developer before switching to Scala, I spent a lot of time validating I was making the right decision. Now I've been using Scala as my primarily language for three years and absolutely love it and it makes me hate Java. :)
Well, is it? Any experiences worth sharing?
&gt; I guess all of that's somehow irrelevant. Making something open source does not also make it relevant. Being relevant and being open source are two different things. It is irrelevant, because despite the standardization, C# is effectively a Microsoft owned language which in practice is pretty much exclusive to the Microsoft ecosystem. Nothing wrong with that. But there is a whole world outside of the Microsoft ecosystem with tools and languages. If one is developing, for example, on Linux, then C# is irrelevant. Despite that some obscure tools exist to use it on Linux, it is irrelevant. Microsoft could have strongly embraced making C#, it's libraries, tools, etc be cross platform fifteen years ago. They didn't. And for the same reasons they tried to make Java unwittingly lock developers into Microsoft by 'embracing and extending' the Java APIs, for which Sun successfully sued Microsoft. Microsoft doesn't want competing systems to exist. Microsoft could now make C# truly open, tools, libraries, etc, but it's too late. That ship has sailed. Java is the language that is used if you need to run on, or also run on non-Microsoft platforms.
http://stackoverflow.com/questions/11359187/why-not-use-java-util-logging
Why?
been using the library from 3.5 and wau wau wau :)
I gotta admit, I'm kind of sick of the 15 meta projects in the Java ecosystem that each think they have the best way of appending a line to a file. Enough already.
&gt; log4J2 took inspiration from Logback (whose author was dissatisfied with log4j development and thus created his own framework), who was also the original log4j creator, right?
I'm using it right now on a personal project. Usage doesn't seem all that different, though I haven't really played with the various appenders.
I'm not sure if you can reduce the creation of log4j to one person, but he was clearly one of the main developers.
I just write to SLF4J. Problem solved. I can drop in Log4j 2.0 if I need it.
&gt; Use File objects instead of path strings, and use the File constructors to create paths Or even better, use [NIO's Path class](http://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html).
Check out the /r/Javahelp wiki. There are plenty resources listed. I particularly recommend [Java for Complete Beginners](https://www.udemy.com/java-tutorial) free on Udemy.com and, of course, the [Oracle Java Tutorials](http://docs.oracle.com/javase/tutorial/). Other than that, practice, practice, practice. (I really learned a lot by reading the questions on /r/Javahelp and trying to solve the problems there. BTW: I tried quite some time ago with the "Java for dummies" book, but it didn't make too much sense for me. 
Hi! I know just what you mean :) My advice is that you start with making a lot of basic programs that uses windows (ex JFrame). Then you really try to remember how to build the "base" of your program. When you feel like you get the hang of it I personally think like this when I program: What do I want my program to do? (Read a line? display a message? etc). Then I think, what would be a logical command for that? Like JTextField or JLabel (I really like swing ;) ). Then try adding a dot after it to see what can be done and if you don't know what to do you can always just look up a video on youtube. Even if you copy code you learn a lot! :)
you should start to build your own project .... 
I would recommend the O'Reilly book 'Learning Java' by Patrick Niemeyer and Daniel Leuck. Don't let the name fool you -- the book goes into some detail about how Java works as a technology (e.g., the runtime environment, compilation process, the bytecode verifier, the classloader) and also goes in depth with advanced Java topics like concurrency and networking. Check it out.
JSF doesn't necessarily use view state. There's a stateless mode (confusingly via a transient property) that switches it off. When you store state on the client (if you use state) then you should not see any view state expired exceptions. In fact, there is by popular demand a feature that explicitly allows you to expire state, since some people didn't like state being valid for months, years and up to infinity.
Thanks a lot dude! :D This is exactly the kind I'm looking for! You've done me a great favor :) I also stumbled across someone who gave it to me for free in a pdf format if you know what I mean http://collegetimes.com/wp-content/uploads/2014/06/Andywink.gif
If you know how methods, objects, classes, and importing classes/libraries work then just come up with an idea for a program and make it. You should be able to learn anything you need from google and java docs.
No problem, enjoy the book. :)
A lot of doing java programming right is understanding how things are commonly (effectively) done in Java (and in languages with similar set of features). Regardless of anyone's opinions, a lot of that has to do with learning common design patterns, mainly the ones on the Design Patterns book (gang of four; http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/). Although the patterns in the book are just the starting point, it seems to be pretty good in terms of getting you up to speed with what some people tried (and are trying) to do with the design patterns movement, although there is significant disagreement. There is also concurrency. This is a big thing in Java. A lot of the design of libraries and frameworks in Java are about dealing with concurrency issues. Server applications have to inherently deal with it, and this is where Java is mostly used. Although it's also a language independent subject, it's worth studying it applied to Java. A commonly recommended book is this one: http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/. The issue with all of this is that what I'm basically telling you is that "a large part of learning how to program in Java is to learn how to program", which isn't very helpful on its own. However, it's something I believe a lot of people miss. The focus on the language can be (it isn't necessarily) a symptom of that.
what I mean that you should start to build your own application ,... snake game is good start .. also try to make CRM appliations .. 
I would recommend testing out [DCEVM](http://ssw.jku.at/dcevm/) first. You may get just as much increased productivity.
Curiously absent was any discussion about the curious conditions under which each GC frees VM heap back to the host OS. I've had production applications with only 3% occupancy in a 4GB heap... not great use of resources.
We pay for it, and it worked wonders with Glassfish which is a terribly slow to startup application server. I can't get it to work with Wildfly right now (using Eclipse), but it's not as a big of a deal because Wildfly starts up in under 30 seconds as opposed to three minutes for Glassfish. My coworker does have it working with Wildfly and IntelliJ though, but he's kind of a snob so I'm not sure what to believe. Support has been pretty great though, and I am currently working through my issues with them. One guy emailed me Labor Day evening at like 1 AM and was like "has your issue been fixed yet?" and I'm thinking... dude, I haven't worked in half a week. Pretty sure they have a trial though, so definitely do that first.
DCEVM looks like a cool project but it's a bit old, no? Java 1.6 is still not supported? Back on topic- it depends on what you are developing. How quick is your build-deploy-test cycle currently? How quick do you need it to be? Are current methods of doing hot-deployment sufficient (like .war files and Tomcat). Can you use component architecture like OSGi that supports hot-deployment?
There are more rules around what a lambda is than there are around what an anonymous class is. Down to the bytecode, that means that closures will always (afaik) create invokedynamic instructions. Anonymous classes, on the other hand never (almost never?) generate that instruction. Some of the differences off the top of my head. Anonymous classes can't interact with non-final variable in scope. lambdas can. Anonymous classes can have fields, lambdas can't. Anonymous classes can have several internal methods, lambdas can't (though, you could fake it by putting lambdas in lambdas). Anonymous classes can implement all abstract classes and interfaces. Lambdas can only implement an interface with a single method.
Yes, that's what I heard, too. Perhaps the other developers were too patient with the glacial development speed of log4j. In any event, log4j2 is certainly worth the wait.
Thanks for PrimeFaces! It makes my clients very happy.
To use DCEVM on a newer JDK take a look at its [fork](https://dcevm.github.io/).
You can also take a look at www.stagemonitor.org for a open source alternative.
Looking back I wish they had implemented JUL as an interface where the implementation could be specified in a similar way to JDBC. Then we wouldn't have a bunch of incompatible logging implementations. 
Having used both jrebel and the new spring-loaded class swapper, i can say that spring-loaded is better and free, and works for more cases than jrebel. spring-loaded does not seem to support remote compilation swapping though, so you have to be running inside an IDE for it to work. jrebel can swap whatever directory contents you point it to. If that is your scenario, then jrebel might be the best option. 
We currently have around 20 floating licenses and just started hitting the cap. As soon as the license seat errors cropped up, the developer revolt started (people started to check out offline licenses to combat others using "their" seat.) We love JRebel, and it keeps getting better and better. I personally have north of 4800 redeploys saved in the last year...time for that Star Wars marathon it keeps suggesting! If you have a modern spring app you can also try https://github.com/spring-projects/spring-loaded
Is this implementation specific or is it documented in the standard somewhere? This has been a pain in my ass for a year now, I pretty much only use RequestScoped beans and it's annoying to constantly see exceptions every time I restart the application.
Yes, from what I understand. I attempted to get this running in Oracle JDK, but to no avail.
We had similar experience with their sales team.
IT'S THE MOST IOMPORTANT PROBLEM SOCIETY IS FACING TODAY
Could you give any simple examples? I'm rather new to coding in network functionality.
Ya, I don't get it. Eclipse has brilliant refactoring support. 
I refer to them as neo-luddites. It's rediculous to exclude the IDE from development. they are an eco-system. It's an artificial restriction that hobbles speedy development. More over it actually result in poorer code as a developer may choose shorter member names to minimize their typing. (as an example) 
Their support is really amazing. I've also had mails in the middle of the night and on weekends. Do they even sleep?
rxtx
Just did a project on jboss 5 (yes, in 2014) and IntelliJ plus JRebel was our savior.
Here is one that I used. It is a port forwarder. https://github.com/cartmanez/port-forward/blob/master/src/main/java/ed/port/forward/ClientThread.java
I started with the same book as you and had the same problem. You need to practice by programming. I became decent by practicing on here http://codingbat.com/java Its just important at first that you can use basic variables, loops, ifs and strings before you move onto the advanced stuff which you will find easier than what this site has to offer by the way. Problems are fun to solve and you will quickly get better at it. 
They sound aussie
Ever dealt with new relic? Fuck. 
Edit: I got really carried away and ended up writing this for my own entertainment. I'm sorry. Save it for reference if you need it in the future. Either way, here's a chapter from the book I'm going to write someday. Is this your first programming language? &gt; I tried with the "Java for dummies" book, but even tough i try to use the code often, i just seem to forget what to write, every time i wanna program something.. Because those books assume you're a dummy and give you a lot of stuff like "don't worry about memorizing this, you'll understand what it does later" except you won't memorize it until you understand it, and you won't understand it because half-baked books don't explain it. I doubt you're a dummy, at least I don't assume you are. Don't read books that assume you are stupid, even if it is just a trademark brand Dummy™. They should make books "Clipping Your Toenails for Dummies" or "Zipping Your Pants Without Snagging Your Balls In The Zipper for Dummies." *Dummies don't want to learn Java*, they want to sit on Facebook and play Candy Crush and stalk people. A lot of things you will learn either through repetitious use or from relentless Googling and reading. For a very long time I couldn't remember how to type: public static void main(String[] args) { // here b dragons } and I'd have to look it up every time I needed it. Mainly because: a) The book I was using took the "don't worry about this right now" approach to teaching. b) I didn't understand what it did, just that it was "the thing that runs the program when I press the play button." Same goes for Object someObject = new Object();... "wtf is new? wtf do I have to type Object twice for? wtf is the parenthesis for?" Thankfully I learned for loop, do-while loop, and if-then-else syntax a very long time ago, but those are central concept to programming. Once I decided I wanted to know what public is, what static is, what void is, and what this String[] args thing is, then I learned what it does and now creating a PSVM (public static void main) is as close to natural as summing 1 + 1. Same goes for System.out.println and friends, Scanner, lazy instantiation, etc. It just takes time, curiosity, and even a little frustration at first. Don't be afraid to revisit the basics, or the little parts that you're unsure of. The hardest part is learning how to identify and define those little parts that don't quite make sense to you, but you'll get it if you keep trying. --- **STEP 1: DO NOT WRITE EXCESSIVE CODE IN YOUR MAIN() METHOD OR YOUR CONSTRUCTORS** **STEP 2: EAT, DRINK, BREATHE, BATHE, SLEEP AS NECESSARY** **STEP 3: SEE STEP 1** This is a fucking **death trap** that almost every beginner Java book I've ever seen encourages. It's fucking horrible. It's the worst goddamn thing you can do to a Java program. It's like putting ketchup on a sirloin. All these people who introduce Java by cramming code into main() need to have their publications revoked. It's seriously bad. At the **very least** start your program like: public class MyClass { public static void main(String[] args) { new MyClass(); } public MyClass() { // do a bit of stuff here } } This seems so no-brainer, and doesn't even seem that important, but it is the single-most important thing you can do when you're creating a new program, or a new class. It's a cardinal rule. **A CARDINAL RULE.** Why? Because everything in Java is an object (unless it's a primitive lower-case boolean, int, long, etc., an interface, a generic, or a wildcard, or some other keywordy thing I can't think of at the moment). Objects serve as the core foundation to object-oriented programming, which is a much larger and more ingenious way to design programs than most people are used to. A lot of OOP does not work in a static context, like public static void main(). **Your #1 priority when writing a class is to get the fuck out of public static void main(String[] args) as soon as logically possible, unless you are explicitly doing something with that args String array, or gathering some very basic input to pass into your new MyClass() object.** If I can give you some general advice for your question "how do I learn Java?" it's this: **IF YOU CAN USE AN OBJECT OR CREATE A CLASS TO WRAP SOME DATA OR PERFORM SOME FUNCTION THEN DO THAT. PERIOD.** **LEARN WHAT CLASSES AND OBJECTS ARE AND HOW TO MAKE THEM WORK FOR YOU, NOT VICE-VERSA.** If creating a Foo class, do not give it an: private int bar; public int getBar() { return bar; } which is how most places teach getter/setter, which is why a lot of people fall into this whole **public static variable** death trap of writing huge static programs. It violates encapsulation. You might as well just make: public static int bar; and let every kind of client class into your Foo's pants. Foo should keep its pants on. Foo needs some decency and self-respect. Instead create a Bar **CLASS**, which your Foo can instantiate a Bar **OBJECT** of and give it a: private Bar bar = new Bar(); // only one bar public Bar getBar() { return bar; // returns the same bar every time } or private Bar bar; // no bar here yet public Bar getBar() { bar = new Bar(); // now the bar up above is a fresh new bar return bar; // return new bar } or public Bar bar = new Bar(); // only one bar public Bar getNewBarOfColor(C color) { bar.setColor(color); // change bar's color return bar; // returns the same bar with a different color every time } or private Bar bar; // no bar here yet public Bar getBar(C color) { bar = new Bar(color); // now the bar up above is a new bar of a different color return bar; // returns a new bar of a different color } or most simply: public Bar getBar(C color) { return new Bar(color); // returns a new bar of a different color every time } adding lazy instantiation: private Bar bar = null; // no bar here yet public getRedBar() { if(bar == null) { return new Bar(red); // returns one new red bar if we don't have one yet } else { return bar; // returns the same one bar every time if we previously created one... every time } } Try and apply lazy instantiation to the other snippets. What kind of functionality do you think this allows your class to have? What kind of control? What control do you lose? Can you see the trade-offs between these design decisions? Each of these snippets does something different, but they all share the same principle: the client class (whatever is calling foo.getBar(...)) knows no details of Bar. It just knows that it wants a Bar and gets what it gets from Foo. You just learned the fundamentals of what encapsulation means: **Foo contains a, and controls access to, a Bar object.** **LEARN HOW TO CREATE AND USE ABSTRACT CLASSES THAT IMPLEMENT INTERFACES.** Most importantly, how to use interfaces because that opens up a whole world of new possibilities when you eventually learn how to master polymorphism. **LEARN WHAT ENCAPSULATION MEANS AND WHY IT IS OF UTMOST IMPORTANCE.** If Foo contains a private Bar this means Foo encapsulates Bar. Foo should not expose its Bar to the outside world, it should protect it, encapsulate it, and control access to it without revealing what it does on an underlying level. **This is what interfaces do.** When you turn the radio on in your car, do you have to tell the car how much voltage to supply it in order for it to run? No, the power button and volume knob do that for you. Your radio encapsulates a power supply and doesn't reveal it to you. **This is why interfaces are important.** Don't worry about the details of this code until you feel confident you understand. I tried to make it as simple as possible, just pay attention to the PowerSupply object. public interface RadioComponent extends Component { public void togglePowerButton(); public void setVolume(V volume); } public class Radio implements RadioComponent { private Console console; // Console ENCAPSULATES a reference to a full PowerSupply private PowerModule power = null; // Radio ENCAPSULATES a reference to its partial PowerModule // When you hear about "dependency injection" this is all it means... // our radio depends on a console in order to operate, because // the console provides us with something we can plug into and get POWER public Radio(Console console) { this.console = console; } public void togglePower() { if(power == null) { power = console.getVoltageModule(); // get 11v from the console... remember our dependency? this.setVolume(1); // give the radio just enough juice } else { power = null; // driver toggled power off } } public void setVolume(V volume) { if(power != null &amp;&amp; volume &gt; 0) { // user just changes volume power.setVoltage(volume); } else if (power == null &amp;&amp; volume &gt; 0) { // user turns radio on by turning volume up this.togglePower(); this.setVolume(volume); } else if (power != null &amp;&amp; volume &gt; 11) { // user is trying to go over 11 without understanding how deadly that can be this.setVolume(11); // this radio only goes up to 11 } else if (volume &lt;= 0) { // setting volume to 0 will turn off the power supply ps = null; } } } now when we create: // Console is the interface to a concrete DashConsole // DashConsole is composed of a collection of Components // it probably depends on other things but I'm not a fucking mechanic, ok? Console dashConsole = new DashConsole(); // RadioComponent is the Component interface to a concrete Radio // our Radio depends on a console... dashConsole RadioComponent radio = new Radio(dashConsole); Now all we're able to do with the radio is: radio.togglePowerButton(); radio.setVolume(11); // play stonehenge radio.setVolume(0); // enjoy the scenery in silence for a while radio.setVolume(5); // turn the radio on to a volume of 5 // play safety dance radio.togglePowerButton(); // enjoy some more scenery in silence Look at that fucking code a few times. Look at it. The Console does not reveal its underlying PowerSupply to its Components. The Radio Component does not reveal its underlying PowerModule to the user/developer. All we know is we can turn it on and off and change the volume, and that's good. Hopefully you just learned what interfaces do and how they can encapsulate behaviors, but I think at the very least you can see that radio.toggleX and radio.setY don't reveal anything about what X and Y do. It helps you separate **what you want your program to do** from **what your program actually does**. There are people who can go through an entire Java development career and not fully grasp this concept. It's scary. --- **DO NOT RELY ON INNER METHODS TO DO THINGS THAT EXTERNAL OBJECTS SHOULD BE DOING.** You'll end up writing these giant, complex classes that you won't even be able to identify the purpose of after a while. Go back and look at: public void togglePower() { if(power == null) { power = console.getVoltageModule(); // get 11v from the console... remember our dependency? this.setVolume(1); // give the radio just enough juice } else { power = null; // driver toggled power off } } specifically look at the line: power = console.getVoltageModule(); Again, Foo, don't create a: private int baz; public int getBaz() { return baz; } instead create that in your Bar class (**IF FOO PROVIDES AN INTERFACE TO BAR, AND IT MAKES SENSE FOR BAR TO CONTAIN A BAZ**) and just use: private Bar bar = new Bar(); public Baz getBaz() { Baz baz = bar.getBaz(); return baz; } or more simply: private Bar bar = new Bar(); public Baz getBaz() { return bar.getBaz(); } this will teach you what class hierarchy means and will help you write larger, easier to write, easier to use, easier to understand programs. This is for your own sake, and your sake alone, because sometime down the line you *will* end up creating a program that is so complex you lose control of how to manage it. **LEARN EARLY, AND ALWAYS APPLY THE SINGLE RESPONSIBILITY PRINCIPLE.** We have Hammers and Screwdrivers. Hammers hammer nails, and Screwdrivers screw screws. If you create a NailDriver or ScrewHammer then you haven't created a "brilliant clever class that solves two problems at once..." you've violated the single responsibility principle. Avoid this trap. I know it seems like you're doing the smart thing, but you'll end up writing shitty classes that can't be reused. Then you'll feel like a dope. And you'll have to waste your life refactoring it. Trust me. Some resources would say these are advanced concepts... they are not. Not even close. They're simple and fundamental. The reason why they're perceived as advanced is because people first have to un-learn all the bad practice bullshit they were force-fed in the first place, and then re-learn how to use proper object-oriented practices. You can learn both simple applications of "advanced" concepts, **and** learn the Java language at the same time. It might take 1.5 times longer to learn than by just creating one public static void main() and cramming it full of 2,000 lines of code, but it will take 3 times longer to learn how to undo the bad practices that you were taught in the first place. OOP comes first, Java comes in very close second. Me, I say start there. Start with the object orientation and really learn how to write Java. Don't start with a square peg and rub it with sandpaper for a few years until you can fit it into a round hole. **Start with the tools that help you create round pegs, and learn how to use them to create round pegs.** Remember, creating a program doesn't always mean writing code. It is possible to create the bulk of a program before you even write a single line of code. Don't be in a rush to start typing. Thinking is work, too. Sorry this was so long, I get carried away but I enjoy communicating these things. I hope this all was of some use to you, as these are major problems I had to face and overcome when I first started learning Java, and learning about them early will save you months of frustration.
Tell us more. Have you used this for realsies for real work? Does it work well? Looks kinda abandoned. 
Libraries, lots and lots of libraries, and running on many platforms, and Scala.
I've enjoyed http://codingbat.com
They are based in Estonia.
I don't consider Windows to be a useable platform for real work. This pretty much kills C# for me, even though as a pure language I think it's got a lot of advantages over Java (value types/stack allocation probably being the most important). I know that there is some support for C# on Linux, but I don't the impression this is a real thing that people do.
&gt; That said, their sales people are the most obnoxious breed of people I have ever encountered with any tech company. What? Worse than Oracle or CA?
&gt; That said, their sales people are the most obnoxious breed of people I have ever encountered with any tech company. I absolutely despise their sales force. They will hound you constantly. I installed their trial and I got a phone call from them like the next day during midnight. Uninstalled immediately. 
thenewboston on youtube is pretty legit :)
If you want something rudimentary or to understand the basic concepts, start with sample code on [java sockets] (http://docs.oracle.com/javase/7/docs/api/java/net/Socket.html). It is pretty trivial to write a ["hello world" client and server program](http://docs.oracle.com/javase/tutorial/networking/sockets/readingWriting.html) [netty](http://http://netty.io/) and [mina](https://mina.apache.org/) are frameworks that handle the nitty-gritty details of handling messaging between many clients and servers and may be too "heavy" for your purposes.
I'll happily accept that offer. Thanks!
ah yes, I remember a friend telling me about him but forgot his name. Thanks!
I've been picking up java recently, specifically for android (I'm mainly C/C++), and have found the eclipse/android sdk tutorials to be very helpful. The environment can be a pain to set up if you're looking to debug on your device and pull from code repositories, but the tutorials are great, and they have alternate blurbs for those not using the eclipse IDE.
I loved this. I didn't understand any of it, but it was a very fun read. Let's say I bust my ass for 1 year learning java and android development. ...is this market just saturated with highly intelligent people like you??? 
Gonna be that guy. Any chance of a code?
No. And I consider myself a Java beginner. I *just barely* understand enough about OOP and design patterns to swim in the deep end for a little bit before I have to come back to the shallow end, so-to-speak. This stuff runs really deep and takes a long time to completely wrap your head around, I have no idea when I'll get there. So when you say you need help learning Java... I can relate. The level at which you need help at just increases the longer you stick with it, that's as simple as it gets. --- Either way, what I said stands true: &gt;a) The book I was using took the "don't worry about this right now" approach to teaching. &gt;b) I didn't understand what it did, just that it was "the thing that runs the program when I press the play button." and I'm no exception, I just spat out "don't worry about this anonymous class": Console dashConsole = new DashConsole(); but mainly because I don't really care about the code that's in there, as it's just some other layer of abstraction with the odometer, headlights, air conditioning that I don't really want to think about relating to each other right now. Don't really need to, in order to get the point across about OOP designs and it's really hard to read/understand quickly in **PLAIN BLUE CONSOLE FONT** on reddit. It's easier with IDE colors that let your brain separate interfaces from their implementations quickly without having to look too hard. [This is a piece](http://i.imgur.com/1vThk1U.png) of an abstract class I wrote. I still need to write something that will time out after a few seconds if the executor fails to shut down (inside or just before that while-loop) and then throw an exception. All of those object references (variables) you see are just interfaces. The implementation happens somewhere else and I don't really have to think too hard about it once it's written. If I need to change it i can just change it and my interfaces stay the same. That's why it's good, because you can clear your head of the details while you work on the abstraction (the bigger logic). Colleagues are just threads. I just create a pool of threads that does whatever work I need them to, doesn't matter what, and all the magic happens [here](http://i.imgur.com/xTGfkuY.png). I don't even care about what type of objects they're working with, generics let me name them &lt;T&gt; and &lt;E&gt;: T could be a String and E could be some integers I'm parsing from the string... T could be a bunch of jpeg images and E could be the same jpegs just with a timestamp. The details don't really matter once you grasp how to abstract a specific problem. The subclass of this abstract class is also really small code, like... very little. It just adds the threads I want to run and then wait for them to complete work and start producing some &lt;E&gt; objects. What happens next with those objects is anyone's idea.
It works if your path is straight on road of supported frameworks. If you devour a little bit Jrebel turn out to be useless. I have customizations in the spring security and it doesn't work. On the backend I have Spring + Akka and it doesn't work.
I implemented a potential solution that I described in my original comment and it can be found here: https://gist.github.com/ElFeesho/dd1abfecd8639fcb94ff You could augment the code to run on a separate thread but it will not scale well if you're requiring multiple clients connected. To juggle multiple connections requires a bit more brain power and some time spent learning how to multiplex non-blocking SocketChannels. 
Now at Maven Central: &lt;dependency&gt; &lt;groupId&gt;com.codepoetics&lt;/groupId&gt; &lt;artifactId&gt;protonpack&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/dependency&gt; 
The next release will have an interleaver, which takes a "selector" function that decides which item from the heads of all the streams to emit next - so round-robin, random, and priority-(or-anything-else-)ordered will all be possible.
JRebel is amazing and their tech support is ace! A big problem that JRebel has to overcome next to plain Java reloading it also had to clear caches of each and every java util and framework in existence. This can be a reflection method cache in some ancient apache commons library to re-initialising managed beans definitions for some DI framework. JRebel can be exceptionally fast with support here, I've seen more than once that someone posted about some obscure library and got a reply within hours on the forum that a patch was ready for that lib.
They spam you on LinkedIn, and call you on the phone incessantly. I never had anybody from Oracle or CA do that to me.
VirtualPairProgrammer. It's not free but it does offer the best courses I have ever taken. The person giving the course is simply amazing. He knows how to teach and how to make sure you understand. They offer support if you get stuck. You could also try JavaBrains. Absolutely free but mostly offers advanced courses. He is also a good teacher. 
That's crazy (in a good, intriguing way). Was it designed to compete with XRebel, or just a coincidence (to appear at the same time)? Are you presenting at any conferences in the next months?
Hey, I'm not a very advanced programmer so take my advice with a grain of salt. Something that I noticed is that you repeat a lot of the same code here: if (src == calculate) mon_text = monday.getText(); mon_hours = Integer.parseInt(mon_text); tue_text = tuesday.getText(); tue_hours = Integer.parseInt(tue_text); wed_text = wednesday.getText(); wed_hours = Integer.parseInt(wed_text); thu_text = thursday.getText(); thu_hours = Integer.parseInt(thu_text); fri_text = friday.getText(); fri_hours = Integer.parseInt(fri_text); sat_text = saturday.getText(); sat_hours = Integer.parseInt(sat_text); sun_text = sunday.getText(); sun_hours = Integer.parseInt(sun_text); running_total = calculateWeekday(mon_hours); running_total += calculateWeekday(tue_hours); running_total += calculateWeekday(wed_hours); running_total += calculateWeekday(thu_hours); running_total += calculateWeekday(fri_hours); running_total += calculateSaturday(sat_hours); running_total += calculateSunday(sun_hours); final_total = Integer.toString((int) running_total); total.setText(final_total); } Think about how you could reduce the amount of code here (loops/arrays)? I can give you more tips if you want but I won't go giving you the solution straight away. I'm not trying to be condescending but since it's your first program, what I'm suggesting is probably a bit out of the scope of what you know but it's always good to learn and I'd be happy to talk you through it if you wanted.
You should *definitely* link to your x-posts. If people feel that you need help and hence go through the effort of typing something up because they see that no one replied yet, they should be correct about their determination. http://www.reddit.com/r/javahelp/comments/2ffzc1/my_first_java_program_need_someone_to_quickly/
PrimeFaces is the best! :)
By a small margin since Oracle took over though :(
Hahahahahhahahahhahahahahahahhahahahahhaha! No.
"everthing except the language itself" would be the answer in my case. java 8 finally brought us closer to C#/.NET in terms of lambdas and less boilerplate code. Other than that the whole ecosystem in java is a whole different ballpark. Application Servers, Platform independence, Injection Frameworks + OR Mappers (yes ik that .NET has them too), the ton of different JVM languages, huge open source developer support (with the possibility to change / fork projects as you need) 
Thanks! To be honest I did try loop at one point but I messed it up haha... I'll look into it again now that you've mentioned it, it seems kinda important :) 
Oracles docs are pretty damn good
English*
Only just skimmed through it, but it looks like you could make use of arrays to narrow how many variables you are using. 
Second this. I was so dissapointee that I found cave of programming AFTER I had already completed all of my java related courses.
Dito. Started with another course and later found John's courses which are far superior to the one that I had taken :(
I moved from C# to Java 5 years ago, because in my country, there are more job offers around. Also, Visual Studio is expensive, and in most places I knew they have illegal copies, and I don't like that. IMHO * C# is better than Java. It started as "Java with some improvements", now it has many more features, but still remains more "spiritually compatible", lets say, than Scala. C# it's still some sort of an incompatible new version of Java. * F# is better than Scala. It has better design and nicer syntax. I really wish we have something like that in the JVM * The collection of libraries in the JVM is bigger and better. Net is getting there, but slowly. * The collection of frameworks in JVM is bigger, more complex. At the beginning, it was confusing to have a zillon web frameworks to choose from, now I like that idea. * The open source spirit in the java world is the greatest advantage java has. In the .NET world, there is always the "official Microsoft way" of doing stuff, and people tend to use that way. In the java world, the "official SUN/ORACLE" is just one more option, and people don't feel they need an excuse to use Log4J instead of java.util.logging, or Hibernate instead of JPA While I think lambdas and default methods are a great addition, I think the cost of keeping compatibility is becoming higher. Maybe Oracle should branch a new "Non-Backwards-Compatible-Java", or choose an existing language, or somehting 
currently working on one https://github.com/arnaudroger/SimpleFlatMapper after that I'm thinking on the query management part of it
Thank you!
I can private tutor you if you want :)
can't stand listening to theNewBoston
Java has an absolutely massive business presence. I agree that it is time to look at a fork and reinvent java, but when you consider the mind numbing number of java deployments, the cost of keeping compatibility is low. .net has no qualms with breaking compatibility. Business hates that because it costs them lots of money and any changes might introduce bugs that weren't there before. As someone who has been burned badly by .net updates, it definitely has to be a fork not in the main java language . Another major issue for java now is that the ecosystem is so massive that starting over would be bad for it. How can Oracle justify that? All it does is give business an opportunity to look at other technology. That would be bad for Oracle.
If anyone posts the solution here, **please use spoiler tags** or something like that.
Since there's actually a prize to be drawn from the successful entries, it's probably better not to post a solution or people will just submit it with modified text for a chance at a gift card.
I know how to fix it but not 100% why.
Definitely work on adding some arrays and loops. This will drastically cut down on the amount of duplicate code you have to write and makes future changes easier. (PM for some help
1. I don't like the use of `snake_case`, I prefer `camelCase`. But as long as it is consistent it is moot point. 2. Your variable naming scheme is pretty bad. If I said what do `mon` and `monday` contain you would have no idea. [**This**](http://pastebin.com/Y3gKqyDF) is much better. Use the same notation for check-boxes and buttons, `chkManager` and `btnCalculate`. 3. ALWAYS use braces even if it is single line if statement. I don't care. ALWAYS USE BRACES. 4. Avoid variables with a larger than needed scope. `sunday_wage` is only used inside one method `calculateSunday`. In fact you could refactor the entire method to [**this**](http://pastebin.com/prFuBFVV). 5. `final_total = Integer.toString((int) running_total);` is a horrible dirty hack. Use [**NumberFormat**](http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html). 6. Don't use double/ints for representing money, you will have a bad time. Use a BigDecimal instead. 7. Code layout and therefore readability is pretty bad. I should be able to read your code. I can't, not easily. 8. No validation at all, I can enter "a" into a number field and crash your application.
1) Why are you using any appserver besides Jetty? It restarts in milliseconds 2) Why are you building a HUGE FUCKING EAR when you can externalize the jars, classes, conf, hell 99% of it outside the ear so the restart time is MUCH FASTER. JSPs too. if they are externalized, the dynamic recompilation can occur without appserver restart 3) why are you using java? Use groovy or beanshell for dev for dynamic recompiles
1. RHS of Line #100 should be overtime_hours*1.45 2. The methods *calculateSaturday* and *calculateSaturday* are missing **overtime hours** calculation
I wish this code had some comments...
I've enjoyed this MOOC: http://mooc.cs.helsinki.fi/programming-part1 
This Swing/AWT code appears to be hand written. There are many books available that can help you learn it if you need, but JavaFX seems to be the way to go now.
That's a really fucking dumb answer with no understanding of the real world.
Isn't this the problem?? The reason Java is so hard to learn is because there isn't a good tutorial for it. I'm not talking about simple stuff. You can find tons of decent Java tutorials on "booleans" and "basic classes" and "for loops". But for anything advanced, it's not easy to find a good tutorial. But more importantly, the main issue with Java is the environment setup and knowing all the eclipse plugins and knowing all the little steps to get things running correctly. There's one site that has a nice tutorial, "learnjavaonline.org" but it's woefully incomplete and missing the advanced stuff.
&gt;All it does is give business an opportunity to look at other technology. That would be bad for Oracle. You are absolutely right on this. Oracle needs to move with baby steps, and don't rock the boat. But insist on the increasing cost of keeping compatibility will paralyze Java and make other technologies more appealing. 
Strongly disagree. I would much rather ban *final* and *private* from public libraries. Such a pain when I really need to extend something and it cannot be done. Intentionally locking the code can mean two things, it either sucks, or it is perfect. But if it is perfect, then nobody needs to extend it, so why do you care about that. Of course there exists valid reasons to use final, but fear of breaking someone with a new version of a library is not one of them. 
Garbage collection does not prevent memory leaks from happening. Two simple examples about how to create a leak in Java https://plumbr.eu/blog/how-to-create-a-memory-leak
Disagree. What about wrapping a class in a decorator to provide logging capabilities? Or wrapping a class in a dummy class to keep unit testing simple? For internal development and classes this makes sense, but it would be a disaster for public APIs the world over imo.
&gt; and *private* Like `Integer.digits` ?
Has the corrected code been committed to the repository [https://github.com/takipi/puzzle-bballsim](https://github.com/takipi/puzzle-bballsim)? I haven't looked at the code yet, just compiled/ran and it looked ok. No exceptions and the exit code was 0.
If a class isn't designed to be extended, the odds of you not running into problems attempting to extend it when you "need" to are high. Intentionally locking the code may also mean that it simply isn't designed to be safely extended. This may be the case for valid reasons, or simply because the author had not the time to properly take extension into account.
The third question is easiest. The method is a component of the class. If you include the class in the header statements, you don't need to preface the method with the class name (unless you have the same method name in two classes and need to differentiate for some reason, but that would be really poor design). The exceptions are the this and super prefixes, which have their own specific uses. 
For a simple example like that, it probably doesn't matter too much. Generally speaking though, you'd want to return the value to print. That way if you wanted to do something more complex later, you wouldn't need to change it. Also you could re-use that code elsewhere.
As someone who works mostly in osgi environments, I could not agree more, but can you guarantee that another api designer felt the same way? I think it's better to preempt the mistakes of api designers rather than preempt the mistakes of users by putting limits on what they can extend by default.
For Question 1, definitely the first one. Use as few side effects in your "deep" code as possible, and put them "farther out". (can't really explain it)
The problem is that most classes are not designed for inheritance, so it is often not really safe to override methods without checking the source code first. Also, you don't know if assumptions change in future versions. Of course, a class that is not designed for inheritance should be sealed. But having seen many large code bases, programmers generally don't do it. So, I think it make sense to make the sane behaviour the default. Of course, it is far too late to change this now, since it would be a huge breaking change. With regards to decorators, etc.: composition and interfaces are your friends.
Thanks for the suggestion, it seems to be really great and it's something I've been looking for. I'm gonna try it later.
The decorator pattern doesn't use any inheritance of concrete classes?
I agree, but a class lacking the final keyword should be a class designed for inheritance.
For your first question, it really depends on the context. If you need to use the result of answer() (in example a), in other places, that is, you need to do other things with it other than print it out, then example a would be best. If all your going to do with the data is print it out then example b would be fine. This isn't really a OO related question though. OO is about encapsulation, not function construction. OO won't really make sense or seem justified until you get to higher levels of program construction. For question two, yes, you can use as many classes as you need to logically encapsulate your data and methods. However, it a pretty well followed standard that you only have one top level class per file. That top level class can have inner classes, and that's fine, but if you start including multiple top level classes in one java file that's quite unexpected in the Java development industry. For question three, you don't need to use "class.method". That's only if the method is static. If you're creating objects and calling non-static methods in objects then just the method name will do. If that doesn't make sense let me know and I can explain it more. One last note, in your second example, example b, you wouldn't need "return 0". You would just declare the method's return type 'void' and thus the return keyword is not needed in the method definition.
&gt; If you include the class in the header statements, you don't need to preface the method with the class name (unless you have the same method name in two classes and need to differentiate for some reason, but that would be really poor design). I am relatively comfortable with Java and have no idea what you're talking about here
You don't happen to run this on a single core system?
1. It depends on what you want to do. If you want to use the result, the first option. If you want to delegate some data to another function, the second. Say: * Calculate a price after taxes, then use it for something else (setting new balance, etc). `public Money processFinalPrice(Money basePrice)` * Log some actions. `public void log(String message)` 2. You should usually have one file per class (that is the nature of Java), but you can include Inner Classes into a class that requires it. Used, for example and in some cases, with Builder patterns. Having class `Person` and, inside it, class `Person.Builder`. 3. Because everything in Java is a class, you need to specify the class which method is being referenced **if** the class that calls the method is not the same, or the import is not static.
This may sound a bit harsh, OP, but take this advice to heart. The snake\_case vs lowerCamelCase argument is more of a Java convention than any other thing. This means, it's not bad _per se_ but it'll help you fit in.
**Question 1:** Check out [Command/Query](http://en.wikipedia.org/wiki/Command%E2%80%93query_separation) separation. *Ideally*, it is better to separate functions that return information about the object from functions that change the state of the object. **Question 2:** You can only have one *top-level* class per file in Java. You can have inner classes and anonymous inner classes inside the top-level class. If the nested class is intimately related to the top-level class and doesn't have much behavior itself, sure why not. Otherwise, it is better to make the nested class a separate top-level class. **Question 3:** You can call the method directly. Inside the class, for instance methods, calling `foo()` is the same as `this.foo()`. The same is true for static methods, calling `bar()` is the same as `MyClass.bar()`, inside the same class. If you're new to OO, you might want to take a bigger picture view of how to design classes and what objects are supposed to achieve, so you don't end up coding C in Java. I always like to recommend [this chapter](http://www.objectmentor.com/resources/articles/CoffeeMaker.pdf) to explain how to "think in OO".
Let's put it this way. The API designer that you have in mind will create precisely that horrible API that you'd like to patch through extension. Coincidentally, the same API designer will not reflect on the usefulness of `final`, and thus not use it. Win-win (albeit crappy API). The API designer that wants to use `final` for their API will reflect a lot on how to properly design APIs (and well-defined extension points / SPIs), such that you won't worry about `final`. Again, win-win (and an awesome API). Plus, in the latter case, the odd hacker will be kept from hacking, but that's not really a loss.
Libraries like CGLIB create proxies of concrete classes through inheritance, so that the proxy class can be used interchangeably for the proxied class.
Having sealed implementation have their behavior rely heavily on unsealed implementations is one way to fail to design your class in such a way that it can be effectively inherited. Calling unsealed members in a constructor is another example. Etc... (ie, allowing execution to flow into your subclass before the superclass is fully constructed.) Basically, a class is not an interface. It should still perform it's specific function. Inheritance allows you to extend its function, but you should not entirely replace it. Sealing appropriately large aims to prevent people from accidentally using classes as interfaces.
There are plenty of advanced tutorials with very high quality available for Java. Unfortunately, most of them are costly. As an example, check caveofprogramming.com (with their courses also available on Udemy.com)
&gt; the author had not the time to properly take extension into account. +1 for that. `final` can *always* be removed, *never* added - at least if backwards-compatibility is essential.
I think there are really two kinds of people discussing here: - the ones who "need to get shit done" - the ones who work on very general-purpose code (e.g. libraries, APIs) The first indeed doesn't really need to rely on things like `private` or `final`. Mostly because the code is more in flux and not designed for eternity, as opposed to the general-purpose code, which has heavy constraints such as backwards-compatibility, where `private` or `final` can be a really awesome tool to prevent breaking backwards-compatibiltiy already early on... And of course, the third kind of people discussing is always joining these discussions: the dogmatic ones (about `final` or non-`final`) :-)
Yeah well I did mean free.
Good point. I don't use Java 7 yet :)
nah the client and server is just one client and one end server. (Both with only one connection) although I might want to expand the server later on.
Nope, an I-7.
Just the other day I had to write a method that returns the number of times an object occurs in an arraylist, getFrequencyOf(T obj). Most people's solutions (this is a CS class) go something like this, which is perfectly fine: public int getFrequencyOf(T obj) { int count = 0; for (T t : list) if (obj.equals(t)) count++; return count; } Mine was this: public int getFrequencyOf(T obj) { return (int) list.stream().filter(e -&gt; obj.equals(e)).count(); } I find the one-liner to be easier and faster to comprehend at a glance, even if this is a trivial example of such. That and I wanted to impress the teacher or something. Maybe.
I'm on the same revision. After building, I ran it twice, and it printed the score summary, each time with different values for home and visitors. I just ran it a few seconds ago, and it failed with the exception above (jar hasn't changed between these times either). 
surely this would be something to the extent of making array list of connections with a connection initialization socket of some form returning with an empty socket for these?
It will definitely come to you with time, but from my experience I can tell you that playing around with functional programming languages (haskell is an example) will make you think in a more 'recursive' way. Some algorithms are clearly easier to remember in their recursive form, specially operations over trees, graphs, etc. Once you start playing with those, recursion will feel more natural.
I have a coworker who uses it for development and he says it works as expected.
[Designing Interfaces](http://www.amazon.com/gp/product/1449379702) by Jennifer Tidwell is a fantastic book full of full color illustrated examples of both good and bad ways to design your interfaces. On top of that, she does a great job of discussing the pros and cons of each widget type, layouts, visual ordering, etc. Definitely worth the read.
Did you try running it without attaching a debugger? I couldn't reproduce the exception in Eclipse, but it does throw if I run the JAR-file directly.
I am not sure i'd use recursion in java because of stack overflow (at least without being extremely careful) but this style is natural in languages such as haskell sum a list of numbers, if your list is empty obviously your answer is 0 if you have numbers in this list, add the head (x) to the sum of tail (xs) sum :: (Num a) =&gt; [a] -&gt; a sum [] = 0 sum (x:xs) = x + sum xs sum [1,2,3] picture this: 1 + sum [2,3] 1 + (2 + (sum [3])) 1 + (2 + (3 + (sum []))) 1 + (2 + (3 + 0)) 6 up until after we apply sum to [] and get 0 + is applied and we get 6 obviously this is a naive solution, but when I first began with haskell I remember learning by this example; recursion is ingrained from the very beginning when learning haskell and this style quickly becomes natural...afterward understanding recursion became easy everywhere for me. one last tip is, when in doubt write it out, by writing out recursive code like above, it helps your mental model to see how the function is applied and applied and applied again 
Set the JAVA_HOME and JRE_HOME variables on the environment. Somewhere in system settings. If you go in control panel and search for 'PATH' it will find the place where you set these variables
If I were you and starting with Spring, I would start with Spring Boot. Boot will give you all of the boilerplate that you need, and also also allow you to gradually move from out of the box to more complex as needed. Boot is basically what Spring Roo was supposed to be. Also,Speing 2.5 is definitely outdated and I would not recommend using any version of Spring (especially Spring MVC) less than 3. Spring 4.1 was released today and that's what the current version of Spring boot depends on so I would recommend starting there.
AOP is composition implemented through inheritance, only it is the interface that is being inherited, not behavior. This usage of inheritance is due to Java's weak metaprogramming capabilities, providing no other mechanism for call interception of preexisting classes.
Recursion is all about taking larger problems and breaking them down into smaller problems of the same type. You repeat this until you reach a "base case", essentially the smallest problem of that type with a trivial answer. This is the key to recursion. Recursion only makes sense if you have an end goal in mind, otherwise you're just endlessly repeating the same process over and over again without a result. Once you've reached the most trivial solution, you can then back up and take the solution from these smaller problems and use them to solve the larger problems. A simple example is calculating factorial. [Here's the recurrence relation.](http://upload.wikimedia.org/math/a/9/1/a91da51a80ac8291d8dbcc4cb77c0936.png) So what is our base case? The smallest factorial you can possibly have is 0! which is defined to be 1. &gt; 0! = 1 We can use this as part of the solution for 1!. &gt; 1! = 1 * ( 1 - 1 )! = 1 * 0! = 1 * 1 = 1 And so on... &gt; 2! = 2 * ( 2 - 1 )! = 2 * 1! = 2 * 1 = 2 &gt; 3! = 3 * ( 3 - 1 )! = 3 * 2! = 3 * 2 = 6 &gt; 4! = 4 * ( 4 - 1 )! = 4 * 3! = 4 * 6 = 24 &gt; ... &gt; n! = n * ( n - 1 )! Some sample code: int factorial( int x ) { /* Base case: 0! is always 1. */ if( x == 0 ) { return( 1 ); } /* Where x is not 0, we use recursion */ else { return( x * factorial( x - 1 ) ); } } 
I have shell scripts that set my environment variables for Java 6, 7 and 8. They modify JAVA_HOME, JDK_HOME and JRE_HOME and set the PATH so the right Java version is first. That allows me to easily switch between different version for software that requires it, while Java 8 remains my default Java.
Some things in the readme that could be improved: URL url = // ... me.submitContent(new LoggedInAccount.SubmissionBuilder(url, SUBREDDIT, TITLE); // Post a self-post String content = // ... me.submitContent(new LoggedInAccount.SubmissionBuilder(content, SUBREDDIT, TITLE); You are missing the second closing bracket. dependencies { compile file("path/to/JRAW-fat.jar") } Your whole thing assumes they are using a certain tool, personally I have never used this tool so this might as well be greek. Do you have the thing up where somebody with maven or ivy could find it? Your gradle file says sourceCompatibility = 1.8, if Java 8 is assumed, you should mention that requirement in the readme. For my final thought: That diagram of the model you have there — I must know what that was made in - it is beautiful :-). 
Are you asking for an in-depth code review, or just feedback on the public parts of the API?
Feedback in general. Optimization, public API, documentation, you name it.
Something like [this](https://github.com/thatJavaNerd/JRAW/commit/08b9f595202081c399ccb771b9bbed6466587715)? I used Gradle for this project, which essentially combines the directory structure/dependencies of Maven and the flexibility of Ant. I have to read up on Maven and how it handles dependencies so that I can put it up on Maven Central (using Sonatype OSS?) About the diagram - I created it in Illustrator, but the design is based off of IntelliJ's UML diagrammer.
Nice updates :-). I think Sonatype is what some projects use, I have never had anything to put up there - only used a couple things that weren't up there — because it gets annoying unfortunately the way maven works. It sets up a local repository and downloads to that. I think this is an issue with maven, not the end projects.
I don't have any questions in particular, just observing technological trends to cover on [our blog](http://blog.jooq.org). An XRebel post is on our roadmap for a while. Stage Monitor makes such a post even more interesting. As Jevgeni Kabanov (from ZeroTurnaround) always says: Competition proves that there is a market. I'm really curious how this type of product will work out in the near future.
OK. Well first off, I notice that the `LoggedInAccount` class seems to have far too many duties. I recognize that it's trying to emulate the "user experience", but you've actually ended up tightly-coupling identity with actions. It smells of the "God object" anti-pattern. Rather than telling you how this is wrong or that looks weird, let me show you how I personally would structure my own public API if I were writing one. RedditClient reddit = new RedditClient(MY_USER_AGENT); LoggedInAccount me = reddit.login("nuclearqtip", "IncorrectHorseFuelCellBinder"); LoggedInAccount myCousinVinny = reddit.login("vinny", "i hate passwords"); // Create a link submission object. Note that I'm not relying on // the number of arguments to decide what kind of submission // this is, but rather have named my builder differently. // Also in my version "SubmissionRequest" is immutable. SubmissionRequest content = new LinkSubmissionRequestBuilder() .setURL("http://zombo.com") .setSubreddit("/r/im14andthisisfunny") .setTitle("Lolz gaiz check dis out. Literally the best thing EVA") .build(); // Submit the article as vinny. Note that the return value // is just the final ID that refers to my submission, not the // content itself. SubmissionResult result = reddit.submitContent(myCousinVinny, content); // Now submit again as myself. This should fail... right? // You should talk about error handling in your // documentation BTW. I'm assuming exceptions, // but you could also have a "hasErrors" method // in the SubmissionResult object. try { reddit.submitContent(me, content); } catch (RedditException ex) { log.warn("Can't submit content", ex); } // Create a VoteRequest that couples which thing is being voted on // and in which direction... VoteRequest upvote = new SubmissionVoteRequestBuilder() .setSubmissionId(result.getId()) .setDirection(VoteDirection.UPVOTE) .build(); // Now for some good ol' fashioned vote manipulation. reddit.vote(me, upvote); reddit.vote(vinny, upvote); As you can see, I'm mostly just avoiding giving the "LoggedInAccount" too many responsibilities. Let the "Reddit" class worry about "Reddit" activities, and let the "LoggedInAccount" class worry about being an identity. Take this with a big grain of salt. Every programmer is different. I'm a big fan of immutable objects and separation of concerns, which is why I wrote it like this. Looks like a really good effort :)
It means you define a set of abstract protected methods for the subclass to implement and make everything else final.
I'm curious as well ;) It would be a honour for me to be mentioned on your blog.
It depends. If you log a lot you may see a performance increase using async loggers. I introduced log4j2 in my company - the changes were minimal, only some appender twiddling had to be thrown out (which I would have wanted anyway, since it coupled the code too strongly on the configuration), and we saw between 5 and 15% speedup - not bad for a minimal change in some non-core functionality.
Yes, I think the added value of loads of serial-only methods would have been much bigger than the rather rare use of parallelism in general...
Instead of LoggedInAccount.vote(Comment, VoteDirection) and LoggedInAccount.vote(Submission, VoteDirection), you should have just one method: LoggedInAccount.vote(Votable, VoteDirection) It's also a bit weird to me how you have this inheritence hierarchy: jraw.RedditObject &lt;= jraw.core.Thing &lt;= jraw.core.Account &lt;= jraw.LoggedInAccount I'm not sure what the point of the core subpackage is, because the hierarchy seems to start in the jraw package, dip in to the core package, and then pop back out again. Why is only the middle level of complexity stored there? It seems like it would make more sense to move JsonModel and RedditObject into the core package as well, since they seem even more "core" than what's already in there. Either that or just get rid of the subpackage entirely.
Great answer. To add to this, storing your own information, can also help in recovering the state which can be crucial in certain situations. Plain old readability is also a very good reason. Once you have tried debugging huge systems, that may have any number of thrown exceptions in the log, it is so much easier to find a custom exception. Try debugging an app container with 10 different deployments, written by 10 different programmers and your custom exception is now you best friend. 
Suppose one is going to convert a (positive) integer to string. The iterative way: public String convertIntegerToStringOnTheIterativeWay(int toBeConverted) { String convertedString = ""; int current = toBeConverted; while (current &gt; 9) { int reminder = current % 10; convertedString = reminder + convertedString; current /= 10; } return current + convertedString; } The same stuff recursively: private String convertIntegerToStringByRecursion(int integerToBeConverted) { if (integerToBeConverted &gt; 9) { int reminder = integerToBeConverted % 10; return convertIntegerToStringByRecursion(integerToBeConverted / 10) + reminder; } return "" + integerToBeConverted; } This is a quite simple example. If you enhance it (e.g. if you're going to take care of the minus sign), you'll find that with recursion, the method checks whether the param is less than 0 at every call, while with the other one, that's not necessary. Also, if the enhancement means adding e.g. grouping, then it's perhaps better if one has two recursive methods; one for getting the modulo 1000, and the other for converting the &lt;1000 numbers. With the loop, a simple flag might do. You might want to write similar code pairs, and you'll see that many loops might be converted to recursive methods, and vice versa. In some cases the loop might be the better choice, in some other cases the recursion. But as it was said by eugecm, if you have a language which defines the "variables" as immutable stores (e.g. erlang, haskell), then the recursion becomes much more important (try to find a way to rewrite the first version above with immutable variables and you'll see why). 
Just a style thing, but consider this: me.vote(submission, VoteDirection.UPVOTE); me.setSaved(submission, true); me.setHidden(submission, true); The first line has side-effects beyond the local model, and thus the name is an actual verb. In the other two, it looks like some *local* model modifications are made. I would suggest to rename them save and hide, keeping the extra flag. 
You write your own exception to increase the readbility of your code when you think you need to. In general, I throw RuntimeExceptions but when I can do something about the exception or I want to handle the exception differently then I subclass RuntimeException and add another catch clause where I can deal with it. I almost never use checked exceptions.
Initial thought - do you really need all those variables for mon-fri? They could be classed as weekday, weekdayOvertime (&lt;=3), weekdayOvertimeExtra (4+). These are all paid at the same rate so seems a little odd to split them up, as if I did 4 hours on Monday, and then 6 on Friday, I get paid the same for them. Also, doubles for money is just a big nono - as has been said. From a style point of view, you might want to split your calculator class into two classes - one to handle the swing stuff, and one for the actual logic. Then you could write some unit tests to test the logic class. Just my views, but points to consider at least
Checked exceptions are very misunderstood, and thus widely hated or completely ignored. In concept, they are good. In practice there are good and bad applications of them. Checked exceptions are exceptions you have to be able to handle because they are caused by something out of the programmers control. For example, opening a file. If the file does not exist (and it may not exist.) You will receive a FileNotFoundException. Do not simply rethrow checked exception, or inherit RuntimeException (which is just as careless.) Your application is inherently unstable by doing so. What should you do? I typically log the error, and then provide a default behavior (Null object design pattern is incredibly helpful here.) Where do I stop propagating the exception and log it, providing a default behavior? When it reaches a level of abstraction where its specific function is no longer relevant to the implementation. The burden is passed on to the caller of the interface, or it is passed on to no one and crashes the entire application - when in reality it might just mean your cursor's click animation won't function - which is perfectly alright... When you create an exception class, ask yourself if is 100% avoidable. If not, it should be a checked exception. Most aren't, or are caused by factors that aren't. Most of your exception will be checked. To answer OP's question, the name of the exception should be as specific as it possibly can to the level of abstraction currently provided. For example, if you have an IDataSourceFactory (ie, interface to a concrete implementation) the create member may throw a DataSourceConstructionException. DataSourceConstructionException should have an argument for it's cause. If you were constructing a FileDataSourceFactory, you would throw a checked exception DataSourceConstructionException, with the cause being FileNotFoundException. Should DataSourceConstructionException be checked? Yes, because there are numerous reasons a data source may fail to be constructed. It is out of the programmers hand the condition of the network connection, or the existence of a filesystem. Using checked exceptions is a lot more difficult. You don't get to throw things away. Thus I recommend them for more experienced developers. If they aren't used properly you may enter a new hell. If they're used properly you will see the benefits right away. Notice incredible stability in your code as well.
The java spec specifically states that there can be only one public class per source file.
Just a random tip: at a quick glance you could fix the legend on your class diagram - the abstract classes and normal classes have the same key.
Some interfaces like Serializable, yes. In general, no. A marker interface is just like a regular interface. Marker interfaces use the type system to tag classes so you can pick them up using `instanceof`. Marker interfaces are more or less obsolete these days in favor of annotations.
They're not really needed anymore but they were used in the past before we had annotations. For compatibility reasons they still exist but they're mostly superseded by annotations now.
Thanks, appreciate it a lot, seem to be exactly what i was looking for.
I would in fact argue to *remove* the extra flag. me.save(submission); me.unsave(submission); me.hide(submission); me.unhide(submission); Those are a lot more expressive than a boolean argument.
Abstract classes are green in the top left corner of the "C" circle.
Well, with Java 8, interfaces are no longer just markers - for example, Cloneable could *now* actually *add* the clone() method, as opposed to it being in Object and just hidden. So annotations are largely replacing what marker interfaces were (although using an annotation is different than using an interface), but interfaces are still awfully handy thanks to default methods.
Ahh I see that. Perhaps it could be a little clearer.
&gt; Checked exceptions are exceptions you have to be able to handle because they are caused by something out of the programmers control. Agreed. Be sure to define programmer as everyone who works with the code (that includes code calling your code - failure to supply valid arguments should result in unchecked exceptions). &gt; When you create an exception class, ask yourself if is 100% avoidable. If not, it should be a checked exception. There are different types of applications. End user facing applications (that includes web apps) will want to continue running no matter what, while e.g. statistical processing applications should stop as soon as an error is detected instead of going on with wrong data. Asking *everyone* to use checked exceptions throws the baby out with the bathwater.
**Repository** Don't check in build files, even if they are auto-generated source code (build/generated...) **Commits:** As a general developer commit write better commit messages: &gt; Basic read access to wiki pages seems to mess round with endpoints and other stuff. Maybe it's related (it doesn't appear to be) But lots of small commits with useful content on what's changed is more useful when looking at the change list. &gt; Updates thanks to /u/zzing File an issue and fix the issue or just write what is changed. Again, split it up into different commits if you can't clearly write the change in one sentence. &gt; Update README.md I know what file you've changed, I can read the diff. "Reformatted README and added feature list" **Code:** &gt; endpoints.json.md5 Not quite sure what this is - looks like a unique key or something. If it's a per user key it should not be here. If it's the signature of the json file, I would expected it to be generated somehow. &gt; Contribution This is ugly. Use instanceof and make Submission extend/implement Contribution. Contribution might implement Votable, I don't know. public Submission submitContent(SubmissionBuilder b, Captcha captcha, String captchaAttempt) throws NetworkException, ApiException { Too long. Wrap lines at some reasonable length (if you can't read the GitHub without scrolling right, it's too long) - 120 is a fairly standard value &gt; src / main / java / net / dean / jraw / RedditObjectParser.java // Instantiate a generic Thing Pointless comment // Holy exceptions Batman! e.printStackTrace(); Funny, but not helpful. Also, consider using logging rather than printing to standard error. **Javadoc** You've fallen for the curse that many falls for. Boilerplate Javadoc just serves to make files longer: /** * Gets the constant error string * @return The constant */ public String getConstant() I submit that if you called it 'getConstantError()` that Javadoc would be utterly pointless. As it is, because it's in a class called 'ApiException` it's still fairly obvious what the constant is. Actually, while I'm here, it's not a constant. It's an error code. Constants have a specific meaning in programming. The very fact that the constant can differ depending on what the exception is means it's not constant. The fact that the error code was populated from a constant value somewhere is irrelevant. Oh and why is that list of constants not an Enum. I might try and find some more stuff if I have time...
At least you should learn some keyboard shortcuts so you don't need to click the buttons ;)
I disagree with just throwing in lombok, especially for something that is intended to be a 3rd party library. First, lombok buys you very little in general. My IDE auto generates most of the stuff that lombok allows me to annotate away. It isn't like a getter, setter, or logger are all that complex of concepts. Next, Lombok deals with java bytecode. That is fine, but if this is a fly by night project that never gets updated, then I'll probably be cursing it when inevitably Java 9 is release, lombok is updated for compatibility, but this library depends on the crusty old version of lombok which may or may not use the currently blessed API of lombok. The end result is that some stupid 3rd party application keeps me from moving up a major version of java because it used a bytecode manipulation library which makes things slightly nicer. And yes, I'm speaking from experience, this EXACT thing has happened to our project recently, and with lombok (It wasn't always Java 7 compatible). Sure, if you are working on the end product, feel free to throw in whatever library you want. However, if you are working on a 3rd party library, you should keep your dependencies as minimal as possible. Nothing is worse than a 3rd party library using crusty old dependencies.
I do use a lot of shortcuts, but you can't shortcut *everything* as far as I know, dealing with libraries and build configurations etc.
of course there are the tutorials by Oracle online: http://docs.oracle.com/javase/tutorial/
Hello Matt, to gain a strong basis of Java programming and programming in general you need to gain a understanding of: * The primitives in java. (Float, Int, Char, etc..) * Data structures used in Programming in general and how to use them in Java. Look at how to use an Array, List (LinkedList, ArrayList), HashTable, Map, etc.. Check out Java's API for ArrayList for example and try importing it and using it in a project. * Learning how to make and use Threads. * Learning the scope of variables and how to limit and allow access for certain classes to have access to variables in other classes (Using getter, setter methods) * Sorting Algorithms, Searching Algorithms, Learning how to make your own type of Data Structure (i.e. Making your own LinkedList, or Heap class and using inner classes to handle the nodes). * Learning how to make your own comparator methods to use on Data Structures * Learning how to read in arguments, System I/O, pipelining. * Learning how to manipulate pixels based on X &amp; Y coordinates in a GUI. Graphics, Project Ideas: 1. Make a Binary Search Tree and populate it with 20-100 random people (these "people" should be Objects that contain, a Name and an Age). Use the Age to organize the Binary Search Tree. Then create methods to access, remove, add to the Binary Search Tree effectively. 2. Use threads and thread safety mechanics (Locks, Synchronization) to create a program that simulates a Worker and Consumer relationship. In this project, the Worker and Consumer should operate on different threads and should access the same variable which either says "Empty" or "Full", when it is "Empty" the worker should populate the variable by assigning it the value "Full" and when it is full the consumer should depopulate the variable by assigning it the value "Empty" 3. Read in/Write to a file. 4. Implement Quicksort, MergeSort, InsertionSort on an array of numbers. **Unfortunately none of these projects are "Cool" in that they let you create some cool marketable program but they should help you gain a very strong basic grasp of Java and be challenging enough that you need to critically think about how to solve them**
Ah. Well you can use ALT-codes but that's pesky indeed.
Subclassed exceptions, done well, help communicate information in the name of the exception itself, and possibly indicates additional exception-specific information carried about the error. Generally the name of the new exception should provide a general bucket to help direct as user or debugger as to the nature of the error besides "error occurred". Network, disk storage, timeout, locked resource, invalid argument / input, etc... Subclass RuntimeException if you DO NOT want the exception to be a "checked" exception forcing a try...catch, or simply extend Exception to make it a normal checked exception. I recommend RuntimeException over checked exceptions. If java had provided more concise and flexible syntactic sugar for exceptions other that the verbose and space-wasting try catch, then checked exceptions wouldn't have been as much an imposition. 
1. Disabling display scaling just shows it the normal DPI size, which still makes everything a bit too small on a 15" 1920x1080, right? 2. I read that doesn't work too well, but I'll give it a shot tonight and let you know. Thank you!
/u/JoTheKhan/ has summed it up pretty nicely. All I will ask is what IDE do you use to program (if any)? I use Eclipse and have done so for years, and I find it really useful. I would recommend using it if you don't already! It's just the small things of an IDE that make coding life so much easier (and often more enjoyable). I'm not saying to take shortcuts - generally I'd recommend the opposite. But, for example, the software can be really useful in picking up bugs (mistakes you've made) for you while you're coding. As a new programmer, mistakes are generally commonly made, so you'd rather pick up on them early so that later on when your code may be more complicated, it could be much more time consuming to fix the code. It is important to always find the reasons behind any mistakes you make because you'll learn to not make them quicker. Same with the function of algorithms - you want to learn how a piece of code does what it does, and not simply be satisfied once it 'works'. Also self teaching over the Internet is perfect for Java, as all the information you need is out there. If you ever need to ask, http://stackoverflow.com/ is a great website. Good luck!
1. That's possible. I'm running that resolution, but on a 24" desktop display and it's fantastic. I can see where it might be a tad too small on a 15" display, but they way I use IntelliJ, it might not matter. I bump the font size up a couple of points (using a custom font I like) and turn off most all the toolbars. It's just a multi-window code editor for me. The larger font size combined with the higher resolution makes for a crystal clear coding environment. 2. Was just something I had bookmarked back with Mac retina displays came out. It may not do anything at this point, but is at least worth a shot to see if it helps your issue.
This is true, some time it just run fine, and finishes, some time it take long time and keep running and some time it crash with this error.
Sorry I was being imprecise: the application should not stop before writing as much information about the error as possible. This is where some layers on the call chain can add information pertaining to their view of the current operation, which can be nicely done with exceptions. If the application just `System.exit(1)`ed, finding the error would be much harder.
- elasticsearch is not really a DB per say. Great for searches and aggregation, but if you want any sort of transactional-like ability it may be stretching it. - MongoDB has scalability issues, it's approach to sharding is really primitive. May be good for smaller datasets, but that's it IMHO. - Hazelcast: it's more of an in-memory Map with a computing grid - OrientDB: tiny community. We tried it a while ago, but aborted it once we switched on transactions and it started throwing exceptions everwhere. - Cassandra: we use it in production every day. Very well designed and scales to really large data sets. Sharding is a magnitute better designed than MongoDB (they're not even in the same ballpark). It has some gotchas too, but overall it is the best option. I would also consider Redis (if you can fit all your data in memory) or Aerospike (a newcomer that looks very promising). We use Cassandra in integration tests all the time. It has an embedded mode too (if I recall) but we just have a server running in the background all the time. Our Cucumber BDDs clean it up before every Scenario, very simple to integrate the two of them. 
&gt; Hazelcast Yeah, but it has a MapStore interface which would be nice if a local db would work. But it does not... &gt; elasticsearch is not really a DB per say. But still it would work good in my case if it had secure internode communication :) Thanks for orientdb and cassandra feedback! For redis (and aerospike): can I easily use it from java? And although I think my data fits into RAM redis will still make it persistent in someway? E.g. for a full cluster restart this is important
One more thing you need to know about learning to program. **It takes time to learn.** Don't be discouraged when you fail to understand something, just carefully read documentation and try to find as examples as possible about related topic. Happy coding.
I did this course last year and it was great. The first lesson feels maths heavy for people without a maths background but it actually gets easier after this. Starting the 2nd one in October. 
Hmm, I should get an IntelliJ cheat sheet and learn all the shortcuts. I'm pretty good with Eclipse but I'd like to get better with IntelliJ.
they are both trivial to use from Java. For Java, use Jedis. For Aerospike, it has a native client (find it on their website. it's listed on Maven Central as well)
They also called me in the middle of the night asking me if I had gotten the trial running... &gt;.&lt;
Forgot to mention, Redis can be persistent as well (it has 2 modes of disk persistence, which combined together give you very good level persistence). It's shortcoming is lack of sharding of any sort, so it's really only a good solution if all your data fits into RAM (then it is faster than anything else on the market) or you can shard manually yourself across multiple instances.
Off the top of my head, in any circumstance you'd need an ephemeral file. Indices, for instance, that are recreated at application init. I enjoy keeping as much as I can inside of the JVM. And (purely speculation on my part) but I'd wager this might be faster access than going to the native file system since the c &lt;-&gt; java barrier is expensive.
Here is some pseudo code to get you started: JTextField[] textFields = new JTextField[7]; for(int i = 0; i &lt; textFields.length; i++){ textFields[i] = new JTextField(""); } Also (in case you didn't know), if you don't know how many items you want to put in your array beforehand, use an ArrayList instead.
Well give that memory is much faster than disk, it should be faster if you have a file in memory instead of having to read it off the disk 
The announcement mentions testing. I actually had a project about 6 months ago that would have really benefited from this but did not know it existed. https://plus.google.com/+googleguava/posts/a3idqfdnpzC
If you check out the `dir` parameter for [`/api/vote`](http://www.reddit.com/dev/api#POST_api_vote), you see that there are three possible values: upvote (1), downvote (-1), and no vote (0). At first I had been doing what you said, the upvote/downvote methods, but there is no way a boolean can be represented as anything other than true or false (unless you used the Boolean class, then it could be null), so I went ahead with the VoteDirection enum to make it crystal clear what would happen.
Thanks for your feedback and sorry for the late reply, my school blocks Reddit. **Commits** &gt;&gt;Basic read access to wiki pages &gt;seems to mess round with endpoints and other stuff. Maybe it's related (it doesn't appear to be) But lots of small commits with useful content on what's changed is more useful when looking at the change list. The reason ENDPOINTS.md is modified so much is that the `update` task in the endpoints subproject is run before (mostly) every commit. This task generates the file, which includes links to the source code (down to the line number) where the method that implements each endpoint is located. One additional line to the top of `RedditClient` could throw off the whole file. **Code** &gt;&gt;endpoints.json.md5 &gt;Not quite sure what this is - looks like a unique key or something. If it's a per user key it should not be here. If it's the signature of the json file, I would expected it to be generated somehow. This file is updated to the value of the MD5 of endpoints.json, which you could have gathered from taking a glance at the [build script](https://github.com/thatJavaNerd/JRAW/blob/08b9f595202081c399ccb771b9bbed6466587715/build.gradle#L49-L61) and [related classes](https://github.com/thatJavaNerd/JRAW/tree/master/endpoints/src/main/java/net/dean/jraw/endpoints). However it's not well documented, so it's understandable why you have questions about it. &gt;&gt;Contribution &gt;This is ugly. Use instanceof and make Submission extend/implement Contribution. Contribution might implement Votable, I don't know. You are absolutely right. Thanks for the suggestion &gt;Also, consider using logging rather than printing to standard error. I do use logging (not for that specific instance, and that will be changed soon). See [here](https://github.com/thatJavaNerd/JRAW/blob/08b9f595202081c399ccb771b9bbed6466587715/build.gradle#L14) and [here](https://github.com/thatJavaNerd/JRAW/blob/08b9f595202081c399ccb771b9bbed6466587715/src/main/java/net/dean/jraw/JrawUtils.java#L21-L29) &gt;Oh and why is that list of constants not an Enum. Because I wanted ApiException to be flexible enough to support [any value the API can throw at the client](https://github.com/reddit/reddit/blob/88f0fd156d19c965099a3f506b571d1bb3c44332/r2/r2/lib/errors.py)
I would avoid any advice that comes in the form of a laundry list that you're supposed to survey and "learn". A large part of becoming a good programmer has nothing to do with coding. It's about learning to solve problems systematically with a computer. The fact that we use C or Java or Python as a means to that end is incidental. So, regardless of what you get from these other posts, I would practice the following things if i were you: 1. Define the problem 2. Develop requirements that, once satisfied, will solve the problem 3. Develop a plan to implement the requirements 4. Constructing software to meet the requirements using the plan as a guide Now I'm not saying you need to write a full specification document for every program you write, but do these things even if only in your head or on scrap paper. A good plan is something that you can go back to when you feel yourself losing your way. They can also help you avoid wasting lots of time. Beyond that, just understand that you will learn things iteratively and that only practice will help you learn. You will start out using lists when you should use a map, and then you will use a tree-map when you should use a hash-map, and then you will use the right map class, but with the wrong initial sizing parameters or access patterns -- and each time you will gain a deeper understanding of how/why things are done. Believe it or not, the secret is -- you will never be done. You will never "know java" or "know programming". But you will get better at it and hopefully along the way you will solve a few problems (and maybe even make some money). 
I was going to suggest this is as a primary reason. Testing anything involving the use of files would be made significantly easier with this. 
32 bit only allows for 2 gbs of ram to be usseable by the computer. So no, you need 64 bit.
I figured as much. Switching to 64 bit won't break anything, yeah?
x86 just denotes 32-bit architecture. There is no such thing as 86bit java or windows. On the java downloads page if you're looking at the x86 version it is the 32-bit version. Edit: If you want java 8 (64-bit) then go [here](http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html) and download the Windows x64 (jre-8u20-windows-x64.exe) It's the link second from the bottom 
Okay. So if I go into system info and it says 64bit processor, do I follow the x86 denoting that I'm 32, or do I follow the sys info?
x86 would denote a 32 bit system, but you say you are 64. Before anything else, Visit this page - http://windows.microsoft.com/en-US/windows/which-operating-system This will tell you the version of Windows you are running, and provide you with links below that will show you how to tell if it is 32bit or 64bit
If you've got 8GB ram you've most certainly got 64-bit windows, and so you can go ahead and get 64-bit java. You need to be careful at what you're looking at, it can get kinda confusing. x86 = 32-bit and x64 = 64-bit
You need to install a 64 bit version of java to use more ram. You can do this by uninstalling all current versions of java and then downloading the "windows x64" .exe version from [here](http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html). You can download from the normal java.com site, but for me it only provides 32 bit downloads so for 64 bit you need to use the link I gave you.
Yeah it really does get kind of confusing. Thanks for the info.
Yeah thats what I did! The process directed me to sys info which insists I'm 64 bit. Another user in this thread said if I have 8 gigs of ram I most definitely have 64 bit windows.
Ok, it may be a a matter of taste. But I still think that using a specific verb (In this case, unvote()) would be simpler, and also convey the fact you should call that to cancel a previous vote. 
If you were running a 32 bit browser, the default Java installation may have been 32 bit. Go to their page that lists all versions (http://www.java.com/en/download/manual.jsp) and click on the 64 bit Windows offline installer
That actually makes a lot of sense. I'm still a relatively new to programming in general and the APCS teacher I had taught us declaring/initializing at the top because his background was in C. I've never written anything large enough that it made a difference and I was really wondering if it was crucial that I break the habit. Thanks. 
you wont get much help on this question here. This forum is more for software developers. There are minecraft forums for server ops and threads that detail these settings and how to work with the server engine. I would suggest googling for those. 
What java &lt;-&gt; c barrier do you speak of? Do you mean kernel system calls?
I believe he's talking about the invocation of [native methods]( http://en.wikipedia.org/wiki/Java_Native_Interface).
No, the 32-bit is unsigned so up to 4GB, though windows won't give you quite all that. But nonetheless that's not the immediate issue.
I doubt it. 
I don't have time just now to fully review your cod, but I noticed one basic mistake right off - you shouldn't be setting the seed on your SecureRandom instance: that's taken care of internally (at least for most uses).
Yeah don't do that. Put them as close to where they are needed as possible. Also, final is your friend. Use it as often as possible.
How do I go to my directory?
1. Right click on your project in netbeans. 2. Find where it says project folder. 3. Use windows explorer(winodws), finder(osx) or whatever you use to go to the folder. directory = folder if that was causing confusion.
Thanks for sharing. We are doing a bunch of rest api's and this may come in handy for out integration tests.
OK, so I've got an executable JAR file, but when i click on it, it won't open. Any ideas?
http://stackoverflow.com/questions/11056871/netbeans-made-jar-file-wont-work
Bits are expressed as a power of two (2^n), so 84 doesn't even exist. What you are referring to is, as others have told you, 64 bit. **In order to download a Java version for 64 bit Windows**, you can [click here](http://download.oracle.com/otn-pub/java/jdk/8u20-b26/jre-8u20-windows-x64.exe) and it will attempt to download Java 8 Update 20. If the previous link doesn't work (or you don't trust direct sources), you can visit [this page](http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html) and look for the version that pleases you the most. For reference, and this may sound confusing, x86 is the most common 32-bit architecture nowadays. The fact that you can run 32-bit programs on a 64-bit Operating System, is because the architecture that most 64-bit desktop CPUs have is x86_64. This is actually an extension of the original x86, and not a total replacement.
Incredibly accurate because java can run on many different platforms and any software engineer who would make such a statement is a poor enough coder that they would be trying to debug their code on all of them.
repaint() should not be invoked from paint methods. Maybe use javax.swing.Timer to call repaint every nn milliseconds
The HotSpot JVM is written mostly in C++, which is multiplatform _per se_, but when it comes to very low-level, multiplatform development can get messy and have different workings on different Operating Systems. Luckily, unless you use really, really obscure features or IO, debugging for other platforms is more like a double check than a chore. It, actually, gets more problematic on the user's end rather than on the developers: each user has a different JVM version (or even different JVM all-together) which may cause trouble. The answer to this issue is, usually, bundling a JVM with your application.
Don't know if Levenshtein is a solid way of measuring entropy. You're also measuring the entropy of the wrong thing - thats the encoded format, not the raw numbers used for that key. And since the encoding is going to have a consistent structure...its going to have lots of repeating bytes. (I tried piping it to openssl, but couldn't figure out the format). 
I don't think the JVM uses JNI for IO, especially the new NIO packages which are highly optimized. Probably makes use of "intrinsic" code. 
(you don't need lines 16 to 20). you are comparing DER encoded string values of private keys, not the entropy. since your DSA key has a 160 bit private key (x), and you convert it to a hex string (40 characters), it is right that that the L-distance is never above 40! a more readable hex converter: private static String getHexString(byte[] bytes) { StringBuilder sb = new StringBuilder(); for(byte b: bytes) sb.append(String.format("%02x", b)); return sb.toString(); } 
Yeah, I use eclipse, i really like it. I'm really not fully sure what the best way is to learn for me, its so far voice through YouTube, or any voice. I'd rather listen then read. I've probably learnt the most from the new bostons videos. But seriously, they move too fast, it doesnt give me enough time to focus on one piece if work. Like each video is something new. If i could add someone on skype or something and im to each other for a bit of quick help if you know what i mean, that would be great. Thanks!
This was the case when I developed in Java for J2ME mobile phones. Each phone manufacturer had it's own VM implementation that was slightly different from others. This may probably be true for today's Android development.
Open Source? Simple?
Note that marker interfaces have different uses than annotations. Unfortunately, java does not allow to specify type intersections, so if you e.g. want a `RandomAccess` `List` you have to define a new interface that extends both `RandomAccess` and `List`, leading to a possible combinatorial explosion. Even then, ArrayList would not implement our `RandomAccessList` interface: public interface RandomAccessList&lt;E&gt; extends RandomAccess, List&lt;E&gt; {} … RandomAccessList&lt;String&gt; x = new ArrayList&lt;&gt;(); // fails Perhaps this is something we can get in a future version of Java. Kotlin and Ceylon both allow variations of this. From the top of my head, the following marker interfaces are in the standard library: * Cloneable: Yes, this has been a design mistake, as its creators have long since admitted. As /u/josephottinger correctly states, Cloneable could now actually add a default clone() method. Even so, many OO practioners agree that sidestepping the constructor by cloning an object is usually a bad idea. * Serializable: This one actually has the JVM generate code, so it's expressly a case annotations were not designed for. * RandomAccess: Some `Collections` methods will go a different path based on whether a collection implements this interface, so it's a good idea to keep in mind. Note that because of the aforementioned problem, this interface does not pull as much weight as it could, but here's hoping for some future java version that allows this, removing another runtime type lookup.
Will you ever have to do any web development? If the answer to that question is yes, then yes, you should learn it. Along with CSS3 and JavaScript. After you've gotten used to JavaScript go ahead and start delving into some JavaScript frameworks, popular ones today are AngularJS, KnockoutJS, ReactJS, to name a few.
OrientDB has a smaller community than MongoDB and Cassandra, but has some interesting features against the others. The "started throwing exceptions everywhere" problem the user @jfurmankiewicz reported is related to the Optimistic approach with transactions using MVCC (http://www.orientechnologies.com/docs/last/orientdb.wiki/Transactions.html) that must managed by using a retry approach. Like in CAS architectures. OrientDB has many big enterprise companies and startups in production (look at the web site and success stories). I think that choosing the DBMS by popularity means go back 10 years ago when everybody bought Oracle or IBM because nobody get fired for this choice. My advice is to pick a few from the list based on what you need and try them. PS: I'm the OrientDB author 
I totally disagree with your suggestion. Being here for quite some time I constantly see posts of BlueJ or DrJava users who can not comprehend the cryptic (and very often misleading) error messages that either of these IDEs produce. Both IDEs do not encourage proper coding style. Start either with nothing but Notepad(++) or directly with a proper, industrial standard IDE like Eclipse or IntelliJ. Sure, the learning curve is higher, but once used to the tools necessary one can easier adapt to any environment. (Switching from Eclipse to IntelliJ and back is fairly easy)
Are you saying that you need to know it at your job? Doesn't that answer your own question? HTML is also quite easy to learn as far as languages go. There are few elements and few rules. If you know Java, learning HTML should be a breeze for you.
HTML is easy to learn and there are tons of examples. Being able to quickly code up beautiful responsive applications using HTML along with CSS and JS takes a bit of experience. If you have the attitude that you don't want to learn something you won't use, then how will you ever know what you don't know? Deciding to stick to back end development is one thing, but an aversion to learning in tech seems like a quick way to become bored or marginalized. 
Well, to properly awnser your question we need to know what your job is? Since you are posting in /r/java you mostlikely do Java Programming. Java can also be used in online environments and pretty much the most basic online language is HTML(5). So my advice is: Yes look into it. And as many already pointed out HMTL is really not complicated. Basically it boils down to giving text a meaning for computers.
Okay thanks for the reply! Im total new to encryption in general, so i dont even know how to test thing properly. Im glad that my code actually works, i was afraid that my laptop has serious problems. I hope you dont mind me asking some other things: 1) is this the right subreddit for this? Im sure i will have other questns while learning and this was the best sub ive found. Also, should i continue using this thread, or should i start a new one any time i have a problem? I was more the kind of silent lurker this far , so i really dont know. 2) for the beginning, i want a simple chat program to be able to communicate encrypted. Is there any major flow in this: the server has a hardcoded private key, the client has the public key of the server hardcoded. To my understanding, you can only decrypt with the private key. So lets say the server knows no client. The client wants to register. So the client encrypts the following with the public key: his ip adress + his generated public key. This gets transmitted to the server. As i understand it, only the server will be able to read this, and since now the server has the adress and the public key of the new client, they can now talk encrypted if they encrypt with the corresponding public key of the other. If that is possible, i want to avoid any public CA to sign my things, because i want the program to be able to work for example in LAN without relying on thing of the internet. 3) do you have any resources to share regarding 'best practices' in encryption? I seem to be too stupid to find information about that. 4) are the implemented encryption algorithms ( by Sun) regarded 'safe'? They really dont need to be fast, just secure. Did any audit happen for example? As you can see, i couldnt even verify my own stuff because, well, im a beginner :o Thanks for your help!
HTML is a good thing to know, regardless of your job description - and I think your attitude may be a bit short sighted. As a programmer, you need to be learning pretty consistently to stay relevant - otherwise you'll fall into a legacy niche. As far as HTML5 vs other stuff right now, yeah - it's a pretty solid option as more and more stuff goes online. HTML (for better or worse) is likely going to be one of the primary GUI languages. Of course, HTML is just a document layout and is pretty damn simple, then you have - really the question should be do you learn how to leverage HTML5 features with javascript, which is definitely a yes as there is no legitimate contender for client side work. Through learning those, you'll pretty quickly get enough info to at least use CSS to make HTML look decent.
Couldn't the same thing be accomplished with JavaFX 8?
Learning is for suckers.
/r/java turned me on to Vaadin and it's been a great transition to web apps.
Yea, I never made a huge effort to learn HTML. It's really easy compared to just about anything else.
All good points. Just want to add learning how to make nice responsive sites is way easier than learning something like Java. It takes a little time, but not nearly as much as more advanced programming. It's also very rewarding because you can be up and running making modern looking stuff pretty quickly. JavaScript is definitely the hardest part. If you know Java or shouldn't be too hard though.
Web is by far the fastest growing sector in tech. It also isn't too hard to learn. I honestly recommend everyone know it.
Have written a bash script to run Java jars: RunCommonJavaJar --help RunCommonJavaJar: This shell is a generic shell wrapper to run Java '*.jar' files. RunCommonJavaJar: Normal users should not invoke it directly but through a link RunCommonJavaJar: to it, with the same name (without extension) as the Java jar RunCommonJavaJar: file, in '$COMMON_JAVA_JARS_DIR', that it should run. RunCommonJavaJar: RunCommonJavaJar: When run by root, 'RunCommonJavaJar' will check/update the RunCommonJavaJar: scripts/links available to run common Java '*.jar' files. RunCommonJavaJar: RunCommonJavaJar: Current scripts/links: RunCommonJavaJar: 'ClassifyTextFiles.jar': 'ClassifyTextFiles -&gt; RunCommonJavaJar'. RunCommonJavaJar: 'DetectCharSet.jar': 'DetectCharSet -&gt; RunCommonJavaJar'. RunCommonJavaJar: 'FindTextInDocuments.jar': 'FindTextInDocuments -&gt; RunCommonJavaJar'. RunCommonJavaJar: 'JavaSources.jar': 'JavaSources -&gt; RunCommonJavaJar'. RunCommonJavaJar: 'Java_XChartDemo.jar': 'Java_XChartDemo -&gt; RunCommonJavaJar'. RunCommonJavaJar: 'PickAndRun.jar': 'PickAndRun -&gt; RunCommonJavaJar'. RunCommonJavaJar: 'PickDirAndRun.jar': 'PickDirAndRun -&gt; RunCommonJavaJar'. RunCommonJavaJar: 'SearchAndPlayVideoFiles.jar': 'SearchAndPlayVideoFiles -&gt; RunCommonJavaJar'. RunCommonJavaJar: 'ShowVideoItemInfo.jar': 'ShowVideoItemInfo -&gt; RunCommonJavaJar'. 
Hardcoded keys are bad due to the fact that you can't revoke them later on in case of security problems. However, using Java KeyStores are the way to go without using an external CA (you'd still want to make your own CA to sign your own keys with). In regards to best practices, the general idea of how you go about encrypting communication is using DH key exchange to securely agree on a shared secret key to do AES symmetric crypto on. Asynchronous messaging would use RSA to encode the AES key used in a message (see PKCS#7 for a standardised format on how this is done).
You might as well. You can probably do it in a day. http://www.html5rocks.com/en/
System.gc() doesn't really do much though. It doesn't guarantee a garbage collection at all. That is strange
See interleaving: https://github.com/poetix/protonpack/blob/master/src/test/java/com/codepoetics/protonpack/InterleaveTest.java and merging: https://github.com/poetix/protonpack/blob/master/src/test/java/com/codepoetics/protonpack/MergeTest.java
It's probably easier to have the first name and last name in seperate variables, then make use of substrings. Take the first letter of each variable via a substring, and change it to upper case String name = "sam"; name = name.substring(0,1).toUpperCase() + name.substring(1,name.length());
Yea but we haven't gotten in to substrings yet and I don't want to start doing things that haven't been gone over in class. So I am trying to accomplish this with only what we have gone over. I have recreated the Variables to nameFirst and nameLast and asked the person for each plugging each into its corresponding variables. It would seem that really all that would be left is something like a nameFirst=.toUpperCase(1) or something of that nature I am spitballing as I am unsure of how to accomplish that uppercase portion.
I'd make a method that cuts up whatever they enter using the spaces and puts everything into an array. For example, they enter jimmy mark henderson. I'd make the method to enter jimmy into array[0], mark into array[1] and so on and so on, then just iterate over the array making each name upper case with something like name.substring(0,1).toUpperCase()
We also have not gotten in to arrays. We have just finished chapter 2 so it needs to be very simple no subsets no arrays is there not a way to say charAT.toUpperCase(1); where the 1 in the parentheses is the first letter in the name since it starts at 0 or would it be 0.
I would go watch a YouTube video on substrings and use that, it really is the simplest way of capitalizing the first letter of a string.
Think about the problem at hand, and see if you can break it down into pieces that you understand. Your solution doesn't have to be pretty, as long as it works. A few things to concider are, *"Can I get the user to input this correct without a method to correct for it?" "Can this be enforced easily?"* If not, then *"Are there any basic tools for String manipulation I can use?"* (there are). Should you decide that this is indeed what you want to do (for practice, or as a design choise, or any other reason), then start looking at some of the methods for String manipulation. A basic one is the toUpperCase() method. Good luck, and let me know if you need more help.
Unfortunately you're not going to be able to do this without using either substrings or arrays.
While I understand and appreciate the suggestions of substrings and arrays. It is again outside of the realm of what we have covered in school so would not make sense to use as I am sure the professor would state that I am using material we have no gone over if that makes sense.
 import java.util.Scanner; import javax.swing.JOptionPane; public class WordGame { public static void main(String[] args) { String nameFirst; String nameLast; String age; String city; String college; String profession; String animal; String petName; nameFirst = JOptionPane .showInputDialog("Please enter in your first name "); nameLast = JOptionPane .showInputDialog("Please enter in your last name"); age = JOptionPane.showInputDialog("Please enter in your age "); city = JOptionPane.showInputDialog("Please enter in a city"); college = JOptionPane .showInputDialog("Please enter the name of a college"); profession = JOptionPane .showInputDialog("Please enter in a profession"); animal = JOptionPane .showInputDialog("Pleaes enter in an animal type I.E dog, cat, fish"); petName = JOptionPane .showInputDialog("Please enter in the name of a pet"); nameFirst=toUpperCase(1); JOptionPane.showMessageDialog(null, "There once was a person named " + nameFirst+nameLast + " who lived in " + city + ". At the age of " + age + ", " + name + " went to college at " + college + ". " + name + ""); } } This is what I have so far the output is not finished but its very basic. So based on everyone's input there is not a way to say something like. nameFirst = charAT(0).toUpperCase;
Of course asking all implementers to give any guarantee for System.gc() whatsoever would have reduced the ease of implementing a JVM for any system, thus reducing the royalties received by Oracle (and former Sun Microsystems). What I find even more unsettling was that a) it was even possible to bring down the JVM e.g. by playing MIDI samples and b) that System.gc() really *did* work on some systems.
No arrays or substrings? You didn't mention that! It's entirely possible without these but it is long winded. Here you go. This will work for any number of names (firstname, middlename(s), surname) as long as they are separated by one space. public class Test { public static void main(String[] args) { String name = "john adams"; String trimmedName = name.trim(); String updatedName = new String(); boolean lastCharWasSpace = false; for (int i = 0; i &lt; trimmedName.length(); i++) { if (i == 0) { updatedName += Character.toUpperCase(trimmedName.charAt(i)); continue; } if (trimmedName.charAt(i) == ' ') { lastCharWasSpace = true; updatedName += " "; continue; } if (lastCharWasSpace) { updatedName += Character.toUpperCase(trimmedName.charAt(i)); lastCharWasSpace = false; continue; } if (!lastCharWasSpace) { updatedName += trimmedName.charAt(i); } } System.out.println(updatedName); } }
Try a bitmapped font like Terminus. Bitmapped fonts look clearer on all resolutions and are easier on the eyes for long sessions.
Remember Strings are immutable.
a subclass of A could implement I. However, a subclass of A could never be a subclass of B.
substring() is simply a static method of String class, you should be fine using it. Here is the documentation http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring(int)
Answered here : http://stackoverflow.com/questions/19895304/classcastexception-vs-cannot-cast-compilation-error
Easy, concurrency basics... 
The only way I know of measuring entropy is through compression ratio over the raw byte stream of the cypher, so you may want to play with `java.util.zip` and forget about Levenshtein distance or encoding the key.
No. This is the output of 'RunCommonJavaJar --help' an explanation of what the script does and how to use it. Are you a win-doze user? 
To run a jar file you have to run: 'java -jar JarFileName.jar' The above script creates a link to itself called 'JarFileName' so that when you run 'JarFileName' the script runs: 'java -jar JarFileName.jar'.
You can stick to the course if you like it (and I'd recommend you to do so - when I was beginning my journey with programming I was changing my learning resources way too often) and do the exercices on CodingBat. If you find them hard, you can look for other people's answers - just remember not to copy paste them; try to understand how the code works and then write it yourself from scratch (maybe you'll be able to improve it somehow?). I'd also recommend writing lots of programs on your own. They don't have to be complex - start with a simple calculator. /r/dailyprogrammer might be a good place for you (look at the old challenges). You'll learn a lot by starting projects that require a little more skills than you currently have and just googling the answers to your problems - StackOverflow and java docs are your biggest friends. ;)
Why would you do voting based on a boolean? That doesn’t even make sense. The submission is always in a defined state, there’s no reason to add a boolean for state toggling if you already know the state and can simply show the appropriate option.
Yeah I meant x86 not 84. How embarrassing. And good to know!
I'm familiar enough with the server ops to know whats going on, but my basic issue was solely java. Pleasant surprise, I got lots of help!
Thanks everyone, your suggestions helped. I posted an edit for anyone stumbling upon this while having the same issue. 
I knew somebody was gonna say that. Don't use broken frameworks.
I believe Iterators come from C as C collections have iterators associated with themselves to traverse that collection. I'm not sure of their operational cost but I wouldn't worry about it. ArrayList uses a standard array[] to store it's elements. Here it is declared exactly as taken from the ArrayList class: transient Object[] elementData; This array is resized (copied) dynamically as you add and remove objects with its add and remove method. It's get methods looks like this: public E get(int index) { rangeCheck(index); return elementData(index); } E elementData(int index) { return (E) elementData[index]; } 
Yes - that problem can easily be solved with double dispatch without subverting the type system.
http://data.grammarbook.com/blog/pronouns/1-grammar-error/ TLDR: When you mean it is or it has, use an apostrophe. When you are using its as a possessive, don’t use the apostrophe.
Haha I remember this, it's this funny thing that Java does with Interface casting. [Java spec](http://stackoverflow.com/a/19825137) [Great ELI5 here](http://www.androidmix.com/casting-between-class-interface-and-interface-interface) tl:dr - Java compiler _allows casting anything to an interface_, be it a class or an interface even if they're not related, because it assumes that some subclass of what you're casting might just implement said interface. But it only checks for it at runtime. The exception here is when you're trying to cast a class that is 1) declared `final` AND 2) does not implement the interface. For example, you would have gotten a compile error if you'd done this instead: I i = (I) new String(); because String is final and does not implement I. You will however still get a ClassCastException at runtime if your class doesn't implement the interface (duh) - _even when its subclasses do_. but that just common sense. The reason behind it is that the compiler has no way of knowing what type of object the variable will point to at runtime, it can only know its _static type_ (declared type). That's why when static types of both objects are incompatible (belong to different lines of inheritance) the compiler can see it right away. but if it's an interface, or if they're related somehow, it can only be checked at runtime. But it can also check right away whether a specific class implements an interface! What is so tricky about finding it out at compile time? Well consider this: Interface Raceable {} class Car {} class RaceCar extends Car implements Raceable {} Car myCar = new Car(); Car myFriendsCar = new RaceCar(); Raceable wreckedCar = (Raceable) myFriendsCar; Now what does the compiler see? Even though you and I know that the dynamic type of `wreckedCar` will be of type RaceCar that does implement Raceable interface, the compiler has no idea. Since we've declared `myFriendsCar` - the variable we're casting - to be of static type Car which does not implement it, that's all the compiler is able to see. At compile-time it has no way of knowing what object `myFriendsCar` will point to and when. At runtime, though, the code will run just fine because at that time `myFriendsCar` variable will point to the correct object of the correct type that implements the interface we're casting to. So at compile time, the compiler doesn't see any difference between Raceable wreckedCar = (Raceable) myFriendsCar; and Raceable rustyOldCar = (Raceable) myCar; because both `myCar` and `myFriendsCar` have the same static type of Car. Except that the second line will throw a ClassCastException at runtime because your old rusty-ass car is not by any means raceable and does not implement the interface :] 
An ArrayList, like the name suggests, uses an array to store its data. When you use the ArrayList's add(), get(), etc, methods, it does **not** use an Iterator behind the scenes; It simply accesses the underlying array. This is why ArrayLists have constant time "get" and "set" operations. Iterators are really only used when you call the Collection.iterator() method, or when you use an enhanced for loop ("for each" loop) which uses the iterator() method behind the scenes. A LinkedList will need to use an iterator-like algorithm to traverse the nodes in the list when you get/set, but they're not necessarily using an Iterator object behind the scenes. When you need to loop through all items in a linked list, it will be more efficient to use an Iterator than to call get(0), get(1), get(2), etcetera. In general, it's a good idea to use an enhanced for loop (which uses an Iterator) when looping through all items in a collection. Iterators have the advantage of usually being efficient for the underlying collection (whereas the performance of List.get(index) can vary), and it allows you to change the type of collection used without needing to change your code. 
Here is a non-mobile link: http://infoworld.com/t/java-programming/programmers-could-get-repl-in-official-java-249656 ^[Sourcecode](https://github.com/Kharms/untouchedURL) ^| ^[Feedback?](http://www.reddit.com/message/compose/?to=untouchedURL&amp;amp;subject=untouchedURL%20feedback)
Java has had REPL for years. At least since BeanShell. Is there a reason to add it to that standard jdk?
I think it's fair to say that it's write performance will be much better than a real fs because of the zero-cost sync. Read-performance will typically be impacted by OS caching the data as being ephemeral the data had to be written out within that VM's lifetime. So long as you have enough RAM of course. I use RAM discs for all my software builds (sym-linking the "build" directory to the ramdisk) and it makes a big difference. This lib offers the same kind of benefit but entirely within javaland so I can definitely see use for it if you need to build some sort of temp-fs for testing or some kind of packaging application, anywhere that java.io.tmpdir is currently used. 
sounds like a great idea for an IDE add-on/extension, not so sure if it'd be as significant as the introduction of enums (in 5) or Lambdas (in 8)
Am I the only one that uses their IDE's debug mode as a REPL already? I know, it's not the same thing, but usually if I set a break point in the section of interest and then put together some new code there using the data already available in that context, because context is everything really, then that's really what I need. I don't see a REPL facility really replacing the need for that in all but the most basic cases. Edit: Just an additional note - JavaREPL is already an available plugin for IntelliJ. I imagine something quite similar is available for Eclipse.
There's no 2 node restriction on Hazelcast. It's fully open source (Apache licensed), you can browse/get/install from github.com/hazelcast/hazelcast. There are also some paid features too but core of Hazelcast is open and free and what's open source will remain as it's always. There's 2 node limit on management center which is a separate, paid product. I guess what you mean is that. But how can you blame one because of doing business? 
The point of REPLs is to not having to use an IDE.
Being in the jdk means official support. That is, not having an out of date piece of software. The best repl that i have seen is http://www.javarepl.com/console.html and is not bug free.
No, a REPL doesn't remove the need for an IDE. Can you explain why you would think that? 
I didn't said it does remove the need for an IDE, but you don't havee to use one with it. IDEs are used to manage projects whereas repls are used to try sentences/functions or (for example) new language features without the need to start a new project on an IDE.
Oh fuck off. This is a programming sub, not a fucking literature sub.
True, BlueJ can have some problems, but after a (tiny) bit of testing almost all of the errors that it gives are *exactly* the same as just compiling with javac in a terminal but they are laid out nicely in the bottom portion of the screen instead of the disgusting mess that is made all over the terminal. I think the main reason many beginners can't understand the error messages is because, well, they are novices. The same error might confuse them no matter the IDE. Understanding what needs to be done after a compiler flags something is kind of a trial and error process that can take a while to learn regardless of what or how an IDE says it. Personally I remember trying to start with Eclipse and being so overwhelmed and frustrated and not understanding what was going on. I tried a few tutorials but all the ones I came across seemed to think that the user had previous experience with a fully fledged IDE. **TLDR;** YMMV when picking an IDE. Choose what is right for you. If you can start with Eclipse then good for you. You will be miles ahead of where I started from.
In order to test equality, two objects or fields must be of the same type. The second example works because you cast the Integer to an Object. 
Nope, there's no equality test involved...
The compiler casts both values to a plain double. Object o = true ? i : d; // NullPointerException! is compiled into: Object o = Double.valueOf(true ? (double)i.intValue() : d.doubleValue()); So the unboxing mechanism takes precedence over plain class casting. In your second example unboxing is not possible since the first argument is a plain Object. 
You might want to look [here for project ideas](http://www.reddit.com/r/java/search?q=project+idea&amp;restrict_sr=on&amp;sort=relevance&amp;t=all).
Correct, as specified in [§15.25.2](http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.25.2): &gt; 15.25.2. Numeric Conditional Expressions &gt; &gt; Otherwise, binary numeric promotion ([§5.6.2](http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.6.2)) is applied to the operand types, and the type of the conditional expression is the promoted type of the second and third operands. &gt; &gt; Note that binary numeric promotion performs value set conversion ([§5.1.13](http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.13)) and may perform unboxing conversion ([§5.1.8](http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8)).
&gt; Incase you didn't know ?: is a ternery operator, if you don't really understand how they work I suggest a quick google I know what's going on, it's a puzzle for /r/java, and your answer is quite wrong ;-) The conditional operator is *not* strictly equivalent to an "expanded" version of it, nor do your examples explain a `NullPointerException`. [See my comment here](http://www.reddit.com/r/java/comments/2fpjin/java_puzzle_nullpointerexception_when_using_javas/ckbhupf)
I think this would be most useful for debugging code in a production environment. In development it might be marginally useful depending on the capabilities already present in the IDE one is using. I would also have to imagine it would find use as a teaching aid. Neat feature, but not earth shattering.
I can see this being nice for sharing code snippets. Lots of StackOverflow examples of code in languages with a REPL are pasted REPL sessions. This would be nice: &gt;&gt;&gt; int i = 1; &gt;&gt;&gt; i++; &gt;&gt;&gt; System.out.println(i); &gt;&gt;&gt; 2
God that is slow.
IDE and REPLs were kind of born together, see Lisp and Smalltalk workstations at Xerox PARC.
In my experience i had very few problems with different operating systems when using Java. The few problems I had were related to things like file systems, for example because someone decided to hardcode file- or path separators into the source code. If you use the file/path API as intended those problems should go away.
Just because it's the wrong answer doesn't mean it should be downvoted to hell. Jesus guys. 
On windows you can right click on the jar file, choose 'open with', Choose default program..., then browse to your &lt;jre/jdk&gt;/bin/javaw.exe file. If you check the box for 'always use this program' then it will be the default and you can just double click on the jar files after that. 
Thanks! Also, are ArrayLists a sort of wrapper for an array? When you change the size of the arraylist by inserting or deleting an element(where the available space wouldn't be enough), what happens internally?
Ha, thanks. Now thats what i was searching. Now i can get the keys as BigInteger and .bitLength shows me that my keys are as i expected (~160 private, ~1024 public, i guess it clips some zeros sometimes) Ive looked into r/crypto, i guess they will tell me that i cant produce trustworthy code with java (they seem to use c++ due to memory management, guess a managed jvm is not the right place for zero'ing buffers.... but i will post there and ask them) Thanks!
You could build a new string with a for loop. String output = ""; output = output + stringArray[stringArray.length-1]; for(int i=1; i&lt;stringArray.length-1; i++){ output = output + stringArray[i]; } output = output + stringArray[0]; System.out.println(output); There is almost certainly a better way of doing it, but this should be easy to follow and wrap your head around. If this is something you're going to be handing in, maybe google up the documentation for the java String class. There might be a way of creating strings directly from arrays or some other useful/funky method. Google is your friend when it comes to figuring out what a language / premade class is capable of doing. :)
You have a very limited view of what a REPL *and* IDE is.
Could you explain a bit more about this? Is it casting to a double because it's the nearest compatible type for both variables?
Probably is slow to prevent abuses.
When you add an item to an ArrayList which would cause the number of items to be larger than the underlying array, the ArrayList will create a new larger array, copy all the items to the new array, and begin using that array. But usually there is some unused space in the underlying array. For example, the underlying array might have a length of 10 (called the ArrayList's *capacity*), but the ArrayList is only using the first six. In this case, there's no need to create an new array when an item is added. This is why add() operations run in *amortized* constant time (most of the time, we don't need to create a new array). When you remove items from the list, I don't think anything is automatically done to shrink the size underlying array (there will just be more unused space). Though you can explicitly call ArrayList.trimToSize() if you want to get rid of any unused space. 
If you're programming, you need to be more precise: When you visit "the site" do you want to be able to download the program and run it, or do you want to be able to run it within the website, within the browser? Edit: just had a look, if it's the first, it's going to be somewhat problematic, as SWT needs native code; if it's the second I'd suggest rewriting is in JS (isn't hard).
JRebel already turns the jvm into a REPL. Especially effective with frameworks and larger apps. 
Quite lost on that part as well unfortunately
You need to reach out to someone at work that does understand it and let them guide you. Mostly if you don't understand how the application works with the v2 API then you're going to be lost as to what needs to be done to convert to v3. So here's a list of terms to read up on: * 2LO * 3LO * Service Account flow * HttpRequestInitializer * GoogleCredential * Access Token * Refresh Token Try to figure out how you're caching/storing credentials for domains you're using the API on, how you're applying that credential to each request, and what the request you're sending looks like. The Google API is a REST APIs, meaning you need to know what address to send the request to and how to authorize the request. Beyond that it's a very straight forward matter of interpreting the response. The v3 API is actually easier for you to use as a developer, so spend your time figuring out how to use it. Get input from a coworker/mentor if you don't understand how your application is using the v2 API. Honestly write some unit tests to figure this stuff out. You'll probably have to change up the data models to be consistent with the API models, or create adapters to convert to the model you're used to. Get the authorization and request part down where you're confident you can do it, then look at the data model, then go back and figure out how to make your app work with what you now know. Break it down into smaller parts and become confident in each one, then build up to the full conversion.
Sounds good, thanks a bunch! I was recommended to follow the 2.5 tutorial from a friend who did it as part of work training. However he said there were a lot of issues with it being out of date. 
Maybe look through some early /r/dailyprogrammer easy challenges. Here is a list: http://www.reddit.com/r/dailyprogrammer/wiki/challenges
Wow, thanks for the help. I just started reading up on OAuth after your first post, so I picked up some basic info on things like Access Tokens. I'll read more into all of those terms on your list and follow the rest of your advice. Do you have any idea how long a task like this should take a new intern developer? They kind of just threw it at me and said "go".
Ummm, depends on the size of the application and how well architected it is. I don't want to guess at those parameters. How long should it take you to figure out how to use the v3 API? If you're really buckling down and trying to figure it out, maybe a day or two.
The ternary operator is one of the weirdest little bits of the Java language. The JLS section on it reads "like a car rental contract" as expressed in the Google Tech Talk on Java Puzzlers. Here's a link to the relevant part of the presentation: https://www.youtube.com/watch?v=yGFok5AJAyc&amp;t=54m17s (though you really should watch the whole thing from the start and try to answer the questions if you haven't done so before).
Yes I figured this out. Thank you
A website client of some kind.
OAuth is a pretty shitty thing to hand an intern in my opinion :( Dont be afraid to say "It will take me a few days to get my head around OAuth, I need to work through some examples" because it will and anyone who berates you for it is an asshole. Although my first Java project was programmatic transform of Word documents using XSLT in Java back in 2002! That sucked.
Yes. I think what you're observing is that java code tends to be full of side effects. This greatly reduces the effectiveness of a repl driven development style. 
Java verbosity makes any REPL a bit cumbersome to use, IMO.
I can't argue with that. That said, I have yet to see a production system where that isn't true. In the real world, systems are full of global objects and cached state and most systems will fall apart without them for the sake of performance if nothing else. To me the REPL is about productivity and being able to get an idea working as quickly as possible. It's doubly necessary for me to have access to something like a REPL when I'm working with stateful systems because I need to know what data is actually going to be available to my process at run-time. This is almost always a poorly documented area, so being able to see it live at run-time isn't a nice to have. Does that reduce the effectiveness of a REPL? I don't know. It just means I need it more. In a pure system without side-effects, I really wouldn't even need a REPL.
True. I really liked groovy when it was aiming to be a dynamically typed version of java. I didn't want it to compete with Java, I wanted it to compliment java. 
&gt; I understand the iterator makes traversing the list links easy, but I don't know why that is, or why inserting costs less than in "add" in an ArrayList. As /u/chickenmeister explained; when you keep adding items to an ArrayList it has to create a new backing array every now and then when it's capacity isn't sufficient to contain the new elements. A LinkedList on the other hand does not have to do this, it's just a bunch of 'links' in a chain and you just add another link to the end of the chain. Also; if you want to insert an element in the middle of the list a LinkedList can just add a new link in the middle of the chain. The ArrayList will have to shift down all the elements after the new one to make room because it's using an array. So the performance of a linked list on inserts is better. It's however completely terrible for index-look ups where in an arraylist you can just 'jump' straight to the element at index i because it's just there in an array. &gt; Because I read something where accessing elements, while expensive for a LinkedList, is easier from both ends, That depends on the implementation. But you really should just go and read up on data structures because this is knowledge any dev needs to have. Basically in a normal linked list the chains of the list only point forward. When you're at the start of the list and want to get element 10 you have to go to number 1, get the next one (2), get the next one (3) and so on till you're at the number you want. A double linked list on the other hand has the chains point both ways. You can move backwards and forwards from each link. The list itself also keeps pointers to both the start and the end link of the chain, so if you want to you easily traverse the list backwards. The latter is just as simple with an ArrayList too though; you can easily just start at the end of the internal array and move back to the first. &gt; and I didn't know the list iterator could start automatically at the end. Where is that built in? An iterator is nothing more than a little bit of code that keeps track of where you currently are. The API comes with many standard iterators but you can easily write your own. A very simple back-to-front iterator that traverses ArrayLists for example: public class ReverseIter&lt;E&gt; { private final ArrayList&lt;E&gt; _list; private int _position; public ReverseIter(final ArrayList&lt;E&gt; list) { _list = list; _position = list.size() - 1; } public boolean hasNext() { return _position &gt;= 0; } public E next() { return _list.get(_position--); } } That's all an iterator (and I didn't implement a standard interface here on purpose) really does. 
I'd second that. Especially if you want to make it non-trivial, OP could easily learn about some very important concepts while also having fun.
As a Java web developer who is trying to get into mobile development it's always great to find articles like this one. Thanks. 
Thymeleaf is a template engine, an alternative to JSP/Apache Tiles which you can use for building your presentation layer. [LightAdmin](http://lightadmin.org) is an open source web-library which provides you with dynamic CRUD administration UI based on your JPA model. All you need to do is: * Add Maven dependency to your pom * Enable light:administration in your context-params and map LightAdmin to particular url like "/admin" (Servlet 2.5/3.0) * Use DSL configuration classes for concrete entities views customization The good thing about it is that you won't have any CRUD related boilerplate code (UI, persistence, etc) in your codebase and there is no need to maintain it.
Very unfortunate that there will probably no configuration JSR. It would have simplified a lot. I planned to get involved, even talked to some guys of expert group. :(
So, it's finally ready. Fuck yes.
It depends on what you haven't worked with and the core skills required of the job. It is a very, very broad list, but if the job says "full stack developer" then it would be expected that one would know the stack from SQL to CSS. That being said I consider myself a full stack developer but have not worked with struts, jmsmq, or javafx. And the only uml tools I use these days are a whiteboard and a drawing program. Having worked with an enterprise level messaging system is not uncommon for a full stack developer these days. Try to find postings that match your skill sets.
You can quite happily use the JVM for multitenancy and elasticity and not have to use the security at all. That is your choice, so hope you are making use of it?
When they say struts just respond with "struts 1 or 2?" If they say 1 say okay I'm not using 2005 technology thank you for your time.
What I've found is that most employers aren't looking for everything they list. A few different things can happen: * HR just got a list of things to look for, and put them all into the ad (this also applies to screening interviews). * They're advertising for several different teams, and just lumped all the skills together. * They're chancing their arm in the hope that they'll get a a developer with exactly the skillset they need. There are probably other reasons, but those are the majority that I've run into. I'd apply for the job if I knew most of the technologies asked for, or had worked with similar tech in the past. My CV and LinkedIn profile list my most familiar tech, along with key projects demonstrating that knowledge, so it shouldn't be hard for a potential employer to see where my strengths are. Once you're in the technical interview, don't be afraid to say that you haven't used a technology. No one should expect you to have used every library or tool available (and if they do expect that, then you most likely don't want to work for the company). The key point is that you're willing and able to learn. Having said that, I'd expect a full-stack developer in my area to be quite familiar with Spring, Hibernate, web services, relational DBs, unit testing, Maven/Gradle, HTML/CSS/JavaScript and a few other things. They may have strengths in different areas, but a basic knowledge of those things would be required for a non-graduate position.
Out of curiosity.. which state, country is this?
Also if an applicant feels like they are not completely competent for the job, their position in salary negotiations may be weakened. Which is a bullshit tactic in my view. You'll get a coworker who is competent but insecure, leading to certain behavioral anti-patterns (like not wanting to show knowledge gaps when talking with colleagues). You get what you pay for.
Yeah, a lot of places are looking for a fully-trained robot to work in their system. I try to avoid those kinds of listings. Good companies are looking for smart people. I've hired people with minimal overlap in the skills required because they seemed smart and capable and it has worked out great. I want someone who can teach me something. Unfortunately, most places are not.
"I don't need your money!"
Generally speaking, if you do have experience in all those technologies, it's not likely to be all that deep any any one tech. What I'd rather see in a candidate is significantly deep experience in one or two technology stacks, and then an ability to learn quickly. This implies the discipline and ability to follow through on a project through whatever difficulties you encounter.
Hah well you do yourself a disservice by working in too crappy of a job, you won't learn anything useful to get a better job.
Perhaps, but it doesn't work in your favor to be rude about it. Because, at least in Belgium, companies tend to talk to each other about prospective employees.
Had this problem, every java developer interview was a quiz in how much java I could know. Try to find more specialized jobs, for example I went into android, which have a much smaller dev base and thus less competition. My interviews have gone back to normal levels of questioning.
A lot of job postings just list everything that could possibly be useful along the entire stack. I wouldn't be too afraid to still apply, even for stuff where you only feel like you match 20% of it. GOOD interviewers and employers are going to be way more interested in your ability to learn and attitude than your actual previous knowledge (although that is important to an extent as well). Any interview where they start asking you super detailed questions about specific libraries and tools and that's ALL they're judging on is probably not a place you want to work anyhow. Really the biggest thing I can tell you is this: Do NOT bullshit people when you interview. When they ask you something you don't know just say "I don't know". When you they ask you if you have used or work with a library/tool/framework before say "no but I am aware of it and would be happy to learn it". Nothing makes me more annoyed than people who try to BS knowledge about something or list stuff on their resume that they actually have never used just to get past HR. 90% of interviewers are going to appreciate this a lot and will give you a positive nod for it.
You're a needle in a haystack. Most interviews I've been through demand lots of experience in whatever frameworks are being used. Expectations seem extremely high for the salary ranges. It's as if they expect you to squeeze 10 years worth of knowledge into 5 years, of course only getting paid for the 5 years of experience.
Do what you are interested in. What's your hobby? What do you like? Requirements are pretty lax so just do what you feel like you want to. Don't think about fucking grades.
Took me a minute to remember that 2005 was a long time ago. Guess I'm getting old.
Don't forget * Entry level position available * 5 years minimum required professional experience 
Not true at all. Dev management talks to each other, even in the US. It's a small community in most cities
I think some of it comes down to plausible deniability. It's easier for a hiring manager to cover themselves for a bad hiring decision if they can point to a candidate's resume that indicates prior experience in a technology. That makes it easier to form an argument that the candidate mis-represented their skills during the hiring process. There's also a lot of short-term, project-oriented thinking going on. Companies are staffing short-term projects rather than long-term development organizations. Companies are looking for people that can make immediate contributions rather than people that can make long term conversations. This biases hiring decisions against 'good all around developer' and towards 'knows our particular stack'.
I prefer "experienced". :)
I've walked out of interviews. Got 3-4 more job offers the next day. *shrug*
clear and effective tutorial. thanks!
I'm not even convinced the people who write the ad have any idea about the criteria. For example, I've gotten many calls from recruiters saying "You have experience with java, and this job is Java..script, so I wanted to get a resume' from you..." me: "Not that it's a problem, since I have experience with both, but you know that java and javascript are two different things, right?" recruiter: "... well of course I know that. But they are similar, right?" me: "... well they are both on computers, so.. yeah I guess. How much are they paying?"
The most useful term I've ever heard for job qualifications is "wishlist" I'm more of the "smart and gets things done" school of thought
Yes. But don't allow any scope creep. Make the game very simple with easy mechanics. Think of 1980's video games - the mechanics were often a 4 position switch for movement and an on/off for shoot or jump. The levels tended to be the same map in a different color with things going a little faster (donkey kong, for example). If you keep it to that level, you can make a fairly polished game in a few months. 
I've got 1 college coursework experience with Java and started a small arcade game about 4 months ago now, I'd say half a year is a huge amount of time to make a small game, depending on size of course, a level editor would be a good idea if you want a lot of content, that'll mean just designing new content and not coding a whole new scene, it'll be slower to start but will really help once you've got a good frame work
&gt; &gt; HR just got a list of things to look for, and put them all into the ad (this also applies to screening interviews). In my experience, this is the cause of 99% of these issues. Good thing doctors are not hired this way. They'd list skills of an orthodontist for a neurosurgeon.
It could be the sort of companies I interviewed for, that is true. I'm not sure how many long-term development organizations use the job boards I frequented. I would assume larger companies are like that, but you made me think again. It may have been for a short term project at a company that has long term projects as well. They never really got beyond cursory explanations of what they were working on with me (of course I also asked about it). Anyway, I still have been employed for quite awhile but it's always been a real pain in the ass whenever it's in my best interest to move on. By that I don't mean having to fill out up to ten applications and go through that many phone screens. I mean two to five times as many. I always seem to end up in some generalist role in the end where I spend 3 months on one stack then 3 months on some other thing unrelated, so getting that "our particular stack" experience just doesn't seem to be in the cards.
Canada, Quebec.
But a lot of companies put a dozen REQUIRED and only a few desired. The desired list is usually very small.
I am ecstatic we are shutting down our last struts 1.2 project this month. We have since gone to spring MVC for new projects for the past 8 years but this was the bosses project from when he was coding and runs on hopes and dreams. 
I think IT is unique to this (at least, not remotely familiar with another industry that does anything close to this frame of thinking). Think of another unique hiring "headache": do you know another profession where despite the fact that you have a bachelor's or master's in CS or any certification / diploma / programming degree, you are tested to the hilt during your interview to see if you know what you say you know? It doesn't matter what projects you have on Github that are publicly available to see. Or what projects you've worked on. Unless your name is Linus Torvalds AND you are physically recognised, you will still be quizzed, questioned and tested like you just walked off the streets with the "for hire" sign in hand. Granted, I'm generalising a bit, but overall this is highly accurate for any IT position hiring (admin or programming).
First, thanks you for your efforts. Like many other devs, I have my own GenericCrud, but not even close to that level. Well done. Question: How about i18n? Is there any specific support, or should I write something like fragmentBuilder.field( "name" ).caption(messageSource.getMessage("Names") ) Let's say I use the default crud page for all my entities but two (customer and travel) because they are too special, how hard is to write a custom page and make it look like the rest of them?
There's a bit of a vicious cycle to it as well. The prospective employer (or, probably more accurately, its HR department) expects prospective employees to know everything they need to know to do the job before even walking into the interview, which leads to applicants 'embellishing' their resume so they can at least get through the screening. This leads to the employer being disappointed once they figure out they've been duped, so they start grilling applicants during interviews. In the end, you end up with arrogant applicants taking on positions they're not necessarily the best match for, employers disappointed about their new hires, and capable but otherwise humble people sitting at home twiddling their thumbs and being mad about the world. That, or in the odd case, everyone wins, and the world is a perfect place. 
I was thinking of a small school related RPG with simple level-ups, character building and maybe moving around the school house in a 2D perspective. And some randomness factor like tests. Should I still go about learning the basics, or should I dive right into the game process and learn everything necessary in the way?
You're right about scope creeping, maybe if I plan on a RPG, I should start by writing everything I want on a paper and set them as priorities? I would like *a very little* amount of detail in it, but a little bit more, than your usual flappy bird or space invaders.
Download is here: http://hazelcast.org/download/
My pain is not in writing yet another J2EE web application, it is in maintaining it once built over a 10+ year life span.
I think the biggest pain is coding the UI, the frameworks that exist seem to be meant to hide away web technologies from the developer, but in the end it's basically impossible to escape them. It's just hard and resource consuming to make a modern web UI in Java, be it in JSF, GWT or the Play Framework, etc. Setting up different environments is OK using spring configuration, coding the DAO layer made is much simpler now with Spring Data JPA. About commercial web templates, it's not a template but I really like [Yahoo Pure CSS](http://purecss.io/), it's just plain CSS (&lt; 4k) for responsive layouts, tables, forms, etc, it's derives a whole theme just from one primary color. Performance wise I find that if the problem can be reproduced locally in the developer's PCS then VisualVM that comes with the JVM plus it's multiple plugins can quickly give us the answer for the vast majority of performance problems, with this tool we are not flying blind in terms of finding the bottleneck anymore. You mention Wordpress, do you do public marketing websites in Java, if so what tools do you use? I thought it was mainly used for enterprise in-house apps. Since Spring 3 and even more with 4 the XML configuration can be entirely replaced by Java Config that feels more natural and easier to debug. I find that the testing tools available are sufficient. For me the biggest pain point of Java is really the UI. I often wonder it a polyglot approach where the frontend is built in Javascript (for example in Angular) and the backend in Java would not be a better way of doing things, even though it means learning an extra language. While doing UI you seems to end up needing it sooner or later anyway.
CRUD. Just today someone has posted Light Admin, which is the first decent Django Admin clone I've seen... 
To be honest, if I know every technology listed in the ad by heart, it will look like a boring job for me. I'd still take it, but only if its a big step up in terms of payment. I generally look for jobs where I can do 50-75%. That way I have a decent chance to still learn something new. The employer maybe hoped for someone who knows all that, but from my experience up until now: They won't find anyone like that. So they will take the applicant who is closest and that just might be me. Just be clear and honest, tell them your definition of knowing something and being good at something, let them know what you don't know yet and that you're willing to learn. Worked very well for me at least.
Hi mate, it's really great you like LightAdmin. * You're right. Currently it's the way to use it, but we have "i18n implementation" feature in [Backlog](https://github.com/la-team/light-admin/issues/87) and plan to make it easier to configure. * It is possible in theory, but it's not that easy to be honest. And the main reason is [LightAdmin](https://github.com/la-team/light-admin)'s dynamic nature, which is an opposite to scaffolding. It's possible to include "custom" JSP fragments with **sidebars** only. Feel free to ask me more in our [Google Group](https://groups.google.com/forum/#!forum/lightadmin) 
The testing is a product of CS making the conscious decision not to go the PE route. A Mechanical Engineering with his PE is not going to be questioned in basic competency, the state has already done that. a Mechanical Engineer without a PE has to have all of their work double checked by a PE. This combined with CS programs which are not much more than a general lib arts degree or worse a diploma mill and we have no reliable way to tell if you are competent on paper.
Yes, writing it out will help you solidify it in your mind. Also, you should be thinking about classes as you write it (you do plan to use OOP, right?) Bonus points: Write some unit testing. It makes development slower, but debugging WAY faster/easier. Also it lets you know when changing something breaks something else. For example. When a player touches this electric fence, they lose 10hp, but this time he has a shield and takes no damage. So you pass 0 damage to the function and get a divide by 0 error that you didn't think about. So you change the damage model, but then your unit test for enemy players fails because the change now affects something their damage model. It's an easy fix while you are thinking about it, but later on it may be very tough to find. (maybe not the best example, but I hope you see what i am getting at)
So you don't expect them to know every library or tool out there... just the ones you guys use in your group. Fair enough.
Good advice. I will add to this, send them a rational, truthful resume -- if they're really so hot for the things on their list they wont call you for an interview.
In a lot of ways it's like dating... You don't know if you don't ask, and if you never get off your stool, you will never have a chance with the red-head at the end of the bar. Just send your resume in if you're interested and do your best. Don't overthink it.
I wrote a pretty simple turn based RPG on my TI-83 back in 2003, and that only took a week (no prior programming experience). I think you can get something fairly strong done. You might have trouble with the navigation, story, and basic moving around. But the combat, experience, and shopping system shouldn't be too hard.
&gt; Other platforms, like RoR or Django or PHP, being built on interpreted languages, do not require server restarts. Just upload and reload. On the contrary, Django restarts the developer server on each and every Python code change. But the developer server has a very quick startup time. If you have a fast launching servlet container and a fast/incremental compiler, you should be able to do the same thing in Java
Thank you for the kind words. I share you thoughts about "not having such a great things like fully functional Ruby-gems or Python's Django admin" in our Java ecosystem. That was the main reason behind development of LightAdmin for Java community. It would be great if java developers could get benefit of it!
Try something like TodoMVC. Not java but javascript. But you can build a Java equivalent. Also this guy will teach you how to build a complete restaurant booking system in angularjs through a series of videos. Again, you can build an equivalent in Java. http://www.reddit.com/r/angularjs/comments/2f7ziz/i_quit_my_job_to_teach_you_how_to_launch_a_full/
I'd think Java would be good for starting out but not great once you really know what you're doing.
Yes, there are some technologies I'd expect them to know, such as Spring and Hibernate. They're widely used in my job, so knowledge of them is pretty critical. They're also incredibly common, so I feel that expected a basic knowledge isn't asking much. HTML/CSS/JavaScript is also pretty necessary if they're to do front end work. Relational databases, Maven or Gradle, unit testing and web services are all big parts of the job too, and are vague enough that plenty of technologies satisfy the requirements.
Future is garbage, channels are unnecessary, and it's not like there's any anonymous inner boilerplate to worry about. All you need is a queue: package main; import java.util.ArrayList; import java.util.List; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedTransferQueue; import java.util.concurrent.TransferQueue; import java.util.concurrent.locks.LockSupport; public class Worker implements Runnable { TransferQueue&lt;Integer&gt; queue; public Worker(TransferQueue&lt;Integer&gt; queue) { this.queue = queue; } int roll() { LockSupport.parkNanos((long) (Math.random() * 10000000)); return (int) (Math.random() * 6) + 1; } @Override public void run() { try { queue.put(roll() + roll() + roll()); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } public static void main(String[] args) throws InterruptedException { ExecutorService executor = Executors.newCachedThreadPool(); TransferQueue&lt;Integer&gt; queue = new LinkedTransferQueue&lt;Integer&gt;(); List&lt;Integer&gt; results = new ArrayList&lt;Integer&gt;(); int expected = 100000; for (int i = 0; i &lt; expected; i++) { executor.submit(new Worker(queue)); } for (int i = 0; i &lt; expected; i++) { results.add(queue.take()); } executor.shutdown(); System.out.println("Done."); } } 
Sure, here it is: http://docs.oracle.com/javase/tutorial/essential/environment/cmdLineArgs.html
I dont think ive ever seen a codebase that isn't messy in one way or another. Good job on getting an app finished. 
You're going to want to work with the commandline arguments. These are passed to you in the **main** method. public static void main(String... args) {} You'll have to check the amount of args in order to decide what to do with them.
So your java class, I am guessing is called lab02, will have a main method in it. public static void main(String[] args){ // code here } basically the args variable is what it put into the command line when running your class. So when you run "java lab02 &lt;anything else&gt;" your args variable will be a String array of anything else. Try to understand this bit of code. system.out.println("Number of arguments: " + args.length); for(int x = 0; x &lt; args.length; x++){ system.out.println(args[x]); } Hopefully you can see the number of arguments passed into your code and being able to print things out.
It doesn't look like there's a silver bullet for this type of thing, but [usb4java](http://usb4java.org/) looks like a good place to start.
Yes. Great tools (some of the best in the programming business), combined with good runtime performance, make Java a very good platform for game development. Unless you're shooting for a big AAA title that requires excessive efficiency, Java will not let you down.
Like /u/nutrecht said, inserting into the middle of an ArrayList will require shifting all subsequent elements in the underlying array. Whereas in a LinkedList, there is not shifting required; you simply update the "next" and "previous" references for the two nodes before and after the insert point. Adding elements to the end of an ArrayList really shouldn't be a problem in most cases. The ArrayList usually has some unused space in the underlying array so it shouldn't need to create a new array too often. And if you know the capacity that you'll need, you can initialize the ArrayList to have that capacity (as a parameter in the constructor, or by calling ensureCapacity()). Generally speaking, I think you should almost always use an ArrayList, unless you're frequently going to be inserting items middle of the List. Regarding iterators: I'm not quite sure what you mean. The LinkedList always maintains a reference to the first and last node. This is why accessing the front or back of the list is efficient: the list already has references to those nodes; it doesn't need to traverse the nodes to get to them. LinkedLists are often doubly-linked lists (each node in the list has a reference to both the previous node and the next node), which means you can traverse the nodes in the list in either direction (forward or reverse). If you're accessing an index somewhere between the start and end of the list, you'll need to traverse the nodes in the list to get to the right index. If the index is nearer the end of the list, it can be more efficient to begin your traversal from the last node, and traverse through the list in reverse order; Rather than starting at the front and traversing forward through more than half of the list. Imagine a linked list with a 100 items, and you wanted get the 90th item. You can either start at the front of the list and traverse 90 nodes, or you can start from the back of the list and traverse 10 items. Of course it's going to be more efficient to traverse only 10. 
The formula is 22 / 7. 
2D is in a really good standing thanks to Libgdx. For 3D there are better options.
Here's a lot of formulas: http://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula &gt;The Bailey–Borwein–Plouffe formula (BBP formula) is a spigot algorithm for computing the nth binary digit of pi (symbol: π) using base 16 math. http://en.wikipedia.org/wiki/Gauss%E2%80%93Legendre_algorithm &gt;The Gauss–Legendre algorithm is an algorithm to compute the digits of π. It is notable for being rapidly convergent, with only 25 iterations producing 45 million correct digits of π. However, the drawback is that it is memory intensive and it is therefore sometimes not used over Machin-like formulas. Have fun!
Care to explain your reasoning? Java, like may other languages, has its upsides and its downsides. As a quick example for Java itself, the JVM will always require an extra layer on top of native OS to run Java applications (though JVM programming is getting much better), but the upside of the JVM is the multiplatform compatibility. 
Considering this isn't a standard part of the Java APIs this will be platform and device specific so you might want to mention your OS and device type.
[Java Gaming](http://www.java-gaming.org/) is a good resource for java gaming.
Google chrome auto blocked it for me, don't want to look through the whole code and there are no reviews of it yet.
String input and Scanner input have the same name. Fix that first.
Google Chrome blocks all new files that aren't popular, says it there in the warning. The Jars inside the linux and mac archives are signed with a 2048 byte RSA Key and the MSI is signed with a 1024 byte key; it also does this for brand new domains. W~~hich is why I'm about to get a SSL cert~~ http://blog.chromium.org/2012/01/all-about-safe-browsing.html EDIT: site is now secured with HTTPS
I think it also depends on the position and your age. I was able to find one that was more looking for strong personalities and a decent technical knowledge. 
First, you only need one Scanner, you don't need to make a new one every time. Once you create one: Scanner userInput = new Scanner(System.in); then every time you call: int someInt = userInput.nextInt(); it will get input from the user. --- Second, try creating a return method, like this: private int getMenuSelection() { System.out.println("\n" + "Menu"); System.out.println("\n" + "What the Heck Cafe Everything is $5 ea."); System.out.println("1 Hot Dog \t\t2 Chips "); System.out.println("3 Pizza \t\t4 Salad "); System.out.println("5 Cookies \t\t6 Soup "); System.out.println("7 Meatloaf \t\t8 Pancakes "); System.out.println("9 Omelet \t\t11 Hummus "); System.out.println("\n" + "Please Make your selection (Use the Item Numbers):"); return userInput.nextInt(); } --- Now, whenever you call: int menuSelection = getMenuSelection(); the user will see your menu, and the item they selected will be stored in the **menuSelection** variable. --- But that's not the real problem you're having... --- Rule #1: Unless you know exactly what you're doing... **ALWAYS ALWAYS ALWAYS** begin your Java programs public class ThisIsMyClass { public ThisIsMyClass() { // WITH YOUR CODE HERE } public static void main(String[] args) { new ThisIsMyClass(); } } This really needs to be the first thing that Java tutorials teach people how to do. static is evil. Really fucking evil. When you see static, you run. You delete your code and run. When you create a new Java project your primary purpose in life is to get out of public static void main as soon as logically possible. If you're writing Java code in public static void main then you're not learning Java, you're learning how to use a glorified calculator. One day you will understand why, but for today please just take my word. If you get out of public static void main you will find better solutions to almost all of your problems. Until then you're just going to keep finding more and more problems, trust me.
Hi mate, you should work together with the folks at [JHipster](http://jhipster.github.io/) and create something like Django for Java :)
Well I'd like to make it a generic thing, as I do my development on a flash drive. I know it's not in the Java APIs. I want to be able to use an external library. I have my program already using OpenCV to process images taken in. I just need to get the images INTO the program.
Ok so this has been insanely helpful. Thank you a ton. Currently the problems I'm facing is if I get one argument and it isn't a number, I'm getting an error. I'm also getting an error if I get two arguments and the second one is a number I'm getting an error. I know my code is wrong in some places but I don't really know what I'm doing so this is just thrown together from stuff I find on Google. If you could help me out that would be wonderful! if(args.length == 1) { //opens if to test for args try { //Opens try to make integer firstArg = Integer.parseInt(args[0]); for(int i = 0; i &lt; firstArg; i++) { //Opens for statement to print message System.out.println("Hello World!"); } //Closes for statement printing message } //Closes try finally { System.out.println("Hello " + args[0]); } } //Closes if checking args if(args.length == 2) { try { firstArg = Integer.parseInt(args[0]); for(int j = 0; j &lt; firstArg; j++) System.out.println("Hello " + args[1]); } finally { firstArg = Integer.parseInt(args[1]); for(int k = 0; k &lt; firstArg; k++) System.out.println("Hello " + args[0]); } } 
It depends if you are making it 2D or 3D. 3D is significantly harder than a 2D game. If you are going to do 3D, I would highly recommend using a specific library for it, such as LWJGL.
I guess i would probably deviate from you in a few respects. I think you can learn basic proficiency in Spring, Hibernate, or a given build tool in a day or two. As far as front end web stuff is concerned, there are light-years between a good UI design guy and a mediocre one. I don't think I'd hire them and my Java/backend guys from the same pool.
&gt;straightforward You're saying that like its a bad thing. Since when is ease of use a downside in a programming language? &gt;performance is a big issue It was back in the late 80s. Not at all now. Are there languages that are faster? Well yeah. But Java isn't slow by any means.
Doing logic in the constructor is conventionally despised - you should avoid this as much as possible too.
isn't c# also garbage collected?
Regarding your last statement, it really depends on the game. In competitive gaming, sometimes framerate (CS: GO) is important, sometimes resolution (EVE), but of course that depends on what game you make. For most games, I will usually lower settings until I can have 1080p/60fps for max enjoyment. Lower gives me a serious headache. Just to note, Thomas Edison said that anything below 46 FPS will strain the eye. The only reason they stopped using that high was because they simply didn't have the amount of film required for it for large projects. Just as well, lower resolution when upscaled can cause eye strain because of the blur.
I'm not saying it's *good* to code in a constructor, just that it's infinitely better than doing it in main. Like, if you're going to take a dump at least run your hands under some water afterwards. At least. Baby steps.
Also, although I get 200FPS with the latest update to the game, I do have to note that the poor performance of Minecraft is purely from Notch's original code, with very little having to do with Java's inherent performance.
Thanks, Terrence.
I'm not telling my hardware or platform because there are many. If a generalized solution doesn't exist, fine. I was just hoping someone could help.
Agreed. When this happens to me in interviews I also like to follow up with something along the lines of "but I would use X resource to familiarize myself with it more" and/or talk about a time when I needed to learn some new technology on the job.
Sure, but at least it has the Unity engine, which does much of the heavy lifting.
Yep. There are a number of popular libraries for it. Check out LibGDX, PlayN, JMonkeyEngine off the top of my head.
Performance was an issue for Java in like 2002. What your saying isn't really relevant anymore.
Hello! Don't worry, you're not dumb. All you have to do is change the second command in the console from "javac" to "java" "javac" is the command to compile your code (basically prepare it to be run), whereas "java" is the command to actually run it. Also, make sure you only include the ".java" after "TestEnv" when calling the compile command "javac" - when actually running via "java", only put the name of the class with no ".java" Hope that works!
Thank you love! I'm a complete newbie :P 
I'm plaaning to make a 2D topdown game. I guess, I have gathered enough confidence from the answers. Thanks for the reply anyway! :)
Then the JSF components won't work, as is the case with websites that rely on JavaScript, jQuery, AngularJS, node, etc.
I will leave navigation and moving around to the end then, because I think I can build the barebones without it.
Cool! Let me know if I can help, or if you want to make it open source!
And Java has jMonkeyEngine. Not a AAA engine, but neither are most games. 
[link](http://it-ebooks.info/book/805/)
It's a shame how tainted java is perceived, by many using minecraft as the yard stick for games performance. The guy who took over from notch has seriously massaged out the cramps in the algorithms though. ~~Reading his blogs is quite the treat.~~
Minecraft
[LibGDX](https://github.com/libgdx/libgdx/). So hot right now.
There is disturbing return of tar bombs in last couple of years. Please, archive your files under a folder so when users will extract them they will be nicely placed in a sub-folder instead of spread out in the current directory. ~~Also, consider to compile against Java7 instead of 8 since the latter version is not yet very common.~~ Edit: you use JJS for scripting. Nice.
Lol :D
Thanks bro!
It seems I was mistaken to it being a blog, I read on my mobile and the layout is similar. As for the post I was referring to: [http://tomcc.github.io/index.html]( http://tomcc.github.io/index.html ) however it's not even from Jeb. I'll edit my post to avoid being misleading!
I've done two smallish projects this summer with Angular as the front end, and Jersey/EclipseLink as the backend, and the experience was great! Granted, they were self contained, and going full JS Frontend has it's disadvantages, but development was way more fluent than I expected.
Also http://sourceforge.net/projects/javax-usb/ http://jusb.sourceforge.net/ They aren't as well supported any more, I've used both before but not for a video device (just reading text files). 
It is possible to make a game in 6 months, at least one like you are describing. But i'm not sure that's a realistic scope if you are still a novice in java.
The title really could've stated that the job's in Auckland, New Zealand. There's also nothing there about what realm of Java the job's in, what technologies are used, etc. Cap it all off with a junior level opening question and to me this just feels like click-bait/spam, rather than anything serious. I certainly don't get the feeling you're a company I'd want to work for, so if this is a legit post I'd suggest you revise the page's contents.
I haven't used OpenCV with Java, but it worked just fine for capturing input from a webcam with C++. I'd imagine it can do the same in Java. [Here's](http://opencvlover.blogspot.co.uk/2011/07/accesing-camera-using-opencv.html) a quick blog post on getting it up and running in C++. And [here](http://stackoverflow.com/questions/15835424/opencv-2-4-4-java-grab-webcam-picture-stream-osx) is a stack overflow post with something similar for Java. It looks like it's doing exactly what you need.
I think you are trying to use the try clauses to catch a NumberFormatException as a way of checking if an argument is a String or int. But, the finally clause will always run regardless of a caught exception. I guess it wouldn't matter if you are assuming that the user won't input two Integers or two Strings.
And if you're shooting for a big AAA title you will almost certainly fail whichever languages you choose to develop in!
Appreciate the feedback, thanks. 
And the first mail you get doesn't even give you feedback about the answer. I just wanted to see if I was right..
He actually rendered everything twice for a long time. I guess the game is basically rewritten now though.
It's line 19, there are multiple errors. If args.length == 0 you will get an out of bounds exception. String equals-sign compare is bad, should be "EROAD".equals(args[0]). Further more, the CV class is badly designed as it services multiple roles.
You missed them putting "&amp;" instead "&amp;&amp;". But agree with other commenter, bad form posting this here, and poor introduction even if this was a jobs forum.
Fixed the archives so they're in a sub folder, sorry about that. 
Programming is not only about knowing the language. Programming is more about "Algorithmic thinking" and abstraction. The language is just a tool to express algorithms and abstractions in. Knowing a programming language is like knowing a natural (spoken or dead) language. One knows the vocabulary and the grammar but isn't really able to express one's thoughts. Getting the mindset of a programmer is actually more difficult than learning a programming language. Languages are only vocabulary and grammar. I've given the following advice to many aspiring programmers (during and after my time as an instructor) - Commented on reddit some time ago: Don't want to repeat the whole text, so I'll just link to the original comment: http://www.reddit.com/r/learnjava/comments/207zoy/do_i_not_just_have_what_it_takes_to_be_a/cg0max7
Does it throw an exception? Is there any way to check if the GET request is malformed before making a database entry?
I use exceptions to report exceptional behavior -- things that a user isn't likely to be able to respond to. I mostly used unchecked exceptions, unless I expect there is another developer using my code, in which case I use a checked exception if I think they can do something reasonable about the issue that's occurred. As for other kinds of error reporting, I see algebraic types being used a lot more often to represent success and failure. In example, they recently added the Optional class to java which is an algebraic type that has two possible values: Some(value) or None. In other languages, like Scala, they also have a Try type which can be either a Success(value) or Failure(error). You could easily implement a similar type in Java, or find a library that already does. EDIT: Check out google guava if you aren't using Java 8 for an Optional type.
I can make it throw one... There is an 'Assert.notNull(get_param)' and several other checks and transformations that are performed (escaping, etc...). So yeah, I don't have to write it to the DB. Maybe I didn't point that out enough, I am talking about a general best practice. Doesn't have to be web-specific (although there might be a best practice for specifically that, that I am not aware of) (edited typos)
https://projecteuler.net/ https://www.reddit.com/r/dailyprogrammer/ Have fun !
Although I'm curious: what does the transferqueue actually get you in this case? You're avoiding the Future, which is good - it's certainly clearer, because Future is a lot of noise - but what else is the Queue actually providing you?
FYI, the FLOSS version doesn't have the configuration hot reload.
You basically have three choices when a function can't fulfill it's contract (aka an error): 1. Throw an exception describing why. 2. Allow the caller to pass a listener that can be notified that an error occurred. 3. Loosen the contract to allow returning some value that appropriately handles the situation. Option 1 is a good choice if the error occurs synchronously. In other words if the caller of the function in question is the thing that needs to be notified of the error, then the stack unwinding behavior of exceptions works great. Option 2 works well if the error occurs asynchronously. That is if the function in question is called by some other function who isn't really the caller in a logical sense, but it responsible for notifying someone else. You probably only have this use case if you are already passing a listener into the function, so it's easy to just add an error callback. Please note, returning null is not Option 3. This means your function is pretending to fulfill it's contract, but lying. You could make your contract include returning null, but that would make your program not type safe and we don't do that, right? Option 3 is useful when you can return some sort of do nothing / empty object. You need to decide if this makes sense in the context of your program. For example, maybe your function retrieves a list of items from a DB. It *might* make sense to return an empty list if there is a DB error. This only makes sense if you can reasonably expect the caller to be able to continue with an empty list . If you know the caller is just going to blow up, then blow up as soon as possible.
"article"
Using Assert only for testing is a good point. It is of Spring though. I am currently digging into the Spring Validate Object and see if I can get the desired error handling off this. Seems promising so far, although it's still a bit confusing when it comes to which class validates when and who does the first, who the final check etc... From all the comments one message emerges cleary: It depends heavily on the architecture and what can be returned, wether one method or another is applicable or not. Thank you, I'll keep that part about NPEs in mind. 
That looks good. I am just now testing implementing the interface in my classes. It's a bit confusing though, who invokes the validate() function from where and when, but I did ask google and there seem to be quite a few examples... Thanks for the tip!!
That information is gold. Thank you! Puts a lot of light where there was none. I'll blow up as soon as possible then and right right right, we want to be type safe :D
tag
BTW, you might find /r/learnjava useful as a place to ask these sort of questions! Don't feel you're "stupid". Programming is a skill like any other, only learned well through purposeful exercise.
Just a thought, but you might find /r/learnjava to be a helpful place to ask this sort of question in the future.
Given your current skill level with Java, you might find /r/learnjava to be a helpful subreddit.
Everyone was at one point.
I've actually never professionally used Hibernate. All of the pure Java jobs I've had have used either raw JDBC or MyBatis. Would that automatically disqualify me?
Very strange indeed. I just wanted to make sure that a newbie coming along didn't read you post and think they could force a garbage collection. Of course I could be wrong for some implementations, or perhaps the implementation you had took the system.gc suggestion far more seriously than others do?
Nope, as long as you're aware of what Hibernate is, and why it's used. Other candidates, however, might have an edge by having used Hibernate. You did say you've never used it professionally. What about personally? That definitely counts in my books (in fact, I highly value people working on personal projects).
Good to know.
Maybe make something that can help you in your life, like something that helps you program. A mind mapping tool for instance! You could save your mind maps to an account 
This is a mouth-full, and it's a lot easier to *see* than it is to read about because it's actually very little code. It's just a simple concurrency model. If anything is unclear or if you think something can be done better, please... I'd love to be able to talk with someone about this. As you can see, though... the code is a fraction of the size of the explaination, which I think is a great working example of how queues apply a "KISS" principle to threads. --- First, imagine a producer/consumer scenario where you have (E) a high-level executing class which holds your queues and executes threads... (PL) an infinite amount of low-level producer/listener threads which run forever, listen-and-respond to external triggers, then pass a result to (C) one to many consumer threads which take data from (PL) and either pass it to a (W) worker thread, or process it into data of some other type which they then return to (E) as "completed work." This quarantines the effect that a nasty little (PL) thread can have on any other thread which relies on its future. Threads which listen for ServerSocket.accept() are a perfect example of (PL) type threads because you never want them *not* listening and you don't want them stuck doing any kind of data processing but they're still producing socket connections, and if you build classes on top of their Future&lt;Socket&gt; then (PL) becomes a sort of "prima donna" thread that forces everyone else to wait for its beckon call. While threads which pass connected Socket objects to some messaging class or data retrieval class are a perfect example of (C) type threads because they're consuming some object and doing something with it or passing it onto someone who cares (maybe port 5555 goes to a different class than port 6666). Threads which fetch data and convert it into some kind of wrapper object are a perfect example of (W) worker type threads... or you can just return that data to (E) since it's not doing shit at this point. It has its legs up on its desk while (P), (PL), (C), and (W) (or whatever else you have) do all the work. **This makes low-level threads depend on their executor, and not the executor depending on low-level futures... which is better class hierarchy imo.** See how complicated these stupid concurrency problems can get? --- What the queue does is decouples threads from each other and avoids the problems of how future.get() blocks. Actually, it decouples threads from almost *everything* except a single high-level executing class. They exist as these kind of independent entities that can communicate with each other through their executor without affecting anything else in your system. Consider this unusable code when you have infinite, nondeterministic threads: for (Future f : futures) { f.get(); } If the first future never returns then you're boned. What if one of your ServerSocket listeners never gets a connection, while the others have connections they're waiting to pass on? Channels do solve this, I'm not denying that but (I could be wrong) I think they poll in the background, which is a lot of wasted overhead, and the code is still ugly and confusing. They work, obviously, but I'm of the opinion that a simple queue works better. LinkedTransferQueue is a **brilliant** and under-appreciated data type. Whoever/whomever designed it a hero, as far as I'm concerned. The queue is first-in-first-out, and calling queue.take() will block until an element exists to take(), so threads which consume from the queue have a single responsibility to do just that. There are better ways to solve this so your queue.take() thread isn't just "asleep" but at that point you might as well use Akka I guess. You could also create a thread whose only purpose is to queue.take()... you could also spawn paired threads whose only purpose is to future.get() their Callable partner... which would give you superior exception handling, but added complexity and twice as many threads. Sleeping/waiting threads don't tax a system, though... polling threads do. I hate polling. --- The fori loop isn't the best way to use this concurrency model, it works better in a while(condition) with support for external interruption, but it still works with a fori (as you can plainly see). Consider you have x number of threads, but only x-1 threads return a value... your mediator will just sit there waiting for the next queue entry that will never arrive (this leads into a bigger discussion of thread regeneration and persistence). But with a while(condition) it can just pass its results off to another class as they arrive, and your data processing logic doesn't suffer (ie: say after every 3x dice rolls that main method passes the result as new ResultHandler(diceResult)). In essence what the queue does is free your higher level classes from relying on your lower level classes to return a future, or return anything at all. Just give them work to do and act as a conduit between your producers and your consumers. It also removes polling, and it's pretty easy to see how the model works at a glance. This also lets you spawn new threads based on an event trigger. As long as you **trust** your threads are able to do what they're told then it simplifies a lot of problems. If your low-level threads fail then your higher-level classes can give no shits and just make more dumb threads. --- To be honest, though... this works better with **two** queues and multiple "types" of threads: spawn threads that messagingQueue.put(T) data, other threads that T t = messagingQueue.take() data - aka: producers/consumers. Then your consumers can process data of type T into data of type E and return E to the higher level executing class in a "completedWorkQueue." The executing class can then just monitor its completedWorkQueue with queue.take() and when it gets *these* results then a contract is satisfied and it can pass the data off to be processed by some other class. No polling, no wait/notify, no callbacks or notifications, just a workhorse queue. Just give threads some work to do and as they do it THEY CAN BE THE ONE giving it to a class that cares without making it wait for all the low-level bullshit. Higher level classes relying on lower level threads vs lower level threads working to satisfy their contract with a higher level class. It shifts the responsibility and makes low level threads more disposable. In addition, your threads are also now almost strictly required to adhere to single-responsibility principle. At least, this makes it easier to apply single-responsibility principle. It definitely decouples them from each other and also frees you from having to deal with so many synchronization issues. As you can see from your example, the threads have only a responsibility to roll some numbers and write down a sum. Threads should be dumb and disposable like that. --- Thread (A) puts something into a queue for processing then continues listening for more triggers. Thread (B) either takes that something and doesSomething() with it... or thread (B) is busy... in which case the something is just sitting in the queue not bothering anybody until either (B) is ready or some other available thread can pick it up when it's ready. Do you use Observer/Observable at all? This is like taking that pattern, flipping it inside out, and throwing a hundred thousand threads at it.
Here is one way to do it. public class CalcPiBigInteger { public static void main(String[] args) { System.out.println( "Calculating pi..." ); System.out.flush(); System.out.println( calcPiBigInteger( 1000 ) ); } public static BigInteger calcPiBigInteger( int digits ) { // Numbers scaled to one. final BigInteger one = BigInteger.TEN.pow( digits ); final BigInteger two = one.add( one ); final BigInteger four = two.add( two ); final BigInteger oneSixteenth = one.divide( BigInteger.valueOf(16) ); long eightN = 0L; BigInteger oneSixteenthToNPower = one; BigInteger pi = BigInteger.ZERO, oldPi = BigInteger.ZERO; //int n = 0; while( true ) { pi = pi.add( four.divide( BigInteger.valueOf( eightN+1 ) ) .subtract( two.divide( BigInteger.valueOf( eightN+4 ) ) ) .subtract( one.divide( BigInteger.valueOf( eightN+5 ) ) ) .subtract( one.divide( BigInteger.valueOf( eightN+6 ) ) ) .multiply( oneSixteenthToNPower ).divide( one ) ); if( pi.equals( oldPi ) ) { // Trim off one inaccurate digit. pi = pi.divide( BigInteger.valueOf( 10 ) ); break; } oldPi = pi; //n += 1; eightN = eightN + 8L; oneSixteenthToNPower = oneSixteenthToNPower.multiply( oneSixteenth ).divide( one ); } return pi; } } Here is another way public class CalcPiBigDecimal { public static void main(String[] args) { System.out.println( "Calculating pi..." ); System.out.flush(); System.out.println( calcPiBigDecimal( 1000 ) ); } public static BigDecimal calcPiBigDecimal( int digits ) { final MathContext prc = new MathContext( digits+1 ); final BigDecimal one = BigDecimal.ONE; final BigDecimal two = one.add( one ); final BigDecimal four = two.add( two ); final BigDecimal five = four.add( one ); final BigDecimal six = four.add( two ); final BigDecimal eight = four.add( four ); final BigDecimal sixteen = eight.add( eight ); BigDecimal eightN = BigDecimal.ZERO; final BigDecimal oneSixteenth = BigDecimal.ONE.divide( sixteen, prc ); BigDecimal oneSixteenthToNPower = BigDecimal.ONE; BigDecimal pi = BigDecimal.ZERO, oldPi = BigDecimal.ZERO; //int n = 0; while( true ) { pi = pi.add( four.divide( eightN.add( one ), prc ) .subtract( two.divide( eightN.add( four ), prc ) ) .subtract( one.divide( eightN.add( five ), prc ) ) .subtract( one.divide( eightN.add( six ), prc ) ) .multiply( oneSixteenthToNPower ) , prc ); if( pi.equals( oldPi ) ) { // Trim off one inaccurate digit. pi = pi.round( new MathContext( digits ) ); break; } oldPi = pi; //n += 1; eightN = eightN.add( eight ); oneSixteenthToNPower = oneSixteenthToNPower.multiply( oneSixteenth ); } return pi; } } I don't have the formula's handy, but it seems someone has posted them. I wrote the above two for fun in 2011.
http://roncemer.com/software-development/java-ocr/ Maybe this can get you started, found from [here](http://stackoverflow.com/questions/1813881/java-ocr-implementation)
I'd look for a Android OCR Library ([Optical character recognition](http://en.wikipedia.org/wiki/Optical_character_recognition) ) - that would convert image to text (though not always 100% right). Then you'd have to convert the text to the items list. I'd say possible in Java/Android - though OCR can be CPU intensive 
Actually, you're right. But that's not necessarily a weakness in Java, it's a failure of foresight. Choosing the wrong tools and frameworks can be a killer.
Thanks a lot! I will be checking this out tomorrow. Excited to see if I can make my own version after studying your source codes. Cheers
&gt; microservices Didn't we use to call these portlets?
And that is why I love programming. If you know how to do it, the possibilities are limitless.
I will. Thanks a lot!
A good game that uses Java doesn't tell me much about how good Java is for game development.
Actually, I think we used to call them EJBs. If you package your services into separate EJBs, don't package them all into one EAR so that they are separately deployable, you could probably achieve the same effect. But in these modern times, EJB is a bad word.
Unchecked exceptions should only be used if it is due to a programming error and is 100% avoidable. The manner exceptions are handled in an application and api are viral. If you use tons of unchecked exceptions incorrectly, and the user of your application needs a stable environment, it will be incredibly difficult to achieve.
Sure but I consider this an "implementation detail". From a user perspective you can now use method as values: you can pass them around as argument to other methods, store them in variables and return them from another method.
It isn't an implementation detail. What is the target type of the expression? It isn't a function. It is the SAM type. It's no different then passing around a reference to an anonymous inner class. For a language to have first class functions, functions have to mean something to the language. For example, Scala also implements function references as implementations of an interface, but Scala doesn't use target typing. The Scala language understands what functions are and Scala provides tools for manipulating functions *as functions*. Scala understands functional concepts such as partial application, currying, etc. Java 8 converts the method reference to the target type and then it is business as usual.
Thank you, this will be super for me. Just subbed
It looks like its really JAX-RS heavy from my browsing
I would check out mule for your middleware it might save you a lot of time.
What I said basically amounts to your first sentence -- any error that they can't reasonably react to in their code will be a programming error, so I think in that way we agree. That being said, unchecked exceptions are quite common. InvalidArgumentException for example is unchecked. Likewise asserts throw AssertionErrors, which again are unchecked. Libraries like Guava provide whole collections of invariant checks that throw RuntimeExceptions. I think it's safe to say -- most people, if they are writing their code carefully, are using tons of unchecked exceptions. 
thanks good Sir! I'm excited at what I can potentially accomplish in the future and these comments are helpful in finding what I need
Thanks for the great info. A couple of questions. Is there an advantage to using Android native code over Cordova? Because cordova seems like a no brainer. How is the job market for both? Are most companies looking for pure cordova developers or do they prefer Android native coders? 
The first place to start, is actually an app server environment first and foremost. Choosing if you are gonna run in jboss, glassfish, tomcat, or something else is probably the first place to start. Once you get that up and running (google and youtube will be your best friend in that first endeavor), you can then start on creating a web service from scratch. Really, there are two ways to do this, one is by bottom up web service, and one is known as a top down web service. Bottom up means you are starting with a java pojo, and you'll let the generation tool create you a WSDL (WSDL = Web Service Definition Language, think of this like the contract between an app and service. This is an important, important, important concept to understand. Please read more or send me a mail to ask why!) from the pojo. Or, you can start with a wsdl, and let that generate your pojo's for you. There are camps for either approach (I prefer bottom up because you can add behavior methods on your pojo where with top down you can't because it always regenerates the classes for you), however the easiest to learn with is Top Down. You'll create a Dynamic Web Project in whatever tool you are using (Eclipse, Netbeans, etc). Just name it, you can create an EAR file if you want, but with Jboss or the other app servers, you won't need it. In a websphere environment, you will. Just an FYI, an EAR is just a repository, think of it like a zip file that'll package all relevant EJBs/WARs (web application repository and enterprise java beans) into a small(er) bundle that you specify in the EAR application.xml. Inside of the WebContent folder created in the dynamic web project, you'll create a folder named wsdl, and you can start from there on how to create your wsdl (once again, plenty of tutorials online.) If you are developing this all on a windows box, I would highly, highly, highly recommend picking up a software package known as SOAPUI (http://www.soapui.org/). It's a piece of software I use often with webservices, to be able to test your web service functionality. As far as EJBs are concerned, start off with a non-ejb backed web service, and then after you get that down, move to an EJB backed web service if you want it. While with EJB 3.0 it is easy to create an EJB (yay annotations?) EJB 2.1 and older were a pain in the ass, so depending on your company, I would just do a plain old web service for now to start. Start off with a very easy method, one that just executes a sysout of "HI I GOT HERE" or something like that. Then move on to connecting to layers, etc. From there, on how to organize your classes is up to you. You can make a DAO jar (or package in the WAR) to separate out your classes, the freedom is for you to decide at that level based on your company's standards (those are important and you should ask them). You also will want to think about data persistence technologies (Open JPA, Hibernate, or Straight JDBC). They each have advantages and disadvantages to them, so you'll need to once again find out what is used and what is not. Now, this is all if you are forced to do WS (and for updates operations, I think WS works better or is at least more structured). if you are doing purely retrieves, I would recommend Restful webservices (JAX-RS). We are still working at bringing this into my current company and standardize it there, but I believe for retrieves JAX-RS is better overall as it can be simpler, and slightly more lightweight (JSON vs XML serialization). Feel free to ping me on here if you have any other questions. I've worked on web services for a short time, so I know some of what they are about. Have a good night, good luck and god speed! ***EDIT*** Keep in mind, it is not my goal to answer every question you have here either, but to nudge you in the direction you should start looking at. There is truly something gained out of learning this all on your own with just a slight nudge in the right direction.
Cordova/Phone gap can be pretty hard to get performance out of based on my experience.
Http headers, including cookies, are sent at the start of the communication, so you need to set them before opening the connection. The UrlConnection is already past this point if you've already gotten cookie data from it.
Is there a way to close the connection and then send the cookies?
I don't understand this account. Are you some sort of pro-.NET-anti-Java troll? Why is this even a thing?
Well that answer's my question!
Was just wondering if there's a fallback functionality because asp.net webforms will work without JavaScript.
Develop 2 apps &lt;shrug&gt;