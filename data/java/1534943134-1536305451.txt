[removed]
I had the same experience. I was also searching for web frameworks but I found none so I started writing [my own](https://github.com/Hexworks/kobalt). It is rather tiny now but I plan to port most stuff which I use from JavaFX since I really like that programming model. 
From a *type* perspective, there's no difference between a class and an interface. The distinction between the two doesn't matter with generic type bounds, assignment and compile-time parameter binding. From a *class definition* perspective, classes and interfaces are very different.
A main advantage would be that you could write your business logic or data objects as a multiplatform module. You can then reuse these in either your backend or frontend. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Swing is dying? It still runs quite well on all platforms that Java supports.
This is a question best suited for a more general subreddit, like /r/learnprogramming, or the Java specific /r/learnjava, or the Python specific /r/learnpython. It is not a question for /r/java, though.
Please, once and for all stop the `.hashCode()` war.
It didn't receive and updates in how long? I don't think it is even mentioned anywhere outside of Javadoc anymore...
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've seen some idiomatic Kotlin. It looks nothing like Java. I will downvote all Kotlin posts in this forum.
But then I'd be writing my backend in Javascript. Are you insane?
Apparently [IBM will be backporting updates](https://developer.ibm.com/javasdk/2018/04/26/java-standard-edition-ibm-support-statement/).
Someone associated with this project opened an issue in one of my projects asking to me support it. The person had opened ~20 similar issues in other projects: https://github.com/tipsy/javalin/issues/216. It only has one developer, and a bunch of its badges point to the original repo (written in go). I don't know if it's fair, but all of this made me instantly distrust the project. If you're debating pac4j vs this, for me that would be an easy decision in favor of pac4j. 
It all feels like proselytizing - "have you heard the good news about Kotlin?" Anyway - we've all been down this road too many times - Groovy, then Scala, now Kotlin - always the same arguments. Yes, please go to https://www.reddit.com/r/kotlin and leave us alone.
Bad bot
That golang gopher confused me for a while 
I would recomend going with shiro. Simple to setup and use with spring. Dont use it if you are using guice though.
What’s wrong with that? Not nearly as bad as you think. 😀
Well, do what you see appropriate.
Big Blue stepping up is a good thing, IMHO. The new cadence is upsetting a lot of players, and now that IBM has thrown in with AdoptOpenJDK, the position of those who've chosen not to modularize is much more solid.
Isn't it still just a temporary fix? If the entire ecosystem is moving forward we will eventually have libraries and frameworks with Java 9 as the minimally required version. I don't like the apparent rift that's created between the old world and the new world. Still I certainly don't blame IBM for it, I think Java did too many things at once with Java 9, both the module system and the 6 month release cycle and deprecating and/or removing parts such as JAXB. Oracle always prided themselves that Java updates didn't require flag days, but with Java 9 it feels like they did just that.
There's no need to modularize \_anything\_ to upgrade to a newer JDK version. There are many \_other\_ issues that may make upgrading from 8 more challenging than in the past, but they are typically much more manageable: upgrade to compatible versions of various libraries, replace implicit JAXB usage with an explicit dependency etc...
Synchronized methods is bad design anyway because you're exposing your lock.
The docs are sometimes good with thread safety disclaimers, but the one thing that I wish people would be more explicit about is whether or not a given class or method is blocking or non-blocking. I’m a little more crazy than most, but when I’m using a new library I tend to spend a bit of time with the code to determine if it’s actually lock-free and doesn’t use any blocking io. It’s a bit over the top, but I’ve run into inadvertent bottlenecks in heavily concurrent code before, and it’s nice to know what I need to plan around.
Thank you!
It is annoying. The problem is not about synchronized methods but whether a class as a whole is threadsafe or not. In my own codebase I use marker interfaces (Threadsafe, Immutable) to make these API guarantees explicit. It makes heavily concurrent code (particularly networking code) much easier to understand. 
There is also a minor behaviour change on a few String methods: some will throw StringArrayOutOfBoundsException where pre java 9 you'd get an ArrayIndexOutOfBoundsException. It won't affect any code that catches the parent IndexOutOfBoundsException as documented, but lots of existing code in exisitng libraries catch either one of the more specific exception types. The issue with this is that it will only cause trouble at runtime, probably around corner cases, and the exceptions may escape into a different catch block and make your thing behave differently if running on java 9+. As the String type is probably the most used class ever, I think the exceptions being thrown from it should still be the same they were before, regardless of what the documentation says. As Linus Torvalds says: "we don't break userspace" - but it was broken in java 9+.
Woohoo. I have not even started messing with anything after java 8... I know that no one else on the team has either...
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Why don't JavaDocs indicate which methods are synchronized Java 1.1 API docs indicated it, but it was removed in Java 1.2...
Someone should do an actual, fair comparison of, say, electron, vs javafx. My personal experience with javafx is that it is **not** lightweight by any means.
That is silly to say and adds nothing to the conversation. Synchronization can be used to implement thread safety and thus it does have something to do with thread safety. Synchronization is just a tool, an implementation detail. I assume OP is interested in writing and understanding how and what apis can be used in a thread safe manner. Instead of caring about the synchronized keyword in java docs he should be looking to understand how to keep synchronization from leaking into public apis API. Using private lock dummy objects for instance. 
Interesting! Java went a bit overboard with the synchronized keyword early on.
LTS is a commercial option, at least for the Oracle JDK. For OpenJ9 it looks like there will be a free LTS version.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Mostly because it didn't have better tools for concurrency. `Collections.synchronizedList()` didn't appear until Java 2, `java.util.concurrent` until Java 5, `ForkJoinPool` until Java 7 and parallel streams until Java 8. `synchronized` and `wait`/`notify` were pretty much the only concurrency tools in early versions. Thankfully we've learnt from that early experience and have much better options available that mean they're rarely needed directly.
I was reading the Effective Java chapter on concurrency last night. Those marker interface classifications come from Java Concurrency in Practice, right? * Immutable * Unconditionally thread safe * Conditionally thread safe * Not thread safe * Thread hostile Are there any standard annotations available for those, official or third party? * 
It's worth noting that this news is from April, so this position has been known for four months.
&gt; replace implicit JAXB usage with an explicit dependency I still haven't been able to get our projects compiling with JDK because of the missing JAXBException, and I've been trying for two days now. Added the bind/api/impl dependencies in the build.gradle, still no dice - although the build log even shows it includes the lib jar. I'm stumped.
javax.annotation.concurrent net.jcip.annotations
Cheers. 
Yes, that's their statement from April. What is still not clear is how this will work in practice. Up until now it's been simple: Oracle were the OpenJDK project lead and handled development of all fixes and patches. Very easy for them to upstream code into the relevant OpenJDK project. Taking JDK 8 as an example, when we get to January 2019, Oracle will resign project leadership and someone else will need to take this over. Most likely this will be Red Hat. They then need to decide whose backported fixes they use in the project, their own, IBMs, Azuls. etc. If IBM, Red Hat and Azul all do their own backporting we will end up with potentially (slightly) different JDK behaviour. It's probably not something that will cause many issues but it is worth thinking about.
It's not. But electron brings with itself 300-400Mb of browser just to exist, and then however more RAM it needs to execute JS. And with JFX you need to explicitly try to use over 100Mb of RAM on GUI, even with multiple windows
you're both idiots.
Why is your code provoking exceptions rather than _very cheaply_ testing that the String is large enough in the first place? The JIT should be very good at folding or even entirely eliding the different bounds checks. That said, yeah, it's unfortunate this behavior changed, even though allowed under the documented specification.
Did you try the JAXB dependency used in this guide: https://medium.com/criciumadev/its-time-migrating-to-java-11-5eb3868354f9#73af ? Some bundlings of JAXB has historically been split in an API bundle (containing exceptions, annotations and interfaces, but no implementation), and in implementation. Here you'd typically needed the API dependency to build, and both at runtime. Sounds like you might have tried building without the API dependency?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We've released a new article about "Where RuntimeExceptions come from?". We've dug deeper into our data to find out more on this specific exception type. You can have a read if you're interested: https://blog.samebug.io/where-do-runtimeexceptions-come-from-8fcdcbd00427
Speaking about my case: Performance. In my case every time a character is appended to a value being parsed. A large value, with millions of characters, will cause the appending method to be called millions of times. Testing wether the string is long enough on every append operation means executing an extra step the same exact number of times (i.e millions of times). By catching the exception you remove the overhead of that length test and instead expand/retry half a dozen times on the first few large values. Then never again as the buffer gets large enough. That's internal to my lib and not general purpose code where readability comes first. We go to extra lengths to make it as fast as possible and it currently has the fastest CSV parser for java among any other I could find.
I'd consider it a performance bug in the JIT if removing a trivial, explicit bounds check is more performant. Properly done, explicit bounds checks establish invariants ("the index is always within bounds") that should help the JIT optimize away any implicit bounds check (and any related exceptional control flow). 
The thing is that the index may be occasionally out of bounds. Not sure how that bound check statement can be safely removed. Anyway, I tested the code before and after switching to catching the exception and it became faster so that's enough justification for me to keep the code not explicitly checking bounds.
I'm sure a friendly compiler engineer would love it if you could contribute a reproducing microbenchmark... ;-)
&gt; Because that should be an implementation detail not a part of the public API for a class. Can one drop-in a non-synchronized version of a class at runtime and have the method call still work, or vice versa? (Don't have a JDK here to test, or I would just do it myself.) 
It is nice to have the longer support window to upgrade to 11, considering how long java 8 has taken to be adopted
Wow, you're a fucking idiot. You're being told where and what you did wrong and you keep doubling down on your idiocy. 
I still do firmly believe that at least one part of the new release cycle is a money grabbing scheme. With the fast releases, paired with the sentiment of only putting bug fixes into the next release, you basically *have* to buy the LTS version from Oracle...or go to a different vendor.
Azure. It has MongoDB itself and CosmoDB, a Microsoft product that offers a MonggoDB compatible API.
Azure, Google cloud, AWS or as well buy a VPS and install necessary soft. 
I really like Java... But it just doesn't seem like a good fit for that particular use case right now. I think the AOT compilation will help a lot and make it viable, but I don't think there's anything wrong with acknowledging it may not be the right tool for the job. 
Yeah, I definitely agree that AOT would make things much better, right now there is a bunch of overhead which can really get to you if you are not careful. However, once the Java code has been compiled and has been running for a while it is actually really fast and performant.
I am going to take some time in the future to check out GraalVM since a few others have suggested it.
Never heard of it -- what's it do? How does it compare?
https://www.graalvm.org/docs/reference-manual/aot-compilation/
Have you used it for AWS Lambda? iv been looking everywhere to help with Lambda cold starts, kept seeing Progaurd mentioned but its a pain to get it working so I stopped trying. 
Maybe a silly question - but any downsides to using this library with Scala instead of Kotlin/Java? I use Scala in my day job and enjoy it - so wanted to try Javalin out using Scala.
Tried this today, we are moving to java 8, everything worked except for this missing class 'com.lowagie.text.pdf.parser.PdfContentStreamProcessor' I am not sure what your goals are but if u wanted to support this class I would be happy to help
Yes, it is an implementation detail. However, one should better define objects' behaviour with respect to threads of execution. There are ways of doing which are far better than stamping "synchronized" automatically in javadoc. 
Would you also wanted the javadoc to indicate things like this? public void myMethod() { synchronized (this) { ... } } 
I know you're probably just using `this` as an example, but you are better off using a dedicated private lock field if you're going to do this so that external code can't hold a lock and cause deadlock/livelock problems. (Using lockless classes/algorithms is even better)
I would recommend going with Soteria. Trivial to setup, and good examples. Easy to extend too. Don't use it if you're using Spring though.
Great! Yeah I think it should be fine...
Let me know how it works out!
&gt; Be careful with your words, they can make you an ass. Your words make you an idiot. &gt; thread safe like Hashtable jesus fuck, go fuck yourself. whoever you fooled into paying you, you're ripping them off, you have no fucking clue on what universe you live in. &gt; Thread safety is not a design, it's an attribute. go to a farm or something, don't fucking touch a computer.
Nope, you'll be fine. You could install both side by side if you wanted, too. 
Java is for the most part guaranteed backwards compatible. So if you have Java 10 installed Java 8 code will run just fine. There is one "gotcha" - in Java 9 they deprecated a bunch of esoteric, experimental or unsafe parts of the standard java distribution, and made it so that you have to optionally declare them on the command line if your code makes use of them. Best thing to do? Just try it. If it throws an error, just google the error and someone out there will tell you how to make it go away (usually by declaring that your code uses one of these deprecated/unsafe modules). If your interested in learning all about what they removed read up on "Project Jigsaw" which was an effort to modularise Java - and is what allowed them to remove the bits of Java that they wish had never been released. Worst case you can install Java 8 alongside Java 10 and switch between the two using a Java version manager - like "alternatives" or "jenv" (google them)
I wish JavaFX would render to a browser with HTML/JS/CSS as an option to React and all the bloated node js dependencies. We also consider it to be a dying platform, last time we heard Oracle wasn't giving much support to it, or I heard wrong?
Ugh and it’s in a standard window just like everything else. I painfully made the switch from Eclipse to IntelliJ recently and I can’t see *ever* going back. It just feels so much better. 
People still use eclipse?
Sadly yes, there are a number of people who have not heard of our Lord and Savior IntelliJ.
&gt;downvote because eclipse. /rs &gt; &gt;edit: you guys can't take a joke. They are bitter, old Eclipse users clinging to a fossil.
I'll be honest, the WindowBuilder plug-in for Eclipse is lightyears ahead of IntelliJ's Swing builder.
Nice feature. I typically have the class outline view open next to my editor in Eclipse, but this looks like I might swap it over. 
Our shop switched to Eclipse because we were growing and we had a limited number of keys. And then several months of BAU in Eclipse, the IJ Community Edition came out. So now we’re officially Eclipse but we spend all of our time fixing IJ.
&gt;I'll be honest, the WindowBuilder plug-in for Eclipse is lightyears ahead of IntelliJ's Swing builder. There are inevitably a few things that may be better/easier in Eclipse. But for 1 thing you can name in favor of Eclipse, you can name 99 things that are far superior in IntelliJ. One thing I've learned, is that it's
I never really got that sentiment. To each his own of course, but I've tried IntelliJ a few times, and it wasn't any faster or better in any way that I could detect. Perhaps it's the kind of projects I work on (typically libraries and backend server applications). In any case, recently upgraded to Eclipse Photon and am very pleased with performance, stability, and feature set. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/99tgao/flyway_sql_validation_in_a_callback/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What?
I like netbeans 😀
I like the smaller download size!
&gt;I like netbeans 😀 My condolences.
I use intellij, netbeans, visual studio code, pycharm, vim. Love em all.
https://youtu.be/BmvLexamrmk
forgot the /s
That doesn't work particularly well either, because you end up with a lot of duplicate boilerplate that just slows things down even more. This is already an issue in JS and would only be worse in Java.
Live templates have contexts associated with them, and will only work in these appropriate contexts. Are you sure you're somewhere in the code that is appropriate for the statements?
It's more in the little things. The shortcuts are more consistent. The autocomplete is a lot smarter and often suggests stuff where I wonder how IntelliJ would know that. Hard to find examples for that. I've worked on three projects with Eclipse and IntelliJ and in both cases Eclipse spent ages building and updating maven modules while IntelliJ only took a couple of seconds. On one project though our maven structure was apparently so complex or weird that IntelliJ would sometimes randomly be unable to compile code which was completely fine. We never found a solution for it apart from resetting all caches and rebuilding. The debugger is better and uses less space. The dark theme is great although Eclipse is getting there. The tomcat integration is simpler and just works. The spring integration is awesome, linking Beans to their implementation, showing you all endpoints for a Spring Boot process. When you configure your database in IntelliJ it will help with SQL statements in your code and even link entities to tables. There's probably a lot more which I can't think of. I would need to go back to Eclipse and find all the little things that are missing. To be fair, there are some features which Eclipse has had for ages that are still missing in IntelliJ. Variables in run configurations is one which I've been sorely missing. You can't alter the classpath of a run configuration at all which has been a great problem for us when switching from Eclipse. Due to the different approach there isn't really a "problems" view per se (there is something like it but it's different enough to not support the workflow many eclipse users are used to).
I would look at building a simple jersey web service. There are hello world tutorials.
Container orchestration using docker+K8S. And One NoSQL DB
If that was the case then I'd good to go. But we're using MQTT for communication. We don't have (m)any frameworks for that.
OK, so if you have a build server, learn how to write a jenkinsfile (or whatever build server), learn how to write the docker file and Helm chart. A plus is always writing a configmap. Thats in the end much more complicated then the service you write. Which framework you usw? I suppose Spring Boot?
Jenkins file still learning. Dockerfile I've above average mastery with that. No idea about configmap. For writing the service I feel a little bit rusty in handling application crash, restarts. Problem is I've to use MQTT for communication and we don't have (m)any frameworks for that
Are you on GCP? Then I would suggest to use PubSub. For client Paho. Configmaps let you change thinks in your Service even after provisoning what is pretty cool. Restarts and so on are tricki, therefor you should doublecheck your readiness and liveness probes, also actuator endpoints are good. Before giving the service to jenkins, you should test it with different resourses in your docker Container. Therefor you have to know that spring services take a high amount of RAM when booting up.
Probably a detail to put in the original post don’t you think ?
True!! I was under the impression that in general microservices go beyond the idea of HTTP communication. But I'll do that.
Yeah but you asked for a project a junior dev can understand in 3-4 hours. A microservice at a basic level are just apis and Jersey is easy to work with and spin up quickly. It sounds like you are asking for something more in depth maybe ?
We are on Digital Ocean. Using VerneMQ + Paho Java. Configmaps are cool I always wanted something similar to Hot Swapping. Any resource you'd suggest to hone my craft of restarting java app.
You should take a look at GraalVM
It's interesting to see explicit support for Alpine and the musl C library. I'm sure it's not new and probably not supported to the same level as glibc, but it's definitely nice to have.
(Formatting) My tips: * Use OpenJ9 instead of Hotspot for development * If you use Hibernate, set `hibernate.ddl-auto=none` instead of `update` * Set vmargs to `-Xquickstart` if you use OpenJ9 * Set vmargs to `-XX:TieredStopAtLevel=1 -noverify` if you use Hotspot, * Use IDE build instead of Gradle build * Use `undertow` instead of `tomcat` * Dont abuse annotation processing tools (mapstruct, immutables ...) which will slow down build process
What software for data visualisation do you use? 
Huh, have they accelerated the ratio of new versions? I wasn't expecting a new eclipse until june. Neat feature, btw, it was about time the added to it.
I was quite surprised about it too. Milestones every 6 weeks now, and only 3 milestones until an RC. They call it the 18.08 train now. The new and noteworthy per milestone also seems to have been replaced by a single document to which they constantly add.
This gonna be fun at work and their proxies. It seems we're gonna have to pay attention to the new roadmap.
Yes. Use the best tool for the job.
Really solid guide right here :)
Un compendio superlativo! E poi hai citato anche Jooq! 
I've grown very fond of that feature in Visual Studio Code. Nice to see this also in Eclipse, soon
Oh crap, how on earth did that slip in there?? 😨🙈 Will fix soon, thanks for the pointer :)
Sure :D Let me know what you replace it with, I'll update my guide accordingly (Just wanted to show a very quick example of JooQ/Crud without any performance considerations etc.) &amp;#x200B; &amp;#x200B;
My pleasure! My perspective is that I don't really like ORMs precisely because of inadvertent query messes (as mentioned in other comments); I prefer the direct control. There has been a lot of motivation for me to find good utility methods to make that code easier to write.
Go on
I would prefer a "quick map" similar to the quick outline (Ctrl-O). I don't need the map open all the time, but it would definitely be useful as a popup navigation aid.
Note, it wasn't JUST fixing up the API. Java 9 also added a bunch of restrictions around reflection and a few other things to boot. Any "Not doing unsupported things" jar will be fine, but there are a lot of libs out there that do unsupported things.
As is suggested in [Java Concurrency in Practice](https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601) Which should be required reading before anyone decides "I want to Thread" in java.
Some views can be 'duplicated' and 'pinned' to a selection (properties view for example. I hope this is the case for this Minimap view. You can also open two (or more) windows for the same workspace (the editor area and views are duplicated). In fact, I don't care I use the quick outline. Eclipse views are great, you can arrange them as you want. It is even possible to take a view and move it to another screen.
[Java version history](https://en.wikipedia.org/wiki/Java_version_history).
Yep, I would never want to go back to pre-Java 8. And every time I go back to Java 8 code there's always something nice in later versions that I wish I could use. 
Yeah, there is so much there, it is almost a new language. I'm often finding and showing my team new methods and techniques with 8 because there is just a lot of them. It has heavily impacted the code I write.
I'm the same as you. The cleanest JDBC wrapper I have found is [fluent-jdbc](https://github.com/zsoltherpai/fluent-jdbc). Straight from the docs: DataSource dataSource = ... FluentJdbc fluentJdbc = new FluentJdbcBuilder() .connectionProvider(dataSource) .build(); Query query = fluentJdbc.query(); // ... use the Query interface for queries (thread-safe, reentrant) And then you can do nifty things like: query.transaction().in(() -&gt; { query .update("UPDATE CUSTOMER SET NAME = :name, ADDRESS = :address") .namedParam("name", "John Doe") .namedParam("address", "Dallas") .run(); someOtherBusinessOperationAlsoNeedingTransactions(); // ... more queries, all rolled back on exception }); All resource management is taken care of, no threading issues, works with connection pools (just takes a `DataSource`) and you get named parameters for free. If you don't want SQL in your code, you could externalize it with [ElSql](https://github.com/OpenGamma/ElSql). I find those two things cover most of my database needs.
How is that not a correlated subquery?
Yeah, there are tonnes of these little improvements to the language over the last few years that just make things that little bit nicer. It's hard to keep up with them all. :)
This. I've had a few programs fails to run due to these restrictions. 
&gt; Thread safety is in the Milky Way and mutexes are in the opposite corner of the galaxy. 46 billion fucking light years away The galaxy is more or less circular and doesn't really have corners. And it's diameter is only about 100,000 light years. The rest of your argument is also asinine.
I used to redeclare it with a different name instead, i.e. try (Connection cxn2 = cxn).... This is a minor but nice improvement. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This kind of informative and civil exchange and amusing mea culpa is one of the brighter sides of Reddit. Kudos to you both :).
U
oh, you're an idiot too
What is it about 9 that breaks everything?
Project jigsaw, the Java module system, required a lot of breaking changes.
 var var = new Var(){ public String var(){return "var";}};
Interesting. So `async` is a magic, built-in construct for Kotlin's future type? Or is something more complicated going on? I see that awaiting all of the events is pretty simple, due to blocking being cheap with green threads (AKA continuations). How would the case where you want to capture the first event that completes work? &gt;With regards to backpressure, wouldn't the point be that with fibers all calls are synchronous, which means that async backpressure isn't needed? That might be true, though I'd have to make sure there aren't any gotchas lurking in the more complicated stuff. I think preserving/abandoning order while parallelizing operations (ie. `concatMap/flatmapSequential/flatmap`) might still be tricky, though it's possible I'm just not familiar enough with Kotlin's continuations. Same goes for some of the memory barrier/atomic variable stuff, depending on what kind of happens-before and visibility guarantees green threads provide. &gt; Finally, if I understand you correctly, your problem-space is such that even if threads were cheap / free and all IO could be done synchronously you would still want the reactive streams abstraction? That is very interesting. I wonder how fibers would impact the reactive streams implementation. It would make the implementation of reactive streams a lot simpler (at least the reactive part), but the backpressure abilities of reactive streams would still be valuable. However, the implementation might look a lot more like Java's `Stream` once you have green threads (albeit one with internal queuing, advanced backpressure support, support for both push and pull data sources, etc.) But the ability to just write your code and have the stream itself handle throttling the upstream is really nice if there's a lot of places where events could pile up. Same goes for the other selling point, the ability to operate over the entire stream with methods like`distinct`. While green threads would make those method's implementations look a lot more like the ones in `java.util.Stream`, some of the complex time-related stuff (eg. `window`) is really nice to have. Talking about this makes me wonder: could you extend `java.util.Stream` to provide all these capabilities and avoid the need for specifically reactive streams? I suspect that you'd probably need a more complicated type to handle some of the concerns I mentioned above, but I'm not certain.
That's a solid description of what green threads provide, but I'm not sure what it has to do with my post. Green threads don't provide complex backpressure or the ability to operate over a series of events as a whole in a nice way - they just solve the "what threadpool do I run this on?" problem (and its related scaling subproblem once you're running enough blocking operations on an elastic threadpool). Not that solving that problem isn't awesome, but it seems like it's addressing a different and lower level issue than reactive streams. At best, it might make implementing the "reactive" part way easier for projects like Reactor or RxJava, but that's going to have a limited effect on users of these libraries like myself.
JavaFX will still be available, just as a separate download from the JDK. Due to this, I don’t see any reason to stop learning it.
Yes. 
Plus, one can easily include the latest version when distributing software, and having it separate from the JDK/JRE means it is easier to contribute to as a component.
I'd consider what kind of learning are you doing. When you learn something, are you learning it a) as a hobby that you really like, b) for exploring cutting-edge academic ideas or c) for profit? If a), my answer is yes. If b) or c) my answer is no unless you have a very specific context that I'm not aware of.
Yes and No. For backwards compatibility there will be an old version in JRE. For new features you will have to import it.
How do you leverage web to build GUIs which can interact with the native OS environment? Besides of course the massively bloated Electron.
It is still alive &amp; i don't find any reason to stop learning of javafx 
Kotlin allows you write it differently.
Quantity != Quality
Community edition is open source, you know. You can check it out yourself.
I don't know what you mean by the "what threadpool do I run this on?" problem, but fibers (they're not quite green threads, as they offer true parallelism) offer a completely different programming model from reactive streams as they allow blocking. Backpressure is automatic because each lightweight thread pulls an event when it's ready, and the blocking queue you use would block the sender if the receiver is not ready (up to the size of the buffer). In addition, operations on a series of events as a whole could be done on "pull-based" queues rather than on "push-based" streams. This model has the advantage of being more in line with how the language is designed (control structures, exception handling) and so allows running existing blocking code inside fibers with minimal changes. It also means that tooling such as debuggers and profilers can see into what you're doing and give you the right information you need. This is not the case with reactive streams. If you prefer working with the push-based model of reactive streams, then fibers won't change much for you, but if you don't like this model, fibers offer the same kind of performance and scalability but with the blocking programming style.
Funnily enough, JavaFX. WebView is a remarkably capable browser. If they can get remote debugging of the WebView browser to the point of being actually useful, JavaFX-on-desktop becomes a *solid* contender vs Electron.
just like Swing!
That's not how I understand it, much like the JEE stuff - I believe it's going to be removed outright. There might be some underlying pieces left behind, but not javafx stuff specifically.
Where'd you get that idea from? Pretty sure it's entirely decoupled, it'd be insane to keep parts in the JRE, worst of both worlds.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9a6zpx/problem_with_oni_support/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It depends on what kind of job you want. If you want to work at a smaller non-software company making internal tools, then javafx will still be used. If you want to work at a software company, then it would he exceedingly rare to find javafx in use.
&gt; Besides of course the massively bloated Electron. you answered it yourself. i hate it as much as the next guy, but, it's here and is preferred by those can be paid just pickles.
&gt; The shortcuts are more consistent. By consistent you mean: they prefer having shortcuts that are meant for dual hand usage. Who would want to press a shortcut while his other hand is using a mouse? Are idea users usually having bigger hands?
Why are you referring to reactive streams as "push-based" when their backpressure model relies on a pull-based approach? Maybe it would help if we make this more concrete? I wrote a short example of a Reactor workflow in one of my earlier comments - can you show me how you'd trivially reimplement that with fibres (complete with internal queues, automatic backpressure, etc.)? Pseudocode is totally fine, since I get they're not in Java yet.
Yea I know why it's popular. But I'm not gonna build a small task runner GUI or any other simple app that requires a 88mb download and 100mb of RAM to run. It's just not reasonable. Imagine if every new desktop app was built with it (we're getting there actually).. What a shit show of wasted resources.
No, they are literally removing JavaFX in JRE. 
But swing will stay ? JRE had a policy of not breaking old stuff.
Not to break old software and if they are moving javafx out , will swing stay ?
Yes
Swing will stay, JavaFX will be removed. I believe part of this is because Swing is much more integrated into the JVM: It has been around as part of the JVM for like 20 years now. JavaFX only became part of the JVM in a Java 7 update, and even then, most people only started using it with JDK 8. There are a lot of utilities that are parts of Swing/AWT, which I wouldn't be surprised if they broke server applications. Things like java.awt.Color, which is used all over.
Probably an unpopular opinion here, but I don't like JavaFX. I find it pretty terrible to work with after working with Swing. Let's start with Layout Managers: In Swing, you have one singular JPanel. You can extend this, and add features, and have a swap-in panel after writing one class. We do this at work to add some debug info to make life much easier: We have a &lt;company&gt;JPanel which adds a few things we almost always use. Since the layout is handled by the layout manager (set on the panel), this works fine. In JavaFX, every layout is a new panel. Even better, they all have a slightly different API! That is just ridiculous. The tables have ObservableValues, which can easily cause memory leaks. As far as I've seen, there is no trivial way to add-in custom drawing code. If I want to write a custom border around a component in Swing, I just implement Border, implement 3 methods (2 of which are trivial) and I have a custom border. I need to draw a custom graphic? Extend JPanel, override the paintComponent(...) method, draw my stuff. Want to custom color a single component? Just setForeground/setBackground and off you go. Due to the CSS in JavaFX, this was a PITA last time I tried to do it. Sure, the CSS makes it a little easier to style everything than a Swing L&amp;F, but as soon as you want to change the coloring on just one single button, it makes life way harder than it is on Swing. I feel like all that JavaFX gets you over Swing is animation (which I personally don't care about at all) and a different L&amp;F, but you could recreate that in Swing if it was really that big of a deal. The IntelliJ L&amp;Fs actually look pretty good, I'd probably rip those out since they are Apache2. JavaFX feels like someone looked at a few pitfalls in Swing (animation is hard, etc), then said "Imma make a new UI toolkit that avoids all of those pitfalls!" then proceeded to fall into all of the ones that Swing avoided. Plus there is no equivalent to GridBagConstraints, so that right there eliminates it as a good UI toolkit. ^(Semi /s on the GBC point)
Swing is *everywhere*. Turning that into an optional dependency would break half of Oracle's products.
on the other hand, people can point at java on the desktop with its abysmal security track record. and they'd be right to not want to have it (yes yes, i know you *dont have to* install it and/or enable browser plugin, but still, people are scared).
Desktop frameworks are not dead or dying by any stretch of the imagination. Enterprise users/server management bolsters them far, far, far higher than the consumer market. Not to mention, web based solutions for mobile is just... ew.
JavaFX was completely moved out in Java 11. Swing will stay at least until Java 12. Then likely will go aswell. [Oracle statement about JavaFX](https://blogs.oracle.com/java-platform-group/the-future-of-javafx-and-other-java-client-roadmap-updates) [CodeFX blog post](https://medium.com/codefx-weekly/java-desktop-quo-vadis-f0803166e36b) &gt; * Oracle will continue to support JavaFX new fixes for Java SE 8 until 2022. * Having open sourced JavaFX and related tools, Oracle is working with interested third parties to make it easier to build and maintain JavaFX as a separately distributable open-source module. * Oracle will continue developing Swing and AWT in Java SE 8 and Java SE 11 (18.9 LTS). This means they will be supported by Oracle through at least 2026. &gt; Playing devil’s advocate, Oracle could do all of the following and still be true to its word: kick JavaFX to the nearest open source foundation in the coming week completely shut down its investment in JavaFX remove Swing and AWT from Java SE 12 and its OpenJDK builds (after March 2019, only paying customers would have Swing) replace the desktop team with two on-call bug fixers I’m not saying they’re planning that (I wouldn’t know) — I’m just saying they could do that without having lied 
Props for an absolutely excellent library, with support and one of the best java tech blog sites to boot! An example to all library creators. 
I've been trying to do something similar with Gradle: &gt; RUN mvn dependency:go-offline -B Unfortunately Gradle does not seem to have a task that downloads ALL dependencies (project and subprojects) defined in the build file without having to copy source files as well. I've tried to write a custom task but without success. Any tips?
I think that's possible in theory, thanks to Webassembly. [CheerpJ](https://www.leaningtech.com/cheerpj/) seems to be the closest alternative available today. I'm also eyeing [Blazor Project](https://blazor.net/) by Microsoft. It's for C# and .NET, though.
Rather than run gradle or maven from inside your dockerfile, just run docker from inside maven/gradle. Build everything you need to build, have docker build from the target directory.
Nice. Wasn't aware of dependency:go-offline.
&gt; Let's start with Layout Managers: In Swing, you have one singular JPanel. You can extend this, and add features, and have a swap-in panel after writing one class. We do this at work to add some debug info to make life much easier: We have a &lt;company&gt;JPanel which adds a few things we almost always use. Since the layout is handled by the layout manager (set on the panel), this works fine. In JavaFX, every layout is a new panel. Even better, they all have a slightly different API! That is just ridiculous I don't really see the problem here, couldn't you do a delegate to do the &lt;company&gt; stuff? This would also be much cleaner instead of relying on object hierarchies. &gt;... Styling is normally done with css in JavaFX. Better separation of concerns, but of course one needs to learn something new. Btw, to change the style of a single button, you just need a single line of code. GridBagConstraints is great (no /s), but javafx.scene.layout.GridPane is an equivalent, with additional features. One other advantage o JavaFX is the full functionally web browser based on WebKit. Of course there are some errors to. For example it is a terrible idea to have the tree item (model) to have view state.
Yes nice tips about the rocker cache, thanks
That example clarifies some of the easier stuff, but how would you implement something like [`window`](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#window-java.time.Duration-java.time.Duration-) from my example? It seems to me that there are a lot of methods on Reactor's `Flux` that would be kind of a nightmare to reimplement by hand even with fibres. Not to mention that modern Java tends to prefer the flat pipelines of streams (as in the `java.util.Stream` kind) to the kind of nested, imperative looping constructs from your example. I could see people who do low level concurrency stuff and some libraries writing code like that, but I find it hard to believe that it'd catch on with average developers given the familiarity and ease of pipelining stream operations. Still, I think you might be driving at the point I made [here](https://www.reddit.com/r/java/comments/96p88f/just_learned_about_reactive_streams_my_thoughts/e4sgazd/), namely that fibres make the "reactive" part of "reactive streams" way easier to implement. With fibres we could expect the internals of a library like Reactor or RxJava to look a lot more like `java.util.Stream` (albeit with support for internal queues, fine-tuned parallelism control, time-aware transformations, etc.). Oh, and just to make clear, I do think that fibers are really cool. The "what thread pool do I run this on?" problem I mentioned is pretty much the "colored function" problem you brought up, and the promise of just nuking that entire snake's nest at once with free "blocking" would fricking rock. Just wanted to make sure that you didn't mistake my nitpicking here for a lack of appreciation for the work you're doing. ;) &gt;As to push vs. pull, what I mean is that asynchronous streams rely on some callbacks that get called when a message/event arrives, as opposed to code that blocks on a request. Ah, I see. Actually, reactive streams are ideally pull based instead of push based, with downstream operations requesting new data from upstream once they have the capacity. While most reactive stream implementations do support push based flows (usually by buffering/dropping/sampling from the source), the backpressure system really works best when nothing is getting eagerly propagated but instead shows up on request. It sounds like fibers wouldn't change that, but would instead make the implementation a million times simpler.
Thanks for the detailed answer! I've been evaluating both Swing and JavaFX for a while, and I appreciate every bit of information that compares them in real-life situations, not only in API beauty. Obviously Swing is stable, bug-free, lightweight and it works everywhere that Java runs. These are *big* advantages. But I need to create custom controls and 2D graphics/animation. :) Do you think Swing is a terrible choice for this kind of stuff?
I write a staged dockerfile. The build stage, which is an image from docker hub that has maven and java, copies everything in. Then it fetches dependencies and builds. Then a final stage, which is also from docker hub and also has java pre-instslled, copies the jar over and has the run command. That way anyone can build the image, even Dev ops people who may not have java installed.
&gt;I don't really see the problem here, couldn't you do a delegate to do the &lt;company&gt; stuff? This would also be much cleaner instead of relying on object hierarchies. With JavaFX, we loose the ability to write one class, then go through existing code and just do `s/JPanel/OurCustomJPanel/g`. &gt;javafx.scene.layout.GridPane is an equivalent, with additional features. I keep hearing this, then I ask questions about "does it have X," the answer is "No" or "I'm not sure." * Can I do the equivalent to `gbc.gridx/*or gridy*/ = GridBagConstraints.RELATIVE;`? I use this all over in basically every UI I write. * Can I do `gbc.gridwidth = GridBagConstraints.REMAINDER;`? Again, I use this in basically every UI I create * Does it have the equivalent of setting `weightx`/`weighty` on a single component? Or do I have to manually figure out where that component is in the panel, then change that row/column? I keep being told that not having these features is a feature in itself, but I'd call it more of an anti-feature than a feature. I use it everywhere, it works extremely well, and not having it just makes life harder. &gt; One other advantage o JavaFX is the full functionally web browser based on WebKit. And I'd like to see that backported not only into Swing, but also into Swing components. The HTML renderer in Swing is ancient, I'd love to see it brought up to date. Is there any technical reason someone couldn't create a JWebView that is just WebKit behind the scenes in Swing? Or is it just "JavaFX exists, just use that."/"We're focusing on Java for the server now." --Oracle &gt;Of course there are some errors to. For example it is a terrible idea to have the tree item (model) to have view state. Compared to Swing, I find the tables in JavaFX pretty sucky to work with. Sure, they have a tree table, but there are plenty of Swing implementations of a Tree Table, not to mention that it isn't super hard to implement. I particularly like my getValueAt() and setValueAt().
Be sure to look at [Google Jib](https://github.com/GoogleContainerTools/jib) also
Furthermore the JDK can be shrinked down to 15 MB depending on what you need of it using jlink (JDK9+). You certainly can get rid of desktop, javafx, corba etc.
Dude, please tell me how can I learn all these advanced stuff about Swing... I have Filthy Rich Clients and Swing Hacks books. You recommend these or another one? Cheers!
I second this, this is what we do
Swing excels at custom controls. It doesn't do so well with animation, but it can be done.
Benchmark results are in (but only for my machine and the benchmark is quite small due to runtime). https://github.com/hageldave/FFTBench
This is just poorly conceived, because it bakes in both the build and the runtime environments into one image. My tips: 1. You probably don’t need to containerize your Maven build. Most likely it’s overhead that gains you nothing. Just package your artifacts into the image. 2. If you do need to containerize your build environment, do it apart from the artifacts. Use staged builds: https://docs.docker.com/develop/develop-images/multistage-build/
1. Kinda redundant, this is for those who decided that “probably don’t” is not them. 2. Did you actually read through? It is a staged build. Seems like you just looked at the sample image (the one I said you /shouldn’t use/)?
Tons of people do.
Wonder what the adoption rate of this version is going to be. We always upgraded our code to support the latest Java versions (since 1.3), But now we’re still in 8. Just too troublesome to update for no benifits.
What do you mean by no benefits? And seeing as this is an LTS release, I would guess the adoption rate will be higher than the past two non-LTS releases.
The biggest part of it is just working with Swing in my day job. When you have ~2 years of fixing and writing UI code (interspersed with other things, of course) you tend to pick up a few things. I'd say probably the biggest learning opportunity I've had with Swing is fixing other people's broken rendering code for custom graphics. At several points in time, previous developers thought they knew better than Swing, and went nuts writing their own components that do wacky things (eg painting outside of bounds) or disrupting the Swing hierarchy. TL;DR: Don't do that. [Read and understand this article before ever overriding any paint() related code](https://www.oracle.com/technetwork/java/painting-140037.html) Swing works extremely well when you do it right, but it can be totally insane when you don't. I'd say the best way to learn Swing is find something you want a UI for, then design and create a UI in Swing. I personally highly recommend GridBagLayout. It can be hard to work with at first (and a little wonky at others) but in the end, a properly written GBL UI will pretty much work anywhere. Works with the GTK L&amp;F on Linux, Metal, CDF, Windows, and any reasonable font size. Always test what happens when you resize anything that can be resized (eg windows). Also, I recommend against GUI builders. They tend to lock you into the specific GUI builder you used, and write shitty code that is basically garbage if you ever have to work with it outside of the GUI builder tool.
This is 100% the correct answer. 
I perhaps should have said too little benifits compared to the huge problems. And from the entire team there’s nobody who’s really like, oh wow, there’s this JDK 9, 10, 11 feature that I just *have* to use. Really different story with jdk 5 and 8, which devs wanted to use eagerly even before their official release. I know there are tons of small refinements in JDK 11, like not supporting JAXB and Corba, but it’s not like; oh wow, I want to switch to JDK11 right away since my code with JAXB looks so cool!
Releases like 5 and 8 can’t really be compared to releases from the new cadence. Those were feature driven. Now, if a feature is ready, it will make it in. Otherwise, it waits and sees about the one in six months.
You could use Apache Camel: http://camel.apache.org/mqtt.html
&gt; With JavaFX, we loose the ability to write one class, then go through existing code and just do s/JPanel/OurCustomJPanel/g. Well this is a quite unorthodox way to develop code. It may solve your problems, but other courses of action are more sound. &gt; GBC x/y/RELATIVE/width When I used Swing I wrote my own GBC helper class which managed x,y, width, height and more automatically for me. This was much more practically than spelling out every coordinate every time. I did the same with JavaFX and RELATIVE and REMAINDER are trivial to implement. &gt; weightx/weighty Well its true, you can only specify arbitrary weights for rows and columns. But I never understood why swing would let me specify the weight for every component, when the weight is shared for every component in the same row and column. &gt; WebKit Porting WebKit is extremely difficult. The WebKit part is half of the JavaFX code base. I doubt there will be ever be a Swing port. What you could do is embed a WebView in a JavaFXPanel. Tables have their good parts in JavaFX to, for example data binding. 
I don’t use Java anymore, I just use Kotlin. 
It is good to see that Java is catching up.
Java has had JSF for a long time.
Just updated the guide with your suggestions. Definitely reads better now. And also mentioned you in the "acknowledgements" section. Thanks!
Be sure to check out the support for transactions coming in Spring Data MongoDB: http://spring.io/blog/2018/06/28/hands-on-mongodb-4-0-transactions-with-spring-data
How does it compare to Dropwizard and Spring Boot for building REST APIs?
I wish it wasn't called "MVC". DotNet folks has ASP for years, then in about 2008 "ASP.NET MVC" came out and recruiters stared posting jobs for "MVC" like the 1978 design pattern never happened and wasn't implemented in a few hundred other technologies/frameworks/languages. 
I disagree with your first point. I want my build environment to be repeatable and well-defined. I don't want the state of the build server to affect my build and I especially don't want other projects to interfere with my build.
In the past, I've run various builds as two separate docker instances. The first as a `docker run` on the build tool, and then a second `docker build` to build the final deployment artefact. The advantage of this is mounting the build tool dependency cache inside the first docker run. The cache is external to your build, but that might be an advantage or a disadvantage depending on your PoV. It's also a few more moving pieces. I've used this with PHP Composer, npm and I think Gradle. 
In fact, TIL that those job postings were not looking for folks that know the MVC design pattern.
Gradle too?
Our ARM based systems use an old version, I think 2011, Tegra with only 512 Mb of RAM and for the latest product generation of X-Ray based material analysis instruments, we use the Raspberry Pi 3 with 1 GB. Usability in terms of both ease of learning and efficiency for the more experienced user are important. Many of our users are typically not scientists or highly trained engineers. We have Java 8/ JavaFX Running on the Pi, which works great. We are invested heavily in JavaFX. It’s great technology that hopefully will continue to evolve along with Java. 
Many of the techniques apply with Gradle too. Alternatively, with Gradle you can use the docker plugin to build the image as part of the build. You basically replace the Dockerfile with a Gradle DSL. It is harder to run the Gradle build under docker though. (You can probably do the same with Maven, but I wouldn't want to read the required XML.)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It is good to see that Java **EE** is catching up. &amp;nbsp; fixed that for you 
Uu, Thorntail is getting some love. Why did you choose Thorntail in particular? :) 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ahxl8/using_static_inner_class_extends_outer_as_a/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
learn both and use a JavaFXPanel within Swing when it makes sense. JavaFX pro : supports multi touch screen It sucks that Swing does not. JavaFX Web browser. Cons Computing string width/height in JavaFX is pretty weird final Text text = new Text("P"); text.applyCss(); return (int) text.getBoundsInLocal().getHeight(); Overall i think the CSS is badly designed in the the GUI model.
&gt; I disagree with your first point. I want my build environment to be repeatable and well-defined. I don't want the state of the build server to affect my build and I especially don't want other projects to interfere with my build. There are some exceptions, but if Maven isn't doing that for you, you're most likely using it wrong.
On [mvc-spec website](https://www.mvc-spec.org/) it says "The MVC API is layered on top of JAX-RS and integrates with existing EE technologies like CDI and Bean Validation.", so I thought they're comparable. So MVC is an alternative to Spring MVC or JSF, then? So how does it stack up against them?
Is it safe to assume that Java EE has a bright future since IBM is backing it up now, even though Oracle abandons it? Most job postings I've seen prefers Spring, but I'm under the impression that Spring architecture is over-engineered. I'd like to invest my time on Java EE unless it's dying, because I liked some of its bits I tried before.
It doesn't matter if there are faster or better hash codes for String. The current implementation is documented in the javadoc and therefore part of the API so isn't going to change.
At this point we need an entire sub for String.hashCode
Sounds like a case of "let's blame the tools". Obviously you messed up. That can happen. Irrespective of IDE.
&gt; So MVC is an alternative to Spring MVC or JSF, then? Yes. The page also says: "The API defined by this specification falls into the action-based category and is, therefore, not intended to be a replacement for component-based frameworks such as JavaServer Faces (JSF), but simply a different approach to building Web applications on the Java EE platform." Using MVC you can choose whatever front-end technology, like Angular, pure HTML5,... converting and validation is done by the developer. JSF handles conversion, validation, rendering, requests and responses. Less to do but also more rigid. &gt; So how does it stack up against them? I don't know them all good enough to make a qualified answer
JSF is component-based. MVC is action-based. A different approach.
How about [JEP draft: Better hash codes](http://openjdk.java.net/jeps/8201462)?
They're both MVC
Never said it wasn't.
How many different variants of MVC frameworks do you need within a bigger framework? MVC missed the boat for EE 8, but I bet they're trying to get back in 9.
Docker can no more ensure all your developers are running the same version. There's no getting around the fact that your developers are going to have to install a development environment. &gt; The best you can do is fail the build if those constraints are not satisfied. And that's pretty good, actually. (For those who don't know about it: [Maven Enforcer plugin](https://maven.apache.org/enforcer/maven-enforcer-plugin/).) &gt; It can't make sure that when developers want to upgrade either JVM or Maven that that version will exist on the CI server. This one is a good argument. But note it doesn't require your developers to run most of their personal builds inside containers themselves. &gt; It can't make sure that satisfying those requirements for one project won't interfere with the requirements for another project on the same server. Having multiple versions of Java installed and switching between them with `JAVA_HOME` is quite standard. Multiple versions of Maven are also quite straightforward to manage. Gradle has [this neat "wrapper" mechanism](https://docs.gradle.org/current/userguide/gradle_wrapper.html) that checks in a pair of scripts (Unix and Windows), a properties file and a jar that will download the correct Gradle version for an individual project. [There's a similar plugin for Maven.](https://www.baeldung.com/maven-wrapper) I'm just puzzled by this idea that somehow installing Java and Maven is somehow much too difficult a task for *a Java developer* to do.
I tried it out a year ago and it uses the same programming model as JAX-RS so JAX-RS developers will feel very at home and enjoy a low learning curve. But in the end I decided against using it and went for for a more familiar solution based on JAX-RS and HTML/JS.
I recommend seeing if there's a JavaScript related subreddit as your post relates to that language more than to Java, which is what this subreddit is for.
How can you compare a strongly typed OOP language like Java to a badly designed, flawed, not typed language like Javascript? It's like comparing a Ferrari to a Lada.
&gt; For writing the service I feel a little bit rusty in handling application crash, restarts. If you're writing a service for a K8s cluster the cluster is responsible for restarting the container. Don't try to restart the application within the container. 
&gt; I realised that I want to learn how a bare-bones Java application handles connection pooling, crash, restarts, and other worst case scenario. You generally don't write a service like that from scratch. Normally you use whatever REST framework you fancy (Java EE, Spring, Micronaut, Vert.x; pick your poison) that handles most of the stuff. And since you're deploying on K8s you should not restart the application inside the docker container; just let it crash: K8s will restart it for you.
You should mention that in your OP
Typescript feels a lot like writing Java to me. And that's why I like it. I do miss having lazy evaluated streams though. The ones in ES6 are eagerly evaluated.
 OpenPDF is a free Java library for creating and editing PDF files with a LGPL and MPL open source license. This release contains these new improvements: * [DSS](https://github.com/esig/dss/) is now able to produce PAdES Baseline Profiles B/T/LT/LTA with OpenPDF. There is currently a [test-branch](https://github.com/esig/dss/tree/openpdf-integration) for this in DSS. The PdfStamper class has been updated with some methods to override PDF headers used when signing the document. [\#95](https://github.com/LibrePDF/OpenPDF/pull/95) and [\#94](https://github.com/LibrePDF/OpenPDF/pull/94). * ImageIO is used to read images. * Updated dependency of Commons Compress to version 1.18.
&gt; With some exceptions? Weird. Why weird? Most people choose these technologies for the hype, not to get actual work done.
Interesting, a 64-bit hashcode. Now we'll need a subreddit for String.longHashCode
It is not RESTful to use verbs in URLs @POST @Path("/create") public String create(@BeanParam TodoForm todoForm) When will the getters and setters finally die? There is no need to create a brain-dead getter and setter for every field in a JPA entity. Especially the ID shouldn't have one! public Long getId() { return id; } public void setId(Long id) { this.id = id; } I've worked in a project where these thougtless inserted methods were used in a business context with fatal consequences for correctness and maintainability of the application.
`Hashtable`? What year is this? Use a `ConcurrentHashMap` if you need its thread safety, or just a `HashMap` if you don't. In this situation, I don't think you need the extra guarantee, as you're only reading from the map. And I think what you've called a factory method is better labelled a factory class. To me a factory method is something like `List.of()` or `Long.valueOf()`, and they should be mentioned, and probably preferred over a factory class where possible.
Why does every tutorial and article about design patters always uses only extremely simple examples? Some real world examples would be unbelievably more useful than AnimalFactory for example. Of course I understand that these simple examples are needed to demonstrate the basic idea behind the pattern but an example used in an open source library would be amazing.
Geopolitics with programming languages, you got my attention.
We have not observed JavaFX causing "random" crashes or freezes during extended periods of continuous uptime (&gt; weeks). On the Raspberry Pi, it may be advisable to closely watch and and perhaps restrict the use animations to an essential minimum, because these consume significant system resources. Overall JavaFX is not as mature as Swing, but we have not had show stopper issues. 
For new projects and GUIs for platforms other than desktop, I would recommend JavaFX over Swing. Swing is designed as a framework for desktop GUIs where it shines. Swing, unlike JavaFX, is not based on a scene graph, which effectively limits it to 2D and makes it more cumbersome even for 2D GUI development. Of course, it's possible to crank out complex GUIs in Swing as NetBeans and IntelliJ show, but that must have required heroic efforts.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I guess they're just illustrating a point but running this every minute seems a bit wrong: for (User user : userList) { user.setAmountOfApiCalls(0); } But maybe this is just premature optimization...I guess if you have enough users for that to matter, you're smart enough to come up with something better. Nice showing how all the other pieces fit together.
Unfortunately, in my previous experience, it won't get EVERYTHING you need.
Java 10 came out in March. Java 11 should be out in September.
No, I was talking about **both** Java **and** EE.
Oh sorry, you are right. I don't know why I mentioned java 10. I really meant Java 11, I will change the post.
My post title mentions Java 10 but I meant Java 11. Java 10 is a typo in the post title and I cannot edit it anymore.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We have Spring and other frameworks and libraries for at least 10 years.
Java 9 is already dead, some of new features are covered in Effective Java 3, Java 10 will be dead next month when Java 11 will be released. I don't think there will be any books about Java10, as it's not LTS version of the language. If any, we should see Java 11 books very soon.
So, would this be a competitor to Struts 2 being action based?
Yes, you are right. I meant Java 11 and not Java 10. I just can't edit the post title anymore. Please if a moderator sees this, change the post title from Java 10 to Java 11.
Yeah, but IntelliJ doesn't.
Do NOT confuse the "portal" concept where one presents a view to disparate enterprise services, with the "portal" products which imply a particular implementation of that concept. I've never seen a project which wouldn't be much better off completely ignoring the JSR-168/268 portal service products, and creating a fairly simple web application which proxies information, either directly through including remote HTML, or by scraping the shitty web interfaces of various enterprise systems, and driving the data through a template which presents various coherent, task-specific views of the big picture.
Effective Java is the bible of the language.
Thank you
Thanks 
Not really suitable for beginners though. You have to have some handle of the language first.
I liked Thinking in Java by Bruce Eckel, but it might be a bit outdated by now.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/9att90/test_your_apis_easily_via_simple_json_steps/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Maven is the same really, and spring boot is quite current (sadly)
&gt; Is Spring still the framework to use? Yes, though JavaEE (now Jakarta) has grown in popularity and is now maintained by the Eclipse Foundation. &gt; Do people still use Tomcat? Tomcat (and TomEE) are still popular application servers along with Wildfly, Payara etc. &gt; Maven? Yes, and Gradle is also very popular. &gt; What tools should I need to know? Really depends on what you need to do. The ecosystem is *huge*. # What's new? A very non-exhaustive assortment of changes: Language: * Lambdas * Streams * Local variable type inference (A.K.A. "var") * Generic type inference * Try-with-resources * `default` and `private` methods in interfaces Platform: * Modules/Jigsaw * JavaFX - a "new" GUI library (now shipped separately from the JDK). Worth mentioning its `base` module is not only for GUI, it contains bindings and built-in observers for everyday use. * OpenJDK (collaborate on Java libraries) and a lot of stuff was made open source (was commercial). * New garbage collectors * New Date-Time API * New immutable/unmodifiable collections API Ecosystem: * Containers (mostly Docker) have become the new thing (for now). * Serverless functions * Java on Android and iOS And *a lot* is planned for the future: * Value types and generics over primitives (project Valhalla) * Replacement for JNI (project Panama) * Fibers (project Loom) * Pattern matching, switch expressions, raw string literals (project Amber)
Someone please explain to me what this library buys you over Jetty or Vert.x?
I researched this heavily recently, as I tried making a Discord clone - which is made in electron - in javafx, because "of course I can make this application more efficiently in java!". Turns out, for an application like Discord, it's just not possible to beat it in java land, too much overhead everywhere. Java just doesn't care about small memory footprint at the moment. These are my takeaways: * If you care about peak performance per cpu in your desktop app for some reason: choose java and javafx. * if your application deals with big datasets that require GB of ram so that the JVM overhead wont matter, and you benefit greatly from threads: choose java and javafx * if your application is small and you care about memory footprint: choose electron. * If you are going to be showing webpages, or web heavy content: choose electron. The overhead of a WebView is effectively loading a browser, and at that point you'll have a browser PLUS java loaded, in contrast to electron, where you already have the browser loaded and you just add a bit more data 
[Java Concurrency in Practice](https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601)
Oh please, troll!
&gt;The npm/yarn package management system is excellent and joyful to use, versus the abomination that is Maven Having used both - no...
Is Swing still more used than JavaFX at software companies?
It looks like in your [submission](https://www.reddit.com/r/java/comments/9avh6c/help_java_says_missing_return_statement_im/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Very, very outdated. It stopped at Java 6. 
Free Java Book Link: [https://books.goalkicker.com/JavaBook/](https://books.goalkicker.com/JavaBook/)
&gt;25 comments So far so good :). Is there any support for things like hot reloading? I'm guessing not as I can't see it in the documentation - and not that I really need it - I was just curious.
Do you mean that you can't use the type double? Can you post the full wording of the question.
What other primitive data type that is similar to double would you be able to use instead? That should push you in the right direction.
Float? They haven’t taught they yet. I don’t want to assume but it’s all I can think of 
/r/javahelp This sub is for general discussions and news.
I love Gradle but I wish they wouldn't pile up more and more features on top of it. Gradle has become so complex that it has become impossible to know in its entirety. 
&gt; ... but this feels like a really weird blog post. It's just JavaScript praising and Java bashing like thousand others, nothing more.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; if your application is small and you care about memory footprint: choose electron. Wat?! Have you taken custom starter settings (`-Xmx`/`-Xms`) and using a different garbage collector into account? I mean, that accounts for Java in general...I'm not a fan of JavaFX.
Not really a beginner's book though is it?
I don't know if I completely understand your concern so I'll try to showcase what my plan is and if I understand you right than there is a big intersection. I am highly fascinated from uncle bob's view on architecture. In one of his talks about his book he emphasize that it is trending to take a framework as starting point for the architecture of a software project. Which is totally wrong and results in a lot of other problems. The archticture should be the first thing to concern in a project and afterwardsthe use of frameworks as a plugin is important. So do I try to handle this portal. There has to be a way to use portlets/modules/services as plugins which are used to solve a purpose and interact with the backend/core functionalities. Purposes to use the portal could be: Show the result of the request or maybe save it to the database or something. In my opinion as a result there are less problems in changing the code to the new major release or maybe change the portal. Am I right that there is an intersection between our two posts?
I'm not completely sure, but I think the main selling point is supposed to be a Servlet based and server-agnostic WebSocket connection. Both Jetty and Vert.x have WebSocket support though.
Unfortunately, the suggestion of staying on JDK 8 and building the OpenJDK yourself misses a rather important point: who backports the security and bug fixes? When JDK 8 public updates end next January, the fixes will only be in the current repo, i.e. JDK 11, 12, etc. The code bases are diverging (especially with the introduction of JPMS in JDK 9) so it's not always as simple as applying a webrev. Also, where do security/bug fixes come for features that are deleted? For example, [java.se.ee](https://java.se.ee) is removed in JDK 11 so no more updates to that in a public repo. The same applies to AdoptOpenJDK, they have said they will not be backporting fixes themselves but relying on someone else to do it. Who that is, is not clear yet.
Taught me everything I need to know. 😂
A [socket.io](https://socket.io) alternative for Java?
I believe this change will only lead to OpenJDK and JDK diverging even further, up to a point at which most devs will want to switch to OpenJDK. Security in OpenJDK won't be backported, it'll be a completly seperate forked project. Pretty much similar to the ZFS development and how Oracle handled that one. Sun open-sourced ZFS -- Oracle closed it up again, many devs at Oracle quit over this, and are now working at different companies working on the fork, which is now more alive than the original.
That's kinda sad. Sure, if you need something like Apigee anyway (and most projects don't), you can *also* use it for rate limiting. But buying into an external service just for basic stuff like this? Better hire a developer that can left-pad a string without relying on an external library. 
For the benefit of readers, @speakjava is Simon Ritter, who works for Azul, one of the vendors that wants you to pay for Java support. Now that doesn't mean he isn't right (I happen to think he's a great guy!). And Azul also provide a $free OpenJDK build as mentioned in my article. So yes, as it stands today, no-one has stepped forward to say they will backport security patches for JDK 8 after January. But the call for maintainers hasn't happened yet, so we simply don't know if someone will step forward.
There is only one main codebase for the JDK. Oracle produces two builds (binaries) from that codebase - Oracle JDK and OpenJDK (http://jdk.java.net/10/). From Java 11, unless you pay Oracle, you should only use the OpenJDK build under the GPL. But since the two are equivalent and derived from one codebase, so this change is not one to worry about.
&gt; I believe this change will only lead to OpenJDK and JDK diverging even further uh, why would you believe that when oracle has converged openjdk and jdk more than they have ever been?
People will fork OpenJDK (maybe under a new name), and it'll diverge.
this is the stupidest argument
Because it's gonna be forked when Oracle implements this policy.
It's about the LTS, not features - Linux distributions will need that for their own LTS. This forces them to fork and maintain it themselves.
Now add Oracle being Oracle with Java, they'll band together, and we have the ZFS situation.
well, considering "being oracle with java" has so far entailed opening java up further and advancing it well past where sun let it languish, I think we have a much better situation than the ZFS situation. Also, I'd wager oracle isn't contributing much to ZFS because it's focusing on development of BTRFS.
Not really, no. 
Got a link to the advanced one?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Laziness and comfort. 
Do i have to pay to download java 11? If thats the case i dont like it.
No you don't. Just download the OpenJDK build instead of the Oracle JDK one.
In short, it is meant for when you run into issues which are tricky to resolve with WebSocket, JSON, and switch statement per se: - Avoiding repetitive boilerplate code - Supporting environments where WebSocket is not available - Handling both text and binary data together i.e. composite data - Recovering missed events - Providing multi-device user experience - Scaling out an application, and so on. Also, as mentioned in other comments, it is designed to be compatible with any web framework on the JVM; it is achieved by creating the [Asity](http://asity.cettia.io) project. If you are interested, check out [my interview with JAXEnter about Asity](https://jaxenter.com/asity-jvm-java-interview-kim-147329.html). You may want to check various examples at https://github.com/ralscha/cettia-demo and some of the examples are online.
Gradle has been around for 10yrs and still has not toppled Maven in market share and developer mindset.
there are in theory for-pay features. i've never used any though. As far as I'm aware (and as far as most of the world is concerned) the two are functionally the same.
NASA is using JavaFX for high performance orbital calculations. https://www.youtube.com/watch?v=qZBa_tIBrRE&amp;t=5880s Electron? Have fun with that.
So, the example is now equally simple, but does no longer contain any N+1 problem: ``` // Fetch an author AuthorRecord author : create.fetchOne(AUTHOR, AUTHOR.ID.eq(1)); // Create a new author, if it doesn't exist yet if (author == null) { author = create.newRecord(AUTHOR); author.setId(1); author.setFirstName("Dan"); author.setLastName("Brown"); } // Mark the author as a "distinguished" author and store it author.setDistinguished(1); // Executes an update on existing authors, or insert on new ones author.store(); ``` Thanks again!
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ayxdt/framework_suggestions_for_java_micro_services/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[IBM &amp; Java community](https://www.reddit.com/r/java/comments/99guqa/ibm_java_community/) Recognizing the impact that the release cycle changes will have with Java developers, IBM will partner with other members of the OpenJDK community to continue to update an OpenJDK Java 8 stream with security patches and critical bug fixes. We intend to keep the current LTS version secure and high quality for 4 years. This timescale bridges the gap between LTS versions with 1 year to allow for a migration period. IBM has also invested in an open build and test project (AdoptOpenJDK.net) along with many partners and Java leaders to provide community binaries across commonly used platforms of OpenJDK with Hotspot and OpenJDK with Eclipse OpenJ9. These community binaries are TCK (Java SE specification) compliance tested and ready for developers to download and use in production.
One of the biggest framework in Java is Spring and it sounds like it covers most of your requirements, especially Spring Boot. You can go with an annotation driven approach, it has great integration with swagger and it is (relatively) light weight
Definitely agree with this, with the broad of libraries and ease of use. Spring boot is better choice. 
Oh, well, at least it had a good OO introduction.
I neglected to mention spring in my post, but I actually started my research there. I would class it as heavy though, which is why it didn't make the cut for my list. &amp;#x200B; &amp;#x200B;
One important thing missing from this discussion is what JDK versions *mean*. An early suggestion for a new versioning scheme based on year.month was rejected, and so new JDK versions just bump the number, starting with 10. But new JDK version numbers don't mean the same thing as they did before. Most importantly, the new release strategy does away with major Java releases altogether. Java 9 was the *last major Java version* for the foreseeable future, and Java users should not consider upgrading, say, 10-&gt;11 or 11-&gt;12 to be the same as going 7-&gt;8 or 8-&gt;9. In order to make upgrades easier and to do away with major versions, we had to remove the restriction on what can change in the 6 month releases we were doing anyway. So upgrading from 11-&gt;12 should be somewhere between upgrading 7-&gt;8 and between 8-&gt;8u20, hopefully closer to the latter. So "staying on 11" means something very different from "staying on 8" because 8 was a major version; 11 won't be (and neither would 12, 13, etc.).
Yes: http://jdk.java.net/ 
It won't have extra features (at least, none are planned or wanted atm)
Great article, thanks! Of course, it's yet another list of possible contenders. That's both the greatest benefit and Achilles heal of the java world.. there's tons of ways to do everything.
Except that 11 and 11+6*n releases will be designated as "Long Term Support" releases, much like Ubuntu does with their LTS releases. So 11, 17, 23, 29, 35, 41, etc will all function as the major releases that most systems will target.
The writing is on the wall though.
&gt; will all function as the major releases that most systems will target. Maybe and maybe not[1], but they're still not major versions, and all JDK versions should (hopefully) be easier to upgrade than OS versions. In any event, even if people choose to *deploy* only to LTS versions, they should still test on every feature release, or they won't benefit from the new model, which was designed to ease upgrades. [1]: The reason why this may not be the case is that it is expected that the JDK would be bundled with your app (at least, new JDK releases are specifically designed to support this distribution model), so this is different from OSes (unless using containers, and I don't know whether most systems deployed using containers only employ LTS versions). Another difference is that it's likely that LTS versions would cost money. 
What is wrong with advertising in the employment section of your area?
I find it funny that you think that way. In my experience, the business requirements almost always required the additional functionality and flexibility that an API proxy provides. There are OSS API proxies as well. Do you implement your reverse proxies too? It doesn't matter to me what anyone uses; I just wasn't sure if the author/OP were aware of all the tools available.
Looking for remote rather than on site
So they can’t work remote and live in the same city? 
I don't really know your classification of what's considered heavy but I just wanted to hilight that you don't have to bring in the full framework. The different solutions is divided into dependencies so you don't have to bring in spring-data-jpa if you don't need it. 
&gt;From Java 11, unless you pay Oracle, you should only use the OpenJDK build under the GPL. Does that mean I have to publish the source code of my app with the binary?
That's what their web site says. Martijn Verburg clarified this recently on the jdk-dev mailing list, [http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001830.html](http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001830.html) "AdoptOpenJDK \*as an entity\* will not be backporting patches". I therefore stand by what I said.
As of JDK 11, to be released next month, there will be no functional differences between the Oracle JDK binary and one built purely from OpenJDK source. Prior to JDK 11 there were a number of differences. Oracle have contributed previously closed source features, like Flight Recorder and Mission Control to OpenJDK and removed other features (like JavaFX and Java Web Start) from their JDK binary.
You may also take a look at a microframework called Spark: [http://sparkjava.com/](http://sparkjava.com/) It is quite easy to use and very lightweight, with a very simple bootstrap. I have used a few times on minor projects I have and general experience is very good.
This is correct, you're at the mercy of benevolent benefactors such as IBM and RedHat. Note that promises from these companies are not binding contracts. Amy contributing company or individual could decide to stop suddenly. There is no "safe" option other than paying someone for support. Basically if you stick with OpenJDK you get the best possible support for $0, but also the 0 guarantees that come with it.
Depending on the definition of beginner, I guess not. After receiving an introduction to concurrency in my first semester Java course, I was able to follow it well.
This is just lovely to watch. Thanks!
No. OpenJDK is released under a GPL license with a classpath exception. The exception means that the JDK does not "infect" your application with the GPL license.
That approach to windowing is interesting, but I'm not sure how it'd get actually get used in a modular way? Like, it seems to suffer from the same problem vs reactive streams that traditional loops do compared to regular streams, in that you have to pack all the work you want to do into a single block instead of breaking out the transformations into chained method calls. What's nice about `window` is that you then have a `Flux&lt;Flux&lt;T&gt;&gt;` you can use to transform or merge the inner windowed events - or you can easily defer that decision to another method. To achieve the same effect, I guess you'd have to have some way to write fiber-based `window` equivalent which returns...I guess a `Stream&lt;Stream&lt;T&gt;&gt;`? Where the stream is backed by a windowing generator function over the input (which itself would have to be a `Stream&lt;T&gt;`). That reinforces my suspicion that fibers would do a lot to take the "reactive" out of reactive streams. While there are practical reasons why we might not see `Flux&lt;T&gt; implements Stream&lt;T&gt;`, conceptually that's where we might end up.
Thanks.
You might find some on Upwork, but be prepared to pay the higher end of the market for decent developers.
I need to poke around in it some more apparently. My plan is to take the best suggestions from here, implement a single service for my project in each of them and just see how it goes. Test out the swagger functionality, the required coding style and the performance of the resulting system.
&gt; it seems to suffer from the same problem vs reactive streams that traditional loops do compared to regular streams, in that you have to pack all the work you want to do into a single block instead of breaking out the transformations into chained method calls. It depends on your preferred coding style. If you like the chained combinator approach, you can have a similar API for channels. But if you prefer the more imperative, loop-based approach, that would work, too. &gt; That reinforces my suspicion that fibers would do a lot to take the "reactive" out of reactive streams. They would add more programming styles to the set of those that can offer good performance. If you prefer the Reactive Streams approach -- I don't like calling it "reactive"[1] -- you can still use it, possibly with a better profiling experience, plus you'd have the channel combinator approach, the loop approach, and more. [1]: "Reactive" already has a different meaning from Reactive Streams. It either means a [reactive *system*](https://warwick.ac.uk/fac/sci/dcs/research/em/publications/mscbyresearch/mslade/files/a2.pdf) in the Pnueli sense, or [reactive programming](https://en.wikipedia.org/wiki/Reactive_programming#Data_flow_differentiation), which is the style most associated with spreadsheets. Both *can* (though not necessarily must) intersect Reactive Streams (although the latter, I think, has been expanded over the years to explicitly include FRP, which is similar to Reactive Streams). 
Thank you IBM?
They won't for the money op suggests, I suppose. 
What an odd/arbitrary assignment. I'd use BigDecimal as a "f you"
That makes sense. Thanks for the conversation, and good luck with Loom. I can't wait to use it in production.
&gt;but I guess IBM will: &gt; &gt;[IBM &amp; Java community](https://www.reddit.com/r/java/comments/99guqa/ibm_java_community/) &gt; &gt; IBM has also invested in an open build and test project (**AdoptOpenJDK**.net) along with many partners.... &amp;#x200B;
Light-4J has [OpenAPI 3.0](https://doc.networknt.com/tutorial/rest/openapi/petstore/) and [Swagger 2.0](https://doc.networknt.com/tutorial/rest/swagger/petstore/) support.
No "native" hot reloading. Javalin relies on the JVM ecosystem as much as possible, and since there isn't a good generic hot reload tool/technique available, it's not something we want to offer. There is a issue on it with some info if you want to attempt to set it up: https://github.com/tipsy/javalin/issues/67
I like upwork and have been using them since they started. Fire quickly if they don’t meet your initial milestone(s). Also a good idea to co-develop with them and make sure they can do the basics of what you’re looking to do. There are some very clueless people and some really amazing ones. 
I feel sad about how amazingly underappreciated MicroProfile is. I just finished with a course focusing on 1.3 and it's amazingly easy to get started with it. I wonder if there aren't any catches down the line in prod, but I'd guess no more than for Spring Boot. 
I can recommend you a good one that is looking for a remote position.
Nice! Your APItool is exactly what I wanted, and you seem to follow a similar development philosophy to mine. &amp;#x200B;
Makes sense! I'll check out that issue. Thanks!
It looks like in your [submission](https://www.reddit.com/r/java/comments/9b3on4/attaching_an_excel_workbook_in_r_java_problem/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
forget about heap, the javafx hello world as shown in the documentation of the [Stage class](https://docs.oracle.com/javase/10/docs/api/javafx/stage/Stage.html) (which is the raw minimum) sits at 60MB for the process without accounting for the heap. That's how expensive metaspace and all the JVM infrastructure is, and sure you can tune tons of parameters as show [here](https://shipilev.net/jvm-anatomy-park/12-native-memory-tracking/) (and I tried them all) but all you can really save is at most 10MB, and they all go against performance and at that point V8 performs better. My discord clone loads in total ~10k classes, out of which ~7k are *just javafx*, and about 2.8k out of those are lambdas. The base footprint for the application just to load all that metadata is 160MB... Loading a webview (which I inevitable have to do to preview youtube videos) adds another 100MB to the process. Meanwhile, the hello world in electron is ~100MB, and the entire discord application sits comfortably at 200MB. On my side of things, because of java huge overhead per instance, I had to do magic to be able to deal with the amount of data that may come (350k users) which makes for quite an uncomfortable object structure. Meanwhile in javascript, you don't have threading nor classes per se, so I presume instances avoid all the instance overhead of having locking bits and class metadata. 
Upwork is Down.
honestly ,what's the differences between gradle and maven?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Vert.x is by far the best out of them in terms of performance, ease of use and freedom
I use this all the time. 
So, as a fledgling java developer (I currently use spring boot for rest sevices) how the hell do I know what JDK and where to get it? Right now I'm stuck with 1.7 because of an old weblogic version but I dont want to run a jdk that isnt getting security patches/updates, right?
I'd recommend hiring several people more than you need on a paid trial basis of say a week or two and only keeping the best after that. It'll cost more money up front but you'll find the good developers sooner.
Wired nobody mentioned it, but you should definitely check out Lagom!
Gradle is an internal (Groovy) DSL, whereas Maven is an external DSL. The Gradle build script is more or less regular Groovy code, whereas in Maven only a defined set of XML elements have meaning.
Last few projects I've been on we've been building our microservices with Spring Boot. IMHO the downside of most of the micro-frameworks is that you basically end up assembling your own version of something like Spring because all the typical requirements are still there (logging, security, metrics, tracing, health endpoints, data access) and you don't want to re-build that for every service. 
He just wants cheap labour. 
I've used Vertx with its OpenAPI plugin in a production microservice, it worked pretty well. Vertx itself runs really fast, and the OpenAPI part was a bit fiddly but it meant I didn't have to update any endpoints if the swagger file changed. 
There are a few features that makes Gradle build quicker than Maven does. For example, running in a daemon mode and the compiler cache. These aren't anything that Maven couldn't add, but just hasn't yet. Maven doesn't seem to iterate as fast as Gradle does.
Some potential improvements: * If the objects are made immutable by removing the setters and requiring valid attributes to be provided in the constructor, instantiating incomplete or invalid objects and the state of objects will no longer be a source of bugs. * The API can be made more intuitive by leveraging the HTTP verbs. Eg POST /create can be just POST /todo (POST already implies creating the provided thing, so there's no need for /create), and GET /delete could be DELETE /todo. (GET is meant to be idempotent, and DELETE already implies deleting the provided thing) * Is there really a need for a persistence.xml file? * If you're going to use an ORM, Entities should not leak outside the ORM layer. I understand the scope of the article can't expand to cover everything perfectly, but these are some obvious things.
Fixed! Thanks
It depends on what you're looking to have done and what you're looking to pay.
is it just me or did this replace creating a new Integer on every put with creating a new MutableInteger on every `up`?
Why not use the existing `AtomicInteger`? Why not call `Map#computeIfAbsent()`? 
&gt;There's a lot of cheap freelancers and they're cheap for a reason. Have you perhaps considered that there are freelancers from the Balkans and other Eastern European countries? I, being one, usually ask for $25-$35/hour but that doesn't mean what I do is low quality work. And my niche is mostly backend system architecture and implementation. $25 - $35 /hour is quite a lot here, and allows for a way-above average quality of life.
&gt; $25-$35/hour That's not cheap by Upwork standards. 
Claims to be the fastest, but there are no benchmarks, is this a joke?
Who posts this crap? Clearly the author has no basic understanding of concurrent programming. 
I think this is obvious given other comments, but this is not a good implementation and should not be used. There are multiple problems, lowest hanging of which is there is a race condition in the “up” method when the old value is queried and incremented. (I can’t remember if it was stated explicitly, but I’m assuming concurrency matters since a ConcurrentHashMap was used.) Concurrency is hard. While one size might not always fit all, it is always advisable to be absolutely sure you know what you are doing when implementing such classes. If you think it’s easy, then it’s probably best left to the experts because you will likely get it wrong.
The emoji in the title should have been a warning.
Look at MicroProfile: https://microprofile.io Builds on top of JAX-RS and CDI, and has out of the box OpenAPI integration, Metrics (drop wizard style) and Health, as well as DeltaSpike inspired external config. Also comes with JWT authentication out of the box.
7 times, in the US.
The last few projects that we have been on we always used MicroProfile for our microservices. It has all the things you mention in a single coherent and small package. See https://github.com/javaee-samples/microprofile1.4-samples for some example and https://microprofile.io for the main page. 
Yes, yes it does. 
Also, they've extended `ConcurrentHashMap` rather than encapsulating it, meaning their counter exposes all of the methods of `ConcurrentHashMap` instead of the three operations they probably want on their counters. The consequence is that anyone can modify the value of the counters. 
JDK versions have always changed over time, its just part of the Java platform. Right now, Java 8 is the "default" choice. From September, Java 11 becomes the new default, although it will take some time for developer to move. After Java 11, you choose whether you want to upgrade every 6 months, or wait until the next "LTS" release, which is probably Java 17.
I wonder if they thought that extending ConcurrentHashMap would have magically conferred atomicity to their method too.
A couple of devs in our team started using Kotlin in a new app we are developing. Now whenever a new dev starts the first thing they say is 'what is this bleeping stuff?' and our pm goes 'what do you mean the new guy has to take a few weeks to learn the language?'. Needless to say it has not gone down well. The promised productivity gains have not materialised either, because surprise surprise, coding effort is totally dwarfed by actual problem solving effort. 
Yes, it is just a web app front end: VUE + VUEX + ElementUI Back end: SpringBoot + Spring Data JPA + Spring Cache+ JMS 
Then you don't need a server. Spring Boot 'bakes' in an app server (Tomcat by default) so you can just run it with java -jar &lt;jarname&gt;.jar. It's common in production scenario's to have static files not server by the app server. But where you're pulling them from depends on your architecture. In my current project static content is hosted on Amazon S3. 
If someone wants to run this to see how horrible the race condition is: https://gist.github.com/nielsutrecht/0e0e01df8bfcbf45307a93813fa2e0db If you run it with one thread it counts to 1000000 as it's supposed to. With 8 threads it ends up around 13141 :D
This is not related to Java at all. You can setup nginx with SSL and forward all requests to your app (whatever web server you pick). BTW, where are you going to host your app? If you choose some cloud service like Heroku then you don't need to worry about this stuff.
About tomcat's vulnerabilites: Every software has vulnerabilities. The fact you can quickly view the list and there's a fix is a good point not a bad one. Check other web server for vulnerabilities to compare. &amp;#x200B; About adding a caching proxy and offloading SSL : test with your application. Depends on your use case, a simple tomcat can be good enough. Next you can use OpenSSL with Tomcat with APR ([https://tomcat.apache.org/tomcat-8.5-doc/apr.html](https://tomcat.apache.org/tomcat-8.5-doc/apr.html)). &amp;#x200B;
I didn't say you should expose Tomcat directly to the outside world. I said it depends on your architecture. What will you be running that service inside of? An EC2 instances? ECS? Kubernetes?
An EC2 instance 
Okay. Then you'd typically use the [AWS application gateway](https://aws.amazon.com/api-gateway/) in front of it. Also an ELB if you're going to have more than one instance up.
Interesting. What are the names of the enterprises being in agreement with that kind of those rewrites?
Ahh , thanks bro, this's exactly what I looking for.
Using the AtomicInteger instead of a MutableInteger would add a slight overhead concurrency wise. This should make sure you never make more than one MutableInteger per key as well as not have the added volatile overhead of AtomicInt's. Either way, the overhead is pretty minimal and both solutions fix the posts concurrency issues. public class Counters&lt;K&gt; { private ConcurrentMap&lt;K, MutableInteger&gt; counters = new ConcurrentHashMap&lt;&gt;(); public int up(K key) { return counters.compute(key, mutableInt -&gt; mutableInt == null ? new MutableInteger(1) : mutableInt.set(mutableInt.get() + 1)); } } Also what happens when they have more than one server or restart their servers oops.
Ah ok I see now. Thanks!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Op seems to be a spam account for medium.com
I mean I'm all for posting interesting articles about other languages, but this is a guide, and last I've seen **this sub was about the** ***Java*** **language.** And although it say it is a step-by-step guide, I don't see no steps.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is exactly what I was looking for the last few days! Thank you!
Especially if you're using [strongly (but structurally) typed APIs like jOOQ](https://blog.jooq.org/2017/11/20/using-jdk-10s-local-variable-type-inference-with-jooq/) Instead of ``` for (Record3&lt;String, String, String&gt; r : using(con) .select(c.TABLE_SCHEMA, c.TABLE_NAME, c.COLUMN_NAME) .from(c)) System.out.println( r.value1() + "." + r.value2() + "." + r.value3()); ``` Write ``` for (var r : using(con) .select(c.TABLE_SCHEMA, c.TABLE_NAME, c.COLUMN_NAME) .from(c)) System.out.println( r.value1() + "." + r.value2() + "." + r.value3()); ```
I agree. They have/had an issue about renaming and basically said no. 
EJB and JMS are barely the main difference between Java EE and Tomcat. Wherever you read that must be a really old source. Modern EE is about CDI, JAX-RS, BeanValidation, EE Security, Concurrency, JPA etc Tomcat also supports WebSocket and JASPIC from EE.
You might find my example projects for using jlink (via my Maven plug-in ModiTect) interesting: https://github.com/moditect/moditect/tree/master/integrationtest They produce Docker images with jlink modular runtime images for Vert.x and UnderTow examples. The JVM size is 45 MB and 25 MB respectively. Total image size depends on your base image, but I don't think it's that important. The base image won't change as often as the actual application layer, so once it's distributed to all Docker hosts, its size doesn't really matter any more. In that regard the Vert.x example in the repo above shows another interesting approach: it adds two Docker file system layers on top of the base image. One with the base modular runtime image (i.e. most of the 45 MB) and another one with just the actual application module (very small). So unless any dependencies are added, the base modular runtime image doesn't have to be re-built and re-distributed, only the application layer image has. This results in very efficient turnaround times, as just a very small file system layer has to be updated in most of the cases.
Google trends notes that while Maven is certainly more popular, but it had a huge head start. But [over the last 5 years](https://trends.google.com/trends/explore?date=today%205-y&amp;q=maven,gradle), Gradle has increased in popularity more than Maven (~20 points for Gradle over ~10 for Maven).
What's the benefit of Maven over Gradle?
For new projects I probably would choose Gradle over Maven. But existing projects could be painful to migrate. In our case it's 67 Maven modules so probably a lot of painful work to migrate everything Gradle.
Thanks. Maybe I write a follow up article about incorporating modules some day. But for now I'm just happy that everything is finally compiling and running on JDK 11. Since Java 1.4 it never took me so much effort to jump on a new Java version.
LOL
Setting up a reverse proxy with Nginx is ridiculously easy and definitely not slow.
I will consider you comment as XML is a negative point toward Maven. &amp;#x200B; Everybody is not passionnate about coding/building app. Some people are coming to work just to have something to pay their bill. So they will provide the strict minimum and will not hesitate to duplicate code, will not read good practice and will copy/paste stackoverflow without even rename variable to contextualize code. &amp;#x200B; In gradle you can code. It's given too much opportunity to make shitty things and something as easy as a build can be a nightmare. I worked with people thinking what they are doing is so bleeding edge so thay coded so much things when they actually just compile/test/integration test/build docker image/deploy. &amp;#x200B; Oh, did i mention most of time there is 1 or 2 people handling the build system ? So, what the meaning to push something when a dev will not even put their nose in the shit their produce by code "a bleeding edge build feature using groovy!". Seriously, stop using technology just because it's cooler more even when you will not plundge into it when it's a complete mess. Suggest it yes but don't force. &amp;#x200B; Don't understand me wrong. Gradle is a fantastic tool and i really like it. I use it regularly. It is also a fantastic tool to aggregate multiple build system! It give so much liberty in build. But like someone said, with great power comes great responsability and in a huge project with dev who are not passionnat every day i largely prefer Maven to cut the "creativity" of some dev and let Maven guide them. I prefer to hear dev saying "but is XML" even when there is GUI to handle it instead to have to DEBUG a build. So, yes it's XML but who give a shit about it. How much time will go into it ? You will choose another build tool because maven is using XML ? Talk to me about stability, speed, CI integration, incremental build and so on! Say how much easier is to hire someone who know Gradle instead of Maven. How how easier is to find all the suited tool and doc to have a complete pipeline to have a continuous integration from git commit to automatic deployment but don't say just "XML". It's like saying "hey, look at the color of my car" for unknown brand where it's difficult to find someone to repair when something go crazy. You know why toyota are selling so much car ? Because of the beauty ? Nope, i hate their design. It's because they are reliable and just work. They have good coverage in the whole country and you can always find someone who can fix it even if it broke! &amp;#x200B; "XML" .... what a pitty excuse but wait :[https://github.com/takari/polyglot-maven](https://github.com/takari/polyglot-maven) &amp;#x200B;
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes, Maven is a one-headed beast. But because it is 100% declarative, as soon as your build needs to do something that isn't handled by a Maven plugin, you start playing with either custom plugins or scripts outside the Maven pom. In my experience a large, complex project will almost certainly need some customization that isn't handled by a Maven plugin. If you have a simple cookie-cutter build, both Maven and Gradle are fine. If your build needs to do anything that isn't "cookie-cutter" (i.e. already has a Maven plugin -- and there are, to be clear, lots of them), I'd consider Gradle over Maven. &amp;#x200B;
&gt; mutableInt.set(mutableInt.get() + 1)) Doesn't solve the thread safety issue in the original code. If you want to avoid the overhead of `AtomicInteger`, `LongAdder` would be a better option at the expense of making reading of the current value expensive.
XML Completion that actually works on IDEs Fast without requiring a background daemon sucking 2GB on average.
I only touch Gradle because Google has decided to save Groovy forcing it on all Android devs.
Please provide some examples or on `how to` assert - - an array in the response ? - Is there anyway to generate UUID or an RANDOM ID if a test needs? - Only REST or Is it possible to test SOAP api/call too ? if so how?
Great write up.Takes me back to the Java OS. Would be great to see projects like [jnode](http://www.jnode.org/ ) get a more support. Back in the late 90's I was working setting up Java OS on bare metal, we couldn't get past the assembly code to bootstrap the Java VM in a cost efficient way. Its exactly this caching visibility issue that makes it interesting as the cost of multi-core processors and ram decreases.
I would argue that if your build process doesn’t fit into maven’s paradigm, or isn’t covered by a maven plugin, you should probably re-evaluate what your build is doing.
You can also write Gradle build scripts in Kotlin with full code completion etc. 
Sike! It doesn’t exist! Runtime is way too bloated and resource hog
Have both OCA &amp; OCP, this (tool)[https://enthuware.com] helped me a lot.
I don't want to write Gradle at all, Google forces me to. As for the Kotlin DSL, it still is WIP.
To be fair to the Maven noobs, there are a shitload of plugins out there, and the documentation for most of them varies wildly in terms of consistency and accessibility. Yes, you can create a multi-module Spring Boot project with NPM Webpack builds on multiple maven-frontend-plugin modules and package everything together in a single executable JAR, but you're going to curl up into a ball in the shower with your clothes still on, rocking back and forth sobbing, "what have I done?" over and over again as the water pelts you from above and your wife pounds on the bathroom door and asks what the fuck is taking so long in there. Or not. YMMV.
I think WPF is more widely used since it's a standard part of .NET but if you spend some time working with both JavaFX, crushes WPF. * WPF has no real support of CSS and still uses old-skool styling making rebranding or reskinning an app painful. * WPF threading model was not improved over WinForms so you're still in the 90's * XAML is painful brittle and unavoidable. FXML is smaller, more concise and optional. * Even though XAML is compiled (YES C# compiles XML FFS) you can often encounter runtime exceptions on binding or simply things failing silently. 
My answer from a while back (still applies): https://rule1.quora.com/Use-Maven-Not-Gradle
None of the answers here touched on ant being a first class citizen in gradle. This made migrating legacy software using ant/ivy a weeks worth of work, instead of a month of rewrites. But for me it really comes down to if your build fits the standard model, use maven. If you want or need the freedom(think libgdx) then gradle is a much better fit. 
It turns out the code to do this is a little more complicated, because `set()` returns void, not MutableInteger: public int up(K key) { return counters.compute(key, (k, mutableInt) -&gt; { if (mutableInt == null) { return new MutableInteger(1); } mutableInt.set(mutableInt.get() + 1); return mutableInt; }).get(); } Changing the return type, we get the "nicer": public int up(K key) { return counters.compute(key, (k, mutableInt) -&gt; mutableInt == null ? new MutableInteger(1) : mutableInt.set(mutableInt.get() + 1)).get(); }
Thanks this is very informative 
Arguably a worse mess, than XML.
Maven's problem isn't XML; it's overly verbose XML. We might get an updated XML schema in Maven 4.
Hello, The [Section TOC - Table of content in the README](https://github.com/authorjapps/zerocode#table-of-contents--) has may examples for reference. Please have a look there. &gt; an array in the response ? - Array `as it is` in the `assertions` block. - See [examples here](https://github.com/authorjapps/zerocode#table-of-contents--), go to section `"Dealing with arrays"` e.g. ```javaScript "assertions": { "status": 200, "body": { "type": "HIGH-VALUE", "persons":[ { "id": "120.100.80.03", "name": "Dan" }, { "id": "120.100.80.11", "name": "Mike" } ] } } ``` - Also, in case you are only interested in array `size` etc, then below might help- ```javaScript { ... "assertions": { "persons.SIZE": 2 } } -or- { ... "assertions": { "persons.SIZE": "$GT.1" } } -or- { ... "assertions": { "persons.SIZE": "$LT.3" } } etc ``` - In case you want to find an element in the array, then below explains using `JSON Path` - ```javaScript "assertions": { "status": 200, "body": { "type": "HIGH-VALUE", "persons.SIZE": 2, "persons[?(@.name=='Dan')].id.SIZE": 1, "persons[?(@.name=='Mike')].id.SIZE": 1, "persons[?(@.name=='Emma')].id.SIZE": 0 } } ``` &gt; Is there anyway to generate UUID or an RANDOM ID if a test needs? See [examples here in README](https://github.com/authorjapps/zerocode#generating-random-strings-random-numbers-and-static-strings) Precisely as below for `UUID`(you can use ${RANDOM.NUMBER} too)- ```javaScript { "scenarioName": "random_UUID", "steps": [ { "name": "create_new_employee", "url": "http://localhost:9998/google-emp-services/home/employees", "operation": "POST", "request": { "body": { "id": "${RANDOM.UUID}", //&lt;-- Everytime it creates unique uuid. See below example. "name": "Elen M" } }, "assertions": { "status": 201 } } ] } ``` &gt; Only REST or Is it possible to test SOAP api/call too ? if so how? Yes, SOAP calls can be tested easily too, depending on your usecase. See [here](https://github.com/authorjapps/zerocode#soap-method-invocation-example-with-xml-input) for details for asserting SOAP responses. Also you can test **DB APIs**, call **external Java programs**, generating **Load/Stress** etc from the IDE etc without writing boiler-plate or glue code or Http Client code. Check in the [README](https://github.com/authorjapps/zerocode) file for details. 
Is there any similar guide for gradle?
This. Maven is just as flexible as Gradle, and easier to read.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ben2r/parsing_json_with_many_sublayers_using_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It is? I would ask for some guidence if there is someone who is equal as new as i am :) 
Well you deserve that for doing Android development. Really, it's a shitty SDK. It's only better than the classic Windows API.
I was an mc dev for several large networks, and your welcome to ask me any questions. As far as getting into it...get eclipse, follow the bukkit tutorial, and start coding
O'Reilly are doing a 7th Edition of "Java in a Nutshell", but to be quite honest, there is so very little that's visible at language level in 10 and 11. There's var and a few extra methods on some of the APIs and that's basically it.
It's less of an issue when I'm the only one working on it. But, I'll have to hand this off at some point and that's when the "understand what you are doing" bit becomes harder. I do like the premise behind Vertx, just need to figure out how to get swagger generation to work how I want and build a solid enough coding standard that others won't make a mess out of it.
[removed]
Sorry, I'm new and I'm currently learning servlets, jsp then into spring mvc. &amp;#x200B; I am a bit sad that I am learning jsp after you said that, what has or is replacing jsp?
- Templating languages (freemarker, velocity) - Rich clients with Javascript (react, angular, vue and such)
Such questions should go in either /r/learnjava or /r/javahelp as /r/java is not for programming help.
That SDK, even with all its issues, is more stable and productive than any other Desktop Linux attempt thus far.
And if I use heroku?
Android development is just as possible with Maven. It's not that common though.
Yes and I implicitly covered it on my comment. &gt; as experience has proven multiple times to only use SDK tooling to avoid extra headaches. 
Sounds great! Thank you!
I haven't used it but you'll have to check if they have similar options. I've also used [Traefik](https://traefik.io) as a gateway/reverse proxy. It's much more convenient than Nginx or Apache. 
Take a look at [http://micronaut.io/](http://micronaut.io/) 
Useless spammy article that actually explains nothing.
Oh boy!
Can you write to me in a private message, kinda new to reddit so dont really know how yo send "pm" but want to ask something :) 
Lots of improvements in Java 10 and 11 for G1 as well - good to see these GCs improving.
This is rubbish. Use Spring Boot or some application server’s configuration to set up JPA. 
What ORMs are used in the NodeJS world? I've only ever used Hibernate for Java, and I have mixed feelings about its usefulness. Sometimes I prefer plain SQL, but parsing the results is boilerplate and errorprone. How does NodeJS solve this problem for relational databases?
Gotta love them low pause times. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9bihnw/inner_classes_in_java_static_local_and_anonymous/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It is crucial to emphasize, however, that even if you do choose to only deploy applications on LTS versions, you must keep up testing with the feature releases. If you don't, then the situation will become strictly worse for you rather than strictly better. Migrating from one LTS release to another is likely to be no easier than from one major release to another, and possibly worse as there may not be many "how to best migrate from JDK 11 to JDK 17" resources, *and* in addition you'll likely have to pay for LTS versions. If, however, for whatever reason you choose to only deploy on LTS releases but do keep up with the feature releases, you will still have to pay but migration would become relatively painless.
They do mention JNDI as an afterthought at the end of the article. No one should be creating a DataSource by hand.
**No tutorials**, **no spamming**.
I keep confusing the ZGC with [JEP-318](http://openjdk.java.net/jeps/318) which creates a no-op GC called Epsilon, also shipping in 11. Mostly because I think the Z stands for Zero. But it's good to have more options for GCs, because I suspect no one GC will cover everyone's usage pattern. Just like the Linux kernel has different IO schedulers for different workloads. 
As long as the article is not plain wrong or copies some well documented stuff everyone knows already, it is not rubbish. There are lots of reasons not to use Spring Boot or an application server and still wanting to utilize some of the nicer parts of JEE.
Long story short: GlassFish is still the reference implementation for JEE application servers and fully open source (Eclipse Foundation), but Oracle dropped commercial support. If you need commercial support, then have a look at [Payara](https://www.payara.fish). Their offer is also open source, very actively maintained and mostly a drop-in replacement for GlassFish. They picked up where Oracle left, basically. So, in the end, nothing changed, besides the billing address for commercial suppport.
I usually ignore the usernames and just read the comments, but in this subreddit, I probably should also take the usernames into account. Thanks for the context. A lot of the 'we will all die' comments make much more sense if you know the authors background.
https://www.reddit.com/wiki/selfpromotion
Which is a solved problem with Graal. 
The same for my, funny xD
 &gt; forget about heap, the javafx hello world as shown in the documentation of the Stage class (which is the raw minimum) sits at 60MB for the process without accounting for the heap. No repro here with Java 8 and [a smallish JavaFX application](https://github.com/sibvisions/jvx.kitchensink). Sits at ~13MB heap and ~24MB metaspace after start and a GC. &gt; My discord clone loads in total ~10k classes, out of which ~7k are just javafx, and about 2.8k out of those are lambdas. The base footprint for the application just to load all that metadata is 160MB... I looked at a rather large application which has ~8k classes loaded and it sits at 60MB metaspace, so that sounds reasonable. Though I'd like to know how you have 3k classes in there, that sounds a tad much, but on the other hand I have no idea what that thing should do. &gt; Loading a webview (which I inevitable have to do to preview youtube videos) adds another 100MB to the process. You might be able to do that without a Webview, through f.e. the VLC libraries or directly through JavaFX (if you can find out the URL of the video stream, that is). But I'm not sure whether that is worth the effort. &gt; On my side of things, because of java huge overhead per instance, I had to do magic to be able to deal with the amount of data that may come (350k users) which makes for quite an uncomfortable object structure. Meanwhile in javascript, you don't have threading nor classes per se, so I presume instances avoid all the instance overhead of having locking bits and class metadata. Wait...did you test that or did you not? Also 350k of *anything* in Java does not really impress me that much, and I'd kind doubt that JavaScript is able to represent that any better. But let's try it, shall we. ~~~ class User { constructor(id, name) { this.id = id; this.name = name; } } window.instances = []; function makeid() { var text = ""; var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; for (var i = 0; i &lt; 8; i++) text += possible.charAt(Math.floor(Math.random() * possible.length)); return text; } for (var counter = 0; counter &lt; 350000; counter++) { window.instances.push(new User(counter, makeid())); } ~~~ Against: ~~~ import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class MemoryTest2Main { public static void main(String[] args) { List&lt;User&gt; users = new ArrayList&lt;&gt;(); for (int counter = 0; counter &lt; 350000; counter++) { users.add(new User(counter, makeid())); } new Scanner(System.in).next(); } private static final String makeid() { StringBuilder text = new StringBuilder(8); String possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; for (int counter = 0; counter &lt; 8; counter++) { text.append(possible.charAt((int) Math.floor(Math.random() * possible.length()))); } return text.toString(); } private static final class User { private int id = 0; private String name = null; public User(int pId, String pName) { super(); id = pId; name = pName; } } } ~~~ Not the most prettiest things, but it should get the job done. Let's see. Objects Strings JavaScript (Firefox) ~12MB ~9.7MB Java (8) 8.4MB ~8.7MB Well...that doesn't look *that* bad. The JavaScript does have a little overhead (361k instances) because Firefox won't let me view the instances of just my class. Metaspace also sits at 9MB for the Java application, but hey. Neither of these values does shock me, actually, I would have expected more memory usage...from both.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you very much, sir!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
"write once pay everywhere"
Another problem is bought software/licensed software. If your HR program you bought or licensed only supports Oracle JDK you're kind of forced to buy an Oracle license, otherwise you're left with no support for the software..
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
g1 was such a game changer when it came out too. No more having to schedule restarts to prevent long gc pauses. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is not how a hash map works and is incorrect. Assuming your map key is a string, if you have two different strings that generate the same hashCode, they will be mapped to the same bucket internally, but when calling the get method with a given string, if will return the correct value since it will resolve the collision by calling .equals to find the correct value. If you are, however, putting HTTP headers into a map where the key is an Integer and is computed from the hashCode of the corresponding string, then yes, you would have a problem.
It's wrong assuming you are using String keys, which I think is a valid assumption.
It's under NDA, sorry.
No, as per the other comment, "serverless" is an application that doesn't need a server. In the olden days almost every application was serverless. We just called them "applications", but you'd now alternatively call them clientside applications, local applications, or desktop applications.
Absolutely. It’s a Spring MVC (hence the name) competitor first and foremost, but indeed competes with Struts as well.
Ohhh Thanks! Here I was thinking Core II was just a new edition of the book, not an advanced version! *hangs head in shame*
It's not a copy, Reddit doesn't allow duplicate usernames! But weren't you the guy who said being neutral to technology, yet you always seem to mention Spring Boot (and only Spring Boot)...
FYI - as I mentioned above - I started trying our Javalin with Scala and sbt. There's a nice little sbt plugin that allows for some nice hot reloading here. Makes developing with this framework even easier :). [https://github.com/spray/sbt-revolver](https://github.com/spray/sbt-revolver)
JavaFX is cross platform aswell.
I agree that XAML is awful, but it's not "unavoidable". Like FXML, everything you do in XAML, you can also do in code. 
Well, also it takes some time before implementation catches up. Thorntail just finished 1.3 I think and there's already 1.4... 
Yes, per the examples Payara is at 1.4 now, which seems to be the same as 2.0.
(official) support for Java 11 is scheduled for a yet-to-be-released Gradle 5.0: https://github.com/gradle/gradle/issues/5120
You just have to read the video description to realise that's not what they're talking about: &gt; There are a couple of definitions out there for what serverless is or isn't. One of them being as stateless compute containers that only last for one invocation. This is more known as Functions as a service, or FaaS. In this session, I will give a gentle introduction to Serverless and FaaS, what it means for developers and why it is important to understand this paradigm. I will then tune in to solutions available for developing serverless applications, or functions, using Java. The session will be a mix of slides and live code demoes.
What source are you looking at?
Interesting. We have a Struts1 application that needs to be updated. Since I am new to this, I get to present update choices.
CMS is so bad... Like, parallel collector ended up having more consistent pause times/working faster. G1 has been incredible here at my work. We've seen huge reductions in latency after switching along with a lot less time spent in GC. ZGC is going to be great as well.
But things getting better. They just released Kotlin DSL 1.0 RC3. You should contribute your feedback to the Gradle team: https://docs.gradle.org/4.10/release-notes.html
I mean the migration guide, I'm still a gradle noob.
I wonder how well zgc will work for small heaps in applications that strive for cosistent Lowe latency originally g1 was targetting large heaps too. Then it ended up being the best choice for interactive applications with small heaps too (most of the time).
[Play](https://www.playframework.com/documentation/2.6.x/JavaHome).
You want to post this in /r/javahelp Have a good one.
[There is a benchmark of Azul Zulu vs Oracle HotSpot which was published by Azul](https://www.slideshare.net/AzulSystems/is-oracle-hotspot-better-than-azul-zulu). Based on the report, there is no huge performance difference between Azul Zulu and Oracle HotSpot on Java 7 and Java 8. Azul Zulu is built from OpenJDK. There should be no any difference between Azul Zulu and OpenJDK. BTW, [Starting with Java 9, OpenJDK and Oracle JDK were both built from the same source](https://www.slideshare.net/oracle4engineer/jdk-ver20#27).
To be honest, that applies to most languages. I recently inherited a 20k LOC node script with no comments or testing at work. I hate JS.
Teaching people how to create beans instead of solving problems 😂
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No, mostly, if you need commercial support. Even if you don’t need commercial support, using Wildfly (previously JBoss AS, and the upstream project for JBoss EAP) is likely to have way more community support. Wildfly, like Glassfish and Liberty and whatever else, still pass the TCK, so are all “valid” implementations of JEE.
It is quite unexpected to see a bug in Array.sort. Good job, guys!
Please share the knowledge. We are on the brink of updating our huge Java8 multi module maven project to JDK 11, and any information especially experience helps.
 &gt; Java just generates tons of classes in runtime these days. Ey, I somehow assumed that they were all classes in your source tree, my bad. &gt; ...I want to fit everything in ~40MB of ram... You'll have to explain that one to me, because that limit sounds rather arbitrary. And do you only mean the "backend data" with this limit? Because one way or the other neither application will fit into that amount of memory (not even when using C, I guess). But I do believe that you'd have a better chance with Java, because it gives you a little bit more control over the memory layout and types that are used.
They had int overflow for big arrays in library implementation of binary search until JDK7.
Turns out calculating the average of two integers isn't as straight forward as you'd think. `(a + b) / 2` overflows for large values. Even though it got fixed for binary search in 1.6 [the same bug shows up again and again in other parts of the Java's standard lib](http://jvm.today/2017/02/javas-binary-search-madness.html).
That's okay, I guess. It's written by humans, not by gods.
I've been using it for about two years and on PC I'd say JavaFX8 is very much stable, though not without it's share of hacks. The worst case that I've found was simple FillTransition hogging one core of my CPU all to itself on Intel HD 520 with hardware acceleration enabled (in software rendering mode it was fine). On ARM, however, things aren't as bright. I haven't tried OpenJFX 10 yet, but right now I'm waiting for the release of Java 11 and then OpenJFX 11 with hope that they will improve hardware acceleration on ARM (also I hear marlin rasterizer is great), since basic animations are no go if you want smooth experience on, say, latest Raspberry Pi.
Well the EclipseLink site has a lot of extensive documentation and examples of doing this. The post provides no detail to why I would config everything in Java rather then XML. Also gives no identification of best practices, like making the properties configurable or not using root user database auth details. &amp;#x200B; I kind understand making a post about how to do what the examples are achieving but please add context and maybe links to further resources about how this fits into building a read world application.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9bsiqx/mistakes_every_java_programmer_makes/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; You'll have to explain that one to me, because that limit sounds rather arbitrary. Remember I said earlier I was trying to make this more "efficient" than the Discord client in electron? well, the electron thing uses 200MB of ram (props to them, Slack with much less data uses GBs of ram). In my case since the JVM is at 160MB by the time I render the login dialog where you input your credentials (before loading any of the user data), and IIRC javafx was using around 20MB of heap for their data, I wanted to stay at around 40MB for the "backend data" so as to stay at ~220MB. As you can see, I'm already defeated by Electron. &gt; Because one way or the other neither application will fit into that amount of memory (not even when using C, I guess). Well, I'd be saving 50MB of just object structure with no content, as you saw before, this is way more than even the string data coming from Discord.
does Python use TimSort in OrderedDict? 
I'd assume that inserted the entry in ordered, just as TreeMap does in Java.
I see. I'll have to think about this for a little. There's also the possibility that the Discord client is not keeping everything in memory but rather fetches as needed and discards readily.
vavr is incredible powerful, but has complex learning curve. Authors trie to implement lots of functional constructs, with great success, but the price is you need to step out of the java normal way of doing things and may confuse some people: A vavr List is not a java List, a vavr Option is not a Java Optional, pattern matching requires an annotation processor and looks kind of a hack. Don't get me wrong, is awesome, but if that's your cup of tea you might as well use Scala. jool is a thin wrapper over java Stream that makes it way more useful, several implementation of Tuples and Function, a wrapper for handling IOException inside streams and that's pretty much it. I love it and use it in most my projects. It does not change your life, but makes your code clearer and more concise. functionaljava I don know anything TL, DR: * use jool for a happier java experience * use vavr if you want to program in scala and your boss don't let you 
Even if you don’t need commercial support, the Payara OSS releases are a far better choice than the GlassFish ones, since they have fixed a ton of bugs, updated components and added modern features. For example, all the MicroProfile APIs are in Payara, but none are in GlassFish. Payara also has extra things like Oauth Security, and an Uberjar option called Payara Micro.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oh, glad to know. It's strange software rendering was better than hardware mode, though. Did you try software rendering on ARM? Or do you consider using Swing, since it uses Java2D and stable?
Please, stop your spamming spree. You have already been banned somewhere else. This should have been a sign for you. Should you post again, you will also be banned from here.
[The same bug affected Java's `TreeMap` even after it got fixed for binary search. And some other code as well.](http://jvm.today/2017/02/javas-binary-search-madness.html)
This. Checkout https://start.spring.io. That should be an easy start.
That's not the same bug that affected Java's Timsort. Nor does TreeMap or OrderedDict use TimSort. 
Oh yeah. I got confused because I was talking about that bug with someone else.
Yeah, I was mildly confused as to why you were mentioning binary search bugs until I read all of the comments. 
What do you mean by write everything twice? A method with a parameter of type `double` can accept a `float`.
It can? Sorry about the stupid post.
Oh, no issue! I just wasn’t exactly sure what you meant by writing _it_ twice.
I think you should perform some tests before. Mine are not conclusive currently. I lose 50% with AOT
You think they should perform some tests on how their app performs when compiled with AOT on AWS... before learning how to compile their app with AOT on AWS?
Thanks, very helpful
You’re welcome!
&gt; There's also the possibility that the Discord client is not keeping everything in memory but rather fetches as needed and discards readily. Indeed this is what I suspected, but from what little info I could get into it (I'm no JS expert) it is not retrieving them on demand, it is not storing them in some form of browser on disk db, so it has to be storing them in memory. This indeed puzzles me.
[http://javaonexperiance.com](http://javaonexperiance.com)
&gt;There are still servers Of course there are still servers. Even when most applications on people's computers were all locally installed apps, other people were using servers. And there's even the hybrid mode where an application is principally local, and can work fully local, but optionally you can connect to a network to sync with something. &gt;Run code without provisioning or managing servers. Yeah, that's called a LOCAL application, i.e. an application that you just install and run directly on your device and doesn't need any server. Extra bonus for such applications these days: you can continue working when there's no or a bad Internet connection.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9bugbi/updating_javadb/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Check out Jhipster and you will be able to create a UI based CRUD app very easily [https://www.jhipster.tech/](https://www.jhipster.tech/)
I can't tell if you're being intentionally obtuse or just ignorant. WATCH. THE. DAMN. VIDEO.
[removed]
But if you write your code with `double` and call with with `float` you won't get any of the advantages of `float`. The OP will need to write everything twice if they want to get the benefits of `float` and also be able to use `double`.
Congratulations. I want to get into back-end, and Java EE looks more appealing than Swing these days.
AOT might seem trivially faster, because native, but the JVM has been improved and tuned a lot over the years which makes it really competitive. 
I would use doubles, then benchmark with practical data and see if the performance is acceptable. If not, try it with floats. Besides the increased precision of doubles, more recent aspects of the JDK (like streams) (okay, maybe just streams) tend to focus on doubles, ints, and longs and generally ignore the other primitive types.
Sorry but in stack overflow it is written (as a reason of the question): &gt; I read a lot articles about performance boosting of Java applications with GraalVM AOT (ahead-of-time) compilation feature and I'd like to try to use it in my projects.
&gt; And Java EE looks more appealing than Spring these days. How did you come to that conclusion? To me its future looks unclear at the moment.
Using pre-built libraries is often the best solution, but rolling your own can be helpful to better learn the concept. I've "re-implemented" several libraries to get a better understand of the algorithms and such...then promptly discarded them in favor of the pre-built ones.
Lots of exciting developments going on with the transfer to Eclipse and the rise of MicroProfile!
I researched these options, but I decided it would be good to give myself a better knowledge of how matrices work at their core, I can always edit and customise my own code easier than a library, plus I only need a small subset of functions. These are great options though!
Thanks for the informative answer
I personally haven't seen any articles saying that GraalVM AOT offers better peak performance than the warmed up JIT. And I also don't think it's very true. However, the startup of the native image is way better than the JVM with the JIT, so if you're working in a setting of Amazon Lambda (as the question implies) or any other faas platform, perhaps for a short running task the JIT won't manage to warm up and the overall performance (the time the application is running, what you're paying for) is improved. I don't know of a good way to run a GraalVM native image as an amazon lambda currently, afaik they offer a choice of runtime environments for your lambda implementation and offer specific API wrapper around your code. That's why that [article referenced](https://engineering.opsgenie.com/run-native-java-using-graalvm-in-aws-lambda-with-golang-ba86e27930bf) in the comments to the question goes through go first. I know that someone experimented with [running GraalVM native image as a function for project Fn](https://medium.com/criciumadev/serverless-native-java-functions-using-graalvm-and-fn-project-c9b10a4a4859), which can run any docker container as a function in their FaaS platform. But I don't know if that is available in any form on amazon lambda. If another faas platform offers something like that, perhaps one could test there? 
😂😂😂😂😂
As an observation, just be careful to distinguish between Spring and Spring Boot. Spring is very straightforward, which I hope isn't a controversial statement. It's keeping track of the number of projects under the Spring brand that can be tricky, and then adding in the auto-configure magic of Boot can make *learning* Boot into a truly daunting task. That said, Spring is also doing a pretty good job of accepting both annotations, its own and the JavaEE ones, so if you're more comfortable learning those then do so, because the concepts are roughly the same, it's mostly(?) the deployment mechanism that changes
Honest question. Can I ask how you came to that conclusion? Especially about application servers being in question?
&gt;application servers in general are in question. I'm very curious about this statement, do you mind elaborating? Why are application servers in question and what would be their replacement?
Functional Programming, particularly in an imperative language like Java, isn't generally an end in itself. What library you should use really depends on what you're trying to do. If FP is actually the goal, for example because you want to learn FP, then I would suggest you consider using an actual FP such as Scala.
EE products mostly support both approaches. WildFly has WildFly Swarm, and Payara has Payara Micro that do just that. Microprofile APIs have also been specifically created for the use cases these support.
Absolutely, but I thought the question was "why are application servers in question" and not "why is EE in question"? I fully expect (and hope) that Thorntail and similar products gain traction.
Payara has a ton of community support as well, and is the new Glassfish. Funny fact Steve Millidge from Payara is also the lead for the transferred GlassFish: https://projects.eclipse.org/projects/ee4j.glassfish/who
TLDR; Glassfish has been superseded by Payara, which is used a lot.
any reason to not recommend thymeleaf?
This is a well known change introduced in Java 9. Is it ideal? No. Is it easily resolved? Yes.
Fair enough I guess.
Yes, the first few minutes he discusses that "serverless" is a terrible name, because the application still runs on a server.
OMG, you are so late for the party....
Can mods delete threads where absolutely no prior research is done?
Visual paradigm can if you have $$ 
Please stop posting Kotlin stuff here.
I'd make a Spring Boot app, all in one, started from а flash drive. Easy to make, easy to demonstrate and Spring Boot is great to show your understanding of annotations, dependency injection, websockets. 
&gt; Oracle needs to get the JetBrains influencers OUT OF JAVA LAND ... NOW. Lost your hat? You can always make [a new one](https://www.amazon.com/Reynolds-Wrap-Aluminum-Foil-Square/dp/B00UNT0Y2M/).
Nope, I‘m mainly backend dev and dont know a lot abou templating and framework frontends... under html, css and js frontend I understand any framework that works with html, css and/or js... If you want to use thymeleaf or angular go for it ;)...
Correct. I was just trying to convey the relationship between primitives.
That is correct.
Actually there's a bug in 3.6 (and iirc 3.7) that when going from OrderedDict to dict order can be forgotten.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's best to have a knowledge about both, then. I'll probably start with Java EE. Apart from development and maintenance, is there a meaningful difference between Java EE and Spring in terms of runtime performance and stability?
Ubuntu 16.4 LTS has support until April 2023. Why are you upgrading an OS in production without testing?
you correct, I'd like to understand at all how I can run it. Tests will be later:)
In all honesty I don't really know why everybody is so stressed out about this. Working as a Java-consultant in the recent years most of my clients have started using OpenJDK instead of Oracle JDK, be it in the form of Azul or as pre-built packages provided by RHEL/CentOS or Ubuntu. Sure, I am not ignorant to the fact that some large businesses are crazy slow when it comes to going to the next version of Java in a timely manner, but going forward this is simply a behaviour that (forcefully) changes and realistically that's nothing new either as there are plenty of other languages which are in common use that have no "LTS"-version of large commercial backers with a to-pay-for license-scheme. Neither is this something new outside of the language-domain. Plenty of companies use and distribute Chrome to employees' workstations and the major version of Chrome goes up every couple of months potentially causing issues. How many are complaining about that? Java is now moving ahead faster and the best I can say now to calm everybody's nerves is "just put a 1. in front of the version number and you'll be less stressed." Java has traditionally been backwards-compatible from major version to major version and I don't see why this would change. Sure, there may be new language features (none of which have to be adopted), refinements, optimisations, but your code won't suddenly stop to compile or stop to run. Provided you don't use APIs that are marked as internal (which developers shouldn't have used in the first place) you are safe. I also know that traditionally frameworks and libraries that may use internal stuff without you knowing about it have been a source of problems when upgrading, I also know that the fact that a bit too much was packed into the standard library was an issue ( JAXB/JAXWS, anybody? ;) ). Thankfully the transition to Java 9 has unearthed that we were taking stability of internals for granted and that we adopted some bad behaviours that we all knowingly and unknowingly are guilty of. We were warned for appx two years and have lived with the fallout ever since Java 9 was released. Java 11 (which ditches things like JAX-WS) is the last step to force us into being more aware of how we build our software and after these pains are gone, unexpected breakage should be so rare that the time (and thus money) invested simply drowns in the regular maintenance budget.
And it seems that `OrderedDict` is from 2.7/3.1, which explains its existence. :)
&gt; You can deploy multiple microservices into an app server You can, but that doesn’t mean you should. With embedded C code you can zero out your own code, but that also doesn’t mean you should. 
Nice, using MicroProfile extensively and even in conjunction with what can be considered close to antiquated stuff (i.e. MP-JWT for JAX-WS-services) and seeing customers finding it appealing to spice up old apps with fresh tech so it's great to see that these APIs are now available in Red Hat's full-fledged appserver-offering without having to ask customers if it's ok to switch to Thorntail/Payara/Liberty/KumuluzEE at the same time.
Dude... Two years ago this was told to us and one year ago Java 9 was released. Since the beginning of the year it was also announced that CORBA, JAXB and JAXWS would be moved out of the Java core library to be maintained separately from 11. Simply add JAXB as a dependency to your project and you're back in business ( or do a --add-modules java.se.ee if you want to call it a day and go home ;) ).
&gt; in terms of runtime performance and stability? Well, there is where things get weird, because there is only one Spring (implementation|vendor), but there are *several* JavaEE implementations. So, on the one hand, one could think of JavaEE having a superior performance profile because if you don't like one, then you in theory can switch to an implementation that makes tradeoffs that may perform better in your circumstances. From a similar perspective, JavaEE _should_ have a better stability record because there are usually TCKs meaning a vendor can't just "yeah, works on my machine, ship it." However, I also think TCKs often cost $$$ and thus not every vendor is certified so ... :shruggle: I guess. The counter narrative from the Spring camp may very well lean on its raging popularity: Spring can say it performs well and is stable because of its existing track record, and that so many folks have bet their company/career on the platform, which wouldn't end well if Spring was known for randomly failing or whatever.
What's the best way to keep in touch with the developments?
Uhhhh, thats's exactly what you can do with WildFly Swarm and Payara Micro, and frankly could do for years. We deployed that way via WildFly/JBoss AS years and years ago.
Try Netbeans in version 6.0 with uml extension.
Which extension?
Hey, Yioda, just a quick heads-up: **refering** is actually spelled **referring**. You can remember it by **two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Because Chuck Norris deploys in production without testing. Actually he doesn’t even deploy, he can hot swap anything.
It was for my own sites, I can do what I like with them, I'm paying for them.
I use the Ubuntu fakey 11 which is 10 in out IT end. Still java 8 in uat and prod. Once 11 is GM maybe 6 months later we might switch.
Going to throw some buzzwords that are currently all the rage: microservices, containers, docker, FAAS, serverless. I'm not saying any of it is better than an application server.
My answer [here](https://www.reddit.com/r/java/comments/9bu6oh/wildfly_14_is_released_now_with_full_ee_8_and/e56p9dj/).
i've tested my apps with java 9 and 10, but I'll probably make the jump with java 11. I just have to change my build system to pull in the appropriate javafx arch jars on build
It looks like in your [submission](https://www.reddit.com/r/java/comments/9byybo/how_to_emulate_materialized_views_in_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I probably wouldn't go back to a JEE app server after having worked with JBoss for the first few years of my career, and now using microservices that can run on their own, both with and without Docker. App servers seem to be a solution looking for a problem. It was apparent, at the time, that trying to do anything complex with security or clustering or connection pooling was always tedious because the whole point of the model is to get you hooked - making it easy to start, but then need a support contract from IBM or RH or Oracle for the hard stuff which was always poorly documented, on purpose. Once you begin architecting for platforms like AWS or Azure, using lightweight stateless services with fast JMS queues, Redis, and basic load balancers, most of the complex things that App servers solve aren't even needed anyway.
Wow, I would think a for pay IDE would be more up to date.
&gt; But since the two are equivalent and derived from one codebase There are still some differences in the underlying graphic libraries. And the crypto is crippled in OpenJDK.
We’re running ten in two production systems. One of which is a very high throughput enterprise SSO system. So far so good. Started talking to the team about moving to 11 soon. 
For clarity I should have said, “running java ten in two system”
I suggest using double. Better precision at same speed. The only reason to use floats is to save space with very big arrays.
This shouldn't be too surprising. Java 8 is the latest long-term-support release of Java. Java 11 will be the next LTS version of Java. When you're shipping an important tool that people rely on, you ship conservatively. JetBrains wants to make sure that their product works. I'd say the fact that it's for-pay makes it more likely to be conservative. A free IDE might not mind giving you rough edges as much. At my work, we're looking forward to Java 11 and testing things, but we're not going to be chasing the feature releases every 6 months. I think it's somewhat unclear how the feature releases are going to be used. With Ubuntu, the non-LTS releases are used by home users who want the latest stuff while people generally use LTS releases on servers. Java might follow a similar pattern. Java 9 is no longer supported (with support ending in March 2018). Java 10's support is ending this month (once Java 11 is released). Java 8, by contrast, is going to be supported through January 2019 by Oracle (probably longer by OpenJDK, Azul, or others) with extended support through March 2025. Companies are going to target versions of Java that are going to be supported. If JetBrains targeted Java 10, they'd want to make sure they could instantly cut over to Java 11. If they target Java 8, they have at a minimum 3 month buffer and realistically a lot longer given OpenJDK, Azul, and others. I'm very enthusiastic about Java's 6-month release cadence. I think it will make the language development a lot better. However, I think a lot of people will still target LTS releases.
I have my company's flagship product building and passing tests on 10, but we show a marked decrease in performance vs 8. (19% +-2%) Our workload is *very* IO intensive. We're looking at staying on 8 until 11 gets up close in terms of performance, then having a "flag day" near the end of the calendar year.
Java8 4 lyfe
Java 11 might fix it on launch. It looks like the difference is due to ftruncate vs fallocate, and afaik that change is due to be reverted in 11. 
Thanks, I've found a plugin named EasyUML that worked for me.
yes
Wait, I'm confused, though. Google's use of OpenJDK with ART is okay and allowed but Dalvik was the problem - why is that? Why are they allowed to use OpenJDK? Does this mean that Wine isn't allowed to use Microsoft's APIs or re-implement them because it's closed-source and not open-source? This is all very confusing to me. I just want to keep using Linux with Wine...
I want to disagree with you, but I can't, but I still want to be able to run Linux with Wine, I absolutely love how good Wine is these days... 
Wait - let me understand this right, there are four fair use criterias and only one of them has to apply in order for something to ideally be ruled "fair use"? As you stated, "intention to permit third party interoperability" is one of the four criterias for fair use, so anything that allows third party interoperability (in other words, Wine) would mean it is fair use and is allowed? Wine might actually be okay? What about Linux kernel drivers? I heard that Linux kernel drivers would have to be ripped out (since the manufacturers of said hardware didn't give permission), that would make Linux pretty hard to use for me and others... is that the case ,or do you not feel that is true? 
Wait, according to fair use, would that mean that Wine is actually okay because it is not designed to be a commercial profit that doesn't allow interoperability?
So instead of AbstractManagedTransactionProxiedConfigBeanMetaFactoryFactory we get LightweightAbstractManagedTransactionProxiedConfigBeanMetaFactoryFactory? I’ve been a professional JVM developer since the late 90’s, and I have yet to have anybody explain to me why an app server provides any value over just embedding Jetty with a HikariDB connection pool. 
Yup, the arguments Oracle have used would explicitly not also apply to wine, so it is probably safe.
We compile with Java 8 and run on Java 10 in production for better integration with Docker. We wiĺl make the jump to Java 11 on GA.
All we need is a stable JVM because we're mostly using Scala which reaulted in Java 8 still good enough.
it depends on the circumstances, but yes. 
I doubt that you will ever see anything in Java 9 as that was a short-term release that was quickly replaced by Java 10. Plenty of stuff around that still depends on Java 7. But I guess if you are developing something new you will think of 11 rather than 7 as these two are completely different
https://wiki.winehq.org/Winelib_User%27s_Guide
This would be a good point if the next LTS release wasn't out in less than a month and intellij had an ETA on supporting it.
PlantUml plugin for eclipse can do that. 
With Open Liberty as well as other app servers including it then it has to. Plus microprofile is meant to be an app server spec alongside Jakarta so it would be odd if they didn't include it tbh.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In relation to smaller images, we’ve found the opposite. Java 9 and 10 don’t have support for Alpine Linux, whereas 8 does, so moving from 8 to 10 has massively increased our image sizes. 
The jvm will use simd instructions which prefer float by default. 
lol, i was confused a bit. 
They did a huge move in stability and GUI interface in v13. I believe 14 is a realy great release. Such a pity so many ideas were extinguished in JavaEE8 spec, like JCache or David Blevins' idea of moving JCA forward, or MVC merging into platform. Merging EJBs and CDI -would be cool but i don't see it possible without breaking changes. For a regular companies and todays' hardware I see application servers as a perfect suite for regular internal companies' apps, while. Spring Boot feels like better solution for single apps or startups. Regular Spring - strange monster. They would better go by relying on they' own stack and abandon JavaEE ship. Now someone has to update JavaEE's tutorial, explain people why we have beans managed by jsf, cdi and ejb.This is JavaEE's technical dupt, its better to clarify it than hide.
"any year now"?
Java 9 hasn't even had support for the last 5 months.
I though you need to modularize your app and dependencies to be able to use jlink. Or are you using another tool to just pick what you want? 
Nope, in a rather big company here, we're still in Java 8.
Gonna stay put on 8 until the next LTS
Honestly as a learning excersise I would recommend a small app using only Servlets and basic JDBC for database. It will be a little painful but it will give you the under the hood understanding of how these things work. At the end you'll understand clearly certain frameworks exists and what they're good for. 
We have multiple prod systems on java 10 already, and are porting more and more. The performance especially on containers are great.
When will Shenandoah be ready?
What about the official docker image? There's 10 and 11 images available, including a slim version. No alpine version for 10 or 11 yet though. There is for 8, so maybe they'll do one next month. https://hub.docker.com/_/openjdk/
Your just joking, right? 
I use those with the slim version but install curl and less. Still smaller than the non slim version. I believe jdk 11 has docker support built in. 
Oracle officially supports Alpine, so we should get an Alpine variant at some point. Java 9 added some support for [cpu and memory limits](https://blogs.oracle.com/java-platform-group/java-se-support-for-docker-cpu-and-memory-limits). Java 10 [improved](https://blog.docker.com/2018/04/improved-docker-container-integration-with-java-10/) that support.
Probably not. I work on a Java 7 codebase and would like to upgrade too. 
Why would (s)he joke about this?
I have an app that is on 1.6 Gets about 600k logons a day. We won't be moving to 1.6 unless we have to :/
 &gt;some bugs in scala Care to elaborate?
Couldn't find at Eclipse Marketplace
We're on Java 10 on a lot of the microservices. If you're running in Docker it's pretty much a must.
Curious; why would you want to? In my experience generally those generated diagrams end up such a mess that no one is going to view them anyway.
I should clarify, https://adoptopenjdk.net/support.html mentions, but the TSC repo you mentioned doesn't.
Wait - yes to what? Yes to wine being okay, or yes to having to rip out the Linux kernel drivers, or yes to both?
Do you know why that is?
still java8 our back end is on AWS Lambda which only supports java8 for now.. I really hope they will pick up 11, hopefully soon. 
Alpine uses the musl C library instead of the usual glibc. Early Access versions of the JDK are available for Alpine but full releases aren’t, though I have never been able to find out why it works for Early Access. There is the OpenJDK Project Portola working on this.
IntelliJ's UML-diagram (powerdby yFiles) is great. Here is an example: [uml-short](https://i.imgur.com/grBGc8g.png)
IntelliJ's UML-diagram (powered by yFiles) is great. Here is an example: [uml-short](https://i.imgur.com/grBGc8g.png)
i'm anecdotally seeing a pretty big drop on cpu intensive calculations (eg 30% in xorshift) too - i haven't tried to dig into what's changed. this is between 8 and 9
It's not really being actively being developed. We have a whole suite of automated tests that we are confident they will find an issue if one arises. The real roadblock is a jar we must use that is provided by another division. It not ready for the upgrade, and THEY have no bandwidth to support it. We have another project that is being actively developed, which is ran on 1.8, so atleast we get to learn/utilize its features with that application. 
What is this about? G1? Better memory consumption or something else?
I‘m also for learning basics before the advanced stuff or encapsulating frameworks... but if you apply for a job then you need to show that you have skills that size the current business... so from this point of view I would create a springboot app and to learn whats going on in the background I would use plain JDBC...
The -XX:MaxRAMFraction option is basically bugged in Java 8. 
What's the significance of this? I've seen every patch update posted here but why?
Not sure why it is bugged (it was backported from the same code base). -XX:+UseCGroupMemoryLimitForHeap working well on Java 8 with Xmx. 
Ok thanks!
Our company was using Rhino JS Engine heavily in Java 7, we went to Java 8 and started to see all sorts of bad performance issues, and what appeared to be a memory leak in Nashorn (the replacement for Rhino), we went to the latest version of Java 8 and we are starting a rollout again to see what happens. Since all JS engines are being deprecated in Java 11 we are probably going to be stuck on Java 8 for a long time once we get there. 
Nope. Knowing the way things go around here, either there will be a scramble to get to Java 11 when 8 goes out of public LTS, or a scramble when 8 goes out of extended LTS in like 2026.
Ok will try it out, although i have 10 button to do this, will need a lot of on click listeners 😅😅
I'm running a service in Docker in Ubuntu 2018 on Java 8, runs fine today. I built the image on Alpine Linux about 2 years ago. It made it through the upgrade from 2016 to 2018 fine but I did have to fix Canonical's egregious error in making Java 11 default, using "upgrade-alternatives --config java" then picking Java 8.
I know there are places out there running on 6. I can't imagine how Oracle woke up one day and said [hey, wouldn't it be great for the Java world if we started spinning out tons of changes and Java versions in a short time span]. Startups are resilient to (even love) rapid changes, enterprises aren't (and don't).
😂😂i think you need a better way
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There are JDK EA 11 builds for Alpine available at http://jdk.java.net/11. Start with a standard Alpine image and download the JDK from there. Example: FROM alpine:3.8 as jdk RUN mkdir /opt &amp;&amp; wget -qO- https://download.java.net/java/early_access/alpine/27/binaries/openjdk-11+27_linux-x64-musl_bin.tar.gz | tar xz -C /opt ENTRYPOINT ["/opt/jdk-11/bin/java", "-jar", "/path/to/my.jar"] 
Nope. The move for us will likely be from 8 to 11.
I'm saying even lower - tomcat or similar with Servlets. 
This is not the "official" OpenJDK image. There is no such thing. At best, it is the "top level" repository of OpenJDK images on Docker Hub, managed primarily by folks at Docker Inc.
 I'd argue, if your application is ready to use the Java Module System, don't look for a special Java image, but take your preferred Linux version (e.g. the [Fedora-Container-Minimal-Base](https://koji.fedoraproject.org/koji/packageinfo?packageID=23806) image and then just add a jlink image with just your application and the parts of the JDK needed for it. Ideally that's IMO done in two separate image layers (one rather stable with the (JDK) dependence modules which you'll only need to rebuild and distribute if your dependences change, and another one just with your application module). That way your image will be smaller overall, while still having to rebuild only those layers actually needed. You can find an example here in my description of [building images that way](https://github.com/moditect/moditect/wiki/Creating-dependency-images) using my ModiTect Maven plug-in (which uses jlink underneath).
scala seems to compile fine with no optimization flags under jvm 11, but switching on the optimization options causes some compiler crashes.
i prefer to run my java software with my system jvm, so it's not really a non-issue for me.
wine almost certainly would be ok, and kernel drivers are almost certainly fine. it'd really be up to a court to determine, but they're both non-profit projects with interoperability as an obvious goal
Alright, awesome. I think the courts would be more lenient towards a non-profit project and that's if MS and others decide to take them to court which I don't think they will. I did my first internship at a non-profit so I definitely know what that kind of lifestyle is like. I hope Linux and Wine stay around for many years to come.
Yeah, 8u131: https://blogs.oracle.com/java-platform-group/java-se-support-for-docker-cpu-and-memory-limits I'm still not convinced it's complete though, it now interprets the cgroup value as the total RAM available in the container - correct - but then (AFAIK) uses the ancient math of setting the JVM heap to 25% of it. That's just the heap, not the max RAM used by the VM including non-heap things, so it's still possible to hit OOM and so kill the app depending on what the app does. Also it doesn't account for OS headroom. I'd consider doing the multistage modules thing if it was automatic (gradle) but last time I looked you had to manually declare what you, and your dependencies, need which involves some trial and error and then risk. I was hoping to use docker layer slicing so we could only push the layer containing our app that's on top of the OpenJDK image and have the container host stitch it together on deploy (or have the repo stitch and cache on push) but I'm not sure if ECR supports that.
Some of our micro service docker images are built on Java 10. Our massive enterprise monolith is still on 8 and likely won't upgrade for a long time.
Like this? (at the end) [https://www.youtube.com/watch?v=LNizNHaRV84](https://www.youtube.com/watch?v=LNizNHaRV84) &amp;#x200B; &amp;#x200B;
At the end he is moving a turtlw around, at what exact time in the video?
Well if you don't add the forward keybinding it just turns
Wait I think I misunderstood you. You don't want keybinding but a method that rotates with as parameter a string consists those characters
I think they're just advertising their project, although a post per patch might be a little excessive
Yeah
1. Wrong subreddit. /r/javahelp is for programming help 2. Nobody will do anything for you without you even spending the least bit of effort.
That looks really handy. Are you considering a gradle version? :-)
Since this is help with Java programming, it should be posted in /r/javahelp.
On ARM software rendering is way worse than hardware acceleration with ES2 pipeline. (On desktop it usually is as well, it's just the behavior I found on my integrated video chip) I began with Swing and gradually moved away from it to JavaFX, I don't have any desire to go back tbh
which is in a month
Yes, it's the docker image from Docker Hub, not Oracle, because Oracle only have OpenJDK 8 or earlier available: https://hub.docker.com/r/oracle/openjdk/ "**official docker** openjdk image", not "**official** docker **openjdk** image". 
Yes, we're on Java10 and we're planning to move to Java11 a month or two after final release.
Do you have source for that?
It’s very unlikely there will be JDK11 on Alpine any time soon. There’s an OpenJDK project working on it - Project Portola - but there’s no signs that they are anywhere ready for release. The EA builds work on Alpine but GA won’t. 
If you just want to know how matrices work pop open a book on linear algebra.
considering Kotlin just had a new stable release recently (8/20/18) this is a very real possibility
boom goes the dynamite. great response. 
Semantics... Still not official. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Not really a fan of pulling a third-party wholesale stream reimplementation in for basically no reason. And that also seems like a pretty ham-fisted attempt to shoehorn in some kind of poor-man's "pattern match" API to literally perform the exact function of an if else. I feel like a hamming library would be better presented against the standard library as a stand-alone dependency. I'm willing to accept that I'm being unfair though if anyone has a different opinion!
What ever happened to Freshmeat?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Also, doing something with string operations instead of bitwise logic seems inefficient. 
Maybe `distroless/java`, it's what google's `jib`-tool uses.
What would you use if you need 2D or 3D graphics in your Swing application?
&gt; Java 3D What to use when 3D graphics in a Swing application needed, then?
What are the reasons to prefer Swing over JavaFX, apart from documentation?
We used a slightly customized Dropwizard template for all new services at my previous employer. It was a great experience. It comes with so many features right out of the box and is well documented and easy to learn. 
Customizing widgets in Swing is best handled using a custom Look&amp;Feel. The Swing widgets, unfortunately, are fairly deep class hierarchies and complex components. So it is possible to subclass say a JButton and override the paint method and use it but then if you use say a drop down list box that embeds a button, that button will look like the default not your overridden one. So you'll have to override the list box as well. If you can plugin a new L&amp;F that is probably the better way to go. For animations at the lowest level all you're doing is painting a different scene at a given tick in timing. For example, you might have a 2D sprite that is a torch picture. You create 16 different versions of that picture with the flame modified in some small manner. Then when you render the torch you change which image you use after some period of time between renderings so that the torch flame movement looks natural. When I've done that, I usually use the update cycle of my main game loop and the delta between updates to calculate the frame change. I've played with a couple of different libraries like ImGui and using NanoVG to handle 2D primitives but the Java to C interfacing feels a bit clunky. So right now I've started building a custom set of 2D renderers (quads, filled and empty, with square or rounded corners, already have functional text rendering) from which I plan to build out the basic widget set I may need like buttons, panels, labels, text fields, check &amp; radio buttons, list boxes and sliders. Still very early stages on this.
That's really cool! Would you be interested in creating a short tutorial for scala/sbt/revolver for javalin.io ?
The "how" is there, but the more important part, the "why" is missing. That's why [Java Design Patterns](http://java-design-patterns.com) is by far better.
The spring boot comparison might have been true before 2.0 version. 
Two things: + Not enough explanation for a tutorial, not deep enough for a serious blog post. + This subreddit has a **"no tutorials"** rule. Please refrain from further posting tutorials here. 
I've used Dropwizard for a couple of services in production and I really liked working with it, but I don't choose it for new services anymore. It kind of falls between two stools. You can't really use it as a UI backend server. It really falls short for server side template rendering, CSRF, and authentication. And for cross-service communications people rarely use plain REST , so we can't use it there either.
Why can’t you use it as a backend server?
Wait what? I use spring boot every day at work and generating JSON from pojo's is something I've never had to worry about. It just works.
Interesting, why is that? I haven't used Angular and have mostly done React stuff. Spring boot JSON was easily consumable there (I mean, you just write the components to consume the HATEOAS stuff and it works). Does Angular have a more rigid system?
Mostly for the things I've listed above, but let me clarify a bit more. Out of the box, it supports two template engines, which is good. You pass the model and the view path and it renders it - no problem there. Issues come when you want a little more advanced behaviour. No flash redirect attributes, session management, social login solutions. You have to write these yourself. Most of these things are coming out of the box with frameworks that are meant to be a UI backend servers, and you probably don't want to spend time on writing these things. Authentication and authorization are as basic as it gets.
You could also look at jhipster
True, but before they didn’t and they somehow still don’t want to include all MP APIs.
CDI? BeanValidation? JAX-RS?
In my experience Dropwizard works quite well as a microservice base framework; you should add your own cross-cutting concerns on top, than use that as the base for your microservices. DW is pretty lightweight, and that helps in a dynamic environment.
Thank you. I'll look into L&amp;F in Swing.
I'd love to know why if you don't mind sharing your thoughts.
Does modidect convert the dependencies and transitive dependencies into named modular jars?
Here I am. Can't even convince my folks to use java 8 -_-
[off-topic] I started learning java 8 from your blog. I never know that you are active on reddit. Thanks for sharing your knowledge and experiences with us!
Although I like Jersey (or JAX-RS in general) better than Spring MVC, I think Spring Boot is overall the better framework. I like the modularity of Spring Boot, whereas I don't see any need to include something like Guava or Apache Http Client or JodaTime in the framework. Especially JodaTime has been superseded by the (not so) new Java Time API. Is it really so hard to include a dependency in the pom.xml? What makes a framework like Dropwizard useful (one could call it meta framework) is the wiring, but to wire something like Guava is simply not necessary. Spring Boot has a lot more to offer and you can plug extensions in or replace things like Logback with (the faster) Log4j and the limited slf4j API with Log4j API. Another major difference I see is the support for reactive programming, where Spring really shines. WebFlux is a joy to use, whereas async programming with JAX-RS is a PITA. To the article itself: adding getters and setters to everything is bad style! What is the sense of making a config object mutable?
There are many things wrong with spring but its default JSON output isn't one of them.
How does it support oauth and oidc?
For me it’s three things, in order of relevance: 1. Spring boot has WAY better documentation and since it’s more popular, more blog articles and stackoverflow answers 2. faster to get something working, I don’t really enjoy tinker with app infrastructure (like getting dependency injection working and stuff. Getting up to speed is just faster 3. for a professional setting, more people know Spring boot so it’s faster to get new teammates up to speed 
Well, I'm lost. I have to override the default behavior to get an object to output JSON with its nested objects, because that would be bad, I guess. Then I have to override the default behavior to output the ID's, because that wouldn't be "textbook REST," so that I can prevent it from producing an infinite loop when I do so. It's all here: https://stackoverflow.com/questions/52122484/how-can-i-setup-spring-models-to-support-an-angular-edit-component-for-a-complex. I'm desperately looking for anyone who can tell me the "right" way of creating an Angular edit component for a complex object when served from Spring. To all the down voters: Feel free to point me to a COMPLETE, CURRENT example of this, and I'll take back everything I said. I've spent a month on this, and can't find one. 
The ONE example of consuming a complex Spring object in Angular that I have found is by none other than Matt Raible, but it's for Angular 4, and it has all the mountain of other libraries that go with jHipster, and I can't figure out what's influencing all the various layers of functionality. 
I've spent the afternoon setting up JMH to test various implementations. With four threads (cos it's a four core CPU), a ConcurrentHashMap with AtomicIntegers is 5x faster than the one in the article, but a LongAdder instead of an AtomicInteger is 30x faster. I suspect LongAdder scales with CPU cores. It blows the competition out of the water.
Ugh spring data rest. I think that project has some incredibly limited uses and should best be avoided for anything but the most trivial of projects. If you want to go down the hypermedia route, I'd suggest something a bit more hands on like the Spring Hateos project https://docs.spring.io/spring-hateoas/docs/current/reference/html/ 
There is no particular reason to prefer swing over JavaFX.
&gt;And for cross-service communications people rarely use plain REST anymore I'm finding that kubernetes has increased the popularity of using plain HTTP for cross-service communication. Kubernetes comes with a DNS server and load balancers that make service discovery easy. I agree that REST isn't used much anymore though. I mostly see RPC with plain json bodies. But I don't see why dropwizard wouldn't work with that. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Agree completely, plus everything else Spring is capable of
Agree completely, plus everything else Spring is capable of!
Having used Spring and DropWizard, I much prefer DropWizard. DropWizard seems to me a more neutral collection of some of the best tools for each job, and it's both simple and easy. Spring is just Spring, Spring and more Spring, and while it's easy, it's not simple- there's a lot of magic.
Super frustrating!. The price 550$ is too expensive. Spring boot tools is very nice for spring boot projects. But i have tons of old maven project which there's no way to use spring boot tools. I've tried the [http://hotswapagent.org/](http://hotswapagent.org/) but it's just simple implementation, could not cover many cases. &amp;#x200B; is there any other alternative? Thanks
What I'm currently doing is generating a new trial license every time one of them expires.
LWJGL.
You should not use Spring Data REST, period. It's only use is some quick prototyping, not production use. Typic microservices have 3 layers; the controllers (presentation layer), services (business logic layer) and repositories (data access layer). It's common to map the entities to data transfer objects in the presentation layers and let Spring render these to JSON. This is not just Spring either; it's a standard pattern with any framework. IMHO: I dislike Spring Data REST because it gives people the impression it can be used in production. You should never do that; it's way to easy to accidentally expose stuff (like hashed passwords for example).
&gt; I want to get into back-end development. And Java EE looks more appealing than Spring these days. For a beginner I'd strongly recommend Spring Boot. Spring and Java EE are very similar (so moving between them is easy; I just use whatever the client wants to use) but the Spring Boot is much easier to get started with and the community is much larger. 
The reason you prefer Dropwizard is the reason I don’t prefer it, I don’t care about “neutral collection” I just want thins that work so I can focus on the fun stuff. :)
I find RAML 1.0 with RAML2JAXRS to be a much better way to design your APIs and generate the service code. You then add simple resources (in a Spring boot app or jetty or tomcat... ) a simple starter class to include the resources classes and you are off to the races. Less code, API first design with single source of truth... very fast and easy to add endpoints that adhere to good rest design principals.. and tons of tools like doc generator, test tools, etc to use on the same single source of truth RAML file.
Perhaps because nowadays a lot of plugins are not there. See http://plantuml.com/eclipse
so bad, 4 years ago...
Are these production systems? 
&gt;This is not just a technical explanation about what default methods is but rather how you can utilize them. Yes, sure. And the article isn't bad. It's just not very relevant or news-worthy anymore as experienced Java developers will already know it and new learners need to learn all the stuff anyway, so they don't really need random articles about some specific features when a more guided tutorial/book would be more helpful.
You asked about "What to use when 3D graphics in a Swing application needed", not what to use in JavaFX. In any case the answer would still be LWJGL, because JavaFX 3D support is at toy level, worse than what Java 3D was capable of. Unless you want to show a render of simple meshes, like furniture for catalog application.
if you still looking, I may help as a java/angular/hybris developer
See https://arjan-tijms.omnifaces.org/2018/05/java-ee-survey-2018-results.html.
s/8/Java 8
java 11 is behind the corner, i realy wonder how the Java 8 Interfaces deserved a tweet :)
I'm not sure about, i'm new in the project but i think that is because the project is a bunch of netbeans modules and has no build automation and netbeans could have some problems with new servers plugins and no one take a breath to migrate this. But thanks for your reply, that makes me think more about. I'll talk with my coleagues and try to migrate.
Something new is always around the corner, I imagine most people are still on 8.
If you want to take my new workplace as an example, almost no one there knows functional interfaces. Some people don't even know they exist.
/r/titlegore
This article is really lacking. I wonder why would Java's official (?) Twitter account even consider to link it. It just copies the interfaces' source code with barely any explanation, e.g.: &gt; 3.3 Supplier Represents a supplier of results. Woah. And then adds a single "example" for each interface, but they are really, reeeally simple, just `println()`s and calls to `apply()`/`accept()` -- and it doesn't even show the output: Consumer&lt;Person&gt; consumer = (person) -&gt; { System.out.println(person.getName()); System.out.println(person.getAge()); }; consumer.accept(new Person("Ramesh", 30)); No examples of how to pass them as parameters to other methods, or how to use them with Streams, or any Real World™ example of how to use them, or why. So, the topic is really interesting but the article is not really useful at all in its current state, sorry. PS: Also, the `BiConsumer` example is a duplicate of the `BiFunction` example (probably just a copy-paste issue), so it's actually missing the example for `BiConsumer`.
Codebase still &lt;= Java 7 ? Then it is very understandable
Haha I was told in a codereview that my interface did not work the way I thought it did and I should know better and make it an abstract class. Haha... yeah catching up with the times...
How is the ecosystem? Are there a lot of off-the-shelf components (either first or third party) for things like social login/oauth (I'm thinking like the django ecosystem) or are you still writing all that custom for your app?
I had that issue with Dropwizard which caused me to not look back. I have developed a love for Jersey however and what I tend to use these days when I want a Java stack for an API.
It's not *understandable*, it's *assumable* - but still *sad*! Only because I can't use it right now should imho not be an excuse for staying up-to-date. 
Wait, you mean there aren't exactly 8 functional interfaces in Java? 
Please, give me a link or package name if you know where to find it inside EPEL. I think my search skills are letting me down.
We're still on Java 7
I've been doing web development for over 20 years, through Frontpage, PHP, Rails, a little ASP.NET, and, now, Java, so I'm clear on what _functions_ need to happen. Again, I invite everyone to point me to a working CRUD example using Angular with some sort of Spring backend. What's your suggestion? Maybe HATEOS, or DAO (or are those the same things)? Again, a single working example of a non-trivial application would be worth its weight in gold.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9cmx3y/how_should_i_modify_break_into_my_java_code_from/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I really think it depends on the application.
The general attitude I see is a "keep work at work", which seems to include anything programming. I'm on board with you though, staying up to date is important.
If it runs for longer than a few seconds Lambda might not be the correct choice though.
I think your employer has a big responsibility in this too. Often they "safe money" by not offering further education in the short term. You absolutely have to get time also within your work time. But on top of this you have to stay curious and invest a little passion also in your spare time imho. And even if there are possibilities lots of employees just don't care about. And that's what lead to a lack of knowledge in every aspect that lies beyond the daily comfort zone. Sad but true - as Metallica have said 😉
I like the way the source code for the Predicate, Function, BiFunction, Supplier, Consumer and BiConsumer interfaces are replicated in full - they represent over half the article's content. Also, the comments are curious: interface Sayable{ void say(String msg); // abstract method // It can contain any number of Object class methods. int hashCode(); and do you really need these on your interface...? int hashCode(); String toString(); boolean equals(Object obj); Pretty sure this is not valid Java: Sayable sayable = (msg) - &gt; { System.out.println(msg); };
Cool. Someone implemented SQL assertions before Oracle did.
I'd guess this was meant to be ironic. 
Yes, it can help you with that. You can specify a module descriptor, which will be added to the dependency JAR files. To specify descriptors, you can either give the contents verbatim in your pom.xml (it's compiled using ASM) or you can use a semi-automatic mode, where first a "candidate descriptor" is generated which you then can amend/override as needed (e.g. to limit the exported packages or to add dependence modifiers). You can see an example here which modularizes Vert.x that way and then builds a modular runtime image with it: https://github.com/moditect/moditect/blob/master/integrationtest/vert.x/pom.xml
Yes, it's planned. Someone even has started the work on that, but it's not integrated yet.
I imagine it’s because there are a lot of examples kicking around from before it existed, so when people look for how to do X, it’s never the first result.
Do H2 or HSQL implement it as well?
No.
Because I'm still working with java 6...
because java 8 delivered more "functional programming" features. With the new java release cycle, Java 11 / 40 has lost all meaning and there's been essentially no dev candy since java 8. Still, its a bit odd to write about this 4 years after release. 
&gt; There is one irregular restriction on lazy finals: They must never be initialized to their default value. Thus, a lazy field of reference type must not be assigned a null value by its initializer, and an integral type must not be assigned zero. A lazy boolean can only be assigned a single value, true, since false is its default value. If a lazy static field's initializer returns the default value, the linkage of the field will fail with an appropriate linkage error. Probably fine since you're likely to almost always use these for references, but unfortunate nonetheless.
It's an interesting idea. I It would make more sense to perhaps implement this as a plugin for h2 (http://www.h2database.com/). h2 is already a very popular, fully-featured rdbms. There's no need to reinvent the wheel here. H2 already has the ability to write Triggers as Java interfaces (http://www.h2database.com/html/features.html#triggers) which let you do complex consistency checks in Java. What would be interesting here would be to modularize the project into (1) a language for expressing complex consistency checks and a parser (2) a Java model created by the parser (3) an engine for evaluating such checks in the h2-database. 
sadly, this joke never gets old
Thanks! Let me check out H2. I was considering forking MySQL or PostgreSQL before. The main issue is in order to do this efficiently I had to go down pretty much to the storage layer (multi-table check evaluations are extremely join heavy plus I need to do a great deal of caching for constraints containing aggregators). So the most likely result would still have been to fork H2 and then a divergent development path. Factoring the language parser into a somewhat independent project is on my roadmap though, so people can hook in their own DB if they want.
This feedback (why not do it on top of an existing DB) actually comes up a lot, and it's a logical question. But I think there is a reason why existing DBs never added this kind of stuff, and it's because it's hard to work this into the existing concepts (like triggers and procedures). I'll probably have to write a whitepaper of some sort to explain this design decision and put it in the github repo.
Hi, thanks for your comment. You are right about those dependencies, but they are pulled from the latest Guice version (4.2.0). There is not much I can do... https://i.imgur.com/97PXCIY.png I'll update the [Transitive dependencies ](https://www.spincast.org/documentation#dependencies) section of the documentation to add them.
I think you are under the false impression that it isn’t used much. Why do you think this?
That’s interesting. It looks like the JVM uses these default values as a sign that the lazy value hasn’t been initialized. There are definitely workarounds with boxed values but I agree it’s kind of unfortunate 
 All the tutorials I originally learned java with Just focused on the streams for input and output. I just assumed that if the tutorials were for the newer versions of java then they'd include it if it was popular. 
&gt; I rarely box my primitive constants, but when I do, it's because they're lazy.
I like the concept of lazy, but dislike this: &gt; A lazy boolean can only be assigned a single value Consider the following, and IMO a very appropriate use-case: public lazy static final boolean A_PROPERTY = System.getProperty("the.property") != null; This cannot be used with the proposal. Of course, you can change the boolean to `Boolean`, but that feels ugly and a hack. I feel like that this restriction is just a result of lazy implementation (pun intented).
I really don't see a problem with boolean in that case. They should be true or false, if you want a third "status" from a boolean then you need to use another type.
Even though I only started using Java after Java 8 came out, and I never used anything older than 7u60, I still get confused by `Path`, `Paths` and `Files`, so I tend to fall back to good (bad?) old `File`. I'm probably missing something, or even many things, but I don't get why to create a `Path` you need to call `Paths.get`, and then many of the actions on it are in `Files`. Why couldn't the static builder method for `Path` be in `Path`? Why do we need two classes containing solely static methods for querying and manipulating `Path` objects? Couldn't all of the functionality be in `Path`? 
Yes, but false cannot be assigned to a lazy boolean as it is its default value. So if the property `the.property` doesn't exist, then it will evaluate to false, and throw an exception as a default value (0, false, null, etc...) cannot be assigned to a lazy variable.
This sounds like a vm feature for something that has a very limited use case, isn't very extensible (like kotlin by lazy is) and could just as well be achieved at compile time. Not a fan of that, at least from a brief look at the document.
You have to keep in mind a good percentage of industry is going to stay on Java 8 for a while. 
On a related note, does anyone know of a library with a lazy init class? Something that takes a `Supplier&lt;T&gt;` and only creates it when first accessed. It's not difficult to create my own, but I'd rather not bother if one exists in Guava or something
I did see that during my searches, but I'm not quite on the Lombok train yet. But thanks for letting me know.
It allows storing `null` as the lazy result.
So I guess this would have to become a compile time error: public lazy static final int SOMETHING = 0; 
Guava has [`Suppliers.memoize(Supplier)`](https://google.github.io/guava/releases/snapshot-jre/api/docs/com/google/common/base/Suppliers.html#memoize-com.google.common.base.Supplier-).
Ah, right. I'm fine with throwing an NPE on a null result then :)
Oooh, that looks like just the kind of thing I was looking for. And it helps that the method in `Supplier` is `get()` so the resulting code isn't confusing. 
This was my thought too. It sucks for primitive types, but the alternative would have been much more memory usage. Especially when there are workarounds. 
In my personal opinion, I didn't see any strong architectural decision that couldn't be found in other major framework. An aspect mentioned was, in particular, really "childish": configuration over convention. In general, conventions are optional and, because of that, inexpensive to have. You can ban conventions for the simplicity sake of your project, but not because it is a bad thing to have. Be non-opinative is broken because the framework forces you to use dependency injection. I couldn't see anything that could not be done by any other framework, so, I couldn't see any reason to even try. Altough, seems a nice pet project. Congrats. 
That's a absurd and unacceptable limitation and I really hope the feature will not make it into the language this way. I understand the kind of optimization the author has in mind but it's not that it couldn't be implemented without this limitation using only slightly more space per instance on most CPUs which is not much of an issue since the amount of static fields is usually finite and comparatively small. A compiler, especially a AOT compiler, may still be able to perform this optimization when it can detect that this constraint will always be met, i.e. with a direct constructor invocation but baking this into the language has a far too hackish feel for a language feature in Java.
I can see this being abused: private lazy boolean init = init(); private boolean init() { .... return true; } public void doStuff() { boolean init = this.init; .... } instead of the usual pattern if(!init) { init() } ....
Many of the NIO APIs are significantly more complicated than their IO alternatives. When doing run of the mill work which is not really i/o constrained, it doesn't make sense to take on the additional complexity. 
Yea, the OP makes more sense if they're talking about nio2. But nio itself isn't user-friendly API at all
All static fields in Dart work this way and it's pretty handy. It also allows you to have arbitrary references between statics as long as you don't create a cycle, without having to worry about what order their declared or executed. &gt; There is one irregular restriction on lazy finals: They must never be initialized to their default value. Dart does *not* have that restriction, though. Instead, an implementation is expected to store an additional "was initialized" bit somewhere, if that can't be optimized away. I think I understand why Java made that choice, but it's an unfortunate one. It's a pretty high cognitive barrier to require users to remember that the default value is now a forbidden value if you use `lazy`.
Yes. And the SQL standard has standardised on them for ages, but no one implemented them yet.
r/iamveryannoying
Streams are still the way to go. Channels aren't the most user-friendly thing to use.
You're right. Poor wording. I fixed it.
You can probably can exclude them, as I do with guava, since they should not be needed at runtime. &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.checkerframework&lt;/groupId&gt; &lt;artifactId&gt;checker-qual&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;com.google.errorprone&lt;/groupId&gt; &lt;artifactId&gt;error_prone_annotations&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;com.google.code.findbugs&lt;/groupId&gt; &lt;artifactId&gt;jsr305&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;com.google.j2objc&lt;/groupId&gt; &lt;artifactId&gt;j2objc-annotations&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; &lt;artifactId&gt;animal-sniffer-annotations&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;
Another ITNEXT post. Hey, dude, read the self-promotion rules. Post more than just your articles or pay for promoted posts.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Interesting, thanks. "jsr305" is required at runtime, but I'll validate if I can exclude the other ones.
We ship a 32-bit app, and use dependencies that are 32-bit only. Java 9+ is 64-bit only. So we *can't* upgrade even if we wanted to. Fortunately though, I was able to convince management that this is going to be a ticking time bomb at some point, especially from a security standpoint. They're debating if they want to upgrade to 64-bit (which will take a few years since our contracts say we have to notify clients 18 months in advance before we drop support for anything) or just end of life the whole app.
It's a bit squirrely that the flagship Java IDE product hasn't kept up it's own code to be able to run on the lastest JVM.
Artical beautifully explained Kubern8s . Analogy and diagramatic representation is wonderful. Thanks for sharing 😀
And in my case... its not a joke...
This has nothing to do with Java.
Had to double check I wasn't in /r/dota2 after your comment...
I find this kind of interesting - we've gone from single-process applications, managed by a kernel to allocate resources, to application containers, managed by a scheduler to allocate resources. It's the same design, just scaled up.
Are you using Java 10 features or running on Java 10?
Just checked this in IntelliJ. You get a compile-time error.
I agree my current company is using Incapsula for rate limiting. 
Pretty much every major survey of Java developers I've seen shows Maven having a commanding lead over Gradle. 
&gt; Supported APIs and Applications &gt; * Java EE 8 Applications &gt; * MicroProfile 2.0/1.4 API Yay!
It looks like in your [submission](https://www.reddit.com/r/java/comments/9d0wsk/maintaining_related_state_in_application_layer/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/9d10gv/computing_state_from_a_sequence_of_events/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Question: why not use an inner class? public class LazyStatics { private static class LoggerConstant { private final static Logger LOGGER = Logger.getLogger("com.foo.Bar"); } public static Logger getLogger() { return LoggerConstant.LOGGER; } } Although I guess that doesn't help if you already made your `static` field `public` (or `protected`, but why would you want a `protected static`?).
In the company where I recently worked they do serve the products in Java 10. The step from Java 8 to 9 was a bit hard but the next step to Java 10 was pretty easy. I can recommend to go with the progress in Java.
D'oh! I could've just tested it myself! I have no idea why I hadn't thought to just test it. Thanks! 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 ## New Features · \[[PAYARA-1714](https://github.com/payara/Payara/pull/2985)\] - Add asadmin command to generate autocompletion for bash · \[[PAYARA-2288](https://github.com/payara/Payara/pull/3011)\] - Create a MicroProfile Settings Page into the Admin Console · \[[PAYARA-2721](https://github.com/payara/Payara/pull/3084)\] - Implement MicroProfile Fault Tolerance 1.1 · \[[PAYARA-2761](https://github.com/payara/Payara/pull/2964)\] - Create payara-web.xml · \[[PAYARA-2834](https://github.com/payara/Payara/pull/2994)\] - OpenID connector support · \[[PAYARA-2851](https://github.com/payara/Payara/pull/3030)\] - Implement Config 1.3 · \[[PAYARA-2852](https://github.com/payara/Payara/pull/3018)\] - Implement Open Tracing 1.1 · \[[PAYARA-2853](https://github.com/payara/Payara/pull/3053)\] - Implement JWT-Auth 1.1
I've set up an assessment at my previous project. It was basically a list of tasks where the interviewee had to implement a few pieces of functionality in a REST service. It started with a basic controller, then also a separate service class for the logic, unit tests, integration tests, etc. It was set up as a peer programming exercise and they could use whatever resources they wanted. They had an hour for the test. IMHO it worked well; it was as close to 'real life' as possible and short enough that it didn't take too much time. It also showed that it's really easy to give people the benefit of the doubt when in fact they really suck at actually producing code. 
How can the lazy initialisation of private final static Logger LOGGER = Logger.getLogger("com.foo.Bar"); be achieved during compilation time?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There is no article buddy
You can use a getter, like lombok does it. You'd do that for public access anyway. Private access could delegate to the getter or to the backing field if you use nested class type lazy init. Also, loggers are a pretty bad example since they can be easily made lazy at the api point.
The skeleton project is definitely a good idea, I like it. It allows us to set a project up the way we usually do it with the tools and frameworks that we work with on a daily basis. Thank you.
&gt; Look over his shoulder, to see how he approaches the problem. This is not a good idea, some people find it hard to concentrate like that and end up doing mistakes instead of really thinking through the problem in fear of seeming stupid. It's important what he delivers in the end, not what he does while programming, so just evaluate the delivered code. 
There is no cost with getter + nested class. Checking if a class exists or not is usually fine eagerly. And even if there are a few use cases, it's not enough to justify the effort and added complexity this jep would require. The only valid argument I've heard is AOT init, but that's a pretty weak one.
&gt; It's important what he delivers in the end, not what he does while programming, so just evaluate the delivered code. I think both are important, we can just ask after the code is delivered on how he arrived at a few decisions.
Sure. He should be able to defend it.
I once had an assessment where they gave me access to a prepared project. I sat in a room with them and I could browse the files however I wanted to. My task was to analize what it does, how certain things were solved and what I would do if I need to implement feature x. Also there were many intentional obvious and not so obvious code smells to detect and refactor. I liked this assessment because I had to constantly tell and discuss my findings with the interviewers. I could ask questions if I were stuck somewhere and there was no countdown timer ticking. I think this assessment shows the interviewers much about how the interviewee approaches a problem, how he communicates and his analizing and design skills. It's more tools, language and framework independent. 
The problem of that approach is that it forces you to expose a rest endpoint. Why not use spring cloud task + spring cloud data flow? this way you have an integrated dashboard and you don’t have to create any job resources until the job is launched. The rest api is also provided by the spring cloud data flow server. See: https://cloud.spring.io/spring-cloud-dataflow/ 
SonarSource seems to be happy with Codility ( r/https://twitter.com/FreddyMallet/status/1024639087804854274).
&gt; It also showed that it's really easy to give people the benefit of the doubt when in fact they really suck at actually producing code. Did you find that the assessment gave you a more reliable view of that than a traditional technical interview? Like, what percentage of people who were hired through both kinds of processes ended up failing at the job? (I guess that's only meaningful with a large enough number of people hired through both processes.)
I completely agree with you. Reading code and understanding it is highly underrated. Most people do terrible coding under pressure, but you can assess skill by seeing their understanding of existing code. Another option is a take home problem that is done before the face to face. This gives you something to talk about and ask questions on. The only thing to watch for is if someone else did the work for the candidate.
best interview given to me as a candidate in my 20 year career was a skeleton project like this with missing implementation and a couple of bugs.
We do an assessment whereby the candidate has to solve a “simple” problem that they complete ahead of the interview. The problem is normally akin to building a micro service to return all prime numbers up to and including the input to a REST service. Most of the implementation details are left for the candidate to decide and we offer a few suggestions of what we’re looking for, but we’re not prescriptive and there really is no “right” answer. It has scope for additional features and allows us to probe at face to face interview, things such as rationale for how they reached design decisions, why they implemented feature X over Y, how they’d add feature Z if that was then thrown in as a requirement. Before the interview we have a few members of the team provide feedback on a PR for it (internally viewable only) and we then have a good basis for an in-depth discussion at the interview. This isn’t the only part of the interview and we’ll still get them to do some whiteboard work on a task such as eliciting requirements from us or designing APIs. 
/r/learnjava http://www.codewars.com
One helpful tools is [OWASP's Dependency Check](https://www.owasp.org/index.php/OWASP_Dependency_Check) tool. It needs a little care and feeding, but it's helpful for this sort of thing. Plugins are available for Ant, Maven, Gradle, Jenkins, etc.
the source code is so poorly formatted and hard to understand for that matter
It looks like in your [submission](https://www.reddit.com/r/java/comments/9d8okg/why_wont_netbeans_recognize_my_imported_project/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sonatype has also a OSS Index service https://ossindex.sonatype.org that be can used on a project (maven/graddle plugin). Not the same as scanning a repository like Nexus Lifecycle or JFrog Xray but I think it's the good way : check your dependency in your continuous integration lifecycle.
Could you elaborate on your reasons? I'm just curious. I use gradle daily and find its configuration to be a lot simpler and more powerful. I haven't found any issues w/ gradle. I've used maven in past.
The future of JavaFX now depends on https://gluonhq.com/, not Oracle. In fact Oracle hasn't done anything for JavaFX in several years. So it all comes down to how much resource Gluon and the open source community is willing to put into JavaFX.
No, skipping all non-LTS solutions. We are actually considering .NET at this point since we need stability and predictability.
Scene Builder is maintained latest release was **Jun 5, 2018**. You can download here: [https://gluonhq.com/products/scene-builder/](https://gluonhq.com/products/scene-builder/)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
All java is obsolete lol this here is just a microcosm
https://github.com/javafxports/openjdk-jfx/commits/develop seems actively developed to me
I would also recommed owasp dependency analyzer over the nexus firewall. Nexus firewall needs nexus pro repository and does not give that much more than owasp DA. 
I’m assuming you don’t have a computer science degree. I personally know people who are successful software developers who didn’t go through the traditional route of going to uni and getting a computer science degree. So it is possible. You might be able to get business freelancing but it may be harder to get a job without a cs degree as usually base requirements for developer jobs usually state a requirement of having a cs degree unless you can demonstrate and prove your ability and knowledge through your previous projects. Most job specs have cs degree as a requirement. So it’s possible although maybe slightly harder than the traditional route. 
Wrong subreddit. /r/learnjava and /r/javahelp are what you're looking for.
A—still working on java 6? Why’s that?
Thank you, I'll post it there as well.
You're awesome; Thanks!
While the I/O stream classes are "version 1" they are still heavily used. And they work with "NIO.2" quite well; look at the static creator functions in Files for example. Files.newOutputStream() might take a "new style" Path as argument, but that's an "old style" output stream coming back.
Big customer, old legacy systems with old middleware, no one wants to spend money on upgrades. 
No, but I do work with oracle products, mostly Weblogic 11g and its extensions
Good way to starrt is read Oracles tutorials: https://docs.oracle.com/javase/tutorial/
Hey— gotta do what ya gotta do
Only if you’re insistent on using the latest release all the time. Most places I know are still using Java 8, as the last LTS release, and will begin to *think* about moving to Java 11 when it is properly out, as the next one (ish. Are they even doing LTS/regular after 10?). Hell, some are still running stuff on Java 6 because it’s not in active development, it’s just sitting there doing its thing. Java 8 doesn’t go out of support until 2020. It might not be the ideal, but it’s the reality for most sizeable commercial entities.
Yeah, that is what I meant, not that you actually worked for them. For some reason ancient Java and Oracle user go hand in hand.
Bundle a JRE (actually nice to do with the modules, even if your project isn't a module) and you're fine until that JRE can't run any more or has bugs that won't be fixed which prevent you from doing what you need to do. In other words, don't worry about it.
Thanks for reply. I'm not a Gradle advocate just someone who uses it daily and trying to understand if I'm missing out on something. Plugins: I can't comment as I don't know mvn well. I've found appropriate Gradle plugins for all of my needs. Performance: I just ran a test. Fresh project from Spring Initalizr. clean+build. Gradle consistencly executed much faster. Also see : https://gradle.org/gradle-vs-maven-performance/#gradle-is-up-to-100-times-faster-than-maven Logs: I run dozens of gradle builds per day and logs are only a few mb. Thousands/millions user Gradle so maybe its certain configs/usages? Android builds are slow and complex problem. Theres a lot of moving parts and is tied into various plugins and tools. I don't have a A&lt;-&gt;B with maven so can't comment.
The illegal reflective access thing seems like an unfortunate overreaction to me. It’s very useful for things like testing tools to be able to mess with private class members.
The OpenJFX repo on OpenJDK is here if you want to see the list of recent commits: [http://hg.openjdk.java.net/openjfx/jfx-dev/rt/](http://hg.openjdk.java.net/openjfx/jfx-dev/rt/). Most of the commits are from Oracle developers, so it isn't accurate to say that Oracle hasn't done anything in several years. What is changing is that we need help from the rest of the open-source community for JavaFX to thrive. Oracle isn't producing binaries starting with JDK 11...that is where Gluon has stepped up...and its future success will depend on contributions from the community in addition to continued contribution from Oracle. That's one of the reasons we are actively promoting the GitHub sandbox already mentioned at: [https://github.com/javafxports/openjdk-jfx](https://github.com/javafxports/openjdk-jfx). We are trying to make it easier for others to contribute.
Yeah my opinion is also "hopefully never".
You would think this feature could be disabled like assertions.
Over 9000
How long is a piece of string? It'll depend heavily on where the company is based, where the developer is based, the working relationship and planned work routine. Honestly, this is one of those questions that's not really easy to answer.
Search on Glassdoor. Probably in the neighborhood of 100-120k minimum.
Your current market rate will also play a role. Speaking anecdotally, I know of someone who switched from onsite to remote (moved to a different state) at my previous company, and I believe he did take a cut because the cost of living is lower where he moved.
yeah, i know. May be i should have proposed some estimated limits.. lets say: lower than 50k (annual) between 50k and 200k higher than 200k &amp;#x200B; I'm looking just a reference.. the salary included in the 90% of the same positions 
bad move haha
I work from home. As a Java / Sql guy. I make 71400 salary. Then again I had to put in a year's time in the office in Dallas before I could move many states away. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Open source community will continue to support javafx 
Just devs. It becomes literally like any other dependency that's the whole point. Pretty sure snapshots are already on Maven so you can test it out...
Then I'd voice my concern in a documented way (e-mail), offer to spent time to fix the issue, and then ignore it. If you are nice, mention it again every time a java upgrade or long term stability is discussed.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We are working on analysing Maven central to see what popular projects are left to upgrade their internals so they no longer use this illegal access. Once the number gets to an ‘acceptable’ level we will let Oracle know and that will help inform their decision. FYI - I’m the lead for AdoptOpenJDK (AdoptOpenJDK.net) we have a side project called java9adoption for this (find us on GitHub under the AdoptOpenJDK org)
That's probably a 'mobile first' design that does not scale well to large screens.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Slightly off-topic but I have a question: Is decoupling from the JDK a *good* thing for the future of JavaFX?
Why? Name one feature in Netbeans that is going to help a beginner.
&gt; Long term, the JREs will be a thing of the past. JREs will be replaced by AOT compilers or what?
Article is missing the two biggest problems that we (our company) have with Java 11: no 32-bit and no Java Web Start anymore. We are using both and the workarounds are not trivial.
Haven't browsers dropped support for the plugins though? Where do you still need 32 bit? 
You can use the packager to make local installers for various platforms. IntelliJ community edition even includes built-in tools for that. Check out Artifacts. 
 * It's completely free - Intellij costs £120 per year for the full version * It comes bundled with Tomcat so server side development is easy to start - Intellij requires some setup that can be confusing for beginners * It uses a lot less memory to run than Intellij, useful for beginners with low-spec PCs * Can have multiple projects in one window, useful for beginners who are trying out several new concepts - Intellij needs separate windows for each project Mostly though, it comes down to personal preference. Netbeans and IntelliJ accomplish 95% of the same things. I've actually switched from Netbeans to IntelliJ because I prefer it, but still find Netbeans to be a great IDE, especially for a beginner. Note that /u/murkaje wasn't saying anything bad about IntelliJ, just that Netbeans is still a good IDE
YES! It means that it's now maintained separately to the slower release cycle of Java itself. Remember that the model to use local deployment over depending on a particular system wide version of Java having to be pre-installed. 
The specific JRE version you want is bundled with your application now. And you can use AOT as well - which will improve over time. 
We are using 32-bit Windows JNI libraries.
Hmm. Substrate VM didn't support Swing or JavaFX last time I checked. I don't know about Excelsior JET (it's expensive for me anyway). Hopefully open source ones will improve eventually.
Yeah AOT is in it's early stages. We'll need future work and things like value types to bring it full circle. 
Not exactly sure of what's been decided on version numbers but basically you can even use daily builds if you want. When you're deploying, you'd usually use the best stable version and create use platform packaging for the installers. Which would include that JRE and JavaFX. 
Do you mean Benadryl Cucumber?
AdoptOpenJDK provides win32 binaries for OpenJDK and eclipseopenj9 Iced tea web or karakuns new oss project to port webstart May help you
Join AdoptOpenJDK.net - jump on the slack and the java9adoption channel - we’ve got some regular coding tasks to help us scan Maven to help the Maven committers.
See also https://github.com/threerings/getdown/
 * Netbeans is free and the free version of IntelliJ has far fewer features, so I was doing a like-for-like comparison * "Nobody uses Tomcat anymore" - Except it's used by [68%](https://www.jetbrains.com/research/devecosystem-2017/java/) of people using app servers, so you're clearly basing this purely on you own usage * 1GB of memory in IntelliJ compared to sub-300MB for Netbeans is a big difference, like it or not. It **will** slow down some machines when using browsers as well or running large applications * "Multiple projects is horrible" - What? Do you put every single piece of work you've ever done into a single project? 
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://www.jetbrains.com/research/devecosystem-2017/java/) - Previous text "68%" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Ok. Will do. Thanks!
Thanks! &amp;#x200B; A couple more questions:Is not a freelance position, right? it's a regular contract with healthcare and stuff? how easy is to find a company like yours that allow remote position? &amp;#x200B; Thanks again for helping
But are those Oracle devs actually paid for JavaFX development, or they're just doing a favor?
Webstart isn’t plug-ins
The most important challenge for me the last days was to handle Maven + modules. Thanks Stephen for helping me recognizing that I am not have to modularize all my application at this time. Very helpful article!
Oracle have stated publicly that there will be an LTS release every three years, starting with JDK 11. That means JDK 17, 23, 29, etc. Remember, though that an LTS from Oracle requires a Java SE subscription, i.e. you need to pay for it. As of JDK 11 you can't use the Oracle JDK for free in production anymore, which means you need an OpenJDK binary with no guarantee of updates.
Nice idea unless you actually care about security. Without updated security patches to your JDK you expose yourself to potential exploits. These may not be caused by the JVM itself, for example Spectre and Meltdown are processor issues but need mitigation code in the JVM. Something to consider.
or https://github.com/update4j/update4j
For us, it has been dependency wrangling. We have so many libraries and applications using outdated tech that is unsupported in 11 (for example, Jersey 1, Guice &lt; 4.2, groovy &lt; 2.4.12, lombok &lt; 1.16.22) It would be nice if there was some way to figure out which of these deps are verboten in java 11. I've literally just ended up going through some of the popular libs at my company and surfed the change log for things like "We now work with Java 9/10/11".
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for bringing out these points, i would have commented on similar aspects. Also i'm using IntelliJ for work, but would still suggest netbeans for beginners. To clarify a bit: Running a new project(that a beginner might have downloaded from the web) is simple in netbeans, you open it up and press the green run button. In IntelliJ i've looked over the shoulders of beginners and it looks like "uhh..., i think this run configurations place, oh a long list, i guess Application... and i enter my main class, press OK. Uhh now what.". Said person accidentally changed the Template Application not created a new configuration and no, the eye focus was on the ton of information on the left so he didn't notice the text message. If a beginner copy-pastes some newer features into the current project which might have unset source/target versions they default to 1.5. In netbeans you can either know how to touch maven settings or more likely as a beginner you start exploring the menus and project settings. The compiler source/target versions are in an easy to reach menu and this setting is kept in sync with pom.xml in a maven project. Compare this to IntelliJ where changing the pom.xml requires manually running "Maven-&gt;Reimport". But a beginner would probably try to seek a menu, likely trying to set project language level without effect and likely not finding the abomination that is nested deep in Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler Simply put, netbeans has better beginner-friendly UX.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[http://javaonexperiance.com](http://javaonexperiance.com)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Maybe, but my 45 year old eyes appreciate the larger font.
&gt; the slower release cycle of Java itself New releases every 6 months is fast enough IMO. My biggest problem with the split is that it completely kills the ability to "write once run anywhere" that JavaFX used to provide - we used to be able to provide a single JAR download that could run on Windows, Mac, and Linux. Now we have to create a separate JAR or native executable for each platform.
And you thought turning 40 was hard... I'm still lying to myself about not needing reading glasses
Yes, true. Sometimes the fix version is in the CVE ([example](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2080)) and sometimes you need to follow to a tracker link ([example](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7657)).
[Complete Java Masterclass](http://courses.gabstore.club/javamaster) was very useful! Helped me to finish my school project faster, more fun and easier to learn than from a book. I got extensive knowledge on Java Fundamentals from this course. It is really impressive how deeply Tim is explaining the details. I really recommend this course to any one who would like to learn Java fundamentals while still learning it's depth of information.
&gt; New releases every 6 months is fast enough IMO. NOW. Yeah. But for 20 years we've had to wait on Swing fixes for years and had to hack with workarounds. &gt; problem with the split is that it completely kills the ability to "write once run anywhere" In reality if you were deploying jars you'd always have issues with Java versioning on various client machines. Back in the day with Swing we would always end up packaging everything with a local JRE to prevent conflicts and support calls. Now, at least we have native packagers and modules to make the runtime smaller. 
Last time I tried it the browser was giving me security warnings...
lol I recommend you not be an asshole when asking for help.
Read the question and maybe you will understand it! Recommend it if you personally studied from. Thank you
&gt; But for 20 years we've had to wait on Swing fixes for years and had to hack with workarounds. Is it safe to assume that Swing is stable and bug-free today? Or there are still dark corners need to be fixed?
Fair. Hopefully community interest in JavaFX won't fade eventually.
I'd say it's very stable but I haven't used it in 8 years. ;)
Haha, okay :) I'm under the influence of comments suggesting Swing is more stable and lighter than JavaFX. But I think I should start forgetting Swing :)
Oh, I read it.
Are you ok?
You have been previously warned. Now you are overstepping the line. Your post as well as your first comment are offensive. Even worse, that you posted in /r/java which is not for learning, nor for tutorials. You are now banned from participating here.
At least they had a change log. We've found some which did not, and of course some of them did bytecode manipulation. They all have to be replaced.
You can open them to the testng module. It's a fair warning for production code.
Oh yeah, it is a mess. We have internal libs that do that as well. Very few projects at this point are ready (mine is one)... the rest are simply unprepared.
How many years of experience do you have? Seems like you are being underpaid by a third, at least.
im currently working with java aws lambda too. Sadly they domt have a!y of those features. only java 8 is available. sadly due to that cold start time is terrible. but once its loaded it runs like dream
not sure about js orms, but for java you may also be interested in something like jdbi, apache dbutils or spring jdbctemplate.
Yeah you're right. But still depending on random local JRE installs has always been problematic. Now you can build packaged apps for download which are stand alone. 
Not an expert, but sounds like it could be fine dependind on the application memory usage. Have you noticed the used memory climbing? Does it go down a lot after triggering a gc? Id expect most apps to have memory usage that constantly goes up and down, and the gc being effective and getting used memory back to a low amount.
I remember this pain. Had it with java and video playback for quite a long time until I found a 64 bit version of JavaCV.
This is actually great. Why it would be a problem, assuming you care about latency? If you don't care about latency but care about used memory you can start reducing heap and optimizing GC for that.
Gotta just use fat/uber jars my man.
This is normal for the G1 GC, and is what you'd expect from an application with healthy GC behavior. Unlike CMS, where the old generation keeps growing until a full GC is triggered, G1 collects both old and young generation objects during ygc. If you do get a full GC with G1, then your application's memory behavior is not healthy, and performance will be severely affected; full GCs in G1 are very expensive.
I wrote about my experience migrating maven modules to Java 11: https://winterbe.com/posts/2018/08/29/migrate-maven-projects-to-java-11-jigsaw/
&gt; Seems like an issue, right? The opposite is true. Full GCs are bad and having zero is ideal. This is true of any GC not just G1. How is it performing compared to the other collectors such as parallel and CMS? Are you noticing any problems that you think are related to GC?
Do you know when the ARMHF version will be released? I would love to start testing...
For any generational GC, no old-gen collections is the ideal behavior. The whole idea behind generational GC is avoiding old-gen GC.
Why do the commit message have emojis in it? Does the invisible watermark survive lossy compression? Like JPEG?
That's really cool. Will you publish this list, and perhaps even auto-create issues with the relevant projects? The latter would be luxury, the former already very helpful, for us library devs.
It can be useful to unit test internal, package private API without needing to make the API public
Yes we will publish a list - the 2nd request might be a bit tricky 🙂
Thanks, I've already read that. :) Also really helpful! 
 f(yourLocation, theirLocation, yourJobSkills, theirJobProfile, yourNegotiationSkills, theirNegotiationSkills, market, errors, goodLuck)
A nested class and its overhead for each logger instance is a tad wasteful, if they do get loaded, no?
I know. Was worth trying :-) Well, as I said, the list itself is already immensely useful