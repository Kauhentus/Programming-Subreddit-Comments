:P In a way Struts 1 was unofficially said to be deprecated when JSF 1.0 was announced all the way back in 2003. So it took them just 10 years ;) 
Launch your program in a separate thread. Simple example: (Note that this isn't exactly clean code) public static void main(String[] args) { Thread serverThread = new Thread(new Runnable() { @Override public void run() { while (true) { System.out.println("Do random stuff"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } }); serverThread.start(); Scanner scanner = new Scanner(System.in); String commandLine = ""; while ((commandLine = scanner.nextLine()) != null) { if (commandLine.equals("Quit")) { System.exit(0); } else { System.out.println(commandLine); } } }
Hi Chunobi, Thanks for posting that. I have currently written the program to wait for messages to be sent via TCP and UDP using a Selector. Occasionally, a message may have to be sent via TCP. This would be initiated after the user type something in the cmd. Is it possible to achieve this without using another thread? Kind Regards, Giri
Since I have no code to refer to, I'm going to assume that your current program blocks the main thread while waiting for messages from wherever. Since you want to do something else simultaneously I can only come to the conclusion that you will need threads to do this. Is there a particular reason why you would not want to use threads?
Haha, there is no reason :) To be honest, I only started learning about this a few days ago so I simply followed some info I got from various forums. Yes, you are right. My program blocks the main thread while waiting for messages. Could I make another thread that handles the Scanner(System.In) and the sending of TCP messages? If so, this thread would require some of the information in the main thread... can two different threads use variables etc existing in the other? I should probably mention this is supposed to emulate a P2P kind of server. So I'd open different cmd's which would act like different peers. All the "peers" would be running this particular program, sending messages to each other. Thanks Chunobi. 
Yes, what you want is entirely possible. In my example, this would just mean swapping the code inside the run() method with the code after serverThread.start(). Two different threads can indeed use the same variables (and everything else). I recommend you read topics on thread synchronization if you want to do this.
Struts 1 is like a zombie wandering across the Georgia landscape, moaning and looking for lost souls to devour. Sadly, these lost souls exist on web forums, often wanting to start new Struts 1.X projects using Hibernate configured with XML files...
That's okay, it's not as if I'm still maintaining 100,000+ line apps using Struts 1.x and a menagerie of other EOLed, bug-ridden libraries. 
Well, I don't know about in computer space ^((Well, I do, but anyway)^), but in common usage, "filter out X" is a common idiom. And actually, probably more commonly used than "filter out such that only X remain"
&amp;#3232;\_&amp;#3232;
tl;dr version: gimme code snippets that break your favorite Java decompiler.
I'd be really interested in seeing what a java decompiler would do to compiled Scala or Clojure code.
Start your PC more often :)
Haven't tried it yet, but I've written some scala code at work. I'll give it a go and see what comes out :). I imagine the biggest problem cases would be where the code emitted breaks certain contracts enforced by the Java language, making it difficult or impossible to transform the bytecode into legal Java code. I do not know if the Scala or Clojure compilers emit such code, nor under what circumstances. My code so far is based heavily on ILSpy, a decompiler for the .NET platform. Rather than attempting to translate bytecode directly into Java source, I first translate it into an intermediate "bytecode AST" representation, which is then transformed into a Java AST. It would certainly be possible to implement Scala and Clojure output languages which perform their own transforms against the bytecode AST, but for the moment I am more concerned with making a decent Java decompiler :).
Do you update Java? sincerely, Richard Nixon
I currently don't have any code of the type you require; just wanted to let you know you're doing God's work and I look forward to seeing the results.
Somewhere I have some code that crashed JD-GUI and Fernflower, I will see if I can find it. EDIT: [here](http://pastebin.com/f0aE6Jh0) it is. JD-GUI is now able to successfully decompile it, but fernflower gets confused and terminates with a stack trace.
Thanks! Here's a shot I took earlier while working on break/continue targets: http://i.imgur.com/lKlLJS9.png Original code on left (directly from java.lang.String). Decompiled output on right.
JD has a not-very-good interpretation of `enum` switch statements that is easy to correct but is still uncompilable. public enum Color{RED, BLUE} public static void test(Color color) { switch(color) { case RED: System.out.println("hi"); break; } } is decompiled into public static void test(Collections2.Color paramColor) { switch (Collections2.1.$SwitchMap$com$google$common$collect$Collections2$Color[paramColor.ordinal()]) { case 1: System.out.println("hi"); } } ^(don't ask why I put it in Guava) The enum disappeared entirely for some reason which I don't recall seeing before, but the bizarre switch statement is normal for JD. (note: compiled at source level 7 with 1.8b74 as I'm too lazy to set up a jdk7 env)
Clearly you are a student at JMU. Are you looking for somebody to write it for you or are you looking for somebody to tell you what you need to do? The former sounds like a bad idea if it's homework, while the latter also sounds bad because you're already paying for a TA that should be able to help you.
If you don't care about memory, then a hash table. If you care about memory, then possibly a bloom filter.
Looks great!
I noticed this pattern when I attempted to decompile one of my own enums. I do not recall seeing it during my compiler research last year. I think they may have introduced these 'switch maps' as an optimization in one of the more recent JDK7 releases. I have done *zero* work on enums yet, so the output from my decompiler looks similarly crappy: public static void test(Color color) { switch (EnumTests$1.$SwitchMap$com$strobel$decompiler$EnumTests$Color[color.ordinal()]) { default: { return; } case 1: { System.out.println("hi"); return; } } } static class EnumTests$1 { static final int[] $SwitchMap$com$strobel$decompiler$EnumTests$Color; static { EnumTests$1.$SwitchMap$com$strobel$decompiler$EnumTests$Color = new int[Color.values().length]; try { EnumTests$1.$SwitchMap$com$strobel$decompiler$EnumTests$Color[Color.RED.ordinal()] = 1; } catch (NoSuchFieldError stack_17_0) { } } } I will definitely have to look into this pattern and make sure that I support it, as well as the patterns emitted by older versions of javac. Thanks!
Maybe you could get in contact with the author of JD-GUI? He seems to have gotten pretty far. There's a preview of a more advanced version of his decompiler on the website like forever. Would be a shame if that one was never released.
http://www.reddit.com/r/jmu/comments/19a3ol/would_anyone_be_interested_in_playing_intramural/
Thanks! Inner classes are still a work in progress. So far I've only started eliminating implicit constructor arguments at the call site. I still need to clean up the constructor declarations, insert field initializers, etc. Output looks as I would expect given the current level of support for inner classes: http://pastebin.com/3dLkCH44 This example did, however, point out an interesting bug in my variable naming--note how your variable names shifted slightly :).
It took me a minute to see the shifted names! That could lead to some interesting bugs when decompiling obfuscated classes with numeric names.
I get this to. My problem was when I went to install it I thought everything was ok, but sometimes it wouldn't even install. Just try to install it and see what happens!
**Holyshit**, my work is in DANGER.
Now you know the truth: Spring *used* to be good. Java EE and the other alternatives are the way to go now.
Considering much of my code was lifted from ILSpy, hopefully I'll be able to oblige ;).
The same thing happens when I try, although I was able to decompile it using fernflower. Interestingly, the output code is extremely rewritten and I am fairly sure it would have a different output. EDIT: Nevermind, the completely rewritten code works fine, and it is actually quite simpler. I suspect that javac is optimizing your while loop, especially considering how the decompiled version uses a do...while loop instead of a normal while. [Here](http://pastebin.com/3d5ZWE56) is the decompiled version. EDIT2: I think I know why JDGUI crashes: The while loop is basicly converted into a do...while loop that ends with: } while(0.0D != 0.0D); Which will never be true but will still be executed.
It doesn't even get to the method body? There is nothing really unusual about the rest of the class, what could it be getting stuck on?
I resolve referenced members in other types, which requires reading the metadata for those types. It was barfing on this constant in java.util.Scanner due to a dumb typo in my UTF8 handling: private static final String LINE_SEPARATOR_PATTERN = "\r\n|[\n\r\u2028\u2029\u0085]";
Oh I thought you meant a constant in the test class. I see now.
Sad to hear. First web framework I ever learned. It's obsolete by modern standards, but it does bring back memories.
Well, since you're going open source, you could save yourself some work by making the AST generation a distinct step in the process and then let the source code generation come after that using a plugin model. That way, you can worry about the Java plugin and others can add other fancy options down the line without having to bother you. Just a thought... Also, having been stuck with JAD in the recent past, just wanted to say thanks for taking this on. Truly, this is one of the things I've missed in the .NET world where Reflector was a godsend for us on many an occasion when documentation just didn't do the job. Oh, one more thing: Being able to see the AST and/or raw byte code disassembly is a useful feature as well. This was something else I like about Reflector. It was possible to bone up on IL itself and language fundamentals (e.g. boxing) by writing some C# or VB, run it through, look at the resulting mess to see what happens, and then iterate.
IntelliJ has a bad habit of its simplifications/quickfixes resulting in completely different code. Also, will your decompiler eliminate the StringBuilder stuff in the future? (lines 47-8 of your decompilation vs the original)
I've yet to meet a professor who won't make an appointment. If yours won't, go talk to the dean (their secretary can make sure you see them).
You may want to take a look at this: https://github.com/bradsdavis/candle-decompiler
Look up `soot`. It's an open source library/program that completely decompiles .class files in the first step (or generates Jimple from source). http://www.sable.mcgill.ca/soot/ The documentation *isn't* great, but it does a good job.
 class TestClass{ static { System.out.println("Hello World"); System.exit(0); } } Using `static` blocks for evil.
I'm writing my own. Http://github.com/atc-/cfr
Are you interested in getting anybody else to help e.g. for the older class file versions / opcodes?
Does he have a reason for not open sourcing his existing compiler? From a casual look at the site it looks like he just never came around to publishing the source somewhere, not that he is using it for any commercial activity, is he? Maybe you can convince him to open source his code and then offer to contribute?
Yes, definitely. I have barely gotten started on the Java language-level transforms yet. String concatenation is on the todo list.
Ah, very cool! I will have to take a look. Have you come up with a solid solution for removing inlined `finally` code? It seems like every time I think I've nailed it, I find an example where it breaks down.
Indeed, the bytecode AST generation is a distinct step, and I do have a bytecode AST output language (more or less identical to ILSpy's ILAst language, but with JVM opcodes). It's been invaluable in tracking down issues during development. I also have a disassembler for viewing the raw bytecode (very similar to javap). I want to make raw bytecode an output language for the decompiler as well, but right now it has a separate front-end. I think Reflector is how most of us learned the ins and outs of IL :).
I agree
It looks like you've forgotten to call matches() to evaluate the regular expression against the input, which is necessary before you can get any output from group() etc.
Would that compile?
Not that far yet - I'm still parsing the class files and have had to postpone while ral life takes over. I'm not giving up though :)
Single core is 2 hyper threaded CPUs in this case, that detail got lost in the mix and was clearer in the preceding post. The differences are down to the effort required by the cache coherency system to keep the data moving between CPUs. When on the same core, all the data is in the L1 cache, when going across cores we must go via L2, and when we go across sockets the data must travel across the QPI bridge. Thanks for reading :)
If I can give a suggestion: please support alignment! So decompiled code can be used for debugging.
Ahh got it! Thanks r1ch :)
oi, that's a huge library! Not quite sure where to begin ;).
Will do, thanks!
Not only would it compile, it would *run* without throwing a `java.lang.NoSuchMethodError: main Exception in thread "main"`, because the static block is executed before main is called, and System.exit(0) will be called before it tries to execute main().
Compiled for me. Decompiled output matches perfectly (as expected, given it's a trivial method).
Possibly. I'd prefer to wait until the code base stabilizes a bit before bringing on other contributors. It shouldn't be difficult--it's just that the way `finally` handlers are emitted changed significantly around Java 5, and supporting the older form isn't at the top of my priorities. It's on the list, though :).
I didn't know you could compile a class with code outside of a method or constructor.
Oh he will and I have one set up just not in enough time for this project I am working on outside of class. It's just really hard cause he teaches at his main school (45 miles) away everyday so he's only at my school 6 hours a week. 
Good point. 
Eric Bodden is the guy who knows what's going on. He has a blog with the starting steps: This is the best start guide that contains actual code, but it uses anonymous inner classes which is confusing to some people (and I'd recommend re-writing yours to just use regular classes, but that's just my opinion): http://www.bodden.de/2008/11/26/soot-packs/ There "[Soot Survival Guide](http://www.brics.dk/SootGuide/)" is a good resource, but it describes soot as it was designed to be used, which is not exactly how you'll probably be using it. There there's the [mailing list](http://www.sable.mcgill.ca/mailman/listinfo/soot-list/) which is ~50% Eric Bodden answering questions. The JavaDocs are a little rough, I wish someone would fill them in with "brain dead stupid stuff", because you do spend a lot of time guessing at what methods do and what cast is necessary in what phase to get the information you want. 
 final StreamSource styleSource = new StreamSource(getClass().getClassLoader().getResourceAsStream("MainStylesheet.xsl")); final TransformerFactory transformerFactory = TransformerFactory.newInstance(); transformerFactory.setURIResolver(new XsltURIResolver()); final Transformer transformer = transformerFactory.newTransformer(styleSource); And I was using an XSLT that looked like [this pastebin](http://pastebin.ca/2352822)...I've censored it a bit to remove things related to my employer.
I did post some code [here](http://www.reddit.com/r/java/comments/1bsapk/this_is_one_of_those_bugs_that_could_haunt_a_man/c9auuyt) with a link to one iteration of the stylesheet. Previously I was using one with a declaration more like: &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:date="http://exslt.org/dates-and-times" extension-element-prefixes="date"&gt; &lt;xsl:import href="date.format-date.xsl" /&gt;
Static initializer blocks are essentially class constructors (hence the internal name "&lt;clinit&gt;", whereas constructors are named "&lt;init&gt;"). You can also omit the 'static' keyword and simply have an anonymous block to introduce code which should run before every instance constructor.
I learn something new everyday!
Very nice!
Performance. If one service needed to stream updates to another with very low latency and high throughput than this sort of mechanism would work well. There are commercial products which offer similar support for their messaging libraries (UMS from Informatica for example) to replace network based solutions with shared memory solutions when possible to gain a performance edge. This is a typical requirement for financial applications needing to process market feeds at very low latencies. Not sure this is a good answer to your question, please criticize in the right direction. Thanks for reading in any case :)
I see this a lot too but on my friends or family's machine. It seems some version updaters just don't work and the update doesn't happen although user is told that the update was a success. Whenever I see this it is the worst time for a debugging session so I've just installed the latest version and uninstalled the previous one.
you should edit the OP and update the code to reflect your correction! :)
Yet another exception tutorial, with the same advice. &gt; Use Checked Exception for Recoverable error and Unchecked Exception &gt; for programming error. While this is superficially true, it doesn't actually say much as to when to use checked exceptions and when to use runtime exceptions. Checked exceptions are *supposed to be* for expected error conditions and unchecked exceptions are for unexpected error conditions. Although whether getting checked exceptions absolutely correct might be more trouble than it's worth and common practice these days seems to be to just use unchecked exceptions instead of bothering. For example, any time you do I/O, it is expected that there could be connection errors or transmission errors, so it makes sense for errors like `IOException` and `SQLException` to be checked. However, these can also be unrecoverable to the application. On the other hand, unchecked exceptions should be thrown for situations where the program is in an logically inconsistent state, such as pre-condition or post-condition violations. Continuing from the point where the exception was thrown would be a very bad idea because the program will go into undefined states, leading to things like data corruption. &gt; Including cause of Exception in stack-trace Are there people out there still printing out stack traces? Any logging library worth its salt lets you specify the exception and it will handle outputting the stack trace to the right place. Outputting stack traces yourself is redundant and possibly even counterproductive. &gt; Avoid overusing Checked Exception This is true, but why? When you overuse checked exceptions what you are really doing is saying that users of your API should expect a lot of errors. Expected errors should be at the bottom-most layers where you can intelligently convey to the user what error to expect, like an error parsing a string into an integer, writing to a stream or executing a SQL query. Higher up, does it make sense to expect an "ApplicationException"? What does that even mean? What are you expecting? Sounds like those should be runtime exceptions instead. &gt; Remember Exceptions are costly in terms of performance Worrying about this is premature optimization. Performance problems are more likely to be with algorithms and interactions with resources than from the penalty incurred by unwinding the stack. Avoid using exceptions for flow control (don't do stupid things like using the `ArrayIndexOutOfBounds` exception as a stop condition for array iteration), but don't micro-optimize either.
How did you do that code embedding? I haven't seen that on reddit before.
What have you tried so far? And are you wanting it to display the RGB of pixels displayed by other programs? That will be hard.
Why does this have to be in Java? Where will the pixel be produced from? A web app? A desktop app? What is this for? Why not just take a screenshot and use paint?
I was not able to reproduce the issue locally but I did manage a fix by not including external xsl's and declaring a namespace from the xalan-j documentation for datetime formatting: &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:datetime="http://exslt.org/dates-and-times" exclude-result-prefixes="datetime"&gt; found [here](http://xml.apache.org/xalan-j/apidocs/org/apache/xalan/lib/ExsltDatetime.html) Frankly, I'm amazed it worked but it's still incredibly annoying that everything that worked locally didn't work elsewhere, even the : xmlns:java="http://xml.apache.org/xslt/java" method which didn't extra xsl's and called java functions, just like what worked in the end.
Click source below the comment and it shows you. Four spaces is the trick, or get [Reddit Enhancement Suite](http://redditenhancementsuite.com) and it has a handy code formatter
OMG!
thanks, sent!
Brute force it. Start pulling down jars from maven repositories and see what it can't handle. Most of that stuff is open source so you could then inspect the source and figure out what's going on. 
...or Java EE ;-)
Try s.equals("test \"1 2 3 4 \" hello");
GREAT TASTE!
At some level, everyone uses a framework. Even if they're using basic Servlets (doGet(...), doPost(...)), it's still a framework. That said, I've only interviewed for 1 Java web job where they did not use an existing web framework (aka, Struts1,Struts2,SpringMVC,GWT,etc). The irony is: they actually created their own homegrown framework! So, even when you're not using a framework. You're using one.
Well I need to get the part between the quotes added to the arts list.
As per an anonymous comment on the site, there's a definite whiff of Effective Java about the list; that's not necessarily a bad thing - as most users on here know it's a fantastic book - but it does just seem a little bit too similar for comfort.
This seems to be popular opinion amongst Java programmers, yet there are somewhat authoritative sources that disagree: [cases where NPE is thrown by runtime] &gt; Applications should throw instances of this class to indicate other illegal uses of the null object. (NullPointerException JavaDoc page) &gt; Arguably, all erroneous method invocations boil down to an illegal argument or illegal state, but other exceptions are standardly used for certain kinds of illegal arguments and states. If a caller passes null in some parameter for which null values are prohibited, convention dictates that NullPointerException be thrown rather than IllegalArgumentException. Similarly, if a caller passes an out-of-range value in a parameter representing an index into a sequence, IndexOutOfBoundsException should be thrown rather than IllegalArgumentException. (Effective Java by Joshua Bloch) IMHO, this is sort of bikeshedding, as long as the chosen convention is followed consistently. I personally see no reason why NPE couldn't be used as any other standard exception (i.e. as a special case of IllegalArgumentException, thrown explicitly from a method).
Try doing a s.indexOf(") then parsing each number out and adding it, until you reach the next ".
The [Robot class](http://docs.oracle.com/javase/7/docs/api/java/awt/Robot.html) means it's not as bad as it could be to get pixels from the screen.
I was not aware of that. That would make it easy. Just get a screencapture and compare it to the mouse location. I wonder if your screen capture would be guaranteed to occur at the same time the mouse was at (x,y)? Or woiuld you possibly get some lag there?
Layout managers are **entirely** your call. It's just the design phase. I'm a fan of GridLayout for the simpler things, but I've been using [MigLayout](http://www.miglayout.com/) for my more complex windows lately. It has a steep learning curve, but once you get a hang of it, it's not that bad, and extremely versatile. Side note: I'm not picky about this, but it might be in your best interest to post this to /r/learnprogramming next time! People actively check there for specific problems like this. I think this subreddit is for news and really high-caliber questions.
LESS FILLING!!
That works for finding code which crashes the decompiler, but finding code for which the decompiler produces bad results would be very hit and miss. I am testing various JDK classes which I know to be overly complex, but I figure it's worth asking for known problem code.
Well a 2d array is just a 1d array of 1d arrays. So when you access dataArray[2], let's say, it's just pointing to another 1d array (the columns of info). So if I understand the question correctly (which I don't think I do), this would be the only thing you'd need to do. for (int i = 0; i &lt; dataArray.length; i++) studentArray[i] = dataArray[i]; However, to return multiple things, you're probably better off just returning them in an array, anyway. Either that or a LinkedList. Once a method hits the return statement, it's done executing. return studentArray; But this is basically just re-assigning it. It's most efficient to just say: return dataArray;
I know this is not the point but why are you using something like EditPad Pro 7?
I can do that but it has to work with the scanner. I will try some other things like changing the delimiter and stuff. What I am really trying to do is add a quoted piece of text to the list if it has two quotes.
You can do that scanner just creates a new string, which you can call these methods on...
If you limit your query to what is Java being used for in modern times that don't involve a 'web framework' there is quite a bit. Hadoop projects are often writen in Java. It is a framework but not a web framework. Apache OpenNLP is pretty popular library for natural language processing and it is in Java, so there is a possibility there. Quite a few companies write internal use desktop applications using the Netbeans Platform.
So if the return statement isn't outside the for-loop, it won't work? Is there a way to return 5 single dimensional arrays (or as many as are necessary) with one call to the dataArray[][]? For better understanding, I have to break the array[][] up into array1[], array2[], ect. Then I can feed these single dimensional arrays into a constructor that calculates tuition and other stuff. Heres what I want to (basically) be able to call in the main method: String x[] = Student.createInstances(dataArray[][]); //this may be wrong im still working on it. Which would hopefully result in 5 arrays. Is there a way to automatically create a new array for each row in the big array? Sorry for my lack of knowledge. This is for a non coding class and I haven't done much java since high school. 
My guess is if they are not using a publicly available framework - they rolled their own and its scary to work with.
If I'm understanding the question correctly, then I think you can do it the way /u/rfederici was saying by just returning an array of Students, something like: // Changed return type to Student[], though I may have misunderstood... public static Student[] createInstances(String da[][]) { Student[] output = new Student[da.length]; // initialize the output array for (i = 0; i&lt;da.length; i++) { Student s = new Student(da[i][0], da[i][1], da[i][2], da[i][3]); output[i] = s; // populate the output array } return output; }
I catch them at lower levels only if I can do something with them, other than printing an error or logging. Often I only can re-throw a different exception, eg, catch ( IOException ex ) { throw MyAppException ( "error while reading config file: " + ex.getMessage(), ex ) }. If I cannot do anything specific, I let them to pop-up at the top-most level, where I have an executor that catches and does standard operations with the caught exception, including messaging, logging, failing with an error exit code. 
Heh, they can be an issue. Luckily most of them are standardizing on slf4j, but not a lot of them have moved to logback. However, I hate checked exceptions. There are a few people who agree with me: [1](http://googletesting.blogspot.com/2009/09/checked-exceptions-i-love-you-but-you.html), [2](http://www.oracle.com/technetwork/articles/entarch/effective-exceptions-092345.html), [3](http://joshgertzen.com/bypassing-java-checked-exception-verification/)... I think it's a big deal that c# doesn't have checked exceptions, but seems to work just fine. Scala, which runs on the JVM, wraps all checked exceptions in runtime exceptions, because it makes things easier to reason about. 
Maven has several nice plug-ins to automate almost all the stages of a release process. Whether it is changing your POM with a new version number, tagging your SCM or updating references in other POMs, you can do it by just a few command lines. Even better, you can put Maven goals into a continuous integration software and release with just a few clicks.
So then I could just return Student?
And this would return 5 separate Students right?
Some areas of finance--particularly high frequency trading--involve lots of low-level Java development with very few dependencies on third party frameworks or even J2SE. Lots of highly specialized code for high throughput, low latency, and few if any garbage collections.
Before I go checking out all these links do any of them involve covering the scenario whereby, for example, you find out if the user exists in the database, if so then check their rank to see if they are an admin/mod and if so, make another change to the database like adding a user to the ban list. Meanwhile making sure the moderator doesn't have their rank changed during all of this, or their account deleted until the last operation (adding a user to the ban list) is completed. Even a pseudo explanation would help a lot!
.. and you're most likely reinventing the wheel, badly. People will curse your name for generations because you were that guy that wrote that thing everybody hates to work with..
 &gt; 8\. Avoid empty catch blocks like the plague.. Never ever do this. Use a fucking logger, you savage.
See the link on transactions. Transactions have different "isolation levels" which let you control what other threads can do with the table rows while another transaction is working on those same rows. The illustrations in the [Wikipedia article](http://en.wikipedia.org/wiki/Isolation_\(database_systems\)) on transaction isolation levels might be helpful. It sounds like you want "TRANSACTION_REPEATABLE_READ", which will prevent other threads from modifying the row while you are working on it (so that the transaction which holds the row lock will be able repeat the read with the same values). To set the connection up for being able to execute multiple statements and lock the rows you are working on until you're finished (commit), you'd do something like this: Connection cn = ... cn.setAutoCommit(false); cn.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ); // read the user row // check the column for rank // other ops // done: cn.commit();
What problems can occur and how can I assure nothing get's screwed up? I've heard of rollback but how do I mix that with server-side stuff? e.g. * check if user is admin * set user object's "rank" property to "admin" * add "hacker123" to ban list table What could happen and how does rollback come into play? I guess what I am more after aswell is how exactly does committing work? If I grab and update data from the database, do I have to call commit before making any concrete changes server side? Like making a change to a room's name if it error'd and didn't change in the database like I wanted it to? Trying my best to get into the mindset, thanks for your help so far!
Stored in an array, yes. studentArray[0] = Student[da[0][0], da[0][1], ... ] //Student made from da[0] studentArray[1] = Student[da[1][0], da[1][1], ... ] //Student made from da[1] studentArray[2] = Student[da[2][0], da[2][1], ... ] //Student made from da[2] studentArray[3] = Student[da[3][0], da[3][1], ... ] //Student made from da[3] etc, etc. *Edit, code block above is not actual code. It's the way studentArray will look by the end of the loop.
Rollback just means that you undo everything you just did, and no one's the wiser. That is, unless you relax the isolation level so that other transactions can read uncommitted data. Commit sets what you just did to stone. In either case, all locks are released and other transactions can go ahead. You have to commit for any changes to stick. Unless autoCommit is set to true, in which a commit is done for you after every operation. Usually it's set to true, unless you're doing fancier stuff like container managed transactions (in which case, the commit will happen for you after exiting the managed method, but that's another story).
Rollbacks don't happen on their own in basic JDBC code. You have to explicitly ask for one. In fact, it is good practice to do a rollback if something goes wrong, otherwise you can leave locks hanging around which could lead to bad things like deadlocks when you have a lot of threads flying around.
So what's the deal with `PreparedStatement` objects? I noticed there's a `close()` method, does this mean they are their own separate connections or something? If so, is it good practice to use a single object to run all your queries or is each query supposed to have it's own `PreparedStatement` object? I have seen it's best to keep `connection.close()`, at least, within the `finally` code block. And is calling `connection.close()` enough to remove the locks or do I need to manually turn autocommit back on or something along those lines?
A `PrepareStatement` creates a "template" for a SQL that can be cached by the database driver to improve performance. Also, more importantly, `PreparedStatement` has support for placeholders in the query so you can set parameters on the `PreparedStatement` object instead of concatenating parameter values into the query itself. This is about the surest way to prevent SQL injection attacks. You'll need to create a new PreparedStatement for each query. JDBC requires you to close everything - `Connection`, `PreparedStatement`, `ResultSet` - to free up resources. You do not want to forget to close these, otherwise you will leak resources which can lead to bad things happening to your application (running out cursors, running out of connections, etc., etc.). Worse, every close method also throws a SQLException, so you have to catch those, which can be kind of messy. But, you should close all of those, in reverse order of creation, in the finally block. Closing the connection, though, I'm pretty sure frees everything up (Statements, ResultSets). I'm not sure about the transactions though. Maybe it rolls back if you haven't committed? I'd say it'd be safer to make rollback/commit explicit instead of relying on the driver to clean up after you. Turning on autoCommit would only switch JDBC back into the mode of inserting a commit after every query/update.
So `connection.prepareStatement("SELECT *").executeQuery().first()` is a complete no-go considering you can't free up resources/call `close()`? 
Yes. Don't do that. Although, you could do this: PreparedStatement st = null; ResultSet rs = null; try { (rs = (st = connection.prepareStatement("SELECT *")).executeQuery()).first(); } finally { try { if(rs != null) rs.close(); } catch(SQLException ex) { /* ... */ } try { if(st != null) st.close(); } catch(SQLException ex) { /* ... */ } } Not that I'd necessarily recommend using that style.
Most layout managers have a specific purpose and are usually meant to be used with each other to build different types of things. For instance I recently built a "wizard" type app. The main panel used a BorderLayout with a navigation panel on the left (west), button panel on the bottom (south), and a main content area in the middle (center). The left panel I think used a grid or box layout, i forget atm. The button panel used a FlowLayout. The main panel was broken up yet again with a BorderLayout with a panel in the top for title/description information, and the center panel used a GridBagLayout as I find it handy for form style layouts. In general I find the following very useful: **BorderLayout**: For laying out the big pieces or functional areas of a GUI **GridBagLayout**: I find it useful for forms, laying out parts where you need more control. GridBag can be VERY frustrating though and is the most difficult to learn of the typical Swing layout managers. **FlowLayout**: Great for laying out buttons, or anything that needs to be laid out easily side by side.
I think that's covered it for now. Thank you for taking the time to help me out! Really much appreciated!
Sure, no problem!
Any "protected" variable is mutable to both the class where it's written and its sub-classes. http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html Alternatively, you could add "getter" and "setter" methods to the Student class to adjust the array
we don't really use any frameworks where I'm at, just the standard Apache libraries. it works for us, we can keep everything lightweight and bugs float to the surface pretty fast and are easily squished. I do use mybatis for doing data migrations but never really for production apps. I'm one of two java devs where I'm at, we're primarily RPG / DB2 ( maybe 10 devs total) . 
The java code for the java compiler is pretty readable. Also, you maybe able to use some of the bytecode assemblers to decompile code. It shouldn't be a hard task, which is probably why no one really cares to finish that project. I wouldn't mind a decompiler that actually decompiles to half way decent java code. Jad is good but still you can't decompile and then compile again.
http://jabsonf.comunidades.net/index.php?pagina=1718179135
Aren't protected properties and methods available to every class in the same package? (Not just the class and its subclasses.)
yes they are.
Actually, we won't waste the time. I would summarily bin something like that unless it was completely brilliant. And even then, it's going to get tossed eventually if it's not truly reusable. And if it was developed in isolation, it's not truly reusable. Reinvent the wheel = permanently obscure (or it was just for fun; either way).
But when you say "standard Apache libs", what are you actually using for web dev? For example, what are you using for session management? Or access to cookies? Etc.
And you'll hate yourself for spending your days forever coding plumbing.
As a rule, I don't help people with their homework. However, could you explain a bit more about what you're having trouble with? Do you know that Comparable and Serializable are interfaces and how to use interfaces? Do you know how to make an instance of a class? Which IDE are you using (usually Eclipse or Netbeans)? Don't lose hope! Programming is a lot of fun once you get going.
I'm guessing this is for Mac OS only from looking at the files. :(
[This](http://www.reddit.com/r/java/comments/11tkw1/im_14_and_i_want_to_learn_java_where_should_i/) looks like it has a lot of good resources to get started from.
One last question, does this look like a sound pseudo-implementation of what was mentioned in my original post? Also where would you recommend I enable row locking? As this login procedure could be running in other Threads so there's a possibility two could be running at the same time. Hope this isn't too much of an ask, thanks anyway though! "SELECT * FROM users_sso_login_attempts WHERE ip_address = ?" if row exists if failed login attempts == 3 commit else continue else continue "SELECT * FROM users LEFT JOIN users_sso ON (users.user_id = users_sso.user_id) WHERE users_sso.sso_key = ?" if row does not exist if ip address exists in users_sso_login_attempts "UPDATE users_sso_login_attempts SET login_attempts = login_attempts + 1 WHERE ip_address = ?" commit else "INSERT INTO users_sso_login_attempts (ip_address, login_attempts, timestamp) VALUES (?, ?, ?)" commit else continue if ip address exists in users_sso_login_attempts "DELETE FROM users_sso_login_attempts WHERE ip_address = ?" "SELECT game_server FROM lockdown" if game_server == 1 commit else continue if user is banned // this value was returned from the users table earlier commit else continue /* * login complete! - commit &amp; free resources, listening out for exceptions thrown if the * commit did not complete (which automatically forces a rollback? or do I manually * call that myself in the catch code block? */
Amen
Ever heard of the internet?
Try "the new boston" search on youtube.
There is some discussion about this. http://stackoverflow.com/questions/11033943/serialize-javafx-components Maybe it will happen in Java 8.
Interesting spot there!
[Looks a lot like it, sadly.](https://sites.google.com/a/eng.ucsd.edu/codespells/downloads) Ironic in the sense that a big plus of Java is effortless portability - it makes it stop mattering what OS you're on. Yet the game trying to teach this is limited to Mac..
What is it you're trying to achieve? Is the task do use " as a delimiter, as well as using \s? What should the final List contain in your case: ["hello", "1 2 3 4", "test"] or just ["1 2 3 4"]? What are the rules you have to adhere to? The most simple answer I can give is found on the javadoc page http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Scanner.html#findInLine%28java.lang.String%29 String s = scanner.findInLine("\".*\"") if(null != s) { args.add(s); }
I want to get parameters separated by spaces out of a string, but if part of it has quotes, ignore the spaces untill second quote. If I have a string with "test1 "a b c" test2 a b d", then the result should be ["test1", ""a b c"", "test2", "a", "b", "c"] note the second string has quotes in the string. I will try to use find in line.
Yes, the XSL filename is unique. I was able to get some working code that didn't depend on importing other stylesheets and just used a namespace to call custom code in xalan. I still don't understand why the other method of calling java code failed or why the URI resolver wasn't called. I couldn't duplicate the problem with a small app and running it in a jar. There's got to be something more complicated to it, probably something to do with the original dev group writing our own web container that executes right from the jar and not using something like tomcat. It's probably some absurd classloader context madness I'll never understand...and that sad. But at least I figured out one thing that worked and was able to scrap my super ugly String.replace() solution.
Definitely it's worth asking too. But don't underestimate the power of an automated process...
Tomcat servlet API. Outside of that it's just apache-commons, log4j, and a few other libs. 
You seem to be thinking about the problem in a complex way. It's easier to take the problem and tool you have, break it down into the simplest form and approach it from there. The scanner is a tool for splitting an input into tokens. In this case we have two types of token, quotations (") and spaces ( ). If you split the input by quotations the you get something like this: ["test1", ""a b c"", "test2 a b d"] you can easily iterate through this, detect if the starting character is a quotation, and if it isn't, try and split the string further. This is not advised, you're going to end up iterating over some of the Strings multiple times and causes a bit of an issue when trying to read or understand the code. Another approach is to split by space ( ), then, if you detect a quotation at the beginning of the token, you can start combining those Strings together until you reach an end quotation. This is a better solution because you only split your input once, you do end up doing String concatenation, but that can be less expensive than doing splits. Anyway, I'm getting a bit more in depth than I was expecting, I have given you enough to write your own implementation, below is some code to do this, I don't know how to make it invisible and I can't use pastebin. Scanner scanner = new Scanner("hello \"1 2 3 4\" 1 2 3 test"); List&lt;String&gt; values = new ArrayList&lt;String&gt;(); boolean inQuotes = false; while(scanner.hasNext()) { //Get the current token String next = scanner.next(); //Are we inside quotes if(inQuotes) { //If so, add this string to the end of the last value int offset = values.size()-1; values.set(offset, values.get(offset) + " " + next); //If it ends in a quotation then we exit quotes if(next.endsWith("\"")) { inQuotes = false; } } else { //Add the string to the values values.add(next); //Are we moving into quotes? if(next.startsWith("\"")) { inQuotes = true; } } } scanner.close(); for(String s: values) { System.out.println(s); }
I suggest you take a look into [regex](http://www.vogella.com/articles/JavaRegularExpressions/article.html).
You can let this string be passed as an argument for this method. public static boolean bob(String s) { for (int i=0;i&lt;s.length-2();i++) { //repeats the loop for the # of characters in String - 2 if (s.charAt(i)=='b' &amp;&amp; s.charAt(i+2)=='b') { //if the i^th character and the i+2^th character are 'b', it will be true return true; } } return false; }
Can't edit this on phone, but thank you all for your help 
The String constructor can take a byte array as its initializer. By default it uses the platform-default character encoding which is usually ISO-8859-1. That is fine for simple ASCII stuff but for a "real" system that might talk in multiple languages and what not usually a form of UTF is desired for normalization of data. This stuff matters because bytes have no meaning in and of themselves. Converting them to Strings means interpreting them a certain way. UTF for example might take 4 bytes to make one specific character in its set whereas in ASCII that would probably be interpreted as 4 characters of gibberish. 
My suggestion is to calm down and take some time to grasp the basic concepts of Object Oriented Programming, as that will help you understand Java a lot better. I recommend you read both [this](http://www.amazon.com/Head-First-Object-Oriented-Analysis-Design/dp/0596008678) and [this](http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208/ref=pd_sim_b_3) books. Comparable and Serializable are interfaces. This means that if you declare that a class will be implementing a given interface, then the methods listed in that interface must be implemented by your class. There is more to interfaces than just that, but that's the big picture about them. Think of them as contracts between classes that guarantee the existence of methods. Lists... they are a subinterface of the Collection interface. While you scratch your head, think about almost anything that can store a group of objects. In Java you can use Lists, Sets, Stacks, Queues, Maps, Trees, etc. That is all described in the API documentation (check on any class on the API where it says "All Implemented Interfaces"). You don't really need to know the specifics at this point, but that they have pretty much the same methods, because they all implement the Collection interface. What does that mean? That regardless of which one you use to store a "collection" of objects, since you know they implement the Collection interface, you will have those methods at your disposal. What they do within those methods and the expected results will vary, but they will all know somehow how to respond to the methods listed in the [Collection Interface API](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html). As I mentioned, List itself is also an interface, so all it does is to further build on the set of methods that the Collections Interface defined, but specific to List-type containers. So regardless of you using an ArrayList, LinkedList, Stack or any other List implementing class, they will know how to respond to the methods defined in the [List interface](http://docs.oracle.com/javase/7/docs/api/java/util/List.html). Eventually you will need to learn the different types of collections and what and how each one does things. I'm simplifying a lot, but that's the general idea. As for sorting, there is an utility class in Java called Collections, which has methods that can help you sort collections out. But more important is to understand how comparisons take place, for which you need to understand what the Comparable interface is for. Your assignments may be looking for you to actually learn and implement sorting algorithms, so you may or may not have to use this. And there are even classes that by design keep their items in order already! (Hint: some of them do start with "Sorted", don't they?) 
http://www.youtube.com/course?list=ECFE2CE09D83EE3E28 Youtube! This is run by a channel called The New Boston, they're really good, and if you get stuck, well there's the comments below :)
Am I not using the Internet to get on Reddit and ask people about where to learn it?
Thank you so much! I will get started immediately! :D
Repeat after Joel: There ain't no such thing as plain text. http://www.joelonsoftware.com/articles/Unicode.html
To ensure the correct charset it'd be advisable to always control and set this yourself. Using "public String(byte[] bytes, Charset charset)" would be the correct and advisable way. (Also see "public String(byte[] bytes, int offset, int length, Charset charset);") Now, another hidden trap is getting the correct charset. In most cases you would probably want to just use UTF-8. But getting the correct charset is a minefield IF you are supporting multiple platforms, as they can have different names. Obtain the charset with Charset.forName(String charsetName); Java 7, however, gives you StandardCharsets which defines the most used ones. And lastly an example: String string = new String(buf.array(), Charset.forName("UTF-8"));
Apparently not. ;) you can try the youtube search for "the new boston" - many tutorials there. And there's a Java channel as well: https://www.youtube.com/user/java
Could you bench my ORM? It's here: http://persism.sourceforge.net/main.php
StringTokenizer will only split a string based on a fixed delimiter. The tokenizer that is discussed in the article tokenizes for the use in a parser. This means a string like "sin(x)" will be split into four tokens. FUNCTION(sin) OPEN_BRACKET VARIABLE(x) CLOSE_BRACKET StringTokenizer is not meant for such a task.
I agree with the fact that there are many good parser generators out there. And for more complicated parsers I would always recommend using them. For a simple task like parsing a mathematical expression they have, however, a number of disadvantages. - They introduce dependencies in your code that you might not want, - they can be too complicated for the task, and - they have a learning curve that is comparable to the learning curve of writing you own parser. The article is intended to illustrate how parsers can be built in a relatively rigorous way from scratch.
I am using Netbeans. I understand that I need to call for the interface at the top of the class, but I am trying to figure out how to write the method at the moment. I understand about the homework help, and I agree with you. I don't want it done for me. I want to understand these concepts so that I can enjoy doing the work. I understand how to make an instance of a class. That would be to create a new one in the main, or another class? 
Thank you! I am looking at these books right now.
Eh, I've thought of it and have been working on the theory for something like this but without the user realizing they are even coding. In short, try coming up with a dynamic geometrically encoded programming language.
Thanks for the link!
How often do you write a simple X + Y parser out in the real world? It always gets more complicated.
You have to start by implementing the interfaces you want next to the name of the class, like so: &gt; class Name implements MyInterface { Your IDE should then start to complain about the methods you have to write for your class. This is where you should take a look at the API reference page for the interface in question. There is usually a lot of information about what your method should do. For example, this is written for Comparator; &gt; Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. It really helps when you know what you're going to be comparing your class with, though. You can also write multiple compareTo methods for each type of object you want to be able to compare with (although the main one that takes a basic Object is required) and the runtime will automatically pick the right one when your code is running. I'm not good at explaining things so feel free to ask me more about the things you want to know ;)
Sorry. I didn't realize that was a link. Thought it was a question. ;)
Having just recently used Antlr4, I really can't sing it's praises enough- it is well thought through, has a great means of specifying grammars without mixing in code, and good approach to integration with applications. I would need very strong reasons to avoid the dependency to convince me to use anything else, quite honestly.
So you're using the Servlet container framework?
Yes, but to me, it's a different class of framework than something like Spring / Groovy / Struts
Let me know if this works: public static Comparable[] quickSort(Comparable arr[], int left, int right) { int i = left, j = right; int tmp; Comparable pivot = arr[(left + right) / 2]; while (i &lt;= j) { while (arr[i] &lt; pivot) i++; while (arr[j] &gt; pivot) j--; if (i &lt;= j) { tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; i++; j--; } } if (left &lt; i - 1) quickSort(arr, left, i - 1); if (i &lt; right) quickSort(arr, i, right); return pivot; }
Error: bad operand types for binary operator '&lt;' first type: java.lang.Comparable second type: java.lang.Comparable File: C:\Users\Jeremy\Desktop\Lab 6\Lab 6 final\SortAlg.java [line: 175] Error: bad operand types for binary operator '&gt;' first type: java.lang.Comparable second type: java.lang.Comparable File: C:\Users\Jeremy\Desktop\Lab 6\Lab 6 final\SortAlg.java [line: 178] Error: incompatible types required: int found: java.lang.Comparable File: C:\Users\Jeremy\Desktop\Lab 6\Lab 6 final\SortAlg.java [line: 190] Error: incompatible types required: java.lang.Comparable[] found: java.lang.Comparable This is my Print just in case you wanted to see Comparable[] toBeSorted = quick_srt(sort,199, sort.length-1); print(toBeSorted); time = System.currentTimeMillis() - time; System.out.println(" The test took " + time + " milliseconds");
Thank you
Here you go: public class sortTest { public static void main(String[] args) { Comparable[] numbers = { 10, 2, 35, 69, 1 }; Comparable[] sortedStuff = quick_srt(numbers, 0, numbers.length - 1); for(Comparable item : sortedStuff ){ System.out.println(item.toString()); } } public static Comparable[] quick_srt(Comparable array[], int low, int n) { int lo = low; int hi = n; if (lo &gt;= n) { return array; } Comparable mid = array[(lo + hi) / 2]; while (lo &lt; hi) { while (lo &lt; hi &amp;&amp; array[lo].compareTo(mid) &lt; 0) { lo++; } while (lo &lt; hi &amp;&amp; array[hi].compareTo(mid) &gt; 0) { hi--; } if (lo &lt; hi) { Comparable tmp = array[lo]; array[lo] = array[hi]; array[hi] = tmp; } } if (hi &lt; lo) { int tmp = hi; hi = lo; lo = tmp; } quick_srt(array, low, lo); quick_srt(array, lo == low ? lo + 1 : lo, n); return array; } } edit: Never had gold before, only vaguely know what it does. But thanks!
Awesome! Thanks for the link!
I found Spring in Action (http://www.manning.com/walls4/) to be a good starter.
Eclipse is an IDE. The Spring Framework is a set of tools to help you write software. They're not really related. But, if you want to get an idea of what the Spring Framework is all about, start with this introduction to [Spring Web MVC](http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html), a framework for writing web applications.
I totally agree that it's ambiguous in the context of common spoken or written English, but filtering has a long standing and specific [meaning](http://en.wikipedia.org/wiki/Filter_\(higher-order_function\)) in the context of functional programming idioms. It would be awful strange if Java was the only language that implemented it the other way. Unless developers have never come across a filter function in another language, it shouldn't be confusing? 
I don't know what it does either haha, let me know if you notice anything
hAHA I just noticed it's compiling but not organizing... hmmm 
In the code you put, you have: Comparable[] toBeSorted = quick_srt(sort,199, sort.length-1); Firstly, you might want to rename your variables, toBeSorted **is** the sorted array and should maybe be named as such. Secondly, you have a variable 'sort' which is the array you are passing that you want to sort, this variable I would maybe call something like toBeSorted. Thirdly, and most importantly, the 199 in your code: quick_srt(sort,**199**, sort.length-1); Should be a **0** like in my code: Comparable[] sortedStuff = quick_srt(numbers, 0, numbers.length - 1); The input I give is an array of numbers { 10, 2, 35, 69, 1 }, and my output is: 1,2,10,35,69 If this doesn't help, can you post the code that defines the input you are using?
 import java.util.Comparator; public class Word implements Comparable{ private String word; private String definition; private int count; int marks[] = new int[5010]; public Word(){ String word = "Start"; String definition = "To Begin"; count = 0; } public Word(String newWord, String newDefinition, int newCount){ word = newWord; definition = newDefinition; count = newCount; if(word == newWord) newCount++; }// ends constructor public Word(String newWord, String newDefinition){ word = newWord; definition = newDefinition; count = 1; }// ends constructor public String getWord(){ return word; } public String getDefin(){ return definition; } public int getCount(){ return count; } public void setWord(String newWord){ word = newWord; } public void setDefin(String newDefin){ definition = newDefin; } public void setCount(int newCount){ count = newCount; } public String toString(){ return word+ definition; } @Override public int compareTo(Object obj){ if(obj instanceof Word){ Word newWord = (Word) obj; return this.word.compareTo(newWord.word);} else{ throw new ClassCastException("Not a word");} Please excuse Word Class it was used for things previously import java.io.*; import javax.swing.*; import java.util.*; public class SortAlg{ public static void print(Comparable[] arr){ for(int i = 0 ; i &lt; arr.length; i++) System.out.println(arr[i]); } public static void print(int[] arr){ for(int i = 0 ; i &lt; arr.length; i++) System.out.println(arr[i]); } public static void main(String[] args) throws IOException{ String file = JOptionPane.showInputDialog("file name please"); Scanner read = new Scanner(new File(file)); long time; System.out.println("Sorting: Please Wait..."); time = System.currentTimeMillis(); Word[] sort = new Word [5010]; Word[] tempA = new Word[5010]; for(int i=0; i &lt; 5010 ; i++){ String line = read.nextLine(); String[] array = line.split(":"); String w = (" Word: "+array[0]); String d = (" Definition: "+array[1]); Word x = new Word(w,d); sort[i] = x; } Comparable[] toBeSorted = quick_srt(sort,0, sort.length-1); print(toBeSorted); time = System.currentTimeMillis() - time; System.out.println(" The test QuickSort took " + time + " milliseconds"); } public static Comparable[] quick_srt(Comparable array[], int low, int n) { int lo = low; int hi = n; if (lo &gt;= n) { return array; } Comparable mid = array[(lo + hi) / 2]; while (lo &lt; hi) { while (lo &lt; hi &amp;&amp; array[lo].compareTo(mid) &lt; 0) { lo++; } while (lo &lt; hi &amp;&amp; array[hi].compareTo(mid) &gt; 0) { hi--; } if (lo &lt; hi) { Comparable tmp = array[lo]; array[lo] = array[hi]; array[hi] = tmp; } } if (hi &lt; lo) { int tmp = hi; hi = lo; lo = tmp; } quick_srt(array, low, lo); quick_srt(array, lo == low ? lo + 1 : lo, n); return array; } }
I'm going to need your input file too. maybe put it on pastebin or something.
Learning Java is only free if your time is worthless.
The second one looks like it would work, here is my try at it, it is a bit longer though. Also I thought I saw a potential bug in it, but I think it was a simple fix if I ever find it again. This will be used in my opensource game about hacking as part of the terminal, thank you. Scanner scanner = new Scanner(input); ArrayList&lt;String&gt; args = new ArrayList&lt;String&gt;(); scanner.useDelimiter("\\s+"); for (int i = 0; i &lt; input.length(); i++) { if (scanner.hasNext()) { args.add(scanner.next()); } else { break; } System.out.println(args.get(args.size() - 1)); } // adds up the amount of quotes total int quoteCount = 0; for (String token : args) { if (token.matches("^\"") || token.matches("\"$")) { quoteCount++; } } for (String token : args) { // tests for a quote at the beginning and that there is at least two quotes left if (token.matches("^\"") &amp;&amp; quoteCount &gt;= 2) { int tokenIndex = args.indexOf(token); // for every token without a quote add it to the sting at tokenIndex in args, if it has a quote, do the same but break for (int i = tokenIndex; i &lt; args.size(); i++) { String currentToken = args.get(i); if (currentToken.matches("\"$")) { args.remove(token); args.add(tokenIndex, token + currentToken); args.remove(currentToken); break; } else { i--; args.remove(token); args.add(tokenIndex, token + currentToken); args.remove(currentToken); } } quoteCount -= 2; } } **Edit** That did not work but was close, here is some working ,tested, and updated code. This does have some strange behavior like returning [hello, test", "test "test] from [hello test" "test]: for (String token : tempArray) { // has strange problems with strange text for example [hello test" "test] // tests for a quote at the beginning and that there is at least two quotes left if (token.matches("^\".*") &amp;&amp; quoteCount &gt;= 2) { int index = args.indexOf(token); String s = token; // I could not think of a good name for this // for every token without a quote add it to the sting at tokenIndex in args, if it has a quote, do the same but break while (!args.get(index).matches(".*\"$")) { if (index + 2 &gt;= args.size()) { break; } s += " " + args.remove(index + 1); args.remove(index); } s += " " + args.remove(index); args.add(index, s); quoteCount -= 2; } }
Your problem is you aren't handling duplicate entries in your Word class I think. You can work around it by changing those entries in the input file, or by updating your Word class to handle it properly. @Override public int compareTo(Object obj) { if (obj instanceof Word) { Word newWord = (Word) obj; if(this.word.compareTo(newWord.word)==0) return 1; else return this.word.compareTo(newWord.word); } else { throw new ClassCastException("Not a word"); } }
Thank you for your time :)
Honestly, you just made me a little bit of a better programmer, thanks for the experience. Now if you'd like to find me a job for when I graduate.. :D
Why does the author manually call the default superclass constructor? e.g. super(); At the start of each constructor. Isn't that just boilerplate?
as somebody new to coding and looking to learn, but suffer for hyperactive procrastination, this seems nice.
I was wondering if you could shine more light on `setTransactionIsolation()`. I have been reading the docs and am wondering, why should I use `TRANSACTION_REPEATABLE_READ` and not `TRANSACTION_SERIALIZABLE`, what's the difference exactly?
http://hg.openjdk.java.net/jdk8/jdk8/file/tip http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html
Article says "should" be coming.
Lists have a Contains(object) method you can't remove an object of a list while iterating it. Unless you use Iterators like this : Iterator&lt;Color&gt; iter = colors.iterator(); while (iter.hasNext()) { if (iter.next().equals(test)) iter.remove(); }
With Java 8 you should be able to do something like this: final Color compare = Colors.get(0); Colors = colors.stream() .filter(c -&gt; !c.equals(compare)) .into(new ArrayList&lt;&gt;()); See: [State of the Collections](http://cr.openjdk.java.net/~briangoetz/lambda/sotc3.html).
Here is a workaround (or food for thought) if you want : If you use a hashmap you will be able to overwrite existing colors if you use something unique as the key, eg color.getName() (if that exists) You can then convert the hashmap back to an Array if you need to. I will explain further if you want.
&gt; Expert Group Formation: March 2011 It didn't take them 11 years to get it through a vote. It just took that long for anyone to seriously want to change it.
Structs will never happen because they are a bad idea and would break the type system.
I seem to recall reading that you can use .collect(Collectors.toList()) now, to do the same thing as into(new ArrayList) This page was pretty interesting, and provides a good summary of all the new JDK 8 goodness: http://www.techempower.com/blog/2013/03/26/everything-about-java-8/
Still want help understanding Iterators?
What about the JDK source code developed by Oracle? I am looking for the source code made by Oracle/SUNMircosystems if its not private
It's available [here](http://www.oracle.com/technetwork/java/javase/downloads/index.html) way at the bottom CTRL + F: Java SE 6 JDK Source Code Only up to JDK 6 though. 
Starting from 7, the Oracle JDK is 99.99% OpenJDK.
I know there are a lot of Java novices in this subreddit, so this is for you: don't bother with the linked article. It's terrible. This article is somewhat akin to trying to teach someone poetry by giving them a dictionary. If you want to learn servlet programming, let an IDE or framework take care of the mundane, tedious, and repetitive crap. As you get comfortable with this and do it more and more, you will gradually start looking under the hood at what makes things tick.
Based on....? InvokeDynamic certainly seems to have happened.
11 years since the last update also means the API was rather well designed to begin with. Despite rather intensive use, nobody felt a really pressing need to change something for a long time. It's just that with Java EE 7 the style of the old API started to feel a bit "different". In 2002 administered objects were all the craze, meaning that not the developer but some lame ass ops guy that really doesn't want to creates and configures certain type of objects. In 2013 really only IBM still believes in that approach, so with JMS 2 you can now create JMS destinations (queues and topics) from within the app. CDI and the entire annotation and injection style didn't existed either in 2002, so JMS has been updated to align with that style.
It comes built in with with NetBeans
What kind of license are you considering? We currently have a need for this sort of functionality for a commercial product we're working on. We could definitely contribute to the development effort to save us both work, but the code would need to have a reasonable license that won't force us to open source the code that we're linking to it. Something like LGPL would be fine, but we're trying to stay away from more viral licenses like GPL.
indy is a) horrendously overcomplicated for what it was supposed to do b) currently being rewritten because performance sucks d) partially resposible for dozens of Java's zero-days c) only happening because they figured out it could be used for Lambdas in Java InvokeDynamic is the prime example of _not_ getting shit done.
Why and how?
You're complaining about syntactic details. Whether is is implemented via some keyword (`struct Foo { ... }`), some marker interface (`class Foo extends Struct`) or some annotation (`@Struct class Foo`) doesn'T matter. Anyway, I don't see how it's even slightly related to the type system.
i learned from this website....http://math.hws.edu/javanotes/index.html 
Where is your JPanel (DrawPanel) being initiated? To me it sounds like the jbtSelectFile.addActionListener was called twice so you have two actions on that Button. Have a debugger? 
You're adding an action listener every time the component is painted. Put it in a constructor instead.
You are adding your actionListener each time paintComponent is performed. https://gist.github.com/tonetheman/5358538 In my little crummy test it gets called twice... that might account for 2 action listeners
See C#. Unless they don't do them in the same stupid way M$ did.
Structs are value types, objects are reference types. BIG difference.
close that reader in a finally block! Edit: Also, are you really calling Logger.getLogger() every time you log?
What structs have then is an implicit copy constructor. Which is how Cloneable works, if developers weren't afraid to use it. It works great assistance for classes whose only fields are immutable. 
Would you mind explaining what you mean by that? Classes are just polymorphic structs with a vtable (depending on how dynamic the dispatch system is).
Thanks, that did it.
Does anyone use applets anymore? Did you ever use webstart for real?
Cloneable has been broken since 1.0 so....
That may be, and 8 to 16 bytes will indeed add up, but how do you propose to integrate a structure-like concept without breaking Java's type system or legacy code? Remember, legacy code assumes that: * Everything is either a primitive type or an object * Every object is a monitor that can be `synchronized` against * The set of primitive types in Java is exactly `boolean`, `byte`, `short`, `int`, `long`, `float`, `double`, and `char` * The reflection API obeys the above rules, as does JavaBeans introspection, etc I'm all for efficiency, but I don't see how to do this without breaking at least some legacy code, and it has always been a huge no-no to break legacy code.
I've just gone with my usual, Apache 2.0. I'm not married to it, though.
For line 12 and 13, what do you try to do with " this.length() "? "this" refers to the current class which will be PalindromeServer ---- For line 30, you try to call a method reverse() of the Class String. String does not have a reverse method. See [API Doc - String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#method_summary)
I got rid of the syntax by just doing what I talked about in the main post. http://pastebin.com/cxZpw8wj still not working though, can you give me a push?
Oh, I see... You might use the parameter. Assuming the rest works as intended: /** Finds the reverse of the String */ public String reverse(String toReverse){ String var = ""; for(int i = toReverse.length() - 1; i &gt;= 0; i--){ var += toReverse.charAt(i); } return var; } *edit*: And for the call, you do String reverseMe = "123"; String reversedString = reverse(reverseMe); // reversedString will be "321" 
yeah, that's what I ended up doing, thanks!
You're welcome
Kk, first you have to open the desktop, then you break the motherboard into pieces. Connect the pieces back together, and then run the cmd file for client/server updater. You should recieve a syntax error, run the syntax error in the cmd file, then read it to the eclipse engine. That should fix your problem!
...Thanks...
No. Application developer should not pay to be able to deploy application to an open platform, such as web.
&gt; I'm all for efficiency, but I don't see how to do this without breaking at least some legacy code, and it has always been a huge no-no to break legacy code. This is what makes other JVM languages so appealing nowadays.
The ones described in the article were very similar to c++ structs.
They really need to just branch off from the original JVM and have 2 versions: an old, legacy version and a new version that supports things like structs
Could you please explain how you'd use a bloom filter to solve the task?
The biggest argument I've heard against Cloneable is that it gives a shallow copy. That's perfect if your class only has primitive and immutable fields. Cloneable seems like a good way to write a quick copy constructor. 
Not upgrading to Java 7 and continuing to use older versions is like sticking with an out of date operating system that is no longer supported. However, check if your application needs specific attributes of the currently installed Tomcat version and that they exist in the upgrade. I know of at least two companies who are revamping business-critical intranet apps due to being tied to a specific JVM/Tomcat version. At times, these apps need to get data from internet sources, and are considered security risks. 
I am already on latest version of Tomcat. I just wanted to see if anyone had any issues with Java 7 and Tomcat before I get into it.
I had none, but it was with a fairly trivial system. EDIT: downvoted myself for lying slightly.
Considering CentOS 4 was originally released something like 8 years ago, I'd say it's safe to say this is one of those rare instances where it's not a foregone conclusion. Checking wikipedia, maintenance releases were stopped over a year ago and it's officiall EOL; so yea... 
StringBuffer/StringBuilder have the reverse() methed. 
 java -Xmx400m -cp ~/Downloads/soot-2.5.0.jar soot.Main -cp . -pp test -f dava So, `java` you probably know. `-Xmx400m` is to allocate enough heap memory to soot. Or something like that. First `-cp` sources from the soot jar. `soot.Main` uses soot's main function. The second `-cp` tells soot where to look (current directory?). `-pp` adds [some dependencies or something.](http://www.bodden.de/2008/08/21/soot-command-line/#cp) `test` is to tell it to focus on test.class. `-f dava` tells it to decompile. Would you mind letting me know how the output compares on some of the harder to decompile stuff? I just downloaded it too. Thanks for the info dump in this thread.
This causes an error in soot as well. Soot started on Thu Apr 11 08:47:09 PDT 2013 Decompiling test... Analyzing sootOutput/dava/src/test.java... Exception in thread "main" java.lang.NumberFormatException: For input string: "#-Infinity" at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1241) at java.lang.Double.valueOf(Double.java:504) at java.lang.Double.&lt;init&gt;(Double.java:597) at soot.dava.toolkits.base.AST.transformations.DeInliningFinalFields.check(DeInliningFinalFields.java:243) at soot.dava.toolkits.base.AST.transformations.DeInliningFinalFields.checkAndSwitch(DeInliningFinalFields.java:200) at soot.dava.toolkits.base.AST.transformations.DeInliningFinalFields.inASTStatementSequenceNode(DeInliningFinalFields.java:360) at soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter.caseASTStatementSequenceNode(DepthFirstAdapter.java:509) at soot.dava.internal.AST.ASTStatementSequenceNode.apply(ASTStatementSequenceNode.java:98) at soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter.normalRetrieving(DepthFirstAdapter.java:493) at soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter.caseASTMethodNode(DepthFirstAdapter.java:68) at soot.dava.internal.AST.ASTMethodNode.apply(ASTMethodNode.java:492) at soot.dava.DavaBody.applyASTAnalyses(DavaBody.java:626) at soot.dava.DavaBody.analyzeAST(DavaBody.java:420) at soot.PackManager.postProcessDAVA(PackManager.java:556) at soot.PackManager.writeOutput(PackManager.java:398) at soot.Main.run(Main.java:199) at soot.Main.main(Main.java:141) real 0m7.370s user 0m5.540s sys 0m1.228s 
Jad: // Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov. // Jad home page: http://www.geocities.com/kpdus/jad.html // Decompiler options: packimports(3) // Source File Name: test.java import java.io.PrintStream; import java.util.Scanner; public class test { public test() { } public static void main(String args[]) { System.out.println("Please enter values:"); Scanner scanner = new Scanner(System.in); double d1 = (-1.0D / 0.0D); double d2 = (1.0D / 0.0D); double d; do while((d = scanner.nextDouble()) != 0.0D) if(d &gt; d1 &amp;&amp; (d1 = d) != d || d &gt;= d2 || (d2 = d) == d); while(d1 == (-1.0D / 0.0D) &amp;&amp; (d1 = 0.0D) == 0.0D &amp;&amp; (d2 = 0.0D) != 0.0D); scanner.close(); System.out.println((new StringBuilder()).append("The smallest value was ").append(d2).toString()); System.out.println((new StringBuilder()).append("The largest value was ").append(d1).toString()); } } 
With one recent update, it turned out that the terrible coders who wrote the original code hadn't managed to follow the simplest contracts, which the slightly stricter TimSort uncovered by throwing an exception.
Yes, The apps I develop use webstart, and we have &gt; 10000 users of those applications. Webstart isn't perfect (cache issues) and sometimes stupid (signing a jnlp file is impossible in a real-world case) but it does the job 99% of the time.
Thanks, ill look into that. 
Good ol' JAD!
I'm having a hard time finding classes of even moderate complexity that soot/dava can handle. Here's a comparison of java.lang.Integer: [soot/dava](http://pastebin.com/AZxrskge) vs. [my prototype](http://pastebin.com/BfxB2NJY) Keep in mind I have done very few Java language optimizations at this point.
Why isn't this code thread-safe? Seems like each thread should invoke a new instance of NonThreadSafeDateFormatHelper() and Calendar.getInstance creates a new calendar object.
you need to detect 64 or 32 and set java library.path variable appropriately. OR if you're just running on your own machine you should be able to set which ever ones you're using.
I was going to say "oh it's because..." but then I realized you're right... I can't see any thread safety issues in that code. I'm guessing standardDateFormat was supposed to be static in that example maybe?
Yes I was about to post the same thing. If it were static the blog post would make a lot more sense. I even googled around for explanations on how ContiPerf operates and found this: http://databene.org/contiperf According to that it will create a new class for each test ... But it doesn't explain how the threads would run in parallel. My best guess is some kind of single producer multiple consumer pattern. But none of that suggests that the class is not thread safe unless the Simple Date Format object is static.
There's a library to do just this: [native-guide](https://github.com/skeeto/NativeGuide) (on [Maven](http://search.maven.org/#artifactdetails%7Ccom.nullprogram%7Cnative-guide%7C0.3%7Cjar)) 
Yea, and furthermore, even it wasn't a thread safe class couldn't this test still pass depending on how the threads are handled by the CPU (albeit not likely)? Therefore, making this test nondeterministic. I would file this under "Use with caution", it will probably catch a lot of threading issues eventually or maybe even immediately, but if the code being tested is mission critical, depending on this test to make sure your code is thread safe could end up draining someone bank account or something.
http://fahdshariff.blogspot.ca/2010/08/dateformat-with-multiple-threads.html
I don't know about books, but the [Oracle site has its own well written tutorials.](http://docs.oracle.com/javase/tutorial/)
Thank you for the quick reply. I'll check that out. 
I still believe the code in OP's post is thread safe though. He creates a new NonThreadSafeDateFormatHelper() in each thread, which in turn creates a new SimpleDateFormat. Therefore there are no shared references between threads. Which lines up with what the author is pointing out in this post. 
The test at the bottom shares the object with the date format delegate. It is accessed by 2 threads through contiperf 
Yeap, that's it. Didnt see it since the diff didnt highlight it. Good eye
That's awesome. I work with Android every day, I'm definitely in search of a good decompiler. [Fernflower](http://forum.xda-developers.com/showthread.php?t=2029842) was also mentioned in this thread. Haven't had the chance to check it out either.
Fernflower: import java.util.Scanner; public class Test { public static void main(String[] var0) { System.out.println("Please enter values:"); Scanner var1 = new Scanner(System.in); double var4 = Double.NEGATIVE_INFINITY; double var6 = Double.POSITIVE_INFINITY; do { double var2; while((var2 = var1.nextDouble()) != 0.0D) { if(var2 &gt; var4) { var4 = var2; if(var2 != var2) { continue; } } if(var2 &lt; var6) { var6 = var2; if(var2 != var2) { ; } } } if(var4 != Double.NEGATIVE_INFINITY) { break; } var4 = 0.0D; if(0.0D != 0.0D) { break; } var6 = 0.0D; } while(0.0D != 0.0D); var1.close(); System.out.println("The smallest value was " + var6); System.out.println("The largest value was " + var4); } } Original: import java.util.Scanner; public class Test { public static void main(String[] args) { System.out.println("Please enter values:"); Scanner in = new Scanner(System.in); double input; double largest = Double.NEGATIVE_INFINITY; double smallest = Double.POSITIVE_INFINITY; while( ( (input = in.nextDouble()) != 0 &amp;&amp; ( ( (input &amp;gt; largest) &amp;&amp; (largest=input)!=input || ( ((input &amp;lt; smallest) &amp;&amp; (smallest=input)==input) || true ) ) ) || (largest == Double.NEGATIVE_INFINITY &amp;&amp; ( (largest=0)==0 &amp;&amp; (smallest=0)!=0 ) ) ); in.close(); System.out.println("The smallest value was " + smallest); System.out.println("The largest value was " + largest); } } Edit: Tried to unfuck that while loop a little.
Try moving your main method to a different class. Edit1: Wait a second... why do you have two main methods in your program? Edit2: [TIL](http://stackoverflow.com/questions/1625068/calling-main-method-from-another-application) a java application can call another application's main method... I guess i don't know as much about java as i think i do. Post the rest of the code please.
What does your DriverRunner.main do? There doesn't seem to be anything wrong with your GUI.
I'm not sure what the best way to post the rest of the code would be since it's a big project with about 8 classes.
It calls upon the methods of a bunch of other classes. It would be hard to explain without posting all of them but it's a huge project.
[sqlite-jdbc](https://bitbucket.org/xerial/sqlite-jdbc) does this. It loads an appropriate DLL for your system [I think it has {64,32}{win,linux,OSX} in the jar. Never looked at how it does it, but there you go; concrete example that does OS as well as word length
Have you stepped through it with a debugger yet? I made my own DriverRunner class with a main method that just prints a string to the console and it worked fine. I'd say the problem isn't with this GUI portion.
My intro to java class at Georgia Tech uses Java Software Solutions: Foundations of Program Design. I've found it to do the job. 
can you try replacing the new String[0] with an actual string literal?
Yeah, I was confused, then i read the code, now I'm more confused. I never knew you could do this. It's 1 in the morning and I'm going to try learning something, wish me luck :)
&gt;Of course, it is not a perfect solution because, after all, Optional references can also be null references Protip: Don't do that
I believe it's because you're calling system.exit immediately afterwards. Though I can't know for sure without the rest of the code. 
Have you tried launching the other program in a new thread ? public void actionPerformed(ActionEvent Start) { new Thread(new Runnable(){ public void run() { DriverRunner.main (new String[0]); } }).start(); }
You're calling the main method in the UI thread. This means the UI is going to be essentially frozen until main returns. (And when that happens you kill the jvm by calling System.exit, but I don't think that's your immediate problem.) The solution depends on exactly what it is that you're trying to do, but if that other class is essentially a whole other Java application that you want to "run" (but in the same jvm), then you need to move the calls to main and System.exit to a separate thread. Something like: new Thread() { public void run() { YourOtherClass.main(); System.exit(); } }.start(); (Posting from phone, so probably has typos.) This will allow the UI thread's event loop to continue running concurrently with the main of your other class. 
Right. There will never be a perfect solution to anything if you allow for programmers 'doing it wrong'. The hope is that if someone uses Optional for future APIs they'd do it as expected or have their API ignored by the community (wether that be public or private to a company). 
This is something a compiler could warn you about.
Do like!
Oh... that makes sense! When I think of it like a path on a file system then yeah, maps.google.com is the one that's backwards! Thanks!
I can see how it would be nice to know a function has a nullable return value, but at the same time this may make the problem worse as now we all expect that functions could return null and a good programmer is usually defensive about that. However, with optional objects we'd be trained to assume that functions that return an unwrapped Object are nonnullable or else we'd still have to check all Object output still for nulls. What I think would might be better is if nothing on the method definition changed but the JVM automatically wraps Object returns in the Optional object, unless the function's return is explicitly marked as nonnullable.
Maybe I'm missing something, but I don't see the reason for this. How is this: Option&lt;Foo&gt; getAFoo() { ... } Option&lt;Foo&gt; f = getAFoo(); if(f.isFound()) { ... } different from this Foo getAFoo() { ... } Foo f = getAFoo(); if( f != null ) { ... } Other than clarifying to the API user that the result of this operation could be null? Would not a well-written Javadoc suffice? EDIT: After submitting this, I could see the case where you have streams of Option types, and the stream handler accepts the possibility of null elements. I'm not used to programming in this way with Java, so the thought did not immediately occur to me.
Also, I think one of the main advantages of having the Optional type *is* the fact that it clarifies to the API user that the result could be null, and forces them through another step (.get()) in order to access the result.
&gt;now we all expect that functions could return null We do? I can't even imagine how ugly my code would look if I assumed every method returning a reference could return null.
To completely ignore all the main reasons, it provides nice side benefits from its methods. Instead of Foo f = findFoo(); if (f == null) f = someDefaultValue; you get Foo f = findFoo().orElse(someDefaultValue); // orElse is a method of Optional It makes it easy to throw custom exceptions if it's not found: Foo f = findFoo().orElseThrow(WeirdException::new); and so on; `ifPresent(Consumer&lt;T&gt;)` is nice if you're iterating over elements.
Gradle is AWESOME!
Ooh, I like that :) Way better than checking the result on the next line!
TL;DR Gradle is imperative
But we do know that it is possible. Now its a judgement call of whether we'd expect it to happen in conceivable events and if we trust a documented contract of its acceptable return values.
That would be my suggestion as well for real world work, but since this is a class and I doubt they would cover regular expressions before strings I'm guessing the professor is expecting a program more along the lines of the following psuedocode * for every character in the string minus the last two * if character == b, check if two characters ahead is also b computrdl already wrote a working Java implementation.
The point is that Groovy is imperative and Gradle is Groovy, but if your configuration only requires using the gradle DSL and plugins, you can think of it as declarative. This is especially clear when you declare task or evaluation dependencies.
Indeed, a much better solution.
&gt; Optional&lt;obj.getClass()&gt;(obj) Is this a Java version without type erasure?
This is really a fatuous argument. The entire point of the Optional type is to document the optionality of the return type of functions, i.e. to make clear the possible return values - either an Optional wrapping a value, or one wrapping a null. If you work with idiots who don't get this, then either don't use Optional, or go and find a job working with smarter people. Yes, someone might return a null Optional, but this is tantamount to complaining that someone might return a -ve integer from an abs function. The type system shouldn't regarded as a mechanism from preventing people from doing stupid things. It's a means of expressing intent.
Telling me it's a straw man argument isn't a useful defence. I see no point in the new class: 1. You'd have to re-factor all your legacy code to guarantee being bullet proof against them 2. The normal java API will still not be refactored. 3. It's trivial just to check for null values when you expect them 4. Debugging NPE's is practically 0-effort coding. 5. If you have a decent test set you'd probably catch most of them anyway and testing finds other problems.
My argument was the optional doesn't accomplish that as designed in jdk8. You know a function that returns an optional may return null but it tells you nothing about functions that don't return optional. The NPE doesn't go away unless the compiler prohibited nulls from being returned or it automatically wraps all functions unless marked as nonnullable then you'd be certain of what the function returns. And who said anything about teammates? I'm more concerned with libraries. The point of optionals is that a library author can show if a function may return null, the problem is it doesn't tell you if a function may not return null which, IMO is a more useful guarantee to make.
I'd take a step back and revise your isPrime method; the [Sieve of Eratosthenes](http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) could be of use, or the approach I'd take is to figure out all the primes less than or equal to that number first, then check which of those primes are factors of the number.
Good luck - may be worth Googling to see if there's a faster algorithm though. Only tip I can give is that you'll only need to check up to half of the number (so just over 300 billion) for primes, as anything from their upwards can't be a factor (since 2x any value you find will be larger than the target).
They add in IDE-level error checking and show up in the javadocs. It has the same affect of giving more information to the user. The big difference is that for a method that returns @NotNull, you KNOW its not null. With a method that does not return Optional, you don't know if the developer forgot it or doesn't follow the practice.
Some formatting would be nice, 4 spaces in front marks code. package project4; public class Question { private int num1; private int num2; private char operand; public Question() { operand = '+'; num1 = (int)(Math.random())12; num2 = (int)(Math.random())12; int addition = num1 + num2; invalid = addition; operand = '-'; num1 = ((int)(Math.random())*12+6); num2 = (int)(Math.random()) &lt;&lt; num1; int subtraction = num1 - num2; negative = subtraction; } public String toString() { String str = new String(num1 + " " + operand + " " + num2); return str; } } When you call Question{} you set operand to '+' and then change it to '-' unconditionally, you also do the same with num1 and num2. Everything before operand = '-'; is irrelevant. Then you set num1 to 6 because casting happens before multiplication. num1 = ((int)(Math.random())*12+6); Means you generate a random double between 0.0 and 1.0, convert that to an int, which will always be 0, then multiply it by twelve, again 0, and then add 6. Even if this did work the way I think you meant for it to, num1 would be between 6 and 18, not 6 and 12. num2 = (int)(Math.random()) &lt;&lt; num1; This part makes no sense, I would look into bitshifting some more. What you are doing here is essentially multiplying by 2^num1, of course the same thing happens before, random converted to int is 0, so this will always be 0. Your toString() method is fine, but num1 will always be 6, num2 will always be 0, and operator will always be '-'.
&gt; You want to know why nobody write those 19 lines? Google Guava Collections framework uses this same idiom, and I am pretty sure others use it as well. 
I'm gonna dodge that bullet.
&gt; you will own significant portions of the service Own?
I would still prefer the ObjectNotFound exception to be thrown from inside the find(...) method itself. This type of situation assumes the find(...) method **should never** return a null reference. I still have to agree with the_hoser. If you are not making the language itself null-safe, this new Optional object is just a mess waiting to happen. Programmers can still return null from a method that was originally intended to return a valid instance of Optional, which screams Murphy's law all over the place. Both versions shown by the_hoser are exactly the same, semantically speaking. I guess some people would prefer a pretty line that says if(f.isFound()) { // do something } It just looks prettier, but if the previous method that should've returned an Optional returned null instead, you are back to the same old NullPointerException.
This is the same assumption we all make everyday with our current version of Java. If a method returns something, it is always possible it could return null. I don't remember this as NOT being clear, ever. The API docs might clarify their intentions by telling you their method will never return null. But you always take a risk to assume their method is bug free. Same thing holds for a method that will return an Optional object. They may tell you it's always going to be there, but you take a risk assuming the API is bug free. If, for some reason, it returns a null Optional then you are just screwed as Java 7.
Still doesn't solve the NullPointerException problem the article discusses in so much detail. If the API that should've returned a valid Optional returns a null, you as just as screwed as you were in Java 7. Now you have to check if the return is null AND if the Optional you get is empty... I don't see a solution. This only adds to the problem.. 
&gt; In a world where we ignore backwards compatiblity Good luck with that :)
Well it's important to say about that those worlds where such colossal language design mistakes were avoided do exist. (ya ya, everything is obvious in hindsight I know...)
`@NotNull Optional&lt;T&gt; t` - problem solved. Btw, optional values also compose better than just `@Nullable`s since you can operate/propagate them safely with map, bind, etc. Btw, why can't an IDE error check you assigning null to optionals?
&gt; num1 = ((int)(Math.random())*12+6); &gt; &gt; Means you generate a random double between 0.0 and 1.0, convert that to an int, which will always be 0 On a pedantic note, Math.random returns greater than or equal to zero, but strictly less than 1. That said, I think the OP should look into using [Random.nextInt\(int n\)](http://docs.oracle.com/javase/7/docs/api/java/util/Random.html#nextInt\(int\)) instead of Math.random - it simplifies getting a random number with an upper bound, and should give more uniformly random results.
&gt;The API docs might clarify their intentions by telling you their method will never return null. But you always take a risk to assume their method is bug free. So you don't use libraries you haven't written then, right? Because if you don't trust "this method will never return null", then I don't see why you'd trust "this method returns a correct object calculated from your parameters".
Ah, yes. Otherwise, a very small fraction of attempts would be 18-0 and that would really confuse OP. Yeah, I forgot to mention how to fix that part too, thanks.
Be responsible for when someone else breaks*
Well if those 25 incidents cascaded from one error, you're going to have a good explanation for this, right? I can understand them a bit. AWS is one of the most commonly used cloud infrastructure in the world and if it has bugs, the whole Internet could go down (happened a few times already). 
Ah, I see what you're saying. I still think that it is a clearer contract to have this Optional type. It makes it harder to unintentionally not handle the null case. You can still do it by just going straight through the .get().
If the intention of the API is to never return null, this can be made explicit in the API docs for the method I am calling. Then I'd expect a ObjectNotFoundException to be thrown when the desired object cannot be found or created. This way makes it clear to the API user that when they receive a null value, it's because of a bug and they can always treat this situation as such an error.
Yes, I use third party libs. And I base my error handling decisions on the information I can find the API docs for methods I am calling. A well written library, like Apache Components, will follow the intentions declared in its documentation. This makes debugging hard-to-find-bugs easier. If the intention of the API is to never return null, this can be made explicit in the API docs for the method I am calling. Then I'd expect a ObjectNotFoundException to be thrown when the desired object cannot be found or created. This way makes it clear to the API user that when they receive a null value, it's because of a bug and they can always treat this situation as such: an error. To me, that seems more elegant than having a whole new Optional object type, which the language itself gives me no guarantees that it will never be null. Optional still doesn't solve the NullPointerException problem the article discusses in so much detail. Now I'd have to check if the return is null AND if the Optional you get is empty... I don't see a solution. This only adds to the problem..
Ah the benefits of a good night's sleep. If you're still stuck on this, ignore what I suggested last night - in fact you don't need an isPrime method at all. Every positive integer from two upwards can be expressed via prime factorisation (there is a dedicated Wikipedia page, but the [prime factor](http://en.wikipedia.org/wiki/Prime_factor) page does a better job of giving an example). For example, 1020 can be expressed as 2x2x3x5x17; in your algorithm, you just need to start at 2, divide by that as many times as possible, then move on to 3, divide by that as many times as possible, then move on to 4, divide by that as many times as possible (which will be zero, as the divisions by 2 will have taken care of this), etc. You'll need to keep track of what's left after the division each time, and once this value reaches 1 you've found all the prime divisors, and as a bonus the last one your used will be the highest one.
No matter what layout manager you choose, make sure to set it before adding components (I see that CarsShowOff adds components to myPanel and then sets the layout). As for good layout managers - MigLayout.
Except for that director is often a nontechnical business type who's only interested in how that statistic reflects on his performance review, regardless of whether you have a sensible explanation, like the network switch was down for 30 seconds. And oh yeah, it resolved itself before you got to my desk.
I needs programmer...
I only had technical capable managers yet, but that's probably because I only work since 2 years now. Having such a manager who doesn't want to understand you or mistrusts you always obviously goes bad with that rule. 
Checking if a number is prime only requires you to check denominators up to sqrt(number). If you can't find a divisor for "number" that is smaller than (or equal to) sqrt(number), then number is a prime. The non-formal proof is If n is not a prime number, we can divide it into two factors a and b so that n=a*b. If both a and b are greater than sqrt(n), than surely a*b is greater than n. Because of this, at least one of a and b must be less than (or equal to) sqrt(n).
Yep, you're right - I had a feeling that was the case, but couldn't remember for certain.
You can insert conditional breakpoints or breakpoints that trigger when they are hit X times
Thanks for the update. We are currently on 1.7.0.13 and are still experiencing the issue! I did some checking and think maybe the issue could be resolved in this manner: From the bottom of the bug page: http://bugs.sun.com/view_bug.do?bug_id=7184444 This problem existed in jre 7. It is likely due to after the implementation of the RFE 6893238 (Move NTLM and SPNEGO implementations into separate packages), the DeployAuthenticator.getPasswordAuthentication is being called twice for the ntlm case. One with the "negotiate" scheme which is unknown to deploy code and another one with the "ntlm" scheme" If you look at the HTTP-AUTH notes for Java 7 http://docs.oracle.com/javase/7/docs/technotes/guides/net/http-auth.html you will see they added: Http SPNEGO Negotiate (defined by Microsoft), with the following underlying mechanisms: Kerberos NTLM Do you think the issue could be resolved by having the applet recompiled to only use "ntml" and not the "negotiate" scheme? If so would we only need to add something like the following to the applet code? DeployAuthenticator.getPasswordAuthentication = "ntml" I am not a programmer so the syntax is wrong but do you think that would work? 
I'm curious how you managed to NOT download the latest update..
Also, applets are the devil. I really caution against their use in favor of regular web technologies like HTML and JS.
Long story.. I have no control on what is and is not released. We have tested with 1.7.0.17 and the account lockouts are not as frequent but we do see the lockouts happen. The strange thing is in 1.6.x.x when the java console is open and you are switching between the menu options the console never closes. In 7.13 and 7.17 the console will close and re-open. 
I agree. This one is due to be scrapped and the new app will be deployed next year. We just need to keep it running for a little longer.
Did some work on enum declarations and enum switches today. Looking [pretty good](http://pastebin.com/Msc6Gs4R). That's a decompiled enum, in case it wasn't obvious :). Has a few switches too.
* a) this is question that you could have had answered with a 2sec. google search: [java "what does (int) mean"](https://www.google.com/search?q=java+%22what+does+%28int%29+mean%22). * b) for this kind of question please post in /r/javahelp 
The int in parentheses is an example of typecasting. The way Math.random() works is that it returns a double between 0 and 1. By multiplying this number by oneLength, you get a double between 0 and oneLength. Because the result is a double, and storing it as an int will result in a loss of those decimal places, you must typecast it as an int in order to store it as one.
It's a welcome addition, but I quite like TestNG's data providers. 
I'm afraid your idea doesn't work, because DeployAuthenticator is private JVM code, not something you can override in the applet code. And if I understand things correctly, the whole issue happens before any applet code is loaded or executed. So, you cannot fix the problem by touching the applet itself. If I'm right, here's what is happening: 1. Java starts and attempts to load the applet JAR file 2. Either the proxy or the server responds with *multiple WWW-Authenticate headers* (at least Negotiate and NTLM) 3. Java tries Negotiate as per the internal ordering mentioned in your second link: "GSS/SPNEGO -&gt; Digest -&gt; NTLM -&gt; Basic" 4. Negotiate fails because Applet loader doesn't support it correctly. The domain controller gets an invalid authentication request. 5. Java tries NTLM. (I'm assuming Digest wasn't included in the WWW-Authenticate headers) 6. NTLM succeeds. So, basically the server is responding something like this: WWW-Authenticate: "Negotiate" blablbalbal WWW-Authenticate: "NTLM" blablalblabla If the Applet loader sees this, it will try Negotiate first (which is not supported!). Note that the order doesn't matter! The existence of "Negotiate" is enough for Java to try it first. Now, I see two ways around this. 1. Configure the server to NOT send the "Negotiate" header when the Applet JAR is requested 2. Configure the client to try NTLM first Solution 1 requires modifying IIS configuration, which I cannot help with, but it shouldn't be too difficult. Solution 2 requires certain modifications *on all client machines* and will affect all applets and HTTP requests made in applets. You can force NTLM to be used with runtime parameter -Dhttp.auth.preference=NTLM (you can manage these in the Java Control Panel). You can check if I'm right by using a HTTP request tool that can inspect the response headers. Just make a HTTP request to the Applet JAR URL, and see what WWW-Authenticate headers the server sends. Please note that all this is NOT the same bug that was mentioned in the report. The reported bug happens when the server sends only the NTLM header, but Java still tries Negotiate even without not being asked to. It's possible that I'm completely wrong, but my current idea about the issue makes sense. The mere existence of the rule "If Negotiate is in headers, try it first" is enough for the issue to happen.
http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html Look at the ``readAllBytes``, ``readAllLines`` and ``write`` methods.
Can't they use the http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/applet/applet_deployment.html method of &lt;APPLET archive="my_applet.jar" code="MyApplet" width="300" height="300"&gt; &lt;PARAM name="java_arguments" value="-Dhttp.auth.preference=NTLM"&gt; &lt;/APPLET&gt;
If you're not a stickler for efficiency then I suggest using the [Scanner](http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Scanner.html) Class and the [PrintWriter](http://docs.oracle.com/javase/6/docs/api/java/io/PrintWriter.html) Class. They make it very easy to both read and write. But Scanner is almost exactly the same as BufferedReader so your choice. String[] arr = new String[100] try { Scanner sc = new Scanner(new File(filename)); int i = 0; while(sc.hasNext()) { arr[i] = sc.next(); i++; } sc.close(); } catch(FileNotFoundException e){} If I were you I'd use an ArrayList instead of an array of Strings, but whatever. PrintWriter works similarly to the Scanner class, just choose the name of the file in it's constructor and remember to close the PrintWriter.
Nice! That's IMHO the best solution.
Note that you should probably be using the classes in `java.nio.file` if you're using Java 7. See [this page](http://docs.oracle.com/javase/tutorial/essential/io/legacy.html).
Entering a carriage return ctrl-v ctrl-m or something like this works: :%s/,/\r/ Block Insert Ctrl-V for Visual Mode capitol I for insert at beginning or $ capitol A for append to end. Changes take effect when you hit Esc From http://vim.wikia.com/wiki/Power_of_g :2,8co15 "copy lines 2 through 8 after line 15 :4,15t$ "copy lines 4 through 15 to end of document (t == co) :-t$ "copy previous line to end of document :m0 "move current line to line 0 (i.e. the top of the document) :.,+3m$-1 "current line through current+3 are moved to the lastLine-1 (i.e. next to last) Note: these are samples of my vim notes. 
Google Guava has some nifty utils. http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/io/Files.html
&gt;It's trivial just to check for null values when you expect them I think the problem lies in the interpretation of exactly how the users or your API know when they can expect a null? Whatever the answer, it cannot be enforced. &gt; Debugging NPE's is practically 0-effort coding. It may be so when the null reference is set in the same context where the NPE happened. Otherwise, you will have to do some detective work to find it out. Even if it is trivial, it is not trivial if the problem is found in code in production, simply because it had not failed during many hours, days or even moths, until the day in which that particular line was hit. &gt; If you have a decent test set you'd probably catch most of them anyway and testing finds other problems. You said it yourself "if you have". Not every software projects has them. 
How exactly did you try to remove it? That is kind of the only information someone would need to answer your question and you forgot to mention it. If there's an uninstaller, use that. If not, either delete the files where it was unzipped or uninstall it from the Control Panel. If you've tried all those and it still won't install, then something is wrong.
I've tried with RevoPro Uninstaller, iObit uninstaller, JavaRA. When I uninstalled it with the Iobit one I deleted any leftover Java folders on my C:/Program Files. I'll try the Control panel. Wish me good luck!
Leme know how that goes.
I uninstalled with Control Panel. Now I'm going to install it. I'm heading for the x64 offline download. 
Tried to install. This is what comes up: http://imgur.com/awgJTVB If say yes it pops up another time, I say yes again it closes. If I press no it closes.
Try cleaning the registry with ccleaner or something.
I will give it a try.
Hello, I must first say thank you very much for your assistance. I just wanted to confirm with you the following: 1. Java starts and attempts to load the applet JAR file - Correct 2. Either the proxy or the server responds with multiple WWW-Authenticate headers (at least Negotiate and NTLM) ( Yes this is correct, with the client console enabled we now see a additional line in the java console ONLY with java 1.7.0.X network: looking up ( the ip address of one of our primary doman controller) mode=proxy direct 3. Java tries Negotiate as per the internal ordering mentioned in your second link: "GSS/SPNEGO -&gt; Digest -&gt; NTLM -&gt; Basic" Yes this is correct I belive 4. Negotiate fails because Applet loader doesn't support it correctly. The domain controller gets an invalid authentication request. ( This is correct) Java tries NTLM. (I'm assuming Digest wasn't included in the WWW-Authenticate headers) ( I will need to wireshark the traffic or user fiddlier to confirm but this is what i suspect) NTLM succeeds. Wow.. I will pass this along on Monday. We have tested just about everything that can be done at the deskside level ( playing with the network.bypass.proxy ) settings in deployment.config I think you guys have it nailed down. I'm not a java programmer but this does appear to make the most sense. I will post Monday with updates. THANK YOU for your assistance! 
This may be a stop gap ? http://ntlmaps.sourceforge.net/
simply amazing........
Probably all sorts of new bugs being introduced by the rampant, frenzied security patches they have to put it every couple of weeks due to all the 0-days.
Hey, try over in /r/javahelp
So the algorithm to calculating prime factors for a given number would be something like (in java-ish pseudocode): while (number &gt; 1) { if (number % divisor == 0) { number = number / divisor; // add divisor to the prime factors here } else { divisor = (next prime number); } } With this, the value of divisor when the loop finishes would be your largest prime factor for number. Note: I tried this without having a prime number list (just doing divisor++ each time) and it was still really fast, but I'm pretty sure having a way to skip to the next prime would be way faster/more efficient.
Neither of these are storage/retrieval, but two fun projects I did when learning java were a little minesweeper clone and a network chat (or file transfer) application
I thought it was storage/retrieval because the program takes the contacts and stores them to a text file that saves when the program is closed. It is then retrieved when opened again. Anyway, those sound like fun, but I guess it's supposed to be more of a database style of project. Thank you!
These are good ideas, but seem somewhat hard for a intermediate programmer. I just need something that utilizes most data structures and things like arrays, as well as loops. Some sort of database would work well for this, and I have already made an address book. I just don't know any other types of database that are similar and would work.
Just had an idea - some sort of program that keeps track of my financials (money, spending, savings, etc.). I think this would work but it might not be challenging enough.
[My high school science professor has a wonderfully simple website with some of the basics.](http://www.intuitor.com/student/AP_CompSci_I_Syl.php) Also see the "...for Dummies" series. 
While only in a few intro classes atm, I find that I'm using the latter option now, where as at the beginning of the year I would keep it in the same line. Obviously there's no difference, I just like the white space.
I prefer the new line approach. Its more legible, and the braces can be matched faster, although it does use a few extra lines (same with loops and functions). When I have seen code with the inline brace, the main reason behind it is to fit more code on screen.
I would add all the ducks in your grid/array at run time, and simply hide() and show() each in a separate thread (not real methods, you would need to implement them). Then, when the user clicks, the click coordinate is checked to see which duck "rectangle" has been clicked, and if that duck isShown(). hide() and show() would be simple. You would setVisible(false) and then (on the frame/panel holding all the ducks) call validate() to update the components. 
Most professional Java devs put the brace at the end of the line. This is based on coding conventions published by Sun when Java was first released: http://www.oracle.com/technetwork/java/codeconventions-150003.pdf EDIT: Also, this choice DOES matter when you are collaborating with others. 
The [Java coding conventions](http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-142311.html#431) indicate the first form. The [Microsoft coding conventions](http://msdn.microsoft.com/en-us/library/vstudio/ff926074.aspx) indicate the second form. Of all the Java code I've seen in my career, I've pretty much only seen the inline opening bracket. All the C# code I've seen in my career, I've pretty much only seen the newline opening bracket. By now, I've come to associate the first form with Java and second form with C#. I personally prefer putting the opening bracket at the end of line because it makes my code look more compact. I'm less disturbed by the bracket placement than I am with inconsistency. If the source code started with one style, stick with that one style!
Thank you so much, I will definitely do that, I have however no experience with threading. I can look into it and I was wondering if you have a link to a lesson on how to thread. I however don't understand even with your example where the time comes into play, or rather how I would go about having the ducks in the array only show for a limited period of time even using the hide() and show() methods
After contemplation, that would be horribly inefficient. What I would do is have a single thread (AKA a timer) call a function that show()s a random duck, and have the show() method in each duck contain a timer that automatically hide()s after a random number of seconds. Google java swing timers for a simple tutorial. Edit: I'll demonstrate. I'm on a phone so this will be shittily formatted. Timer t = new Timer(milliseconds, new ActionListener() { public void actionPerformed(ActionEvent e) { hide(); }}); t.setRepeats(false); t.start(); 
Haha thank you very much 
Feel free to use my [enum class](http://www.mediafire.com/view/?9w0f7ro8o75yiw3) for my game [Flack](http://www.desura.com/games/flack). I found it online somewhere online, it was very useful for me. Edit: To play/stop your audio, just call it anytime/anywhere: Music.CREEP.play();
I used to use it just for method declarations so that it's easier to read both the signature and the first line.
Same line. Our coding conventions were taken from the Sun document...as a matter of fact, they *are* the Sun document, with an addendum outlining where we deviate from the document.
New line, for several reasons: * it's far easier to read that way * it encourages short methods As far as forcing people to code this way, a simple run of jalopy or Eclipse's quickfix takes care of the differences.
New line
A new line costs nothing, legibility is priceless.
New line for methods and classes. Same line for conditions/loops.
I've always put it on a new line for class and method definitions and at the end of the line for control flow statements (switch, if, while, for, etc).
Frankly I've only ever seen the newline style used in Java by C/C++/C# devs that switched to Java and are either not aware of Java's native style or are unwilling to adapt. Pretty much every project I've worked on follows the Sun guidelines, both FLOSS as well as commercial projects.
I would seriously suggest using something like [Max MSP](http://cycling74.com/products/max/). I just create a soundscape in Max and connected it to my Java game (made with Slick2D). It is extremely easy to connect the two things. 
Sources are on [GitHub](https://github.com/Athou/commafeed). I posted yesterday on [/r/technology](http://www.reddit.com/r/technology/comments/1c9yys/when_google_announced_reader_shutdown_i_started/) and I'd love to have some feedback from you guys too.
Just tried this out, I like it a lot. Pretty fast and the UI is as close as you can get.
Looks like your managers didn't like the idea of asking the Internet to save you a bunch of bottom line cash. ;-)
Nice start.
Generally, if you're being paid or collaborating with others, always use sun-style, and learn to read it. In special cases, use your judgement. Except if you consider one non-pathological style to be inherently more legible than another non-pathological style, in which case you're not mature enough to make these kinds of decisions.
The first way. This preserves precious vertical space. 
The reason is that it's not a line you can step into with the debugger and it wastes vertical space. C# is terribly afflicted with this.
Pretty much all programming discussions belong there. 
There seem to be a lot of problems with import from google -at least with my set of feeds. Importing by allowing your reader access to my google-account leads to an exception ([...] Incorrect string value: '\xE2\x88\xA9 Pr...' for column 'title') that basically crashes your app (reproducibly happens every time i try) and importing from subscriptions.xml doesn't do anything (i've disabled all script-blocking addons i have in chrome, still nothing). The app itself looks very nice though. I'll play a bit more with it later.
Could you try again please?
license of the code? (especially of the html/js/css stuff)
I like it, I like it a lot
For those not entirely sure _why_ you would use this, the Google Guava library website has a short, eloquent explanation. http://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained 
Well, the article never said, as far as I know, that Optional would solve the problems of NPE. It does question that it would be ideal to have a solution for it in Java and explains why it is a serious problem. It also present approaches from other languages like SML or Ceylon, and talks about the introduction of Optional in Java and how it can be used to express the potential absence of a value in "specific" scenarios. I do argue that in my opinion that is better, but I also mention the caveat you discuss and present several counterarguments from detractors. In fact I provided a link to the Java Mailing list where the expert group has been discussing this matter thoroughly with the community. It is quite evident that some people are in favor and some against. I present my opinion and hope that the article contains enough info for others to make their own. Regarding having to check for null Optional objects, unless you are writing a three-value logic algorithm, it does not make sense to do so, like we typically don't null check references to collections or arrays. We stick to the good practice that states we should never get nulls where collections are expected. I do see the point that you stress though, there is simply no way to get rid of NPE in Java and so we can question the value of optional if we expect to use it for that matter. I would make sure the article makes this more evident. 
ok, just tried again and import via google-account access worked like a charm :)
This guy build a pretty good 2d game engine that would probably accomplish what you want. http://carlfx.wordpress.com/2012/04/09/javafx-2-gametutorial-part-2/
Oh, music player is a nice idea, maybe you could just build the catalog part (would just need a little id3 library to read the mp3 tags).
Sorry, I meant *my* suggestions weren't storage/retrieval. Your address book certainly is.
That's a good idea too, and you can always make it more complex if you need to (eg, adding stock history)
What's up with the motto? :)
Thanks appreciate the help.
I cleaned it with CCleaner, still the same problem (check the img on the comments)
Here is a good starting point for the color. http://stackoverflow.com/questions/13061122/getting-rgb-value-from-under-mouse-cursor And for the basics of building an application window, I assume me mean a JFrame. http://docs.oracle.com/javase/tutorial/uiswing/components/frame.html
Good job - It would be awesome if you could add "login with my google account" edit: too hot, I can't grammar
Weird. Afraid I can't help you then. You may want to try and find out what registry entries Java makes and manually remove them though. Always back up your registry first.
Then you don't make system calls in the critical path broski
 import java.awt.Color; import java.awt.MouseInfo; import java.awt.Point; import java.awt.PointerInfo; import java.awt.Robot; public class Test { public static void main(String[] args) throws Exception { PointerInfo pointer; pointer = MouseInfo.getPointerInfo(); Point coord = pointer.getLocation(); Robot robot = new Robot(); robot.delay(2000); while(true) { coord = MouseInfo.getPointerInfo().getLocation(); Color color = robot.getPixelColor((int)coord.getX(), (int) coord.getY()); System.out.println("Red = " + color.getRed()); System.out.println("Green = " + color.getGreen()); System.out.println("Blue = " + color.getBlue()); }}} heres what i have so far. how do i make it give me the actual name of the color and how would i make it run this in a Jframe right now its only giving me the color "values" 
That is a lot of fuss, and I don't wanna mess with so deep shit. (These are moments when you must have a Mac...)
Thanks! that helped alot. just posted my code that i have so far in the comments. any chance you could take a look at it for me? still confused by how to have it open in a Jframe 
There's 2 reasons to use the first form. First, turns out people can only digest a certain amount of vertical code space. It's how human's work (in general). Anyone basically recommending second form, which is a statistically BAD PRACTICE, is yet another example of developers doubling down on bad choices. Nobody has popularized widely available statistical proof it's bad, so it's basically a nuh-uh argument. Second, having to switch styles/languages has a mental cost. This style decision matters in javascript due to semicolon insertion (you always use first form) and I see no reason to go with the second form in any c-like language, so I stay uniform.
OP's parents we're not very supportive.
Thankyou thankyou thankyou!!!! 
There's several concepts in the above code that may be somewhat useful to commit to memory, simply because they can be fairly convenient to know. JFrame is very simple to use and master, and threading (The runnable ColorLoop) are very useful. You'll also notice a few bad coding practices, such as not properly disposing of my variables once used, this will increase memory use unnecessarily. 
Mods should put this as a header.
I'm not sure yet, why ?
It looks good, but most of my feeds are not updating for some reason.
I would recommend using https://github.com/finnkuusisto/TinySound. I am using it for one of my projects and it is very simple. It may not support all the formats that other libraries do, but it does support Ogg (with only one or two other jars needed).
Because if it's open source, you should put it on the project page and all the source. You should do that if it's not open source either. Code on github is not automatically open source. 
"Let slip the dogs of bracket wars". It's one of those topics which almost starts a religious war. Personally I prefer the second approach but as so many have already said consistency is generally more important. My previous jobs used the second style the current one uses the former. Although I follow the end-of-line style I find I often put a blank line after the bracket to allow space between the condition and the first line of the block as I find it harder to read when the code is all compacted.
The whole GUI/menu system is in "framework\info\gridworld\gui" if I remember correctly, it was a year ago. They made the code easy to read, you should be able to get an idea of what they are doing by looking at it.
Thanks, subscribed to that to help assist in the future.
Honestly get rid of the part where it says "Because fuck you" if you want it to be taken seriously.
the point is that everything you actually use an operating system for, generally relinquishes control to the scheduler... why not simply run code in ring zero?
Thanks for the link, I'll check this out. Keep in mind CommaFeed was created from scratch two weeks ago and I only work on it in my spare time so it's bound to have a bug or two :D edit: after further investigation, it seems the feed is correctly recognized, it's just that it was at the bottom of the queue. I think I need to force a refresh when someone subscribes to a feed.
I concur, i used something like it as well, its all handled in something like a grid pane and it has some dependencies but you should be able to instantiate one and throw it in your jframe Also this is a crazy hunch/coincidence, but are you zane from 3MZ?
Well I live in Ohio and don't know what 3MZ means so probably not
never mind then
JavaFX comes with a new sound (media) API, including low latency sound. [AudioClip](http://docs.oracle.com/javafx/2/api/javafx/scene/media/AudioClip.html)
It's about the right tool for the job when properly considering the requirements, constraints and system qualities you've been given to work with.
I am sorry, but java applets makes me kinda nauseous. Cool idea though.
Thanks, just wondering, why do they make you nauseous? :o
Hehe. Probably all the bad memories from back in the days when everything was java applets. They also lack the smooth feeling that HTML5 solutions often give you since you have to accept a bunch of warning messages before they start up etc.
Horses for courses. The Java, the JVM and the plethora of frameworks/libraries are no silver bullet, and there is generally a lot of upfront cost associated. However, as a platform it can be highly performant and has a very mature tool chain (I'm looking at you, Ruby/Rails), which may be important. For something small scale, if I knew I had a Java dependency in a project, I would generally start with trying to [Play! Framework](http://www.playframework.com/), which maps more closely to the development cycle for PHP.
Wordpress is great... I guess... However, if you thought the security issues in the Java Applet plugin were bad... I wish I could communicate the number of hacked Wordpress sites I've worked on...
I'd completely agree. Sadly, I'm really behind on HTML5 due to school, but I may start working with it this summer.
Hey I just wanted to thank you for your help, I finished my program way earlier than I thought, I still have a week to add some cool stuff like timers or even difficulty settings, though you may not care I will be sure to post the program here in a week when I've added my little extra stuff
~~Apparently, the JRE 7 Update 17 has a bug. I installed JRE 7 and it's perfect. **So DO NOT install JRE 7 u17!**~~ **Edit:** I didn't have an installation problem, but it didn't work... Maybe I should have restarted my PC. Anyway I'm installing it again and I reboot. I will deliver the aftermath later. 
That may be my favorite tagline ever.
A lot of the HTML5 stuff is pretty fun to work with as well, once you start to get a hang of it :)
For classes and methods, I put the braces on the next line. For control flow statements (and often anonymous inner classes) I put them on the same line.
I created a [simple IntelliJ add-in](http://i.imgur.com/HuJwn0M.png) to display decompiled sources when the original source is not available. Provides a more convenient way to use the decompiler than the command line, at least until I can write a standalone UI. I'll clean it up and upload it soon so people can help me test things out. Anyone happen to know of any projects that have used the IntelliJ application shell to host a custom application? It's open source and could save a lot of work.
For the rare occasion when I need a breakpoint after a line where there is none I'll use this: System.out.println("break"); //FIXME The fixme is so that I remember to remove it before committing. By default, Eclipse can autocomplete sysout to System.out.println(); but you can even define your own template so that typing for example nop[ctrl + space] gets you the above line. Some tips you didn't ask for: - "Simple" is a terrible class name - a utility class that is included in most of your files seems like a code smell. Late edit: I was just trying advocate creating multiple utility classes (like MathUtils, ArrayUtils, etc.) with fewer methods and therefore fewer places where the class is needed.
&gt;a utility class that is included in most of your files seems like a code smell Out of curiosity, what makes you say that? The point of a utility class is to centralize code that is used often as opposed to copy/pasting it everywhere. As such, wouldn't a utility that is used often just mean that it was something that *should* be defined as a utility? Unless by include he means he re-implements it as a sub class in most of his files, which would of course be bad.
The name Simple and the fact that it's being included everywhere lead me to believe that the utility class contains methods that are not related to each other in any way. http://en.wikipedia.org/wiki/God_object
The statement seems overly general, but in this specific case, making all your classes depend on a "I want to debug"-class isn't optimal. It hinders modularisation. If you find that you can reuse "MyClass" in some other project you're going to be happy - until you realise that MyClass has unnecessary dependencies on stuff you *don't* need in the other project. Try and avoid "utility classes" and the common pattern to implement them - Singleton. It simply isn't worth it (most of the time) from a modular perspective.
A stateless class full of random static utility methods != a God object. Google Guava for example is full of static utility classes. God objects are more like if you pass around a class called MyApplication that has a reference to every single component of the application. They break encapsulation and make it difficult to test any single component in isolation.
Technically speaking, this is an example of the [Strategy Pattern](http://en.wikipedia.org/wiki/Strategy_pattern). The strategy pattern makes use of interfaces. The class using the strategy is complete in and of itself and the concrete class implementing the interface is complete in and of itself, with any sharing state made explicit through the method parameters. This has the benefit of allowing reuse of strategies between different concrete classes, like `Runnable` or `Comparable`. The [Template Method Pattern](http://en.wikipedia.org/wiki/Template_method_pattern) makes use of an abstract base classes. It's called the template pattern because the abstract base class is a template for a concrete class, with abstract methods specifying the blanks for the concrete class to fill out. The concrete class and the abstract base class are inextricably linked, and with single inheritance, the extensions cannot be reused.
&gt;In object-oriented programming, a god object is an object that knows too much or does too much. I think unrelated methods in the same object is "doing too much". I haven't used Guava that much but quickly looking through the javadoc gives the impression that the methods are grouped to separate classes pretty logically and are by no means random. Edit: If you disagree, please tell me why I'm wrong. I don't want to continue being wrong. 
Assertions. http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html
I second the **assert true;** approach. I've never actually done this, but couldn't you also just put a semi-colon alone with a comment? ; // TODO a break point here is handy
I think the methods in this case are grouped either by "nowhere else to put them" or "everything in one place". These are very probably methods that don't do very much but are reused frequently enough that it would be worse to copy them all over the place. Like an Util class, if you will.
Maybe. We don't know. &gt;Like an Util class, if you will. I know what a utility class is. I was just trying advocate creating multiple utility classes with less methods, like MathUtils, ArrayUtils, etc.
Maybe, but what is the alternative to using utility classes? It is much easier to refactor a utility than it is to refactor an implementation that is copied n times all over your code. As for adding a class dependency specifically for debugging? yeah I agree that it *could* become a code smell. So in the general case, I think the idea is right, however as a debugging mechanism, it is probably not optimal. Either Asserts or good use of test cases would be a better production code solution
Well if you have several general yet unrelated utility functions, you kind of have an unsolvable structure issue. Either you group them and have a class, say "GenericUtils" that has only loosely related functionality, or you give each subset its own class, and end up with an overpopulated utils package with a bunch of one-off "[Specific]Utils" classes. However, this isn't really an example of a 'god object' since generally by definition a utility should be stateless. If you make your utils stateful, then you definitely could go down the 'god object' pitfall (but I think this is quite rare). 
A semi-colon alone is not an executable line and therefore would not solve the issue. I have always used int variable=0; and deleted the line after I was done debugging, but I think the assert is an even better solution
Yeah, both a class with lots of unrelated methods and multiple single method classes are non-optimal solutions and choosing between them can just be a matter of taste. I've treated "class with too much methods" as an example of the god object anti pattern. Guess I was wrong.
Because you already returned it!
Either use assert, or else add a Log line that you can break on. If you need breakpoints in the method, having logging there will almost certainly help in the situations that you *can't* debug the program - i.e. when it's running live...
&gt; Maybe, but what is the alternative to using utility classes? Depends on the utility they provide. Usually, some kind of service lookup is better (OSGi, REST) but often that means that your code will have to support the case when the utility is not around. Or maybe you can inject the utility object (OSGi, most Java web frameworks?). In fact, you want to be injected with an interface, an abstraction of the "utility" service (or lookup such an interface). When I see "utility class" I can't help but read "class I can't properly name because it's doing too much". What service does it provide to its users and why does it have so many users? Is it possible that it provides too many services and hence should be split up so that all those users can be decoupled from it? There are a few cases when "utility classes" that almost all other classes use are warranted. The cases I can come up with now are Logging, Logging and Logging. And here you still want to tie your code to some interface, not to the actual log object.
Nice post, thanks! I am not as familiar with REST as I should be, but I will do some more research on this later. Are you saying that singleton /static utils in general is a bad idiom, or that is becomes a bad idiom when its users grow to the point where they encompass most of the system? What about a set of utility functions that are related and used specifically by just one package? Sadly, I am the only developer where I work, so I don't get a lot of chances at work to get taught new and better design paradigms =( 
Put them in the ear file's lib directory. Alternatively you can place them in the war's WEB-INF/lib directory if you want to limit the scope to just the WAR. I would recommend using maven to handle dependency management and the creation of your ear. http://maven.apache.org/plugins/maven-ear-plugin/modules.html
From a performance point of view, its a good thing. Though that's negligible in the grand scheme of things. When you try to put breakpoints on nonexistent lines, that gets really frustrating...
Why do people not use SO to ask questions?
Make sure the OS is allowing port 80 to be opened, if not try 8080. And here's a debugging tool that is pretty damn handy http://www.wireshark.org/ Edit: without seeing your code it's pretty hard to know what could be wrong. There are plenty of examples on the web of socket communications using Java.
Agreed, if you're using assertions anyway then it's a useful added side effect. I'm just thinking of the times I've tried to attach breakpoints to lines that have been compiled out and get frustrated at the debugger not firing properly. The main thing I was thinking was - as I said elsewhere - if it's code that you're likely to want/need to debug, it's probably a good idea to have logging statements there as well, and they equally have the same side effect of being good places to add breakpoints. Same idea in the end really...
So it's just an intensive operation?
Use a logger
Yes, and it doesn't really have anything to do with Java; this is a networking question. The two most straightforward solutions that satisfy your constraints: 1. Have the PC behind the NAT initiate the connection. 2. Have the device doing the NAT (presumably your router) forward connections on port 80 to the PC behind the NAT.
I wanted to avoid manual port forwarding from the user, i guess that's the main problem.
I understood that. I was merely trying to clarify that I correctly understood the answer that I found on stackoverflow. Why is this not the place for curiosity about the language? This is its subreddit after all...
Maybe they don't like the philosophy of SO.
I like to do a hashcode on a string literal for that, e.g. "".hashcode();
Despite all the hatred the language receives, PHP has its place, for the reasons the author mentions, and Wordpress is an excellent tool, if you need to launch a website fast. I wouldn't tout it as a quality PHP anymore though: it was mostly built before OOP support in PHP, and considering its size, it definitely suffers from that.
While I am not a mod or an expert here, I would say that code questions and (novice code, more so) are directed to /r/javahelp/ Here it is more about general java observations and questions.
I second this.
You can't have an HTTP server behind the NAT respond on port 80 unless you have port forwarding turned on, as others have told you. However, you can use pure TCP, as long as the computer inside the NAT initiates the connection. TCP is a bi-directional protocol, so once you connect from inside the NAT, you can receive data from the computer on the outside. The computer on the outside accepts the connection and sends the data to the computer inside.
UPnP?
I guess I don't understand the problem either. When I set a breakpoint in Eclipse, execution halts before executing the line I set the breakpoint on. I don't need to add a dummy line in order to break where I need to.
Put the break point on the actual line of real code you want to inspect. The thread is halted before the line is executed anyway. No extra coding is required.
I also think that you will find if you output to and then minimize the console, it will run faster because it doesn't have to redraw the terminal every time, just when you un-minimize it again.
Same. I have literally never had this problem in over 7 years of writing Java. NetBeans (and everything else too, I'm sure) will break on method entry/exit too if I want. Bonus: NetBeans has conditional breakpoints, which are awesome beyond words. I just found that beauty recently.
Also, when I click the "guess number" button it the "too high" or "too low" the only way the label shows up is if i adjust the window. does anyone know why this is happening?
You could use something like log4j for that task
Eclipse has conditional breakpoints too
Effective Java is the only book you need. Read it. Then read it again. :)
This is now the only problem I'm having with the program. If someone could tell me how to make the buttons appear without adjust the size of the window. Any help would be appreciated, thanks so much!
the answer as given is true; the finally block reassigns the reference after the value of the reference has alreadys been copied to the stack. But in the interest of science, and as an example of awful awful code, I present to you public boolean isPessimistic() { try { return true; } finally { return false; } }
1) Have your class implement ActionListener 2) The method you will implement will look like this: /** * All button clicks call this method */ public void actionPerformed(ActionEvent event) { Object sourceObject = event.getSource(); // Did the user click the Guess Button? if (sourceObject == btnGuess) { // Put guess code here // Did the user click the play again button? } else if (sourceObject == btnPlay) { // put reset game code here } Make sense?
&gt; \2. Have the device doing the NAT (presumably your router) forward connections on port 80 (or any other port) to the PC behind the NAT. But #1 is still the right answer. The computer behind the firewall should be initiating the connections.
Works great, thanks so much! The only problem I'm having now is when I click the buttons the labels and play again button won't appear unless I adjust the size of the window. Do you know what might be the cause of this?
I have to deal with this at work all the time. The solution is to have the PC behind the NAT initiate the connection. You can still use HTTP, you just have to get kind of clever with it: - PC behind the NAT does an HTTP GET to the PC outside the NAT - The HTTP GET handler waits for the other PC to decide it wants to send something. If it does, that "something" is returned via the GET request - If nothing happens after 30 seconds, the GET handler returns a keepalive message that tells the other PC "I'm here, I just have nothing to say, bro" - The PC behind the NAT reissues the GET request ad nauseum. If *both* PCs are NATed, you'll need to use a third, un-NATed server to shuttle data around unless you want to get into the ugly world of STUN / other methods of punching holes in the NAT.
It's a networking question, but still a fair one to ask since we as developers have to find ways around it all the time. For example, at my work it can take *months* to convince Security to set up something on the DMZ so we can allow inbound connections... or I can just find clever workarounds. I actually have shit that communicates over SMTP. It's not elegant, but it's a whole lot more efficient than dealing with bureaucracy.
Sorry if I'm misinterpreting. If by design interface, you mean a drag and drop component editor, eclipse doesn't have one. There might be a Swing add on out there somewhere, though I've never used one. 
The easiest and simplest way to save data in Java is probably via the Properties class. It's basically a hashmap of "string/value pairs", if your data model is simple enough you can easily use one of these. An advantage is that you can edit the file in a text editor. There are many examples online (google for: java save properties file). Once things are more complicated and you want to save deep objects that contain other objects and lists of objects then you need to look into "serialisation". There are many ways to do this but they all break down to having a bunch of objects representing the data (could be your own actual in-game classes) then passing a top-level object into a method they provide which writes it to disk. Conversely you get a method to load that file back. This is very powerful but it has some complexities and problems that need to be considered. 
Adding maven to an existing project can sometimes be painful, particularly if it's not your own project. If I were OP I wouldn't mess with it here! ;-) Best thing to do is to figure out how it's built and drop the libraries into the correct folder. The last thing you want to do is to have to manually drop libraries in for every update. If the build is in Ant the source dir could be anywhere. 
And because strings are immutable.
I don't think this article explains it very well TBH. It boils down to this: behind the scenes java does some magic with strings. If you take a very long string and pull multiple substrings out of it then you still only have the original in memory, with the substrings being references to it. This is why strings are immutable in java. When you change the substring you can't change the original long string, so the VM makes a copy of it on the fly. As long as there is a single reference to a substring from the long string then the long string will remain in RAM. Why? Because it's very good performance-wise. Sub-string calls become much faster. It will also save a bit of RAM in many situations. There is one problem with this that can come up. If you take a very very long string (e.g. from reading a large xml file) and parse it down into substrings then you will still have the massive source string in memory because somewhere in your SAX parser you took the attr value it had and put it into a field in your data model. Load a few 200 meg xml files (oh yes, they exist) and you soon run out of RAM. The short of it is that you should call intern() on your strings when parsing data out of very very large files. Even when using things like SAX because you don't know if the string it gives you is already interned, I was surprised to find it wasn't when I first hit this problem. The other use for it is when you have a tight loop with frequent string comparisons across the same set of strings. If you meticulously intern them first the comparison is essentially == instead of .equals() which is massively faster, more so the longer the strings are. However, don't use == yourself, just use equals() as normal because the first thing it does is check for ==.
[Window Builder](http://www.eclipse.org/windowbuilder) is the GUI design plugin that can come with eclipse. Depending on the [package of Eclipse](http://www.eclipse.org/downloads/compare.php) you have, you may or may not already have it installed. Otherwise, you can install it with [these instructions](http://www.eclipse.org/windowbuilder/download.php). To access the builder once installed, you will need to first install the GUI framework toolkit for WB. You can access it from File -&gt; New -&gt; Other -&gt; Window Builder -&gt; * User Interface. There is also a button next to the 'new' drop down button in the toolbar that gives access to these same options. The interface is [described here](https://developers.google.com/java-dev-tools/wbpro/userinterface/).
&gt; it can't be a god object for the simple reason that it isn't an object Thank you, now I see the the error of my ways. 
I think the best thing you could do is learn what Object Oriented Programming ("OOP") is (Java is an Object Oriented Programming Language). You would be better off representing a lot of things using Objects. Also, from your monolithic program, seems you are at an entry level in Java. If you don't understand what Classes and Objects are, that's the first thing to look into learning. Let's take the inventory for example. You seem to have code for it all over the place. If you were to create a new Class called Inventory, then you could implement Inventory specific functions on it. Like: * add(Item item) * remove(Item item) * put(Item item, int inventorySlot) * List&lt;Item&gt; list() * int getNumberOfEmptySlots() * int getTotalSlots() * check(Item item) * empty() and so on. This would help a lot even if you keep your current 2 dimensional array as its data structure. Up to you to decide how you want your game to work, but it is a good idea to define what rules you are going to be following: Does every item only use a single inventory slot? Does it matter which slot they are stored in? Can your inventory room be expanded? Is it unlimited? Can you stack items of the same type in an inventory slot? If so, how many? Having clear rules will allow you to have consistent, predictable behaviors throughout your game and its implementation. Item could be a super class that you would use as the base for anything that is an item. In this class you would put any generic "item" properties and methods. As an example, this class could have properties like name, description, flavorText, size (to define how many inventory slots it would occupy) and so on, and also have a list of methods to interact with them (inspect, smell, describe, lick, etc.). Then you could either just use it as is when you create your items in the game, or you could *extend* this Item class to create more specialized items (like Key). This means experimenting with Inheritance in Java (but mostly disregard inheritance til you work on generic Items first). Note that depending on your design anything that I've written here may change. A good OOP practice is to actually encapsulate attributes in your classes. So you should be using methods to access properties in them, and declare any attributes as private, so only those methods will be able to read or change those values. So this means learning what access modifiers are for. Like on your inventory you would likely keep its storage private and only let the rest of your program access it via its methods. Anyway, I don't want to make this a dreadfully long post, so basically look at learning OOP. Feel free to ask if what I wrote sounds too confusing, but basically OOP will help you create better abstractions and give you a more logical perspective on how to design your game. Start by taking a shot at redesigning your inventory and items and I'd love to see how you are doing after (or during) that process.
Basically you are writing p2p software. Look up [Freepastry](http://www.freepastry.org/), should solve all of your problems as it'll try various things to make sure there is a connection. If you need a proxy (e.g. both users are firewalled) then it ought to do it automatically for you via a third user who is not firewalled. As others have said: this is a networking problem that you just have to deal with when connecting directly between clients. Never tried this library myself, was going to recommend JXTA but it's apparently now a dead project. 
Hmm, there is quite a big difference between learning java and learning how to engineer software. Which is it you're looking to do? There are lots of free courses on [coursera](https://www.coursera.org/) and [exd](https://www.edx.org/) to aid your learning, but I believe if you wish to develop software, download Netbeans IDE and work through the [tutorials](https://netbeans.org/kb/).
I've written my own logging classes before, this was just something temporary before I replaced it with a better solution 
Thank you :-) 
Web-based? So, Glass doesn't work at all when out of cell range? Lovely.
/r/javahelp maybe ? [edit] I mean that you will have more meaningful answer in that subreddit
I would like to learn both, eventually. But for the moment I would like to learn java then learn how to engineer software. I use the Eciplise IDE, is there a reason why Netbeans would be better? Thanks!
Don't forget too, you can always tail -f the log file and have the same kind of console output without slowing the application. Basically, the problem with these consoles is that they receive a string and then they draw the characters before receiving the next string. If they were to accept the characters into a buffer, my understanding is that the System.out operations would be considerably faster. The way to simulate that is to tail -f a log file. Now, if you're printing a lot, the tail will still finish after the application is done, but if you're using it to debug there shouldn't be a problem.
Of course. That's usually better. However, these are probably functions that don't really have a grouping. In what group would you put a function that does nothing, for example?
TRANSACTION_REPEATABLE_READ is generally faster in highly concurrent environments, so most modern databases default to it, but it is vulnerable to write skew anomalies. TRANSACTION_SERIALIZABLE is generally slower because the innodb implementation must lock everything you read in each transaction, but it provides true isolation: it's the only isolation level that allows you to code each transaction as if it does not overlap with other transactions.
Is it worth using it if you're already using `FOR UPDATE`/`LOCK IN SHARE MODE`?
Fixed, thanks.
Um, not really, it's each to their own, it's just that when I did my software engineering degree I used Netbeans so that's what I'm familiar with. I'm sure there are some good Eclipse tutorials out there also. 
Thats disappointing; and as a developer who would also love the opportunity to work with Glass, I can only imagine the frustration of having taken considerable time to make your case, and still been refused.
nothing stops you from using whitespace after the "Egyptian braces"
holy hell, who the hell contrives horrible examples like that one? Seriously, the problem with that code isn't the brackets, it's the vertical aligning of the parameters confusing both the passed in and the locally declared ones. That's just crappy code style -- no amount of bracket uniformity is going to fix that.
yep, if you want the whitespace, put a line in there - no reason to "force" the brace down just to have whitespace.
Egyptian all the way baby! if _{ }_| (Even though I'm currently using a code formatter at work where it changes it all to be annoyingly different -- in more ways than just the brace location change)
On a theoretical level, there is no difference: a switch statement can be replaced by a series of if statements. On a practical level, there are differences in what a switch statement accepts (historically, integers, now a bit more), and in how it is implemented (jump tables). But now that the syntax is more accepting, and the compilers are smarter, this is more a matter of taste, code legibility and maintainability. The practical differences that remain only need to be explored when a performance measure shows there is a problem at that precise point.
If conditionals may perform any check that yields a boolean, switch-case constructions only allow certain type of things, namely Integers (both primitive and object), Enumerations and Strings. I don't know if there are specific optimizations with switchcase versus what a if-elseif, but switchcase is a bit more readable, even if you have to `break;` before ending the case unless you want it to run all lower cases.
Or some sort of asynchronous printer. Push all of your logs onto a list, and then have another thread pop from the list and print to stdout.
The thing I find most difficult with regards to Swing/GWT/Android development is the "Layout". It looks like you have not put any effort in to the layout and framing of your app (which is understandable) and you need to. Read this: http://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html I am constantly amazed at how difficult it is for me to get layouts right. 
This article has nothing to do with Java. But, speaking of Java, there is an elegant solution to this type of problem. Java has built-in support for interruptible tasks. The `InterruptedException` is a part of that system. Brian Goetz wrote [a fantastic article](http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?iframe=true&amp;width=80%&amp;height=80%) about why you shouldn't swallow `InterruptedException` and the proper way to write cancelable tasks in Java.
Yes, explicitly calling super() is boilerplate code and it would be called implicitly anyway. I have the call in there for two reasons. The main reason is the one you have just stated. It is mostly for educational purposes. Explicitly putting the call in the code makes it clearer what is happening "under the bonnet". The second reason is more pragmatic. Eclipse puts the call there for me. So it would be more work to remove it than to keep it there.
I didn't have a layout because I had no idea how to do it. That web site is very helpful, thank you!
Case statements are great if you a looking for like types (eg all ints, all strings, all yourObjects, etc). A case statement will prevent you from having a case that check the same thing: String monthString; switch (month) { case 1: monthString = "January"; break; case 1: monthString = "February"; break; } This will give you an error. You can also pass an enumerated type into a case statement. This makes testing a case much easier as you can loop through an enumerated type in your test. Generally, if I have more than two else if statements I take a step back and think about what I'm doing.
I had the displeasure of working with Spring integration a year or so ago. I found it to be bloated and overly complicated and in places lacking in functionality, and as always with Spring I spent most of my time writing reams and reams of XML! **EDIT:** /u/flagrantaroma pointed out my assertion about exception handling is wrong. I don't believe I'm recalling the use case correctly but it was something along these lines which seemed trivial but we couldn't figure out a way around it. If I remember it correctly I'll post an update. ~~A particularly annoying use case which comes to mind is the case of a component throwing an exception. Yes you can register an exception handler but it only gives you access to the throwable in your recovery code, not the message which caused it. Perhaps this has been improved since I last used it, but this annoyed the crap out of me at the time.~~ If you are looking to go down a message passing route which I thoroughly recommend I'd suggest looking at: * [Disruptor](http://lmax-exchange.github.io/disruptor/) * [Jetlang](https://code.google.com/p/jetlang/) * [Akka](http://akka.io/) These solutions are much more robust, with superior error recovery paradigms (particularly akka) and much finer grained control of the threading model if you're aiming for real-time (particularly Disruptor).
This is what i was looking for i guess. So after the first GET requests i can start exchanging POST messages ?
But a framework nevertheless ;)
Not sure but those systems seem a little lower level than Spring Integration, but I could be wrong. A better suggestion for SI alternatives would be Camel and others in the EIP world. You can most definitely get access to the original message, the base Exception class for all messaging exceptions is [MessagingException](http://static.springsource.org/spring-integration/api/org/springframework/integration/MessagingException.html). It has been around since 1.0.0, so I'm guessing you were just missing something. Not to say the SI is the end-all for Messaging solutions in Java-land, but it has worked well for us.
We use Spring Integration extensively to connect to RabbitMQ using AmqpOutboundAdapters. Very useful as it decouples the code from the end point implementation. For all intents and purposes this could be over http and the app would know no different. Also very useful when using channels internally for decoupling internal modules. Testing can be done by hooking into internal channels and is very easy. As for getting error messages this can be done using expression fields. For example if you want to get the error message payload you can add an expression field in the logger interceptor and have it grab the payload. &lt;int:logging-channel-adapter id="error-logging" channel="failed-requests" expression="payload" level="ERROR" /&gt;
Fair point about the exception, don't think I'm recalling the use case correctly but it was something along those lines, I just remember we were scratching our heads as to why what we're trying to do was difficult. If I remember it correctly I'll update the comment. You are correct the alternatives are more low level than other EIP providers. My use cases have tended to be on the lower end of the latency scale and thus I'm comfortable with these kinds of libraries. But in a way I feel working with something higher level like Spring Integration obfuscates the underlying concepts, adding extra conceptual FUD to something which at it's heart is straight forward. Again though, did I mention the XML? Sweet spaghetti monster, the XML! ;) 
I learned a lot from the [SCJP Book](http://www.amazon.com/SCJP-Certified-Programmer-Java-310-065/dp/0071591060/ref=sr_1_1?ie=UTF8&amp;qid=1366213153&amp;sr=8-1&amp;keywords=SCJP); however, that's Java 6 and if I were you I'd aim at 7 now since 6 is quickly becoming "old school." I've also heard a lot of good things about Effective Java mentioned by sproket888.
I don't think it was Java that you installed. It's not supposed to do that. 
Call change.org.
Use Netbeans instead.
I know, it's weird. But I have had java installed over a year now so it's undeniably java. I found fix though so problem solved.
Wow, this is a major release, both in terms of potentially-breaking changes (for the greater good), and in terms of number of security holes fixed! There's also a new JRE variant (for servers). Here's the article on the Oracle blog: https://blogs.oracle.com/java/entry/java_se_7_update_21 Edit: The Server JRE is only available for 64-bits operating systems.
[Days since last known Java 0-day exploit](http://java-0day.com/): 41 ;)
It looks like graphics DRIVER fault. Bug in a driver, or bug in DirectX might have caused that, but definitely not Java. (and yes, installer might have triggered that bug, but it was not installer's fault) I suggest updating your graphics drivers.
Don't be that guy and say you got the solution without posting the actual solution. Think about other people that might stumble on this in the future.
*whoosh!*
Well yeah, I'm kind of embarrassed about this. I should have done it before I posted this, like the first thing when I got this problem. I restarted my computer. 
Thanks!
It doesn't really matter if you use GET or POST. The important concept is that the unNATed PC *always* has to be the HTTP server and the NATed PC *always* has to be the HTTP client, and then have the client repeatedly issue requests to the server.
Like Cling ? I tried looking at it but i don't understand how to implement it in a chat, I don't think I'm good enough to use it.
I've had some good experiences with Akka + Camel. Akka has a very good Java API, although modelling a system with actors might require some effort until the brain adapts to the new paradigm. Camel provides Akka with the actual endpoints, but everything else can be modeled as actors in a well-defined supervisor hierarchy. It's so incredibly simple (assuming you understand actors well), powerful, has a unified API, and the Camel stuff is just lightweight stuff you sprinkle at the endpoints. And there's no XML :)
Have fun failing your class. Asking a raw homework question to r/java with no effort to even start the project is pathetic.
Dude you are a Java Throw Away.
I don't even know where to start, I've had help from tutors for previous projects, but they are unavailable this week. Also, this recursive stuff makes my head hurt. I respect your opinion, however, and I would be inclined to agree with you.
Unfortunately, that's one of the few things that was removed from JSF 2.2 a few days before the spec went final :| Pretty much everything is injectable in JSF now, EXCEPT for converters (which arguably are the one thing that needs injection the most). A big let down...
Thanks, I'll try to check it out!
&gt; I don't even know where to start /r/javahelp if you haven't already posted this there.
It's great book. It looks like it should be written for a child but it gives you seriously good information in an easy to understand way (at least from my point of view). It basically taught me everything I needed for my first two years at university (for the Java programming modules anyway). I hardly went to my second year lectures because I already knew what they were talking about.
I replaced the JSF DI container/managed beans with Spring beans for this very reason. Porting JSF ViewScope to a Spring custom scope was very easy. I also extended Spring's SpringBeanFacesELResolver to allow for replacing JSF string bundles with Spring message sources, for a more 'complete' integration.
In addition to what others have said, switch statements can allow fall through - e.g. if the first case doesn't end with a break, then anything which matches the first case will fall through to the second case. Chances are the developer's missed the break out and this isn't the behaviour they're actually after, but in the occasions where it is the desired outcome then this is something which can't be done with if/else-if/else blocks.
Thanks for the tip, I'll x-post it there
Well that's both unhelpful *and* rude.
JSF 2.2 has started to deprecate its own DI container/managed beans in favor of the Java EE platform mechanisms for that (i.e. CDI). (CDI on its turn was based on Seam 2, which beans where partly inspired on exactly those JSF managed beans)
What?! No way! D: Was any reason given for this?
This site (zeroturnaround.com) is a notorious spammer of forums (like JavaRanch, etc). They put JRebel links as replies in posts with comment like "Hey that worked, here is what I did" and link to an ad site and nothing to do with answer. Slimy and deceptive and makes me never want to try JRebel.
Two steps forward one step back, as always. Hopefully the myfaces and mojarra guys can come up with a fix outside the standard.
I don't know anything about their marketing practices, but I'm never doing java development again without JRebel. And I wish the functionality was incorporated into the JVM.
Yes, Manfred Riem discovered some weirdness between the scoping of the injected artifact and a converter. The problem seemed to be that the converter is implicitly view scoped, but the thing you inject can be any scope. I don't know the finer details though, but there was an announcement about it on the mailing list; http://java.net/projects/javaserverfaces-spec-public/lists/jsr344-experts/archive/2013-03/message/21
That's his name. I was just pointing it out. 
I don't think they actively do that, I believe it's a really crummy ad that was added to the forum thread display.
I would recommend against "no break fall through", you're just asking for trouble.
`switch` statements generally perform better than conditionals (`if/else`), and the compiled code size may be larger or smaller depending on the compiler (but it's usually smaller). Depending on how the case values are distributed, a `switch` may be compiled as either a table switch or a lookup switch. A table switch is the fastest kind--the compiler basically emits a table that maps the case values against code addresses to jump to. Thus, a single lookup operation is all that's required to jump directly to the correct 'case'. However, the jump table must contain all possible values between the lowest and highest case values, so the compiler will only emit a table switch if the case values are clustered closely together. A lookup switch is similar, except that the compiler generates a key-value table that only includes values with `case` sections associated with them (unlike a table switch, which also includes all the values in between). This saves space, but it means you can't do a direct lookup--you have to do a binary search to find the matching key (if one exists). Jumping to the correct `case` label in a table switch is a `O(1)`, constant-time operation. For a lookup switch, it's a `O(log n)` operation. Assuming you decided to go with `if/else` instead of a `switch`, you could achieve equivalent performance to a lookup switch if you structure your `if/else` statements optimally (though this may lead to very deep nesting). A table switch will almost always be faster (except perhaps if you have only one `case`).
You may be right, it shows up in almost every thread on JavaRanch forum, so may be placed ads, but still deceiving as they try to allude they are related to the current thread when it's clearly an ad.
ME? Millenium Edition?
You are absolutely right Mondoshawan. I too am not much of a fan of string intern. But, just wanted to point out that the string must only be used when you have a pigeon hole principle like scenarios where the number of strings to be compared is much larger than the number values they can attain. 
Wait... I thought there was one found fairly recently?
Who puts a QR code on their website? [](/ajbaffle)
2.0 is okay ;) But it has to start somewhere hasn't it. In 2006 I remember you saying the following about the release of 1.2: &gt;Who cares? &gt;There are still so many enterprises making use of JSF 0.x or 1.1 :( Then in 2009 you said about the release of 2.0: &gt;Who cares? &gt;There are still so many enterprises making use of JSF 1.1 or 1.2 :( If we never cared about anything, we would still be using JSF 1.0. Oh, but you didn't care about that either, as I vividly remember you saying: &gt;Who cares? &gt;There are still so many enterprises making use of plain Servlets :( So if it was to you, we never cared and we'd all be using Servlets. But it goes further back. Remember that you said the following in 1999? &gt;Who cares? &gt;There are still so many enterprises making use of CGI :( Thus if we never cared in 1999 about Servlets, we would indeed still be using some painful CGI scripts today. 
probably Micro Edition .. which is old and dead ans should be replaced/updated
I agree, it's pretty questionable.
The direction in which you open the TCP connection and in which you send your HTTP requests are orthogonal issues. You can have the PC behind the NAT open the TCP connection while the other side sends HTTP GETs.
* http://en.wikipedia.org/wiki/UDP_hole_punching * http://en.wikipedia.org/wiki/TCP_hole_punching
It's a fair one to ask, but it should be asked on the correct subreddit. /r/java is already full of junk that belongs to /r/javahelp or elsewhere.
You're a fucktard loser. Was that unhelpful and rude enough for you - asshole?
I built an employee record for a college project using MVC and Swing, I've applied MVC to web projects before and found it very intuitive. Using swing components was so simple once I had my model sorted out. This series of videos covers MVC first: https://www.udemy.com/java-design-patterns-tutorial/ There is a paid tutorial for building a Swing MVC app here, hopefully this code will work for you if you find the free part useful! https://www.udemy.com/java-swing-complete/?couponCode=copface
These are actually the ads served by JavaRanch, they explain their methods over here http://www.coderanch.com/t/600263/Ranch-Office/agree-link-kvetch I wish they would do it better! Sheds bad light to the products they advertise but at the same time products are happy to keep buying ads because of the great conversion rates. Catch 22.
Almost never restarting your JVM while doing development. Saves quite a bit of time just for the restarts (for many types of development) but primarily I find it speeds me up because my train of thought isn't interrupted by the app restart process. Almost the only time I have to think is when I change a class's superclass. [There's a list of features on their website](http://zeroturnaround.com/software/jrebel/features/) and I sincerely recommend it, but of course, different things work for different people.
Yes, you can use the MVC pattern in more than just web or GUI apps. The View class(es) would write to the console, then you can replace those later with a different implementation.
As long as you keep your domain model clean, as in it just stores data and other classes act on this data you can do whatever you want to it. The key here is that the objects that model the library should be decoupled from the objects that make it into a console app so you can easily change it to a web app later on.
Velocity + Flying Saucer is a great alternative. I use that combination for a number of projects I work on. Render HTML with Velocity, and pipe it through Flying Saucer's CSS3 renderer into a PDF format. Very simple and easy to make reports look great.
More details in this mailing list posting:[Proposed new schedule for JDK 8](http://mail.openjdk.java.net/pipermail/jdk8-dev/2013-April/002336.html)
Maybe an option long-term, but since a bunch of effort has gone into securing them for Java 8 I don't know if dropping them would pay-off for this release.
Done! [Server JRE](http://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html#serverjre)
I agree - I couldn't think of an example where it would be the desired design while typing my post (and still can't), but that doesn't mean there isn't one out there somewhere. If I saw it in the wild though, I think my thought process would be "is it a bug?" then "is it poor design", rather than seeing it as good code.
hey, thanks alot for the tips! one of the easier replies to understand :). took your advice and changed things around, here are my classes (other than the main which is like 2 lines of code) http://pastebin.com/6Jcj1998 - story class http://pastebin.com/psYK3ksd - inventory class what do you think?
You hit the nail on the head. Always program for the poor sap that comes after!
Interesting to see the other day that [adverts aren't allowed for the device's display](http://www.bbc.co.uk/news/technology-22166419) -seems like a way for Google to shoot themselves in the foot, unless there's some obvious other way to make money from developing for the devices?
&gt;experience has shown that it’s almost always a bad idea to try to ship a major software release in December Anyone knows why? Sounds weird...
Not here - it's just homework help and spam from the subcontinent.
You can find lots of useful information about Java in (the Java tutorials)[http://download.oracle.com/javase/tutorial/] or you can google anything that interests you (java game development, java webserver technology, java robotics,...) Then what you could do is understand what a special API/library is used for (JDBC is used to connect to databases, Slick2D is a game programming library) and then think of a simple program which does exactly this and program it using the information you found.
Why are you converting? Unless you are hitting a memory or thread count limit you are better off sticking with traditional blocking IO. You'll get better performance and is a lot easier to implement. http://www.mailinator.com/tymaPaulMultithreaded.pdf
It's for a game I'm making. Having blocking IO doesn't work too well for the amount of players I have running around doing stuff.
Are you talking about the OCJP? Best advice I can give you is to start from the basics. Try to get some experience however you can. That may mean doing the exercises in the study guide, or even starting with some basic java tutorials.
No, you would not need Certficiation. You need a portfolio. Programming is much more like an art than it is like a regular technical job. So to get a job, you need to have a stable of things you've done and are confident talking about in an interview. The worst thing you're going to face is going to be the dreaded "technical interview" where they ask you to design a solution to X on a whiteboard to map out your thinking process. Now, I have a serious question for you: Why do you want to work as a developer?
`Customer extends Record`?! So, you're claiming every Customer is a Record (and by extension an ItemContainer)? I find the statement "a Customer is a Record" somewhat dubious and "a Customer is an ItemContainer" completely silly. Perhaps you should work on naming things.
well i have a very generic Item() object which contains a name and value among some other things. I then have an ItemContainer that houses those Item objects. Record will have name/value pairs associated with it so i extend the ItemContainer. A Customer is a type of record so i extend Record. 
JasperReports became the single biggest cause of support issues in my project. Shudder, never again.
Tomcat is probably the best webserver you can go with if you want to do servlets or jsp. At least, the best free webserver
I was 28 with a Bachelors and a Masters in Saxophone performance in the summer of 2007. With zero job prospects and an obscene amount of student loan debt, I had decided to complete a CS degree. To get back in the swing of things, that summer I studied for the SCJP (now it's Oracle, but I imagine it's about the same). I studied the Kathy Sierra and Bert Bates book. I took the test at the end of the Summer. Several times during the test, I caught myself thinking that I had no business being there, but I passed. The resulting certification helped me stand out in that year's crop of internship candidates and got me a couple of interviews. While the cert didn't get me the job, it helped me get the interview. A developer that I used to work with and respect a lot once said, "If you can pass a certification test, that doesn't tell me very much. But if you fail one, it tells me a lot." As a developer without a technical degree (never finished the CS - financial aid ran out - so I just have music and music), I will continually suffer a pretty big case of "Imposter Syndrome." As a result, I like to use certs as personal goals/checkpoints rather than proof of anything significant. I minimize their importance on my resume, and I leave some off entirely when appropriate. Good luck.
1) Make as much as you can final so you can be confident that it will never change. This should include the column names/types, and even the data source (unless you're using dependency injection?) and ID. Remove the setters and do as much as possible in static {} blocks and constructors. 2) Don't expose arrays outside your class. They can be modified. Either return a copy of the array or use an unmodifiable list. 3) Don't keep related data in two separate containers, like you did with column names and types in Customer. It is just prone to error. What you did with the LinkedHashMap is alright though it should probably have a more descriptive name. Or, even better, create a new class called ColumnInfo that has the name and the type, and keep a list of those classes. This all keeps the functionality the same but makes it completely obvious what you're trying to do and a lot harder to make mistakes. If I took your Customer class and tweaked it a bit it would look like: http://pastebin.com/tjisrKK1 You could do even more too, like make constants for the column names and types. Maybe even use an enum rather than String for the column types since there is a limited number of types. 
Easy fix. CustomerRecord extends Record
this is awesome advice. Thank you so much. That looks WAY better. I knew there were ways to organize this better. Exactly the kind of suggestions i was hoping for. 
This is a bad way to model data - 'CustomerRecord'. It doesn't scale well. 
GitHub. That way we can comment inline at the problem.
Do you have any userful information on using this in combination? My google-fu didn't yield much. 
Not only in the US, in Europe too. It's the Holliday season, simply meaning lots of people are not available. We have the exact same rule. If the schedule of any major project happens to slip into early December, we push it right away to half of January.
They are driving Java into a ghetto.
I'm pretty sure java 5-7 were all late (especially 7). So no surprise there. Hopefully they spend the time to get the security secure.
It seems interesting and the money is good.
Yes, feel free to try it yourself. It's trivial: Socket s = myServerSocket.accept(); s.getOutputStream.write("GET /index.html HTTP/1.1".getBytes()); There, TCP opened in one direction, HTTP get sent in another.
Interest is important. Money is not. There are a lot easier ways to make that money. Especially with a background in politics. Good luck with your journey. Development is a hard, often thankless job. If you're not already subscribed to /r/leanprogramming then I'd put it on your list of resources.
That's ok, as long as they get it right I can wait.
No surprises here really. Did anyone really believe the September 2013 data to begin with?
When you want to get a little more advanced, a Spring-based web app running on Tomcat can actually be a nice way to get deeper into object orientation, but it does require a good deal of setup to be done before stuff "just work". Doing just a command line app first to get the hang of how classes work might be smart. If you write the classes in a smart way there shouldn't be any issue with just moving these over into a web app and ditch the "command line driver class" if you want to do that later :)
Well the goal would be for oracle to stop working on the java plugin because it's slowing down innovation, and few people use/like it
does this mean we get jigsaw back?
Your momma drives you into an Effetto.
Maybe they can revisit their EOL policy on Java 6.
He mentions it in the article, but says they'd have to push it further to get Jigsaw in. They could drop Lambdas but then what compelling new features does Java 8 have?
Technically, the JVM has conditional breakpoints and Netbeans and Eclipse both support the Java Debugger Protocol.
Bah. I wish they would have focused on core language features and not some of the other stuff. *Cough* JavaFx *Cough*
Sure. Break it into two pieces. Velocity is a template rendering engine, its like JSP, but without the servlet container and is easier to use. You can use it to render HTML pages and is very light weight and fast, there are tons of examples out there to use it so I wont go into details here. For the flying saucer stuff, here is a [good intro](http://today.java.net/pub/a/today/2007/06/26/generating-pdfs-with-flying-saucer-and-itext.html). Flying saucer uses itext below the covers as a renderer to convert HTML into a PDF. There are a bunch of CSS rules that are applicable to printing that Flying Saucer will understand, such as page breaks, footers etc.
Agreed. While JavaFX may be awesome, and from what I've read it is, it has a long uphill battle against established technologies. Lambdas look like the most important piece, also like the new date library. I'm ambivilant about Jigsaw, while OSGi still has issues, it has gotten quite a bit better over the last three years.
I know you work for zeroturnaround and I hope you guys realize that tricking people to click by mimicking legit forum posts on ads is not a good thing and often results in a negative response rather than neutral to positive. I am not saying you are doing this directly but JavaRanch is doing it on your behalf and their threads show up in other sources (possibly by archiving or reposting or replication). The link is a redirect hidden one and often alludes to having found an answer in another thread or post. It has gotten to the point where I add "-javaranch" to my java based searches.
but if you often find yourself on the JavaRanch and know that those are the ads on JavaRanch, which you should know if you use the site often enough, why do you complain about it? The question is about JavaRanch ads policy, not zeroturnaround's ads, right? 
http://www.h-online.com/open/news/item/Java-8-is-likely-to-be-delayed-into-2014-1845292.html 
We are debating semantics. Does JavaRanch post ads for zeroturnaround as a charitable act or are they getting paid to do it. JavaRanch has become well known for deceptiveness (and has been brought up at a few java meetups I have been to); so you guys are supporting them. How is that any different than a company supporting a known spammer? Mostly people (at the last few meetups) were annoy because they were tricked into clicking on what they thought may be an answer to the problem they have been looking for. It was a point of discussion and some wondered by anyone would pay JavaRanch to willingly confuse their readers, but that we can't understand, we are just developers not marketing gurus (/sarcasm intended). I was also a bit annoyed and have been sticking to StackOverflow. I am sure you guys have a nice product, it's the decision to be tainted by JavaRanch's deceptive marketing that stuck with me enough to leave a reply. Maybe I am overly sensitive to misleading advertising. Maybe it's me and not you :)
But java 9 will be on time
Its really much nicer then Jasper. Not knocking Jasper, its a great library, but the tools to create the reports are not so nice, and its hard to get a clean layout easily. if you are comfortable with HTML and css you can make reports look great this way though and reuse style sheets across all your reports so you get a consistent look and feel. Google uses something similar for their analytics reports, but its a commercial product. I don't remember the name off the top of my head now though.
Please explain to me how would this post legitimately get 4 upvotes? There is something fishy going on.
One idea: You can optimize your math. For instance `Math.sin(3.141592653589793D)` is `-1`. Other values can also be precomputed and reused.
http://minuteproject.wikispaces.com/
Unfortunately, there are almost not entry-level jobs in politics, which is why I'm working in customer service for a software company.
I wonder if the compiler does some sort of optimisation by itself on this? Just like when you concatene static strings together. Also, Using Math.PI instead of using the raw value might make the maths cleaner, more logical and more precise. Wedge doesn't respect camelCase notation. Lastly, while I am bad at math, I am fairly certain there is a way to replace the switch statement with a single expression. The values used are all derived from having Math.PI divided by an integer. I'm sure someone smarter in geometry than I could come up with such thing easily :P
This will only print to the cmd prompt, so they would need that open while the run your jar file.
There is something wrong with your operating system, it's very unlikely to have anything to do with Java.
Runnable is for when you're dealing with threads.
The reason nothing happened is because your program only prints to the system. You're going to see nothing graphical when you run this program.
It should have used protection.
thank you!
I like the fact they decided to provide all the optimization examples in Scala.
Nice post. Going to try using a spreadsheet instead of DRL sometime. 
Declare each of the Math.sin/Math.cos as private final static variables, and you hint to the compiler to inline the actual resulting values instead of JNI calls to the underlying OS math library. I'd also be tempted to break the (int) casting to just radius * math, as you are causing the jvm to cast an int to double, then back to an int. Similarly, make a local variable: double radiusDouble; and use that in place of radius for the multiplication. Of course I may be second guessing the same optimisations HotSpot (or your chosen JVM) may be performing.
It makes little sense to calculate all the values by hand that you are giving as paramaters for cos and sin. Please try to let the computer do the calculations for you. You should create a for loop that generates the points you need. Divide the 360 degrees in a cicle (or octagon) by 8 to get how many degrees one segment of the octagon is (360 degrees is Math.PI * 2.0 radians). The math for calculating the point to add is very simple. Use cos() of an angle to get the x component and sin() to get the component. Then multiply by radius to get the actual coordinate. You could do something like this (not tested or even compiled): int segments = 8; double angleIncrement = Math.PI * 2.0 / segments; for (double angle = 0; angle &lt; Math.PI * 2.0; angle += angleIncrement ) { int positionX = cos(angle) * radius; int positionY = sin(angle) * radius; r.addPoint(positionX, positionY); } Still it's not really an optimization, because I'm assuming the code to create the octagon is probably called much more infrequently than the code to draw it (or at least that's how you should use the class if possible). It's just a clearer and more flexible implementation. In most cases unrolling the loop would be just premature optimization in a place where it probably does not matter at all. bonus: You can make the number of segment a parameter to make shapes with different number of segments. Also in many cases you don't want to add the center position to the actual polygon points. You can save the position separately in some member variables and apply it when drawing to get more flexibility. This way if you need to draw to a different position you don't need to generate the polygon again. Something like; g.pushTransform(); g.translate(x, y); g.draw(r); g.popTransform(); Where x and y are class member variables. EDIT: some comments about optimization and stuff 
WOOPS! (the last one was in a perfectly relevant subreddit, though)
I was going to go to Kingston originally
http://docs.oracle.com/javase/6/docs/api/java/awt/Toolkit.html In this, "toolkit" is used like so: https://en.wikipedia.org/wiki/Widget_toolkit Does that help answer your question?
I think I only ever used it for the method getScreenSize(). 
My favorite method: lazilyLoadDesktopProperty I've just started programming recently so maybe 'lazily' means something specific, but I laughed when I saw this method.
Lazy loading is where you delay getting the resource until it's needed, rather than doing so as part of the class's constructor/initialisation routine, e.g. private List&lt;Foo&gt; bar; public List&lt;Foo&gt; getBar() { if (bar == null) { bar = callToLoadAllBars(); } return bar; }
Ah, very nice.
The guy working on it is a Scala person. :-)
That's fun, but you should be able to generate another name without having to refresh the page.
Just use the [Hedberg Method](http://youtu.be/0lwpS5M7hgA), &gt; All you do is say what the shit does, and add "er". Hey, what does that do? It keeps shit fresh. Well, that's a Fresher. I'm going on break. Also, &gt; There are only two hard things in Computer Science: cache invalidation and naming things. 
Pick a fun project and do it. Learn the following tools : - Maven - Hibernate - JUnit - An IDE (Eclipse for example) - Git
Your code crashing the system seems not good. Some people do run something lower level than linux, but most HFTs just run stripped Linux... lets them use normal software when needed, and crazy stuff when needed.
yes, this is one of the reasons things like infiniband and rdma are used however, the next question is if you're running code in ring zero, why not use fpgas... if you're using fpgas, why not asics...
Lazy is to get the resources when you actually need them, and it's the opposite to 'eager'
Does it supports other formats like DOCX and XLSX?
No, only HTML -&gt; PDF. What you are really talking about though is a different paradigm. One is css layout based, the other is cell based. When I need to generate XLS reports then I use Asposes's library which is quiet nice. I wrote a xml -&gt; aspose library to allow for a velocity type of markup language to generate xls files as it can be a bit tedious to hard code that stuff. I used an abstraction so all those details are relegated to the "renderer" that the report choses. Kind of like MVC, I have the model and just choose the renderer I want.
I need to pay for that shit. No ty.
What is this I don't even
It's called Guice. http://code.google.com/p/google-guice/
Many tools are available like this including JavaFX in Java 8 which will be out of the box. 
yes ! yes ! 
Suddenly Java supports only powerPc and other IBM processors.
Aside from letting security bugs exist for a long time, I don't like Oracle's documentation. The documentation for Java and WebLogic went from not that great, but usable to "obfuscated" at best, almost as if it was written with the intention of making it hard for developers to use. Their technology forums run on a laughing stock out of date forum software that makes it hard to even format complex questions in a decent way. Oracle also cuts off access to older versions of the software they control. Some places you really are stuck using an older version and you really do need access to it. IBM has some of these problems too, but they have made their own JVMs and JDKs in the past, independently of Sun. They did it in a way that played nice with Sun, and standards. Their Java stuff also ran better. 
IBM had an offer in to purchase Sun and all was assumed to be going well until Oracle came in at the 11th hour with a higher offer. IBM didn't counter and instead withdrew its offer, if I recall correctly. IBM had the chance and didn't step up. Java is Oracle's now. I'm not sure how you purchase an asset that is a loss generator and has no intrinsic value. 
IBM still has their own JVM, and it performs better in particular scenarios.
As a loss leader. They give their java away for free, but websphere isn't and neither is the team of consultants.
That is probably true, but IBM followed Sun's standards and specs when they made their own Java implementations ( unlike Microsoft ). They also made better implementations and were innovative. I think they would be a better host company for Java than Oracle.
Where is there a Microsoft implementation of Java? Oh right, there isn't one. Because Microsoft wants to have all their developers/users on their own standards. IBM complied with Sun specs because it was a *JAVA* implementation, this isn't optional, they couldn't call it Java otherwise (or face costly lawsuits). They implemented this precisely so they could take away Sun's customer base, without those customers needing to rewrite their software. Not because they wanted to play nice with Sun. That said, they are one of the bigger contributors to OpenJDK (and by extension JavaSE) today.
Well if we're dreaming google should buy java and be it's new steward. 
Good point!
I really wish Google had acquired Sun instead of Oracle. I feel like Java, MySQL and any Sun open source project would be in such a better place now. You certainly wouldn't have anything like the [Hudson/Jenkins debacle](http://en.wikipedia.org/wiki/Jenkins_\(software\)#Hudson) under Google. I would have imaged that people like James Gosling would have stayed on had Google been the acquirey and I think the language updates would be moving faster and in a better direction. 
Did Google make an offer?
IBM used to. They still do, too.
I recall that they did, it might have just been all speculation though. http://blogcritics.org/scitech/article/it-looks-like-googles-buying-sun/ Regardless, Google would have been the best caretaker of Java in my opinion.
Well, the future is not carved in stone. Maybe someday Oracle will put it up for sale.
Maybe. Oracle is doing a pretty good job pushing the language forward. I am not an Oracle fan, but they are getting things done. IBM might be an a kinder steward but they are in love with software patents so I am not sure. Google would be a better choice.
read that as "hold shift"
http://www.microsoft.com/en-us/legal/interoperability/java/default.aspx
I don't disagree with the point above about IBM and Oracle making money off of second tier products related to Java (aside - is iPlanet still weidely used? I'm out of the J2EE world, for the most part). Historically though IBM did see a benefit to their own JDK. They rolled their own initially because they didn't like the JIT that was delivered with Oracle's JRE. At the time of Java 1.5, IBM's runtime was considerably faster than Sun/Oracle's in garbage collection and a couple of other areas (I don't recall off the top of my head). There was also a lot of IBM specific tooling built into their JVM that worked really well with the Rational Tools (there's the money hook). IBM still pays to deliver their tools and have their java release certified as "Java Compatible." Compared to what I would imagine Oracle selling Java to them for, it's a small fee. From a business standpoint, I would imagine Ellison/Oracle like having IBM by the balls in regards to Java. IBM is heavily invested in it, and Oracle controls the language. For that reason alone, I doubt that Oracle would ever sell Java to IBM.
So IBM buys Java and suddenly you need a mainframe to run it!
A lot of their front end software to their databases is written Java. Oracle sells databases to organizations using a variety of operating systems so Java is a good choice for their front end software.
No, but it helps them to control it so nobody can take it away from them, alter it to make it less useful for their purposes or make it expensive for them to use.
lol, I think not! Say you have 200 class files, and you haven't seen the code in over 6 months. How are you going to know what Class provides which functionality, by simply looking at the class' name? --- Giving your classes totally unrelated names is a bad idea, which just makes things harder for yourself. Though I'm sure this was a nice beginner project.
Or everyone except Oracle or Microsoft in their current forms.
NO. IBM has been responsible for most of the worst things in Java. Calendar, EJB, OSGI, SWT. They would kill Netbeans and JavaFX.
Yet another bad idea since Google is terrible at maintaining software.
Lie.
Sun asked Oracle to make an offer since they knew IBM would ruin Java.
I'm a fan of Eclipse so I am not so sure killing Nebeans would be that bad. No offense meant to you. Are you talking about SWT the GUI API? If so I disagree about it being a bad thing, the improved performance over SWING makes good things like Eclipse possible.
It also has some very peculiar quirks (then again, I guess the Oracle/Sun JVM does too.) One idea I found interesting was the Ahead-Of-Time compilation.
Use Netbeans which builds a runnable jar by default.
I hadn't heard that side of it. Not to be pedantic, but do you have a source?
Well I guess we can argue if Eclipse is 'good'. Since you don't seem to even know what JavaFX is you might look it up. It's going to have 3d support in Java 8. Something a lot of us have wanted for a long time. I would not be happy when IBM would kill this project.
I think the Apache Foundation would be the best choice, but it'll never happen. Especially given the license incompatibilities with GPL (but let's not have the conversation).
sorry :D any help is appreciated! :)
I heard it from a couple of Sun employees. If you read on the history of the IBM / Sun relationship you'd understand why Sun wouldn't want IBM to own Java.
I'm pretty sure this is tongue-in-cheek. 
And they decided *Oracle* would be a better choice?!
Who else? Apple? Microsoft? The real blame for all this needs to go to Jonathan Schwartz for driving Sun into the ground.
[Google Graveyard](http://www.slate.com/articles/technology/map_of_the_week/2013/03/google_reader_joins_graveyard_of_dead_google_products.html) Killing reader hasn't killed reader in my mind; it's killed the trust I had. It caused me to find out quite how many products google has pulled the plug on. "Oh, but Java would be different because so many people rely on it so heavily". Why do you think google would be unwilling to jettison java the moment they think they can just convert people to their own home grown thing instead? If they're willing to sacrifice [three million customers](http://blog.feedly.com/2013/04/02/announcing-the-new-feedly-mobile-and-welcoming-3-million-reader-refugees/) why do you think they care about a couple hundred thousand developers?
sadly Netbeans killed itself. Buggiest IDE ive ever used, and thats including my experiences with C++ in Visual Studio.
Yes!! and for not writting a better/less buggy Scanner class. Plus another reason is the loss of MySQL to Oracle. 
Here you go: http://jsfiddle.net/SdfSm/1/ It generates exactly the same names.
Somebody should.
[ErrorCorrectingGirlfriendHelper](http://imgur.com/5Bo2Z9g) Hmm... Nice though :)
Seriously? What kind of bugs are we talking about? I use it on daily basis(Java/PHP/C++) and really didn't see any. Except for a Python plugin which still doesn't play well with 7.x versions and for which I still keep 6.9.1.
http://docs.oracle.com/javase/tutorial/ Learn the basics, and the answer to this particular problem will come to you easily.
Read up on the observer pattern. http://en.wikipedia.org/wiki/Observer_pattern
Not to mention their entire IDM, CRM, e-business, SOA, WSM, supply chain management, procurement, governance, analytics and middlewear stacks are all written in Java.
They still do have their own JVM/JDK: https://www.ibm.com/developerworks/java/jdk/ Its available for x86 Linux directly, but I think there's a license restriction from Oracle about shipping it for Windows PCs. You can only get it for Windows bundled with Eclipse with the stipulation that it is "for development purposes". I'm not sure if any of them come with a browser plugin or other "desktop" pieces; the IBM JDK is primarily tuned for server usage.
http://thenewboston.org/tutorials.php
I would suggest [CS61B](http://www.reddit.com/r/javahelp/comments/13rm1w/please_push_me_in_the_right_direction/c76ntvv)
I think it's no longer awful (plus machines are much faster), but back when Eclipse 3.x came out it was definitely not in the top two Java IDEs.
Stop getting the internet to do your homework.
Why does anyone need to buy Java? Let it stand on its own.
thanks, I'll check this guy out seems awesome. I usually like text over videos but for things like this its awesome. 
Avoid thenewboston. He uses bad coding conventions and doesn't explain why certain aspects of a language exist. Discussion on /r/learnprogramming [here](http://www.reddit.com/r/learnprogramming/comments/11ubro/28_ways_to_learn_programming/c6ppc38).
yes is a pretty absurd slope. Obviously compile time on FPGA is a few hours, and ASICS a few weeks or months... but the point does stand ;)
Interesting. I could see this shaving off a few minutes of development time. The minor test I ran looked great. Will give it a shot the next time I have a real JSON blob to convert. Thanks for sharing.
It's easier to imagine a [google dart](http://www.dartlang.org/support/faq.html#why-not-designed-by-standards-body) to JVM compiler. Follow that with JVM extensions only available in the Dart language, accidentally introducing incompatibilities that break real Java code in occasional cases. Google decides that "well, Java's had its run but it's time for dart to just become the standard tool for all that crap now". They build a java-to-dart meta compiler whose primary usage is android developers, and in almost all cases it works fine. Largely, this is reminiscent of Apple when they switched to Intel. The nice man in the turtleneck told me how easy it was to start using XCode and all my apps would magically continue working, that ended with a totally locked down app store and an OS that's now openly hostile to flash and java. Here we are a couple years later and the nice company that apparently "does no evil" is jettisoning millions of customers at once because they're inadequately profitable and collecting ridiculous amounts of personal data on us all. Java hasn't been a profit center for either of its owners; it's been a loss leader. The beancounters are now *clearly* in charge over at the big G, so why do you think they wouldn't end up dumping Java if they did own it? Obviously most of this post is rambling conjecture, but we've *seen this story before*. Those who don't know history are doomed to repeat it.
Really helpful stuff here. Just to note though: &gt; Avoid using exceptions for flow control (don't do stupid things like using the ArrayIndexOutOfBounds exception as a stop condition for array iteration), but don't micro-optimize either. I think that's what the article warning against. Dumb as it sounds, I've seen exceptions be used as flow control a couple times.
Ripped off from http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#lambda-expressions-in-gui-applications
&gt; You can only get it for Windows bundled with Eclipse You can also get it bundled with other IBM products (such as WebSphere).
True, yes. I meant specifically for free at that page I linked. IBM provides its jvm with all of its java-language products. I'd imagine IBM isn't interested in entering the realm of consumer desktop pc java, so their jdks exist only for their own OSes and "development purposes".
It was, long long ago. (I'm talking the days of Netscape... before any of the application environments you mention)
All I can say is that when I started working on Java in 2001/2002, it was already old. It barely got any mention in courses at that time, and I never saw it used ever since (across quite a few clients of various sizes).
You might have some issues with more complex JSON. I tried putting in the [JSON](http://www.reddit.com/r/java/comments/1ctym8/json_pretty_printer_and_java_object_generator/.json) that reddit returns for this page and your site returns "Unable to parse the JSON". I do like the concept though. (Actually, I think just having the top-most structure be an array \[\] is what causes it to fail.)
GlassFish is pretty good as well but regardless, both integrate with NetBeans with ease which is a pretty good (free) IDE to use and get started with.
Since the 1.4 or so version Netbeans has been much more responsive than Eclipse for me, it also seems to munch much less ram and is a lot less of a pain to maintain (I need to pass through Eclipse-plugin-hell each time I need to set up a new environment) Consequently I've switched to Netbeans full time and only use Eclipse when I need some plugins only available for it. Eclipse has, in my eyes, barely improved in the last 10 years, at least not in areas that matter for a person that actually wants to use it, rather than work on it. The only drawback of Netbeans is that it's tied to Oracle's goodwill insofar support for external tooling is concerned (eg. the dropping of JRuby support etc.), the much higher quality of the support for things it does support otoh more than makes up for it imho. (just as an example: Eclipse's maven "support" is downright abhorrent)
Very nice. I've been using: http://jsongen.byingtondesign.com/ and http://jsonformatter.curiousconcept.com/ , but your tool integrates both formatting and Java object gen together.
CS61B has video tutorials.
Eclipse has grown into a convoluted, slow, bloated mess. I switched to IntelliJ IDEA for all my Java development (Java SE and Android) and couldn't be happier.
I hate Eclipse workspaces with passion, why they insist on using them, instead of proper integration with build tools?!
&gt; since they knew IBM would ruin Java. You would be hard pressed to find a current IBM product that isn't using Java in some shape or form. 
Make an Android app!
This was my motivation in creating it. After converting my 15th JSON blob to an object I decided I didn't want to do it anymore.
I think you're right. I wonder if that's valid JSON though - I thought JSON had to be in brackets...
No. I'm saying that all the other stakeholders should fork off and do their own thing and if Oracle wants to play in their own sandbox they can.
They would bury it to the open source graveyard a.k.a. Apache Foundation.
Just keep coding. Once you learn the basics of a language, then start implementing things! I got really into graphics processing, particle simulation, animation, and simple 2D games when I was in school. Evolutionary algorithms are fun too, and I even did a bit of motion detection and video filters. Towards the end of my grad school days, I got into openGL mappings for java, like LWJGL.
C#/.NET.
JSON in itself can have an array as its outer notation (in cases where its representing a object that is a list of things). If you actually wanted to make this thing advanced, i guess you could let it iterate through all the objects in the array and make sure there are fields for all of the objects in the outer most object you create.
Sure I agree but let's face it. IBM's influence in the JCP has made Java a lot more complicated that it had to be (see my other post). The community has been working hard at building simpler functional APIs over the last few years and IBM would undo all of that. Plus this is all theoretical. Oracle has a lot more cash than IBM right now. IBM couldn't afford to buy Java and Oracle wouldn't sell it.
learn an MVC framework like Struts, Spring, JSF, etc. Then learn Hibernate
Oracle's database software is actually written using C. e.g. if you write some SQL or pl/SQL it all compiles back to C in the end. Modern Oracle databases do have a JVM, but it is really only there to allow java access to the database. With that being said ... the rest of their stack is java. 
I have been following Dart for a while and there are already some steps working towards some of your comments: 1) Android as a target: https://code.google.com/p/dart/wiki/Android It should be noted that Android as a target platform is only X86 at this point. Arm support is on its way (you'd have to watch the commits to track their progress). 2) There is [Java2Dart](https://code.google.com/p/dart/source/browse/#svn%2Fbranches%2Fbleeding_edge%2Fdart%2Feditor%2Futil%2Fplugins%2Fcom.google.dart.java2dart) already and they have one published library that comes from it: [analyzer](http://pub.dartlang.org/packages/analyzer_experimental).
How do you get good at anything? Practice. Like others said, write more code. Android app, basic programs, anything you find interesting or useful.
Yeah if he want's to use inferior technology.
Concurrency. Also, read and fully grok "Effective Java" 
looks like it. [http://www.downforeveryoneorjustme.com/](http://www.downforeveryoneorjustme.com/java.com/en/download/index.jsp) EDIT: And like that it looks like it's back up now.
Nope, it keeps having moments of flicker, it'll pop back up for a moment, then when you get the download on the installer, the installer cuts off and says the file is corrupt :/ 
Stop "learning", and start coding. The best problems to solve are the ones you make for yourself.
Whenever I want to do something like this, I use a batch file (.bat) that runs 'java MyClassNameHere' command (for Linux systems, you can use shell scripts to do the same). This assumes they have the JRE bin directory added to their PATH environmental variable. For example, let's use the class you have above. When you compile it, you should get HelloWorld.class as the output. Then make a batch file (in the same folder as the .class file), call it whatever (say run.bat), open it in Notepad, and add this to it: java HelloWorld pause Then double click on run.bat, and voila! As long as you have the Java bin directory in your PATH variable, you're good to go (see Google on how to do this). EDIT: I added a 'pause' command which stops the batch window from autoclosing when the java command finishes executing your program. This prints out the 'Press any key to continue . . . ' message.
Keep trying and I would recommend the offline installer right now. I had a client try the usual client and it caused all kinds of problems. Completely broke her Java install.
Outside of cost to certify, there's nothing preventing a vendor from doing that. On the JRE side Oracle controls the "reference release", but there's the OpenJDK's runtime, IBM's implementation, Azul Systems Zing and others. Granted, these are not forks from The Oracle implementation, but I don't know that there's an advantage to forking the code base if the JRE is going to be re-written. There should be a standards body to control the JDK side of it, and Oracle happens to be the steward of it. The process of selection of what is included and excluded in the next release is a fairly open process, so unless I'm not understanding your statement, I don't see what changes from the current process.
I believe I wrote that the front end software to their databases are written in Java, example: SQLDeveloper
Have you spent time learning design patterns yet? They can be useful in understanding how other people have structured their code, or in deciding how to structure your own. I highly recommend taking some time to look through libraries other people have written, especially if there is one you find yourself using frequently enough that you already understand a bit about how it works.
The DartVM for Android is actually to get the DartVM running as part of Chrome. The Chrome dev team has said that they will not include Dart until it successfully runs on all platforms that Chrome supports (which means Windows, Linux, OSX, and Android). It is possible that the DartVM could be used to replace or be an alternative to dalvik (java), but I don't see that happening any time soon.
It's valid and specifically called out in the [spec](http://json.org/): &gt; An ordered list of values. In most languages, this is realized as an array, vector, list, or sequence.
Yep, I looked it up this morning. I'll have to see why Jackson is specifically rejecting it. I'm going to guess that I'm calling something Map specific and it's just a class cast exception getting gobbled. In any case, I plan on fixing that bit. Thanks for helping :)
I would say it's now time to *read* and *write*. Read some code someone else has written.. then write some of your own. Rinse and repeat. I've learned a lot more about features, style, and stuff like language design patterns from reading other peoples' code than I ever have from reading any "how to program" book. It's especially helpful if you're reading a program that does the same thing or a thing similar to the problem you're currently writing code to solve. I don't really understand this culture of learning from a book and then striking out hoping to learn solely from writing. Is that the way you learned to read and write?
Do Project Euler. If nothing else it'll get you familiar with the strengths and weaknesses of the collection classes.
The Jackson deserializer has you pass in a type reference. I was using a Map since I naively assumed that "all json is is a map of key value pairs". Values can be a list of objects, but I didn't think of the case where the top level object is a List. Here's the snippit that causes the problems: private static final TypeReference&lt;HashMap&lt;String,Object&gt;&gt; HASHMAP_TYPEREF = new TypeReference&lt;HashMap&lt;String,Object&gt;&gt;() {}; ... objectMapper.readValue(json, HASHMAP_TYPEREF); I'll just detect [] or {} and deserialize accordingly. Again, thanks for the feedback.
You may be interested in reading up on [Design Patterns](http://en.wikipedia.org/wiki/Software_design_pattern). I highly recommend [Head First Design Patterns](http://shop.oreilly.com/product/9780596007126.do).
A good way to learn more is to study and modify actual, purposeful, in use code. I learned a lot of java through modifying code from the game Minecraft. The code is well-developed, optimized code created by professional coders working for their pay. If you can find a good open-source java game, then I highly recommend you download it, play it a bit, and then open it up and make some changes.
Just curious what video series would you recommend then? Do you have any in mind?
My apologies! I misread your post. 
This website is worthless, there is no way to verify the site has been update to match the latest release and no information on the attack vector.
What information does this give aside from "stay inside, preferably under a pillow fort"? 
I so expected to see a an attempted java exploit in the source of that page...
http://java-0day.com/ Which java exploit are you referring to?
`/bin/true`
To be honest, I did not learn java from videos, and I would recommend to others not. For me, it was extremely helpful to sit down with a book on the couch and absorb the material and then try out a few practice problems. If you are dead set on a video series I am not the person that can give you a good answer but I would say [Derek Banas](https://www.youtube.com/watch?v=TBWX97e1E9g) is not bad so far. Does that help?
I've dabbled with auto wiring in the past and it worked out well. Heard some horror stories though of the auto part going wrong, but then again you should know that going in. Auto-magical can and will lop a few heads off every once in a while if left unchecked.
Although it's math focused I found [Project Euler](http://projecteuler.net/) good for learning to rack out gradually more and more difficult problems.
1) Practice, practice, practice. 2) Read other peoples code and work to understand how they are doing things. 3) Practice some more. 
Looks promising thank you! 
Thanks haha
&gt; 2) Read other peoples code *in other languages* and work to understand how they are doing things. 
Realize that everything that happens is because you told it to happen. If there is a problem, understand why it occurred and change what you told the computer to do. If you do not understand what is wrong, keep looking. Do not just randomly try to compensate for problems. This leads to shitty software. 
Time and exposure. No substitute. Work with as many different libraries as is practical. Learn edge skills like crypto, db, ui/ux, networking, anything that catches your interest. Just keep doing. 
Learn J2EE containers, then learn spring framework. 
Yeah that's a solid tip but I have no idea where to look for good code... any suggestions?(Java or C)
This is even better :).
It's not a joke. This is the answer. I'm 12+ years into my career and have been programming for 6 more than that and I still follow this rule. I often take either take apart a library to figure out how it works or see someone implementing and idea and try to build it from scratch. There is no shortcut around the 10k hour rule. 
http://codingbat.com/ is pretty good for Java procedural programming.
Learn how to write unit tests to test your code. Unit tests will allow you to catch bugs more easily and automate large portions of your testing. There is a great unit testing framework called JUnit for Java and it integrates well with Eclipse and IntelliJ. http://junit.org/
I also recommend learning functional programming and Scala is a great way to learn it if you are experienced with Java. Scala runs on the JVM and supports an imperative style of programming like Java does.
If you already have an intuitive understanding of how to program you might want to just start out by looking at a [list of keywords in Java](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html) and Googling what each of them mean. Other than that, there are a lot of ways you can learn. I find that the best initially is just to delve into some project that you feel like making in Java. I'm not sure what kind of programs you like to make so it's up to you to decide. If you want resources that I think were really helpful, I was a huge fan of [Javarevisited](http://javarevisited.blogspot.ca/) but that depends whether or not you like learning by reading an article on a concept until you see something you don't understand and clicking the link to that concept and repeat until you know everything. If you want to try and make a game in Java, I always suggest [TheCherno](http://www.youtube.com/user/TheChernoProject) which is a Youtube channel for a guy who is making a game from scratch with Java and walks through the code as he makes it. The subreddit /r/javahelp can also be a great resource if you ever need to ask questions. If you ever want to, my Skype username is Blackduck606 and I'd love to help you with anything you need or talk programming at any point or perhaps even work on a group project.
I'm assuming there's a course outline somewhere for you to read through which is always good because it lists our every concept you should know. Also if you bothered to buy the book for the course (assuming there is one) there should be final exam practice questions in the back or at the very least questions for every chapter. Lastly, you may want to go over every assignment/lab you did and make sure you understand all the code you wrote/was provided for you.
It's also fun as hell. Get a few friends together and have a competition.
use direct connection, instead.
Grab code from GitHUB that you don't understand. Rewrite it so that it makes sense to you and still works. Do that a lot. 
Yeah actually. When you get those really complex ones that have a really elegent simple solution and you figure it out, so good.
JUnit will get you started. Depending on what sort of application you are developing there are a number of secondary frameworks that may be useful as well, such as DBUnit or JMock.
Learn Perl from *Programming Perl*. Seriously, it's a fantastic book. Python/Ruby/OtherLanguage fans will bitch about how Language X is better than Perl, and maybe they are, but I've never learned as much from a programming book as I did from that one, and it's a very useful language to know.
I totally second that. It's all about reading other's code, analysing, optimizing, and practice. Also, I've used the book "Algorithms (Robert Sedgewick, Addison Wesley)" in the past to better understand programming. As a professionally trained programmer, I can only say "practive makes perfect" even though there is no such thing as perfection in programming, best you can get is proficiency. Another hint: try to create some programming ideas, start simple and then build up. Anything that comes to mind will do. From my experience at my current job as automation/control system engineer/designer/programmer: NEVER look at the big picture at first, always start with the smallest individual unit and work your way through. (When you look at a complete furnace, for example, it's overwhelming, but when you start with something smaller, like fuel control, it suddenly becomes manageable.) **Edit:** one more thing: don't directly think in a programming language (in your case java), think in generic algorithms - just think in steps.
Oracle has some great tutorials on Java. Personally, I find them quite easy to follow. If you know the C++ syntax, the Java syntax will mostly become natural to you. Actually, I find Java much more readable than C++. On the topic of speed: BLENDER is mostly Python and it's anything but slow.
Recently i had used it for a web services class which prior to it, I had always used Eclipse. For SOAP based WS stuff using ver 7.2 was fine but majority of the time I had to use 6.9.1 because that was the only semi stable version for REST. Also I used 6.5.1 for using the BPEL module and jeeeeeeesus, both 6.9.1 and 6.5.1 show ridiculous issues such as classes all of a sudden start displaying errors out of no where on lines of code that was fine for the last several hours. Import statements all of a sudden not working. It wasn't able to see code I had written and used all within the same package. Several times I needed to restart the IDE, clean &amp; build and deploy. More than often I would have to clean/build/deploy 3+ times because it kept failing, yet after say the 4th time around it would work. I've never experienced issues like that with an IDE before. Spent more time messing with it than actually coding. I'm hoping the recent release works a lot better.
I'm not trollin, i've just experiences the most ridiculous errors with that IDE spanning a few releases. I cant speak about the newer versions (7.x) but the older ones don't seem to like web services very much. The one thing I will give Netbeans is the debugging console was done very well. Much better than Eclipses. 
I know this isn't what you want to hear, but learning science and math will help you with your problem solving skills. for example: I'm not saying that you should learn how to calculate a derivative, I am saything that you need to understand what a derivative really is, and it's relationship to the numbers. Once you start to understand the underlying concepts of basic mathematics you will be a better problem solver and mostly likely be able to calculate a derivative just by happenstance. But how does understanding math make you a better problem solver? Man's mind, once stretched by a new idea, never regains its original dimensions. --Oliver Wendell Holmes I don't want you to think this is isolated to math, go take apart a few engines and put them back together. Problem solving skills are not cheap. You have to earn them
Yep. Real-world data to use for testing is generally pretty helpful.
Read Leo Brodie's book(s) on FORTH. They are less about FORTH, and more about writing efficient and readable code, logical structuring, and writing reusable code.
I'd be careful about throwing the word "mastered" around for what it's worth.
Thanks for the reply. Unfortunately there is no change. It is the most stubborn error I have ever seen.
[Imgur](http://i.imgur.com/rlfiCVL.png) Here's a picture of the final product, thanks again for your help, I easily have the coolest final project out of the 50+ students who all used made poker or black jack like games
I agree and I have found out that with problem solving break it up into little parts that you need to program and program the little ones first. Don't try to program the whole thing at once. Start small and compile often. 
Fractals rule :) I did a Mandelbrot set one for android devices based on http://java.rubikscube.info/ My effort is here: https://github.com/conorbb/fractal-test It's in need of bug fixing and optimization as it is slow/hacky as hell! 
That's incredible! Congratulations!
you are an asshole
Code with other people. Preferably ones better than you. Working with other people is an important factor that people often overlook when they want to be better programmers. We read code more than we write them. 
I did not know Optional was coming in Java 8. I'm glad to hear this good news.
This touches on a feature enhancement I plan on doing... "using repeated object types as an option" I'll fix the name collision bug at the same time. Looks like I'll be working on this this weekend too :) Fun times.
Please don't learn Perl. Please spend a few minutes trying to forget that Perl exists. For some says admin type tasks it can be somewhat useful for one-liner type jobs but it belongs nowhere near an actual software project.
Thanks for sharing your code; always nice to see someone contribute for the first time. :) Some advice that I would recommend as far as something like this goes on Github (and F/OSS in general), though: * Upload a README file to the project: As explained [by Github](https://help.github.com/articles/create-a-repo#create-a-readme-for-your-repository), when you upload a README file, it appears prominently on your repo's front page, so people can read about your project. Ideally, it should give a brief explanation as to what your project is, usage instructions, and possibly some example usage and/or some sample output. * Take a look at [Markdown](https://help.github.com/articles/github-flavored-markdown) which Github understands for things like README files, and will allow some very simple formatting of your output for things like headers. * You should probably give some thought to the license you are distributing the code under, because if anyone else wanted to use this code, they wouldn't know under what terms they would be allowed to do so. You can define this at the bottom of the README in a license clause, and/or in a separate LICENSE file in your repository (which is the preferred form for longer licenses, such as the GPL) and/or in a source code header in your file(s). I don't know if you have used much Free / Open Source software, so forgive the next potentially patronising bit if you have. ;) There are [a great number](http://opensource.org/licenses) of F/OSS licenses to choose from, though the main choices (GPL/BSD-like) generally fall into one of two categories: * User-Focused Freedom - Force the code to remain open in all projects, so everyone has access to the code and any derivatives, * Developer-Focused Freedom - Allow the code to be used in closed-source projects, so developers can use it in proprietary software if they wish. Everyone has their own views on these licenses and indeed the philosophy behind them and which one they consider to be more 'free', but I would ultimately say that if you want to make sure you code stays open, use the GPL, and if you don't mind it being closed, use a BSD-like license. Good luck with the code / project!
 c) being able to write your own VM
1. Remove the libraries and Eclipse specific files from version control, convert the project to Maven. 2. Remove empty comments, and commented-out lines. 3. Don't use acronyms in class names. Exception: JSON. 4. Don't call System.exit(). Don't call System.out.println from a library. 5. Use a logging library, and log exceptions with it. Don't use e.printStackTrace(). 6. Don't extend Thread, implement Runnable. 7. Don't use NullPointerException as a workflow tool. 8. Indent your code consistently. Four spaces. 9. Don't catch and ignore InterruptedException. And so forth. That cross join you're using in your input can easily overwhelm you with data, if you happen to hit a node with more titles, managers, etc. Try to come up with a better solution
Thanks. This is the starting point for me.. 1. Any recommended books / references into Maven? I've been focusing a lot into the language first, and not the tools. So, maybe i'm a bit behind 2. Regarding empty comments, and code indentation, it's partly my fault. I've been using a lot of Eclipse format feature (Ctrl + Shift + F) recently 3. Again, logging library. Any specific tools / books / references ? 4. Why is it bad to use Exception as a workflow tool ? I think that the usage of NullPointerException is justifiable Yes, it's not really elegant solution for converting the schema into self-contained JSON. The idea behind it is to let user define what they really want thorough query, and let the tools convert it into JSON. So, it must handle that by processing the ResultSet.. I'll try to improve it. Thanks!
No, that requires much more extensive OS and C memory model understanding, not to mention that of garbage collection implementation details.
1\. Here's a pretty basic Maven pom.xml from a library of mine: https://github.com/mikaelhg/urlbuilder/blob/master/pom.xml Just change the ``groupId`` and ``artifactId``, remove the ``distributionManagement`` and ``extensions`` elements, and add your requirements like Jackson. 2\. Be sure to set your Eclipse to use the Sun-Style indentation style. 3\. http://logback.qos.ch/manual/index.html 4\. http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl
Its addition didn't make unanimity as far as I am aware but they decided to put it in the Stream API anyway (as part of project Lambda). If only they didn't push the release date to 2014...
I think most problems with Perl can be summed up by its beloved slogan: TMTOWTDI. The problem with this is that assumes that each way is equally good (it probably isn't) and if there are equally good ways, this just makes code confusing. It seems to me that Perl is designed to be satisfying to the writer, not the reader. This is all well and good for toy projects but it is anathema to professional software development. Orders of magnitude more time will be spent reading your code than writing it. Good programming languages optimize for this case. When writing code you should always be striving to communicate your intent in the clearest, most concise, most obvious way possible. If I read your code, your thinking should jump of the screen at me. Perl doesn't make this easy and it makes writing obscure, 'clever' code too easy.
While we are on the subject of practice, and you have acces to another programmer, try some pair programming.
I would like to know the answer to this as well. I guess for the first example "x" would not exist past the for loop.
Test it yourself. It takes very little effort. However, I would guess the answer is neither. The compiler or jvm will likely optimize that out.
I personally was shocked at how early they were claiming to deliver (before it was pushed back). I'm not involved with open jdk development at all. But I'm not surprised to see it was pushed back. 2014 seems more realistically doable.
10\. You'd want to unit and integration test your code, to make sure that when you make changes to it, it'll still work to spec. To that end, I'd recommend using H2 as an embedded database for your integration tests, and including a test data set for it. Then create JUnit unit tests which initialize your in-memory database with a test data set, perform the JSON conversion, and compare the result to what you're expecting. 11\. When you've set up your unit testing, you'll want to automate running your unit tests every time you commit / push something to your version control. To that end, look into Travis CI, which is pretty easy to hook up to your GitHub projects. It'll warn you if you screw up your program enough. 
But why?
I would say it would be identical. At the byte code level, you're pushing a new primitive value onto the stack in either case. You're not allocating memory on the heap, so garbage collection is not an issue.
The compiler will optimize the 2nd snippet. But semantically speaking 2nd snippet is slower.
It should not be; without optimizations, both code snippets should produce the same bytecode.
Yup the same really. The println slows you down all to crap there, since it is a get static followed by a method call. But if you look at the byte code they really do the same thing. So no diff.
If one is faster than the other (and I doubt it will be), performance difference will be negligible - even at a bytecode level if there's no difference the JIT compiler will most likely optimize this to its heart's content. What's more important is that the first one is easier for the reader (both fewer lines and declaring the variable where it's first used), and reduces the chance of a variable accidentally being used where it shouldn't (i.e. after the loop). Edit: Corrected second paragraph following skoh's comment!
Everyone seems to have missed it: the second one doesn't actually print `x`, so the second one is technically faster simply because of that. Ignoring that detail as a typo, as expected the times are identical, even with printing disabled. http://pastebin.com/cEKy7Hfh 
Would you mind telling us what projects you have so far done, what prior education you have on subject and whwt would you like to do?
&gt; What's more important is that the second one is easier for the reader (both fewer lines and declaring the variable where it's first used) Do you mean the first one?
Not necessarily write your own VM, but a deep understanding what the JVM does does improve your coding a lot.
This is an example of premature optimization. If you seriously needed the answer to this for some reason then you would need to profile both pieces.
Oops yeah, thanks - updated!
Hmmm, what did you think it was about? Here's a better title for future reference: "Alternative approaches to avoiding NullPointerException in Java" 
Either one will likely have the compiler optimize the statement to (fixing the lack of x in the second println statment): System.out.println(Math.random()); As you see, there is no real need of a variable declaration. Don't worry yourself with minute performance things, develop in a way that makes it the most readable. In this case, I'd argue that the first is better, especially since the variable is in proper scope. Then, test your application's performance afterwards, and if you see a problem then optimize it if you can. Consider performance on the large scale and not in small non-issues such as this.
I wouldn't mind the pushing if it wasn't done for security purpose on things like applets and webstart (which are rarely used outside of companies). I've been waiting for project lambda for too damn long.
&gt; If it wasn't a primitive data type, but rather an object (say a string), the difference can become pretty significant for repeatedly called chunks of code. I think that's debatable on a modern JVM - the number of objects being created will be the same in both cases, and the number of objects being collected will also be the same.
Step 1: Use Java
I was expecting an anti-Optional/Maybe argument.
Usually it doesn't matter, but for some cases it does. When I say repeatedly called, I mean millions of times. For example, I had some code for image processing that iterated through all of the pixels. Inside of the loops, I was making Color objects. Moving the object declaration outside gave me something like a 60% speed increase. Maybe I'm misunderstanding the reason though.
Purposefully create a memory leak? Here's a link to the same question answered on StackOverflow with the best description I could find. Honestly, I can't say it any better. http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java
Always write test. 
YAWN. ... "Java AWT Reference" !
also, the JIT will do things you can't necessarily predict
I can see your point of view, but absolutely understand their choice. Those security holes made headlines and were a big embarrassment to Oracle and Java.
Follow this rule, it's more important: * **Declare variables at the minimum possible scope.** ]1] It helps readability, prevents mistakes (reuse of a variable, shadowing). For a case such as this, any mildily intelligent JVM ,or other language/runtime for that metter, there will be no performance differences. [1] http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf ,Rule 13. many applies equally well to Java
Why do you consider C# inferior? Just curious.
if this color class (btw, which one?) doesn't do something weird in it's constructor, i wouldn't think that simple instantiation could eat up that much performance, even with millions of calls. The JVM should take care of something like that.
Bingo. The right answer is always "Try it and see!" Anything else is conjecture. If the code doesn't run long enough to measure it, run it more times. Add zeroes to the iteration count until you can measure it. In this case, I'd be shocked if the JIT (or hell, static compiler in this case) didn't optimize them both to exactly the same code. But only one way to find out!
LANGUAGE: There are many things which are 'better' in Java. C# has more language features but many of them are half-baked (enum) or dangerous (structs, operator overloading) or poorly thought out (partial classes). It's just annoying when devs do language feature counts as a measure of a language. Things were left out of Java for GOOD reasons. PLATFORM: Java is cross platform. So &gt; .NET Java has a universal binary. Java gives you 64 bit for free. Any moderately complex app in .NET is a PITA to get up to 64 bit. So many issues with coms and dlls it's often not worth the effort. That's a reason we still see so much 32 bit code on our machines. In Java drop a JAR on a 64 bit JVM and that's all! TOOLS: Visual Studio still cannot merge files properly with TFS. Often files - especially the project files get mangled. Compare the DIFF tools in IntelliJ to Visual studio. You'll understand what I mean. Partial Classes mean that Visual Studio needs to reference *every single file*. On a team that means that as soon as you add a file to the project and another dev adds a file to the project - then the project is usually broken and cannot compile. So forget about continuous integration tools. In Java a broken project is a rare event in .Net this is the norm. Refactoring code under TFS control is totally not usable. You need to rename in TFS which means another dev "sees" that change before you commit. Project is broken again. etc... 
Thank you for the advice. I added a readme file and updated the Licence (MIT License). Best to keep it free for the world. 
Is what you're saying that its better to write an algorithm that works, then optimize it after?
Thanks. Unit Test is definitely the next thing I'll learn
No idea about a GPU based Java compiler or how feasable it would be, but you can check out aparapi if interested in writing your own.
Why do you recommend to convert the project to maven?
Well, my thinking was that Math.random() was synchronized to protect the instantiation of the Random singleton it holds, so the overhead of that would slow things down. I'm testing it now and it turns out that my Math.random() test ran in 56s and my new Random() test ran in 1m52s. I call shenanigans. :)
A quick test on my Java compiler produced identical bytecode for both methods. So the two code snipplets can be considered pretty much equivalent regardless of what JIT does. But in general it's true that javac does little to no optimization and leaves that stuff to the JVM and JIT.
The problem is that you don't know any better. If I have to pound a nail in, a socket wrench will do the job but it will take longer and produce an inferior product. Now if you showed me a guy who's been pounding nails with a wrench for 30 years, he's probably pretty damn good at it - probably better than the 18 year old kid is with a hammer. That still doesn't mean the wrench is the right tool just because it can finish the task or because some people have figured out how to be efficient with it. Legacy software will always exist and it will always need people to maintain it. I suppose those are reasons to learn Perl. I was just trying to point that if you want to learn how to write good software, Perl isn't going to help you.
Though if the compiler is multithreaded already (which I'm pretty sure it is), then the threading model should be expanded pretty easily to run efficiently on a GPU.
I just told my staff "I don't know any better than to use Perl" and they have nominated you as Dumbass of the Week. If you'll excuse me, I have some assembly shit I need to look at, followed by some Java code someone is having trouble with, then some XML parsers written in Python...
I'm saying that you should optimize this code when it becomes a problem. Your time is better spent developing other features instead of micro-optimizing things that you won't even notice. 
so, this is Tomcat with EJB support I guess?
I also might try mounting the project directory as a RAM disk. &gt;EDIT: Turns out that my bottleneck is most definitely CPU. I have an Intel Core 2 Quad running at 2.5 GHz. RAMDisk shows benchmarks about two orders of magnitude (100x better) throughput than my HDD, yet I only gain two seconds (17 -&gt; 15) building the same project. &gt;I'm specifically building an Android project, which still applies because it compiles to Java .class files before running them through the Dalvik dx compiler. The longest step is, by far, the execution of dx. So I'm wondering if that's the one that might benefit from massive parallelization.
my assumption is there is always a java backdoor.
That, make repos smaller by removing jars, and make builds more predictable.
Elliotte Rusty Harold. It's funny, I always found his name quite memorable (don't know why).
Indeed, and with JSF, JPA, CDI, and *lot's* more (and still at around ~25MB) :P
Esmond Pitt : Fundamental Networking in Java.
Java includes great tcp, udp, support out of the box, so general understanding of how sockets and datagram packets work will go a long way. If you need to go low level and mess with the tcp stack directly, then read up on tcp itself first - otherwise socket programming with java is relatively straight forward. I don't think java has a ton of gotchas in this area, so if you understand the concepts in general, java shouldn't require special resources. Good luck!
I've never used JSF, but I guess Tomcat didn't support it before. Does the JPA and CDI in TomEE provide anything more than Spring + Hibernate/Mybatis? 
Depending on your personal tastes, the CDI/EJB-lite/JPA model is cleaner.
Incredible, I was just on that page the second you posted this.
:P
I don't think IBM (and specifically, the old IBM Hursley team) gets enough credit for doing the bug fixes and performance improvements that Sun couldn't bother itself with. IBM is certainly invested enough in Java that its in their best interests for it to thrive.
ok
Well, you can change the args name, as it is just a parameter. Kind of how public void setInt(int blah) { this.x = blah; } has identical functionality to public void setInt(int x) this.x = x; } But for the rest.. **String[] args** specifies the input arguments to the program. It is an array of Strings, where each index slot holds one argument. If you screw that up,any program that relies on input parameters will not function appropriately. 
Beside the point, but you mean ellipsis (...), not a diaeresis (the ¨ in ü).
Nice! :) But it's the 0.6 API - when 0.7 was just released :(
Sounds legit. Just rewrite the program.
If you wrote the program yourself, it should be ~~trivial~~ *easy* for you to rewrite it from memory.
http://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.1.4 The Java Language Specification is your friend. Learn to know it.
This should be in the homework help thread. And I'm pretty sure no one is going to do it for you. We will help you and point things out, but not do it for you. Good luck tho
I don't understand this. You can't rewrite the program because? So you're cheating or you're super lazy. To get away with cheating and being lazy you need to be smart. Linking the notion of a compiler to a decompiler doesn't take a Phd. Formulating that notional link into a search query and hitting "I'm feeling lucky" also doesn't require weeks of training. Get a grip.
Just for fun I entered the title of your post into ddg and google. The answer comes up in both (1 click on the first result in google for me, ddg takes 4 clicks starting from the result).
jd-gui works quite well, but it won't be quite the same as the original, and of course, comments will be gone.
And another cheater rides off into the sunset...
cheater 
Stop using the word trivial, instead of easy. Holy hell, it happens alot nowadays. It doesnt even fit in this sentence.
[Mirriam-Webster](http://www.merriam-webster.com/dictionary/trivial)
Formatted.. public static synchronized void playSound(String url) { try { Clip clip = AudioSystem.getClip(); AudioInputStream inputStream = AudioSystem.getAudioInputStream(new File("C:\VHProject\Audio\" + url + ".wav")); clip.open(inputStream); clip.start(); } catch (Exception e) { System.err.println(e.getMessage()); } }
*lose
Good luck getting anything but a failing grade with the code generated from the .class file. Next time cheat better.
YHBTYHLHAND
Why did you feel the need to possibly facilitate in an ethics violation?
Have you even tried looking at the exception message that's printed?
Well without commenting on your usage of the API (which admittedly I don't know this API), it seems like you are using escape sequences in the file path string. If you want to have a resultant String with the character pattern "C:\" you need to encode the String literal as "C:\\\". Placing a backslash into a string tells the literal parser to insert a different character, and that new character is specified by the character after the backslash. Read this: http://mathbits.com/MathBits/Java/Introduction/escapesequences.htm Better yet, you should not construct File paths via "\\" at all, and you should learn to correctly use the File class and its File.separator constant. Start here to learn more about avoiding backslash literals: http://www.roseindia.net/tutorial/java/core/files/fileseparator.html
Can't IntelliJ do this out of the box?
probably an openJPA-centric JPA tutorial. i could use something like that as well. some Hibernate details sprinkled in would probably be good too. I mean, that's what most of us are actually using in the real world, right?
From the name, I thought it was an Apache module for running ColdFusion. *shudder*
it prints "null" everytime
I do have C:\\ reddit must have changed it when i pasted it..
Before I tell you anything, I want to make absolutely sure that you want to play Runescape. I mean ABSOLUTELY SURE. Still want to? Fine. Here's what I would do. If you have already uninstalled and reinstalled java, restarted your computer, and that sort of thing. I would have to guess that it's a problem with either the game or the browser. Did you try running it in another browser like IE or Firefox?
No, IntelliJ can do smart incremental compilation, where only recently changed classes/resources are being compiled/processed, but it will have to restart or redeploy your application anyways. JRebel on the other hand takes benefits from this incremental compilation and reloads only classes that changed without restarting/redeploying.
this happens more and more.. people are "submitting" questions without even using a search engine (let alone searching the java subreddits - I don't know how many more "what's a good Java book" posts I can manage), or in other cases using a debugger ("why does this loop always print 'x'" Well, debug it and step through yourself...). 
A Mockito book is available. FTFY. 
Thanks for the tip!
Hahahahahahha yes. I like to PK when im baked. Dont judge lol. Trying now
I totally agree with onenbit here. Thank you so much for the advice. And I too was going to mention this in my blog. But hey, you got to admit; sometimes deadlines make you do pretty crazy stuff.
In what ways do you think it's preferable? I've never used it. 
The 3rd edition of Thinking in Java is fairly old(~2002) and predates Java 5 which was a major revision in terms of language changes. You are better off with the 4th edition but that is not free. If you are looking for a free resource [Introduction to Programming Using Java, Sixth Edition](http://math.hws.edu/javanotes/index.html) by David J. Eck is fantastic book.
Try running it from their custom launcher instead of from a browser? My brother (yes, my brother) has had luck with firing it up that way after updating to SE7U21.
That's funny, because its being used to integrate Java pieces; but it does seem to be a ColdFusion-oriented module. Look at the [Linux install instructions](http://www.modcfml.org/index.cfm/install/web-server-components/): it does attempt to process CFM files. And when I tried using the Tomcat part (which I apparently didn't need); I recall it throwing an error that had me disable it and not look back. **tl;dr**: I think there's truth in your snark.
People come here often asking about how to learn Java. You can refer to these threads or other ones using the search feature on the toolbar at the right. [What is a good beginner book for Java](http://www.reddit.com/r/java/comments/fxahl/what_is_a_good_beginner_book_for_java/) [Starting Java?](http://www.reddit.com/r/java/comments/1cx3rx/starting_java/) [Looking to Learn Java](http://www.reddit.com/r/java/comments/1ctq82/looking_to_learn_java/) [Any good learning (interactive) websites for Java?](http://www.reddit.com/r/java/comments/141qnp/any_good_learning_interactive_websites_for_java/) If you ever want help with anything, feel free to message me personally and I'd be glad to talk with you/work with you on a project.
Take a look at the [Oracle tutorials](http://www.oracle.com/technetwork/topics/newtojava/overview/index.html), they are good. Be sure to read the [Java Code Conventions from Oracle](http://www.oracle.com/technetwork/java/codeconv-138413.html) Another good resource is the /r/javahelp subreddit. Try to figure solutions to the problems there. Most of the problems I've seen so far are on a rather low level and can be solved even by a *fresh brewer* (like me as well ;) )
Highly recommend: Effective Java by Joshua Bloch - http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;qid=1366881471&amp;sr=8-1&amp;keywords=joshua+bloch And a book that applies more generally to programming: The Pragmatic Programmer - http://pragprog.com/book/tpp/the-pragmatic-programmer
The 4th addition of that book was published in 2006. Java has undergone a lot of changes in the last 7 years. I haven't read it, but I have been impressed with the other programming text books Dietal and Dietal have written. You might try this book, it is only 2 years old: http://www.amazon.com/Program-early-objects-Edition-Deitel/dp/0132575663/ref=sr_1_1?ie=UTF8&amp;qid=1366882966&amp;sr=8-1&amp;keywords=java+dietal 
People still buy technology books?
While the short answer is yes, I recommend you look into JavaFX since it's the newer technology.
That's fair enough. Thank you. 
Do you remember the title of that book? Sounds to be an interesting read. 
http://www.amazon.com/gp/aw/d/1590599799 Basically, the first chapter is on the theory of DI. When I first read this, I was like, wtf. I bought this book to learn spring not to build my own DI. Then I realized that the first chapter was giving me enough context so that everything else made sense. Don't skip the code examples in chapter one. It's really helpful to understand how to build a registry from scratch. 
Thinking in Java is the best.
You have a null pointer exception in there. Probably it can't find the file. Break the new File into a new line and check for null.
Yes, certainly. You override the `paint` and `repaint` methods of Frame or JFrame, and draw on the Graphics object. Search for those keywords in Google and you'll find tutorials. Consider looking into books on Java game development. "Developing Games in Java" and "Java 1.4 Game Programming" are two that I have and both explain making a 2D game in Swing/AWT (DGiJ also goes into making a software 3D engine/game which is really cool).