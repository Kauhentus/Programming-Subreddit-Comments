Lol no
I've used TestNG for a decade and it is quite excellent. For complex cases I define my own life cycles, generate test input based on method annotations, and run tests in parallel. For advanced cases, prior versions of JUnit were extremely brittle, slow, and frustrating for modestly advanced cases. JUnit5 is a redesign that closely mirrors TestNG by being a new framework under a recognized name. It is still quite new, so it will take a while to propagate and support by the ecosystem has been very recent. I would not use JUnit4 or earlier, and have moved teams to TestNG who have been happier. I wouldn't move from JUnit5 or TestNG to the other, as their productivity is similar. If a team knew one better than that would be my preference. I have a little more faith in TestNG as being well designed up front, rather than being rewritten every few years from scratch with a new model to scratch the itch of a new team.
Why would it? Most startups and even a lot of larger companies are getting on the release train schedule now. It is only those in companies with the mentality like what you are describing that are falling behind, and they dont care. Same as those that still have cobol and main frame shit from 50 years ago (though I hope they have updated a bit since). That vast majority of people are moving at faster paces now, what with SCRUM, iterative development, CI/CD release trains that just make way more sense than the old waterfall and other methodologies that some still stick to. Its a whole new world out there. :D &amp;#x200B;
This is great, thanks for posting. I don't always have time to tinker with new features so these videos are helpful to get started.
Holy moly, this post comes to the perfect time... Thanks a lot, looks suler promising
Type alias doesnt help you with that
Hopefully never. They hurt consistency cross-project, creates confusion and dont bring much to the table.
The overall rate of changes (throughput) to the Java platform remains more-or-less constant, because the resources we have to develop Java remain more-or-less constant (I work on OpenJDK at Oracle but speak only for myself). What changes is how those changes are distributed over time (latency), meaning features are introduced over shorter intervals but in much smaller chunks. While companies will need to adapt their process, we believe that the overall effort (after an adjustment period) required in keeping up will either stay the same or decrease. This change was necessary (and requested) because the software landscape is changing, and to stay competitive and appealing Java should move at a pace similar to other platforms (Node, .NET, Go). Whatever choice was made, the decision would have either somewhat alienated organizations that have already adapted to the new landscape and expect or more gradual but steady pace or those that have not. As we try to adapt the platform for the needs of the next twenty years rather than keep it more aligned with those of the previous twenty years, I think this is the right call, as other software components have also shifted, or are shifting, to the new style, and so organizations would need to adapt regardless of whether Java chose to do this or not.
Pretty much. One of the reasons I prefer working on the back end. 
3 Years between LTS Releases (Sept 2018 -&gt; Sept 2021) That is more than enough time to "keep up". The infrequent and unpredictable releases of the past caused those large lumber organization to get lazy. Given some time updating and staying on a current release will become part of their culture...or they can move on to some other language that will enable their laziness.
I wouldn't necessarily call it lazy, just a more bursty process. E.g. running continuous integration and continuous deployment isn't less lazy than an older process of manual integration tests -- in fact, it can be cheaper -- it's just different. 
Maybe lazy is the wrong word but they are avoiding the time cost of upgrading. The slow nature of the major java releases has allowed this and it has held the entire ecosystem back. There are still many libraries that won't embrace the java.time (JSR310) functions of 8 because they have users on Java 6
Junit mockito and power mock for statics, but tbh and imo testng is not that different
&gt; it has held the entire ecosystem back Back from *what*? Is there a race that Java is losing?
&gt; corporate financial institutions I'd say corporate *any* institutions. If technology is not your primary business, and your existing software works, your largest current risk is probably your developers retiring or dying. It's up to you whether or not that's worth it. Most of them have clearly decided it is not. Throw-away culture is just as stupid when it comes to software as anything else.
Back from adopting new new features like java.time For example many libraries still are using joda.time because they don't want to drop support for Java 7 and below.
I used MessagePack a long time ago worked great
I actually prefer Joda-Time's way of approaching things over JSR310, but that may just be because I'm very used to it. I get that there are problems, but they're never problems I had in particular. In my case, I'm stuck on an app that isn't certified to use anything past Java 7, so I actually have the opposite problem: libraries using JDK8+ features are unavailable to me. I find it particularly frustrating when they use JDK8 features (like `Supplier`) seemingly just because they can, when retaining backwards compatibility would have been very straightforward. Even basic build tools like Ant have split into pre- and post-Java 8 branches. This is why I appreciate that Kotlin compiles to JDK6.
COBOL is alive and well. I‚Äôve heard stories that some companies have almost bankrupted themselves trying to migrate it to newer technologies. 
I'd be curious to know what you prefer in Joda-Time over JSR310 which was written by the creator of Joda-Time Maybe you just haven't had a chance to really use java.time yet.
That's entirely possible! I'm just used to the syntax and so it takes me longer to parse java.time code in my head. I did some Googling after I read your comment, and I see that java.time has some features (like daysBetween) that I initially had thought were missing! They're just in a different place. So yeah, they're pretty feature-compatible in terms of what I use them for, so it wouldn't be a huge deal to adjust. [Threeten Backport](https://www.threeten.org/threetenbp/) should be interesting to play with. I'm not sure why this wasn't included as part of a minor support release of the earlier JDKs.
This looks like a great talk. And now, my lecture on senseless upgrading: If your software works, if it's secure, and if you don't gain any profit by doing more frequent releases, the rapid upgrade cycle forces you to throw away perfectly functional tools. We'd think it was stupid if someone went out and bought a new lawnmower or a new power drill to replace their perfectly functional model every three years. This is the same thing. And it *does* force you. Technically, an employer could choose to stay with Java 6, but they will find their developers leaving as they fall farther behind the release cycle and will have a harder time hiring new developers. The tech startup business model is imposed on you, even if you expect the lifetime of your software to be fifteen years. The adoption of agile programming by software startups has driven the rapid release cycle which itself is driving agile programming to everyone else. It's the red queen hypothesis applied to development. Everyone is running as fast as they can just to remain the same. We didn't *have* to do it this way, but alas, we did.
Waiting for Cucumber to work with Junit5 üòä
Hmm, maybe not strictly - maybe an IDE could offer a warning? Looks like Kotlin's inner classes wpuld be more what I'm after.
Perl is write only :)
Not to mention that with out eventual move to quantum computers at some point, performance is really a non issue.
Hey, thanks for your work. Since Junit 5, I switched from TestNG back to it again.
The difference can be explain mostly by the effort needed to grow the HashMap. A standard HashMap grows by a factor 2, so a single HashMap would easily grow much faster than a HashMap of HashMaps as the inner HashMaps grow less. With growing the HashMap you also need to rebuild the map, which obviously takes more time when it becomes larger. If you have a rough idea of the the number of entries you can expect, create the HashMap of the proper size (instead of the default capacity of 16). Maybe also change the load factor to something else than 2. With that I *think* the "TupleMap" will outperform. &amp;#x200B;
It's highly debatable whether those will be in the hands of the average person within any foreseeable time period. Arguing that the major web stacks will all eventually move to wasm is enough of a leap for me at the moment.
I‚Äôm sure most companies have had a tough time trying to rewrite legacy apps in a modern language. That‚Äôs a problem of nearly every legacy app regardless of technology stack. It certainly isn‚Äôt any indicator of how ‚Äúalive and well‚Äù COBOL is. COBOL may be used in old legacy systems but how much new adoption does it have? If writing a new app, why would anyone today choose COBOL over something like python? Does COBOL have any new adoption? At all?
What have you tried? If you have List&lt;Integer&gt; integerList; you can add primitive integer's and they will be autoboxed into Integers. 
If you are talking about an ArrayList, you can just add that normally with the ".add()" method. If you are talking about an array (of size n, for example), you have to create a new array, consisting of n + 1 variables, with the first n being the old array's variables in the same order, and the (n + 1)th being the new integer.
http://lmgtfy.com/?q=How+to+append+an+int+to+an+empty+list+java
I hope this gets integrated into Optaplanner, performance boosts are always great for that software
http://mathworld.wolfram.com/NumericalDifferentiation.html 
Numeric, at least, is pretty easy. There are well-known algorithms for handling that. They're even parallelizable. Symbolic is a bit tougher, but it's a classic exercise from Structure and Interpretation of Computer Programming, which is available online. You'll need to adopt it to Java though.
Very interesting problem... Here's some resources I found, hopefully one of them is helpful. Good luck! [Java Algebra System (JAS) Project](http://krum.rz.uni-mannheim.de/jas/) [Algorithm for symbolic integration](https://en.wikipedia.org/wiki/Risch_algorithm) [A python library for symbolic mathematics that supports differentiation and integration. You would need to use Jython (or a similar solution) to leverage this.](https://www.sympy.org/en/index.html)
**Risch algorithm** In symbolic computation (or computer algebra), at the intersection of mathematics and computer science, the Risch algorithm is an algorithm for indefinite integration. It is used in some computer algebra systems to find antiderivatives. It is named after the American mathematician Robert Henry Risch, a specialist in computer algebra who developed it in 1968. The algorithm transforms the problem of integration into a problem in algebra. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Basically, no. The problem, as stated elsewhere is that there are decent options for generically testing LDAP, but as pointed out, AD is its own beast with subtle differences. We've found there's just no substitute for a real system test environments. You could take time to set up decent mocks with UnboundID, etc. but they don't ensure that stuff doesn't change and they're easily to get slightly wrong in corner cases. &amp;#x200B; So, my advice is to keep the AD-specific code as thin and well organized as possible so you can do simpler tests for everything else. But, it's probably best to test against real servers.
Flyway &gt; Liquibase
I vaguely recall my cobol days (was already more or less out of flavor when I started coding), but I suspect it must be a whopping lot of code and not something easily turned in to a monolithic or microservice app if it was so difficult to do, or they just couldnt find developers/architects that knew cobol and modern day languages. :D
This sounds extremely promising
I don't know about pain, but I do like my brackets and also semicolons. The real fun is the pain of invisible differences between space and tab characters that the interpreter definitely cares about.
Just writing clean, concise, readable code all the time is better than *relying* on the IDE. Thank goodness for auto indent and automatic variable renaming though.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;Implementing is left to the overachievers. To be honest that's what the entire post feels like. First you start your post on reddit by insinuating that it will be not well received because of the functional programming, which I think is a bad tactic to explain downvotes in advance. I didn't read the entire post, since I know how to use functional code in Java, but this here &gt;If you've been exposed to lambdas (whether in Java or Kotlin), you already know at least the basics of what lambdas are is kind of a statement for the post. It's not anything like Java or Kotlin are the only programming languages supporting lambdas; for me this sounded like there was difference between the lambdas of those two languages and all the others. 3/10. 
I work in a company which has a lot of mainframe apps. And the problem is not migrating to new technology. The problem is spaghetti code and nobody really knows why one feature or another was introduce. Heck, nobody knows what features it has. Adding anything trivial to that mess takes up to a year or more of analyzing stuff like who uses this database table and what will happen if we add new column. The worst story of one seniors from mentioned team, that some departments were allowed to write code in their own language. This was back 30-40 years. Nobody cared about standards how they do now.
&gt; bad tactic to explain downvotes in advance If the gist is bad it should be downvoted! I didn't mean my writing is perfect and the only reason it would be downvoted is because it's about functional programming. It's just an observation that pretty much all content about functional programming is reflexively downvoted on /r/java, completely irrespective of how good or bad it is.
Well, Maybe it‚Äôs worth a Try
Can you back up that claim in any way or is this just your personal opinion? 
It was so bad everyone got up and Left. That's when I knew I had to Fold and get back to regular Java. I... I'll show myself the door üò¨
It looks like in your [submission](https://www.reddit.com/r/java/comments/b1bchq/can_anyone_please_explain_to_me_why_this_code/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for replying. Appreciate your perspective. I can see why you would like to "move with the times" etc. From my perspective, I work on a two-man team maintaining (and enhancing) a large codebase of a shrinkwrap product, which has a considerable number of blue chip financial institutions as customers. These are the customers moving at glacial speeds, in part due to the requirements put on them by financial authorities; a small company like ours can in no way influence the adoption rates of Java. Now, if we do not upgrade to latest LTS versions of Java, the support costs for Java are going to make our product uncompetitive. If we do upgrade, we run the risk of not being able to deploy in these datacentres, but even if that isn't going to be an issue, it severely reduces our ability to keep our product competitive in the market place, because we are burning significant resources in getting a large code base upgraded. For Oracle and Java probably insignificant, for us, potentially "life threatening" &amp;#x200B;
Just my personal opinion ¬Ø\\\_(„ÉÑ)_/¬Ø My impression of /r/java is that there's a lot of hostility even to basic things like using Optionals instead of null, using streams instead of loops etc etc- and those are features Java has adopted. There's even more hostility to things that haven't yet been adopted, like Exceptions can be replaced by Eithers and Try's etc etc. I happily admit I may very well be completely wrong. I sure hope I am, because I quite enjoy functional programming and hope Java adopts more functional features.
Note that `DoubleMap` is dangerously racy.
&gt; Groovy which is less strongly-typed than Java (read: not at all typed) Doesn't Groovy have optional static typing?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don't see where you're getting that /r/java is against functional constructs at all. For example Venkat's video's on Java 8 were well received here and got a ton of upvotes.
Cool! I mostly just wanted to share the gist. Derailing into a debate about /r/java being hostile to functional was unnecessary of me, I've edited it out of the original post.
One of the Drools founders, Bob McWhirter works at Redhat, too.
&gt; dick around with xml files 2007 called, they want their XML files back and for you to switch to annotations already.
You can write unreadable code in any language, lisp and java included. Please stop being a language bigot. Perl had unmatched power for its domain (Unix administration, scraping, reporting, filtering, information retrieval). The Perl regex system was exported in most of the fashionable and trendy languages of today. If you can't use a hammer well, don't blame the hammer. 
/r/javahelp
I think maybe this was true five years ago, but most Java devs have happily embraced Java8 now. The latest flamewars have all been over the use of local type inference (`var list = ...`). 
I can catch that reference!
My experience is that Desktop apps are cheaper to develop and deploy as they requires no servers, this no in house infrastructure team or cloud. In big companies. Any webapp quickly become a long project involving tems around the word, ie Devs, Infra, Securiy, Business ... And you can spend months, sometimes years discussing the proper way to do things before writing the first line of codes. The time you reach your minimum viable product is usually long. Whereas desktop apps is suited for small user base applications that will be used locally or on an intranet. The devs teams are closer to the business and the project is more agile, you reach a minimum viable product quicker. And you focus on delivering value quickly. 
How many more times are you going to post this? Stop **spamming**
Do you know from where I can get some study books about 11 OCA?
You're right, it does, but I've never used it for testing.
\&gt; (If (you learn Lisp you will be a better programmer for the rest of your days.) (((And its true IMO/IME)))) Fixed that for you.
I am sorry to hear that, but I'm interested to learn more about the circumstances. What requirements by financial authorities restrict the use of recent Java versions? How would they be different for most other languages, which also move at a faster pace than Java used to?
Try label printing in a web app. Not doable unless you want the user suffer through print dialogs over and over. The web still has no printing api that can avoid the dialogs and notify when a print hits the print queue. 
thank you very much guys
thanks god it's like 2 3 years i stopped to work with jsp, especially with html5 and angular or the simple js, but for that i use vscode :) 
That's been my experience as well. Part of the reason for that is that many (most?) desktop apps are acknowledged to be in-house line of business apps only. They know there aren't going to be many hundreds or thousands of users. The other reason usually depends on the organization having a mature rollout and update strategy for these applications. Without that, a smooth desktop rollout experience is very difficult. And while, that may not require near the overhead that you mention around a web app that's exposed externally, it's still not free. The other reason web apps are comparatively expensive is simply because they have to be if they are exposed externally. You cannot simply leave endpoints out on publicly available networks without extensive work to ensure security, reliability, etc. That's enough said about that, but what I often find with organizations I've been in is that they often have made an app into a web app, and it doesn't need to be publicly available, and it doesn't need to have a huge install base. In other words, the two best reasons to make an app for the web aren't there. Then they go about taking all the usual pains to secure the app, make it scalable, etc. and it's still just LOB app! There is a definite cargo cult culture out there among application architects who don't actually want to make the hard calls and have multiple technologies in their toolbelt. They would rather that all applications be web applications simply because they don't want to think about it, want to take glory for these supposedly huge external web apps they've designed, and they really don't seem to care about all the extra expense they incur in doing that. In the meantime, they leave huge holes in the functionality of the web apps relative to the precision, control, and speed that an actual rich client experience could deliver. 
Awesome example! Yes, I had forgotten about this niche, but I"ve bumped up against it several times for check printing, label printing to paper, and label printing to etching machines. Barcode reading isn't too bad to integrate into a web app these days though. And yes, let's not forget queue control either. Just ensuring that the app has sent the job to the correct type of printer if that's a requirement can also be quite problematic from a web app. Or at the very least, it would require several layers of architecture that a typical rich client app simply wouldn't need. The web app would need an API to a printer control server or cluster, those would need to present a queue API, printer selection API by features, and then there needs to be security on those, etc. A rich client app could simply query the installed printers by name, feature, etc. and then take the user's request from there. There's many other scenarios like this that are simply more complicated and expensive to implement with web architectures.
I doubt there are any right now. But according to post: &gt;Most of the topics are same as before. The only new addition is the Modular functionality of JDK. &amp;#x200B;
Which still has too many people talking about the javascriptisation of the language, completely failing to understand that Java is just as strongly typed as it was before Java 10.
Hey Stuart, has there been any discussion in Oracle about adding more nomadic types beyond `Optional`?
I'd also appreciate your feedback on these : https://www.marcobehler.com/courses/18-java-8-features 
It's not a niche really. A lot of business apps need to be able to print. Now you can use server-side printing but that fails with label printers as many don't have network support. 
Looks nice. It would be even better if you added an implementation for the JSON-P specification (that's the official spec for Json parsing in Java). &amp;#x200B; I guess you can reuse some of this code and just put it behind the JSON-P interfaces :) 
For people prefering Java DSLs: [https://github.com/helpermethod/molten-json](https://github.com/helpermethod/molten-json)
Yeah, the server-side printing is tricky. That layer would typically need metadata management of its own around the printers that would support the queries the printers themselves do not. Legacy or dumb printers would need to have that metadata entered by a human in order to be usable, and some of them can support the metadata queries, but typically only for certain brands. 
FYI, as someone who has the Oracle professional cert for Java 7, i have mixed feelings on it. If you think employers will care when you're interviewing, they won't, they don't, and chances are they won't even have heard of the cert. However, the test forces you to know Java insanely well, like better than anyone who is actually a developer would have to. So overall I'm still glad I got it, because those skills proved invaluable so far with my career.
It's good that they have published the upgrade exam as well. I only need to learn modularity and some extra stuff to upgrade. Not bad at all. 
It speaks a lot about you compared to other folks. It takes some determination and effort to achieve something. 
Can confirm. Some seniors still struggle with Streams and Lambdas. And they perceive certs as "useless". However, they don't push themselves to learn "new" Java syntax. And of course, whenever we touch upon Java 11 and modules, they curse as unnecessary change.
I'm a huge kotlin fan but I agree with other commenters. There's no reason to constantly promote kotlin articles in the Java subreddit
I personally always try to keep up with the newer stuff. I can say I haven't used anything newer than Java 8 in production code but I at least try and play with it in my spare time so I'm familiar with it. There are devs where I work tho who are still using Java.util.Date instead of LocalDateTime, which concerns me.
Kotlin is extremely tied to Java. Kotlin is "fixing" the lacks of the Java language, and can be seen as a Java replacement: I migrated to Kotlin, and I'd never come back. That guide has been written for Java Developers in mind, and I thought it could help some developers to do the switch. What would be the best sub-reddit then? 
&gt; My impression of /r/java is that there's a lot of hostility even to basic things like using Optionals instead of null, using streams instead of loops etc etc- and those are features Java has adopted. I follow Javit pretty faithfully (at least here once a day) and I haven't noticed any hostility. I think Java has adopted several FP constructs and the FP orientation in part. So, I don't see the hostility. However, I don't think most redditors on Javit want to go the full FP route (nor for that matter does the Java team). Perhaps that's what you're picking up on. Either way, though, I'd say just do your thing without telling readers in advance what their reactions are likely to be, and you'll get more response on the technical points you make. Cheers! 
I like it. This is well documented and shows useful examples right away. That helps me understand what it does for me. &amp;#x200B;
I am OCA and in the road to OCP. I learnt a lot studying those certifications. Even in the first chapter "Ohh, this is going to be a easy one" gave me a couple of surprises. The exam in pearson-vue is not that expensive. I think is worth it.
Yes but can I make the title bar dark in windows???? It bother me way more than it should - and yes I know that I can change my global windows color dark and have it hat way but that‚Äôs not the same thing.
awesome! thanks for sharing üëç
 *Wait, my friend, wait* :D
It's a winning combo. JUnit 5 is also quite nice. I'm loving the nested classes for doing behavioral testing.
Its nice to have some functional programming in a language like Java, Lambdas are really nice. However, this doesnt mean FP is the solution for every problem. Do you really need functors and monads in an OO language like Java? What are the benefits? You have to ask yourself these questions before you get excited at FP, in a language like Java FP is meant to complement OOP, not to replace it. If you want FP for all, you need to use a different programming language. 
The kotlin subreddit. Duh. People come to this subreddit because they want to learn about Java. I agree with you that I only use kotlin for personal projects, but I use Java at work. People here rightly feel annoyed by getting spammed by kotlin people promoting that language over Java. You and I may have an opinion about it, but others here might not. You're not "helping", you're evangelizing. I wouldn't want some missionary coming up to me trying to push Jesus on me, and people here don't want the same from you or anyone else about kotlin.
It's not Jetbrains' fault if theming windows - in an OS called "Windows" mind you - is kind of a PITA.
&gt; Do you really need functors and monads in an OO language like Java? We already have them. What's the issue exactly?
The issue is, do we need to use them? Java is an OO language, there are other ways to complete the same tasks. I fail to see why going full FP is better in this case. 
I'll take lack of curly braces in exchange for lack of java's pretty extreme boilerplate any day.
Nice. The templating looks helpful. But for the sake of snarkiness: val json = """ { "theJcp": "is why", "we": "can't", "have": ["nice", "things"], "kotlin": "$variable interpolation is really nice too", "hopefully": { "jdk12^H3": "gets this right" } } """
All of your examples appear to be in Kotlin. This is a Java subreddit.
Only time I've ever used the string constructor is when wrapping around a byte[] of character bytes, usually when dealing with encoding and decoding values. Otherwise just use the literal.
Dammit, I'm old. For a moment I wondered what happened with my tty settings and why is the \`\^H\` not a \`\^?\` ...
Loving the new high contrast theme üòé
Dont get a book. Follow tutorials and build along with them. Then, start making small changes and small additions.
Can I use int for construction
You just proved my point. The handling of these semicolons is rather complex. Just imagine that it is your job to implement this parser that has to handle 'missing semicolons' errors internally and recover from them. And do so in the exact way the spec tells you to. This is a whole lot harder than just writing a parser that simply fails on missing semicolons. This complexity means parsers will be harder to implement, parser may be more buggy as a result. The complexity also affects users. Just try reading about and understanding the rules around these optional semicolons as a user. Then... also this 'recovery' can do surprising things (which is why Jslint encourages as 'good practice' to put the semicolons in to avoid these pitfalls). All of that mess and complexity... really... IMO it just is not worth the minor inconvenience of typing a few semicolons to terminate your statements properly.
If Perl is just a more powerful Awk, then great. And I agree that Perl regex is the gold standard. That said, I see Perl used for things it is completely inappropriate for. Any fairly large scale software project would qualify. And specific use cases, such as someone who thinks he can parse XML using regex's. But he really can't do it correctly. I can always come up with a fail case that is valid XML. It was a long time ago I looked at Perl. But as a serious programming language. (not quick and dirty and small) One thing that didn't leave a good taste was that I seem to recall a lot of things had various side effects on global variables. I agree use the right tool for the right purpose. Which I think makes me not a language bigot. &amp;#x200B;
&gt; And of course, whenever we touch upon Java 11 and modules, they curse as unnecessary change. While modules may not be strictly necessary for application code (and you don't have to use them), they offer some great benefits to maintainability and security (once the ecosystem adapts etc.). However, modules were absolutely necessary for the continued development, maintenance and security of the JDK itself, regardless of whatever application developers (who probably have never really used them) think of them. 
Each tool has its use. I am sorry if I offended you but I am tired of reading perl or X language bashing where people just cannot use the right tool for the job. Perl is a better gawk, but not just that.
Except if the language is properly designed, so that e. g. every new line either opens a scope or closes an expression instead of fixing errors internally like in JS.
People still use Spring XML configuration?
Sometimes, yes
Honestly, these themes are good but if you want a really good theme, I recommend the plugin called Material Theme UI
No you‚Äôre right, it‚Äôs definitely a windows thing. I didn‚Äôt mean to suggest otherwise. But of course, it **is** possible, as Adobe products demonstrate nicely.
Why would I use this over something like Jackson, Gson, or Moshi?
Why does that matter? Hashmap is also dangerously racy.
There's a couple pre-built themes for javafx. I've never ran into a material one, but one I've used in the past is [Flatter](http://www.guigarage.com/2013/09/flatter/)
Annotations are just as cancerous in their own way. And once one of these infects a massive codebase it will be there forever
There doesn't need to be a specificly Java 11 release of it; Java is forwards-compatable, so you can use any older version library on a newer version of Java. The main issue is when using a version of a program meant for a higher version of Java. For this project, you can just use the \` 9.0.8 \` version of it for Java 11+
It is not a replacement of Jackson/Gson/Moshi. Those libraries aims for serialization/deserialization. You need to create classes or use their APIs to build objects first. Suppose you don't have the classes to be serialized, JsonTemplate can be a choice. JsonTemplate aims at using a json-like DSL to generate schema-compatible json strings. The exact values in json is not the concern but the schema is. 
I don't understand where the values for the `@` references are coming from. Ok, so you write `@i`, but how does the software know it should be 23 and not some other integer?
Why wouldn't you create the class? for the given examples, you have something that looks like this { name : John, age : 23, accountBalance: 30.4, married : true, role : programmer } However, it would be super simple to make a class that looks like this @JsonAutoDetect(fieldVisibility = ANY, getterVisibility = NONE, setterVisibility = NONE) class FooDto { String name; int age; double accountBalance; boolean married; Role role; } Nearly the same number of lines of code + type safety. And if you use Jackson + Afterburner, it will be just as fast as any DSL. So my question remains, why would you prefer this over one of the many json serialization libs?
Oh, maybe I should be more clear. The problem was with eclipse ui framework called SWT(Standard Widget Toolkit). Seems like early versions not support functions styles added by class, like described in this docs https://www.vogella.com/tutorials/Eclipse4CSS/article.html.
Did you even read my comment?
Monokai theme from that package is my favorite &lt;3
nice test case! I will consider it.
Thank you for the suggestion. For now I am not aiming for JSON parsing. This definitely can be a nice feature to be added.
Nice! It is similar to one of my initial plan. 
in Some(Future)
Nothing means Material Theme
@i means "it is an integer and I don't care the value" (if this is your intention). Therefore it is generated randomly. @i(23) means "it is exactly 23"
I see. So this is basically a tool for generating random JSON, for example for test purposes? Could not `@i(23)` be more succinctly written as `23`?
&gt;should i use vanila javaFX and it will be sufficient Before anyone can tell you they'd need to know what your use case is first. The Java 9 version is a Java 9 module which (should* also work in Java 11... assuming the project iself is also a module. I'm not entirely sure if its possible to use modules to a non modular project. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you for the suggestion. I haven't used Afterburner and I will definitely have a look at it. &amp;#x200B; JsonTemplate, in some cases, can be more precise about the "intention" of the program. I have seen cases that people explicitly set values, like "1" for an integer field in json. Then, my confusion is why 1? why not other integer? There are also cases that people name variable as "dummyXXX" and put it in json. My confusion is why call it dummy? Is it because the value is fake? The intention of explicitly picking up a specific value, in some cases, is not clear. It would be nice if I can describe my intention in code. Everyone can immediately understand what my code is doing. JsonTemplate provides a declarative way of giving values. In such a case, in my opinion, it is clearer than explicitly set a dummy value. &amp;#x200B;
yes, the tool is inspired by issues in testing. But it can be used more widely. You are right. @i(23) can be written in 23. Explicit typing is helpful in case of using a different default type.
Keep up the good work!!
&gt; yes, the tool is inspired by issues in testing. But it can be used more widely. Right. I was confused when I read the README, but now it makes sense. &gt; Explicit typing is helpful in case of using a different default type. I can see the point of `@i` and `@i(max=100)`, but I have to admit the point of `@i(23)` eludes me.
&gt; o -&gt; o What a nice trick
+1 for Material and its syntax highlighting schemes. And the Rainbow Brackets plugin makes it even prettier/easier to read.
Never knew rainbow brackets existed, thanks for letting me know!
THIS!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Interesting 
.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Eh, idk. I'd rather have system title bars than whatever Photoshop does tbh. For me those have always felt very awkward.
Add this to the list of things I didn‚Äôt know I needed...
Ayyyyy
Wow this looks awesome, just read the JEP.
 String template = "{" + " name : @s," + " age : @i(max=100)," + " role : @s[](min=1, max=3)," + " address : {" + " city : @s," + " street : @s," + " number : @i" + " }" + "}"; Damn, all these Java release with all these new features and they _still_ don't have multi-line string support. 
I have seen a fair share of those web apps. They tend not to survive long either and sometimes are even dead before going to production as the user needs have evolved quite drastically during the 1,5+year the project has been going on.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
One big reason not to create a class is that the structure of the json might itself be data driven and hard coding it into a class isn‚Äôt an option. I would ask why create a class when you don‚Äôt have to?
"suppose you don't have the classes to be serialized" &amp;#x200B; From the [Gson README.md](https://github.com/google/gson) &amp;#x200B; " There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. "
&gt;However, the test forces you to know Java insanely well, like better than anyone who is actually a developer would have to. This is the sole reason I am seriously considering the cert.
https://bugs.openjdk.java.net/browse/JDK-8208520
Even I switched back to Eclipse due to familiarity with Ecilpse and did not find anything lacking in Eclipse which was present in IntelliJ
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
https://www.infoworld.com/article/3340368/java-thread-sanitizer-project-proposed-once-again.html
Thanks for share!
what is Afterburner?
TL;DR version The Tsan project would investigate how Google‚Äôs efforts in thread-sanitizing could be made general enough to be pushed into the mainline Java project. There is also the possibility that Google‚Äôs efforts would be rejected for being too specific. 
&gt; nomadic types Types of no fixed home, roaming from one package to another.
Weirdly my phone doesn't know monadic. I'm gonna leave it. :)
"Presumed not to be enabled in production jobs."
It looks like in your [submission](https://www.reddit.com/r/java/comments/b1schj/creating_a_reference_problem/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If you want guaranteed ordering of bean instantiation or resolving of circular references. Using XML config cab also keep you from having spring dependencies in library code. I'm not a fan of any of these reasons, but they are reasons.
Are you trying to scary ppl?
Haha no I‚Äôm not ! 
do you log debug in production?
Groovy's pure interpreter was dropped in 2006 or so. I mean a mode of operation that didn't involve Javac or ASM-style bytecode engineering at all. After that the interpreter was really making classes to execute, and no longer interpreting at all. God, I miss that mode. Err s/God/Truring/ of course.
üñ§ groovy 
This is a lot like Immutables (https://immutables.github.io). This looks pretty nice, but the project has one contributor, isn't available on maven central, and likely isn't integrated nicely with other libraries. It also doesn't really answer why it's a better alternative to Immutables. Immutables does require one to define an interface or abstract class while this allows one to just define a constructor. That does look nice, but the article doesn't really illustrate why one should consider it better than more established solutions. For example, Immutables are supported by libraries like Jdbi, Gson, Jackson, JAX-RS, and others.
Does anybody know why Groovy is so unpopular?
Hi :-) I am the (only) the author of this. Just starting out so any suggestion or feedback welcome. :D To me, composable Lens and the exhaustive builder are the unique feature for this. As immutable object can't be modified, any modification must create another object. For a single simple object this is no big deal but if the change is in the sub object, you have to create the parent object too. `class Parent { Child child; }` `class Child { .String name; }` So if you you `var parent = new Parent( new Child ("Bob") )` and you want to change the name of the child, you have to also create the new parent too. May be something like this `parent.with(parent.child.withName("Robert"))`. The deeper the child, the more this has to be done. With Lens, this is done in one swoop -- `theParent.child.name.changeTo("Robert").apply(parent)`. As a function, this change to used in Stream, Optional or in [FunctionalJ.io](https://FunctionalJ.io)'s pipeable. &amp;#x200B; The exhaustive came out directly from my frustration of having undeclared field when a new one is added. If you do not have such frustration, it is understandable why you don't see the value in it. &amp;#x200B; Lastly, the generated immutable object works well with Gson/Jackson too. In fact, each on has \`toMap()\`, (static) \`fromMap(...)\` and \`getSchema()\` methods so serialization can be easily in many way you prefer. &amp;#x200B; Any usable library will have to start somewhere, so hopefully, this is where this one get started. :-) &amp;#x200B; And yes, I like the constructo style spec (the compact form). &amp;#x200B; Thanks again for the feedback. :-D &amp;#x200B; &amp;#x200B; 
I love grails the only problem is all the god damned annotations. no wait I'm talking about spring 
It‚Äôs old and venerable, and you have to use new things to be cool.
I used it for a while, but kotlin was able to get me the abstractions I wanted without the runtime overhead. that's just me, but I think groovy was good for a time then fell out of favor as java got better and more languages started competing in the same space. 
I think a lot of it comes from misconceptions. Every generation of programing language, when it frist comes out, is seen as slow and immature Binary -&gt; ASM -&gt; C -&gt; C++ -&gt; Java -&gt; Groovy. However, given time they all find there way become more mature and faster. A lot of people think of Groovy as a slow dynamic language, even though it's had @CompileStatic since 2012, and has been steadily updated. Another reason is that it has some very powerful feature that some see as being too magical, like runtime metaprogramming. Although if you use static compilation runtime metaprogramming goes away. Also, I think that its unpopularity if more of a perception rather than reality. Groovy doesn't really have much in the way of marketing. People just use it to get stuff done(Micronaut, Gradle, Spock, Geb, Grails). Groovy is more or less driven by the community since it became an Apache project. OCI is one of the major companies, that took over where Pivotal left off, hiring the Grails team(Graeme, Jeff)+ Paul King, and expanded that team. Another thing to consider, while not a perfect metric, the number of downloads of Groovy per year, had steadily increased and broke 100 million this year.
It's not as popular as the shit stirring technique of leading statements if that's what your asking. 
* We were using Groovy in a Java project because it was easier to copy some classes from a 3rd party supplier than to rewrite initally. We used the groovy compiler in our maven compiler plugin for mixed compilation, but at some point it didn't play nicely with Lombok. So we dropped that approach. * Using Groovy for migration scripts
I work for a company that has done some Groovy/Grails projects in the past, so I have some experience and discovered some of the dark sides :-). We don't use Grails anymore for new projects. We either switched to Spring Boot or smaller Microframeworks and for the language we stayed with plain Java or Kotlin. We still use Groovy for tests, mainly because of expressiveness of Spock. We also use Gradle with Groovy. I can imagine a combination of some of these arguments, why Groovy is not so popular: * Java got better * Kotlin appeared * Gradle builds can now also be written in Kotlin as an alternative * almost IntelliJ only (GGTS was discontinued, Grails is not supported in Eclipse, Groovy-Eclipse project was also not maintained anymore till 2018) * slow development of Groovy/Grails * Grails 2 -&gt; Grails 3 was a huge update that broke many things, maybe some people were scared off? * there are no major Groovy projects besides Gradle, Grails and Spock * in the beginning Groovy had almost 100% Java compatibility, meaning you could copy Java code and there was a chance it would run in Groovy without modification. Since Java 8 this was not true anymore and the Groovy development was almost non existent. * joint-compilation with Java code is terrible, when Groovy features are heavily used (AST transformations for example) * a lot of useful libraries using annotation processors simply don't work with Groovy (mainly due to those joint-compilation problems) * Groovy was developed as a dynamic language and the static compilation was "bolt-on". This showed on many occasions in our projects, since we often used @CompileStatic, but the type checking reported a lot of errors for absolutely legal type assignments. * code coverage tools have problems with Groovy (either not working at all or having lower coverage) &amp;#x200B; I still think Grooy is great for Testing, Gradle and as a scripting language embedded in applications (this was actually the original purpose of Groovy).
Personally, the only time I have ever dealt with Groovy is for Gradle and it definitely doesn't want make me want to use it anywhere else. Maybe if I spent a month learning Groovy syntax and the Gradle DSL it would make more sense but when I'm jusy trying to make the existing build do something it seems like a horrible inconsistent mess.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You should steer clear of the unethical behavior of scraping sites and the people that would pay you to do it. Certainly don't advertise how much of a cunt you are on a your own blog. Craigslist has a terms of use, its not hard to figure out. They also have an rss feed. &gt;USE. ...You agree not to copy/collect CL content via robots, spiders, scripts, scrapers, crawlers, or any automated or manual equivalent (e.g., by hand).... If a site has an api and they give you access to their data then you'll get it in a format that doesn't require you to scrape anything. Nothing about scraping web sites is remotely stable, commendable or post worthy. It's like picking your nose, keep it to yourself if you do it.
How does that work with Google search engine?
I find it worth noting that Kotlin v1.0 was released on February 15, 2016 (though the project was unveiled in 2011). But back in July 2009 the author of Groovy, James Strachan, stated &gt; I can honestly say if someone had shown me the Programming in Scala book by by Martin Odersky, Lex Spoon &amp; Bill Venners back in 2003 I'd probably have never created Groovy. [Source](https://macstrac.blogspot.com/2009/04/scala-as-long-term-replacement-for.html)
Never heard of robots.txt? Google actually honors it.
&gt; James Strachan "I still love groovy (jenkins pipelines are so groovy!), java, go, typescript and kotlin. I don‚Äôt use scala any more" James Strachan https://twitter.com/jstrachan/status/784333918078169088
yeah, sometimes it's useful to use static typing. I usually prefer to specify types for generics, it makes completion easier
by that logic you're not allowed to copy a phone number and call it. totally bogus and abusive TOS
I believe you are trying to stir this into a kotlin is better than scala argument, but my point was that groovy was already losing steam way before kotlin was even mentioned in public ever.
I have heard of it. But it's kind of contradictory. It's like me leaving a note on my front door saying "You may visit my house and these are my rooms, but don't go into this private room" (robots.txt) and then also have a note next to it saying "Dont you dare enter my house!" (Terms of use)
I use it for embedded scripting due to its close syntax parity with Java, as well as for domain specific languages. The dynamic typing, wonky compile support and odd meta programming mean I avoid it in platform/service code. Kotlin is better for compatibility with Java code, null safety and so on.
No. I was trying to balance your quote out with a more recent one, which is still three years old. Both are really out of context options, and history. I never really liked Scala, and don't really care much for Kotlin, for what I do, but I harbor no ill will toward anyone who does like those languages.
gotcha, I just remembered seeing that comment from the guy back then and thought "well, rip groovy"
And yet many companies have based their business on scraping craigslist to their own demise. It's a historical point of contention. Feel free to educate yourself. The point of the comment is that scrapping craigslist, pinterest, etsy, amazon, etc is the modis operandi of shitty actors who hire young devs at low pay for a death march project. It's not something they can put on their resume that's not akin to a face tattoo. Do you want a face tattoo? No. You do not. Don't web scrape.
That depends on the nature of the project. You'll have to give us a bit more of a clue.
Immutables also has an option for exhaustive builders (they called them "staged builders": https://immutables.github.io/immutable.html#staged-builder), though it isn't default. I don't know if your system works better (Immutables generates a lot of interfaces to support this). It's definitely impressive and I love that the constructor-style spec means that there isn't another class/interface lying around like `PersonValue` which generates the `Person`. EDIT: looking at the source generated, it does look like you're creating an interface for every field. I might suggest making it so that only the next field is available. Right now, I can do `new Person.Builder().name("Adam").age(42).streetNumber(28).streetName("Main St").name("Adam").build()`. It might seem simple to notice the duplicate `name` call there, but if a struct has 20 fields, it leaves you in the position that you don't know which one you have to set next and which ones you've already set. Also, by having getters on the builder, it makes it easy for users to pass around the builders rather than actually turning them into immutable objects. It also muddies up the auto-complete for the builders. https://i.imgur.com/TqStUHr.png When you look at that image, you have to do a lot more work to figure out what field is next. Which fields have you already set and which is the new field in there. IntelliJ shows 17 methods excluding things inherited rather than the one method that's meaningful at this point which is `favIceCream(String)`. There's only one thing I can call to make progress building this struct, but it's buried in a sea of other methods. Also, for something that's somewhat simple (10 fields), it generates 769 lines of code with around 200 methods and 13 classes. For something like Android, that can complicate things. You could certainly cut down on the number of methods if each partial builder class didn't have a getter and setter for every field that had been previously set. Ultimately, Immutables staged builders seem to be a lot easier to use than the FunctionalJ ones because they don't include all the previously set items. In both cases, anything wrong will be compile-time caught, but the Immutables staged builder will point you at exactly which required argument needs to be set next. Also, it does kinda feel sad that Java has ignored this issue for so long that we now have Immutables, FunctionalJ, AutoValue, Lombok, JodaBeans, many more I'm probably unaware of, and languages like Kotlin (yes, Kotlin has other benefits as well, but data classes are a big draw).
That was a rhetorical response. You most surely should know about and check robots.txt if you are not explicitly using a sites API. Most robots.txt will have more information as to the frequency which you may hammer their database, if they allow it. How is it contradictory, its no more different than a 'no solicitors' sign on your porch. If you're a solicitor, you can't act like you can't suddenly read, just like you can't act like you don't know what a robots.txt file is if you scrape websites for a living. 
Thanks for the suggestion. There are a lots to digest here. I will do once I have a chance to sit down. üòÄ
Depends what you want to get into and what level of C# you're at? What are your projects going to be so we at least have an idea of what you need to learn?
I don't think you understand my original question. Google is not a solicitor. But yet they obviously break Ubers Terms of Use by using spiders and crawlers. It has nothing to do with robots.txt
HtmlUnit seems a bit of a weak hand in 2019 no? &amp;#x200B; Selenium's system seems far harder to detect with proxy support, and it's HtmlUnit wrapper in the Selenium framework makes things much easier. Honestly though as much as I love Java isn't agility pack kind of king here?
Spring spring spring
This might be on every single post like this, but it's so fucking true.
1. Read the sidebar. 2. Post some code. 3. Post that code in the correct subreddit /r/javahelp.
And like every single post like this, there are those of us that never bothered that much with Spring and still don't have any issue getting Java projects. 
I took an app from Grails 1.x to 2.x to 3.x and the fact that you couldn't rely on Grails not breaking some fundamental part of the platform even in minor releases was enough to thoroughly burn me from ever wanting to touch Grails again.
No. I understand fully. Uber could block google, which provides a valuable service FOR FREE, by listing google on their robots.txt. It's pretty clear you don't know what the fuck your talking about, nor do you understand why craigslist was the worst example that could have been chosen in this article. 
To be honest, I very frequently see on Twitter that constructs like lambdas, etc. that Java has should not be called functional, because functional app should use HKT, IO monad, etc. I really like to hear more "light" voice on FL like yours :) Use FP to simplify code and life, not just to use FP strictly! ;)
As someone who was a C# dev and is now a Java dev, I can say the languages are similar enough that you shouldn‚Äôt have any issues learning core Java. As far as frameworks go, Spring is the de facto standard in enterprise Java development. 
various IS, ERP, CRM systems... Let's suppose projects will be web based. Any feature overview of JSE, J2EE, spring stuff and other tools/frameworks ?
what about ORM ?
[removed]
Javaee javaee javaee
As far as **language syntax and standard library capabilities** go, one should have no problem switching on-the-fly between C# and Java (or vice-versa). However, the biggest hurdles in the learning curve will be build/CI stuff, and whichever libraries or frameworks your project might be using (Java is MUCH more about its third-party ecosystem than Microsoft shops probably ever will be). Try to figure out if you'll be using Maven or Gradle, and try to get passingly familiar with that build system. Don't have to learn EVERYTHING, just learn the basic commands for compiling and building a JAR file. Try to figure out which major libraries you'll be using, and read up on them. Spoiler alert, this will PROBABLY include: 1. JPA/Hibernate - ORM, Java's equivalent of Entity Framework 2. Spring - Sort of ASP.NET, plus a portfolio of other add-on helpers for virtually anything you might do in a business application context.
You are describing a very simple case. Now imagine many subclasses with enums and stuff as fields. Maybe your project simply does not need that. Maybe it's just to write an integration test to connect to a remote resource. Why use a cannon if a stone is sufficient.
There's a project for that with the backtick as a delimiter but it did not go through in 12. Maybe next release then ...
Recent technologies that impressed me: Kafka, Hadoop. But hadoop, of course, for specific cases :) Also now there is a high demand for the reactive stack, so you should pay attention to Spring reactive. 
This article has comments from 3 years ago. Is it just repackaged?
If you're into building application servers such as RESTful Web services then I would take a look into Docker and Kubernetes, Spring, Gradle, and Functional programming with Java 1.8 (lambda's and streams are awesome). If you don't want to mess with Spring too much right now, then JBoss is a good one to know as well. Also, a great Kubernetes orchestration is Openshift. They have free tier subscriptions for trying them out. 
&gt; As for Eclipse... Let's just say I've never heard of anyone switching to Eclipse from IntelliJ. I did. Found Intellij just as buggy as Eclipse just with bugs in different places instead. So when I switched jobs and was offered to use Eclipse or Intellij I went back to Eclipse.
Spring boot is not an ORM, it's a simpler version of Spring framework. I would suggest you to use Spring boot because it's much more plug and play, whereas in spring you have to configure a ton of stuff manually. Hibernate is a popular ORM
Can i ask something sir? You can only use stream and lambda with lists?
You most likely are going to need a dependency for it, but as scope provided. It won't be in your war file, but you need it to compile your code.
For spring boot it'll have tomcat built in by default. Most of the other stuff is gonna need a dependency.
There are really two types of servers: ~~Servlet~~ Web Containers are just a basic server that doesn't have any other libraries. Examples of these are Tomcat and Jetty. Application Servers have an entire JavaEE stack shipped with them. Examples of these are JBoss and Weblogic. Which you need really depends on how you're building your web application. If you want more control, then you likely want a web container and include all of your own libraries with your application.
They are mostly used with collections. That‚Äôs a good question though. What are you wanting to use them for other than a collection?
Why not use CSS? [Here's a good starting point](https://bitbucket.org/agix-material-fx/materialfx-material-design-for-javafx/src/692b52b67576565609a8a1cebf354f211dd5fc91/material-fx-v0_3.css?at=master&amp;fileviewer=file-view-default)
Not all, you should probably take a look at what they support, it changes with the application server. If you are using an application server also remember to take care of not duplicating whatever libraries the server already has, e.g. some weblogic versions have log4j included
Springboot is the way to to now.
&gt;n you look at that image, you have to do a lot more work to figure out what field is next. Which fields have you already set and which is the new field in there. IntelliJ shows 17 methods excluding things inherited rather than the one method that's meaningful at this point which is &gt; &gt;favIceCream(String) &gt; &gt;. There's only one thing I can call to make progress building this struct, but it's buried in a sea of other methods. Hey, I have a chance to sit down and read and you have some good points which I actually debated to myself at the time and decided to do this. I will reconsider if the tradeoff worth it. 1. The builder is done as an immutable object because I see it as a named curry. Basically, the builder is just the object that is not complete but it is immutable just the same. So this way, I can create a builder and assign some stuff in it (just like curry) and pass along for other to reuse without them be able to modified mine builder. It they override what I already set, they will get the new builder. 2. The read and re-set methods are added as I think that the people (that reuse my builder -- see the first point), might what to inspect and override it. That said, you are totally right that having those methods (point#2) make it harder to find what else have not been set which is the main usecase of builder so I will reconsider and might end up doing what you suggest. &amp;#x200B; Just to note: When I was implementing Builder, I also have another similar concept in mind ... Function Object (FO) so just like curry and partial function, with FO (that implement function interfaces), we can partially apply any parameter by name once a parameter is apply .. we will have another FO with less parameter to use. For example, `@FunctionalObject String repeat(String str, int count) { ... }` ... will implement a Func2&lt;String, Integer, String&gt; (a BiFunction) and you can say `var repeat = Repeat.instance;` Then you can create `var indentTab = repeat.str("\t");` . This indentTab will be `Func1&lt;Integer, String&gt;`. And you can use either `indentTab.count(3)` or `indentTab.apply(3)`. I didn't get around to implement this yet but the idea is similar to what I did to the builder in the way that it is an immutable object that can be passed around and partially applied by parameter name. &amp;#x200B;
So the README file presented seems to be mostly a glossary of basic crypto terms, and very little about what makes this project special. (Granted, guthub on mobile isn't great, so perhaps I missed something.) So... what's special about this repo? Let's say I'm writing a front-end for some crypto; why should I choose this repo to do the work under the hood over, say, an established trusted implementation like Bouncy Castle or RSA or that one from IBM whose name I can't remember?
Thanks.
Not really, just i only had the chance to use with collections, i was wonder if there others applications to it.
Thanks, that means that if i have something like this &lt;dependency&gt; . &lt;groupId&gt;javax.servlet&lt;/groupId&gt; . &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; . &lt;version&gt;2.5&lt;/version&gt; . &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; I will use the reference implementation of javax.servlet that my server will provide? 
Ah. Yeah. But there is a huge library of functions added to Java 1.8 such as predicate and consumer that make using Strategy pattern and functional interfaces a lot easier. I use them all the time for validating payloads for a REST resource. So 1.8 adds a lot more than just streams and lambdas. Those are just have the highest use case. 
It means that your code will be compiled against that and the server must provide it.
Yeah, but tomcat is a web container, what happens if i put a spring boot aplication inside of a weblogic? Because weblogic have his own servlet implementation, right?
But, if i deploy this application in tomcat i will get an error, like missing dependency, because tomcat is just a webcontainer(servlet implementation only) or im wrong?
You have one of these examples to validate payload for rest resources? 
Yeah, my company still has some JEE legacy projects,l. A lot of people using spring, but, im looking foward to JakartaEE.
It depends. I deploy on Wildfly as an EE8 application and all that is provided. You need to learn what is provided by your version of Tomcat. 
Web containers like tomcat have just a servlet implementation so? And i must explicit my other dependencies to my pom.xml then.
Hm, saw that theres a TomEE that provides implementation of some java apis, called microprofile. Well, thanks, helped a lot.
There's literally nothing whatsoever that makes this project special in any way. It's nothing but some poorly implemented utility classes (HashUtils, and in the case of CryptoUtils, not implemented *at all* given that the class is empty) that are no way suitable for use in anything remotely production-related. You wouldn't add this is as a dependency to your project; it would take a similar amount of effort to just do it yourself, and you would almost certainly do it better just by random chance. 
Target: Mostly beginners trying to get an understanding of Cryptography and experts trying to refresh their memory as well. It's more like a how-to guide. But it can be used as a library, as it follows established standards (**Provider -&gt; SUN, version 1.80**).
1JDK 11 release was on 25 sep 2018. [Learnhowtoinstall.com](https://Learnhowtoinstall.com) is world best and only site to provide step by step guide with [video demonstration for JDK 11 installation.](https://www.learnhowtoinstall.com/howto-install-jdk-11-on-windows-10/)Its almost same steps in jdk 10, but few steps may help you. 
&gt;Does anybody know why Groovy is so unpopular? I stopped because it's (comparatively) unsupported. Using it for larger projects was cumbersome because I'd hit roadblocks of internal issues, and for quick tasks it just doesn't compare to opening up a JavaScript console on my already open browser. Rust is my go-to for projects now, where the much more conservative approach to features means I wrestle with internals less, and the community is much better supported.
It looks like in your [submission](https://www.reddit.com/r/java/comments/b22bzo/need_your_helpresultset_not_positioned_properly/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/b22kko/still_finding_cool_things_to_do_with_generics/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
So I am not really allowed to show my code but I found an example that has a good explanation with examples. https://dzone.com/articles/server-side-validator-using-functional-interfaces
Or Google's project which remove a lot of mistakes possible with bouncy.
Not all application servers support all API. There is a thing called Web Profile which is a subset of the Java EE libraries. It has JAX-RS, but not JAX-WS. Tomcat is Web Profile compatible, but if you want all APIs, you need a full fledged application server such as Glassfish / Payara or Wildfly.
[Wrong.](http://esquireuk.cdnds.net/16/46/480x240/landscape-1479206864-donald-trump-wrong.gif)
I notice shaDigestFile() does this: byte[] buffer = new byte[HASH_MD5_FILE_BUFFER_SIZE]; 
/r/javahelp is for *programming help* questions. Also, this is part of basic tutorials: https://www.w3schools.com/java/java_packages.asp
Well I'd do the front and back end in Typescript with rest API implemented with AWS lambdas which doesn't help you much! Apart from what the others have said I'd be looking at serverless stuff if possible like AWS
I'm a hobbyist dev with no interest in web apps, since my projects are either personal (I prefer desktop or console apps), game mods, or made for other people who don't care about the distribution method as long as it works. Would you still recommend I learn Spring? I keep hearing about it.
I've done a few scrapers with Java, and when I've had something difficult to do, I'm using Selenium, and when it's something simple and fast I'd rather use JSoup. 
Which Google project do you mean? Conscript?
Is the version of JavaFX tied to the JDK version of the same number? In other words: Can JavaFX 12 (or OpenJFX 12) be used with Java 11?
do you use it in your applications?
Are you AEM developer? ;)
Can confirm this. I currently work in a 100% Java project. If I could convince my team to switch to a different JVM-based language (which apparently won't happen) we wouldn't pick Groovy over Kotlin even though some team members have some experience with Groovy. 
Why not? DI is not about web at all, it's just most popular there, as web is so popular.
Apparently you know barely what are you going to do, but have no idea how it's going to be done. Also what is missing in your description is information if you're going to start to work on those projects, or are you going to maintain existing ones. Because of that, if you want to be prepared, I would advise you read a book about JEE 7 and one about Spring. That would give you overview of technologies, and you will get a feeling about both approaches. If you're planning to start from scratch, you will also know what are the differences in both approaches.
By DI, do you mean dependency injection, or dependency inversion?
Got it, thank you!
We're talking about Spring here, so I assumed it's obvious from context - Spring gives you Dependency Injection OOTB, so the first one.
That's tangential to the value type discussion, but I really like this: ```{.java} value class Point { ... } ``` Does this mean that with ```{.sql} we're going to have our IDEs do the schema and type checking and autocompletion across language?
What's L?
In all Java versions an L-type is a reference to a named class or interface type. (Its spelling in bytecode will begin with capital L, hence the name). The L-World Value Types project is a series of early prototypes for intergating value types into the L-Type system. L10 is the first preview-able milestone; this would include the ability to declare value classes which can be flattened into arrays and objects, and instantiate _erased_ generics over values. The L20 milestone adds migration support for value-based classes, specifically the ability to migrate existing value-based classes to value types.
https://www.bouncycastle.org/java.html
If I remember previous discussions correctly, it's not feasible (performance / implementation complexity reasons?) to specify a default value directly for types where all zeroes does not make sense. I think `null-default` is a lot better than `T.default` in those cases, because `T.default` would just be another kind of null but *per type*. And even worse, forgetting to check for it would just silently do the wrong thing if the value type author didn't litter their code with checks themselves. Asking the question "Is this value missing?" will also have the same syntax for each type, less special cases is always nice.
That's not a Google project. "The Bouncy Castle Crypto APIs are looked after by an Australian Charity, the Legion of the Bouncy Castle Inc. which looks after the care and feeding of the Bouncy Castle APIs"
Just looked at HashUtils. Few comments: 1. What is the point of marking @deprecated the two md5 functions? 2. Why are you using a non standard @nonnull? 3. DatatypeConverter if I'm not mistaken is not going to be accessible from Java 11 LTS, you should use an alternative. 
That's just markdown syntax, I guess they use email clients that render it (or they render it in their head). Multi-line Strings are coming though. I heard IntelliJ [detects embedded syntax](https://www.jetbrains.com/help/idea/using-language-injections.html), but I haven't used it myself. 
Yes absolutely, and also localhost webapps have mostly replaced desktop apps. I'd still learn them. With a service running it's nice to at least have stop, start, restart, and monitoring available without a desktop gui and local access.
Never heared of that term (AEM). I don't think so.
Compatablity is quite troublesome. As far as I understand, there will be non-nullable value-classes `V` and the nullable counterpart `V?`. In L10 you can only put nullable value-classes as generics, e.g. `List&lt;V?&gt;`, until specialized generics in L100. In L20, existing value-based-classes such as `Optional` or `LocalDateTime` will be migrated to value-class with modifier `null-default` and is nullable. So that would mean `V` and `V?` are the same for such classes (so you can use them as generics). If thats correct, thats very dangerous. The whole distinction between nullable and non-nullable becomes meaningless as you'd never know what you got. 
And how do you migrate to java12? Does it have official android support?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Any reason for AssertJ over Hamcrest?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Python is more high-level, more like English, I'd say it's a fantastic programming language for machine learning and shell scripting. Python also has a big community and can be used with a Raspberry Pi. However, Java has an huge amount of libraries and uses, letting you do anything from GUI creation, networking, music, web development and android development. I think Java has better documentation as well. Despite this Java has a learning curve and I think you need to understand a lot of programming concepts and theory before you can just start programming. Java uses a virtual machine to execute code whilst Python is a interpreted language, this has advantages and disadvantages in it's own right.
Actually, perhaps weirdly python is way morelow level is some ways going from native to python is way better documented and efficient than the jni/jna hoops. At least in cpython this is because python is in places just a quite thin layer on top of c. Anyway, is there a good reason why you should not learn both? Apply whatever is more suited to the problem at hand and use ipc for the rest. (Or REST for the IPC)
What do you mean with that? Do mean it's not thread safe? If so, does it claim to be that? In other news the primitive long is dangerous racy as well.
Correct...
Yes...
Python version numbers are more problematic and it's generally not as performant as Java. But otherwise I'd say it's nicer.
Hi there, I'm glad to see you're interested in programming. You picked 2 of my favorite languages! Let's see if I can give a better understanding of what I typically use the two languages for. Python is the language I first started learning and that's because the syntax is much easier. The way you code is more like how natural language flows, so when you want to do something, the commands you need to type are more easily remembered. A good comparison here would be something like a for loop for each language: Python for i in range(5): print i Java for (int i=0; i&lt;5; i++) { System.out.print(i); } As you can see, Python is a bit more compact and simple because there are things that get interpreted instead of explicitly defined, such as the integer 'i'. What does this mean? Well, I find that Python is nice for writing quick scripts, especially about handling and manipulating strings. Python is a great choice for trying to do one thing really well in a short period of time. Machine learning and such are nice in Python because you are feeding a lot of data into a program, which requires a lot less boilerplate than Java. I find that webpages that require a lot of new pages very frequently are also very easy to write in Django, a web framework specifically for Python. &amp;#x200B; Java on the other hand is my favorite because it is strongly typed. This means that when you declare an object or variable, you need to say what it is first. This lets the compiler know what methods and fields it has access to before it tries to run the program. This might seem cumbersome at first, but it actually makes maintenance and development much easier. Utilizing an IDE such as Eclipse or Intellij will use the compiler to tell you if the things you are doing do not make sense, and it will also inform you if there are changes you made that broke something somewhere else. This quality, coupled with the fact that Java is still very much supported and has many, many libraries to do almost anything you would want, makes Java a really good candidate for writing many large, interconnected modules that need to rely on each other. Changing something in one part of the code will trigger a compiler error in another part to inform you that something needs to be changed. By utilizing best practices and some clever code writing, you can ensure that anything will behave how it needs to behave in the future for anything that is dependent on that code. &amp;#x200B; So, in a nutshell, I will simplify it as such: Python is amazing at small projects that need to be written quickly to do one thing really well. Java is great for writing lots of code that does many different things and that is interconnected. 
1. Because MD5 is cryptographically broken and unsuitable for use. Please see [MD5: The broken algorithm](https://blog.avira.com/md5-the-broken-algorithm/) 2. `@NotNull` used is from `org.jetbrains.annotations.NotNull`. There is no Standard `@NotNull` in the JDK I suppose, except the one found in the Android SDK `android.support.annotation.NonNull` 3. Correct. `java.xml.bind` where `DatatypeConverter` comes from has been removed in Java 11. An alternative would def be sought. Peace!
4. Instead of copy-pasting all that methods there should be a reusable private static helper method with 1 parameter... 5. Why it need "ourInstance"?
I agree except for one elaboration - what can be seen as "more compact and simple" with Python is soon "limited" when you want to do something more bespoke. Java, imo (after years of realising), is a language that gets easier as your application gets more convoluted - What can seem like "why isn't it easier to do this easy thing" eventually turns into "it's so easy to make this complex logic using less code".
Is a nomadic type one that migrates out of the JDK when it‚Äôs no longer useful? You‚Äôll have to ask Dr. Deprecator about that! :-) We don‚Äôt have any current plans to add monadic types for their own sake, at least not at the moment. One issue is multiple boxing. If you have something like Either&lt;T,U&gt; and the types are primitives, they have to be boxed, and the Either instance is another box. That‚Äôs the reason for OptionalInt; at least it saves one level of boxing. But OptionalInt isn‚Äôt related to Optional&lt;T&gt;. We‚Äôd rather not create more stuff that has similar problems. Hopefully value types and generic specialization will fix this particular problem. Even with the cost problem fixed, it‚Äôs not clear to me how well monadic types fit with Java. The experience with Optional is that it has fairly narrow usage, it‚Äôs overcomplicated for such an apparently simple construct, and it has generated a lot of confusion. It feels like something is missing, but I don‚Äôt know what. Pattern matching could help.
Hey.. so here is a thought.. give Golang a try. It is much easier to learn, is faster (in most cases) in terms of performance than Java, is kind of a "best of breeds" of Java, python, C# and such, has a fast growing community around it, and is very well suited for high scale web application development (e.g. server side APIs, back end coding, etc). I have been in Java a long time and what others say are right.. it is a very large ecosystem, you can do just about anything in it, including making games (Minecraft.. $2bil+ vlaue). But it is more difficult to learn has a lot more pitfalls you can deal with as well. &amp;#x200B;
1. Then don't propose it at all. @deprecated serves a purpose in an evolution of an AP, here you're misusing it. 2. Don't use @notnull at all. Handle null cases. 
IntelliJ IDEA did [have experimental support](https://blog.jetbrains.com/idea/2018/10/preview-raw-string-literals-in-intellij-idea-2018-3/) for [raw string literals](http://openjdk.java.net/jeps/326) when the feature was planned for JDK 12 and was available in [JDK 12 early access builds](https://marxsoftware.blogspot.com/2018/09/raw-string-literals-support-in-jdk-12.html), but then [those plans changed](http://mail.openjdk.java.net/pipermail/jdk-dev/2018-December/002469.html) and raw string literals and multi-line strings are [going through design discussion again](https://marxsoftware.blogspot.com/2019/01/java-raw-string-literals-take-two.html).
Late to the discussion, but FYI Google's `error-prone` checker supports an `@Immutable` annotation and will [check that annotated classes are *deeply* immutable](https://github.com/google/error-prone/blob/master/docs/bugpattern/Immutable.md). 
Cool and stuff, but the introduction was more important for me: Collectors.groupingBy Didn't know yet you could to that. Really handy.
I'm thinking of https://github.com/google/tink
* don't catch IOExceptions just to throw them again * return bytes instead of String * don't add md5 just to deprecate it, instead mention in the readme why not to use it * generateAESKey() returns a constant final String "AES". Why does your test not catch this crucial flaw?
Why? Why does a sha method use a constant named md5?
Oh cool, thanks
Take it with a grain of salt. Actually, take it with a shovel of salt.
You don't trust Google Tink? (BTW sorry this seems to have gotten disconnected from our thread)
This was very helpful, thank you!
I trust Google a lot. tunjos seems to have made mistakes and a lot of questionable decisions.
* Thanks for the catch. The concerned method - Tests Pending. * True... I was trying to keep the **try-with-resources** syntax, but it's not needed. * ‚úì * It's written in the README. I guess it should be written with a clear note. * May expatiate? Thanks. * Nice tip ‚úì &amp;#x200B;
* try-with doesn't require catch * There is just no reason for the util classes to be singletons. https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons They could have static methods or be plain old new Utils() classes. 
You are welcome! üïäÔ∏è
Because the world will be a better place, thanks to helpful people like you. That's why reviews exist üôÇ
&gt; and only in non-LTS JDK versions. Just a minor point about LTS: The development of Java takes place within the OpenJDK project, which simply has no concept of LTS. LTS is a paid service by Oracle for some feature versions. OpenJDK community members other than Oracle may lead "updates" OpenJDK project for some long duration, which may, or may not correspond with those versions for which Oracle offers LTS. So far members have committed to leading update projects for JDK 8 and 11 (as well as older ones), which do correspond with Oracle's LTS. In addition, Oracle may well provide LTS for version it chooses, but has committed to one LTS release *at least* every three years, but if a popular feature lands in, say, JDK 15, Oracle may decide to offer LTS for that version. In terms of planned features, we do not differentiate between feature versions for which Oracle offers (or has declared to offer) LTS and those it does not, although adoption patterns may have an impact.
&gt; Java on the other hand is my favorite because it is strongly typed. This means that when you declare an object or variable, you need to say what it is first. I don't disagree with your overall point, but being strongly typed just means that a variable type is fixed -- implicitly or explicitly. Even Java allows you not to say what type is it, as you can write your examples like this now: ``` for (var i=0; i &lt; 5; i++) { System.out.print(i); } ``` Or even with streams: ``` IntStream.range(0, 5) .forEach(i -&gt; System.out.print(i)); ```
&gt;Python also has a big community and can be used with a Raspberry Pi. That is not an advantage that Python has over java. Why? Because I know that first hand. I am the architect of software that powers a family of sophisticated measurement instruments (capital equipment). This software involves complex concurrency for the control of multiple devices, it has an (for this domain anyway) extremely good-looking GUI, it runs on a Raspberry Pi 3, and it is written in Java with JavaFX. 
Use CSS. It is easy enough that anyone can do it. 
doesn't python still need third-party frameworks to support parallelism or did they fix that? you have to spawn processes instead of threads because of a global interpreter lock or something
Well-done examples, I've not needed to write my own collectors but would consider it after seeing this. "Free" parallel support from stream operations is a plus for sure.
Fluent, easier to read and works better with autocomplete as you will always see the available operators for each data type. 
Thanks! About parallel stream: always remember that they run inside the common fork/join pool and there are some cases where it's not advisable to go parallel (JavaEE/JackartaEE containers or other thread-based environments). When I write free I mean that the collector is indeed parallel-compatible without further modifications, the parallel computation is never "for free". TLDR: beware of parallel streams, use them wisely.
üëç the post is about discovery in the field of collectors, your findings in it are always welcome! P.s. You can improve grouping function using a tuple (che class from vavr for instance) as a result instead of a single object field
It's true that recent versions of Java allow you to declare variables with 'var' to allow the compiler to interpret what they are. I'm personally still kinda getting used to that since I feel like it's less readable if you don't explicitly state what your object is, but I suppose it's a nice feature to have. So yeah, in a higher context, strongly typed doesn't exactly mean that you need to declare the exact type of the variable, but I wanted to emphasize that at least it's not like crazy ass javascript where you can set the variable to whatever you want whenever you want and then it's up to you to remember what it's supposed to be.
Thanks :)
Yes, the difference between strictly and loosely typed languages don't change anywhere. Implicit typing is pretty common in Java streams, and it can sometimes be a bit of a headache to figure out the actual type after a few steps of hairy code... ;)
* The .idea is necessary for what? Intellij recreates and overwrites it on 'project import from source'. * 300 long lines don't fit in the window and I have to scroll horizontally. I'm not a fan of the old 80 characters, I use 140-150 in most projects.
A bit off topic, but what is the name of the color scheme you are using? It looks nice
I'm using this theme with default values for syntax highlighting: https://mmistakes.github.io/minimal-mistakes/docs/stylesheets/#syntax-highlighting
Considering the difficulties I have with Go, I‚Äôd say that you are missing in Java what I‚Äôm missing in Go: knowledge and experience.
* [How to manage projects under Version Control Systems](https://intellij-support.jetbrains.com/hc/en-us/articles/206544839-How-to-manage-projects-under-Version-Control-Systems) , [IntelliJ IDEA Community Edition](https://github.com/JetBrains/intellij-community/tree/master/.idea) * ‚úì
4. Yup, some blocks could be reused. But the purpose here is clarity for beginners, not saving space though. 5. Yup, it could be De-Singletoned
Is there any timeline for this L10 and L20 milestones ?
Assuming that you're using Spring Boot 2, use JUnit 5. The separation between tests that run in the test phase and tests that run after a setup phase is not complicated. The standard pattern is the call the former FooTest.java and the latter FooIT.java. Maven will handle everything for you. 
For many types, there is a sentinel 'blank' value that usually means you do NOT need to 'litter your code with checks'. * For optional: Optional.none. * For strings: "" * For lists/sets/maps/etc: the empty list/set/map/etc * For inputstreams: A dummy input stream that always returns -1, or, possibly, always throws an exception for any operation other than close() and flush(). A salient point for all such constructs is whether you're right to use them, but that depends not so much on the type but HOW you obtained a value of said type. Almost always, if you get a string from someplace, you see something like: if (x == null || x.isEmpty()) continue; which suggests that, at least for this code, semantically, 'null' and 'blank' are to be considered equivalent. But not always; perhaps when I retrieve a value from a `Map&lt;String, String&gt;` there is a semantic difference between 'value is present, and is the empty string' and 'value is not present'. So, whether this is the right choice; I don't know. But I think it's worth investigating. 
Im on Spring Boot 1 still (no need for most SB 2 features but will consider moving there soon). But the issue is not really with Spring boot and Junit but when use in combination with Maven + Jacoco/Cobertura. These tools are borderline legacy and dont have an out-of-the-box that can be setup in an instant like most of the recent frameworks have to provide. I feel like this entire development experience is similar to the "old guard" scenarios where people are just "too familiar" with existing tools and fail to look at the issue from a new comer perspective. Its not intuitive to start using but you have to go through layers of digging, troubleshooting, document referencing to have it going. I thought entire purpose of Spring Boot, moving from Spring MVC, was to have these setup simplify? Or may be we are just not there yet?
Great post. The first time I think I really understand how to make a custom collector. It's nice that you used named functions instead of abusing lambda expressions, like other explanations I've seen before. Thanks!
I just told you how the tools are configured by default to do what you want and then you complain that they don't have sane defaults.
Totally agree. Jacoco, Maven and modules are always annoying, integration test seems to be forgotten in docs. I always feel like there is some special secret everybody knowns but me. Also, since it's something you don't do too often, once everything is in the right place and working I always forgot how I get there. Agg. I'm about to start a project and I'm already suffering because of this 
The .idea thing is interesting but I assume they like you to keep it as an ad. If you use eclipse, atom, netbeans, vscode the folder is useless. Intellij is able to import the project without it easily.
Reusing is more clear than copy paste which forces me to compare the methods by hand to see what is different. It it also increases the chance for bugs as seen in your aes key method. 
‚úì
It looks like in your [submission](https://www.reddit.com/r/java/comments/b2htz1/remove_leading_zeroes_from_a_string/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 ``` IntStream.range(0, 5) .forEach(System.out::print); ``` Even slmpler:)
Previous version (from February 2018) was discussed at https://www.reddit.com/r/programming/comments/7a6hi7/data_classes_for_java/ and https://www.reddit.com/r/java/comments/7a6hd3/data_classes_for_java/
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don‚Äôt see this as being Spring-Boot related at all, just a question about async patterns. Here‚Äôs a good read: https://medium.com/ibm-watson-data-lab/handling-failure-successfully-in-rabbitmq-22ffa982b60f
Just give them to me already!
Very interesting, but judging from how long it takes them to get value types going, it's gonna be a long time until records become a part of the JDK... Either way though, I'm excited for both.
I must say: these articles are excellent. Even dumb people like me can grasp it its so well explained and bite-sized
I forgot to mention that I'm using Spring Boot 
Java has switch statements :)
That isn't true. The whole reason we have the new release cadence is so that the large, complex features don't hold back others.
What I mean is that Spring-Boot is irrelevant to the question. You would be asking the same questions, no matter the framework.
I‚Äôm not saying it‚Äôs gonna be soon, but value types is Hard with a capital H. That they‚Äôre taking so long isn‚Äôt necessarily because they move slowly, but could be because it‚Äôs a hard problem. There‚Äôs no reason something like this proposal couldn‚Äôt come much faster. A lot of what is described here is language level or compiler level, which seems to be generally easier than JVM level. 
Excellent article! If only there was something like `List::withAll` to merge lists or other collections together via method reference.
Slight nit: by default they run inside the common fork/join pool. But you can run them in a custom ForkJoinPool as shown at [https://blog.krecan.net/2014/03/18/how-to-specify-thread-pool-for-java-8-parallel-streams/](https://blog.krecan.net/2014/03/18/how-to-specify-thread-pool-for-java-8-parallel-streams/)
Is that a pro or a con?
I always wanted to ask - are we going to get this cool [builder syntax](https://github.com/dotnet/roslyn/blob/features/records/docs/features/records.md#with-method) which C# got for records? Because I image us refactoring a lot of code to records, but it would be a pain to once again add blindly builder pattern everywhere.
List&lt;List&lt;A&gt;&gt; xss = ... Stream&lt;A&gt; xs = xss.stream().flatMap(List::stream)) 
No discussion there, the null object pattern is superior to null checks in most cases. The issue is that you can't specify that sentinel value yourself. All your fields will be filled with zeroes (or null), you don't get a say in that. If I remember correctly, the reason is that the JVM zeroes out all the memory in bulk, so when you ask for `new CoolDate[1000]` you get a bunch of zeroes, even if you would have preferred `new CoolDate(1970, 1, 1)` for each. As an example (assuming Strings could be somehow non-nullable in the future): The empty String is represented internally as `byte coder;` with value 0 for the encoding and `byte[] value;` of length 0. If you ask for `var s = (new String[1])[0];`, `coder` is 0, which is good, but `value` will be `null`. Now every method on String has to check for that weird null value that should otherwise be impossible.
Yup. To talk about why value types are hard. They are talking about pretty extensive changes to the memory model. There are many assumptions baked into objects today (nullable, have identity, carry locks). Value types are revisiting every one of these discussions. All that while still needing the play nice with things like generics. And then they introduce conversations about how primitives are currently being handled in the VM. This is a fundamental change to the way the JVM works. I don't think any change (maybe jigsaw?) has been bigger. It's no wonder they've been taking their time to get it right. At this point, I think they are on something like approach 10. &amp;#x200B; Record types, on the other hand, aren't really anything more than syntactic sugar. Other JVM languages have them because they are really easy to make. Heck, Lombok/AutoValue/Immutables provide them working with the JVM annotation processor. There may be debate about what the syntax looks like, but implementation wise, this is super easy. They are just shorthand classes.
Kaffeine
Honestly, where we started seemed pretty good. Very clear what it was attempting and how it was doing it. I'm not sure it's a reasonable goal try to turn these kind of situations into "one-liners," even if it feels good at the time.
All of the 8 additions to Map are fantastic. So many operations became one liners. Heck, I don't even use things like "Multimap" any more because the 8 Map is powerful enough to do that. Map&lt;String, List&lt;String&gt;&gt; multimap = new HashMap&lt;&gt;(); multimap.computeIfAbsent("foo", (key)-&gt;new ArrayList&lt;&gt;()).add("bar") One map lookup, adds the empty list when missing. Nice! Compare that to pre-8 Map&lt;String, List&lt;String&gt;&gt; multimap = new HashMap&lt;&gt;() List&lt;String&gt; list = multimap.get("foo") if (list == null) { list = new ArrayList&lt;&gt;() map.put("foo", list) } list.add("bar") Yuck! And worse, no way to really get around the double lookup to insert missing lists.
[JCS](https://commons.apache.org/proper/commons-jcs/)
 Kaffeine? Do you mean Caffeine or is this something different?
If API X cannot fulfill the request, it's only reasonable to return some kind of an error. If it's an HTTP API then status code. If it's a Java API then throw an exception. If it's a C api, then return error code. Where does the message queue fit into this system? If your application cannot connect to those two REST APIs, just return the error and that's that. What is the actual problem here?
I meant like `BigDecimal::add` in the article. var features = Map.of("Java", List.of("Collections Framework")); features.merge("Java", List.of("Collection Convenience"), ~~List::withAll~~); What do I put as the last parameter that doesn't wrap to the next line?
Good explanation of merge(), though I would say the example use case could be better. If all you need to do is turn a collection into a count map it would be better to stream the collection and then doing a `.groupingBy()` using `Collectors.counting()`, this removes side-effects from your lambas in the `.forEach()` calls. This also highlights a big hole in the Map API imo for merging not just a single key but also a way of merging two maps. Currently, if you want to merge all key value pairs from one map into another you can't just do `map1.merge(map2, remappingFunction)` but instead you need to do something with non-pure lambas or go back to imperative code.
Here where I work we use [Ehcache](https://www.ehcache.org/).
most likely means Caffeine as Kaffeine is a different thing altogether. 
&gt; Kaffeine? Do you mean Caffeine or is this something different? Don't listen to that guy. Kokaine is way better.
Caffeine. Sorry for typo. 
Intellij community is a great ide for any developer. If you can spring for the licence, even better.
No matter how you turn it, whatever way you technically make semicolons 'optional' this complicates the language grammar and parsing. Also, while I'm certainly willing to beleave that there are better ways to do this than js does it, it would be nice to actually give a concrete example of a language where you think it is done 'the right way'. 
I think in Kotlin it is done the right way.
https://www.draketo.de/english/wisp
I like [Guava](https://github.com/google/guava/wiki/CachesExplained), but I use a bunch of the other stuff in their library.
That's gold thank you for sharing. Haven't dig into details yet. This one could be good reference for me while working on concurrency in Java
ConcurrentHashMap
&gt;Caffeine is a Java 8 rewrite of Guava‚Äôs cache that supersedes support for Guava
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In that case, you can use a Map, which is the code equivalent of "the keys are also data". But it's actually super rare that you need a Map, I basically never do this and I work a lot with JSON. There's just always structure.
Not quite clear from description, but maybe they just update DB with comm result, or send another async message. In this case they can either return NAQ response to notify broker that message wasn't handled, or use some sort of DLQ to reschedule failed messages (if order is not important). 
Fair enough, you're right.
Nice. Wasn‚Äôt aware. I‚Äôve not had any issues with guava to date. Looks like caffeine improves performance. If I need that I‚Äôll keep it in mind. 
Just being pedantic, but these are not exactly equal. The first example only creates a new list if the key is absent (no entry), the second also creates a new list if the entry was present, but the mapped value was null. &amp;#x200B; So in this case you could potentially get a NullPointerExample in the first example if "foo" is mapped to null (if the map allows mapping to null of course), although in this really simple case there is no "foo" entry yet.
You are correct. To do exactly the same thing would always require 2 lookups (containsKey, get/put).
For me Eclipse any day it comes natural to me. 
H2
wow looks interesting.
[removed]
That looks like an awesome syntax, but the kind of thing that I wouldn't want to hold up records for.
visual studio code!
visual studio code!
It's so weird watching the Java community slowly discover functional programming. Definitely not something I would have predicated a decade ago when there were still serious debates about whether lambda expressions were a good idea.
Per default CDI is set to inject only annotated beans. If you want to change that behaviour you need to add a `beans.xml` and set the flag to `all`. Though since you are getting &gt; Ambiguous dependency for type FundsReport with qualifiers @Default at injection point... you might have some structures which supply `FundsReport`. Like a producer via `@Produces`
I wish java would just allow us to create get; set; properties like in Csharp, it‚Äôs such a straightforward way to eliminate the need for getter setter methods while seamlessly making variable assignment and retrieval seem effortless. 
One of the many things I miss from Kotlin when programming in Java.
does it support cache invalidation after certain time ? 
Kotlin's Data Classes are not comparable to what Java will have. Java's will be much more like Scala with pattern matching, etc.
Can you explain the difference?
Been using eclipse for around 11 years, now. Coming from netbeans, a first it was really hard to get used to, but now it's the most natural thing for me to use. 
Infinispan and Hazelcast are two names that come to mind -- they both come with bells and whistles though (however you define that), so depends how much you want to avoid those. MapDB is typically thought of as a persistent map (key-value) storage, but also has an in-memory cache mode with HTree that has time-to-live options ([https://jankotek.gitbooks.io/mapdb/content/htreemap/](https://jankotek.gitbooks.io/mapdb/content/htreemap/)). It's fairly capable lib, and conceptually quite easy to get started with.
So, i need to put @Default in the classes that i want to inject, i really dont understand why i keep getting this error.
pattern matching is something I miss in kotlin
No, it comes with an removeEldest to overwrite. 
The other two OO languages mentioned by Goetz, [Scala](https://docs.scala-lang.org/tour/case-classes.html) and [Kotlin](https://kotlinlang.org/docs/reference/data-classes.html#copying), both have basically the same thing. So I'd say there is definitely a precedent for those. It would require named and default parameters though. That might be too big of a step for Java.
I‚Äôve read this article before but the date is from last month. Does anyone know what has changed from prior revisions?
That's cool. I've done a similar thing with Kafka and Camel
I tried them both out and have gravitated towards intellij. It just seems more intuitive for me but as many people say that of Eclipse. I would say try both and see what you like better. 
I have used all three, that is Eclipse, NetBeans, and IntelliJ for commercial software development. The one I liked the least was Eclipse. NetBeans was the easiest and for a long time leading in its support for Java. Unfortunately, it has fallen behind. So now I am using IntelliJ, which is very feature rich and powerful. The community edition goes a long way. In summa, IntelliJ is my recommendation. 
There are some set of libraries out there that were basically Guava wrapper interfaces over Caffeine cache implementations. That way you might not have to change how you build your Cache and CacheManager when switching from Guava to Caffeine.
Eclipse is fast, free and amazingly powerful. Definitely recommend it.
The Kotlin pattern matching is worse than Scala, but it is compensated with Kotlin smart casting
Only because my app crashes every few days 
What, other than resistance to the idea, would stop those from being a feature in Java? Off the top of my head it wouldn't break existing syntax.
&gt;smart casting It's not just smart casting (which Java will get as well). It's full object deconstruction with matching, extraction, etc. 
This is plain and simple badassery!
Neither of those. Netbeans is better for beginners. It has a lot of startup project wizards to get go going with a decent amount of boilerplate code.
I‚Äôm sure someone, somewhere will introduce a ‚Äúlens‚Äù library to compensate. 
Infinispan has worked well for me
The question, I believe, becomes "can you construct a partially valid object?" If I have `class Point { ... public Point(int x, int y) { ... } }`, could i make an instance of the class with only one field set? Part of the constructor contract is to guarantee that the object is built correctly and is in a valid state after the constructor completes. This is also the case when using Builder pattern (and it should verify that the constructed object is going to be valid when `.build()` is called).
You'll probably want to annotate your other classes, too, with the appropriate context, e.g. @Dependent, @RequestScoped, @ApplicationScoped, @SessionScoped
&gt; What, other than resistance to the idea, would stop those from being a feature in Java? "those" meaning named parameters, right? I think they'd have an awkward issue of migration and adoption to solve. The names of method parameters in Java have never been part of a class's API. By default, parameter names are not even available via reflection at runtime unless the class was compiled with `-parameters`. That option was added to javac in Java 8, and it's off by default. Imagine if they made it so any existing method could be invoked with named parameter syntax. If they did that, suddenly all method parameter names have been promoted to part of the API. Library authors might not like this decision being made on their behalf, because now they are no longer free to rename their method parameters without users complaining they broke the API. Maybe instead, the library author needs to opt in to named parameters somehow. Either they compile their library with `-parameters`, or they add some new keyword or use some new syntax in the methods they want to be compatible with this. Now there are two kinds of methods out in the wild: the old kind that is incompatible with named parameters, and the new and improved kind. The library authors probably lag behind in adopting this feature, especially if it's based on new syntax (meaning they have to increase the minimum required Java version for their users). Either way, users are probably frustrated because it seems random when they can or can't use named parameters, and relatively few methods support it. Even if they went the "all parameter named are now in the API by default" route, I don't think it's possible for them to do anything about all the old .jar files out there. Those just don't have the parameter names in them at all, as far as I know. Anyway, I don't know of a slam dunk solution to these migration issues. I hope it doesn't stop them from adding named parameters though. That's been number 1 on my wish list for a long time.
Nope. That is a LinkedHashMap feature.
For beginners I think the best is netbeans, it has great support for Java. I currently use Intellij, it was a quite a switch from Netbeans but none the less a great improvement. Either way both are great
An NPE in the first example would violate the contract for `Map#computeIfAbsent`, though? &gt; If the specified key is not already associated with a value (or is mapped to {@code null}), attempts to compute its value using the given mapping function and enters it into this map unless {@code null}.
Hope they implements azuls readynow also. Bye bye warmup
Suggestion is to start with intellij bcz intellij made the job easier for me i have been using intellij for a year now it is pretty awesome!
I think do not waste time using the eclipse if you want to use IntelliJ IDEA in the future.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I recently picked this over guava since it has hooks to add disk persistence
AEM = Adobe Experience Manager, a Java based CMS. 
Check out AEM Groovy Console. https://github.com/icfnext/aem-groovy-console
You could use a servlet to connect to the server. You can rent a server or buy one depending on whatever your app needs. All my projects are small and just for myself, so I just run tomcat on a raspberry pi connected to my home router. Lol
HashMap
I've used infinispan and gemfire. Both of those definitely have bells and whistles. I prefer gemfire, substantially. Infinispan is ok, though the integration I'm working with is rather... exotic. If you want simple, I agree with everyone else here, go Caffeine.
Spring cache is one such. Can work with a concurrent hash map, caffeine, infinispan, etc...
Guava's Loading cache
Can be reduced to `range(0, 5).forEach(out);` with some cheating: import static java.util.stream.IntStream.range; IntConsumer out = System.out::print;
First off, this post is extremely vague. The questions are quite broad so I'm guessing you are a fairly new programmer, or at least new to the client/server paradigm. You'll obviously need to write the server code yourself as well since it will interact with you Android app. Since Android is Java/Kotlin based, I might recommend Spring Boot as a starting place. It's a relatively easy server to get running and there are tons of examples and good documentation. It can be run locally easily. You could also utilize Heroku to run it "in the cloud" for your POC phase so there wouldn't be any upfront costs to you. Hard to suggest any GitHub examples for you, but there is probably an application already out there that could help you get started faster with some example code. Do some googling. Helpful links: https://spring.io/guides/gs/spring-boot/ https://devcenter.heroku.com/articles/deploying-spring-boot-apps-to-heroku Good luck
There are lot more best [open source Java object cache projects](https://www.findbestopensource.com/tagged/cache?fq=Java) available. You can choose EhCache, Redission, Hazelcast, Caffine, Guava, Infinispan, Chronicle Map. If you want just simple object cache then choose Caffine or Chronicle Map. 
Idk someone else gave me a pretty solid answer and suggestion by setting up my own raspberry pi server and running a simple servlet off that. I will definitely check our spring boot in the morning. Thank you! 
You'll need to develop the sever code somewhere and run it locally for debugging purposes etc when things don't go perfect the first time. A pi might work once you have developed the code, but it would be a poor choice for doing the development since it is so underpowered. You'll also need some framework/app to run the server on the pi...
Thank you! Comments like your fuel me a lot! ü§ó
Your are right... Wrote more C#
I appreciate any feedback and suggestions for new features/improvements to the library, thanks!
I really like the [StreamEx](https://amaembo.github.io/streamex/javadoc/one/util/streamex/EntryStream.html) library for stuff like this: Map&lt;K,V&gt; combined = EntryStream.of(map1) .append(map2) .grouping(someCollector); Then all you need to do is find or write a Collector that merges the values how you want for each key.
List::addAll? 
The [JEP](https://openjdk.java.net/jeps/305) doesn't talk about smart casting. The proposal is just a short and conditional variable declaration (therefore you have to declare another variable). And the proposed pattern matching is not ds expressive as the one that Scala has. There is an interesting twitter thread and some debate between redeclaration and smart casting [here](https://twitter.com/relizarov/status/1049615486080692229?s=19)
The [JEP](https://openjdk.java.net/jeps/305) doesn't talk about smart casting. The proposal is just a short and conditional variable declaration (therefore you have to declare another variable). And the proposed pattern matching is not ds expressive as the one that Scala has. There is an interesting twitter thread and some debate between redeclaration and smart casting [here](https://twitter.com/relizarov/status/1049615486080692229?s=19)
I use it at work on daily basis, that's why I asked. We write migration scripts in Groovy and run them using Groovy console API.
You can use Apache Commons Collections4 LRUMap and decorate with PassiveExpiringMap
So is that a good thing or a bad thing for a beginner? Won't it be a crutch?
It looks like in your [submission](https://www.reddit.com/r/java/comments/b2uctr/huge_problem_in_my_work_please_help/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
try reading the docs &amp;#x200B; spend more than 5 seconds on [https://spring.io/](https://spring.io/) and you'll find what you're looking for.
Interesting. Why do you recommend VS code?
I stand corrected, I thought it only checked for an entry, not a mapping to null.
I've had interviews with 'senior' developers who could not explain the different collections. So not only could they not explain the difference between ArrayList and LinkedList, but they also could not explain the different between a Set and a List. That was quite embarrassing for them. 
&gt; Pre-Java 8 ... and then uses lambdas and `forEach()` ;-)
Interesting question. If ARM64 is growing on desktop, it is definitely something we have to look at for building.
Generic collections are a common one, generally with an array definition and assignment and you'll be asked whether it'll compile. Some rough ideas about the various GC options. What's coming up in future versions of Java. What do you like and dislike about Java. Checked Vs unchecked exceptions.
I would ask you to explain to me what is Java, what is Java SE (and what are its main implementations), what is Java EE (as well, a few implementors too) and what is Spring. And a few differences between all of these, maybe some questions about important features and known bugs. &amp;#x200B; Then, I'd probably ask if you would dare to implement a part of Java SE, some aprt that you find messy. Same with Java EE, i'd ask how you would implement some spec from there :)
Smart casting (instanceof casting at the same time) is likely covered by a different JEP. I can't remember if that's what been published or not, but it's a feature they've been discussing on the path to pattern matching. (Switch expressions was the first step).
I hate this kind of questions. In day-to-day work, most developers forget about those differences. You could have a guy who's able to implement the most complex systems and make them extremely reliable, but he will fail these kinds of interviews because he hasn't used LinkedList in a long time or at all, and forgot all about it. After him could come a guy who read college textbooks on java and knows what a difference between ArrayList and LinkedList is, but he won't be of much use in solving real world problems.
&gt; I hate this kind of questions. In day-to-day work, most developers forget about those differences. I can't imagine you 'forgetting' the differences between those core collections, especially the differences between Lists and Sets and their implementations. In general I have had very very bad experiences with developers that don't know these basics: they're also generally not really good at 'the rest' either. &gt; After him could come a guy who read college textbooks on java and knows what a difference between ArrayList and LinkedList is, but he won't be of much use in solving real world problems. It's not the only question we ask obviously. Interviews for senior devs will mostly be about software design / architecture and the choices they made. 
I generally agree, but Set and List?
`computeIfAbsent` and `getOrDefault` are probably some of my most commonly used methods on maps these days. Default interface methods have made me very happy.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That JavaScript logo...
I don't know how often this comes up in senior level interviews, but a gotcha-ish question I seem to encounter a lot is about the difference between the 4 access modifiers. Lots of people forget the default access is package protected
You get a decent startup project that actually does something and you can look at the code and tinker around. It's very good for that.
That returns a \`boolean\`, the remappingFunction requires a List.
I'm not a senior dev. But I also made a complete idiot of myself with these questions. Still got the job. And now I spend a lot of time learning collections. Because oh boy are they essential.
A good interviewer knows that we can work with java for years and not have been exposed to all its language gotchas and ecosystem features. I know I have barely scratched the surface. That doesn't stop me from creating good applications. Technically I expect a senior java dev to know the language grammar, but I'm not going to let you perform a coding excercise. I found those deeply humiliating. So instead, I'll ask you about architectural choices. I'd let you explain your choices. I'd inquire about your experience with features you list on your r√©sum√©, and about features your prospective position requires. You'd make a fool of yourself if you don't answer at all. You should be aware of what you know, and you should be capable of stating your limitations. Don't know something? Say so.
Unfortunately, not everybody thinks like you. 
I've done loads of interviews, the common things I see badly answered are: &amp;#x200B; Q. What us polymorphism? (the ability to execute many different behaviours via a single interface contract, advanced answers can include explaining the 4 types of polymorphism) Q. What's the difference between a Set and a List? (key point, List is ordered and allows duplicates, sets are unique and unordered) Q. Is Java pass by reference or pass by value? (it's value, which is a reference) Q. Do you hate anything about Java/Hibernate/Spring? (hint: never say no, it shows you've not used them) Q. Given requirement sentence &lt;insert sentence&gt; can you identify the objects? Coding challenges that people fail at: \- Write me a linked list in Java \- FizzBuzz \- Reverse a String without libraries 
FYI, here's the talk Abstract To rapidly deliver web applications to production, organizations are turning to infrastructure automation provided by a cloud platform, like Cloud Foundry or Kubernetes. With a cloud platform in place, every team will have what they need to create a CI/CD pipeline that safely delivers applications to a production environment. The final ingredient for success is knowing the right patterns for connecting distributed applications together over HTTP using REST APIs. In this session, Kenny Bastani from Pivotal will dive into a reference architecture that demonstrates the patterns and practices for securely connecting together cloud native Java applications.
Of course it's not literally smart casting like in Kotlin. But, it's semantically the same. Some people will prefer Kotlin's approach, that's fine. &gt; less ambicius ... Scala I disagree. When the full feature is finished, Java will have the most robust pattern matching system - better than even Scala (though Scala may catch up by then). The Java version (per the designs I've seen) will allow deconstruction and extraction almost anywhere, not just in a `match` statement like Scala.
Don't use NetBeans, it's horrible and nobody in the industry uses it. Use IntelliJ, nothing comes close and you'd be as well getting used to it's features, it's where you'll end up anyway.
I think we misunderstood a bit. Difference between List and Set really is basic and everyone should know that. But LinkedList is a different story. I'm toxic about this particular question because I failed an interview for Android dev position where I knew every question about Android framework itself, I knew which layouts are more performant and how to write fast UI, how does some Android stuff work under the hood, I knew how to implement different architecture patterns, I knew everything they asked me about RxJava, about Kotlin, about different ORM solutions, what are some industry standard libraries and how to use them etc. But I still failed the interview because I didn't know about LinkedList. We never mentioned it in college and I've never seen it in real world nor heard of it until that interview. They did however hire a guy who was meh at Android development, he would copy paste most of the code from stack overflow which is prone to memory leaks if you do it wrong, and he would write unnecessarily complex UI code which results in multiple draw calls and hinders performance, he had no idea what na ORM is since he never did any persistence and he wrote all his code in Activities (no code architecture whatsoever). But he knew the difference between LinkedList and ArrayList and that got him the job. I know all this because I personally know the second guy and even trained him in android after he got the job, I also personally know the interviewer who was kind enough to give me feedback on why I failed. If you are the kind of interviewer who would do the same thing and hire a second guy, I stand by my first comment. But if you are not and you actually consider the developer as a whole and see which one of the two would be able to faster adapt and start working on your company's code while providing better overall code quality, then I apologise for misjudging you.
In kotlin you must define all parameters that does not have a default value. It removes the boilerplate of recursive constructors for all possible combination of params
&gt; But I still failed the interview because I didn't know about LinkedList. I would never fail someone for just one such mistake if the rest of the interview went perfect. I wasn't there, I don't know what happened, but I am getting the feeling you let your emotions colour what I said too much. IMHO there is no excuse for a senior Java *backend* developer, which is what I am and what this sub is about, to not know the difference between LinkedLists and ArrayLists and how these two list implementations apply to different use cases. Not knowing these is, again in my opinion, a huge gap in what you should know. But while it reflects quite negatively I never rely on one single question for my decision. 
&gt; Technically I expect a senior java dev to know the language grammar, but I'm not going to let you perform a coding excercise. I can strongly suggest you do. Because there is a lot of developers who either lie on their applications or didn't actually take much of an active role in day to day development. I previous project I worked on I set up an interviewing process because the up until then ad-hoc process (or lack of it) resulted in a few bad hires. It basically consisted of half an hour phone interview, hour technical assessment (similar to what you describe) and then an hour peer-programming coding test where we would implement a simple REST service together. Most hires did great on all 3 parts but we had a few that did pretty well on the interviews (managed to work around most questions somehow) but when they were asked to write actual Java code they completely failed. There are a lot of people out there who can't really do the job and just try to move from project to project whenever they get caught or fired. It takes a long time for big companies to fire people, and in the mean time these people can do a lot of damage.
It's very important with these kinds of questions is to take into account that when you ask them the interviewee is in a completely different frame of mind than the interviewer. You should be prepared to expand on the type of answer you want a lot, and definitely not expect the text book answer you're looking for. We all read different text-books. I had a 'fight' with a HR person once who asked me to write down a typical set of questions and answers. She never told me that she would be the one asking them and, since she didn't understand them at all, would be requiring the exact answer I wrote down.
A peer-coding excercise sounds like a good idea. I'll look into that.
We have trial periods and hire-at-will laws that let us excise a bad apple quickly.
Yeah, I'm Dutch and here it's a lot harder to get rid of someone. And a 1 month trial period is not enough to really see how someone works. Fortunately both of the bad apples were contractors, but even there it took a long time to get rid of them since they had short-term contracts.
If a 1-month trial period won't suffice, then how in the name of Mark Reinhold will a coding session during an interview suffice?
It's mostly sunk cost fallacy from managers. Once they're hired someone they often don't want to deal with the fact they made a mistake. 
"async" is not a word that appears in his description. and why would it be? whatever he/she's doing doesnt need to be async. it can be, sure, but it doesn't have to. 
Ah sorry I see. Personally I would probably just write a static function `concat` or something to do this.
Besides from the invalid return value, this mutates the first list and hence is not safe to use.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In a recent talk, Brian Goetz suggested this may come in the future. I can't remember where I saw it (Devoxx maybe?) but he put up a slide showing record creation (Amber's data classes) using named parameters, etc.
Java or Javascript?
&gt;In day-to-day work, most developers forget about those differences I am not sure this is true.... I use these almost daily while developing in Java and both have defining characteristics that I would expect anyone competent in Java to know.
I have always been asked 3 main questions. -Define different types of collections in Java. -Explain how you used your build tools (Maven, gradle etc) -Is Java pass by reference vs pass by value (always seems to come up) -I have always been asked about ORM's (usually hibernate) and Spring framework. 
&gt;I hate this kind of questions. In day-to-day work, most developers forget about those differences. Understanding data structures is very basic stuff. And it's far from useless. Each data structure have a different purpose. I shudder to think at what kind of code you write when you act so dismissive about essential information any developer should know. 
Am I the only one that audibly gasped at how a simple storefront somehow begat 10 microservices? I feel the Online Store Example presented at 8:10 should have an explicit disclaimer for some of my more adventurous junior colleagues: there should be an logarithmic relationship between your paying customers and your microservice count. The following message is intended for a dev friend mine, who is very likely interpreting this video as his daily affirmation for pounding red bulls while launching kubernetes clusters at his 2 man startup. Please turn this video off and play fortnight or something man. To everyone else, apologies if my trauma is showing.
[removed]
If you liked this, you may also like https://github.com/tersesystems/securitybuilder
Well... it must be semantically the same. We are talking about syntactic sugar improvements ;)
Smart casting is different than being able to declare a new variable at the same time you do an instanceof. And the key point is that when using smart casting you don't need to declare a new variable (and therefore have another name). It may seem not very important, but it is why Kotlin users don't miss the Scala pattern matching that much.
It's more than sugar. You can extract a deeply contained value in a type safe manner. This blows away what Kotlin does. 
Java will be able to extract a deeply contained value from a class instance. This goes way beyond Smart Casting. The semantics of smart casting can be done, but it's much much more.
I take a proactive approach. I am coming from the perspective that there is a lot of work but also a lot of teams with different team dynamics. The last thing you need is to end up in a team and discover its the java shop equivalent of the Third Reich. What I mean by this is a hierarchical team where the beasts at the top of the chain constantly need to reinforce their position in the food-chain by knowing "the right way to do things". For example I recently failed an interview by stating documentation is important, It was remarked that I was one of those developers who wanted to write comments in the code. From the above you need to discover if there are any sociopaths, a good way to do this is to challenge the validity or premise of the question and then take careful note of the reactions to a challenge to their control of the context. Whatever the dynamic and java dev quality metric my basic premise is a champion team defeats a team of champions then it follows that no matter your excellence at fizbuz team dynamic that follows is the crucial issue.
No GA on https://jdk.java.net/12/ yet
The GA downloads are there, but site is a bit confusing. The URL for the three downloads has a GA in the name.
It is Java, but they do pros and cons for apples and oranges and mangos. Namely they compare TestNG and JUnit against a Selenium IDE, and JBehave which is a library that sits on top of JUnit. There does seem to be a bias towards running selenium in the article though.
...and here I am still Java 8ing =|
Now it has been updated to GA .. 
You and me both. 
What is the difference? LinkedList can't matter too much I've never needed it in nearly 10 years. LinkedHashMap is guaranteed ordered...but arraylist already is. 
[Build docs](https://wiki.openjdk.java.net/display/OpenJFX/Building+OpenJFX) seem out of date, but in them I see, &gt;Gradle automatically handles the downloading of all dependencies (such as Antlr and SWT located under \rt\build\libs) Do you know how it downloads SWT? Fedora has latest Eclipse packaged on aarch64, so there must be an SWT package in there somewhere... Beyond SWT, are there any other native bits? I am considering a Dockerfile OpenJFX build starting from Fedora so a) build instructions are extremely easy, and b) producing ARM builds is as easy as rerunning the container build on different machines. Maybe the OpenJFX team could take it and run them on AWS A1 instances at that point for official distribution. Alternately, it seems someone managed to get a [working build for ARMv7](https://archlinuxarm.org/forum/viewtopic.php?f=4&amp;t=11716).
Modules just seem like unnecessary hassle if you already partition your dependencies well, but I'm probably missing some useful use cases. I'm a solo developer, fwiw.
Lots of internal work on this one but I'm still happy about the shorthand numerals (`1K`, `2M`, etc) and the preview for the new `switch` expressions!
If you mean something like... ``` if (a.b.c.d instanceof Whatever w) { //do whatever with w, which is of type w } ``` It is obviously beyond Smart Casting, but it is not Smart Casting. By the way, you can do the same on Kotlin using extension functions: ``` (a.b.c.d as? Whatever)?.let { w -&gt; //do whatever with w, which is of type w } ``` 
I explained it on the [other branch of the conversation](https://www.reddit.com/r/java/comments/b2i8u2/data_classes_and_sealed_types_for_java/eiw3r08/). They are just different concepts.
I still don't even know how to migrate to Java 9 and they're already on Java 12...
Step 1 : Download the Java 9 JRE Step 2 : Try to run your existing app Step 3 : Tears Step 4 : Use the Java 8 JRE
The whole concept of these "preview" features seem odd to me, we moved to a six month release train with the notion "if the features not ready we won't ship it" which is now "ok we'll ship it cause it was really close, ignoring what said about pushing to the next release, put out it behind a flag that needs to be enabled both a compile and run time, which will silently break any repository system...". 
switch expressions are here (preview though) i wonder if java will get if expressions as well in the future
Step 5: ???? Step 6: Profit!!!!!
Step 7: VC funding Step 8: MOAR PROFIT 
Step 9: me in Bahamas with margaritas on the beach. 
* Java 9 is EOL * There's no JRE for Java 10+
These are -as with any interview question- starting point for expanding discussion. If however, the interviewee doesn‚Äôt know what polymorphism is or takes a guess, there‚Äôs not a lot of productive, expanded discussion that can be had. Yes, answers need to be more fluidly accepted but there are anchor points which need to be touched on.
The idea is to get more feedback before cementing it. The JDK release candidates are not evaluated enough and are more shortlived.
You can kind of have them chaining conditional ternary operator ? : result = condition1 ? result1 : contition2 : result2 ........
Stress++;
Thanks. Technically it's identical with RC (same sha256) ;)
&gt; *finalize()* methods have been removed Looks like the popular interview question about differences between final, finalize and finally is going to die.
That download page is for Oracle Java SE subscription customers. [Here's the free JDK](http://jdk.java.net/12/).
Interestingly, JVM boot seems a bit faster. Not that that really matters to most... $ for j in {5..12}; do . chjdk $j; time (java -version; for i in {1..1000}; do java x &gt;/dev/null; done); echo ""; done java version "1.5.0_22" Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_22-b03) Java HotSpot(TM) 64-Bit Server VM (build 1.5.0_22-b03, mixed mode) real 2m4.988s user 0m59.832s sys 0m18.856s java version "1.6.0_45" Java(TM) SE Runtime Environment (build 1.6.0_45-b06) Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode) real 0m28.055s user 0m24.012s sys 0m4.216s java version "1.7.0_80" Java(TM) SE Runtime Environment (build 1.7.0_80-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode) real 0m31.225s user 0m24.836s sys 0m3.564s java version "1.8.0_202" Java(TM) SE Runtime Environment (build 1.8.0_202-b08) Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode) real 0m43.463s user 0m35.948s sys 0m6.516s java version "9" Java(TM) SE Runtime Environment (build 9+181) Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode) real 1m29.909s user 1m37.892s sys 0m12.972s java version "10.0.1" 2018-04-17 Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10) Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode) real 1m21.161s user 1m24.412s sys 0m13.044s openjdk version "11.0.2" 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode) real 0m56.932s user 1m8.892s sys 0m9.516s openjdk version "12" 2019-03-19 OpenJDK Runtime Environment (build 12+33) OpenJDK 64-Bit Server VM (build 12+33, mixed mode, sharing) real 0m39.930s user 0m38.876s sys 0m9.520s 
Yea, in 10 years
You mean 6ing
What is all this thing with previous versions only being available from openjdk? Also it was like java 8 and then suddenly time started moving like 100x faster.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/coding] [Simplifying native-image generation with Maven plugin and embeddable configuration](https://www.reddit.com/r/coding/comments/b30j5y/simplifying_nativeimage_generation_with_maven/) - [/r/programming] [Simplifying native-image generation with Maven plugin and embeddable configuration](https://www.reddit.com/r/programming/comments/b30jbh/simplifying_nativeimage_generation_with_maven/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
The platform moved to a new release cadence. There will be a new release every six months. You can read about it \[here\]([https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence](https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence)).
This guy expects a Java 8 Rockstar Ninja to know these things. Sheesh!
Removed or just deprecated? While I agree with removing them thiswill break a bunch of codebases. My last job we had some really, really horrifying uses of finalize() in legacy code.
As I remember, it was deprecated in jdk 9. The release notes state that it has been *removed* from many classes. Not sure if that means removing it everywhere. 
You can make a diff e.g. at https://www.changedetection.com/comparepages.html (the older version is at http://cr.openjdk.java.net/~briangoetz/amber/datum_2.html).
Thanks!
I love the question about spring/Hibernate. Generally I love then but I just spent 24 hours trying to fix some crazy @Transactional bugs so... Yeah...
LinkedList is a series of nodes linked together, where each node has a reference to the preceding/succeeding node. It's very similar in implementation to a Deque. The benefits are in quick access to the head/tail of the list and I believe add/remove performance but it's not as good for random access (Ie, retrieve by index) as the ArrayList.
&gt;Am I the only one that audibly gasped at how a simple storefront somehow begat 10 microservices? It's a demonstration to show how to actually build out a microservice architecture, what is possible, and to a limited degree, what it would look like, while providing a narrative/use case to make consuming the demo application (architecture) a little easier. I can all but guarantee you that Kenny would not, in a situation you describe, would not recommend nor personally build out such a complex architecture right out of the gate. 
&gt; Consistent with the policy outlined in JEP 182: Policy for Retiring javac -source and -target Options, support for the 6/1.6 argument value for javac's -source, -target, and --release flags has been removed. NOT ANYMORE
If you have Pluralsight subscription (trial works too), you can learn about the highlights (API changes, Switch Expressions, and more) in this course I just released: https://www.pluralsight.com/courses/java-12-whats-new
Wow look at the difference between 7 and 9.
No, Java will eventually support something like... if ( a instanceof Point(x, y) ) { ... etc .... }
For java 9 most likely all you have to do is add `--add-module java.xml.bind` when running the program if use xml (or most json) parsing libraries. Otherwise you dont have to do anything.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
As long as there's a jdk6 folder around, my company is going to use it
Modules seem to be all the rage for enterprise container "app servers" and they like, but for the rest of us, modules are solving a problem that we simply don't have. Unfortunately, a lot of third party libraries are still problematic to use in 9+, and the JVM unconditionally spits out warnings about them anyhow. So our users complain to us about problems (but not really) in code that we don't control. 
So... just pattern matching. That is the feature Kotlin doesn't have that is solved/patched/mitigated by smart casting with: ''' if (a is Point) { //now you can call a.x and a.y or, if Point is a data class... let (x, y) = a } ''' It is not the same (and you can argue that is worse), but smart cast does quite well
The tertiary operator *is* an `if` expression. You can nest them because they're an expression.
I think the presenter and presentation were great but when he mentioned that 10 microservices might be a suitable amount of infrastructure to sell t-shirts, this hit too close to home. When I do consulting work, I deal with both devs and executives who are all too eager to build a blockchain, web scale, serverless, containerized, microservice architecture. 
It's interesting to see that Java has to account for the abdication of the Japanese emperor. The real world is messy and complicated, but I'm glad that Oracle has our back. :)
I would advice to get "Java 9 Modularity" book. For me, it made a lot of things clear. They also have migration chapter, where they migrate Spring/Hibernate application. Also, a chapter on Maven. 
Isn't that why test builds are available also tho? It's more annoying that you have to enable the flag on both compile and use, so you can't just "try this out" as easily in a modular fashion. There's already annoying issues with repositories not knowing anything about specific jdk requirements for artifacts, been hit by that enough times already over the years so know it's only going to get worse over time. Tho that's more at the tooling side - but that's also why no one tests these newer jdks.
I definitely feel that pain, before semi-recently switching over to developer advocacy myself, I was also a consultant facing the same issues. It's a difficult problem. On one hand we need to show how to do things from a technology perspective. However when putting together such a demonstration, we need to focus primarily on the technical aspect, both for clarity, and for time. This can lead to misinterpretations by people viewing those demo applications (or presentations) that you need all that infrastructure/complexity even for relatively trivial problems. My general thought, from having been through that as both consultant and employee, the decisions that lead to overly complex architectural solutions are the result of organizational problems. 
Damn, still using JDK 8...
So do i need to enter my credit card now before downloading? /s
yay /s
This means that many classes of the JDK/JRE are no longer using finalizers. Complete removal takes some time.
.. yes just go for ojdk
Depends on the interviewer, of course. You can get the common low-effort questions by googling "java interview questions." Seriously. Then, learn to code a fizzbuzz implementation in Java. I still give that test, because it *still* weeds people out. Then after that, it's likely to get framework specific -- spring, hibernate, jackson, maven, gradle, etc. But if you want to avoid the easy "gotcha!" questions, just do a google search and read through the first few answers. they'll all just be rehashes of the same question eventually. 
The beauty of modules is that you can create your own small jre. I initially had a docker image of 350MB, shaved it to 75mb thanks to modules
Oh boy. Caffeine is also an app I use on my mac: http://lightheadsw.com/caffeine/ 
If a number like 1000 or 1000000 is too difficult to read, then what about making it *longer* instead of shorter? `int x = 1_000;` `int y = 1_000_000;` `private static final long serialVersionUID = 2009_11_15_001L;` &amp;#x200B; &amp;#x200B;
Not only that, you get startup time bonuses as well since there aren't as many internal classes to load. For example, your server probably doesn't need to bring in the swing modules.
Is this why I see warnings like "found module-info.java. shading will break its strong encapsulation." when using the Maven Shade Plugin?
Unicode 11 support. I could already have unicode characters as identifiers. public final double œÄ = Math.PI; // Pi public final double œÑ = 2.0 * œÄ; // Tau public final double ‚ÑØ = Math.E; // e private final int ¬£‚Ç¨$√¶√∏√• = 42; public void ¬£‚Ç¨$√¶√∏√•œÉŒ£() { } /** * Sigma function. * @param fn a Java 8 Function that takes an integer an returns an integer. * @param first * @param last * @return Sum of calling fn over range from first to last, incremented by one. */ public int Œ£( java.util.function.Function&lt;Integer,Integer&gt; fn, int first, int last ) { return Œ£( fn, first, last, 1 ); } /** * Sigma function. * @param fn a Java 8 Function that takes an integer an returns an integer. * @param first * @param last * @param step * @return Sum of calling fn over range from first to last, incremented by step. */ public int Œ£( java.util.function.Function&lt;Integer,Integer&gt; fn, int first, int last, int step ) { int sum = 0; if( step &gt; 0 ) { for( int i = first; i &lt;= last; i += step ) { sum += fn.apply( i ); } } else if( step &lt; 0 ) { for( int i = first; i &gt;= last; i -= step ) { sum += fn.apply( i ); } } else { throw new IllegalArgumentException( "step cannot be zero." ); } return sum; } That's great. But what I really would have fun with is to be able to name my variables, functions and classes as Emoji characters! The loop iteration variable might be named: happy-face, happy-face, birthday-cake, dog-face. The only recognizable words would be the Java reserved words. &amp;#x200B;
Great, I'm only 5 versions behind.
Just got onto Java 11 two months ago. Sheesh.
```java public static final Integer ONE_MILLION_UNITS=1_000_000; public static final Integer FOURTEEN=14; for(Integer i=0;i&lt;FOURTEEN*ONE_MILLION_UNITS;i+=1){ System.out.println(i); } ``` Magic numbers are bad mkay, so always make sure to extract them into constants to improve code readability!
&gt; It's interesting to see that Java has to account for the abdication of the Japanese emperor I must have missed that part, what are you talking about?
these are all very junior questions
&gt; if the features not ready we won't ship it You're misunderstanding, the preview feature is 100% ready for production. It's a preview in the sense that they're looking for feedback before committing to maintaining the syntax for all of eternity. It could be released right now and maintained forever but even though it has been discussed to death internally, they want to see what people out in the "real world" feel and think about what they've come up with, which is something they can never do unless they release a preview. Chances are that the final version will be identical or mostly identical but it's a good thing to have a preview because once the syntax is final, it will never change again because of backwards compatibility and it'll be in Java forever and ever.
There several mentions of the new Japanese era for Japanese dates. Eras correspond to reigns of emperors.
... and the new default CDS archive (in JDK 12) improves startup times further.
Yes, that is always true. The only exception is when the constant is obviously obvious. And even then it is possible to use a constant if there is any doubt about it being obvious. Some magic numbers should be runtime configurable of course. They are not so constant as to be baked into the executable code.
Isn‚Äôt it says that finalize() method is deprecated in java 9 and removed from java 12 for FileInputStream and FileOutputStream along with java.util.zip package. If I‚Äôm not wrong, finalize() is not completely removed.
If you're already on 11, upgrading to 12 should be about as easy as the old 6-monthly upgrades (e.g. 8u20-&gt;8u40).
We have companies stuck with code written in 1.5, but upgraded for the same of security to 1.8..!
Finally.
One day Oracle woke up and found out that kotlin stole Android and in the Enterprise world it was catching up at the speed of light. That day few engineers at Oracle had to clear their desk, shut down freecell and dust off their keyboards...
Sweet. Just downloaded it. Wish me luck! (I am sure it will be fine).
It's often very easy to add a Automatic-Module-Name entry to the manifest file, and I have only had one maintainer that have been negative to it when I have opened bug in projects.
In looking foward to JakartaEE.
Very cool, thanks
Yup. We are maybe a little code heavy in our interviews, but it has saved us from a few bad candidates. I think about it this way. It is really easy for someone to memorize "SOLID" and what the various principles mean. That person will talk a big game when it comes to things like "What's a good object look like. What are warning signs. ect" On the flip side, it is something completely different to actually put those principles in practice. That is where I've seen more than a few make really bad decisions (even violating SOLID rules!). &amp;#x200B; I had one guy who talked a big game but when it came down to actually doing anything he handwaved everything on our practice problem with things like "We'll do that in the database!".
Unless you are planning on upgrading every 6 months you should probably hang out on Java 11 until Java 17 comes around.
First java is not Snake_Case, please don't use Java conventions in naming. Second, you are not throwing your exception anywhere. throw new ExceptionEmptyTest(1);
Well, theres Microprofile, its pretty awesome, you should take a look, both javaEE and spring are powerful, depends on your needs.
And being replaced by "Name things that changed in java12" :)
Idk, we only use them in Lists right? Its cool feature, but not that big deal imo.
&gt; Do you hate anything about Java/Hibernate/Spring? &gt; Hint: never say no, it shows you've not used them That is really bullshit. No tech is perfect and every tech has it's faults. If the "right" answer is "Yes, everything here is wonderful!" then you've obviously never really evaluated alternatives. But, lets start Java - - Nullability isn't a part of the type system. You end up needing to guard against it using either annotations or convention but even then, it is still a mistake you can make. - The language could be more expressive. Things like data classes and pattern matching would go a long way towards cleaning things up. - String interpolation would be a really nice feature in many instances - The difference between primatives and boxed primatives is annoying and potentially a performance gotcha. This unfortunately won't likely be solved by value types because boxed primitives have class state and are often assumed to have identity, locks, etc. - Checked exceptions are a boil on the language. What's worse, the community is split here so there is almost always friction on whether or not to throw a checked exception - The lack of tuples and destructing is annoying. You can make a generic "Pair" class, but then you miss out on performance gains and optimizations if you use that class in multiple places. Data classes make this better. Hibernate - - It hides your IO boundaries which can be disastrous. This is because it conflates your object model with the Database model. This problem isn't exclusive to hibernate (most ORMs have it). For example for (var thing : things) { thing.setId(5) } Does the above make One database call, multiple database calls, no database calls? Who knows? It depends a bunch on how you've setup your object model and hibernate integration with the DB. That make it really hard to reason about performance just looking at code like this. Spring - I feel like you just aren't trying here. Sure, there is a lot of good in Spring, but there is also a lot of bad. That is what you get with such a massive framework. Are we talking about spring boot? Spring injection? Spring JDBC? I've certainly not touched every part of spring, but I wouldn't say that the parts I have used are free of issue. Spring injection is hardly "best in class" Dagger and even Guice do a much better job. Spring JDBC doesn't really add a whole lot over raw JDBC (but was nice in Java 6 era without try with resources). Spring boot is slow compared to something like vert.x, or a simple Jersey/jetty server. However, the integration of these components can be great. Spring boot, while slow, is super simple to get setup and going. Sometimes that is all you need. I would be far more worried about candidates who COULDN'T find faults with a tech. It means that they haven't ever evaluated alternatives and just do whatever everyone else is.
&gt; The benefits are in quick access to the head/tail of the list and I believe add/remove performance Head/tail access of an array list are just as fast/faster than a linked list. Tail removal in an array list is faster than a linked list. Middle insertion on a linked list (that is, inserting something while iterating) will be faster than an array list. Iterating a linked list will be slower due to the cache thrashing.
It's almost as if there are potential problems that even experienced people run into....
No, they're used everywhere and they're a big deal.
Maintaining the time and date support in any system is a complete pain in the neck. Between daylight saving, culturally-shaped calendars, and leap times (why won‚Äôt nature be mathematically precise, goddammit), there is always an edge case ready to bite - and let‚Äôs not even go into faulty cpu clocks...
&gt; what I really would have fun with is to be able to name my variables, functions and classes as Emoji characters! There are ways of killing oneself that don‚Äôt involve provoking your colleagues into a murderous rage. Think of their families.
I've never heard that called snake case I've always heard it called Pascale case
Even if you hang on the 11 you must upgrade at least every six months (usually less). In fact, you have to upgrade every six months even if you're on 8. The difference is that the nature of the upgrades is somewhat different. The feature releases (11, 12, etc.) are somewhere between the old "limited update" releases and the old major releases, but much closer to the *former*. The patch releases are much smaller than the old update releases, and similar to the old patches. The choice is then between two upgrade models, neither of which is particularly similar to the situation before 9: you choose between a gradual process, much more gradual than the old model, of upgrading to feature releases, and a step-wise process, much *less* gradual than the old model, if you stay with the LTS releases. The great news is that you don't have to choose right away. You can upgrade to 12, etc., and if you see that the gradual process is not for you, you can go back to an LTS. Also, Oracle is free to declare *any* feature release as LTS, based on customer demand. If a popular feature lands in, say, 14, and there's sufficient demand, Oracle may offer LTS for 14.
Someone has already explained that you're not throwing your exception, so can't catch it. Instead I'll give some useful comments on a small fraction of your code so that you might improve. LinkedList&lt;Integer&gt; Fifo = new LinkedList&lt;Integer&gt;(); This should almost certainly be Queue&lt;Integer&gt; fifo = new LinkedList&lt;&gt;(); * The left hand side should be an interface of you can. In this case you're interested in the `Queue` interface rather than `List` because you want to use it as a FIFO. * Variable names should start with a lower case letters (and use camel case), hence `fifo` not `Fifo`. Initial capitals are used with type names, allowing easy differentiation between the two. If you follow the Java style guide it becomes very easy to read other people's Java (and importantly in this situation, for other people to read your code). * You can use the diamond operator (`&lt;&gt;`) to save yourself repeating the generic type.
/r/javahelp is for programming help.
1. Will it cause any issues on road using "\_" ? my uni teacher does use it a lot... 2. I'm reading about exception and try/catch but still having trouble with fully understanding it... `catch (NewName e) { do smth}` why it would not work like it?
Slight differences: + PascalCase has the words directly joined together with capitals in between (used for Classes in Java) + camelCase is PascalCase with a lowercase first letter (used for variables and methods) + Snake_Case is words joined by underscores - can also be UPPER_SNAKE_CASE (as for constants in Java - `static final`) or lower_snake_case
Shall I delete this thread and open new one in /r/javahelp section?
Which is why is nice that Java insulates us from that as much as possible. In particular, you can use `java.time.chrono.Chronology` to deal with different calendering systems.
That would be the appropriate approach.
You're very kind, thank you for advise, I'll do my best to improve.
Core Java, volumes I and II -- the two best references on Java available. Plenty of small one-off programs to highlight individual features, and each volume contains more than 1000 pages of explanations of the various topics. 
A senior developer doesn‚Äôt need to know anything a junior doesn‚Äôt. They just need more initiative and ability to mentor. There‚Äôs no questions for that.
You passed the question, failed at reading. ;)
[https://imgur.com/G0nlxrl](https://imgur.com/G0nlxrl)
Can you give me an example please?
Actually, I used to have a disclaimer. It said ‚ÄúI build highly scalable hello world apps for a living.‚Äù But if you want to understand my opinion on microservices, look no further than this article: https://content.pivotal.io/intersect/microservices-are-not-your-destination
&gt; Will it cause any issues on road using "_" ? I explained a bit in my previous comment, but you should follow the Java style guide as much as possible. The original Sun style guide is old and hasn't kept up with the changes to the languages. The spiritual successor to that is the Google Java style guide. This document is mostly descriptive of what the community does already. https://google.github.io/styleguide/javaguide.html The reason you want to use the Java style guide when writing code is because it means that any existing Java code base is instantly familiar to you. Almost every Java project out there is in the same style and anyone can dive into it without having to worry about getting used to the style; instead they can concentrate on the logic of the code. Honestly, I found your code hard to read precisely because you didn't follow the style guide. I had to figure out where methods started and ended because you had the closing brace on the previous line. Most people would have looked at your code and gone "nope, not bothering with that". If only for selfish reasons, if you want to make it easy for someone to help you, you should use the familiar code style. &gt; my uni teacher does use it a lot... You have a bad Java teacher. 
Thank you very much! I shall look for them
https://www.nurkiewicz.com/2019/03/mapmerge-one-method-to-rule-them-all.html
Oh yeah i‚Äôm not arguing, was just agreeing about how much work the jvm maintainers have to put in this stuff...
&gt; Isn't that why test builds are available also tho? No, because that doesn't give the JDK developers enough feedback from real-world experience of the syntax. 
Removed. They'd been deprecated since Java 9 and in some cases had been turned into no-ops, so didn't do anything anyway. Yes code will break, but we've been telling people for 20 years not to use `finalize`. 
Yes, it's just those few classes, but it's a start :)
You can also add the maven/gradle dependency for java.xml.bind API. In some cases you might also need an implementation of the API, but that's just a dependency away too.
It looks like in your [submission](https://www.reddit.com/r/java/comments/b348yo/theater_help/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What a poor example. If you replace 14 by a constant named FOURTEEN, you just make readability worse. In a previous company I added a lint to avoid magic number and people started to do exactly what you just did. We went from bad to worse. I had to explain that the point of this rule is to name numbers to know what they are for (e.g MAX_HTTP_RETRY) not what they are (FOURTEEN). 
Modules are particularly useful for libraries. It means they can expose their interfaces and public API and completely hide their implementation and private classes without someone using a non-public API. And now your non-public API has hundreds and thousands of users and it's de facto a public API that you can't change. Don't think people won't use a non-public API they find in your jar? Look at how many people used `sun.misc.Unsafe` despite compiler warnings telling them to keep out of anything in the `sun` package.
Top tip, if you have a CI server, run a nightly build against the early access JDK releases (in addition to your regularly scheduled ~~programming~~builds). This is particularly easy if you use Docker to build your projects, as there's docker images of Java 13 up already and there's no manual JDK installation required. That way you can get advanced warning of any problems with the upcoming releases. 
Ugh what a horribly ugly case hahaha.
Where would Japanese eras be used?
Thanks!
The VJ application I am writing in java (Chaoslab) can run on all the way back to Java 6 at this point.
finalize
1. Google What more do you need?
Does Google come in book form? That would be a hefty book......
The Java Language Specification for whatever version the competition is using.
VsCode is really great for learning something like... implementing that knew data structures, alghoritm, learning that feature and so on... You don't even need a big project to notice the downsides of using any text editor with Java.
Final
Is there anything interesting in the new version, everybody? (I'm using OpenJDK 8, poor me...)
r/wooosh
Tests build are literally for testing if the build works xD (as in: bugs, deployment issues, performance, etc). I have no idea why it's so hard for people here to understand what a preview feature is.
&gt; let‚Äôs not even go into faulty cpu clocks... I'm not telling you to go there, I'm just telling you that if you do, I'll read it xD
But if you do want your colleagues to try and kill you (maybe you have a lawsuit planned), replace a random semicolon (`;`) with a greek question mark (`;`) and see them struggle with the compiler for an entire work week „ÉΩ(`–î¬¥)Ôæâ
I'm on a dev-team where I hear our higher-ups use these buzzwords every other week. :(
It's so fast to upgrade the major version number.
Thank you very much! Best help, I will try to look for it at my local library
Saaaame. Lol
What is the job description? Is it back-end or full-stack? Any framworks involved? 
Be ready to speak about the items on your resume in great detail. From my experience, interviewers will go through the resume and pick out items from it and start a conversation about it. This often catches those who use a tool/language for about 5 minutes but decided to put it on the resume anyway. Make sure you are comfortable with everything on there. Other than that, just relax and try not to go off on random tangents. Nothing is worse than giving someone an interview and they talk for 20 minute about their past experiences. Be comprehensive, but get to the point.
there's an interesting new `switch` expression. you can write the same switch/case for assignment or return values, only more concisely and as an expression
Back-end , spring basically
Nice.
I've migrated all my apps to Java 11, or at least, my ones that will be migrated to Java 11. It's quite... interesting, to say the least.
Well, you have to add a lot of modules if you're using JavaFX, like, 250 characters worth of modules... other than that, upgrading to Java 11 is mostly okay depending on what dependencies your app uses.
Illegal reflective access warnings are going to be a fun one to fix for unmaintained dependencies when the warnings turn to errors then turn to removals.
That sounds kind of... unorganized and chaotic? Probably not the best way to be maintaining and supporting one of the worlds most popular programming languages...
I just finished upgrading most of my apps to Java 11 (at least, the ones that *can* be upgraded to Java 11 currently, some are blocked by undermaintained dependencies) and I think I'm going to be done upgrading for a while. It's not really fun, and most of the time it doesn't really feel worth it. I'll see you guys at the next LTS release.
The most obvious thing is to use the [`--release` flag](https://docs.oracle.com/en/java/javase/12/tools/javac.html#GUID-AEEC9F07-CB49-4E96-8BC7-BCC2C7F725C9__GUID-D343F6B4-3FDD-43A8-AD24-43DD70214471) for the compiler, so you don't accidentally use post Java 8 APIs like `List::of`. That's also configurable for the [maven-compiler-plugin](https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#release).
I would prepare my self for hibernate entities configuration, one to one, one to many. Some MVC standard, controllers, services, configuration.
[removed]
Two annoyances recently for me that's making me consider switching: 1. No folding of code blocks 2. Doesn't support /src/main/java/co.company/ path structure
Got to wonder if that is true for the current versions of 1.6 and 1.7. They shipped the final (Oracle) build of 6u211 in December and I believe JDK 7 was 7u211 in January. (Assuming you have an extended support contract and can get the patched versions) . Will try that in a VM tomorrow since you were kind enough to include your test.
I would prepare some hibernate configuration, entities relationship. Spring Configuration, MVC design pattern, controllers and services. 
Yes, last RC build essentially gets promoted to GA. This avoids untested build being released and last minute surprises that might come with it. They adopted this practice for JDK 11 as well. Minor patch release might follow the GA build soon if at all there are non-critical fixes.
I mean some of us are still stuck on 7 so yeah you're lucky!
Thanks to Oracle:) Good job
Choice of ‚Äúimage‚Äù in title win lead to confusion 
Probably an E-book.
No problem! I try to help where I can. Check Amazon if your local library is out of stock
I'd recommend just compiling under java 8
Yeah I think that‚Äôs a fundamental problem. A lot of developers are getting left behind when it comes to microservices. In many cases microservices won‚Äôt help. Also, being a consultant and being expected to implement a bunch of microservices is counter to the point of the benefits that they‚Äôre used for. It‚Äôs about people, teams, autonomy, and ownership. The buzzwords inevitably water down the benefits and populism takes over.
sure there are, what kind of planet do you live on? 
Don't just hop onto my joke like that. Expect a call from my lawyers. Sometime in the future. Maybe never. 
Then there‚Äôs the old Shipilev technique. Suppose you want a variable to hold a class. You can‚Äôt call it `class` because that‚Äôs a reserved word. You could call it `clazz` or `klass` but those are ugly. So instead you call it `—Ålass` (with a Cyrillic —Å).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That's like asking what the differences between a "flywheel, steering wheel, and spare wheel" on a car.
The best way (imho) is to take a project you did with c# and simply rewrite it with java. Take documentation and a bit trial and error to find out what functions etc to use. If you get stuck google the solution. Its imho the best way to get to know the language better
Thanks, I will definitly try it out.
I don‚Äôt understand the reason, why should be the ‚Äústuff you mostly want to program written in Java‚Äù? Are you writing programs that need to run on ie. Solaris or other niche cross-platform reasons? Or are you having library issues with .Net (Core)? Or you simply want to change jobs cause you think that Java will give you better probabilities at landing one? I would argue that learning F# will make you a better OOP programmer in the end and you‚Äôd be staying in .Net ecosystem, I also think that going to Java would be a little bit of pain coming from C#, although the syntax seems the same. Figure out and articulate your why first so that we can better help you üëç
Or just include a dependency on openjfx 11?
Isn't is supposed to add them automatically when the jar is also a module that declares it's module dependencies?
Firdt of all, thanks for the answer. Second of all, for example one thing that requires Java is Android Studios and I definitly want to check that out for a while. But I think I have to point out that I am still going to school and we modtly focus on C# here. I just thought for myself that it would later on give me better chances in job searching if I cannot just write in C# but also in Java.
Most of learning java is gonna be learning the java library ecosystem.
Although it's not enabled by default. You need a command line argument for both `javac` and `java`.
I can't think of a less practical book that has Java in the title. Even Lonely Planet Java will be more useful. JLS is only useful if you want to write a JVM or you don't want to be fun at parties.
1. [You mean folding like this?] (https://www.eclipse.org/pdt/help/html/using_code_folding.ht) 2. Not sure what you mean? You seem to be writing out a standard maven project structure (which I use in most all of my projects). Besides, Eclipse allows you to use any folder anywhere within your project as a source folder, are you having problems with it?
But then he won't be able to use 8+ features and I think that was his goal
I mean if it uses 8+ features it's not gonna run on 8 lol
I've never actually tried it. Isn't it like some features are compile time only but the resulting bytecode can run on lower versions?
My understanding is you generally get an invalid minor.major version exception (I'm paraphrasing the exception obviously)
That was sarcasm.
Hey man the best place to start to my opinion is the official tutorials https://docs.oracle.com/javase/tutorial/ you can easy read all of them in like a day or two :) and you should know the Java core, where basically half of the keywords in C# are missing :) After that I would recommend you to start writing something( I guess web ? ) If so... read something about an ORM - JPA then read something about Spring Core. Then read something about Spring MVC. Then read something about jUnit then write something end to end https://baeldung.com is a nice place with a lot non java related hello world tutorials with JPA and Spring 
One where I‚Äôve been a developer for 20 years. Care to give an example or just be derogatory?
Should have included an /s or a smiley or something. It's very difficult on the internet do distinguish sarcasm from trolling and from stupidity.
1. You linked to a php how-to, you can't fold java blocks 2. I'm talking about using co.company as a directory name instead of co/company (two directories). Eclipse can't reconcile the package name with the class location. I'd like to just switch to two directories but then we have to deal with the annoyance of git not properly tracking moves/renames, and I'm the only one in the team on eclipse anyway 
wow thanks a lot! I will definitly check all of this out
Finally!!
Hah, sorry about the wrong link, a little to triger happy there :). [But here's a video showing what I'm talking about](https://giphy.com/gifs/vwT3gmXBjHPb4VMxia). You mean you want more fine grained block folding? And I see‚Ä¶ I've never tried using folder names with dots in them so I haven't hit that issue.
&gt;There's no JRE for Java 11+ For everyone who was as confused upon reading this statement as me: it's true. There is no JRE anymore. The JRE is practically a subset of the JDK and with jigsaw you are supposed to use the new Java linker (jlink) to bundle an application-specific runtime with your jar instead of relying on a complete runtime (JRE) being available in your target environment. I initially thought "there is no JRE" was some part of the Oracle license change fearmongering ^^'
We have builds for ARMv6hf: [https://gluonhq.com/products/javafx/](https://gluonhq.com/products/javafx/) If there are changes needed to build on ARMv8, it would be great to create a PR at [https://github.com/javafxports/openjdk-jfx](https://github.com/javafxports/openjdk-jfx) so we can merge them. Basically, it probably starts with copying buildSrc/armv6hf.gradle into an armv8 specific file and make some changes. But I don't expect many changes.
when you say online do you mean it's a coding exercise or do you mean it's a skype call etc?
It's a shorthand formatter not support for shorthand literals.
Which part do you find chaotic? The open source project has regular releases, and the commercial entity provides a support service for versions on a regular basis, plus possibly more if customers demand it.
LTS releases should be planned in terms of support, upgradbility, longevity, etc. The fact that they allow any version to potentially be an LTS version sounds cool in theory but in practice it means they don't plan far enough ahead to know which versions will be LTS or not.
If the jar is built with Java 9+ support in mind, yeah. If the jar is no longer maintained and you are stuck with a version that doesn't have module support built in? Well, then you may need hundreds of characters instead of just `java -jar app.jar`.
If the jar is built with Java 9+ support in mind, yeah. If the jar is no longer maintained and you are stuck with a version that doesn't have module support built in? Well, then you may need hundreds of characters instead of just `java -jar app.jar`.
LTS versions are [certainly planned](https://www.oracle.com/technetwork/java/java-se-support-roadmap.html): one every 3 years = 6 releases. So 11 is LTS and 17 will be as well. But if customers demand another product in addition which they can provide, why would they say no?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What's the JRE version of this JDK?
``` java version "12" 2019-03-19 Java(TM) SE Runtime Environment (build 12+33) Java HotSpot(TM) 64-Bit Server VM (build 12+33, mixed mode, sharing) ``` ``` jshell&gt; System.getProperty("java.version") $1 ==&gt; "12" jshell&gt; System.getProperty("java.runtime.version") $2 ==&gt; "12+33" ```
There's no such thing as a JRE anymore. It's all just JDK, or your own linked distribution.
I have similar struggles here. There are some plugins to eclipse and intellij, I believe.
Just a reminder that there is no separate JRE any more. There's only the JDK. 
Also, do not rely on `java.vendor.version` because the Oracle JDK will now return `null`.
I have actually suddenly started getting a JNI error while running Java programs. I tried reinstalling the JDK. Now I have installed JDK 12 but I'm still getting the same error. It says that **MyClass has been compiled by a more recent version of Java Runtime(class file version 56.0), this version of Java Runtime only recognizes class file versions up to 52.0**
Anything different from open JDK ? 
here is their release note https://github.com/alibaba/dragonwell8/wiki/Alibaba-Dragonwell8-Release-Notes
That's because you're not running the jars on a Java 12 JVM. You built them with a Java 12 compiler and targeted release 12. Java 12 is bytecode version 56. 52 is Java 8. You have an old Java 8 JVM somewhere and that's what you're running. Either run with the Java 12 `java` or recompile using `javac --release 8 ...`
Agreed about not using finalize. Unfortunately, there is some really, really terrible code out there haha.
[Java Version](https://imgur.com/jLDzmt8) [JNI error message](https://imgur.com/JyU20tx) &amp;#x200B;
Right, the code has been compiled by Java 11 (or Java 12 and a `--release 11`) because it's bytecode version 55. 
We've all been there and vomited over what we saw there.
Because your `java` doesn't match your `javac`or `jshell`. Which is what I've been trying you for three comments now.
I'm sorry but how should I solve this error?üôÅ
So how do I get another JVM?üò¢
I've told you twice already: * Find and use the Java 12 `java` Or * Recompile your code using `javac --release 8`
It's only ever difficult if you're daft.
The 2nd option worked. Thanks! :) The first option though, I have got a folder called **jre 1.8.0_201** with my JDK when I installed Java SE 12. So where will I find the Java 12 java? I'm sorry about being so dumb but I'm really confused. I'm sorry for irritating youüòì
The situation is as follows. JCache is an general-purpose SPI that was created by someone else for you and cache vendors have written providers (adapters) to support JCache for you. Now you want something different for your narrower use-case and JCache abstraction does not suit you anymore. In this case, you need to go one level down. Next, you need to decide if vendor-lock is a problem for you. If it is, you will need to invest time to write your own SPI and create concrete providers.
That's the message when the class file's wrong.
You could use `$class` but that's horrible for other reasons.
Sounds like you botched up the installation. You should deinstall everything (Java) and reinstall the latest 12 JDK. It makes no sense to have a JRE 1.8 inside your JDK 12 directory.
Doesn't work. You can't use `var` if your release is set to 8.
No. ``` &gt; javac -source 12 -target 8` [`Sample.java`](https://Sample.java) warning: source release 12 requires target release 12 ```
It's a Skype video call, I assume I'll be asked technical stuff and also a coding exercise ( they sent me something for this ), it's one hour long 
Just a question, what happened to var replacing primitive types? Ex) var ten = 10 var str = "string"
Probably just the JRE 1.8 before JDK 12 in the PATH...
This one‚Äôs Made in China.
Well not really. Users will just put your JAR on the classpath, or use reflection. They aren't going to not use internal APIs just because they're labelled as such and the compiler tries to make life hard.
ah good catch, i didn't see that.
No. It's not.
You'd be an idiot to trust anything in that API. 
It's open sourced and on github, it can be vetted by anyone to ensure nothing malicious is in there.
Eventually the classpath is going away.
You going to vet it every time it updates?
I wouldn‚Äôt trust !
Error solved finally. I realized that the jre folder inside my Java folder had somehow got installed in parallel. Due to this I didn't realize that it shouldn't have been a part of the installation. I thought it was a part of JDK 12. Anyways, I have removed it now and now my Java is working. Hurray! Thanks for your help everybody! :)
It looks like in your [submission](https://www.reddit.com/r/java/comments/b3cptz/no_shenandoah_gc_in_both_commercial_and_open/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You can check the commits on github...
Go ahead. I did check some. The commit messages are horrible / non existent. 
Vert.x is very micro-services oriented and reactive. This makes it a really great way to model event-driven services in a logical way (event queues, websockets etc.). &amp;#x200B; It is a very fun to play with, and the framework is very well written. It also has a lot of support for alternative JVM languages. I have not tried it in production code though, because the programming model is very foreign to most Java developers.
You don't look at the commit messages, you look at the code. I don't understand this rampant sinophobia on reddit. 
`var` was added in Java 10.
That bug seems super clear and reasonable to me - Oracle don't want to provide commercial support for a complex GC they didn't write. If you want commercial support for Shenandoah I guess RedHat are willing to provide it.
&gt; Now, i couldn't care less for what Oracle is doing with their commercial builds. I'm not talking about the commercial builds but the "open" builds, the main builds on the main OpenJDK site.
But the commercial builds are I think now intended to be identical to the open builds, for the same version. It was mentioned in the JEP that people 'may choose to disable building Shenandoah'. Anyone else can build OpenJDK with different options.
Is this the one where they have a co-routine implementation? [At 26:00](https://youtu.be/94eTZsNYYBE?t=1560) From : https://www.reddit.com/r/java/comments/aqwvqq/extreme_scaling_with_alibaba_jdk/ Can't find where in OP's repo they could be. What would be great is that they contribute their work to OpenJDK (it seems they heavily rely on it, looking at the Oracle notices in the code).
I had successfully built Java 11 code for Java 9 runtime using Eclipse's compiler via a maven plugin. Or 10 code for 9 runtime, can't remember for sure. Anything above 8 code wasn't able to build for 8 runtime, IIRC.
Cool. Now source code and its developers can be monitored and reported back to the government. Its funny what people call open-source these days.
It‚Äôs not an unfounded concern. The idea behind open source software is that you have enough eyeballs looking at the source to identify any malicious commits (or malicious intent, in this case). If you don‚Äôt have a lot of users then you probably don‚Äôt have enough people sifting through the code. So, in this case it is not enough to simply say ‚Äúit‚Äôs open source, so it‚Äôs cool‚Äù - it would be good to have the software vetted by people who do this for a living. In other words, trust but verify.
There is a github issue that asked for just that, somebody(assuming he works for alibaba) mentioned that it will not be included initially
You don't have to. You can read it. But, would you bother with others available from better sources?
Why? It‚Äôs open sourced. You can verify if System.out.print is sending data back to China.
That is exactly the reason, sending data back to China! 
Yea, I agree. How does it perform comparing to Spring boot/Spring webflux?
This repo contains the actual implementation that they added ontop of OpenJDK https://github.com/alibaba/dragonwell8_jdk The one I posted is the official "main" repo with documentations. All of the child repo could be found here: https://github.com/alibaba/?utf8=%E2%9C%93&amp;q=dragonwell8&amp;type=&amp;language=
When I start an interview round, I take the first interviews as training. This helps a lot to get rid of nervousness plus it shows me what companies currently expect from candidates. You would be surprised how repetitive interviews are.
Nice! Seems like their coroutines version are not for the very near future. https://github.com/alibaba/dragonwell8/issues/2 &gt; Will dragonwell include this coroutine implementation? &gt; For 'preview' (Mar, 2019) and 'GA' (June, 2019) versions of Dragonwell8, Wisp coroutine will not be included. The plan was to contribute everything to the community, so please stay tuned :) But some real code is already available: https://github.com/alibaba/dragonwell8/issues/1 Which tell us it is available as other git submodules: https://github.com/alibaba?utf8=%E2%9C%93&amp;q=dragonwell8_&amp;type=&amp;language= The main one being here? : https://github.com/alibaba/dragonwell8_jdk I'd love for a JVM expert to do a diff and expose to us mere mortals what and how modifications where made. 
Please don't call people idiot. Especially when it's based on nothing but your own assumptions.
Tell me when anybody just did that.
But you can read the source?
What platform are you using? If you're on a GNU/Linux distribution, it would make more sense to use the distribution builds and lobby them for Shenandoah inclusion if it is not already provided. This also has the advantage that these builds will be updated with security updates, the next of which is due in April.
Yes but there is alot more to open source then freely readable source code. The only reason we use the term 'open-source' is because it came from the free software movement. https://en.m.wikipedia.org/wiki/Free_software_movement
You should just use JsonPath expression instead of invent urself.
There is bigger picture, it is not about your data being sent to China, it is about how is it used by them. If you are aware China has no rules about that. I don‚Äôt want to get into politics here, it is more than sharing your data, that is all I want to point out!
Yeah, no. From wiki: "Open-source software (OSS) is a type of computer software in which source code is released under a license in which the copyright holder grants users the rights to study, change, and distribute the software to anyone and for any purpose." That's it.
Yeah man! All this open sourcing is too open for my taste. Surely western organizations are doing this better, like Oracle! /s
I would trust Google more than Alibaba. Alibaba is controlled by the Chinese government, Google is not.
If they are not, they might not be a good employer after all.
Go look at the commits. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don't get people who don't trust. They can't possibly inject malicious code that you can't see. If you are afraid that they somehow hid it in a way "nobody can found", you can run a whatever app on it and monitor network calls etc. Also don't underestimate the community, I am sure some qualified people would look into the code to see if it has something malicious or not.
It will require you to have strong engineers and they will be less productive than coding in a more imperative style. It will outperform Spring boot and most other frameworks on the same machine. However unless you have super low latency requirements or need to squeeze a lot of capacity out of a fix resource set of machines it won't be worth it. (disclaimer: I really love vertx but this is my experience)
just put your tinfoil hat on and some reading glasses and you'll be fine. 
I very much agree with the assessment that it is very imperative. On the one hand that leads to very little "magic", but on the other hand, annotations are nice. &amp;#x200B; One advantage of the imperative style is that it is much easier to do things like compile Vert.x to native using GraalVM for use in lambdas.
Yeah more fine grained than that, particularly I often have to refactor large if/else blocks. I didn't realize I wanted it until I saw intellij could do that and more (you can define regions with comments and then collapse the entire region).
It looks like in your [submission](https://www.reddit.com/r/java/comments/b3ekbm/why_is_my_array_not_reversing/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The great thing about Open Source is that you don‚Äôt have to *trust*. You can check the code yourself or have others check it and confirm that it‚Äôs harmless.
Agree that is the best part of it!
If you want Java 12 support you'll need: https://marketplace.eclipse.org/content/java-12-support-eclipse-2019-03-411
Open source and free are not the same. Open source means you get to see and read the source, period. Nothing above that is required.
&gt; sinophobia LMAO. Do you know what a phobia is?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Not possible, changes between 8 and 9 are not backwards compatible https://stackoverflow.com/questions/53325376/is-it-possible-to-compile-java11-code-to-java8-bytecode-and-run-on-8
no https://stackoverflow.com/questions/53325376/is-it-possible-to-compile-java11-code-to-java8-bytecode-and-run-on-8
These comments remind me of https://en.m.wikipedia.org/wiki/Underhanded_C_Contest
Thanks, I've clarified that point
Did you trust to Oracle distribution then?
I don‚Äôt trust any of them however some are worst than the other. If you have two options which one would you choose : a person who just doesn‚Äôt care (not good /not bad, just doesn‚Äôt care) or a person who is an evil. 
I pointed this out in a release candidate a few weeks back. Shenandoah was unsupported on my Centos box, but someone else reported it was working for them. &amp;#x200B; Oddly, it's working fine on my Mac. &amp;#x200B; $ ./java -version -XX:+UnlockExperimentalVMOptions -XX:+UseZGC openjdk version "12" 2019-03-19 OpenJDK Runtime Environment (build 12+33) OpenJDK 64-Bit Server VM (build 12+33, mixed mode, sharing) &amp;#x200B; $ ./java -version -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC openjdk version "12" 2019-03-19 OpenJDK Runtime Environment (build 12+33) OpenJDK 64-Bit Server VM (build 12+33, mixed mode, sharing)
LMAO. Do you know what word [definitions](https://en.wikipedia.org/wiki/Sinophobia) are? 
A lot of people would disagree with that, including the [Open Source Initiative](https://opensource.org/osd).
Vertx isn't imperative, it's reactive (i.e. when this happens in the future then start waiting for this other thing to happen). Spring is more imperative (i.e do this, do that, then do this, if this then that)
To be honest, I hope they don't include any features not present in OpenJDK. In the worst case, this will just fragment the ecosystem. It's bad enough with Android only supporting a subset of Java 7, imagine Java libraries that won't even run on OpenJDK.
Use the version API instead: `jshell&gt; Runtime.version()`
I'm perfectly aware of what sinophobia means. I'm baffled how you think it's applicable in this context, with all the insane industrial espionage from Chinese companies these days.
They can use their custom word definitions all they like. I don't see why I should be concerned with that.
Perhaps because you are contradicting their generally agreed upon definition with your own custom and non-consensus definition.
I still see 2 magic numbers in the for-loop I think you meant for(Integer i=ONE_MILLION_UNITS - ONE_MILLION_UNITS;i&lt;FOURTEEN*ONE_MILLION_UNITS;i+=(ONE_MILLION_UNITS/ONE_MILLION_UNITS) ){ System.out.println(i); }
It‚Äôs not just primitive types. var strings = new ArrayList&lt;String&gt;(); You can do it for any local variable where the type can be inferred. 
Vert.x is not a competitor to Spring, it fills a different niche, if I can use that term. Somebody already said that if you want reactive, and great performance Vert.x is a great toolkit, if you can understand it's "gotchas". (Don't ever block the eventbus is one) You can also embed Vert.x in Spring, and use Spring for DI. I often find myself doing that if I want some sort of message bus inside of an application. Vert.x is a reactive toolkit, and it is great for that, but Spring is a better choice for most projects, due to its great support and integrations with everything, and its more simple to understand programming model.
[kilim](https://github.com/kilim/kilim) (note: i'm a maintainer) is a minimalist fiber/actor library for java. you write imperative code and it converts it (by weaving) to reactive bytecode allows it to scale to a similar degree, but at least for me, the code looks very much like conventional java 
I guess it‚Äôs a KPI project.
java is huge and the ecosystem orders of magnitude larger. it really matters what type of problems you want to solve and how "technical" you want to be - eg, most webapps are pretty simple at the application layer, but the libraries that they rely on often do intricate transformations (runtime bytecode generation is huge in java) 
long-time netbeans user. any examples of intellij features (esp community ones) that you miss in netbeans my experience was that intellij was glitzier but the core editing in netbeans was better, eg macros and switching projects were much faster (the latter totally seemless in nb). but my labeling features as glitz may be driven by not really appreciating them due to lack of experience 
&gt; their Yes, it's their definition. I didn't say Open Source¬Æ, I said open source. Common English. Stalman doesn't get to redefine it.
has anyone seen a summary of changes to unsafe or reflection ? at the beginning of the cycle there was a lot of pressure to tighten the reigns, but that enthusiasm seems to have mellowed
anyone have any experience with how well the caches support async ? guava pretends to, but it's only for a subset of the operations
I chose ReactiveX/RxJava over Vert.X. No real reason as they are extremely similar. I saw massive improvements over the default Spring Boot/Tomcat threading configuration, especially if you have a non blocking DB driver. The code tends to get messier though. Everything is wrapped in an extra layer of generics, which tends to make return types lengthy. My junior devs at work had little trouble picking it up after I explained how it worked.
Do you have a source for this claim? 
I think it takes a string parameter from header of your api call whose parameter name is authentication. This is my assumption. 
I believe there is support for Kotlin coroutines also for Vertx. Obviously not the same thing but similar syntax effect
the @HeaderParan is an annotation that will get a header from the request based on the argument passed into the annotation method - that's the only method argument needed on here, and you don't explicitly pass in anything, it's auto-magic. You will get an array of Book objects back.
Sorry, a list of Books :) answering on mobile, can't see the code while I'm typing my reply
But what does the ("authentication") bit do exactly?
Why not? Isn't `var` a pure compile-time feature? Does `var s = "hello";` not generate the exact same bytecode as `String s = "hello";`?
That's the string name of the header it pulls from the request
Go look at the code.... Personally. Seriously. When you trace all the pointers and see how the code is organized you can see for yourself that between the commit messages and the code it very vague. 
It allows the value of "authentication" from the request header to be passed in as an argument, assigned to the String named authentication
[tell me what this does](https://raw.githubusercontent.com/arialdomartini/morris-worm/mas) Don't look at the title... Just from the code with a poor commit message tell me what that does.
Wow that's pretty good! But what about that dumb `i` variable name? How is anyone supposed to figure out what that's supposed to do?! Variable names are supposed to be expressive and clear!!
&gt; Why not? IIRC, way back when java decided that rather than figuring out which language features require new bytecode and which don't, they decided it was easier to maintain things if they made clean breaks with both language feature and bytecode requirements. I could be mistaken, but I believe that is what happened here. That being said, I believe var can do things that you can't really do with non-var. For example var thing = new Object() { private int bar = 1; } var foo = thing.bar + 1 ends up being legal. I'm not sure if you need new bytecode for that (probably not). But it sort of demonstrates that var can be doing more complex things under the covers. &gt; Does var s = "hello"; not generate the exact same bytecode as String s = "hello";? Yes. But as I wrote above var does more than just that. Another example I've seen thrown around is var foo = List.of(1, "bob", 1.0); IIRC, that ends up making a Voldermort type. Rather than just doing List&lt;Object&gt; like you might expect, it ends up making something that is like `List&lt;? extends Comparible&lt;String&gt; + Comparible&lt;Number&gt;&gt;` Or something silly like that. The reason for that is because you might want to call a function that takes a "List&lt;Comparible&gt;", which you could do with the above.
To give a broader answer than those who already replied, it is applying an Annotation to the parameter `authentication`. Annotations are used to do some advanced magic "behind the scenes" and can be used by frameworks, IDEs and tools in general for a variety of features. For example: one basic, common annoation for Java is @Deprecated, which does absolutely nothing except let you know that the function it's on isn't supposed to be used anymore because a better function has been written instead. Of course, compilers can then check for the annotation being present to issue a warning and text/code editors can look for it to show you a warning on-screen that you shouldn't use the deprecated function (or at least use it knowing it is deprecated). As far as syntax goes, an annotation is like a function, so it can take zero, one or multiple arguments. For example, you function is `getBooks(authentication)` in the same way that the annotation is `@HeaderParam(headerParameterName)`. An annotation with no parameters would be like the aforementioned `@Deprecated` and one with multiple parameters could be `@HeaderParamWithDefault("authentication","ldap")`. Now that you know the basics of an annotation, check out what the framework you're using is and look up online what this particular annotation is supposed to do. If you can't figure what framework you're using, just ask your teacher. Final note: annotation can be used not only for method parameters like in your example but for entire classes, fields, variables, methods themselves, etc. They're a very powerful tool but a little too advanced for a beginner to worry about :) this tutorial has a few examples but I suggest you just take a look at the snippets of code to see what other annotations can look like and not bother about understanding them too much at this point https://www.geeksforgeeks.org/annotations-in-java/
Thanks! The library is fluent!
Take a look [https://www.concretepage.com/webservices/resteasy-3/jax-rs-headerparam-annotation-example-with-resteasy-3](https://www.concretepage.com/webservices/resteasy-3/jax-rs-headerparam-annotation-example-with-resteasy-3)
Spring feels more and more like black magic. They want to simplify everything by annotations and starters. Sometimes I feel it‚Äôs difficult to understand what is going on 
what't news &amp;#x200B;
How sure are you that is the problem and not just a "If you uncomment this, things will break". The short answer is "It depends". You can directly call the run method of a thread, that won't cause a new one to be made or for the code to run concurrently. It isn't enough to extend a thread to make it run concurrently. Can you post an example? (also, this may be more suited for /r/javahelp )
Assuming this is something like Jersey and http, Headers usually look something like `authentication: Bearer bnroenpeoginapeorng` So if you had a "foo" header it would be `foo: bar` What this annotation is saying is take the contents of the header "authentication" and deposit them in the string annotated. So in my example, `authentication` would equal `"Bearer bnroenpeoginapeorng"` Or, if you did `@HeaderParam("foo")` then the string would have the value `"bar"` Make sense?
I was able to get confirmation from the author that the uncomment was intended. Since my focus here is finding errors in concurrency/multi-thread safety, I'm assuming that errors like this are only done relevant to that scope. The thread in question, ConnectionHandler, is called here: public void run() { try { serversocket = new ServerSocket(thePortNo); System.out.println("Server started"); while (!theStopFlag) { // listen for a connection request on serversocket // incoming is the connection socket Socket incoming = serversocket.accept(); // start new thread to service client ConnectionHandler conn = new ConnectionHandler(this, incoming, theEvent); System.out.println("Connected to:" + incoming); connections.add(conn); } serversocket.close(); } catch (Exception e) { e.printStackTrace(); System.exit(1); } } Would the removal of "extends Thread" from connectionHandler's declaration have an impact on this, where concurrency/multi-thread safety is concerned? 
In the posted code, I can see several potential concurrency issues. I'm guessing this is homework, so I'll say, look at the state that is shared across threads or potential threads. Does it change? Are those changes guarded? extending thread would all it to run concurrently, but that is certainly not the only issue here.
Lab work but yes. There are a few more classes which are also ripe with concurrency issues. I'm also aware of a number of the ones which are present in the posted code. It's wrong to fixate and perhaps without my lecturer's error in not removing the commented out code, I wouldn't have, but my confusion stems more from a lack of understanding of the extends thread declaration - and how removing that would change any interactions. To touch on what you said at the end, does this mean that the lack of extend thread suggests the opposite? (i.e. it inherently would not run concurrently) 
When annotations have more than one argument passed, you have to use the parameter names on all the arguments. &amp;#x200B; @HeaderParamWithDefault(value="authentication", default="ldap") &amp;#x200B; When you pass just one argument it is always applied to the `value` parameter
&gt; Would the removal of "extends Thread" from connectionHandler's declaration have an impact on this, where concurrency/multi-thread safety is concerned? No. It's likely that earlier definitions started out having this as a thread but now that things 'happen elsewhere' the need for it to have a #start method to be called has been simplified because its running either as its own Runnable controlled outside its scope; its running in a thread pool, or its asynchronous in nature (Netty) and is leveraged differently (Selectors.) There are two objects out of scope, connections.add() and the theStopFlag which hold the magic. As long as ConnectionHandler objects are self contained away from touching these things you're good. Normally in these network scenarios your handler code doesn't reach outside its scope. 
`class Foo extends Thread` Really only gives the methods required to call the "run" method from a new thread. It does not inherently make code run concurrently. To do that, you have to call the `start` method on a thread. &gt; To touch on what you said at the end, does this mean that the lack of extend thread suggests the opposite? (i.e. it inherently would not run concurrently) That is a tricky question :) You see, whether or not code runs concurrently isn't something that you can deduce simply by the presence of "extends Thread". For example, if I called `Foo#run` That would not cause two threads to be running, it is just a method call. However, I could do `CompletableFuture.runAsync(foo::run)` And that would cause `foo#run` to run concurrently. The Thread extension enables concurrent execution, it doesn't cause it. The absence of the thread extension also does not prevent concurrent execution.
Perfect, thanks a lot for your help and the easy to understand explanation! 
If the class implements Runnable or Callable then the class is likely being instantiated and passed into an Executor which manages a pool of threads. If this is the case, then maybe someone forgot to remove a comment.
Somewhere, some code is looking at your method and its annotation and figuring out how to translate an HTTP request (text on the wire) into a method call. Try looking at the reflection APIs, there are a few methods that the framework could call but [this](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getAnnotation-java.lang.Class-) is the most likely. The framework's pulling out that annotation and calling a method to get its value, and that value will be the string "authentication". It'll most likely use that string to determine how to call your method. So you'll get an HTTP request with a header line "authentication: asdf", and the framework will pass "asdf" into your method.
As an aside, looking over more of that code, this isn't great Java (even excluding concurrency issues). Looks like stuff written against old java, but also had some not great practices. Try-with-resources would clean up a bunch of this code.
Sadly the lecturer who takes my Java modules isn't great and often gives us starting points which have bad practices in them/outdated ways of doing things. In cases like this, where I'm ignorant about something, it can often make it difficult to learn. I've never actually dealt with the try-with-resources functionality but I'll take your advice and see if I can clean some of it up! 
Yeah it seems like Kotlin really kicked their ass in to gear and I couldn't be enjoying it any better. Modern Java doesnt feel as bad to write as old Java, though I still use Kotlin for all non work things (work team uses Java, I dont want to be the new guy making big (not as big as they are making it out to be) decisions and getting fired lol) because it's simply easier to write and read to me.
Im not super familiar with "full pattern matching" yet. I look at prolog (what ive heard is pattern matching the language) and think "what is going on"? I get the idea behind pattern matching but when I actually look at code that has actual pattern matching I just WTF in my head and go back to my simple kotlin smart casting...
Moved to IntelliJ and don't want to get back Eclipse :)
I'll answer it by removing parts of the code, adding it back explaining as we go. Let's start: imagine we are writing a library system, and we wanted a method that returned every single book inside the library system. The code could look something like this: public List&lt;Book&gt; getBooks() { // code to get books from the database return books; } Now let's imagine that we want some kind of authentication on this. We can add a parameter to our method, it's an authentication token which we have to check. After we check it, we can return the books. public List&lt;Book&gt; getBooks(String authentication) { if (!AuthenticationUtil.isAuthorised(authentication)) { throw new UnauthorisedException(); } // code to get books from the database return books; } The code I've written doesn't really matter, but it's to show how the parameter would be used. Now let's imagine we've now exposed this method over HTTP, and someone can call this method. Say we're using a Java library, and that library allows auto-population of parameters by data given in the web-call. Maybe it would look something like this... public List&lt;Book&gt; getBooks(@HeaderParam("authentication") String authentication) { if (!AuthenticationUtil.isAuthorised(authentication)) { throw new UnauthorisedException(); } // code to get books from the database return books; } And at this point, hopefully each part of the line should make sense to you.
People saying it's malicious or trying to figure out intent: Cloud providers need a custom variant to work better with different cloud situations like Lambdas, or on demand scales. This wasn't possible till recent license / certification changes. Same reason why AWS has their own jdk. They have to release code due to license requirements. And code being open source does not automatically make it safe, unless some indipendant entity puts in time to verify it. Everyone "assumes" there are other people reading it, and no one does, much like openssl bug.
Programming help should go in /r/javahelp. **Removed**
Hidden behind an e-mail harvester. No-go. **Removed**
So, I see lots of accurate answers on here but IMO none of them is really great for a beginner. My somewhat redundant answer: Annotations, which start with @, are opaque magic. '@HeaderParam("whatever")' is defined somewhere to do something. It could do anything; it may as well be magic. The annotation itself is just a sticky note. You can define an annotation somewhat like a class to hold values of your choice (see [here](https://docs.oracle.com/javase/tutorial/java/annotations/declaring.html)) and then tack these annotations on to things (class, function, parameter, whatever) by adding '@MyAnnotation' before the declaration you want to annotate. The annotation by itself doesn't do anything at all, it just records into your compiled code the fact that you stuck a note on this parameter. The magic comes later using reflection. Reflection is the Java name for code inspection, where some piece of code is able to examine the properties of some other piece of code. Somewhere (presumably) there is some code in a framework you are using, that will not just call functions on your class, but is using reflection to check if this annotation is present. If it is, it takes some action. We can't tell in this thread what that action will be, because we don't know what framework you are using which defines, and then acts upon the presence of, this @HeaderParam. (At least I don't know.) Some people have guessed a meaning based on the name, but in order to be sure you'd need to read and understand the documentation of the framework you're using. Your teacher should be able to point you at that documentation, but be warned that HTTP request framework documentation is likely to be overwhelming for a beginner. TL;DR: Here be dragons. Annotations were created just specially to let library and framework designers do clever black-box magic that beginners can use without understanding it.
You joined Reddit a year ago and this spammy shit is what you choose for your first comment? Hmm. Glad to see people are finally getting tired of this crap and downvoting it though.
Caffeine has asynchronous caches, e.g. AsyncLoadingCache, with a Guava like api.
JsonPath expression is for a different purpose.
Why not https://github.com/ben-manes/caffeine ?
Why point of using Ehcache for non-distributed caching when it's slower than alternatives for local-cache?
It looks like in your [submission](https://www.reddit.com/r/java/comments/b3o6m6/extra_credit_question/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The article uses jcache api, so it's not a too far stretch to replace the implementation with any flavour you want.
Except if some new syntax sugaring features compile into 8 compatible bytecode.
JetBrains are notorious for their propaganda/troll-style marketing.
Your regular reminder that you probably don't want to update to Java 12. Stick with Java 8 or 11 (the LTS releases), and get the security patches from someone other than Oracle (AdoptOpenJDK, Amazon Corretto, your distro etc). https://blog.joda.org/2018/10/adopt-java-12-or-stick-on-11.html
It looks like in your [submission](https://www.reddit.com/r/java/comments/b3ovhz/any_small_opensource_projects_i_can_work_on/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You should still have the original source files. Still, such questions belong in /r/javahelp, not here. **Removed**
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Because it's generally "fast enough", has wide industry penetration, and leaves the door open for distributed caching in the future without re-implementing your cache layer. There are certainly applications where every ms counts, and you should definitely use the fastest cache available for that. For the rest of us, we're just trying to turn a 200ms database query into a 2ms cache hit... and if we can do it with a library that has a large community of users even better.
The market demand for Java Developer is insane. If you already have programming experience in java, you should be able to land any (I mean \*any\*) Junior Developer role, in any company. &amp;#x200B; Just start applying to jobs (not itnernships) and you'll land one in no time. Also don't be afraid of applying if they ask for "2 years of experience" or such bs. Those job postings are copy-pasted by some bored manager. Just send a nice cover letter along your CV and, if they ask for exprience, explain there that you don't have it but you are eager to learn more, working already for a year. &amp;#x200B; You can also gamble with the salary. if you like the position but it requries too much experience, try asking for a salary which is lower than what a really experienced developer would get. Then they'll figure they can teach you in 6 months or so, while paying you a little lower until you really get comfortable. &amp;#x200B; Best or luck! :) 
This part seems familiar in the corporate world - &gt; I am C√©dric. I am not Gradle Inc. &gt; I am C√©dric. I am not Kotlin. &gt; I am C√©dric. I am not Groovy. &gt; Technologies live and die, I‚Äôm not interested in being married with a technology, 
To real
Good stuff. Thanks for the post.
Those topics that you mentioned are required to fully understand how an application works. It will really help when you are already working using frameworks. If you have already the basics, then I suggest you study the Spring Framework. This is widely used in the industry today. It is framework for web application development using Java as a main backend language. You can search in Udemy for these tutorials. Make a personal web app then play around. Watching Udemy spring framework videos can give you insights of what are the other technologies that you need to study in order for you to make a web application. You can't find these technologies in your school. Then after backend, you could also learn frontend. I suggest start learning JavaScript first then proceed to Angular Framework. Build a personal repository using GitHub for your personal projects. Then you can present these projects to your employer once you are done with your schooling. This will be a plus plus plus advantage and you can earn above average salary for fresh graduates, if you have these technologies. Just make sure you can explain it well to your interviewers. Well, good luck! &amp;#x200B; Correction in your statement about 4 main loops. These are not loops. They are called Object Oriented Programming concepts. &amp;#x200B; Check on this site. [https://github.com/kamranahmedse/developer-roadmap](https://github.com/kamranahmedse/developer-roadmap) You can choose there where to start. Happy Coding! :) &amp;#x200B;
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
i think i've seen that there's quasar integration for vertx too. though i guess i haven't grokked what the advantage of that is over just using quasar or kotlin directly (unless you've got an existing vertx pipeline) 
i'll have to dig into it when i get some time. i did a guave cache integration and had to use a convoluted work-around (effectively using placeholder values in the cache, handling the high-latency loading outside the cache, and then inserted them only when ready)
&gt; this is questioning my integrity, which is something I cannot accept sounds like a great guy. with everything, but especially open source, there's one simple rule: trust and verify 
It looks like in your [submission](https://www.reddit.com/r/java/comments/b3salx/javadoc_links_to_current_method_implementation_is/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The world is full of shit devs. You're probably one of them. 
Yes, this is how the cache works where the "placeholder value" is a `CompletableFuture`. When the future completes successfully the cache is updated to calculate its weight, TTL, etc. If it fails (or null value) then the entry is removed. This is a bit quirky if built on top of Guava as you might want accurate stats and eviction behavior. Otherwise it's probably what you imagined but provided out of the box.
Try having a look into Spring Integration and the black magic of Message Converters sometime...when something unexpected happens (and it always does), it's quite the pain to figure out.
FYI, here's the talk Abstract Reactive programming offers Java developers a way to build message-driven, elastic, resilient, and responsive services...yet many Java developers don't know where to begin. The Reactive Streams initiative provides a baseline and Project Reactor provides a great way to become immediately productive, leveraging reactive capabilities from end to end. Whether you're coming from a Spring MVC environment or a functional perspective, Reactor empowers you to spin up fully reactive Spring Boot 2 applications quickly and efficiently. In this talk, the presenter dives into the net-new Netty-based web runtime and shows you how to: * integrate easily with existing Spring-stack technologies * easily transition from blocking to reactive applications &amp; systems * define your API in an imperative style *and* functionally, reaping all benefits both ways * leverage powerful new testing mechanisms to make code better and life easier *The presenter will code all examples live and in real time*. This is not an abstract discussion, come to gain real, practical knowledge!
This is a black day f√ºr Groovy.
Strange that someone who knows the difference between junior, senior and bad devs is also the person asking decidedly amateur questions such as "*In Java, How many Objects starts being a problem?*" and "*\[Streams:\] This is new in Java8, right?*", who doesn't know if Swing or JavaFX is the way to go and who spurts utter nonsense like "*Just make sure you don't put the java certs on your CV, the industry laughs with devs with a java certification.*". So no, no examples. Just a sad little person. Shush kid. Come back when you graduate. 
eh, the sooner groovy can die... he's right: kotlin is better in almost every objective way. groovy was a solution to the functional paradigm with the pre-8 jvm.
Whens the interview? If it's passed, how did you do? What kind of questions did you end up getting?
&gt;what objects, methods and classes are This and this alone ( you ONLY have 2 yours ) Nobody can understand Java without understanding OO theory. Introduce them to OO theory and use Java as the example language.
go eat a bag of dicks
He says nothing of the sort.
Thanks dude for the great advice
Have a look at this old post about Scala Pattern Matching. Java pattern matching with records will be very similar: https://www.tutorialspoint.com/scala/scala_pattern_matching.htm - in particular, see the section on "Matching using Case Classes" (Java will call them "records").
Thanks man appreciate it 
I have made a VDO showing this in action posted on [Immutable Data with FunctionalJ.io!](https://www.youtube.com/watch?v=Q_cdFh9fhxY).
singletons is cancer. trust me.. Its just pain down the road. Actually you should REMOVE all static state. Static state is cancer. The only static methods i accept are methods that can be inlined. Constants of course, since those are inlined anyways. a tip from my experience of 15 years.
I'm not sure if I'm understanding it all the way. Can you not already do those in Java and Kotlin?? ``` fun main() { data class Person(val name: String, val age: Int) val alice = Person("Alice", 25) val bob = Person("Bob", 32) val charlie = Person("Charlie", 32) listOf(alice, bob, charlie).forEach { when (it) { alice -&gt; println("Hi Alice!") bob -&gt; println("Hi Bob!") is Person -&gt; println("Age: ${it.age} year, name: ${it.name}?") } } } ``` Is there something I'm missing here? Do the examples not show the full extent of pattern matching? Cause what I'm seeing with `var match {}` is just a `switch` or `when`
FYI - the formatting got messed up in your post. In your example, it looks like you have to allocate some temporary objects to do the matching (I don't know Kotlin well - but that's what it looks like). You don't need to do that with pattern matching. But, the larger feature you're missing is the extraction. For example, in Scala: case class Person(name: String, age: Int) val p: Person ... p match { case Person(x, 14) =&gt; // catches all 14 year olds and puts their name in X case Person(x, y) =&gt; // extracts both name and age into x,y } This only scratches the surface. You can nest to any level creating incredible complicated patterns. The canonical example is an AST - here's an old post that shows it in Scala: https://www.artima.com/pins1ed/case-classes-and-pattern-matching.html
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
English its not may main language, im working with java for about 2 years now, i've developed java applications with jax-rs, jpa and little of spring framework, you think that i can work in other country, i think the main challenges will be the language.
nice!
This is solid advice. Due to corporate politics and such, we sometimes post jobs at a higher level that say that require a certain experience level. The reasoning behind it is that in the case they get the ideal candidate they've already got approval for the higher position and salary level. Here's the kicker, most of the time they're actually perfectly fine with junior developers. I complain about it all the time, because most people won't apply if they don't have the right experience. I say if you find a job for a company you'd like to work at, go ahead and apply. This may be the exact case they're going through. This isn't always the case. I'm just encouraging you to give it a shot. 
üëç Sure, Thanks. I'll consider another pattern, perhaps a fluent API.
Groovy's dynamic nature is phenomenal for testing. Especially when coupled with spock
That's just a scab over not using appropriate di.
Even when using "appropriate" di, spock bdd tests are incredibly effective and easy to write, easy to read, and easy to maintain. 
Yea and also spring cloud data has a weird release train which doesn‚Äôt work with the latest of spring boot sometimes.
But when using appropriate di, mockito or similar work just as well and you get all the benefits of static typing so :shrug:
My advice is to stop focusing so much on Java, and start focusing on honing your skills as a software engineer. Any language will do to start you off, but you should focus on coding exercises on sites like Hacker Rank, leetcode, and read books like cracking the coding interview. Getting the interview is a matter of polishing your resume, passing the interview requires knowledge of data structures, algorithms, and the ability to white board. The expectations for new hires are usually set realistically low, but Java isn't a replacement for common sense. Focusing on these steps first, get your foot in the door, and fake it till you make it. &amp;#x200B; I also suggest continuing your education in other languages besides Java for long term success, and developing a broad skill set in a few different domains. If you aren't tinkering with Linux yet, start. If you aren't building any side projects, think of something interesting or start committing to something else in the open source ecosystem where employers can find your work. Definitely learn languages outside of OO. Learn a compiled language. Learn a functional language. Get as much perspective as you can, from as many angles as you can and you can easily pull 200k+ in a matter of years with some hard work.
Thanks you so much for your awesome feedback bro
Interesting stuff, it's really not easy to handle so many different kinds of stuff on date due to cultural differences.
&gt; eh, the sooner groovy can die... that's completely the opposite of what he's advocating. did you even read the post?
Ahh don't you just love all the ways we write dates. I thought the yyyymmdd vs mmddyyyy vs ddmmyyyy and whatever for separators were bad enough but apparently we are more creative than that.
Right? And this is still pretty tame. At least there are days, month and years. The months are in line with our weird religious compromise from 55BCE (aka the Julian calendar). And apart from some head of state changing you know what is going on beforehand. Compare Chinese, where you have two kinds of months, and actually need astronomy. Or Pawukon in Indonesia, which I can't even describe. 
it was yesterday, it was only coding exercises ( first interview)
Right? And this is still pretty tame. At least there are days, month and years. The months are in line with our weird religious compromise from 55BCE (aka the Julian calendar). And apart from some head of state changing you know what is going on beforehand. Compare Chinese, where you have two kinds of months, and actually need astronomy. Or Pawukon in Indonesia, which I can't even describe. 
I started (when I can), writing 21 March, 2019 That way, there can be no confusion. Unless they don‚Äôt speak English, but at least it‚Äôs obvious what‚Äôs what.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Next time I need to explain to someone why things that seem like they should be simple aren't, I'll send them this article.
[ISO 8610 of GTFO](https://en.wikipedia.org/wiki/ISO_8601)
**ISO 8601** ISO 8601 Data elements and interchange formats ‚Äì Information interchange ‚Äì Representation of dates and times is an international standard covering the exchange of date- and time-related data. It was issued by the International Organization for Standardization (ISO) and was first published in 1988. The purpose of this standard is to provide an unambiguous and well-defined method of representing dates and times, so as to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times. In general, ISO 8601 applies to representations and formats of dates in the Gregorian (and potentially proleptic Gregorian) calendar, of times based on the 24-hour timekeeping system (with optional UTC offset), of time intervals, and combinations thereof. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Were talking about writing 
/r/ISO8601
If this version of Java writes a date as ÂÖÉÂè∑2 and another version of Java 20‚Äì40 years from now also uses ÂÖÉÂè∑ as a placeholder for the subsequent era, will there be a risk of such dates being misinterpreted?
Well, good luck. :)
I rarely use dynamic typing in my tests. You get all the benefits of static typing with groovy if you don't use `def` for anything. What you do get with Spock is the bdd dsl, and the easy assertions in the then block. 
[Relevant XKCD](https://xkcd.com/1179/)
&gt;You think that i can work in other country, i think the main challenges will be the language. &amp;#x200B; Well, yes, the language is definetely a challenge, and you should speak more or less fluent English (let's say level B1/B2). &amp;#x200B; Other than the language barrier, sure, working abroad should be easy -- from my experience, Java is searched for everywhere in the world :) 
&gt; 55BCE 55BC - FTFA
Yeah? Today is 2019-03-22.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
More than 1/2 of this is him making bad jokes.
Depends on your skill with Java and Spring. If you are fairly new to it, I found [Spring Framework Guru](https://www.udemy.com/spring-framework-5-beginner-to-guru/) on Udemy to be rather helpful, getting you familiar with the main tools of Spring (Boot). There's probably many more resources out there but this one I personally went through as a beginner and learned quite a bit. &amp;#x200B; &amp;#x200B; &amp;#x200B; ^(Mods will probably give you shit for this question, see "NO learning Java related questions" in sidebar.)
Find a good opensource project on github, using Java/Spark/Srping technologies, read code, google parts you don't understand. That way is better IMO. 
No idea, what atheism has to with that. Running theory is that Jesus was born in 4 to 8 BCE. So take your downvote.
I won‚Äôt lie. This sounds like a horrible idea. Especially for classes which have multiple constructors and simply because the syntax is leaving parsing relevant data up-to the compiler/VM. Unless u intend to have classes implement some parseable interface and then call that to form an object. However if that‚Äôs the case, it would push proper error notifications to runtime instead of compile time. Besides it feels like a misguided goal for a language that, for some stupid reason, prides itself on its verbosity.
If Java had a notion of list literals (I don't mean arrays, but object lists), and some other such common things, I could see this being useful in places. But that's a lot of complexity to add just so you can replace this: Foo.of("hello world") With this: Foo`hello world` I'm basically saying, we're already there, adding special syntax to save 2-3 keystrokes is not useful. The type inference thing also doesn't help a lot because: FooBar foobar = `hello world`; var foobar = FooBar.of(`hello world`); var foobar = new FooBar(`hello world`); Again, not that much shorter or different.
&gt; Besides it feels like a misguided goal for a language that, for some stupid reason, prides itself on its verbosity. When you see something and it seems like it's done "for some stupid reason", maybe you should investigate further, rather than just blindly assume everyone is stupid. Java doesn't pride itself on verbosity, but on core language simplicity. This means we can't just jump for our guns adding custom syntax for every trendy use case of the day, because this ends up as a language with a million shortcuts that become indecipherable in practice (case in point, Perl, or closer to home: Scala).
From what I‚Äôve read on the topic, Java was developed as a long for less experienced developers such that they can develop professional level applications while not causing as many bugs as they would had they developed in the harder to learn C++. Java‚Äôs verbosity was an intentional design decision to ensure that whatever a person tries to do, is what they want to do. Language simplicity doesn‚Äôt require keywords like implements and extends when Java‚Äôs predecessor, C++, required simpler semantics. Java is verbose buddy. It didn‚Äôt even add support for var semantics until pretty recently and even then there heavy pushback to include it all because it‚Äôs counter to Java‚Äôs philosophy (even though it can save u just under half a line length, when assigning a new variable).
Interesting, but I don't think I agree with all of it. In particular: &gt; Processing of the literal should not be limited by Java's escape mechanisms. User-defined literals need access to the raw string. Note that this is especially useful for regex, but would also be useful for files on Windows: But we are already considering new syntax for raw strings in Amber, so why muddy the waters by introducing a new, entirely orthogonal literal syntax in which raw strings can also appear, but with slightly different rules? It's just more for people to remember. Assuming e.g. `\"literal text"\` syntax is chosen for a general raw string literal mechanism for the sake of argument (possibly variable length), then surely the following is good enough: // user-defined literals var pattern = Pattern\"strata\.\w+"\; // is equivalent to var pattern = Pattern"strata\\.\\w+"; // or var pattern = Pattern.compile(\"strata\.\w+"\); // today var pattern = Pattern.compile("strata\\.\\w+"); &gt; Today, the `\` needs to be escaped, making the regex difficult to read. &gt; Clearly, the problem with parsing raw literals is that there is no mechanism to escape. But the use cases for user-defined literals tend to have constrained formats, eg. a date doesn't contain random characters. So, although there might be edge cases where this would be a problem, they would vert much be edge cases. I think that's a pretty weak justification for the limitation. Also bear in mind the more general raw string solution offers opportunity to still allow escapes using a custom escape marker. Also I don't think the proposal is necessary to facilitate compile-time checking of string parsing. Can't we achieve this off the back of all the new work on constant propagation and stuff? At which point the new syntax: var thing = Thing"thing literal"; may as well just be sugar for: var thing = new Thing("thing literal"); as they can both be checked by the compiler. I don't think this adds all that much at this point, and possibly hurts readability.
I‚Äôm so confused by the arguments about saving typing time or line size. Do you guys not do stuff like Pr&lt;tab&gt;o&lt;tab&gt; p&lt;tab&gt; = new Pr&lt;tab&gt; when you‚Äôre writing code?
I don‚Äôt write in java aside from assignments in which I have to; but no, I don‚Äôt do that when I am made to write in it. Besides having shortcuts for a clear language flaw feels like your avoiding the problem.
If a company hired you for a Spring job knowing you had no (recent) experience I would expect them to have a training period in mind for you. I don't think it's realistic to learn all that in just 2 week but if you want to keep yourself busy during that time I'd go for "Head first Java", an starter book with lots of practical examples and good pacing.
No, take yours.
There are also old systems from the 80s that still think the current era is Sh≈çwa instead of Heisei, and everything would be clunky but fine if not for the fact that 2025 would be Sh≈çwa 100 and those systems might have not been designed for 3-digit years: https://www.theguardian.com/technology/2018/jul/25/big-tech-warns-japan-millennium-bug-y2k-emperor-akihito-abdication
The proposal is all about the compile-time parsing and validation, and hopefully the avoidance of repeating those checks at runtime. Its not about keystrokes.
As I said towards the end, the exact mechanism for providing this feature is open. If constant propagation can achieve it then great (although I doubt it would without further work). The keystrokes point is most significant when calling into methods, not when declaring a variable.
Thanks for the reply!
It increases the level of abstraction. Your argument would also apply to Unicode strings: why as the complexity of Unicode to the compiler and jvm when there are libraries if you need it? Use byte array constants!
I actually had the same issue. You have likely installed a different version of the JDK then you use for executing the Java program. I removed my JDK and installed the same version as the runtime I have. Java SE SDK 8 with the latest Java runtime
You need to compile it first and then run the compiled file. Java compiler command is javac &lt;filename&gt;. Also HelloWorld likely had a .Java extension. You need to include this when compiling and running the subsequent class file created by the compiler
&gt; As I said towards the end, the exact mechanism for providing this feature is open. If constant propagation can achieve it then great (although I doubt it would without further work). Well yes it would certainly need further work. But much of the same work would be required to facilitate this feature too, so I still don't see where the advantage lies. &gt; The keystrokes point is most significant when calling into methods, not when declaring a variable. True, but I think the loss of clarity also becomes proportionally more significant.
your runtime is older than the jdk you compiled the program with compare java -v with javac -v
Let me tell you a story about a jackass who lived in 2001. I had taught myself C and C++ and Perl in high school and worked briefly as a web developer before going to college. In college, we used Java exclusively. Jackass young /u/best_of_badgers wrote up this 10 page sarcastic "essay" on all the ways that C++ was *so obviously* superior to Java, focusing entirely on trivialities like "line length" and "time to execute an empty loop". How could all these *super dumb professors* honestly prefer a pansy hand-holding slow language like Java to a Real Language For Men like C++? I've been a Java programmer for 16 years. It's so embarrassing.
not a suitable subreddit, i think. you always can go to stackoverflow with such things
This comment is so full of bullshit, it's overflowing.
Agreed.
Increasing the level of abstraction just as a goal on its own is actually a bad thing. Especially at the cost of making the core language more complex. The goal should be useful abstraction. And my point is that this is not useful. 
I came to say "This is useless unless it is compile time" and was happy to see that in the proposal. I agree that if it is just sugar for calling a constructor it is not useful, but I think you are wrong about the usefulness given that it is compile time. You may well be right about the complexity cost still.
 var thing = new Thing("thing literal"); At first I thought it was just saving keystrokes, but the difference is that it is compile time. Month jan = "January"; Month march = "Smarch"; Real dumb example, but the second line fails to *compile*, not at run time.
Thank you, slaughteryd!
For creativity, I had once a project for French code of Law, where for the post revolutionary period the dates where using the (short lived) [French Republican calendar](https://en.wikipedia.org/wiki/French_Republican_calendar) (thankfully, it wasn't time and date, using the '10 hours of 100 minutes' day)
**French Republican calendar** The French Republican calendar (French: calendrier r√©publicain fran√ßais), also commonly called the French Revolutionary calendar (calendrier r√©volutionnaire fran√ßais), was a calendar created and implemented during the French Revolution, and used by the French government for about 12 years from late 1793 to 1805, and for 18 days by the Paris Commune in 1871. The revolutionary system was designed in part to remove all religious and royalist influences from the calendar, and was part of a larger attempt at decimalisation in France (which also included decimal time of day, decimalisation of currency, and metrication). It was used in government records in France and other areas under French rule, including Belgium, Luxembourg, and parts of the Netherlands, Germany, Switzerland, Malta, and Italy. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
As mentioned in the other comments you compiled with javac from a new JDK (JDK 12) and try to run with java from a JDK or SDK at version 8. &amp;#x200B; The \`Java\` command you invoked is probably the default java on your machine (which is 8) &amp;#x200B; To get this example running you will need to figure out where you installed JDK 12 and run the java binary from its bin directory.
unless we stop writing code, this book will never be outdated
Yes, but my point is that if you introduce compiler machinery to perform this checking it can just as easily be applied to a vanilla constructor invocation. That is to say, the expression `new Month("January")` could also be checked at compile-time. I did try to express this in my last comment, apologies if it didn't come across. Either way you're going to have to impose the same restrictions on the instantiating code (i.e. ensure that it's not side-effecting etc.) and I don't see any argument as to how new syntax at the call-site will help to facilitate or enforce this.
I feel all of the JVM languages are doing well and serve their purpose quite well as they have different focuses. Specifically with Java and Kotlin, I don't think either will "kill" the other. Kotlin can serve as the language that prototypes new features and Java will take a pragmatic approach and implement the most useful ones without having to risk polluting the language with an ill thought out feature. While Kotlin can benefit from JVM optimizations when said features are adopted by Java. 
You can use / also for windows files for Java because / always get replace with current seeperator char. Look at file constructor source
You've stated it a lot clearer in this post. You have to define allowable cases, for the compiler, in either case, and you don't need literals to do it.
Ah fair enough. I'd expect some other behavior, like they should be value objects, == equal, evaluated at compile time and internalized like strings.... So I think Valhalla is probably prerequisite. This is my personal opinion only, I'd prefer different syntax so that I wound never have to wonder if the code in the constructor would execute at compile time or runtime.
I think you are right about the syntax in the edit, that it would be substantially better, and also too complex! I still think there would not be a "call-site" and one would not want to think of it as "just different syntax" because there is no "new" behind the scenes.
**Edit:** Yeah you know, I am just going to say "You know what would be great? Value Types." because really what I like about this idea is that if it does all the other things I think it needs to do, it would just be project Valhalla, and I don't care much about the syntax anyway :-D
Many seems to praise it as must-read for every Java developer. Does this mean it helps someone using Java 8 or above in corporate environment?
&gt; This is my personal opinion only, I'd prefer different syntax so that I wound never have to wonder [...] A reasonable concern. Magical best-effort behind-the-scenes optimisations and checks are nice, but sometimes we want the peace of mind to know for sure they're applied. I think the more "Java-like" way to approach that would be to introduce a new annotation. The same way we ask the compiler to enforce other invariants with annotations like `@Override` or `@FunctionalInterface`. Specifically, we could introduce an annotation `@ConstantExpression` or something. When applied to a method or constructor, this would tell the compiler to throw an error if that method or constructor can't be constant-propagated and compile-time-checked. Which brings us to another point. &gt; [...] if the code in the constructor would execute at compile time or runtime. I may be misunderstanding what I've read about the constant propagation work in Java. but I expect the expression will still probably be re-evaluated at runtime. We still get a performance increase because it's only run once per class load, no matter how many times the expression is evaluated. This is important as we may run against a different version of the parser class than we compile against! For similar reasons, perhaps the more Java-like way to perform the check at compile time would be to emit a warning rather than an error when the expression fails to evaluate.
I strongly doubt you'll get user defined literals in quite the way you want, but have a look at the \`java.lang.Constant\` package in Java 12, and have a look at [https://www.youtube.com/watch?v=iSEjlLFCS3E](https://www.youtube.com/watch?v=iSEjlLFCS3E) from the JVM language summit last year.
The examples are using Java, but the ideas are not bound to any single programming language. The book gives good guidelines on how to write readable, maintainable code which is a joy to work with :) 
Cache2k
Clean code is not about design patterns, nor about any specific programming language even though it uses Java *to illustrate some concepts*. Clean code is a guideline to produce higher quality, easier readable and maintainable code in any environment (hobby to enterprise) independent of programming language. It is an absolute eye opener showing what commonly is done wrongly, why and how it can be done better. In certain parts, uncle Bob is a tad militant and way too strict, but the overall quality and gist of the book is exceptional. IMO, an absolute must read for intermediate and up programmers. It is not suitable for absolute beginners, though. The introduced topics are too high level.
Generally, bpoks about concepts will not really become outdated. A big problem I currently see is that more and more learning goes towards specific implementations and languages and less and less goes about *concepts*. People tend to look for and learn *how to do x in language y* rather than *how and why do x* or *what principles and concepts are necessary to to whatever they want*.
This is now 8 years old. I'd expect a bit more than a rehash of the basic idea if people want to keep milking it. At least some discussion how the changes in hardware and JVMs have affected it.